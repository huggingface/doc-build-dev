import{S as Cxt,i as wxt,s as Axt,e as a,k as l,w as F,t as o,M as yxt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Lxt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as gOr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function xxt(A){let g,v,p,m,u,d,h,Eo,_i,Cf,at,bi,vi,MA,wf,je,We,Fi,Sn,EA,Rn,Pn,CA,Ti,Bn,wA,Mi,Af,La;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),_i=a("code"),Cf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),bi=a("code"),vi=o('"new-model"'),MA=o(")."),wf=l(),je=a("p"),We=o("Likewise, if your "),Fi=a("code"),Sn=o("NewModel"),EA=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),CA=o(`, make sure its
`),Ti=a("code"),Bn=o("config_class"),wA=o(` attribute is set to the same class you use when registering the model (here
`),Mi=a("code"),Af=o("NewModelConfig"),La=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var U$=s(p);m=r(U$,"NewModelConfig"),U$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ei=s(d);h=r(Ei,"PretrainedConfig"),Ei.forEach(t),Eo=r(Ae,`, make sure its
`),_i=n(Ae,"CODE",{});var J$=s(_i);Cf=r(J$,"model_type"),J$.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),bi=n(Ae,"CODE",{});var Y$=s(bi);vi=r(Y$,'"new-model"'),Y$.forEach(t),MA=r(Ae,")."),Ae.forEach(t),wf=i(Qe),je=n(Qe,"P",{});var Co=s(je);We=r(Co,"Likewise, if your "),Fi=n(Co,"CODE",{});var xa=s(Fi);Sn=r(xa,"NewModel"),xa.forEach(t),EA=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var K$=s(Rn);Pn=r(K$,"PreTrainedModel"),K$.forEach(t),CA=r(Co,`, make sure its
`),Ti=n(Co,"CODE",{});var yf=s(Ti);Bn=r(yf,"config_class"),yf.forEach(t),wA=r(Co,` attribute is set to the same class you use when registering the model (here
`),Mi=n(Co,"CODE",{});var Z$=s(Mi);Af=r(Z$,"NewModelConfig"),Z$.forEach(t),La=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,_i),e(_i,Cf),e(g,at),e(g,bi),e(bi,vi),e(g,MA),b(Qe,wf,Ae),b(Qe,je,Ae),e(je,We),e(je,Fi),e(Fi,Sn),e(je,EA),e(je,Rn),e(Rn,Pn),e(je,CA),e(je,Ti),e(Ti,Bn),e(je,wA),e(je,Mi),e(Mi,Af),e(je,La)},d(Qe){Qe&&t(g),Qe&&t(wf),Qe&&t(je)}}}function $xt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Rxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Bxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(A){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(A){let g,v,p,m,u,d,h,Eo,_i,Cf,at,bi,vi,MA,wf,je,We,Fi,Sn,EA,Rn,Pn,CA,Ti,Bn,wA,Mi,Af,La,Qe,Ae,U$,Ei,J$,Y$,Co,xa,K$,yf,Z$,NGe,Eqe,Ci,Lf,Kee,AA,jGe,Zee,DGe,Cqe,In,GGe,eoe,OGe,VGe,ooe,XGe,zGe,wqe,yA,Aqe,ek,WGe,yqe,xf,Lqe,wi,$f,roe,LA,QGe,toe,HGe,xqe,wo,xA,UGe,$A,JGe,ok,YGe,KGe,ZGe,kA,eOe,aoe,oOe,rOe,tOe,wr,SA,aOe,noe,nOe,sOe,Ai,lOe,soe,iOe,dOe,loe,cOe,fOe,mOe,y,kf,ioe,gOe,hOe,rk,pOe,uOe,_Oe,Sf,doe,bOe,vOe,tk,FOe,TOe,MOe,Rf,coe,EOe,COe,ak,wOe,AOe,yOe,Pf,foe,LOe,xOe,nk,$Oe,kOe,SOe,Bf,moe,ROe,POe,sk,BOe,IOe,qOe,If,goe,NOe,jOe,lk,DOe,GOe,OOe,qf,hoe,VOe,XOe,ik,zOe,WOe,QOe,Nf,poe,HOe,UOe,dk,JOe,YOe,KOe,jf,uoe,ZOe,eVe,ck,oVe,rVe,tVe,Df,_oe,aVe,nVe,fk,sVe,lVe,iVe,Gf,boe,dVe,cVe,mk,fVe,mVe,gVe,Of,voe,hVe,pVe,gk,uVe,_Ve,bVe,Vf,Foe,vVe,FVe,hk,TVe,MVe,EVe,Xf,Toe,CVe,wVe,pk,AVe,yVe,LVe,zf,Moe,xVe,$Ve,uk,kVe,SVe,RVe,Wf,Eoe,PVe,BVe,_k,IVe,qVe,NVe,Qf,Coe,jVe,DVe,bk,GVe,OVe,VVe,Hf,woe,XVe,zVe,vk,WVe,QVe,HVe,Uf,Aoe,UVe,JVe,Fk,YVe,KVe,ZVe,Jf,yoe,eXe,oXe,Tk,rXe,tXe,aXe,Yf,Loe,nXe,sXe,Mk,lXe,iXe,dXe,Kf,xoe,cXe,fXe,Ek,mXe,gXe,hXe,Zf,$oe,pXe,uXe,Ck,_Xe,bXe,vXe,em,koe,FXe,TXe,wk,MXe,EXe,CXe,om,Soe,wXe,AXe,Ak,yXe,LXe,xXe,rm,Roe,$Xe,kXe,yk,SXe,RXe,PXe,tm,Poe,BXe,IXe,Lk,qXe,NXe,jXe,am,Boe,DXe,GXe,xk,OXe,VXe,XXe,nm,Ioe,zXe,WXe,$k,QXe,HXe,UXe,sm,qoe,JXe,YXe,kk,KXe,ZXe,eze,lm,Noe,oze,rze,Sk,tze,aze,nze,im,joe,sze,lze,Rk,ize,dze,cze,dm,Doe,fze,mze,Pk,gze,hze,pze,cm,Goe,uze,_ze,Bk,bze,vze,Fze,fm,Ooe,Tze,Mze,Ik,Eze,Cze,wze,mm,Voe,Aze,yze,qk,Lze,xze,$ze,gm,Xoe,kze,Sze,Nk,Rze,Pze,Bze,hm,zoe,Ize,qze,jk,Nze,jze,Dze,pm,Woe,Gze,Oze,Dk,Vze,Xze,zze,um,Qoe,Wze,Qze,Gk,Hze,Uze,Jze,_m,Hoe,Yze,Kze,Ok,Zze,eWe,oWe,bm,Uoe,rWe,tWe,Vk,aWe,nWe,sWe,vm,Joe,lWe,iWe,Xk,dWe,cWe,fWe,Fm,Yoe,mWe,gWe,zk,hWe,pWe,uWe,Tm,Koe,_We,bWe,Wk,vWe,FWe,TWe,Mm,Zoe,MWe,EWe,Qk,CWe,wWe,AWe,Em,ere,yWe,LWe,Hk,xWe,$We,kWe,Cm,ore,SWe,RWe,Uk,PWe,BWe,IWe,wm,rre,qWe,NWe,Jk,jWe,DWe,GWe,Am,tre,OWe,VWe,Yk,XWe,zWe,WWe,ym,are,QWe,HWe,Kk,UWe,JWe,YWe,Lm,nre,KWe,ZWe,Zk,eQe,oQe,rQe,xm,sre,tQe,aQe,eS,nQe,sQe,lQe,$m,lre,iQe,dQe,oS,cQe,fQe,mQe,km,ire,gQe,hQe,rS,pQe,uQe,_Qe,Sm,dre,bQe,vQe,tS,FQe,TQe,MQe,Rm,cre,EQe,CQe,aS,wQe,AQe,yQe,Pm,fre,LQe,xQe,nS,$Qe,kQe,SQe,Bm,mre,RQe,PQe,sS,BQe,IQe,qQe,Im,gre,NQe,jQe,lS,DQe,GQe,OQe,qm,hre,VQe,XQe,iS,zQe,WQe,QQe,Nm,pre,HQe,UQe,dS,JQe,YQe,KQe,jm,ure,ZQe,eHe,cS,oHe,rHe,tHe,Dm,_re,aHe,nHe,fS,sHe,lHe,iHe,Gm,bre,dHe,cHe,mS,fHe,mHe,gHe,Om,vre,hHe,pHe,gS,uHe,_He,bHe,Vm,Fre,vHe,FHe,hS,THe,MHe,EHe,Xm,Tre,CHe,wHe,pS,AHe,yHe,LHe,zm,Mre,xHe,$He,uS,kHe,SHe,RHe,Wm,Ere,PHe,BHe,_S,IHe,qHe,NHe,Qm,Cre,jHe,DHe,bS,GHe,OHe,VHe,Hm,wre,XHe,zHe,vS,WHe,QHe,HHe,Um,Are,UHe,JHe,FS,YHe,KHe,ZHe,Jm,yre,eUe,oUe,TS,rUe,tUe,aUe,Ym,Lre,nUe,sUe,MS,lUe,iUe,dUe,Km,xre,cUe,fUe,ES,mUe,gUe,hUe,Zm,$re,pUe,uUe,CS,_Ue,bUe,vUe,eg,kre,FUe,TUe,wS,MUe,EUe,CUe,og,Sre,wUe,AUe,AS,yUe,LUe,xUe,rg,Rre,$Ue,kUe,yS,SUe,RUe,PUe,tg,Pre,BUe,IUe,LS,qUe,NUe,jUe,ag,Bre,DUe,GUe,xS,OUe,VUe,XUe,ng,Ire,zUe,WUe,$S,QUe,HUe,UUe,sg,qre,JUe,YUe,kS,KUe,ZUe,eJe,lg,Nre,oJe,rJe,SS,tJe,aJe,nJe,ig,jre,sJe,lJe,RS,iJe,dJe,cJe,dg,Dre,fJe,mJe,PS,gJe,hJe,pJe,cg,Gre,uJe,_Je,BS,bJe,vJe,FJe,fg,Ore,TJe,MJe,IS,EJe,CJe,wJe,mg,Vre,AJe,yJe,qS,LJe,xJe,$Je,gg,Xre,kJe,SJe,NS,RJe,PJe,BJe,hg,zre,IJe,qJe,jS,NJe,jJe,DJe,pg,Wre,GJe,OJe,DS,VJe,XJe,zJe,ug,Qre,WJe,QJe,GS,HJe,UJe,JJe,_g,Hre,YJe,KJe,OS,ZJe,eYe,oYe,bg,Ure,rYe,tYe,VS,aYe,nYe,sYe,vg,Jre,lYe,iYe,XS,dYe,cYe,fYe,Fg,Yre,mYe,gYe,zS,hYe,pYe,uYe,Tg,Kre,_Ye,bYe,WS,vYe,FYe,TYe,Mg,Zre,MYe,EYe,QS,CYe,wYe,AYe,Eg,ete,yYe,LYe,HS,xYe,$Ye,kYe,Cg,ote,SYe,RYe,US,PYe,BYe,IYe,wg,rte,qYe,NYe,JS,jYe,DYe,GYe,Ag,tte,OYe,VYe,YS,XYe,zYe,WYe,yg,ate,QYe,HYe,KS,UYe,JYe,YYe,Lg,KYe,xg,RA,ZYe,nte,eKe,$qe,yi,$g,ste,PA,oKe,lte,rKe,kqe,Ao,BA,tKe,IA,aKe,ZS,nKe,sKe,lKe,qA,iKe,ite,dKe,cKe,fKe,Ar,NA,mKe,dte,gKe,hKe,$a,pKe,cte,uKe,_Ke,fte,bKe,vKe,mte,FKe,TKe,MKe,k,qn,gte,EKe,CKe,eR,wKe,AKe,oR,yKe,LKe,xKe,Nn,hte,$Ke,kKe,rR,SKe,RKe,tR,PKe,BKe,IKe,jn,pte,qKe,NKe,aR,jKe,DKe,nR,GKe,OKe,VKe,kg,ute,XKe,zKe,sR,WKe,QKe,HKe,Dn,_te,UKe,JKe,lR,YKe,KKe,iR,ZKe,eZe,oZe,Sg,bte,rZe,tZe,dR,aZe,nZe,sZe,Rg,vte,lZe,iZe,cR,dZe,cZe,fZe,Pg,Fte,mZe,gZe,fR,hZe,pZe,uZe,Gn,Tte,_Ze,bZe,mR,vZe,FZe,gR,TZe,MZe,EZe,On,Mte,CZe,wZe,hR,AZe,yZe,pR,LZe,xZe,$Ze,Vn,Ete,kZe,SZe,uR,RZe,PZe,_R,BZe,IZe,qZe,Bg,Cte,NZe,jZe,bR,DZe,GZe,OZe,Ig,wte,VZe,XZe,vR,zZe,WZe,QZe,Xn,Ate,HZe,UZe,FR,JZe,YZe,TR,KZe,ZZe,eeo,qg,yte,oeo,reo,MR,teo,aeo,neo,zn,Lte,seo,leo,ER,ieo,deo,CR,ceo,feo,meo,Wn,xte,geo,heo,wR,peo,ueo,AR,_eo,beo,veo,Qn,$te,Feo,Teo,yR,Meo,Eeo,LR,Ceo,weo,Aeo,Ng,kte,yeo,Leo,xR,xeo,$eo,keo,Hn,Ste,Seo,Reo,$R,Peo,Beo,kR,Ieo,qeo,Neo,Un,Rte,jeo,Deo,SR,Geo,Oeo,RR,Veo,Xeo,zeo,Jn,Pte,Weo,Qeo,PR,Heo,Ueo,BR,Jeo,Yeo,Keo,Yn,Bte,Zeo,eoo,IR,ooo,roo,qR,too,aoo,noo,Kn,Ite,soo,loo,NR,ioo,doo,jR,coo,foo,moo,Zn,qte,goo,hoo,DR,poo,uoo,GR,_oo,boo,voo,jg,Nte,Foo,Too,OR,Moo,Eoo,Coo,es,jte,woo,Aoo,VR,yoo,Loo,XR,xoo,$oo,koo,Dg,Dte,Soo,Roo,zR,Poo,Boo,Ioo,os,Gte,qoo,Noo,WR,joo,Doo,QR,Goo,Ooo,Voo,rs,Ote,Xoo,zoo,HR,Woo,Qoo,UR,Hoo,Uoo,Joo,ts,Vte,Yoo,Koo,JR,Zoo,ero,YR,oro,rro,tro,as,Xte,aro,nro,KR,sro,lro,ZR,iro,dro,cro,ns,zte,fro,mro,eP,gro,hro,oP,pro,uro,_ro,Gg,Wte,bro,vro,rP,Fro,Tro,Mro,ss,Qte,Ero,Cro,tP,wro,Aro,aP,yro,Lro,xro,ls,Hte,$ro,kro,nP,Sro,Rro,sP,Pro,Bro,Iro,is,Ute,qro,Nro,lP,jro,Dro,iP,Gro,Oro,Vro,ds,Jte,Xro,zro,dP,Wro,Qro,cP,Hro,Uro,Jro,cs,Yte,Yro,Kro,fP,Zro,eto,mP,oto,rto,tto,fs,Kte,ato,nto,gP,sto,lto,hP,ito,dto,cto,Og,Zte,fto,mto,pP,gto,hto,pto,ms,eae,uto,_to,uP,bto,vto,_P,Fto,Tto,Mto,Vg,oae,Eto,Cto,bP,wto,Ato,yto,Xg,rae,Lto,xto,vP,$to,kto,Sto,gs,tae,Rto,Pto,FP,Bto,Ito,TP,qto,Nto,jto,hs,aae,Dto,Gto,MP,Oto,Vto,EP,Xto,zto,Wto,ps,nae,Qto,Hto,CP,Uto,Jto,wP,Yto,Kto,Zto,zg,sae,eao,oao,AP,rao,tao,aao,us,lae,nao,sao,yP,lao,iao,LP,dao,cao,fao,_s,iae,mao,gao,xP,hao,pao,$P,uao,_ao,bao,bs,dae,vao,Fao,kP,Tao,Mao,SP,Eao,Cao,wao,vs,cae,Aao,yao,RP,Lao,xao,PP,$ao,kao,Sao,Fs,fae,Rao,Pao,BP,Bao,Iao,IP,qao,Nao,jao,Wg,mae,Dao,Gao,qP,Oao,Vao,Xao,Ts,gae,zao,Wao,NP,Qao,Hao,jP,Uao,Jao,Yao,Qg,hae,Kao,Zao,DP,eno,ono,rno,Hg,pae,tno,ano,GP,nno,sno,lno,Ug,uae,ino,dno,OP,cno,fno,mno,Jg,_ae,gno,hno,VP,pno,uno,_no,Ms,bae,bno,vno,XP,Fno,Tno,zP,Mno,Eno,Cno,Yg,vae,wno,Ano,WP,yno,Lno,xno,Es,Fae,$no,kno,QP,Sno,Rno,HP,Pno,Bno,Ino,Cs,Tae,qno,Nno,UP,jno,Dno,JP,Gno,Ono,Vno,ws,Mae,Xno,zno,YP,Wno,Qno,KP,Hno,Uno,Jno,As,Eae,Yno,Kno,ZP,Zno,eso,eB,oso,rso,tso,ys,Cae,aso,nso,oB,sso,lso,rB,iso,dso,cso,Ls,wae,fso,mso,tB,gso,hso,aB,pso,uso,_so,Kg,Aae,bso,vso,nB,Fso,Tso,Mso,Zg,yae,Eso,Cso,sB,wso,Aso,yso,xs,Lae,Lso,xso,lB,$so,kso,iB,Sso,Rso,Pso,$s,xae,Bso,Iso,dB,qso,Nso,cB,jso,Dso,Gso,ks,$ae,Oso,Vso,fB,Xso,zso,mB,Wso,Qso,Hso,eh,kae,Uso,Jso,gB,Yso,Kso,Zso,oh,Sae,elo,olo,hB,rlo,tlo,alo,rh,Rae,nlo,slo,pB,llo,ilo,dlo,Ss,Pae,clo,flo,uB,mlo,glo,_B,hlo,plo,ulo,Rs,Bae,_lo,blo,bB,vlo,Flo,vB,Tlo,Mlo,Elo,th,Iae,Clo,wlo,FB,Alo,ylo,Llo,ah,qae,xlo,$lo,TB,klo,Slo,Rlo,nh,Nae,Plo,Blo,MB,Ilo,qlo,Nlo,Ps,jae,jlo,Dlo,EB,Glo,Olo,CB,Vlo,Xlo,zlo,sh,Dae,Wlo,Qlo,wB,Hlo,Ulo,Jlo,lh,Gae,Ylo,Klo,AB,Zlo,eio,oio,Bs,Oae,rio,tio,yB,aio,nio,LB,sio,lio,iio,Is,Vae,dio,cio,xB,fio,mio,$B,gio,hio,pio,qs,Xae,uio,_io,kB,bio,vio,SB,Fio,Tio,Mio,Ns,zae,Eio,Cio,RB,wio,Aio,PB,yio,Lio,xio,ih,$io,dh,jA,kio,Wae,Sio,Sqe,Li,ch,Qae,DA,Rio,Hae,Pio,Rqe,yo,GA,Bio,OA,Iio,BB,qio,Nio,jio,VA,Dio,Uae,Gio,Oio,Vio,He,XA,Xio,Jae,zio,Wio,ka,Qio,Yae,Hio,Uio,Kae,Jio,Yio,Zae,Kio,Zio,edo,Z,fh,ene,odo,rdo,IB,tdo,ado,ndo,mh,one,sdo,ldo,qB,ido,ddo,cdo,gh,rne,fdo,mdo,NB,gdo,hdo,pdo,hh,tne,udo,_do,jB,bdo,vdo,Fdo,ph,ane,Tdo,Mdo,DB,Edo,Cdo,wdo,uh,nne,Ado,ydo,GB,Ldo,xdo,$do,_h,sne,kdo,Sdo,OB,Rdo,Pdo,Bdo,bh,lne,Ido,qdo,VB,Ndo,jdo,Ddo,vh,ine,Gdo,Odo,XB,Vdo,Xdo,zdo,Fh,dne,Wdo,Qdo,zB,Hdo,Udo,Jdo,Th,cne,Ydo,Kdo,WB,Zdo,eco,oco,Mh,fne,rco,tco,QB,aco,nco,sco,Eh,mne,lco,ico,HB,dco,cco,fco,Ch,gne,mco,gco,UB,hco,pco,uco,wh,hne,_co,bco,JB,vco,Fco,Tco,Ah,pne,Mco,Eco,YB,Cco,wco,Aco,yh,une,yco,Lco,KB,xco,$co,kco,Lh,_ne,Sco,Rco,ZB,Pco,Bco,Ico,xh,bne,qco,Nco,eI,jco,Dco,Gco,$h,vne,Oco,Vco,oI,Xco,zco,Wco,kh,Fne,Qco,Hco,rI,Uco,Jco,Yco,Sh,Tne,Kco,Zco,tI,efo,ofo,rfo,Rh,Mne,tfo,afo,aI,nfo,sfo,lfo,Ph,Ene,ifo,dfo,nI,cfo,ffo,mfo,Bh,Cne,gfo,hfo,sI,pfo,ufo,_fo,Ih,wne,bfo,vfo,lI,Ffo,Tfo,Mfo,qh,Ane,Efo,Cfo,iI,wfo,Afo,yfo,Nh,Lfo,jh,xfo,Dh,zA,$fo,yne,kfo,Pqe,xi,Gh,Lne,WA,Sfo,xne,Rfo,Bqe,Lo,QA,Pfo,HA,Bfo,dI,Ifo,qfo,Nfo,UA,jfo,$ne,Dfo,Gfo,Ofo,Ue,JA,Vfo,kne,Xfo,zfo,$i,Wfo,Sne,Qfo,Hfo,Rne,Ufo,Jfo,Yfo,pe,Oh,Pne,Kfo,Zfo,cI,emo,omo,rmo,Vh,Bne,tmo,amo,Ine,nmo,smo,lmo,Xh,qne,imo,dmo,fI,cmo,fmo,mmo,zh,Nne,gmo,hmo,mI,pmo,umo,_mo,Wh,jne,bmo,vmo,gI,Fmo,Tmo,Mmo,Qh,Dne,Emo,Cmo,hI,wmo,Amo,ymo,Hh,Gne,Lmo,xmo,pI,$mo,kmo,Smo,Uh,One,Rmo,Pmo,uI,Bmo,Imo,qmo,Jh,Vne,Nmo,jmo,_I,Dmo,Gmo,Omo,Yh,Xne,Vmo,Xmo,bI,zmo,Wmo,Qmo,Kh,zne,Hmo,Umo,vI,Jmo,Ymo,Kmo,Zh,Wne,Zmo,ego,FI,ogo,rgo,tgo,ep,Qne,ago,ngo,TI,sgo,lgo,igo,op,Hne,dgo,cgo,MI,fgo,mgo,ggo,rp,Une,hgo,pgo,EI,ugo,_go,bgo,tp,Jne,vgo,Fgo,CI,Tgo,Mgo,Ego,ap,Cgo,np,wgo,sp,YA,Ago,Yne,ygo,Iqe,ki,lp,Kne,KA,Lgo,Zne,xgo,qqe,xo,ZA,$go,Si,kgo,wI,Sgo,Rgo,AI,Pgo,Bgo,Igo,e0,qgo,ese,Ngo,jgo,Dgo,nt,o0,Ggo,ose,Ogo,Vgo,Ri,Xgo,rse,zgo,Wgo,yI,Qgo,Hgo,Ugo,ip,Jgo,Je,r0,Ygo,tse,Kgo,Zgo,Sa,eho,ase,oho,rho,nse,tho,aho,sse,nho,sho,lho,x,dp,lse,iho,dho,LI,cho,fho,mho,cp,ise,gho,hho,xI,pho,uho,_ho,fp,dse,bho,vho,$I,Fho,Tho,Mho,mp,cse,Eho,Cho,kI,who,Aho,yho,gp,fse,Lho,xho,SI,$ho,kho,Sho,hp,mse,Rho,Pho,RI,Bho,Iho,qho,pp,gse,Nho,jho,PI,Dho,Gho,Oho,up,hse,Vho,Xho,BI,zho,Who,Qho,_p,pse,Hho,Uho,II,Jho,Yho,Kho,bp,use,Zho,epo,qI,opo,rpo,tpo,vp,_se,apo,npo,NI,spo,lpo,ipo,Fp,bse,dpo,cpo,jI,fpo,mpo,gpo,Tp,vse,hpo,ppo,DI,upo,_po,bpo,Mp,Fse,vpo,Fpo,GI,Tpo,Mpo,Epo,Ep,Tse,Cpo,wpo,OI,Apo,ypo,Lpo,Cp,Mse,xpo,$po,VI,kpo,Spo,Rpo,wp,Ese,Ppo,Bpo,XI,Ipo,qpo,Npo,Ap,Cse,jpo,Dpo,zI,Gpo,Opo,Vpo,yp,wse,Xpo,zpo,WI,Wpo,Qpo,Hpo,Lp,Ase,Upo,Jpo,QI,Ypo,Kpo,Zpo,xp,yse,euo,ouo,HI,ruo,tuo,auo,$p,Lse,nuo,suo,UI,luo,iuo,duo,kp,xse,cuo,fuo,JI,muo,guo,huo,Sp,$se,puo,uuo,YI,_uo,buo,vuo,Rp,kse,Fuo,Tuo,KI,Muo,Euo,Cuo,Pp,Sse,wuo,Auo,ZI,yuo,Luo,xuo,Bp,Rse,$uo,kuo,eq,Suo,Ruo,Puo,Ip,Pse,Buo,Iuo,oq,quo,Nuo,juo,qp,Bse,Duo,Guo,rq,Ouo,Vuo,Xuo,Np,Ise,zuo,Wuo,tq,Quo,Huo,Uuo,jp,qse,Juo,Yuo,aq,Kuo,Zuo,e_o,js,Nse,o_o,r_o,nq,t_o,a_o,sq,n_o,s_o,l_o,Dp,jse,i_o,d_o,lq,c_o,f_o,m_o,Gp,Dse,g_o,h_o,iq,p_o,u_o,__o,Op,Gse,b_o,v_o,dq,F_o,T_o,M_o,Vp,Ose,E_o,C_o,cq,w_o,A_o,y_o,Xp,Vse,L_o,x_o,fq,$_o,k_o,S_o,zp,Xse,R_o,P_o,mq,B_o,I_o,q_o,Wp,zse,N_o,j_o,gq,D_o,G_o,O_o,Qp,Wse,V_o,X_o,hq,z_o,W_o,Q_o,Hp,Qse,H_o,U_o,pq,J_o,Y_o,K_o,Up,Hse,Z_o,e2o,uq,o2o,r2o,t2o,Jp,Use,a2o,n2o,_q,s2o,l2o,i2o,Yp,Jse,d2o,c2o,bq,f2o,m2o,g2o,Kp,Yse,h2o,p2o,vq,u2o,_2o,b2o,Zp,Kse,v2o,F2o,Fq,T2o,M2o,E2o,eu,Zse,C2o,w2o,Tq,A2o,y2o,L2o,ou,ele,x2o,$2o,Mq,k2o,S2o,R2o,ru,ole,P2o,B2o,Eq,I2o,q2o,N2o,tu,rle,j2o,D2o,Cq,G2o,O2o,V2o,au,tle,X2o,z2o,wq,W2o,Q2o,H2o,nu,ale,U2o,J2o,Aq,Y2o,K2o,Z2o,su,nle,e1o,o1o,yq,r1o,t1o,a1o,lu,sle,n1o,s1o,Lq,l1o,i1o,d1o,iu,lle,c1o,f1o,xq,m1o,g1o,h1o,du,ile,p1o,u1o,$q,_1o,b1o,v1o,cu,dle,F1o,T1o,kq,M1o,E1o,C1o,fu,cle,w1o,A1o,Sq,y1o,L1o,x1o,mu,fle,$1o,k1o,Rq,S1o,R1o,P1o,gu,mle,B1o,I1o,Pq,q1o,N1o,j1o,hu,gle,D1o,G1o,Bq,O1o,V1o,X1o,pu,hle,z1o,W1o,Iq,Q1o,H1o,U1o,uu,ple,J1o,Y1o,qq,K1o,Z1o,ebo,_u,ule,obo,rbo,Nq,tbo,abo,nbo,bu,_le,sbo,lbo,jq,ibo,dbo,cbo,vu,ble,fbo,mbo,Dq,gbo,hbo,pbo,Fu,vle,ubo,_bo,Gq,bbo,vbo,Fbo,Tu,Fle,Tbo,Mbo,Oq,Ebo,Cbo,wbo,Mu,Tle,Abo,ybo,Vq,Lbo,xbo,$bo,Eu,Mle,kbo,Sbo,Xq,Rbo,Pbo,Bbo,Cu,Ele,Ibo,qbo,zq,Nbo,jbo,Dbo,wu,Cle,Gbo,Obo,Wq,Vbo,Xbo,zbo,Au,wle,Wbo,Qbo,Qq,Hbo,Ubo,Jbo,yu,Ale,Ybo,Kbo,Hq,Zbo,evo,ovo,Lu,yle,rvo,tvo,Uq,avo,nvo,svo,xu,Lle,lvo,ivo,Jq,dvo,cvo,fvo,$u,xle,mvo,gvo,Yq,hvo,pvo,uvo,ku,$le,_vo,bvo,Kq,vvo,Fvo,Tvo,Su,kle,Mvo,Evo,Zq,Cvo,wvo,Avo,Ru,Sle,yvo,Lvo,eN,xvo,$vo,kvo,Pu,Rle,Svo,Rvo,oN,Pvo,Bvo,Ivo,Bu,Ple,qvo,Nvo,rN,jvo,Dvo,Gvo,Iu,Ble,Ovo,Vvo,tN,Xvo,zvo,Wvo,qu,Ile,Qvo,Hvo,aN,Uvo,Jvo,Yvo,Nu,qle,Kvo,Zvo,nN,eFo,oFo,rFo,ju,Nle,tFo,aFo,sN,nFo,sFo,lFo,Du,jle,iFo,dFo,lN,cFo,fFo,mFo,Gu,Dle,gFo,hFo,iN,pFo,uFo,_Fo,Ou,Gle,bFo,vFo,dN,FFo,TFo,MFo,Vu,Ole,EFo,CFo,cN,wFo,AFo,yFo,Xu,Vle,LFo,xFo,fN,$Fo,kFo,SFo,zu,Xle,RFo,PFo,mN,BFo,IFo,qFo,Wu,zle,NFo,jFo,gN,DFo,GFo,OFo,Qu,Wle,VFo,XFo,hN,zFo,WFo,QFo,Hu,Qle,HFo,UFo,pN,JFo,YFo,KFo,Uu,Hle,ZFo,e6o,uN,o6o,r6o,t6o,Ju,Ule,a6o,n6o,_N,s6o,l6o,i6o,Yu,Jle,d6o,c6o,bN,f6o,m6o,g6o,Ku,h6o,Yle,p6o,u6o,Kle,_6o,b6o,Zu,Nqe,Pi,e_,Zle,t0,v6o,eie,F6o,jqe,$o,a0,T6o,Bi,M6o,vN,E6o,C6o,FN,w6o,A6o,y6o,n0,L6o,oie,x6o,$6o,k6o,st,s0,S6o,rie,R6o,P6o,Ii,B6o,tie,I6o,q6o,TN,N6o,j6o,D6o,o_,G6o,Ye,l0,O6o,aie,V6o,X6o,Ra,z6o,nie,W6o,Q6o,sie,H6o,U6o,lie,J6o,Y6o,K6o,G,r_,iie,Z6o,eTo,MN,oTo,rTo,tTo,t_,die,aTo,nTo,EN,sTo,lTo,iTo,a_,cie,dTo,cTo,CN,fTo,mTo,gTo,n_,fie,hTo,pTo,wN,uTo,_To,bTo,s_,mie,vTo,FTo,AN,TTo,MTo,ETo,l_,gie,CTo,wTo,yN,ATo,yTo,LTo,i_,hie,xTo,$To,LN,kTo,STo,RTo,d_,pie,PTo,BTo,xN,ITo,qTo,NTo,c_,uie,jTo,DTo,$N,GTo,OTo,VTo,f_,_ie,XTo,zTo,kN,WTo,QTo,HTo,m_,bie,UTo,JTo,SN,YTo,KTo,ZTo,g_,vie,e8o,o8o,RN,r8o,t8o,a8o,h_,Fie,n8o,s8o,PN,l8o,i8o,d8o,p_,Tie,c8o,f8o,BN,m8o,g8o,h8o,u_,Mie,p8o,u8o,IN,_8o,b8o,v8o,__,Eie,F8o,T8o,qN,M8o,E8o,C8o,b_,Cie,w8o,A8o,NN,y8o,L8o,x8o,v_,wie,$8o,k8o,jN,S8o,R8o,P8o,F_,Aie,B8o,I8o,DN,q8o,N8o,j8o,T_,yie,D8o,G8o,GN,O8o,V8o,X8o,M_,Lie,z8o,W8o,ON,Q8o,H8o,U8o,E_,xie,J8o,Y8o,VN,K8o,Z8o,e7o,C_,$ie,o7o,r7o,XN,t7o,a7o,n7o,w_,kie,s7o,l7o,zN,i7o,d7o,c7o,A_,Sie,f7o,m7o,WN,g7o,h7o,p7o,y_,Rie,u7o,_7o,QN,b7o,v7o,F7o,L_,Pie,T7o,M7o,HN,E7o,C7o,w7o,x_,Bie,A7o,y7o,UN,L7o,x7o,$7o,$_,Iie,k7o,S7o,JN,R7o,P7o,B7o,k_,qie,I7o,q7o,YN,N7o,j7o,D7o,S_,Nie,G7o,O7o,KN,V7o,X7o,z7o,R_,jie,W7o,Q7o,ZN,H7o,U7o,J7o,P_,Die,Y7o,K7o,ej,Z7o,eMo,oMo,B_,Gie,rMo,tMo,oj,aMo,nMo,sMo,I_,Oie,lMo,iMo,rj,dMo,cMo,fMo,q_,Vie,mMo,gMo,tj,hMo,pMo,uMo,N_,Xie,_Mo,bMo,aj,vMo,FMo,TMo,j_,zie,MMo,EMo,nj,CMo,wMo,AMo,D_,Wie,yMo,LMo,sj,xMo,$Mo,kMo,G_,Qie,SMo,RMo,lj,PMo,BMo,IMo,O_,Hie,qMo,NMo,ij,jMo,DMo,GMo,V_,OMo,Uie,VMo,XMo,Jie,zMo,WMo,X_,Dqe,qi,z_,Yie,i0,QMo,Kie,HMo,Gqe,ko,d0,UMo,Ni,JMo,dj,YMo,KMo,cj,ZMo,e4o,o4o,c0,r4o,Zie,t4o,a4o,n4o,lt,f0,s4o,ede,l4o,i4o,ji,d4o,ode,c4o,f4o,fj,m4o,g4o,h4o,W_,p4o,Ke,m0,u4o,rde,_4o,b4o,Pa,v4o,tde,F4o,T4o,ade,M4o,E4o,nde,C4o,w4o,A4o,z,Q_,sde,y4o,L4o,mj,x4o,$4o,k4o,H_,lde,S4o,R4o,gj,P4o,B4o,I4o,U_,ide,q4o,N4o,hj,j4o,D4o,G4o,J_,dde,O4o,V4o,pj,X4o,z4o,W4o,Y_,cde,Q4o,H4o,uj,U4o,J4o,Y4o,K_,fde,K4o,Z4o,_j,eEo,oEo,rEo,Z_,mde,tEo,aEo,bj,nEo,sEo,lEo,e2,gde,iEo,dEo,vj,cEo,fEo,mEo,o2,hde,gEo,hEo,Fj,pEo,uEo,_Eo,r2,pde,bEo,vEo,Tj,FEo,TEo,MEo,t2,ude,EEo,CEo,Mj,wEo,AEo,yEo,a2,_de,LEo,xEo,Ej,$Eo,kEo,SEo,n2,bde,REo,PEo,Cj,BEo,IEo,qEo,s2,vde,NEo,jEo,wj,DEo,GEo,OEo,l2,Fde,VEo,XEo,Aj,zEo,WEo,QEo,i2,Tde,HEo,UEo,yj,JEo,YEo,KEo,d2,Mde,ZEo,eCo,Lj,oCo,rCo,tCo,c2,Ede,aCo,nCo,xj,sCo,lCo,iCo,f2,Cde,dCo,cCo,$j,fCo,mCo,gCo,m2,wde,hCo,pCo,kj,uCo,_Co,bCo,g2,Ade,vCo,FCo,Sj,TCo,MCo,ECo,h2,yde,CCo,wCo,Rj,ACo,yCo,LCo,p2,Lde,xCo,$Co,Pj,kCo,SCo,RCo,u2,xde,PCo,BCo,Bj,ICo,qCo,NCo,_2,$de,jCo,DCo,Ij,GCo,OCo,VCo,b2,kde,XCo,zCo,qj,WCo,QCo,HCo,v2,Sde,UCo,JCo,Nj,YCo,KCo,ZCo,F2,Rde,e5o,o5o,jj,r5o,t5o,a5o,T2,Pde,n5o,s5o,Dj,l5o,i5o,d5o,M2,Bde,c5o,f5o,Gj,m5o,g5o,h5o,E2,Ide,p5o,u5o,Oj,_5o,b5o,v5o,C2,qde,F5o,T5o,Vj,M5o,E5o,C5o,w2,Nde,w5o,A5o,Xj,y5o,L5o,x5o,A2,jde,$5o,k5o,zj,S5o,R5o,P5o,y2,Dde,B5o,I5o,Wj,q5o,N5o,j5o,L2,Gde,D5o,G5o,Qj,O5o,V5o,X5o,x2,z5o,Ode,W5o,Q5o,Vde,H5o,U5o,$2,Oqe,Di,k2,Xde,g0,J5o,zde,Y5o,Vqe,So,h0,K5o,Gi,Z5o,Hj,e3o,o3o,Uj,r3o,t3o,a3o,p0,n3o,Wde,s3o,l3o,i3o,it,u0,d3o,Qde,c3o,f3o,Oi,m3o,Hde,g3o,h3o,Jj,p3o,u3o,_3o,S2,b3o,Ze,_0,v3o,Ude,F3o,T3o,Ba,M3o,Jde,E3o,C3o,Yde,w3o,A3o,Kde,y3o,L3o,x3o,W,R2,Zde,$3o,k3o,Yj,S3o,R3o,P3o,P2,ece,B3o,I3o,Kj,q3o,N3o,j3o,B2,oce,D3o,G3o,Zj,O3o,V3o,X3o,I2,rce,z3o,W3o,eD,Q3o,H3o,U3o,q2,tce,J3o,Y3o,oD,K3o,Z3o,ewo,N2,ace,owo,rwo,rD,two,awo,nwo,j2,nce,swo,lwo,tD,iwo,dwo,cwo,D2,sce,fwo,mwo,aD,gwo,hwo,pwo,G2,lce,uwo,_wo,nD,bwo,vwo,Fwo,O2,ice,Two,Mwo,sD,Ewo,Cwo,wwo,V2,dce,Awo,ywo,lD,Lwo,xwo,$wo,X2,cce,kwo,Swo,iD,Rwo,Pwo,Bwo,z2,fce,Iwo,qwo,dD,Nwo,jwo,Dwo,W2,mce,Gwo,Owo,cD,Vwo,Xwo,zwo,Q2,gce,Wwo,Qwo,fD,Hwo,Uwo,Jwo,H2,hce,Ywo,Kwo,mD,Zwo,eAo,oAo,U2,pce,rAo,tAo,gD,aAo,nAo,sAo,J2,uce,lAo,iAo,hD,dAo,cAo,fAo,Y2,_ce,mAo,gAo,pD,hAo,pAo,uAo,K2,bce,_Ao,bAo,uD,vAo,FAo,TAo,Z2,vce,MAo,EAo,_D,CAo,wAo,AAo,e1,Fce,yAo,LAo,bD,xAo,$Ao,kAo,o1,Tce,SAo,RAo,vD,PAo,BAo,IAo,r1,Mce,qAo,NAo,FD,jAo,DAo,GAo,t1,Ece,OAo,VAo,TD,XAo,zAo,WAo,a1,Cce,QAo,HAo,MD,UAo,JAo,YAo,n1,wce,KAo,ZAo,ED,e0o,o0o,r0o,s1,Ace,t0o,a0o,CD,n0o,s0o,l0o,l1,yce,i0o,d0o,wD,c0o,f0o,m0o,i1,Lce,g0o,h0o,AD,p0o,u0o,_0o,d1,xce,b0o,v0o,$ce,F0o,T0o,M0o,c1,kce,E0o,C0o,yD,w0o,A0o,y0o,f1,Sce,L0o,x0o,LD,$0o,k0o,S0o,m1,Rce,R0o,P0o,xD,B0o,I0o,q0o,g1,Pce,N0o,j0o,$D,D0o,G0o,O0o,h1,V0o,Bce,X0o,z0o,Ice,W0o,Q0o,p1,Xqe,Vi,u1,qce,b0,H0o,Nce,U0o,zqe,Ro,v0,J0o,Xi,Y0o,kD,K0o,Z0o,SD,eyo,oyo,ryo,F0,tyo,jce,ayo,nyo,syo,dt,T0,lyo,Dce,iyo,dyo,zi,cyo,Gce,fyo,myo,RD,gyo,hyo,pyo,_1,uyo,eo,M0,_yo,Oce,byo,vyo,Ia,Fyo,Vce,Tyo,Myo,Xce,Eyo,Cyo,zce,wyo,Ayo,yyo,ue,b1,Wce,Lyo,xyo,PD,$yo,kyo,Syo,v1,Qce,Ryo,Pyo,BD,Byo,Iyo,qyo,F1,Hce,Nyo,jyo,ID,Dyo,Gyo,Oyo,T1,Uce,Vyo,Xyo,qD,zyo,Wyo,Qyo,M1,Jce,Hyo,Uyo,ND,Jyo,Yyo,Kyo,E1,Yce,Zyo,eLo,jD,oLo,rLo,tLo,C1,Kce,aLo,nLo,DD,sLo,lLo,iLo,w1,Zce,dLo,cLo,GD,fLo,mLo,gLo,A1,efe,hLo,pLo,OD,uLo,_Lo,bLo,y1,ofe,vLo,FLo,VD,TLo,MLo,ELo,L1,rfe,CLo,wLo,XD,ALo,yLo,LLo,x1,tfe,xLo,$Lo,zD,kLo,SLo,RLo,$1,afe,PLo,BLo,WD,ILo,qLo,NLo,k1,nfe,jLo,DLo,QD,GLo,OLo,VLo,S1,sfe,XLo,zLo,HD,WLo,QLo,HLo,R1,lfe,ULo,JLo,UD,YLo,KLo,ZLo,P1,exo,ife,oxo,rxo,dfe,txo,axo,B1,Wqe,Wi,I1,cfe,E0,nxo,ffe,sxo,Qqe,Po,C0,lxo,Qi,ixo,JD,dxo,cxo,YD,fxo,mxo,gxo,w0,hxo,mfe,pxo,uxo,_xo,ct,A0,bxo,gfe,vxo,Fxo,Hi,Txo,hfe,Mxo,Exo,KD,Cxo,wxo,Axo,q1,yxo,oo,y0,Lxo,pfe,xxo,$xo,qa,kxo,ufe,Sxo,Rxo,_fe,Pxo,Bxo,bfe,Ixo,qxo,Nxo,q,N1,vfe,jxo,Dxo,ZD,Gxo,Oxo,Vxo,j1,Ffe,Xxo,zxo,eG,Wxo,Qxo,Hxo,D1,Tfe,Uxo,Jxo,oG,Yxo,Kxo,Zxo,G1,Mfe,e9o,o9o,rG,r9o,t9o,a9o,O1,Efe,n9o,s9o,tG,l9o,i9o,d9o,V1,Cfe,c9o,f9o,aG,m9o,g9o,h9o,X1,wfe,p9o,u9o,nG,_9o,b9o,v9o,z1,Afe,F9o,T9o,sG,M9o,E9o,C9o,W1,yfe,w9o,A9o,lG,y9o,L9o,x9o,Q1,Lfe,$9o,k9o,iG,S9o,R9o,P9o,H1,xfe,B9o,I9o,dG,q9o,N9o,j9o,U1,$fe,D9o,G9o,cG,O9o,V9o,X9o,J1,kfe,z9o,W9o,fG,Q9o,H9o,U9o,Y1,Sfe,J9o,Y9o,mG,K9o,Z9o,e$o,K1,Rfe,o$o,r$o,gG,t$o,a$o,n$o,Z1,Pfe,s$o,l$o,hG,i$o,d$o,c$o,eb,Bfe,f$o,m$o,pG,g$o,h$o,p$o,ob,Ife,u$o,_$o,uG,b$o,v$o,F$o,rb,qfe,T$o,M$o,_G,E$o,C$o,w$o,tb,Nfe,A$o,y$o,bG,L$o,x$o,$$o,ab,jfe,k$o,S$o,vG,R$o,P$o,B$o,nb,Dfe,I$o,q$o,FG,N$o,j$o,D$o,sb,Gfe,G$o,O$o,TG,V$o,X$o,z$o,lb,Ofe,W$o,Q$o,MG,H$o,U$o,J$o,ib,Vfe,Y$o,K$o,EG,Z$o,eko,oko,db,Xfe,rko,tko,CG,ako,nko,sko,cb,zfe,lko,iko,wG,dko,cko,fko,fb,Wfe,mko,gko,AG,hko,pko,uko,mb,Qfe,_ko,bko,yG,vko,Fko,Tko,gb,Hfe,Mko,Eko,LG,Cko,wko,Ako,hb,Ufe,yko,Lko,xG,xko,$ko,kko,pb,Jfe,Sko,Rko,$G,Pko,Bko,Iko,ub,Yfe,qko,Nko,kG,jko,Dko,Gko,_b,Kfe,Oko,Vko,SG,Xko,zko,Wko,bb,Zfe,Qko,Hko,RG,Uko,Jko,Yko,vb,eme,Kko,Zko,PG,eSo,oSo,rSo,Fb,ome,tSo,aSo,BG,nSo,sSo,lSo,Tb,rme,iSo,dSo,IG,cSo,fSo,mSo,Mb,tme,gSo,hSo,qG,pSo,uSo,_So,Eb,ame,bSo,vSo,NG,FSo,TSo,MSo,Cb,nme,ESo,CSo,jG,wSo,ASo,ySo,wb,sme,LSo,xSo,DG,$So,kSo,SSo,Ab,lme,RSo,PSo,GG,BSo,ISo,qSo,yb,ime,NSo,jSo,OG,DSo,GSo,OSo,Lb,dme,VSo,XSo,VG,zSo,WSo,QSo,xb,cme,HSo,USo,XG,JSo,YSo,KSo,$b,ZSo,fme,eRo,oRo,mme,rRo,tRo,kb,Hqe,Ui,Sb,gme,L0,aRo,hme,nRo,Uqe,Bo,x0,sRo,Ji,lRo,zG,iRo,dRo,WG,cRo,fRo,mRo,$0,gRo,pme,hRo,pRo,uRo,ft,k0,_Ro,ume,bRo,vRo,Yi,FRo,_me,TRo,MRo,QG,ERo,CRo,wRo,Rb,ARo,ro,S0,yRo,bme,LRo,xRo,Na,$Ro,vme,kRo,SRo,Fme,RRo,PRo,Tme,BRo,IRo,qRo,Y,Pb,Mme,NRo,jRo,HG,DRo,GRo,ORo,Bb,Eme,VRo,XRo,UG,zRo,WRo,QRo,Ib,Cme,HRo,URo,JG,JRo,YRo,KRo,qb,wme,ZRo,ePo,YG,oPo,rPo,tPo,Nb,Ame,aPo,nPo,KG,sPo,lPo,iPo,jb,yme,dPo,cPo,ZG,fPo,mPo,gPo,Db,Lme,hPo,pPo,eO,uPo,_Po,bPo,Gb,xme,vPo,FPo,oO,TPo,MPo,EPo,Ob,$me,CPo,wPo,rO,APo,yPo,LPo,Vb,kme,xPo,$Po,tO,kPo,SPo,RPo,Xb,Sme,PPo,BPo,aO,IPo,qPo,NPo,zb,Rme,jPo,DPo,nO,GPo,OPo,VPo,Wb,Pme,XPo,zPo,sO,WPo,QPo,HPo,Qb,Bme,UPo,JPo,lO,YPo,KPo,ZPo,Hb,Ime,eBo,oBo,iO,rBo,tBo,aBo,Ub,qme,nBo,sBo,dO,lBo,iBo,dBo,Jb,Nme,cBo,fBo,cO,mBo,gBo,hBo,Yb,jme,pBo,uBo,fO,_Bo,bBo,vBo,Kb,Dme,FBo,TBo,mO,MBo,EBo,CBo,Zb,Gme,wBo,ABo,gO,yBo,LBo,xBo,ev,Ome,$Bo,kBo,hO,SBo,RBo,PBo,ov,Vme,BBo,IBo,pO,qBo,NBo,jBo,rv,Xme,DBo,GBo,uO,OBo,VBo,XBo,tv,zme,zBo,WBo,_O,QBo,HBo,UBo,av,Wme,JBo,YBo,bO,KBo,ZBo,eIo,nv,Qme,oIo,rIo,vO,tIo,aIo,nIo,sv,Hme,sIo,lIo,FO,iIo,dIo,cIo,lv,Ume,fIo,mIo,TO,gIo,hIo,pIo,iv,Jme,uIo,_Io,MO,bIo,vIo,FIo,dv,TIo,Yme,MIo,EIo,Kme,CIo,wIo,cv,Jqe,Ki,fv,Zme,R0,AIo,ege,yIo,Yqe,Io,P0,LIo,Zi,xIo,EO,$Io,kIo,CO,SIo,RIo,PIo,B0,BIo,oge,IIo,qIo,NIo,mt,I0,jIo,rge,DIo,GIo,ed,OIo,tge,VIo,XIo,wO,zIo,WIo,QIo,mv,HIo,to,q0,UIo,age,JIo,YIo,ja,KIo,nge,ZIo,eqo,sge,oqo,rqo,lge,tqo,aqo,nqo,Zr,gv,ige,sqo,lqo,AO,iqo,dqo,cqo,hv,dge,fqo,mqo,yO,gqo,hqo,pqo,pv,cge,uqo,_qo,LO,bqo,vqo,Fqo,uv,fge,Tqo,Mqo,xO,Eqo,Cqo,wqo,_v,mge,Aqo,yqo,$O,Lqo,xqo,$qo,bv,kqo,gge,Sqo,Rqo,hge,Pqo,Bqo,vv,Kqe,od,Fv,pge,N0,Iqo,uge,qqo,Zqe,qo,j0,Nqo,rd,jqo,kO,Dqo,Gqo,SO,Oqo,Vqo,Xqo,D0,zqo,_ge,Wqo,Qqo,Hqo,gt,G0,Uqo,bge,Jqo,Yqo,td,Kqo,vge,Zqo,eNo,RO,oNo,rNo,tNo,Tv,aNo,ao,O0,nNo,Fge,sNo,lNo,Da,iNo,Tge,dNo,cNo,Mge,fNo,mNo,Ege,gNo,hNo,pNo,U,Mv,Cge,uNo,_No,PO,bNo,vNo,FNo,Ev,wge,TNo,MNo,BO,ENo,CNo,wNo,Cv,Age,ANo,yNo,IO,LNo,xNo,$No,wv,yge,kNo,SNo,qO,RNo,PNo,BNo,Av,Lge,INo,qNo,NO,NNo,jNo,DNo,yv,xge,GNo,ONo,jO,VNo,XNo,zNo,Lv,$ge,WNo,QNo,DO,HNo,UNo,JNo,xv,kge,YNo,KNo,GO,ZNo,ejo,ojo,$v,Sge,rjo,tjo,OO,ajo,njo,sjo,kv,Rge,ljo,ijo,VO,djo,cjo,fjo,Sv,Pge,mjo,gjo,XO,hjo,pjo,ujo,Rv,Bge,_jo,bjo,zO,vjo,Fjo,Tjo,Pv,Ige,Mjo,Ejo,WO,Cjo,wjo,Ajo,Bv,qge,yjo,Ljo,QO,xjo,$jo,kjo,Iv,Nge,Sjo,Rjo,HO,Pjo,Bjo,Ijo,qv,jge,qjo,Njo,UO,jjo,Djo,Gjo,Nv,Dge,Ojo,Vjo,JO,Xjo,zjo,Wjo,jv,Gge,Qjo,Hjo,YO,Ujo,Jjo,Yjo,Dv,Oge,Kjo,Zjo,KO,eDo,oDo,rDo,Gv,Vge,tDo,aDo,ZO,nDo,sDo,lDo,Ov,Xge,iDo,dDo,eV,cDo,fDo,mDo,Vv,zge,gDo,hDo,oV,pDo,uDo,_Do,Xv,Wge,bDo,vDo,rV,FDo,TDo,MDo,zv,Qge,EDo,CDo,tV,wDo,ADo,yDo,Wv,Hge,LDo,xDo,aV,$Do,kDo,SDo,Qv,Uge,RDo,PDo,nV,BDo,IDo,qDo,Hv,Jge,NDo,jDo,sV,DDo,GDo,ODo,Uv,Yge,VDo,XDo,lV,zDo,WDo,QDo,Jv,Kge,HDo,UDo,iV,JDo,YDo,KDo,Yv,Zge,ZDo,eGo,dV,oGo,rGo,tGo,Kv,ehe,aGo,nGo,cV,sGo,lGo,iGo,Zv,ohe,dGo,cGo,fV,fGo,mGo,gGo,eF,rhe,hGo,pGo,mV,uGo,_Go,bGo,oF,vGo,the,FGo,TGo,ahe,MGo,EGo,rF,eNe,ad,tF,nhe,V0,CGo,she,wGo,oNe,No,X0,AGo,nd,yGo,gV,LGo,xGo,hV,$Go,kGo,SGo,z0,RGo,lhe,PGo,BGo,IGo,ht,W0,qGo,ihe,NGo,jGo,sd,DGo,dhe,GGo,OGo,pV,VGo,XGo,zGo,aF,WGo,no,Q0,QGo,che,HGo,UGo,Ga,JGo,fhe,YGo,KGo,mhe,ZGo,eOo,ghe,oOo,rOo,tOo,V,nF,hhe,aOo,nOo,uV,sOo,lOo,iOo,sF,phe,dOo,cOo,_V,fOo,mOo,gOo,lF,uhe,hOo,pOo,bV,uOo,_Oo,bOo,iF,_he,vOo,FOo,vV,TOo,MOo,EOo,dF,bhe,COo,wOo,FV,AOo,yOo,LOo,cF,vhe,xOo,$Oo,TV,kOo,SOo,ROo,fF,Fhe,POo,BOo,MV,IOo,qOo,NOo,mF,The,jOo,DOo,EV,GOo,OOo,VOo,gF,Mhe,XOo,zOo,CV,WOo,QOo,HOo,hF,Ehe,UOo,JOo,wV,YOo,KOo,ZOo,pF,Che,eVo,oVo,AV,rVo,tVo,aVo,uF,whe,nVo,sVo,yV,lVo,iVo,dVo,_F,Ahe,cVo,fVo,LV,mVo,gVo,hVo,bF,yhe,pVo,uVo,xV,_Vo,bVo,vVo,vF,Lhe,FVo,TVo,$V,MVo,EVo,CVo,FF,xhe,wVo,AVo,kV,yVo,LVo,xVo,TF,$he,$Vo,kVo,SV,SVo,RVo,PVo,MF,khe,BVo,IVo,RV,qVo,NVo,jVo,EF,She,DVo,GVo,PV,OVo,VVo,XVo,CF,Rhe,zVo,WVo,BV,QVo,HVo,UVo,wF,Phe,JVo,YVo,IV,KVo,ZVo,eXo,AF,Bhe,oXo,rXo,qV,tXo,aXo,nXo,yF,Ihe,sXo,lXo,NV,iXo,dXo,cXo,LF,qhe,fXo,mXo,jV,gXo,hXo,pXo,xF,Nhe,uXo,_Xo,DV,bXo,vXo,FXo,$F,jhe,TXo,MXo,GV,EXo,CXo,wXo,kF,Dhe,AXo,yXo,OV,LXo,xXo,$Xo,SF,Ghe,kXo,SXo,VV,RXo,PXo,BXo,RF,Ohe,IXo,qXo,XV,NXo,jXo,DXo,PF,Vhe,GXo,OXo,zV,VXo,XXo,zXo,BF,Xhe,WXo,QXo,WV,HXo,UXo,JXo,IF,zhe,YXo,KXo,QV,ZXo,ezo,ozo,qF,Whe,rzo,tzo,HV,azo,nzo,szo,NF,Qhe,lzo,izo,UV,dzo,czo,fzo,jF,Hhe,mzo,gzo,JV,hzo,pzo,uzo,DF,Uhe,_zo,bzo,YV,vzo,Fzo,Tzo,GF,Jhe,Mzo,Ezo,KV,Czo,wzo,Azo,OF,Yhe,yzo,Lzo,ZV,xzo,$zo,kzo,VF,Khe,Szo,Rzo,eX,Pzo,Bzo,Izo,XF,qzo,Zhe,Nzo,jzo,epe,Dzo,Gzo,zF,rNe,ld,WF,ope,H0,Ozo,rpe,Vzo,tNe,jo,U0,Xzo,id,zzo,oX,Wzo,Qzo,rX,Hzo,Uzo,Jzo,J0,Yzo,tpe,Kzo,Zzo,eWo,pt,Y0,oWo,ape,rWo,tWo,dd,aWo,npe,nWo,sWo,tX,lWo,iWo,dWo,QF,cWo,so,K0,fWo,spe,mWo,gWo,Oa,hWo,lpe,pWo,uWo,ipe,_Wo,bWo,dpe,vWo,FWo,TWo,cpe,HF,fpe,MWo,EWo,aX,CWo,wWo,AWo,UF,yWo,mpe,LWo,xWo,gpe,$Wo,kWo,JF,aNe,cd,YF,hpe,Z0,SWo,ppe,RWo,nNe,Do,ey,PWo,fd,BWo,nX,IWo,qWo,sX,NWo,jWo,DWo,oy,GWo,upe,OWo,VWo,XWo,ut,ry,zWo,_pe,WWo,QWo,md,HWo,bpe,UWo,JWo,lX,YWo,KWo,ZWo,KF,eQo,lo,ty,oQo,vpe,rQo,tQo,Va,aQo,Fpe,nQo,sQo,Tpe,lQo,iQo,Mpe,dQo,cQo,fQo,Fe,ZF,Epe,mQo,gQo,iX,hQo,pQo,uQo,e6,Cpe,_Qo,bQo,dX,vQo,FQo,TQo,o6,wpe,MQo,EQo,cX,CQo,wQo,AQo,Ds,Ape,yQo,LQo,fX,xQo,$Qo,mX,kQo,SQo,RQo,r6,ype,PQo,BQo,gX,IQo,qQo,NQo,_t,Lpe,jQo,DQo,hX,GQo,OQo,pX,VQo,XQo,uX,zQo,WQo,QQo,t6,xpe,HQo,UQo,_X,JQo,YQo,KQo,a6,$pe,ZQo,eHo,bX,oHo,rHo,tHo,n6,kpe,aHo,nHo,vX,sHo,lHo,iHo,s6,Spe,dHo,cHo,FX,fHo,mHo,gHo,l6,Rpe,hHo,pHo,TX,uHo,_Ho,bHo,i6,Ppe,vHo,FHo,MX,THo,MHo,EHo,d6,Bpe,CHo,wHo,EX,AHo,yHo,LHo,c6,xHo,Ipe,$Ho,kHo,qpe,SHo,RHo,f6,sNe,gd,m6,Npe,ay,PHo,jpe,BHo,lNe,Go,ny,IHo,hd,qHo,CX,NHo,jHo,wX,DHo,GHo,OHo,sy,VHo,Dpe,XHo,zHo,WHo,bt,ly,QHo,Gpe,HHo,UHo,pd,JHo,Ope,YHo,KHo,AX,ZHo,eUo,oUo,g6,rUo,io,iy,tUo,Vpe,aUo,nUo,Xa,sUo,Xpe,lUo,iUo,zpe,dUo,cUo,Wpe,fUo,mUo,gUo,Qpe,h6,Hpe,hUo,pUo,yX,uUo,_Uo,bUo,p6,vUo,Upe,FUo,TUo,Jpe,MUo,EUo,u6,iNe,ud,_6,Ype,dy,CUo,Kpe,wUo,dNe,Oo,cy,AUo,_d,yUo,LX,LUo,xUo,xX,$Uo,kUo,SUo,fy,RUo,Zpe,PUo,BUo,IUo,vt,my,qUo,eue,NUo,jUo,bd,DUo,oue,GUo,OUo,$X,VUo,XUo,zUo,b6,WUo,co,gy,QUo,rue,HUo,UUo,za,JUo,tue,YUo,KUo,aue,ZUo,eJo,nue,oJo,rJo,tJo,sue,v6,lue,aJo,nJo,kX,sJo,lJo,iJo,F6,dJo,iue,cJo,fJo,due,mJo,gJo,T6,cNe,vd,M6,cue,hy,hJo,fue,pJo,fNe,Vo,py,uJo,Fd,_Jo,SX,bJo,vJo,RX,FJo,TJo,MJo,uy,EJo,mue,CJo,wJo,AJo,Ft,_y,yJo,gue,LJo,xJo,Td,$Jo,hue,kJo,SJo,PX,RJo,PJo,BJo,E6,IJo,fo,by,qJo,pue,NJo,jJo,Wa,DJo,uue,GJo,OJo,_ue,VJo,XJo,bue,zJo,WJo,QJo,ke,C6,vue,HJo,UJo,BX,JJo,YJo,KJo,w6,Fue,ZJo,eYo,IX,oYo,rYo,tYo,A6,Tue,aYo,nYo,qX,sYo,lYo,iYo,y6,Mue,dYo,cYo,NX,fYo,mYo,gYo,L6,Eue,hYo,pYo,jX,uYo,_Yo,bYo,x6,Cue,vYo,FYo,DX,TYo,MYo,EYo,$6,wue,CYo,wYo,GX,AYo,yYo,LYo,k6,Aue,xYo,$Yo,OX,kYo,SYo,RYo,S6,yue,PYo,BYo,VX,IYo,qYo,NYo,R6,jYo,Lue,DYo,GYo,xue,OYo,VYo,P6,mNe,Md,B6,$ue,vy,XYo,kue,zYo,gNe,Xo,Fy,WYo,Ed,QYo,XX,HYo,UYo,zX,JYo,YYo,KYo,Ty,ZYo,Sue,eKo,oKo,rKo,Tt,My,tKo,Rue,aKo,nKo,Cd,sKo,Pue,lKo,iKo,WX,dKo,cKo,fKo,I6,mKo,mo,Ey,gKo,Bue,hKo,pKo,Qa,uKo,Iue,_Ko,bKo,que,vKo,FKo,Nue,TKo,MKo,EKo,et,q6,jue,CKo,wKo,QX,AKo,yKo,LKo,N6,Due,xKo,$Ko,HX,kKo,SKo,RKo,j6,Gue,PKo,BKo,UX,IKo,qKo,NKo,D6,Oue,jKo,DKo,JX,GKo,OKo,VKo,G6,Vue,XKo,zKo,YX,WKo,QKo,HKo,O6,UKo,Xue,JKo,YKo,zue,KKo,ZKo,V6,hNe,wd,X6,Wue,Cy,eZo,Que,oZo,pNe,zo,wy,rZo,Ad,tZo,KX,aZo,nZo,ZX,sZo,lZo,iZo,Ay,dZo,Hue,cZo,fZo,mZo,Mt,yy,gZo,Uue,hZo,pZo,yd,uZo,Jue,_Zo,bZo,ez,vZo,FZo,TZo,z6,MZo,go,Ly,EZo,Yue,CZo,wZo,Ha,AZo,Kue,yZo,LZo,Zue,xZo,$Zo,e_e,kZo,SZo,RZo,Se,W6,o_e,PZo,BZo,oz,IZo,qZo,NZo,Q6,r_e,jZo,DZo,rz,GZo,OZo,VZo,H6,t_e,XZo,zZo,tz,WZo,QZo,HZo,U6,a_e,UZo,JZo,az,YZo,KZo,ZZo,J6,n_e,eer,oer,nz,rer,ter,aer,Y6,s_e,ner,ser,sz,ler,ier,der,K6,l_e,cer,fer,lz,mer,ger,her,Z6,i_e,per,uer,iz,_er,ber,ver,eT,d_e,Fer,Ter,dz,Mer,Eer,Cer,oT,wer,c_e,Aer,yer,f_e,Ler,xer,rT,uNe,Ld,tT,m_e,xy,$er,g_e,ker,_Ne,Wo,$y,Ser,xd,Rer,cz,Per,Ber,fz,Ier,qer,Ner,ky,jer,h_e,Der,Ger,Oer,Et,Sy,Ver,p_e,Xer,zer,$d,Wer,u_e,Qer,Her,mz,Uer,Jer,Yer,aT,Ker,ho,Ry,Zer,__e,eor,oor,Ua,ror,b_e,tor,aor,v_e,nor,sor,F_e,lor,ior,dor,Py,nT,T_e,cor,mor,gz,gor,hor,por,sT,M_e,uor,_or,hz,bor,vor,For,lT,Tor,E_e,Mor,Eor,C_e,Cor,wor,iT,bNe,kd,dT,w_e,By,Aor,A_e,yor,vNe,Qo,Iy,Lor,Sd,xor,pz,$or,kor,uz,Sor,Ror,Por,qy,Bor,y_e,Ior,qor,Nor,Ct,Ny,jor,L_e,Dor,Gor,Rd,Oor,x_e,Vor,Xor,_z,zor,Wor,Qor,cT,Hor,po,jy,Uor,$_e,Jor,Yor,Ja,Kor,k_e,Zor,err,S_e,orr,rrr,R_e,trr,arr,nrr,ot,fT,P_e,srr,lrr,bz,irr,drr,crr,mT,B_e,frr,mrr,vz,grr,hrr,prr,gT,I_e,urr,_rr,Fz,brr,vrr,Frr,hT,q_e,Trr,Mrr,Tz,Err,Crr,wrr,pT,N_e,Arr,yrr,Mz,Lrr,xrr,$rr,uT,krr,j_e,Srr,Rrr,D_e,Prr,Brr,_T,FNe,Pd,bT,G_e,Dy,Irr,O_e,qrr,TNe,Ho,Gy,Nrr,Bd,jrr,Ez,Drr,Grr,Cz,Orr,Vrr,Xrr,Oy,zrr,V_e,Wrr,Qrr,Hrr,wt,Vy,Urr,X_e,Jrr,Yrr,Id,Krr,z_e,Zrr,etr,wz,otr,rtr,ttr,vT,atr,uo,Xy,ntr,W_e,str,ltr,Ya,itr,Q_e,dtr,ctr,H_e,ftr,mtr,U_e,gtr,htr,ptr,qd,FT,J_e,utr,_tr,Az,btr,vtr,Ftr,TT,Y_e,Ttr,Mtr,yz,Etr,Ctr,wtr,MT,K_e,Atr,ytr,Lz,Ltr,xtr,$tr,ET,ktr,Z_e,Str,Rtr,e2e,Ptr,Btr,CT,MNe,Nd,wT,o2e,zy,Itr,r2e,qtr,ENe,Uo,Wy,Ntr,jd,jtr,xz,Dtr,Gtr,$z,Otr,Vtr,Xtr,Qy,ztr,t2e,Wtr,Qtr,Htr,At,Hy,Utr,a2e,Jtr,Ytr,Dd,Ktr,n2e,Ztr,ear,kz,oar,rar,tar,AT,aar,_o,Uy,nar,s2e,sar,lar,Ka,iar,l2e,dar,car,i2e,far,mar,d2e,gar,har,par,Jy,yT,c2e,uar,_ar,Sz,bar,Far,Tar,LT,f2e,Mar,Ear,Rz,Car,war,Aar,xT,yar,m2e,Lar,xar,g2e,$ar,kar,$T,CNe,Gd,kT,h2e,Yy,Sar,p2e,Rar,wNe,Jo,Ky,Par,Od,Bar,Pz,Iar,qar,Bz,Nar,jar,Dar,Zy,Gar,u2e,Oar,Var,Xar,yt,eL,zar,_2e,War,Qar,Vd,Har,b2e,Uar,Jar,Iz,Yar,Kar,Zar,ST,enr,bo,oL,onr,v2e,rnr,tnr,Za,anr,F2e,nnr,snr,T2e,lnr,inr,M2e,dnr,cnr,fnr,E2e,RT,C2e,mnr,gnr,qz,hnr,pnr,unr,PT,_nr,w2e,bnr,vnr,A2e,Fnr,Tnr,BT,ANe,Xd,IT,y2e,rL,Mnr,L2e,Enr,yNe,Yo,tL,Cnr,zd,wnr,Nz,Anr,ynr,jz,Lnr,xnr,$nr,aL,knr,x2e,Snr,Rnr,Pnr,Lt,nL,Bnr,$2e,Inr,qnr,Wd,Nnr,k2e,jnr,Dnr,Dz,Gnr,Onr,Vnr,qT,Xnr,vo,sL,znr,S2e,Wnr,Qnr,en,Hnr,R2e,Unr,Jnr,P2e,Ynr,Knr,B2e,Znr,esr,osr,on,NT,I2e,rsr,tsr,Gz,asr,nsr,ssr,jT,q2e,lsr,isr,Oz,dsr,csr,fsr,DT,N2e,msr,gsr,Vz,hsr,psr,usr,GT,j2e,_sr,bsr,Xz,vsr,Fsr,Tsr,OT,Msr,D2e,Esr,Csr,G2e,wsr,Asr,VT,LNe,Qd,XT,O2e,lL,ysr,V2e,Lsr,xNe,Ko,iL,xsr,Hd,$sr,zz,ksr,Ssr,Wz,Rsr,Psr,Bsr,dL,Isr,X2e,qsr,Nsr,jsr,xt,cL,Dsr,z2e,Gsr,Osr,Ud,Vsr,W2e,Xsr,zsr,Qz,Wsr,Qsr,Hsr,zT,Usr,Fo,fL,Jsr,Q2e,Ysr,Ksr,rn,Zsr,H2e,elr,olr,U2e,rlr,tlr,J2e,alr,nlr,slr,Y2e,WT,K2e,llr,ilr,Hz,dlr,clr,flr,QT,mlr,Z2e,glr,hlr,e1e,plr,ulr,HT,$Ne,Jd,UT,o1e,mL,_lr,r1e,blr,kNe,Zo,gL,vlr,Yd,Flr,Uz,Tlr,Mlr,Jz,Elr,Clr,wlr,hL,Alr,t1e,ylr,Llr,xlr,$t,pL,$lr,a1e,klr,Slr,Kd,Rlr,n1e,Plr,Blr,Yz,Ilr,qlr,Nlr,JT,jlr,yr,uL,Dlr,s1e,Glr,Olr,tn,Vlr,l1e,Xlr,zlr,i1e,Wlr,Qlr,d1e,Hlr,Ulr,Jlr,N,YT,c1e,Ylr,Klr,Kz,Zlr,eir,oir,KT,f1e,rir,tir,Zz,air,nir,sir,ZT,m1e,lir,iir,eW,dir,cir,fir,e8,g1e,mir,gir,oW,hir,pir,uir,o8,h1e,_ir,bir,rW,vir,Fir,Tir,r8,p1e,Mir,Eir,tW,Cir,wir,Air,t8,u1e,yir,Lir,aW,xir,$ir,kir,a8,_1e,Sir,Rir,nW,Pir,Bir,Iir,n8,b1e,qir,Nir,sW,jir,Dir,Gir,s8,v1e,Oir,Vir,lW,Xir,zir,Wir,l8,F1e,Qir,Hir,iW,Uir,Jir,Yir,i8,T1e,Kir,Zir,dW,edr,odr,rdr,d8,M1e,tdr,adr,cW,ndr,sdr,ldr,c8,E1e,idr,ddr,fW,cdr,fdr,mdr,f8,C1e,gdr,hdr,mW,pdr,udr,_dr,m8,w1e,bdr,vdr,gW,Fdr,Tdr,Mdr,g8,A1e,Edr,Cdr,hW,wdr,Adr,ydr,Gs,y1e,Ldr,xdr,pW,$dr,kdr,uW,Sdr,Rdr,Pdr,h8,L1e,Bdr,Idr,_W,qdr,Ndr,jdr,p8,x1e,Ddr,Gdr,bW,Odr,Vdr,Xdr,u8,$1e,zdr,Wdr,vW,Qdr,Hdr,Udr,_8,k1e,Jdr,Ydr,FW,Kdr,Zdr,ecr,b8,S1e,ocr,rcr,TW,tcr,acr,ncr,v8,R1e,scr,lcr,MW,icr,dcr,ccr,F8,P1e,fcr,mcr,EW,gcr,hcr,pcr,T8,B1e,ucr,_cr,CW,bcr,vcr,Fcr,M8,I1e,Tcr,Mcr,wW,Ecr,Ccr,wcr,E8,q1e,Acr,ycr,AW,Lcr,xcr,$cr,C8,N1e,kcr,Scr,yW,Rcr,Pcr,Bcr,w8,j1e,Icr,qcr,LW,Ncr,jcr,Dcr,A8,D1e,Gcr,Ocr,xW,Vcr,Xcr,zcr,y8,G1e,Wcr,Qcr,$W,Hcr,Ucr,Jcr,L8,O1e,Ycr,Kcr,kW,Zcr,efr,ofr,x8,V1e,rfr,tfr,SW,afr,nfr,sfr,$8,X1e,lfr,ifr,RW,dfr,cfr,ffr,k8,z1e,mfr,gfr,PW,hfr,pfr,ufr,S8,W1e,_fr,bfr,BW,vfr,Ffr,Tfr,R8,Q1e,Mfr,Efr,IW,Cfr,wfr,Afr,P8,H1e,yfr,Lfr,qW,xfr,$fr,kfr,B8,U1e,Sfr,Rfr,NW,Pfr,Bfr,Ifr,I8,J1e,qfr,Nfr,jW,jfr,Dfr,Gfr,q8,Y1e,Ofr,Vfr,DW,Xfr,zfr,Wfr,N8,K1e,Qfr,Hfr,GW,Ufr,Jfr,Yfr,j8,Z1e,Kfr,Zfr,OW,emr,omr,rmr,D8,ebe,tmr,amr,VW,nmr,smr,lmr,G8,obe,imr,dmr,XW,cmr,fmr,mmr,O8,SNe,Zd,V8,rbe,_L,gmr,tbe,hmr,RNe,er,bL,pmr,ec,umr,zW,_mr,bmr,WW,vmr,Fmr,Tmr,vL,Mmr,abe,Emr,Cmr,wmr,kt,FL,Amr,nbe,ymr,Lmr,oc,xmr,sbe,$mr,kmr,QW,Smr,Rmr,Pmr,X8,Bmr,Lr,TL,Imr,lbe,qmr,Nmr,an,jmr,ibe,Dmr,Gmr,dbe,Omr,Vmr,cbe,Xmr,zmr,Wmr,se,z8,fbe,Qmr,Hmr,HW,Umr,Jmr,Ymr,W8,mbe,Kmr,Zmr,UW,egr,ogr,rgr,Q8,gbe,tgr,agr,JW,ngr,sgr,lgr,H8,hbe,igr,dgr,YW,cgr,fgr,mgr,U8,pbe,ggr,hgr,KW,pgr,ugr,_gr,J8,ube,bgr,vgr,ZW,Fgr,Tgr,Mgr,Y8,_be,Egr,Cgr,eQ,wgr,Agr,ygr,K8,bbe,Lgr,xgr,oQ,$gr,kgr,Sgr,Z8,vbe,Rgr,Pgr,rQ,Bgr,Igr,qgr,e7,Fbe,Ngr,jgr,tQ,Dgr,Ggr,Ogr,o7,Tbe,Vgr,Xgr,aQ,zgr,Wgr,Qgr,r7,Mbe,Hgr,Ugr,nQ,Jgr,Ygr,Kgr,t7,Ebe,Zgr,ehr,sQ,ohr,rhr,thr,a7,Cbe,ahr,nhr,lQ,shr,lhr,ihr,n7,wbe,dhr,chr,iQ,fhr,mhr,ghr,s7,Abe,hhr,phr,dQ,uhr,_hr,bhr,l7,ybe,vhr,Fhr,cQ,Thr,Mhr,Ehr,i7,Lbe,Chr,whr,fQ,Ahr,yhr,Lhr,d7,xbe,xhr,$hr,mQ,khr,Shr,Rhr,c7,$be,Phr,Bhr,gQ,Ihr,qhr,Nhr,f7,kbe,jhr,Dhr,hQ,Ghr,Ohr,Vhr,m7,Sbe,Xhr,zhr,pQ,Whr,Qhr,Hhr,g7,Rbe,Uhr,Jhr,uQ,Yhr,Khr,Zhr,h7,PNe,rc,p7,Pbe,ML,epr,Bbe,opr,BNe,or,EL,rpr,tc,tpr,_Q,apr,npr,bQ,spr,lpr,ipr,CL,dpr,Ibe,cpr,fpr,mpr,St,wL,gpr,qbe,hpr,ppr,ac,upr,Nbe,_pr,bpr,vQ,vpr,Fpr,Tpr,u7,Mpr,xr,AL,Epr,jbe,Cpr,wpr,nn,Apr,Dbe,ypr,Lpr,Gbe,xpr,$pr,Obe,kpr,Spr,Rpr,Te,_7,Vbe,Ppr,Bpr,FQ,Ipr,qpr,Npr,b7,Xbe,jpr,Dpr,TQ,Gpr,Opr,Vpr,v7,zbe,Xpr,zpr,MQ,Wpr,Qpr,Hpr,F7,Wbe,Upr,Jpr,EQ,Ypr,Kpr,Zpr,T7,Qbe,eur,our,CQ,rur,tur,aur,M7,Hbe,nur,sur,wQ,lur,iur,dur,E7,Ube,cur,fur,AQ,mur,gur,hur,C7,Jbe,pur,uur,yQ,_ur,bur,vur,w7,Ybe,Fur,Tur,LQ,Mur,Eur,Cur,A7,Kbe,wur,Aur,xQ,yur,Lur,xur,y7,Zbe,$ur,kur,$Q,Sur,Rur,Pur,L7,eve,Bur,Iur,kQ,qur,Nur,jur,x7,INe,nc,$7,ove,yL,Dur,rve,Gur,qNe,rr,LL,Our,sc,Vur,SQ,Xur,zur,RQ,Wur,Qur,Hur,xL,Uur,tve,Jur,Yur,Kur,Rt,$L,Zur,ave,e_r,o_r,lc,r_r,nve,t_r,a_r,PQ,n_r,s_r,l_r,k7,i_r,$r,kL,d_r,sve,c_r,f_r,sn,m_r,lve,g_r,h_r,ive,p_r,u_r,dve,__r,b_r,v_r,ln,S7,cve,F_r,T_r,BQ,M_r,E_r,C_r,R7,fve,w_r,A_r,IQ,y_r,L_r,x_r,P7,mve,$_r,k_r,qQ,S_r,R_r,P_r,B7,gve,B_r,I_r,NQ,q_r,N_r,j_r,I7,NNe,ic,q7,hve,SL,D_r,pve,G_r,jNe,tr,RL,O_r,dc,V_r,jQ,X_r,z_r,DQ,W_r,Q_r,H_r,PL,U_r,uve,J_r,Y_r,K_r,Pt,BL,Z_r,_ve,e2r,o2r,cc,r2r,bve,t2r,a2r,GQ,n2r,s2r,l2r,N7,i2r,kr,IL,d2r,vve,c2r,f2r,dn,m2r,Fve,g2r,h2r,Tve,p2r,u2r,Mve,_2r,b2r,v2r,ie,j7,Eve,F2r,T2r,OQ,M2r,E2r,C2r,D7,Cve,w2r,A2r,VQ,y2r,L2r,x2r,G7,wve,$2r,k2r,XQ,S2r,R2r,P2r,O7,Ave,B2r,I2r,zQ,q2r,N2r,j2r,V7,yve,D2r,G2r,WQ,O2r,V2r,X2r,X7,Lve,z2r,W2r,QQ,Q2r,H2r,U2r,z7,xve,J2r,Y2r,HQ,K2r,Z2r,e1r,W7,$ve,o1r,r1r,UQ,t1r,a1r,n1r,Q7,kve,s1r,l1r,JQ,i1r,d1r,c1r,H7,Sve,f1r,m1r,YQ,g1r,h1r,p1r,U7,Rve,u1r,_1r,KQ,b1r,v1r,F1r,J7,Pve,T1r,M1r,ZQ,E1r,C1r,w1r,Y7,Bve,A1r,y1r,eH,L1r,x1r,$1r,K7,Ive,k1r,S1r,oH,R1r,P1r,B1r,Z7,qve,I1r,q1r,rH,N1r,j1r,D1r,eM,Nve,G1r,O1r,tH,V1r,X1r,z1r,oM,jve,W1r,Q1r,aH,H1r,U1r,J1r,rM,Dve,Y1r,K1r,nH,Z1r,ebr,obr,tM,Gve,rbr,tbr,sH,abr,nbr,sbr,aM,Ove,lbr,ibr,lH,dbr,cbr,fbr,nM,DNe,fc,sM,Vve,qL,mbr,Xve,gbr,GNe,ar,NL,hbr,mc,pbr,iH,ubr,_br,dH,bbr,vbr,Fbr,jL,Tbr,zve,Mbr,Ebr,Cbr,Bt,DL,wbr,Wve,Abr,ybr,gc,Lbr,Qve,xbr,$br,cH,kbr,Sbr,Rbr,lM,Pbr,Sr,GL,Bbr,Hve,Ibr,qbr,cn,Nbr,Uve,jbr,Dbr,Jve,Gbr,Obr,Yve,Vbr,Xbr,zbr,ye,iM,Kve,Wbr,Qbr,fH,Hbr,Ubr,Jbr,dM,Zve,Ybr,Kbr,mH,Zbr,evr,ovr,cM,eFe,rvr,tvr,gH,avr,nvr,svr,fM,oFe,lvr,ivr,hH,dvr,cvr,fvr,mM,rFe,mvr,gvr,pH,hvr,pvr,uvr,gM,tFe,_vr,bvr,uH,vvr,Fvr,Tvr,hM,aFe,Mvr,Evr,_H,Cvr,wvr,Avr,pM,nFe,yvr,Lvr,bH,xvr,$vr,kvr,uM,sFe,Svr,Rvr,vH,Pvr,Bvr,Ivr,_M,lFe,qvr,Nvr,FH,jvr,Dvr,Gvr,bM,ONe,hc,vM,iFe,OL,Ovr,dFe,Vvr,VNe,nr,VL,Xvr,pc,zvr,TH,Wvr,Qvr,MH,Hvr,Uvr,Jvr,XL,Yvr,cFe,Kvr,Zvr,eFr,It,zL,oFr,fFe,rFr,tFr,uc,aFr,mFe,nFr,sFr,EH,lFr,iFr,dFr,FM,cFr,Rr,WL,fFr,gFe,mFr,gFr,fn,hFr,hFe,pFr,uFr,pFe,_Fr,bFr,uFe,vFr,FFr,TFr,oe,TM,_Fe,MFr,EFr,CH,CFr,wFr,AFr,MM,bFe,yFr,LFr,wH,xFr,$Fr,kFr,EM,vFe,SFr,RFr,AH,PFr,BFr,IFr,CM,FFe,qFr,NFr,yH,jFr,DFr,GFr,wM,TFe,OFr,VFr,LH,XFr,zFr,WFr,AM,MFe,QFr,HFr,xH,UFr,JFr,YFr,yM,EFe,KFr,ZFr,$H,e6r,o6r,r6r,LM,CFe,t6r,a6r,kH,n6r,s6r,l6r,xM,wFe,i6r,d6r,SH,c6r,f6r,m6r,$M,AFe,g6r,h6r,RH,p6r,u6r,_6r,kM,yFe,b6r,v6r,PH,F6r,T6r,M6r,SM,LFe,E6r,C6r,BH,w6r,A6r,y6r,RM,xFe,L6r,x6r,IH,$6r,k6r,S6r,PM,$Fe,R6r,P6r,qH,B6r,I6r,q6r,BM,kFe,N6r,j6r,NH,D6r,G6r,O6r,IM,SFe,V6r,X6r,jH,z6r,W6r,Q6r,qM,RFe,H6r,U6r,DH,J6r,Y6r,K6r,NM,PFe,Z6r,eTr,GH,oTr,rTr,tTr,jM,BFe,aTr,nTr,OH,sTr,lTr,iTr,DM,IFe,dTr,cTr,VH,fTr,mTr,gTr,GM,qFe,hTr,pTr,XH,uTr,_Tr,bTr,OM,NFe,vTr,FTr,zH,TTr,MTr,ETr,VM,jFe,CTr,wTr,WH,ATr,yTr,LTr,XM,DFe,xTr,$Tr,QH,kTr,STr,RTr,zM,GFe,PTr,BTr,HH,ITr,qTr,NTr,WM,OFe,jTr,DTr,UH,GTr,OTr,VTr,QM,XNe,_c,HM,VFe,QL,XTr,XFe,zTr,zNe,sr,HL,WTr,bc,QTr,JH,HTr,UTr,YH,JTr,YTr,KTr,UL,ZTr,zFe,e8r,o8r,r8r,qt,JL,t8r,WFe,a8r,n8r,vc,s8r,QFe,l8r,i8r,KH,d8r,c8r,f8r,UM,m8r,Pr,YL,g8r,HFe,h8r,p8r,mn,u8r,UFe,_8r,b8r,JFe,v8r,F8r,YFe,T8r,M8r,E8r,he,JM,KFe,C8r,w8r,ZH,A8r,y8r,L8r,YM,ZFe,x8r,$8r,eU,k8r,S8r,R8r,KM,e6e,P8r,B8r,oU,I8r,q8r,N8r,ZM,o6e,j8r,D8r,rU,G8r,O8r,V8r,e4,r6e,X8r,z8r,tU,W8r,Q8r,H8r,o4,t6e,U8r,J8r,aU,Y8r,K8r,Z8r,r4,a6e,e7r,o7r,nU,r7r,t7r,a7r,t4,n6e,n7r,s7r,sU,l7r,i7r,d7r,a4,s6e,c7r,f7r,lU,m7r,g7r,h7r,n4,l6e,p7r,u7r,iU,_7r,b7r,v7r,s4,i6e,F7r,T7r,dU,M7r,E7r,C7r,l4,d6e,w7r,A7r,cU,y7r,L7r,x7r,i4,c6e,$7r,k7r,fU,S7r,R7r,P7r,d4,f6e,B7r,I7r,mU,q7r,N7r,j7r,c4,m6e,D7r,G7r,gU,O7r,V7r,X7r,f4,g6e,z7r,W7r,hU,Q7r,H7r,U7r,m4,h6e,J7r,Y7r,pU,K7r,Z7r,eMr,g4,WNe,Fc,h4,p6e,KL,oMr,u6e,rMr,QNe,lr,ZL,tMr,Tc,aMr,uU,nMr,sMr,_U,lMr,iMr,dMr,ex,cMr,_6e,fMr,mMr,gMr,Nt,ox,hMr,b6e,pMr,uMr,Mc,_Mr,v6e,bMr,vMr,bU,FMr,TMr,MMr,p4,EMr,Br,rx,CMr,F6e,wMr,AMr,gn,yMr,T6e,LMr,xMr,M6e,$Mr,kMr,E6e,SMr,RMr,PMr,tx,u4,C6e,BMr,IMr,vU,qMr,NMr,jMr,_4,w6e,DMr,GMr,FU,OMr,VMr,XMr,b4,HNe,Ec,v4,A6e,ax,zMr,y6e,WMr,UNe,ir,nx,QMr,Cc,HMr,TU,UMr,JMr,MU,YMr,KMr,ZMr,sx,e4r,L6e,o4r,r4r,t4r,jt,lx,a4r,x6e,n4r,s4r,wc,l4r,$6e,i4r,d4r,EU,c4r,f4r,m4r,F4,g4r,Ir,ix,h4r,k6e,p4r,u4r,hn,_4r,S6e,b4r,v4r,R6e,F4r,T4r,P6e,M4r,E4r,C4r,B6e,T4,I6e,w4r,A4r,CU,y4r,L4r,x4r,M4,JNe,Ac,E4,q6e,dx,$4r,N6e,k4r,YNe,dr,cx,S4r,yc,R4r,wU,P4r,B4r,AU,I4r,q4r,N4r,fx,j4r,j6e,D4r,G4r,O4r,Dt,mx,V4r,D6e,X4r,z4r,Lc,W4r,G6e,Q4r,H4r,yU,U4r,J4r,Y4r,C4,K4r,qr,gx,Z4r,O6e,eEr,oEr,pn,rEr,V6e,tEr,aEr,X6e,nEr,sEr,z6e,lEr,iEr,dEr,de,w4,W6e,cEr,fEr,LU,mEr,gEr,hEr,A4,Q6e,pEr,uEr,xU,_Er,bEr,vEr,y4,H6e,FEr,TEr,$U,MEr,EEr,CEr,L4,U6e,wEr,AEr,kU,yEr,LEr,xEr,x4,J6e,$Er,kEr,SU,SEr,REr,PEr,$4,Y6e,BEr,IEr,RU,qEr,NEr,jEr,k4,K6e,DEr,GEr,PU,OEr,VEr,XEr,S4,Z6e,zEr,WEr,BU,QEr,HEr,UEr,R4,eTe,JEr,YEr,IU,KEr,ZEr,eCr,P4,oTe,oCr,rCr,qU,tCr,aCr,nCr,B4,rTe,sCr,lCr,NU,iCr,dCr,cCr,I4,tTe,fCr,mCr,jU,gCr,hCr,pCr,q4,aTe,uCr,_Cr,DU,bCr,vCr,FCr,N4,nTe,TCr,MCr,GU,ECr,CCr,wCr,j4,sTe,ACr,yCr,OU,LCr,xCr,$Cr,D4,lTe,kCr,SCr,VU,RCr,PCr,BCr,G4,iTe,ICr,qCr,XU,NCr,jCr,DCr,O4,dTe,GCr,OCr,zU,VCr,XCr,zCr,V4,cTe,WCr,QCr,WU,HCr,UCr,JCr,X4,fTe,YCr,KCr,QU,ZCr,e5r,o5r,z4,KNe,xc,W4,mTe,hx,r5r,gTe,t5r,ZNe,cr,px,a5r,$c,n5r,HU,s5r,l5r,UU,i5r,d5r,c5r,ux,f5r,hTe,m5r,g5r,h5r,Gt,_x,p5r,pTe,u5r,_5r,kc,b5r,uTe,v5r,F5r,JU,T5r,M5r,E5r,Q4,C5r,Nr,bx,w5r,_Te,A5r,y5r,un,L5r,bTe,x5r,$5r,vTe,k5r,S5r,FTe,R5r,P5r,B5r,ce,H4,TTe,I5r,q5r,YU,N5r,j5r,D5r,U4,MTe,G5r,O5r,KU,V5r,X5r,z5r,J4,ETe,W5r,Q5r,ZU,H5r,U5r,J5r,Y4,CTe,Y5r,K5r,eJ,Z5r,e3r,o3r,K4,wTe,r3r,t3r,oJ,a3r,n3r,s3r,Z4,ATe,l3r,i3r,rJ,d3r,c3r,f3r,eE,yTe,m3r,g3r,tJ,h3r,p3r,u3r,oE,LTe,_3r,b3r,aJ,v3r,F3r,T3r,rE,xTe,M3r,E3r,nJ,C3r,w3r,A3r,tE,$Te,y3r,L3r,sJ,x3r,$3r,k3r,aE,kTe,S3r,R3r,lJ,P3r,B3r,I3r,nE,STe,q3r,N3r,iJ,j3r,D3r,G3r,sE,RTe,O3r,V3r,dJ,X3r,z3r,W3r,lE,PTe,Q3r,H3r,cJ,U3r,J3r,Y3r,iE,BTe,K3r,Z3r,fJ,ewr,owr,rwr,dE,ITe,twr,awr,mJ,nwr,swr,lwr,cE,qTe,iwr,dwr,gJ,cwr,fwr,mwr,fE,NTe,gwr,hwr,hJ,pwr,uwr,_wr,mE,jTe,bwr,vwr,pJ,Fwr,Twr,Mwr,gE,DTe,Ewr,Cwr,uJ,wwr,Awr,ywr,hE,eje,Sc,pE,GTe,vx,Lwr,OTe,xwr,oje,fr,Fx,$wr,Rc,kwr,_J,Swr,Rwr,bJ,Pwr,Bwr,Iwr,Tx,qwr,VTe,Nwr,jwr,Dwr,Ot,Mx,Gwr,XTe,Owr,Vwr,Pc,Xwr,zTe,zwr,Wwr,vJ,Qwr,Hwr,Uwr,uE,Jwr,jr,Ex,Ywr,WTe,Kwr,Zwr,_n,eAr,QTe,oAr,rAr,HTe,tAr,aAr,UTe,nAr,sAr,lAr,JTe,_E,YTe,iAr,dAr,FJ,cAr,fAr,mAr,bE,rje,Bc,vE,KTe,Cx,gAr,ZTe,hAr,tje,mr,wx,pAr,Ic,uAr,TJ,_Ar,bAr,MJ,vAr,FAr,TAr,Ax,MAr,e8e,EAr,CAr,wAr,Vt,yx,AAr,o8e,yAr,LAr,qc,xAr,r8e,$Ar,kAr,EJ,SAr,RAr,PAr,FE,BAr,Dr,Lx,IAr,t8e,qAr,NAr,bn,jAr,a8e,DAr,GAr,n8e,OAr,VAr,s8e,XAr,zAr,WAr,l8e,TE,i8e,QAr,HAr,CJ,UAr,JAr,YAr,ME,aje,Nc,EE,d8e,xx,KAr,c8e,ZAr,nje,gr,$x,e0r,jc,o0r,wJ,r0r,t0r,AJ,a0r,n0r,s0r,kx,l0r,f8e,i0r,d0r,c0r,Xt,Sx,f0r,m8e,m0r,g0r,Dc,h0r,g8e,p0r,u0r,yJ,_0r,b0r,v0r,CE,F0r,Gr,Rx,T0r,h8e,M0r,E0r,vn,C0r,p8e,w0r,A0r,u8e,y0r,L0r,_8e,x0r,$0r,k0r,te,wE,b8e,S0r,R0r,LJ,P0r,B0r,I0r,AE,v8e,q0r,N0r,xJ,j0r,D0r,G0r,yE,F8e,O0r,V0r,$J,X0r,z0r,W0r,LE,T8e,Q0r,H0r,kJ,U0r,J0r,Y0r,xE,M8e,K0r,Z0r,SJ,eyr,oyr,ryr,$E,E8e,tyr,ayr,RJ,nyr,syr,lyr,kE,C8e,iyr,dyr,PJ,cyr,fyr,myr,SE,w8e,gyr,hyr,BJ,pyr,uyr,_yr,RE,A8e,byr,vyr,IJ,Fyr,Tyr,Myr,PE,y8e,Eyr,Cyr,qJ,wyr,Ayr,yyr,BE,L8e,Lyr,xyr,NJ,$yr,kyr,Syr,IE,x8e,Ryr,Pyr,jJ,Byr,Iyr,qyr,qE,$8e,Nyr,jyr,DJ,Dyr,Gyr,Oyr,NE,k8e,Vyr,Xyr,GJ,zyr,Wyr,Qyr,jE,S8e,Hyr,Uyr,OJ,Jyr,Yyr,Kyr,DE,R8e,Zyr,eLr,VJ,oLr,rLr,tLr,GE,P8e,aLr,nLr,XJ,sLr,lLr,iLr,OE,B8e,dLr,cLr,zJ,fLr,mLr,gLr,VE,I8e,hLr,pLr,WJ,uLr,_Lr,bLr,XE,q8e,vLr,FLr,QJ,TLr,MLr,ELr,zE,N8e,CLr,wLr,HJ,ALr,yLr,LLr,WE,j8e,xLr,$Lr,UJ,kLr,SLr,RLr,QE,D8e,PLr,BLr,JJ,ILr,qLr,NLr,HE,G8e,jLr,DLr,YJ,GLr,OLr,VLr,UE,O8e,XLr,zLr,KJ,WLr,QLr,HLr,JE,sje,Gc,YE,V8e,Px,ULr,X8e,JLr,lje,hr,Bx,YLr,Oc,KLr,ZJ,ZLr,exr,eY,oxr,rxr,txr,Ix,axr,z8e,nxr,sxr,lxr,zt,qx,ixr,W8e,dxr,cxr,Vc,fxr,Q8e,mxr,gxr,oY,hxr,pxr,uxr,KE,_xr,Or,Nx,bxr,H8e,vxr,Fxr,Fn,Txr,U8e,Mxr,Exr,J8e,Cxr,wxr,Y8e,Axr,yxr,Lxr,Re,ZE,K8e,xxr,$xr,rY,kxr,Sxr,Rxr,eC,Z8e,Pxr,Bxr,tY,Ixr,qxr,Nxr,oC,e7e,jxr,Dxr,aY,Gxr,Oxr,Vxr,rC,o7e,Xxr,zxr,nY,Wxr,Qxr,Hxr,tC,r7e,Uxr,Jxr,sY,Yxr,Kxr,Zxr,aC,t7e,e9r,o9r,lY,r9r,t9r,a9r,nC,a7e,n9r,s9r,iY,l9r,i9r,d9r,sC,n7e,c9r,f9r,dY,m9r,g9r,h9r,lC,s7e,p9r,u9r,cY,_9r,b9r,v9r,iC,ije,Xc,dC,l7e,jx,F9r,i7e,T9r,dje,pr,Dx,M9r,zc,E9r,fY,C9r,w9r,mY,A9r,y9r,L9r,Gx,x9r,d7e,$9r,k9r,S9r,Wt,Ox,R9r,c7e,P9r,B9r,Wc,I9r,f7e,q9r,N9r,gY,j9r,D9r,G9r,cC,O9r,Vr,Vx,V9r,m7e,X9r,z9r,Tn,W9r,g7e,Q9r,H9r,h7e,U9r,J9r,p7e,Y9r,K9r,Z9r,Me,fC,u7e,e$r,o$r,hY,r$r,t$r,a$r,mC,_7e,n$r,s$r,pY,l$r,i$r,d$r,gC,b7e,c$r,f$r,uY,m$r,g$r,h$r,hC,v7e,p$r,u$r,_Y,_$r,b$r,v$r,pC,F7e,F$r,T$r,bY,M$r,E$r,C$r,uC,T7e,w$r,A$r,vY,y$r,L$r,x$r,_C,M7e,$$r,k$r,FY,S$r,R$r,P$r,bC,E7e,B$r,I$r,TY,q$r,N$r,j$r,vC,C7e,D$r,G$r,MY,O$r,V$r,X$r,FC,w7e,z$r,W$r,EY,Q$r,H$r,U$r,TC,A7e,J$r,Y$r,CY,K$r,Z$r,ekr,MC,y7e,okr,rkr,wY,tkr,akr,nkr,EC,cje,Qc,CC,L7e,Xx,skr,x7e,lkr,fje,ur,zx,ikr,Hc,dkr,AY,ckr,fkr,yY,mkr,gkr,hkr,Wx,pkr,$7e,ukr,_kr,bkr,Qt,Qx,vkr,k7e,Fkr,Tkr,Uc,Mkr,S7e,Ekr,Ckr,LY,wkr,Akr,ykr,wC,Lkr,Xr,Hx,xkr,R7e,$kr,kkr,Mn,Skr,P7e,Rkr,Pkr,B7e,Bkr,Ikr,I7e,qkr,Nkr,jkr,Le,AC,q7e,Dkr,Gkr,xY,Okr,Vkr,Xkr,yC,N7e,zkr,Wkr,$Y,Qkr,Hkr,Ukr,LC,j7e,Jkr,Ykr,kY,Kkr,Zkr,eSr,xC,D7e,oSr,rSr,SY,tSr,aSr,nSr,$C,G7e,sSr,lSr,RY,iSr,dSr,cSr,kC,O7e,fSr,mSr,PY,gSr,hSr,pSr,SC,V7e,uSr,_Sr,BY,bSr,vSr,FSr,RC,X7e,TSr,MSr,IY,ESr,CSr,wSr,PC,z7e,ASr,ySr,qY,LSr,xSr,$Sr,BC,W7e,kSr,SSr,NY,RSr,PSr,BSr,IC,mje,Jc,qC,Q7e,Ux,ISr,H7e,qSr,gje,_r,Jx,NSr,Yc,jSr,jY,DSr,GSr,DY,OSr,VSr,XSr,Yx,zSr,U7e,WSr,QSr,HSr,Ht,Kx,USr,J7e,JSr,YSr,Kc,KSr,Y7e,ZSr,eRr,GY,oRr,rRr,tRr,NC,aRr,zr,Zx,nRr,K7e,sRr,lRr,En,iRr,Z7e,dRr,cRr,eMe,fRr,mRr,oMe,gRr,hRr,pRr,Pe,jC,rMe,uRr,_Rr,OY,bRr,vRr,FRr,DC,tMe,TRr,MRr,VY,ERr,CRr,wRr,GC,aMe,ARr,yRr,XY,LRr,xRr,$Rr,OC,nMe,kRr,SRr,zY,RRr,PRr,BRr,VC,sMe,IRr,qRr,WY,NRr,jRr,DRr,XC,lMe,GRr,ORr,QY,VRr,XRr,zRr,zC,iMe,WRr,QRr,HY,HRr,URr,JRr,WC,dMe,YRr,KRr,UY,ZRr,ePr,oPr,QC,cMe,rPr,tPr,JY,aPr,nPr,sPr,HC,hje,Zc,UC,fMe,e9,lPr,mMe,iPr,pje,br,o9,dPr,ef,cPr,YY,fPr,mPr,KY,gPr,hPr,pPr,r9,uPr,gMe,_Pr,bPr,vPr,Ut,t9,FPr,hMe,TPr,MPr,of,EPr,pMe,CPr,wPr,ZY,APr,yPr,LPr,JC,xPr,Wr,a9,$Pr,uMe,kPr,SPr,Cn,RPr,_Me,PPr,BPr,bMe,IPr,qPr,vMe,NPr,jPr,DPr,xe,YC,FMe,GPr,OPr,eK,VPr,XPr,zPr,KC,TMe,WPr,QPr,oK,HPr,UPr,JPr,ZC,MMe,YPr,KPr,rK,ZPr,eBr,oBr,e5,EMe,rBr,tBr,tK,aBr,nBr,sBr,o5,CMe,lBr,iBr,aK,dBr,cBr,fBr,r5,wMe,mBr,gBr,nK,hBr,pBr,uBr,t5,AMe,_Br,bBr,sK,vBr,FBr,TBr,a5,yMe,MBr,EBr,lK,CBr,wBr,ABr,n5,LMe,yBr,LBr,iK,xBr,$Br,kBr,s5,xMe,SBr,RBr,dK,PBr,BBr,IBr,l5,uje,rf,i5,$Me,n9,qBr,kMe,NBr,_je,vr,s9,jBr,tf,DBr,cK,GBr,OBr,fK,VBr,XBr,zBr,l9,WBr,SMe,QBr,HBr,UBr,Jt,i9,JBr,RMe,YBr,KBr,af,ZBr,PMe,eIr,oIr,mK,rIr,tIr,aIr,d5,nIr,Qr,d9,sIr,BMe,lIr,iIr,wn,dIr,IMe,cIr,fIr,qMe,mIr,gIr,NMe,hIr,pIr,uIr,$e,c5,jMe,_Ir,bIr,gK,vIr,FIr,TIr,f5,DMe,MIr,EIr,hK,CIr,wIr,AIr,m5,GMe,yIr,LIr,pK,xIr,$Ir,kIr,g5,OMe,SIr,RIr,uK,PIr,BIr,IIr,h5,VMe,qIr,NIr,_K,jIr,DIr,GIr,p5,XMe,OIr,VIr,bK,XIr,zIr,WIr,u5,zMe,QIr,HIr,vK,UIr,JIr,YIr,_5,WMe,KIr,ZIr,FK,eqr,oqr,rqr,b5,QMe,tqr,aqr,TK,nqr,sqr,lqr,v5,HMe,iqr,dqr,MK,cqr,fqr,mqr,F5,bje,nf,T5,UMe,c9,gqr,JMe,hqr,vje,Fr,f9,pqr,sf,uqr,EK,_qr,bqr,CK,vqr,Fqr,Tqr,m9,Mqr,YMe,Eqr,Cqr,wqr,Yt,g9,Aqr,KMe,yqr,Lqr,lf,xqr,ZMe,$qr,kqr,wK,Sqr,Rqr,Pqr,M5,Bqr,Hr,h9,Iqr,e4e,qqr,Nqr,An,jqr,o4e,Dqr,Gqr,r4e,Oqr,Vqr,t4e,Xqr,zqr,Wqr,De,E5,a4e,Qqr,Hqr,AK,Uqr,Jqr,Yqr,C5,n4e,Kqr,Zqr,yK,eNr,oNr,rNr,w5,s4e,tNr,aNr,LK,nNr,sNr,lNr,A5,l4e,iNr,dNr,xK,cNr,fNr,mNr,y5,i4e,gNr,hNr,$K,pNr,uNr,_Nr,L5,d4e,bNr,vNr,kK,FNr,TNr,MNr,x5,c4e,ENr,CNr,SK,wNr,ANr,yNr,$5,f4e,LNr,xNr,RK,$Nr,kNr,SNr,k5,Fje,df,S5,m4e,p9,RNr,g4e,PNr,Tje,Tr,u9,BNr,cf,INr,PK,qNr,NNr,BK,jNr,DNr,GNr,_9,ONr,h4e,VNr,XNr,zNr,Kt,b9,WNr,p4e,QNr,HNr,ff,UNr,u4e,JNr,YNr,IK,KNr,ZNr,ejr,R5,ojr,Ur,v9,rjr,_4e,tjr,ajr,yn,njr,b4e,sjr,ljr,v4e,ijr,djr,F4e,cjr,fjr,mjr,Ge,P5,T4e,gjr,hjr,qK,pjr,ujr,_jr,B5,M4e,bjr,vjr,NK,Fjr,Tjr,Mjr,I5,E4e,Ejr,Cjr,jK,wjr,Ajr,yjr,q5,C4e,Ljr,xjr,DK,$jr,kjr,Sjr,N5,w4e,Rjr,Pjr,GK,Bjr,Ijr,qjr,j5,A4e,Njr,jjr,OK,Djr,Gjr,Ojr,D5,y4e,Vjr,Xjr,VK,zjr,Wjr,Qjr,G5,L4e,Hjr,Ujr,XK,Jjr,Yjr,Kjr,O5,Mje,mf,V5,x4e,F9,Zjr,$4e,eDr,Eje,Mr,T9,oDr,gf,rDr,zK,tDr,aDr,WK,nDr,sDr,lDr,M9,iDr,k4e,dDr,cDr,fDr,Zt,E9,mDr,S4e,gDr,hDr,hf,pDr,R4e,uDr,_Dr,QK,bDr,vDr,FDr,X5,TDr,Jr,C9,MDr,P4e,EDr,CDr,Ln,wDr,B4e,ADr,yDr,I4e,LDr,xDr,q4e,$Dr,kDr,SDr,N4e,z5,j4e,RDr,PDr,HK,BDr,IDr,qDr,W5,Cje,pf,Q5,D4e,w9,NDr,G4e,jDr,wje,Er,A9,DDr,uf,GDr,UK,ODr,VDr,JK,XDr,zDr,WDr,y9,QDr,O4e,HDr,UDr,JDr,ea,L9,YDr,V4e,KDr,ZDr,_f,eGr,X4e,oGr,rGr,YK,tGr,aGr,nGr,H5,sGr,Yr,x9,lGr,z4e,iGr,dGr,xn,cGr,W4e,fGr,mGr,Q4e,gGr,hGr,H4e,pGr,uGr,_Gr,$9,U5,U4e,bGr,vGr,KK,FGr,TGr,MGr,J5,J4e,EGr,CGr,ZK,wGr,AGr,yGr,Y5,Aje,bf,K5,Y4e,k9,LGr,K4e,xGr,yje,Cr,S9,$Gr,vf,kGr,eZ,SGr,RGr,oZ,PGr,BGr,IGr,R9,qGr,Z4e,NGr,jGr,DGr,oa,P9,GGr,eEe,OGr,VGr,Ff,XGr,oEe,zGr,WGr,rZ,QGr,HGr,UGr,Z5,JGr,Kr,B9,YGr,rEe,KGr,ZGr,$n,eOr,tEe,oOr,rOr,aEe,tOr,aOr,nEe,nOr,sOr,lOr,sEe,e3,lEe,iOr,dOr,tZ,cOr,fOr,mOr,o3,Lje;return d=new ee({}),La=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),AA=new ee({}),yA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),xf=new gOr({props:{warning:!0,$$slots:{default:[xxt]},$$scope:{ctx:A}}}),LA=new ee({}),xA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L573"}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L596"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:A}}}),RA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/configuration_auto.py#L719"}}),PA=new ee({}),BA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L389"}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17286/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L403"}}),ih=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:A}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/tokenization_auto.py#L599"}}),DA=new ee({}),GA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17286/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),Nh=new gOr({props:{$$slots:{default:[Sxt]},$$scope:{ctx:A}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:A}}}),zA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),WA=new ee({}),QA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L87"}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L101"}}),ap=new gOr({props:{$$slots:{default:[Pxt]},$$scope:{ctx:A}}}),np=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:A}}}),YA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/processing_auto.py#L254"}}),KA=new ee({}),ZA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L735"}}),o0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),ip=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:A}}}),r0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:A}}}),t0=new ee({}),a0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L742"}}),s0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),o_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:A}}}),l0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:A}}}),i0=new ee({}),d0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L757"}}),f0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:A}}}),m0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:A}}}),g0=new ee({}),h0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L764"}}),u0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:A}}}),_0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),p1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:A}}}),b0=new ee({}),v0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L771"}}),T0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),_1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:A}}}),M0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:A}}}),E0=new ee({}),C0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L780"}}),A0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:A}}}),y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:A}}}),L0=new ee({}),x0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L825"}}),k0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:A}}}),S0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:A}}}),R0=new ee({}),P0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L832"}}),I0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:A}}}),q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:A}}}),N0=new ee({}),j0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L818"}}),G0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:A}}}),O0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:A}}}),V0=new ee({}),X0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L789"}}),W0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[e9t]},$$scope:{ctx:A}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[o9t]},$$scope:{ctx:A}}}),H0=new ee({}),U0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L796"}}),Y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[r9t]},$$scope:{ctx:A}}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[t9t]},$$scope:{ctx:A}}}),Z0=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L841"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[a9t]},$$scope:{ctx:A}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[n9t]},$$scope:{ctx:A}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L880"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[s9t]},$$scope:{ctx:A}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[l9t]},$$scope:{ctx:A}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L807"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[i9t]},$$scope:{ctx:A}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[d9t]},$$scope:{ctx:A}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L887"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[c9t]},$$scope:{ctx:A}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[f9t]},$$scope:{ctx:A}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L910"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[m9t]},$$scope:{ctx:A}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),V6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[g9t]},$$scope:{ctx:A}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L894"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),z6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[h9t]},$$scope:{ctx:A}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[p9t]},$$scope:{ctx:A}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L901"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:A}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_9t]},$$scope:{ctx:A}}}),By=new ee({}),Iy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L919"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[b9t]},$$scope:{ctx:A}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[v9t]},$$scope:{ctx:A}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L926"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[F9t]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[T9t]},$$scope:{ctx:A}}}),zy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L873"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[M9t]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[E9t]},$$scope:{ctx:A}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L848"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[C9t]},$$scope:{ctx:A}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[w9t]},$$scope:{ctx:A}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L855"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[A9t]},$$scope:{ctx:A}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[y9t]},$$scope:{ctx:A}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_auto.py#L864"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[L9t]},$$scope:{ctx:A}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[x9t]},$$scope:{ctx:A}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[$9t]},$$scope:{ctx:A}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),O8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[k9t]},$$scope:{ctx:A}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),X8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[S9t]},$$scope:{ctx:A}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[R9t]},$$scope:{ctx:A}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[P9t]},$$scope:{ctx:A}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),x7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[B9t]},$$scope:{ctx:A}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),k7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[I9t]},$$scope:{ctx:A}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[q9t]},$$scope:{ctx:A}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[N9t]},$$scope:{ctx:A}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[j9t]},$$scope:{ctx:A}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[D9t]},$$scope:{ctx:A}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[G9t]},$$scope:{ctx:A}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[O9t]},$$scope:{ctx:A}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[V9t]},$$scope:{ctx:A}}}),QL=new ee({}),HL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[X9t]},$$scope:{ctx:A}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[z9t]},$$scope:{ctx:A}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[W9t]},$$scope:{ctx:A}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Q9t]},$$scope:{ctx:A}}}),ax=new ee({}),nx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[H9t]},$$scope:{ctx:A}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[U9t]},$$scope:{ctx:A}}}),dx=new ee({}),cx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[J9t]},$$scope:{ctx:A}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Y9t]},$$scope:{ctx:A}}}),hx=new ee({}),px=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[K9t]},$$scope:{ctx:A}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:A}}}),vx=new ee({}),Fx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[e$t]},$$scope:{ctx:A}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:A}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[r$t]},$$scope:{ctx:A}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[t$t]},$$scope:{ctx:A}}}),xx=new ee({}),$x=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[a$t]},$$scope:{ctx:A}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[n$t]},$$scope:{ctx:A}}}),Px=new ee({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[s$t]},$$scope:{ctx:A}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[l$t]},$$scope:{ctx:A}}}),jx=new ee({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[i$t]},$$scope:{ctx:A}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[d$t]},$$scope:{ctx:A}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[c$t]},$$scope:{ctx:A}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:A}}}),Ux=new ee({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[m$t]},$$scope:{ctx:A}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:A}}}),e9=new ee({}),o9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),t9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[h$t]},$$scope:{ctx:A}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:A}}}),n9=new ee({}),s9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),i9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[u$t]},$$scope:{ctx:A}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:A}}}),c9=new ee({}),f9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),g9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:A}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:A}}}),p9=new ee({}),u9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),b9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:A}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:A}}}),F9=new ee({}),T9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),E9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:A}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:A}}}),w9=new ee({}),A9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:A}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:A}}}),k9=new ee({}),S9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),P9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:A}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17286/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17286/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17286/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),_i=o("Auto Classes"),Cf=l(),at=a("p"),bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),vi=a("code"),MA=o("from_pretrained()"),wf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),Fi=o("Instantiating one of "),Sn=a("a"),EA=o("AutoConfig"),Rn=o(", "),Pn=a("a"),CA=o("AutoModel"),Ti=o(`, and
`),Bn=a("a"),wA=o("AutoTokenizer"),Mi=o(" will directly create a class of the relevant architecture. For instance"),Af=l(),F(La.$$.fragment),Qe=l(),Ae=a("p"),U$=o("will create a model that is an instance of "),Ei=a("a"),J$=o("BertModel"),Y$=o("."),Co=l(),xa=a("p"),K$=o("There is one class of "),yf=a("code"),Z$=o("AutoModel"),NGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Eqe=l(),Ci=a("h2"),Lf=a("a"),Kee=a("span"),F(AA.$$.fragment),jGe=l(),Zee=a("span"),DGe=o("Extending the Auto Classes"),Cqe=l(),In=a("p"),GGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eoe=a("code"),OGe=o("NewModel"),VGe=o(", make sure you have a "),ooe=a("code"),XGe=o("NewModelConfig"),zGe=o(` then you can add those to the auto
classes like this:`),wqe=l(),F(yA.$$.fragment),Aqe=l(),ek=a("p"),WGe=o("You will then be able to use the auto classes like you would usually do!"),yqe=l(),F(xf.$$.fragment),Lqe=l(),wi=a("h2"),$f=a("a"),roe=a("span"),F(LA.$$.fragment),QGe=l(),toe=a("span"),HGe=o("AutoConfig"),xqe=l(),wo=a("div"),F(xA.$$.fragment),UGe=l(),$A=a("p"),JGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=a("a"),YGe=o("from_pretrained()"),KGe=o(" class method."),ZGe=l(),kA=a("p"),eOe=o("This class cannot be instantiated directly using "),aoe=a("code"),oOe=o("__init__()"),rOe=o(" (throws an error)."),tOe=l(),wr=a("div"),F(SA.$$.fragment),aOe=l(),noe=a("p"),nOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sOe=l(),Ai=a("p"),lOe=o("The configuration class to instantiate is selected based on the "),soe=a("code"),iOe=o("model_type"),dOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),loe=a("code"),cOe=o("pretrained_model_name_or_path"),fOe=o(":"),mOe=l(),y=a("ul"),kf=a("li"),ioe=a("strong"),gOe=o("albert"),hOe=o(" \u2014 "),rk=a("a"),pOe=o("AlbertConfig"),uOe=o(" (ALBERT model)"),_Oe=l(),Sf=a("li"),doe=a("strong"),bOe=o("bart"),vOe=o(" \u2014 "),tk=a("a"),FOe=o("BartConfig"),TOe=o(" (BART model)"),MOe=l(),Rf=a("li"),coe=a("strong"),EOe=o("beit"),COe=o(" \u2014 "),ak=a("a"),wOe=o("BeitConfig"),AOe=o(" (BEiT model)"),yOe=l(),Pf=a("li"),foe=a("strong"),LOe=o("bert"),xOe=o(" \u2014 "),nk=a("a"),$Oe=o("BertConfig"),kOe=o(" (BERT model)"),SOe=l(),Bf=a("li"),moe=a("strong"),ROe=o("bert-generation"),POe=o(" \u2014 "),sk=a("a"),BOe=o("BertGenerationConfig"),IOe=o(" (Bert Generation model)"),qOe=l(),If=a("li"),goe=a("strong"),NOe=o("big_bird"),jOe=o(" \u2014 "),lk=a("a"),DOe=o("BigBirdConfig"),GOe=o(" (BigBird model)"),OOe=l(),qf=a("li"),hoe=a("strong"),VOe=o("bigbird_pegasus"),XOe=o(" \u2014 "),ik=a("a"),zOe=o("BigBirdPegasusConfig"),WOe=o(" (BigBirdPegasus model)"),QOe=l(),Nf=a("li"),poe=a("strong"),HOe=o("blenderbot"),UOe=o(" \u2014 "),dk=a("a"),JOe=o("BlenderbotConfig"),YOe=o(" (Blenderbot model)"),KOe=l(),jf=a("li"),uoe=a("strong"),ZOe=o("blenderbot-small"),eVe=o(" \u2014 "),ck=a("a"),oVe=o("BlenderbotSmallConfig"),rVe=o(" (BlenderbotSmall model)"),tVe=l(),Df=a("li"),_oe=a("strong"),aVe=o("camembert"),nVe=o(" \u2014 "),fk=a("a"),sVe=o("CamembertConfig"),lVe=o(" (CamemBERT model)"),iVe=l(),Gf=a("li"),boe=a("strong"),dVe=o("canine"),cVe=o(" \u2014 "),mk=a("a"),fVe=o("CanineConfig"),mVe=o(" (Canine model)"),gVe=l(),Of=a("li"),voe=a("strong"),hVe=o("clip"),pVe=o(" \u2014 "),gk=a("a"),uVe=o("CLIPConfig"),_Ve=o(" (CLIP model)"),bVe=l(),Vf=a("li"),Foe=a("strong"),vVe=o("convbert"),FVe=o(" \u2014 "),hk=a("a"),TVe=o("ConvBertConfig"),MVe=o(" (ConvBERT model)"),EVe=l(),Xf=a("li"),Toe=a("strong"),CVe=o("convnext"),wVe=o(" \u2014 "),pk=a("a"),AVe=o("ConvNextConfig"),yVe=o(" (ConvNext model)"),LVe=l(),zf=a("li"),Moe=a("strong"),xVe=o("ctrl"),$Ve=o(" \u2014 "),uk=a("a"),kVe=o("CTRLConfig"),SVe=o(" (CTRL model)"),RVe=l(),Wf=a("li"),Eoe=a("strong"),PVe=o("data2vec-audio"),BVe=o(" \u2014 "),_k=a("a"),IVe=o("Data2VecAudioConfig"),qVe=o(" (Data2VecAudio model)"),NVe=l(),Qf=a("li"),Coe=a("strong"),jVe=o("data2vec-text"),DVe=o(" \u2014 "),bk=a("a"),GVe=o("Data2VecTextConfig"),OVe=o(" (Data2VecText model)"),VVe=l(),Hf=a("li"),woe=a("strong"),XVe=o("data2vec-vision"),zVe=o(" \u2014 "),vk=a("a"),WVe=o("Data2VecVisionConfig"),QVe=o(" (Data2VecVision model)"),HVe=l(),Uf=a("li"),Aoe=a("strong"),UVe=o("deberta"),JVe=o(" \u2014 "),Fk=a("a"),YVe=o("DebertaConfig"),KVe=o(" (DeBERTa model)"),ZVe=l(),Jf=a("li"),yoe=a("strong"),eXe=o("deberta-v2"),oXe=o(" \u2014 "),Tk=a("a"),rXe=o("DebertaV2Config"),tXe=o(" (DeBERTa-v2 model)"),aXe=l(),Yf=a("li"),Loe=a("strong"),nXe=o("decision_transformer"),sXe=o(" \u2014 "),Mk=a("a"),lXe=o("DecisionTransformerConfig"),iXe=o(" (Decision Transformer model)"),dXe=l(),Kf=a("li"),xoe=a("strong"),cXe=o("deit"),fXe=o(" \u2014 "),Ek=a("a"),mXe=o("DeiTConfig"),gXe=o(" (DeiT model)"),hXe=l(),Zf=a("li"),$oe=a("strong"),pXe=o("detr"),uXe=o(" \u2014 "),Ck=a("a"),_Xe=o("DetrConfig"),bXe=o(" (DETR model)"),vXe=l(),em=a("li"),koe=a("strong"),FXe=o("distilbert"),TXe=o(" \u2014 "),wk=a("a"),MXe=o("DistilBertConfig"),EXe=o(" (DistilBERT model)"),CXe=l(),om=a("li"),Soe=a("strong"),wXe=o("dpr"),AXe=o(" \u2014 "),Ak=a("a"),yXe=o("DPRConfig"),LXe=o(" (DPR model)"),xXe=l(),rm=a("li"),Roe=a("strong"),$Xe=o("dpt"),kXe=o(" \u2014 "),yk=a("a"),SXe=o("DPTConfig"),RXe=o(" (DPT model)"),PXe=l(),tm=a("li"),Poe=a("strong"),BXe=o("electra"),IXe=o(" \u2014 "),Lk=a("a"),qXe=o("ElectraConfig"),NXe=o(" (ELECTRA model)"),jXe=l(),am=a("li"),Boe=a("strong"),DXe=o("encoder-decoder"),GXe=o(" \u2014 "),xk=a("a"),OXe=o("EncoderDecoderConfig"),VXe=o(" (Encoder decoder model)"),XXe=l(),nm=a("li"),Ioe=a("strong"),zXe=o("flaubert"),WXe=o(" \u2014 "),$k=a("a"),QXe=o("FlaubertConfig"),HXe=o(" (FlauBERT model)"),UXe=l(),sm=a("li"),qoe=a("strong"),JXe=o("flava"),YXe=o(" \u2014 "),kk=a("a"),KXe=o("FlavaConfig"),ZXe=o(" (Flava model)"),eze=l(),lm=a("li"),Noe=a("strong"),oze=o("fnet"),rze=o(" \u2014 "),Sk=a("a"),tze=o("FNetConfig"),aze=o(" (FNet model)"),nze=l(),im=a("li"),joe=a("strong"),sze=o("fsmt"),lze=o(" \u2014 "),Rk=a("a"),ize=o("FSMTConfig"),dze=o(" (FairSeq Machine-Translation model)"),cze=l(),dm=a("li"),Doe=a("strong"),fze=o("funnel"),mze=o(" \u2014 "),Pk=a("a"),gze=o("FunnelConfig"),hze=o(" (Funnel Transformer model)"),pze=l(),cm=a("li"),Goe=a("strong"),uze=o("glpn"),_ze=o(" \u2014 "),Bk=a("a"),bze=o("GLPNConfig"),vze=o(" (GLPN model)"),Fze=l(),fm=a("li"),Ooe=a("strong"),Tze=o("gpt2"),Mze=o(" \u2014 "),Ik=a("a"),Eze=o("GPT2Config"),Cze=o(" (OpenAI GPT-2 model)"),wze=l(),mm=a("li"),Voe=a("strong"),Aze=o("gpt_neo"),yze=o(" \u2014 "),qk=a("a"),Lze=o("GPTNeoConfig"),xze=o(" (GPT Neo model)"),$ze=l(),gm=a("li"),Xoe=a("strong"),kze=o("gptj"),Sze=o(" \u2014 "),Nk=a("a"),Rze=o("GPTJConfig"),Pze=o(" (GPT-J model)"),Bze=l(),hm=a("li"),zoe=a("strong"),Ize=o("hubert"),qze=o(" \u2014 "),jk=a("a"),Nze=o("HubertConfig"),jze=o(" (Hubert model)"),Dze=l(),pm=a("li"),Woe=a("strong"),Gze=o("ibert"),Oze=o(" \u2014 "),Dk=a("a"),Vze=o("IBertConfig"),Xze=o(" (I-BERT model)"),zze=l(),um=a("li"),Qoe=a("strong"),Wze=o("imagegpt"),Qze=o(" \u2014 "),Gk=a("a"),Hze=o("ImageGPTConfig"),Uze=o(" (ImageGPT model)"),Jze=l(),_m=a("li"),Hoe=a("strong"),Yze=o("layoutlm"),Kze=o(" \u2014 "),Ok=a("a"),Zze=o("LayoutLMConfig"),eWe=o(" (LayoutLM model)"),oWe=l(),bm=a("li"),Uoe=a("strong"),rWe=o("layoutlmv2"),tWe=o(" \u2014 "),Vk=a("a"),aWe=o("LayoutLMv2Config"),nWe=o(" (LayoutLMv2 model)"),sWe=l(),vm=a("li"),Joe=a("strong"),lWe=o("led"),iWe=o(" \u2014 "),Xk=a("a"),dWe=o("LEDConfig"),cWe=o(" (LED model)"),fWe=l(),Fm=a("li"),Yoe=a("strong"),mWe=o("longformer"),gWe=o(" \u2014 "),zk=a("a"),hWe=o("LongformerConfig"),pWe=o(" (Longformer model)"),uWe=l(),Tm=a("li"),Koe=a("strong"),_We=o("luke"),bWe=o(" \u2014 "),Wk=a("a"),vWe=o("LukeConfig"),FWe=o(" (LUKE model)"),TWe=l(),Mm=a("li"),Zoe=a("strong"),MWe=o("lxmert"),EWe=o(" \u2014 "),Qk=a("a"),CWe=o("LxmertConfig"),wWe=o(" (LXMERT model)"),AWe=l(),Em=a("li"),ere=a("strong"),yWe=o("m2m_100"),LWe=o(" \u2014 "),Hk=a("a"),xWe=o("M2M100Config"),$We=o(" (M2M100 model)"),kWe=l(),Cm=a("li"),ore=a("strong"),SWe=o("marian"),RWe=o(" \u2014 "),Uk=a("a"),PWe=o("MarianConfig"),BWe=o(" (Marian model)"),IWe=l(),wm=a("li"),rre=a("strong"),qWe=o("maskformer"),NWe=o(" \u2014 "),Jk=a("a"),jWe=o("MaskFormerConfig"),DWe=o(" (MaskFormer model)"),GWe=l(),Am=a("li"),tre=a("strong"),OWe=o("mbart"),VWe=o(" \u2014 "),Yk=a("a"),XWe=o("MBartConfig"),zWe=o(" (mBART model)"),WWe=l(),ym=a("li"),are=a("strong"),QWe=o("megatron-bert"),HWe=o(" \u2014 "),Kk=a("a"),UWe=o("MegatronBertConfig"),JWe=o(" (MegatronBert model)"),YWe=l(),Lm=a("li"),nre=a("strong"),KWe=o("mobilebert"),ZWe=o(" \u2014 "),Zk=a("a"),eQe=o("MobileBertConfig"),oQe=o(" (MobileBERT model)"),rQe=l(),xm=a("li"),sre=a("strong"),tQe=o("mpnet"),aQe=o(" \u2014 "),eS=a("a"),nQe=o("MPNetConfig"),sQe=o(" (MPNet model)"),lQe=l(),$m=a("li"),lre=a("strong"),iQe=o("mt5"),dQe=o(" \u2014 "),oS=a("a"),cQe=o("MT5Config"),fQe=o(" (mT5 model)"),mQe=l(),km=a("li"),ire=a("strong"),gQe=o("nystromformer"),hQe=o(" \u2014 "),rS=a("a"),pQe=o("NystromformerConfig"),uQe=o(" (Nystromformer model)"),_Qe=l(),Sm=a("li"),dre=a("strong"),bQe=o("openai-gpt"),vQe=o(" \u2014 "),tS=a("a"),FQe=o("OpenAIGPTConfig"),TQe=o(" (OpenAI GPT model)"),MQe=l(),Rm=a("li"),cre=a("strong"),EQe=o("opt"),CQe=o(" \u2014 "),aS=a("a"),wQe=o("OPTConfig"),AQe=o(" (OPT model)"),yQe=l(),Pm=a("li"),fre=a("strong"),LQe=o("pegasus"),xQe=o(" \u2014 "),nS=a("a"),$Qe=o("PegasusConfig"),kQe=o(" (Pegasus model)"),SQe=l(),Bm=a("li"),mre=a("strong"),RQe=o("perceiver"),PQe=o(" \u2014 "),sS=a("a"),BQe=o("PerceiverConfig"),IQe=o(" (Perceiver model)"),qQe=l(),Im=a("li"),gre=a("strong"),NQe=o("plbart"),jQe=o(" \u2014 "),lS=a("a"),DQe=o("PLBartConfig"),GQe=o(" (PLBart model)"),OQe=l(),qm=a("li"),hre=a("strong"),VQe=o("poolformer"),XQe=o(" \u2014 "),iS=a("a"),zQe=o("PoolFormerConfig"),WQe=o(" (PoolFormer model)"),QQe=l(),Nm=a("li"),pre=a("strong"),HQe=o("prophetnet"),UQe=o(" \u2014 "),dS=a("a"),JQe=o("ProphetNetConfig"),YQe=o(" (ProphetNet model)"),KQe=l(),jm=a("li"),ure=a("strong"),ZQe=o("qdqbert"),eHe=o(" \u2014 "),cS=a("a"),oHe=o("QDQBertConfig"),rHe=o(" (QDQBert model)"),tHe=l(),Dm=a("li"),_re=a("strong"),aHe=o("rag"),nHe=o(" \u2014 "),fS=a("a"),sHe=o("RagConfig"),lHe=o(" (RAG model)"),iHe=l(),Gm=a("li"),bre=a("strong"),dHe=o("realm"),cHe=o(" \u2014 "),mS=a("a"),fHe=o("RealmConfig"),mHe=o(" (Realm model)"),gHe=l(),Om=a("li"),vre=a("strong"),hHe=o("reformer"),pHe=o(" \u2014 "),gS=a("a"),uHe=o("ReformerConfig"),_He=o(" (Reformer model)"),bHe=l(),Vm=a("li"),Fre=a("strong"),vHe=o("regnet"),FHe=o(" \u2014 "),hS=a("a"),THe=o("RegNetConfig"),MHe=o(" (RegNet model)"),EHe=l(),Xm=a("li"),Tre=a("strong"),CHe=o("rembert"),wHe=o(" \u2014 "),pS=a("a"),AHe=o("RemBertConfig"),yHe=o(" (RemBERT model)"),LHe=l(),zm=a("li"),Mre=a("strong"),xHe=o("resnet"),$He=o(" \u2014 "),uS=a("a"),kHe=o("ResNetConfig"),SHe=o(" (ResNet model)"),RHe=l(),Wm=a("li"),Ere=a("strong"),PHe=o("retribert"),BHe=o(" \u2014 "),_S=a("a"),IHe=o("RetriBertConfig"),qHe=o(" (RetriBERT model)"),NHe=l(),Qm=a("li"),Cre=a("strong"),jHe=o("roberta"),DHe=o(" \u2014 "),bS=a("a"),GHe=o("RobertaConfig"),OHe=o(" (RoBERTa model)"),VHe=l(),Hm=a("li"),wre=a("strong"),XHe=o("roformer"),zHe=o(" \u2014 "),vS=a("a"),WHe=o("RoFormerConfig"),QHe=o(" (RoFormer model)"),HHe=l(),Um=a("li"),Are=a("strong"),UHe=o("segformer"),JHe=o(" \u2014 "),FS=a("a"),YHe=o("SegformerConfig"),KHe=o(" (SegFormer model)"),ZHe=l(),Jm=a("li"),yre=a("strong"),eUe=o("sew"),oUe=o(" \u2014 "),TS=a("a"),rUe=o("SEWConfig"),tUe=o(" (SEW model)"),aUe=l(),Ym=a("li"),Lre=a("strong"),nUe=o("sew-d"),sUe=o(" \u2014 "),MS=a("a"),lUe=o("SEWDConfig"),iUe=o(" (SEW-D model)"),dUe=l(),Km=a("li"),xre=a("strong"),cUe=o("speech-encoder-decoder"),fUe=o(" \u2014 "),ES=a("a"),mUe=o("SpeechEncoderDecoderConfig"),gUe=o(" (Speech Encoder decoder model)"),hUe=l(),Zm=a("li"),$re=a("strong"),pUe=o("speech_to_text"),uUe=o(" \u2014 "),CS=a("a"),_Ue=o("Speech2TextConfig"),bUe=o(" (Speech2Text model)"),vUe=l(),eg=a("li"),kre=a("strong"),FUe=o("speech_to_text_2"),TUe=o(" \u2014 "),wS=a("a"),MUe=o("Speech2Text2Config"),EUe=o(" (Speech2Text2 model)"),CUe=l(),og=a("li"),Sre=a("strong"),wUe=o("splinter"),AUe=o(" \u2014 "),AS=a("a"),yUe=o("SplinterConfig"),LUe=o(" (Splinter model)"),xUe=l(),rg=a("li"),Rre=a("strong"),$Ue=o("squeezebert"),kUe=o(" \u2014 "),yS=a("a"),SUe=o("SqueezeBertConfig"),RUe=o(" (SqueezeBERT model)"),PUe=l(),tg=a("li"),Pre=a("strong"),BUe=o("swin"),IUe=o(" \u2014 "),LS=a("a"),qUe=o("SwinConfig"),NUe=o(" (Swin model)"),jUe=l(),ag=a("li"),Bre=a("strong"),DUe=o("t5"),GUe=o(" \u2014 "),xS=a("a"),OUe=o("T5Config"),VUe=o(" (T5 model)"),XUe=l(),ng=a("li"),Ire=a("strong"),zUe=o("tapas"),WUe=o(" \u2014 "),$S=a("a"),QUe=o("TapasConfig"),HUe=o(" (TAPAS model)"),UUe=l(),sg=a("li"),qre=a("strong"),JUe=o("transfo-xl"),YUe=o(" \u2014 "),kS=a("a"),KUe=o("TransfoXLConfig"),ZUe=o(" (Transformer-XL model)"),eJe=l(),lg=a("li"),Nre=a("strong"),oJe=o("trocr"),rJe=o(" \u2014 "),SS=a("a"),tJe=o("TrOCRConfig"),aJe=o(" (TrOCR model)"),nJe=l(),ig=a("li"),jre=a("strong"),sJe=o("unispeech"),lJe=o(" \u2014 "),RS=a("a"),iJe=o("UniSpeechConfig"),dJe=o(" (UniSpeech model)"),cJe=l(),dg=a("li"),Dre=a("strong"),fJe=o("unispeech-sat"),mJe=o(" \u2014 "),PS=a("a"),gJe=o("UniSpeechSatConfig"),hJe=o(" (UniSpeechSat model)"),pJe=l(),cg=a("li"),Gre=a("strong"),uJe=o("van"),_Je=o(" \u2014 "),BS=a("a"),bJe=o("VanConfig"),vJe=o(" (VAN model)"),FJe=l(),fg=a("li"),Ore=a("strong"),TJe=o("vilt"),MJe=o(" \u2014 "),IS=a("a"),EJe=o("ViltConfig"),CJe=o(" (ViLT model)"),wJe=l(),mg=a("li"),Vre=a("strong"),AJe=o("vision-encoder-decoder"),yJe=o(" \u2014 "),qS=a("a"),LJe=o("VisionEncoderDecoderConfig"),xJe=o(" (Vision Encoder decoder model)"),$Je=l(),gg=a("li"),Xre=a("strong"),kJe=o("vision-text-dual-encoder"),SJe=o(" \u2014 "),NS=a("a"),RJe=o("VisionTextDualEncoderConfig"),PJe=o(" (VisionTextDualEncoder model)"),BJe=l(),hg=a("li"),zre=a("strong"),IJe=o("visual_bert"),qJe=o(" \u2014 "),jS=a("a"),NJe=o("VisualBertConfig"),jJe=o(" (VisualBert model)"),DJe=l(),pg=a("li"),Wre=a("strong"),GJe=o("vit"),OJe=o(" \u2014 "),DS=a("a"),VJe=o("ViTConfig"),XJe=o(" (ViT model)"),zJe=l(),ug=a("li"),Qre=a("strong"),WJe=o("vit_mae"),QJe=o(" \u2014 "),GS=a("a"),HJe=o("ViTMAEConfig"),UJe=o(" (ViTMAE model)"),JJe=l(),_g=a("li"),Hre=a("strong"),YJe=o("wav2vec2"),KJe=o(" \u2014 "),OS=a("a"),ZJe=o("Wav2Vec2Config"),eYe=o(" (Wav2Vec2 model)"),oYe=l(),bg=a("li"),Ure=a("strong"),rYe=o("wav2vec2-conformer"),tYe=o(" \u2014 "),VS=a("a"),aYe=o("Wav2Vec2ConformerConfig"),nYe=o(" (Wav2Vec2-Conformer model)"),sYe=l(),vg=a("li"),Jre=a("strong"),lYe=o("wavlm"),iYe=o(" \u2014 "),XS=a("a"),dYe=o("WavLMConfig"),cYe=o(" (WavLM model)"),fYe=l(),Fg=a("li"),Yre=a("strong"),mYe=o("xglm"),gYe=o(" \u2014 "),zS=a("a"),hYe=o("XGLMConfig"),pYe=o(" (XGLM model)"),uYe=l(),Tg=a("li"),Kre=a("strong"),_Ye=o("xlm"),bYe=o(" \u2014 "),WS=a("a"),vYe=o("XLMConfig"),FYe=o(" (XLM model)"),TYe=l(),Mg=a("li"),Zre=a("strong"),MYe=o("xlm-prophetnet"),EYe=o(" \u2014 "),QS=a("a"),CYe=o("XLMProphetNetConfig"),wYe=o(" (XLMProphetNet model)"),AYe=l(),Eg=a("li"),ete=a("strong"),yYe=o("xlm-roberta"),LYe=o(" \u2014 "),HS=a("a"),xYe=o("XLMRobertaConfig"),$Ye=o(" (XLM-RoBERTa model)"),kYe=l(),Cg=a("li"),ote=a("strong"),SYe=o("xlm-roberta-xl"),RYe=o(" \u2014 "),US=a("a"),PYe=o("XLMRobertaXLConfig"),BYe=o(" (XLM-RoBERTa-XL model)"),IYe=l(),wg=a("li"),rte=a("strong"),qYe=o("xlnet"),NYe=o(" \u2014 "),JS=a("a"),jYe=o("XLNetConfig"),DYe=o(" (XLNet model)"),GYe=l(),Ag=a("li"),tte=a("strong"),OYe=o("yolos"),VYe=o(" \u2014 "),YS=a("a"),XYe=o("YolosConfig"),zYe=o(" (YOLOS model)"),WYe=l(),yg=a("li"),ate=a("strong"),QYe=o("yoso"),HYe=o(" \u2014 "),KS=a("a"),UYe=o("YosoConfig"),JYe=o(" (YOSO model)"),YYe=l(),F(Lg.$$.fragment),KYe=l(),xg=a("div"),F(RA.$$.fragment),ZYe=l(),nte=a("p"),eKe=o("Register a new configuration for this class."),$qe=l(),yi=a("h2"),$g=a("a"),ste=a("span"),F(PA.$$.fragment),oKe=l(),lte=a("span"),rKe=o("AutoTokenizer"),kqe=l(),Ao=a("div"),F(BA.$$.fragment),tKe=l(),IA=a("p"),aKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=a("a"),nKe=o("AutoTokenizer.from_pretrained()"),sKe=o(" class method."),lKe=l(),qA=a("p"),iKe=o("This class cannot be instantiated directly using "),ite=a("code"),dKe=o("__init__()"),cKe=o(" (throws an error)."),fKe=l(),Ar=a("div"),F(NA.$$.fragment),mKe=l(),dte=a("p"),gKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hKe=l(),$a=a("p"),pKe=o("The tokenizer class to instantiate is selected based on the "),cte=a("code"),uKe=o("model_type"),_Ke=o(` property of the config object (either
passed as an argument or loaded from `),fte=a("code"),bKe=o("pretrained_model_name_or_path"),vKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=a("code"),FKe=o("pretrained_model_name_or_path"),TKe=o(":"),MKe=l(),k=a("ul"),qn=a("li"),gte=a("strong"),EKe=o("albert"),CKe=o(" \u2014 "),eR=a("a"),wKe=o("AlbertTokenizer"),AKe=o(" or "),oR=a("a"),yKe=o("AlbertTokenizerFast"),LKe=o(" (ALBERT model)"),xKe=l(),Nn=a("li"),hte=a("strong"),$Ke=o("bart"),kKe=o(" \u2014 "),rR=a("a"),SKe=o("BartTokenizer"),RKe=o(" or "),tR=a("a"),PKe=o("BartTokenizerFast"),BKe=o(" (BART model)"),IKe=l(),jn=a("li"),pte=a("strong"),qKe=o("barthez"),NKe=o(" \u2014 "),aR=a("a"),jKe=o("BarthezTokenizer"),DKe=o(" or "),nR=a("a"),GKe=o("BarthezTokenizerFast"),OKe=o(" (BARThez model)"),VKe=l(),kg=a("li"),ute=a("strong"),XKe=o("bartpho"),zKe=o(" \u2014 "),sR=a("a"),WKe=o("BartphoTokenizer"),QKe=o(" (BARTpho model)"),HKe=l(),Dn=a("li"),_te=a("strong"),UKe=o("bert"),JKe=o(" \u2014 "),lR=a("a"),YKe=o("BertTokenizer"),KKe=o(" or "),iR=a("a"),ZKe=o("BertTokenizerFast"),eZe=o(" (BERT model)"),oZe=l(),Sg=a("li"),bte=a("strong"),rZe=o("bert-generation"),tZe=o(" \u2014 "),dR=a("a"),aZe=o("BertGenerationTokenizer"),nZe=o(" (Bert Generation model)"),sZe=l(),Rg=a("li"),vte=a("strong"),lZe=o("bert-japanese"),iZe=o(" \u2014 "),cR=a("a"),dZe=o("BertJapaneseTokenizer"),cZe=o(" (BertJapanese model)"),fZe=l(),Pg=a("li"),Fte=a("strong"),mZe=o("bertweet"),gZe=o(" \u2014 "),fR=a("a"),hZe=o("BertweetTokenizer"),pZe=o(" (Bertweet model)"),uZe=l(),Gn=a("li"),Tte=a("strong"),_Ze=o("big_bird"),bZe=o(" \u2014 "),mR=a("a"),vZe=o("BigBirdTokenizer"),FZe=o(" or "),gR=a("a"),TZe=o("BigBirdTokenizerFast"),MZe=o(" (BigBird model)"),EZe=l(),On=a("li"),Mte=a("strong"),CZe=o("bigbird_pegasus"),wZe=o(" \u2014 "),hR=a("a"),AZe=o("PegasusTokenizer"),yZe=o(" or "),pR=a("a"),LZe=o("PegasusTokenizerFast"),xZe=o(" (BigBirdPegasus model)"),$Ze=l(),Vn=a("li"),Ete=a("strong"),kZe=o("blenderbot"),SZe=o(" \u2014 "),uR=a("a"),RZe=o("BlenderbotTokenizer"),PZe=o(" or "),_R=a("a"),BZe=o("BlenderbotTokenizerFast"),IZe=o(" (Blenderbot model)"),qZe=l(),Bg=a("li"),Cte=a("strong"),NZe=o("blenderbot-small"),jZe=o(" \u2014 "),bR=a("a"),DZe=o("BlenderbotSmallTokenizer"),GZe=o(" (BlenderbotSmall model)"),OZe=l(),Ig=a("li"),wte=a("strong"),VZe=o("byt5"),XZe=o(" \u2014 "),vR=a("a"),zZe=o("ByT5Tokenizer"),WZe=o(" (ByT5 model)"),QZe=l(),Xn=a("li"),Ate=a("strong"),HZe=o("camembert"),UZe=o(" \u2014 "),FR=a("a"),JZe=o("CamembertTokenizer"),YZe=o(" or "),TR=a("a"),KZe=o("CamembertTokenizerFast"),ZZe=o(" (CamemBERT model)"),eeo=l(),qg=a("li"),yte=a("strong"),oeo=o("canine"),reo=o(" \u2014 "),MR=a("a"),teo=o("CanineTokenizer"),aeo=o(" (Canine model)"),neo=l(),zn=a("li"),Lte=a("strong"),seo=o("clip"),leo=o(" \u2014 "),ER=a("a"),ieo=o("CLIPTokenizer"),deo=o(" or "),CR=a("a"),ceo=o("CLIPTokenizerFast"),feo=o(" (CLIP model)"),meo=l(),Wn=a("li"),xte=a("strong"),geo=o("convbert"),heo=o(" \u2014 "),wR=a("a"),peo=o("ConvBertTokenizer"),ueo=o(" or "),AR=a("a"),_eo=o("ConvBertTokenizerFast"),beo=o(" (ConvBERT model)"),veo=l(),Qn=a("li"),$te=a("strong"),Feo=o("cpm"),Teo=o(" \u2014 "),yR=a("a"),Meo=o("CpmTokenizer"),Eeo=o(" or "),LR=a("a"),Ceo=o("CpmTokenizerFast"),weo=o(" (CPM model)"),Aeo=l(),Ng=a("li"),kte=a("strong"),yeo=o("ctrl"),Leo=o(" \u2014 "),xR=a("a"),xeo=o("CTRLTokenizer"),$eo=o(" (CTRL model)"),keo=l(),Hn=a("li"),Ste=a("strong"),Seo=o("data2vec-text"),Reo=o(" \u2014 "),$R=a("a"),Peo=o("RobertaTokenizer"),Beo=o(" or "),kR=a("a"),Ieo=o("RobertaTokenizerFast"),qeo=o(" (Data2VecText model)"),Neo=l(),Un=a("li"),Rte=a("strong"),jeo=o("deberta"),Deo=o(" \u2014 "),SR=a("a"),Geo=o("DebertaTokenizer"),Oeo=o(" or "),RR=a("a"),Veo=o("DebertaTokenizerFast"),Xeo=o(" (DeBERTa model)"),zeo=l(),Jn=a("li"),Pte=a("strong"),Weo=o("deberta-v2"),Qeo=o(" \u2014 "),PR=a("a"),Heo=o("DebertaV2Tokenizer"),Ueo=o(" or "),BR=a("a"),Jeo=o("DebertaV2TokenizerFast"),Yeo=o(" (DeBERTa-v2 model)"),Keo=l(),Yn=a("li"),Bte=a("strong"),Zeo=o("distilbert"),eoo=o(" \u2014 "),IR=a("a"),ooo=o("DistilBertTokenizer"),roo=o(" or "),qR=a("a"),too=o("DistilBertTokenizerFast"),aoo=o(" (DistilBERT model)"),noo=l(),Kn=a("li"),Ite=a("strong"),soo=o("dpr"),loo=o(" \u2014 "),NR=a("a"),ioo=o("DPRQuestionEncoderTokenizer"),doo=o(" or "),jR=a("a"),coo=o("DPRQuestionEncoderTokenizerFast"),foo=o(" (DPR model)"),moo=l(),Zn=a("li"),qte=a("strong"),goo=o("electra"),hoo=o(" \u2014 "),DR=a("a"),poo=o("ElectraTokenizer"),uoo=o(" or "),GR=a("a"),_oo=o("ElectraTokenizerFast"),boo=o(" (ELECTRA model)"),voo=l(),jg=a("li"),Nte=a("strong"),Foo=o("flaubert"),Too=o(" \u2014 "),OR=a("a"),Moo=o("FlaubertTokenizer"),Eoo=o(" (FlauBERT model)"),Coo=l(),es=a("li"),jte=a("strong"),woo=o("fnet"),Aoo=o(" \u2014 "),VR=a("a"),yoo=o("FNetTokenizer"),Loo=o(" or "),XR=a("a"),xoo=o("FNetTokenizerFast"),$oo=o(" (FNet model)"),koo=l(),Dg=a("li"),Dte=a("strong"),Soo=o("fsmt"),Roo=o(" \u2014 "),zR=a("a"),Poo=o("FSMTTokenizer"),Boo=o(" (FairSeq Machine-Translation model)"),Ioo=l(),os=a("li"),Gte=a("strong"),qoo=o("funnel"),Noo=o(" \u2014 "),WR=a("a"),joo=o("FunnelTokenizer"),Doo=o(" or "),QR=a("a"),Goo=o("FunnelTokenizerFast"),Ooo=o(" (Funnel Transformer model)"),Voo=l(),rs=a("li"),Ote=a("strong"),Xoo=o("gpt2"),zoo=o(" \u2014 "),HR=a("a"),Woo=o("GPT2Tokenizer"),Qoo=o(" or "),UR=a("a"),Hoo=o("GPT2TokenizerFast"),Uoo=o(" (OpenAI GPT-2 model)"),Joo=l(),ts=a("li"),Vte=a("strong"),Yoo=o("gpt_neo"),Koo=o(" \u2014 "),JR=a("a"),Zoo=o("GPT2Tokenizer"),ero=o(" or "),YR=a("a"),oro=o("GPT2TokenizerFast"),rro=o(" (GPT Neo model)"),tro=l(),as=a("li"),Xte=a("strong"),aro=o("gptj"),nro=o(" \u2014 "),KR=a("a"),sro=o("GPT2Tokenizer"),lro=o(" or "),ZR=a("a"),iro=o("GPT2TokenizerFast"),dro=o(" (GPT-J model)"),cro=l(),ns=a("li"),zte=a("strong"),fro=o("herbert"),mro=o(" \u2014 "),eP=a("a"),gro=o("HerbertTokenizer"),hro=o(" or "),oP=a("a"),pro=o("HerbertTokenizerFast"),uro=o(" (HerBERT model)"),_ro=l(),Gg=a("li"),Wte=a("strong"),bro=o("hubert"),vro=o(" \u2014 "),rP=a("a"),Fro=o("Wav2Vec2CTCTokenizer"),Tro=o(" (Hubert model)"),Mro=l(),ss=a("li"),Qte=a("strong"),Ero=o("ibert"),Cro=o(" \u2014 "),tP=a("a"),wro=o("RobertaTokenizer"),Aro=o(" or "),aP=a("a"),yro=o("RobertaTokenizerFast"),Lro=o(" (I-BERT model)"),xro=l(),ls=a("li"),Hte=a("strong"),$ro=o("layoutlm"),kro=o(" \u2014 "),nP=a("a"),Sro=o("LayoutLMTokenizer"),Rro=o(" or "),sP=a("a"),Pro=o("LayoutLMTokenizerFast"),Bro=o(" (LayoutLM model)"),Iro=l(),is=a("li"),Ute=a("strong"),qro=o("layoutlmv2"),Nro=o(" \u2014 "),lP=a("a"),jro=o("LayoutLMv2Tokenizer"),Dro=o(" or "),iP=a("a"),Gro=o("LayoutLMv2TokenizerFast"),Oro=o(" (LayoutLMv2 model)"),Vro=l(),ds=a("li"),Jte=a("strong"),Xro=o("layoutxlm"),zro=o(" \u2014 "),dP=a("a"),Wro=o("LayoutXLMTokenizer"),Qro=o(" or "),cP=a("a"),Hro=o("LayoutXLMTokenizerFast"),Uro=o(" (LayoutXLM model)"),Jro=l(),cs=a("li"),Yte=a("strong"),Yro=o("led"),Kro=o(" \u2014 "),fP=a("a"),Zro=o("LEDTokenizer"),eto=o(" or "),mP=a("a"),oto=o("LEDTokenizerFast"),rto=o(" (LED model)"),tto=l(),fs=a("li"),Kte=a("strong"),ato=o("longformer"),nto=o(" \u2014 "),gP=a("a"),sto=o("LongformerTokenizer"),lto=o(" or "),hP=a("a"),ito=o("LongformerTokenizerFast"),dto=o(" (Longformer model)"),cto=l(),Og=a("li"),Zte=a("strong"),fto=o("luke"),mto=o(" \u2014 "),pP=a("a"),gto=o("LukeTokenizer"),hto=o(" (LUKE model)"),pto=l(),ms=a("li"),eae=a("strong"),uto=o("lxmert"),_to=o(" \u2014 "),uP=a("a"),bto=o("LxmertTokenizer"),vto=o(" or "),_P=a("a"),Fto=o("LxmertTokenizerFast"),Tto=o(" (LXMERT model)"),Mto=l(),Vg=a("li"),oae=a("strong"),Eto=o("m2m_100"),Cto=o(" \u2014 "),bP=a("a"),wto=o("M2M100Tokenizer"),Ato=o(" (M2M100 model)"),yto=l(),Xg=a("li"),rae=a("strong"),Lto=o("marian"),xto=o(" \u2014 "),vP=a("a"),$to=o("MarianTokenizer"),kto=o(" (Marian model)"),Sto=l(),gs=a("li"),tae=a("strong"),Rto=o("mbart"),Pto=o(" \u2014 "),FP=a("a"),Bto=o("MBartTokenizer"),Ito=o(" or "),TP=a("a"),qto=o("MBartTokenizerFast"),Nto=o(" (mBART model)"),jto=l(),hs=a("li"),aae=a("strong"),Dto=o("mbart50"),Gto=o(" \u2014 "),MP=a("a"),Oto=o("MBart50Tokenizer"),Vto=o(" or "),EP=a("a"),Xto=o("MBart50TokenizerFast"),zto=o(" (mBART-50 model)"),Wto=l(),ps=a("li"),nae=a("strong"),Qto=o("megatron-bert"),Hto=o(" \u2014 "),CP=a("a"),Uto=o("BertTokenizer"),Jto=o(" or "),wP=a("a"),Yto=o("BertTokenizerFast"),Kto=o(" (MegatronBert model)"),Zto=l(),zg=a("li"),sae=a("strong"),eao=o("mluke"),oao=o(" \u2014 "),AP=a("a"),rao=o("MLukeTokenizer"),tao=o(" (mLUKE model)"),aao=l(),us=a("li"),lae=a("strong"),nao=o("mobilebert"),sao=o(" \u2014 "),yP=a("a"),lao=o("MobileBertTokenizer"),iao=o(" or "),LP=a("a"),dao=o("MobileBertTokenizerFast"),cao=o(" (MobileBERT model)"),fao=l(),_s=a("li"),iae=a("strong"),mao=o("mpnet"),gao=o(" \u2014 "),xP=a("a"),hao=o("MPNetTokenizer"),pao=o(" or "),$P=a("a"),uao=o("MPNetTokenizerFast"),_ao=o(" (MPNet model)"),bao=l(),bs=a("li"),dae=a("strong"),vao=o("mt5"),Fao=o(" \u2014 "),kP=a("a"),Tao=o("MT5Tokenizer"),Mao=o(" or "),SP=a("a"),Eao=o("MT5TokenizerFast"),Cao=o(" (mT5 model)"),wao=l(),vs=a("li"),cae=a("strong"),Aao=o("nystromformer"),yao=o(" \u2014 "),RP=a("a"),Lao=o("AlbertTokenizer"),xao=o(" or "),PP=a("a"),$ao=o("AlbertTokenizerFast"),kao=o(" (Nystromformer model)"),Sao=l(),Fs=a("li"),fae=a("strong"),Rao=o("openai-gpt"),Pao=o(" \u2014 "),BP=a("a"),Bao=o("OpenAIGPTTokenizer"),Iao=o(" or "),IP=a("a"),qao=o("OpenAIGPTTokenizerFast"),Nao=o(" (OpenAI GPT model)"),jao=l(),Wg=a("li"),mae=a("strong"),Dao=o("opt"),Gao=o(" \u2014 "),qP=a("a"),Oao=o("GPT2Tokenizer"),Vao=o(" (OPT model)"),Xao=l(),Ts=a("li"),gae=a("strong"),zao=o("pegasus"),Wao=o(" \u2014 "),NP=a("a"),Qao=o("PegasusTokenizer"),Hao=o(" or "),jP=a("a"),Uao=o("PegasusTokenizerFast"),Jao=o(" (Pegasus model)"),Yao=l(),Qg=a("li"),hae=a("strong"),Kao=o("perceiver"),Zao=o(" \u2014 "),DP=a("a"),eno=o("PerceiverTokenizer"),ono=o(" (Perceiver model)"),rno=l(),Hg=a("li"),pae=a("strong"),tno=o("phobert"),ano=o(" \u2014 "),GP=a("a"),nno=o("PhobertTokenizer"),sno=o(" (PhoBERT model)"),lno=l(),Ug=a("li"),uae=a("strong"),ino=o("plbart"),dno=o(" \u2014 "),OP=a("a"),cno=o("PLBartTokenizer"),fno=o(" (PLBart model)"),mno=l(),Jg=a("li"),_ae=a("strong"),gno=o("prophetnet"),hno=o(" \u2014 "),VP=a("a"),pno=o("ProphetNetTokenizer"),uno=o(" (ProphetNet model)"),_no=l(),Ms=a("li"),bae=a("strong"),bno=o("qdqbert"),vno=o(" \u2014 "),XP=a("a"),Fno=o("BertTokenizer"),Tno=o(" or "),zP=a("a"),Mno=o("BertTokenizerFast"),Eno=o(" (QDQBert model)"),Cno=l(),Yg=a("li"),vae=a("strong"),wno=o("rag"),Ano=o(" \u2014 "),WP=a("a"),yno=o("RagTokenizer"),Lno=o(" (RAG model)"),xno=l(),Es=a("li"),Fae=a("strong"),$no=o("realm"),kno=o(" \u2014 "),QP=a("a"),Sno=o("RealmTokenizer"),Rno=o(" or "),HP=a("a"),Pno=o("RealmTokenizerFast"),Bno=o(" (Realm model)"),Ino=l(),Cs=a("li"),Tae=a("strong"),qno=o("reformer"),Nno=o(" \u2014 "),UP=a("a"),jno=o("ReformerTokenizer"),Dno=o(" or "),JP=a("a"),Gno=o("ReformerTokenizerFast"),Ono=o(" (Reformer model)"),Vno=l(),ws=a("li"),Mae=a("strong"),Xno=o("rembert"),zno=o(" \u2014 "),YP=a("a"),Wno=o("RemBertTokenizer"),Qno=o(" or "),KP=a("a"),Hno=o("RemBertTokenizerFast"),Uno=o(" (RemBERT model)"),Jno=l(),As=a("li"),Eae=a("strong"),Yno=o("retribert"),Kno=o(" \u2014 "),ZP=a("a"),Zno=o("RetriBertTokenizer"),eso=o(" or "),eB=a("a"),oso=o("RetriBertTokenizerFast"),rso=o(" (RetriBERT model)"),tso=l(),ys=a("li"),Cae=a("strong"),aso=o("roberta"),nso=o(" \u2014 "),oB=a("a"),sso=o("RobertaTokenizer"),lso=o(" or "),rB=a("a"),iso=o("RobertaTokenizerFast"),dso=o(" (RoBERTa model)"),cso=l(),Ls=a("li"),wae=a("strong"),fso=o("roformer"),mso=o(" \u2014 "),tB=a("a"),gso=o("RoFormerTokenizer"),hso=o(" or "),aB=a("a"),pso=o("RoFormerTokenizerFast"),uso=o(" (RoFormer model)"),_so=l(),Kg=a("li"),Aae=a("strong"),bso=o("speech_to_text"),vso=o(" \u2014 "),nB=a("a"),Fso=o("Speech2TextTokenizer"),Tso=o(" (Speech2Text model)"),Mso=l(),Zg=a("li"),yae=a("strong"),Eso=o("speech_to_text_2"),Cso=o(" \u2014 "),sB=a("a"),wso=o("Speech2Text2Tokenizer"),Aso=o(" (Speech2Text2 model)"),yso=l(),xs=a("li"),Lae=a("strong"),Lso=o("splinter"),xso=o(" \u2014 "),lB=a("a"),$so=o("SplinterTokenizer"),kso=o(" or "),iB=a("a"),Sso=o("SplinterTokenizerFast"),Rso=o(" (Splinter model)"),Pso=l(),$s=a("li"),xae=a("strong"),Bso=o("squeezebert"),Iso=o(" \u2014 "),dB=a("a"),qso=o("SqueezeBertTokenizer"),Nso=o(" or "),cB=a("a"),jso=o("SqueezeBertTokenizerFast"),Dso=o(" (SqueezeBERT model)"),Gso=l(),ks=a("li"),$ae=a("strong"),Oso=o("t5"),Vso=o(" \u2014 "),fB=a("a"),Xso=o("T5Tokenizer"),zso=o(" or "),mB=a("a"),Wso=o("T5TokenizerFast"),Qso=o(" (T5 model)"),Hso=l(),eh=a("li"),kae=a("strong"),Uso=o("tapas"),Jso=o(" \u2014 "),gB=a("a"),Yso=o("TapasTokenizer"),Kso=o(" (TAPAS model)"),Zso=l(),oh=a("li"),Sae=a("strong"),elo=o("tapex"),olo=o(" \u2014 "),hB=a("a"),rlo=o("TapexTokenizer"),tlo=o(" (TAPEX model)"),alo=l(),rh=a("li"),Rae=a("strong"),nlo=o("transfo-xl"),slo=o(" \u2014 "),pB=a("a"),llo=o("TransfoXLTokenizer"),ilo=o(" (Transformer-XL model)"),dlo=l(),Ss=a("li"),Pae=a("strong"),clo=o("vilt"),flo=o(" \u2014 "),uB=a("a"),mlo=o("BertTokenizer"),glo=o(" or "),_B=a("a"),hlo=o("BertTokenizerFast"),plo=o(" (ViLT model)"),ulo=l(),Rs=a("li"),Bae=a("strong"),_lo=o("visual_bert"),blo=o(" \u2014 "),bB=a("a"),vlo=o("BertTokenizer"),Flo=o(" or "),vB=a("a"),Tlo=o("BertTokenizerFast"),Mlo=o(" (VisualBert model)"),Elo=l(),th=a("li"),Iae=a("strong"),Clo=o("wav2vec2"),wlo=o(" \u2014 "),FB=a("a"),Alo=o("Wav2Vec2CTCTokenizer"),ylo=o(" (Wav2Vec2 model)"),Llo=l(),ah=a("li"),qae=a("strong"),xlo=o("wav2vec2-conformer"),$lo=o(" \u2014 "),TB=a("a"),klo=o("Wav2Vec2CTCTokenizer"),Slo=o(" (Wav2Vec2-Conformer model)"),Rlo=l(),nh=a("li"),Nae=a("strong"),Plo=o("wav2vec2_phoneme"),Blo=o(" \u2014 "),MB=a("a"),Ilo=o("Wav2Vec2PhonemeCTCTokenizer"),qlo=o(" (Wav2Vec2Phoneme model)"),Nlo=l(),Ps=a("li"),jae=a("strong"),jlo=o("xglm"),Dlo=o(" \u2014 "),EB=a("a"),Glo=o("XGLMTokenizer"),Olo=o(" or "),CB=a("a"),Vlo=o("XGLMTokenizerFast"),Xlo=o(" (XGLM model)"),zlo=l(),sh=a("li"),Dae=a("strong"),Wlo=o("xlm"),Qlo=o(" \u2014 "),wB=a("a"),Hlo=o("XLMTokenizer"),Ulo=o(" (XLM model)"),Jlo=l(),lh=a("li"),Gae=a("strong"),Ylo=o("xlm-prophetnet"),Klo=o(" \u2014 "),AB=a("a"),Zlo=o("XLMProphetNetTokenizer"),eio=o(" (XLMProphetNet model)"),oio=l(),Bs=a("li"),Oae=a("strong"),rio=o("xlm-roberta"),tio=o(" \u2014 "),yB=a("a"),aio=o("XLMRobertaTokenizer"),nio=o(" or "),LB=a("a"),sio=o("XLMRobertaTokenizerFast"),lio=o(" (XLM-RoBERTa model)"),iio=l(),Is=a("li"),Vae=a("strong"),dio=o("xlm-roberta-xl"),cio=o(" \u2014 "),xB=a("a"),fio=o("RobertaTokenizer"),mio=o(" or "),$B=a("a"),gio=o("RobertaTokenizerFast"),hio=o(" (XLM-RoBERTa-XL model)"),pio=l(),qs=a("li"),Xae=a("strong"),uio=o("xlnet"),_io=o(" \u2014 "),kB=a("a"),bio=o("XLNetTokenizer"),vio=o(" or "),SB=a("a"),Fio=o("XLNetTokenizerFast"),Tio=o(" (XLNet model)"),Mio=l(),Ns=a("li"),zae=a("strong"),Eio=o("yoso"),Cio=o(" \u2014 "),RB=a("a"),wio=o("AlbertTokenizer"),Aio=o(" or "),PB=a("a"),yio=o("AlbertTokenizerFast"),Lio=o(" (YOSO model)"),xio=l(),F(ih.$$.fragment),$io=l(),dh=a("div"),F(jA.$$.fragment),kio=l(),Wae=a("p"),Sio=o("Register a new tokenizer in this mapping."),Sqe=l(),Li=a("h2"),ch=a("a"),Qae=a("span"),F(DA.$$.fragment),Rio=l(),Hae=a("span"),Pio=o("AutoFeatureExtractor"),Rqe=l(),yo=a("div"),F(GA.$$.fragment),Bio=l(),OA=a("p"),Iio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BB=a("a"),qio=o("AutoFeatureExtractor.from_pretrained()"),Nio=o(" class method."),jio=l(),VA=a("p"),Dio=o("This class cannot be instantiated directly using "),Uae=a("code"),Gio=o("__init__()"),Oio=o(" (throws an error)."),Vio=l(),He=a("div"),F(XA.$$.fragment),Xio=l(),Jae=a("p"),zio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wio=l(),ka=a("p"),Qio=o("The feature extractor class to instantiate is selected based on the "),Yae=a("code"),Hio=o("model_type"),Uio=o(` property of the config object
(either passed as an argument or loaded from `),Kae=a("code"),Jio=o("pretrained_model_name_or_path"),Yio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zae=a("code"),Kio=o("pretrained_model_name_or_path"),Zio=o(":"),edo=l(),Z=a("ul"),fh=a("li"),ene=a("strong"),odo=o("beit"),rdo=o(" \u2014 "),IB=a("a"),tdo=o("BeitFeatureExtractor"),ado=o(" (BEiT model)"),ndo=l(),mh=a("li"),one=a("strong"),sdo=o("clip"),ldo=o(" \u2014 "),qB=a("a"),ido=o("CLIPFeatureExtractor"),ddo=o(" (CLIP model)"),cdo=l(),gh=a("li"),rne=a("strong"),fdo=o("convnext"),mdo=o(" \u2014 "),NB=a("a"),gdo=o("ConvNextFeatureExtractor"),hdo=o(" (ConvNext model)"),pdo=l(),hh=a("li"),tne=a("strong"),udo=o("data2vec-audio"),_do=o(" \u2014 "),jB=a("a"),bdo=o("Wav2Vec2FeatureExtractor"),vdo=o(" (Data2VecAudio model)"),Fdo=l(),ph=a("li"),ane=a("strong"),Tdo=o("data2vec-vision"),Mdo=o(" \u2014 "),DB=a("a"),Edo=o("BeitFeatureExtractor"),Cdo=o(" (Data2VecVision model)"),wdo=l(),uh=a("li"),nne=a("strong"),Ado=o("deit"),ydo=o(" \u2014 "),GB=a("a"),Ldo=o("DeiTFeatureExtractor"),xdo=o(" (DeiT model)"),$do=l(),_h=a("li"),sne=a("strong"),kdo=o("detr"),Sdo=o(" \u2014 "),OB=a("a"),Rdo=o("DetrFeatureExtractor"),Pdo=o(" (DETR model)"),Bdo=l(),bh=a("li"),lne=a("strong"),Ido=o("dpt"),qdo=o(" \u2014 "),VB=a("a"),Ndo=o("DPTFeatureExtractor"),jdo=o(" (DPT model)"),Ddo=l(),vh=a("li"),ine=a("strong"),Gdo=o("flava"),Odo=o(" \u2014 "),XB=a("a"),Vdo=o("FlavaFeatureExtractor"),Xdo=o(" (Flava model)"),zdo=l(),Fh=a("li"),dne=a("strong"),Wdo=o("glpn"),Qdo=o(" \u2014 "),zB=a("a"),Hdo=o("GLPNFeatureExtractor"),Udo=o(" (GLPN model)"),Jdo=l(),Th=a("li"),cne=a("strong"),Ydo=o("hubert"),Kdo=o(" \u2014 "),WB=a("a"),Zdo=o("Wav2Vec2FeatureExtractor"),eco=o(" (Hubert model)"),oco=l(),Mh=a("li"),fne=a("strong"),rco=o("layoutlmv2"),tco=o(" \u2014 "),QB=a("a"),aco=o("LayoutLMv2FeatureExtractor"),nco=o(" (LayoutLMv2 model)"),sco=l(),Eh=a("li"),mne=a("strong"),lco=o("maskformer"),ico=o(" \u2014 "),HB=a("a"),dco=o("MaskFormerFeatureExtractor"),cco=o(" (MaskFormer model)"),fco=l(),Ch=a("li"),gne=a("strong"),mco=o("perceiver"),gco=o(" \u2014 "),UB=a("a"),hco=o("PerceiverFeatureExtractor"),pco=o(" (Perceiver model)"),uco=l(),wh=a("li"),hne=a("strong"),_co=o("poolformer"),bco=o(" \u2014 "),JB=a("a"),vco=o("PoolFormerFeatureExtractor"),Fco=o(" (PoolFormer model)"),Tco=l(),Ah=a("li"),pne=a("strong"),Mco=o("regnet"),Eco=o(" \u2014 "),YB=a("a"),Cco=o("ConvNextFeatureExtractor"),wco=o(" (RegNet model)"),Aco=l(),yh=a("li"),une=a("strong"),yco=o("resnet"),Lco=o(" \u2014 "),KB=a("a"),xco=o("ConvNextFeatureExtractor"),$co=o(" (ResNet model)"),kco=l(),Lh=a("li"),_ne=a("strong"),Sco=o("segformer"),Rco=o(" \u2014 "),ZB=a("a"),Pco=o("SegformerFeatureExtractor"),Bco=o(" (SegFormer model)"),Ico=l(),xh=a("li"),bne=a("strong"),qco=o("speech_to_text"),Nco=o(" \u2014 "),eI=a("a"),jco=o("Speech2TextFeatureExtractor"),Dco=o(" (Speech2Text model)"),Gco=l(),$h=a("li"),vne=a("strong"),Oco=o("swin"),Vco=o(" \u2014 "),oI=a("a"),Xco=o("ViTFeatureExtractor"),zco=o(" (Swin model)"),Wco=l(),kh=a("li"),Fne=a("strong"),Qco=o("van"),Hco=o(" \u2014 "),rI=a("a"),Uco=o("ConvNextFeatureExtractor"),Jco=o(" (VAN model)"),Yco=l(),Sh=a("li"),Tne=a("strong"),Kco=o("vilt"),Zco=o(" \u2014 "),tI=a("a"),efo=o("ViltFeatureExtractor"),ofo=o(" (ViLT model)"),rfo=l(),Rh=a("li"),Mne=a("strong"),tfo=o("vit"),afo=o(" \u2014 "),aI=a("a"),nfo=o("ViTFeatureExtractor"),sfo=o(" (ViT model)"),lfo=l(),Ph=a("li"),Ene=a("strong"),ifo=o("vit_mae"),dfo=o(" \u2014 "),nI=a("a"),cfo=o("ViTFeatureExtractor"),ffo=o(" (ViTMAE model)"),mfo=l(),Bh=a("li"),Cne=a("strong"),gfo=o("wav2vec2"),hfo=o(" \u2014 "),sI=a("a"),pfo=o("Wav2Vec2FeatureExtractor"),ufo=o(" (Wav2Vec2 model)"),_fo=l(),Ih=a("li"),wne=a("strong"),bfo=o("wav2vec2-conformer"),vfo=o(" \u2014 "),lI=a("a"),Ffo=o("Wav2Vec2FeatureExtractor"),Tfo=o(" (Wav2Vec2-Conformer model)"),Mfo=l(),qh=a("li"),Ane=a("strong"),Efo=o("yolos"),Cfo=o(" \u2014 "),iI=a("a"),wfo=o("YolosFeatureExtractor"),Afo=o(" (YOLOS model)"),yfo=l(),F(Nh.$$.fragment),Lfo=l(),F(jh.$$.fragment),xfo=l(),Dh=a("div"),F(zA.$$.fragment),$fo=l(),yne=a("p"),kfo=o("Register a new feature extractor for this class."),Pqe=l(),xi=a("h2"),Gh=a("a"),Lne=a("span"),F(WA.$$.fragment),Sfo=l(),xne=a("span"),Rfo=o("AutoProcessor"),Bqe=l(),Lo=a("div"),F(QA.$$.fragment),Pfo=l(),HA=a("p"),Bfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dI=a("a"),Ifo=o("AutoProcessor.from_pretrained()"),qfo=o(" class method."),Nfo=l(),UA=a("p"),jfo=o("This class cannot be instantiated directly using "),$ne=a("code"),Dfo=o("__init__()"),Gfo=o(" (throws an error)."),Ofo=l(),Ue=a("div"),F(JA.$$.fragment),Vfo=l(),kne=a("p"),Xfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zfo=l(),$i=a("p"),Wfo=o("The processor class to instantiate is selected based on the "),Sne=a("code"),Qfo=o("model_type"),Hfo=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),Ufo=o("pretrained_model_name_or_path"),Jfo=o(" if possible):"),Yfo=l(),pe=a("ul"),Oh=a("li"),Pne=a("strong"),Kfo=o("clip"),Zfo=o(" \u2014 "),cI=a("a"),emo=o("CLIPProcessor"),omo=o(" (CLIP model)"),rmo=l(),Vh=a("li"),Bne=a("strong"),tmo=o("flava"),amo=o(" \u2014 "),Ine=a("code"),nmo=o("FLAVAProcessor"),smo=o(" (Flava model)"),lmo=l(),Xh=a("li"),qne=a("strong"),imo=o("layoutlmv2"),dmo=o(" \u2014 "),fI=a("a"),cmo=o("LayoutLMv2Processor"),fmo=o(" (LayoutLMv2 model)"),mmo=l(),zh=a("li"),Nne=a("strong"),gmo=o("layoutxlm"),hmo=o(" \u2014 "),mI=a("a"),pmo=o("LayoutXLMProcessor"),umo=o(" (LayoutXLM model)"),_mo=l(),Wh=a("li"),jne=a("strong"),bmo=o("sew"),vmo=o(" \u2014 "),gI=a("a"),Fmo=o("Wav2Vec2Processor"),Tmo=o(" (SEW model)"),Mmo=l(),Qh=a("li"),Dne=a("strong"),Emo=o("sew-d"),Cmo=o(" \u2014 "),hI=a("a"),wmo=o("Wav2Vec2Processor"),Amo=o(" (SEW-D model)"),ymo=l(),Hh=a("li"),Gne=a("strong"),Lmo=o("speech_to_text"),xmo=o(" \u2014 "),pI=a("a"),$mo=o("Speech2TextProcessor"),kmo=o(" (Speech2Text model)"),Smo=l(),Uh=a("li"),One=a("strong"),Rmo=o("speech_to_text_2"),Pmo=o(" \u2014 "),uI=a("a"),Bmo=o("Speech2Text2Processor"),Imo=o(" (Speech2Text2 model)"),qmo=l(),Jh=a("li"),Vne=a("strong"),Nmo=o("trocr"),jmo=o(" \u2014 "),_I=a("a"),Dmo=o("TrOCRProcessor"),Gmo=o(" (TrOCR model)"),Omo=l(),Yh=a("li"),Xne=a("strong"),Vmo=o("unispeech"),Xmo=o(" \u2014 "),bI=a("a"),zmo=o("Wav2Vec2Processor"),Wmo=o(" (UniSpeech model)"),Qmo=l(),Kh=a("li"),zne=a("strong"),Hmo=o("unispeech-sat"),Umo=o(" \u2014 "),vI=a("a"),Jmo=o("Wav2Vec2Processor"),Ymo=o(" (UniSpeechSat model)"),Kmo=l(),Zh=a("li"),Wne=a("strong"),Zmo=o("vilt"),ego=o(" \u2014 "),FI=a("a"),ogo=o("ViltProcessor"),rgo=o(" (ViLT model)"),tgo=l(),ep=a("li"),Qne=a("strong"),ago=o("vision-text-dual-encoder"),ngo=o(" \u2014 "),TI=a("a"),sgo=o("VisionTextDualEncoderProcessor"),lgo=o(" (VisionTextDualEncoder model)"),igo=l(),op=a("li"),Hne=a("strong"),dgo=o("wav2vec2"),cgo=o(" \u2014 "),MI=a("a"),fgo=o("Wav2Vec2Processor"),mgo=o(" (Wav2Vec2 model)"),ggo=l(),rp=a("li"),Une=a("strong"),hgo=o("wav2vec2-conformer"),pgo=o(" \u2014 "),EI=a("a"),ugo=o("Wav2Vec2Processor"),_go=o(" (Wav2Vec2-Conformer model)"),bgo=l(),tp=a("li"),Jne=a("strong"),vgo=o("wavlm"),Fgo=o(" \u2014 "),CI=a("a"),Tgo=o("Wav2Vec2Processor"),Mgo=o(" (WavLM model)"),Ego=l(),F(ap.$$.fragment),Cgo=l(),F(np.$$.fragment),wgo=l(),sp=a("div"),F(YA.$$.fragment),Ago=l(),Yne=a("p"),ygo=o("Register a new processor for this class."),Iqe=l(),ki=a("h2"),lp=a("a"),Kne=a("span"),F(KA.$$.fragment),Lgo=l(),Zne=a("span"),xgo=o("AutoModel"),qqe=l(),xo=a("div"),F(ZA.$$.fragment),$go=l(),Si=a("p"),kgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wI=a("a"),Sgo=o("from_pretrained()"),Rgo=o(" class method or the "),AI=a("a"),Pgo=o("from_config()"),Bgo=o(` class
method.`),Igo=l(),e0=a("p"),qgo=o("This class cannot be instantiated directly using "),ese=a("code"),Ngo=o("__init__()"),jgo=o(" (throws an error)."),Dgo=l(),nt=a("div"),F(o0.$$.fragment),Ggo=l(),ose=a("p"),Ogo=o("Instantiates one of the base model classes of the library from a configuration."),Vgo=l(),Ri=a("p"),Xgo=o(`Note:
Loading a model from its configuration file does `),rse=a("strong"),zgo=o("not"),Wgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=a("a"),Qgo=o("from_pretrained()"),Hgo=o(" to load the model weights."),Ugo=l(),F(ip.$$.fragment),Jgo=l(),Je=a("div"),F(r0.$$.fragment),Ygo=l(),tse=a("p"),Kgo=o("Instantiate one of the base model classes of the library from a pretrained model."),Zgo=l(),Sa=a("p"),eho=o("The model class to instantiate is selected based on the "),ase=a("code"),oho=o("model_type"),rho=o(` property of the config object (either
passed as an argument or loaded from `),nse=a("code"),tho=o("pretrained_model_name_or_path"),aho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=a("code"),nho=o("pretrained_model_name_or_path"),sho=o(":"),lho=l(),x=a("ul"),dp=a("li"),lse=a("strong"),iho=o("albert"),dho=o(" \u2014 "),LI=a("a"),cho=o("AlbertModel"),fho=o(" (ALBERT model)"),mho=l(),cp=a("li"),ise=a("strong"),gho=o("bart"),hho=o(" \u2014 "),xI=a("a"),pho=o("BartModel"),uho=o(" (BART model)"),_ho=l(),fp=a("li"),dse=a("strong"),bho=o("beit"),vho=o(" \u2014 "),$I=a("a"),Fho=o("BeitModel"),Tho=o(" (BEiT model)"),Mho=l(),mp=a("li"),cse=a("strong"),Eho=o("bert"),Cho=o(" \u2014 "),kI=a("a"),who=o("BertModel"),Aho=o(" (BERT model)"),yho=l(),gp=a("li"),fse=a("strong"),Lho=o("bert-generation"),xho=o(" \u2014 "),SI=a("a"),$ho=o("BertGenerationEncoder"),kho=o(" (Bert Generation model)"),Sho=l(),hp=a("li"),mse=a("strong"),Rho=o("big_bird"),Pho=o(" \u2014 "),RI=a("a"),Bho=o("BigBirdModel"),Iho=o(" (BigBird model)"),qho=l(),pp=a("li"),gse=a("strong"),Nho=o("bigbird_pegasus"),jho=o(" \u2014 "),PI=a("a"),Dho=o("BigBirdPegasusModel"),Gho=o(" (BigBirdPegasus model)"),Oho=l(),up=a("li"),hse=a("strong"),Vho=o("blenderbot"),Xho=o(" \u2014 "),BI=a("a"),zho=o("BlenderbotModel"),Who=o(" (Blenderbot model)"),Qho=l(),_p=a("li"),pse=a("strong"),Hho=o("blenderbot-small"),Uho=o(" \u2014 "),II=a("a"),Jho=o("BlenderbotSmallModel"),Yho=o(" (BlenderbotSmall model)"),Kho=l(),bp=a("li"),use=a("strong"),Zho=o("camembert"),epo=o(" \u2014 "),qI=a("a"),opo=o("CamembertModel"),rpo=o(" (CamemBERT model)"),tpo=l(),vp=a("li"),_se=a("strong"),apo=o("canine"),npo=o(" \u2014 "),NI=a("a"),spo=o("CanineModel"),lpo=o(" (Canine model)"),ipo=l(),Fp=a("li"),bse=a("strong"),dpo=o("clip"),cpo=o(" \u2014 "),jI=a("a"),fpo=o("CLIPModel"),mpo=o(" (CLIP model)"),gpo=l(),Tp=a("li"),vse=a("strong"),hpo=o("convbert"),ppo=o(" \u2014 "),DI=a("a"),upo=o("ConvBertModel"),_po=o(" (ConvBERT model)"),bpo=l(),Mp=a("li"),Fse=a("strong"),vpo=o("convnext"),Fpo=o(" \u2014 "),GI=a("a"),Tpo=o("ConvNextModel"),Mpo=o(" (ConvNext model)"),Epo=l(),Ep=a("li"),Tse=a("strong"),Cpo=o("ctrl"),wpo=o(" \u2014 "),OI=a("a"),Apo=o("CTRLModel"),ypo=o(" (CTRL model)"),Lpo=l(),Cp=a("li"),Mse=a("strong"),xpo=o("data2vec-audio"),$po=o(" \u2014 "),VI=a("a"),kpo=o("Data2VecAudioModel"),Spo=o(" (Data2VecAudio model)"),Rpo=l(),wp=a("li"),Ese=a("strong"),Ppo=o("data2vec-text"),Bpo=o(" \u2014 "),XI=a("a"),Ipo=o("Data2VecTextModel"),qpo=o(" (Data2VecText model)"),Npo=l(),Ap=a("li"),Cse=a("strong"),jpo=o("data2vec-vision"),Dpo=o(" \u2014 "),zI=a("a"),Gpo=o("Data2VecVisionModel"),Opo=o(" (Data2VecVision model)"),Vpo=l(),yp=a("li"),wse=a("strong"),Xpo=o("deberta"),zpo=o(" \u2014 "),WI=a("a"),Wpo=o("DebertaModel"),Qpo=o(" (DeBERTa model)"),Hpo=l(),Lp=a("li"),Ase=a("strong"),Upo=o("deberta-v2"),Jpo=o(" \u2014 "),QI=a("a"),Ypo=o("DebertaV2Model"),Kpo=o(" (DeBERTa-v2 model)"),Zpo=l(),xp=a("li"),yse=a("strong"),euo=o("decision_transformer"),ouo=o(" \u2014 "),HI=a("a"),ruo=o("DecisionTransformerModel"),tuo=o(" (Decision Transformer model)"),auo=l(),$p=a("li"),Lse=a("strong"),nuo=o("deit"),suo=o(" \u2014 "),UI=a("a"),luo=o("DeiTModel"),iuo=o(" (DeiT model)"),duo=l(),kp=a("li"),xse=a("strong"),cuo=o("detr"),fuo=o(" \u2014 "),JI=a("a"),muo=o("DetrModel"),guo=o(" (DETR model)"),huo=l(),Sp=a("li"),$se=a("strong"),puo=o("distilbert"),uuo=o(" \u2014 "),YI=a("a"),_uo=o("DistilBertModel"),buo=o(" (DistilBERT model)"),vuo=l(),Rp=a("li"),kse=a("strong"),Fuo=o("dpr"),Tuo=o(" \u2014 "),KI=a("a"),Muo=o("DPRQuestionEncoder"),Euo=o(" (DPR model)"),Cuo=l(),Pp=a("li"),Sse=a("strong"),wuo=o("dpt"),Auo=o(" \u2014 "),ZI=a("a"),yuo=o("DPTModel"),Luo=o(" (DPT model)"),xuo=l(),Bp=a("li"),Rse=a("strong"),$uo=o("electra"),kuo=o(" \u2014 "),eq=a("a"),Suo=o("ElectraModel"),Ruo=o(" (ELECTRA model)"),Puo=l(),Ip=a("li"),Pse=a("strong"),Buo=o("flaubert"),Iuo=o(" \u2014 "),oq=a("a"),quo=o("FlaubertModel"),Nuo=o(" (FlauBERT model)"),juo=l(),qp=a("li"),Bse=a("strong"),Duo=o("flava"),Guo=o(" \u2014 "),rq=a("a"),Ouo=o("FlavaModel"),Vuo=o(" (Flava model)"),Xuo=l(),Np=a("li"),Ise=a("strong"),zuo=o("fnet"),Wuo=o(" \u2014 "),tq=a("a"),Quo=o("FNetModel"),Huo=o(" (FNet model)"),Uuo=l(),jp=a("li"),qse=a("strong"),Juo=o("fsmt"),Yuo=o(" \u2014 "),aq=a("a"),Kuo=o("FSMTModel"),Zuo=o(" (FairSeq Machine-Translation model)"),e_o=l(),js=a("li"),Nse=a("strong"),o_o=o("funnel"),r_o=o(" \u2014 "),nq=a("a"),t_o=o("FunnelModel"),a_o=o(" or "),sq=a("a"),n_o=o("FunnelBaseModel"),s_o=o(" (Funnel Transformer model)"),l_o=l(),Dp=a("li"),jse=a("strong"),i_o=o("glpn"),d_o=o(" \u2014 "),lq=a("a"),c_o=o("GLPNModel"),f_o=o(" (GLPN model)"),m_o=l(),Gp=a("li"),Dse=a("strong"),g_o=o("gpt2"),h_o=o(" \u2014 "),iq=a("a"),p_o=o("GPT2Model"),u_o=o(" (OpenAI GPT-2 model)"),__o=l(),Op=a("li"),Gse=a("strong"),b_o=o("gpt_neo"),v_o=o(" \u2014 "),dq=a("a"),F_o=o("GPTNeoModel"),T_o=o(" (GPT Neo model)"),M_o=l(),Vp=a("li"),Ose=a("strong"),E_o=o("gptj"),C_o=o(" \u2014 "),cq=a("a"),w_o=o("GPTJModel"),A_o=o(" (GPT-J model)"),y_o=l(),Xp=a("li"),Vse=a("strong"),L_o=o("hubert"),x_o=o(" \u2014 "),fq=a("a"),$_o=o("HubertModel"),k_o=o(" (Hubert model)"),S_o=l(),zp=a("li"),Xse=a("strong"),R_o=o("ibert"),P_o=o(" \u2014 "),mq=a("a"),B_o=o("IBertModel"),I_o=o(" (I-BERT model)"),q_o=l(),Wp=a("li"),zse=a("strong"),N_o=o("imagegpt"),j_o=o(" \u2014 "),gq=a("a"),D_o=o("ImageGPTModel"),G_o=o(" (ImageGPT model)"),O_o=l(),Qp=a("li"),Wse=a("strong"),V_o=o("layoutlm"),X_o=o(" \u2014 "),hq=a("a"),z_o=o("LayoutLMModel"),W_o=o(" (LayoutLM model)"),Q_o=l(),Hp=a("li"),Qse=a("strong"),H_o=o("layoutlmv2"),U_o=o(" \u2014 "),pq=a("a"),J_o=o("LayoutLMv2Model"),Y_o=o(" (LayoutLMv2 model)"),K_o=l(),Up=a("li"),Hse=a("strong"),Z_o=o("led"),e2o=o(" \u2014 "),uq=a("a"),o2o=o("LEDModel"),r2o=o(" (LED model)"),t2o=l(),Jp=a("li"),Use=a("strong"),a2o=o("longformer"),n2o=o(" \u2014 "),_q=a("a"),s2o=o("LongformerModel"),l2o=o(" (Longformer model)"),i2o=l(),Yp=a("li"),Jse=a("strong"),d2o=o("luke"),c2o=o(" \u2014 "),bq=a("a"),f2o=o("LukeModel"),m2o=o(" (LUKE model)"),g2o=l(),Kp=a("li"),Yse=a("strong"),h2o=o("lxmert"),p2o=o(" \u2014 "),vq=a("a"),u2o=o("LxmertModel"),_2o=o(" (LXMERT model)"),b2o=l(),Zp=a("li"),Kse=a("strong"),v2o=o("m2m_100"),F2o=o(" \u2014 "),Fq=a("a"),T2o=o("M2M100Model"),M2o=o(" (M2M100 model)"),E2o=l(),eu=a("li"),Zse=a("strong"),C2o=o("marian"),w2o=o(" \u2014 "),Tq=a("a"),A2o=o("MarianModel"),y2o=o(" (Marian model)"),L2o=l(),ou=a("li"),ele=a("strong"),x2o=o("maskformer"),$2o=o(" \u2014 "),Mq=a("a"),k2o=o("MaskFormerModel"),S2o=o(" (MaskFormer model)"),R2o=l(),ru=a("li"),ole=a("strong"),P2o=o("mbart"),B2o=o(" \u2014 "),Eq=a("a"),I2o=o("MBartModel"),q2o=o(" (mBART model)"),N2o=l(),tu=a("li"),rle=a("strong"),j2o=o("megatron-bert"),D2o=o(" \u2014 "),Cq=a("a"),G2o=o("MegatronBertModel"),O2o=o(" (MegatronBert model)"),V2o=l(),au=a("li"),tle=a("strong"),X2o=o("mobilebert"),z2o=o(" \u2014 "),wq=a("a"),W2o=o("MobileBertModel"),Q2o=o(" (MobileBERT model)"),H2o=l(),nu=a("li"),ale=a("strong"),U2o=o("mpnet"),J2o=o(" \u2014 "),Aq=a("a"),Y2o=o("MPNetModel"),K2o=o(" (MPNet model)"),Z2o=l(),su=a("li"),nle=a("strong"),e1o=o("mt5"),o1o=o(" \u2014 "),yq=a("a"),r1o=o("MT5Model"),t1o=o(" (mT5 model)"),a1o=l(),lu=a("li"),sle=a("strong"),n1o=o("nystromformer"),s1o=o(" \u2014 "),Lq=a("a"),l1o=o("NystromformerModel"),i1o=o(" (Nystromformer model)"),d1o=l(),iu=a("li"),lle=a("strong"),c1o=o("openai-gpt"),f1o=o(" \u2014 "),xq=a("a"),m1o=o("OpenAIGPTModel"),g1o=o(" (OpenAI GPT model)"),h1o=l(),du=a("li"),ile=a("strong"),p1o=o("opt"),u1o=o(" \u2014 "),$q=a("a"),_1o=o("OPTModel"),b1o=o(" (OPT model)"),v1o=l(),cu=a("li"),dle=a("strong"),F1o=o("pegasus"),T1o=o(" \u2014 "),kq=a("a"),M1o=o("PegasusModel"),E1o=o(" (Pegasus model)"),C1o=l(),fu=a("li"),cle=a("strong"),w1o=o("perceiver"),A1o=o(" \u2014 "),Sq=a("a"),y1o=o("PerceiverModel"),L1o=o(" (Perceiver model)"),x1o=l(),mu=a("li"),fle=a("strong"),$1o=o("plbart"),k1o=o(" \u2014 "),Rq=a("a"),S1o=o("PLBartModel"),R1o=o(" (PLBart model)"),P1o=l(),gu=a("li"),mle=a("strong"),B1o=o("poolformer"),I1o=o(" \u2014 "),Pq=a("a"),q1o=o("PoolFormerModel"),N1o=o(" (PoolFormer model)"),j1o=l(),hu=a("li"),gle=a("strong"),D1o=o("prophetnet"),G1o=o(" \u2014 "),Bq=a("a"),O1o=o("ProphetNetModel"),V1o=o(" (ProphetNet model)"),X1o=l(),pu=a("li"),hle=a("strong"),z1o=o("qdqbert"),W1o=o(" \u2014 "),Iq=a("a"),Q1o=o("QDQBertModel"),H1o=o(" (QDQBert model)"),U1o=l(),uu=a("li"),ple=a("strong"),J1o=o("reformer"),Y1o=o(" \u2014 "),qq=a("a"),K1o=o("ReformerModel"),Z1o=o(" (Reformer model)"),ebo=l(),_u=a("li"),ule=a("strong"),obo=o("regnet"),rbo=o(" \u2014 "),Nq=a("a"),tbo=o("RegNetModel"),abo=o(" (RegNet model)"),nbo=l(),bu=a("li"),_le=a("strong"),sbo=o("rembert"),lbo=o(" \u2014 "),jq=a("a"),ibo=o("RemBertModel"),dbo=o(" (RemBERT model)"),cbo=l(),vu=a("li"),ble=a("strong"),fbo=o("resnet"),mbo=o(" \u2014 "),Dq=a("a"),gbo=o("ResNetModel"),hbo=o(" (ResNet model)"),pbo=l(),Fu=a("li"),vle=a("strong"),ubo=o("retribert"),_bo=o(" \u2014 "),Gq=a("a"),bbo=o("RetriBertModel"),vbo=o(" (RetriBERT model)"),Fbo=l(),Tu=a("li"),Fle=a("strong"),Tbo=o("roberta"),Mbo=o(" \u2014 "),Oq=a("a"),Ebo=o("RobertaModel"),Cbo=o(" (RoBERTa model)"),wbo=l(),Mu=a("li"),Tle=a("strong"),Abo=o("roformer"),ybo=o(" \u2014 "),Vq=a("a"),Lbo=o("RoFormerModel"),xbo=o(" (RoFormer model)"),$bo=l(),Eu=a("li"),Mle=a("strong"),kbo=o("segformer"),Sbo=o(" \u2014 "),Xq=a("a"),Rbo=o("SegformerModel"),Pbo=o(" (SegFormer model)"),Bbo=l(),Cu=a("li"),Ele=a("strong"),Ibo=o("sew"),qbo=o(" \u2014 "),zq=a("a"),Nbo=o("SEWModel"),jbo=o(" (SEW model)"),Dbo=l(),wu=a("li"),Cle=a("strong"),Gbo=o("sew-d"),Obo=o(" \u2014 "),Wq=a("a"),Vbo=o("SEWDModel"),Xbo=o(" (SEW-D model)"),zbo=l(),Au=a("li"),wle=a("strong"),Wbo=o("speech_to_text"),Qbo=o(" \u2014 "),Qq=a("a"),Hbo=o("Speech2TextModel"),Ubo=o(" (Speech2Text model)"),Jbo=l(),yu=a("li"),Ale=a("strong"),Ybo=o("splinter"),Kbo=o(" \u2014 "),Hq=a("a"),Zbo=o("SplinterModel"),evo=o(" (Splinter model)"),ovo=l(),Lu=a("li"),yle=a("strong"),rvo=o("squeezebert"),tvo=o(" \u2014 "),Uq=a("a"),avo=o("SqueezeBertModel"),nvo=o(" (SqueezeBERT model)"),svo=l(),xu=a("li"),Lle=a("strong"),lvo=o("swin"),ivo=o(" \u2014 "),Jq=a("a"),dvo=o("SwinModel"),cvo=o(" (Swin model)"),fvo=l(),$u=a("li"),xle=a("strong"),mvo=o("t5"),gvo=o(" \u2014 "),Yq=a("a"),hvo=o("T5Model"),pvo=o(" (T5 model)"),uvo=l(),ku=a("li"),$le=a("strong"),_vo=o("tapas"),bvo=o(" \u2014 "),Kq=a("a"),vvo=o("TapasModel"),Fvo=o(" (TAPAS model)"),Tvo=l(),Su=a("li"),kle=a("strong"),Mvo=o("transfo-xl"),Evo=o(" \u2014 "),Zq=a("a"),Cvo=o("TransfoXLModel"),wvo=o(" (Transformer-XL model)"),Avo=l(),Ru=a("li"),Sle=a("strong"),yvo=o("unispeech"),Lvo=o(" \u2014 "),eN=a("a"),xvo=o("UniSpeechModel"),$vo=o(" (UniSpeech model)"),kvo=l(),Pu=a("li"),Rle=a("strong"),Svo=o("unispeech-sat"),Rvo=o(" \u2014 "),oN=a("a"),Pvo=o("UniSpeechSatModel"),Bvo=o(" (UniSpeechSat model)"),Ivo=l(),Bu=a("li"),Ple=a("strong"),qvo=o("van"),Nvo=o(" \u2014 "),rN=a("a"),jvo=o("VanModel"),Dvo=o(" (VAN model)"),Gvo=l(),Iu=a("li"),Ble=a("strong"),Ovo=o("vilt"),Vvo=o(" \u2014 "),tN=a("a"),Xvo=o("ViltModel"),zvo=o(" (ViLT model)"),Wvo=l(),qu=a("li"),Ile=a("strong"),Qvo=o("vision-text-dual-encoder"),Hvo=o(" \u2014 "),aN=a("a"),Uvo=o("VisionTextDualEncoderModel"),Jvo=o(" (VisionTextDualEncoder model)"),Yvo=l(),Nu=a("li"),qle=a("strong"),Kvo=o("visual_bert"),Zvo=o(" \u2014 "),nN=a("a"),eFo=o("VisualBertModel"),oFo=o(" (VisualBert model)"),rFo=l(),ju=a("li"),Nle=a("strong"),tFo=o("vit"),aFo=o(" \u2014 "),sN=a("a"),nFo=o("ViTModel"),sFo=o(" (ViT model)"),lFo=l(),Du=a("li"),jle=a("strong"),iFo=o("vit_mae"),dFo=o(" \u2014 "),lN=a("a"),cFo=o("ViTMAEModel"),fFo=o(" (ViTMAE model)"),mFo=l(),Gu=a("li"),Dle=a("strong"),gFo=o("wav2vec2"),hFo=o(" \u2014 "),iN=a("a"),pFo=o("Wav2Vec2Model"),uFo=o(" (Wav2Vec2 model)"),_Fo=l(),Ou=a("li"),Gle=a("strong"),bFo=o("wav2vec2-conformer"),vFo=o(" \u2014 "),dN=a("a"),FFo=o("Wav2Vec2ConformerModel"),TFo=o(" (Wav2Vec2-Conformer model)"),MFo=l(),Vu=a("li"),Ole=a("strong"),EFo=o("wavlm"),CFo=o(" \u2014 "),cN=a("a"),wFo=o("WavLMModel"),AFo=o(" (WavLM model)"),yFo=l(),Xu=a("li"),Vle=a("strong"),LFo=o("xglm"),xFo=o(" \u2014 "),fN=a("a"),$Fo=o("XGLMModel"),kFo=o(" (XGLM model)"),SFo=l(),zu=a("li"),Xle=a("strong"),RFo=o("xlm"),PFo=o(" \u2014 "),mN=a("a"),BFo=o("XLMModel"),IFo=o(" (XLM model)"),qFo=l(),Wu=a("li"),zle=a("strong"),NFo=o("xlm-prophetnet"),jFo=o(" \u2014 "),gN=a("a"),DFo=o("XLMProphetNetModel"),GFo=o(" (XLMProphetNet model)"),OFo=l(),Qu=a("li"),Wle=a("strong"),VFo=o("xlm-roberta"),XFo=o(" \u2014 "),hN=a("a"),zFo=o("XLMRobertaModel"),WFo=o(" (XLM-RoBERTa model)"),QFo=l(),Hu=a("li"),Qle=a("strong"),HFo=o("xlm-roberta-xl"),UFo=o(" \u2014 "),pN=a("a"),JFo=o("XLMRobertaXLModel"),YFo=o(" (XLM-RoBERTa-XL model)"),KFo=l(),Uu=a("li"),Hle=a("strong"),ZFo=o("xlnet"),e6o=o(" \u2014 "),uN=a("a"),o6o=o("XLNetModel"),r6o=o(" (XLNet model)"),t6o=l(),Ju=a("li"),Ule=a("strong"),a6o=o("yolos"),n6o=o(" \u2014 "),_N=a("a"),s6o=o("YolosModel"),l6o=o(" (YOLOS model)"),i6o=l(),Yu=a("li"),Jle=a("strong"),d6o=o("yoso"),c6o=o(" \u2014 "),bN=a("a"),f6o=o("YosoModel"),m6o=o(" (YOSO model)"),g6o=l(),Ku=a("p"),h6o=o("The model is set in evaluation mode by default using "),Yle=a("code"),p6o=o("model.eval()"),u6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=a("code"),_6o=o("model.train()"),b6o=l(),F(Zu.$$.fragment),Nqe=l(),Pi=a("h2"),e_=a("a"),Zle=a("span"),F(t0.$$.fragment),v6o=l(),eie=a("span"),F6o=o("AutoModelForPreTraining"),jqe=l(),$o=a("div"),F(a0.$$.fragment),T6o=l(),Bi=a("p"),M6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vN=a("a"),E6o=o("from_pretrained()"),C6o=o(" class method or the "),FN=a("a"),w6o=o("from_config()"),A6o=o(` class
method.`),y6o=l(),n0=a("p"),L6o=o("This class cannot be instantiated directly using "),oie=a("code"),x6o=o("__init__()"),$6o=o(" (throws an error)."),k6o=l(),st=a("div"),F(s0.$$.fragment),S6o=l(),rie=a("p"),R6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P6o=l(),Ii=a("p"),B6o=o(`Note:
Loading a model from its configuration file does `),tie=a("strong"),I6o=o("not"),q6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=a("a"),N6o=o("from_pretrained()"),j6o=o(" to load the model weights."),D6o=l(),F(o_.$$.fragment),G6o=l(),Ye=a("div"),F(l0.$$.fragment),O6o=l(),aie=a("p"),V6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X6o=l(),Ra=a("p"),z6o=o("The model class to instantiate is selected based on the "),nie=a("code"),W6o=o("model_type"),Q6o=o(` property of the config object (either
passed as an argument or loaded from `),sie=a("code"),H6o=o("pretrained_model_name_or_path"),U6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=a("code"),J6o=o("pretrained_model_name_or_path"),Y6o=o(":"),K6o=l(),G=a("ul"),r_=a("li"),iie=a("strong"),Z6o=o("albert"),eTo=o(" \u2014 "),MN=a("a"),oTo=o("AlbertForPreTraining"),rTo=o(" (ALBERT model)"),tTo=l(),t_=a("li"),die=a("strong"),aTo=o("bart"),nTo=o(" \u2014 "),EN=a("a"),sTo=o("BartForConditionalGeneration"),lTo=o(" (BART model)"),iTo=l(),a_=a("li"),cie=a("strong"),dTo=o("bert"),cTo=o(" \u2014 "),CN=a("a"),fTo=o("BertForPreTraining"),mTo=o(" (BERT model)"),gTo=l(),n_=a("li"),fie=a("strong"),hTo=o("big_bird"),pTo=o(" \u2014 "),wN=a("a"),uTo=o("BigBirdForPreTraining"),_To=o(" (BigBird model)"),bTo=l(),s_=a("li"),mie=a("strong"),vTo=o("camembert"),FTo=o(" \u2014 "),AN=a("a"),TTo=o("CamembertForMaskedLM"),MTo=o(" (CamemBERT model)"),ETo=l(),l_=a("li"),gie=a("strong"),CTo=o("ctrl"),wTo=o(" \u2014 "),yN=a("a"),ATo=o("CTRLLMHeadModel"),yTo=o(" (CTRL model)"),LTo=l(),i_=a("li"),hie=a("strong"),xTo=o("data2vec-text"),$To=o(" \u2014 "),LN=a("a"),kTo=o("Data2VecTextForMaskedLM"),STo=o(" (Data2VecText model)"),RTo=l(),d_=a("li"),pie=a("strong"),PTo=o("deberta"),BTo=o(" \u2014 "),xN=a("a"),ITo=o("DebertaForMaskedLM"),qTo=o(" (DeBERTa model)"),NTo=l(),c_=a("li"),uie=a("strong"),jTo=o("deberta-v2"),DTo=o(" \u2014 "),$N=a("a"),GTo=o("DebertaV2ForMaskedLM"),OTo=o(" (DeBERTa-v2 model)"),VTo=l(),f_=a("li"),_ie=a("strong"),XTo=o("distilbert"),zTo=o(" \u2014 "),kN=a("a"),WTo=o("DistilBertForMaskedLM"),QTo=o(" (DistilBERT model)"),HTo=l(),m_=a("li"),bie=a("strong"),UTo=o("electra"),JTo=o(" \u2014 "),SN=a("a"),YTo=o("ElectraForPreTraining"),KTo=o(" (ELECTRA model)"),ZTo=l(),g_=a("li"),vie=a("strong"),e8o=o("flaubert"),o8o=o(" \u2014 "),RN=a("a"),r8o=o("FlaubertWithLMHeadModel"),t8o=o(" (FlauBERT model)"),a8o=l(),h_=a("li"),Fie=a("strong"),n8o=o("flava"),s8o=o(" \u2014 "),PN=a("a"),l8o=o("FlavaForPreTraining"),i8o=o(" (Flava model)"),d8o=l(),p_=a("li"),Tie=a("strong"),c8o=o("fnet"),f8o=o(" \u2014 "),BN=a("a"),m8o=o("FNetForPreTraining"),g8o=o(" (FNet model)"),h8o=l(),u_=a("li"),Mie=a("strong"),p8o=o("fsmt"),u8o=o(" \u2014 "),IN=a("a"),_8o=o("FSMTForConditionalGeneration"),b8o=o(" (FairSeq Machine-Translation model)"),v8o=l(),__=a("li"),Eie=a("strong"),F8o=o("funnel"),T8o=o(" \u2014 "),qN=a("a"),M8o=o("FunnelForPreTraining"),E8o=o(" (Funnel Transformer model)"),C8o=l(),b_=a("li"),Cie=a("strong"),w8o=o("gpt2"),A8o=o(" \u2014 "),NN=a("a"),y8o=o("GPT2LMHeadModel"),L8o=o(" (OpenAI GPT-2 model)"),x8o=l(),v_=a("li"),wie=a("strong"),$8o=o("ibert"),k8o=o(" \u2014 "),jN=a("a"),S8o=o("IBertForMaskedLM"),R8o=o(" (I-BERT model)"),P8o=l(),F_=a("li"),Aie=a("strong"),B8o=o("layoutlm"),I8o=o(" \u2014 "),DN=a("a"),q8o=o("LayoutLMForMaskedLM"),N8o=o(" (LayoutLM model)"),j8o=l(),T_=a("li"),yie=a("strong"),D8o=o("longformer"),G8o=o(" \u2014 "),GN=a("a"),O8o=o("LongformerForMaskedLM"),V8o=o(" (Longformer model)"),X8o=l(),M_=a("li"),Lie=a("strong"),z8o=o("lxmert"),W8o=o(" \u2014 "),ON=a("a"),Q8o=o("LxmertForPreTraining"),H8o=o(" (LXMERT model)"),U8o=l(),E_=a("li"),xie=a("strong"),J8o=o("megatron-bert"),Y8o=o(" \u2014 "),VN=a("a"),K8o=o("MegatronBertForPreTraining"),Z8o=o(" (MegatronBert model)"),e7o=l(),C_=a("li"),$ie=a("strong"),o7o=o("mobilebert"),r7o=o(" \u2014 "),XN=a("a"),t7o=o("MobileBertForPreTraining"),a7o=o(" (MobileBERT model)"),n7o=l(),w_=a("li"),kie=a("strong"),s7o=o("mpnet"),l7o=o(" \u2014 "),zN=a("a"),i7o=o("MPNetForMaskedLM"),d7o=o(" (MPNet model)"),c7o=l(),A_=a("li"),Sie=a("strong"),f7o=o("openai-gpt"),m7o=o(" \u2014 "),WN=a("a"),g7o=o("OpenAIGPTLMHeadModel"),h7o=o(" (OpenAI GPT model)"),p7o=l(),y_=a("li"),Rie=a("strong"),u7o=o("retribert"),_7o=o(" \u2014 "),QN=a("a"),b7o=o("RetriBertModel"),v7o=o(" (RetriBERT model)"),F7o=l(),L_=a("li"),Pie=a("strong"),T7o=o("roberta"),M7o=o(" \u2014 "),HN=a("a"),E7o=o("RobertaForMaskedLM"),C7o=o(" (RoBERTa model)"),w7o=l(),x_=a("li"),Bie=a("strong"),A7o=o("squeezebert"),y7o=o(" \u2014 "),UN=a("a"),L7o=o("SqueezeBertForMaskedLM"),x7o=o(" (SqueezeBERT model)"),$7o=l(),$_=a("li"),Iie=a("strong"),k7o=o("t5"),S7o=o(" \u2014 "),JN=a("a"),R7o=o("T5ForConditionalGeneration"),P7o=o(" (T5 model)"),B7o=l(),k_=a("li"),qie=a("strong"),I7o=o("tapas"),q7o=o(" \u2014 "),YN=a("a"),N7o=o("TapasForMaskedLM"),j7o=o(" (TAPAS model)"),D7o=l(),S_=a("li"),Nie=a("strong"),G7o=o("transfo-xl"),O7o=o(" \u2014 "),KN=a("a"),V7o=o("TransfoXLLMHeadModel"),X7o=o(" (Transformer-XL model)"),z7o=l(),R_=a("li"),jie=a("strong"),W7o=o("unispeech"),Q7o=o(" \u2014 "),ZN=a("a"),H7o=o("UniSpeechForPreTraining"),U7o=o(" (UniSpeech model)"),J7o=l(),P_=a("li"),Die=a("strong"),Y7o=o("unispeech-sat"),K7o=o(" \u2014 "),ej=a("a"),Z7o=o("UniSpeechSatForPreTraining"),eMo=o(" (UniSpeechSat model)"),oMo=l(),B_=a("li"),Gie=a("strong"),rMo=o("visual_bert"),tMo=o(" \u2014 "),oj=a("a"),aMo=o("VisualBertForPreTraining"),nMo=o(" (VisualBert model)"),sMo=l(),I_=a("li"),Oie=a("strong"),lMo=o("vit_mae"),iMo=o(" \u2014 "),rj=a("a"),dMo=o("ViTMAEForPreTraining"),cMo=o(" (ViTMAE model)"),fMo=l(),q_=a("li"),Vie=a("strong"),mMo=o("wav2vec2"),gMo=o(" \u2014 "),tj=a("a"),hMo=o("Wav2Vec2ForPreTraining"),pMo=o(" (Wav2Vec2 model)"),uMo=l(),N_=a("li"),Xie=a("strong"),_Mo=o("wav2vec2-conformer"),bMo=o(" \u2014 "),aj=a("a"),vMo=o("Wav2Vec2ConformerForPreTraining"),FMo=o(" (Wav2Vec2-Conformer model)"),TMo=l(),j_=a("li"),zie=a("strong"),MMo=o("xlm"),EMo=o(" \u2014 "),nj=a("a"),CMo=o("XLMWithLMHeadModel"),wMo=o(" (XLM model)"),AMo=l(),D_=a("li"),Wie=a("strong"),yMo=o("xlm-roberta"),LMo=o(" \u2014 "),sj=a("a"),xMo=o("XLMRobertaForMaskedLM"),$Mo=o(" (XLM-RoBERTa model)"),kMo=l(),G_=a("li"),Qie=a("strong"),SMo=o("xlm-roberta-xl"),RMo=o(" \u2014 "),lj=a("a"),PMo=o("XLMRobertaXLForMaskedLM"),BMo=o(" (XLM-RoBERTa-XL model)"),IMo=l(),O_=a("li"),Hie=a("strong"),qMo=o("xlnet"),NMo=o(" \u2014 "),ij=a("a"),jMo=o("XLNetLMHeadModel"),DMo=o(" (XLNet model)"),GMo=l(),V_=a("p"),OMo=o("The model is set in evaluation mode by default using "),Uie=a("code"),VMo=o("model.eval()"),XMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),zMo=o("model.train()"),WMo=l(),F(X_.$$.fragment),Dqe=l(),qi=a("h2"),z_=a("a"),Yie=a("span"),F(i0.$$.fragment),QMo=l(),Kie=a("span"),HMo=o("AutoModelForCausalLM"),Gqe=l(),ko=a("div"),F(d0.$$.fragment),UMo=l(),Ni=a("p"),JMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dj=a("a"),YMo=o("from_pretrained()"),KMo=o(" class method or the "),cj=a("a"),ZMo=o("from_config()"),e4o=o(` class
method.`),o4o=l(),c0=a("p"),r4o=o("This class cannot be instantiated directly using "),Zie=a("code"),t4o=o("__init__()"),a4o=o(" (throws an error)."),n4o=l(),lt=a("div"),F(f0.$$.fragment),s4o=l(),ede=a("p"),l4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i4o=l(),ji=a("p"),d4o=o(`Note:
Loading a model from its configuration file does `),ode=a("strong"),c4o=o("not"),f4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),m4o=o("from_pretrained()"),g4o=o(" to load the model weights."),h4o=l(),F(W_.$$.fragment),p4o=l(),Ke=a("div"),F(m0.$$.fragment),u4o=l(),rde=a("p"),_4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),b4o=l(),Pa=a("p"),v4o=o("The model class to instantiate is selected based on the "),tde=a("code"),F4o=o("model_type"),T4o=o(` property of the config object (either
passed as an argument or loaded from `),ade=a("code"),M4o=o("pretrained_model_name_or_path"),E4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nde=a("code"),C4o=o("pretrained_model_name_or_path"),w4o=o(":"),A4o=l(),z=a("ul"),Q_=a("li"),sde=a("strong"),y4o=o("bart"),L4o=o(" \u2014 "),mj=a("a"),x4o=o("BartForCausalLM"),$4o=o(" (BART model)"),k4o=l(),H_=a("li"),lde=a("strong"),S4o=o("bert"),R4o=o(" \u2014 "),gj=a("a"),P4o=o("BertLMHeadModel"),B4o=o(" (BERT model)"),I4o=l(),U_=a("li"),ide=a("strong"),q4o=o("bert-generation"),N4o=o(" \u2014 "),hj=a("a"),j4o=o("BertGenerationDecoder"),D4o=o(" (Bert Generation model)"),G4o=l(),J_=a("li"),dde=a("strong"),O4o=o("big_bird"),V4o=o(" \u2014 "),pj=a("a"),X4o=o("BigBirdForCausalLM"),z4o=o(" (BigBird model)"),W4o=l(),Y_=a("li"),cde=a("strong"),Q4o=o("bigbird_pegasus"),H4o=o(" \u2014 "),uj=a("a"),U4o=o("BigBirdPegasusForCausalLM"),J4o=o(" (BigBirdPegasus model)"),Y4o=l(),K_=a("li"),fde=a("strong"),K4o=o("blenderbot"),Z4o=o(" \u2014 "),_j=a("a"),eEo=o("BlenderbotForCausalLM"),oEo=o(" (Blenderbot model)"),rEo=l(),Z_=a("li"),mde=a("strong"),tEo=o("blenderbot-small"),aEo=o(" \u2014 "),bj=a("a"),nEo=o("BlenderbotSmallForCausalLM"),sEo=o(" (BlenderbotSmall model)"),lEo=l(),e2=a("li"),gde=a("strong"),iEo=o("camembert"),dEo=o(" \u2014 "),vj=a("a"),cEo=o("CamembertForCausalLM"),fEo=o(" (CamemBERT model)"),mEo=l(),o2=a("li"),hde=a("strong"),gEo=o("ctrl"),hEo=o(" \u2014 "),Fj=a("a"),pEo=o("CTRLLMHeadModel"),uEo=o(" (CTRL model)"),_Eo=l(),r2=a("li"),pde=a("strong"),bEo=o("data2vec-text"),vEo=o(" \u2014 "),Tj=a("a"),FEo=o("Data2VecTextForCausalLM"),TEo=o(" (Data2VecText model)"),MEo=l(),t2=a("li"),ude=a("strong"),EEo=o("electra"),CEo=o(" \u2014 "),Mj=a("a"),wEo=o("ElectraForCausalLM"),AEo=o(" (ELECTRA model)"),yEo=l(),a2=a("li"),_de=a("strong"),LEo=o("gpt2"),xEo=o(" \u2014 "),Ej=a("a"),$Eo=o("GPT2LMHeadModel"),kEo=o(" (OpenAI GPT-2 model)"),SEo=l(),n2=a("li"),bde=a("strong"),REo=o("gpt_neo"),PEo=o(" \u2014 "),Cj=a("a"),BEo=o("GPTNeoForCausalLM"),IEo=o(" (GPT Neo model)"),qEo=l(),s2=a("li"),vde=a("strong"),NEo=o("gptj"),jEo=o(" \u2014 "),wj=a("a"),DEo=o("GPTJForCausalLM"),GEo=o(" (GPT-J model)"),OEo=l(),l2=a("li"),Fde=a("strong"),VEo=o("marian"),XEo=o(" \u2014 "),Aj=a("a"),zEo=o("MarianForCausalLM"),WEo=o(" (Marian model)"),QEo=l(),i2=a("li"),Tde=a("strong"),HEo=o("mbart"),UEo=o(" \u2014 "),yj=a("a"),JEo=o("MBartForCausalLM"),YEo=o(" (mBART model)"),KEo=l(),d2=a("li"),Mde=a("strong"),ZEo=o("megatron-bert"),eCo=o(" \u2014 "),Lj=a("a"),oCo=o("MegatronBertForCausalLM"),rCo=o(" (MegatronBert model)"),tCo=l(),c2=a("li"),Ede=a("strong"),aCo=o("openai-gpt"),nCo=o(" \u2014 "),xj=a("a"),sCo=o("OpenAIGPTLMHeadModel"),lCo=o(" (OpenAI GPT model)"),iCo=l(),f2=a("li"),Cde=a("strong"),dCo=o("opt"),cCo=o(" \u2014 "),$j=a("a"),fCo=o("OPTForCausalLM"),mCo=o(" (OPT model)"),gCo=l(),m2=a("li"),wde=a("strong"),hCo=o("pegasus"),pCo=o(" \u2014 "),kj=a("a"),uCo=o("PegasusForCausalLM"),_Co=o(" (Pegasus model)"),bCo=l(),g2=a("li"),Ade=a("strong"),vCo=o("plbart"),FCo=o(" \u2014 "),Sj=a("a"),TCo=o("PLBartForCausalLM"),MCo=o(" (PLBart model)"),ECo=l(),h2=a("li"),yde=a("strong"),CCo=o("prophetnet"),wCo=o(" \u2014 "),Rj=a("a"),ACo=o("ProphetNetForCausalLM"),yCo=o(" (ProphetNet model)"),LCo=l(),p2=a("li"),Lde=a("strong"),xCo=o("qdqbert"),$Co=o(" \u2014 "),Pj=a("a"),kCo=o("QDQBertLMHeadModel"),SCo=o(" (QDQBert model)"),RCo=l(),u2=a("li"),xde=a("strong"),PCo=o("reformer"),BCo=o(" \u2014 "),Bj=a("a"),ICo=o("ReformerModelWithLMHead"),qCo=o(" (Reformer model)"),NCo=l(),_2=a("li"),$de=a("strong"),jCo=o("rembert"),DCo=o(" \u2014 "),Ij=a("a"),GCo=o("RemBertForCausalLM"),OCo=o(" (RemBERT model)"),VCo=l(),b2=a("li"),kde=a("strong"),XCo=o("roberta"),zCo=o(" \u2014 "),qj=a("a"),WCo=o("RobertaForCausalLM"),QCo=o(" (RoBERTa model)"),HCo=l(),v2=a("li"),Sde=a("strong"),UCo=o("roformer"),JCo=o(" \u2014 "),Nj=a("a"),YCo=o("RoFormerForCausalLM"),KCo=o(" (RoFormer model)"),ZCo=l(),F2=a("li"),Rde=a("strong"),e5o=o("speech_to_text_2"),o5o=o(" \u2014 "),jj=a("a"),r5o=o("Speech2Text2ForCausalLM"),t5o=o(" (Speech2Text2 model)"),a5o=l(),T2=a("li"),Pde=a("strong"),n5o=o("transfo-xl"),s5o=o(" \u2014 "),Dj=a("a"),l5o=o("TransfoXLLMHeadModel"),i5o=o(" (Transformer-XL model)"),d5o=l(),M2=a("li"),Bde=a("strong"),c5o=o("trocr"),f5o=o(" \u2014 "),Gj=a("a"),m5o=o("TrOCRForCausalLM"),g5o=o(" (TrOCR model)"),h5o=l(),E2=a("li"),Ide=a("strong"),p5o=o("xglm"),u5o=o(" \u2014 "),Oj=a("a"),_5o=o("XGLMForCausalLM"),b5o=o(" (XGLM model)"),v5o=l(),C2=a("li"),qde=a("strong"),F5o=o("xlm"),T5o=o(" \u2014 "),Vj=a("a"),M5o=o("XLMWithLMHeadModel"),E5o=o(" (XLM model)"),C5o=l(),w2=a("li"),Nde=a("strong"),w5o=o("xlm-prophetnet"),A5o=o(" \u2014 "),Xj=a("a"),y5o=o("XLMProphetNetForCausalLM"),L5o=o(" (XLMProphetNet model)"),x5o=l(),A2=a("li"),jde=a("strong"),$5o=o("xlm-roberta"),k5o=o(" \u2014 "),zj=a("a"),S5o=o("XLMRobertaForCausalLM"),R5o=o(" (XLM-RoBERTa model)"),P5o=l(),y2=a("li"),Dde=a("strong"),B5o=o("xlm-roberta-xl"),I5o=o(" \u2014 "),Wj=a("a"),q5o=o("XLMRobertaXLForCausalLM"),N5o=o(" (XLM-RoBERTa-XL model)"),j5o=l(),L2=a("li"),Gde=a("strong"),D5o=o("xlnet"),G5o=o(" \u2014 "),Qj=a("a"),O5o=o("XLNetLMHeadModel"),V5o=o(" (XLNet model)"),X5o=l(),x2=a("p"),z5o=o("The model is set in evaluation mode by default using "),Ode=a("code"),W5o=o("model.eval()"),Q5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vde=a("code"),H5o=o("model.train()"),U5o=l(),F($2.$$.fragment),Oqe=l(),Di=a("h2"),k2=a("a"),Xde=a("span"),F(g0.$$.fragment),J5o=l(),zde=a("span"),Y5o=o("AutoModelForMaskedLM"),Vqe=l(),So=a("div"),F(h0.$$.fragment),K5o=l(),Gi=a("p"),Z5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hj=a("a"),e3o=o("from_pretrained()"),o3o=o(" class method or the "),Uj=a("a"),r3o=o("from_config()"),t3o=o(` class
method.`),a3o=l(),p0=a("p"),n3o=o("This class cannot be instantiated directly using "),Wde=a("code"),s3o=o("__init__()"),l3o=o(" (throws an error)."),i3o=l(),it=a("div"),F(u0.$$.fragment),d3o=l(),Qde=a("p"),c3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f3o=l(),Oi=a("p"),m3o=o(`Note:
Loading a model from its configuration file does `),Hde=a("strong"),g3o=o("not"),h3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=a("a"),p3o=o("from_pretrained()"),u3o=o(" to load the model weights."),_3o=l(),F(S2.$$.fragment),b3o=l(),Ze=a("div"),F(_0.$$.fragment),v3o=l(),Ude=a("p"),F3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T3o=l(),Ba=a("p"),M3o=o("The model class to instantiate is selected based on the "),Jde=a("code"),E3o=o("model_type"),C3o=o(` property of the config object (either
passed as an argument or loaded from `),Yde=a("code"),w3o=o("pretrained_model_name_or_path"),A3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=a("code"),y3o=o("pretrained_model_name_or_path"),L3o=o(":"),x3o=l(),W=a("ul"),R2=a("li"),Zde=a("strong"),$3o=o("albert"),k3o=o(" \u2014 "),Yj=a("a"),S3o=o("AlbertForMaskedLM"),R3o=o(" (ALBERT model)"),P3o=l(),P2=a("li"),ece=a("strong"),B3o=o("bart"),I3o=o(" \u2014 "),Kj=a("a"),q3o=o("BartForConditionalGeneration"),N3o=o(" (BART model)"),j3o=l(),B2=a("li"),oce=a("strong"),D3o=o("bert"),G3o=o(" \u2014 "),Zj=a("a"),O3o=o("BertForMaskedLM"),V3o=o(" (BERT model)"),X3o=l(),I2=a("li"),rce=a("strong"),z3o=o("big_bird"),W3o=o(" \u2014 "),eD=a("a"),Q3o=o("BigBirdForMaskedLM"),H3o=o(" (BigBird model)"),U3o=l(),q2=a("li"),tce=a("strong"),J3o=o("camembert"),Y3o=o(" \u2014 "),oD=a("a"),K3o=o("CamembertForMaskedLM"),Z3o=o(" (CamemBERT model)"),ewo=l(),N2=a("li"),ace=a("strong"),owo=o("convbert"),rwo=o(" \u2014 "),rD=a("a"),two=o("ConvBertForMaskedLM"),awo=o(" (ConvBERT model)"),nwo=l(),j2=a("li"),nce=a("strong"),swo=o("data2vec-text"),lwo=o(" \u2014 "),tD=a("a"),iwo=o("Data2VecTextForMaskedLM"),dwo=o(" (Data2VecText model)"),cwo=l(),D2=a("li"),sce=a("strong"),fwo=o("deberta"),mwo=o(" \u2014 "),aD=a("a"),gwo=o("DebertaForMaskedLM"),hwo=o(" (DeBERTa model)"),pwo=l(),G2=a("li"),lce=a("strong"),uwo=o("deberta-v2"),_wo=o(" \u2014 "),nD=a("a"),bwo=o("DebertaV2ForMaskedLM"),vwo=o(" (DeBERTa-v2 model)"),Fwo=l(),O2=a("li"),ice=a("strong"),Two=o("distilbert"),Mwo=o(" \u2014 "),sD=a("a"),Ewo=o("DistilBertForMaskedLM"),Cwo=o(" (DistilBERT model)"),wwo=l(),V2=a("li"),dce=a("strong"),Awo=o("electra"),ywo=o(" \u2014 "),lD=a("a"),Lwo=o("ElectraForMaskedLM"),xwo=o(" (ELECTRA model)"),$wo=l(),X2=a("li"),cce=a("strong"),kwo=o("flaubert"),Swo=o(" \u2014 "),iD=a("a"),Rwo=o("FlaubertWithLMHeadModel"),Pwo=o(" (FlauBERT model)"),Bwo=l(),z2=a("li"),fce=a("strong"),Iwo=o("fnet"),qwo=o(" \u2014 "),dD=a("a"),Nwo=o("FNetForMaskedLM"),jwo=o(" (FNet model)"),Dwo=l(),W2=a("li"),mce=a("strong"),Gwo=o("funnel"),Owo=o(" \u2014 "),cD=a("a"),Vwo=o("FunnelForMaskedLM"),Xwo=o(" (Funnel Transformer model)"),zwo=l(),Q2=a("li"),gce=a("strong"),Wwo=o("ibert"),Qwo=o(" \u2014 "),fD=a("a"),Hwo=o("IBertForMaskedLM"),Uwo=o(" (I-BERT model)"),Jwo=l(),H2=a("li"),hce=a("strong"),Ywo=o("layoutlm"),Kwo=o(" \u2014 "),mD=a("a"),Zwo=o("LayoutLMForMaskedLM"),eAo=o(" (LayoutLM model)"),oAo=l(),U2=a("li"),pce=a("strong"),rAo=o("longformer"),tAo=o(" \u2014 "),gD=a("a"),aAo=o("LongformerForMaskedLM"),nAo=o(" (Longformer model)"),sAo=l(),J2=a("li"),uce=a("strong"),lAo=o("mbart"),iAo=o(" \u2014 "),hD=a("a"),dAo=o("MBartForConditionalGeneration"),cAo=o(" (mBART model)"),fAo=l(),Y2=a("li"),_ce=a("strong"),mAo=o("megatron-bert"),gAo=o(" \u2014 "),pD=a("a"),hAo=o("MegatronBertForMaskedLM"),pAo=o(" (MegatronBert model)"),uAo=l(),K2=a("li"),bce=a("strong"),_Ao=o("mobilebert"),bAo=o(" \u2014 "),uD=a("a"),vAo=o("MobileBertForMaskedLM"),FAo=o(" (MobileBERT model)"),TAo=l(),Z2=a("li"),vce=a("strong"),MAo=o("mpnet"),EAo=o(" \u2014 "),_D=a("a"),CAo=o("MPNetForMaskedLM"),wAo=o(" (MPNet model)"),AAo=l(),e1=a("li"),Fce=a("strong"),yAo=o("nystromformer"),LAo=o(" \u2014 "),bD=a("a"),xAo=o("NystromformerForMaskedLM"),$Ao=o(" (Nystromformer model)"),kAo=l(),o1=a("li"),Tce=a("strong"),SAo=o("perceiver"),RAo=o(" \u2014 "),vD=a("a"),PAo=o("PerceiverForMaskedLM"),BAo=o(" (Perceiver model)"),IAo=l(),r1=a("li"),Mce=a("strong"),qAo=o("qdqbert"),NAo=o(" \u2014 "),FD=a("a"),jAo=o("QDQBertForMaskedLM"),DAo=o(" (QDQBert model)"),GAo=l(),t1=a("li"),Ece=a("strong"),OAo=o("reformer"),VAo=o(" \u2014 "),TD=a("a"),XAo=o("ReformerForMaskedLM"),zAo=o(" (Reformer model)"),WAo=l(),a1=a("li"),Cce=a("strong"),QAo=o("rembert"),HAo=o(" \u2014 "),MD=a("a"),UAo=o("RemBertForMaskedLM"),JAo=o(" (RemBERT model)"),YAo=l(),n1=a("li"),wce=a("strong"),KAo=o("roberta"),ZAo=o(" \u2014 "),ED=a("a"),e0o=o("RobertaForMaskedLM"),o0o=o(" (RoBERTa model)"),r0o=l(),s1=a("li"),Ace=a("strong"),t0o=o("roformer"),a0o=o(" \u2014 "),CD=a("a"),n0o=o("RoFormerForMaskedLM"),s0o=o(" (RoFormer model)"),l0o=l(),l1=a("li"),yce=a("strong"),i0o=o("squeezebert"),d0o=o(" \u2014 "),wD=a("a"),c0o=o("SqueezeBertForMaskedLM"),f0o=o(" (SqueezeBERT model)"),m0o=l(),i1=a("li"),Lce=a("strong"),g0o=o("tapas"),h0o=o(" \u2014 "),AD=a("a"),p0o=o("TapasForMaskedLM"),u0o=o(" (TAPAS model)"),_0o=l(),d1=a("li"),xce=a("strong"),b0o=o("wav2vec2"),v0o=o(" \u2014 "),$ce=a("code"),F0o=o("Wav2Vec2ForMaskedLM"),T0o=o(" (Wav2Vec2 model)"),M0o=l(),c1=a("li"),kce=a("strong"),E0o=o("xlm"),C0o=o(" \u2014 "),yD=a("a"),w0o=o("XLMWithLMHeadModel"),A0o=o(" (XLM model)"),y0o=l(),f1=a("li"),Sce=a("strong"),L0o=o("xlm-roberta"),x0o=o(" \u2014 "),LD=a("a"),$0o=o("XLMRobertaForMaskedLM"),k0o=o(" (XLM-RoBERTa model)"),S0o=l(),m1=a("li"),Rce=a("strong"),R0o=o("xlm-roberta-xl"),P0o=o(" \u2014 "),xD=a("a"),B0o=o("XLMRobertaXLForMaskedLM"),I0o=o(" (XLM-RoBERTa-XL model)"),q0o=l(),g1=a("li"),Pce=a("strong"),N0o=o("yoso"),j0o=o(" \u2014 "),$D=a("a"),D0o=o("YosoForMaskedLM"),G0o=o(" (YOSO model)"),O0o=l(),h1=a("p"),V0o=o("The model is set in evaluation mode by default using "),Bce=a("code"),X0o=o("model.eval()"),z0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),W0o=o("model.train()"),Q0o=l(),F(p1.$$.fragment),Xqe=l(),Vi=a("h2"),u1=a("a"),qce=a("span"),F(b0.$$.fragment),H0o=l(),Nce=a("span"),U0o=o("AutoModelForSeq2SeqLM"),zqe=l(),Ro=a("div"),F(v0.$$.fragment),J0o=l(),Xi=a("p"),Y0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kD=a("a"),K0o=o("from_pretrained()"),Z0o=o(" class method or the "),SD=a("a"),eyo=o("from_config()"),oyo=o(` class
method.`),ryo=l(),F0=a("p"),tyo=o("This class cannot be instantiated directly using "),jce=a("code"),ayo=o("__init__()"),nyo=o(" (throws an error)."),syo=l(),dt=a("div"),F(T0.$$.fragment),lyo=l(),Dce=a("p"),iyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dyo=l(),zi=a("p"),cyo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),fyo=o("not"),myo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=a("a"),gyo=o("from_pretrained()"),hyo=o(" to load the model weights."),pyo=l(),F(_1.$$.fragment),uyo=l(),eo=a("div"),F(M0.$$.fragment),_yo=l(),Oce=a("p"),byo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vyo=l(),Ia=a("p"),Fyo=o("The model class to instantiate is selected based on the "),Vce=a("code"),Tyo=o("model_type"),Myo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),Eyo=o("pretrained_model_name_or_path"),Cyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),wyo=o("pretrained_model_name_or_path"),Ayo=o(":"),yyo=l(),ue=a("ul"),b1=a("li"),Wce=a("strong"),Lyo=o("bart"),xyo=o(" \u2014 "),PD=a("a"),$yo=o("BartForConditionalGeneration"),kyo=o(" (BART model)"),Syo=l(),v1=a("li"),Qce=a("strong"),Ryo=o("bigbird_pegasus"),Pyo=o(" \u2014 "),BD=a("a"),Byo=o("BigBirdPegasusForConditionalGeneration"),Iyo=o(" (BigBirdPegasus model)"),qyo=l(),F1=a("li"),Hce=a("strong"),Nyo=o("blenderbot"),jyo=o(" \u2014 "),ID=a("a"),Dyo=o("BlenderbotForConditionalGeneration"),Gyo=o(" (Blenderbot model)"),Oyo=l(),T1=a("li"),Uce=a("strong"),Vyo=o("blenderbot-small"),Xyo=o(" \u2014 "),qD=a("a"),zyo=o("BlenderbotSmallForConditionalGeneration"),Wyo=o(" (BlenderbotSmall model)"),Qyo=l(),M1=a("li"),Jce=a("strong"),Hyo=o("encoder-decoder"),Uyo=o(" \u2014 "),ND=a("a"),Jyo=o("EncoderDecoderModel"),Yyo=o(" (Encoder decoder model)"),Kyo=l(),E1=a("li"),Yce=a("strong"),Zyo=o("fsmt"),eLo=o(" \u2014 "),jD=a("a"),oLo=o("FSMTForConditionalGeneration"),rLo=o(" (FairSeq Machine-Translation model)"),tLo=l(),C1=a("li"),Kce=a("strong"),aLo=o("led"),nLo=o(" \u2014 "),DD=a("a"),sLo=o("LEDForConditionalGeneration"),lLo=o(" (LED model)"),iLo=l(),w1=a("li"),Zce=a("strong"),dLo=o("m2m_100"),cLo=o(" \u2014 "),GD=a("a"),fLo=o("M2M100ForConditionalGeneration"),mLo=o(" (M2M100 model)"),gLo=l(),A1=a("li"),efe=a("strong"),hLo=o("marian"),pLo=o(" \u2014 "),OD=a("a"),uLo=o("MarianMTModel"),_Lo=o(" (Marian model)"),bLo=l(),y1=a("li"),ofe=a("strong"),vLo=o("mbart"),FLo=o(" \u2014 "),VD=a("a"),TLo=o("MBartForConditionalGeneration"),MLo=o(" (mBART model)"),ELo=l(),L1=a("li"),rfe=a("strong"),CLo=o("mt5"),wLo=o(" \u2014 "),XD=a("a"),ALo=o("MT5ForConditionalGeneration"),yLo=o(" (mT5 model)"),LLo=l(),x1=a("li"),tfe=a("strong"),xLo=o("pegasus"),$Lo=o(" \u2014 "),zD=a("a"),kLo=o("PegasusForConditionalGeneration"),SLo=o(" (Pegasus model)"),RLo=l(),$1=a("li"),afe=a("strong"),PLo=o("plbart"),BLo=o(" \u2014 "),WD=a("a"),ILo=o("PLBartForConditionalGeneration"),qLo=o(" (PLBart model)"),NLo=l(),k1=a("li"),nfe=a("strong"),jLo=o("prophetnet"),DLo=o(" \u2014 "),QD=a("a"),GLo=o("ProphetNetForConditionalGeneration"),OLo=o(" (ProphetNet model)"),VLo=l(),S1=a("li"),sfe=a("strong"),XLo=o("t5"),zLo=o(" \u2014 "),HD=a("a"),WLo=o("T5ForConditionalGeneration"),QLo=o(" (T5 model)"),HLo=l(),R1=a("li"),lfe=a("strong"),ULo=o("xlm-prophetnet"),JLo=o(" \u2014 "),UD=a("a"),YLo=o("XLMProphetNetForConditionalGeneration"),KLo=o(" (XLMProphetNet model)"),ZLo=l(),P1=a("p"),exo=o("The model is set in evaluation mode by default using "),ife=a("code"),oxo=o("model.eval()"),rxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),txo=o("model.train()"),axo=l(),F(B1.$$.fragment),Wqe=l(),Wi=a("h2"),I1=a("a"),cfe=a("span"),F(E0.$$.fragment),nxo=l(),ffe=a("span"),sxo=o("AutoModelForSequenceClassification"),Qqe=l(),Po=a("div"),F(C0.$$.fragment),lxo=l(),Qi=a("p"),ixo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=a("a"),dxo=o("from_pretrained()"),cxo=o(" class method or the "),YD=a("a"),fxo=o("from_config()"),mxo=o(` class
method.`),gxo=l(),w0=a("p"),hxo=o("This class cannot be instantiated directly using "),mfe=a("code"),pxo=o("__init__()"),uxo=o(" (throws an error)."),_xo=l(),ct=a("div"),F(A0.$$.fragment),bxo=l(),gfe=a("p"),vxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fxo=l(),Hi=a("p"),Txo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),Mxo=o("not"),Exo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),Cxo=o("from_pretrained()"),wxo=o(" to load the model weights."),Axo=l(),F(q1.$$.fragment),yxo=l(),oo=a("div"),F(y0.$$.fragment),Lxo=l(),pfe=a("p"),xxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$xo=l(),qa=a("p"),kxo=o("The model class to instantiate is selected based on the "),ufe=a("code"),Sxo=o("model_type"),Rxo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),Pxo=o("pretrained_model_name_or_path"),Bxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),Ixo=o("pretrained_model_name_or_path"),qxo=o(":"),Nxo=l(),q=a("ul"),N1=a("li"),vfe=a("strong"),jxo=o("albert"),Dxo=o(" \u2014 "),ZD=a("a"),Gxo=o("AlbertForSequenceClassification"),Oxo=o(" (ALBERT model)"),Vxo=l(),j1=a("li"),Ffe=a("strong"),Xxo=o("bart"),zxo=o(" \u2014 "),eG=a("a"),Wxo=o("BartForSequenceClassification"),Qxo=o(" (BART model)"),Hxo=l(),D1=a("li"),Tfe=a("strong"),Uxo=o("bert"),Jxo=o(" \u2014 "),oG=a("a"),Yxo=o("BertForSequenceClassification"),Kxo=o(" (BERT model)"),Zxo=l(),G1=a("li"),Mfe=a("strong"),e9o=o("big_bird"),o9o=o(" \u2014 "),rG=a("a"),r9o=o("BigBirdForSequenceClassification"),t9o=o(" (BigBird model)"),a9o=l(),O1=a("li"),Efe=a("strong"),n9o=o("bigbird_pegasus"),s9o=o(" \u2014 "),tG=a("a"),l9o=o("BigBirdPegasusForSequenceClassification"),i9o=o(" (BigBirdPegasus model)"),d9o=l(),V1=a("li"),Cfe=a("strong"),c9o=o("camembert"),f9o=o(" \u2014 "),aG=a("a"),m9o=o("CamembertForSequenceClassification"),g9o=o(" (CamemBERT model)"),h9o=l(),X1=a("li"),wfe=a("strong"),p9o=o("canine"),u9o=o(" \u2014 "),nG=a("a"),_9o=o("CanineForSequenceClassification"),b9o=o(" (Canine model)"),v9o=l(),z1=a("li"),Afe=a("strong"),F9o=o("convbert"),T9o=o(" \u2014 "),sG=a("a"),M9o=o("ConvBertForSequenceClassification"),E9o=o(" (ConvBERT model)"),C9o=l(),W1=a("li"),yfe=a("strong"),w9o=o("ctrl"),A9o=o(" \u2014 "),lG=a("a"),y9o=o("CTRLForSequenceClassification"),L9o=o(" (CTRL model)"),x9o=l(),Q1=a("li"),Lfe=a("strong"),$9o=o("data2vec-text"),k9o=o(" \u2014 "),iG=a("a"),S9o=o("Data2VecTextForSequenceClassification"),R9o=o(" (Data2VecText model)"),P9o=l(),H1=a("li"),xfe=a("strong"),B9o=o("deberta"),I9o=o(" \u2014 "),dG=a("a"),q9o=o("DebertaForSequenceClassification"),N9o=o(" (DeBERTa model)"),j9o=l(),U1=a("li"),$fe=a("strong"),D9o=o("deberta-v2"),G9o=o(" \u2014 "),cG=a("a"),O9o=o("DebertaV2ForSequenceClassification"),V9o=o(" (DeBERTa-v2 model)"),X9o=l(),J1=a("li"),kfe=a("strong"),z9o=o("distilbert"),W9o=o(" \u2014 "),fG=a("a"),Q9o=o("DistilBertForSequenceClassification"),H9o=o(" (DistilBERT model)"),U9o=l(),Y1=a("li"),Sfe=a("strong"),J9o=o("electra"),Y9o=o(" \u2014 "),mG=a("a"),K9o=o("ElectraForSequenceClassification"),Z9o=o(" (ELECTRA model)"),e$o=l(),K1=a("li"),Rfe=a("strong"),o$o=o("flaubert"),r$o=o(" \u2014 "),gG=a("a"),t$o=o("FlaubertForSequenceClassification"),a$o=o(" (FlauBERT model)"),n$o=l(),Z1=a("li"),Pfe=a("strong"),s$o=o("fnet"),l$o=o(" \u2014 "),hG=a("a"),i$o=o("FNetForSequenceClassification"),d$o=o(" (FNet model)"),c$o=l(),eb=a("li"),Bfe=a("strong"),f$o=o("funnel"),m$o=o(" \u2014 "),pG=a("a"),g$o=o("FunnelForSequenceClassification"),h$o=o(" (Funnel Transformer model)"),p$o=l(),ob=a("li"),Ife=a("strong"),u$o=o("gpt2"),_$o=o(" \u2014 "),uG=a("a"),b$o=o("GPT2ForSequenceClassification"),v$o=o(" (OpenAI GPT-2 model)"),F$o=l(),rb=a("li"),qfe=a("strong"),T$o=o("gpt_neo"),M$o=o(" \u2014 "),_G=a("a"),E$o=o("GPTNeoForSequenceClassification"),C$o=o(" (GPT Neo model)"),w$o=l(),tb=a("li"),Nfe=a("strong"),A$o=o("gptj"),y$o=o(" \u2014 "),bG=a("a"),L$o=o("GPTJForSequenceClassification"),x$o=o(" (GPT-J model)"),$$o=l(),ab=a("li"),jfe=a("strong"),k$o=o("ibert"),S$o=o(" \u2014 "),vG=a("a"),R$o=o("IBertForSequenceClassification"),P$o=o(" (I-BERT model)"),B$o=l(),nb=a("li"),Dfe=a("strong"),I$o=o("layoutlm"),q$o=o(" \u2014 "),FG=a("a"),N$o=o("LayoutLMForSequenceClassification"),j$o=o(" (LayoutLM model)"),D$o=l(),sb=a("li"),Gfe=a("strong"),G$o=o("layoutlmv2"),O$o=o(" \u2014 "),TG=a("a"),V$o=o("LayoutLMv2ForSequenceClassification"),X$o=o(" (LayoutLMv2 model)"),z$o=l(),lb=a("li"),Ofe=a("strong"),W$o=o("led"),Q$o=o(" \u2014 "),MG=a("a"),H$o=o("LEDForSequenceClassification"),U$o=o(" (LED model)"),J$o=l(),ib=a("li"),Vfe=a("strong"),Y$o=o("longformer"),K$o=o(" \u2014 "),EG=a("a"),Z$o=o("LongformerForSequenceClassification"),eko=o(" (Longformer model)"),oko=l(),db=a("li"),Xfe=a("strong"),rko=o("mbart"),tko=o(" \u2014 "),CG=a("a"),ako=o("MBartForSequenceClassification"),nko=o(" (mBART model)"),sko=l(),cb=a("li"),zfe=a("strong"),lko=o("megatron-bert"),iko=o(" \u2014 "),wG=a("a"),dko=o("MegatronBertForSequenceClassification"),cko=o(" (MegatronBert model)"),fko=l(),fb=a("li"),Wfe=a("strong"),mko=o("mobilebert"),gko=o(" \u2014 "),AG=a("a"),hko=o("MobileBertForSequenceClassification"),pko=o(" (MobileBERT model)"),uko=l(),mb=a("li"),Qfe=a("strong"),_ko=o("mpnet"),bko=o(" \u2014 "),yG=a("a"),vko=o("MPNetForSequenceClassification"),Fko=o(" (MPNet model)"),Tko=l(),gb=a("li"),Hfe=a("strong"),Mko=o("nystromformer"),Eko=o(" \u2014 "),LG=a("a"),Cko=o("NystromformerForSequenceClassification"),wko=o(" (Nystromformer model)"),Ako=l(),hb=a("li"),Ufe=a("strong"),yko=o("openai-gpt"),Lko=o(" \u2014 "),xG=a("a"),xko=o("OpenAIGPTForSequenceClassification"),$ko=o(" (OpenAI GPT model)"),kko=l(),pb=a("li"),Jfe=a("strong"),Sko=o("perceiver"),Rko=o(" \u2014 "),$G=a("a"),Pko=o("PerceiverForSequenceClassification"),Bko=o(" (Perceiver model)"),Iko=l(),ub=a("li"),Yfe=a("strong"),qko=o("plbart"),Nko=o(" \u2014 "),kG=a("a"),jko=o("PLBartForSequenceClassification"),Dko=o(" (PLBart model)"),Gko=l(),_b=a("li"),Kfe=a("strong"),Oko=o("qdqbert"),Vko=o(" \u2014 "),SG=a("a"),Xko=o("QDQBertForSequenceClassification"),zko=o(" (QDQBert model)"),Wko=l(),bb=a("li"),Zfe=a("strong"),Qko=o("reformer"),Hko=o(" \u2014 "),RG=a("a"),Uko=o("ReformerForSequenceClassification"),Jko=o(" (Reformer model)"),Yko=l(),vb=a("li"),eme=a("strong"),Kko=o("rembert"),Zko=o(" \u2014 "),PG=a("a"),eSo=o("RemBertForSequenceClassification"),oSo=o(" (RemBERT model)"),rSo=l(),Fb=a("li"),ome=a("strong"),tSo=o("roberta"),aSo=o(" \u2014 "),BG=a("a"),nSo=o("RobertaForSequenceClassification"),sSo=o(" (RoBERTa model)"),lSo=l(),Tb=a("li"),rme=a("strong"),iSo=o("roformer"),dSo=o(" \u2014 "),IG=a("a"),cSo=o("RoFormerForSequenceClassification"),fSo=o(" (RoFormer model)"),mSo=l(),Mb=a("li"),tme=a("strong"),gSo=o("squeezebert"),hSo=o(" \u2014 "),qG=a("a"),pSo=o("SqueezeBertForSequenceClassification"),uSo=o(" (SqueezeBERT model)"),_So=l(),Eb=a("li"),ame=a("strong"),bSo=o("tapas"),vSo=o(" \u2014 "),NG=a("a"),FSo=o("TapasForSequenceClassification"),TSo=o(" (TAPAS model)"),MSo=l(),Cb=a("li"),nme=a("strong"),ESo=o("transfo-xl"),CSo=o(" \u2014 "),jG=a("a"),wSo=o("TransfoXLForSequenceClassification"),ASo=o(" (Transformer-XL model)"),ySo=l(),wb=a("li"),sme=a("strong"),LSo=o("xlm"),xSo=o(" \u2014 "),DG=a("a"),$So=o("XLMForSequenceClassification"),kSo=o(" (XLM model)"),SSo=l(),Ab=a("li"),lme=a("strong"),RSo=o("xlm-roberta"),PSo=o(" \u2014 "),GG=a("a"),BSo=o("XLMRobertaForSequenceClassification"),ISo=o(" (XLM-RoBERTa model)"),qSo=l(),yb=a("li"),ime=a("strong"),NSo=o("xlm-roberta-xl"),jSo=o(" \u2014 "),OG=a("a"),DSo=o("XLMRobertaXLForSequenceClassification"),GSo=o(" (XLM-RoBERTa-XL model)"),OSo=l(),Lb=a("li"),dme=a("strong"),VSo=o("xlnet"),XSo=o(" \u2014 "),VG=a("a"),zSo=o("XLNetForSequenceClassification"),WSo=o(" (XLNet model)"),QSo=l(),xb=a("li"),cme=a("strong"),HSo=o("yoso"),USo=o(" \u2014 "),XG=a("a"),JSo=o("YosoForSequenceClassification"),YSo=o(" (YOSO model)"),KSo=l(),$b=a("p"),ZSo=o("The model is set in evaluation mode by default using "),fme=a("code"),eRo=o("model.eval()"),oRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),rRo=o("model.train()"),tRo=l(),F(kb.$$.fragment),Hqe=l(),Ui=a("h2"),Sb=a("a"),gme=a("span"),F(L0.$$.fragment),aRo=l(),hme=a("span"),nRo=o("AutoModelForMultipleChoice"),Uqe=l(),Bo=a("div"),F(x0.$$.fragment),sRo=l(),Ji=a("p"),lRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zG=a("a"),iRo=o("from_pretrained()"),dRo=o(" class method or the "),WG=a("a"),cRo=o("from_config()"),fRo=o(` class
method.`),mRo=l(),$0=a("p"),gRo=o("This class cannot be instantiated directly using "),pme=a("code"),hRo=o("__init__()"),pRo=o(" (throws an error)."),uRo=l(),ft=a("div"),F(k0.$$.fragment),_Ro=l(),ume=a("p"),bRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vRo=l(),Yi=a("p"),FRo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),TRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),ERo=o("from_pretrained()"),CRo=o(" to load the model weights."),wRo=l(),F(Rb.$$.fragment),ARo=l(),ro=a("div"),F(S0.$$.fragment),yRo=l(),bme=a("p"),LRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xRo=l(),Na=a("p"),$Ro=o("The model class to instantiate is selected based on the "),vme=a("code"),kRo=o("model_type"),SRo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),RRo=o("pretrained_model_name_or_path"),PRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),BRo=o("pretrained_model_name_or_path"),IRo=o(":"),qRo=l(),Y=a("ul"),Pb=a("li"),Mme=a("strong"),NRo=o("albert"),jRo=o(" \u2014 "),HG=a("a"),DRo=o("AlbertForMultipleChoice"),GRo=o(" (ALBERT model)"),ORo=l(),Bb=a("li"),Eme=a("strong"),VRo=o("bert"),XRo=o(" \u2014 "),UG=a("a"),zRo=o("BertForMultipleChoice"),WRo=o(" (BERT model)"),QRo=l(),Ib=a("li"),Cme=a("strong"),HRo=o("big_bird"),URo=o(" \u2014 "),JG=a("a"),JRo=o("BigBirdForMultipleChoice"),YRo=o(" (BigBird model)"),KRo=l(),qb=a("li"),wme=a("strong"),ZRo=o("camembert"),ePo=o(" \u2014 "),YG=a("a"),oPo=o("CamembertForMultipleChoice"),rPo=o(" (CamemBERT model)"),tPo=l(),Nb=a("li"),Ame=a("strong"),aPo=o("canine"),nPo=o(" \u2014 "),KG=a("a"),sPo=o("CanineForMultipleChoice"),lPo=o(" (Canine model)"),iPo=l(),jb=a("li"),yme=a("strong"),dPo=o("convbert"),cPo=o(" \u2014 "),ZG=a("a"),fPo=o("ConvBertForMultipleChoice"),mPo=o(" (ConvBERT model)"),gPo=l(),Db=a("li"),Lme=a("strong"),hPo=o("data2vec-text"),pPo=o(" \u2014 "),eO=a("a"),uPo=o("Data2VecTextForMultipleChoice"),_Po=o(" (Data2VecText model)"),bPo=l(),Gb=a("li"),xme=a("strong"),vPo=o("deberta-v2"),FPo=o(" \u2014 "),oO=a("a"),TPo=o("DebertaV2ForMultipleChoice"),MPo=o(" (DeBERTa-v2 model)"),EPo=l(),Ob=a("li"),$me=a("strong"),CPo=o("distilbert"),wPo=o(" \u2014 "),rO=a("a"),APo=o("DistilBertForMultipleChoice"),yPo=o(" (DistilBERT model)"),LPo=l(),Vb=a("li"),kme=a("strong"),xPo=o("electra"),$Po=o(" \u2014 "),tO=a("a"),kPo=o("ElectraForMultipleChoice"),SPo=o(" (ELECTRA model)"),RPo=l(),Xb=a("li"),Sme=a("strong"),PPo=o("flaubert"),BPo=o(" \u2014 "),aO=a("a"),IPo=o("FlaubertForMultipleChoice"),qPo=o(" (FlauBERT model)"),NPo=l(),zb=a("li"),Rme=a("strong"),jPo=o("fnet"),DPo=o(" \u2014 "),nO=a("a"),GPo=o("FNetForMultipleChoice"),OPo=o(" (FNet model)"),VPo=l(),Wb=a("li"),Pme=a("strong"),XPo=o("funnel"),zPo=o(" \u2014 "),sO=a("a"),WPo=o("FunnelForMultipleChoice"),QPo=o(" (Funnel Transformer model)"),HPo=l(),Qb=a("li"),Bme=a("strong"),UPo=o("ibert"),JPo=o(" \u2014 "),lO=a("a"),YPo=o("IBertForMultipleChoice"),KPo=o(" (I-BERT model)"),ZPo=l(),Hb=a("li"),Ime=a("strong"),eBo=o("longformer"),oBo=o(" \u2014 "),iO=a("a"),rBo=o("LongformerForMultipleChoice"),tBo=o(" (Longformer model)"),aBo=l(),Ub=a("li"),qme=a("strong"),nBo=o("megatron-bert"),sBo=o(" \u2014 "),dO=a("a"),lBo=o("MegatronBertForMultipleChoice"),iBo=o(" (MegatronBert model)"),dBo=l(),Jb=a("li"),Nme=a("strong"),cBo=o("mobilebert"),fBo=o(" \u2014 "),cO=a("a"),mBo=o("MobileBertForMultipleChoice"),gBo=o(" (MobileBERT model)"),hBo=l(),Yb=a("li"),jme=a("strong"),pBo=o("mpnet"),uBo=o(" \u2014 "),fO=a("a"),_Bo=o("MPNetForMultipleChoice"),bBo=o(" (MPNet model)"),vBo=l(),Kb=a("li"),Dme=a("strong"),FBo=o("nystromformer"),TBo=o(" \u2014 "),mO=a("a"),MBo=o("NystromformerForMultipleChoice"),EBo=o(" (Nystromformer model)"),CBo=l(),Zb=a("li"),Gme=a("strong"),wBo=o("qdqbert"),ABo=o(" \u2014 "),gO=a("a"),yBo=o("QDQBertForMultipleChoice"),LBo=o(" (QDQBert model)"),xBo=l(),ev=a("li"),Ome=a("strong"),$Bo=o("rembert"),kBo=o(" \u2014 "),hO=a("a"),SBo=o("RemBertForMultipleChoice"),RBo=o(" (RemBERT model)"),PBo=l(),ov=a("li"),Vme=a("strong"),BBo=o("roberta"),IBo=o(" \u2014 "),pO=a("a"),qBo=o("RobertaForMultipleChoice"),NBo=o(" (RoBERTa model)"),jBo=l(),rv=a("li"),Xme=a("strong"),DBo=o("roformer"),GBo=o(" \u2014 "),uO=a("a"),OBo=o("RoFormerForMultipleChoice"),VBo=o(" (RoFormer model)"),XBo=l(),tv=a("li"),zme=a("strong"),zBo=o("squeezebert"),WBo=o(" \u2014 "),_O=a("a"),QBo=o("SqueezeBertForMultipleChoice"),HBo=o(" (SqueezeBERT model)"),UBo=l(),av=a("li"),Wme=a("strong"),JBo=o("xlm"),YBo=o(" \u2014 "),bO=a("a"),KBo=o("XLMForMultipleChoice"),ZBo=o(" (XLM model)"),eIo=l(),nv=a("li"),Qme=a("strong"),oIo=o("xlm-roberta"),rIo=o(" \u2014 "),vO=a("a"),tIo=o("XLMRobertaForMultipleChoice"),aIo=o(" (XLM-RoBERTa model)"),nIo=l(),sv=a("li"),Hme=a("strong"),sIo=o("xlm-roberta-xl"),lIo=o(" \u2014 "),FO=a("a"),iIo=o("XLMRobertaXLForMultipleChoice"),dIo=o(" (XLM-RoBERTa-XL model)"),cIo=l(),lv=a("li"),Ume=a("strong"),fIo=o("xlnet"),mIo=o(" \u2014 "),TO=a("a"),gIo=o("XLNetForMultipleChoice"),hIo=o(" (XLNet model)"),pIo=l(),iv=a("li"),Jme=a("strong"),uIo=o("yoso"),_Io=o(" \u2014 "),MO=a("a"),bIo=o("YosoForMultipleChoice"),vIo=o(" (YOSO model)"),FIo=l(),dv=a("p"),TIo=o("The model is set in evaluation mode by default using "),Yme=a("code"),MIo=o("model.eval()"),EIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=a("code"),CIo=o("model.train()"),wIo=l(),F(cv.$$.fragment),Jqe=l(),Ki=a("h2"),fv=a("a"),Zme=a("span"),F(R0.$$.fragment),AIo=l(),ege=a("span"),yIo=o("AutoModelForNextSentencePrediction"),Yqe=l(),Io=a("div"),F(P0.$$.fragment),LIo=l(),Zi=a("p"),xIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EO=a("a"),$Io=o("from_pretrained()"),kIo=o(" class method or the "),CO=a("a"),SIo=o("from_config()"),RIo=o(` class
method.`),PIo=l(),B0=a("p"),BIo=o("This class cannot be instantiated directly using "),oge=a("code"),IIo=o("__init__()"),qIo=o(" (throws an error)."),NIo=l(),mt=a("div"),F(I0.$$.fragment),jIo=l(),rge=a("p"),DIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GIo=l(),ed=a("p"),OIo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),VIo=o("not"),XIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),zIo=o("from_pretrained()"),WIo=o(" to load the model weights."),QIo=l(),F(mv.$$.fragment),HIo=l(),to=a("div"),F(q0.$$.fragment),UIo=l(),age=a("p"),JIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YIo=l(),ja=a("p"),KIo=o("The model class to instantiate is selected based on the "),nge=a("code"),ZIo=o("model_type"),eqo=o(` property of the config object (either
passed as an argument or loaded from `),sge=a("code"),oqo=o("pretrained_model_name_or_path"),rqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=a("code"),tqo=o("pretrained_model_name_or_path"),aqo=o(":"),nqo=l(),Zr=a("ul"),gv=a("li"),ige=a("strong"),sqo=o("bert"),lqo=o(" \u2014 "),AO=a("a"),iqo=o("BertForNextSentencePrediction"),dqo=o(" (BERT model)"),cqo=l(),hv=a("li"),dge=a("strong"),fqo=o("fnet"),mqo=o(" \u2014 "),yO=a("a"),gqo=o("FNetForNextSentencePrediction"),hqo=o(" (FNet model)"),pqo=l(),pv=a("li"),cge=a("strong"),uqo=o("megatron-bert"),_qo=o(" \u2014 "),LO=a("a"),bqo=o("MegatronBertForNextSentencePrediction"),vqo=o(" (MegatronBert model)"),Fqo=l(),uv=a("li"),fge=a("strong"),Tqo=o("mobilebert"),Mqo=o(" \u2014 "),xO=a("a"),Eqo=o("MobileBertForNextSentencePrediction"),Cqo=o(" (MobileBERT model)"),wqo=l(),_v=a("li"),mge=a("strong"),Aqo=o("qdqbert"),yqo=o(" \u2014 "),$O=a("a"),Lqo=o("QDQBertForNextSentencePrediction"),xqo=o(" (QDQBert model)"),$qo=l(),bv=a("p"),kqo=o("The model is set in evaluation mode by default using "),gge=a("code"),Sqo=o("model.eval()"),Rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),Pqo=o("model.train()"),Bqo=l(),F(vv.$$.fragment),Kqe=l(),od=a("h2"),Fv=a("a"),pge=a("span"),F(N0.$$.fragment),Iqo=l(),uge=a("span"),qqo=o("AutoModelForTokenClassification"),Zqe=l(),qo=a("div"),F(j0.$$.fragment),Nqo=l(),rd=a("p"),jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kO=a("a"),Dqo=o("from_pretrained()"),Gqo=o(" class method or the "),SO=a("a"),Oqo=o("from_config()"),Vqo=o(` class
method.`),Xqo=l(),D0=a("p"),zqo=o("This class cannot be instantiated directly using "),_ge=a("code"),Wqo=o("__init__()"),Qqo=o(" (throws an error)."),Hqo=l(),gt=a("div"),F(G0.$$.fragment),Uqo=l(),bge=a("p"),Jqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yqo=l(),td=a("p"),Kqo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),Zqo=o("not"),eNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=a("a"),oNo=o("from_pretrained()"),rNo=o(" to load the model weights."),tNo=l(),F(Tv.$$.fragment),aNo=l(),ao=a("div"),F(O0.$$.fragment),nNo=l(),Fge=a("p"),sNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lNo=l(),Da=a("p"),iNo=o("The model class to instantiate is selected based on the "),Tge=a("code"),dNo=o("model_type"),cNo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),gNo=o("pretrained_model_name_or_path"),hNo=o(":"),pNo=l(),U=a("ul"),Mv=a("li"),Cge=a("strong"),uNo=o("albert"),_No=o(" \u2014 "),PO=a("a"),bNo=o("AlbertForTokenClassification"),vNo=o(" (ALBERT model)"),FNo=l(),Ev=a("li"),wge=a("strong"),TNo=o("bert"),MNo=o(" \u2014 "),BO=a("a"),ENo=o("BertForTokenClassification"),CNo=o(" (BERT model)"),wNo=l(),Cv=a("li"),Age=a("strong"),ANo=o("big_bird"),yNo=o(" \u2014 "),IO=a("a"),LNo=o("BigBirdForTokenClassification"),xNo=o(" (BigBird model)"),$No=l(),wv=a("li"),yge=a("strong"),kNo=o("camembert"),SNo=o(" \u2014 "),qO=a("a"),RNo=o("CamembertForTokenClassification"),PNo=o(" (CamemBERT model)"),BNo=l(),Av=a("li"),Lge=a("strong"),INo=o("canine"),qNo=o(" \u2014 "),NO=a("a"),NNo=o("CanineForTokenClassification"),jNo=o(" (Canine model)"),DNo=l(),yv=a("li"),xge=a("strong"),GNo=o("convbert"),ONo=o(" \u2014 "),jO=a("a"),VNo=o("ConvBertForTokenClassification"),XNo=o(" (ConvBERT model)"),zNo=l(),Lv=a("li"),$ge=a("strong"),WNo=o("data2vec-text"),QNo=o(" \u2014 "),DO=a("a"),HNo=o("Data2VecTextForTokenClassification"),UNo=o(" (Data2VecText model)"),JNo=l(),xv=a("li"),kge=a("strong"),YNo=o("deberta"),KNo=o(" \u2014 "),GO=a("a"),ZNo=o("DebertaForTokenClassification"),ejo=o(" (DeBERTa model)"),ojo=l(),$v=a("li"),Sge=a("strong"),rjo=o("deberta-v2"),tjo=o(" \u2014 "),OO=a("a"),ajo=o("DebertaV2ForTokenClassification"),njo=o(" (DeBERTa-v2 model)"),sjo=l(),kv=a("li"),Rge=a("strong"),ljo=o("distilbert"),ijo=o(" \u2014 "),VO=a("a"),djo=o("DistilBertForTokenClassification"),cjo=o(" (DistilBERT model)"),fjo=l(),Sv=a("li"),Pge=a("strong"),mjo=o("electra"),gjo=o(" \u2014 "),XO=a("a"),hjo=o("ElectraForTokenClassification"),pjo=o(" (ELECTRA model)"),ujo=l(),Rv=a("li"),Bge=a("strong"),_jo=o("flaubert"),bjo=o(" \u2014 "),zO=a("a"),vjo=o("FlaubertForTokenClassification"),Fjo=o(" (FlauBERT model)"),Tjo=l(),Pv=a("li"),Ige=a("strong"),Mjo=o("fnet"),Ejo=o(" \u2014 "),WO=a("a"),Cjo=o("FNetForTokenClassification"),wjo=o(" (FNet model)"),Ajo=l(),Bv=a("li"),qge=a("strong"),yjo=o("funnel"),Ljo=o(" \u2014 "),QO=a("a"),xjo=o("FunnelForTokenClassification"),$jo=o(" (Funnel Transformer model)"),kjo=l(),Iv=a("li"),Nge=a("strong"),Sjo=o("gpt2"),Rjo=o(" \u2014 "),HO=a("a"),Pjo=o("GPT2ForTokenClassification"),Bjo=o(" (OpenAI GPT-2 model)"),Ijo=l(),qv=a("li"),jge=a("strong"),qjo=o("ibert"),Njo=o(" \u2014 "),UO=a("a"),jjo=o("IBertForTokenClassification"),Djo=o(" (I-BERT model)"),Gjo=l(),Nv=a("li"),Dge=a("strong"),Ojo=o("layoutlm"),Vjo=o(" \u2014 "),JO=a("a"),Xjo=o("LayoutLMForTokenClassification"),zjo=o(" (LayoutLM model)"),Wjo=l(),jv=a("li"),Gge=a("strong"),Qjo=o("layoutlmv2"),Hjo=o(" \u2014 "),YO=a("a"),Ujo=o("LayoutLMv2ForTokenClassification"),Jjo=o(" (LayoutLMv2 model)"),Yjo=l(),Dv=a("li"),Oge=a("strong"),Kjo=o("longformer"),Zjo=o(" \u2014 "),KO=a("a"),eDo=o("LongformerForTokenClassification"),oDo=o(" (Longformer model)"),rDo=l(),Gv=a("li"),Vge=a("strong"),tDo=o("megatron-bert"),aDo=o(" \u2014 "),ZO=a("a"),nDo=o("MegatronBertForTokenClassification"),sDo=o(" (MegatronBert model)"),lDo=l(),Ov=a("li"),Xge=a("strong"),iDo=o("mobilebert"),dDo=o(" \u2014 "),eV=a("a"),cDo=o("MobileBertForTokenClassification"),fDo=o(" (MobileBERT model)"),mDo=l(),Vv=a("li"),zge=a("strong"),gDo=o("mpnet"),hDo=o(" \u2014 "),oV=a("a"),pDo=o("MPNetForTokenClassification"),uDo=o(" (MPNet model)"),_Do=l(),Xv=a("li"),Wge=a("strong"),bDo=o("nystromformer"),vDo=o(" \u2014 "),rV=a("a"),FDo=o("NystromformerForTokenClassification"),TDo=o(" (Nystromformer model)"),MDo=l(),zv=a("li"),Qge=a("strong"),EDo=o("qdqbert"),CDo=o(" \u2014 "),tV=a("a"),wDo=o("QDQBertForTokenClassification"),ADo=o(" (QDQBert model)"),yDo=l(),Wv=a("li"),Hge=a("strong"),LDo=o("rembert"),xDo=o(" \u2014 "),aV=a("a"),$Do=o("RemBertForTokenClassification"),kDo=o(" (RemBERT model)"),SDo=l(),Qv=a("li"),Uge=a("strong"),RDo=o("roberta"),PDo=o(" \u2014 "),nV=a("a"),BDo=o("RobertaForTokenClassification"),IDo=o(" (RoBERTa model)"),qDo=l(),Hv=a("li"),Jge=a("strong"),NDo=o("roformer"),jDo=o(" \u2014 "),sV=a("a"),DDo=o("RoFormerForTokenClassification"),GDo=o(" (RoFormer model)"),ODo=l(),Uv=a("li"),Yge=a("strong"),VDo=o("squeezebert"),XDo=o(" \u2014 "),lV=a("a"),zDo=o("SqueezeBertForTokenClassification"),WDo=o(" (SqueezeBERT model)"),QDo=l(),Jv=a("li"),Kge=a("strong"),HDo=o("xlm"),UDo=o(" \u2014 "),iV=a("a"),JDo=o("XLMForTokenClassification"),YDo=o(" (XLM model)"),KDo=l(),Yv=a("li"),Zge=a("strong"),ZDo=o("xlm-roberta"),eGo=o(" \u2014 "),dV=a("a"),oGo=o("XLMRobertaForTokenClassification"),rGo=o(" (XLM-RoBERTa model)"),tGo=l(),Kv=a("li"),ehe=a("strong"),aGo=o("xlm-roberta-xl"),nGo=o(" \u2014 "),cV=a("a"),sGo=o("XLMRobertaXLForTokenClassification"),lGo=o(" (XLM-RoBERTa-XL model)"),iGo=l(),Zv=a("li"),ohe=a("strong"),dGo=o("xlnet"),cGo=o(" \u2014 "),fV=a("a"),fGo=o("XLNetForTokenClassification"),mGo=o(" (XLNet model)"),gGo=l(),eF=a("li"),rhe=a("strong"),hGo=o("yoso"),pGo=o(" \u2014 "),mV=a("a"),uGo=o("YosoForTokenClassification"),_Go=o(" (YOSO model)"),bGo=l(),oF=a("p"),vGo=o("The model is set in evaluation mode by default using "),the=a("code"),FGo=o("model.eval()"),TGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),MGo=o("model.train()"),EGo=l(),F(rF.$$.fragment),eNe=l(),ad=a("h2"),tF=a("a"),nhe=a("span"),F(V0.$$.fragment),CGo=l(),she=a("span"),wGo=o("AutoModelForQuestionAnswering"),oNe=l(),No=a("div"),F(X0.$$.fragment),AGo=l(),nd=a("p"),yGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gV=a("a"),LGo=o("from_pretrained()"),xGo=o(" class method or the "),hV=a("a"),$Go=o("from_config()"),kGo=o(` class
method.`),SGo=l(),z0=a("p"),RGo=o("This class cannot be instantiated directly using "),lhe=a("code"),PGo=o("__init__()"),BGo=o(" (throws an error)."),IGo=l(),ht=a("div"),F(W0.$$.fragment),qGo=l(),ihe=a("p"),NGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jGo=l(),sd=a("p"),DGo=o(`Note:
Loading a model from its configuration file does `),dhe=a("strong"),GGo=o("not"),OGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),VGo=o("from_pretrained()"),XGo=o(" to load the model weights."),zGo=l(),F(aF.$$.fragment),WGo=l(),no=a("div"),F(Q0.$$.fragment),QGo=l(),che=a("p"),HGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UGo=l(),Ga=a("p"),JGo=o("The model class to instantiate is selected based on the "),fhe=a("code"),YGo=o("model_type"),KGo=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),ZGo=o("pretrained_model_name_or_path"),eOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),oOo=o("pretrained_model_name_or_path"),rOo=o(":"),tOo=l(),V=a("ul"),nF=a("li"),hhe=a("strong"),aOo=o("albert"),nOo=o(" \u2014 "),uV=a("a"),sOo=o("AlbertForQuestionAnswering"),lOo=o(" (ALBERT model)"),iOo=l(),sF=a("li"),phe=a("strong"),dOo=o("bart"),cOo=o(" \u2014 "),_V=a("a"),fOo=o("BartForQuestionAnswering"),mOo=o(" (BART model)"),gOo=l(),lF=a("li"),uhe=a("strong"),hOo=o("bert"),pOo=o(" \u2014 "),bV=a("a"),uOo=o("BertForQuestionAnswering"),_Oo=o(" (BERT model)"),bOo=l(),iF=a("li"),_he=a("strong"),vOo=o("big_bird"),FOo=o(" \u2014 "),vV=a("a"),TOo=o("BigBirdForQuestionAnswering"),MOo=o(" (BigBird model)"),EOo=l(),dF=a("li"),bhe=a("strong"),COo=o("bigbird_pegasus"),wOo=o(" \u2014 "),FV=a("a"),AOo=o("BigBirdPegasusForQuestionAnswering"),yOo=o(" (BigBirdPegasus model)"),LOo=l(),cF=a("li"),vhe=a("strong"),xOo=o("camembert"),$Oo=o(" \u2014 "),TV=a("a"),kOo=o("CamembertForQuestionAnswering"),SOo=o(" (CamemBERT model)"),ROo=l(),fF=a("li"),Fhe=a("strong"),POo=o("canine"),BOo=o(" \u2014 "),MV=a("a"),IOo=o("CanineForQuestionAnswering"),qOo=o(" (Canine model)"),NOo=l(),mF=a("li"),The=a("strong"),jOo=o("convbert"),DOo=o(" \u2014 "),EV=a("a"),GOo=o("ConvBertForQuestionAnswering"),OOo=o(" (ConvBERT model)"),VOo=l(),gF=a("li"),Mhe=a("strong"),XOo=o("data2vec-text"),zOo=o(" \u2014 "),CV=a("a"),WOo=o("Data2VecTextForQuestionAnswering"),QOo=o(" (Data2VecText model)"),HOo=l(),hF=a("li"),Ehe=a("strong"),UOo=o("deberta"),JOo=o(" \u2014 "),wV=a("a"),YOo=o("DebertaForQuestionAnswering"),KOo=o(" (DeBERTa model)"),ZOo=l(),pF=a("li"),Che=a("strong"),eVo=o("deberta-v2"),oVo=o(" \u2014 "),AV=a("a"),rVo=o("DebertaV2ForQuestionAnswering"),tVo=o(" (DeBERTa-v2 model)"),aVo=l(),uF=a("li"),whe=a("strong"),nVo=o("distilbert"),sVo=o(" \u2014 "),yV=a("a"),lVo=o("DistilBertForQuestionAnswering"),iVo=o(" (DistilBERT model)"),dVo=l(),_F=a("li"),Ahe=a("strong"),cVo=o("electra"),fVo=o(" \u2014 "),LV=a("a"),mVo=o("ElectraForQuestionAnswering"),gVo=o(" (ELECTRA model)"),hVo=l(),bF=a("li"),yhe=a("strong"),pVo=o("flaubert"),uVo=o(" \u2014 "),xV=a("a"),_Vo=o("FlaubertForQuestionAnsweringSimple"),bVo=o(" (FlauBERT model)"),vVo=l(),vF=a("li"),Lhe=a("strong"),FVo=o("fnet"),TVo=o(" \u2014 "),$V=a("a"),MVo=o("FNetForQuestionAnswering"),EVo=o(" (FNet model)"),CVo=l(),FF=a("li"),xhe=a("strong"),wVo=o("funnel"),AVo=o(" \u2014 "),kV=a("a"),yVo=o("FunnelForQuestionAnswering"),LVo=o(" (Funnel Transformer model)"),xVo=l(),TF=a("li"),$he=a("strong"),$Vo=o("gptj"),kVo=o(" \u2014 "),SV=a("a"),SVo=o("GPTJForQuestionAnswering"),RVo=o(" (GPT-J model)"),PVo=l(),MF=a("li"),khe=a("strong"),BVo=o("ibert"),IVo=o(" \u2014 "),RV=a("a"),qVo=o("IBertForQuestionAnswering"),NVo=o(" (I-BERT model)"),jVo=l(),EF=a("li"),She=a("strong"),DVo=o("layoutlmv2"),GVo=o(" \u2014 "),PV=a("a"),OVo=o("LayoutLMv2ForQuestionAnswering"),VVo=o(" (LayoutLMv2 model)"),XVo=l(),CF=a("li"),Rhe=a("strong"),zVo=o("led"),WVo=o(" \u2014 "),BV=a("a"),QVo=o("LEDForQuestionAnswering"),HVo=o(" (LED model)"),UVo=l(),wF=a("li"),Phe=a("strong"),JVo=o("longformer"),YVo=o(" \u2014 "),IV=a("a"),KVo=o("LongformerForQuestionAnswering"),ZVo=o(" (Longformer model)"),eXo=l(),AF=a("li"),Bhe=a("strong"),oXo=o("lxmert"),rXo=o(" \u2014 "),qV=a("a"),tXo=o("LxmertForQuestionAnswering"),aXo=o(" (LXMERT model)"),nXo=l(),yF=a("li"),Ihe=a("strong"),sXo=o("mbart"),lXo=o(" \u2014 "),NV=a("a"),iXo=o("MBartForQuestionAnswering"),dXo=o(" (mBART model)"),cXo=l(),LF=a("li"),qhe=a("strong"),fXo=o("megatron-bert"),mXo=o(" \u2014 "),jV=a("a"),gXo=o("MegatronBertForQuestionAnswering"),hXo=o(" (MegatronBert model)"),pXo=l(),xF=a("li"),Nhe=a("strong"),uXo=o("mobilebert"),_Xo=o(" \u2014 "),DV=a("a"),bXo=o("MobileBertForQuestionAnswering"),vXo=o(" (MobileBERT model)"),FXo=l(),$F=a("li"),jhe=a("strong"),TXo=o("mpnet"),MXo=o(" \u2014 "),GV=a("a"),EXo=o("MPNetForQuestionAnswering"),CXo=o(" (MPNet model)"),wXo=l(),kF=a("li"),Dhe=a("strong"),AXo=o("nystromformer"),yXo=o(" \u2014 "),OV=a("a"),LXo=o("NystromformerForQuestionAnswering"),xXo=o(" (Nystromformer model)"),$Xo=l(),SF=a("li"),Ghe=a("strong"),kXo=o("qdqbert"),SXo=o(" \u2014 "),VV=a("a"),RXo=o("QDQBertForQuestionAnswering"),PXo=o(" (QDQBert model)"),BXo=l(),RF=a("li"),Ohe=a("strong"),IXo=o("reformer"),qXo=o(" \u2014 "),XV=a("a"),NXo=o("ReformerForQuestionAnswering"),jXo=o(" (Reformer model)"),DXo=l(),PF=a("li"),Vhe=a("strong"),GXo=o("rembert"),OXo=o(" \u2014 "),zV=a("a"),VXo=o("RemBertForQuestionAnswering"),XXo=o(" (RemBERT model)"),zXo=l(),BF=a("li"),Xhe=a("strong"),WXo=o("roberta"),QXo=o(" \u2014 "),WV=a("a"),HXo=o("RobertaForQuestionAnswering"),UXo=o(" (RoBERTa model)"),JXo=l(),IF=a("li"),zhe=a("strong"),YXo=o("roformer"),KXo=o(" \u2014 "),QV=a("a"),ZXo=o("RoFormerForQuestionAnswering"),ezo=o(" (RoFormer model)"),ozo=l(),qF=a("li"),Whe=a("strong"),rzo=o("splinter"),tzo=o(" \u2014 "),HV=a("a"),azo=o("SplinterForQuestionAnswering"),nzo=o(" (Splinter model)"),szo=l(),NF=a("li"),Qhe=a("strong"),lzo=o("squeezebert"),izo=o(" \u2014 "),UV=a("a"),dzo=o("SqueezeBertForQuestionAnswering"),czo=o(" (SqueezeBERT model)"),fzo=l(),jF=a("li"),Hhe=a("strong"),mzo=o("xlm"),gzo=o(" \u2014 "),JV=a("a"),hzo=o("XLMForQuestionAnsweringSimple"),pzo=o(" (XLM model)"),uzo=l(),DF=a("li"),Uhe=a("strong"),_zo=o("xlm-roberta"),bzo=o(" \u2014 "),YV=a("a"),vzo=o("XLMRobertaForQuestionAnswering"),Fzo=o(" (XLM-RoBERTa model)"),Tzo=l(),GF=a("li"),Jhe=a("strong"),Mzo=o("xlm-roberta-xl"),Ezo=o(" \u2014 "),KV=a("a"),Czo=o("XLMRobertaXLForQuestionAnswering"),wzo=o(" (XLM-RoBERTa-XL model)"),Azo=l(),OF=a("li"),Yhe=a("strong"),yzo=o("xlnet"),Lzo=o(" \u2014 "),ZV=a("a"),xzo=o("XLNetForQuestionAnsweringSimple"),$zo=o(" (XLNet model)"),kzo=l(),VF=a("li"),Khe=a("strong"),Szo=o("yoso"),Rzo=o(" \u2014 "),eX=a("a"),Pzo=o("YosoForQuestionAnswering"),Bzo=o(" (YOSO model)"),Izo=l(),XF=a("p"),qzo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),Nzo=o("model.eval()"),jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),Dzo=o("model.train()"),Gzo=l(),F(zF.$$.fragment),rNe=l(),ld=a("h2"),WF=a("a"),ope=a("span"),F(H0.$$.fragment),Ozo=l(),rpe=a("span"),Vzo=o("AutoModelForTableQuestionAnswering"),tNe=l(),jo=a("div"),F(U0.$$.fragment),Xzo=l(),id=a("p"),zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oX=a("a"),Wzo=o("from_pretrained()"),Qzo=o(" class method or the "),rX=a("a"),Hzo=o("from_config()"),Uzo=o(` class
method.`),Jzo=l(),J0=a("p"),Yzo=o("This class cannot be instantiated directly using "),tpe=a("code"),Kzo=o("__init__()"),Zzo=o(" (throws an error)."),eWo=l(),pt=a("div"),F(Y0.$$.fragment),oWo=l(),ape=a("p"),rWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tWo=l(),dd=a("p"),aWo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),nWo=o("not"),sWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),lWo=o("from_pretrained()"),iWo=o(" to load the model weights."),dWo=l(),F(QF.$$.fragment),cWo=l(),so=a("div"),F(K0.$$.fragment),fWo=l(),spe=a("p"),mWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gWo=l(),Oa=a("p"),hWo=o("The model class to instantiate is selected based on the "),lpe=a("code"),pWo=o("model_type"),uWo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),_Wo=o("pretrained_model_name_or_path"),bWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),vWo=o("pretrained_model_name_or_path"),FWo=o(":"),TWo=l(),cpe=a("ul"),HF=a("li"),fpe=a("strong"),MWo=o("tapas"),EWo=o(" \u2014 "),aX=a("a"),CWo=o("TapasForQuestionAnswering"),wWo=o(" (TAPAS model)"),AWo=l(),UF=a("p"),yWo=o("The model is set in evaluation mode by default using "),mpe=a("code"),LWo=o("model.eval()"),xWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),$Wo=o("model.train()"),kWo=l(),F(JF.$$.fragment),aNe=l(),cd=a("h2"),YF=a("a"),hpe=a("span"),F(Z0.$$.fragment),SWo=l(),ppe=a("span"),RWo=o("AutoModelForImageClassification"),nNe=l(),Do=a("div"),F(ey.$$.fragment),PWo=l(),fd=a("p"),BWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nX=a("a"),IWo=o("from_pretrained()"),qWo=o(" class method or the "),sX=a("a"),NWo=o("from_config()"),jWo=o(` class
method.`),DWo=l(),oy=a("p"),GWo=o("This class cannot be instantiated directly using "),upe=a("code"),OWo=o("__init__()"),VWo=o(" (throws an error)."),XWo=l(),ut=a("div"),F(ry.$$.fragment),zWo=l(),_pe=a("p"),WWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QWo=l(),md=a("p"),HWo=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),UWo=o("not"),JWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),YWo=o("from_pretrained()"),KWo=o(" to load the model weights."),ZWo=l(),F(KF.$$.fragment),eQo=l(),lo=a("div"),F(ty.$$.fragment),oQo=l(),vpe=a("p"),rQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tQo=l(),Va=a("p"),aQo=o("The model class to instantiate is selected based on the "),Fpe=a("code"),nQo=o("model_type"),sQo=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(":"),fQo=l(),Fe=a("ul"),ZF=a("li"),Epe=a("strong"),mQo=o("beit"),gQo=o(" \u2014 "),iX=a("a"),hQo=o("BeitForImageClassification"),pQo=o(" (BEiT model)"),uQo=l(),e6=a("li"),Cpe=a("strong"),_Qo=o("convnext"),bQo=o(" \u2014 "),dX=a("a"),vQo=o("ConvNextForImageClassification"),FQo=o(" (ConvNext model)"),TQo=l(),o6=a("li"),wpe=a("strong"),MQo=o("data2vec-vision"),EQo=o(" \u2014 "),cX=a("a"),CQo=o("Data2VecVisionForImageClassification"),wQo=o(" (Data2VecVision model)"),AQo=l(),Ds=a("li"),Ape=a("strong"),yQo=o("deit"),LQo=o(" \u2014 "),fX=a("a"),xQo=o("DeiTForImageClassification"),$Qo=o(" or "),mX=a("a"),kQo=o("DeiTForImageClassificationWithTeacher"),SQo=o(" (DeiT model)"),RQo=l(),r6=a("li"),ype=a("strong"),PQo=o("imagegpt"),BQo=o(" \u2014 "),gX=a("a"),IQo=o("ImageGPTForImageClassification"),qQo=o(" (ImageGPT model)"),NQo=l(),_t=a("li"),Lpe=a("strong"),jQo=o("perceiver"),DQo=o(" \u2014 "),hX=a("a"),GQo=o("PerceiverForImageClassificationLearned"),OQo=o(" or "),pX=a("a"),VQo=o("PerceiverForImageClassificationFourier"),XQo=o(" or "),uX=a("a"),zQo=o("PerceiverForImageClassificationConvProcessing"),WQo=o(" (Perceiver model)"),QQo=l(),t6=a("li"),xpe=a("strong"),HQo=o("poolformer"),UQo=o(" \u2014 "),_X=a("a"),JQo=o("PoolFormerForImageClassification"),YQo=o(" (PoolFormer model)"),KQo=l(),a6=a("li"),$pe=a("strong"),ZQo=o("regnet"),eHo=o(" \u2014 "),bX=a("a"),oHo=o("RegNetForImageClassification"),rHo=o(" (RegNet model)"),tHo=l(),n6=a("li"),kpe=a("strong"),aHo=o("resnet"),nHo=o(" \u2014 "),vX=a("a"),sHo=o("ResNetForImageClassification"),lHo=o(" (ResNet model)"),iHo=l(),s6=a("li"),Spe=a("strong"),dHo=o("segformer"),cHo=o(" \u2014 "),FX=a("a"),fHo=o("SegformerForImageClassification"),mHo=o(" (SegFormer model)"),gHo=l(),l6=a("li"),Rpe=a("strong"),hHo=o("swin"),pHo=o(" \u2014 "),TX=a("a"),uHo=o("SwinForImageClassification"),_Ho=o(" (Swin model)"),bHo=l(),i6=a("li"),Ppe=a("strong"),vHo=o("van"),FHo=o(" \u2014 "),MX=a("a"),THo=o("VanForImageClassification"),MHo=o(" (VAN model)"),EHo=l(),d6=a("li"),Bpe=a("strong"),CHo=o("vit"),wHo=o(" \u2014 "),EX=a("a"),AHo=o("ViTForImageClassification"),yHo=o(" (ViT model)"),LHo=l(),c6=a("p"),xHo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),$Ho=o("model.eval()"),kHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),SHo=o("model.train()"),RHo=l(),F(f6.$$.fragment),sNe=l(),gd=a("h2"),m6=a("a"),Npe=a("span"),F(ay.$$.fragment),PHo=l(),jpe=a("span"),BHo=o("AutoModelForVision2Seq"),lNe=l(),Go=a("div"),F(ny.$$.fragment),IHo=l(),hd=a("p"),qHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CX=a("a"),NHo=o("from_pretrained()"),jHo=o(" class method or the "),wX=a("a"),DHo=o("from_config()"),GHo=o(` class
method.`),OHo=l(),sy=a("p"),VHo=o("This class cannot be instantiated directly using "),Dpe=a("code"),XHo=o("__init__()"),zHo=o(" (throws an error)."),WHo=l(),bt=a("div"),F(ly.$$.fragment),QHo=l(),Gpe=a("p"),HHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UHo=l(),pd=a("p"),JHo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),YHo=o("not"),KHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),ZHo=o("from_pretrained()"),eUo=o(" to load the model weights."),oUo=l(),F(g6.$$.fragment),rUo=l(),io=a("div"),F(iy.$$.fragment),tUo=l(),Vpe=a("p"),aUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nUo=l(),Xa=a("p"),sUo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),lUo=o("model_type"),iUo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),fUo=o("pretrained_model_name_or_path"),mUo=o(":"),gUo=l(),Qpe=a("ul"),h6=a("li"),Hpe=a("strong"),hUo=o("vision-encoder-decoder"),pUo=o(" \u2014 "),yX=a("a"),uUo=o("VisionEncoderDecoderModel"),_Uo=o(" (Vision Encoder decoder model)"),bUo=l(),p6=a("p"),vUo=o("The model is set in evaluation mode by default using "),Upe=a("code"),FUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),MUo=o("model.train()"),EUo=l(),F(u6.$$.fragment),iNe=l(),ud=a("h2"),_6=a("a"),Ype=a("span"),F(dy.$$.fragment),CUo=l(),Kpe=a("span"),wUo=o("AutoModelForVisualQuestionAnswering"),dNe=l(),Oo=a("div"),F(cy.$$.fragment),AUo=l(),_d=a("p"),yUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),LX=a("a"),LUo=o("from_pretrained()"),xUo=o(" class method or the "),xX=a("a"),$Uo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),fy=a("p"),RUo=o("This class cannot be instantiated directly using "),Zpe=a("code"),PUo=o("__init__()"),BUo=o(" (throws an error)."),IUo=l(),vt=a("div"),F(my.$$.fragment),qUo=l(),eue=a("p"),NUo=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),jUo=l(),bd=a("p"),DUo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),VUo=o("from_pretrained()"),XUo=o(" to load the model weights."),zUo=l(),F(b6.$$.fragment),WUo=l(),co=a("div"),F(gy.$$.fragment),QUo=l(),rue=a("p"),HUo=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),UUo=l(),za=a("p"),JUo=o("The model class to instantiate is selected based on the "),tue=a("code"),YUo=o("model_type"),KUo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(":"),tJo=l(),sue=a("ul"),v6=a("li"),lue=a("strong"),aJo=o("vilt"),nJo=o(" \u2014 "),kX=a("a"),sJo=o("ViltForQuestionAnswering"),lJo=o(" (ViLT model)"),iJo=l(),F6=a("p"),dJo=o("The model is set in evaluation mode by default using "),iue=a("code"),cJo=o("model.eval()"),fJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=a("code"),mJo=o("model.train()"),gJo=l(),F(T6.$$.fragment),cNe=l(),vd=a("h2"),M6=a("a"),cue=a("span"),F(hy.$$.fragment),hJo=l(),fue=a("span"),pJo=o("AutoModelForAudioClassification"),fNe=l(),Vo=a("div"),F(py.$$.fragment),uJo=l(),Fd=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SX=a("a"),bJo=o("from_pretrained()"),vJo=o(" class method or the "),RX=a("a"),FJo=o("from_config()"),TJo=o(` class
method.`),MJo=l(),uy=a("p"),EJo=o("This class cannot be instantiated directly using "),mue=a("code"),CJo=o("__init__()"),wJo=o(" (throws an error)."),AJo=l(),Ft=a("div"),F(_y.$$.fragment),yJo=l(),gue=a("p"),LJo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),xJo=l(),Td=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),kJo=o("not"),SJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),RJo=o("from_pretrained()"),PJo=o(" to load the model weights."),BJo=l(),F(E6.$$.fragment),IJo=l(),fo=a("div"),F(by.$$.fragment),qJo=l(),pue=a("p"),NJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jJo=l(),Wa=a("p"),DJo=o("The model class to instantiate is selected based on the "),uue=a("code"),GJo=o("model_type"),OJo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),VJo=o("pretrained_model_name_or_path"),XJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),zJo=o("pretrained_model_name_or_path"),WJo=o(":"),QJo=l(),ke=a("ul"),C6=a("li"),vue=a("strong"),HJo=o("data2vec-audio"),UJo=o(" \u2014 "),BX=a("a"),JJo=o("Data2VecAudioForSequenceClassification"),YJo=o(" (Data2VecAudio model)"),KJo=l(),w6=a("li"),Fue=a("strong"),ZJo=o("hubert"),eYo=o(" \u2014 "),IX=a("a"),oYo=o("HubertForSequenceClassification"),rYo=o(" (Hubert model)"),tYo=l(),A6=a("li"),Tue=a("strong"),aYo=o("sew"),nYo=o(" \u2014 "),qX=a("a"),sYo=o("SEWForSequenceClassification"),lYo=o(" (SEW model)"),iYo=l(),y6=a("li"),Mue=a("strong"),dYo=o("sew-d"),cYo=o(" \u2014 "),NX=a("a"),fYo=o("SEWDForSequenceClassification"),mYo=o(" (SEW-D model)"),gYo=l(),L6=a("li"),Eue=a("strong"),hYo=o("unispeech"),pYo=o(" \u2014 "),jX=a("a"),uYo=o("UniSpeechForSequenceClassification"),_Yo=o(" (UniSpeech model)"),bYo=l(),x6=a("li"),Cue=a("strong"),vYo=o("unispeech-sat"),FYo=o(" \u2014 "),DX=a("a"),TYo=o("UniSpeechSatForSequenceClassification"),MYo=o(" (UniSpeechSat model)"),EYo=l(),$6=a("li"),wue=a("strong"),CYo=o("wav2vec2"),wYo=o(" \u2014 "),GX=a("a"),AYo=o("Wav2Vec2ForSequenceClassification"),yYo=o(" (Wav2Vec2 model)"),LYo=l(),k6=a("li"),Aue=a("strong"),xYo=o("wav2vec2-conformer"),$Yo=o(" \u2014 "),OX=a("a"),kYo=o("Wav2Vec2ConformerForSequenceClassification"),SYo=o(" (Wav2Vec2-Conformer model)"),RYo=l(),S6=a("li"),yue=a("strong"),PYo=o("wavlm"),BYo=o(" \u2014 "),VX=a("a"),IYo=o("WavLMForSequenceClassification"),qYo=o(" (WavLM model)"),NYo=l(),R6=a("p"),jYo=o("The model is set in evaluation mode by default using "),Lue=a("code"),DYo=o("model.eval()"),GYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),OYo=o("model.train()"),VYo=l(),F(P6.$$.fragment),mNe=l(),Md=a("h2"),B6=a("a"),$ue=a("span"),F(vy.$$.fragment),XYo=l(),kue=a("span"),zYo=o("AutoModelForAudioFrameClassification"),gNe=l(),Xo=a("div"),F(Fy.$$.fragment),WYo=l(),Ed=a("p"),QYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XX=a("a"),HYo=o("from_pretrained()"),UYo=o(" class method or the "),zX=a("a"),JYo=o("from_config()"),YYo=o(` class
method.`),KYo=l(),Ty=a("p"),ZYo=o("This class cannot be instantiated directly using "),Sue=a("code"),eKo=o("__init__()"),oKo=o(" (throws an error)."),rKo=l(),Tt=a("div"),F(My.$$.fragment),tKo=l(),Rue=a("p"),aKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nKo=l(),Cd=a("p"),sKo=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),lKo=o("not"),iKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),dKo=o("from_pretrained()"),cKo=o(" to load the model weights."),fKo=l(),F(I6.$$.fragment),mKo=l(),mo=a("div"),F(Ey.$$.fragment),gKo=l(),Bue=a("p"),hKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pKo=l(),Qa=a("p"),uKo=o("The model class to instantiate is selected based on the "),Iue=a("code"),_Ko=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(":"),EKo=l(),et=a("ul"),q6=a("li"),jue=a("strong"),CKo=o("data2vec-audio"),wKo=o(" \u2014 "),QX=a("a"),AKo=o("Data2VecAudioForAudioFrameClassification"),yKo=o(" (Data2VecAudio model)"),LKo=l(),N6=a("li"),Due=a("strong"),xKo=o("unispeech-sat"),$Ko=o(" \u2014 "),HX=a("a"),kKo=o("UniSpeechSatForAudioFrameClassification"),SKo=o(" (UniSpeechSat model)"),RKo=l(),j6=a("li"),Gue=a("strong"),PKo=o("wav2vec2"),BKo=o(" \u2014 "),UX=a("a"),IKo=o("Wav2Vec2ForAudioFrameClassification"),qKo=o(" (Wav2Vec2 model)"),NKo=l(),D6=a("li"),Oue=a("strong"),jKo=o("wav2vec2-conformer"),DKo=o(" \u2014 "),JX=a("a"),GKo=o("Wav2Vec2ConformerForAudioFrameClassification"),OKo=o(" (Wav2Vec2-Conformer model)"),VKo=l(),G6=a("li"),Vue=a("strong"),XKo=o("wavlm"),zKo=o(" \u2014 "),YX=a("a"),WKo=o("WavLMForAudioFrameClassification"),QKo=o(" (WavLM model)"),HKo=l(),O6=a("p"),UKo=o("The model is set in evaluation mode by default using "),Xue=a("code"),JKo=o("model.eval()"),YKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),KKo=o("model.train()"),ZKo=l(),F(V6.$$.fragment),hNe=l(),wd=a("h2"),X6=a("a"),Wue=a("span"),F(Cy.$$.fragment),eZo=l(),Que=a("span"),oZo=o("AutoModelForCTC"),pNe=l(),zo=a("div"),F(wy.$$.fragment),rZo=l(),Ad=a("p"),tZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KX=a("a"),aZo=o("from_pretrained()"),nZo=o(" class method or the "),ZX=a("a"),sZo=o("from_config()"),lZo=o(` class
method.`),iZo=l(),Ay=a("p"),dZo=o("This class cannot be instantiated directly using "),Hue=a("code"),cZo=o("__init__()"),fZo=o(" (throws an error)."),mZo=l(),Mt=a("div"),F(yy.$$.fragment),gZo=l(),Uue=a("p"),hZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pZo=l(),yd=a("p"),uZo=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),_Zo=o("not"),bZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),vZo=o("from_pretrained()"),FZo=o(" to load the model weights."),TZo=l(),F(z6.$$.fragment),MZo=l(),go=a("div"),F(Ly.$$.fragment),EZo=l(),Yue=a("p"),CZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wZo=l(),Ha=a("p"),AZo=o("The model class to instantiate is selected based on the "),Kue=a("code"),yZo=o("model_type"),LZo=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),xZo=o("pretrained_model_name_or_path"),$Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),kZo=o("pretrained_model_name_or_path"),SZo=o(":"),RZo=l(),Se=a("ul"),W6=a("li"),o_e=a("strong"),PZo=o("data2vec-audio"),BZo=o(" \u2014 "),oz=a("a"),IZo=o("Data2VecAudioForCTC"),qZo=o(" (Data2VecAudio model)"),NZo=l(),Q6=a("li"),r_e=a("strong"),jZo=o("hubert"),DZo=o(" \u2014 "),rz=a("a"),GZo=o("HubertForCTC"),OZo=o(" (Hubert model)"),VZo=l(),H6=a("li"),t_e=a("strong"),XZo=o("sew"),zZo=o(" \u2014 "),tz=a("a"),WZo=o("SEWForCTC"),QZo=o(" (SEW model)"),HZo=l(),U6=a("li"),a_e=a("strong"),UZo=o("sew-d"),JZo=o(" \u2014 "),az=a("a"),YZo=o("SEWDForCTC"),KZo=o(" (SEW-D model)"),ZZo=l(),J6=a("li"),n_e=a("strong"),eer=o("unispeech"),oer=o(" \u2014 "),nz=a("a"),rer=o("UniSpeechForCTC"),ter=o(" (UniSpeech model)"),aer=l(),Y6=a("li"),s_e=a("strong"),ner=o("unispeech-sat"),ser=o(" \u2014 "),sz=a("a"),ler=o("UniSpeechSatForCTC"),ier=o(" (UniSpeechSat model)"),der=l(),K6=a("li"),l_e=a("strong"),cer=o("wav2vec2"),fer=o(" \u2014 "),lz=a("a"),mer=o("Wav2Vec2ForCTC"),ger=o(" (Wav2Vec2 model)"),her=l(),Z6=a("li"),i_e=a("strong"),per=o("wav2vec2-conformer"),uer=o(" \u2014 "),iz=a("a"),_er=o("Wav2Vec2ConformerForCTC"),ber=o(" (Wav2Vec2-Conformer model)"),ver=l(),eT=a("li"),d_e=a("strong"),Fer=o("wavlm"),Ter=o(" \u2014 "),dz=a("a"),Mer=o("WavLMForCTC"),Eer=o(" (WavLM model)"),Cer=l(),oT=a("p"),wer=o("The model is set in evaluation mode by default using "),c_e=a("code"),Aer=o("model.eval()"),yer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),Ler=o("model.train()"),xer=l(),F(rT.$$.fragment),uNe=l(),Ld=a("h2"),tT=a("a"),m_e=a("span"),F(xy.$$.fragment),$er=l(),g_e=a("span"),ker=o("AutoModelForSpeechSeq2Seq"),_Ne=l(),Wo=a("div"),F($y.$$.fragment),Ser=l(),xd=a("p"),Rer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cz=a("a"),Per=o("from_pretrained()"),Ber=o(" class method or the "),fz=a("a"),Ier=o("from_config()"),qer=o(` class
method.`),Ner=l(),ky=a("p"),jer=o("This class cannot be instantiated directly using "),h_e=a("code"),Der=o("__init__()"),Ger=o(" (throws an error)."),Oer=l(),Et=a("div"),F(Sy.$$.fragment),Ver=l(),p_e=a("p"),Xer=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zer=l(),$d=a("p"),Wer=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),Qer=o("not"),Her=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),Uer=o("from_pretrained()"),Jer=o(" to load the model weights."),Yer=l(),F(aT.$$.fragment),Ker=l(),ho=a("div"),F(Ry.$$.fragment),Zer=l(),__e=a("p"),eor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oor=l(),Ua=a("p"),ror=o("The model class to instantiate is selected based on the "),b_e=a("code"),tor=o("model_type"),aor=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),nor=o("pretrained_model_name_or_path"),sor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),lor=o("pretrained_model_name_or_path"),ior=o(":"),dor=l(),Py=a("ul"),nT=a("li"),T_e=a("strong"),cor=o("speech-encoder-decoder"),mor=o(" \u2014 "),gz=a("a"),gor=o("SpeechEncoderDecoderModel"),hor=o(" (Speech Encoder decoder model)"),por=l(),sT=a("li"),M_e=a("strong"),uor=o("speech_to_text"),_or=o(" \u2014 "),hz=a("a"),bor=o("Speech2TextForConditionalGeneration"),vor=o(" (Speech2Text model)"),For=l(),lT=a("p"),Tor=o("The model is set in evaluation mode by default using "),E_e=a("code"),Mor=o("model.eval()"),Eor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),Cor=o("model.train()"),wor=l(),F(iT.$$.fragment),bNe=l(),kd=a("h2"),dT=a("a"),w_e=a("span"),F(By.$$.fragment),Aor=l(),A_e=a("span"),yor=o("AutoModelForAudioXVector"),vNe=l(),Qo=a("div"),F(Iy.$$.fragment),Lor=l(),Sd=a("p"),xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pz=a("a"),$or=o("from_pretrained()"),kor=o(" class method or the "),uz=a("a"),Sor=o("from_config()"),Ror=o(` class
method.`),Por=l(),qy=a("p"),Bor=o("This class cannot be instantiated directly using "),y_e=a("code"),Ior=o("__init__()"),qor=o(" (throws an error)."),Nor=l(),Ct=a("div"),F(Ny.$$.fragment),jor=l(),L_e=a("p"),Dor=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Gor=l(),Rd=a("p"),Oor=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),Vor=o("not"),Xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),zor=o("from_pretrained()"),Wor=o(" to load the model weights."),Qor=l(),F(cT.$$.fragment),Hor=l(),po=a("div"),F(jy.$$.fragment),Uor=l(),$_e=a("p"),Jor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Yor=l(),Ja=a("p"),Kor=o("The model class to instantiate is selected based on the "),k_e=a("code"),Zor=o("model_type"),err=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(":"),nrr=l(),ot=a("ul"),fT=a("li"),P_e=a("strong"),srr=o("data2vec-audio"),lrr=o(" \u2014 "),bz=a("a"),irr=o("Data2VecAudioForXVector"),drr=o(" (Data2VecAudio model)"),crr=l(),mT=a("li"),B_e=a("strong"),frr=o("unispeech-sat"),mrr=o(" \u2014 "),vz=a("a"),grr=o("UniSpeechSatForXVector"),hrr=o(" (UniSpeechSat model)"),prr=l(),gT=a("li"),I_e=a("strong"),urr=o("wav2vec2"),_rr=o(" \u2014 "),Fz=a("a"),brr=o("Wav2Vec2ForXVector"),vrr=o(" (Wav2Vec2 model)"),Frr=l(),hT=a("li"),q_e=a("strong"),Trr=o("wav2vec2-conformer"),Mrr=o(" \u2014 "),Tz=a("a"),Err=o("Wav2Vec2ConformerForXVector"),Crr=o(" (Wav2Vec2-Conformer model)"),wrr=l(),pT=a("li"),N_e=a("strong"),Arr=o("wavlm"),yrr=o(" \u2014 "),Mz=a("a"),Lrr=o("WavLMForXVector"),xrr=o(" (WavLM model)"),$rr=l(),uT=a("p"),krr=o("The model is set in evaluation mode by default using "),j_e=a("code"),Srr=o("model.eval()"),Rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),Prr=o("model.train()"),Brr=l(),F(_T.$$.fragment),FNe=l(),Pd=a("h2"),bT=a("a"),G_e=a("span"),F(Dy.$$.fragment),Irr=l(),O_e=a("span"),qrr=o("AutoModelForMaskedImageModeling"),TNe=l(),Ho=a("div"),F(Gy.$$.fragment),Nrr=l(),Bd=a("p"),jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ez=a("a"),Drr=o("from_pretrained()"),Grr=o(" class method or the "),Cz=a("a"),Orr=o("from_config()"),Vrr=o(` class
method.`),Xrr=l(),Oy=a("p"),zrr=o("This class cannot be instantiated directly using "),V_e=a("code"),Wrr=o("__init__()"),Qrr=o(" (throws an error)."),Hrr=l(),wt=a("div"),F(Vy.$$.fragment),Urr=l(),X_e=a("p"),Jrr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Yrr=l(),Id=a("p"),Krr=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),Zrr=o("not"),etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),otr=o("from_pretrained()"),rtr=o(" to load the model weights."),ttr=l(),F(vT.$$.fragment),atr=l(),uo=a("div"),F(Xy.$$.fragment),ntr=l(),W_e=a("p"),str=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ltr=l(),Ya=a("p"),itr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),dtr=o("model_type"),ctr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),gtr=o("pretrained_model_name_or_path"),htr=o(":"),ptr=l(),qd=a("ul"),FT=a("li"),J_e=a("strong"),utr=o("deit"),_tr=o(" \u2014 "),Az=a("a"),btr=o("DeiTForMaskedImageModeling"),vtr=o(" (DeiT model)"),Ftr=l(),TT=a("li"),Y_e=a("strong"),Ttr=o("swin"),Mtr=o(" \u2014 "),yz=a("a"),Etr=o("SwinForMaskedImageModeling"),Ctr=o(" (Swin model)"),wtr=l(),MT=a("li"),K_e=a("strong"),Atr=o("vit"),ytr=o(" \u2014 "),Lz=a("a"),Ltr=o("ViTForMaskedImageModeling"),xtr=o(" (ViT model)"),$tr=l(),ET=a("p"),ktr=o("The model is set in evaluation mode by default using "),Z_e=a("code"),Str=o("model.eval()"),Rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),Ptr=o("model.train()"),Btr=l(),F(CT.$$.fragment),MNe=l(),Nd=a("h2"),wT=a("a"),o2e=a("span"),F(zy.$$.fragment),Itr=l(),r2e=a("span"),qtr=o("AutoModelForObjectDetection"),ENe=l(),Uo=a("div"),F(Wy.$$.fragment),Ntr=l(),jd=a("p"),jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),xz=a("a"),Dtr=o("from_pretrained()"),Gtr=o(" class method or the "),$z=a("a"),Otr=o("from_config()"),Vtr=o(` class
method.`),Xtr=l(),Qy=a("p"),ztr=o("This class cannot be instantiated directly using "),t2e=a("code"),Wtr=o("__init__()"),Qtr=o(" (throws an error)."),Htr=l(),At=a("div"),F(Hy.$$.fragment),Utr=l(),a2e=a("p"),Jtr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ytr=l(),Dd=a("p"),Ktr=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),Ztr=o("not"),ear=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),oar=o("from_pretrained()"),rar=o(" to load the model weights."),tar=l(),F(AT.$$.fragment),aar=l(),_o=a("div"),F(Uy.$$.fragment),nar=l(),s2e=a("p"),sar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lar=l(),Ka=a("p"),iar=o("The model class to instantiate is selected based on the "),l2e=a("code"),dar=o("model_type"),car=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),far=o("pretrained_model_name_or_path"),mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),gar=o("pretrained_model_name_or_path"),har=o(":"),par=l(),Jy=a("ul"),yT=a("li"),c2e=a("strong"),uar=o("detr"),_ar=o(" \u2014 "),Sz=a("a"),bar=o("DetrForObjectDetection"),Far=o(" (DETR model)"),Tar=l(),LT=a("li"),f2e=a("strong"),Mar=o("yolos"),Ear=o(" \u2014 "),Rz=a("a"),Car=o("YolosForObjectDetection"),war=o(" (YOLOS model)"),Aar=l(),xT=a("p"),yar=o("The model is set in evaluation mode by default using "),m2e=a("code"),Lar=o("model.eval()"),xar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=a("code"),$ar=o("model.train()"),kar=l(),F($T.$$.fragment),CNe=l(),Gd=a("h2"),kT=a("a"),h2e=a("span"),F(Yy.$$.fragment),Sar=l(),p2e=a("span"),Rar=o("AutoModelForImageSegmentation"),wNe=l(),Jo=a("div"),F(Ky.$$.fragment),Par=l(),Od=a("p"),Bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Pz=a("a"),Iar=o("from_pretrained()"),qar=o(" class method or the "),Bz=a("a"),Nar=o("from_config()"),jar=o(` class
method.`),Dar=l(),Zy=a("p"),Gar=o("This class cannot be instantiated directly using "),u2e=a("code"),Oar=o("__init__()"),Var=o(" (throws an error)."),Xar=l(),yt=a("div"),F(eL.$$.fragment),zar=l(),_2e=a("p"),War=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qar=l(),Vd=a("p"),Har=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),Uar=o("not"),Jar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Yar=o("from_pretrained()"),Kar=o(" to load the model weights."),Zar=l(),F(ST.$$.fragment),enr=l(),bo=a("div"),F(oL.$$.fragment),onr=l(),v2e=a("p"),rnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tnr=l(),Za=a("p"),anr=o("The model class to instantiate is selected based on the "),F2e=a("code"),nnr=o("model_type"),snr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(":"),fnr=l(),E2e=a("ul"),RT=a("li"),C2e=a("strong"),mnr=o("detr"),gnr=o(" \u2014 "),qz=a("a"),hnr=o("DetrForSegmentation"),pnr=o(" (DETR model)"),unr=l(),PT=a("p"),_nr=o("The model is set in evaluation mode by default using "),w2e=a("code"),bnr=o("model.eval()"),vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=a("code"),Fnr=o("model.train()"),Tnr=l(),F(BT.$$.fragment),ANe=l(),Xd=a("h2"),IT=a("a"),y2e=a("span"),F(rL.$$.fragment),Mnr=l(),L2e=a("span"),Enr=o("AutoModelForSemanticSegmentation"),yNe=l(),Yo=a("div"),F(tL.$$.fragment),Cnr=l(),zd=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nz=a("a"),Anr=o("from_pretrained()"),ynr=o(" class method or the "),jz=a("a"),Lnr=o("from_config()"),xnr=o(` class
method.`),$nr=l(),aL=a("p"),knr=o("This class cannot be instantiated directly using "),x2e=a("code"),Snr=o("__init__()"),Rnr=o(" (throws an error)."),Pnr=l(),Lt=a("div"),F(nL.$$.fragment),Bnr=l(),$2e=a("p"),Inr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qnr=l(),Wd=a("p"),Nnr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),F(qT.$$.fragment),Xnr=l(),vo=a("div"),F(sL.$$.fragment),znr=l(),S2e=a("p"),Wnr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qnr=l(),en=a("p"),Hnr=o("The model class to instantiate is selected based on the "),R2e=a("code"),Unr=o("model_type"),Jnr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(":"),osr=l(),on=a("ul"),NT=a("li"),I2e=a("strong"),rsr=o("beit"),tsr=o(" \u2014 "),Gz=a("a"),asr=o("BeitForSemanticSegmentation"),nsr=o(" (BEiT model)"),ssr=l(),jT=a("li"),q2e=a("strong"),lsr=o("data2vec-vision"),isr=o(" \u2014 "),Oz=a("a"),dsr=o("Data2VecVisionForSemanticSegmentation"),csr=o(" (Data2VecVision model)"),fsr=l(),DT=a("li"),N2e=a("strong"),msr=o("dpt"),gsr=o(" \u2014 "),Vz=a("a"),hsr=o("DPTForSemanticSegmentation"),psr=o(" (DPT model)"),usr=l(),GT=a("li"),j2e=a("strong"),_sr=o("segformer"),bsr=o(" \u2014 "),Xz=a("a"),vsr=o("SegformerForSemanticSegmentation"),Fsr=o(" (SegFormer model)"),Tsr=l(),OT=a("p"),Msr=o("The model is set in evaluation mode by default using "),D2e=a("code"),Esr=o("model.eval()"),Csr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=a("code"),wsr=o("model.train()"),Asr=l(),F(VT.$$.fragment),LNe=l(),Qd=a("h2"),XT=a("a"),O2e=a("span"),F(lL.$$.fragment),ysr=l(),V2e=a("span"),Lsr=o("AutoModelForInstanceSegmentation"),xNe=l(),Ko=a("div"),F(iL.$$.fragment),xsr=l(),Hd=a("p"),$sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zz=a("a"),ksr=o("from_pretrained()"),Ssr=o(" class method or the "),Wz=a("a"),Rsr=o("from_config()"),Psr=o(` class
method.`),Bsr=l(),dL=a("p"),Isr=o("This class cannot be instantiated directly using "),X2e=a("code"),qsr=o("__init__()"),Nsr=o(" (throws an error)."),jsr=l(),xt=a("div"),F(cL.$$.fragment),Dsr=l(),z2e=a("p"),Gsr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Osr=l(),Ud=a("p"),Vsr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),Xsr=o("not"),zsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Wsr=o("from_pretrained()"),Qsr=o(" to load the model weights."),Hsr=l(),F(zT.$$.fragment),Usr=l(),Fo=a("div"),F(fL.$$.fragment),Jsr=l(),Q2e=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ksr=l(),rn=a("p"),Zsr=o("The model class to instantiate is selected based on the "),H2e=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),Y2e=a("ul"),WT=a("li"),K2e=a("strong"),llr=o("maskformer"),ilr=o(" \u2014 "),Hz=a("a"),dlr=o("MaskFormerForInstanceSegmentation"),clr=o(" (MaskFormer model)"),flr=l(),QT=a("p"),mlr=o("The model is set in evaluation mode by default using "),Z2e=a("code"),glr=o("model.eval()"),hlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),plr=o("model.train()"),ulr=l(),F(HT.$$.fragment),$Ne=l(),Jd=a("h2"),UT=a("a"),o1e=a("span"),F(mL.$$.fragment),_lr=l(),r1e=a("span"),blr=o("TFAutoModel"),kNe=l(),Zo=a("div"),F(gL.$$.fragment),vlr=l(),Yd=a("p"),Flr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uz=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" class method or the "),Jz=a("a"),Elr=o("from_config()"),Clr=o(` class
method.`),wlr=l(),hL=a("p"),Alr=o("This class cannot be instantiated directly using "),t1e=a("code"),ylr=o("__init__()"),Llr=o(" (throws an error)."),xlr=l(),$t=a("div"),F(pL.$$.fragment),$lr=l(),a1e=a("p"),klr=o("Instantiates one of the base model classes of the library from a configuration."),Slr=l(),Kd=a("p"),Rlr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Plr=o("not"),Blr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),Ilr=o("from_pretrained()"),qlr=o(" to load the model weights."),Nlr=l(),F(JT.$$.fragment),jlr=l(),yr=a("div"),F(uL.$$.fragment),Dlr=l(),s1e=a("p"),Glr=o("Instantiate one of the base model classes of the library from a pretrained model."),Olr=l(),tn=a("p"),Vlr=o("The model class to instantiate is selected based on the "),l1e=a("code"),Xlr=o("model_type"),zlr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),Wlr=o("pretrained_model_name_or_path"),Qlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),Hlr=o("pretrained_model_name_or_path"),Ulr=o(":"),Jlr=l(),N=a("ul"),YT=a("li"),c1e=a("strong"),Ylr=o("albert"),Klr=o(" \u2014 "),Kz=a("a"),Zlr=o("TFAlbertModel"),eir=o(" (ALBERT model)"),oir=l(),KT=a("li"),f1e=a("strong"),rir=o("bart"),tir=o(" \u2014 "),Zz=a("a"),air=o("TFBartModel"),nir=o(" (BART model)"),sir=l(),ZT=a("li"),m1e=a("strong"),lir=o("bert"),iir=o(" \u2014 "),eW=a("a"),dir=o("TFBertModel"),cir=o(" (BERT model)"),fir=l(),e8=a("li"),g1e=a("strong"),mir=o("blenderbot"),gir=o(" \u2014 "),oW=a("a"),hir=o("TFBlenderbotModel"),pir=o(" (Blenderbot model)"),uir=l(),o8=a("li"),h1e=a("strong"),_ir=o("blenderbot-small"),bir=o(" \u2014 "),rW=a("a"),vir=o("TFBlenderbotSmallModel"),Fir=o(" (BlenderbotSmall model)"),Tir=l(),r8=a("li"),p1e=a("strong"),Mir=o("camembert"),Eir=o(" \u2014 "),tW=a("a"),Cir=o("TFCamembertModel"),wir=o(" (CamemBERT model)"),Air=l(),t8=a("li"),u1e=a("strong"),yir=o("clip"),Lir=o(" \u2014 "),aW=a("a"),xir=o("TFCLIPModel"),$ir=o(" (CLIP model)"),kir=l(),a8=a("li"),_1e=a("strong"),Sir=o("convbert"),Rir=o(" \u2014 "),nW=a("a"),Pir=o("TFConvBertModel"),Bir=o(" (ConvBERT model)"),Iir=l(),n8=a("li"),b1e=a("strong"),qir=o("convnext"),Nir=o(" \u2014 "),sW=a("a"),jir=o("TFConvNextModel"),Dir=o(" (ConvNext model)"),Gir=l(),s8=a("li"),v1e=a("strong"),Oir=o("ctrl"),Vir=o(" \u2014 "),lW=a("a"),Xir=o("TFCTRLModel"),zir=o(" (CTRL model)"),Wir=l(),l8=a("li"),F1e=a("strong"),Qir=o("data2vec-vision"),Hir=o(" \u2014 "),iW=a("a"),Uir=o("TFData2VecVisionModel"),Jir=o(" (Data2VecVision model)"),Yir=l(),i8=a("li"),T1e=a("strong"),Kir=o("deberta"),Zir=o(" \u2014 "),dW=a("a"),edr=o("TFDebertaModel"),odr=o(" (DeBERTa model)"),rdr=l(),d8=a("li"),M1e=a("strong"),tdr=o("deberta-v2"),adr=o(" \u2014 "),cW=a("a"),ndr=o("TFDebertaV2Model"),sdr=o(" (DeBERTa-v2 model)"),ldr=l(),c8=a("li"),E1e=a("strong"),idr=o("distilbert"),ddr=o(" \u2014 "),fW=a("a"),cdr=o("TFDistilBertModel"),fdr=o(" (DistilBERT model)"),mdr=l(),f8=a("li"),C1e=a("strong"),gdr=o("dpr"),hdr=o(" \u2014 "),mW=a("a"),pdr=o("TFDPRQuestionEncoder"),udr=o(" (DPR model)"),_dr=l(),m8=a("li"),w1e=a("strong"),bdr=o("electra"),vdr=o(" \u2014 "),gW=a("a"),Fdr=o("TFElectraModel"),Tdr=o(" (ELECTRA model)"),Mdr=l(),g8=a("li"),A1e=a("strong"),Edr=o("flaubert"),Cdr=o(" \u2014 "),hW=a("a"),wdr=o("TFFlaubertModel"),Adr=o(" (FlauBERT model)"),ydr=l(),Gs=a("li"),y1e=a("strong"),Ldr=o("funnel"),xdr=o(" \u2014 "),pW=a("a"),$dr=o("TFFunnelModel"),kdr=o(" or "),uW=a("a"),Sdr=o("TFFunnelBaseModel"),Rdr=o(" (Funnel Transformer model)"),Pdr=l(),h8=a("li"),L1e=a("strong"),Bdr=o("gpt2"),Idr=o(" \u2014 "),_W=a("a"),qdr=o("TFGPT2Model"),Ndr=o(" (OpenAI GPT-2 model)"),jdr=l(),p8=a("li"),x1e=a("strong"),Ddr=o("gptj"),Gdr=o(" \u2014 "),bW=a("a"),Odr=o("TFGPTJModel"),Vdr=o(" (GPT-J model)"),Xdr=l(),u8=a("li"),$1e=a("strong"),zdr=o("hubert"),Wdr=o(" \u2014 "),vW=a("a"),Qdr=o("TFHubertModel"),Hdr=o(" (Hubert model)"),Udr=l(),_8=a("li"),k1e=a("strong"),Jdr=o("layoutlm"),Ydr=o(" \u2014 "),FW=a("a"),Kdr=o("TFLayoutLMModel"),Zdr=o(" (LayoutLM model)"),ecr=l(),b8=a("li"),S1e=a("strong"),ocr=o("led"),rcr=o(" \u2014 "),TW=a("a"),tcr=o("TFLEDModel"),acr=o(" (LED model)"),ncr=l(),v8=a("li"),R1e=a("strong"),scr=o("longformer"),lcr=o(" \u2014 "),MW=a("a"),icr=o("TFLongformerModel"),dcr=o(" (Longformer model)"),ccr=l(),F8=a("li"),P1e=a("strong"),fcr=o("lxmert"),mcr=o(" \u2014 "),EW=a("a"),gcr=o("TFLxmertModel"),hcr=o(" (LXMERT model)"),pcr=l(),T8=a("li"),B1e=a("strong"),ucr=o("marian"),_cr=o(" \u2014 "),CW=a("a"),bcr=o("TFMarianModel"),vcr=o(" (Marian model)"),Fcr=l(),M8=a("li"),I1e=a("strong"),Tcr=o("mbart"),Mcr=o(" \u2014 "),wW=a("a"),Ecr=o("TFMBartModel"),Ccr=o(" (mBART model)"),wcr=l(),E8=a("li"),q1e=a("strong"),Acr=o("mobilebert"),ycr=o(" \u2014 "),AW=a("a"),Lcr=o("TFMobileBertModel"),xcr=o(" (MobileBERT model)"),$cr=l(),C8=a("li"),N1e=a("strong"),kcr=o("mpnet"),Scr=o(" \u2014 "),yW=a("a"),Rcr=o("TFMPNetModel"),Pcr=o(" (MPNet model)"),Bcr=l(),w8=a("li"),j1e=a("strong"),Icr=o("mt5"),qcr=o(" \u2014 "),LW=a("a"),Ncr=o("TFMT5Model"),jcr=o(" (mT5 model)"),Dcr=l(),A8=a("li"),D1e=a("strong"),Gcr=o("openai-gpt"),Ocr=o(" \u2014 "),xW=a("a"),Vcr=o("TFOpenAIGPTModel"),Xcr=o(" (OpenAI GPT model)"),zcr=l(),y8=a("li"),G1e=a("strong"),Wcr=o("pegasus"),Qcr=o(" \u2014 "),$W=a("a"),Hcr=o("TFPegasusModel"),Ucr=o(" (Pegasus model)"),Jcr=l(),L8=a("li"),O1e=a("strong"),Ycr=o("rembert"),Kcr=o(" \u2014 "),kW=a("a"),Zcr=o("TFRemBertModel"),efr=o(" (RemBERT model)"),ofr=l(),x8=a("li"),V1e=a("strong"),rfr=o("roberta"),tfr=o(" \u2014 "),SW=a("a"),afr=o("TFRobertaModel"),nfr=o(" (RoBERTa model)"),sfr=l(),$8=a("li"),X1e=a("strong"),lfr=o("roformer"),ifr=o(" \u2014 "),RW=a("a"),dfr=o("TFRoFormerModel"),cfr=o(" (RoFormer model)"),ffr=l(),k8=a("li"),z1e=a("strong"),mfr=o("speech_to_text"),gfr=o(" \u2014 "),PW=a("a"),hfr=o("TFSpeech2TextModel"),pfr=o(" (Speech2Text model)"),ufr=l(),S8=a("li"),W1e=a("strong"),_fr=o("swin"),bfr=o(" \u2014 "),BW=a("a"),vfr=o("TFSwinModel"),Ffr=o(" (Swin model)"),Tfr=l(),R8=a("li"),Q1e=a("strong"),Mfr=o("t5"),Efr=o(" \u2014 "),IW=a("a"),Cfr=o("TFT5Model"),wfr=o(" (T5 model)"),Afr=l(),P8=a("li"),H1e=a("strong"),yfr=o("tapas"),Lfr=o(" \u2014 "),qW=a("a"),xfr=o("TFTapasModel"),$fr=o(" (TAPAS model)"),kfr=l(),B8=a("li"),U1e=a("strong"),Sfr=o("transfo-xl"),Rfr=o(" \u2014 "),NW=a("a"),Pfr=o("TFTransfoXLModel"),Bfr=o(" (Transformer-XL model)"),Ifr=l(),I8=a("li"),J1e=a("strong"),qfr=o("vit"),Nfr=o(" \u2014 "),jW=a("a"),jfr=o("TFViTModel"),Dfr=o(" (ViT model)"),Gfr=l(),q8=a("li"),Y1e=a("strong"),Ofr=o("vit_mae"),Vfr=o(" \u2014 "),DW=a("a"),Xfr=o("TFViTMAEModel"),zfr=o(" (ViTMAE model)"),Wfr=l(),N8=a("li"),K1e=a("strong"),Qfr=o("wav2vec2"),Hfr=o(" \u2014 "),GW=a("a"),Ufr=o("TFWav2Vec2Model"),Jfr=o(" (Wav2Vec2 model)"),Yfr=l(),j8=a("li"),Z1e=a("strong"),Kfr=o("xlm"),Zfr=o(" \u2014 "),OW=a("a"),emr=o("TFXLMModel"),omr=o(" (XLM model)"),rmr=l(),D8=a("li"),ebe=a("strong"),tmr=o("xlm-roberta"),amr=o(" \u2014 "),VW=a("a"),nmr=o("TFXLMRobertaModel"),smr=o(" (XLM-RoBERTa model)"),lmr=l(),G8=a("li"),obe=a("strong"),imr=o("xlnet"),dmr=o(" \u2014 "),XW=a("a"),cmr=o("TFXLNetModel"),fmr=o(" (XLNet model)"),mmr=l(),F(O8.$$.fragment),SNe=l(),Zd=a("h2"),V8=a("a"),rbe=a("span"),F(_L.$$.fragment),gmr=l(),tbe=a("span"),hmr=o("TFAutoModelForPreTraining"),RNe=l(),er=a("div"),F(bL.$$.fragment),pmr=l(),ec=a("p"),umr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zW=a("a"),_mr=o("from_pretrained()"),bmr=o(" class method or the "),WW=a("a"),vmr=o("from_config()"),Fmr=o(` class
method.`),Tmr=l(),vL=a("p"),Mmr=o("This class cannot be instantiated directly using "),abe=a("code"),Emr=o("__init__()"),Cmr=o(" (throws an error)."),wmr=l(),kt=a("div"),F(FL.$$.fragment),Amr=l(),nbe=a("p"),ymr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lmr=l(),oc=a("p"),xmr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),$mr=o("not"),kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Smr=o("from_pretrained()"),Rmr=o(" to load the model weights."),Pmr=l(),F(X8.$$.fragment),Bmr=l(),Lr=a("div"),F(TL.$$.fragment),Imr=l(),lbe=a("p"),qmr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nmr=l(),an=a("p"),jmr=o("The model class to instantiate is selected based on the "),ibe=a("code"),Dmr=o("model_type"),Gmr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(":"),Wmr=l(),se=a("ul"),z8=a("li"),fbe=a("strong"),Qmr=o("albert"),Hmr=o(" \u2014 "),HW=a("a"),Umr=o("TFAlbertForPreTraining"),Jmr=o(" (ALBERT model)"),Ymr=l(),W8=a("li"),mbe=a("strong"),Kmr=o("bart"),Zmr=o(" \u2014 "),UW=a("a"),egr=o("TFBartForConditionalGeneration"),ogr=o(" (BART model)"),rgr=l(),Q8=a("li"),gbe=a("strong"),tgr=o("bert"),agr=o(" \u2014 "),JW=a("a"),ngr=o("TFBertForPreTraining"),sgr=o(" (BERT model)"),lgr=l(),H8=a("li"),hbe=a("strong"),igr=o("camembert"),dgr=o(" \u2014 "),YW=a("a"),cgr=o("TFCamembertForMaskedLM"),fgr=o(" (CamemBERT model)"),mgr=l(),U8=a("li"),pbe=a("strong"),ggr=o("ctrl"),hgr=o(" \u2014 "),KW=a("a"),pgr=o("TFCTRLLMHeadModel"),ugr=o(" (CTRL model)"),_gr=l(),J8=a("li"),ube=a("strong"),bgr=o("distilbert"),vgr=o(" \u2014 "),ZW=a("a"),Fgr=o("TFDistilBertForMaskedLM"),Tgr=o(" (DistilBERT model)"),Mgr=l(),Y8=a("li"),_be=a("strong"),Egr=o("electra"),Cgr=o(" \u2014 "),eQ=a("a"),wgr=o("TFElectraForPreTraining"),Agr=o(" (ELECTRA model)"),ygr=l(),K8=a("li"),bbe=a("strong"),Lgr=o("flaubert"),xgr=o(" \u2014 "),oQ=a("a"),$gr=o("TFFlaubertWithLMHeadModel"),kgr=o(" (FlauBERT model)"),Sgr=l(),Z8=a("li"),vbe=a("strong"),Rgr=o("funnel"),Pgr=o(" \u2014 "),rQ=a("a"),Bgr=o("TFFunnelForPreTraining"),Igr=o(" (Funnel Transformer model)"),qgr=l(),e7=a("li"),Fbe=a("strong"),Ngr=o("gpt2"),jgr=o(" \u2014 "),tQ=a("a"),Dgr=o("TFGPT2LMHeadModel"),Ggr=o(" (OpenAI GPT-2 model)"),Ogr=l(),o7=a("li"),Tbe=a("strong"),Vgr=o("layoutlm"),Xgr=o(" \u2014 "),aQ=a("a"),zgr=o("TFLayoutLMForMaskedLM"),Wgr=o(" (LayoutLM model)"),Qgr=l(),r7=a("li"),Mbe=a("strong"),Hgr=o("lxmert"),Ugr=o(" \u2014 "),nQ=a("a"),Jgr=o("TFLxmertForPreTraining"),Ygr=o(" (LXMERT model)"),Kgr=l(),t7=a("li"),Ebe=a("strong"),Zgr=o("mobilebert"),ehr=o(" \u2014 "),sQ=a("a"),ohr=o("TFMobileBertForPreTraining"),rhr=o(" (MobileBERT model)"),thr=l(),a7=a("li"),Cbe=a("strong"),ahr=o("mpnet"),nhr=o(" \u2014 "),lQ=a("a"),shr=o("TFMPNetForMaskedLM"),lhr=o(" (MPNet model)"),ihr=l(),n7=a("li"),wbe=a("strong"),dhr=o("openai-gpt"),chr=o(" \u2014 "),iQ=a("a"),fhr=o("TFOpenAIGPTLMHeadModel"),mhr=o(" (OpenAI GPT model)"),ghr=l(),s7=a("li"),Abe=a("strong"),hhr=o("roberta"),phr=o(" \u2014 "),dQ=a("a"),uhr=o("TFRobertaForMaskedLM"),_hr=o(" (RoBERTa model)"),bhr=l(),l7=a("li"),ybe=a("strong"),vhr=o("t5"),Fhr=o(" \u2014 "),cQ=a("a"),Thr=o("TFT5ForConditionalGeneration"),Mhr=o(" (T5 model)"),Ehr=l(),i7=a("li"),Lbe=a("strong"),Chr=o("tapas"),whr=o(" \u2014 "),fQ=a("a"),Ahr=o("TFTapasForMaskedLM"),yhr=o(" (TAPAS model)"),Lhr=l(),d7=a("li"),xbe=a("strong"),xhr=o("transfo-xl"),$hr=o(" \u2014 "),mQ=a("a"),khr=o("TFTransfoXLLMHeadModel"),Shr=o(" (Transformer-XL model)"),Rhr=l(),c7=a("li"),$be=a("strong"),Phr=o("vit_mae"),Bhr=o(" \u2014 "),gQ=a("a"),Ihr=o("TFViTMAEForPreTraining"),qhr=o(" (ViTMAE model)"),Nhr=l(),f7=a("li"),kbe=a("strong"),jhr=o("xlm"),Dhr=o(" \u2014 "),hQ=a("a"),Ghr=o("TFXLMWithLMHeadModel"),Ohr=o(" (XLM model)"),Vhr=l(),m7=a("li"),Sbe=a("strong"),Xhr=o("xlm-roberta"),zhr=o(" \u2014 "),pQ=a("a"),Whr=o("TFXLMRobertaForMaskedLM"),Qhr=o(" (XLM-RoBERTa model)"),Hhr=l(),g7=a("li"),Rbe=a("strong"),Uhr=o("xlnet"),Jhr=o(" \u2014 "),uQ=a("a"),Yhr=o("TFXLNetLMHeadModel"),Khr=o(" (XLNet model)"),Zhr=l(),F(h7.$$.fragment),PNe=l(),rc=a("h2"),p7=a("a"),Pbe=a("span"),F(ML.$$.fragment),epr=l(),Bbe=a("span"),opr=o("TFAutoModelForCausalLM"),BNe=l(),or=a("div"),F(EL.$$.fragment),rpr=l(),tc=a("p"),tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=a("a"),apr=o("from_pretrained()"),npr=o(" class method or the "),bQ=a("a"),spr=o("from_config()"),lpr=o(` class
method.`),ipr=l(),CL=a("p"),dpr=o("This class cannot be instantiated directly using "),Ibe=a("code"),cpr=o("__init__()"),fpr=o(" (throws an error)."),mpr=l(),St=a("div"),F(wL.$$.fragment),gpr=l(),qbe=a("p"),hpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ppr=l(),ac=a("p"),upr=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),_pr=o("not"),bpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),vpr=o("from_pretrained()"),Fpr=o(" to load the model weights."),Tpr=l(),F(u7.$$.fragment),Mpr=l(),xr=a("div"),F(AL.$$.fragment),Epr=l(),jbe=a("p"),Cpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wpr=l(),nn=a("p"),Apr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),ypr=o("model_type"),Lpr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),xpr=o("pretrained_model_name_or_path"),$pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),kpr=o("pretrained_model_name_or_path"),Spr=o(":"),Rpr=l(),Te=a("ul"),_7=a("li"),Vbe=a("strong"),Ppr=o("bert"),Bpr=o(" \u2014 "),FQ=a("a"),Ipr=o("TFBertLMHeadModel"),qpr=o(" (BERT model)"),Npr=l(),b7=a("li"),Xbe=a("strong"),jpr=o("camembert"),Dpr=o(" \u2014 "),TQ=a("a"),Gpr=o("TFCamembertForCausalLM"),Opr=o(" (CamemBERT model)"),Vpr=l(),v7=a("li"),zbe=a("strong"),Xpr=o("ctrl"),zpr=o(" \u2014 "),MQ=a("a"),Wpr=o("TFCTRLLMHeadModel"),Qpr=o(" (CTRL model)"),Hpr=l(),F7=a("li"),Wbe=a("strong"),Upr=o("gpt2"),Jpr=o(" \u2014 "),EQ=a("a"),Ypr=o("TFGPT2LMHeadModel"),Kpr=o(" (OpenAI GPT-2 model)"),Zpr=l(),T7=a("li"),Qbe=a("strong"),eur=o("gptj"),our=o(" \u2014 "),CQ=a("a"),rur=o("TFGPTJForCausalLM"),tur=o(" (GPT-J model)"),aur=l(),M7=a("li"),Hbe=a("strong"),nur=o("openai-gpt"),sur=o(" \u2014 "),wQ=a("a"),lur=o("TFOpenAIGPTLMHeadModel"),iur=o(" (OpenAI GPT model)"),dur=l(),E7=a("li"),Ube=a("strong"),cur=o("rembert"),fur=o(" \u2014 "),AQ=a("a"),mur=o("TFRemBertForCausalLM"),gur=o(" (RemBERT model)"),hur=l(),C7=a("li"),Jbe=a("strong"),pur=o("roberta"),uur=o(" \u2014 "),yQ=a("a"),_ur=o("TFRobertaForCausalLM"),bur=o(" (RoBERTa model)"),vur=l(),w7=a("li"),Ybe=a("strong"),Fur=o("roformer"),Tur=o(" \u2014 "),LQ=a("a"),Mur=o("TFRoFormerForCausalLM"),Eur=o(" (RoFormer model)"),Cur=l(),A7=a("li"),Kbe=a("strong"),wur=o("transfo-xl"),Aur=o(" \u2014 "),xQ=a("a"),yur=o("TFTransfoXLLMHeadModel"),Lur=o(" (Transformer-XL model)"),xur=l(),y7=a("li"),Zbe=a("strong"),$ur=o("xlm"),kur=o(" \u2014 "),$Q=a("a"),Sur=o("TFXLMWithLMHeadModel"),Rur=o(" (XLM model)"),Pur=l(),L7=a("li"),eve=a("strong"),Bur=o("xlnet"),Iur=o(" \u2014 "),kQ=a("a"),qur=o("TFXLNetLMHeadModel"),Nur=o(" (XLNet model)"),jur=l(),F(x7.$$.fragment),INe=l(),nc=a("h2"),$7=a("a"),ove=a("span"),F(yL.$$.fragment),Dur=l(),rve=a("span"),Gur=o("TFAutoModelForImageClassification"),qNe=l(),rr=a("div"),F(LL.$$.fragment),Our=l(),sc=a("p"),Vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=a("a"),Xur=o("from_pretrained()"),zur=o(" class method or the "),RQ=a("a"),Wur=o("from_config()"),Qur=o(` class
method.`),Hur=l(),xL=a("p"),Uur=o("This class cannot be instantiated directly using "),tve=a("code"),Jur=o("__init__()"),Yur=o(" (throws an error)."),Kur=l(),Rt=a("div"),F($L.$$.fragment),Zur=l(),ave=a("p"),e_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o_r=l(),lc=a("p"),r_r=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),t_r=o("not"),a_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),n_r=o("from_pretrained()"),s_r=o(" to load the model weights."),l_r=l(),F(k7.$$.fragment),i_r=l(),$r=a("div"),F(kL.$$.fragment),d_r=l(),sve=a("p"),c_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f_r=l(),sn=a("p"),m_r=o("The model class to instantiate is selected based on the "),lve=a("code"),g_r=o("model_type"),h_r=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),p_r=o("pretrained_model_name_or_path"),u_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),__r=o("pretrained_model_name_or_path"),b_r=o(":"),v_r=l(),ln=a("ul"),S7=a("li"),cve=a("strong"),F_r=o("convnext"),T_r=o(" \u2014 "),BQ=a("a"),M_r=o("TFConvNextForImageClassification"),E_r=o(" (ConvNext model)"),C_r=l(),R7=a("li"),fve=a("strong"),w_r=o("data2vec-vision"),A_r=o(" \u2014 "),IQ=a("a"),y_r=o("TFData2VecVisionForImageClassification"),L_r=o(" (Data2VecVision model)"),x_r=l(),P7=a("li"),mve=a("strong"),$_r=o("swin"),k_r=o(" \u2014 "),qQ=a("a"),S_r=o("TFSwinForImageClassification"),R_r=o(" (Swin model)"),P_r=l(),B7=a("li"),gve=a("strong"),B_r=o("vit"),I_r=o(" \u2014 "),NQ=a("a"),q_r=o("TFViTForImageClassification"),N_r=o(" (ViT model)"),j_r=l(),F(I7.$$.fragment),NNe=l(),ic=a("h2"),q7=a("a"),hve=a("span"),F(SL.$$.fragment),D_r=l(),pve=a("span"),G_r=o("TFAutoModelForMaskedLM"),jNe=l(),tr=a("div"),F(RL.$$.fragment),O_r=l(),dc=a("p"),V_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=a("a"),X_r=o("from_pretrained()"),z_r=o(" class method or the "),DQ=a("a"),W_r=o("from_config()"),Q_r=o(` class
method.`),H_r=l(),PL=a("p"),U_r=o("This class cannot be instantiated directly using "),uve=a("code"),J_r=o("__init__()"),Y_r=o(" (throws an error)."),K_r=l(),Pt=a("div"),F(BL.$$.fragment),Z_r=l(),_ve=a("p"),e2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o2r=l(),cc=a("p"),r2r=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),t2r=o("not"),a2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),n2r=o("from_pretrained()"),s2r=o(" to load the model weights."),l2r=l(),F(N7.$$.fragment),i2r=l(),kr=a("div"),F(IL.$$.fragment),d2r=l(),vve=a("p"),c2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f2r=l(),dn=a("p"),m2r=o("The model class to instantiate is selected based on the "),Fve=a("code"),g2r=o("model_type"),h2r=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),p2r=o("pretrained_model_name_or_path"),u2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),_2r=o("pretrained_model_name_or_path"),b2r=o(":"),v2r=l(),ie=a("ul"),j7=a("li"),Eve=a("strong"),F2r=o("albert"),T2r=o(" \u2014 "),OQ=a("a"),M2r=o("TFAlbertForMaskedLM"),E2r=o(" (ALBERT model)"),C2r=l(),D7=a("li"),Cve=a("strong"),w2r=o("bert"),A2r=o(" \u2014 "),VQ=a("a"),y2r=o("TFBertForMaskedLM"),L2r=o(" (BERT model)"),x2r=l(),G7=a("li"),wve=a("strong"),$2r=o("camembert"),k2r=o(" \u2014 "),XQ=a("a"),S2r=o("TFCamembertForMaskedLM"),R2r=o(" (CamemBERT model)"),P2r=l(),O7=a("li"),Ave=a("strong"),B2r=o("convbert"),I2r=o(" \u2014 "),zQ=a("a"),q2r=o("TFConvBertForMaskedLM"),N2r=o(" (ConvBERT model)"),j2r=l(),V7=a("li"),yve=a("strong"),D2r=o("deberta"),G2r=o(" \u2014 "),WQ=a("a"),O2r=o("TFDebertaForMaskedLM"),V2r=o(" (DeBERTa model)"),X2r=l(),X7=a("li"),Lve=a("strong"),z2r=o("deberta-v2"),W2r=o(" \u2014 "),QQ=a("a"),Q2r=o("TFDebertaV2ForMaskedLM"),H2r=o(" (DeBERTa-v2 model)"),U2r=l(),z7=a("li"),xve=a("strong"),J2r=o("distilbert"),Y2r=o(" \u2014 "),HQ=a("a"),K2r=o("TFDistilBertForMaskedLM"),Z2r=o(" (DistilBERT model)"),e1r=l(),W7=a("li"),$ve=a("strong"),o1r=o("electra"),r1r=o(" \u2014 "),UQ=a("a"),t1r=o("TFElectraForMaskedLM"),a1r=o(" (ELECTRA model)"),n1r=l(),Q7=a("li"),kve=a("strong"),s1r=o("flaubert"),l1r=o(" \u2014 "),JQ=a("a"),i1r=o("TFFlaubertWithLMHeadModel"),d1r=o(" (FlauBERT model)"),c1r=l(),H7=a("li"),Sve=a("strong"),f1r=o("funnel"),m1r=o(" \u2014 "),YQ=a("a"),g1r=o("TFFunnelForMaskedLM"),h1r=o(" (Funnel Transformer model)"),p1r=l(),U7=a("li"),Rve=a("strong"),u1r=o("layoutlm"),_1r=o(" \u2014 "),KQ=a("a"),b1r=o("TFLayoutLMForMaskedLM"),v1r=o(" (LayoutLM model)"),F1r=l(),J7=a("li"),Pve=a("strong"),T1r=o("longformer"),M1r=o(" \u2014 "),ZQ=a("a"),E1r=o("TFLongformerForMaskedLM"),C1r=o(" (Longformer model)"),w1r=l(),Y7=a("li"),Bve=a("strong"),A1r=o("mobilebert"),y1r=o(" \u2014 "),eH=a("a"),L1r=o("TFMobileBertForMaskedLM"),x1r=o(" (MobileBERT model)"),$1r=l(),K7=a("li"),Ive=a("strong"),k1r=o("mpnet"),S1r=o(" \u2014 "),oH=a("a"),R1r=o("TFMPNetForMaskedLM"),P1r=o(" (MPNet model)"),B1r=l(),Z7=a("li"),qve=a("strong"),I1r=o("rembert"),q1r=o(" \u2014 "),rH=a("a"),N1r=o("TFRemBertForMaskedLM"),j1r=o(" (RemBERT model)"),D1r=l(),eM=a("li"),Nve=a("strong"),G1r=o("roberta"),O1r=o(" \u2014 "),tH=a("a"),V1r=o("TFRobertaForMaskedLM"),X1r=o(" (RoBERTa model)"),z1r=l(),oM=a("li"),jve=a("strong"),W1r=o("roformer"),Q1r=o(" \u2014 "),aH=a("a"),H1r=o("TFRoFormerForMaskedLM"),U1r=o(" (RoFormer model)"),J1r=l(),rM=a("li"),Dve=a("strong"),Y1r=o("tapas"),K1r=o(" \u2014 "),nH=a("a"),Z1r=o("TFTapasForMaskedLM"),ebr=o(" (TAPAS model)"),obr=l(),tM=a("li"),Gve=a("strong"),rbr=o("xlm"),tbr=o(" \u2014 "),sH=a("a"),abr=o("TFXLMWithLMHeadModel"),nbr=o(" (XLM model)"),sbr=l(),aM=a("li"),Ove=a("strong"),lbr=o("xlm-roberta"),ibr=o(" \u2014 "),lH=a("a"),dbr=o("TFXLMRobertaForMaskedLM"),cbr=o(" (XLM-RoBERTa model)"),fbr=l(),F(nM.$$.fragment),DNe=l(),fc=a("h2"),sM=a("a"),Vve=a("span"),F(qL.$$.fragment),mbr=l(),Xve=a("span"),gbr=o("TFAutoModelForSeq2SeqLM"),GNe=l(),ar=a("div"),F(NL.$$.fragment),hbr=l(),mc=a("p"),pbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=a("a"),ubr=o("from_pretrained()"),_br=o(" class method or the "),dH=a("a"),bbr=o("from_config()"),vbr=o(` class
method.`),Fbr=l(),jL=a("p"),Tbr=o("This class cannot be instantiated directly using "),zve=a("code"),Mbr=o("__init__()"),Ebr=o(" (throws an error)."),Cbr=l(),Bt=a("div"),F(DL.$$.fragment),wbr=l(),Wve=a("p"),Abr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ybr=l(),gc=a("p"),Lbr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),xbr=o("not"),$br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),kbr=o("from_pretrained()"),Sbr=o(" to load the model weights."),Rbr=l(),F(lM.$$.fragment),Pbr=l(),Sr=a("div"),F(GL.$$.fragment),Bbr=l(),Hve=a("p"),Ibr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qbr=l(),cn=a("p"),Nbr=o("The model class to instantiate is selected based on the "),Uve=a("code"),jbr=o("model_type"),Dbr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Vbr=o("pretrained_model_name_or_path"),Xbr=o(":"),zbr=l(),ye=a("ul"),iM=a("li"),Kve=a("strong"),Wbr=o("bart"),Qbr=o(" \u2014 "),fH=a("a"),Hbr=o("TFBartForConditionalGeneration"),Ubr=o(" (BART model)"),Jbr=l(),dM=a("li"),Zve=a("strong"),Ybr=o("blenderbot"),Kbr=o(" \u2014 "),mH=a("a"),Zbr=o("TFBlenderbotForConditionalGeneration"),evr=o(" (Blenderbot model)"),ovr=l(),cM=a("li"),eFe=a("strong"),rvr=o("blenderbot-small"),tvr=o(" \u2014 "),gH=a("a"),avr=o("TFBlenderbotSmallForConditionalGeneration"),nvr=o(" (BlenderbotSmall model)"),svr=l(),fM=a("li"),oFe=a("strong"),lvr=o("encoder-decoder"),ivr=o(" \u2014 "),hH=a("a"),dvr=o("TFEncoderDecoderModel"),cvr=o(" (Encoder decoder model)"),fvr=l(),mM=a("li"),rFe=a("strong"),mvr=o("led"),gvr=o(" \u2014 "),pH=a("a"),hvr=o("TFLEDForConditionalGeneration"),pvr=o(" (LED model)"),uvr=l(),gM=a("li"),tFe=a("strong"),_vr=o("marian"),bvr=o(" \u2014 "),uH=a("a"),vvr=o("TFMarianMTModel"),Fvr=o(" (Marian model)"),Tvr=l(),hM=a("li"),aFe=a("strong"),Mvr=o("mbart"),Evr=o(" \u2014 "),_H=a("a"),Cvr=o("TFMBartForConditionalGeneration"),wvr=o(" (mBART model)"),Avr=l(),pM=a("li"),nFe=a("strong"),yvr=o("mt5"),Lvr=o(" \u2014 "),bH=a("a"),xvr=o("TFMT5ForConditionalGeneration"),$vr=o(" (mT5 model)"),kvr=l(),uM=a("li"),sFe=a("strong"),Svr=o("pegasus"),Rvr=o(" \u2014 "),vH=a("a"),Pvr=o("TFPegasusForConditionalGeneration"),Bvr=o(" (Pegasus model)"),Ivr=l(),_M=a("li"),lFe=a("strong"),qvr=o("t5"),Nvr=o(" \u2014 "),FH=a("a"),jvr=o("TFT5ForConditionalGeneration"),Dvr=o(" (T5 model)"),Gvr=l(),F(bM.$$.fragment),ONe=l(),hc=a("h2"),vM=a("a"),iFe=a("span"),F(OL.$$.fragment),Ovr=l(),dFe=a("span"),Vvr=o("TFAutoModelForSequenceClassification"),VNe=l(),nr=a("div"),F(VL.$$.fragment),Xvr=l(),pc=a("p"),zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TH=a("a"),Wvr=o("from_pretrained()"),Qvr=o(" class method or the "),MH=a("a"),Hvr=o("from_config()"),Uvr=o(` class
method.`),Jvr=l(),XL=a("p"),Yvr=o("This class cannot be instantiated directly using "),cFe=a("code"),Kvr=o("__init__()"),Zvr=o(" (throws an error)."),eFr=l(),It=a("div"),F(zL.$$.fragment),oFr=l(),fFe=a("p"),rFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tFr=l(),uc=a("p"),aFr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),nFr=o("not"),sFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),lFr=o("from_pretrained()"),iFr=o(" to load the model weights."),dFr=l(),F(FM.$$.fragment),cFr=l(),Rr=a("div"),F(WL.$$.fragment),fFr=l(),gFe=a("p"),mFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gFr=l(),fn=a("p"),hFr=o("The model class to instantiate is selected based on the "),hFe=a("code"),pFr=o("model_type"),uFr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),_Fr=o("pretrained_model_name_or_path"),bFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),vFr=o("pretrained_model_name_or_path"),FFr=o(":"),TFr=l(),oe=a("ul"),TM=a("li"),_Fe=a("strong"),MFr=o("albert"),EFr=o(" \u2014 "),CH=a("a"),CFr=o("TFAlbertForSequenceClassification"),wFr=o(" (ALBERT model)"),AFr=l(),MM=a("li"),bFe=a("strong"),yFr=o("bert"),LFr=o(" \u2014 "),wH=a("a"),xFr=o("TFBertForSequenceClassification"),$Fr=o(" (BERT model)"),kFr=l(),EM=a("li"),vFe=a("strong"),SFr=o("camembert"),RFr=o(" \u2014 "),AH=a("a"),PFr=o("TFCamembertForSequenceClassification"),BFr=o(" (CamemBERT model)"),IFr=l(),CM=a("li"),FFe=a("strong"),qFr=o("convbert"),NFr=o(" \u2014 "),yH=a("a"),jFr=o("TFConvBertForSequenceClassification"),DFr=o(" (ConvBERT model)"),GFr=l(),wM=a("li"),TFe=a("strong"),OFr=o("ctrl"),VFr=o(" \u2014 "),LH=a("a"),XFr=o("TFCTRLForSequenceClassification"),zFr=o(" (CTRL model)"),WFr=l(),AM=a("li"),MFe=a("strong"),QFr=o("deberta"),HFr=o(" \u2014 "),xH=a("a"),UFr=o("TFDebertaForSequenceClassification"),JFr=o(" (DeBERTa model)"),YFr=l(),yM=a("li"),EFe=a("strong"),KFr=o("deberta-v2"),ZFr=o(" \u2014 "),$H=a("a"),e6r=o("TFDebertaV2ForSequenceClassification"),o6r=o(" (DeBERTa-v2 model)"),r6r=l(),LM=a("li"),CFe=a("strong"),t6r=o("distilbert"),a6r=o(" \u2014 "),kH=a("a"),n6r=o("TFDistilBertForSequenceClassification"),s6r=o(" (DistilBERT model)"),l6r=l(),xM=a("li"),wFe=a("strong"),i6r=o("electra"),d6r=o(" \u2014 "),SH=a("a"),c6r=o("TFElectraForSequenceClassification"),f6r=o(" (ELECTRA model)"),m6r=l(),$M=a("li"),AFe=a("strong"),g6r=o("flaubert"),h6r=o(" \u2014 "),RH=a("a"),p6r=o("TFFlaubertForSequenceClassification"),u6r=o(" (FlauBERT model)"),_6r=l(),kM=a("li"),yFe=a("strong"),b6r=o("funnel"),v6r=o(" \u2014 "),PH=a("a"),F6r=o("TFFunnelForSequenceClassification"),T6r=o(" (Funnel Transformer model)"),M6r=l(),SM=a("li"),LFe=a("strong"),E6r=o("gpt2"),C6r=o(" \u2014 "),BH=a("a"),w6r=o("TFGPT2ForSequenceClassification"),A6r=o(" (OpenAI GPT-2 model)"),y6r=l(),RM=a("li"),xFe=a("strong"),L6r=o("gptj"),x6r=o(" \u2014 "),IH=a("a"),$6r=o("TFGPTJForSequenceClassification"),k6r=o(" (GPT-J model)"),S6r=l(),PM=a("li"),$Fe=a("strong"),R6r=o("layoutlm"),P6r=o(" \u2014 "),qH=a("a"),B6r=o("TFLayoutLMForSequenceClassification"),I6r=o(" (LayoutLM model)"),q6r=l(),BM=a("li"),kFe=a("strong"),N6r=o("longformer"),j6r=o(" \u2014 "),NH=a("a"),D6r=o("TFLongformerForSequenceClassification"),G6r=o(" (Longformer model)"),O6r=l(),IM=a("li"),SFe=a("strong"),V6r=o("mobilebert"),X6r=o(" \u2014 "),jH=a("a"),z6r=o("TFMobileBertForSequenceClassification"),W6r=o(" (MobileBERT model)"),Q6r=l(),qM=a("li"),RFe=a("strong"),H6r=o("mpnet"),U6r=o(" \u2014 "),DH=a("a"),J6r=o("TFMPNetForSequenceClassification"),Y6r=o(" (MPNet model)"),K6r=l(),NM=a("li"),PFe=a("strong"),Z6r=o("openai-gpt"),eTr=o(" \u2014 "),GH=a("a"),oTr=o("TFOpenAIGPTForSequenceClassification"),rTr=o(" (OpenAI GPT model)"),tTr=l(),jM=a("li"),BFe=a("strong"),aTr=o("rembert"),nTr=o(" \u2014 "),OH=a("a"),sTr=o("TFRemBertForSequenceClassification"),lTr=o(" (RemBERT model)"),iTr=l(),DM=a("li"),IFe=a("strong"),dTr=o("roberta"),cTr=o(" \u2014 "),VH=a("a"),fTr=o("TFRobertaForSequenceClassification"),mTr=o(" (RoBERTa model)"),gTr=l(),GM=a("li"),qFe=a("strong"),hTr=o("roformer"),pTr=o(" \u2014 "),XH=a("a"),uTr=o("TFRoFormerForSequenceClassification"),_Tr=o(" (RoFormer model)"),bTr=l(),OM=a("li"),NFe=a("strong"),vTr=o("tapas"),FTr=o(" \u2014 "),zH=a("a"),TTr=o("TFTapasForSequenceClassification"),MTr=o(" (TAPAS model)"),ETr=l(),VM=a("li"),jFe=a("strong"),CTr=o("transfo-xl"),wTr=o(" \u2014 "),WH=a("a"),ATr=o("TFTransfoXLForSequenceClassification"),yTr=o(" (Transformer-XL model)"),LTr=l(),XM=a("li"),DFe=a("strong"),xTr=o("xlm"),$Tr=o(" \u2014 "),QH=a("a"),kTr=o("TFXLMForSequenceClassification"),STr=o(" (XLM model)"),RTr=l(),zM=a("li"),GFe=a("strong"),PTr=o("xlm-roberta"),BTr=o(" \u2014 "),HH=a("a"),ITr=o("TFXLMRobertaForSequenceClassification"),qTr=o(" (XLM-RoBERTa model)"),NTr=l(),WM=a("li"),OFe=a("strong"),jTr=o("xlnet"),DTr=o(" \u2014 "),UH=a("a"),GTr=o("TFXLNetForSequenceClassification"),OTr=o(" (XLNet model)"),VTr=l(),F(QM.$$.fragment),XNe=l(),_c=a("h2"),HM=a("a"),VFe=a("span"),F(QL.$$.fragment),XTr=l(),XFe=a("span"),zTr=o("TFAutoModelForMultipleChoice"),zNe=l(),sr=a("div"),F(HL.$$.fragment),WTr=l(),bc=a("p"),QTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JH=a("a"),HTr=o("from_pretrained()"),UTr=o(" class method or the "),YH=a("a"),JTr=o("from_config()"),YTr=o(` class
method.`),KTr=l(),UL=a("p"),ZTr=o("This class cannot be instantiated directly using "),zFe=a("code"),e8r=o("__init__()"),o8r=o(" (throws an error)."),r8r=l(),qt=a("div"),F(JL.$$.fragment),t8r=l(),WFe=a("p"),a8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),n8r=l(),vc=a("p"),s8r=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),l8r=o("not"),i8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),d8r=o("from_pretrained()"),c8r=o(" to load the model weights."),f8r=l(),F(UM.$$.fragment),m8r=l(),Pr=a("div"),F(YL.$$.fragment),g8r=l(),HFe=a("p"),h8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),p8r=l(),mn=a("p"),u8r=o("The model class to instantiate is selected based on the "),UFe=a("code"),_8r=o("model_type"),b8r=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),v8r=o("pretrained_model_name_or_path"),F8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),T8r=o("pretrained_model_name_or_path"),M8r=o(":"),E8r=l(),he=a("ul"),JM=a("li"),KFe=a("strong"),C8r=o("albert"),w8r=o(" \u2014 "),ZH=a("a"),A8r=o("TFAlbertForMultipleChoice"),y8r=o(" (ALBERT model)"),L8r=l(),YM=a("li"),ZFe=a("strong"),x8r=o("bert"),$8r=o(" \u2014 "),eU=a("a"),k8r=o("TFBertForMultipleChoice"),S8r=o(" (BERT model)"),R8r=l(),KM=a("li"),e6e=a("strong"),P8r=o("camembert"),B8r=o(" \u2014 "),oU=a("a"),I8r=o("TFCamembertForMultipleChoice"),q8r=o(" (CamemBERT model)"),N8r=l(),ZM=a("li"),o6e=a("strong"),j8r=o("convbert"),D8r=o(" \u2014 "),rU=a("a"),G8r=o("TFConvBertForMultipleChoice"),O8r=o(" (ConvBERT model)"),V8r=l(),e4=a("li"),r6e=a("strong"),X8r=o("distilbert"),z8r=o(" \u2014 "),tU=a("a"),W8r=o("TFDistilBertForMultipleChoice"),Q8r=o(" (DistilBERT model)"),H8r=l(),o4=a("li"),t6e=a("strong"),U8r=o("electra"),J8r=o(" \u2014 "),aU=a("a"),Y8r=o("TFElectraForMultipleChoice"),K8r=o(" (ELECTRA model)"),Z8r=l(),r4=a("li"),a6e=a("strong"),e7r=o("flaubert"),o7r=o(" \u2014 "),nU=a("a"),r7r=o("TFFlaubertForMultipleChoice"),t7r=o(" (FlauBERT model)"),a7r=l(),t4=a("li"),n6e=a("strong"),n7r=o("funnel"),s7r=o(" \u2014 "),sU=a("a"),l7r=o("TFFunnelForMultipleChoice"),i7r=o(" (Funnel Transformer model)"),d7r=l(),a4=a("li"),s6e=a("strong"),c7r=o("longformer"),f7r=o(" \u2014 "),lU=a("a"),m7r=o("TFLongformerForMultipleChoice"),g7r=o(" (Longformer model)"),h7r=l(),n4=a("li"),l6e=a("strong"),p7r=o("mobilebert"),u7r=o(" \u2014 "),iU=a("a"),_7r=o("TFMobileBertForMultipleChoice"),b7r=o(" (MobileBERT model)"),v7r=l(),s4=a("li"),i6e=a("strong"),F7r=o("mpnet"),T7r=o(" \u2014 "),dU=a("a"),M7r=o("TFMPNetForMultipleChoice"),E7r=o(" (MPNet model)"),C7r=l(),l4=a("li"),d6e=a("strong"),w7r=o("rembert"),A7r=o(" \u2014 "),cU=a("a"),y7r=o("TFRemBertForMultipleChoice"),L7r=o(" (RemBERT model)"),x7r=l(),i4=a("li"),c6e=a("strong"),$7r=o("roberta"),k7r=o(" \u2014 "),fU=a("a"),S7r=o("TFRobertaForMultipleChoice"),R7r=o(" (RoBERTa model)"),P7r=l(),d4=a("li"),f6e=a("strong"),B7r=o("roformer"),I7r=o(" \u2014 "),mU=a("a"),q7r=o("TFRoFormerForMultipleChoice"),N7r=o(" (RoFormer model)"),j7r=l(),c4=a("li"),m6e=a("strong"),D7r=o("xlm"),G7r=o(" \u2014 "),gU=a("a"),O7r=o("TFXLMForMultipleChoice"),V7r=o(" (XLM model)"),X7r=l(),f4=a("li"),g6e=a("strong"),z7r=o("xlm-roberta"),W7r=o(" \u2014 "),hU=a("a"),Q7r=o("TFXLMRobertaForMultipleChoice"),H7r=o(" (XLM-RoBERTa model)"),U7r=l(),m4=a("li"),h6e=a("strong"),J7r=o("xlnet"),Y7r=o(" \u2014 "),pU=a("a"),K7r=o("TFXLNetForMultipleChoice"),Z7r=o(" (XLNet model)"),eMr=l(),F(g4.$$.fragment),WNe=l(),Fc=a("h2"),h4=a("a"),p6e=a("span"),F(KL.$$.fragment),oMr=l(),u6e=a("span"),rMr=o("TFAutoModelForNextSentencePrediction"),QNe=l(),lr=a("div"),F(ZL.$$.fragment),tMr=l(),Tc=a("p"),aMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uU=a("a"),nMr=o("from_pretrained()"),sMr=o(" class method or the "),_U=a("a"),lMr=o("from_config()"),iMr=o(` class
method.`),dMr=l(),ex=a("p"),cMr=o("This class cannot be instantiated directly using "),_6e=a("code"),fMr=o("__init__()"),mMr=o(" (throws an error)."),gMr=l(),Nt=a("div"),F(ox.$$.fragment),hMr=l(),b6e=a("p"),pMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uMr=l(),Mc=a("p"),_Mr=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),bMr=o("not"),vMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),FMr=o("from_pretrained()"),TMr=o(" to load the model weights."),MMr=l(),F(p4.$$.fragment),EMr=l(),Br=a("div"),F(rx.$$.fragment),CMr=l(),F6e=a("p"),wMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AMr=l(),gn=a("p"),yMr=o("The model class to instantiate is selected based on the "),T6e=a("code"),LMr=o("model_type"),xMr=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),$Mr=o("pretrained_model_name_or_path"),kMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),SMr=o("pretrained_model_name_or_path"),RMr=o(":"),PMr=l(),tx=a("ul"),u4=a("li"),C6e=a("strong"),BMr=o("bert"),IMr=o(" \u2014 "),vU=a("a"),qMr=o("TFBertForNextSentencePrediction"),NMr=o(" (BERT model)"),jMr=l(),_4=a("li"),w6e=a("strong"),DMr=o("mobilebert"),GMr=o(" \u2014 "),FU=a("a"),OMr=o("TFMobileBertForNextSentencePrediction"),VMr=o(" (MobileBERT model)"),XMr=l(),F(b4.$$.fragment),HNe=l(),Ec=a("h2"),v4=a("a"),A6e=a("span"),F(ax.$$.fragment),zMr=l(),y6e=a("span"),WMr=o("TFAutoModelForTableQuestionAnswering"),UNe=l(),ir=a("div"),F(nx.$$.fragment),QMr=l(),Cc=a("p"),HMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TU=a("a"),UMr=o("from_pretrained()"),JMr=o(" class method or the "),MU=a("a"),YMr=o("from_config()"),KMr=o(` class
method.`),ZMr=l(),sx=a("p"),e4r=o("This class cannot be instantiated directly using "),L6e=a("code"),o4r=o("__init__()"),r4r=o(" (throws an error)."),t4r=l(),jt=a("div"),F(lx.$$.fragment),a4r=l(),x6e=a("p"),n4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),s4r=l(),wc=a("p"),l4r=o(`Note:
Loading a model from its configuration file does `),$6e=a("strong"),i4r=o("not"),d4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),c4r=o("from_pretrained()"),f4r=o(" to load the model weights."),m4r=l(),F(F4.$$.fragment),g4r=l(),Ir=a("div"),F(ix.$$.fragment),h4r=l(),k6e=a("p"),p4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),u4r=l(),hn=a("p"),_4r=o("The model class to instantiate is selected based on the "),S6e=a("code"),b4r=o("model_type"),v4r=o(` property of the config object (either
passed as an argument or loaded from `),R6e=a("code"),F4r=o("pretrained_model_name_or_path"),T4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(":"),C4r=l(),B6e=a("ul"),T4=a("li"),I6e=a("strong"),w4r=o("tapas"),A4r=o(" \u2014 "),CU=a("a"),y4r=o("TFTapasForQuestionAnswering"),L4r=o(" (TAPAS model)"),x4r=l(),F(M4.$$.fragment),JNe=l(),Ac=a("h2"),E4=a("a"),q6e=a("span"),F(dx.$$.fragment),$4r=l(),N6e=a("span"),k4r=o("TFAutoModelForTokenClassification"),YNe=l(),dr=a("div"),F(cx.$$.fragment),S4r=l(),yc=a("p"),R4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wU=a("a"),P4r=o("from_pretrained()"),B4r=o(" class method or the "),AU=a("a"),I4r=o("from_config()"),q4r=o(` class
method.`),N4r=l(),fx=a("p"),j4r=o("This class cannot be instantiated directly using "),j6e=a("code"),D4r=o("__init__()"),G4r=o(" (throws an error)."),O4r=l(),Dt=a("div"),F(mx.$$.fragment),V4r=l(),D6e=a("p"),X4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),z4r=l(),Lc=a("p"),W4r=o(`Note:
Loading a model from its configuration file does `),G6e=a("strong"),Q4r=o("not"),H4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),U4r=o("from_pretrained()"),J4r=o(" to load the model weights."),Y4r=l(),F(C4.$$.fragment),K4r=l(),qr=a("div"),F(gx.$$.fragment),Z4r=l(),O6e=a("p"),eEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oEr=l(),pn=a("p"),rEr=o("The model class to instantiate is selected based on the "),V6e=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),X6e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),de=a("ul"),w4=a("li"),W6e=a("strong"),cEr=o("albert"),fEr=o(" \u2014 "),LU=a("a"),mEr=o("TFAlbertForTokenClassification"),gEr=o(" (ALBERT model)"),hEr=l(),A4=a("li"),Q6e=a("strong"),pEr=o("bert"),uEr=o(" \u2014 "),xU=a("a"),_Er=o("TFBertForTokenClassification"),bEr=o(" (BERT model)"),vEr=l(),y4=a("li"),H6e=a("strong"),FEr=o("camembert"),TEr=o(" \u2014 "),$U=a("a"),MEr=o("TFCamembertForTokenClassification"),EEr=o(" (CamemBERT model)"),CEr=l(),L4=a("li"),U6e=a("strong"),wEr=o("convbert"),AEr=o(" \u2014 "),kU=a("a"),yEr=o("TFConvBertForTokenClassification"),LEr=o(" (ConvBERT model)"),xEr=l(),x4=a("li"),J6e=a("strong"),$Er=o("deberta"),kEr=o(" \u2014 "),SU=a("a"),SEr=o("TFDebertaForTokenClassification"),REr=o(" (DeBERTa model)"),PEr=l(),$4=a("li"),Y6e=a("strong"),BEr=o("deberta-v2"),IEr=o(" \u2014 "),RU=a("a"),qEr=o("TFDebertaV2ForTokenClassification"),NEr=o(" (DeBERTa-v2 model)"),jEr=l(),k4=a("li"),K6e=a("strong"),DEr=o("distilbert"),GEr=o(" \u2014 "),PU=a("a"),OEr=o("TFDistilBertForTokenClassification"),VEr=o(" (DistilBERT model)"),XEr=l(),S4=a("li"),Z6e=a("strong"),zEr=o("electra"),WEr=o(" \u2014 "),BU=a("a"),QEr=o("TFElectraForTokenClassification"),HEr=o(" (ELECTRA model)"),UEr=l(),R4=a("li"),eTe=a("strong"),JEr=o("flaubert"),YEr=o(" \u2014 "),IU=a("a"),KEr=o("TFFlaubertForTokenClassification"),ZEr=o(" (FlauBERT model)"),eCr=l(),P4=a("li"),oTe=a("strong"),oCr=o("funnel"),rCr=o(" \u2014 "),qU=a("a"),tCr=o("TFFunnelForTokenClassification"),aCr=o(" (Funnel Transformer model)"),nCr=l(),B4=a("li"),rTe=a("strong"),sCr=o("layoutlm"),lCr=o(" \u2014 "),NU=a("a"),iCr=o("TFLayoutLMForTokenClassification"),dCr=o(" (LayoutLM model)"),cCr=l(),I4=a("li"),tTe=a("strong"),fCr=o("longformer"),mCr=o(" \u2014 "),jU=a("a"),gCr=o("TFLongformerForTokenClassification"),hCr=o(" (Longformer model)"),pCr=l(),q4=a("li"),aTe=a("strong"),uCr=o("mobilebert"),_Cr=o(" \u2014 "),DU=a("a"),bCr=o("TFMobileBertForTokenClassification"),vCr=o(" (MobileBERT model)"),FCr=l(),N4=a("li"),nTe=a("strong"),TCr=o("mpnet"),MCr=o(" \u2014 "),GU=a("a"),ECr=o("TFMPNetForTokenClassification"),CCr=o(" (MPNet model)"),wCr=l(),j4=a("li"),sTe=a("strong"),ACr=o("rembert"),yCr=o(" \u2014 "),OU=a("a"),LCr=o("TFRemBertForTokenClassification"),xCr=o(" (RemBERT model)"),$Cr=l(),D4=a("li"),lTe=a("strong"),kCr=o("roberta"),SCr=o(" \u2014 "),VU=a("a"),RCr=o("TFRobertaForTokenClassification"),PCr=o(" (RoBERTa model)"),BCr=l(),G4=a("li"),iTe=a("strong"),ICr=o("roformer"),qCr=o(" \u2014 "),XU=a("a"),NCr=o("TFRoFormerForTokenClassification"),jCr=o(" (RoFormer model)"),DCr=l(),O4=a("li"),dTe=a("strong"),GCr=o("xlm"),OCr=o(" \u2014 "),zU=a("a"),VCr=o("TFXLMForTokenClassification"),XCr=o(" (XLM model)"),zCr=l(),V4=a("li"),cTe=a("strong"),WCr=o("xlm-roberta"),QCr=o(" \u2014 "),WU=a("a"),HCr=o("TFXLMRobertaForTokenClassification"),UCr=o(" (XLM-RoBERTa model)"),JCr=l(),X4=a("li"),fTe=a("strong"),YCr=o("xlnet"),KCr=o(" \u2014 "),QU=a("a"),ZCr=o("TFXLNetForTokenClassification"),e5r=o(" (XLNet model)"),o5r=l(),F(z4.$$.fragment),KNe=l(),xc=a("h2"),W4=a("a"),mTe=a("span"),F(hx.$$.fragment),r5r=l(),gTe=a("span"),t5r=o("TFAutoModelForQuestionAnswering"),ZNe=l(),cr=a("div"),F(px.$$.fragment),a5r=l(),$c=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HU=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),UU=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),ux=a("p"),f5r=o("This class cannot be instantiated directly using "),hTe=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),Gt=a("div"),F(_x.$$.fragment),p5r=l(),pTe=a("p"),u5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_5r=l(),kc=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),v5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),F(Q4.$$.fragment),C5r=l(),Nr=a("div"),F(bx.$$.fragment),w5r=l(),_Te=a("p"),A5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y5r=l(),un=a("p"),L5r=o("The model class to instantiate is selected based on the "),bTe=a("code"),x5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(":"),B5r=l(),ce=a("ul"),H4=a("li"),TTe=a("strong"),I5r=o("albert"),q5r=o(" \u2014 "),YU=a("a"),N5r=o("TFAlbertForQuestionAnswering"),j5r=o(" (ALBERT model)"),D5r=l(),U4=a("li"),MTe=a("strong"),G5r=o("bert"),O5r=o(" \u2014 "),KU=a("a"),V5r=o("TFBertForQuestionAnswering"),X5r=o(" (BERT model)"),z5r=l(),J4=a("li"),ETe=a("strong"),W5r=o("camembert"),Q5r=o(" \u2014 "),ZU=a("a"),H5r=o("TFCamembertForQuestionAnswering"),U5r=o(" (CamemBERT model)"),J5r=l(),Y4=a("li"),CTe=a("strong"),Y5r=o("convbert"),K5r=o(" \u2014 "),eJ=a("a"),Z5r=o("TFConvBertForQuestionAnswering"),e3r=o(" (ConvBERT model)"),o3r=l(),K4=a("li"),wTe=a("strong"),r3r=o("deberta"),t3r=o(" \u2014 "),oJ=a("a"),a3r=o("TFDebertaForQuestionAnswering"),n3r=o(" (DeBERTa model)"),s3r=l(),Z4=a("li"),ATe=a("strong"),l3r=o("deberta-v2"),i3r=o(" \u2014 "),rJ=a("a"),d3r=o("TFDebertaV2ForQuestionAnswering"),c3r=o(" (DeBERTa-v2 model)"),f3r=l(),eE=a("li"),yTe=a("strong"),m3r=o("distilbert"),g3r=o(" \u2014 "),tJ=a("a"),h3r=o("TFDistilBertForQuestionAnswering"),p3r=o(" (DistilBERT model)"),u3r=l(),oE=a("li"),LTe=a("strong"),_3r=o("electra"),b3r=o(" \u2014 "),aJ=a("a"),v3r=o("TFElectraForQuestionAnswering"),F3r=o(" (ELECTRA model)"),T3r=l(),rE=a("li"),xTe=a("strong"),M3r=o("flaubert"),E3r=o(" \u2014 "),nJ=a("a"),C3r=o("TFFlaubertForQuestionAnsweringSimple"),w3r=o(" (FlauBERT model)"),A3r=l(),tE=a("li"),$Te=a("strong"),y3r=o("funnel"),L3r=o(" \u2014 "),sJ=a("a"),x3r=o("TFFunnelForQuestionAnswering"),$3r=o(" (Funnel Transformer model)"),k3r=l(),aE=a("li"),kTe=a("strong"),S3r=o("gptj"),R3r=o(" \u2014 "),lJ=a("a"),P3r=o("TFGPTJForQuestionAnswering"),B3r=o(" (GPT-J model)"),I3r=l(),nE=a("li"),STe=a("strong"),q3r=o("longformer"),N3r=o(" \u2014 "),iJ=a("a"),j3r=o("TFLongformerForQuestionAnswering"),D3r=o(" (Longformer model)"),G3r=l(),sE=a("li"),RTe=a("strong"),O3r=o("mobilebert"),V3r=o(" \u2014 "),dJ=a("a"),X3r=o("TFMobileBertForQuestionAnswering"),z3r=o(" (MobileBERT model)"),W3r=l(),lE=a("li"),PTe=a("strong"),Q3r=o("mpnet"),H3r=o(" \u2014 "),cJ=a("a"),U3r=o("TFMPNetForQuestionAnswering"),J3r=o(" (MPNet model)"),Y3r=l(),iE=a("li"),BTe=a("strong"),K3r=o("rembert"),Z3r=o(" \u2014 "),fJ=a("a"),ewr=o("TFRemBertForQuestionAnswering"),owr=o(" (RemBERT model)"),rwr=l(),dE=a("li"),ITe=a("strong"),twr=o("roberta"),awr=o(" \u2014 "),mJ=a("a"),nwr=o("TFRobertaForQuestionAnswering"),swr=o(" (RoBERTa model)"),lwr=l(),cE=a("li"),qTe=a("strong"),iwr=o("roformer"),dwr=o(" \u2014 "),gJ=a("a"),cwr=o("TFRoFormerForQuestionAnswering"),fwr=o(" (RoFormer model)"),mwr=l(),fE=a("li"),NTe=a("strong"),gwr=o("xlm"),hwr=o(" \u2014 "),hJ=a("a"),pwr=o("TFXLMForQuestionAnsweringSimple"),uwr=o(" (XLM model)"),_wr=l(),mE=a("li"),jTe=a("strong"),bwr=o("xlm-roberta"),vwr=o(" \u2014 "),pJ=a("a"),Fwr=o("TFXLMRobertaForQuestionAnswering"),Twr=o(" (XLM-RoBERTa model)"),Mwr=l(),gE=a("li"),DTe=a("strong"),Ewr=o("xlnet"),Cwr=o(" \u2014 "),uJ=a("a"),wwr=o("TFXLNetForQuestionAnsweringSimple"),Awr=o(" (XLNet model)"),ywr=l(),F(hE.$$.fragment),eje=l(),Sc=a("h2"),pE=a("a"),GTe=a("span"),F(vx.$$.fragment),Lwr=l(),OTe=a("span"),xwr=o("TFAutoModelForVision2Seq"),oje=l(),fr=a("div"),F(Fx.$$.fragment),$wr=l(),Rc=a("p"),kwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_J=a("a"),Swr=o("from_pretrained()"),Rwr=o(" class method or the "),bJ=a("a"),Pwr=o("from_config()"),Bwr=o(` class
method.`),Iwr=l(),Tx=a("p"),qwr=o("This class cannot be instantiated directly using "),VTe=a("code"),Nwr=o("__init__()"),jwr=o(" (throws an error)."),Dwr=l(),Ot=a("div"),F(Mx.$$.fragment),Gwr=l(),XTe=a("p"),Owr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vwr=l(),Pc=a("p"),Xwr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),zwr=o("not"),Wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),Qwr=o("from_pretrained()"),Hwr=o(" to load the model weights."),Uwr=l(),F(uE.$$.fragment),Jwr=l(),jr=a("div"),F(Ex.$$.fragment),Ywr=l(),WTe=a("p"),Kwr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zwr=l(),_n=a("p"),eAr=o("The model class to instantiate is selected based on the "),QTe=a("code"),oAr=o("model_type"),rAr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(":"),lAr=l(),JTe=a("ul"),_E=a("li"),YTe=a("strong"),iAr=o("vision-encoder-decoder"),dAr=o(" \u2014 "),FJ=a("a"),cAr=o("TFVisionEncoderDecoderModel"),fAr=o(" (Vision Encoder decoder model)"),mAr=l(),F(bE.$$.fragment),rje=l(),Bc=a("h2"),vE=a("a"),KTe=a("span"),F(Cx.$$.fragment),gAr=l(),ZTe=a("span"),hAr=o("TFAutoModelForSpeechSeq2Seq"),tje=l(),mr=a("div"),F(wx.$$.fragment),pAr=l(),Ic=a("p"),uAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TJ=a("a"),_Ar=o("from_pretrained()"),bAr=o(" class method or the "),MJ=a("a"),vAr=o("from_config()"),FAr=o(` class
method.`),TAr=l(),Ax=a("p"),MAr=o("This class cannot be instantiated directly using "),e8e=a("code"),EAr=o("__init__()"),CAr=o(" (throws an error)."),wAr=l(),Vt=a("div"),F(yx.$$.fragment),AAr=l(),o8e=a("p"),yAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LAr=l(),qc=a("p"),xAr=o(`Note:
Loading a model from its configuration file does `),r8e=a("strong"),$Ar=o("not"),kAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),SAr=o("from_pretrained()"),RAr=o(" to load the model weights."),PAr=l(),F(FE.$$.fragment),BAr=l(),Dr=a("div"),F(Lx.$$.fragment),IAr=l(),t8e=a("p"),qAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NAr=l(),bn=a("p"),jAr=o("The model class to instantiate is selected based on the "),a8e=a("code"),DAr=o("model_type"),GAr=o(` property of the config object (either
passed as an argument or loaded from `),n8e=a("code"),OAr=o("pretrained_model_name_or_path"),VAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=a("code"),XAr=o("pretrained_model_name_or_path"),zAr=o(":"),WAr=l(),l8e=a("ul"),TE=a("li"),i8e=a("strong"),QAr=o("speech_to_text"),HAr=o(" \u2014 "),CJ=a("a"),UAr=o("TFSpeech2TextForConditionalGeneration"),JAr=o(" (Speech2Text model)"),YAr=l(),F(ME.$$.fragment),aje=l(),Nc=a("h2"),EE=a("a"),d8e=a("span"),F(xx.$$.fragment),KAr=l(),c8e=a("span"),ZAr=o("FlaxAutoModel"),nje=l(),gr=a("div"),F($x.$$.fragment),e0r=l(),jc=a("p"),o0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wJ=a("a"),r0r=o("from_pretrained()"),t0r=o(" class method or the "),AJ=a("a"),a0r=o("from_config()"),n0r=o(` class
method.`),s0r=l(),kx=a("p"),l0r=o("This class cannot be instantiated directly using "),f8e=a("code"),i0r=o("__init__()"),d0r=o(" (throws an error)."),c0r=l(),Xt=a("div"),F(Sx.$$.fragment),f0r=l(),m8e=a("p"),m0r=o("Instantiates one of the base model classes of the library from a configuration."),g0r=l(),Dc=a("p"),h0r=o(`Note:
Loading a model from its configuration file does `),g8e=a("strong"),p0r=o("not"),u0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),_0r=o("from_pretrained()"),b0r=o(" to load the model weights."),v0r=l(),F(CE.$$.fragment),F0r=l(),Gr=a("div"),F(Rx.$$.fragment),T0r=l(),h8e=a("p"),M0r=o("Instantiate one of the base model classes of the library from a pretrained model."),E0r=l(),vn=a("p"),C0r=o("The model class to instantiate is selected based on the "),p8e=a("code"),w0r=o("model_type"),A0r=o(` property of the config object (either
passed as an argument or loaded from `),u8e=a("code"),y0r=o("pretrained_model_name_or_path"),L0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),x0r=o("pretrained_model_name_or_path"),$0r=o(":"),k0r=l(),te=a("ul"),wE=a("li"),b8e=a("strong"),S0r=o("albert"),R0r=o(" \u2014 "),LJ=a("a"),P0r=o("FlaxAlbertModel"),B0r=o(" (ALBERT model)"),I0r=l(),AE=a("li"),v8e=a("strong"),q0r=o("bart"),N0r=o(" \u2014 "),xJ=a("a"),j0r=o("FlaxBartModel"),D0r=o(" (BART model)"),G0r=l(),yE=a("li"),F8e=a("strong"),O0r=o("beit"),V0r=o(" \u2014 "),$J=a("a"),X0r=o("FlaxBeitModel"),z0r=o(" (BEiT model)"),W0r=l(),LE=a("li"),T8e=a("strong"),Q0r=o("bert"),H0r=o(" \u2014 "),kJ=a("a"),U0r=o("FlaxBertModel"),J0r=o(" (BERT model)"),Y0r=l(),xE=a("li"),M8e=a("strong"),K0r=o("big_bird"),Z0r=o(" \u2014 "),SJ=a("a"),eyr=o("FlaxBigBirdModel"),oyr=o(" (BigBird model)"),ryr=l(),$E=a("li"),E8e=a("strong"),tyr=o("blenderbot"),ayr=o(" \u2014 "),RJ=a("a"),nyr=o("FlaxBlenderbotModel"),syr=o(" (Blenderbot model)"),lyr=l(),kE=a("li"),C8e=a("strong"),iyr=o("blenderbot-small"),dyr=o(" \u2014 "),PJ=a("a"),cyr=o("FlaxBlenderbotSmallModel"),fyr=o(" (BlenderbotSmall model)"),myr=l(),SE=a("li"),w8e=a("strong"),gyr=o("clip"),hyr=o(" \u2014 "),BJ=a("a"),pyr=o("FlaxCLIPModel"),uyr=o(" (CLIP model)"),_yr=l(),RE=a("li"),A8e=a("strong"),byr=o("distilbert"),vyr=o(" \u2014 "),IJ=a("a"),Fyr=o("FlaxDistilBertModel"),Tyr=o(" (DistilBERT model)"),Myr=l(),PE=a("li"),y8e=a("strong"),Eyr=o("electra"),Cyr=o(" \u2014 "),qJ=a("a"),wyr=o("FlaxElectraModel"),Ayr=o(" (ELECTRA model)"),yyr=l(),BE=a("li"),L8e=a("strong"),Lyr=o("gpt2"),xyr=o(" \u2014 "),NJ=a("a"),$yr=o("FlaxGPT2Model"),kyr=o(" (OpenAI GPT-2 model)"),Syr=l(),IE=a("li"),x8e=a("strong"),Ryr=o("gpt_neo"),Pyr=o(" \u2014 "),jJ=a("a"),Byr=o("FlaxGPTNeoModel"),Iyr=o(" (GPT Neo model)"),qyr=l(),qE=a("li"),$8e=a("strong"),Nyr=o("gptj"),jyr=o(" \u2014 "),DJ=a("a"),Dyr=o("FlaxGPTJModel"),Gyr=o(" (GPT-J model)"),Oyr=l(),NE=a("li"),k8e=a("strong"),Vyr=o("marian"),Xyr=o(" \u2014 "),GJ=a("a"),zyr=o("FlaxMarianModel"),Wyr=o(" (Marian model)"),Qyr=l(),jE=a("li"),S8e=a("strong"),Hyr=o("mbart"),Uyr=o(" \u2014 "),OJ=a("a"),Jyr=o("FlaxMBartModel"),Yyr=o(" (mBART model)"),Kyr=l(),DE=a("li"),R8e=a("strong"),Zyr=o("mt5"),eLr=o(" \u2014 "),VJ=a("a"),oLr=o("FlaxMT5Model"),rLr=o(" (mT5 model)"),tLr=l(),GE=a("li"),P8e=a("strong"),aLr=o("pegasus"),nLr=o(" \u2014 "),XJ=a("a"),sLr=o("FlaxPegasusModel"),lLr=o(" (Pegasus model)"),iLr=l(),OE=a("li"),B8e=a("strong"),dLr=o("roberta"),cLr=o(" \u2014 "),zJ=a("a"),fLr=o("FlaxRobertaModel"),mLr=o(" (RoBERTa model)"),gLr=l(),VE=a("li"),I8e=a("strong"),hLr=o("roformer"),pLr=o(" \u2014 "),WJ=a("a"),uLr=o("FlaxRoFormerModel"),_Lr=o(" (RoFormer model)"),bLr=l(),XE=a("li"),q8e=a("strong"),vLr=o("t5"),FLr=o(" \u2014 "),QJ=a("a"),TLr=o("FlaxT5Model"),MLr=o(" (T5 model)"),ELr=l(),zE=a("li"),N8e=a("strong"),CLr=o("vision-text-dual-encoder"),wLr=o(" \u2014 "),HJ=a("a"),ALr=o("FlaxVisionTextDualEncoderModel"),yLr=o(" (VisionTextDualEncoder model)"),LLr=l(),WE=a("li"),j8e=a("strong"),xLr=o("vit"),$Lr=o(" \u2014 "),UJ=a("a"),kLr=o("FlaxViTModel"),SLr=o(" (ViT model)"),RLr=l(),QE=a("li"),D8e=a("strong"),PLr=o("wav2vec2"),BLr=o(" \u2014 "),JJ=a("a"),ILr=o("FlaxWav2Vec2Model"),qLr=o(" (Wav2Vec2 model)"),NLr=l(),HE=a("li"),G8e=a("strong"),jLr=o("xglm"),DLr=o(" \u2014 "),YJ=a("a"),GLr=o("FlaxXGLMModel"),OLr=o(" (XGLM model)"),VLr=l(),UE=a("li"),O8e=a("strong"),XLr=o("xlm-roberta"),zLr=o(" \u2014 "),KJ=a("a"),WLr=o("FlaxXLMRobertaModel"),QLr=o(" (XLM-RoBERTa model)"),HLr=l(),F(JE.$$.fragment),sje=l(),Gc=a("h2"),YE=a("a"),V8e=a("span"),F(Px.$$.fragment),ULr=l(),X8e=a("span"),JLr=o("FlaxAutoModelForCausalLM"),lje=l(),hr=a("div"),F(Bx.$$.fragment),YLr=l(),Oc=a("p"),KLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=a("a"),ZLr=o("from_pretrained()"),exr=o(" class method or the "),eY=a("a"),oxr=o("from_config()"),rxr=o(` class
method.`),txr=l(),Ix=a("p"),axr=o("This class cannot be instantiated directly using "),z8e=a("code"),nxr=o("__init__()"),sxr=o(" (throws an error)."),lxr=l(),zt=a("div"),F(qx.$$.fragment),ixr=l(),W8e=a("p"),dxr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cxr=l(),Vc=a("p"),fxr=o(`Note:
Loading a model from its configuration file does `),Q8e=a("strong"),mxr=o("not"),gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),hxr=o("from_pretrained()"),pxr=o(" to load the model weights."),uxr=l(),F(KE.$$.fragment),_xr=l(),Or=a("div"),F(Nx.$$.fragment),bxr=l(),H8e=a("p"),vxr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fxr=l(),Fn=a("p"),Txr=o("The model class to instantiate is selected based on the "),U8e=a("code"),Mxr=o("model_type"),Exr=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),Axr=o("pretrained_model_name_or_path"),yxr=o(":"),Lxr=l(),Re=a("ul"),ZE=a("li"),K8e=a("strong"),xxr=o("bart"),$xr=o(" \u2014 "),rY=a("a"),kxr=o("FlaxBartForCausalLM"),Sxr=o(" (BART model)"),Rxr=l(),eC=a("li"),Z8e=a("strong"),Pxr=o("bert"),Bxr=o(" \u2014 "),tY=a("a"),Ixr=o("FlaxBertForCausalLM"),qxr=o(" (BERT model)"),Nxr=l(),oC=a("li"),e7e=a("strong"),jxr=o("big_bird"),Dxr=o(" \u2014 "),aY=a("a"),Gxr=o("FlaxBigBirdForCausalLM"),Oxr=o(" (BigBird model)"),Vxr=l(),rC=a("li"),o7e=a("strong"),Xxr=o("electra"),zxr=o(" \u2014 "),nY=a("a"),Wxr=o("FlaxElectraForCausalLM"),Qxr=o(" (ELECTRA model)"),Hxr=l(),tC=a("li"),r7e=a("strong"),Uxr=o("gpt2"),Jxr=o(" \u2014 "),sY=a("a"),Yxr=o("FlaxGPT2LMHeadModel"),Kxr=o(" (OpenAI GPT-2 model)"),Zxr=l(),aC=a("li"),t7e=a("strong"),e9r=o("gpt_neo"),o9r=o(" \u2014 "),lY=a("a"),r9r=o("FlaxGPTNeoForCausalLM"),t9r=o(" (GPT Neo model)"),a9r=l(),nC=a("li"),a7e=a("strong"),n9r=o("gptj"),s9r=o(" \u2014 "),iY=a("a"),l9r=o("FlaxGPTJForCausalLM"),i9r=o(" (GPT-J model)"),d9r=l(),sC=a("li"),n7e=a("strong"),c9r=o("roberta"),f9r=o(" \u2014 "),dY=a("a"),m9r=o("FlaxRobertaForCausalLM"),g9r=o(" (RoBERTa model)"),h9r=l(),lC=a("li"),s7e=a("strong"),p9r=o("xglm"),u9r=o(" \u2014 "),cY=a("a"),_9r=o("FlaxXGLMForCausalLM"),b9r=o(" (XGLM model)"),v9r=l(),F(iC.$$.fragment),ije=l(),Xc=a("h2"),dC=a("a"),l7e=a("span"),F(jx.$$.fragment),F9r=l(),i7e=a("span"),T9r=o("FlaxAutoModelForPreTraining"),dje=l(),pr=a("div"),F(Dx.$$.fragment),M9r=l(),zc=a("p"),E9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fY=a("a"),C9r=o("from_pretrained()"),w9r=o(" class method or the "),mY=a("a"),A9r=o("from_config()"),y9r=o(` class
method.`),L9r=l(),Gx=a("p"),x9r=o("This class cannot be instantiated directly using "),d7e=a("code"),$9r=o("__init__()"),k9r=o(" (throws an error)."),S9r=l(),Wt=a("div"),F(Ox.$$.fragment),R9r=l(),c7e=a("p"),P9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B9r=l(),Wc=a("p"),I9r=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),q9r=o("not"),N9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),j9r=o("from_pretrained()"),D9r=o(" to load the model weights."),G9r=l(),F(cC.$$.fragment),O9r=l(),Vr=a("div"),F(Vx.$$.fragment),V9r=l(),m7e=a("p"),X9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z9r=l(),Tn=a("p"),W9r=o("The model class to instantiate is selected based on the "),g7e=a("code"),Q9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(":"),Z9r=l(),Me=a("ul"),fC=a("li"),u7e=a("strong"),e$r=o("albert"),o$r=o(" \u2014 "),hY=a("a"),r$r=o("FlaxAlbertForPreTraining"),t$r=o(" (ALBERT model)"),a$r=l(),mC=a("li"),_7e=a("strong"),n$r=o("bart"),s$r=o(" \u2014 "),pY=a("a"),l$r=o("FlaxBartForConditionalGeneration"),i$r=o(" (BART model)"),d$r=l(),gC=a("li"),b7e=a("strong"),c$r=o("bert"),f$r=o(" \u2014 "),uY=a("a"),m$r=o("FlaxBertForPreTraining"),g$r=o(" (BERT model)"),h$r=l(),hC=a("li"),v7e=a("strong"),p$r=o("big_bird"),u$r=o(" \u2014 "),_Y=a("a"),_$r=o("FlaxBigBirdForPreTraining"),b$r=o(" (BigBird model)"),v$r=l(),pC=a("li"),F7e=a("strong"),F$r=o("electra"),T$r=o(" \u2014 "),bY=a("a"),M$r=o("FlaxElectraForPreTraining"),E$r=o(" (ELECTRA model)"),C$r=l(),uC=a("li"),T7e=a("strong"),w$r=o("mbart"),A$r=o(" \u2014 "),vY=a("a"),y$r=o("FlaxMBartForConditionalGeneration"),L$r=o(" (mBART model)"),x$r=l(),_C=a("li"),M7e=a("strong"),$$r=o("mt5"),k$r=o(" \u2014 "),FY=a("a"),S$r=o("FlaxMT5ForConditionalGeneration"),R$r=o(" (mT5 model)"),P$r=l(),bC=a("li"),E7e=a("strong"),B$r=o("roberta"),I$r=o(" \u2014 "),TY=a("a"),q$r=o("FlaxRobertaForMaskedLM"),N$r=o(" (RoBERTa model)"),j$r=l(),vC=a("li"),C7e=a("strong"),D$r=o("roformer"),G$r=o(" \u2014 "),MY=a("a"),O$r=o("FlaxRoFormerForMaskedLM"),V$r=o(" (RoFormer model)"),X$r=l(),FC=a("li"),w7e=a("strong"),z$r=o("t5"),W$r=o(" \u2014 "),EY=a("a"),Q$r=o("FlaxT5ForConditionalGeneration"),H$r=o(" (T5 model)"),U$r=l(),TC=a("li"),A7e=a("strong"),J$r=o("wav2vec2"),Y$r=o(" \u2014 "),CY=a("a"),K$r=o("FlaxWav2Vec2ForPreTraining"),Z$r=o(" (Wav2Vec2 model)"),ekr=l(),MC=a("li"),y7e=a("strong"),okr=o("xlm-roberta"),rkr=o(" \u2014 "),wY=a("a"),tkr=o("FlaxXLMRobertaForMaskedLM"),akr=o(" (XLM-RoBERTa model)"),nkr=l(),F(EC.$$.fragment),cje=l(),Qc=a("h2"),CC=a("a"),L7e=a("span"),F(Xx.$$.fragment),skr=l(),x7e=a("span"),lkr=o("FlaxAutoModelForMaskedLM"),fje=l(),ur=a("div"),F(zx.$$.fragment),ikr=l(),Hc=a("p"),dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=a("a"),ckr=o("from_pretrained()"),fkr=o(" class method or the "),yY=a("a"),mkr=o("from_config()"),gkr=o(` class
method.`),hkr=l(),Wx=a("p"),pkr=o("This class cannot be instantiated directly using "),$7e=a("code"),ukr=o("__init__()"),_kr=o(" (throws an error)."),bkr=l(),Qt=a("div"),F(Qx.$$.fragment),vkr=l(),k7e=a("p"),Fkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tkr=l(),Uc=a("p"),Mkr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),Ekr=o("not"),Ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),wkr=o("from_pretrained()"),Akr=o(" to load the model weights."),ykr=l(),F(wC.$$.fragment),Lkr=l(),Xr=a("div"),F(Hx.$$.fragment),xkr=l(),R7e=a("p"),$kr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kkr=l(),Mn=a("p"),Skr=o("The model class to instantiate is selected based on the "),P7e=a("code"),Rkr=o("model_type"),Pkr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),Bkr=o("pretrained_model_name_or_path"),Ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),qkr=o("pretrained_model_name_or_path"),Nkr=o(":"),jkr=l(),Le=a("ul"),AC=a("li"),q7e=a("strong"),Dkr=o("albert"),Gkr=o(" \u2014 "),xY=a("a"),Okr=o("FlaxAlbertForMaskedLM"),Vkr=o(" (ALBERT model)"),Xkr=l(),yC=a("li"),N7e=a("strong"),zkr=o("bart"),Wkr=o(" \u2014 "),$Y=a("a"),Qkr=o("FlaxBartForConditionalGeneration"),Hkr=o(" (BART model)"),Ukr=l(),LC=a("li"),j7e=a("strong"),Jkr=o("bert"),Ykr=o(" \u2014 "),kY=a("a"),Kkr=o("FlaxBertForMaskedLM"),Zkr=o(" (BERT model)"),eSr=l(),xC=a("li"),D7e=a("strong"),oSr=o("big_bird"),rSr=o(" \u2014 "),SY=a("a"),tSr=o("FlaxBigBirdForMaskedLM"),aSr=o(" (BigBird model)"),nSr=l(),$C=a("li"),G7e=a("strong"),sSr=o("distilbert"),lSr=o(" \u2014 "),RY=a("a"),iSr=o("FlaxDistilBertForMaskedLM"),dSr=o(" (DistilBERT model)"),cSr=l(),kC=a("li"),O7e=a("strong"),fSr=o("electra"),mSr=o(" \u2014 "),PY=a("a"),gSr=o("FlaxElectraForMaskedLM"),hSr=o(" (ELECTRA model)"),pSr=l(),SC=a("li"),V7e=a("strong"),uSr=o("mbart"),_Sr=o(" \u2014 "),BY=a("a"),bSr=o("FlaxMBartForConditionalGeneration"),vSr=o(" (mBART model)"),FSr=l(),RC=a("li"),X7e=a("strong"),TSr=o("roberta"),MSr=o(" \u2014 "),IY=a("a"),ESr=o("FlaxRobertaForMaskedLM"),CSr=o(" (RoBERTa model)"),wSr=l(),PC=a("li"),z7e=a("strong"),ASr=o("roformer"),ySr=o(" \u2014 "),qY=a("a"),LSr=o("FlaxRoFormerForMaskedLM"),xSr=o(" (RoFormer model)"),$Sr=l(),BC=a("li"),W7e=a("strong"),kSr=o("xlm-roberta"),SSr=o(" \u2014 "),NY=a("a"),RSr=o("FlaxXLMRobertaForMaskedLM"),PSr=o(" (XLM-RoBERTa model)"),BSr=l(),F(IC.$$.fragment),mje=l(),Jc=a("h2"),qC=a("a"),Q7e=a("span"),F(Ux.$$.fragment),ISr=l(),H7e=a("span"),qSr=o("FlaxAutoModelForSeq2SeqLM"),gje=l(),_r=a("div"),F(Jx.$$.fragment),NSr=l(),Yc=a("p"),jSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=a("a"),DSr=o("from_pretrained()"),GSr=o(" class method or the "),DY=a("a"),OSr=o("from_config()"),VSr=o(` class
method.`),XSr=l(),Yx=a("p"),zSr=o("This class cannot be instantiated directly using "),U7e=a("code"),WSr=o("__init__()"),QSr=o(" (throws an error)."),HSr=l(),Ht=a("div"),F(Kx.$$.fragment),USr=l(),J7e=a("p"),JSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YSr=l(),Kc=a("p"),KSr=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),ZSr=o("not"),eRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),oRr=o("from_pretrained()"),rRr=o(" to load the model weights."),tRr=l(),F(NC.$$.fragment),aRr=l(),zr=a("div"),F(Zx.$$.fragment),nRr=l(),K7e=a("p"),sRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lRr=l(),En=a("p"),iRr=o("The model class to instantiate is selected based on the "),Z7e=a("code"),dRr=o("model_type"),cRr=o(` property of the config object (either
passed as an argument or loaded from `),eMe=a("code"),fRr=o("pretrained_model_name_or_path"),mRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(":"),pRr=l(),Pe=a("ul"),jC=a("li"),rMe=a("strong"),uRr=o("bart"),_Rr=o(" \u2014 "),OY=a("a"),bRr=o("FlaxBartForConditionalGeneration"),vRr=o(" (BART model)"),FRr=l(),DC=a("li"),tMe=a("strong"),TRr=o("blenderbot"),MRr=o(" \u2014 "),VY=a("a"),ERr=o("FlaxBlenderbotForConditionalGeneration"),CRr=o(" (Blenderbot model)"),wRr=l(),GC=a("li"),aMe=a("strong"),ARr=o("blenderbot-small"),yRr=o(" \u2014 "),XY=a("a"),LRr=o("FlaxBlenderbotSmallForConditionalGeneration"),xRr=o(" (BlenderbotSmall model)"),$Rr=l(),OC=a("li"),nMe=a("strong"),kRr=o("encoder-decoder"),SRr=o(" \u2014 "),zY=a("a"),RRr=o("FlaxEncoderDecoderModel"),PRr=o(" (Encoder decoder model)"),BRr=l(),VC=a("li"),sMe=a("strong"),IRr=o("marian"),qRr=o(" \u2014 "),WY=a("a"),NRr=o("FlaxMarianMTModel"),jRr=o(" (Marian model)"),DRr=l(),XC=a("li"),lMe=a("strong"),GRr=o("mbart"),ORr=o(" \u2014 "),QY=a("a"),VRr=o("FlaxMBartForConditionalGeneration"),XRr=o(" (mBART model)"),zRr=l(),zC=a("li"),iMe=a("strong"),WRr=o("mt5"),QRr=o(" \u2014 "),HY=a("a"),HRr=o("FlaxMT5ForConditionalGeneration"),URr=o(" (mT5 model)"),JRr=l(),WC=a("li"),dMe=a("strong"),YRr=o("pegasus"),KRr=o(" \u2014 "),UY=a("a"),ZRr=o("FlaxPegasusForConditionalGeneration"),ePr=o(" (Pegasus model)"),oPr=l(),QC=a("li"),cMe=a("strong"),rPr=o("t5"),tPr=o(" \u2014 "),JY=a("a"),aPr=o("FlaxT5ForConditionalGeneration"),nPr=o(" (T5 model)"),sPr=l(),F(HC.$$.fragment),hje=l(),Zc=a("h2"),UC=a("a"),fMe=a("span"),F(e9.$$.fragment),lPr=l(),mMe=a("span"),iPr=o("FlaxAutoModelForSequenceClassification"),pje=l(),br=a("div"),F(o9.$$.fragment),dPr=l(),ef=a("p"),cPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=a("a"),fPr=o("from_pretrained()"),mPr=o(" class method or the "),KY=a("a"),gPr=o("from_config()"),hPr=o(` class
method.`),pPr=l(),r9=a("p"),uPr=o("This class cannot be instantiated directly using "),gMe=a("code"),_Pr=o("__init__()"),bPr=o(" (throws an error)."),vPr=l(),Ut=a("div"),F(t9.$$.fragment),FPr=l(),hMe=a("p"),TPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MPr=l(),of=a("p"),EPr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),CPr=o("not"),wPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),APr=o("from_pretrained()"),yPr=o(" to load the model weights."),LPr=l(),F(JC.$$.fragment),xPr=l(),Wr=a("div"),F(a9.$$.fragment),$Pr=l(),uMe=a("p"),kPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SPr=l(),Cn=a("p"),RPr=o("The model class to instantiate is selected based on the "),_Me=a("code"),PPr=o("model_type"),BPr=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),IPr=o("pretrained_model_name_or_path"),qPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),NPr=o("pretrained_model_name_or_path"),jPr=o(":"),DPr=l(),xe=a("ul"),YC=a("li"),FMe=a("strong"),GPr=o("albert"),OPr=o(" \u2014 "),eK=a("a"),VPr=o("FlaxAlbertForSequenceClassification"),XPr=o(" (ALBERT model)"),zPr=l(),KC=a("li"),TMe=a("strong"),WPr=o("bart"),QPr=o(" \u2014 "),oK=a("a"),HPr=o("FlaxBartForSequenceClassification"),UPr=o(" (BART model)"),JPr=l(),ZC=a("li"),MMe=a("strong"),YPr=o("bert"),KPr=o(" \u2014 "),rK=a("a"),ZPr=o("FlaxBertForSequenceClassification"),eBr=o(" (BERT model)"),oBr=l(),e5=a("li"),EMe=a("strong"),rBr=o("big_bird"),tBr=o(" \u2014 "),tK=a("a"),aBr=o("FlaxBigBirdForSequenceClassification"),nBr=o(" (BigBird model)"),sBr=l(),o5=a("li"),CMe=a("strong"),lBr=o("distilbert"),iBr=o(" \u2014 "),aK=a("a"),dBr=o("FlaxDistilBertForSequenceClassification"),cBr=o(" (DistilBERT model)"),fBr=l(),r5=a("li"),wMe=a("strong"),mBr=o("electra"),gBr=o(" \u2014 "),nK=a("a"),hBr=o("FlaxElectraForSequenceClassification"),pBr=o(" (ELECTRA model)"),uBr=l(),t5=a("li"),AMe=a("strong"),_Br=o("mbart"),bBr=o(" \u2014 "),sK=a("a"),vBr=o("FlaxMBartForSequenceClassification"),FBr=o(" (mBART model)"),TBr=l(),a5=a("li"),yMe=a("strong"),MBr=o("roberta"),EBr=o(" \u2014 "),lK=a("a"),CBr=o("FlaxRobertaForSequenceClassification"),wBr=o(" (RoBERTa model)"),ABr=l(),n5=a("li"),LMe=a("strong"),yBr=o("roformer"),LBr=o(" \u2014 "),iK=a("a"),xBr=o("FlaxRoFormerForSequenceClassification"),$Br=o(" (RoFormer model)"),kBr=l(),s5=a("li"),xMe=a("strong"),SBr=o("xlm-roberta"),RBr=o(" \u2014 "),dK=a("a"),PBr=o("FlaxXLMRobertaForSequenceClassification"),BBr=o(" (XLM-RoBERTa model)"),IBr=l(),F(l5.$$.fragment),uje=l(),rf=a("h2"),i5=a("a"),$Me=a("span"),F(n9.$$.fragment),qBr=l(),kMe=a("span"),NBr=o("FlaxAutoModelForQuestionAnswering"),_je=l(),vr=a("div"),F(s9.$$.fragment),jBr=l(),tf=a("p"),DBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=a("a"),GBr=o("from_pretrained()"),OBr=o(" class method or the "),fK=a("a"),VBr=o("from_config()"),XBr=o(` class
method.`),zBr=l(),l9=a("p"),WBr=o("This class cannot be instantiated directly using "),SMe=a("code"),QBr=o("__init__()"),HBr=o(" (throws an error)."),UBr=l(),Jt=a("div"),F(i9.$$.fragment),JBr=l(),RMe=a("p"),YBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KBr=l(),af=a("p"),ZBr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),eIr=o("not"),oIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),rIr=o("from_pretrained()"),tIr=o(" to load the model weights."),aIr=l(),F(d5.$$.fragment),nIr=l(),Qr=a("div"),F(d9.$$.fragment),sIr=l(),BMe=a("p"),lIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iIr=l(),wn=a("p"),dIr=o("The model class to instantiate is selected based on the "),IMe=a("code"),cIr=o("model_type"),fIr=o(` property of the config object (either
passed as an argument or loaded from `),qMe=a("code"),mIr=o("pretrained_model_name_or_path"),gIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),hIr=o("pretrained_model_name_or_path"),pIr=o(":"),uIr=l(),$e=a("ul"),c5=a("li"),jMe=a("strong"),_Ir=o("albert"),bIr=o(" \u2014 "),gK=a("a"),vIr=o("FlaxAlbertForQuestionAnswering"),FIr=o(" (ALBERT model)"),TIr=l(),f5=a("li"),DMe=a("strong"),MIr=o("bart"),EIr=o(" \u2014 "),hK=a("a"),CIr=o("FlaxBartForQuestionAnswering"),wIr=o(" (BART model)"),AIr=l(),m5=a("li"),GMe=a("strong"),yIr=o("bert"),LIr=o(" \u2014 "),pK=a("a"),xIr=o("FlaxBertForQuestionAnswering"),$Ir=o(" (BERT model)"),kIr=l(),g5=a("li"),OMe=a("strong"),SIr=o("big_bird"),RIr=o(" \u2014 "),uK=a("a"),PIr=o("FlaxBigBirdForQuestionAnswering"),BIr=o(" (BigBird model)"),IIr=l(),h5=a("li"),VMe=a("strong"),qIr=o("distilbert"),NIr=o(" \u2014 "),_K=a("a"),jIr=o("FlaxDistilBertForQuestionAnswering"),DIr=o(" (DistilBERT model)"),GIr=l(),p5=a("li"),XMe=a("strong"),OIr=o("electra"),VIr=o(" \u2014 "),bK=a("a"),XIr=o("FlaxElectraForQuestionAnswering"),zIr=o(" (ELECTRA model)"),WIr=l(),u5=a("li"),zMe=a("strong"),QIr=o("mbart"),HIr=o(" \u2014 "),vK=a("a"),UIr=o("FlaxMBartForQuestionAnswering"),JIr=o(" (mBART model)"),YIr=l(),_5=a("li"),WMe=a("strong"),KIr=o("roberta"),ZIr=o(" \u2014 "),FK=a("a"),eqr=o("FlaxRobertaForQuestionAnswering"),oqr=o(" (RoBERTa model)"),rqr=l(),b5=a("li"),QMe=a("strong"),tqr=o("roformer"),aqr=o(" \u2014 "),TK=a("a"),nqr=o("FlaxRoFormerForQuestionAnswering"),sqr=o(" (RoFormer model)"),lqr=l(),v5=a("li"),HMe=a("strong"),iqr=o("xlm-roberta"),dqr=o(" \u2014 "),MK=a("a"),cqr=o("FlaxXLMRobertaForQuestionAnswering"),fqr=o(" (XLM-RoBERTa model)"),mqr=l(),F(F5.$$.fragment),bje=l(),nf=a("h2"),T5=a("a"),UMe=a("span"),F(c9.$$.fragment),gqr=l(),JMe=a("span"),hqr=o("FlaxAutoModelForTokenClassification"),vje=l(),Fr=a("div"),F(f9.$$.fragment),pqr=l(),sf=a("p"),uqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=a("a"),_qr=o("from_pretrained()"),bqr=o(" class method or the "),CK=a("a"),vqr=o("from_config()"),Fqr=o(` class
method.`),Tqr=l(),m9=a("p"),Mqr=o("This class cannot be instantiated directly using "),YMe=a("code"),Eqr=o("__init__()"),Cqr=o(" (throws an error)."),wqr=l(),Yt=a("div"),F(g9.$$.fragment),Aqr=l(),KMe=a("p"),yqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lqr=l(),lf=a("p"),xqr=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),$qr=o("not"),kqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),Sqr=o("from_pretrained()"),Rqr=o(" to load the model weights."),Pqr=l(),F(M5.$$.fragment),Bqr=l(),Hr=a("div"),F(h9.$$.fragment),Iqr=l(),e4e=a("p"),qqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nqr=l(),An=a("p"),jqr=o("The model class to instantiate is selected based on the "),o4e=a("code"),Dqr=o("model_type"),Gqr=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),Oqr=o("pretrained_model_name_or_path"),Vqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),Xqr=o("pretrained_model_name_or_path"),zqr=o(":"),Wqr=l(),De=a("ul"),E5=a("li"),a4e=a("strong"),Qqr=o("albert"),Hqr=o(" \u2014 "),AK=a("a"),Uqr=o("FlaxAlbertForTokenClassification"),Jqr=o(" (ALBERT model)"),Yqr=l(),C5=a("li"),n4e=a("strong"),Kqr=o("bert"),Zqr=o(" \u2014 "),yK=a("a"),eNr=o("FlaxBertForTokenClassification"),oNr=o(" (BERT model)"),rNr=l(),w5=a("li"),s4e=a("strong"),tNr=o("big_bird"),aNr=o(" \u2014 "),LK=a("a"),nNr=o("FlaxBigBirdForTokenClassification"),sNr=o(" (BigBird model)"),lNr=l(),A5=a("li"),l4e=a("strong"),iNr=o("distilbert"),dNr=o(" \u2014 "),xK=a("a"),cNr=o("FlaxDistilBertForTokenClassification"),fNr=o(" (DistilBERT model)"),mNr=l(),y5=a("li"),i4e=a("strong"),gNr=o("electra"),hNr=o(" \u2014 "),$K=a("a"),pNr=o("FlaxElectraForTokenClassification"),uNr=o(" (ELECTRA model)"),_Nr=l(),L5=a("li"),d4e=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),kK=a("a"),FNr=o("FlaxRobertaForTokenClassification"),TNr=o(" (RoBERTa model)"),MNr=l(),x5=a("li"),c4e=a("strong"),ENr=o("roformer"),CNr=o(" \u2014 "),SK=a("a"),wNr=o("FlaxRoFormerForTokenClassification"),ANr=o(" (RoFormer model)"),yNr=l(),$5=a("li"),f4e=a("strong"),LNr=o("xlm-roberta"),xNr=o(" \u2014 "),RK=a("a"),$Nr=o("FlaxXLMRobertaForTokenClassification"),kNr=o(" (XLM-RoBERTa model)"),SNr=l(),F(k5.$$.fragment),Fje=l(),df=a("h2"),S5=a("a"),m4e=a("span"),F(p9.$$.fragment),RNr=l(),g4e=a("span"),PNr=o("FlaxAutoModelForMultipleChoice"),Tje=l(),Tr=a("div"),F(u9.$$.fragment),BNr=l(),cf=a("p"),INr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=a("a"),qNr=o("from_pretrained()"),NNr=o(" class method or the "),BK=a("a"),jNr=o("from_config()"),DNr=o(` class
method.`),GNr=l(),_9=a("p"),ONr=o("This class cannot be instantiated directly using "),h4e=a("code"),VNr=o("__init__()"),XNr=o(" (throws an error)."),zNr=l(),Kt=a("div"),F(b9.$$.fragment),WNr=l(),p4e=a("p"),QNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HNr=l(),ff=a("p"),UNr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),JNr=o("not"),YNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),KNr=o("from_pretrained()"),ZNr=o(" to load the model weights."),ejr=l(),F(R5.$$.fragment),ojr=l(),Ur=a("div"),F(v9.$$.fragment),rjr=l(),_4e=a("p"),tjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ajr=l(),yn=a("p"),njr=o("The model class to instantiate is selected based on the "),b4e=a("code"),sjr=o("model_type"),ljr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),ijr=o("pretrained_model_name_or_path"),djr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),cjr=o("pretrained_model_name_or_path"),fjr=o(":"),mjr=l(),Ge=a("ul"),P5=a("li"),T4e=a("strong"),gjr=o("albert"),hjr=o(" \u2014 "),qK=a("a"),pjr=o("FlaxAlbertForMultipleChoice"),ujr=o(" (ALBERT model)"),_jr=l(),B5=a("li"),M4e=a("strong"),bjr=o("bert"),vjr=o(" \u2014 "),NK=a("a"),Fjr=o("FlaxBertForMultipleChoice"),Tjr=o(" (BERT model)"),Mjr=l(),I5=a("li"),E4e=a("strong"),Ejr=o("big_bird"),Cjr=o(" \u2014 "),jK=a("a"),wjr=o("FlaxBigBirdForMultipleChoice"),Ajr=o(" (BigBird model)"),yjr=l(),q5=a("li"),C4e=a("strong"),Ljr=o("distilbert"),xjr=o(" \u2014 "),DK=a("a"),$jr=o("FlaxDistilBertForMultipleChoice"),kjr=o(" (DistilBERT model)"),Sjr=l(),N5=a("li"),w4e=a("strong"),Rjr=o("electra"),Pjr=o(" \u2014 "),GK=a("a"),Bjr=o("FlaxElectraForMultipleChoice"),Ijr=o(" (ELECTRA model)"),qjr=l(),j5=a("li"),A4e=a("strong"),Njr=o("roberta"),jjr=o(" \u2014 "),OK=a("a"),Djr=o("FlaxRobertaForMultipleChoice"),Gjr=o(" (RoBERTa model)"),Ojr=l(),D5=a("li"),y4e=a("strong"),Vjr=o("roformer"),Xjr=o(" \u2014 "),VK=a("a"),zjr=o("FlaxRoFormerForMultipleChoice"),Wjr=o(" (RoFormer model)"),Qjr=l(),G5=a("li"),L4e=a("strong"),Hjr=o("xlm-roberta"),Ujr=o(" \u2014 "),XK=a("a"),Jjr=o("FlaxXLMRobertaForMultipleChoice"),Yjr=o(" (XLM-RoBERTa model)"),Kjr=l(),F(O5.$$.fragment),Mje=l(),mf=a("h2"),V5=a("a"),x4e=a("span"),F(F9.$$.fragment),Zjr=l(),$4e=a("span"),eDr=o("FlaxAutoModelForNextSentencePrediction"),Eje=l(),Mr=a("div"),F(T9.$$.fragment),oDr=l(),gf=a("p"),rDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=a("a"),tDr=o("from_pretrained()"),aDr=o(" class method or the "),WK=a("a"),nDr=o("from_config()"),sDr=o(` class
method.`),lDr=l(),M9=a("p"),iDr=o("This class cannot be instantiated directly using "),k4e=a("code"),dDr=o("__init__()"),cDr=o(" (throws an error)."),fDr=l(),Zt=a("div"),F(E9.$$.fragment),mDr=l(),S4e=a("p"),gDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hDr=l(),hf=a("p"),pDr=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),uDr=o("not"),_Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),bDr=o("from_pretrained()"),vDr=o(" to load the model weights."),FDr=l(),F(X5.$$.fragment),TDr=l(),Jr=a("div"),F(C9.$$.fragment),MDr=l(),P4e=a("p"),EDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CDr=l(),Ln=a("p"),wDr=o("The model class to instantiate is selected based on the "),B4e=a("code"),ADr=o("model_type"),yDr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),LDr=o("pretrained_model_name_or_path"),xDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(":"),SDr=l(),N4e=a("ul"),z5=a("li"),j4e=a("strong"),RDr=o("bert"),PDr=o(" \u2014 "),HK=a("a"),BDr=o("FlaxBertForNextSentencePrediction"),IDr=o(" (BERT model)"),qDr=l(),F(W5.$$.fragment),Cje=l(),pf=a("h2"),Q5=a("a"),D4e=a("span"),F(w9.$$.fragment),NDr=l(),G4e=a("span"),jDr=o("FlaxAutoModelForImageClassification"),wje=l(),Er=a("div"),F(A9.$$.fragment),DDr=l(),uf=a("p"),GDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=a("a"),ODr=o("from_pretrained()"),VDr=o(" class method or the "),JK=a("a"),XDr=o("from_config()"),zDr=o(` class
method.`),WDr=l(),y9=a("p"),QDr=o("This class cannot be instantiated directly using "),O4e=a("code"),HDr=o("__init__()"),UDr=o(" (throws an error)."),JDr=l(),ea=a("div"),F(L9.$$.fragment),YDr=l(),V4e=a("p"),KDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZDr=l(),_f=a("p"),eGr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),oGr=o("not"),rGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),tGr=o("from_pretrained()"),aGr=o(" to load the model weights."),nGr=l(),F(H5.$$.fragment),sGr=l(),Yr=a("div"),F(x9.$$.fragment),lGr=l(),z4e=a("p"),iGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dGr=l(),xn=a("p"),cGr=o("The model class to instantiate is selected based on the "),W4e=a("code"),fGr=o("model_type"),mGr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),gGr=o("pretrained_model_name_or_path"),hGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),pGr=o("pretrained_model_name_or_path"),uGr=o(":"),_Gr=l(),$9=a("ul"),U5=a("li"),U4e=a("strong"),bGr=o("beit"),vGr=o(" \u2014 "),KK=a("a"),FGr=o("FlaxBeitForImageClassification"),TGr=o(" (BEiT model)"),MGr=l(),J5=a("li"),J4e=a("strong"),EGr=o("vit"),CGr=o(" \u2014 "),ZK=a("a"),wGr=o("FlaxViTForImageClassification"),AGr=o(" (ViT model)"),yGr=l(),F(Y5.$$.fragment),Aje=l(),bf=a("h2"),K5=a("a"),Y4e=a("span"),F(k9.$$.fragment),LGr=l(),K4e=a("span"),xGr=o("FlaxAutoModelForVision2Seq"),yje=l(),Cr=a("div"),F(S9.$$.fragment),$Gr=l(),vf=a("p"),kGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=a("a"),SGr=o("from_pretrained()"),RGr=o(" class method or the "),oZ=a("a"),PGr=o("from_config()"),BGr=o(` class
method.`),IGr=l(),R9=a("p"),qGr=o("This class cannot be instantiated directly using "),Z4e=a("code"),NGr=o("__init__()"),jGr=o(" (throws an error)."),DGr=l(),oa=a("div"),F(P9.$$.fragment),GGr=l(),eEe=a("p"),OGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VGr=l(),Ff=a("p"),XGr=o(`Note:
Loading a model from its configuration file does `),oEe=a("strong"),zGr=o("not"),WGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),QGr=o("from_pretrained()"),HGr=o(" to load the model weights."),UGr=l(),F(Z5.$$.fragment),JGr=l(),Kr=a("div"),F(B9.$$.fragment),YGr=l(),rEe=a("p"),KGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZGr=l(),$n=a("p"),eOr=o("The model class to instantiate is selected based on the "),tEe=a("code"),oOr=o("model_type"),rOr=o(` property of the config object (either
passed as an argument or loaded from `),aEe=a("code"),tOr=o("pretrained_model_name_or_path"),aOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=a("code"),nOr=o("pretrained_model_name_or_path"),sOr=o(":"),lOr=l(),sEe=a("ul"),e3=a("li"),lEe=a("strong"),iOr=o("vision-encoder-decoder"),dOr=o(" \u2014 "),tZ=a("a"),cOr=o("FlaxVisionEncoderDecoderModel"),fOr=o(" (Vision Encoder decoder model)"),mOr=l(),F(o3.$$.fragment),this.h()},l(f){const _=yxt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var I9=s(p);m=n(I9,"A",{id:!0,class:!0,href:!0});var iEe=s(m);u=n(iEe,"SPAN",{});var dEe=s(u);T(d.$$.fragment,dEe),dEe.forEach(t),iEe.forEach(t),h=i(I9),Eo=n(I9,"SPAN",{});var cEe=s(Eo);_i=r(cEe,"Auto Classes"),cEe.forEach(t),I9.forEach(t),Cf=i(f),at=n(f,"P",{});var q9=s(at);bi=r(q9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),vi=n(q9,"CODE",{});var fEe=s(vi);MA=r(fEe,"from_pretrained()"),fEe.forEach(t),wf=r(q9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),q9.forEach(t),je=i(f),We=n(f,"P",{});var kn=s(We);Fi=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var mEe=s(Sn);EA=r(mEe,"AutoConfig"),mEe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var gEe=s(Pn);CA=r(gEe,"AutoModel"),gEe.forEach(t),Ti=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var hEe=s(Bn);wA=r(hEe,"AutoTokenizer"),hEe.forEach(t),Mi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),Af=i(f),T(La.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var N9=s(Ae);U$=r(N9,"will create a model that is an instance of "),Ei=n(N9,"A",{href:!0});var pEe=s(Ei);J$=r(pEe,"BertModel"),pEe.forEach(t),Y$=r(N9,"."),N9.forEach(t),Co=i(f),xa=n(f,"P",{});var j9=s(xa);K$=r(j9,"There is one class of "),yf=n(j9,"CODE",{});var uEe=s(yf);Z$=r(uEe,"AutoModel"),uEe.forEach(t),NGe=r(j9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),j9.forEach(t),Eqe=i(f),Ci=n(f,"H2",{class:!0});var D9=s(Ci);Lf=n(D9,"A",{id:!0,class:!0,href:!0});var _Ee=s(Lf);Kee=n(_Ee,"SPAN",{});var bEe=s(Kee);T(AA.$$.fragment,bEe),bEe.forEach(t),_Ee.forEach(t),jGe=i(D9),Zee=n(D9,"SPAN",{});var vEe=s(Zee);DGe=r(vEe,"Extending the Auto Classes"),vEe.forEach(t),D9.forEach(t),Cqe=i(f),In=n(f,"P",{});var Tf=s(In);GGe=r(Tf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eoe=n(Tf,"CODE",{});var FEe=s(eoe);OGe=r(FEe,"NewModel"),FEe.forEach(t),VGe=r(Tf,", make sure you have a "),ooe=n(Tf,"CODE",{});var TEe=s(ooe);XGe=r(TEe,"NewModelConfig"),TEe.forEach(t),zGe=r(Tf,` then you can add those to the auto
classes like this:`),Tf.forEach(t),wqe=i(f),T(yA.$$.fragment,f),Aqe=i(f),ek=n(f,"P",{});var MEe=s(ek);WGe=r(MEe,"You will then be able to use the auto classes like you would usually do!"),MEe.forEach(t),yqe=i(f),T(xf.$$.fragment,f),Lqe=i(f),wi=n(f,"H2",{class:!0});var G9=s(wi);$f=n(G9,"A",{id:!0,class:!0,href:!0});var EEe=s($f);roe=n(EEe,"SPAN",{});var CEe=s(roe);T(LA.$$.fragment,CEe),CEe.forEach(t),EEe.forEach(t),QGe=i(G9),toe=n(G9,"SPAN",{});var wEe=s(toe);HGe=r(wEe,"AutoConfig"),wEe.forEach(t),G9.forEach(t),xqe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(xA.$$.fragment,rt),UGe=i(rt),$A=n(rt,"P",{});var O9=s($A);JGe=r(O9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=n(O9,"A",{href:!0});var AEe=s(ok);YGe=r(AEe,"from_pretrained()"),AEe.forEach(t),KGe=r(O9," class method."),O9.forEach(t),ZGe=i(rt),kA=n(rt,"P",{});var V9=s(kA);eOe=r(V9,"This class cannot be instantiated directly using "),aoe=n(V9,"CODE",{});var yEe=s(aoe);oOe=r(yEe,"__init__()"),yEe.forEach(t),rOe=r(V9," (throws an error)."),V9.forEach(t),tOe=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(SA.$$.fragment,tt),aOe=i(tt),noe=n(tt,"P",{});var LEe=s(noe);nOe=r(LEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),LEe.forEach(t),sOe=i(tt),Ai=n(tt,"P",{});var Mf=s(Ai);lOe=r(Mf,"The configuration class to instantiate is selected based on the "),soe=n(Mf,"CODE",{});var xEe=s(soe);iOe=r(xEe,"model_type"),xEe.forEach(t),dOe=r(Mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),loe=n(Mf,"CODE",{});var $Ee=s(loe);cOe=r($Ee,"pretrained_model_name_or_path"),$Ee.forEach(t),fOe=r(Mf,":"),Mf.forEach(t),mOe=i(tt),y=n(tt,"UL",{});var L=s(y);kf=n(L,"LI",{});var r3=s(kf);ioe=n(r3,"STRONG",{});var kEe=s(ioe);gOe=r(kEe,"albert"),kEe.forEach(t),hOe=r(r3," \u2014 "),rk=n(r3,"A",{href:!0});var SEe=s(rk);pOe=r(SEe,"AlbertConfig"),SEe.forEach(t),uOe=r(r3," (ALBERT model)"),r3.forEach(t),_Oe=i(L),Sf=n(L,"LI",{});var t3=s(Sf);doe=n(t3,"STRONG",{});var REe=s(doe);bOe=r(REe,"bart"),REe.forEach(t),vOe=r(t3," \u2014 "),tk=n(t3,"A",{href:!0});var PEe=s(tk);FOe=r(PEe,"BartConfig"),PEe.forEach(t),TOe=r(t3," (BART model)"),t3.forEach(t),MOe=i(L),Rf=n(L,"LI",{});var a3=s(Rf);coe=n(a3,"STRONG",{});var BEe=s(coe);EOe=r(BEe,"beit"),BEe.forEach(t),COe=r(a3," \u2014 "),ak=n(a3,"A",{href:!0});var IEe=s(ak);wOe=r(IEe,"BeitConfig"),IEe.forEach(t),AOe=r(a3," (BEiT model)"),a3.forEach(t),yOe=i(L),Pf=n(L,"LI",{});var n3=s(Pf);foe=n(n3,"STRONG",{});var qEe=s(foe);LOe=r(qEe,"bert"),qEe.forEach(t),xOe=r(n3," \u2014 "),nk=n(n3,"A",{href:!0});var NEe=s(nk);$Oe=r(NEe,"BertConfig"),NEe.forEach(t),kOe=r(n3," (BERT model)"),n3.forEach(t),SOe=i(L),Bf=n(L,"LI",{});var s3=s(Bf);moe=n(s3,"STRONG",{});var jEe=s(moe);ROe=r(jEe,"bert-generation"),jEe.forEach(t),POe=r(s3," \u2014 "),sk=n(s3,"A",{href:!0});var DEe=s(sk);BOe=r(DEe,"BertGenerationConfig"),DEe.forEach(t),IOe=r(s3," (Bert Generation model)"),s3.forEach(t),qOe=i(L),If=n(L,"LI",{});var l3=s(If);goe=n(l3,"STRONG",{});var GEe=s(goe);NOe=r(GEe,"big_bird"),GEe.forEach(t),jOe=r(l3," \u2014 "),lk=n(l3,"A",{href:!0});var OEe=s(lk);DOe=r(OEe,"BigBirdConfig"),OEe.forEach(t),GOe=r(l3," (BigBird model)"),l3.forEach(t),OOe=i(L),qf=n(L,"LI",{});var i3=s(qf);hoe=n(i3,"STRONG",{});var VEe=s(hoe);VOe=r(VEe,"bigbird_pegasus"),VEe.forEach(t),XOe=r(i3," \u2014 "),ik=n(i3,"A",{href:!0});var XEe=s(ik);zOe=r(XEe,"BigBirdPegasusConfig"),XEe.forEach(t),WOe=r(i3," (BigBirdPegasus model)"),i3.forEach(t),QOe=i(L),Nf=n(L,"LI",{});var d3=s(Nf);poe=n(d3,"STRONG",{});var zEe=s(poe);HOe=r(zEe,"blenderbot"),zEe.forEach(t),UOe=r(d3," \u2014 "),dk=n(d3,"A",{href:!0});var WEe=s(dk);JOe=r(WEe,"BlenderbotConfig"),WEe.forEach(t),YOe=r(d3," (Blenderbot model)"),d3.forEach(t),KOe=i(L),jf=n(L,"LI",{});var c3=s(jf);uoe=n(c3,"STRONG",{});var QEe=s(uoe);ZOe=r(QEe,"blenderbot-small"),QEe.forEach(t),eVe=r(c3," \u2014 "),ck=n(c3,"A",{href:!0});var HEe=s(ck);oVe=r(HEe,"BlenderbotSmallConfig"),HEe.forEach(t),rVe=r(c3," (BlenderbotSmall model)"),c3.forEach(t),tVe=i(L),Df=n(L,"LI",{});var f3=s(Df);_oe=n(f3,"STRONG",{});var UEe=s(_oe);aVe=r(UEe,"camembert"),UEe.forEach(t),nVe=r(f3," \u2014 "),fk=n(f3,"A",{href:!0});var JEe=s(fk);sVe=r(JEe,"CamembertConfig"),JEe.forEach(t),lVe=r(f3," (CamemBERT model)"),f3.forEach(t),iVe=i(L),Gf=n(L,"LI",{});var m3=s(Gf);boe=n(m3,"STRONG",{});var YEe=s(boe);dVe=r(YEe,"canine"),YEe.forEach(t),cVe=r(m3," \u2014 "),mk=n(m3,"A",{href:!0});var KEe=s(mk);fVe=r(KEe,"CanineConfig"),KEe.forEach(t),mVe=r(m3," (Canine model)"),m3.forEach(t),gVe=i(L),Of=n(L,"LI",{});var g3=s(Of);voe=n(g3,"STRONG",{});var ZEe=s(voe);hVe=r(ZEe,"clip"),ZEe.forEach(t),pVe=r(g3," \u2014 "),gk=n(g3,"A",{href:!0});var eCe=s(gk);uVe=r(eCe,"CLIPConfig"),eCe.forEach(t),_Ve=r(g3," (CLIP model)"),g3.forEach(t),bVe=i(L),Vf=n(L,"LI",{});var h3=s(Vf);Foe=n(h3,"STRONG",{});var oCe=s(Foe);vVe=r(oCe,"convbert"),oCe.forEach(t),FVe=r(h3," \u2014 "),hk=n(h3,"A",{href:!0});var rCe=s(hk);TVe=r(rCe,"ConvBertConfig"),rCe.forEach(t),MVe=r(h3," (ConvBERT model)"),h3.forEach(t),EVe=i(L),Xf=n(L,"LI",{});var p3=s(Xf);Toe=n(p3,"STRONG",{});var tCe=s(Toe);CVe=r(tCe,"convnext"),tCe.forEach(t),wVe=r(p3," \u2014 "),pk=n(p3,"A",{href:!0});var aCe=s(pk);AVe=r(aCe,"ConvNextConfig"),aCe.forEach(t),yVe=r(p3," (ConvNext model)"),p3.forEach(t),LVe=i(L),zf=n(L,"LI",{});var u3=s(zf);Moe=n(u3,"STRONG",{});var nCe=s(Moe);xVe=r(nCe,"ctrl"),nCe.forEach(t),$Ve=r(u3," \u2014 "),uk=n(u3,"A",{href:!0});var sCe=s(uk);kVe=r(sCe,"CTRLConfig"),sCe.forEach(t),SVe=r(u3," (CTRL model)"),u3.forEach(t),RVe=i(L),Wf=n(L,"LI",{});var _3=s(Wf);Eoe=n(_3,"STRONG",{});var lCe=s(Eoe);PVe=r(lCe,"data2vec-audio"),lCe.forEach(t),BVe=r(_3," \u2014 "),_k=n(_3,"A",{href:!0});var iCe=s(_k);IVe=r(iCe,"Data2VecAudioConfig"),iCe.forEach(t),qVe=r(_3," (Data2VecAudio model)"),_3.forEach(t),NVe=i(L),Qf=n(L,"LI",{});var b3=s(Qf);Coe=n(b3,"STRONG",{});var dCe=s(Coe);jVe=r(dCe,"data2vec-text"),dCe.forEach(t),DVe=r(b3," \u2014 "),bk=n(b3,"A",{href:!0});var cCe=s(bk);GVe=r(cCe,"Data2VecTextConfig"),cCe.forEach(t),OVe=r(b3," (Data2VecText model)"),b3.forEach(t),VVe=i(L),Hf=n(L,"LI",{});var v3=s(Hf);woe=n(v3,"STRONG",{});var fCe=s(woe);XVe=r(fCe,"data2vec-vision"),fCe.forEach(t),zVe=r(v3," \u2014 "),vk=n(v3,"A",{href:!0});var mCe=s(vk);WVe=r(mCe,"Data2VecVisionConfig"),mCe.forEach(t),QVe=r(v3," (Data2VecVision model)"),v3.forEach(t),HVe=i(L),Uf=n(L,"LI",{});var F3=s(Uf);Aoe=n(F3,"STRONG",{});var gCe=s(Aoe);UVe=r(gCe,"deberta"),gCe.forEach(t),JVe=r(F3," \u2014 "),Fk=n(F3,"A",{href:!0});var hCe=s(Fk);YVe=r(hCe,"DebertaConfig"),hCe.forEach(t),KVe=r(F3," (DeBERTa model)"),F3.forEach(t),ZVe=i(L),Jf=n(L,"LI",{});var T3=s(Jf);yoe=n(T3,"STRONG",{});var pCe=s(yoe);eXe=r(pCe,"deberta-v2"),pCe.forEach(t),oXe=r(T3," \u2014 "),Tk=n(T3,"A",{href:!0});var uCe=s(Tk);rXe=r(uCe,"DebertaV2Config"),uCe.forEach(t),tXe=r(T3," (DeBERTa-v2 model)"),T3.forEach(t),aXe=i(L),Yf=n(L,"LI",{});var M3=s(Yf);Loe=n(M3,"STRONG",{});var _Ce=s(Loe);nXe=r(_Ce,"decision_transformer"),_Ce.forEach(t),sXe=r(M3," \u2014 "),Mk=n(M3,"A",{href:!0});var bCe=s(Mk);lXe=r(bCe,"DecisionTransformerConfig"),bCe.forEach(t),iXe=r(M3," (Decision Transformer model)"),M3.forEach(t),dXe=i(L),Kf=n(L,"LI",{});var E3=s(Kf);xoe=n(E3,"STRONG",{});var vCe=s(xoe);cXe=r(vCe,"deit"),vCe.forEach(t),fXe=r(E3," \u2014 "),Ek=n(E3,"A",{href:!0});var FCe=s(Ek);mXe=r(FCe,"DeiTConfig"),FCe.forEach(t),gXe=r(E3," (DeiT model)"),E3.forEach(t),hXe=i(L),Zf=n(L,"LI",{});var C3=s(Zf);$oe=n(C3,"STRONG",{});var TCe=s($oe);pXe=r(TCe,"detr"),TCe.forEach(t),uXe=r(C3," \u2014 "),Ck=n(C3,"A",{href:!0});var MCe=s(Ck);_Xe=r(MCe,"DetrConfig"),MCe.forEach(t),bXe=r(C3," (DETR model)"),C3.forEach(t),vXe=i(L),em=n(L,"LI",{});var w3=s(em);koe=n(w3,"STRONG",{});var hOr=s(koe);FXe=r(hOr,"distilbert"),hOr.forEach(t),TXe=r(w3," \u2014 "),wk=n(w3,"A",{href:!0});var pOr=s(wk);MXe=r(pOr,"DistilBertConfig"),pOr.forEach(t),EXe=r(w3," (DistilBERT model)"),w3.forEach(t),CXe=i(L),om=n(L,"LI",{});var ECe=s(om);Soe=n(ECe,"STRONG",{});var uOr=s(Soe);wXe=r(uOr,"dpr"),uOr.forEach(t),AXe=r(ECe," \u2014 "),Ak=n(ECe,"A",{href:!0});var _Or=s(Ak);yXe=r(_Or,"DPRConfig"),_Or.forEach(t),LXe=r(ECe," (DPR model)"),ECe.forEach(t),xXe=i(L),rm=n(L,"LI",{});var CCe=s(rm);Roe=n(CCe,"STRONG",{});var bOr=s(Roe);$Xe=r(bOr,"dpt"),bOr.forEach(t),kXe=r(CCe," \u2014 "),yk=n(CCe,"A",{href:!0});var vOr=s(yk);SXe=r(vOr,"DPTConfig"),vOr.forEach(t),RXe=r(CCe," (DPT model)"),CCe.forEach(t),PXe=i(L),tm=n(L,"LI",{});var wCe=s(tm);Poe=n(wCe,"STRONG",{});var FOr=s(Poe);BXe=r(FOr,"electra"),FOr.forEach(t),IXe=r(wCe," \u2014 "),Lk=n(wCe,"A",{href:!0});var TOr=s(Lk);qXe=r(TOr,"ElectraConfig"),TOr.forEach(t),NXe=r(wCe," (ELECTRA model)"),wCe.forEach(t),jXe=i(L),am=n(L,"LI",{});var ACe=s(am);Boe=n(ACe,"STRONG",{});var MOr=s(Boe);DXe=r(MOr,"encoder-decoder"),MOr.forEach(t),GXe=r(ACe," \u2014 "),xk=n(ACe,"A",{href:!0});var EOr=s(xk);OXe=r(EOr,"EncoderDecoderConfig"),EOr.forEach(t),VXe=r(ACe," (Encoder decoder model)"),ACe.forEach(t),XXe=i(L),nm=n(L,"LI",{});var yCe=s(nm);Ioe=n(yCe,"STRONG",{});var COr=s(Ioe);zXe=r(COr,"flaubert"),COr.forEach(t),WXe=r(yCe," \u2014 "),$k=n(yCe,"A",{href:!0});var wOr=s($k);QXe=r(wOr,"FlaubertConfig"),wOr.forEach(t),HXe=r(yCe," (FlauBERT model)"),yCe.forEach(t),UXe=i(L),sm=n(L,"LI",{});var LCe=s(sm);qoe=n(LCe,"STRONG",{});var AOr=s(qoe);JXe=r(AOr,"flava"),AOr.forEach(t),YXe=r(LCe," \u2014 "),kk=n(LCe,"A",{href:!0});var yOr=s(kk);KXe=r(yOr,"FlavaConfig"),yOr.forEach(t),ZXe=r(LCe," (Flava model)"),LCe.forEach(t),eze=i(L),lm=n(L,"LI",{});var xCe=s(lm);Noe=n(xCe,"STRONG",{});var LOr=s(Noe);oze=r(LOr,"fnet"),LOr.forEach(t),rze=r(xCe," \u2014 "),Sk=n(xCe,"A",{href:!0});var xOr=s(Sk);tze=r(xOr,"FNetConfig"),xOr.forEach(t),aze=r(xCe," (FNet model)"),xCe.forEach(t),nze=i(L),im=n(L,"LI",{});var $Ce=s(im);joe=n($Ce,"STRONG",{});var $Or=s(joe);sze=r($Or,"fsmt"),$Or.forEach(t),lze=r($Ce," \u2014 "),Rk=n($Ce,"A",{href:!0});var kOr=s(Rk);ize=r(kOr,"FSMTConfig"),kOr.forEach(t),dze=r($Ce," (FairSeq Machine-Translation model)"),$Ce.forEach(t),cze=i(L),dm=n(L,"LI",{});var kCe=s(dm);Doe=n(kCe,"STRONG",{});var SOr=s(Doe);fze=r(SOr,"funnel"),SOr.forEach(t),mze=r(kCe," \u2014 "),Pk=n(kCe,"A",{href:!0});var ROr=s(Pk);gze=r(ROr,"FunnelConfig"),ROr.forEach(t),hze=r(kCe," (Funnel Transformer model)"),kCe.forEach(t),pze=i(L),cm=n(L,"LI",{});var SCe=s(cm);Goe=n(SCe,"STRONG",{});var POr=s(Goe);uze=r(POr,"glpn"),POr.forEach(t),_ze=r(SCe," \u2014 "),Bk=n(SCe,"A",{href:!0});var BOr=s(Bk);bze=r(BOr,"GLPNConfig"),BOr.forEach(t),vze=r(SCe," (GLPN model)"),SCe.forEach(t),Fze=i(L),fm=n(L,"LI",{});var RCe=s(fm);Ooe=n(RCe,"STRONG",{});var IOr=s(Ooe);Tze=r(IOr,"gpt2"),IOr.forEach(t),Mze=r(RCe," \u2014 "),Ik=n(RCe,"A",{href:!0});var qOr=s(Ik);Eze=r(qOr,"GPT2Config"),qOr.forEach(t),Cze=r(RCe," (OpenAI GPT-2 model)"),RCe.forEach(t),wze=i(L),mm=n(L,"LI",{});var PCe=s(mm);Voe=n(PCe,"STRONG",{});var NOr=s(Voe);Aze=r(NOr,"gpt_neo"),NOr.forEach(t),yze=r(PCe," \u2014 "),qk=n(PCe,"A",{href:!0});var jOr=s(qk);Lze=r(jOr,"GPTNeoConfig"),jOr.forEach(t),xze=r(PCe," (GPT Neo model)"),PCe.forEach(t),$ze=i(L),gm=n(L,"LI",{});var BCe=s(gm);Xoe=n(BCe,"STRONG",{});var DOr=s(Xoe);kze=r(DOr,"gptj"),DOr.forEach(t),Sze=r(BCe," \u2014 "),Nk=n(BCe,"A",{href:!0});var GOr=s(Nk);Rze=r(GOr,"GPTJConfig"),GOr.forEach(t),Pze=r(BCe," (GPT-J model)"),BCe.forEach(t),Bze=i(L),hm=n(L,"LI",{});var ICe=s(hm);zoe=n(ICe,"STRONG",{});var OOr=s(zoe);Ize=r(OOr,"hubert"),OOr.forEach(t),qze=r(ICe," \u2014 "),jk=n(ICe,"A",{href:!0});var VOr=s(jk);Nze=r(VOr,"HubertConfig"),VOr.forEach(t),jze=r(ICe," (Hubert model)"),ICe.forEach(t),Dze=i(L),pm=n(L,"LI",{});var qCe=s(pm);Woe=n(qCe,"STRONG",{});var XOr=s(Woe);Gze=r(XOr,"ibert"),XOr.forEach(t),Oze=r(qCe," \u2014 "),Dk=n(qCe,"A",{href:!0});var zOr=s(Dk);Vze=r(zOr,"IBertConfig"),zOr.forEach(t),Xze=r(qCe," (I-BERT model)"),qCe.forEach(t),zze=i(L),um=n(L,"LI",{});var NCe=s(um);Qoe=n(NCe,"STRONG",{});var WOr=s(Qoe);Wze=r(WOr,"imagegpt"),WOr.forEach(t),Qze=r(NCe," \u2014 "),Gk=n(NCe,"A",{href:!0});var QOr=s(Gk);Hze=r(QOr,"ImageGPTConfig"),QOr.forEach(t),Uze=r(NCe," (ImageGPT model)"),NCe.forEach(t),Jze=i(L),_m=n(L,"LI",{});var jCe=s(_m);Hoe=n(jCe,"STRONG",{});var HOr=s(Hoe);Yze=r(HOr,"layoutlm"),HOr.forEach(t),Kze=r(jCe," \u2014 "),Ok=n(jCe,"A",{href:!0});var UOr=s(Ok);Zze=r(UOr,"LayoutLMConfig"),UOr.forEach(t),eWe=r(jCe," (LayoutLM model)"),jCe.forEach(t),oWe=i(L),bm=n(L,"LI",{});var DCe=s(bm);Uoe=n(DCe,"STRONG",{});var JOr=s(Uoe);rWe=r(JOr,"layoutlmv2"),JOr.forEach(t),tWe=r(DCe," \u2014 "),Vk=n(DCe,"A",{href:!0});var YOr=s(Vk);aWe=r(YOr,"LayoutLMv2Config"),YOr.forEach(t),nWe=r(DCe," (LayoutLMv2 model)"),DCe.forEach(t),sWe=i(L),vm=n(L,"LI",{});var GCe=s(vm);Joe=n(GCe,"STRONG",{});var KOr=s(Joe);lWe=r(KOr,"led"),KOr.forEach(t),iWe=r(GCe," \u2014 "),Xk=n(GCe,"A",{href:!0});var ZOr=s(Xk);dWe=r(ZOr,"LEDConfig"),ZOr.forEach(t),cWe=r(GCe," (LED model)"),GCe.forEach(t),fWe=i(L),Fm=n(L,"LI",{});var OCe=s(Fm);Yoe=n(OCe,"STRONG",{});var eVr=s(Yoe);mWe=r(eVr,"longformer"),eVr.forEach(t),gWe=r(OCe," \u2014 "),zk=n(OCe,"A",{href:!0});var oVr=s(zk);hWe=r(oVr,"LongformerConfig"),oVr.forEach(t),pWe=r(OCe," (Longformer model)"),OCe.forEach(t),uWe=i(L),Tm=n(L,"LI",{});var VCe=s(Tm);Koe=n(VCe,"STRONG",{});var rVr=s(Koe);_We=r(rVr,"luke"),rVr.forEach(t),bWe=r(VCe," \u2014 "),Wk=n(VCe,"A",{href:!0});var tVr=s(Wk);vWe=r(tVr,"LukeConfig"),tVr.forEach(t),FWe=r(VCe," (LUKE model)"),VCe.forEach(t),TWe=i(L),Mm=n(L,"LI",{});var XCe=s(Mm);Zoe=n(XCe,"STRONG",{});var aVr=s(Zoe);MWe=r(aVr,"lxmert"),aVr.forEach(t),EWe=r(XCe," \u2014 "),Qk=n(XCe,"A",{href:!0});var nVr=s(Qk);CWe=r(nVr,"LxmertConfig"),nVr.forEach(t),wWe=r(XCe," (LXMERT model)"),XCe.forEach(t),AWe=i(L),Em=n(L,"LI",{});var zCe=s(Em);ere=n(zCe,"STRONG",{});var sVr=s(ere);yWe=r(sVr,"m2m_100"),sVr.forEach(t),LWe=r(zCe," \u2014 "),Hk=n(zCe,"A",{href:!0});var lVr=s(Hk);xWe=r(lVr,"M2M100Config"),lVr.forEach(t),$We=r(zCe," (M2M100 model)"),zCe.forEach(t),kWe=i(L),Cm=n(L,"LI",{});var WCe=s(Cm);ore=n(WCe,"STRONG",{});var iVr=s(ore);SWe=r(iVr,"marian"),iVr.forEach(t),RWe=r(WCe," \u2014 "),Uk=n(WCe,"A",{href:!0});var dVr=s(Uk);PWe=r(dVr,"MarianConfig"),dVr.forEach(t),BWe=r(WCe," (Marian model)"),WCe.forEach(t),IWe=i(L),wm=n(L,"LI",{});var QCe=s(wm);rre=n(QCe,"STRONG",{});var cVr=s(rre);qWe=r(cVr,"maskformer"),cVr.forEach(t),NWe=r(QCe," \u2014 "),Jk=n(QCe,"A",{href:!0});var fVr=s(Jk);jWe=r(fVr,"MaskFormerConfig"),fVr.forEach(t),DWe=r(QCe," (MaskFormer model)"),QCe.forEach(t),GWe=i(L),Am=n(L,"LI",{});var HCe=s(Am);tre=n(HCe,"STRONG",{});var mVr=s(tre);OWe=r(mVr,"mbart"),mVr.forEach(t),VWe=r(HCe," \u2014 "),Yk=n(HCe,"A",{href:!0});var gVr=s(Yk);XWe=r(gVr,"MBartConfig"),gVr.forEach(t),zWe=r(HCe," (mBART model)"),HCe.forEach(t),WWe=i(L),ym=n(L,"LI",{});var UCe=s(ym);are=n(UCe,"STRONG",{});var hVr=s(are);QWe=r(hVr,"megatron-bert"),hVr.forEach(t),HWe=r(UCe," \u2014 "),Kk=n(UCe,"A",{href:!0});var pVr=s(Kk);UWe=r(pVr,"MegatronBertConfig"),pVr.forEach(t),JWe=r(UCe," (MegatronBert model)"),UCe.forEach(t),YWe=i(L),Lm=n(L,"LI",{});var JCe=s(Lm);nre=n(JCe,"STRONG",{});var uVr=s(nre);KWe=r(uVr,"mobilebert"),uVr.forEach(t),ZWe=r(JCe," \u2014 "),Zk=n(JCe,"A",{href:!0});var _Vr=s(Zk);eQe=r(_Vr,"MobileBertConfig"),_Vr.forEach(t),oQe=r(JCe," (MobileBERT model)"),JCe.forEach(t),rQe=i(L),xm=n(L,"LI",{});var YCe=s(xm);sre=n(YCe,"STRONG",{});var bVr=s(sre);tQe=r(bVr,"mpnet"),bVr.forEach(t),aQe=r(YCe," \u2014 "),eS=n(YCe,"A",{href:!0});var vVr=s(eS);nQe=r(vVr,"MPNetConfig"),vVr.forEach(t),sQe=r(YCe," (MPNet model)"),YCe.forEach(t),lQe=i(L),$m=n(L,"LI",{});var KCe=s($m);lre=n(KCe,"STRONG",{});var FVr=s(lre);iQe=r(FVr,"mt5"),FVr.forEach(t),dQe=r(KCe," \u2014 "),oS=n(KCe,"A",{href:!0});var TVr=s(oS);cQe=r(TVr,"MT5Config"),TVr.forEach(t),fQe=r(KCe," (mT5 model)"),KCe.forEach(t),mQe=i(L),km=n(L,"LI",{});var ZCe=s(km);ire=n(ZCe,"STRONG",{});var MVr=s(ire);gQe=r(MVr,"nystromformer"),MVr.forEach(t),hQe=r(ZCe," \u2014 "),rS=n(ZCe,"A",{href:!0});var EVr=s(rS);pQe=r(EVr,"NystromformerConfig"),EVr.forEach(t),uQe=r(ZCe," (Nystromformer model)"),ZCe.forEach(t),_Qe=i(L),Sm=n(L,"LI",{});var e5e=s(Sm);dre=n(e5e,"STRONG",{});var CVr=s(dre);bQe=r(CVr,"openai-gpt"),CVr.forEach(t),vQe=r(e5e," \u2014 "),tS=n(e5e,"A",{href:!0});var wVr=s(tS);FQe=r(wVr,"OpenAIGPTConfig"),wVr.forEach(t),TQe=r(e5e," (OpenAI GPT model)"),e5e.forEach(t),MQe=i(L),Rm=n(L,"LI",{});var o5e=s(Rm);cre=n(o5e,"STRONG",{});var AVr=s(cre);EQe=r(AVr,"opt"),AVr.forEach(t),CQe=r(o5e," \u2014 "),aS=n(o5e,"A",{href:!0});var yVr=s(aS);wQe=r(yVr,"OPTConfig"),yVr.forEach(t),AQe=r(o5e," (OPT model)"),o5e.forEach(t),yQe=i(L),Pm=n(L,"LI",{});var r5e=s(Pm);fre=n(r5e,"STRONG",{});var LVr=s(fre);LQe=r(LVr,"pegasus"),LVr.forEach(t),xQe=r(r5e," \u2014 "),nS=n(r5e,"A",{href:!0});var xVr=s(nS);$Qe=r(xVr,"PegasusConfig"),xVr.forEach(t),kQe=r(r5e," (Pegasus model)"),r5e.forEach(t),SQe=i(L),Bm=n(L,"LI",{});var t5e=s(Bm);mre=n(t5e,"STRONG",{});var $Vr=s(mre);RQe=r($Vr,"perceiver"),$Vr.forEach(t),PQe=r(t5e," \u2014 "),sS=n(t5e,"A",{href:!0});var kVr=s(sS);BQe=r(kVr,"PerceiverConfig"),kVr.forEach(t),IQe=r(t5e," (Perceiver model)"),t5e.forEach(t),qQe=i(L),Im=n(L,"LI",{});var a5e=s(Im);gre=n(a5e,"STRONG",{});var SVr=s(gre);NQe=r(SVr,"plbart"),SVr.forEach(t),jQe=r(a5e," \u2014 "),lS=n(a5e,"A",{href:!0});var RVr=s(lS);DQe=r(RVr,"PLBartConfig"),RVr.forEach(t),GQe=r(a5e," (PLBart model)"),a5e.forEach(t),OQe=i(L),qm=n(L,"LI",{});var n5e=s(qm);hre=n(n5e,"STRONG",{});var PVr=s(hre);VQe=r(PVr,"poolformer"),PVr.forEach(t),XQe=r(n5e," \u2014 "),iS=n(n5e,"A",{href:!0});var BVr=s(iS);zQe=r(BVr,"PoolFormerConfig"),BVr.forEach(t),WQe=r(n5e," (PoolFormer model)"),n5e.forEach(t),QQe=i(L),Nm=n(L,"LI",{});var s5e=s(Nm);pre=n(s5e,"STRONG",{});var IVr=s(pre);HQe=r(IVr,"prophetnet"),IVr.forEach(t),UQe=r(s5e," \u2014 "),dS=n(s5e,"A",{href:!0});var qVr=s(dS);JQe=r(qVr,"ProphetNetConfig"),qVr.forEach(t),YQe=r(s5e," (ProphetNet model)"),s5e.forEach(t),KQe=i(L),jm=n(L,"LI",{});var l5e=s(jm);ure=n(l5e,"STRONG",{});var NVr=s(ure);ZQe=r(NVr,"qdqbert"),NVr.forEach(t),eHe=r(l5e," \u2014 "),cS=n(l5e,"A",{href:!0});var jVr=s(cS);oHe=r(jVr,"QDQBertConfig"),jVr.forEach(t),rHe=r(l5e," (QDQBert model)"),l5e.forEach(t),tHe=i(L),Dm=n(L,"LI",{});var i5e=s(Dm);_re=n(i5e,"STRONG",{});var DVr=s(_re);aHe=r(DVr,"rag"),DVr.forEach(t),nHe=r(i5e," \u2014 "),fS=n(i5e,"A",{href:!0});var GVr=s(fS);sHe=r(GVr,"RagConfig"),GVr.forEach(t),lHe=r(i5e," (RAG model)"),i5e.forEach(t),iHe=i(L),Gm=n(L,"LI",{});var d5e=s(Gm);bre=n(d5e,"STRONG",{});var OVr=s(bre);dHe=r(OVr,"realm"),OVr.forEach(t),cHe=r(d5e," \u2014 "),mS=n(d5e,"A",{href:!0});var VVr=s(mS);fHe=r(VVr,"RealmConfig"),VVr.forEach(t),mHe=r(d5e," (Realm model)"),d5e.forEach(t),gHe=i(L),Om=n(L,"LI",{});var c5e=s(Om);vre=n(c5e,"STRONG",{});var XVr=s(vre);hHe=r(XVr,"reformer"),XVr.forEach(t),pHe=r(c5e," \u2014 "),gS=n(c5e,"A",{href:!0});var zVr=s(gS);uHe=r(zVr,"ReformerConfig"),zVr.forEach(t),_He=r(c5e," (Reformer model)"),c5e.forEach(t),bHe=i(L),Vm=n(L,"LI",{});var f5e=s(Vm);Fre=n(f5e,"STRONG",{});var WVr=s(Fre);vHe=r(WVr,"regnet"),WVr.forEach(t),FHe=r(f5e," \u2014 "),hS=n(f5e,"A",{href:!0});var QVr=s(hS);THe=r(QVr,"RegNetConfig"),QVr.forEach(t),MHe=r(f5e," (RegNet model)"),f5e.forEach(t),EHe=i(L),Xm=n(L,"LI",{});var m5e=s(Xm);Tre=n(m5e,"STRONG",{});var HVr=s(Tre);CHe=r(HVr,"rembert"),HVr.forEach(t),wHe=r(m5e," \u2014 "),pS=n(m5e,"A",{href:!0});var UVr=s(pS);AHe=r(UVr,"RemBertConfig"),UVr.forEach(t),yHe=r(m5e," (RemBERT model)"),m5e.forEach(t),LHe=i(L),zm=n(L,"LI",{});var g5e=s(zm);Mre=n(g5e,"STRONG",{});var JVr=s(Mre);xHe=r(JVr,"resnet"),JVr.forEach(t),$He=r(g5e," \u2014 "),uS=n(g5e,"A",{href:!0});var YVr=s(uS);kHe=r(YVr,"ResNetConfig"),YVr.forEach(t),SHe=r(g5e," (ResNet model)"),g5e.forEach(t),RHe=i(L),Wm=n(L,"LI",{});var h5e=s(Wm);Ere=n(h5e,"STRONG",{});var KVr=s(Ere);PHe=r(KVr,"retribert"),KVr.forEach(t),BHe=r(h5e," \u2014 "),_S=n(h5e,"A",{href:!0});var ZVr=s(_S);IHe=r(ZVr,"RetriBertConfig"),ZVr.forEach(t),qHe=r(h5e," (RetriBERT model)"),h5e.forEach(t),NHe=i(L),Qm=n(L,"LI",{});var p5e=s(Qm);Cre=n(p5e,"STRONG",{});var eXr=s(Cre);jHe=r(eXr,"roberta"),eXr.forEach(t),DHe=r(p5e," \u2014 "),bS=n(p5e,"A",{href:!0});var oXr=s(bS);GHe=r(oXr,"RobertaConfig"),oXr.forEach(t),OHe=r(p5e," (RoBERTa model)"),p5e.forEach(t),VHe=i(L),Hm=n(L,"LI",{});var u5e=s(Hm);wre=n(u5e,"STRONG",{});var rXr=s(wre);XHe=r(rXr,"roformer"),rXr.forEach(t),zHe=r(u5e," \u2014 "),vS=n(u5e,"A",{href:!0});var tXr=s(vS);WHe=r(tXr,"RoFormerConfig"),tXr.forEach(t),QHe=r(u5e," (RoFormer model)"),u5e.forEach(t),HHe=i(L),Um=n(L,"LI",{});var _5e=s(Um);Are=n(_5e,"STRONG",{});var aXr=s(Are);UHe=r(aXr,"segformer"),aXr.forEach(t),JHe=r(_5e," \u2014 "),FS=n(_5e,"A",{href:!0});var nXr=s(FS);YHe=r(nXr,"SegformerConfig"),nXr.forEach(t),KHe=r(_5e," (SegFormer model)"),_5e.forEach(t),ZHe=i(L),Jm=n(L,"LI",{});var b5e=s(Jm);yre=n(b5e,"STRONG",{});var sXr=s(yre);eUe=r(sXr,"sew"),sXr.forEach(t),oUe=r(b5e," \u2014 "),TS=n(b5e,"A",{href:!0});var lXr=s(TS);rUe=r(lXr,"SEWConfig"),lXr.forEach(t),tUe=r(b5e," (SEW model)"),b5e.forEach(t),aUe=i(L),Ym=n(L,"LI",{});var v5e=s(Ym);Lre=n(v5e,"STRONG",{});var iXr=s(Lre);nUe=r(iXr,"sew-d"),iXr.forEach(t),sUe=r(v5e," \u2014 "),MS=n(v5e,"A",{href:!0});var dXr=s(MS);lUe=r(dXr,"SEWDConfig"),dXr.forEach(t),iUe=r(v5e," (SEW-D model)"),v5e.forEach(t),dUe=i(L),Km=n(L,"LI",{});var F5e=s(Km);xre=n(F5e,"STRONG",{});var cXr=s(xre);cUe=r(cXr,"speech-encoder-decoder"),cXr.forEach(t),fUe=r(F5e," \u2014 "),ES=n(F5e,"A",{href:!0});var fXr=s(ES);mUe=r(fXr,"SpeechEncoderDecoderConfig"),fXr.forEach(t),gUe=r(F5e," (Speech Encoder decoder model)"),F5e.forEach(t),hUe=i(L),Zm=n(L,"LI",{});var T5e=s(Zm);$re=n(T5e,"STRONG",{});var mXr=s($re);pUe=r(mXr,"speech_to_text"),mXr.forEach(t),uUe=r(T5e," \u2014 "),CS=n(T5e,"A",{href:!0});var gXr=s(CS);_Ue=r(gXr,"Speech2TextConfig"),gXr.forEach(t),bUe=r(T5e," (Speech2Text model)"),T5e.forEach(t),vUe=i(L),eg=n(L,"LI",{});var M5e=s(eg);kre=n(M5e,"STRONG",{});var hXr=s(kre);FUe=r(hXr,"speech_to_text_2"),hXr.forEach(t),TUe=r(M5e," \u2014 "),wS=n(M5e,"A",{href:!0});var pXr=s(wS);MUe=r(pXr,"Speech2Text2Config"),pXr.forEach(t),EUe=r(M5e," (Speech2Text2 model)"),M5e.forEach(t),CUe=i(L),og=n(L,"LI",{});var E5e=s(og);Sre=n(E5e,"STRONG",{});var uXr=s(Sre);wUe=r(uXr,"splinter"),uXr.forEach(t),AUe=r(E5e," \u2014 "),AS=n(E5e,"A",{href:!0});var _Xr=s(AS);yUe=r(_Xr,"SplinterConfig"),_Xr.forEach(t),LUe=r(E5e," (Splinter model)"),E5e.forEach(t),xUe=i(L),rg=n(L,"LI",{});var C5e=s(rg);Rre=n(C5e,"STRONG",{});var bXr=s(Rre);$Ue=r(bXr,"squeezebert"),bXr.forEach(t),kUe=r(C5e," \u2014 "),yS=n(C5e,"A",{href:!0});var vXr=s(yS);SUe=r(vXr,"SqueezeBertConfig"),vXr.forEach(t),RUe=r(C5e," (SqueezeBERT model)"),C5e.forEach(t),PUe=i(L),tg=n(L,"LI",{});var w5e=s(tg);Pre=n(w5e,"STRONG",{});var FXr=s(Pre);BUe=r(FXr,"swin"),FXr.forEach(t),IUe=r(w5e," \u2014 "),LS=n(w5e,"A",{href:!0});var TXr=s(LS);qUe=r(TXr,"SwinConfig"),TXr.forEach(t),NUe=r(w5e," (Swin model)"),w5e.forEach(t),jUe=i(L),ag=n(L,"LI",{});var A5e=s(ag);Bre=n(A5e,"STRONG",{});var MXr=s(Bre);DUe=r(MXr,"t5"),MXr.forEach(t),GUe=r(A5e," \u2014 "),xS=n(A5e,"A",{href:!0});var EXr=s(xS);OUe=r(EXr,"T5Config"),EXr.forEach(t),VUe=r(A5e," (T5 model)"),A5e.forEach(t),XUe=i(L),ng=n(L,"LI",{});var y5e=s(ng);Ire=n(y5e,"STRONG",{});var CXr=s(Ire);zUe=r(CXr,"tapas"),CXr.forEach(t),WUe=r(y5e," \u2014 "),$S=n(y5e,"A",{href:!0});var wXr=s($S);QUe=r(wXr,"TapasConfig"),wXr.forEach(t),HUe=r(y5e," (TAPAS model)"),y5e.forEach(t),UUe=i(L),sg=n(L,"LI",{});var L5e=s(sg);qre=n(L5e,"STRONG",{});var AXr=s(qre);JUe=r(AXr,"transfo-xl"),AXr.forEach(t),YUe=r(L5e," \u2014 "),kS=n(L5e,"A",{href:!0});var yXr=s(kS);KUe=r(yXr,"TransfoXLConfig"),yXr.forEach(t),ZUe=r(L5e," (Transformer-XL model)"),L5e.forEach(t),eJe=i(L),lg=n(L,"LI",{});var x5e=s(lg);Nre=n(x5e,"STRONG",{});var LXr=s(Nre);oJe=r(LXr,"trocr"),LXr.forEach(t),rJe=r(x5e," \u2014 "),SS=n(x5e,"A",{href:!0});var xXr=s(SS);tJe=r(xXr,"TrOCRConfig"),xXr.forEach(t),aJe=r(x5e," (TrOCR model)"),x5e.forEach(t),nJe=i(L),ig=n(L,"LI",{});var $5e=s(ig);jre=n($5e,"STRONG",{});var $Xr=s(jre);sJe=r($Xr,"unispeech"),$Xr.forEach(t),lJe=r($5e," \u2014 "),RS=n($5e,"A",{href:!0});var kXr=s(RS);iJe=r(kXr,"UniSpeechConfig"),kXr.forEach(t),dJe=r($5e," (UniSpeech model)"),$5e.forEach(t),cJe=i(L),dg=n(L,"LI",{});var k5e=s(dg);Dre=n(k5e,"STRONG",{});var SXr=s(Dre);fJe=r(SXr,"unispeech-sat"),SXr.forEach(t),mJe=r(k5e," \u2014 "),PS=n(k5e,"A",{href:!0});var RXr=s(PS);gJe=r(RXr,"UniSpeechSatConfig"),RXr.forEach(t),hJe=r(k5e," (UniSpeechSat model)"),k5e.forEach(t),pJe=i(L),cg=n(L,"LI",{});var S5e=s(cg);Gre=n(S5e,"STRONG",{});var PXr=s(Gre);uJe=r(PXr,"van"),PXr.forEach(t),_Je=r(S5e," \u2014 "),BS=n(S5e,"A",{href:!0});var BXr=s(BS);bJe=r(BXr,"VanConfig"),BXr.forEach(t),vJe=r(S5e," (VAN model)"),S5e.forEach(t),FJe=i(L),fg=n(L,"LI",{});var R5e=s(fg);Ore=n(R5e,"STRONG",{});var IXr=s(Ore);TJe=r(IXr,"vilt"),IXr.forEach(t),MJe=r(R5e," \u2014 "),IS=n(R5e,"A",{href:!0});var qXr=s(IS);EJe=r(qXr,"ViltConfig"),qXr.forEach(t),CJe=r(R5e," (ViLT model)"),R5e.forEach(t),wJe=i(L),mg=n(L,"LI",{});var P5e=s(mg);Vre=n(P5e,"STRONG",{});var NXr=s(Vre);AJe=r(NXr,"vision-encoder-decoder"),NXr.forEach(t),yJe=r(P5e," \u2014 "),qS=n(P5e,"A",{href:!0});var jXr=s(qS);LJe=r(jXr,"VisionEncoderDecoderConfig"),jXr.forEach(t),xJe=r(P5e," (Vision Encoder decoder model)"),P5e.forEach(t),$Je=i(L),gg=n(L,"LI",{});var B5e=s(gg);Xre=n(B5e,"STRONG",{});var DXr=s(Xre);kJe=r(DXr,"vision-text-dual-encoder"),DXr.forEach(t),SJe=r(B5e," \u2014 "),NS=n(B5e,"A",{href:!0});var GXr=s(NS);RJe=r(GXr,"VisionTextDualEncoderConfig"),GXr.forEach(t),PJe=r(B5e," (VisionTextDualEncoder model)"),B5e.forEach(t),BJe=i(L),hg=n(L,"LI",{});var I5e=s(hg);zre=n(I5e,"STRONG",{});var OXr=s(zre);IJe=r(OXr,"visual_bert"),OXr.forEach(t),qJe=r(I5e," \u2014 "),jS=n(I5e,"A",{href:!0});var VXr=s(jS);NJe=r(VXr,"VisualBertConfig"),VXr.forEach(t),jJe=r(I5e," (VisualBert model)"),I5e.forEach(t),DJe=i(L),pg=n(L,"LI",{});var q5e=s(pg);Wre=n(q5e,"STRONG",{});var XXr=s(Wre);GJe=r(XXr,"vit"),XXr.forEach(t),OJe=r(q5e," \u2014 "),DS=n(q5e,"A",{href:!0});var zXr=s(DS);VJe=r(zXr,"ViTConfig"),zXr.forEach(t),XJe=r(q5e," (ViT model)"),q5e.forEach(t),zJe=i(L),ug=n(L,"LI",{});var N5e=s(ug);Qre=n(N5e,"STRONG",{});var WXr=s(Qre);WJe=r(WXr,"vit_mae"),WXr.forEach(t),QJe=r(N5e," \u2014 "),GS=n(N5e,"A",{href:!0});var QXr=s(GS);HJe=r(QXr,"ViTMAEConfig"),QXr.forEach(t),UJe=r(N5e," (ViTMAE model)"),N5e.forEach(t),JJe=i(L),_g=n(L,"LI",{});var j5e=s(_g);Hre=n(j5e,"STRONG",{});var HXr=s(Hre);YJe=r(HXr,"wav2vec2"),HXr.forEach(t),KJe=r(j5e," \u2014 "),OS=n(j5e,"A",{href:!0});var UXr=s(OS);ZJe=r(UXr,"Wav2Vec2Config"),UXr.forEach(t),eYe=r(j5e," (Wav2Vec2 model)"),j5e.forEach(t),oYe=i(L),bg=n(L,"LI",{});var D5e=s(bg);Ure=n(D5e,"STRONG",{});var JXr=s(Ure);rYe=r(JXr,"wav2vec2-conformer"),JXr.forEach(t),tYe=r(D5e," \u2014 "),VS=n(D5e,"A",{href:!0});var YXr=s(VS);aYe=r(YXr,"Wav2Vec2ConformerConfig"),YXr.forEach(t),nYe=r(D5e," (Wav2Vec2-Conformer model)"),D5e.forEach(t),sYe=i(L),vg=n(L,"LI",{});var G5e=s(vg);Jre=n(G5e,"STRONG",{});var KXr=s(Jre);lYe=r(KXr,"wavlm"),KXr.forEach(t),iYe=r(G5e," \u2014 "),XS=n(G5e,"A",{href:!0});var ZXr=s(XS);dYe=r(ZXr,"WavLMConfig"),ZXr.forEach(t),cYe=r(G5e," (WavLM model)"),G5e.forEach(t),fYe=i(L),Fg=n(L,"LI",{});var O5e=s(Fg);Yre=n(O5e,"STRONG",{});var ezr=s(Yre);mYe=r(ezr,"xglm"),ezr.forEach(t),gYe=r(O5e," \u2014 "),zS=n(O5e,"A",{href:!0});var ozr=s(zS);hYe=r(ozr,"XGLMConfig"),ozr.forEach(t),pYe=r(O5e," (XGLM model)"),O5e.forEach(t),uYe=i(L),Tg=n(L,"LI",{});var V5e=s(Tg);Kre=n(V5e,"STRONG",{});var rzr=s(Kre);_Ye=r(rzr,"xlm"),rzr.forEach(t),bYe=r(V5e," \u2014 "),WS=n(V5e,"A",{href:!0});var tzr=s(WS);vYe=r(tzr,"XLMConfig"),tzr.forEach(t),FYe=r(V5e," (XLM model)"),V5e.forEach(t),TYe=i(L),Mg=n(L,"LI",{});var X5e=s(Mg);Zre=n(X5e,"STRONG",{});var azr=s(Zre);MYe=r(azr,"xlm-prophetnet"),azr.forEach(t),EYe=r(X5e," \u2014 "),QS=n(X5e,"A",{href:!0});var nzr=s(QS);CYe=r(nzr,"XLMProphetNetConfig"),nzr.forEach(t),wYe=r(X5e," (XLMProphetNet model)"),X5e.forEach(t),AYe=i(L),Eg=n(L,"LI",{});var z5e=s(Eg);ete=n(z5e,"STRONG",{});var szr=s(ete);yYe=r(szr,"xlm-roberta"),szr.forEach(t),LYe=r(z5e," \u2014 "),HS=n(z5e,"A",{href:!0});var lzr=s(HS);xYe=r(lzr,"XLMRobertaConfig"),lzr.forEach(t),$Ye=r(z5e," (XLM-RoBERTa model)"),z5e.forEach(t),kYe=i(L),Cg=n(L,"LI",{});var W5e=s(Cg);ote=n(W5e,"STRONG",{});var izr=s(ote);SYe=r(izr,"xlm-roberta-xl"),izr.forEach(t),RYe=r(W5e," \u2014 "),US=n(W5e,"A",{href:!0});var dzr=s(US);PYe=r(dzr,"XLMRobertaXLConfig"),dzr.forEach(t),BYe=r(W5e," (XLM-RoBERTa-XL model)"),W5e.forEach(t),IYe=i(L),wg=n(L,"LI",{});var Q5e=s(wg);rte=n(Q5e,"STRONG",{});var czr=s(rte);qYe=r(czr,"xlnet"),czr.forEach(t),NYe=r(Q5e," \u2014 "),JS=n(Q5e,"A",{href:!0});var fzr=s(JS);jYe=r(fzr,"XLNetConfig"),fzr.forEach(t),DYe=r(Q5e," (XLNet model)"),Q5e.forEach(t),GYe=i(L),Ag=n(L,"LI",{});var H5e=s(Ag);tte=n(H5e,"STRONG",{});var mzr=s(tte);OYe=r(mzr,"yolos"),mzr.forEach(t),VYe=r(H5e," \u2014 "),YS=n(H5e,"A",{href:!0});var gzr=s(YS);XYe=r(gzr,"YolosConfig"),gzr.forEach(t),zYe=r(H5e," (YOLOS model)"),H5e.forEach(t),WYe=i(L),yg=n(L,"LI",{});var U5e=s(yg);ate=n(U5e,"STRONG",{});var hzr=s(ate);QYe=r(hzr,"yoso"),hzr.forEach(t),HYe=r(U5e," \u2014 "),KS=n(U5e,"A",{href:!0});var pzr=s(KS);UYe=r(pzr,"YosoConfig"),pzr.forEach(t),JYe=r(U5e," (YOSO model)"),U5e.forEach(t),L.forEach(t),YYe=i(tt),T(Lg.$$.fragment,tt),tt.forEach(t),KYe=i(rt),xg=n(rt,"DIV",{class:!0});var xje=s(xg);T(RA.$$.fragment,xje),ZYe=i(xje),nte=n(xje,"P",{});var uzr=s(nte);eKe=r(uzr,"Register a new configuration for this class."),uzr.forEach(t),xje.forEach(t),rt.forEach(t),$qe=i(f),yi=n(f,"H2",{class:!0});var $je=s(yi);$g=n($je,"A",{id:!0,class:!0,href:!0});var _zr=s($g);ste=n(_zr,"SPAN",{});var bzr=s(ste);T(PA.$$.fragment,bzr),bzr.forEach(t),_zr.forEach(t),oKe=i($je),lte=n($je,"SPAN",{});var vzr=s(lte);rKe=r(vzr,"AutoTokenizer"),vzr.forEach(t),$je.forEach(t),kqe=i(f),Ao=n(f,"DIV",{class:!0});var Os=s(Ao);T(BA.$$.fragment,Os),tKe=i(Os),IA=n(Os,"P",{});var kje=s(IA);aKe=r(kje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=n(kje,"A",{href:!0});var Fzr=s(ZS);nKe=r(Fzr,"AutoTokenizer.from_pretrained()"),Fzr.forEach(t),sKe=r(kje," class method."),kje.forEach(t),lKe=i(Os),qA=n(Os,"P",{});var Sje=s(qA);iKe=r(Sje,"This class cannot be instantiated directly using "),ite=n(Sje,"CODE",{});var Tzr=s(ite);dKe=r(Tzr,"__init__()"),Tzr.forEach(t),cKe=r(Sje," (throws an error)."),Sje.forEach(t),fKe=i(Os),Ar=n(Os,"DIV",{class:!0});var Vs=s(Ar);T(NA.$$.fragment,Vs),mKe=i(Vs),dte=n(Vs,"P",{});var Mzr=s(dte);gKe=r(Mzr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mzr.forEach(t),hKe=i(Vs),$a=n(Vs,"P",{});var A3=s($a);pKe=r(A3,"The tokenizer class to instantiate is selected based on the "),cte=n(A3,"CODE",{});var Ezr=s(cte);uKe=r(Ezr,"model_type"),Ezr.forEach(t),_Ke=r(A3,` property of the config object (either
passed as an argument or loaded from `),fte=n(A3,"CODE",{});var Czr=s(fte);bKe=r(Czr,"pretrained_model_name_or_path"),Czr.forEach(t),vKe=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=n(A3,"CODE",{});var wzr=s(mte);FKe=r(wzr,"pretrained_model_name_or_path"),wzr.forEach(t),TKe=r(A3,":"),A3.forEach(t),MKe=i(Vs),k=n(Vs,"UL",{});var S=s(k);qn=n(S,"LI",{});var X9=s(qn);gte=n(X9,"STRONG",{});var Azr=s(gte);EKe=r(Azr,"albert"),Azr.forEach(t),CKe=r(X9," \u2014 "),eR=n(X9,"A",{href:!0});var yzr=s(eR);wKe=r(yzr,"AlbertTokenizer"),yzr.forEach(t),AKe=r(X9," or "),oR=n(X9,"A",{href:!0});var Lzr=s(oR);yKe=r(Lzr,"AlbertTokenizerFast"),Lzr.forEach(t),LKe=r(X9," (ALBERT model)"),X9.forEach(t),xKe=i(S),Nn=n(S,"LI",{});var z9=s(Nn);hte=n(z9,"STRONG",{});var xzr=s(hte);$Ke=r(xzr,"bart"),xzr.forEach(t),kKe=r(z9," \u2014 "),rR=n(z9,"A",{href:!0});var $zr=s(rR);SKe=r($zr,"BartTokenizer"),$zr.forEach(t),RKe=r(z9," or "),tR=n(z9,"A",{href:!0});var kzr=s(tR);PKe=r(kzr,"BartTokenizerFast"),kzr.forEach(t),BKe=r(z9," (BART model)"),z9.forEach(t),IKe=i(S),jn=n(S,"LI",{});var W9=s(jn);pte=n(W9,"STRONG",{});var Szr=s(pte);qKe=r(Szr,"barthez"),Szr.forEach(t),NKe=r(W9," \u2014 "),aR=n(W9,"A",{href:!0});var Rzr=s(aR);jKe=r(Rzr,"BarthezTokenizer"),Rzr.forEach(t),DKe=r(W9," or "),nR=n(W9,"A",{href:!0});var Pzr=s(nR);GKe=r(Pzr,"BarthezTokenizerFast"),Pzr.forEach(t),OKe=r(W9," (BARThez model)"),W9.forEach(t),VKe=i(S),kg=n(S,"LI",{});var J5e=s(kg);ute=n(J5e,"STRONG",{});var Bzr=s(ute);XKe=r(Bzr,"bartpho"),Bzr.forEach(t),zKe=r(J5e," \u2014 "),sR=n(J5e,"A",{href:!0});var Izr=s(sR);WKe=r(Izr,"BartphoTokenizer"),Izr.forEach(t),QKe=r(J5e," (BARTpho model)"),J5e.forEach(t),HKe=i(S),Dn=n(S,"LI",{});var Q9=s(Dn);_te=n(Q9,"STRONG",{});var qzr=s(_te);UKe=r(qzr,"bert"),qzr.forEach(t),JKe=r(Q9," \u2014 "),lR=n(Q9,"A",{href:!0});var Nzr=s(lR);YKe=r(Nzr,"BertTokenizer"),Nzr.forEach(t),KKe=r(Q9," or "),iR=n(Q9,"A",{href:!0});var jzr=s(iR);ZKe=r(jzr,"BertTokenizerFast"),jzr.forEach(t),eZe=r(Q9," (BERT model)"),Q9.forEach(t),oZe=i(S),Sg=n(S,"LI",{});var Y5e=s(Sg);bte=n(Y5e,"STRONG",{});var Dzr=s(bte);rZe=r(Dzr,"bert-generation"),Dzr.forEach(t),tZe=r(Y5e," \u2014 "),dR=n(Y5e,"A",{href:!0});var Gzr=s(dR);aZe=r(Gzr,"BertGenerationTokenizer"),Gzr.forEach(t),nZe=r(Y5e," (Bert Generation model)"),Y5e.forEach(t),sZe=i(S),Rg=n(S,"LI",{});var K5e=s(Rg);vte=n(K5e,"STRONG",{});var Ozr=s(vte);lZe=r(Ozr,"bert-japanese"),Ozr.forEach(t),iZe=r(K5e," \u2014 "),cR=n(K5e,"A",{href:!0});var Vzr=s(cR);dZe=r(Vzr,"BertJapaneseTokenizer"),Vzr.forEach(t),cZe=r(K5e," (BertJapanese model)"),K5e.forEach(t),fZe=i(S),Pg=n(S,"LI",{});var Z5e=s(Pg);Fte=n(Z5e,"STRONG",{});var Xzr=s(Fte);mZe=r(Xzr,"bertweet"),Xzr.forEach(t),gZe=r(Z5e," \u2014 "),fR=n(Z5e,"A",{href:!0});var zzr=s(fR);hZe=r(zzr,"BertweetTokenizer"),zzr.forEach(t),pZe=r(Z5e," (Bertweet model)"),Z5e.forEach(t),uZe=i(S),Gn=n(S,"LI",{});var H9=s(Gn);Tte=n(H9,"STRONG",{});var Wzr=s(Tte);_Ze=r(Wzr,"big_bird"),Wzr.forEach(t),bZe=r(H9," \u2014 "),mR=n(H9,"A",{href:!0});var Qzr=s(mR);vZe=r(Qzr,"BigBirdTokenizer"),Qzr.forEach(t),FZe=r(H9," or "),gR=n(H9,"A",{href:!0});var Hzr=s(gR);TZe=r(Hzr,"BigBirdTokenizerFast"),Hzr.forEach(t),MZe=r(H9," (BigBird model)"),H9.forEach(t),EZe=i(S),On=n(S,"LI",{});var U9=s(On);Mte=n(U9,"STRONG",{});var Uzr=s(Mte);CZe=r(Uzr,"bigbird_pegasus"),Uzr.forEach(t),wZe=r(U9," \u2014 "),hR=n(U9,"A",{href:!0});var Jzr=s(hR);AZe=r(Jzr,"PegasusTokenizer"),Jzr.forEach(t),yZe=r(U9," or "),pR=n(U9,"A",{href:!0});var Yzr=s(pR);LZe=r(Yzr,"PegasusTokenizerFast"),Yzr.forEach(t),xZe=r(U9," (BigBirdPegasus model)"),U9.forEach(t),$Ze=i(S),Vn=n(S,"LI",{});var J9=s(Vn);Ete=n(J9,"STRONG",{});var Kzr=s(Ete);kZe=r(Kzr,"blenderbot"),Kzr.forEach(t),SZe=r(J9," \u2014 "),uR=n(J9,"A",{href:!0});var Zzr=s(uR);RZe=r(Zzr,"BlenderbotTokenizer"),Zzr.forEach(t),PZe=r(J9," or "),_R=n(J9,"A",{href:!0});var eWr=s(_R);BZe=r(eWr,"BlenderbotTokenizerFast"),eWr.forEach(t),IZe=r(J9," (Blenderbot model)"),J9.forEach(t),qZe=i(S),Bg=n(S,"LI",{});var e3e=s(Bg);Cte=n(e3e,"STRONG",{});var oWr=s(Cte);NZe=r(oWr,"blenderbot-small"),oWr.forEach(t),jZe=r(e3e," \u2014 "),bR=n(e3e,"A",{href:!0});var rWr=s(bR);DZe=r(rWr,"BlenderbotSmallTokenizer"),rWr.forEach(t),GZe=r(e3e," (BlenderbotSmall model)"),e3e.forEach(t),OZe=i(S),Ig=n(S,"LI",{});var o3e=s(Ig);wte=n(o3e,"STRONG",{});var tWr=s(wte);VZe=r(tWr,"byt5"),tWr.forEach(t),XZe=r(o3e," \u2014 "),vR=n(o3e,"A",{href:!0});var aWr=s(vR);zZe=r(aWr,"ByT5Tokenizer"),aWr.forEach(t),WZe=r(o3e," (ByT5 model)"),o3e.forEach(t),QZe=i(S),Xn=n(S,"LI",{});var Y9=s(Xn);Ate=n(Y9,"STRONG",{});var nWr=s(Ate);HZe=r(nWr,"camembert"),nWr.forEach(t),UZe=r(Y9," \u2014 "),FR=n(Y9,"A",{href:!0});var sWr=s(FR);JZe=r(sWr,"CamembertTokenizer"),sWr.forEach(t),YZe=r(Y9," or "),TR=n(Y9,"A",{href:!0});var lWr=s(TR);KZe=r(lWr,"CamembertTokenizerFast"),lWr.forEach(t),ZZe=r(Y9," (CamemBERT model)"),Y9.forEach(t),eeo=i(S),qg=n(S,"LI",{});var r3e=s(qg);yte=n(r3e,"STRONG",{});var iWr=s(yte);oeo=r(iWr,"canine"),iWr.forEach(t),reo=r(r3e," \u2014 "),MR=n(r3e,"A",{href:!0});var dWr=s(MR);teo=r(dWr,"CanineTokenizer"),dWr.forEach(t),aeo=r(r3e," (Canine model)"),r3e.forEach(t),neo=i(S),zn=n(S,"LI",{});var K9=s(zn);Lte=n(K9,"STRONG",{});var cWr=s(Lte);seo=r(cWr,"clip"),cWr.forEach(t),leo=r(K9," \u2014 "),ER=n(K9,"A",{href:!0});var fWr=s(ER);ieo=r(fWr,"CLIPTokenizer"),fWr.forEach(t),deo=r(K9," or "),CR=n(K9,"A",{href:!0});var mWr=s(CR);ceo=r(mWr,"CLIPTokenizerFast"),mWr.forEach(t),feo=r(K9," (CLIP model)"),K9.forEach(t),meo=i(S),Wn=n(S,"LI",{});var Z9=s(Wn);xte=n(Z9,"STRONG",{});var gWr=s(xte);geo=r(gWr,"convbert"),gWr.forEach(t),heo=r(Z9," \u2014 "),wR=n(Z9,"A",{href:!0});var hWr=s(wR);peo=r(hWr,"ConvBertTokenizer"),hWr.forEach(t),ueo=r(Z9," or "),AR=n(Z9,"A",{href:!0});var pWr=s(AR);_eo=r(pWr,"ConvBertTokenizerFast"),pWr.forEach(t),beo=r(Z9," (ConvBERT model)"),Z9.forEach(t),veo=i(S),Qn=n(S,"LI",{});var e$=s(Qn);$te=n(e$,"STRONG",{});var uWr=s($te);Feo=r(uWr,"cpm"),uWr.forEach(t),Teo=r(e$," \u2014 "),yR=n(e$,"A",{href:!0});var _Wr=s(yR);Meo=r(_Wr,"CpmTokenizer"),_Wr.forEach(t),Eeo=r(e$," or "),LR=n(e$,"A",{href:!0});var bWr=s(LR);Ceo=r(bWr,"CpmTokenizerFast"),bWr.forEach(t),weo=r(e$," (CPM model)"),e$.forEach(t),Aeo=i(S),Ng=n(S,"LI",{});var t3e=s(Ng);kte=n(t3e,"STRONG",{});var vWr=s(kte);yeo=r(vWr,"ctrl"),vWr.forEach(t),Leo=r(t3e," \u2014 "),xR=n(t3e,"A",{href:!0});var FWr=s(xR);xeo=r(FWr,"CTRLTokenizer"),FWr.forEach(t),$eo=r(t3e," (CTRL model)"),t3e.forEach(t),keo=i(S),Hn=n(S,"LI",{});var o$=s(Hn);Ste=n(o$,"STRONG",{});var TWr=s(Ste);Seo=r(TWr,"data2vec-text"),TWr.forEach(t),Reo=r(o$," \u2014 "),$R=n(o$,"A",{href:!0});var MWr=s($R);Peo=r(MWr,"RobertaTokenizer"),MWr.forEach(t),Beo=r(o$," or "),kR=n(o$,"A",{href:!0});var EWr=s(kR);Ieo=r(EWr,"RobertaTokenizerFast"),EWr.forEach(t),qeo=r(o$," (Data2VecText model)"),o$.forEach(t),Neo=i(S),Un=n(S,"LI",{});var r$=s(Un);Rte=n(r$,"STRONG",{});var CWr=s(Rte);jeo=r(CWr,"deberta"),CWr.forEach(t),Deo=r(r$," \u2014 "),SR=n(r$,"A",{href:!0});var wWr=s(SR);Geo=r(wWr,"DebertaTokenizer"),wWr.forEach(t),Oeo=r(r$," or "),RR=n(r$,"A",{href:!0});var AWr=s(RR);Veo=r(AWr,"DebertaTokenizerFast"),AWr.forEach(t),Xeo=r(r$," (DeBERTa model)"),r$.forEach(t),zeo=i(S),Jn=n(S,"LI",{});var t$=s(Jn);Pte=n(t$,"STRONG",{});var yWr=s(Pte);Weo=r(yWr,"deberta-v2"),yWr.forEach(t),Qeo=r(t$," \u2014 "),PR=n(t$,"A",{href:!0});var LWr=s(PR);Heo=r(LWr,"DebertaV2Tokenizer"),LWr.forEach(t),Ueo=r(t$," or "),BR=n(t$,"A",{href:!0});var xWr=s(BR);Jeo=r(xWr,"DebertaV2TokenizerFast"),xWr.forEach(t),Yeo=r(t$," (DeBERTa-v2 model)"),t$.forEach(t),Keo=i(S),Yn=n(S,"LI",{});var a$=s(Yn);Bte=n(a$,"STRONG",{});var $Wr=s(Bte);Zeo=r($Wr,"distilbert"),$Wr.forEach(t),eoo=r(a$," \u2014 "),IR=n(a$,"A",{href:!0});var kWr=s(IR);ooo=r(kWr,"DistilBertTokenizer"),kWr.forEach(t),roo=r(a$," or "),qR=n(a$,"A",{href:!0});var SWr=s(qR);too=r(SWr,"DistilBertTokenizerFast"),SWr.forEach(t),aoo=r(a$," (DistilBERT model)"),a$.forEach(t),noo=i(S),Kn=n(S,"LI",{});var n$=s(Kn);Ite=n(n$,"STRONG",{});var RWr=s(Ite);soo=r(RWr,"dpr"),RWr.forEach(t),loo=r(n$," \u2014 "),NR=n(n$,"A",{href:!0});var PWr=s(NR);ioo=r(PWr,"DPRQuestionEncoderTokenizer"),PWr.forEach(t),doo=r(n$," or "),jR=n(n$,"A",{href:!0});var BWr=s(jR);coo=r(BWr,"DPRQuestionEncoderTokenizerFast"),BWr.forEach(t),foo=r(n$," (DPR model)"),n$.forEach(t),moo=i(S),Zn=n(S,"LI",{});var s$=s(Zn);qte=n(s$,"STRONG",{});var IWr=s(qte);goo=r(IWr,"electra"),IWr.forEach(t),hoo=r(s$," \u2014 "),DR=n(s$,"A",{href:!0});var qWr=s(DR);poo=r(qWr,"ElectraTokenizer"),qWr.forEach(t),uoo=r(s$," or "),GR=n(s$,"A",{href:!0});var NWr=s(GR);_oo=r(NWr,"ElectraTokenizerFast"),NWr.forEach(t),boo=r(s$," (ELECTRA model)"),s$.forEach(t),voo=i(S),jg=n(S,"LI",{});var a3e=s(jg);Nte=n(a3e,"STRONG",{});var jWr=s(Nte);Foo=r(jWr,"flaubert"),jWr.forEach(t),Too=r(a3e," \u2014 "),OR=n(a3e,"A",{href:!0});var DWr=s(OR);Moo=r(DWr,"FlaubertTokenizer"),DWr.forEach(t),Eoo=r(a3e," (FlauBERT model)"),a3e.forEach(t),Coo=i(S),es=n(S,"LI",{});var l$=s(es);jte=n(l$,"STRONG",{});var GWr=s(jte);woo=r(GWr,"fnet"),GWr.forEach(t),Aoo=r(l$," \u2014 "),VR=n(l$,"A",{href:!0});var OWr=s(VR);yoo=r(OWr,"FNetTokenizer"),OWr.forEach(t),Loo=r(l$," or "),XR=n(l$,"A",{href:!0});var VWr=s(XR);xoo=r(VWr,"FNetTokenizerFast"),VWr.forEach(t),$oo=r(l$," (FNet model)"),l$.forEach(t),koo=i(S),Dg=n(S,"LI",{});var n3e=s(Dg);Dte=n(n3e,"STRONG",{});var XWr=s(Dte);Soo=r(XWr,"fsmt"),XWr.forEach(t),Roo=r(n3e," \u2014 "),zR=n(n3e,"A",{href:!0});var zWr=s(zR);Poo=r(zWr,"FSMTTokenizer"),zWr.forEach(t),Boo=r(n3e," (FairSeq Machine-Translation model)"),n3e.forEach(t),Ioo=i(S),os=n(S,"LI",{});var i$=s(os);Gte=n(i$,"STRONG",{});var WWr=s(Gte);qoo=r(WWr,"funnel"),WWr.forEach(t),Noo=r(i$," \u2014 "),WR=n(i$,"A",{href:!0});var QWr=s(WR);joo=r(QWr,"FunnelTokenizer"),QWr.forEach(t),Doo=r(i$," or "),QR=n(i$,"A",{href:!0});var HWr=s(QR);Goo=r(HWr,"FunnelTokenizerFast"),HWr.forEach(t),Ooo=r(i$," (Funnel Transformer model)"),i$.forEach(t),Voo=i(S),rs=n(S,"LI",{});var d$=s(rs);Ote=n(d$,"STRONG",{});var UWr=s(Ote);Xoo=r(UWr,"gpt2"),UWr.forEach(t),zoo=r(d$," \u2014 "),HR=n(d$,"A",{href:!0});var JWr=s(HR);Woo=r(JWr,"GPT2Tokenizer"),JWr.forEach(t),Qoo=r(d$," or "),UR=n(d$,"A",{href:!0});var YWr=s(UR);Hoo=r(YWr,"GPT2TokenizerFast"),YWr.forEach(t),Uoo=r(d$," (OpenAI GPT-2 model)"),d$.forEach(t),Joo=i(S),ts=n(S,"LI",{});var c$=s(ts);Vte=n(c$,"STRONG",{});var KWr=s(Vte);Yoo=r(KWr,"gpt_neo"),KWr.forEach(t),Koo=r(c$," \u2014 "),JR=n(c$,"A",{href:!0});var ZWr=s(JR);Zoo=r(ZWr,"GPT2Tokenizer"),ZWr.forEach(t),ero=r(c$," or "),YR=n(c$,"A",{href:!0});var eQr=s(YR);oro=r(eQr,"GPT2TokenizerFast"),eQr.forEach(t),rro=r(c$," (GPT Neo model)"),c$.forEach(t),tro=i(S),as=n(S,"LI",{});var f$=s(as);Xte=n(f$,"STRONG",{});var oQr=s(Xte);aro=r(oQr,"gptj"),oQr.forEach(t),nro=r(f$," \u2014 "),KR=n(f$,"A",{href:!0});var rQr=s(KR);sro=r(rQr,"GPT2Tokenizer"),rQr.forEach(t),lro=r(f$," or "),ZR=n(f$,"A",{href:!0});var tQr=s(ZR);iro=r(tQr,"GPT2TokenizerFast"),tQr.forEach(t),dro=r(f$," (GPT-J model)"),f$.forEach(t),cro=i(S),ns=n(S,"LI",{});var m$=s(ns);zte=n(m$,"STRONG",{});var aQr=s(zte);fro=r(aQr,"herbert"),aQr.forEach(t),mro=r(m$," \u2014 "),eP=n(m$,"A",{href:!0});var nQr=s(eP);gro=r(nQr,"HerbertTokenizer"),nQr.forEach(t),hro=r(m$," or "),oP=n(m$,"A",{href:!0});var sQr=s(oP);pro=r(sQr,"HerbertTokenizerFast"),sQr.forEach(t),uro=r(m$," (HerBERT model)"),m$.forEach(t),_ro=i(S),Gg=n(S,"LI",{});var s3e=s(Gg);Wte=n(s3e,"STRONG",{});var lQr=s(Wte);bro=r(lQr,"hubert"),lQr.forEach(t),vro=r(s3e," \u2014 "),rP=n(s3e,"A",{href:!0});var iQr=s(rP);Fro=r(iQr,"Wav2Vec2CTCTokenizer"),iQr.forEach(t),Tro=r(s3e," (Hubert model)"),s3e.forEach(t),Mro=i(S),ss=n(S,"LI",{});var g$=s(ss);Qte=n(g$,"STRONG",{});var dQr=s(Qte);Ero=r(dQr,"ibert"),dQr.forEach(t),Cro=r(g$," \u2014 "),tP=n(g$,"A",{href:!0});var cQr=s(tP);wro=r(cQr,"RobertaTokenizer"),cQr.forEach(t),Aro=r(g$," or "),aP=n(g$,"A",{href:!0});var fQr=s(aP);yro=r(fQr,"RobertaTokenizerFast"),fQr.forEach(t),Lro=r(g$," (I-BERT model)"),g$.forEach(t),xro=i(S),ls=n(S,"LI",{});var h$=s(ls);Hte=n(h$,"STRONG",{});var mQr=s(Hte);$ro=r(mQr,"layoutlm"),mQr.forEach(t),kro=r(h$," \u2014 "),nP=n(h$,"A",{href:!0});var gQr=s(nP);Sro=r(gQr,"LayoutLMTokenizer"),gQr.forEach(t),Rro=r(h$," or "),sP=n(h$,"A",{href:!0});var hQr=s(sP);Pro=r(hQr,"LayoutLMTokenizerFast"),hQr.forEach(t),Bro=r(h$," (LayoutLM model)"),h$.forEach(t),Iro=i(S),is=n(S,"LI",{});var p$=s(is);Ute=n(p$,"STRONG",{});var pQr=s(Ute);qro=r(pQr,"layoutlmv2"),pQr.forEach(t),Nro=r(p$," \u2014 "),lP=n(p$,"A",{href:!0});var uQr=s(lP);jro=r(uQr,"LayoutLMv2Tokenizer"),uQr.forEach(t),Dro=r(p$," or "),iP=n(p$,"A",{href:!0});var _Qr=s(iP);Gro=r(_Qr,"LayoutLMv2TokenizerFast"),_Qr.forEach(t),Oro=r(p$," (LayoutLMv2 model)"),p$.forEach(t),Vro=i(S),ds=n(S,"LI",{});var u$=s(ds);Jte=n(u$,"STRONG",{});var bQr=s(Jte);Xro=r(bQr,"layoutxlm"),bQr.forEach(t),zro=r(u$," \u2014 "),dP=n(u$,"A",{href:!0});var vQr=s(dP);Wro=r(vQr,"LayoutXLMTokenizer"),vQr.forEach(t),Qro=r(u$," or "),cP=n(u$,"A",{href:!0});var FQr=s(cP);Hro=r(FQr,"LayoutXLMTokenizerFast"),FQr.forEach(t),Uro=r(u$," (LayoutXLM model)"),u$.forEach(t),Jro=i(S),cs=n(S,"LI",{});var _$=s(cs);Yte=n(_$,"STRONG",{});var TQr=s(Yte);Yro=r(TQr,"led"),TQr.forEach(t),Kro=r(_$," \u2014 "),fP=n(_$,"A",{href:!0});var MQr=s(fP);Zro=r(MQr,"LEDTokenizer"),MQr.forEach(t),eto=r(_$," or "),mP=n(_$,"A",{href:!0});var EQr=s(mP);oto=r(EQr,"LEDTokenizerFast"),EQr.forEach(t),rto=r(_$," (LED model)"),_$.forEach(t),tto=i(S),fs=n(S,"LI",{});var b$=s(fs);Kte=n(b$,"STRONG",{});var CQr=s(Kte);ato=r(CQr,"longformer"),CQr.forEach(t),nto=r(b$," \u2014 "),gP=n(b$,"A",{href:!0});var wQr=s(gP);sto=r(wQr,"LongformerTokenizer"),wQr.forEach(t),lto=r(b$," or "),hP=n(b$,"A",{href:!0});var AQr=s(hP);ito=r(AQr,"LongformerTokenizerFast"),AQr.forEach(t),dto=r(b$," (Longformer model)"),b$.forEach(t),cto=i(S),Og=n(S,"LI",{});var l3e=s(Og);Zte=n(l3e,"STRONG",{});var yQr=s(Zte);fto=r(yQr,"luke"),yQr.forEach(t),mto=r(l3e," \u2014 "),pP=n(l3e,"A",{href:!0});var LQr=s(pP);gto=r(LQr,"LukeTokenizer"),LQr.forEach(t),hto=r(l3e," (LUKE model)"),l3e.forEach(t),pto=i(S),ms=n(S,"LI",{});var v$=s(ms);eae=n(v$,"STRONG",{});var xQr=s(eae);uto=r(xQr,"lxmert"),xQr.forEach(t),_to=r(v$," \u2014 "),uP=n(v$,"A",{href:!0});var $Qr=s(uP);bto=r($Qr,"LxmertTokenizer"),$Qr.forEach(t),vto=r(v$," or "),_P=n(v$,"A",{href:!0});var kQr=s(_P);Fto=r(kQr,"LxmertTokenizerFast"),kQr.forEach(t),Tto=r(v$," (LXMERT model)"),v$.forEach(t),Mto=i(S),Vg=n(S,"LI",{});var i3e=s(Vg);oae=n(i3e,"STRONG",{});var SQr=s(oae);Eto=r(SQr,"m2m_100"),SQr.forEach(t),Cto=r(i3e," \u2014 "),bP=n(i3e,"A",{href:!0});var RQr=s(bP);wto=r(RQr,"M2M100Tokenizer"),RQr.forEach(t),Ato=r(i3e," (M2M100 model)"),i3e.forEach(t),yto=i(S),Xg=n(S,"LI",{});var d3e=s(Xg);rae=n(d3e,"STRONG",{});var PQr=s(rae);Lto=r(PQr,"marian"),PQr.forEach(t),xto=r(d3e," \u2014 "),vP=n(d3e,"A",{href:!0});var BQr=s(vP);$to=r(BQr,"MarianTokenizer"),BQr.forEach(t),kto=r(d3e," (Marian model)"),d3e.forEach(t),Sto=i(S),gs=n(S,"LI",{});var F$=s(gs);tae=n(F$,"STRONG",{});var IQr=s(tae);Rto=r(IQr,"mbart"),IQr.forEach(t),Pto=r(F$," \u2014 "),FP=n(F$,"A",{href:!0});var qQr=s(FP);Bto=r(qQr,"MBartTokenizer"),qQr.forEach(t),Ito=r(F$," or "),TP=n(F$,"A",{href:!0});var NQr=s(TP);qto=r(NQr,"MBartTokenizerFast"),NQr.forEach(t),Nto=r(F$," (mBART model)"),F$.forEach(t),jto=i(S),hs=n(S,"LI",{});var T$=s(hs);aae=n(T$,"STRONG",{});var jQr=s(aae);Dto=r(jQr,"mbart50"),jQr.forEach(t),Gto=r(T$," \u2014 "),MP=n(T$,"A",{href:!0});var DQr=s(MP);Oto=r(DQr,"MBart50Tokenizer"),DQr.forEach(t),Vto=r(T$," or "),EP=n(T$,"A",{href:!0});var GQr=s(EP);Xto=r(GQr,"MBart50TokenizerFast"),GQr.forEach(t),zto=r(T$," (mBART-50 model)"),T$.forEach(t),Wto=i(S),ps=n(S,"LI",{});var M$=s(ps);nae=n(M$,"STRONG",{});var OQr=s(nae);Qto=r(OQr,"megatron-bert"),OQr.forEach(t),Hto=r(M$," \u2014 "),CP=n(M$,"A",{href:!0});var VQr=s(CP);Uto=r(VQr,"BertTokenizer"),VQr.forEach(t),Jto=r(M$," or "),wP=n(M$,"A",{href:!0});var XQr=s(wP);Yto=r(XQr,"BertTokenizerFast"),XQr.forEach(t),Kto=r(M$," (MegatronBert model)"),M$.forEach(t),Zto=i(S),zg=n(S,"LI",{});var c3e=s(zg);sae=n(c3e,"STRONG",{});var zQr=s(sae);eao=r(zQr,"mluke"),zQr.forEach(t),oao=r(c3e," \u2014 "),AP=n(c3e,"A",{href:!0});var WQr=s(AP);rao=r(WQr,"MLukeTokenizer"),WQr.forEach(t),tao=r(c3e," (mLUKE model)"),c3e.forEach(t),aao=i(S),us=n(S,"LI",{});var E$=s(us);lae=n(E$,"STRONG",{});var QQr=s(lae);nao=r(QQr,"mobilebert"),QQr.forEach(t),sao=r(E$," \u2014 "),yP=n(E$,"A",{href:!0});var HQr=s(yP);lao=r(HQr,"MobileBertTokenizer"),HQr.forEach(t),iao=r(E$," or "),LP=n(E$,"A",{href:!0});var UQr=s(LP);dao=r(UQr,"MobileBertTokenizerFast"),UQr.forEach(t),cao=r(E$," (MobileBERT model)"),E$.forEach(t),fao=i(S),_s=n(S,"LI",{});var C$=s(_s);iae=n(C$,"STRONG",{});var JQr=s(iae);mao=r(JQr,"mpnet"),JQr.forEach(t),gao=r(C$," \u2014 "),xP=n(C$,"A",{href:!0});var YQr=s(xP);hao=r(YQr,"MPNetTokenizer"),YQr.forEach(t),pao=r(C$," or "),$P=n(C$,"A",{href:!0});var KQr=s($P);uao=r(KQr,"MPNetTokenizerFast"),KQr.forEach(t),_ao=r(C$," (MPNet model)"),C$.forEach(t),bao=i(S),bs=n(S,"LI",{});var w$=s(bs);dae=n(w$,"STRONG",{});var ZQr=s(dae);vao=r(ZQr,"mt5"),ZQr.forEach(t),Fao=r(w$," \u2014 "),kP=n(w$,"A",{href:!0});var eHr=s(kP);Tao=r(eHr,"MT5Tokenizer"),eHr.forEach(t),Mao=r(w$," or "),SP=n(w$,"A",{href:!0});var oHr=s(SP);Eao=r(oHr,"MT5TokenizerFast"),oHr.forEach(t),Cao=r(w$," (mT5 model)"),w$.forEach(t),wao=i(S),vs=n(S,"LI",{});var A$=s(vs);cae=n(A$,"STRONG",{});var rHr=s(cae);Aao=r(rHr,"nystromformer"),rHr.forEach(t),yao=r(A$," \u2014 "),RP=n(A$,"A",{href:!0});var tHr=s(RP);Lao=r(tHr,"AlbertTokenizer"),tHr.forEach(t),xao=r(A$," or "),PP=n(A$,"A",{href:!0});var aHr=s(PP);$ao=r(aHr,"AlbertTokenizerFast"),aHr.forEach(t),kao=r(A$," (Nystromformer model)"),A$.forEach(t),Sao=i(S),Fs=n(S,"LI",{});var y$=s(Fs);fae=n(y$,"STRONG",{});var nHr=s(fae);Rao=r(nHr,"openai-gpt"),nHr.forEach(t),Pao=r(y$," \u2014 "),BP=n(y$,"A",{href:!0});var sHr=s(BP);Bao=r(sHr,"OpenAIGPTTokenizer"),sHr.forEach(t),Iao=r(y$," or "),IP=n(y$,"A",{href:!0});var lHr=s(IP);qao=r(lHr,"OpenAIGPTTokenizerFast"),lHr.forEach(t),Nao=r(y$," (OpenAI GPT model)"),y$.forEach(t),jao=i(S),Wg=n(S,"LI",{});var f3e=s(Wg);mae=n(f3e,"STRONG",{});var iHr=s(mae);Dao=r(iHr,"opt"),iHr.forEach(t),Gao=r(f3e," \u2014 "),qP=n(f3e,"A",{href:!0});var dHr=s(qP);Oao=r(dHr,"GPT2Tokenizer"),dHr.forEach(t),Vao=r(f3e," (OPT model)"),f3e.forEach(t),Xao=i(S),Ts=n(S,"LI",{});var L$=s(Ts);gae=n(L$,"STRONG",{});var cHr=s(gae);zao=r(cHr,"pegasus"),cHr.forEach(t),Wao=r(L$," \u2014 "),NP=n(L$,"A",{href:!0});var fHr=s(NP);Qao=r(fHr,"PegasusTokenizer"),fHr.forEach(t),Hao=r(L$," or "),jP=n(L$,"A",{href:!0});var mHr=s(jP);Uao=r(mHr,"PegasusTokenizerFast"),mHr.forEach(t),Jao=r(L$," (Pegasus model)"),L$.forEach(t),Yao=i(S),Qg=n(S,"LI",{});var m3e=s(Qg);hae=n(m3e,"STRONG",{});var gHr=s(hae);Kao=r(gHr,"perceiver"),gHr.forEach(t),Zao=r(m3e," \u2014 "),DP=n(m3e,"A",{href:!0});var hHr=s(DP);eno=r(hHr,"PerceiverTokenizer"),hHr.forEach(t),ono=r(m3e," (Perceiver model)"),m3e.forEach(t),rno=i(S),Hg=n(S,"LI",{});var g3e=s(Hg);pae=n(g3e,"STRONG",{});var pHr=s(pae);tno=r(pHr,"phobert"),pHr.forEach(t),ano=r(g3e," \u2014 "),GP=n(g3e,"A",{href:!0});var uHr=s(GP);nno=r(uHr,"PhobertTokenizer"),uHr.forEach(t),sno=r(g3e," (PhoBERT model)"),g3e.forEach(t),lno=i(S),Ug=n(S,"LI",{});var h3e=s(Ug);uae=n(h3e,"STRONG",{});var _Hr=s(uae);ino=r(_Hr,"plbart"),_Hr.forEach(t),dno=r(h3e," \u2014 "),OP=n(h3e,"A",{href:!0});var bHr=s(OP);cno=r(bHr,"PLBartTokenizer"),bHr.forEach(t),fno=r(h3e," (PLBart model)"),h3e.forEach(t),mno=i(S),Jg=n(S,"LI",{});var p3e=s(Jg);_ae=n(p3e,"STRONG",{});var vHr=s(_ae);gno=r(vHr,"prophetnet"),vHr.forEach(t),hno=r(p3e," \u2014 "),VP=n(p3e,"A",{href:!0});var FHr=s(VP);pno=r(FHr,"ProphetNetTokenizer"),FHr.forEach(t),uno=r(p3e," (ProphetNet model)"),p3e.forEach(t),_no=i(S),Ms=n(S,"LI",{});var x$=s(Ms);bae=n(x$,"STRONG",{});var THr=s(bae);bno=r(THr,"qdqbert"),THr.forEach(t),vno=r(x$," \u2014 "),XP=n(x$,"A",{href:!0});var MHr=s(XP);Fno=r(MHr,"BertTokenizer"),MHr.forEach(t),Tno=r(x$," or "),zP=n(x$,"A",{href:!0});var EHr=s(zP);Mno=r(EHr,"BertTokenizerFast"),EHr.forEach(t),Eno=r(x$," (QDQBert model)"),x$.forEach(t),Cno=i(S),Yg=n(S,"LI",{});var u3e=s(Yg);vae=n(u3e,"STRONG",{});var CHr=s(vae);wno=r(CHr,"rag"),CHr.forEach(t),Ano=r(u3e," \u2014 "),WP=n(u3e,"A",{href:!0});var wHr=s(WP);yno=r(wHr,"RagTokenizer"),wHr.forEach(t),Lno=r(u3e," (RAG model)"),u3e.forEach(t),xno=i(S),Es=n(S,"LI",{});var $$=s(Es);Fae=n($$,"STRONG",{});var AHr=s(Fae);$no=r(AHr,"realm"),AHr.forEach(t),kno=r($$," \u2014 "),QP=n($$,"A",{href:!0});var yHr=s(QP);Sno=r(yHr,"RealmTokenizer"),yHr.forEach(t),Rno=r($$," or "),HP=n($$,"A",{href:!0});var LHr=s(HP);Pno=r(LHr,"RealmTokenizerFast"),LHr.forEach(t),Bno=r($$," (Realm model)"),$$.forEach(t),Ino=i(S),Cs=n(S,"LI",{});var k$=s(Cs);Tae=n(k$,"STRONG",{});var xHr=s(Tae);qno=r(xHr,"reformer"),xHr.forEach(t),Nno=r(k$," \u2014 "),UP=n(k$,"A",{href:!0});var $Hr=s(UP);jno=r($Hr,"ReformerTokenizer"),$Hr.forEach(t),Dno=r(k$," or "),JP=n(k$,"A",{href:!0});var kHr=s(JP);Gno=r(kHr,"ReformerTokenizerFast"),kHr.forEach(t),Ono=r(k$," (Reformer model)"),k$.forEach(t),Vno=i(S),ws=n(S,"LI",{});var S$=s(ws);Mae=n(S$,"STRONG",{});var SHr=s(Mae);Xno=r(SHr,"rembert"),SHr.forEach(t),zno=r(S$," \u2014 "),YP=n(S$,"A",{href:!0});var RHr=s(YP);Wno=r(RHr,"RemBertTokenizer"),RHr.forEach(t),Qno=r(S$," or "),KP=n(S$,"A",{href:!0});var PHr=s(KP);Hno=r(PHr,"RemBertTokenizerFast"),PHr.forEach(t),Uno=r(S$," (RemBERT model)"),S$.forEach(t),Jno=i(S),As=n(S,"LI",{});var R$=s(As);Eae=n(R$,"STRONG",{});var BHr=s(Eae);Yno=r(BHr,"retribert"),BHr.forEach(t),Kno=r(R$," \u2014 "),ZP=n(R$,"A",{href:!0});var IHr=s(ZP);Zno=r(IHr,"RetriBertTokenizer"),IHr.forEach(t),eso=r(R$," or "),eB=n(R$,"A",{href:!0});var qHr=s(eB);oso=r(qHr,"RetriBertTokenizerFast"),qHr.forEach(t),rso=r(R$," (RetriBERT model)"),R$.forEach(t),tso=i(S),ys=n(S,"LI",{});var P$=s(ys);Cae=n(P$,"STRONG",{});var NHr=s(Cae);aso=r(NHr,"roberta"),NHr.forEach(t),nso=r(P$," \u2014 "),oB=n(P$,"A",{href:!0});var jHr=s(oB);sso=r(jHr,"RobertaTokenizer"),jHr.forEach(t),lso=r(P$," or "),rB=n(P$,"A",{href:!0});var DHr=s(rB);iso=r(DHr,"RobertaTokenizerFast"),DHr.forEach(t),dso=r(P$," (RoBERTa model)"),P$.forEach(t),cso=i(S),Ls=n(S,"LI",{});var B$=s(Ls);wae=n(B$,"STRONG",{});var GHr=s(wae);fso=r(GHr,"roformer"),GHr.forEach(t),mso=r(B$," \u2014 "),tB=n(B$,"A",{href:!0});var OHr=s(tB);gso=r(OHr,"RoFormerTokenizer"),OHr.forEach(t),hso=r(B$," or "),aB=n(B$,"A",{href:!0});var VHr=s(aB);pso=r(VHr,"RoFormerTokenizerFast"),VHr.forEach(t),uso=r(B$," (RoFormer model)"),B$.forEach(t),_so=i(S),Kg=n(S,"LI",{});var _3e=s(Kg);Aae=n(_3e,"STRONG",{});var XHr=s(Aae);bso=r(XHr,"speech_to_text"),XHr.forEach(t),vso=r(_3e," \u2014 "),nB=n(_3e,"A",{href:!0});var zHr=s(nB);Fso=r(zHr,"Speech2TextTokenizer"),zHr.forEach(t),Tso=r(_3e," (Speech2Text model)"),_3e.forEach(t),Mso=i(S),Zg=n(S,"LI",{});var b3e=s(Zg);yae=n(b3e,"STRONG",{});var WHr=s(yae);Eso=r(WHr,"speech_to_text_2"),WHr.forEach(t),Cso=r(b3e," \u2014 "),sB=n(b3e,"A",{href:!0});var QHr=s(sB);wso=r(QHr,"Speech2Text2Tokenizer"),QHr.forEach(t),Aso=r(b3e," (Speech2Text2 model)"),b3e.forEach(t),yso=i(S),xs=n(S,"LI",{});var I$=s(xs);Lae=n(I$,"STRONG",{});var HHr=s(Lae);Lso=r(HHr,"splinter"),HHr.forEach(t),xso=r(I$," \u2014 "),lB=n(I$,"A",{href:!0});var UHr=s(lB);$so=r(UHr,"SplinterTokenizer"),UHr.forEach(t),kso=r(I$," or "),iB=n(I$,"A",{href:!0});var JHr=s(iB);Sso=r(JHr,"SplinterTokenizerFast"),JHr.forEach(t),Rso=r(I$," (Splinter model)"),I$.forEach(t),Pso=i(S),$s=n(S,"LI",{});var q$=s($s);xae=n(q$,"STRONG",{});var YHr=s(xae);Bso=r(YHr,"squeezebert"),YHr.forEach(t),Iso=r(q$," \u2014 "),dB=n(q$,"A",{href:!0});var KHr=s(dB);qso=r(KHr,"SqueezeBertTokenizer"),KHr.forEach(t),Nso=r(q$," or "),cB=n(q$,"A",{href:!0});var ZHr=s(cB);jso=r(ZHr,"SqueezeBertTokenizerFast"),ZHr.forEach(t),Dso=r(q$," (SqueezeBERT model)"),q$.forEach(t),Gso=i(S),ks=n(S,"LI",{});var N$=s(ks);$ae=n(N$,"STRONG",{});var eUr=s($ae);Oso=r(eUr,"t5"),eUr.forEach(t),Vso=r(N$," \u2014 "),fB=n(N$,"A",{href:!0});var oUr=s(fB);Xso=r(oUr,"T5Tokenizer"),oUr.forEach(t),zso=r(N$," or "),mB=n(N$,"A",{href:!0});var rUr=s(mB);Wso=r(rUr,"T5TokenizerFast"),rUr.forEach(t),Qso=r(N$," (T5 model)"),N$.forEach(t),Hso=i(S),eh=n(S,"LI",{});var v3e=s(eh);kae=n(v3e,"STRONG",{});var tUr=s(kae);Uso=r(tUr,"tapas"),tUr.forEach(t),Jso=r(v3e," \u2014 "),gB=n(v3e,"A",{href:!0});var aUr=s(gB);Yso=r(aUr,"TapasTokenizer"),aUr.forEach(t),Kso=r(v3e," (TAPAS model)"),v3e.forEach(t),Zso=i(S),oh=n(S,"LI",{});var F3e=s(oh);Sae=n(F3e,"STRONG",{});var nUr=s(Sae);elo=r(nUr,"tapex"),nUr.forEach(t),olo=r(F3e," \u2014 "),hB=n(F3e,"A",{href:!0});var sUr=s(hB);rlo=r(sUr,"TapexTokenizer"),sUr.forEach(t),tlo=r(F3e," (TAPEX model)"),F3e.forEach(t),alo=i(S),rh=n(S,"LI",{});var T3e=s(rh);Rae=n(T3e,"STRONG",{});var lUr=s(Rae);nlo=r(lUr,"transfo-xl"),lUr.forEach(t),slo=r(T3e," \u2014 "),pB=n(T3e,"A",{href:!0});var iUr=s(pB);llo=r(iUr,"TransfoXLTokenizer"),iUr.forEach(t),ilo=r(T3e," (Transformer-XL model)"),T3e.forEach(t),dlo=i(S),Ss=n(S,"LI",{});var j$=s(Ss);Pae=n(j$,"STRONG",{});var dUr=s(Pae);clo=r(dUr,"vilt"),dUr.forEach(t),flo=r(j$," \u2014 "),uB=n(j$,"A",{href:!0});var cUr=s(uB);mlo=r(cUr,"BertTokenizer"),cUr.forEach(t),glo=r(j$," or "),_B=n(j$,"A",{href:!0});var fUr=s(_B);hlo=r(fUr,"BertTokenizerFast"),fUr.forEach(t),plo=r(j$," (ViLT model)"),j$.forEach(t),ulo=i(S),Rs=n(S,"LI",{});var D$=s(Rs);Bae=n(D$,"STRONG",{});var mUr=s(Bae);_lo=r(mUr,"visual_bert"),mUr.forEach(t),blo=r(D$," \u2014 "),bB=n(D$,"A",{href:!0});var gUr=s(bB);vlo=r(gUr,"BertTokenizer"),gUr.forEach(t),Flo=r(D$," or "),vB=n(D$,"A",{href:!0});var hUr=s(vB);Tlo=r(hUr,"BertTokenizerFast"),hUr.forEach(t),Mlo=r(D$," (VisualBert model)"),D$.forEach(t),Elo=i(S),th=n(S,"LI",{});var M3e=s(th);Iae=n(M3e,"STRONG",{});var pUr=s(Iae);Clo=r(pUr,"wav2vec2"),pUr.forEach(t),wlo=r(M3e," \u2014 "),FB=n(M3e,"A",{href:!0});var uUr=s(FB);Alo=r(uUr,"Wav2Vec2CTCTokenizer"),uUr.forEach(t),ylo=r(M3e," (Wav2Vec2 model)"),M3e.forEach(t),Llo=i(S),ah=n(S,"LI",{});var E3e=s(ah);qae=n(E3e,"STRONG",{});var _Ur=s(qae);xlo=r(_Ur,"wav2vec2-conformer"),_Ur.forEach(t),$lo=r(E3e," \u2014 "),TB=n(E3e,"A",{href:!0});var bUr=s(TB);klo=r(bUr,"Wav2Vec2CTCTokenizer"),bUr.forEach(t),Slo=r(E3e," (Wav2Vec2-Conformer model)"),E3e.forEach(t),Rlo=i(S),nh=n(S,"LI",{});var C3e=s(nh);Nae=n(C3e,"STRONG",{});var vUr=s(Nae);Plo=r(vUr,"wav2vec2_phoneme"),vUr.forEach(t),Blo=r(C3e," \u2014 "),MB=n(C3e,"A",{href:!0});var FUr=s(MB);Ilo=r(FUr,"Wav2Vec2PhonemeCTCTokenizer"),FUr.forEach(t),qlo=r(C3e," (Wav2Vec2Phoneme model)"),C3e.forEach(t),Nlo=i(S),Ps=n(S,"LI",{});var G$=s(Ps);jae=n(G$,"STRONG",{});var TUr=s(jae);jlo=r(TUr,"xglm"),TUr.forEach(t),Dlo=r(G$," \u2014 "),EB=n(G$,"A",{href:!0});var MUr=s(EB);Glo=r(MUr,"XGLMTokenizer"),MUr.forEach(t),Olo=r(G$," or "),CB=n(G$,"A",{href:!0});var EUr=s(CB);Vlo=r(EUr,"XGLMTokenizerFast"),EUr.forEach(t),Xlo=r(G$," (XGLM model)"),G$.forEach(t),zlo=i(S),sh=n(S,"LI",{});var w3e=s(sh);Dae=n(w3e,"STRONG",{});var CUr=s(Dae);Wlo=r(CUr,"xlm"),CUr.forEach(t),Qlo=r(w3e," \u2014 "),wB=n(w3e,"A",{href:!0});var wUr=s(wB);Hlo=r(wUr,"XLMTokenizer"),wUr.forEach(t),Ulo=r(w3e," (XLM model)"),w3e.forEach(t),Jlo=i(S),lh=n(S,"LI",{});var A3e=s(lh);Gae=n(A3e,"STRONG",{});var AUr=s(Gae);Ylo=r(AUr,"xlm-prophetnet"),AUr.forEach(t),Klo=r(A3e," \u2014 "),AB=n(A3e,"A",{href:!0});var yUr=s(AB);Zlo=r(yUr,"XLMProphetNetTokenizer"),yUr.forEach(t),eio=r(A3e," (XLMProphetNet model)"),A3e.forEach(t),oio=i(S),Bs=n(S,"LI",{});var O$=s(Bs);Oae=n(O$,"STRONG",{});var LUr=s(Oae);rio=r(LUr,"xlm-roberta"),LUr.forEach(t),tio=r(O$," \u2014 "),yB=n(O$,"A",{href:!0});var xUr=s(yB);aio=r(xUr,"XLMRobertaTokenizer"),xUr.forEach(t),nio=r(O$," or "),LB=n(O$,"A",{href:!0});var $Ur=s(LB);sio=r($Ur,"XLMRobertaTokenizerFast"),$Ur.forEach(t),lio=r(O$," (XLM-RoBERTa model)"),O$.forEach(t),iio=i(S),Is=n(S,"LI",{});var V$=s(Is);Vae=n(V$,"STRONG",{});var kUr=s(Vae);dio=r(kUr,"xlm-roberta-xl"),kUr.forEach(t),cio=r(V$," \u2014 "),xB=n(V$,"A",{href:!0});var SUr=s(xB);fio=r(SUr,"RobertaTokenizer"),SUr.forEach(t),mio=r(V$," or "),$B=n(V$,"A",{href:!0});var RUr=s($B);gio=r(RUr,"RobertaTokenizerFast"),RUr.forEach(t),hio=r(V$," (XLM-RoBERTa-XL model)"),V$.forEach(t),pio=i(S),qs=n(S,"LI",{});var X$=s(qs);Xae=n(X$,"STRONG",{});var PUr=s(Xae);uio=r(PUr,"xlnet"),PUr.forEach(t),_io=r(X$," \u2014 "),kB=n(X$,"A",{href:!0});var BUr=s(kB);bio=r(BUr,"XLNetTokenizer"),BUr.forEach(t),vio=r(X$," or "),SB=n(X$,"A",{href:!0});var IUr=s(SB);Fio=r(IUr,"XLNetTokenizerFast"),IUr.forEach(t),Tio=r(X$," (XLNet model)"),X$.forEach(t),Mio=i(S),Ns=n(S,"LI",{});var z$=s(Ns);zae=n(z$,"STRONG",{});var qUr=s(zae);Eio=r(qUr,"yoso"),qUr.forEach(t),Cio=r(z$," \u2014 "),RB=n(z$,"A",{href:!0});var NUr=s(RB);wio=r(NUr,"AlbertTokenizer"),NUr.forEach(t),Aio=r(z$," or "),PB=n(z$,"A",{href:!0});var jUr=s(PB);yio=r(jUr,"AlbertTokenizerFast"),jUr.forEach(t),Lio=r(z$," (YOSO model)"),z$.forEach(t),S.forEach(t),xio=i(Vs),T(ih.$$.fragment,Vs),Vs.forEach(t),$io=i(Os),dh=n(Os,"DIV",{class:!0});var Rje=s(dh);T(jA.$$.fragment,Rje),kio=i(Rje),Wae=n(Rje,"P",{});var DUr=s(Wae);Sio=r(DUr,"Register a new tokenizer in this mapping."),DUr.forEach(t),Rje.forEach(t),Os.forEach(t),Sqe=i(f),Li=n(f,"H2",{class:!0});var Pje=s(Li);ch=n(Pje,"A",{id:!0,class:!0,href:!0});var GUr=s(ch);Qae=n(GUr,"SPAN",{});var OUr=s(Qae);T(DA.$$.fragment,OUr),OUr.forEach(t),GUr.forEach(t),Rio=i(Pje),Hae=n(Pje,"SPAN",{});var VUr=s(Hae);Pio=r(VUr,"AutoFeatureExtractor"),VUr.forEach(t),Pje.forEach(t),Rqe=i(f),yo=n(f,"DIV",{class:!0});var Xs=s(yo);T(GA.$$.fragment,Xs),Bio=i(Xs),OA=n(Xs,"P",{});var Bje=s(OA);Iio=r(Bje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BB=n(Bje,"A",{href:!0});var XUr=s(BB);qio=r(XUr,"AutoFeatureExtractor.from_pretrained()"),XUr.forEach(t),Nio=r(Bje," class method."),Bje.forEach(t),jio=i(Xs),VA=n(Xs,"P",{});var Ije=s(VA);Dio=r(Ije,"This class cannot be instantiated directly using "),Uae=n(Ije,"CODE",{});var zUr=s(Uae);Gio=r(zUr,"__init__()"),zUr.forEach(t),Oio=r(Ije," (throws an error)."),Ije.forEach(t),Vio=i(Xs),He=n(Xs,"DIV",{class:!0});var ra=s(He);T(XA.$$.fragment,ra),Xio=i(ra),Jae=n(ra,"P",{});var WUr=s(Jae);zio=r(WUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),WUr.forEach(t),Wio=i(ra),ka=n(ra,"P",{});var y3=s(ka);Qio=r(y3,"The feature extractor class to instantiate is selected based on the "),Yae=n(y3,"CODE",{});var QUr=s(Yae);Hio=r(QUr,"model_type"),QUr.forEach(t),Uio=r(y3,` property of the config object
(either passed as an argument or loaded from `),Kae=n(y3,"CODE",{});var HUr=s(Kae);Jio=r(HUr,"pretrained_model_name_or_path"),HUr.forEach(t),Yio=r(y3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zae=n(y3,"CODE",{});var UUr=s(Zae);Kio=r(UUr,"pretrained_model_name_or_path"),UUr.forEach(t),Zio=r(y3,":"),y3.forEach(t),edo=i(ra),Z=n(ra,"UL",{});var re=s(Z);fh=n(re,"LI",{});var y3e=s(fh);ene=n(y3e,"STRONG",{});var JUr=s(ene);odo=r(JUr,"beit"),JUr.forEach(t),rdo=r(y3e," \u2014 "),IB=n(y3e,"A",{href:!0});var YUr=s(IB);tdo=r(YUr,"BeitFeatureExtractor"),YUr.forEach(t),ado=r(y3e," (BEiT model)"),y3e.forEach(t),ndo=i(re),mh=n(re,"LI",{});var L3e=s(mh);one=n(L3e,"STRONG",{});var KUr=s(one);sdo=r(KUr,"clip"),KUr.forEach(t),ldo=r(L3e," \u2014 "),qB=n(L3e,"A",{href:!0});var ZUr=s(qB);ido=r(ZUr,"CLIPFeatureExtractor"),ZUr.forEach(t),ddo=r(L3e," (CLIP model)"),L3e.forEach(t),cdo=i(re),gh=n(re,"LI",{});var x3e=s(gh);rne=n(x3e,"STRONG",{});var eJr=s(rne);fdo=r(eJr,"convnext"),eJr.forEach(t),mdo=r(x3e," \u2014 "),NB=n(x3e,"A",{href:!0});var oJr=s(NB);gdo=r(oJr,"ConvNextFeatureExtractor"),oJr.forEach(t),hdo=r(x3e," (ConvNext model)"),x3e.forEach(t),pdo=i(re),hh=n(re,"LI",{});var $3e=s(hh);tne=n($3e,"STRONG",{});var rJr=s(tne);udo=r(rJr,"data2vec-audio"),rJr.forEach(t),_do=r($3e," \u2014 "),jB=n($3e,"A",{href:!0});var tJr=s(jB);bdo=r(tJr,"Wav2Vec2FeatureExtractor"),tJr.forEach(t),vdo=r($3e," (Data2VecAudio model)"),$3e.forEach(t),Fdo=i(re),ph=n(re,"LI",{});var k3e=s(ph);ane=n(k3e,"STRONG",{});var aJr=s(ane);Tdo=r(aJr,"data2vec-vision"),aJr.forEach(t),Mdo=r(k3e," \u2014 "),DB=n(k3e,"A",{href:!0});var nJr=s(DB);Edo=r(nJr,"BeitFeatureExtractor"),nJr.forEach(t),Cdo=r(k3e," (Data2VecVision model)"),k3e.forEach(t),wdo=i(re),uh=n(re,"LI",{});var S3e=s(uh);nne=n(S3e,"STRONG",{});var sJr=s(nne);Ado=r(sJr,"deit"),sJr.forEach(t),ydo=r(S3e," \u2014 "),GB=n(S3e,"A",{href:!0});var lJr=s(GB);Ldo=r(lJr,"DeiTFeatureExtractor"),lJr.forEach(t),xdo=r(S3e," (DeiT model)"),S3e.forEach(t),$do=i(re),_h=n(re,"LI",{});var R3e=s(_h);sne=n(R3e,"STRONG",{});var iJr=s(sne);kdo=r(iJr,"detr"),iJr.forEach(t),Sdo=r(R3e," \u2014 "),OB=n(R3e,"A",{href:!0});var dJr=s(OB);Rdo=r(dJr,"DetrFeatureExtractor"),dJr.forEach(t),Pdo=r(R3e," (DETR model)"),R3e.forEach(t),Bdo=i(re),bh=n(re,"LI",{});var P3e=s(bh);lne=n(P3e,"STRONG",{});var cJr=s(lne);Ido=r(cJr,"dpt"),cJr.forEach(t),qdo=r(P3e," \u2014 "),VB=n(P3e,"A",{href:!0});var fJr=s(VB);Ndo=r(fJr,"DPTFeatureExtractor"),fJr.forEach(t),jdo=r(P3e," (DPT model)"),P3e.forEach(t),Ddo=i(re),vh=n(re,"LI",{});var B3e=s(vh);ine=n(B3e,"STRONG",{});var mJr=s(ine);Gdo=r(mJr,"flava"),mJr.forEach(t),Odo=r(B3e," \u2014 "),XB=n(B3e,"A",{href:!0});var gJr=s(XB);Vdo=r(gJr,"FlavaFeatureExtractor"),gJr.forEach(t),Xdo=r(B3e," (Flava model)"),B3e.forEach(t),zdo=i(re),Fh=n(re,"LI",{});var I3e=s(Fh);dne=n(I3e,"STRONG",{});var hJr=s(dne);Wdo=r(hJr,"glpn"),hJr.forEach(t),Qdo=r(I3e," \u2014 "),zB=n(I3e,"A",{href:!0});var pJr=s(zB);Hdo=r(pJr,"GLPNFeatureExtractor"),pJr.forEach(t),Udo=r(I3e," (GLPN model)"),I3e.forEach(t),Jdo=i(re),Th=n(re,"LI",{});var q3e=s(Th);cne=n(q3e,"STRONG",{});var uJr=s(cne);Ydo=r(uJr,"hubert"),uJr.forEach(t),Kdo=r(q3e," \u2014 "),WB=n(q3e,"A",{href:!0});var _Jr=s(WB);Zdo=r(_Jr,"Wav2Vec2FeatureExtractor"),_Jr.forEach(t),eco=r(q3e," (Hubert model)"),q3e.forEach(t),oco=i(re),Mh=n(re,"LI",{});var N3e=s(Mh);fne=n(N3e,"STRONG",{});var bJr=s(fne);rco=r(bJr,"layoutlmv2"),bJr.forEach(t),tco=r(N3e," \u2014 "),QB=n(N3e,"A",{href:!0});var vJr=s(QB);aco=r(vJr,"LayoutLMv2FeatureExtractor"),vJr.forEach(t),nco=r(N3e," (LayoutLMv2 model)"),N3e.forEach(t),sco=i(re),Eh=n(re,"LI",{});var j3e=s(Eh);mne=n(j3e,"STRONG",{});var FJr=s(mne);lco=r(FJr,"maskformer"),FJr.forEach(t),ico=r(j3e," \u2014 "),HB=n(j3e,"A",{href:!0});var TJr=s(HB);dco=r(TJr,"MaskFormerFeatureExtractor"),TJr.forEach(t),cco=r(j3e," (MaskFormer model)"),j3e.forEach(t),fco=i(re),Ch=n(re,"LI",{});var D3e=s(Ch);gne=n(D3e,"STRONG",{});var MJr=s(gne);mco=r(MJr,"perceiver"),MJr.forEach(t),gco=r(D3e," \u2014 "),UB=n(D3e,"A",{href:!0});var EJr=s(UB);hco=r(EJr,"PerceiverFeatureExtractor"),EJr.forEach(t),pco=r(D3e," (Perceiver model)"),D3e.forEach(t),uco=i(re),wh=n(re,"LI",{});var G3e=s(wh);hne=n(G3e,"STRONG",{});var CJr=s(hne);_co=r(CJr,"poolformer"),CJr.forEach(t),bco=r(G3e," \u2014 "),JB=n(G3e,"A",{href:!0});var wJr=s(JB);vco=r(wJr,"PoolFormerFeatureExtractor"),wJr.forEach(t),Fco=r(G3e," (PoolFormer model)"),G3e.forEach(t),Tco=i(re),Ah=n(re,"LI",{});var O3e=s(Ah);pne=n(O3e,"STRONG",{});var AJr=s(pne);Mco=r(AJr,"regnet"),AJr.forEach(t),Eco=r(O3e," \u2014 "),YB=n(O3e,"A",{href:!0});var yJr=s(YB);Cco=r(yJr,"ConvNextFeatureExtractor"),yJr.forEach(t),wco=r(O3e," (RegNet model)"),O3e.forEach(t),Aco=i(re),yh=n(re,"LI",{});var V3e=s(yh);une=n(V3e,"STRONG",{});var LJr=s(une);yco=r(LJr,"resnet"),LJr.forEach(t),Lco=r(V3e," \u2014 "),KB=n(V3e,"A",{href:!0});var xJr=s(KB);xco=r(xJr,"ConvNextFeatureExtractor"),xJr.forEach(t),$co=r(V3e," (ResNet model)"),V3e.forEach(t),kco=i(re),Lh=n(re,"LI",{});var X3e=s(Lh);_ne=n(X3e,"STRONG",{});var $Jr=s(_ne);Sco=r($Jr,"segformer"),$Jr.forEach(t),Rco=r(X3e," \u2014 "),ZB=n(X3e,"A",{href:!0});var kJr=s(ZB);Pco=r(kJr,"SegformerFeatureExtractor"),kJr.forEach(t),Bco=r(X3e," (SegFormer model)"),X3e.forEach(t),Ico=i(re),xh=n(re,"LI",{});var z3e=s(xh);bne=n(z3e,"STRONG",{});var SJr=s(bne);qco=r(SJr,"speech_to_text"),SJr.forEach(t),Nco=r(z3e," \u2014 "),eI=n(z3e,"A",{href:!0});var RJr=s(eI);jco=r(RJr,"Speech2TextFeatureExtractor"),RJr.forEach(t),Dco=r(z3e," (Speech2Text model)"),z3e.forEach(t),Gco=i(re),$h=n(re,"LI",{});var W3e=s($h);vne=n(W3e,"STRONG",{});var PJr=s(vne);Oco=r(PJr,"swin"),PJr.forEach(t),Vco=r(W3e," \u2014 "),oI=n(W3e,"A",{href:!0});var BJr=s(oI);Xco=r(BJr,"ViTFeatureExtractor"),BJr.forEach(t),zco=r(W3e," (Swin model)"),W3e.forEach(t),Wco=i(re),kh=n(re,"LI",{});var Q3e=s(kh);Fne=n(Q3e,"STRONG",{});var IJr=s(Fne);Qco=r(IJr,"van"),IJr.forEach(t),Hco=r(Q3e," \u2014 "),rI=n(Q3e,"A",{href:!0});var qJr=s(rI);Uco=r(qJr,"ConvNextFeatureExtractor"),qJr.forEach(t),Jco=r(Q3e," (VAN model)"),Q3e.forEach(t),Yco=i(re),Sh=n(re,"LI",{});var H3e=s(Sh);Tne=n(H3e,"STRONG",{});var NJr=s(Tne);Kco=r(NJr,"vilt"),NJr.forEach(t),Zco=r(H3e," \u2014 "),tI=n(H3e,"A",{href:!0});var jJr=s(tI);efo=r(jJr,"ViltFeatureExtractor"),jJr.forEach(t),ofo=r(H3e," (ViLT model)"),H3e.forEach(t),rfo=i(re),Rh=n(re,"LI",{});var U3e=s(Rh);Mne=n(U3e,"STRONG",{});var DJr=s(Mne);tfo=r(DJr,"vit"),DJr.forEach(t),afo=r(U3e," \u2014 "),aI=n(U3e,"A",{href:!0});var GJr=s(aI);nfo=r(GJr,"ViTFeatureExtractor"),GJr.forEach(t),sfo=r(U3e," (ViT model)"),U3e.forEach(t),lfo=i(re),Ph=n(re,"LI",{});var J3e=s(Ph);Ene=n(J3e,"STRONG",{});var OJr=s(Ene);ifo=r(OJr,"vit_mae"),OJr.forEach(t),dfo=r(J3e," \u2014 "),nI=n(J3e,"A",{href:!0});var VJr=s(nI);cfo=r(VJr,"ViTFeatureExtractor"),VJr.forEach(t),ffo=r(J3e," (ViTMAE model)"),J3e.forEach(t),mfo=i(re),Bh=n(re,"LI",{});var Y3e=s(Bh);Cne=n(Y3e,"STRONG",{});var XJr=s(Cne);gfo=r(XJr,"wav2vec2"),XJr.forEach(t),hfo=r(Y3e," \u2014 "),sI=n(Y3e,"A",{href:!0});var zJr=s(sI);pfo=r(zJr,"Wav2Vec2FeatureExtractor"),zJr.forEach(t),ufo=r(Y3e," (Wav2Vec2 model)"),Y3e.forEach(t),_fo=i(re),Ih=n(re,"LI",{});var K3e=s(Ih);wne=n(K3e,"STRONG",{});var WJr=s(wne);bfo=r(WJr,"wav2vec2-conformer"),WJr.forEach(t),vfo=r(K3e," \u2014 "),lI=n(K3e,"A",{href:!0});var QJr=s(lI);Ffo=r(QJr,"Wav2Vec2FeatureExtractor"),QJr.forEach(t),Tfo=r(K3e," (Wav2Vec2-Conformer model)"),K3e.forEach(t),Mfo=i(re),qh=n(re,"LI",{});var Z3e=s(qh);Ane=n(Z3e,"STRONG",{});var HJr=s(Ane);Efo=r(HJr,"yolos"),HJr.forEach(t),Cfo=r(Z3e," \u2014 "),iI=n(Z3e,"A",{href:!0});var UJr=s(iI);wfo=r(UJr,"YolosFeatureExtractor"),UJr.forEach(t),Afo=r(Z3e," (YOLOS model)"),Z3e.forEach(t),re.forEach(t),yfo=i(ra),T(Nh.$$.fragment,ra),Lfo=i(ra),T(jh.$$.fragment,ra),ra.forEach(t),xfo=i(Xs),Dh=n(Xs,"DIV",{class:!0});var qje=s(Dh);T(zA.$$.fragment,qje),$fo=i(qje),yne=n(qje,"P",{});var JJr=s(yne);kfo=r(JJr,"Register a new feature extractor for this class."),JJr.forEach(t),qje.forEach(t),Xs.forEach(t),Pqe=i(f),xi=n(f,"H2",{class:!0});var Nje=s(xi);Gh=n(Nje,"A",{id:!0,class:!0,href:!0});var YJr=s(Gh);Lne=n(YJr,"SPAN",{});var KJr=s(Lne);T(WA.$$.fragment,KJr),KJr.forEach(t),YJr.forEach(t),Sfo=i(Nje),xne=n(Nje,"SPAN",{});var ZJr=s(xne);Rfo=r(ZJr,"AutoProcessor"),ZJr.forEach(t),Nje.forEach(t),Bqe=i(f),Lo=n(f,"DIV",{class:!0});var zs=s(Lo);T(QA.$$.fragment,zs),Pfo=i(zs),HA=n(zs,"P",{});var jje=s(HA);Bfo=r(jje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dI=n(jje,"A",{href:!0});var eYr=s(dI);Ifo=r(eYr,"AutoProcessor.from_pretrained()"),eYr.forEach(t),qfo=r(jje," class method."),jje.forEach(t),Nfo=i(zs),UA=n(zs,"P",{});var Dje=s(UA);jfo=r(Dje,"This class cannot be instantiated directly using "),$ne=n(Dje,"CODE",{});var oYr=s($ne);Dfo=r(oYr,"__init__()"),oYr.forEach(t),Gfo=r(Dje," (throws an error)."),Dje.forEach(t),Ofo=i(zs),Ue=n(zs,"DIV",{class:!0});var ta=s(Ue);T(JA.$$.fragment,ta),Vfo=i(ta),kne=n(ta,"P",{});var rYr=s(kne);Xfo=r(rYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rYr.forEach(t),zfo=i(ta),$i=n(ta,"P",{});var aZ=s($i);Wfo=r(aZ,"The processor class to instantiate is selected based on the "),Sne=n(aZ,"CODE",{});var tYr=s(Sne);Qfo=r(tYr,"model_type"),tYr.forEach(t),Hfo=r(aZ,` property of the config object (either
passed as an argument or loaded from `),Rne=n(aZ,"CODE",{});var aYr=s(Rne);Ufo=r(aYr,"pretrained_model_name_or_path"),aYr.forEach(t),Jfo=r(aZ," if possible):"),aZ.forEach(t),Yfo=i(ta),pe=n(ta,"UL",{});var be=s(pe);Oh=n(be,"LI",{});var ewe=s(Oh);Pne=n(ewe,"STRONG",{});var nYr=s(Pne);Kfo=r(nYr,"clip"),nYr.forEach(t),Zfo=r(ewe," \u2014 "),cI=n(ewe,"A",{href:!0});var sYr=s(cI);emo=r(sYr,"CLIPProcessor"),sYr.forEach(t),omo=r(ewe," (CLIP model)"),ewe.forEach(t),rmo=i(be),Vh=n(be,"LI",{});var owe=s(Vh);Bne=n(owe,"STRONG",{});var lYr=s(Bne);tmo=r(lYr,"flava"),lYr.forEach(t),amo=r(owe," \u2014 "),Ine=n(owe,"CODE",{});var iYr=s(Ine);nmo=r(iYr,"FLAVAProcessor"),iYr.forEach(t),smo=r(owe," (Flava model)"),owe.forEach(t),lmo=i(be),Xh=n(be,"LI",{});var rwe=s(Xh);qne=n(rwe,"STRONG",{});var dYr=s(qne);imo=r(dYr,"layoutlmv2"),dYr.forEach(t),dmo=r(rwe," \u2014 "),fI=n(rwe,"A",{href:!0});var cYr=s(fI);cmo=r(cYr,"LayoutLMv2Processor"),cYr.forEach(t),fmo=r(rwe," (LayoutLMv2 model)"),rwe.forEach(t),mmo=i(be),zh=n(be,"LI",{});var twe=s(zh);Nne=n(twe,"STRONG",{});var fYr=s(Nne);gmo=r(fYr,"layoutxlm"),fYr.forEach(t),hmo=r(twe," \u2014 "),mI=n(twe,"A",{href:!0});var mYr=s(mI);pmo=r(mYr,"LayoutXLMProcessor"),mYr.forEach(t),umo=r(twe," (LayoutXLM model)"),twe.forEach(t),_mo=i(be),Wh=n(be,"LI",{});var awe=s(Wh);jne=n(awe,"STRONG",{});var gYr=s(jne);bmo=r(gYr,"sew"),gYr.forEach(t),vmo=r(awe," \u2014 "),gI=n(awe,"A",{href:!0});var hYr=s(gI);Fmo=r(hYr,"Wav2Vec2Processor"),hYr.forEach(t),Tmo=r(awe," (SEW model)"),awe.forEach(t),Mmo=i(be),Qh=n(be,"LI",{});var nwe=s(Qh);Dne=n(nwe,"STRONG",{});var pYr=s(Dne);Emo=r(pYr,"sew-d"),pYr.forEach(t),Cmo=r(nwe," \u2014 "),hI=n(nwe,"A",{href:!0});var uYr=s(hI);wmo=r(uYr,"Wav2Vec2Processor"),uYr.forEach(t),Amo=r(nwe," (SEW-D model)"),nwe.forEach(t),ymo=i(be),Hh=n(be,"LI",{});var swe=s(Hh);Gne=n(swe,"STRONG",{});var _Yr=s(Gne);Lmo=r(_Yr,"speech_to_text"),_Yr.forEach(t),xmo=r(swe," \u2014 "),pI=n(swe,"A",{href:!0});var bYr=s(pI);$mo=r(bYr,"Speech2TextProcessor"),bYr.forEach(t),kmo=r(swe," (Speech2Text model)"),swe.forEach(t),Smo=i(be),Uh=n(be,"LI",{});var lwe=s(Uh);One=n(lwe,"STRONG",{});var vYr=s(One);Rmo=r(vYr,"speech_to_text_2"),vYr.forEach(t),Pmo=r(lwe," \u2014 "),uI=n(lwe,"A",{href:!0});var FYr=s(uI);Bmo=r(FYr,"Speech2Text2Processor"),FYr.forEach(t),Imo=r(lwe," (Speech2Text2 model)"),lwe.forEach(t),qmo=i(be),Jh=n(be,"LI",{});var iwe=s(Jh);Vne=n(iwe,"STRONG",{});var TYr=s(Vne);Nmo=r(TYr,"trocr"),TYr.forEach(t),jmo=r(iwe," \u2014 "),_I=n(iwe,"A",{href:!0});var MYr=s(_I);Dmo=r(MYr,"TrOCRProcessor"),MYr.forEach(t),Gmo=r(iwe," (TrOCR model)"),iwe.forEach(t),Omo=i(be),Yh=n(be,"LI",{});var dwe=s(Yh);Xne=n(dwe,"STRONG",{});var EYr=s(Xne);Vmo=r(EYr,"unispeech"),EYr.forEach(t),Xmo=r(dwe," \u2014 "),bI=n(dwe,"A",{href:!0});var CYr=s(bI);zmo=r(CYr,"Wav2Vec2Processor"),CYr.forEach(t),Wmo=r(dwe," (UniSpeech model)"),dwe.forEach(t),Qmo=i(be),Kh=n(be,"LI",{});var cwe=s(Kh);zne=n(cwe,"STRONG",{});var wYr=s(zne);Hmo=r(wYr,"unispeech-sat"),wYr.forEach(t),Umo=r(cwe," \u2014 "),vI=n(cwe,"A",{href:!0});var AYr=s(vI);Jmo=r(AYr,"Wav2Vec2Processor"),AYr.forEach(t),Ymo=r(cwe," (UniSpeechSat model)"),cwe.forEach(t),Kmo=i(be),Zh=n(be,"LI",{});var fwe=s(Zh);Wne=n(fwe,"STRONG",{});var yYr=s(Wne);Zmo=r(yYr,"vilt"),yYr.forEach(t),ego=r(fwe," \u2014 "),FI=n(fwe,"A",{href:!0});var LYr=s(FI);ogo=r(LYr,"ViltProcessor"),LYr.forEach(t),rgo=r(fwe," (ViLT model)"),fwe.forEach(t),tgo=i(be),ep=n(be,"LI",{});var mwe=s(ep);Qne=n(mwe,"STRONG",{});var xYr=s(Qne);ago=r(xYr,"vision-text-dual-encoder"),xYr.forEach(t),ngo=r(mwe," \u2014 "),TI=n(mwe,"A",{href:!0});var $Yr=s(TI);sgo=r($Yr,"VisionTextDualEncoderProcessor"),$Yr.forEach(t),lgo=r(mwe," (VisionTextDualEncoder model)"),mwe.forEach(t),igo=i(be),op=n(be,"LI",{});var gwe=s(op);Hne=n(gwe,"STRONG",{});var kYr=s(Hne);dgo=r(kYr,"wav2vec2"),kYr.forEach(t),cgo=r(gwe," \u2014 "),MI=n(gwe,"A",{href:!0});var SYr=s(MI);fgo=r(SYr,"Wav2Vec2Processor"),SYr.forEach(t),mgo=r(gwe," (Wav2Vec2 model)"),gwe.forEach(t),ggo=i(be),rp=n(be,"LI",{});var hwe=s(rp);Une=n(hwe,"STRONG",{});var RYr=s(Une);hgo=r(RYr,"wav2vec2-conformer"),RYr.forEach(t),pgo=r(hwe," \u2014 "),EI=n(hwe,"A",{href:!0});var PYr=s(EI);ugo=r(PYr,"Wav2Vec2Processor"),PYr.forEach(t),_go=r(hwe," (Wav2Vec2-Conformer model)"),hwe.forEach(t),bgo=i(be),tp=n(be,"LI",{});var pwe=s(tp);Jne=n(pwe,"STRONG",{});var BYr=s(Jne);vgo=r(BYr,"wavlm"),BYr.forEach(t),Fgo=r(pwe," \u2014 "),CI=n(pwe,"A",{href:!0});var IYr=s(CI);Tgo=r(IYr,"Wav2Vec2Processor"),IYr.forEach(t),Mgo=r(pwe," (WavLM model)"),pwe.forEach(t),be.forEach(t),Ego=i(ta),T(ap.$$.fragment,ta),Cgo=i(ta),T(np.$$.fragment,ta),ta.forEach(t),wgo=i(zs),sp=n(zs,"DIV",{class:!0});var Gje=s(sp);T(YA.$$.fragment,Gje),Ago=i(Gje),Yne=n(Gje,"P",{});var qYr=s(Yne);ygo=r(qYr,"Register a new processor for this class."),qYr.forEach(t),Gje.forEach(t),zs.forEach(t),Iqe=i(f),ki=n(f,"H2",{class:!0});var Oje=s(ki);lp=n(Oje,"A",{id:!0,class:!0,href:!0});var NYr=s(lp);Kne=n(NYr,"SPAN",{});var jYr=s(Kne);T(KA.$$.fragment,jYr),jYr.forEach(t),NYr.forEach(t),Lgo=i(Oje),Zne=n(Oje,"SPAN",{});var DYr=s(Zne);xgo=r(DYr,"AutoModel"),DYr.forEach(t),Oje.forEach(t),qqe=i(f),xo=n(f,"DIV",{class:!0});var Ws=s(xo);T(ZA.$$.fragment,Ws),$go=i(Ws),Si=n(Ws,"P",{});var nZ=s(Si);kgo=r(nZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wI=n(nZ,"A",{href:!0});var GYr=s(wI);Sgo=r(GYr,"from_pretrained()"),GYr.forEach(t),Rgo=r(nZ," class method or the "),AI=n(nZ,"A",{href:!0});var OYr=s(AI);Pgo=r(OYr,"from_config()"),OYr.forEach(t),Bgo=r(nZ,` class
method.`),nZ.forEach(t),Igo=i(Ws),e0=n(Ws,"P",{});var Vje=s(e0);qgo=r(Vje,"This class cannot be instantiated directly using "),ese=n(Vje,"CODE",{});var VYr=s(ese);Ngo=r(VYr,"__init__()"),VYr.forEach(t),jgo=r(Vje," (throws an error)."),Vje.forEach(t),Dgo=i(Ws),nt=n(Ws,"DIV",{class:!0});var L3=s(nt);T(o0.$$.fragment,L3),Ggo=i(L3),ose=n(L3,"P",{});var XYr=s(ose);Ogo=r(XYr,"Instantiates one of the base model classes of the library from a configuration."),XYr.forEach(t),Vgo=i(L3),Ri=n(L3,"P",{});var sZ=s(Ri);Xgo=r(sZ,`Note:
Loading a model from its configuration file does `),rse=n(sZ,"STRONG",{});var zYr=s(rse);zgo=r(zYr,"not"),zYr.forEach(t),Wgo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=n(sZ,"A",{href:!0});var WYr=s(yI);Qgo=r(WYr,"from_pretrained()"),WYr.forEach(t),Hgo=r(sZ," to load the model weights."),sZ.forEach(t),Ugo=i(L3),T(ip.$$.fragment,L3),L3.forEach(t),Jgo=i(Ws),Je=n(Ws,"DIV",{class:!0});var aa=s(Je);T(r0.$$.fragment,aa),Ygo=i(aa),tse=n(aa,"P",{});var QYr=s(tse);Kgo=r(QYr,"Instantiate one of the base model classes of the library from a pretrained model."),QYr.forEach(t),Zgo=i(aa),Sa=n(aa,"P",{});var x3=s(Sa);eho=r(x3,"The model class to instantiate is selected based on the "),ase=n(x3,"CODE",{});var HYr=s(ase);oho=r(HYr,"model_type"),HYr.forEach(t),rho=r(x3,` property of the config object (either
passed as an argument or loaded from `),nse=n(x3,"CODE",{});var UYr=s(nse);tho=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),aho=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=n(x3,"CODE",{});var JYr=s(sse);nho=r(JYr,"pretrained_model_name_or_path"),JYr.forEach(t),sho=r(x3,":"),x3.forEach(t),lho=i(aa),x=n(aa,"UL",{});var $=s(x);dp=n($,"LI",{});var uwe=s(dp);lse=n(uwe,"STRONG",{});var YYr=s(lse);iho=r(YYr,"albert"),YYr.forEach(t),dho=r(uwe," \u2014 "),LI=n(uwe,"A",{href:!0});var KYr=s(LI);cho=r(KYr,"AlbertModel"),KYr.forEach(t),fho=r(uwe," (ALBERT model)"),uwe.forEach(t),mho=i($),cp=n($,"LI",{});var _we=s(cp);ise=n(_we,"STRONG",{});var ZYr=s(ise);gho=r(ZYr,"bart"),ZYr.forEach(t),hho=r(_we," \u2014 "),xI=n(_we,"A",{href:!0});var eKr=s(xI);pho=r(eKr,"BartModel"),eKr.forEach(t),uho=r(_we," (BART model)"),_we.forEach(t),_ho=i($),fp=n($,"LI",{});var bwe=s(fp);dse=n(bwe,"STRONG",{});var oKr=s(dse);bho=r(oKr,"beit"),oKr.forEach(t),vho=r(bwe," \u2014 "),$I=n(bwe,"A",{href:!0});var rKr=s($I);Fho=r(rKr,"BeitModel"),rKr.forEach(t),Tho=r(bwe," (BEiT model)"),bwe.forEach(t),Mho=i($),mp=n($,"LI",{});var vwe=s(mp);cse=n(vwe,"STRONG",{});var tKr=s(cse);Eho=r(tKr,"bert"),tKr.forEach(t),Cho=r(vwe," \u2014 "),kI=n(vwe,"A",{href:!0});var aKr=s(kI);who=r(aKr,"BertModel"),aKr.forEach(t),Aho=r(vwe," (BERT model)"),vwe.forEach(t),yho=i($),gp=n($,"LI",{});var Fwe=s(gp);fse=n(Fwe,"STRONG",{});var nKr=s(fse);Lho=r(nKr,"bert-generation"),nKr.forEach(t),xho=r(Fwe," \u2014 "),SI=n(Fwe,"A",{href:!0});var sKr=s(SI);$ho=r(sKr,"BertGenerationEncoder"),sKr.forEach(t),kho=r(Fwe," (Bert Generation model)"),Fwe.forEach(t),Sho=i($),hp=n($,"LI",{});var Twe=s(hp);mse=n(Twe,"STRONG",{});var lKr=s(mse);Rho=r(lKr,"big_bird"),lKr.forEach(t),Pho=r(Twe," \u2014 "),RI=n(Twe,"A",{href:!0});var iKr=s(RI);Bho=r(iKr,"BigBirdModel"),iKr.forEach(t),Iho=r(Twe," (BigBird model)"),Twe.forEach(t),qho=i($),pp=n($,"LI",{});var Mwe=s(pp);gse=n(Mwe,"STRONG",{});var dKr=s(gse);Nho=r(dKr,"bigbird_pegasus"),dKr.forEach(t),jho=r(Mwe," \u2014 "),PI=n(Mwe,"A",{href:!0});var cKr=s(PI);Dho=r(cKr,"BigBirdPegasusModel"),cKr.forEach(t),Gho=r(Mwe," (BigBirdPegasus model)"),Mwe.forEach(t),Oho=i($),up=n($,"LI",{});var Ewe=s(up);hse=n(Ewe,"STRONG",{});var fKr=s(hse);Vho=r(fKr,"blenderbot"),fKr.forEach(t),Xho=r(Ewe," \u2014 "),BI=n(Ewe,"A",{href:!0});var mKr=s(BI);zho=r(mKr,"BlenderbotModel"),mKr.forEach(t),Who=r(Ewe," (Blenderbot model)"),Ewe.forEach(t),Qho=i($),_p=n($,"LI",{});var Cwe=s(_p);pse=n(Cwe,"STRONG",{});var gKr=s(pse);Hho=r(gKr,"blenderbot-small"),gKr.forEach(t),Uho=r(Cwe," \u2014 "),II=n(Cwe,"A",{href:!0});var hKr=s(II);Jho=r(hKr,"BlenderbotSmallModel"),hKr.forEach(t),Yho=r(Cwe," (BlenderbotSmall model)"),Cwe.forEach(t),Kho=i($),bp=n($,"LI",{});var wwe=s(bp);use=n(wwe,"STRONG",{});var pKr=s(use);Zho=r(pKr,"camembert"),pKr.forEach(t),epo=r(wwe," \u2014 "),qI=n(wwe,"A",{href:!0});var uKr=s(qI);opo=r(uKr,"CamembertModel"),uKr.forEach(t),rpo=r(wwe," (CamemBERT model)"),wwe.forEach(t),tpo=i($),vp=n($,"LI",{});var Awe=s(vp);_se=n(Awe,"STRONG",{});var _Kr=s(_se);apo=r(_Kr,"canine"),_Kr.forEach(t),npo=r(Awe," \u2014 "),NI=n(Awe,"A",{href:!0});var bKr=s(NI);spo=r(bKr,"CanineModel"),bKr.forEach(t),lpo=r(Awe," (Canine model)"),Awe.forEach(t),ipo=i($),Fp=n($,"LI",{});var ywe=s(Fp);bse=n(ywe,"STRONG",{});var vKr=s(bse);dpo=r(vKr,"clip"),vKr.forEach(t),cpo=r(ywe," \u2014 "),jI=n(ywe,"A",{href:!0});var FKr=s(jI);fpo=r(FKr,"CLIPModel"),FKr.forEach(t),mpo=r(ywe," (CLIP model)"),ywe.forEach(t),gpo=i($),Tp=n($,"LI",{});var Lwe=s(Tp);vse=n(Lwe,"STRONG",{});var TKr=s(vse);hpo=r(TKr,"convbert"),TKr.forEach(t),ppo=r(Lwe," \u2014 "),DI=n(Lwe,"A",{href:!0});var MKr=s(DI);upo=r(MKr,"ConvBertModel"),MKr.forEach(t),_po=r(Lwe," (ConvBERT model)"),Lwe.forEach(t),bpo=i($),Mp=n($,"LI",{});var xwe=s(Mp);Fse=n(xwe,"STRONG",{});var EKr=s(Fse);vpo=r(EKr,"convnext"),EKr.forEach(t),Fpo=r(xwe," \u2014 "),GI=n(xwe,"A",{href:!0});var CKr=s(GI);Tpo=r(CKr,"ConvNextModel"),CKr.forEach(t),Mpo=r(xwe," (ConvNext model)"),xwe.forEach(t),Epo=i($),Ep=n($,"LI",{});var $we=s(Ep);Tse=n($we,"STRONG",{});var wKr=s(Tse);Cpo=r(wKr,"ctrl"),wKr.forEach(t),wpo=r($we," \u2014 "),OI=n($we,"A",{href:!0});var AKr=s(OI);Apo=r(AKr,"CTRLModel"),AKr.forEach(t),ypo=r($we," (CTRL model)"),$we.forEach(t),Lpo=i($),Cp=n($,"LI",{});var kwe=s(Cp);Mse=n(kwe,"STRONG",{});var yKr=s(Mse);xpo=r(yKr,"data2vec-audio"),yKr.forEach(t),$po=r(kwe," \u2014 "),VI=n(kwe,"A",{href:!0});var LKr=s(VI);kpo=r(LKr,"Data2VecAudioModel"),LKr.forEach(t),Spo=r(kwe," (Data2VecAudio model)"),kwe.forEach(t),Rpo=i($),wp=n($,"LI",{});var Swe=s(wp);Ese=n(Swe,"STRONG",{});var xKr=s(Ese);Ppo=r(xKr,"data2vec-text"),xKr.forEach(t),Bpo=r(Swe," \u2014 "),XI=n(Swe,"A",{href:!0});var $Kr=s(XI);Ipo=r($Kr,"Data2VecTextModel"),$Kr.forEach(t),qpo=r(Swe," (Data2VecText model)"),Swe.forEach(t),Npo=i($),Ap=n($,"LI",{});var Rwe=s(Ap);Cse=n(Rwe,"STRONG",{});var kKr=s(Cse);jpo=r(kKr,"data2vec-vision"),kKr.forEach(t),Dpo=r(Rwe," \u2014 "),zI=n(Rwe,"A",{href:!0});var SKr=s(zI);Gpo=r(SKr,"Data2VecVisionModel"),SKr.forEach(t),Opo=r(Rwe," (Data2VecVision model)"),Rwe.forEach(t),Vpo=i($),yp=n($,"LI",{});var Pwe=s(yp);wse=n(Pwe,"STRONG",{});var RKr=s(wse);Xpo=r(RKr,"deberta"),RKr.forEach(t),zpo=r(Pwe," \u2014 "),WI=n(Pwe,"A",{href:!0});var PKr=s(WI);Wpo=r(PKr,"DebertaModel"),PKr.forEach(t),Qpo=r(Pwe," (DeBERTa model)"),Pwe.forEach(t),Hpo=i($),Lp=n($,"LI",{});var Bwe=s(Lp);Ase=n(Bwe,"STRONG",{});var BKr=s(Ase);Upo=r(BKr,"deberta-v2"),BKr.forEach(t),Jpo=r(Bwe," \u2014 "),QI=n(Bwe,"A",{href:!0});var IKr=s(QI);Ypo=r(IKr,"DebertaV2Model"),IKr.forEach(t),Kpo=r(Bwe," (DeBERTa-v2 model)"),Bwe.forEach(t),Zpo=i($),xp=n($,"LI",{});var Iwe=s(xp);yse=n(Iwe,"STRONG",{});var qKr=s(yse);euo=r(qKr,"decision_transformer"),qKr.forEach(t),ouo=r(Iwe," \u2014 "),HI=n(Iwe,"A",{href:!0});var NKr=s(HI);ruo=r(NKr,"DecisionTransformerModel"),NKr.forEach(t),tuo=r(Iwe," (Decision Transformer model)"),Iwe.forEach(t),auo=i($),$p=n($,"LI",{});var qwe=s($p);Lse=n(qwe,"STRONG",{});var jKr=s(Lse);nuo=r(jKr,"deit"),jKr.forEach(t),suo=r(qwe," \u2014 "),UI=n(qwe,"A",{href:!0});var DKr=s(UI);luo=r(DKr,"DeiTModel"),DKr.forEach(t),iuo=r(qwe," (DeiT model)"),qwe.forEach(t),duo=i($),kp=n($,"LI",{});var Nwe=s(kp);xse=n(Nwe,"STRONG",{});var GKr=s(xse);cuo=r(GKr,"detr"),GKr.forEach(t),fuo=r(Nwe," \u2014 "),JI=n(Nwe,"A",{href:!0});var OKr=s(JI);muo=r(OKr,"DetrModel"),OKr.forEach(t),guo=r(Nwe," (DETR model)"),Nwe.forEach(t),huo=i($),Sp=n($,"LI",{});var jwe=s(Sp);$se=n(jwe,"STRONG",{});var VKr=s($se);puo=r(VKr,"distilbert"),VKr.forEach(t),uuo=r(jwe," \u2014 "),YI=n(jwe,"A",{href:!0});var XKr=s(YI);_uo=r(XKr,"DistilBertModel"),XKr.forEach(t),buo=r(jwe," (DistilBERT model)"),jwe.forEach(t),vuo=i($),Rp=n($,"LI",{});var Dwe=s(Rp);kse=n(Dwe,"STRONG",{});var zKr=s(kse);Fuo=r(zKr,"dpr"),zKr.forEach(t),Tuo=r(Dwe," \u2014 "),KI=n(Dwe,"A",{href:!0});var WKr=s(KI);Muo=r(WKr,"DPRQuestionEncoder"),WKr.forEach(t),Euo=r(Dwe," (DPR model)"),Dwe.forEach(t),Cuo=i($),Pp=n($,"LI",{});var Gwe=s(Pp);Sse=n(Gwe,"STRONG",{});var QKr=s(Sse);wuo=r(QKr,"dpt"),QKr.forEach(t),Auo=r(Gwe," \u2014 "),ZI=n(Gwe,"A",{href:!0});var HKr=s(ZI);yuo=r(HKr,"DPTModel"),HKr.forEach(t),Luo=r(Gwe," (DPT model)"),Gwe.forEach(t),xuo=i($),Bp=n($,"LI",{});var Owe=s(Bp);Rse=n(Owe,"STRONG",{});var UKr=s(Rse);$uo=r(UKr,"electra"),UKr.forEach(t),kuo=r(Owe," \u2014 "),eq=n(Owe,"A",{href:!0});var JKr=s(eq);Suo=r(JKr,"ElectraModel"),JKr.forEach(t),Ruo=r(Owe," (ELECTRA model)"),Owe.forEach(t),Puo=i($),Ip=n($,"LI",{});var Vwe=s(Ip);Pse=n(Vwe,"STRONG",{});var YKr=s(Pse);Buo=r(YKr,"flaubert"),YKr.forEach(t),Iuo=r(Vwe," \u2014 "),oq=n(Vwe,"A",{href:!0});var KKr=s(oq);quo=r(KKr,"FlaubertModel"),KKr.forEach(t),Nuo=r(Vwe," (FlauBERT model)"),Vwe.forEach(t),juo=i($),qp=n($,"LI",{});var Xwe=s(qp);Bse=n(Xwe,"STRONG",{});var ZKr=s(Bse);Duo=r(ZKr,"flava"),ZKr.forEach(t),Guo=r(Xwe," \u2014 "),rq=n(Xwe,"A",{href:!0});var eZr=s(rq);Ouo=r(eZr,"FlavaModel"),eZr.forEach(t),Vuo=r(Xwe," (Flava model)"),Xwe.forEach(t),Xuo=i($),Np=n($,"LI",{});var zwe=s(Np);Ise=n(zwe,"STRONG",{});var oZr=s(Ise);zuo=r(oZr,"fnet"),oZr.forEach(t),Wuo=r(zwe," \u2014 "),tq=n(zwe,"A",{href:!0});var rZr=s(tq);Quo=r(rZr,"FNetModel"),rZr.forEach(t),Huo=r(zwe," (FNet model)"),zwe.forEach(t),Uuo=i($),jp=n($,"LI",{});var Wwe=s(jp);qse=n(Wwe,"STRONG",{});var tZr=s(qse);Juo=r(tZr,"fsmt"),tZr.forEach(t),Yuo=r(Wwe," \u2014 "),aq=n(Wwe,"A",{href:!0});var aZr=s(aq);Kuo=r(aZr,"FSMTModel"),aZr.forEach(t),Zuo=r(Wwe," (FairSeq Machine-Translation model)"),Wwe.forEach(t),e_o=i($),js=n($,"LI",{});var W$=s(js);Nse=n(W$,"STRONG",{});var nZr=s(Nse);o_o=r(nZr,"funnel"),nZr.forEach(t),r_o=r(W$," \u2014 "),nq=n(W$,"A",{href:!0});var sZr=s(nq);t_o=r(sZr,"FunnelModel"),sZr.forEach(t),a_o=r(W$," or "),sq=n(W$,"A",{href:!0});var lZr=s(sq);n_o=r(lZr,"FunnelBaseModel"),lZr.forEach(t),s_o=r(W$," (Funnel Transformer model)"),W$.forEach(t),l_o=i($),Dp=n($,"LI",{});var Qwe=s(Dp);jse=n(Qwe,"STRONG",{});var iZr=s(jse);i_o=r(iZr,"glpn"),iZr.forEach(t),d_o=r(Qwe," \u2014 "),lq=n(Qwe,"A",{href:!0});var dZr=s(lq);c_o=r(dZr,"GLPNModel"),dZr.forEach(t),f_o=r(Qwe," (GLPN model)"),Qwe.forEach(t),m_o=i($),Gp=n($,"LI",{});var Hwe=s(Gp);Dse=n(Hwe,"STRONG",{});var cZr=s(Dse);g_o=r(cZr,"gpt2"),cZr.forEach(t),h_o=r(Hwe," \u2014 "),iq=n(Hwe,"A",{href:!0});var fZr=s(iq);p_o=r(fZr,"GPT2Model"),fZr.forEach(t),u_o=r(Hwe," (OpenAI GPT-2 model)"),Hwe.forEach(t),__o=i($),Op=n($,"LI",{});var Uwe=s(Op);Gse=n(Uwe,"STRONG",{});var mZr=s(Gse);b_o=r(mZr,"gpt_neo"),mZr.forEach(t),v_o=r(Uwe," \u2014 "),dq=n(Uwe,"A",{href:!0});var gZr=s(dq);F_o=r(gZr,"GPTNeoModel"),gZr.forEach(t),T_o=r(Uwe," (GPT Neo model)"),Uwe.forEach(t),M_o=i($),Vp=n($,"LI",{});var Jwe=s(Vp);Ose=n(Jwe,"STRONG",{});var hZr=s(Ose);E_o=r(hZr,"gptj"),hZr.forEach(t),C_o=r(Jwe," \u2014 "),cq=n(Jwe,"A",{href:!0});var pZr=s(cq);w_o=r(pZr,"GPTJModel"),pZr.forEach(t),A_o=r(Jwe," (GPT-J model)"),Jwe.forEach(t),y_o=i($),Xp=n($,"LI",{});var Ywe=s(Xp);Vse=n(Ywe,"STRONG",{});var uZr=s(Vse);L_o=r(uZr,"hubert"),uZr.forEach(t),x_o=r(Ywe," \u2014 "),fq=n(Ywe,"A",{href:!0});var _Zr=s(fq);$_o=r(_Zr,"HubertModel"),_Zr.forEach(t),k_o=r(Ywe," (Hubert model)"),Ywe.forEach(t),S_o=i($),zp=n($,"LI",{});var Kwe=s(zp);Xse=n(Kwe,"STRONG",{});var bZr=s(Xse);R_o=r(bZr,"ibert"),bZr.forEach(t),P_o=r(Kwe," \u2014 "),mq=n(Kwe,"A",{href:!0});var vZr=s(mq);B_o=r(vZr,"IBertModel"),vZr.forEach(t),I_o=r(Kwe," (I-BERT model)"),Kwe.forEach(t),q_o=i($),Wp=n($,"LI",{});var Zwe=s(Wp);zse=n(Zwe,"STRONG",{});var FZr=s(zse);N_o=r(FZr,"imagegpt"),FZr.forEach(t),j_o=r(Zwe," \u2014 "),gq=n(Zwe,"A",{href:!0});var TZr=s(gq);D_o=r(TZr,"ImageGPTModel"),TZr.forEach(t),G_o=r(Zwe," (ImageGPT model)"),Zwe.forEach(t),O_o=i($),Qp=n($,"LI",{});var eAe=s(Qp);Wse=n(eAe,"STRONG",{});var MZr=s(Wse);V_o=r(MZr,"layoutlm"),MZr.forEach(t),X_o=r(eAe," \u2014 "),hq=n(eAe,"A",{href:!0});var EZr=s(hq);z_o=r(EZr,"LayoutLMModel"),EZr.forEach(t),W_o=r(eAe," (LayoutLM model)"),eAe.forEach(t),Q_o=i($),Hp=n($,"LI",{});var oAe=s(Hp);Qse=n(oAe,"STRONG",{});var CZr=s(Qse);H_o=r(CZr,"layoutlmv2"),CZr.forEach(t),U_o=r(oAe," \u2014 "),pq=n(oAe,"A",{href:!0});var wZr=s(pq);J_o=r(wZr,"LayoutLMv2Model"),wZr.forEach(t),Y_o=r(oAe," (LayoutLMv2 model)"),oAe.forEach(t),K_o=i($),Up=n($,"LI",{});var rAe=s(Up);Hse=n(rAe,"STRONG",{});var AZr=s(Hse);Z_o=r(AZr,"led"),AZr.forEach(t),e2o=r(rAe," \u2014 "),uq=n(rAe,"A",{href:!0});var yZr=s(uq);o2o=r(yZr,"LEDModel"),yZr.forEach(t),r2o=r(rAe," (LED model)"),rAe.forEach(t),t2o=i($),Jp=n($,"LI",{});var tAe=s(Jp);Use=n(tAe,"STRONG",{});var LZr=s(Use);a2o=r(LZr,"longformer"),LZr.forEach(t),n2o=r(tAe," \u2014 "),_q=n(tAe,"A",{href:!0});var xZr=s(_q);s2o=r(xZr,"LongformerModel"),xZr.forEach(t),l2o=r(tAe," (Longformer model)"),tAe.forEach(t),i2o=i($),Yp=n($,"LI",{});var aAe=s(Yp);Jse=n(aAe,"STRONG",{});var $Zr=s(Jse);d2o=r($Zr,"luke"),$Zr.forEach(t),c2o=r(aAe," \u2014 "),bq=n(aAe,"A",{href:!0});var kZr=s(bq);f2o=r(kZr,"LukeModel"),kZr.forEach(t),m2o=r(aAe," (LUKE model)"),aAe.forEach(t),g2o=i($),Kp=n($,"LI",{});var nAe=s(Kp);Yse=n(nAe,"STRONG",{});var SZr=s(Yse);h2o=r(SZr,"lxmert"),SZr.forEach(t),p2o=r(nAe," \u2014 "),vq=n(nAe,"A",{href:!0});var RZr=s(vq);u2o=r(RZr,"LxmertModel"),RZr.forEach(t),_2o=r(nAe," (LXMERT model)"),nAe.forEach(t),b2o=i($),Zp=n($,"LI",{});var sAe=s(Zp);Kse=n(sAe,"STRONG",{});var PZr=s(Kse);v2o=r(PZr,"m2m_100"),PZr.forEach(t),F2o=r(sAe," \u2014 "),Fq=n(sAe,"A",{href:!0});var BZr=s(Fq);T2o=r(BZr,"M2M100Model"),BZr.forEach(t),M2o=r(sAe," (M2M100 model)"),sAe.forEach(t),E2o=i($),eu=n($,"LI",{});var lAe=s(eu);Zse=n(lAe,"STRONG",{});var IZr=s(Zse);C2o=r(IZr,"marian"),IZr.forEach(t),w2o=r(lAe," \u2014 "),Tq=n(lAe,"A",{href:!0});var qZr=s(Tq);A2o=r(qZr,"MarianModel"),qZr.forEach(t),y2o=r(lAe," (Marian model)"),lAe.forEach(t),L2o=i($),ou=n($,"LI",{});var iAe=s(ou);ele=n(iAe,"STRONG",{});var NZr=s(ele);x2o=r(NZr,"maskformer"),NZr.forEach(t),$2o=r(iAe," \u2014 "),Mq=n(iAe,"A",{href:!0});var jZr=s(Mq);k2o=r(jZr,"MaskFormerModel"),jZr.forEach(t),S2o=r(iAe," (MaskFormer model)"),iAe.forEach(t),R2o=i($),ru=n($,"LI",{});var dAe=s(ru);ole=n(dAe,"STRONG",{});var DZr=s(ole);P2o=r(DZr,"mbart"),DZr.forEach(t),B2o=r(dAe," \u2014 "),Eq=n(dAe,"A",{href:!0});var GZr=s(Eq);I2o=r(GZr,"MBartModel"),GZr.forEach(t),q2o=r(dAe," (mBART model)"),dAe.forEach(t),N2o=i($),tu=n($,"LI",{});var cAe=s(tu);rle=n(cAe,"STRONG",{});var OZr=s(rle);j2o=r(OZr,"megatron-bert"),OZr.forEach(t),D2o=r(cAe," \u2014 "),Cq=n(cAe,"A",{href:!0});var VZr=s(Cq);G2o=r(VZr,"MegatronBertModel"),VZr.forEach(t),O2o=r(cAe," (MegatronBert model)"),cAe.forEach(t),V2o=i($),au=n($,"LI",{});var fAe=s(au);tle=n(fAe,"STRONG",{});var XZr=s(tle);X2o=r(XZr,"mobilebert"),XZr.forEach(t),z2o=r(fAe," \u2014 "),wq=n(fAe,"A",{href:!0});var zZr=s(wq);W2o=r(zZr,"MobileBertModel"),zZr.forEach(t),Q2o=r(fAe," (MobileBERT model)"),fAe.forEach(t),H2o=i($),nu=n($,"LI",{});var mAe=s(nu);ale=n(mAe,"STRONG",{});var WZr=s(ale);U2o=r(WZr,"mpnet"),WZr.forEach(t),J2o=r(mAe," \u2014 "),Aq=n(mAe,"A",{href:!0});var QZr=s(Aq);Y2o=r(QZr,"MPNetModel"),QZr.forEach(t),K2o=r(mAe," (MPNet model)"),mAe.forEach(t),Z2o=i($),su=n($,"LI",{});var gAe=s(su);nle=n(gAe,"STRONG",{});var HZr=s(nle);e1o=r(HZr,"mt5"),HZr.forEach(t),o1o=r(gAe," \u2014 "),yq=n(gAe,"A",{href:!0});var UZr=s(yq);r1o=r(UZr,"MT5Model"),UZr.forEach(t),t1o=r(gAe," (mT5 model)"),gAe.forEach(t),a1o=i($),lu=n($,"LI",{});var hAe=s(lu);sle=n(hAe,"STRONG",{});var JZr=s(sle);n1o=r(JZr,"nystromformer"),JZr.forEach(t),s1o=r(hAe," \u2014 "),Lq=n(hAe,"A",{href:!0});var YZr=s(Lq);l1o=r(YZr,"NystromformerModel"),YZr.forEach(t),i1o=r(hAe," (Nystromformer model)"),hAe.forEach(t),d1o=i($),iu=n($,"LI",{});var pAe=s(iu);lle=n(pAe,"STRONG",{});var KZr=s(lle);c1o=r(KZr,"openai-gpt"),KZr.forEach(t),f1o=r(pAe," \u2014 "),xq=n(pAe,"A",{href:!0});var ZZr=s(xq);m1o=r(ZZr,"OpenAIGPTModel"),ZZr.forEach(t),g1o=r(pAe," (OpenAI GPT model)"),pAe.forEach(t),h1o=i($),du=n($,"LI",{});var uAe=s(du);ile=n(uAe,"STRONG",{});var eet=s(ile);p1o=r(eet,"opt"),eet.forEach(t),u1o=r(uAe," \u2014 "),$q=n(uAe,"A",{href:!0});var oet=s($q);_1o=r(oet,"OPTModel"),oet.forEach(t),b1o=r(uAe," (OPT model)"),uAe.forEach(t),v1o=i($),cu=n($,"LI",{});var _Ae=s(cu);dle=n(_Ae,"STRONG",{});var ret=s(dle);F1o=r(ret,"pegasus"),ret.forEach(t),T1o=r(_Ae," \u2014 "),kq=n(_Ae,"A",{href:!0});var tet=s(kq);M1o=r(tet,"PegasusModel"),tet.forEach(t),E1o=r(_Ae," (Pegasus model)"),_Ae.forEach(t),C1o=i($),fu=n($,"LI",{});var bAe=s(fu);cle=n(bAe,"STRONG",{});var aet=s(cle);w1o=r(aet,"perceiver"),aet.forEach(t),A1o=r(bAe," \u2014 "),Sq=n(bAe,"A",{href:!0});var net=s(Sq);y1o=r(net,"PerceiverModel"),net.forEach(t),L1o=r(bAe," (Perceiver model)"),bAe.forEach(t),x1o=i($),mu=n($,"LI",{});var vAe=s(mu);fle=n(vAe,"STRONG",{});var set=s(fle);$1o=r(set,"plbart"),set.forEach(t),k1o=r(vAe," \u2014 "),Rq=n(vAe,"A",{href:!0});var iet=s(Rq);S1o=r(iet,"PLBartModel"),iet.forEach(t),R1o=r(vAe," (PLBart model)"),vAe.forEach(t),P1o=i($),gu=n($,"LI",{});var FAe=s(gu);mle=n(FAe,"STRONG",{});var det=s(mle);B1o=r(det,"poolformer"),det.forEach(t),I1o=r(FAe," \u2014 "),Pq=n(FAe,"A",{href:!0});var cet=s(Pq);q1o=r(cet,"PoolFormerModel"),cet.forEach(t),N1o=r(FAe," (PoolFormer model)"),FAe.forEach(t),j1o=i($),hu=n($,"LI",{});var TAe=s(hu);gle=n(TAe,"STRONG",{});var fet=s(gle);D1o=r(fet,"prophetnet"),fet.forEach(t),G1o=r(TAe," \u2014 "),Bq=n(TAe,"A",{href:!0});var met=s(Bq);O1o=r(met,"ProphetNetModel"),met.forEach(t),V1o=r(TAe," (ProphetNet model)"),TAe.forEach(t),X1o=i($),pu=n($,"LI",{});var MAe=s(pu);hle=n(MAe,"STRONG",{});var get=s(hle);z1o=r(get,"qdqbert"),get.forEach(t),W1o=r(MAe," \u2014 "),Iq=n(MAe,"A",{href:!0});var het=s(Iq);Q1o=r(het,"QDQBertModel"),het.forEach(t),H1o=r(MAe," (QDQBert model)"),MAe.forEach(t),U1o=i($),uu=n($,"LI",{});var EAe=s(uu);ple=n(EAe,"STRONG",{});var pet=s(ple);J1o=r(pet,"reformer"),pet.forEach(t),Y1o=r(EAe," \u2014 "),qq=n(EAe,"A",{href:!0});var uet=s(qq);K1o=r(uet,"ReformerModel"),uet.forEach(t),Z1o=r(EAe," (Reformer model)"),EAe.forEach(t),ebo=i($),_u=n($,"LI",{});var CAe=s(_u);ule=n(CAe,"STRONG",{});var _et=s(ule);obo=r(_et,"regnet"),_et.forEach(t),rbo=r(CAe," \u2014 "),Nq=n(CAe,"A",{href:!0});var bet=s(Nq);tbo=r(bet,"RegNetModel"),bet.forEach(t),abo=r(CAe," (RegNet model)"),CAe.forEach(t),nbo=i($),bu=n($,"LI",{});var wAe=s(bu);_le=n(wAe,"STRONG",{});var vet=s(_le);sbo=r(vet,"rembert"),vet.forEach(t),lbo=r(wAe," \u2014 "),jq=n(wAe,"A",{href:!0});var Fet=s(jq);ibo=r(Fet,"RemBertModel"),Fet.forEach(t),dbo=r(wAe," (RemBERT model)"),wAe.forEach(t),cbo=i($),vu=n($,"LI",{});var AAe=s(vu);ble=n(AAe,"STRONG",{});var Tet=s(ble);fbo=r(Tet,"resnet"),Tet.forEach(t),mbo=r(AAe," \u2014 "),Dq=n(AAe,"A",{href:!0});var Met=s(Dq);gbo=r(Met,"ResNetModel"),Met.forEach(t),hbo=r(AAe," (ResNet model)"),AAe.forEach(t),pbo=i($),Fu=n($,"LI",{});var yAe=s(Fu);vle=n(yAe,"STRONG",{});var Eet=s(vle);ubo=r(Eet,"retribert"),Eet.forEach(t),_bo=r(yAe," \u2014 "),Gq=n(yAe,"A",{href:!0});var Cet=s(Gq);bbo=r(Cet,"RetriBertModel"),Cet.forEach(t),vbo=r(yAe," (RetriBERT model)"),yAe.forEach(t),Fbo=i($),Tu=n($,"LI",{});var LAe=s(Tu);Fle=n(LAe,"STRONG",{});var wet=s(Fle);Tbo=r(wet,"roberta"),wet.forEach(t),Mbo=r(LAe," \u2014 "),Oq=n(LAe,"A",{href:!0});var Aet=s(Oq);Ebo=r(Aet,"RobertaModel"),Aet.forEach(t),Cbo=r(LAe," (RoBERTa model)"),LAe.forEach(t),wbo=i($),Mu=n($,"LI",{});var xAe=s(Mu);Tle=n(xAe,"STRONG",{});var yet=s(Tle);Abo=r(yet,"roformer"),yet.forEach(t),ybo=r(xAe," \u2014 "),Vq=n(xAe,"A",{href:!0});var Let=s(Vq);Lbo=r(Let,"RoFormerModel"),Let.forEach(t),xbo=r(xAe," (RoFormer model)"),xAe.forEach(t),$bo=i($),Eu=n($,"LI",{});var $Ae=s(Eu);Mle=n($Ae,"STRONG",{});var xet=s(Mle);kbo=r(xet,"segformer"),xet.forEach(t),Sbo=r($Ae," \u2014 "),Xq=n($Ae,"A",{href:!0});var $et=s(Xq);Rbo=r($et,"SegformerModel"),$et.forEach(t),Pbo=r($Ae," (SegFormer model)"),$Ae.forEach(t),Bbo=i($),Cu=n($,"LI",{});var kAe=s(Cu);Ele=n(kAe,"STRONG",{});var ket=s(Ele);Ibo=r(ket,"sew"),ket.forEach(t),qbo=r(kAe," \u2014 "),zq=n(kAe,"A",{href:!0});var Set=s(zq);Nbo=r(Set,"SEWModel"),Set.forEach(t),jbo=r(kAe," (SEW model)"),kAe.forEach(t),Dbo=i($),wu=n($,"LI",{});var SAe=s(wu);Cle=n(SAe,"STRONG",{});var Ret=s(Cle);Gbo=r(Ret,"sew-d"),Ret.forEach(t),Obo=r(SAe," \u2014 "),Wq=n(SAe,"A",{href:!0});var Pet=s(Wq);Vbo=r(Pet,"SEWDModel"),Pet.forEach(t),Xbo=r(SAe," (SEW-D model)"),SAe.forEach(t),zbo=i($),Au=n($,"LI",{});var RAe=s(Au);wle=n(RAe,"STRONG",{});var Bet=s(wle);Wbo=r(Bet,"speech_to_text"),Bet.forEach(t),Qbo=r(RAe," \u2014 "),Qq=n(RAe,"A",{href:!0});var Iet=s(Qq);Hbo=r(Iet,"Speech2TextModel"),Iet.forEach(t),Ubo=r(RAe," (Speech2Text model)"),RAe.forEach(t),Jbo=i($),yu=n($,"LI",{});var PAe=s(yu);Ale=n(PAe,"STRONG",{});var qet=s(Ale);Ybo=r(qet,"splinter"),qet.forEach(t),Kbo=r(PAe," \u2014 "),Hq=n(PAe,"A",{href:!0});var Net=s(Hq);Zbo=r(Net,"SplinterModel"),Net.forEach(t),evo=r(PAe," (Splinter model)"),PAe.forEach(t),ovo=i($),Lu=n($,"LI",{});var BAe=s(Lu);yle=n(BAe,"STRONG",{});var jet=s(yle);rvo=r(jet,"squeezebert"),jet.forEach(t),tvo=r(BAe," \u2014 "),Uq=n(BAe,"A",{href:!0});var Det=s(Uq);avo=r(Det,"SqueezeBertModel"),Det.forEach(t),nvo=r(BAe," (SqueezeBERT model)"),BAe.forEach(t),svo=i($),xu=n($,"LI",{});var IAe=s(xu);Lle=n(IAe,"STRONG",{});var Get=s(Lle);lvo=r(Get,"swin"),Get.forEach(t),ivo=r(IAe," \u2014 "),Jq=n(IAe,"A",{href:!0});var Oet=s(Jq);dvo=r(Oet,"SwinModel"),Oet.forEach(t),cvo=r(IAe," (Swin model)"),IAe.forEach(t),fvo=i($),$u=n($,"LI",{});var qAe=s($u);xle=n(qAe,"STRONG",{});var Vet=s(xle);mvo=r(Vet,"t5"),Vet.forEach(t),gvo=r(qAe," \u2014 "),Yq=n(qAe,"A",{href:!0});var Xet=s(Yq);hvo=r(Xet,"T5Model"),Xet.forEach(t),pvo=r(qAe," (T5 model)"),qAe.forEach(t),uvo=i($),ku=n($,"LI",{});var NAe=s(ku);$le=n(NAe,"STRONG",{});var zet=s($le);_vo=r(zet,"tapas"),zet.forEach(t),bvo=r(NAe," \u2014 "),Kq=n(NAe,"A",{href:!0});var Wet=s(Kq);vvo=r(Wet,"TapasModel"),Wet.forEach(t),Fvo=r(NAe," (TAPAS model)"),NAe.forEach(t),Tvo=i($),Su=n($,"LI",{});var jAe=s(Su);kle=n(jAe,"STRONG",{});var Qet=s(kle);Mvo=r(Qet,"transfo-xl"),Qet.forEach(t),Evo=r(jAe," \u2014 "),Zq=n(jAe,"A",{href:!0});var Het=s(Zq);Cvo=r(Het,"TransfoXLModel"),Het.forEach(t),wvo=r(jAe," (Transformer-XL model)"),jAe.forEach(t),Avo=i($),Ru=n($,"LI",{});var DAe=s(Ru);Sle=n(DAe,"STRONG",{});var Uet=s(Sle);yvo=r(Uet,"unispeech"),Uet.forEach(t),Lvo=r(DAe," \u2014 "),eN=n(DAe,"A",{href:!0});var Jet=s(eN);xvo=r(Jet,"UniSpeechModel"),Jet.forEach(t),$vo=r(DAe," (UniSpeech model)"),DAe.forEach(t),kvo=i($),Pu=n($,"LI",{});var GAe=s(Pu);Rle=n(GAe,"STRONG",{});var Yet=s(Rle);Svo=r(Yet,"unispeech-sat"),Yet.forEach(t),Rvo=r(GAe," \u2014 "),oN=n(GAe,"A",{href:!0});var Ket=s(oN);Pvo=r(Ket,"UniSpeechSatModel"),Ket.forEach(t),Bvo=r(GAe," (UniSpeechSat model)"),GAe.forEach(t),Ivo=i($),Bu=n($,"LI",{});var OAe=s(Bu);Ple=n(OAe,"STRONG",{});var Zet=s(Ple);qvo=r(Zet,"van"),Zet.forEach(t),Nvo=r(OAe," \u2014 "),rN=n(OAe,"A",{href:!0});var eot=s(rN);jvo=r(eot,"VanModel"),eot.forEach(t),Dvo=r(OAe," (VAN model)"),OAe.forEach(t),Gvo=i($),Iu=n($,"LI",{});var VAe=s(Iu);Ble=n(VAe,"STRONG",{});var oot=s(Ble);Ovo=r(oot,"vilt"),oot.forEach(t),Vvo=r(VAe," \u2014 "),tN=n(VAe,"A",{href:!0});var rot=s(tN);Xvo=r(rot,"ViltModel"),rot.forEach(t),zvo=r(VAe," (ViLT model)"),VAe.forEach(t),Wvo=i($),qu=n($,"LI",{});var XAe=s(qu);Ile=n(XAe,"STRONG",{});var tot=s(Ile);Qvo=r(tot,"vision-text-dual-encoder"),tot.forEach(t),Hvo=r(XAe," \u2014 "),aN=n(XAe,"A",{href:!0});var aot=s(aN);Uvo=r(aot,"VisionTextDualEncoderModel"),aot.forEach(t),Jvo=r(XAe," (VisionTextDualEncoder model)"),XAe.forEach(t),Yvo=i($),Nu=n($,"LI",{});var zAe=s(Nu);qle=n(zAe,"STRONG",{});var not=s(qle);Kvo=r(not,"visual_bert"),not.forEach(t),Zvo=r(zAe," \u2014 "),nN=n(zAe,"A",{href:!0});var sot=s(nN);eFo=r(sot,"VisualBertModel"),sot.forEach(t),oFo=r(zAe," (VisualBert model)"),zAe.forEach(t),rFo=i($),ju=n($,"LI",{});var WAe=s(ju);Nle=n(WAe,"STRONG",{});var lot=s(Nle);tFo=r(lot,"vit"),lot.forEach(t),aFo=r(WAe," \u2014 "),sN=n(WAe,"A",{href:!0});var iot=s(sN);nFo=r(iot,"ViTModel"),iot.forEach(t),sFo=r(WAe," (ViT model)"),WAe.forEach(t),lFo=i($),Du=n($,"LI",{});var QAe=s(Du);jle=n(QAe,"STRONG",{});var dot=s(jle);iFo=r(dot,"vit_mae"),dot.forEach(t),dFo=r(QAe," \u2014 "),lN=n(QAe,"A",{href:!0});var cot=s(lN);cFo=r(cot,"ViTMAEModel"),cot.forEach(t),fFo=r(QAe," (ViTMAE model)"),QAe.forEach(t),mFo=i($),Gu=n($,"LI",{});var HAe=s(Gu);Dle=n(HAe,"STRONG",{});var fot=s(Dle);gFo=r(fot,"wav2vec2"),fot.forEach(t),hFo=r(HAe," \u2014 "),iN=n(HAe,"A",{href:!0});var mot=s(iN);pFo=r(mot,"Wav2Vec2Model"),mot.forEach(t),uFo=r(HAe," (Wav2Vec2 model)"),HAe.forEach(t),_Fo=i($),Ou=n($,"LI",{});var UAe=s(Ou);Gle=n(UAe,"STRONG",{});var got=s(Gle);bFo=r(got,"wav2vec2-conformer"),got.forEach(t),vFo=r(UAe," \u2014 "),dN=n(UAe,"A",{href:!0});var hot=s(dN);FFo=r(hot,"Wav2Vec2ConformerModel"),hot.forEach(t),TFo=r(UAe," (Wav2Vec2-Conformer model)"),UAe.forEach(t),MFo=i($),Vu=n($,"LI",{});var JAe=s(Vu);Ole=n(JAe,"STRONG",{});var pot=s(Ole);EFo=r(pot,"wavlm"),pot.forEach(t),CFo=r(JAe," \u2014 "),cN=n(JAe,"A",{href:!0});var uot=s(cN);wFo=r(uot,"WavLMModel"),uot.forEach(t),AFo=r(JAe," (WavLM model)"),JAe.forEach(t),yFo=i($),Xu=n($,"LI",{});var YAe=s(Xu);Vle=n(YAe,"STRONG",{});var _ot=s(Vle);LFo=r(_ot,"xglm"),_ot.forEach(t),xFo=r(YAe," \u2014 "),fN=n(YAe,"A",{href:!0});var bot=s(fN);$Fo=r(bot,"XGLMModel"),bot.forEach(t),kFo=r(YAe," (XGLM model)"),YAe.forEach(t),SFo=i($),zu=n($,"LI",{});var KAe=s(zu);Xle=n(KAe,"STRONG",{});var vot=s(Xle);RFo=r(vot,"xlm"),vot.forEach(t),PFo=r(KAe," \u2014 "),mN=n(KAe,"A",{href:!0});var Fot=s(mN);BFo=r(Fot,"XLMModel"),Fot.forEach(t),IFo=r(KAe," (XLM model)"),KAe.forEach(t),qFo=i($),Wu=n($,"LI",{});var ZAe=s(Wu);zle=n(ZAe,"STRONG",{});var Tot=s(zle);NFo=r(Tot,"xlm-prophetnet"),Tot.forEach(t),jFo=r(ZAe," \u2014 "),gN=n(ZAe,"A",{href:!0});var Mot=s(gN);DFo=r(Mot,"XLMProphetNetModel"),Mot.forEach(t),GFo=r(ZAe," (XLMProphetNet model)"),ZAe.forEach(t),OFo=i($),Qu=n($,"LI",{});var e0e=s(Qu);Wle=n(e0e,"STRONG",{});var Eot=s(Wle);VFo=r(Eot,"xlm-roberta"),Eot.forEach(t),XFo=r(e0e," \u2014 "),hN=n(e0e,"A",{href:!0});var Cot=s(hN);zFo=r(Cot,"XLMRobertaModel"),Cot.forEach(t),WFo=r(e0e," (XLM-RoBERTa model)"),e0e.forEach(t),QFo=i($),Hu=n($,"LI",{});var o0e=s(Hu);Qle=n(o0e,"STRONG",{});var wot=s(Qle);HFo=r(wot,"xlm-roberta-xl"),wot.forEach(t),UFo=r(o0e," \u2014 "),pN=n(o0e,"A",{href:!0});var Aot=s(pN);JFo=r(Aot,"XLMRobertaXLModel"),Aot.forEach(t),YFo=r(o0e," (XLM-RoBERTa-XL model)"),o0e.forEach(t),KFo=i($),Uu=n($,"LI",{});var r0e=s(Uu);Hle=n(r0e,"STRONG",{});var yot=s(Hle);ZFo=r(yot,"xlnet"),yot.forEach(t),e6o=r(r0e," \u2014 "),uN=n(r0e,"A",{href:!0});var Lot=s(uN);o6o=r(Lot,"XLNetModel"),Lot.forEach(t),r6o=r(r0e," (XLNet model)"),r0e.forEach(t),t6o=i($),Ju=n($,"LI",{});var t0e=s(Ju);Ule=n(t0e,"STRONG",{});var xot=s(Ule);a6o=r(xot,"yolos"),xot.forEach(t),n6o=r(t0e," \u2014 "),_N=n(t0e,"A",{href:!0});var $ot=s(_N);s6o=r($ot,"YolosModel"),$ot.forEach(t),l6o=r(t0e," (YOLOS model)"),t0e.forEach(t),i6o=i($),Yu=n($,"LI",{});var a0e=s(Yu);Jle=n(a0e,"STRONG",{});var kot=s(Jle);d6o=r(kot,"yoso"),kot.forEach(t),c6o=r(a0e," \u2014 "),bN=n(a0e,"A",{href:!0});var Sot=s(bN);f6o=r(Sot,"YosoModel"),Sot.forEach(t),m6o=r(a0e," (YOSO model)"),a0e.forEach(t),$.forEach(t),g6o=i(aa),Ku=n(aa,"P",{});var n0e=s(Ku);h6o=r(n0e,"The model is set in evaluation mode by default using "),Yle=n(n0e,"CODE",{});var Rot=s(Yle);p6o=r(Rot,"model.eval()"),Rot.forEach(t),u6o=r(n0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=n(n0e,"CODE",{});var Pot=s(Kle);_6o=r(Pot,"model.train()"),Pot.forEach(t),n0e.forEach(t),b6o=i(aa),T(Zu.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),Nqe=i(f),Pi=n(f,"H2",{class:!0});var Xje=s(Pi);e_=n(Xje,"A",{id:!0,class:!0,href:!0});var Bot=s(e_);Zle=n(Bot,"SPAN",{});var Iot=s(Zle);T(t0.$$.fragment,Iot),Iot.forEach(t),Bot.forEach(t),v6o=i(Xje),eie=n(Xje,"SPAN",{});var qot=s(eie);F6o=r(qot,"AutoModelForPreTraining"),qot.forEach(t),Xje.forEach(t),jqe=i(f),$o=n(f,"DIV",{class:!0});var Qs=s($o);T(a0.$$.fragment,Qs),T6o=i(Qs),Bi=n(Qs,"P",{});var lZ=s(Bi);M6o=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vN=n(lZ,"A",{href:!0});var Not=s(vN);E6o=r(Not,"from_pretrained()"),Not.forEach(t),C6o=r(lZ," class method or the "),FN=n(lZ,"A",{href:!0});var jot=s(FN);w6o=r(jot,"from_config()"),jot.forEach(t),A6o=r(lZ,` class
method.`),lZ.forEach(t),y6o=i(Qs),n0=n(Qs,"P",{});var zje=s(n0);L6o=r(zje,"This class cannot be instantiated directly using "),oie=n(zje,"CODE",{});var Dot=s(oie);x6o=r(Dot,"__init__()"),Dot.forEach(t),$6o=r(zje," (throws an error)."),zje.forEach(t),k6o=i(Qs),st=n(Qs,"DIV",{class:!0});var $3=s(st);T(s0.$$.fragment,$3),S6o=i($3),rie=n($3,"P",{});var Got=s(rie);R6o=r(Got,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Got.forEach(t),P6o=i($3),Ii=n($3,"P",{});var iZ=s(Ii);B6o=r(iZ,`Note:
Loading a model from its configuration file does `),tie=n(iZ,"STRONG",{});var Oot=s(tie);I6o=r(Oot,"not"),Oot.forEach(t),q6o=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=n(iZ,"A",{href:!0});var Vot=s(TN);N6o=r(Vot,"from_pretrained()"),Vot.forEach(t),j6o=r(iZ," to load the model weights."),iZ.forEach(t),D6o=i($3),T(o_.$$.fragment,$3),$3.forEach(t),G6o=i(Qs),Ye=n(Qs,"DIV",{class:!0});var na=s(Ye);T(l0.$$.fragment,na),O6o=i(na),aie=n(na,"P",{});var Xot=s(aie);V6o=r(Xot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xot.forEach(t),X6o=i(na),Ra=n(na,"P",{});var k3=s(Ra);z6o=r(k3,"The model class to instantiate is selected based on the "),nie=n(k3,"CODE",{});var zot=s(nie);W6o=r(zot,"model_type"),zot.forEach(t),Q6o=r(k3,` property of the config object (either
passed as an argument or loaded from `),sie=n(k3,"CODE",{});var Wot=s(sie);H6o=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),U6o=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=n(k3,"CODE",{});var Qot=s(lie);J6o=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),Y6o=r(k3,":"),k3.forEach(t),K6o=i(na),G=n(na,"UL",{});var O=s(G);r_=n(O,"LI",{});var s0e=s(r_);iie=n(s0e,"STRONG",{});var Hot=s(iie);Z6o=r(Hot,"albert"),Hot.forEach(t),eTo=r(s0e," \u2014 "),MN=n(s0e,"A",{href:!0});var Uot=s(MN);oTo=r(Uot,"AlbertForPreTraining"),Uot.forEach(t),rTo=r(s0e," (ALBERT model)"),s0e.forEach(t),tTo=i(O),t_=n(O,"LI",{});var l0e=s(t_);die=n(l0e,"STRONG",{});var Jot=s(die);aTo=r(Jot,"bart"),Jot.forEach(t),nTo=r(l0e," \u2014 "),EN=n(l0e,"A",{href:!0});var Yot=s(EN);sTo=r(Yot,"BartForConditionalGeneration"),Yot.forEach(t),lTo=r(l0e," (BART model)"),l0e.forEach(t),iTo=i(O),a_=n(O,"LI",{});var i0e=s(a_);cie=n(i0e,"STRONG",{});var Kot=s(cie);dTo=r(Kot,"bert"),Kot.forEach(t),cTo=r(i0e," \u2014 "),CN=n(i0e,"A",{href:!0});var Zot=s(CN);fTo=r(Zot,"BertForPreTraining"),Zot.forEach(t),mTo=r(i0e," (BERT model)"),i0e.forEach(t),gTo=i(O),n_=n(O,"LI",{});var d0e=s(n_);fie=n(d0e,"STRONG",{});var ert=s(fie);hTo=r(ert,"big_bird"),ert.forEach(t),pTo=r(d0e," \u2014 "),wN=n(d0e,"A",{href:!0});var ort=s(wN);uTo=r(ort,"BigBirdForPreTraining"),ort.forEach(t),_To=r(d0e," (BigBird model)"),d0e.forEach(t),bTo=i(O),s_=n(O,"LI",{});var c0e=s(s_);mie=n(c0e,"STRONG",{});var rrt=s(mie);vTo=r(rrt,"camembert"),rrt.forEach(t),FTo=r(c0e," \u2014 "),AN=n(c0e,"A",{href:!0});var trt=s(AN);TTo=r(trt,"CamembertForMaskedLM"),trt.forEach(t),MTo=r(c0e," (CamemBERT model)"),c0e.forEach(t),ETo=i(O),l_=n(O,"LI",{});var f0e=s(l_);gie=n(f0e,"STRONG",{});var art=s(gie);CTo=r(art,"ctrl"),art.forEach(t),wTo=r(f0e," \u2014 "),yN=n(f0e,"A",{href:!0});var nrt=s(yN);ATo=r(nrt,"CTRLLMHeadModel"),nrt.forEach(t),yTo=r(f0e," (CTRL model)"),f0e.forEach(t),LTo=i(O),i_=n(O,"LI",{});var m0e=s(i_);hie=n(m0e,"STRONG",{});var srt=s(hie);xTo=r(srt,"data2vec-text"),srt.forEach(t),$To=r(m0e," \u2014 "),LN=n(m0e,"A",{href:!0});var lrt=s(LN);kTo=r(lrt,"Data2VecTextForMaskedLM"),lrt.forEach(t),STo=r(m0e," (Data2VecText model)"),m0e.forEach(t),RTo=i(O),d_=n(O,"LI",{});var g0e=s(d_);pie=n(g0e,"STRONG",{});var irt=s(pie);PTo=r(irt,"deberta"),irt.forEach(t),BTo=r(g0e," \u2014 "),xN=n(g0e,"A",{href:!0});var drt=s(xN);ITo=r(drt,"DebertaForMaskedLM"),drt.forEach(t),qTo=r(g0e," (DeBERTa model)"),g0e.forEach(t),NTo=i(O),c_=n(O,"LI",{});var h0e=s(c_);uie=n(h0e,"STRONG",{});var crt=s(uie);jTo=r(crt,"deberta-v2"),crt.forEach(t),DTo=r(h0e," \u2014 "),$N=n(h0e,"A",{href:!0});var frt=s($N);GTo=r(frt,"DebertaV2ForMaskedLM"),frt.forEach(t),OTo=r(h0e," (DeBERTa-v2 model)"),h0e.forEach(t),VTo=i(O),f_=n(O,"LI",{});var p0e=s(f_);_ie=n(p0e,"STRONG",{});var mrt=s(_ie);XTo=r(mrt,"distilbert"),mrt.forEach(t),zTo=r(p0e," \u2014 "),kN=n(p0e,"A",{href:!0});var grt=s(kN);WTo=r(grt,"DistilBertForMaskedLM"),grt.forEach(t),QTo=r(p0e," (DistilBERT model)"),p0e.forEach(t),HTo=i(O),m_=n(O,"LI",{});var u0e=s(m_);bie=n(u0e,"STRONG",{});var hrt=s(bie);UTo=r(hrt,"electra"),hrt.forEach(t),JTo=r(u0e," \u2014 "),SN=n(u0e,"A",{href:!0});var prt=s(SN);YTo=r(prt,"ElectraForPreTraining"),prt.forEach(t),KTo=r(u0e," (ELECTRA model)"),u0e.forEach(t),ZTo=i(O),g_=n(O,"LI",{});var _0e=s(g_);vie=n(_0e,"STRONG",{});var urt=s(vie);e8o=r(urt,"flaubert"),urt.forEach(t),o8o=r(_0e," \u2014 "),RN=n(_0e,"A",{href:!0});var _rt=s(RN);r8o=r(_rt,"FlaubertWithLMHeadModel"),_rt.forEach(t),t8o=r(_0e," (FlauBERT model)"),_0e.forEach(t),a8o=i(O),h_=n(O,"LI",{});var b0e=s(h_);Fie=n(b0e,"STRONG",{});var brt=s(Fie);n8o=r(brt,"flava"),brt.forEach(t),s8o=r(b0e," \u2014 "),PN=n(b0e,"A",{href:!0});var vrt=s(PN);l8o=r(vrt,"FlavaForPreTraining"),vrt.forEach(t),i8o=r(b0e," (Flava model)"),b0e.forEach(t),d8o=i(O),p_=n(O,"LI",{});var v0e=s(p_);Tie=n(v0e,"STRONG",{});var Frt=s(Tie);c8o=r(Frt,"fnet"),Frt.forEach(t),f8o=r(v0e," \u2014 "),BN=n(v0e,"A",{href:!0});var Trt=s(BN);m8o=r(Trt,"FNetForPreTraining"),Trt.forEach(t),g8o=r(v0e," (FNet model)"),v0e.forEach(t),h8o=i(O),u_=n(O,"LI",{});var F0e=s(u_);Mie=n(F0e,"STRONG",{});var Mrt=s(Mie);p8o=r(Mrt,"fsmt"),Mrt.forEach(t),u8o=r(F0e," \u2014 "),IN=n(F0e,"A",{href:!0});var Ert=s(IN);_8o=r(Ert,"FSMTForConditionalGeneration"),Ert.forEach(t),b8o=r(F0e," (FairSeq Machine-Translation model)"),F0e.forEach(t),v8o=i(O),__=n(O,"LI",{});var T0e=s(__);Eie=n(T0e,"STRONG",{});var Crt=s(Eie);F8o=r(Crt,"funnel"),Crt.forEach(t),T8o=r(T0e," \u2014 "),qN=n(T0e,"A",{href:!0});var wrt=s(qN);M8o=r(wrt,"FunnelForPreTraining"),wrt.forEach(t),E8o=r(T0e," (Funnel Transformer model)"),T0e.forEach(t),C8o=i(O),b_=n(O,"LI",{});var M0e=s(b_);Cie=n(M0e,"STRONG",{});var Art=s(Cie);w8o=r(Art,"gpt2"),Art.forEach(t),A8o=r(M0e," \u2014 "),NN=n(M0e,"A",{href:!0});var yrt=s(NN);y8o=r(yrt,"GPT2LMHeadModel"),yrt.forEach(t),L8o=r(M0e," (OpenAI GPT-2 model)"),M0e.forEach(t),x8o=i(O),v_=n(O,"LI",{});var E0e=s(v_);wie=n(E0e,"STRONG",{});var Lrt=s(wie);$8o=r(Lrt,"ibert"),Lrt.forEach(t),k8o=r(E0e," \u2014 "),jN=n(E0e,"A",{href:!0});var xrt=s(jN);S8o=r(xrt,"IBertForMaskedLM"),xrt.forEach(t),R8o=r(E0e," (I-BERT model)"),E0e.forEach(t),P8o=i(O),F_=n(O,"LI",{});var C0e=s(F_);Aie=n(C0e,"STRONG",{});var $rt=s(Aie);B8o=r($rt,"layoutlm"),$rt.forEach(t),I8o=r(C0e," \u2014 "),DN=n(C0e,"A",{href:!0});var krt=s(DN);q8o=r(krt,"LayoutLMForMaskedLM"),krt.forEach(t),N8o=r(C0e," (LayoutLM model)"),C0e.forEach(t),j8o=i(O),T_=n(O,"LI",{});var w0e=s(T_);yie=n(w0e,"STRONG",{});var Srt=s(yie);D8o=r(Srt,"longformer"),Srt.forEach(t),G8o=r(w0e," \u2014 "),GN=n(w0e,"A",{href:!0});var Rrt=s(GN);O8o=r(Rrt,"LongformerForMaskedLM"),Rrt.forEach(t),V8o=r(w0e," (Longformer model)"),w0e.forEach(t),X8o=i(O),M_=n(O,"LI",{});var A0e=s(M_);Lie=n(A0e,"STRONG",{});var Prt=s(Lie);z8o=r(Prt,"lxmert"),Prt.forEach(t),W8o=r(A0e," \u2014 "),ON=n(A0e,"A",{href:!0});var Brt=s(ON);Q8o=r(Brt,"LxmertForPreTraining"),Brt.forEach(t),H8o=r(A0e," (LXMERT model)"),A0e.forEach(t),U8o=i(O),E_=n(O,"LI",{});var y0e=s(E_);xie=n(y0e,"STRONG",{});var Irt=s(xie);J8o=r(Irt,"megatron-bert"),Irt.forEach(t),Y8o=r(y0e," \u2014 "),VN=n(y0e,"A",{href:!0});var qrt=s(VN);K8o=r(qrt,"MegatronBertForPreTraining"),qrt.forEach(t),Z8o=r(y0e," (MegatronBert model)"),y0e.forEach(t),e7o=i(O),C_=n(O,"LI",{});var L0e=s(C_);$ie=n(L0e,"STRONG",{});var Nrt=s($ie);o7o=r(Nrt,"mobilebert"),Nrt.forEach(t),r7o=r(L0e," \u2014 "),XN=n(L0e,"A",{href:!0});var jrt=s(XN);t7o=r(jrt,"MobileBertForPreTraining"),jrt.forEach(t),a7o=r(L0e," (MobileBERT model)"),L0e.forEach(t),n7o=i(O),w_=n(O,"LI",{});var x0e=s(w_);kie=n(x0e,"STRONG",{});var Drt=s(kie);s7o=r(Drt,"mpnet"),Drt.forEach(t),l7o=r(x0e," \u2014 "),zN=n(x0e,"A",{href:!0});var Grt=s(zN);i7o=r(Grt,"MPNetForMaskedLM"),Grt.forEach(t),d7o=r(x0e," (MPNet model)"),x0e.forEach(t),c7o=i(O),A_=n(O,"LI",{});var $0e=s(A_);Sie=n($0e,"STRONG",{});var Ort=s(Sie);f7o=r(Ort,"openai-gpt"),Ort.forEach(t),m7o=r($0e," \u2014 "),WN=n($0e,"A",{href:!0});var Vrt=s(WN);g7o=r(Vrt,"OpenAIGPTLMHeadModel"),Vrt.forEach(t),h7o=r($0e," (OpenAI GPT model)"),$0e.forEach(t),p7o=i(O),y_=n(O,"LI",{});var k0e=s(y_);Rie=n(k0e,"STRONG",{});var Xrt=s(Rie);u7o=r(Xrt,"retribert"),Xrt.forEach(t),_7o=r(k0e," \u2014 "),QN=n(k0e,"A",{href:!0});var zrt=s(QN);b7o=r(zrt,"RetriBertModel"),zrt.forEach(t),v7o=r(k0e," (RetriBERT model)"),k0e.forEach(t),F7o=i(O),L_=n(O,"LI",{});var S0e=s(L_);Pie=n(S0e,"STRONG",{});var Wrt=s(Pie);T7o=r(Wrt,"roberta"),Wrt.forEach(t),M7o=r(S0e," \u2014 "),HN=n(S0e,"A",{href:!0});var Qrt=s(HN);E7o=r(Qrt,"RobertaForMaskedLM"),Qrt.forEach(t),C7o=r(S0e," (RoBERTa model)"),S0e.forEach(t),w7o=i(O),x_=n(O,"LI",{});var R0e=s(x_);Bie=n(R0e,"STRONG",{});var Hrt=s(Bie);A7o=r(Hrt,"squeezebert"),Hrt.forEach(t),y7o=r(R0e," \u2014 "),UN=n(R0e,"A",{href:!0});var Urt=s(UN);L7o=r(Urt,"SqueezeBertForMaskedLM"),Urt.forEach(t),x7o=r(R0e," (SqueezeBERT model)"),R0e.forEach(t),$7o=i(O),$_=n(O,"LI",{});var P0e=s($_);Iie=n(P0e,"STRONG",{});var Jrt=s(Iie);k7o=r(Jrt,"t5"),Jrt.forEach(t),S7o=r(P0e," \u2014 "),JN=n(P0e,"A",{href:!0});var Yrt=s(JN);R7o=r(Yrt,"T5ForConditionalGeneration"),Yrt.forEach(t),P7o=r(P0e," (T5 model)"),P0e.forEach(t),B7o=i(O),k_=n(O,"LI",{});var B0e=s(k_);qie=n(B0e,"STRONG",{});var Krt=s(qie);I7o=r(Krt,"tapas"),Krt.forEach(t),q7o=r(B0e," \u2014 "),YN=n(B0e,"A",{href:!0});var Zrt=s(YN);N7o=r(Zrt,"TapasForMaskedLM"),Zrt.forEach(t),j7o=r(B0e," (TAPAS model)"),B0e.forEach(t),D7o=i(O),S_=n(O,"LI",{});var I0e=s(S_);Nie=n(I0e,"STRONG",{});var ett=s(Nie);G7o=r(ett,"transfo-xl"),ett.forEach(t),O7o=r(I0e," \u2014 "),KN=n(I0e,"A",{href:!0});var ott=s(KN);V7o=r(ott,"TransfoXLLMHeadModel"),ott.forEach(t),X7o=r(I0e," (Transformer-XL model)"),I0e.forEach(t),z7o=i(O),R_=n(O,"LI",{});var q0e=s(R_);jie=n(q0e,"STRONG",{});var rtt=s(jie);W7o=r(rtt,"unispeech"),rtt.forEach(t),Q7o=r(q0e," \u2014 "),ZN=n(q0e,"A",{href:!0});var ttt=s(ZN);H7o=r(ttt,"UniSpeechForPreTraining"),ttt.forEach(t),U7o=r(q0e," (UniSpeech model)"),q0e.forEach(t),J7o=i(O),P_=n(O,"LI",{});var N0e=s(P_);Die=n(N0e,"STRONG",{});var att=s(Die);Y7o=r(att,"unispeech-sat"),att.forEach(t),K7o=r(N0e," \u2014 "),ej=n(N0e,"A",{href:!0});var ntt=s(ej);Z7o=r(ntt,"UniSpeechSatForPreTraining"),ntt.forEach(t),eMo=r(N0e," (UniSpeechSat model)"),N0e.forEach(t),oMo=i(O),B_=n(O,"LI",{});var j0e=s(B_);Gie=n(j0e,"STRONG",{});var stt=s(Gie);rMo=r(stt,"visual_bert"),stt.forEach(t),tMo=r(j0e," \u2014 "),oj=n(j0e,"A",{href:!0});var ltt=s(oj);aMo=r(ltt,"VisualBertForPreTraining"),ltt.forEach(t),nMo=r(j0e," (VisualBert model)"),j0e.forEach(t),sMo=i(O),I_=n(O,"LI",{});var D0e=s(I_);Oie=n(D0e,"STRONG",{});var itt=s(Oie);lMo=r(itt,"vit_mae"),itt.forEach(t),iMo=r(D0e," \u2014 "),rj=n(D0e,"A",{href:!0});var dtt=s(rj);dMo=r(dtt,"ViTMAEForPreTraining"),dtt.forEach(t),cMo=r(D0e," (ViTMAE model)"),D0e.forEach(t),fMo=i(O),q_=n(O,"LI",{});var G0e=s(q_);Vie=n(G0e,"STRONG",{});var ctt=s(Vie);mMo=r(ctt,"wav2vec2"),ctt.forEach(t),gMo=r(G0e," \u2014 "),tj=n(G0e,"A",{href:!0});var ftt=s(tj);hMo=r(ftt,"Wav2Vec2ForPreTraining"),ftt.forEach(t),pMo=r(G0e," (Wav2Vec2 model)"),G0e.forEach(t),uMo=i(O),N_=n(O,"LI",{});var O0e=s(N_);Xie=n(O0e,"STRONG",{});var mtt=s(Xie);_Mo=r(mtt,"wav2vec2-conformer"),mtt.forEach(t),bMo=r(O0e," \u2014 "),aj=n(O0e,"A",{href:!0});var gtt=s(aj);vMo=r(gtt,"Wav2Vec2ConformerForPreTraining"),gtt.forEach(t),FMo=r(O0e," (Wav2Vec2-Conformer model)"),O0e.forEach(t),TMo=i(O),j_=n(O,"LI",{});var V0e=s(j_);zie=n(V0e,"STRONG",{});var htt=s(zie);MMo=r(htt,"xlm"),htt.forEach(t),EMo=r(V0e," \u2014 "),nj=n(V0e,"A",{href:!0});var ptt=s(nj);CMo=r(ptt,"XLMWithLMHeadModel"),ptt.forEach(t),wMo=r(V0e," (XLM model)"),V0e.forEach(t),AMo=i(O),D_=n(O,"LI",{});var X0e=s(D_);Wie=n(X0e,"STRONG",{});var utt=s(Wie);yMo=r(utt,"xlm-roberta"),utt.forEach(t),LMo=r(X0e," \u2014 "),sj=n(X0e,"A",{href:!0});var _tt=s(sj);xMo=r(_tt,"XLMRobertaForMaskedLM"),_tt.forEach(t),$Mo=r(X0e," (XLM-RoBERTa model)"),X0e.forEach(t),kMo=i(O),G_=n(O,"LI",{});var z0e=s(G_);Qie=n(z0e,"STRONG",{});var btt=s(Qie);SMo=r(btt,"xlm-roberta-xl"),btt.forEach(t),RMo=r(z0e," \u2014 "),lj=n(z0e,"A",{href:!0});var vtt=s(lj);PMo=r(vtt,"XLMRobertaXLForMaskedLM"),vtt.forEach(t),BMo=r(z0e," (XLM-RoBERTa-XL model)"),z0e.forEach(t),IMo=i(O),O_=n(O,"LI",{});var W0e=s(O_);Hie=n(W0e,"STRONG",{});var Ftt=s(Hie);qMo=r(Ftt,"xlnet"),Ftt.forEach(t),NMo=r(W0e," \u2014 "),ij=n(W0e,"A",{href:!0});var Ttt=s(ij);jMo=r(Ttt,"XLNetLMHeadModel"),Ttt.forEach(t),DMo=r(W0e," (XLNet model)"),W0e.forEach(t),O.forEach(t),GMo=i(na),V_=n(na,"P",{});var Q0e=s(V_);OMo=r(Q0e,"The model is set in evaluation mode by default using "),Uie=n(Q0e,"CODE",{});var Mtt=s(Uie);VMo=r(Mtt,"model.eval()"),Mtt.forEach(t),XMo=r(Q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(Q0e,"CODE",{});var Ett=s(Jie);zMo=r(Ett,"model.train()"),Ett.forEach(t),Q0e.forEach(t),WMo=i(na),T(X_.$$.fragment,na),na.forEach(t),Qs.forEach(t),Dqe=i(f),qi=n(f,"H2",{class:!0});var Wje=s(qi);z_=n(Wje,"A",{id:!0,class:!0,href:!0});var Ctt=s(z_);Yie=n(Ctt,"SPAN",{});var wtt=s(Yie);T(i0.$$.fragment,wtt),wtt.forEach(t),Ctt.forEach(t),QMo=i(Wje),Kie=n(Wje,"SPAN",{});var Att=s(Kie);HMo=r(Att,"AutoModelForCausalLM"),Att.forEach(t),Wje.forEach(t),Gqe=i(f),ko=n(f,"DIV",{class:!0});var Hs=s(ko);T(d0.$$.fragment,Hs),UMo=i(Hs),Ni=n(Hs,"P",{});var dZ=s(Ni);JMo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dj=n(dZ,"A",{href:!0});var ytt=s(dj);YMo=r(ytt,"from_pretrained()"),ytt.forEach(t),KMo=r(dZ," class method or the "),cj=n(dZ,"A",{href:!0});var Ltt=s(cj);ZMo=r(Ltt,"from_config()"),Ltt.forEach(t),e4o=r(dZ,` class
method.`),dZ.forEach(t),o4o=i(Hs),c0=n(Hs,"P",{});var Qje=s(c0);r4o=r(Qje,"This class cannot be instantiated directly using "),Zie=n(Qje,"CODE",{});var xtt=s(Zie);t4o=r(xtt,"__init__()"),xtt.forEach(t),a4o=r(Qje," (throws an error)."),Qje.forEach(t),n4o=i(Hs),lt=n(Hs,"DIV",{class:!0});var S3=s(lt);T(f0.$$.fragment,S3),s4o=i(S3),ede=n(S3,"P",{});var $tt=s(ede);l4o=r($tt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$tt.forEach(t),i4o=i(S3),ji=n(S3,"P",{});var cZ=s(ji);d4o=r(cZ,`Note:
Loading a model from its configuration file does `),ode=n(cZ,"STRONG",{});var ktt=s(ode);c4o=r(ktt,"not"),ktt.forEach(t),f4o=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(cZ,"A",{href:!0});var Stt=s(fj);m4o=r(Stt,"from_pretrained()"),Stt.forEach(t),g4o=r(cZ," to load the model weights."),cZ.forEach(t),h4o=i(S3),T(W_.$$.fragment,S3),S3.forEach(t),p4o=i(Hs),Ke=n(Hs,"DIV",{class:!0});var sa=s(Ke);T(m0.$$.fragment,sa),u4o=i(sa),rde=n(sa,"P",{});var Rtt=s(rde);_4o=r(Rtt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rtt.forEach(t),b4o=i(sa),Pa=n(sa,"P",{});var R3=s(Pa);v4o=r(R3,"The model class to instantiate is selected based on the "),tde=n(R3,"CODE",{});var Ptt=s(tde);F4o=r(Ptt,"model_type"),Ptt.forEach(t),T4o=r(R3,` property of the config object (either
passed as an argument or loaded from `),ade=n(R3,"CODE",{});var Btt=s(ade);M4o=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),E4o=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nde=n(R3,"CODE",{});var Itt=s(nde);C4o=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),w4o=r(R3,":"),R3.forEach(t),A4o=i(sa),z=n(sa,"UL",{});var Q=s(z);Q_=n(Q,"LI",{});var H0e=s(Q_);sde=n(H0e,"STRONG",{});var qtt=s(sde);y4o=r(qtt,"bart"),qtt.forEach(t),L4o=r(H0e," \u2014 "),mj=n(H0e,"A",{href:!0});var Ntt=s(mj);x4o=r(Ntt,"BartForCausalLM"),Ntt.forEach(t),$4o=r(H0e," (BART model)"),H0e.forEach(t),k4o=i(Q),H_=n(Q,"LI",{});var U0e=s(H_);lde=n(U0e,"STRONG",{});var jtt=s(lde);S4o=r(jtt,"bert"),jtt.forEach(t),R4o=r(U0e," \u2014 "),gj=n(U0e,"A",{href:!0});var Dtt=s(gj);P4o=r(Dtt,"BertLMHeadModel"),Dtt.forEach(t),B4o=r(U0e," (BERT model)"),U0e.forEach(t),I4o=i(Q),U_=n(Q,"LI",{});var J0e=s(U_);ide=n(J0e,"STRONG",{});var Gtt=s(ide);q4o=r(Gtt,"bert-generation"),Gtt.forEach(t),N4o=r(J0e," \u2014 "),hj=n(J0e,"A",{href:!0});var Ott=s(hj);j4o=r(Ott,"BertGenerationDecoder"),Ott.forEach(t),D4o=r(J0e," (Bert Generation model)"),J0e.forEach(t),G4o=i(Q),J_=n(Q,"LI",{});var Y0e=s(J_);dde=n(Y0e,"STRONG",{});var Vtt=s(dde);O4o=r(Vtt,"big_bird"),Vtt.forEach(t),V4o=r(Y0e," \u2014 "),pj=n(Y0e,"A",{href:!0});var Xtt=s(pj);X4o=r(Xtt,"BigBirdForCausalLM"),Xtt.forEach(t),z4o=r(Y0e," (BigBird model)"),Y0e.forEach(t),W4o=i(Q),Y_=n(Q,"LI",{});var K0e=s(Y_);cde=n(K0e,"STRONG",{});var ztt=s(cde);Q4o=r(ztt,"bigbird_pegasus"),ztt.forEach(t),H4o=r(K0e," \u2014 "),uj=n(K0e,"A",{href:!0});var Wtt=s(uj);U4o=r(Wtt,"BigBirdPegasusForCausalLM"),Wtt.forEach(t),J4o=r(K0e," (BigBirdPegasus model)"),K0e.forEach(t),Y4o=i(Q),K_=n(Q,"LI",{});var Z0e=s(K_);fde=n(Z0e,"STRONG",{});var Qtt=s(fde);K4o=r(Qtt,"blenderbot"),Qtt.forEach(t),Z4o=r(Z0e," \u2014 "),_j=n(Z0e,"A",{href:!0});var Htt=s(_j);eEo=r(Htt,"BlenderbotForCausalLM"),Htt.forEach(t),oEo=r(Z0e," (Blenderbot model)"),Z0e.forEach(t),rEo=i(Q),Z_=n(Q,"LI",{});var eye=s(Z_);mde=n(eye,"STRONG",{});var Utt=s(mde);tEo=r(Utt,"blenderbot-small"),Utt.forEach(t),aEo=r(eye," \u2014 "),bj=n(eye,"A",{href:!0});var Jtt=s(bj);nEo=r(Jtt,"BlenderbotSmallForCausalLM"),Jtt.forEach(t),sEo=r(eye," (BlenderbotSmall model)"),eye.forEach(t),lEo=i(Q),e2=n(Q,"LI",{});var oye=s(e2);gde=n(oye,"STRONG",{});var Ytt=s(gde);iEo=r(Ytt,"camembert"),Ytt.forEach(t),dEo=r(oye," \u2014 "),vj=n(oye,"A",{href:!0});var Ktt=s(vj);cEo=r(Ktt,"CamembertForCausalLM"),Ktt.forEach(t),fEo=r(oye," (CamemBERT model)"),oye.forEach(t),mEo=i(Q),o2=n(Q,"LI",{});var rye=s(o2);hde=n(rye,"STRONG",{});var Ztt=s(hde);gEo=r(Ztt,"ctrl"),Ztt.forEach(t),hEo=r(rye," \u2014 "),Fj=n(rye,"A",{href:!0});var eat=s(Fj);pEo=r(eat,"CTRLLMHeadModel"),eat.forEach(t),uEo=r(rye," (CTRL model)"),rye.forEach(t),_Eo=i(Q),r2=n(Q,"LI",{});var tye=s(r2);pde=n(tye,"STRONG",{});var oat=s(pde);bEo=r(oat,"data2vec-text"),oat.forEach(t),vEo=r(tye," \u2014 "),Tj=n(tye,"A",{href:!0});var rat=s(Tj);FEo=r(rat,"Data2VecTextForCausalLM"),rat.forEach(t),TEo=r(tye," (Data2VecText model)"),tye.forEach(t),MEo=i(Q),t2=n(Q,"LI",{});var aye=s(t2);ude=n(aye,"STRONG",{});var tat=s(ude);EEo=r(tat,"electra"),tat.forEach(t),CEo=r(aye," \u2014 "),Mj=n(aye,"A",{href:!0});var aat=s(Mj);wEo=r(aat,"ElectraForCausalLM"),aat.forEach(t),AEo=r(aye," (ELECTRA model)"),aye.forEach(t),yEo=i(Q),a2=n(Q,"LI",{});var nye=s(a2);_de=n(nye,"STRONG",{});var nat=s(_de);LEo=r(nat,"gpt2"),nat.forEach(t),xEo=r(nye," \u2014 "),Ej=n(nye,"A",{href:!0});var sat=s(Ej);$Eo=r(sat,"GPT2LMHeadModel"),sat.forEach(t),kEo=r(nye," (OpenAI GPT-2 model)"),nye.forEach(t),SEo=i(Q),n2=n(Q,"LI",{});var sye=s(n2);bde=n(sye,"STRONG",{});var lat=s(bde);REo=r(lat,"gpt_neo"),lat.forEach(t),PEo=r(sye," \u2014 "),Cj=n(sye,"A",{href:!0});var iat=s(Cj);BEo=r(iat,"GPTNeoForCausalLM"),iat.forEach(t),IEo=r(sye," (GPT Neo model)"),sye.forEach(t),qEo=i(Q),s2=n(Q,"LI",{});var lye=s(s2);vde=n(lye,"STRONG",{});var dat=s(vde);NEo=r(dat,"gptj"),dat.forEach(t),jEo=r(lye," \u2014 "),wj=n(lye,"A",{href:!0});var cat=s(wj);DEo=r(cat,"GPTJForCausalLM"),cat.forEach(t),GEo=r(lye," (GPT-J model)"),lye.forEach(t),OEo=i(Q),l2=n(Q,"LI",{});var iye=s(l2);Fde=n(iye,"STRONG",{});var fat=s(Fde);VEo=r(fat,"marian"),fat.forEach(t),XEo=r(iye," \u2014 "),Aj=n(iye,"A",{href:!0});var mat=s(Aj);zEo=r(mat,"MarianForCausalLM"),mat.forEach(t),WEo=r(iye," (Marian model)"),iye.forEach(t),QEo=i(Q),i2=n(Q,"LI",{});var dye=s(i2);Tde=n(dye,"STRONG",{});var gat=s(Tde);HEo=r(gat,"mbart"),gat.forEach(t),UEo=r(dye," \u2014 "),yj=n(dye,"A",{href:!0});var hat=s(yj);JEo=r(hat,"MBartForCausalLM"),hat.forEach(t),YEo=r(dye," (mBART model)"),dye.forEach(t),KEo=i(Q),d2=n(Q,"LI",{});var cye=s(d2);Mde=n(cye,"STRONG",{});var pat=s(Mde);ZEo=r(pat,"megatron-bert"),pat.forEach(t),eCo=r(cye," \u2014 "),Lj=n(cye,"A",{href:!0});var uat=s(Lj);oCo=r(uat,"MegatronBertForCausalLM"),uat.forEach(t),rCo=r(cye," (MegatronBert model)"),cye.forEach(t),tCo=i(Q),c2=n(Q,"LI",{});var fye=s(c2);Ede=n(fye,"STRONG",{});var _at=s(Ede);aCo=r(_at,"openai-gpt"),_at.forEach(t),nCo=r(fye," \u2014 "),xj=n(fye,"A",{href:!0});var bat=s(xj);sCo=r(bat,"OpenAIGPTLMHeadModel"),bat.forEach(t),lCo=r(fye," (OpenAI GPT model)"),fye.forEach(t),iCo=i(Q),f2=n(Q,"LI",{});var mye=s(f2);Cde=n(mye,"STRONG",{});var vat=s(Cde);dCo=r(vat,"opt"),vat.forEach(t),cCo=r(mye," \u2014 "),$j=n(mye,"A",{href:!0});var Fat=s($j);fCo=r(Fat,"OPTForCausalLM"),Fat.forEach(t),mCo=r(mye," (OPT model)"),mye.forEach(t),gCo=i(Q),m2=n(Q,"LI",{});var gye=s(m2);wde=n(gye,"STRONG",{});var Tat=s(wde);hCo=r(Tat,"pegasus"),Tat.forEach(t),pCo=r(gye," \u2014 "),kj=n(gye,"A",{href:!0});var Mat=s(kj);uCo=r(Mat,"PegasusForCausalLM"),Mat.forEach(t),_Co=r(gye," (Pegasus model)"),gye.forEach(t),bCo=i(Q),g2=n(Q,"LI",{});var hye=s(g2);Ade=n(hye,"STRONG",{});var Eat=s(Ade);vCo=r(Eat,"plbart"),Eat.forEach(t),FCo=r(hye," \u2014 "),Sj=n(hye,"A",{href:!0});var Cat=s(Sj);TCo=r(Cat,"PLBartForCausalLM"),Cat.forEach(t),MCo=r(hye," (PLBart model)"),hye.forEach(t),ECo=i(Q),h2=n(Q,"LI",{});var pye=s(h2);yde=n(pye,"STRONG",{});var wat=s(yde);CCo=r(wat,"prophetnet"),wat.forEach(t),wCo=r(pye," \u2014 "),Rj=n(pye,"A",{href:!0});var Aat=s(Rj);ACo=r(Aat,"ProphetNetForCausalLM"),Aat.forEach(t),yCo=r(pye," (ProphetNet model)"),pye.forEach(t),LCo=i(Q),p2=n(Q,"LI",{});var uye=s(p2);Lde=n(uye,"STRONG",{});var yat=s(Lde);xCo=r(yat,"qdqbert"),yat.forEach(t),$Co=r(uye," \u2014 "),Pj=n(uye,"A",{href:!0});var Lat=s(Pj);kCo=r(Lat,"QDQBertLMHeadModel"),Lat.forEach(t),SCo=r(uye," (QDQBert model)"),uye.forEach(t),RCo=i(Q),u2=n(Q,"LI",{});var _ye=s(u2);xde=n(_ye,"STRONG",{});var xat=s(xde);PCo=r(xat,"reformer"),xat.forEach(t),BCo=r(_ye," \u2014 "),Bj=n(_ye,"A",{href:!0});var $at=s(Bj);ICo=r($at,"ReformerModelWithLMHead"),$at.forEach(t),qCo=r(_ye," (Reformer model)"),_ye.forEach(t),NCo=i(Q),_2=n(Q,"LI",{});var bye=s(_2);$de=n(bye,"STRONG",{});var kat=s($de);jCo=r(kat,"rembert"),kat.forEach(t),DCo=r(bye," \u2014 "),Ij=n(bye,"A",{href:!0});var Sat=s(Ij);GCo=r(Sat,"RemBertForCausalLM"),Sat.forEach(t),OCo=r(bye," (RemBERT model)"),bye.forEach(t),VCo=i(Q),b2=n(Q,"LI",{});var vye=s(b2);kde=n(vye,"STRONG",{});var Rat=s(kde);XCo=r(Rat,"roberta"),Rat.forEach(t),zCo=r(vye," \u2014 "),qj=n(vye,"A",{href:!0});var Pat=s(qj);WCo=r(Pat,"RobertaForCausalLM"),Pat.forEach(t),QCo=r(vye," (RoBERTa model)"),vye.forEach(t),HCo=i(Q),v2=n(Q,"LI",{});var Fye=s(v2);Sde=n(Fye,"STRONG",{});var Bat=s(Sde);UCo=r(Bat,"roformer"),Bat.forEach(t),JCo=r(Fye," \u2014 "),Nj=n(Fye,"A",{href:!0});var Iat=s(Nj);YCo=r(Iat,"RoFormerForCausalLM"),Iat.forEach(t),KCo=r(Fye," (RoFormer model)"),Fye.forEach(t),ZCo=i(Q),F2=n(Q,"LI",{});var Tye=s(F2);Rde=n(Tye,"STRONG",{});var qat=s(Rde);e5o=r(qat,"speech_to_text_2"),qat.forEach(t),o5o=r(Tye," \u2014 "),jj=n(Tye,"A",{href:!0});var Nat=s(jj);r5o=r(Nat,"Speech2Text2ForCausalLM"),Nat.forEach(t),t5o=r(Tye," (Speech2Text2 model)"),Tye.forEach(t),a5o=i(Q),T2=n(Q,"LI",{});var Mye=s(T2);Pde=n(Mye,"STRONG",{});var jat=s(Pde);n5o=r(jat,"transfo-xl"),jat.forEach(t),s5o=r(Mye," \u2014 "),Dj=n(Mye,"A",{href:!0});var Dat=s(Dj);l5o=r(Dat,"TransfoXLLMHeadModel"),Dat.forEach(t),i5o=r(Mye," (Transformer-XL model)"),Mye.forEach(t),d5o=i(Q),M2=n(Q,"LI",{});var Eye=s(M2);Bde=n(Eye,"STRONG",{});var Gat=s(Bde);c5o=r(Gat,"trocr"),Gat.forEach(t),f5o=r(Eye," \u2014 "),Gj=n(Eye,"A",{href:!0});var Oat=s(Gj);m5o=r(Oat,"TrOCRForCausalLM"),Oat.forEach(t),g5o=r(Eye," (TrOCR model)"),Eye.forEach(t),h5o=i(Q),E2=n(Q,"LI",{});var Cye=s(E2);Ide=n(Cye,"STRONG",{});var Vat=s(Ide);p5o=r(Vat,"xglm"),Vat.forEach(t),u5o=r(Cye," \u2014 "),Oj=n(Cye,"A",{href:!0});var Xat=s(Oj);_5o=r(Xat,"XGLMForCausalLM"),Xat.forEach(t),b5o=r(Cye," (XGLM model)"),Cye.forEach(t),v5o=i(Q),C2=n(Q,"LI",{});var wye=s(C2);qde=n(wye,"STRONG",{});var zat=s(qde);F5o=r(zat,"xlm"),zat.forEach(t),T5o=r(wye," \u2014 "),Vj=n(wye,"A",{href:!0});var Wat=s(Vj);M5o=r(Wat,"XLMWithLMHeadModel"),Wat.forEach(t),E5o=r(wye," (XLM model)"),wye.forEach(t),C5o=i(Q),w2=n(Q,"LI",{});var Aye=s(w2);Nde=n(Aye,"STRONG",{});var Qat=s(Nde);w5o=r(Qat,"xlm-prophetnet"),Qat.forEach(t),A5o=r(Aye," \u2014 "),Xj=n(Aye,"A",{href:!0});var Hat=s(Xj);y5o=r(Hat,"XLMProphetNetForCausalLM"),Hat.forEach(t),L5o=r(Aye," (XLMProphetNet model)"),Aye.forEach(t),x5o=i(Q),A2=n(Q,"LI",{});var yye=s(A2);jde=n(yye,"STRONG",{});var Uat=s(jde);$5o=r(Uat,"xlm-roberta"),Uat.forEach(t),k5o=r(yye," \u2014 "),zj=n(yye,"A",{href:!0});var Jat=s(zj);S5o=r(Jat,"XLMRobertaForCausalLM"),Jat.forEach(t),R5o=r(yye," (XLM-RoBERTa model)"),yye.forEach(t),P5o=i(Q),y2=n(Q,"LI",{});var Lye=s(y2);Dde=n(Lye,"STRONG",{});var Yat=s(Dde);B5o=r(Yat,"xlm-roberta-xl"),Yat.forEach(t),I5o=r(Lye," \u2014 "),Wj=n(Lye,"A",{href:!0});var Kat=s(Wj);q5o=r(Kat,"XLMRobertaXLForCausalLM"),Kat.forEach(t),N5o=r(Lye," (XLM-RoBERTa-XL model)"),Lye.forEach(t),j5o=i(Q),L2=n(Q,"LI",{});var xye=s(L2);Gde=n(xye,"STRONG",{});var Zat=s(Gde);D5o=r(Zat,"xlnet"),Zat.forEach(t),G5o=r(xye," \u2014 "),Qj=n(xye,"A",{href:!0});var ent=s(Qj);O5o=r(ent,"XLNetLMHeadModel"),ent.forEach(t),V5o=r(xye," (XLNet model)"),xye.forEach(t),Q.forEach(t),X5o=i(sa),x2=n(sa,"P",{});var $ye=s(x2);z5o=r($ye,"The model is set in evaluation mode by default using "),Ode=n($ye,"CODE",{});var ont=s(Ode);W5o=r(ont,"model.eval()"),ont.forEach(t),Q5o=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vde=n($ye,"CODE",{});var rnt=s(Vde);H5o=r(rnt,"model.train()"),rnt.forEach(t),$ye.forEach(t),U5o=i(sa),T($2.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),Oqe=i(f),Di=n(f,"H2",{class:!0});var Hje=s(Di);k2=n(Hje,"A",{id:!0,class:!0,href:!0});var tnt=s(k2);Xde=n(tnt,"SPAN",{});var ant=s(Xde);T(g0.$$.fragment,ant),ant.forEach(t),tnt.forEach(t),J5o=i(Hje),zde=n(Hje,"SPAN",{});var nnt=s(zde);Y5o=r(nnt,"AutoModelForMaskedLM"),nnt.forEach(t),Hje.forEach(t),Vqe=i(f),So=n(f,"DIV",{class:!0});var Us=s(So);T(h0.$$.fragment,Us),K5o=i(Us),Gi=n(Us,"P",{});var fZ=s(Gi);Z5o=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hj=n(fZ,"A",{href:!0});var snt=s(Hj);e3o=r(snt,"from_pretrained()"),snt.forEach(t),o3o=r(fZ," class method or the "),Uj=n(fZ,"A",{href:!0});var lnt=s(Uj);r3o=r(lnt,"from_config()"),lnt.forEach(t),t3o=r(fZ,` class
method.`),fZ.forEach(t),a3o=i(Us),p0=n(Us,"P",{});var Uje=s(p0);n3o=r(Uje,"This class cannot be instantiated directly using "),Wde=n(Uje,"CODE",{});var int=s(Wde);s3o=r(int,"__init__()"),int.forEach(t),l3o=r(Uje," (throws an error)."),Uje.forEach(t),i3o=i(Us),it=n(Us,"DIV",{class:!0});var P3=s(it);T(u0.$$.fragment,P3),d3o=i(P3),Qde=n(P3,"P",{});var dnt=s(Qde);c3o=r(dnt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dnt.forEach(t),f3o=i(P3),Oi=n(P3,"P",{});var mZ=s(Oi);m3o=r(mZ,`Note:
Loading a model from its configuration file does `),Hde=n(mZ,"STRONG",{});var cnt=s(Hde);g3o=r(cnt,"not"),cnt.forEach(t),h3o=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=n(mZ,"A",{href:!0});var fnt=s(Jj);p3o=r(fnt,"from_pretrained()"),fnt.forEach(t),u3o=r(mZ," to load the model weights."),mZ.forEach(t),_3o=i(P3),T(S2.$$.fragment,P3),P3.forEach(t),b3o=i(Us),Ze=n(Us,"DIV",{class:!0});var la=s(Ze);T(_0.$$.fragment,la),v3o=i(la),Ude=n(la,"P",{});var mnt=s(Ude);F3o=r(mnt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mnt.forEach(t),T3o=i(la),Ba=n(la,"P",{});var B3=s(Ba);M3o=r(B3,"The model class to instantiate is selected based on the "),Jde=n(B3,"CODE",{});var gnt=s(Jde);E3o=r(gnt,"model_type"),gnt.forEach(t),C3o=r(B3,` property of the config object (either
passed as an argument or loaded from `),Yde=n(B3,"CODE",{});var hnt=s(Yde);w3o=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),A3o=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kde=n(B3,"CODE",{});var pnt=s(Kde);y3o=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),L3o=r(B3,":"),B3.forEach(t),x3o=i(la),W=n(la,"UL",{});var H=s(W);R2=n(H,"LI",{});var kye=s(R2);Zde=n(kye,"STRONG",{});var unt=s(Zde);$3o=r(unt,"albert"),unt.forEach(t),k3o=r(kye," \u2014 "),Yj=n(kye,"A",{href:!0});var _nt=s(Yj);S3o=r(_nt,"AlbertForMaskedLM"),_nt.forEach(t),R3o=r(kye," (ALBERT model)"),kye.forEach(t),P3o=i(H),P2=n(H,"LI",{});var Sye=s(P2);ece=n(Sye,"STRONG",{});var bnt=s(ece);B3o=r(bnt,"bart"),bnt.forEach(t),I3o=r(Sye," \u2014 "),Kj=n(Sye,"A",{href:!0});var vnt=s(Kj);q3o=r(vnt,"BartForConditionalGeneration"),vnt.forEach(t),N3o=r(Sye," (BART model)"),Sye.forEach(t),j3o=i(H),B2=n(H,"LI",{});var Rye=s(B2);oce=n(Rye,"STRONG",{});var Fnt=s(oce);D3o=r(Fnt,"bert"),Fnt.forEach(t),G3o=r(Rye," \u2014 "),Zj=n(Rye,"A",{href:!0});var Tnt=s(Zj);O3o=r(Tnt,"BertForMaskedLM"),Tnt.forEach(t),V3o=r(Rye," (BERT model)"),Rye.forEach(t),X3o=i(H),I2=n(H,"LI",{});var Pye=s(I2);rce=n(Pye,"STRONG",{});var Mnt=s(rce);z3o=r(Mnt,"big_bird"),Mnt.forEach(t),W3o=r(Pye," \u2014 "),eD=n(Pye,"A",{href:!0});var Ent=s(eD);Q3o=r(Ent,"BigBirdForMaskedLM"),Ent.forEach(t),H3o=r(Pye," (BigBird model)"),Pye.forEach(t),U3o=i(H),q2=n(H,"LI",{});var Bye=s(q2);tce=n(Bye,"STRONG",{});var Cnt=s(tce);J3o=r(Cnt,"camembert"),Cnt.forEach(t),Y3o=r(Bye," \u2014 "),oD=n(Bye,"A",{href:!0});var wnt=s(oD);K3o=r(wnt,"CamembertForMaskedLM"),wnt.forEach(t),Z3o=r(Bye," (CamemBERT model)"),Bye.forEach(t),ewo=i(H),N2=n(H,"LI",{});var Iye=s(N2);ace=n(Iye,"STRONG",{});var Ant=s(ace);owo=r(Ant,"convbert"),Ant.forEach(t),rwo=r(Iye," \u2014 "),rD=n(Iye,"A",{href:!0});var ynt=s(rD);two=r(ynt,"ConvBertForMaskedLM"),ynt.forEach(t),awo=r(Iye," (ConvBERT model)"),Iye.forEach(t),nwo=i(H),j2=n(H,"LI",{});var qye=s(j2);nce=n(qye,"STRONG",{});var Lnt=s(nce);swo=r(Lnt,"data2vec-text"),Lnt.forEach(t),lwo=r(qye," \u2014 "),tD=n(qye,"A",{href:!0});var xnt=s(tD);iwo=r(xnt,"Data2VecTextForMaskedLM"),xnt.forEach(t),dwo=r(qye," (Data2VecText model)"),qye.forEach(t),cwo=i(H),D2=n(H,"LI",{});var Nye=s(D2);sce=n(Nye,"STRONG",{});var $nt=s(sce);fwo=r($nt,"deberta"),$nt.forEach(t),mwo=r(Nye," \u2014 "),aD=n(Nye,"A",{href:!0});var knt=s(aD);gwo=r(knt,"DebertaForMaskedLM"),knt.forEach(t),hwo=r(Nye," (DeBERTa model)"),Nye.forEach(t),pwo=i(H),G2=n(H,"LI",{});var jye=s(G2);lce=n(jye,"STRONG",{});var Snt=s(lce);uwo=r(Snt,"deberta-v2"),Snt.forEach(t),_wo=r(jye," \u2014 "),nD=n(jye,"A",{href:!0});var Rnt=s(nD);bwo=r(Rnt,"DebertaV2ForMaskedLM"),Rnt.forEach(t),vwo=r(jye," (DeBERTa-v2 model)"),jye.forEach(t),Fwo=i(H),O2=n(H,"LI",{});var Dye=s(O2);ice=n(Dye,"STRONG",{});var Pnt=s(ice);Two=r(Pnt,"distilbert"),Pnt.forEach(t),Mwo=r(Dye," \u2014 "),sD=n(Dye,"A",{href:!0});var Bnt=s(sD);Ewo=r(Bnt,"DistilBertForMaskedLM"),Bnt.forEach(t),Cwo=r(Dye," (DistilBERT model)"),Dye.forEach(t),wwo=i(H),V2=n(H,"LI",{});var Gye=s(V2);dce=n(Gye,"STRONG",{});var Int=s(dce);Awo=r(Int,"electra"),Int.forEach(t),ywo=r(Gye," \u2014 "),lD=n(Gye,"A",{href:!0});var qnt=s(lD);Lwo=r(qnt,"ElectraForMaskedLM"),qnt.forEach(t),xwo=r(Gye," (ELECTRA model)"),Gye.forEach(t),$wo=i(H),X2=n(H,"LI",{});var Oye=s(X2);cce=n(Oye,"STRONG",{});var Nnt=s(cce);kwo=r(Nnt,"flaubert"),Nnt.forEach(t),Swo=r(Oye," \u2014 "),iD=n(Oye,"A",{href:!0});var jnt=s(iD);Rwo=r(jnt,"FlaubertWithLMHeadModel"),jnt.forEach(t),Pwo=r(Oye," (FlauBERT model)"),Oye.forEach(t),Bwo=i(H),z2=n(H,"LI",{});var Vye=s(z2);fce=n(Vye,"STRONG",{});var Dnt=s(fce);Iwo=r(Dnt,"fnet"),Dnt.forEach(t),qwo=r(Vye," \u2014 "),dD=n(Vye,"A",{href:!0});var Gnt=s(dD);Nwo=r(Gnt,"FNetForMaskedLM"),Gnt.forEach(t),jwo=r(Vye," (FNet model)"),Vye.forEach(t),Dwo=i(H),W2=n(H,"LI",{});var Xye=s(W2);mce=n(Xye,"STRONG",{});var Ont=s(mce);Gwo=r(Ont,"funnel"),Ont.forEach(t),Owo=r(Xye," \u2014 "),cD=n(Xye,"A",{href:!0});var Vnt=s(cD);Vwo=r(Vnt,"FunnelForMaskedLM"),Vnt.forEach(t),Xwo=r(Xye," (Funnel Transformer model)"),Xye.forEach(t),zwo=i(H),Q2=n(H,"LI",{});var zye=s(Q2);gce=n(zye,"STRONG",{});var Xnt=s(gce);Wwo=r(Xnt,"ibert"),Xnt.forEach(t),Qwo=r(zye," \u2014 "),fD=n(zye,"A",{href:!0});var znt=s(fD);Hwo=r(znt,"IBertForMaskedLM"),znt.forEach(t),Uwo=r(zye," (I-BERT model)"),zye.forEach(t),Jwo=i(H),H2=n(H,"LI",{});var Wye=s(H2);hce=n(Wye,"STRONG",{});var Wnt=s(hce);Ywo=r(Wnt,"layoutlm"),Wnt.forEach(t),Kwo=r(Wye," \u2014 "),mD=n(Wye,"A",{href:!0});var Qnt=s(mD);Zwo=r(Qnt,"LayoutLMForMaskedLM"),Qnt.forEach(t),eAo=r(Wye," (LayoutLM model)"),Wye.forEach(t),oAo=i(H),U2=n(H,"LI",{});var Qye=s(U2);pce=n(Qye,"STRONG",{});var Hnt=s(pce);rAo=r(Hnt,"longformer"),Hnt.forEach(t),tAo=r(Qye," \u2014 "),gD=n(Qye,"A",{href:!0});var Unt=s(gD);aAo=r(Unt,"LongformerForMaskedLM"),Unt.forEach(t),nAo=r(Qye," (Longformer model)"),Qye.forEach(t),sAo=i(H),J2=n(H,"LI",{});var Hye=s(J2);uce=n(Hye,"STRONG",{});var Jnt=s(uce);lAo=r(Jnt,"mbart"),Jnt.forEach(t),iAo=r(Hye," \u2014 "),hD=n(Hye,"A",{href:!0});var Ynt=s(hD);dAo=r(Ynt,"MBartForConditionalGeneration"),Ynt.forEach(t),cAo=r(Hye," (mBART model)"),Hye.forEach(t),fAo=i(H),Y2=n(H,"LI",{});var Uye=s(Y2);_ce=n(Uye,"STRONG",{});var Knt=s(_ce);mAo=r(Knt,"megatron-bert"),Knt.forEach(t),gAo=r(Uye," \u2014 "),pD=n(Uye,"A",{href:!0});var Znt=s(pD);hAo=r(Znt,"MegatronBertForMaskedLM"),Znt.forEach(t),pAo=r(Uye," (MegatronBert model)"),Uye.forEach(t),uAo=i(H),K2=n(H,"LI",{});var Jye=s(K2);bce=n(Jye,"STRONG",{});var est=s(bce);_Ao=r(est,"mobilebert"),est.forEach(t),bAo=r(Jye," \u2014 "),uD=n(Jye,"A",{href:!0});var ost=s(uD);vAo=r(ost,"MobileBertForMaskedLM"),ost.forEach(t),FAo=r(Jye," (MobileBERT model)"),Jye.forEach(t),TAo=i(H),Z2=n(H,"LI",{});var Yye=s(Z2);vce=n(Yye,"STRONG",{});var rst=s(vce);MAo=r(rst,"mpnet"),rst.forEach(t),EAo=r(Yye," \u2014 "),_D=n(Yye,"A",{href:!0});var tst=s(_D);CAo=r(tst,"MPNetForMaskedLM"),tst.forEach(t),wAo=r(Yye," (MPNet model)"),Yye.forEach(t),AAo=i(H),e1=n(H,"LI",{});var Kye=s(e1);Fce=n(Kye,"STRONG",{});var ast=s(Fce);yAo=r(ast,"nystromformer"),ast.forEach(t),LAo=r(Kye," \u2014 "),bD=n(Kye,"A",{href:!0});var nst=s(bD);xAo=r(nst,"NystromformerForMaskedLM"),nst.forEach(t),$Ao=r(Kye," (Nystromformer model)"),Kye.forEach(t),kAo=i(H),o1=n(H,"LI",{});var Zye=s(o1);Tce=n(Zye,"STRONG",{});var sst=s(Tce);SAo=r(sst,"perceiver"),sst.forEach(t),RAo=r(Zye," \u2014 "),vD=n(Zye,"A",{href:!0});var lst=s(vD);PAo=r(lst,"PerceiverForMaskedLM"),lst.forEach(t),BAo=r(Zye," (Perceiver model)"),Zye.forEach(t),IAo=i(H),r1=n(H,"LI",{});var eLe=s(r1);Mce=n(eLe,"STRONG",{});var ist=s(Mce);qAo=r(ist,"qdqbert"),ist.forEach(t),NAo=r(eLe," \u2014 "),FD=n(eLe,"A",{href:!0});var dst=s(FD);jAo=r(dst,"QDQBertForMaskedLM"),dst.forEach(t),DAo=r(eLe," (QDQBert model)"),eLe.forEach(t),GAo=i(H),t1=n(H,"LI",{});var oLe=s(t1);Ece=n(oLe,"STRONG",{});var cst=s(Ece);OAo=r(cst,"reformer"),cst.forEach(t),VAo=r(oLe," \u2014 "),TD=n(oLe,"A",{href:!0});var fst=s(TD);XAo=r(fst,"ReformerForMaskedLM"),fst.forEach(t),zAo=r(oLe," (Reformer model)"),oLe.forEach(t),WAo=i(H),a1=n(H,"LI",{});var rLe=s(a1);Cce=n(rLe,"STRONG",{});var mst=s(Cce);QAo=r(mst,"rembert"),mst.forEach(t),HAo=r(rLe," \u2014 "),MD=n(rLe,"A",{href:!0});var gst=s(MD);UAo=r(gst,"RemBertForMaskedLM"),gst.forEach(t),JAo=r(rLe," (RemBERT model)"),rLe.forEach(t),YAo=i(H),n1=n(H,"LI",{});var tLe=s(n1);wce=n(tLe,"STRONG",{});var hst=s(wce);KAo=r(hst,"roberta"),hst.forEach(t),ZAo=r(tLe," \u2014 "),ED=n(tLe,"A",{href:!0});var pst=s(ED);e0o=r(pst,"RobertaForMaskedLM"),pst.forEach(t),o0o=r(tLe," (RoBERTa model)"),tLe.forEach(t),r0o=i(H),s1=n(H,"LI",{});var aLe=s(s1);Ace=n(aLe,"STRONG",{});var ust=s(Ace);t0o=r(ust,"roformer"),ust.forEach(t),a0o=r(aLe," \u2014 "),CD=n(aLe,"A",{href:!0});var _st=s(CD);n0o=r(_st,"RoFormerForMaskedLM"),_st.forEach(t),s0o=r(aLe," (RoFormer model)"),aLe.forEach(t),l0o=i(H),l1=n(H,"LI",{});var nLe=s(l1);yce=n(nLe,"STRONG",{});var bst=s(yce);i0o=r(bst,"squeezebert"),bst.forEach(t),d0o=r(nLe," \u2014 "),wD=n(nLe,"A",{href:!0});var vst=s(wD);c0o=r(vst,"SqueezeBertForMaskedLM"),vst.forEach(t),f0o=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),m0o=i(H),i1=n(H,"LI",{});var sLe=s(i1);Lce=n(sLe,"STRONG",{});var Fst=s(Lce);g0o=r(Fst,"tapas"),Fst.forEach(t),h0o=r(sLe," \u2014 "),AD=n(sLe,"A",{href:!0});var Tst=s(AD);p0o=r(Tst,"TapasForMaskedLM"),Tst.forEach(t),u0o=r(sLe," (TAPAS model)"),sLe.forEach(t),_0o=i(H),d1=n(H,"LI",{});var lLe=s(d1);xce=n(lLe,"STRONG",{});var Mst=s(xce);b0o=r(Mst,"wav2vec2"),Mst.forEach(t),v0o=r(lLe," \u2014 "),$ce=n(lLe,"CODE",{});var Est=s($ce);F0o=r(Est,"Wav2Vec2ForMaskedLM"),Est.forEach(t),T0o=r(lLe," (Wav2Vec2 model)"),lLe.forEach(t),M0o=i(H),c1=n(H,"LI",{});var iLe=s(c1);kce=n(iLe,"STRONG",{});var Cst=s(kce);E0o=r(Cst,"xlm"),Cst.forEach(t),C0o=r(iLe," \u2014 "),yD=n(iLe,"A",{href:!0});var wst=s(yD);w0o=r(wst,"XLMWithLMHeadModel"),wst.forEach(t),A0o=r(iLe," (XLM model)"),iLe.forEach(t),y0o=i(H),f1=n(H,"LI",{});var dLe=s(f1);Sce=n(dLe,"STRONG",{});var Ast=s(Sce);L0o=r(Ast,"xlm-roberta"),Ast.forEach(t),x0o=r(dLe," \u2014 "),LD=n(dLe,"A",{href:!0});var yst=s(LD);$0o=r(yst,"XLMRobertaForMaskedLM"),yst.forEach(t),k0o=r(dLe," (XLM-RoBERTa model)"),dLe.forEach(t),S0o=i(H),m1=n(H,"LI",{});var cLe=s(m1);Rce=n(cLe,"STRONG",{});var Lst=s(Rce);R0o=r(Lst,"xlm-roberta-xl"),Lst.forEach(t),P0o=r(cLe," \u2014 "),xD=n(cLe,"A",{href:!0});var xst=s(xD);B0o=r(xst,"XLMRobertaXLForMaskedLM"),xst.forEach(t),I0o=r(cLe," (XLM-RoBERTa-XL model)"),cLe.forEach(t),q0o=i(H),g1=n(H,"LI",{});var fLe=s(g1);Pce=n(fLe,"STRONG",{});var $st=s(Pce);N0o=r($st,"yoso"),$st.forEach(t),j0o=r(fLe," \u2014 "),$D=n(fLe,"A",{href:!0});var kst=s($D);D0o=r(kst,"YosoForMaskedLM"),kst.forEach(t),G0o=r(fLe," (YOSO model)"),fLe.forEach(t),H.forEach(t),O0o=i(la),h1=n(la,"P",{});var mLe=s(h1);V0o=r(mLe,"The model is set in evaluation mode by default using "),Bce=n(mLe,"CODE",{});var Sst=s(Bce);X0o=r(Sst,"model.eval()"),Sst.forEach(t),z0o=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(mLe,"CODE",{});var Rst=s(Ice);W0o=r(Rst,"model.train()"),Rst.forEach(t),mLe.forEach(t),Q0o=i(la),T(p1.$$.fragment,la),la.forEach(t),Us.forEach(t),Xqe=i(f),Vi=n(f,"H2",{class:!0});var Jje=s(Vi);u1=n(Jje,"A",{id:!0,class:!0,href:!0});var Pst=s(u1);qce=n(Pst,"SPAN",{});var Bst=s(qce);T(b0.$$.fragment,Bst),Bst.forEach(t),Pst.forEach(t),H0o=i(Jje),Nce=n(Jje,"SPAN",{});var Ist=s(Nce);U0o=r(Ist,"AutoModelForSeq2SeqLM"),Ist.forEach(t),Jje.forEach(t),zqe=i(f),Ro=n(f,"DIV",{class:!0});var Js=s(Ro);T(v0.$$.fragment,Js),J0o=i(Js),Xi=n(Js,"P",{});var gZ=s(Xi);Y0o=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kD=n(gZ,"A",{href:!0});var qst=s(kD);K0o=r(qst,"from_pretrained()"),qst.forEach(t),Z0o=r(gZ," class method or the "),SD=n(gZ,"A",{href:!0});var Nst=s(SD);eyo=r(Nst,"from_config()"),Nst.forEach(t),oyo=r(gZ,` class
method.`),gZ.forEach(t),ryo=i(Js),F0=n(Js,"P",{});var Yje=s(F0);tyo=r(Yje,"This class cannot be instantiated directly using "),jce=n(Yje,"CODE",{});var jst=s(jce);ayo=r(jst,"__init__()"),jst.forEach(t),nyo=r(Yje," (throws an error)."),Yje.forEach(t),syo=i(Js),dt=n(Js,"DIV",{class:!0});var I3=s(dt);T(T0.$$.fragment,I3),lyo=i(I3),Dce=n(I3,"P",{});var Dst=s(Dce);iyo=r(Dst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dst.forEach(t),dyo=i(I3),zi=n(I3,"P",{});var hZ=s(zi);cyo=r(hZ,`Note:
Loading a model from its configuration file does `),Gce=n(hZ,"STRONG",{});var Gst=s(Gce);fyo=r(Gst,"not"),Gst.forEach(t),myo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=n(hZ,"A",{href:!0});var Ost=s(RD);gyo=r(Ost,"from_pretrained()"),Ost.forEach(t),hyo=r(hZ," to load the model weights."),hZ.forEach(t),pyo=i(I3),T(_1.$$.fragment,I3),I3.forEach(t),uyo=i(Js),eo=n(Js,"DIV",{class:!0});var ia=s(eo);T(M0.$$.fragment,ia),_yo=i(ia),Oce=n(ia,"P",{});var Vst=s(Oce);byo=r(Vst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vst.forEach(t),vyo=i(ia),Ia=n(ia,"P",{});var q3=s(Ia);Fyo=r(q3,"The model class to instantiate is selected based on the "),Vce=n(q3,"CODE",{});var Xst=s(Vce);Tyo=r(Xst,"model_type"),Xst.forEach(t),Myo=r(q3,` property of the config object (either
passed as an argument or loaded from `),Xce=n(q3,"CODE",{});var zst=s(Xce);Eyo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),Cyo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(q3,"CODE",{});var Wst=s(zce);wyo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),Ayo=r(q3,":"),q3.forEach(t),yyo=i(ia),ue=n(ia,"UL",{});var ve=s(ue);b1=n(ve,"LI",{});var gLe=s(b1);Wce=n(gLe,"STRONG",{});var Qst=s(Wce);Lyo=r(Qst,"bart"),Qst.forEach(t),xyo=r(gLe," \u2014 "),PD=n(gLe,"A",{href:!0});var Hst=s(PD);$yo=r(Hst,"BartForConditionalGeneration"),Hst.forEach(t),kyo=r(gLe," (BART model)"),gLe.forEach(t),Syo=i(ve),v1=n(ve,"LI",{});var hLe=s(v1);Qce=n(hLe,"STRONG",{});var Ust=s(Qce);Ryo=r(Ust,"bigbird_pegasus"),Ust.forEach(t),Pyo=r(hLe," \u2014 "),BD=n(hLe,"A",{href:!0});var Jst=s(BD);Byo=r(Jst,"BigBirdPegasusForConditionalGeneration"),Jst.forEach(t),Iyo=r(hLe," (BigBirdPegasus model)"),hLe.forEach(t),qyo=i(ve),F1=n(ve,"LI",{});var pLe=s(F1);Hce=n(pLe,"STRONG",{});var Yst=s(Hce);Nyo=r(Yst,"blenderbot"),Yst.forEach(t),jyo=r(pLe," \u2014 "),ID=n(pLe,"A",{href:!0});var Kst=s(ID);Dyo=r(Kst,"BlenderbotForConditionalGeneration"),Kst.forEach(t),Gyo=r(pLe," (Blenderbot model)"),pLe.forEach(t),Oyo=i(ve),T1=n(ve,"LI",{});var uLe=s(T1);Uce=n(uLe,"STRONG",{});var Zst=s(Uce);Vyo=r(Zst,"blenderbot-small"),Zst.forEach(t),Xyo=r(uLe," \u2014 "),qD=n(uLe,"A",{href:!0});var elt=s(qD);zyo=r(elt,"BlenderbotSmallForConditionalGeneration"),elt.forEach(t),Wyo=r(uLe," (BlenderbotSmall model)"),uLe.forEach(t),Qyo=i(ve),M1=n(ve,"LI",{});var _Le=s(M1);Jce=n(_Le,"STRONG",{});var olt=s(Jce);Hyo=r(olt,"encoder-decoder"),olt.forEach(t),Uyo=r(_Le," \u2014 "),ND=n(_Le,"A",{href:!0});var rlt=s(ND);Jyo=r(rlt,"EncoderDecoderModel"),rlt.forEach(t),Yyo=r(_Le," (Encoder decoder model)"),_Le.forEach(t),Kyo=i(ve),E1=n(ve,"LI",{});var bLe=s(E1);Yce=n(bLe,"STRONG",{});var tlt=s(Yce);Zyo=r(tlt,"fsmt"),tlt.forEach(t),eLo=r(bLe," \u2014 "),jD=n(bLe,"A",{href:!0});var alt=s(jD);oLo=r(alt,"FSMTForConditionalGeneration"),alt.forEach(t),rLo=r(bLe," (FairSeq Machine-Translation model)"),bLe.forEach(t),tLo=i(ve),C1=n(ve,"LI",{});var vLe=s(C1);Kce=n(vLe,"STRONG",{});var nlt=s(Kce);aLo=r(nlt,"led"),nlt.forEach(t),nLo=r(vLe," \u2014 "),DD=n(vLe,"A",{href:!0});var slt=s(DD);sLo=r(slt,"LEDForConditionalGeneration"),slt.forEach(t),lLo=r(vLe," (LED model)"),vLe.forEach(t),iLo=i(ve),w1=n(ve,"LI",{});var FLe=s(w1);Zce=n(FLe,"STRONG",{});var llt=s(Zce);dLo=r(llt,"m2m_100"),llt.forEach(t),cLo=r(FLe," \u2014 "),GD=n(FLe,"A",{href:!0});var ilt=s(GD);fLo=r(ilt,"M2M100ForConditionalGeneration"),ilt.forEach(t),mLo=r(FLe," (M2M100 model)"),FLe.forEach(t),gLo=i(ve),A1=n(ve,"LI",{});var TLe=s(A1);efe=n(TLe,"STRONG",{});var dlt=s(efe);hLo=r(dlt,"marian"),dlt.forEach(t),pLo=r(TLe," \u2014 "),OD=n(TLe,"A",{href:!0});var clt=s(OD);uLo=r(clt,"MarianMTModel"),clt.forEach(t),_Lo=r(TLe," (Marian model)"),TLe.forEach(t),bLo=i(ve),y1=n(ve,"LI",{});var MLe=s(y1);ofe=n(MLe,"STRONG",{});var flt=s(ofe);vLo=r(flt,"mbart"),flt.forEach(t),FLo=r(MLe," \u2014 "),VD=n(MLe,"A",{href:!0});var mlt=s(VD);TLo=r(mlt,"MBartForConditionalGeneration"),mlt.forEach(t),MLo=r(MLe," (mBART model)"),MLe.forEach(t),ELo=i(ve),L1=n(ve,"LI",{});var ELe=s(L1);rfe=n(ELe,"STRONG",{});var glt=s(rfe);CLo=r(glt,"mt5"),glt.forEach(t),wLo=r(ELe," \u2014 "),XD=n(ELe,"A",{href:!0});var hlt=s(XD);ALo=r(hlt,"MT5ForConditionalGeneration"),hlt.forEach(t),yLo=r(ELe," (mT5 model)"),ELe.forEach(t),LLo=i(ve),x1=n(ve,"LI",{});var CLe=s(x1);tfe=n(CLe,"STRONG",{});var plt=s(tfe);xLo=r(plt,"pegasus"),plt.forEach(t),$Lo=r(CLe," \u2014 "),zD=n(CLe,"A",{href:!0});var ult=s(zD);kLo=r(ult,"PegasusForConditionalGeneration"),ult.forEach(t),SLo=r(CLe," (Pegasus model)"),CLe.forEach(t),RLo=i(ve),$1=n(ve,"LI",{});var wLe=s($1);afe=n(wLe,"STRONG",{});var _lt=s(afe);PLo=r(_lt,"plbart"),_lt.forEach(t),BLo=r(wLe," \u2014 "),WD=n(wLe,"A",{href:!0});var blt=s(WD);ILo=r(blt,"PLBartForConditionalGeneration"),blt.forEach(t),qLo=r(wLe," (PLBart model)"),wLe.forEach(t),NLo=i(ve),k1=n(ve,"LI",{});var ALe=s(k1);nfe=n(ALe,"STRONG",{});var vlt=s(nfe);jLo=r(vlt,"prophetnet"),vlt.forEach(t),DLo=r(ALe," \u2014 "),QD=n(ALe,"A",{href:!0});var Flt=s(QD);GLo=r(Flt,"ProphetNetForConditionalGeneration"),Flt.forEach(t),OLo=r(ALe," (ProphetNet model)"),ALe.forEach(t),VLo=i(ve),S1=n(ve,"LI",{});var yLe=s(S1);sfe=n(yLe,"STRONG",{});var Tlt=s(sfe);XLo=r(Tlt,"t5"),Tlt.forEach(t),zLo=r(yLe," \u2014 "),HD=n(yLe,"A",{href:!0});var Mlt=s(HD);WLo=r(Mlt,"T5ForConditionalGeneration"),Mlt.forEach(t),QLo=r(yLe," (T5 model)"),yLe.forEach(t),HLo=i(ve),R1=n(ve,"LI",{});var LLe=s(R1);lfe=n(LLe,"STRONG",{});var Elt=s(lfe);ULo=r(Elt,"xlm-prophetnet"),Elt.forEach(t),JLo=r(LLe," \u2014 "),UD=n(LLe,"A",{href:!0});var Clt=s(UD);YLo=r(Clt,"XLMProphetNetForConditionalGeneration"),Clt.forEach(t),KLo=r(LLe," (XLMProphetNet model)"),LLe.forEach(t),ve.forEach(t),ZLo=i(ia),P1=n(ia,"P",{});var xLe=s(P1);exo=r(xLe,"The model is set in evaluation mode by default using "),ife=n(xLe,"CODE",{});var wlt=s(ife);oxo=r(wlt,"model.eval()"),wlt.forEach(t),rxo=r(xLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(xLe,"CODE",{});var Alt=s(dfe);txo=r(Alt,"model.train()"),Alt.forEach(t),xLe.forEach(t),axo=i(ia),T(B1.$$.fragment,ia),ia.forEach(t),Js.forEach(t),Wqe=i(f),Wi=n(f,"H2",{class:!0});var Kje=s(Wi);I1=n(Kje,"A",{id:!0,class:!0,href:!0});var ylt=s(I1);cfe=n(ylt,"SPAN",{});var Llt=s(cfe);T(E0.$$.fragment,Llt),Llt.forEach(t),ylt.forEach(t),nxo=i(Kje),ffe=n(Kje,"SPAN",{});var xlt=s(ffe);sxo=r(xlt,"AutoModelForSequenceClassification"),xlt.forEach(t),Kje.forEach(t),Qqe=i(f),Po=n(f,"DIV",{class:!0});var Ys=s(Po);T(C0.$$.fragment,Ys),lxo=i(Ys),Qi=n(Ys,"P",{});var pZ=s(Qi);ixo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=n(pZ,"A",{href:!0});var $lt=s(JD);dxo=r($lt,"from_pretrained()"),$lt.forEach(t),cxo=r(pZ," class method or the "),YD=n(pZ,"A",{href:!0});var klt=s(YD);fxo=r(klt,"from_config()"),klt.forEach(t),mxo=r(pZ,` class
method.`),pZ.forEach(t),gxo=i(Ys),w0=n(Ys,"P",{});var Zje=s(w0);hxo=r(Zje,"This class cannot be instantiated directly using "),mfe=n(Zje,"CODE",{});var Slt=s(mfe);pxo=r(Slt,"__init__()"),Slt.forEach(t),uxo=r(Zje," (throws an error)."),Zje.forEach(t),_xo=i(Ys),ct=n(Ys,"DIV",{class:!0});var N3=s(ct);T(A0.$$.fragment,N3),bxo=i(N3),gfe=n(N3,"P",{});var Rlt=s(gfe);vxo=r(Rlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rlt.forEach(t),Fxo=i(N3),Hi=n(N3,"P",{});var uZ=s(Hi);Txo=r(uZ,`Note:
Loading a model from its configuration file does `),hfe=n(uZ,"STRONG",{});var Plt=s(hfe);Mxo=r(Plt,"not"),Plt.forEach(t),Exo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(uZ,"A",{href:!0});var Blt=s(KD);Cxo=r(Blt,"from_pretrained()"),Blt.forEach(t),wxo=r(uZ," to load the model weights."),uZ.forEach(t),Axo=i(N3),T(q1.$$.fragment,N3),N3.forEach(t),yxo=i(Ys),oo=n(Ys,"DIV",{class:!0});var da=s(oo);T(y0.$$.fragment,da),Lxo=i(da),pfe=n(da,"P",{});var Ilt=s(pfe);xxo=r(Ilt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ilt.forEach(t),$xo=i(da),qa=n(da,"P",{});var j3=s(qa);kxo=r(j3,"The model class to instantiate is selected based on the "),ufe=n(j3,"CODE",{});var qlt=s(ufe);Sxo=r(qlt,"model_type"),qlt.forEach(t),Rxo=r(j3,` property of the config object (either
passed as an argument or loaded from `),_fe=n(j3,"CODE",{});var Nlt=s(_fe);Pxo=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),Bxo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(j3,"CODE",{});var jlt=s(bfe);Ixo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),qxo=r(j3,":"),j3.forEach(t),Nxo=i(da),q=n(da,"UL",{});var j=s(q);N1=n(j,"LI",{});var $Le=s(N1);vfe=n($Le,"STRONG",{});var Dlt=s(vfe);jxo=r(Dlt,"albert"),Dlt.forEach(t),Dxo=r($Le," \u2014 "),ZD=n($Le,"A",{href:!0});var Glt=s(ZD);Gxo=r(Glt,"AlbertForSequenceClassification"),Glt.forEach(t),Oxo=r($Le," (ALBERT model)"),$Le.forEach(t),Vxo=i(j),j1=n(j,"LI",{});var kLe=s(j1);Ffe=n(kLe,"STRONG",{});var Olt=s(Ffe);Xxo=r(Olt,"bart"),Olt.forEach(t),zxo=r(kLe," \u2014 "),eG=n(kLe,"A",{href:!0});var Vlt=s(eG);Wxo=r(Vlt,"BartForSequenceClassification"),Vlt.forEach(t),Qxo=r(kLe," (BART model)"),kLe.forEach(t),Hxo=i(j),D1=n(j,"LI",{});var SLe=s(D1);Tfe=n(SLe,"STRONG",{});var Xlt=s(Tfe);Uxo=r(Xlt,"bert"),Xlt.forEach(t),Jxo=r(SLe," \u2014 "),oG=n(SLe,"A",{href:!0});var zlt=s(oG);Yxo=r(zlt,"BertForSequenceClassification"),zlt.forEach(t),Kxo=r(SLe," (BERT model)"),SLe.forEach(t),Zxo=i(j),G1=n(j,"LI",{});var RLe=s(G1);Mfe=n(RLe,"STRONG",{});var Wlt=s(Mfe);e9o=r(Wlt,"big_bird"),Wlt.forEach(t),o9o=r(RLe," \u2014 "),rG=n(RLe,"A",{href:!0});var Qlt=s(rG);r9o=r(Qlt,"BigBirdForSequenceClassification"),Qlt.forEach(t),t9o=r(RLe," (BigBird model)"),RLe.forEach(t),a9o=i(j),O1=n(j,"LI",{});var PLe=s(O1);Efe=n(PLe,"STRONG",{});var Hlt=s(Efe);n9o=r(Hlt,"bigbird_pegasus"),Hlt.forEach(t),s9o=r(PLe," \u2014 "),tG=n(PLe,"A",{href:!0});var Ult=s(tG);l9o=r(Ult,"BigBirdPegasusForSequenceClassification"),Ult.forEach(t),i9o=r(PLe," (BigBirdPegasus model)"),PLe.forEach(t),d9o=i(j),V1=n(j,"LI",{});var BLe=s(V1);Cfe=n(BLe,"STRONG",{});var Jlt=s(Cfe);c9o=r(Jlt,"camembert"),Jlt.forEach(t),f9o=r(BLe," \u2014 "),aG=n(BLe,"A",{href:!0});var Ylt=s(aG);m9o=r(Ylt,"CamembertForSequenceClassification"),Ylt.forEach(t),g9o=r(BLe," (CamemBERT model)"),BLe.forEach(t),h9o=i(j),X1=n(j,"LI",{});var ILe=s(X1);wfe=n(ILe,"STRONG",{});var Klt=s(wfe);p9o=r(Klt,"canine"),Klt.forEach(t),u9o=r(ILe," \u2014 "),nG=n(ILe,"A",{href:!0});var Zlt=s(nG);_9o=r(Zlt,"CanineForSequenceClassification"),Zlt.forEach(t),b9o=r(ILe," (Canine model)"),ILe.forEach(t),v9o=i(j),z1=n(j,"LI",{});var qLe=s(z1);Afe=n(qLe,"STRONG",{});var eit=s(Afe);F9o=r(eit,"convbert"),eit.forEach(t),T9o=r(qLe," \u2014 "),sG=n(qLe,"A",{href:!0});var oit=s(sG);M9o=r(oit,"ConvBertForSequenceClassification"),oit.forEach(t),E9o=r(qLe," (ConvBERT model)"),qLe.forEach(t),C9o=i(j),W1=n(j,"LI",{});var NLe=s(W1);yfe=n(NLe,"STRONG",{});var rit=s(yfe);w9o=r(rit,"ctrl"),rit.forEach(t),A9o=r(NLe," \u2014 "),lG=n(NLe,"A",{href:!0});var tit=s(lG);y9o=r(tit,"CTRLForSequenceClassification"),tit.forEach(t),L9o=r(NLe," (CTRL model)"),NLe.forEach(t),x9o=i(j),Q1=n(j,"LI",{});var jLe=s(Q1);Lfe=n(jLe,"STRONG",{});var ait=s(Lfe);$9o=r(ait,"data2vec-text"),ait.forEach(t),k9o=r(jLe," \u2014 "),iG=n(jLe,"A",{href:!0});var nit=s(iG);S9o=r(nit,"Data2VecTextForSequenceClassification"),nit.forEach(t),R9o=r(jLe," (Data2VecText model)"),jLe.forEach(t),P9o=i(j),H1=n(j,"LI",{});var DLe=s(H1);xfe=n(DLe,"STRONG",{});var sit=s(xfe);B9o=r(sit,"deberta"),sit.forEach(t),I9o=r(DLe," \u2014 "),dG=n(DLe,"A",{href:!0});var lit=s(dG);q9o=r(lit,"DebertaForSequenceClassification"),lit.forEach(t),N9o=r(DLe," (DeBERTa model)"),DLe.forEach(t),j9o=i(j),U1=n(j,"LI",{});var GLe=s(U1);$fe=n(GLe,"STRONG",{});var iit=s($fe);D9o=r(iit,"deberta-v2"),iit.forEach(t),G9o=r(GLe," \u2014 "),cG=n(GLe,"A",{href:!0});var dit=s(cG);O9o=r(dit,"DebertaV2ForSequenceClassification"),dit.forEach(t),V9o=r(GLe," (DeBERTa-v2 model)"),GLe.forEach(t),X9o=i(j),J1=n(j,"LI",{});var OLe=s(J1);kfe=n(OLe,"STRONG",{});var cit=s(kfe);z9o=r(cit,"distilbert"),cit.forEach(t),W9o=r(OLe," \u2014 "),fG=n(OLe,"A",{href:!0});var fit=s(fG);Q9o=r(fit,"DistilBertForSequenceClassification"),fit.forEach(t),H9o=r(OLe," (DistilBERT model)"),OLe.forEach(t),U9o=i(j),Y1=n(j,"LI",{});var VLe=s(Y1);Sfe=n(VLe,"STRONG",{});var mit=s(Sfe);J9o=r(mit,"electra"),mit.forEach(t),Y9o=r(VLe," \u2014 "),mG=n(VLe,"A",{href:!0});var git=s(mG);K9o=r(git,"ElectraForSequenceClassification"),git.forEach(t),Z9o=r(VLe," (ELECTRA model)"),VLe.forEach(t),e$o=i(j),K1=n(j,"LI",{});var XLe=s(K1);Rfe=n(XLe,"STRONG",{});var hit=s(Rfe);o$o=r(hit,"flaubert"),hit.forEach(t),r$o=r(XLe," \u2014 "),gG=n(XLe,"A",{href:!0});var pit=s(gG);t$o=r(pit,"FlaubertForSequenceClassification"),pit.forEach(t),a$o=r(XLe," (FlauBERT model)"),XLe.forEach(t),n$o=i(j),Z1=n(j,"LI",{});var zLe=s(Z1);Pfe=n(zLe,"STRONG",{});var uit=s(Pfe);s$o=r(uit,"fnet"),uit.forEach(t),l$o=r(zLe," \u2014 "),hG=n(zLe,"A",{href:!0});var _it=s(hG);i$o=r(_it,"FNetForSequenceClassification"),_it.forEach(t),d$o=r(zLe," (FNet model)"),zLe.forEach(t),c$o=i(j),eb=n(j,"LI",{});var WLe=s(eb);Bfe=n(WLe,"STRONG",{});var bit=s(Bfe);f$o=r(bit,"funnel"),bit.forEach(t),m$o=r(WLe," \u2014 "),pG=n(WLe,"A",{href:!0});var vit=s(pG);g$o=r(vit,"FunnelForSequenceClassification"),vit.forEach(t),h$o=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),p$o=i(j),ob=n(j,"LI",{});var QLe=s(ob);Ife=n(QLe,"STRONG",{});var Fit=s(Ife);u$o=r(Fit,"gpt2"),Fit.forEach(t),_$o=r(QLe," \u2014 "),uG=n(QLe,"A",{href:!0});var Tit=s(uG);b$o=r(Tit,"GPT2ForSequenceClassification"),Tit.forEach(t),v$o=r(QLe," (OpenAI GPT-2 model)"),QLe.forEach(t),F$o=i(j),rb=n(j,"LI",{});var HLe=s(rb);qfe=n(HLe,"STRONG",{});var Mit=s(qfe);T$o=r(Mit,"gpt_neo"),Mit.forEach(t),M$o=r(HLe," \u2014 "),_G=n(HLe,"A",{href:!0});var Eit=s(_G);E$o=r(Eit,"GPTNeoForSequenceClassification"),Eit.forEach(t),C$o=r(HLe," (GPT Neo model)"),HLe.forEach(t),w$o=i(j),tb=n(j,"LI",{});var ULe=s(tb);Nfe=n(ULe,"STRONG",{});var Cit=s(Nfe);A$o=r(Cit,"gptj"),Cit.forEach(t),y$o=r(ULe," \u2014 "),bG=n(ULe,"A",{href:!0});var wit=s(bG);L$o=r(wit,"GPTJForSequenceClassification"),wit.forEach(t),x$o=r(ULe," (GPT-J model)"),ULe.forEach(t),$$o=i(j),ab=n(j,"LI",{});var JLe=s(ab);jfe=n(JLe,"STRONG",{});var Ait=s(jfe);k$o=r(Ait,"ibert"),Ait.forEach(t),S$o=r(JLe," \u2014 "),vG=n(JLe,"A",{href:!0});var yit=s(vG);R$o=r(yit,"IBertForSequenceClassification"),yit.forEach(t),P$o=r(JLe," (I-BERT model)"),JLe.forEach(t),B$o=i(j),nb=n(j,"LI",{});var YLe=s(nb);Dfe=n(YLe,"STRONG",{});var Lit=s(Dfe);I$o=r(Lit,"layoutlm"),Lit.forEach(t),q$o=r(YLe," \u2014 "),FG=n(YLe,"A",{href:!0});var xit=s(FG);N$o=r(xit,"LayoutLMForSequenceClassification"),xit.forEach(t),j$o=r(YLe," (LayoutLM model)"),YLe.forEach(t),D$o=i(j),sb=n(j,"LI",{});var KLe=s(sb);Gfe=n(KLe,"STRONG",{});var $it=s(Gfe);G$o=r($it,"layoutlmv2"),$it.forEach(t),O$o=r(KLe," \u2014 "),TG=n(KLe,"A",{href:!0});var kit=s(TG);V$o=r(kit,"LayoutLMv2ForSequenceClassification"),kit.forEach(t),X$o=r(KLe," (LayoutLMv2 model)"),KLe.forEach(t),z$o=i(j),lb=n(j,"LI",{});var ZLe=s(lb);Ofe=n(ZLe,"STRONG",{});var Sit=s(Ofe);W$o=r(Sit,"led"),Sit.forEach(t),Q$o=r(ZLe," \u2014 "),MG=n(ZLe,"A",{href:!0});var Rit=s(MG);H$o=r(Rit,"LEDForSequenceClassification"),Rit.forEach(t),U$o=r(ZLe," (LED model)"),ZLe.forEach(t),J$o=i(j),ib=n(j,"LI",{});var exe=s(ib);Vfe=n(exe,"STRONG",{});var Pit=s(Vfe);Y$o=r(Pit,"longformer"),Pit.forEach(t),K$o=r(exe," \u2014 "),EG=n(exe,"A",{href:!0});var Bit=s(EG);Z$o=r(Bit,"LongformerForSequenceClassification"),Bit.forEach(t),eko=r(exe," (Longformer model)"),exe.forEach(t),oko=i(j),db=n(j,"LI",{});var oxe=s(db);Xfe=n(oxe,"STRONG",{});var Iit=s(Xfe);rko=r(Iit,"mbart"),Iit.forEach(t),tko=r(oxe," \u2014 "),CG=n(oxe,"A",{href:!0});var qit=s(CG);ako=r(qit,"MBartForSequenceClassification"),qit.forEach(t),nko=r(oxe," (mBART model)"),oxe.forEach(t),sko=i(j),cb=n(j,"LI",{});var rxe=s(cb);zfe=n(rxe,"STRONG",{});var Nit=s(zfe);lko=r(Nit,"megatron-bert"),Nit.forEach(t),iko=r(rxe," \u2014 "),wG=n(rxe,"A",{href:!0});var jit=s(wG);dko=r(jit,"MegatronBertForSequenceClassification"),jit.forEach(t),cko=r(rxe," (MegatronBert model)"),rxe.forEach(t),fko=i(j),fb=n(j,"LI",{});var txe=s(fb);Wfe=n(txe,"STRONG",{});var Dit=s(Wfe);mko=r(Dit,"mobilebert"),Dit.forEach(t),gko=r(txe," \u2014 "),AG=n(txe,"A",{href:!0});var Git=s(AG);hko=r(Git,"MobileBertForSequenceClassification"),Git.forEach(t),pko=r(txe," (MobileBERT model)"),txe.forEach(t),uko=i(j),mb=n(j,"LI",{});var axe=s(mb);Qfe=n(axe,"STRONG",{});var Oit=s(Qfe);_ko=r(Oit,"mpnet"),Oit.forEach(t),bko=r(axe," \u2014 "),yG=n(axe,"A",{href:!0});var Vit=s(yG);vko=r(Vit,"MPNetForSequenceClassification"),Vit.forEach(t),Fko=r(axe," (MPNet model)"),axe.forEach(t),Tko=i(j),gb=n(j,"LI",{});var nxe=s(gb);Hfe=n(nxe,"STRONG",{});var Xit=s(Hfe);Mko=r(Xit,"nystromformer"),Xit.forEach(t),Eko=r(nxe," \u2014 "),LG=n(nxe,"A",{href:!0});var zit=s(LG);Cko=r(zit,"NystromformerForSequenceClassification"),zit.forEach(t),wko=r(nxe," (Nystromformer model)"),nxe.forEach(t),Ako=i(j),hb=n(j,"LI",{});var sxe=s(hb);Ufe=n(sxe,"STRONG",{});var Wit=s(Ufe);yko=r(Wit,"openai-gpt"),Wit.forEach(t),Lko=r(sxe," \u2014 "),xG=n(sxe,"A",{href:!0});var Qit=s(xG);xko=r(Qit,"OpenAIGPTForSequenceClassification"),Qit.forEach(t),$ko=r(sxe," (OpenAI GPT model)"),sxe.forEach(t),kko=i(j),pb=n(j,"LI",{});var lxe=s(pb);Jfe=n(lxe,"STRONG",{});var Hit=s(Jfe);Sko=r(Hit,"perceiver"),Hit.forEach(t),Rko=r(lxe," \u2014 "),$G=n(lxe,"A",{href:!0});var Uit=s($G);Pko=r(Uit,"PerceiverForSequenceClassification"),Uit.forEach(t),Bko=r(lxe," (Perceiver model)"),lxe.forEach(t),Iko=i(j),ub=n(j,"LI",{});var ixe=s(ub);Yfe=n(ixe,"STRONG",{});var Jit=s(Yfe);qko=r(Jit,"plbart"),Jit.forEach(t),Nko=r(ixe," \u2014 "),kG=n(ixe,"A",{href:!0});var Yit=s(kG);jko=r(Yit,"PLBartForSequenceClassification"),Yit.forEach(t),Dko=r(ixe," (PLBart model)"),ixe.forEach(t),Gko=i(j),_b=n(j,"LI",{});var dxe=s(_b);Kfe=n(dxe,"STRONG",{});var Kit=s(Kfe);Oko=r(Kit,"qdqbert"),Kit.forEach(t),Vko=r(dxe," \u2014 "),SG=n(dxe,"A",{href:!0});var Zit=s(SG);Xko=r(Zit,"QDQBertForSequenceClassification"),Zit.forEach(t),zko=r(dxe," (QDQBert model)"),dxe.forEach(t),Wko=i(j),bb=n(j,"LI",{});var cxe=s(bb);Zfe=n(cxe,"STRONG",{});var edt=s(Zfe);Qko=r(edt,"reformer"),edt.forEach(t),Hko=r(cxe," \u2014 "),RG=n(cxe,"A",{href:!0});var odt=s(RG);Uko=r(odt,"ReformerForSequenceClassification"),odt.forEach(t),Jko=r(cxe," (Reformer model)"),cxe.forEach(t),Yko=i(j),vb=n(j,"LI",{});var fxe=s(vb);eme=n(fxe,"STRONG",{});var rdt=s(eme);Kko=r(rdt,"rembert"),rdt.forEach(t),Zko=r(fxe," \u2014 "),PG=n(fxe,"A",{href:!0});var tdt=s(PG);eSo=r(tdt,"RemBertForSequenceClassification"),tdt.forEach(t),oSo=r(fxe," (RemBERT model)"),fxe.forEach(t),rSo=i(j),Fb=n(j,"LI",{});var mxe=s(Fb);ome=n(mxe,"STRONG",{});var adt=s(ome);tSo=r(adt,"roberta"),adt.forEach(t),aSo=r(mxe," \u2014 "),BG=n(mxe,"A",{href:!0});var ndt=s(BG);nSo=r(ndt,"RobertaForSequenceClassification"),ndt.forEach(t),sSo=r(mxe," (RoBERTa model)"),mxe.forEach(t),lSo=i(j),Tb=n(j,"LI",{});var gxe=s(Tb);rme=n(gxe,"STRONG",{});var sdt=s(rme);iSo=r(sdt,"roformer"),sdt.forEach(t),dSo=r(gxe," \u2014 "),IG=n(gxe,"A",{href:!0});var ldt=s(IG);cSo=r(ldt,"RoFormerForSequenceClassification"),ldt.forEach(t),fSo=r(gxe," (RoFormer model)"),gxe.forEach(t),mSo=i(j),Mb=n(j,"LI",{});var hxe=s(Mb);tme=n(hxe,"STRONG",{});var idt=s(tme);gSo=r(idt,"squeezebert"),idt.forEach(t),hSo=r(hxe," \u2014 "),qG=n(hxe,"A",{href:!0});var ddt=s(qG);pSo=r(ddt,"SqueezeBertForSequenceClassification"),ddt.forEach(t),uSo=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),_So=i(j),Eb=n(j,"LI",{});var pxe=s(Eb);ame=n(pxe,"STRONG",{});var cdt=s(ame);bSo=r(cdt,"tapas"),cdt.forEach(t),vSo=r(pxe," \u2014 "),NG=n(pxe,"A",{href:!0});var fdt=s(NG);FSo=r(fdt,"TapasForSequenceClassification"),fdt.forEach(t),TSo=r(pxe," (TAPAS model)"),pxe.forEach(t),MSo=i(j),Cb=n(j,"LI",{});var uxe=s(Cb);nme=n(uxe,"STRONG",{});var mdt=s(nme);ESo=r(mdt,"transfo-xl"),mdt.forEach(t),CSo=r(uxe," \u2014 "),jG=n(uxe,"A",{href:!0});var gdt=s(jG);wSo=r(gdt,"TransfoXLForSequenceClassification"),gdt.forEach(t),ASo=r(uxe," (Transformer-XL model)"),uxe.forEach(t),ySo=i(j),wb=n(j,"LI",{});var _xe=s(wb);sme=n(_xe,"STRONG",{});var hdt=s(sme);LSo=r(hdt,"xlm"),hdt.forEach(t),xSo=r(_xe," \u2014 "),DG=n(_xe,"A",{href:!0});var pdt=s(DG);$So=r(pdt,"XLMForSequenceClassification"),pdt.forEach(t),kSo=r(_xe," (XLM model)"),_xe.forEach(t),SSo=i(j),Ab=n(j,"LI",{});var bxe=s(Ab);lme=n(bxe,"STRONG",{});var udt=s(lme);RSo=r(udt,"xlm-roberta"),udt.forEach(t),PSo=r(bxe," \u2014 "),GG=n(bxe,"A",{href:!0});var _dt=s(GG);BSo=r(_dt,"XLMRobertaForSequenceClassification"),_dt.forEach(t),ISo=r(bxe," (XLM-RoBERTa model)"),bxe.forEach(t),qSo=i(j),yb=n(j,"LI",{});var vxe=s(yb);ime=n(vxe,"STRONG",{});var bdt=s(ime);NSo=r(bdt,"xlm-roberta-xl"),bdt.forEach(t),jSo=r(vxe," \u2014 "),OG=n(vxe,"A",{href:!0});var vdt=s(OG);DSo=r(vdt,"XLMRobertaXLForSequenceClassification"),vdt.forEach(t),GSo=r(vxe," (XLM-RoBERTa-XL model)"),vxe.forEach(t),OSo=i(j),Lb=n(j,"LI",{});var Fxe=s(Lb);dme=n(Fxe,"STRONG",{});var Fdt=s(dme);VSo=r(Fdt,"xlnet"),Fdt.forEach(t),XSo=r(Fxe," \u2014 "),VG=n(Fxe,"A",{href:!0});var Tdt=s(VG);zSo=r(Tdt,"XLNetForSequenceClassification"),Tdt.forEach(t),WSo=r(Fxe," (XLNet model)"),Fxe.forEach(t),QSo=i(j),xb=n(j,"LI",{});var Txe=s(xb);cme=n(Txe,"STRONG",{});var Mdt=s(cme);HSo=r(Mdt,"yoso"),Mdt.forEach(t),USo=r(Txe," \u2014 "),XG=n(Txe,"A",{href:!0});var Edt=s(XG);JSo=r(Edt,"YosoForSequenceClassification"),Edt.forEach(t),YSo=r(Txe," (YOSO model)"),Txe.forEach(t),j.forEach(t),KSo=i(da),$b=n(da,"P",{});var Mxe=s($b);ZSo=r(Mxe,"The model is set in evaluation mode by default using "),fme=n(Mxe,"CODE",{});var Cdt=s(fme);eRo=r(Cdt,"model.eval()"),Cdt.forEach(t),oRo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(Mxe,"CODE",{});var wdt=s(mme);rRo=r(wdt,"model.train()"),wdt.forEach(t),Mxe.forEach(t),tRo=i(da),T(kb.$$.fragment,da),da.forEach(t),Ys.forEach(t),Hqe=i(f),Ui=n(f,"H2",{class:!0});var eDe=s(Ui);Sb=n(eDe,"A",{id:!0,class:!0,href:!0});var Adt=s(Sb);gme=n(Adt,"SPAN",{});var ydt=s(gme);T(L0.$$.fragment,ydt),ydt.forEach(t),Adt.forEach(t),aRo=i(eDe),hme=n(eDe,"SPAN",{});var Ldt=s(hme);nRo=r(Ldt,"AutoModelForMultipleChoice"),Ldt.forEach(t),eDe.forEach(t),Uqe=i(f),Bo=n(f,"DIV",{class:!0});var Ks=s(Bo);T(x0.$$.fragment,Ks),sRo=i(Ks),Ji=n(Ks,"P",{});var _Z=s(Ji);lRo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zG=n(_Z,"A",{href:!0});var xdt=s(zG);iRo=r(xdt,"from_pretrained()"),xdt.forEach(t),dRo=r(_Z," class method or the "),WG=n(_Z,"A",{href:!0});var $dt=s(WG);cRo=r($dt,"from_config()"),$dt.forEach(t),fRo=r(_Z,` class
method.`),_Z.forEach(t),mRo=i(Ks),$0=n(Ks,"P",{});var oDe=s($0);gRo=r(oDe,"This class cannot be instantiated directly using "),pme=n(oDe,"CODE",{});var kdt=s(pme);hRo=r(kdt,"__init__()"),kdt.forEach(t),pRo=r(oDe," (throws an error)."),oDe.forEach(t),uRo=i(Ks),ft=n(Ks,"DIV",{class:!0});var D3=s(ft);T(k0.$$.fragment,D3),_Ro=i(D3),ume=n(D3,"P",{});var Sdt=s(ume);bRo=r(Sdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sdt.forEach(t),vRo=i(D3),Yi=n(D3,"P",{});var bZ=s(Yi);FRo=r(bZ,`Note:
Loading a model from its configuration file does `),_me=n(bZ,"STRONG",{});var Rdt=s(_me);TRo=r(Rdt,"not"),Rdt.forEach(t),MRo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(bZ,"A",{href:!0});var Pdt=s(QG);ERo=r(Pdt,"from_pretrained()"),Pdt.forEach(t),CRo=r(bZ," to load the model weights."),bZ.forEach(t),wRo=i(D3),T(Rb.$$.fragment,D3),D3.forEach(t),ARo=i(Ks),ro=n(Ks,"DIV",{class:!0});var ca=s(ro);T(S0.$$.fragment,ca),yRo=i(ca),bme=n(ca,"P",{});var Bdt=s(bme);LRo=r(Bdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bdt.forEach(t),xRo=i(ca),Na=n(ca,"P",{});var G3=s(Na);$Ro=r(G3,"The model class to instantiate is selected based on the "),vme=n(G3,"CODE",{});var Idt=s(vme);kRo=r(Idt,"model_type"),Idt.forEach(t),SRo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Fme=n(G3,"CODE",{});var qdt=s(Fme);RRo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),PRo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(G3,"CODE",{});var Ndt=s(Tme);BRo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),IRo=r(G3,":"),G3.forEach(t),qRo=i(ca),Y=n(ca,"UL",{});var K=s(Y);Pb=n(K,"LI",{});var Exe=s(Pb);Mme=n(Exe,"STRONG",{});var jdt=s(Mme);NRo=r(jdt,"albert"),jdt.forEach(t),jRo=r(Exe," \u2014 "),HG=n(Exe,"A",{href:!0});var Ddt=s(HG);DRo=r(Ddt,"AlbertForMultipleChoice"),Ddt.forEach(t),GRo=r(Exe," (ALBERT model)"),Exe.forEach(t),ORo=i(K),Bb=n(K,"LI",{});var Cxe=s(Bb);Eme=n(Cxe,"STRONG",{});var Gdt=s(Eme);VRo=r(Gdt,"bert"),Gdt.forEach(t),XRo=r(Cxe," \u2014 "),UG=n(Cxe,"A",{href:!0});var Odt=s(UG);zRo=r(Odt,"BertForMultipleChoice"),Odt.forEach(t),WRo=r(Cxe," (BERT model)"),Cxe.forEach(t),QRo=i(K),Ib=n(K,"LI",{});var wxe=s(Ib);Cme=n(wxe,"STRONG",{});var Vdt=s(Cme);HRo=r(Vdt,"big_bird"),Vdt.forEach(t),URo=r(wxe," \u2014 "),JG=n(wxe,"A",{href:!0});var Xdt=s(JG);JRo=r(Xdt,"BigBirdForMultipleChoice"),Xdt.forEach(t),YRo=r(wxe," (BigBird model)"),wxe.forEach(t),KRo=i(K),qb=n(K,"LI",{});var Axe=s(qb);wme=n(Axe,"STRONG",{});var zdt=s(wme);ZRo=r(zdt,"camembert"),zdt.forEach(t),ePo=r(Axe," \u2014 "),YG=n(Axe,"A",{href:!0});var Wdt=s(YG);oPo=r(Wdt,"CamembertForMultipleChoice"),Wdt.forEach(t),rPo=r(Axe," (CamemBERT model)"),Axe.forEach(t),tPo=i(K),Nb=n(K,"LI",{});var yxe=s(Nb);Ame=n(yxe,"STRONG",{});var Qdt=s(Ame);aPo=r(Qdt,"canine"),Qdt.forEach(t),nPo=r(yxe," \u2014 "),KG=n(yxe,"A",{href:!0});var Hdt=s(KG);sPo=r(Hdt,"CanineForMultipleChoice"),Hdt.forEach(t),lPo=r(yxe," (Canine model)"),yxe.forEach(t),iPo=i(K),jb=n(K,"LI",{});var Lxe=s(jb);yme=n(Lxe,"STRONG",{});var Udt=s(yme);dPo=r(Udt,"convbert"),Udt.forEach(t),cPo=r(Lxe," \u2014 "),ZG=n(Lxe,"A",{href:!0});var Jdt=s(ZG);fPo=r(Jdt,"ConvBertForMultipleChoice"),Jdt.forEach(t),mPo=r(Lxe," (ConvBERT model)"),Lxe.forEach(t),gPo=i(K),Db=n(K,"LI",{});var xxe=s(Db);Lme=n(xxe,"STRONG",{});var Ydt=s(Lme);hPo=r(Ydt,"data2vec-text"),Ydt.forEach(t),pPo=r(xxe," \u2014 "),eO=n(xxe,"A",{href:!0});var Kdt=s(eO);uPo=r(Kdt,"Data2VecTextForMultipleChoice"),Kdt.forEach(t),_Po=r(xxe," (Data2VecText model)"),xxe.forEach(t),bPo=i(K),Gb=n(K,"LI",{});var $xe=s(Gb);xme=n($xe,"STRONG",{});var Zdt=s(xme);vPo=r(Zdt,"deberta-v2"),Zdt.forEach(t),FPo=r($xe," \u2014 "),oO=n($xe,"A",{href:!0});var ect=s(oO);TPo=r(ect,"DebertaV2ForMultipleChoice"),ect.forEach(t),MPo=r($xe," (DeBERTa-v2 model)"),$xe.forEach(t),EPo=i(K),Ob=n(K,"LI",{});var kxe=s(Ob);$me=n(kxe,"STRONG",{});var oct=s($me);CPo=r(oct,"distilbert"),oct.forEach(t),wPo=r(kxe," \u2014 "),rO=n(kxe,"A",{href:!0});var rct=s(rO);APo=r(rct,"DistilBertForMultipleChoice"),rct.forEach(t),yPo=r(kxe," (DistilBERT model)"),kxe.forEach(t),LPo=i(K),Vb=n(K,"LI",{});var Sxe=s(Vb);kme=n(Sxe,"STRONG",{});var tct=s(kme);xPo=r(tct,"electra"),tct.forEach(t),$Po=r(Sxe," \u2014 "),tO=n(Sxe,"A",{href:!0});var act=s(tO);kPo=r(act,"ElectraForMultipleChoice"),act.forEach(t),SPo=r(Sxe," (ELECTRA model)"),Sxe.forEach(t),RPo=i(K),Xb=n(K,"LI",{});var Rxe=s(Xb);Sme=n(Rxe,"STRONG",{});var nct=s(Sme);PPo=r(nct,"flaubert"),nct.forEach(t),BPo=r(Rxe," \u2014 "),aO=n(Rxe,"A",{href:!0});var sct=s(aO);IPo=r(sct,"FlaubertForMultipleChoice"),sct.forEach(t),qPo=r(Rxe," (FlauBERT model)"),Rxe.forEach(t),NPo=i(K),zb=n(K,"LI",{});var Pxe=s(zb);Rme=n(Pxe,"STRONG",{});var lct=s(Rme);jPo=r(lct,"fnet"),lct.forEach(t),DPo=r(Pxe," \u2014 "),nO=n(Pxe,"A",{href:!0});var ict=s(nO);GPo=r(ict,"FNetForMultipleChoice"),ict.forEach(t),OPo=r(Pxe," (FNet model)"),Pxe.forEach(t),VPo=i(K),Wb=n(K,"LI",{});var Bxe=s(Wb);Pme=n(Bxe,"STRONG",{});var dct=s(Pme);XPo=r(dct,"funnel"),dct.forEach(t),zPo=r(Bxe," \u2014 "),sO=n(Bxe,"A",{href:!0});var cct=s(sO);WPo=r(cct,"FunnelForMultipleChoice"),cct.forEach(t),QPo=r(Bxe," (Funnel Transformer model)"),Bxe.forEach(t),HPo=i(K),Qb=n(K,"LI",{});var Ixe=s(Qb);Bme=n(Ixe,"STRONG",{});var fct=s(Bme);UPo=r(fct,"ibert"),fct.forEach(t),JPo=r(Ixe," \u2014 "),lO=n(Ixe,"A",{href:!0});var mct=s(lO);YPo=r(mct,"IBertForMultipleChoice"),mct.forEach(t),KPo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),ZPo=i(K),Hb=n(K,"LI",{});var qxe=s(Hb);Ime=n(qxe,"STRONG",{});var gct=s(Ime);eBo=r(gct,"longformer"),gct.forEach(t),oBo=r(qxe," \u2014 "),iO=n(qxe,"A",{href:!0});var hct=s(iO);rBo=r(hct,"LongformerForMultipleChoice"),hct.forEach(t),tBo=r(qxe," (Longformer model)"),qxe.forEach(t),aBo=i(K),Ub=n(K,"LI",{});var Nxe=s(Ub);qme=n(Nxe,"STRONG",{});var pct=s(qme);nBo=r(pct,"megatron-bert"),pct.forEach(t),sBo=r(Nxe," \u2014 "),dO=n(Nxe,"A",{href:!0});var uct=s(dO);lBo=r(uct,"MegatronBertForMultipleChoice"),uct.forEach(t),iBo=r(Nxe," (MegatronBert model)"),Nxe.forEach(t),dBo=i(K),Jb=n(K,"LI",{});var jxe=s(Jb);Nme=n(jxe,"STRONG",{});var _ct=s(Nme);cBo=r(_ct,"mobilebert"),_ct.forEach(t),fBo=r(jxe," \u2014 "),cO=n(jxe,"A",{href:!0});var bct=s(cO);mBo=r(bct,"MobileBertForMultipleChoice"),bct.forEach(t),gBo=r(jxe," (MobileBERT model)"),jxe.forEach(t),hBo=i(K),Yb=n(K,"LI",{});var Dxe=s(Yb);jme=n(Dxe,"STRONG",{});var vct=s(jme);pBo=r(vct,"mpnet"),vct.forEach(t),uBo=r(Dxe," \u2014 "),fO=n(Dxe,"A",{href:!0});var Fct=s(fO);_Bo=r(Fct,"MPNetForMultipleChoice"),Fct.forEach(t),bBo=r(Dxe," (MPNet model)"),Dxe.forEach(t),vBo=i(K),Kb=n(K,"LI",{});var Gxe=s(Kb);Dme=n(Gxe,"STRONG",{});var Tct=s(Dme);FBo=r(Tct,"nystromformer"),Tct.forEach(t),TBo=r(Gxe," \u2014 "),mO=n(Gxe,"A",{href:!0});var Mct=s(mO);MBo=r(Mct,"NystromformerForMultipleChoice"),Mct.forEach(t),EBo=r(Gxe," (Nystromformer model)"),Gxe.forEach(t),CBo=i(K),Zb=n(K,"LI",{});var Oxe=s(Zb);Gme=n(Oxe,"STRONG",{});var Ect=s(Gme);wBo=r(Ect,"qdqbert"),Ect.forEach(t),ABo=r(Oxe," \u2014 "),gO=n(Oxe,"A",{href:!0});var Cct=s(gO);yBo=r(Cct,"QDQBertForMultipleChoice"),Cct.forEach(t),LBo=r(Oxe," (QDQBert model)"),Oxe.forEach(t),xBo=i(K),ev=n(K,"LI",{});var Vxe=s(ev);Ome=n(Vxe,"STRONG",{});var wct=s(Ome);$Bo=r(wct,"rembert"),wct.forEach(t),kBo=r(Vxe," \u2014 "),hO=n(Vxe,"A",{href:!0});var Act=s(hO);SBo=r(Act,"RemBertForMultipleChoice"),Act.forEach(t),RBo=r(Vxe," (RemBERT model)"),Vxe.forEach(t),PBo=i(K),ov=n(K,"LI",{});var Xxe=s(ov);Vme=n(Xxe,"STRONG",{});var yct=s(Vme);BBo=r(yct,"roberta"),yct.forEach(t),IBo=r(Xxe," \u2014 "),pO=n(Xxe,"A",{href:!0});var Lct=s(pO);qBo=r(Lct,"RobertaForMultipleChoice"),Lct.forEach(t),NBo=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),jBo=i(K),rv=n(K,"LI",{});var zxe=s(rv);Xme=n(zxe,"STRONG",{});var xct=s(Xme);DBo=r(xct,"roformer"),xct.forEach(t),GBo=r(zxe," \u2014 "),uO=n(zxe,"A",{href:!0});var $ct=s(uO);OBo=r($ct,"RoFormerForMultipleChoice"),$ct.forEach(t),VBo=r(zxe," (RoFormer model)"),zxe.forEach(t),XBo=i(K),tv=n(K,"LI",{});var Wxe=s(tv);zme=n(Wxe,"STRONG",{});var kct=s(zme);zBo=r(kct,"squeezebert"),kct.forEach(t),WBo=r(Wxe," \u2014 "),_O=n(Wxe,"A",{href:!0});var Sct=s(_O);QBo=r(Sct,"SqueezeBertForMultipleChoice"),Sct.forEach(t),HBo=r(Wxe," (SqueezeBERT model)"),Wxe.forEach(t),UBo=i(K),av=n(K,"LI",{});var Qxe=s(av);Wme=n(Qxe,"STRONG",{});var Rct=s(Wme);JBo=r(Rct,"xlm"),Rct.forEach(t),YBo=r(Qxe," \u2014 "),bO=n(Qxe,"A",{href:!0});var Pct=s(bO);KBo=r(Pct,"XLMForMultipleChoice"),Pct.forEach(t),ZBo=r(Qxe," (XLM model)"),Qxe.forEach(t),eIo=i(K),nv=n(K,"LI",{});var Hxe=s(nv);Qme=n(Hxe,"STRONG",{});var Bct=s(Qme);oIo=r(Bct,"xlm-roberta"),Bct.forEach(t),rIo=r(Hxe," \u2014 "),vO=n(Hxe,"A",{href:!0});var Ict=s(vO);tIo=r(Ict,"XLMRobertaForMultipleChoice"),Ict.forEach(t),aIo=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),nIo=i(K),sv=n(K,"LI",{});var Uxe=s(sv);Hme=n(Uxe,"STRONG",{});var qct=s(Hme);sIo=r(qct,"xlm-roberta-xl"),qct.forEach(t),lIo=r(Uxe," \u2014 "),FO=n(Uxe,"A",{href:!0});var Nct=s(FO);iIo=r(Nct,"XLMRobertaXLForMultipleChoice"),Nct.forEach(t),dIo=r(Uxe," (XLM-RoBERTa-XL model)"),Uxe.forEach(t),cIo=i(K),lv=n(K,"LI",{});var Jxe=s(lv);Ume=n(Jxe,"STRONG",{});var jct=s(Ume);fIo=r(jct,"xlnet"),jct.forEach(t),mIo=r(Jxe," \u2014 "),TO=n(Jxe,"A",{href:!0});var Dct=s(TO);gIo=r(Dct,"XLNetForMultipleChoice"),Dct.forEach(t),hIo=r(Jxe," (XLNet model)"),Jxe.forEach(t),pIo=i(K),iv=n(K,"LI",{});var Yxe=s(iv);Jme=n(Yxe,"STRONG",{});var Gct=s(Jme);uIo=r(Gct,"yoso"),Gct.forEach(t),_Io=r(Yxe," \u2014 "),MO=n(Yxe,"A",{href:!0});var Oct=s(MO);bIo=r(Oct,"YosoForMultipleChoice"),Oct.forEach(t),vIo=r(Yxe," (YOSO model)"),Yxe.forEach(t),K.forEach(t),FIo=i(ca),dv=n(ca,"P",{});var Kxe=s(dv);TIo=r(Kxe,"The model is set in evaluation mode by default using "),Yme=n(Kxe,"CODE",{});var Vct=s(Yme);MIo=r(Vct,"model.eval()"),Vct.forEach(t),EIo=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=n(Kxe,"CODE",{});var Xct=s(Kme);CIo=r(Xct,"model.train()"),Xct.forEach(t),Kxe.forEach(t),wIo=i(ca),T(cv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),Jqe=i(f),Ki=n(f,"H2",{class:!0});var rDe=s(Ki);fv=n(rDe,"A",{id:!0,class:!0,href:!0});var zct=s(fv);Zme=n(zct,"SPAN",{});var Wct=s(Zme);T(R0.$$.fragment,Wct),Wct.forEach(t),zct.forEach(t),AIo=i(rDe),ege=n(rDe,"SPAN",{});var Qct=s(ege);yIo=r(Qct,"AutoModelForNextSentencePrediction"),Qct.forEach(t),rDe.forEach(t),Yqe=i(f),Io=n(f,"DIV",{class:!0});var Zs=s(Io);T(P0.$$.fragment,Zs),LIo=i(Zs),Zi=n(Zs,"P",{});var vZ=s(Zi);xIo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EO=n(vZ,"A",{href:!0});var Hct=s(EO);$Io=r(Hct,"from_pretrained()"),Hct.forEach(t),kIo=r(vZ," class method or the "),CO=n(vZ,"A",{href:!0});var Uct=s(CO);SIo=r(Uct,"from_config()"),Uct.forEach(t),RIo=r(vZ,` class
method.`),vZ.forEach(t),PIo=i(Zs),B0=n(Zs,"P",{});var tDe=s(B0);BIo=r(tDe,"This class cannot be instantiated directly using "),oge=n(tDe,"CODE",{});var Jct=s(oge);IIo=r(Jct,"__init__()"),Jct.forEach(t),qIo=r(tDe," (throws an error)."),tDe.forEach(t),NIo=i(Zs),mt=n(Zs,"DIV",{class:!0});var O3=s(mt);T(I0.$$.fragment,O3),jIo=i(O3),rge=n(O3,"P",{});var Yct=s(rge);DIo=r(Yct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yct.forEach(t),GIo=i(O3),ed=n(O3,"P",{});var FZ=s(ed);OIo=r(FZ,`Note:
Loading a model from its configuration file does `),tge=n(FZ,"STRONG",{});var Kct=s(tge);VIo=r(Kct,"not"),Kct.forEach(t),XIo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(FZ,"A",{href:!0});var Zct=s(wO);zIo=r(Zct,"from_pretrained()"),Zct.forEach(t),WIo=r(FZ," to load the model weights."),FZ.forEach(t),QIo=i(O3),T(mv.$$.fragment,O3),O3.forEach(t),HIo=i(Zs),to=n(Zs,"DIV",{class:!0});var fa=s(to);T(q0.$$.fragment,fa),UIo=i(fa),age=n(fa,"P",{});var eft=s(age);JIo=r(eft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eft.forEach(t),YIo=i(fa),ja=n(fa,"P",{});var V3=s(ja);KIo=r(V3,"The model class to instantiate is selected based on the "),nge=n(V3,"CODE",{});var oft=s(nge);ZIo=r(oft,"model_type"),oft.forEach(t),eqo=r(V3,` property of the config object (either
passed as an argument or loaded from `),sge=n(V3,"CODE",{});var rft=s(sge);oqo=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),rqo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=n(V3,"CODE",{});var tft=s(lge);tqo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),aqo=r(V3,":"),V3.forEach(t),nqo=i(fa),Zr=n(fa,"UL",{});var el=s(Zr);gv=n(el,"LI",{});var Zxe=s(gv);ige=n(Zxe,"STRONG",{});var aft=s(ige);sqo=r(aft,"bert"),aft.forEach(t),lqo=r(Zxe," \u2014 "),AO=n(Zxe,"A",{href:!0});var nft=s(AO);iqo=r(nft,"BertForNextSentencePrediction"),nft.forEach(t),dqo=r(Zxe," (BERT model)"),Zxe.forEach(t),cqo=i(el),hv=n(el,"LI",{});var e9e=s(hv);dge=n(e9e,"STRONG",{});var sft=s(dge);fqo=r(sft,"fnet"),sft.forEach(t),mqo=r(e9e," \u2014 "),yO=n(e9e,"A",{href:!0});var lft=s(yO);gqo=r(lft,"FNetForNextSentencePrediction"),lft.forEach(t),hqo=r(e9e," (FNet model)"),e9e.forEach(t),pqo=i(el),pv=n(el,"LI",{});var o9e=s(pv);cge=n(o9e,"STRONG",{});var ift=s(cge);uqo=r(ift,"megatron-bert"),ift.forEach(t),_qo=r(o9e," \u2014 "),LO=n(o9e,"A",{href:!0});var dft=s(LO);bqo=r(dft,"MegatronBertForNextSentencePrediction"),dft.forEach(t),vqo=r(o9e," (MegatronBert model)"),o9e.forEach(t),Fqo=i(el),uv=n(el,"LI",{});var r9e=s(uv);fge=n(r9e,"STRONG",{});var cft=s(fge);Tqo=r(cft,"mobilebert"),cft.forEach(t),Mqo=r(r9e," \u2014 "),xO=n(r9e,"A",{href:!0});var fft=s(xO);Eqo=r(fft,"MobileBertForNextSentencePrediction"),fft.forEach(t),Cqo=r(r9e," (MobileBERT model)"),r9e.forEach(t),wqo=i(el),_v=n(el,"LI",{});var t9e=s(_v);mge=n(t9e,"STRONG",{});var mft=s(mge);Aqo=r(mft,"qdqbert"),mft.forEach(t),yqo=r(t9e," \u2014 "),$O=n(t9e,"A",{href:!0});var gft=s($O);Lqo=r(gft,"QDQBertForNextSentencePrediction"),gft.forEach(t),xqo=r(t9e," (QDQBert model)"),t9e.forEach(t),el.forEach(t),$qo=i(fa),bv=n(fa,"P",{});var a9e=s(bv);kqo=r(a9e,"The model is set in evaluation mode by default using "),gge=n(a9e,"CODE",{});var hft=s(gge);Sqo=r(hft,"model.eval()"),hft.forEach(t),Rqo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(a9e,"CODE",{});var pft=s(hge);Pqo=r(pft,"model.train()"),pft.forEach(t),a9e.forEach(t),Bqo=i(fa),T(vv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),Kqe=i(f),od=n(f,"H2",{class:!0});var aDe=s(od);Fv=n(aDe,"A",{id:!0,class:!0,href:!0});var uft=s(Fv);pge=n(uft,"SPAN",{});var _ft=s(pge);T(N0.$$.fragment,_ft),_ft.forEach(t),uft.forEach(t),Iqo=i(aDe),uge=n(aDe,"SPAN",{});var bft=s(uge);qqo=r(bft,"AutoModelForTokenClassification"),bft.forEach(t),aDe.forEach(t),Zqe=i(f),qo=n(f,"DIV",{class:!0});var ol=s(qo);T(j0.$$.fragment,ol),Nqo=i(ol),rd=n(ol,"P",{});var TZ=s(rd);jqo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kO=n(TZ,"A",{href:!0});var vft=s(kO);Dqo=r(vft,"from_pretrained()"),vft.forEach(t),Gqo=r(TZ," class method or the "),SO=n(TZ,"A",{href:!0});var Fft=s(SO);Oqo=r(Fft,"from_config()"),Fft.forEach(t),Vqo=r(TZ,` class
method.`),TZ.forEach(t),Xqo=i(ol),D0=n(ol,"P",{});var nDe=s(D0);zqo=r(nDe,"This class cannot be instantiated directly using "),_ge=n(nDe,"CODE",{});var Tft=s(_ge);Wqo=r(Tft,"__init__()"),Tft.forEach(t),Qqo=r(nDe," (throws an error)."),nDe.forEach(t),Hqo=i(ol),gt=n(ol,"DIV",{class:!0});var X3=s(gt);T(G0.$$.fragment,X3),Uqo=i(X3),bge=n(X3,"P",{});var Mft=s(bge);Jqo=r(Mft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mft.forEach(t),Yqo=i(X3),td=n(X3,"P",{});var MZ=s(td);Kqo=r(MZ,`Note:
Loading a model from its configuration file does `),vge=n(MZ,"STRONG",{});var Eft=s(vge);Zqo=r(Eft,"not"),Eft.forEach(t),eNo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RO=n(MZ,"A",{href:!0});var Cft=s(RO);oNo=r(Cft,"from_pretrained()"),Cft.forEach(t),rNo=r(MZ," to load the model weights."),MZ.forEach(t),tNo=i(X3),T(Tv.$$.fragment,X3),X3.forEach(t),aNo=i(ol),ao=n(ol,"DIV",{class:!0});var ma=s(ao);T(O0.$$.fragment,ma),nNo=i(ma),Fge=n(ma,"P",{});var wft=s(Fge);sNo=r(wft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wft.forEach(t),lNo=i(ma),Da=n(ma,"P",{});var z3=s(Da);iNo=r(z3,"The model class to instantiate is selected based on the "),Tge=n(z3,"CODE",{});var Aft=s(Tge);dNo=r(Aft,"model_type"),Aft.forEach(t),cNo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Mge=n(z3,"CODE",{});var yft=s(Mge);fNo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),mNo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(z3,"CODE",{});var Lft=s(Ege);gNo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),hNo=r(z3,":"),z3.forEach(t),pNo=i(ma),U=n(ma,"UL",{});var J=s(U);Mv=n(J,"LI",{});var n9e=s(Mv);Cge=n(n9e,"STRONG",{});var xft=s(Cge);uNo=r(xft,"albert"),xft.forEach(t),_No=r(n9e," \u2014 "),PO=n(n9e,"A",{href:!0});var $ft=s(PO);bNo=r($ft,"AlbertForTokenClassification"),$ft.forEach(t),vNo=r(n9e," (ALBERT model)"),n9e.forEach(t),FNo=i(J),Ev=n(J,"LI",{});var s9e=s(Ev);wge=n(s9e,"STRONG",{});var kft=s(wge);TNo=r(kft,"bert"),kft.forEach(t),MNo=r(s9e," \u2014 "),BO=n(s9e,"A",{href:!0});var Sft=s(BO);ENo=r(Sft,"BertForTokenClassification"),Sft.forEach(t),CNo=r(s9e," (BERT model)"),s9e.forEach(t),wNo=i(J),Cv=n(J,"LI",{});var l9e=s(Cv);Age=n(l9e,"STRONG",{});var Rft=s(Age);ANo=r(Rft,"big_bird"),Rft.forEach(t),yNo=r(l9e," \u2014 "),IO=n(l9e,"A",{href:!0});var Pft=s(IO);LNo=r(Pft,"BigBirdForTokenClassification"),Pft.forEach(t),xNo=r(l9e," (BigBird model)"),l9e.forEach(t),$No=i(J),wv=n(J,"LI",{});var i9e=s(wv);yge=n(i9e,"STRONG",{});var Bft=s(yge);kNo=r(Bft,"camembert"),Bft.forEach(t),SNo=r(i9e," \u2014 "),qO=n(i9e,"A",{href:!0});var Ift=s(qO);RNo=r(Ift,"CamembertForTokenClassification"),Ift.forEach(t),PNo=r(i9e," (CamemBERT model)"),i9e.forEach(t),BNo=i(J),Av=n(J,"LI",{});var d9e=s(Av);Lge=n(d9e,"STRONG",{});var qft=s(Lge);INo=r(qft,"canine"),qft.forEach(t),qNo=r(d9e," \u2014 "),NO=n(d9e,"A",{href:!0});var Nft=s(NO);NNo=r(Nft,"CanineForTokenClassification"),Nft.forEach(t),jNo=r(d9e," (Canine model)"),d9e.forEach(t),DNo=i(J),yv=n(J,"LI",{});var c9e=s(yv);xge=n(c9e,"STRONG",{});var jft=s(xge);GNo=r(jft,"convbert"),jft.forEach(t),ONo=r(c9e," \u2014 "),jO=n(c9e,"A",{href:!0});var Dft=s(jO);VNo=r(Dft,"ConvBertForTokenClassification"),Dft.forEach(t),XNo=r(c9e," (ConvBERT model)"),c9e.forEach(t),zNo=i(J),Lv=n(J,"LI",{});var f9e=s(Lv);$ge=n(f9e,"STRONG",{});var Gft=s($ge);WNo=r(Gft,"data2vec-text"),Gft.forEach(t),QNo=r(f9e," \u2014 "),DO=n(f9e,"A",{href:!0});var Oft=s(DO);HNo=r(Oft,"Data2VecTextForTokenClassification"),Oft.forEach(t),UNo=r(f9e," (Data2VecText model)"),f9e.forEach(t),JNo=i(J),xv=n(J,"LI",{});var m9e=s(xv);kge=n(m9e,"STRONG",{});var Vft=s(kge);YNo=r(Vft,"deberta"),Vft.forEach(t),KNo=r(m9e," \u2014 "),GO=n(m9e,"A",{href:!0});var Xft=s(GO);ZNo=r(Xft,"DebertaForTokenClassification"),Xft.forEach(t),ejo=r(m9e," (DeBERTa model)"),m9e.forEach(t),ojo=i(J),$v=n(J,"LI",{});var g9e=s($v);Sge=n(g9e,"STRONG",{});var zft=s(Sge);rjo=r(zft,"deberta-v2"),zft.forEach(t),tjo=r(g9e," \u2014 "),OO=n(g9e,"A",{href:!0});var Wft=s(OO);ajo=r(Wft,"DebertaV2ForTokenClassification"),Wft.forEach(t),njo=r(g9e," (DeBERTa-v2 model)"),g9e.forEach(t),sjo=i(J),kv=n(J,"LI",{});var h9e=s(kv);Rge=n(h9e,"STRONG",{});var Qft=s(Rge);ljo=r(Qft,"distilbert"),Qft.forEach(t),ijo=r(h9e," \u2014 "),VO=n(h9e,"A",{href:!0});var Hft=s(VO);djo=r(Hft,"DistilBertForTokenClassification"),Hft.forEach(t),cjo=r(h9e," (DistilBERT model)"),h9e.forEach(t),fjo=i(J),Sv=n(J,"LI",{});var p9e=s(Sv);Pge=n(p9e,"STRONG",{});var Uft=s(Pge);mjo=r(Uft,"electra"),Uft.forEach(t),gjo=r(p9e," \u2014 "),XO=n(p9e,"A",{href:!0});var Jft=s(XO);hjo=r(Jft,"ElectraForTokenClassification"),Jft.forEach(t),pjo=r(p9e," (ELECTRA model)"),p9e.forEach(t),ujo=i(J),Rv=n(J,"LI",{});var u9e=s(Rv);Bge=n(u9e,"STRONG",{});var Yft=s(Bge);_jo=r(Yft,"flaubert"),Yft.forEach(t),bjo=r(u9e," \u2014 "),zO=n(u9e,"A",{href:!0});var Kft=s(zO);vjo=r(Kft,"FlaubertForTokenClassification"),Kft.forEach(t),Fjo=r(u9e," (FlauBERT model)"),u9e.forEach(t),Tjo=i(J),Pv=n(J,"LI",{});var _9e=s(Pv);Ige=n(_9e,"STRONG",{});var Zft=s(Ige);Mjo=r(Zft,"fnet"),Zft.forEach(t),Ejo=r(_9e," \u2014 "),WO=n(_9e,"A",{href:!0});var emt=s(WO);Cjo=r(emt,"FNetForTokenClassification"),emt.forEach(t),wjo=r(_9e," (FNet model)"),_9e.forEach(t),Ajo=i(J),Bv=n(J,"LI",{});var b9e=s(Bv);qge=n(b9e,"STRONG",{});var omt=s(qge);yjo=r(omt,"funnel"),omt.forEach(t),Ljo=r(b9e," \u2014 "),QO=n(b9e,"A",{href:!0});var rmt=s(QO);xjo=r(rmt,"FunnelForTokenClassification"),rmt.forEach(t),$jo=r(b9e," (Funnel Transformer model)"),b9e.forEach(t),kjo=i(J),Iv=n(J,"LI",{});var v9e=s(Iv);Nge=n(v9e,"STRONG",{});var tmt=s(Nge);Sjo=r(tmt,"gpt2"),tmt.forEach(t),Rjo=r(v9e," \u2014 "),HO=n(v9e,"A",{href:!0});var amt=s(HO);Pjo=r(amt,"GPT2ForTokenClassification"),amt.forEach(t),Bjo=r(v9e," (OpenAI GPT-2 model)"),v9e.forEach(t),Ijo=i(J),qv=n(J,"LI",{});var F9e=s(qv);jge=n(F9e,"STRONG",{});var nmt=s(jge);qjo=r(nmt,"ibert"),nmt.forEach(t),Njo=r(F9e," \u2014 "),UO=n(F9e,"A",{href:!0});var smt=s(UO);jjo=r(smt,"IBertForTokenClassification"),smt.forEach(t),Djo=r(F9e," (I-BERT model)"),F9e.forEach(t),Gjo=i(J),Nv=n(J,"LI",{});var T9e=s(Nv);Dge=n(T9e,"STRONG",{});var lmt=s(Dge);Ojo=r(lmt,"layoutlm"),lmt.forEach(t),Vjo=r(T9e," \u2014 "),JO=n(T9e,"A",{href:!0});var imt=s(JO);Xjo=r(imt,"LayoutLMForTokenClassification"),imt.forEach(t),zjo=r(T9e," (LayoutLM model)"),T9e.forEach(t),Wjo=i(J),jv=n(J,"LI",{});var M9e=s(jv);Gge=n(M9e,"STRONG",{});var dmt=s(Gge);Qjo=r(dmt,"layoutlmv2"),dmt.forEach(t),Hjo=r(M9e," \u2014 "),YO=n(M9e,"A",{href:!0});var cmt=s(YO);Ujo=r(cmt,"LayoutLMv2ForTokenClassification"),cmt.forEach(t),Jjo=r(M9e," (LayoutLMv2 model)"),M9e.forEach(t),Yjo=i(J),Dv=n(J,"LI",{});var E9e=s(Dv);Oge=n(E9e,"STRONG",{});var fmt=s(Oge);Kjo=r(fmt,"longformer"),fmt.forEach(t),Zjo=r(E9e," \u2014 "),KO=n(E9e,"A",{href:!0});var mmt=s(KO);eDo=r(mmt,"LongformerForTokenClassification"),mmt.forEach(t),oDo=r(E9e," (Longformer model)"),E9e.forEach(t),rDo=i(J),Gv=n(J,"LI",{});var C9e=s(Gv);Vge=n(C9e,"STRONG",{});var gmt=s(Vge);tDo=r(gmt,"megatron-bert"),gmt.forEach(t),aDo=r(C9e," \u2014 "),ZO=n(C9e,"A",{href:!0});var hmt=s(ZO);nDo=r(hmt,"MegatronBertForTokenClassification"),hmt.forEach(t),sDo=r(C9e," (MegatronBert model)"),C9e.forEach(t),lDo=i(J),Ov=n(J,"LI",{});var w9e=s(Ov);Xge=n(w9e,"STRONG",{});var pmt=s(Xge);iDo=r(pmt,"mobilebert"),pmt.forEach(t),dDo=r(w9e," \u2014 "),eV=n(w9e,"A",{href:!0});var umt=s(eV);cDo=r(umt,"MobileBertForTokenClassification"),umt.forEach(t),fDo=r(w9e," (MobileBERT model)"),w9e.forEach(t),mDo=i(J),Vv=n(J,"LI",{});var A9e=s(Vv);zge=n(A9e,"STRONG",{});var _mt=s(zge);gDo=r(_mt,"mpnet"),_mt.forEach(t),hDo=r(A9e," \u2014 "),oV=n(A9e,"A",{href:!0});var bmt=s(oV);pDo=r(bmt,"MPNetForTokenClassification"),bmt.forEach(t),uDo=r(A9e," (MPNet model)"),A9e.forEach(t),_Do=i(J),Xv=n(J,"LI",{});var y9e=s(Xv);Wge=n(y9e,"STRONG",{});var vmt=s(Wge);bDo=r(vmt,"nystromformer"),vmt.forEach(t),vDo=r(y9e," \u2014 "),rV=n(y9e,"A",{href:!0});var Fmt=s(rV);FDo=r(Fmt,"NystromformerForTokenClassification"),Fmt.forEach(t),TDo=r(y9e," (Nystromformer model)"),y9e.forEach(t),MDo=i(J),zv=n(J,"LI",{});var L9e=s(zv);Qge=n(L9e,"STRONG",{});var Tmt=s(Qge);EDo=r(Tmt,"qdqbert"),Tmt.forEach(t),CDo=r(L9e," \u2014 "),tV=n(L9e,"A",{href:!0});var Mmt=s(tV);wDo=r(Mmt,"QDQBertForTokenClassification"),Mmt.forEach(t),ADo=r(L9e," (QDQBert model)"),L9e.forEach(t),yDo=i(J),Wv=n(J,"LI",{});var x9e=s(Wv);Hge=n(x9e,"STRONG",{});var Emt=s(Hge);LDo=r(Emt,"rembert"),Emt.forEach(t),xDo=r(x9e," \u2014 "),aV=n(x9e,"A",{href:!0});var Cmt=s(aV);$Do=r(Cmt,"RemBertForTokenClassification"),Cmt.forEach(t),kDo=r(x9e," (RemBERT model)"),x9e.forEach(t),SDo=i(J),Qv=n(J,"LI",{});var $9e=s(Qv);Uge=n($9e,"STRONG",{});var wmt=s(Uge);RDo=r(wmt,"roberta"),wmt.forEach(t),PDo=r($9e," \u2014 "),nV=n($9e,"A",{href:!0});var Amt=s(nV);BDo=r(Amt,"RobertaForTokenClassification"),Amt.forEach(t),IDo=r($9e," (RoBERTa model)"),$9e.forEach(t),qDo=i(J),Hv=n(J,"LI",{});var k9e=s(Hv);Jge=n(k9e,"STRONG",{});var ymt=s(Jge);NDo=r(ymt,"roformer"),ymt.forEach(t),jDo=r(k9e," \u2014 "),sV=n(k9e,"A",{href:!0});var Lmt=s(sV);DDo=r(Lmt,"RoFormerForTokenClassification"),Lmt.forEach(t),GDo=r(k9e," (RoFormer model)"),k9e.forEach(t),ODo=i(J),Uv=n(J,"LI",{});var S9e=s(Uv);Yge=n(S9e,"STRONG",{});var xmt=s(Yge);VDo=r(xmt,"squeezebert"),xmt.forEach(t),XDo=r(S9e," \u2014 "),lV=n(S9e,"A",{href:!0});var $mt=s(lV);zDo=r($mt,"SqueezeBertForTokenClassification"),$mt.forEach(t),WDo=r(S9e," (SqueezeBERT model)"),S9e.forEach(t),QDo=i(J),Jv=n(J,"LI",{});var R9e=s(Jv);Kge=n(R9e,"STRONG",{});var kmt=s(Kge);HDo=r(kmt,"xlm"),kmt.forEach(t),UDo=r(R9e," \u2014 "),iV=n(R9e,"A",{href:!0});var Smt=s(iV);JDo=r(Smt,"XLMForTokenClassification"),Smt.forEach(t),YDo=r(R9e," (XLM model)"),R9e.forEach(t),KDo=i(J),Yv=n(J,"LI",{});var P9e=s(Yv);Zge=n(P9e,"STRONG",{});var Rmt=s(Zge);ZDo=r(Rmt,"xlm-roberta"),Rmt.forEach(t),eGo=r(P9e," \u2014 "),dV=n(P9e,"A",{href:!0});var Pmt=s(dV);oGo=r(Pmt,"XLMRobertaForTokenClassification"),Pmt.forEach(t),rGo=r(P9e," (XLM-RoBERTa model)"),P9e.forEach(t),tGo=i(J),Kv=n(J,"LI",{});var B9e=s(Kv);ehe=n(B9e,"STRONG",{});var Bmt=s(ehe);aGo=r(Bmt,"xlm-roberta-xl"),Bmt.forEach(t),nGo=r(B9e," \u2014 "),cV=n(B9e,"A",{href:!0});var Imt=s(cV);sGo=r(Imt,"XLMRobertaXLForTokenClassification"),Imt.forEach(t),lGo=r(B9e," (XLM-RoBERTa-XL model)"),B9e.forEach(t),iGo=i(J),Zv=n(J,"LI",{});var I9e=s(Zv);ohe=n(I9e,"STRONG",{});var qmt=s(ohe);dGo=r(qmt,"xlnet"),qmt.forEach(t),cGo=r(I9e," \u2014 "),fV=n(I9e,"A",{href:!0});var Nmt=s(fV);fGo=r(Nmt,"XLNetForTokenClassification"),Nmt.forEach(t),mGo=r(I9e," (XLNet model)"),I9e.forEach(t),gGo=i(J),eF=n(J,"LI",{});var q9e=s(eF);rhe=n(q9e,"STRONG",{});var jmt=s(rhe);hGo=r(jmt,"yoso"),jmt.forEach(t),pGo=r(q9e," \u2014 "),mV=n(q9e,"A",{href:!0});var Dmt=s(mV);uGo=r(Dmt,"YosoForTokenClassification"),Dmt.forEach(t),_Go=r(q9e," (YOSO model)"),q9e.forEach(t),J.forEach(t),bGo=i(ma),oF=n(ma,"P",{});var N9e=s(oF);vGo=r(N9e,"The model is set in evaluation mode by default using "),the=n(N9e,"CODE",{});var Gmt=s(the);FGo=r(Gmt,"model.eval()"),Gmt.forEach(t),TGo=r(N9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(N9e,"CODE",{});var Omt=s(ahe);MGo=r(Omt,"model.train()"),Omt.forEach(t),N9e.forEach(t),EGo=i(ma),T(rF.$$.fragment,ma),ma.forEach(t),ol.forEach(t),eNe=i(f),ad=n(f,"H2",{class:!0});var sDe=s(ad);tF=n(sDe,"A",{id:!0,class:!0,href:!0});var Vmt=s(tF);nhe=n(Vmt,"SPAN",{});var Xmt=s(nhe);T(V0.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),CGo=i(sDe),she=n(sDe,"SPAN",{});var zmt=s(she);wGo=r(zmt,"AutoModelForQuestionAnswering"),zmt.forEach(t),sDe.forEach(t),oNe=i(f),No=n(f,"DIV",{class:!0});var rl=s(No);T(X0.$$.fragment,rl),AGo=i(rl),nd=n(rl,"P",{});var EZ=s(nd);yGo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gV=n(EZ,"A",{href:!0});var Wmt=s(gV);LGo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),xGo=r(EZ," class method or the "),hV=n(EZ,"A",{href:!0});var Qmt=s(hV);$Go=r(Qmt,"from_config()"),Qmt.forEach(t),kGo=r(EZ,` class
method.`),EZ.forEach(t),SGo=i(rl),z0=n(rl,"P",{});var lDe=s(z0);RGo=r(lDe,"This class cannot be instantiated directly using "),lhe=n(lDe,"CODE",{});var Hmt=s(lhe);PGo=r(Hmt,"__init__()"),Hmt.forEach(t),BGo=r(lDe," (throws an error)."),lDe.forEach(t),IGo=i(rl),ht=n(rl,"DIV",{class:!0});var W3=s(ht);T(W0.$$.fragment,W3),qGo=i(W3),ihe=n(W3,"P",{});var Umt=s(ihe);NGo=r(Umt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Umt.forEach(t),jGo=i(W3),sd=n(W3,"P",{});var CZ=s(sd);DGo=r(CZ,`Note:
Loading a model from its configuration file does `),dhe=n(CZ,"STRONG",{});var Jmt=s(dhe);GGo=r(Jmt,"not"),Jmt.forEach(t),OGo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(CZ,"A",{href:!0});var Ymt=s(pV);VGo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),XGo=r(CZ," to load the model weights."),CZ.forEach(t),zGo=i(W3),T(aF.$$.fragment,W3),W3.forEach(t),WGo=i(rl),no=n(rl,"DIV",{class:!0});var ga=s(no);T(Q0.$$.fragment,ga),QGo=i(ga),che=n(ga,"P",{});var Kmt=s(che);HGo=r(Kmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kmt.forEach(t),UGo=i(ga),Ga=n(ga,"P",{});var Q3=s(Ga);JGo=r(Q3,"The model class to instantiate is selected based on the "),fhe=n(Q3,"CODE",{});var Zmt=s(fhe);YGo=r(Zmt,"model_type"),Zmt.forEach(t),KGo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),mhe=n(Q3,"CODE",{});var egt=s(mhe);ZGo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),eOo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(Q3,"CODE",{});var ogt=s(ghe);oOo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),rOo=r(Q3,":"),Q3.forEach(t),tOo=i(ga),V=n(ga,"UL",{});var X=s(V);nF=n(X,"LI",{});var j9e=s(nF);hhe=n(j9e,"STRONG",{});var rgt=s(hhe);aOo=r(rgt,"albert"),rgt.forEach(t),nOo=r(j9e," \u2014 "),uV=n(j9e,"A",{href:!0});var tgt=s(uV);sOo=r(tgt,"AlbertForQuestionAnswering"),tgt.forEach(t),lOo=r(j9e," (ALBERT model)"),j9e.forEach(t),iOo=i(X),sF=n(X,"LI",{});var D9e=s(sF);phe=n(D9e,"STRONG",{});var agt=s(phe);dOo=r(agt,"bart"),agt.forEach(t),cOo=r(D9e," \u2014 "),_V=n(D9e,"A",{href:!0});var ngt=s(_V);fOo=r(ngt,"BartForQuestionAnswering"),ngt.forEach(t),mOo=r(D9e," (BART model)"),D9e.forEach(t),gOo=i(X),lF=n(X,"LI",{});var G9e=s(lF);uhe=n(G9e,"STRONG",{});var sgt=s(uhe);hOo=r(sgt,"bert"),sgt.forEach(t),pOo=r(G9e," \u2014 "),bV=n(G9e,"A",{href:!0});var lgt=s(bV);uOo=r(lgt,"BertForQuestionAnswering"),lgt.forEach(t),_Oo=r(G9e," (BERT model)"),G9e.forEach(t),bOo=i(X),iF=n(X,"LI",{});var O9e=s(iF);_he=n(O9e,"STRONG",{});var igt=s(_he);vOo=r(igt,"big_bird"),igt.forEach(t),FOo=r(O9e," \u2014 "),vV=n(O9e,"A",{href:!0});var dgt=s(vV);TOo=r(dgt,"BigBirdForQuestionAnswering"),dgt.forEach(t),MOo=r(O9e," (BigBird model)"),O9e.forEach(t),EOo=i(X),dF=n(X,"LI",{});var V9e=s(dF);bhe=n(V9e,"STRONG",{});var cgt=s(bhe);COo=r(cgt,"bigbird_pegasus"),cgt.forEach(t),wOo=r(V9e," \u2014 "),FV=n(V9e,"A",{href:!0});var fgt=s(FV);AOo=r(fgt,"BigBirdPegasusForQuestionAnswering"),fgt.forEach(t),yOo=r(V9e," (BigBirdPegasus model)"),V9e.forEach(t),LOo=i(X),cF=n(X,"LI",{});var X9e=s(cF);vhe=n(X9e,"STRONG",{});var mgt=s(vhe);xOo=r(mgt,"camembert"),mgt.forEach(t),$Oo=r(X9e," \u2014 "),TV=n(X9e,"A",{href:!0});var ggt=s(TV);kOo=r(ggt,"CamembertForQuestionAnswering"),ggt.forEach(t),SOo=r(X9e," (CamemBERT model)"),X9e.forEach(t),ROo=i(X),fF=n(X,"LI",{});var z9e=s(fF);Fhe=n(z9e,"STRONG",{});var hgt=s(Fhe);POo=r(hgt,"canine"),hgt.forEach(t),BOo=r(z9e," \u2014 "),MV=n(z9e,"A",{href:!0});var pgt=s(MV);IOo=r(pgt,"CanineForQuestionAnswering"),pgt.forEach(t),qOo=r(z9e," (Canine model)"),z9e.forEach(t),NOo=i(X),mF=n(X,"LI",{});var W9e=s(mF);The=n(W9e,"STRONG",{});var ugt=s(The);jOo=r(ugt,"convbert"),ugt.forEach(t),DOo=r(W9e," \u2014 "),EV=n(W9e,"A",{href:!0});var _gt=s(EV);GOo=r(_gt,"ConvBertForQuestionAnswering"),_gt.forEach(t),OOo=r(W9e," (ConvBERT model)"),W9e.forEach(t),VOo=i(X),gF=n(X,"LI",{});var Q9e=s(gF);Mhe=n(Q9e,"STRONG",{});var bgt=s(Mhe);XOo=r(bgt,"data2vec-text"),bgt.forEach(t),zOo=r(Q9e," \u2014 "),CV=n(Q9e,"A",{href:!0});var vgt=s(CV);WOo=r(vgt,"Data2VecTextForQuestionAnswering"),vgt.forEach(t),QOo=r(Q9e," (Data2VecText model)"),Q9e.forEach(t),HOo=i(X),hF=n(X,"LI",{});var H9e=s(hF);Ehe=n(H9e,"STRONG",{});var Fgt=s(Ehe);UOo=r(Fgt,"deberta"),Fgt.forEach(t),JOo=r(H9e," \u2014 "),wV=n(H9e,"A",{href:!0});var Tgt=s(wV);YOo=r(Tgt,"DebertaForQuestionAnswering"),Tgt.forEach(t),KOo=r(H9e," (DeBERTa model)"),H9e.forEach(t),ZOo=i(X),pF=n(X,"LI",{});var U9e=s(pF);Che=n(U9e,"STRONG",{});var Mgt=s(Che);eVo=r(Mgt,"deberta-v2"),Mgt.forEach(t),oVo=r(U9e," \u2014 "),AV=n(U9e,"A",{href:!0});var Egt=s(AV);rVo=r(Egt,"DebertaV2ForQuestionAnswering"),Egt.forEach(t),tVo=r(U9e," (DeBERTa-v2 model)"),U9e.forEach(t),aVo=i(X),uF=n(X,"LI",{});var J9e=s(uF);whe=n(J9e,"STRONG",{});var Cgt=s(whe);nVo=r(Cgt,"distilbert"),Cgt.forEach(t),sVo=r(J9e," \u2014 "),yV=n(J9e,"A",{href:!0});var wgt=s(yV);lVo=r(wgt,"DistilBertForQuestionAnswering"),wgt.forEach(t),iVo=r(J9e," (DistilBERT model)"),J9e.forEach(t),dVo=i(X),_F=n(X,"LI",{});var Y9e=s(_F);Ahe=n(Y9e,"STRONG",{});var Agt=s(Ahe);cVo=r(Agt,"electra"),Agt.forEach(t),fVo=r(Y9e," \u2014 "),LV=n(Y9e,"A",{href:!0});var ygt=s(LV);mVo=r(ygt,"ElectraForQuestionAnswering"),ygt.forEach(t),gVo=r(Y9e," (ELECTRA model)"),Y9e.forEach(t),hVo=i(X),bF=n(X,"LI",{});var K9e=s(bF);yhe=n(K9e,"STRONG",{});var Lgt=s(yhe);pVo=r(Lgt,"flaubert"),Lgt.forEach(t),uVo=r(K9e," \u2014 "),xV=n(K9e,"A",{href:!0});var xgt=s(xV);_Vo=r(xgt,"FlaubertForQuestionAnsweringSimple"),xgt.forEach(t),bVo=r(K9e," (FlauBERT model)"),K9e.forEach(t),vVo=i(X),vF=n(X,"LI",{});var Z9e=s(vF);Lhe=n(Z9e,"STRONG",{});var $gt=s(Lhe);FVo=r($gt,"fnet"),$gt.forEach(t),TVo=r(Z9e," \u2014 "),$V=n(Z9e,"A",{href:!0});var kgt=s($V);MVo=r(kgt,"FNetForQuestionAnswering"),kgt.forEach(t),EVo=r(Z9e," (FNet model)"),Z9e.forEach(t),CVo=i(X),FF=n(X,"LI",{});var e$e=s(FF);xhe=n(e$e,"STRONG",{});var Sgt=s(xhe);wVo=r(Sgt,"funnel"),Sgt.forEach(t),AVo=r(e$e," \u2014 "),kV=n(e$e,"A",{href:!0});var Rgt=s(kV);yVo=r(Rgt,"FunnelForQuestionAnswering"),Rgt.forEach(t),LVo=r(e$e," (Funnel Transformer model)"),e$e.forEach(t),xVo=i(X),TF=n(X,"LI",{});var o$e=s(TF);$he=n(o$e,"STRONG",{});var Pgt=s($he);$Vo=r(Pgt,"gptj"),Pgt.forEach(t),kVo=r(o$e," \u2014 "),SV=n(o$e,"A",{href:!0});var Bgt=s(SV);SVo=r(Bgt,"GPTJForQuestionAnswering"),Bgt.forEach(t),RVo=r(o$e," (GPT-J model)"),o$e.forEach(t),PVo=i(X),MF=n(X,"LI",{});var r$e=s(MF);khe=n(r$e,"STRONG",{});var Igt=s(khe);BVo=r(Igt,"ibert"),Igt.forEach(t),IVo=r(r$e," \u2014 "),RV=n(r$e,"A",{href:!0});var qgt=s(RV);qVo=r(qgt,"IBertForQuestionAnswering"),qgt.forEach(t),NVo=r(r$e," (I-BERT model)"),r$e.forEach(t),jVo=i(X),EF=n(X,"LI",{});var t$e=s(EF);She=n(t$e,"STRONG",{});var Ngt=s(She);DVo=r(Ngt,"layoutlmv2"),Ngt.forEach(t),GVo=r(t$e," \u2014 "),PV=n(t$e,"A",{href:!0});var jgt=s(PV);OVo=r(jgt,"LayoutLMv2ForQuestionAnswering"),jgt.forEach(t),VVo=r(t$e," (LayoutLMv2 model)"),t$e.forEach(t),XVo=i(X),CF=n(X,"LI",{});var a$e=s(CF);Rhe=n(a$e,"STRONG",{});var Dgt=s(Rhe);zVo=r(Dgt,"led"),Dgt.forEach(t),WVo=r(a$e," \u2014 "),BV=n(a$e,"A",{href:!0});var Ggt=s(BV);QVo=r(Ggt,"LEDForQuestionAnswering"),Ggt.forEach(t),HVo=r(a$e," (LED model)"),a$e.forEach(t),UVo=i(X),wF=n(X,"LI",{});var n$e=s(wF);Phe=n(n$e,"STRONG",{});var Ogt=s(Phe);JVo=r(Ogt,"longformer"),Ogt.forEach(t),YVo=r(n$e," \u2014 "),IV=n(n$e,"A",{href:!0});var Vgt=s(IV);KVo=r(Vgt,"LongformerForQuestionAnswering"),Vgt.forEach(t),ZVo=r(n$e," (Longformer model)"),n$e.forEach(t),eXo=i(X),AF=n(X,"LI",{});var s$e=s(AF);Bhe=n(s$e,"STRONG",{});var Xgt=s(Bhe);oXo=r(Xgt,"lxmert"),Xgt.forEach(t),rXo=r(s$e," \u2014 "),qV=n(s$e,"A",{href:!0});var zgt=s(qV);tXo=r(zgt,"LxmertForQuestionAnswering"),zgt.forEach(t),aXo=r(s$e," (LXMERT model)"),s$e.forEach(t),nXo=i(X),yF=n(X,"LI",{});var l$e=s(yF);Ihe=n(l$e,"STRONG",{});var Wgt=s(Ihe);sXo=r(Wgt,"mbart"),Wgt.forEach(t),lXo=r(l$e," \u2014 "),NV=n(l$e,"A",{href:!0});var Qgt=s(NV);iXo=r(Qgt,"MBartForQuestionAnswering"),Qgt.forEach(t),dXo=r(l$e," (mBART model)"),l$e.forEach(t),cXo=i(X),LF=n(X,"LI",{});var i$e=s(LF);qhe=n(i$e,"STRONG",{});var Hgt=s(qhe);fXo=r(Hgt,"megatron-bert"),Hgt.forEach(t),mXo=r(i$e," \u2014 "),jV=n(i$e,"A",{href:!0});var Ugt=s(jV);gXo=r(Ugt,"MegatronBertForQuestionAnswering"),Ugt.forEach(t),hXo=r(i$e," (MegatronBert model)"),i$e.forEach(t),pXo=i(X),xF=n(X,"LI",{});var d$e=s(xF);Nhe=n(d$e,"STRONG",{});var Jgt=s(Nhe);uXo=r(Jgt,"mobilebert"),Jgt.forEach(t),_Xo=r(d$e," \u2014 "),DV=n(d$e,"A",{href:!0});var Ygt=s(DV);bXo=r(Ygt,"MobileBertForQuestionAnswering"),Ygt.forEach(t),vXo=r(d$e," (MobileBERT model)"),d$e.forEach(t),FXo=i(X),$F=n(X,"LI",{});var c$e=s($F);jhe=n(c$e,"STRONG",{});var Kgt=s(jhe);TXo=r(Kgt,"mpnet"),Kgt.forEach(t),MXo=r(c$e," \u2014 "),GV=n(c$e,"A",{href:!0});var Zgt=s(GV);EXo=r(Zgt,"MPNetForQuestionAnswering"),Zgt.forEach(t),CXo=r(c$e," (MPNet model)"),c$e.forEach(t),wXo=i(X),kF=n(X,"LI",{});var f$e=s(kF);Dhe=n(f$e,"STRONG",{});var eht=s(Dhe);AXo=r(eht,"nystromformer"),eht.forEach(t),yXo=r(f$e," \u2014 "),OV=n(f$e,"A",{href:!0});var oht=s(OV);LXo=r(oht,"NystromformerForQuestionAnswering"),oht.forEach(t),xXo=r(f$e," (Nystromformer model)"),f$e.forEach(t),$Xo=i(X),SF=n(X,"LI",{});var m$e=s(SF);Ghe=n(m$e,"STRONG",{});var rht=s(Ghe);kXo=r(rht,"qdqbert"),rht.forEach(t),SXo=r(m$e," \u2014 "),VV=n(m$e,"A",{href:!0});var tht=s(VV);RXo=r(tht,"QDQBertForQuestionAnswering"),tht.forEach(t),PXo=r(m$e," (QDQBert model)"),m$e.forEach(t),BXo=i(X),RF=n(X,"LI",{});var g$e=s(RF);Ohe=n(g$e,"STRONG",{});var aht=s(Ohe);IXo=r(aht,"reformer"),aht.forEach(t),qXo=r(g$e," \u2014 "),XV=n(g$e,"A",{href:!0});var nht=s(XV);NXo=r(nht,"ReformerForQuestionAnswering"),nht.forEach(t),jXo=r(g$e," (Reformer model)"),g$e.forEach(t),DXo=i(X),PF=n(X,"LI",{});var h$e=s(PF);Vhe=n(h$e,"STRONG",{});var sht=s(Vhe);GXo=r(sht,"rembert"),sht.forEach(t),OXo=r(h$e," \u2014 "),zV=n(h$e,"A",{href:!0});var lht=s(zV);VXo=r(lht,"RemBertForQuestionAnswering"),lht.forEach(t),XXo=r(h$e," (RemBERT model)"),h$e.forEach(t),zXo=i(X),BF=n(X,"LI",{});var p$e=s(BF);Xhe=n(p$e,"STRONG",{});var iht=s(Xhe);WXo=r(iht,"roberta"),iht.forEach(t),QXo=r(p$e," \u2014 "),WV=n(p$e,"A",{href:!0});var dht=s(WV);HXo=r(dht,"RobertaForQuestionAnswering"),dht.forEach(t),UXo=r(p$e," (RoBERTa model)"),p$e.forEach(t),JXo=i(X),IF=n(X,"LI",{});var u$e=s(IF);zhe=n(u$e,"STRONG",{});var cht=s(zhe);YXo=r(cht,"roformer"),cht.forEach(t),KXo=r(u$e," \u2014 "),QV=n(u$e,"A",{href:!0});var fht=s(QV);ZXo=r(fht,"RoFormerForQuestionAnswering"),fht.forEach(t),ezo=r(u$e," (RoFormer model)"),u$e.forEach(t),ozo=i(X),qF=n(X,"LI",{});var _$e=s(qF);Whe=n(_$e,"STRONG",{});var mht=s(Whe);rzo=r(mht,"splinter"),mht.forEach(t),tzo=r(_$e," \u2014 "),HV=n(_$e,"A",{href:!0});var ght=s(HV);azo=r(ght,"SplinterForQuestionAnswering"),ght.forEach(t),nzo=r(_$e," (Splinter model)"),_$e.forEach(t),szo=i(X),NF=n(X,"LI",{});var b$e=s(NF);Qhe=n(b$e,"STRONG",{});var hht=s(Qhe);lzo=r(hht,"squeezebert"),hht.forEach(t),izo=r(b$e," \u2014 "),UV=n(b$e,"A",{href:!0});var pht=s(UV);dzo=r(pht,"SqueezeBertForQuestionAnswering"),pht.forEach(t),czo=r(b$e," (SqueezeBERT model)"),b$e.forEach(t),fzo=i(X),jF=n(X,"LI",{});var v$e=s(jF);Hhe=n(v$e,"STRONG",{});var uht=s(Hhe);mzo=r(uht,"xlm"),uht.forEach(t),gzo=r(v$e," \u2014 "),JV=n(v$e,"A",{href:!0});var _ht=s(JV);hzo=r(_ht,"XLMForQuestionAnsweringSimple"),_ht.forEach(t),pzo=r(v$e," (XLM model)"),v$e.forEach(t),uzo=i(X),DF=n(X,"LI",{});var F$e=s(DF);Uhe=n(F$e,"STRONG",{});var bht=s(Uhe);_zo=r(bht,"xlm-roberta"),bht.forEach(t),bzo=r(F$e," \u2014 "),YV=n(F$e,"A",{href:!0});var vht=s(YV);vzo=r(vht,"XLMRobertaForQuestionAnswering"),vht.forEach(t),Fzo=r(F$e," (XLM-RoBERTa model)"),F$e.forEach(t),Tzo=i(X),GF=n(X,"LI",{});var T$e=s(GF);Jhe=n(T$e,"STRONG",{});var Fht=s(Jhe);Mzo=r(Fht,"xlm-roberta-xl"),Fht.forEach(t),Ezo=r(T$e," \u2014 "),KV=n(T$e,"A",{href:!0});var Tht=s(KV);Czo=r(Tht,"XLMRobertaXLForQuestionAnswering"),Tht.forEach(t),wzo=r(T$e," (XLM-RoBERTa-XL model)"),T$e.forEach(t),Azo=i(X),OF=n(X,"LI",{});var M$e=s(OF);Yhe=n(M$e,"STRONG",{});var Mht=s(Yhe);yzo=r(Mht,"xlnet"),Mht.forEach(t),Lzo=r(M$e," \u2014 "),ZV=n(M$e,"A",{href:!0});var Eht=s(ZV);xzo=r(Eht,"XLNetForQuestionAnsweringSimple"),Eht.forEach(t),$zo=r(M$e," (XLNet model)"),M$e.forEach(t),kzo=i(X),VF=n(X,"LI",{});var E$e=s(VF);Khe=n(E$e,"STRONG",{});var Cht=s(Khe);Szo=r(Cht,"yoso"),Cht.forEach(t),Rzo=r(E$e," \u2014 "),eX=n(E$e,"A",{href:!0});var wht=s(eX);Pzo=r(wht,"YosoForQuestionAnswering"),wht.forEach(t),Bzo=r(E$e," (YOSO model)"),E$e.forEach(t),X.forEach(t),Izo=i(ga),XF=n(ga,"P",{});var C$e=s(XF);qzo=r(C$e,"The model is set in evaluation mode by default using "),Zhe=n(C$e,"CODE",{});var Aht=s(Zhe);Nzo=r(Aht,"model.eval()"),Aht.forEach(t),jzo=r(C$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(C$e,"CODE",{});var yht=s(epe);Dzo=r(yht,"model.train()"),yht.forEach(t),C$e.forEach(t),Gzo=i(ga),T(zF.$$.fragment,ga),ga.forEach(t),rl.forEach(t),rNe=i(f),ld=n(f,"H2",{class:!0});var iDe=s(ld);WF=n(iDe,"A",{id:!0,class:!0,href:!0});var Lht=s(WF);ope=n(Lht,"SPAN",{});var xht=s(ope);T(H0.$$.fragment,xht),xht.forEach(t),Lht.forEach(t),Ozo=i(iDe),rpe=n(iDe,"SPAN",{});var $ht=s(rpe);Vzo=r($ht,"AutoModelForTableQuestionAnswering"),$ht.forEach(t),iDe.forEach(t),tNe=i(f),jo=n(f,"DIV",{class:!0});var tl=s(jo);T(U0.$$.fragment,tl),Xzo=i(tl),id=n(tl,"P",{});var wZ=s(id);zzo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oX=n(wZ,"A",{href:!0});var kht=s(oX);Wzo=r(kht,"from_pretrained()"),kht.forEach(t),Qzo=r(wZ," class method or the "),rX=n(wZ,"A",{href:!0});var Sht=s(rX);Hzo=r(Sht,"from_config()"),Sht.forEach(t),Uzo=r(wZ,` class
method.`),wZ.forEach(t),Jzo=i(tl),J0=n(tl,"P",{});var dDe=s(J0);Yzo=r(dDe,"This class cannot be instantiated directly using "),tpe=n(dDe,"CODE",{});var Rht=s(tpe);Kzo=r(Rht,"__init__()"),Rht.forEach(t),Zzo=r(dDe," (throws an error)."),dDe.forEach(t),eWo=i(tl),pt=n(tl,"DIV",{class:!0});var H3=s(pt);T(Y0.$$.fragment,H3),oWo=i(H3),ape=n(H3,"P",{});var Pht=s(ape);rWo=r(Pht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pht.forEach(t),tWo=i(H3),dd=n(H3,"P",{});var AZ=s(dd);aWo=r(AZ,`Note:
Loading a model from its configuration file does `),npe=n(AZ,"STRONG",{});var Bht=s(npe);nWo=r(Bht,"not"),Bht.forEach(t),sWo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(AZ,"A",{href:!0});var Iht=s(tX);lWo=r(Iht,"from_pretrained()"),Iht.forEach(t),iWo=r(AZ," to load the model weights."),AZ.forEach(t),dWo=i(H3),T(QF.$$.fragment,H3),H3.forEach(t),cWo=i(tl),so=n(tl,"DIV",{class:!0});var ha=s(so);T(K0.$$.fragment,ha),fWo=i(ha),spe=n(ha,"P",{});var qht=s(spe);mWo=r(qht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qht.forEach(t),gWo=i(ha),Oa=n(ha,"P",{});var U3=s(Oa);hWo=r(U3,"The model class to instantiate is selected based on the "),lpe=n(U3,"CODE",{});var Nht=s(lpe);pWo=r(Nht,"model_type"),Nht.forEach(t),uWo=r(U3,` property of the config object (either
passed as an argument or loaded from `),ipe=n(U3,"CODE",{});var jht=s(ipe);_Wo=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),bWo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(U3,"CODE",{});var Dht=s(dpe);vWo=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),FWo=r(U3,":"),U3.forEach(t),TWo=i(ha),cpe=n(ha,"UL",{});var Ght=s(cpe);HF=n(Ght,"LI",{});var w$e=s(HF);fpe=n(w$e,"STRONG",{});var Oht=s(fpe);MWo=r(Oht,"tapas"),Oht.forEach(t),EWo=r(w$e," \u2014 "),aX=n(w$e,"A",{href:!0});var Vht=s(aX);CWo=r(Vht,"TapasForQuestionAnswering"),Vht.forEach(t),wWo=r(w$e," (TAPAS model)"),w$e.forEach(t),Ght.forEach(t),AWo=i(ha),UF=n(ha,"P",{});var A$e=s(UF);yWo=r(A$e,"The model is set in evaluation mode by default using "),mpe=n(A$e,"CODE",{});var Xht=s(mpe);LWo=r(Xht,"model.eval()"),Xht.forEach(t),xWo=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(A$e,"CODE",{});var zht=s(gpe);$Wo=r(zht,"model.train()"),zht.forEach(t),A$e.forEach(t),kWo=i(ha),T(JF.$$.fragment,ha),ha.forEach(t),tl.forEach(t),aNe=i(f),cd=n(f,"H2",{class:!0});var cDe=s(cd);YF=n(cDe,"A",{id:!0,class:!0,href:!0});var Wht=s(YF);hpe=n(Wht,"SPAN",{});var Qht=s(hpe);T(Z0.$$.fragment,Qht),Qht.forEach(t),Wht.forEach(t),SWo=i(cDe),ppe=n(cDe,"SPAN",{});var Hht=s(ppe);RWo=r(Hht,"AutoModelForImageClassification"),Hht.forEach(t),cDe.forEach(t),nNe=i(f),Do=n(f,"DIV",{class:!0});var al=s(Do);T(ey.$$.fragment,al),PWo=i(al),fd=n(al,"P",{});var yZ=s(fd);BWo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nX=n(yZ,"A",{href:!0});var Uht=s(nX);IWo=r(Uht,"from_pretrained()"),Uht.forEach(t),qWo=r(yZ," class method or the "),sX=n(yZ,"A",{href:!0});var Jht=s(sX);NWo=r(Jht,"from_config()"),Jht.forEach(t),jWo=r(yZ,` class
method.`),yZ.forEach(t),DWo=i(al),oy=n(al,"P",{});var fDe=s(oy);GWo=r(fDe,"This class cannot be instantiated directly using "),upe=n(fDe,"CODE",{});var Yht=s(upe);OWo=r(Yht,"__init__()"),Yht.forEach(t),VWo=r(fDe," (throws an error)."),fDe.forEach(t),XWo=i(al),ut=n(al,"DIV",{class:!0});var J3=s(ut);T(ry.$$.fragment,J3),zWo=i(J3),_pe=n(J3,"P",{});var Kht=s(_pe);WWo=r(Kht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kht.forEach(t),QWo=i(J3),md=n(J3,"P",{});var LZ=s(md);HWo=r(LZ,`Note:
Loading a model from its configuration file does `),bpe=n(LZ,"STRONG",{});var Zht=s(bpe);UWo=r(Zht,"not"),Zht.forEach(t),JWo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(LZ,"A",{href:!0});var ept=s(lX);YWo=r(ept,"from_pretrained()"),ept.forEach(t),KWo=r(LZ," to load the model weights."),LZ.forEach(t),ZWo=i(J3),T(KF.$$.fragment,J3),J3.forEach(t),eQo=i(al),lo=n(al,"DIV",{class:!0});var pa=s(lo);T(ty.$$.fragment,pa),oQo=i(pa),vpe=n(pa,"P",{});var opt=s(vpe);rQo=r(opt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),opt.forEach(t),tQo=i(pa),Va=n(pa,"P",{});var Y3=s(Va);aQo=r(Y3,"The model class to instantiate is selected based on the "),Fpe=n(Y3,"CODE",{});var rpt=s(Fpe);nQo=r(rpt,"model_type"),rpt.forEach(t),sQo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(Y3,"CODE",{});var tpt=s(Tpe);lQo=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),iQo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(Y3,"CODE",{});var apt=s(Mpe);dQo=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),cQo=r(Y3,":"),Y3.forEach(t),fQo=i(pa),Fe=n(pa,"UL",{});var Ee=s(Fe);ZF=n(Ee,"LI",{});var y$e=s(ZF);Epe=n(y$e,"STRONG",{});var npt=s(Epe);mQo=r(npt,"beit"),npt.forEach(t),gQo=r(y$e," \u2014 "),iX=n(y$e,"A",{href:!0});var spt=s(iX);hQo=r(spt,"BeitForImageClassification"),spt.forEach(t),pQo=r(y$e," (BEiT model)"),y$e.forEach(t),uQo=i(Ee),e6=n(Ee,"LI",{});var L$e=s(e6);Cpe=n(L$e,"STRONG",{});var lpt=s(Cpe);_Qo=r(lpt,"convnext"),lpt.forEach(t),bQo=r(L$e," \u2014 "),dX=n(L$e,"A",{href:!0});var ipt=s(dX);vQo=r(ipt,"ConvNextForImageClassification"),ipt.forEach(t),FQo=r(L$e," (ConvNext model)"),L$e.forEach(t),TQo=i(Ee),o6=n(Ee,"LI",{});var x$e=s(o6);wpe=n(x$e,"STRONG",{});var dpt=s(wpe);MQo=r(dpt,"data2vec-vision"),dpt.forEach(t),EQo=r(x$e," \u2014 "),cX=n(x$e,"A",{href:!0});var cpt=s(cX);CQo=r(cpt,"Data2VecVisionForImageClassification"),cpt.forEach(t),wQo=r(x$e," (Data2VecVision model)"),x$e.forEach(t),AQo=i(Ee),Ds=n(Ee,"LI",{});var Q$=s(Ds);Ape=n(Q$,"STRONG",{});var fpt=s(Ape);yQo=r(fpt,"deit"),fpt.forEach(t),LQo=r(Q$," \u2014 "),fX=n(Q$,"A",{href:!0});var mpt=s(fX);xQo=r(mpt,"DeiTForImageClassification"),mpt.forEach(t),$Qo=r(Q$," or "),mX=n(Q$,"A",{href:!0});var gpt=s(mX);kQo=r(gpt,"DeiTForImageClassificationWithTeacher"),gpt.forEach(t),SQo=r(Q$," (DeiT model)"),Q$.forEach(t),RQo=i(Ee),r6=n(Ee,"LI",{});var $$e=s(r6);ype=n($$e,"STRONG",{});var hpt=s(ype);PQo=r(hpt,"imagegpt"),hpt.forEach(t),BQo=r($$e," \u2014 "),gX=n($$e,"A",{href:!0});var ppt=s(gX);IQo=r(ppt,"ImageGPTForImageClassification"),ppt.forEach(t),qQo=r($$e," (ImageGPT model)"),$$e.forEach(t),NQo=i(Ee),_t=n(Ee,"LI",{});var Ef=s(_t);Lpe=n(Ef,"STRONG",{});var upt=s(Lpe);jQo=r(upt,"perceiver"),upt.forEach(t),DQo=r(Ef," \u2014 "),hX=n(Ef,"A",{href:!0});var _pt=s(hX);GQo=r(_pt,"PerceiverForImageClassificationLearned"),_pt.forEach(t),OQo=r(Ef," or "),pX=n(Ef,"A",{href:!0});var bpt=s(pX);VQo=r(bpt,"PerceiverForImageClassificationFourier"),bpt.forEach(t),XQo=r(Ef," or "),uX=n(Ef,"A",{href:!0});var vpt=s(uX);zQo=r(vpt,"PerceiverForImageClassificationConvProcessing"),vpt.forEach(t),WQo=r(Ef," (Perceiver model)"),Ef.forEach(t),QQo=i(Ee),t6=n(Ee,"LI",{});var k$e=s(t6);xpe=n(k$e,"STRONG",{});var Fpt=s(xpe);HQo=r(Fpt,"poolformer"),Fpt.forEach(t),UQo=r(k$e," \u2014 "),_X=n(k$e,"A",{href:!0});var Tpt=s(_X);JQo=r(Tpt,"PoolFormerForImageClassification"),Tpt.forEach(t),YQo=r(k$e," (PoolFormer model)"),k$e.forEach(t),KQo=i(Ee),a6=n(Ee,"LI",{});var S$e=s(a6);$pe=n(S$e,"STRONG",{});var Mpt=s($pe);ZQo=r(Mpt,"regnet"),Mpt.forEach(t),eHo=r(S$e," \u2014 "),bX=n(S$e,"A",{href:!0});var Ept=s(bX);oHo=r(Ept,"RegNetForImageClassification"),Ept.forEach(t),rHo=r(S$e," (RegNet model)"),S$e.forEach(t),tHo=i(Ee),n6=n(Ee,"LI",{});var R$e=s(n6);kpe=n(R$e,"STRONG",{});var Cpt=s(kpe);aHo=r(Cpt,"resnet"),Cpt.forEach(t),nHo=r(R$e," \u2014 "),vX=n(R$e,"A",{href:!0});var wpt=s(vX);sHo=r(wpt,"ResNetForImageClassification"),wpt.forEach(t),lHo=r(R$e," (ResNet model)"),R$e.forEach(t),iHo=i(Ee),s6=n(Ee,"LI",{});var P$e=s(s6);Spe=n(P$e,"STRONG",{});var Apt=s(Spe);dHo=r(Apt,"segformer"),Apt.forEach(t),cHo=r(P$e," \u2014 "),FX=n(P$e,"A",{href:!0});var ypt=s(FX);fHo=r(ypt,"SegformerForImageClassification"),ypt.forEach(t),mHo=r(P$e," (SegFormer model)"),P$e.forEach(t),gHo=i(Ee),l6=n(Ee,"LI",{});var B$e=s(l6);Rpe=n(B$e,"STRONG",{});var Lpt=s(Rpe);hHo=r(Lpt,"swin"),Lpt.forEach(t),pHo=r(B$e," \u2014 "),TX=n(B$e,"A",{href:!0});var xpt=s(TX);uHo=r(xpt,"SwinForImageClassification"),xpt.forEach(t),_Ho=r(B$e," (Swin model)"),B$e.forEach(t),bHo=i(Ee),i6=n(Ee,"LI",{});var I$e=s(i6);Ppe=n(I$e,"STRONG",{});var $pt=s(Ppe);vHo=r($pt,"van"),$pt.forEach(t),FHo=r(I$e," \u2014 "),MX=n(I$e,"A",{href:!0});var kpt=s(MX);THo=r(kpt,"VanForImageClassification"),kpt.forEach(t),MHo=r(I$e," (VAN model)"),I$e.forEach(t),EHo=i(Ee),d6=n(Ee,"LI",{});var q$e=s(d6);Bpe=n(q$e,"STRONG",{});var Spt=s(Bpe);CHo=r(Spt,"vit"),Spt.forEach(t),wHo=r(q$e," \u2014 "),EX=n(q$e,"A",{href:!0});var Rpt=s(EX);AHo=r(Rpt,"ViTForImageClassification"),Rpt.forEach(t),yHo=r(q$e," (ViT model)"),q$e.forEach(t),Ee.forEach(t),LHo=i(pa),c6=n(pa,"P",{});var N$e=s(c6);xHo=r(N$e,"The model is set in evaluation mode by default using "),Ipe=n(N$e,"CODE",{});var Ppt=s(Ipe);$Ho=r(Ppt,"model.eval()"),Ppt.forEach(t),kHo=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(N$e,"CODE",{});var Bpt=s(qpe);SHo=r(Bpt,"model.train()"),Bpt.forEach(t),N$e.forEach(t),RHo=i(pa),T(f6.$$.fragment,pa),pa.forEach(t),al.forEach(t),sNe=i(f),gd=n(f,"H2",{class:!0});var mDe=s(gd);m6=n(mDe,"A",{id:!0,class:!0,href:!0});var Ipt=s(m6);Npe=n(Ipt,"SPAN",{});var qpt=s(Npe);T(ay.$$.fragment,qpt),qpt.forEach(t),Ipt.forEach(t),PHo=i(mDe),jpe=n(mDe,"SPAN",{});var Npt=s(jpe);BHo=r(Npt,"AutoModelForVision2Seq"),Npt.forEach(t),mDe.forEach(t),lNe=i(f),Go=n(f,"DIV",{class:!0});var nl=s(Go);T(ny.$$.fragment,nl),IHo=i(nl),hd=n(nl,"P",{});var xZ=s(hd);qHo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CX=n(xZ,"A",{href:!0});var jpt=s(CX);NHo=r(jpt,"from_pretrained()"),jpt.forEach(t),jHo=r(xZ," class method or the "),wX=n(xZ,"A",{href:!0});var Dpt=s(wX);DHo=r(Dpt,"from_config()"),Dpt.forEach(t),GHo=r(xZ,` class
method.`),xZ.forEach(t),OHo=i(nl),sy=n(nl,"P",{});var gDe=s(sy);VHo=r(gDe,"This class cannot be instantiated directly using "),Dpe=n(gDe,"CODE",{});var Gpt=s(Dpe);XHo=r(Gpt,"__init__()"),Gpt.forEach(t),zHo=r(gDe," (throws an error)."),gDe.forEach(t),WHo=i(nl),bt=n(nl,"DIV",{class:!0});var K3=s(bt);T(ly.$$.fragment,K3),QHo=i(K3),Gpe=n(K3,"P",{});var Opt=s(Gpe);HHo=r(Opt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Opt.forEach(t),UHo=i(K3),pd=n(K3,"P",{});var $Z=s(pd);JHo=r($Z,`Note:
Loading a model from its configuration file does `),Ope=n($Z,"STRONG",{});var Vpt=s(Ope);YHo=r(Vpt,"not"),Vpt.forEach(t),KHo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n($Z,"A",{href:!0});var Xpt=s(AX);ZHo=r(Xpt,"from_pretrained()"),Xpt.forEach(t),eUo=r($Z," to load the model weights."),$Z.forEach(t),oUo=i(K3),T(g6.$$.fragment,K3),K3.forEach(t),rUo=i(nl),io=n(nl,"DIV",{class:!0});var ua=s(io);T(iy.$$.fragment,ua),tUo=i(ua),Vpe=n(ua,"P",{});var zpt=s(Vpe);aUo=r(zpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zpt.forEach(t),nUo=i(ua),Xa=n(ua,"P",{});var Z3=s(Xa);sUo=r(Z3,"The model class to instantiate is selected based on the "),Xpe=n(Z3,"CODE",{});var Wpt=s(Xpe);lUo=r(Wpt,"model_type"),Wpt.forEach(t),iUo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),zpe=n(Z3,"CODE",{});var Qpt=s(zpe);dUo=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),cUo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(Z3,"CODE",{});var Hpt=s(Wpe);fUo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),mUo=r(Z3,":"),Z3.forEach(t),gUo=i(ua),Qpe=n(ua,"UL",{});var Upt=s(Qpe);h6=n(Upt,"LI",{});var j$e=s(h6);Hpe=n(j$e,"STRONG",{});var Jpt=s(Hpe);hUo=r(Jpt,"vision-encoder-decoder"),Jpt.forEach(t),pUo=r(j$e," \u2014 "),yX=n(j$e,"A",{href:!0});var Ypt=s(yX);uUo=r(Ypt,"VisionEncoderDecoderModel"),Ypt.forEach(t),_Uo=r(j$e," (Vision Encoder decoder model)"),j$e.forEach(t),Upt.forEach(t),bUo=i(ua),p6=n(ua,"P",{});var D$e=s(p6);vUo=r(D$e,"The model is set in evaluation mode by default using "),Upe=n(D$e,"CODE",{});var Kpt=s(Upe);FUo=r(Kpt,"model.eval()"),Kpt.forEach(t),TUo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(D$e,"CODE",{});var Zpt=s(Jpe);MUo=r(Zpt,"model.train()"),Zpt.forEach(t),D$e.forEach(t),EUo=i(ua),T(u6.$$.fragment,ua),ua.forEach(t),nl.forEach(t),iNe=i(f),ud=n(f,"H2",{class:!0});var hDe=s(ud);_6=n(hDe,"A",{id:!0,class:!0,href:!0});var eut=s(_6);Ype=n(eut,"SPAN",{});var out=s(Ype);T(dy.$$.fragment,out),out.forEach(t),eut.forEach(t),CUo=i(hDe),Kpe=n(hDe,"SPAN",{});var rut=s(Kpe);wUo=r(rut,"AutoModelForVisualQuestionAnswering"),rut.forEach(t),hDe.forEach(t),dNe=i(f),Oo=n(f,"DIV",{class:!0});var sl=s(Oo);T(cy.$$.fragment,sl),AUo=i(sl),_d=n(sl,"P",{});var kZ=s(_d);yUo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),LX=n(kZ,"A",{href:!0});var tut=s(LX);LUo=r(tut,"from_pretrained()"),tut.forEach(t),xUo=r(kZ," class method or the "),xX=n(kZ,"A",{href:!0});var aut=s(xX);$Uo=r(aut,"from_config()"),aut.forEach(t),kUo=r(kZ,` class
method.`),kZ.forEach(t),SUo=i(sl),fy=n(sl,"P",{});var pDe=s(fy);RUo=r(pDe,"This class cannot be instantiated directly using "),Zpe=n(pDe,"CODE",{});var nut=s(Zpe);PUo=r(nut,"__init__()"),nut.forEach(t),BUo=r(pDe," (throws an error)."),pDe.forEach(t),IUo=i(sl),vt=n(sl,"DIV",{class:!0});var ew=s(vt);T(my.$$.fragment,ew),qUo=i(ew),eue=n(ew,"P",{});var sut=s(eue);NUo=r(sut,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sut.forEach(t),jUo=i(ew),bd=n(ew,"P",{});var SZ=s(bd);DUo=r(SZ,`Note:
Loading a model from its configuration file does `),oue=n(SZ,"STRONG",{});var lut=s(oue);GUo=r(lut,"not"),lut.forEach(t),OUo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(SZ,"A",{href:!0});var iut=s($X);VUo=r(iut,"from_pretrained()"),iut.forEach(t),XUo=r(SZ," to load the model weights."),SZ.forEach(t),zUo=i(ew),T(b6.$$.fragment,ew),ew.forEach(t),WUo=i(sl),co=n(sl,"DIV",{class:!0});var _a=s(co);T(gy.$$.fragment,_a),QUo=i(_a),rue=n(_a,"P",{});var dut=s(rue);HUo=r(dut,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),dut.forEach(t),UUo=i(_a),za=n(_a,"P",{});var ow=s(za);JUo=r(ow,"The model class to instantiate is selected based on the "),tue=n(ow,"CODE",{});var cut=s(tue);YUo=r(cut,"model_type"),cut.forEach(t),KUo=r(ow,` property of the config object (either
passed as an argument or loaded from `),aue=n(ow,"CODE",{});var fut=s(aue);ZUo=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),eJo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(ow,"CODE",{});var mut=s(nue);oJo=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),rJo=r(ow,":"),ow.forEach(t),tJo=i(_a),sue=n(_a,"UL",{});var gut=s(sue);v6=n(gut,"LI",{});var G$e=s(v6);lue=n(G$e,"STRONG",{});var hut=s(lue);aJo=r(hut,"vilt"),hut.forEach(t),nJo=r(G$e," \u2014 "),kX=n(G$e,"A",{href:!0});var put=s(kX);sJo=r(put,"ViltForQuestionAnswering"),put.forEach(t),lJo=r(G$e," (ViLT model)"),G$e.forEach(t),gut.forEach(t),iJo=i(_a),F6=n(_a,"P",{});var O$e=s(F6);dJo=r(O$e,"The model is set in evaluation mode by default using "),iue=n(O$e,"CODE",{});var uut=s(iue);cJo=r(uut,"model.eval()"),uut.forEach(t),fJo=r(O$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=n(O$e,"CODE",{});var _ut=s(due);mJo=r(_ut,"model.train()"),_ut.forEach(t),O$e.forEach(t),gJo=i(_a),T(T6.$$.fragment,_a),_a.forEach(t),sl.forEach(t),cNe=i(f),vd=n(f,"H2",{class:!0});var uDe=s(vd);M6=n(uDe,"A",{id:!0,class:!0,href:!0});var but=s(M6);cue=n(but,"SPAN",{});var vut=s(cue);T(hy.$$.fragment,vut),vut.forEach(t),but.forEach(t),hJo=i(uDe),fue=n(uDe,"SPAN",{});var Fut=s(fue);pJo=r(Fut,"AutoModelForAudioClassification"),Fut.forEach(t),uDe.forEach(t),fNe=i(f),Vo=n(f,"DIV",{class:!0});var ll=s(Vo);T(py.$$.fragment,ll),uJo=i(ll),Fd=n(ll,"P",{});var RZ=s(Fd);_Jo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SX=n(RZ,"A",{href:!0});var Tut=s(SX);bJo=r(Tut,"from_pretrained()"),Tut.forEach(t),vJo=r(RZ," class method or the "),RX=n(RZ,"A",{href:!0});var Mut=s(RX);FJo=r(Mut,"from_config()"),Mut.forEach(t),TJo=r(RZ,` class
method.`),RZ.forEach(t),MJo=i(ll),uy=n(ll,"P",{});var _De=s(uy);EJo=r(_De,"This class cannot be instantiated directly using "),mue=n(_De,"CODE",{});var Eut=s(mue);CJo=r(Eut,"__init__()"),Eut.forEach(t),wJo=r(_De," (throws an error)."),_De.forEach(t),AJo=i(ll),Ft=n(ll,"DIV",{class:!0});var rw=s(Ft);T(_y.$$.fragment,rw),yJo=i(rw),gue=n(rw,"P",{});var Cut=s(gue);LJo=r(Cut,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cut.forEach(t),xJo=i(rw),Td=n(rw,"P",{});var PZ=s(Td);$Jo=r(PZ,`Note:
Loading a model from its configuration file does `),hue=n(PZ,"STRONG",{});var wut=s(hue);kJo=r(wut,"not"),wut.forEach(t),SJo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(PZ,"A",{href:!0});var Aut=s(PX);RJo=r(Aut,"from_pretrained()"),Aut.forEach(t),PJo=r(PZ," to load the model weights."),PZ.forEach(t),BJo=i(rw),T(E6.$$.fragment,rw),rw.forEach(t),IJo=i(ll),fo=n(ll,"DIV",{class:!0});var ba=s(fo);T(by.$$.fragment,ba),qJo=i(ba),pue=n(ba,"P",{});var yut=s(pue);NJo=r(yut,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yut.forEach(t),jJo=i(ba),Wa=n(ba,"P",{});var tw=s(Wa);DJo=r(tw,"The model class to instantiate is selected based on the "),uue=n(tw,"CODE",{});var Lut=s(uue);GJo=r(Lut,"model_type"),Lut.forEach(t),OJo=r(tw,` property of the config object (either
passed as an argument or loaded from `),_ue=n(tw,"CODE",{});var xut=s(_ue);VJo=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),XJo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(tw,"CODE",{});var $ut=s(bue);zJo=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),WJo=r(tw,":"),tw.forEach(t),QJo=i(ba),ke=n(ba,"UL",{});var Oe=s(ke);C6=n(Oe,"LI",{});var V$e=s(C6);vue=n(V$e,"STRONG",{});var kut=s(vue);HJo=r(kut,"data2vec-audio"),kut.forEach(t),UJo=r(V$e," \u2014 "),BX=n(V$e,"A",{href:!0});var Sut=s(BX);JJo=r(Sut,"Data2VecAudioForSequenceClassification"),Sut.forEach(t),YJo=r(V$e," (Data2VecAudio model)"),V$e.forEach(t),KJo=i(Oe),w6=n(Oe,"LI",{});var X$e=s(w6);Fue=n(X$e,"STRONG",{});var Rut=s(Fue);ZJo=r(Rut,"hubert"),Rut.forEach(t),eYo=r(X$e," \u2014 "),IX=n(X$e,"A",{href:!0});var Put=s(IX);oYo=r(Put,"HubertForSequenceClassification"),Put.forEach(t),rYo=r(X$e," (Hubert model)"),X$e.forEach(t),tYo=i(Oe),A6=n(Oe,"LI",{});var z$e=s(A6);Tue=n(z$e,"STRONG",{});var But=s(Tue);aYo=r(But,"sew"),But.forEach(t),nYo=r(z$e," \u2014 "),qX=n(z$e,"A",{href:!0});var Iut=s(qX);sYo=r(Iut,"SEWForSequenceClassification"),Iut.forEach(t),lYo=r(z$e," (SEW model)"),z$e.forEach(t),iYo=i(Oe),y6=n(Oe,"LI",{});var W$e=s(y6);Mue=n(W$e,"STRONG",{});var qut=s(Mue);dYo=r(qut,"sew-d"),qut.forEach(t),cYo=r(W$e," \u2014 "),NX=n(W$e,"A",{href:!0});var Nut=s(NX);fYo=r(Nut,"SEWDForSequenceClassification"),Nut.forEach(t),mYo=r(W$e," (SEW-D model)"),W$e.forEach(t),gYo=i(Oe),L6=n(Oe,"LI",{});var Q$e=s(L6);Eue=n(Q$e,"STRONG",{});var jut=s(Eue);hYo=r(jut,"unispeech"),jut.forEach(t),pYo=r(Q$e," \u2014 "),jX=n(Q$e,"A",{href:!0});var Dut=s(jX);uYo=r(Dut,"UniSpeechForSequenceClassification"),Dut.forEach(t),_Yo=r(Q$e," (UniSpeech model)"),Q$e.forEach(t),bYo=i(Oe),x6=n(Oe,"LI",{});var H$e=s(x6);Cue=n(H$e,"STRONG",{});var Gut=s(Cue);vYo=r(Gut,"unispeech-sat"),Gut.forEach(t),FYo=r(H$e," \u2014 "),DX=n(H$e,"A",{href:!0});var Out=s(DX);TYo=r(Out,"UniSpeechSatForSequenceClassification"),Out.forEach(t),MYo=r(H$e," (UniSpeechSat model)"),H$e.forEach(t),EYo=i(Oe),$6=n(Oe,"LI",{});var U$e=s($6);wue=n(U$e,"STRONG",{});var Vut=s(wue);CYo=r(Vut,"wav2vec2"),Vut.forEach(t),wYo=r(U$e," \u2014 "),GX=n(U$e,"A",{href:!0});var Xut=s(GX);AYo=r(Xut,"Wav2Vec2ForSequenceClassification"),Xut.forEach(t),yYo=r(U$e," (Wav2Vec2 model)"),U$e.forEach(t),LYo=i(Oe),k6=n(Oe,"LI",{});var J$e=s(k6);Aue=n(J$e,"STRONG",{});var zut=s(Aue);xYo=r(zut,"wav2vec2-conformer"),zut.forEach(t),$Yo=r(J$e," \u2014 "),OX=n(J$e,"A",{href:!0});var Wut=s(OX);kYo=r(Wut,"Wav2Vec2ConformerForSequenceClassification"),Wut.forEach(t),SYo=r(J$e," (Wav2Vec2-Conformer model)"),J$e.forEach(t),RYo=i(Oe),S6=n(Oe,"LI",{});var Y$e=s(S6);yue=n(Y$e,"STRONG",{});var Qut=s(yue);PYo=r(Qut,"wavlm"),Qut.forEach(t),BYo=r(Y$e," \u2014 "),VX=n(Y$e,"A",{href:!0});var Hut=s(VX);IYo=r(Hut,"WavLMForSequenceClassification"),Hut.forEach(t),qYo=r(Y$e," (WavLM model)"),Y$e.forEach(t),Oe.forEach(t),NYo=i(ba),R6=n(ba,"P",{});var K$e=s(R6);jYo=r(K$e,"The model is set in evaluation mode by default using "),Lue=n(K$e,"CODE",{});var Uut=s(Lue);DYo=r(Uut,"model.eval()"),Uut.forEach(t),GYo=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(K$e,"CODE",{});var Jut=s(xue);OYo=r(Jut,"model.train()"),Jut.forEach(t),K$e.forEach(t),VYo=i(ba),T(P6.$$.fragment,ba),ba.forEach(t),ll.forEach(t),mNe=i(f),Md=n(f,"H2",{class:!0});var bDe=s(Md);B6=n(bDe,"A",{id:!0,class:!0,href:!0});var Yut=s(B6);$ue=n(Yut,"SPAN",{});var Kut=s($ue);T(vy.$$.fragment,Kut),Kut.forEach(t),Yut.forEach(t),XYo=i(bDe),kue=n(bDe,"SPAN",{});var Zut=s(kue);zYo=r(Zut,"AutoModelForAudioFrameClassification"),Zut.forEach(t),bDe.forEach(t),gNe=i(f),Xo=n(f,"DIV",{class:!0});var il=s(Xo);T(Fy.$$.fragment,il),WYo=i(il),Ed=n(il,"P",{});var BZ=s(Ed);QYo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XX=n(BZ,"A",{href:!0});var e_t=s(XX);HYo=r(e_t,"from_pretrained()"),e_t.forEach(t),UYo=r(BZ," class method or the "),zX=n(BZ,"A",{href:!0});var o_t=s(zX);JYo=r(o_t,"from_config()"),o_t.forEach(t),YYo=r(BZ,` class
method.`),BZ.forEach(t),KYo=i(il),Ty=n(il,"P",{});var vDe=s(Ty);ZYo=r(vDe,"This class cannot be instantiated directly using "),Sue=n(vDe,"CODE",{});var r_t=s(Sue);eKo=r(r_t,"__init__()"),r_t.forEach(t),oKo=r(vDe," (throws an error)."),vDe.forEach(t),rKo=i(il),Tt=n(il,"DIV",{class:!0});var aw=s(Tt);T(My.$$.fragment,aw),tKo=i(aw),Rue=n(aw,"P",{});var t_t=s(Rue);aKo=r(t_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),t_t.forEach(t),nKo=i(aw),Cd=n(aw,"P",{});var IZ=s(Cd);sKo=r(IZ,`Note:
Loading a model from its configuration file does `),Pue=n(IZ,"STRONG",{});var a_t=s(Pue);lKo=r(a_t,"not"),a_t.forEach(t),iKo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(IZ,"A",{href:!0});var n_t=s(WX);dKo=r(n_t,"from_pretrained()"),n_t.forEach(t),cKo=r(IZ," to load the model weights."),IZ.forEach(t),fKo=i(aw),T(I6.$$.fragment,aw),aw.forEach(t),mKo=i(il),mo=n(il,"DIV",{class:!0});var va=s(mo);T(Ey.$$.fragment,va),gKo=i(va),Bue=n(va,"P",{});var s_t=s(Bue);hKo=r(s_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),s_t.forEach(t),pKo=i(va),Qa=n(va,"P",{});var nw=s(Qa);uKo=r(nw,"The model class to instantiate is selected based on the "),Iue=n(nw,"CODE",{});var l_t=s(Iue);_Ko=r(l_t,"model_type"),l_t.forEach(t),bKo=r(nw,` property of the config object (either
passed as an argument or loaded from `),que=n(nw,"CODE",{});var i_t=s(que);vKo=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),FKo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(nw,"CODE",{});var d_t=s(Nue);TKo=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),MKo=r(nw,":"),nw.forEach(t),EKo=i(va),et=n(va,"UL",{});var dl=s(et);q6=n(dl,"LI",{});var Z$e=s(q6);jue=n(Z$e,"STRONG",{});var c_t=s(jue);CKo=r(c_t,"data2vec-audio"),c_t.forEach(t),wKo=r(Z$e," \u2014 "),QX=n(Z$e,"A",{href:!0});var f_t=s(QX);AKo=r(f_t,"Data2VecAudioForAudioFrameClassification"),f_t.forEach(t),yKo=r(Z$e," (Data2VecAudio model)"),Z$e.forEach(t),LKo=i(dl),N6=n(dl,"LI",{});var eke=s(N6);Due=n(eke,"STRONG",{});var m_t=s(Due);xKo=r(m_t,"unispeech-sat"),m_t.forEach(t),$Ko=r(eke," \u2014 "),HX=n(eke,"A",{href:!0});var g_t=s(HX);kKo=r(g_t,"UniSpeechSatForAudioFrameClassification"),g_t.forEach(t),SKo=r(eke," (UniSpeechSat model)"),eke.forEach(t),RKo=i(dl),j6=n(dl,"LI",{});var oke=s(j6);Gue=n(oke,"STRONG",{});var h_t=s(Gue);PKo=r(h_t,"wav2vec2"),h_t.forEach(t),BKo=r(oke," \u2014 "),UX=n(oke,"A",{href:!0});var p_t=s(UX);IKo=r(p_t,"Wav2Vec2ForAudioFrameClassification"),p_t.forEach(t),qKo=r(oke," (Wav2Vec2 model)"),oke.forEach(t),NKo=i(dl),D6=n(dl,"LI",{});var rke=s(D6);Oue=n(rke,"STRONG",{});var u_t=s(Oue);jKo=r(u_t,"wav2vec2-conformer"),u_t.forEach(t),DKo=r(rke," \u2014 "),JX=n(rke,"A",{href:!0});var __t=s(JX);GKo=r(__t,"Wav2Vec2ConformerForAudioFrameClassification"),__t.forEach(t),OKo=r(rke," (Wav2Vec2-Conformer model)"),rke.forEach(t),VKo=i(dl),G6=n(dl,"LI",{});var tke=s(G6);Vue=n(tke,"STRONG",{});var b_t=s(Vue);XKo=r(b_t,"wavlm"),b_t.forEach(t),zKo=r(tke," \u2014 "),YX=n(tke,"A",{href:!0});var v_t=s(YX);WKo=r(v_t,"WavLMForAudioFrameClassification"),v_t.forEach(t),QKo=r(tke," (WavLM model)"),tke.forEach(t),dl.forEach(t),HKo=i(va),O6=n(va,"P",{});var ake=s(O6);UKo=r(ake,"The model is set in evaluation mode by default using "),Xue=n(ake,"CODE",{});var F_t=s(Xue);JKo=r(F_t,"model.eval()"),F_t.forEach(t),YKo=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(ake,"CODE",{});var T_t=s(zue);KKo=r(T_t,"model.train()"),T_t.forEach(t),ake.forEach(t),ZKo=i(va),T(V6.$$.fragment,va),va.forEach(t),il.forEach(t),hNe=i(f),wd=n(f,"H2",{class:!0});var FDe=s(wd);X6=n(FDe,"A",{id:!0,class:!0,href:!0});var M_t=s(X6);Wue=n(M_t,"SPAN",{});var E_t=s(Wue);T(Cy.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),eZo=i(FDe),Que=n(FDe,"SPAN",{});var C_t=s(Que);oZo=r(C_t,"AutoModelForCTC"),C_t.forEach(t),FDe.forEach(t),pNe=i(f),zo=n(f,"DIV",{class:!0});var cl=s(zo);T(wy.$$.fragment,cl),rZo=i(cl),Ad=n(cl,"P",{});var qZ=s(Ad);tZo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KX=n(qZ,"A",{href:!0});var w_t=s(KX);aZo=r(w_t,"from_pretrained()"),w_t.forEach(t),nZo=r(qZ," class method or the "),ZX=n(qZ,"A",{href:!0});var A_t=s(ZX);sZo=r(A_t,"from_config()"),A_t.forEach(t),lZo=r(qZ,` class
method.`),qZ.forEach(t),iZo=i(cl),Ay=n(cl,"P",{});var TDe=s(Ay);dZo=r(TDe,"This class cannot be instantiated directly using "),Hue=n(TDe,"CODE",{});var y_t=s(Hue);cZo=r(y_t,"__init__()"),y_t.forEach(t),fZo=r(TDe," (throws an error)."),TDe.forEach(t),mZo=i(cl),Mt=n(cl,"DIV",{class:!0});var sw=s(Mt);T(yy.$$.fragment,sw),gZo=i(sw),Uue=n(sw,"P",{});var L_t=s(Uue);hZo=r(L_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),L_t.forEach(t),pZo=i(sw),yd=n(sw,"P",{});var NZ=s(yd);uZo=r(NZ,`Note:
Loading a model from its configuration file does `),Jue=n(NZ,"STRONG",{});var x_t=s(Jue);_Zo=r(x_t,"not"),x_t.forEach(t),bZo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(NZ,"A",{href:!0});var $_t=s(ez);vZo=r($_t,"from_pretrained()"),$_t.forEach(t),FZo=r(NZ," to load the model weights."),NZ.forEach(t),TZo=i(sw),T(z6.$$.fragment,sw),sw.forEach(t),MZo=i(cl),go=n(cl,"DIV",{class:!0});var Fa=s(go);T(Ly.$$.fragment,Fa),EZo=i(Fa),Yue=n(Fa,"P",{});var k_t=s(Yue);CZo=r(k_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),k_t.forEach(t),wZo=i(Fa),Ha=n(Fa,"P",{});var lw=s(Ha);AZo=r(lw,"The model class to instantiate is selected based on the "),Kue=n(lw,"CODE",{});var S_t=s(Kue);yZo=r(S_t,"model_type"),S_t.forEach(t),LZo=r(lw,` property of the config object (either
passed as an argument or loaded from `),Zue=n(lw,"CODE",{});var R_t=s(Zue);xZo=r(R_t,"pretrained_model_name_or_path"),R_t.forEach(t),$Zo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(lw,"CODE",{});var P_t=s(e_e);kZo=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),SZo=r(lw,":"),lw.forEach(t),RZo=i(Fa),Se=n(Fa,"UL",{});var Ve=s(Se);W6=n(Ve,"LI",{});var nke=s(W6);o_e=n(nke,"STRONG",{});var B_t=s(o_e);PZo=r(B_t,"data2vec-audio"),B_t.forEach(t),BZo=r(nke," \u2014 "),oz=n(nke,"A",{href:!0});var I_t=s(oz);IZo=r(I_t,"Data2VecAudioForCTC"),I_t.forEach(t),qZo=r(nke," (Data2VecAudio model)"),nke.forEach(t),NZo=i(Ve),Q6=n(Ve,"LI",{});var ske=s(Q6);r_e=n(ske,"STRONG",{});var q_t=s(r_e);jZo=r(q_t,"hubert"),q_t.forEach(t),DZo=r(ske," \u2014 "),rz=n(ske,"A",{href:!0});var N_t=s(rz);GZo=r(N_t,"HubertForCTC"),N_t.forEach(t),OZo=r(ske," (Hubert model)"),ske.forEach(t),VZo=i(Ve),H6=n(Ve,"LI",{});var lke=s(H6);t_e=n(lke,"STRONG",{});var j_t=s(t_e);XZo=r(j_t,"sew"),j_t.forEach(t),zZo=r(lke," \u2014 "),tz=n(lke,"A",{href:!0});var D_t=s(tz);WZo=r(D_t,"SEWForCTC"),D_t.forEach(t),QZo=r(lke," (SEW model)"),lke.forEach(t),HZo=i(Ve),U6=n(Ve,"LI",{});var ike=s(U6);a_e=n(ike,"STRONG",{});var G_t=s(a_e);UZo=r(G_t,"sew-d"),G_t.forEach(t),JZo=r(ike," \u2014 "),az=n(ike,"A",{href:!0});var O_t=s(az);YZo=r(O_t,"SEWDForCTC"),O_t.forEach(t),KZo=r(ike," (SEW-D model)"),ike.forEach(t),ZZo=i(Ve),J6=n(Ve,"LI",{});var dke=s(J6);n_e=n(dke,"STRONG",{});var V_t=s(n_e);eer=r(V_t,"unispeech"),V_t.forEach(t),oer=r(dke," \u2014 "),nz=n(dke,"A",{href:!0});var X_t=s(nz);rer=r(X_t,"UniSpeechForCTC"),X_t.forEach(t),ter=r(dke," (UniSpeech model)"),dke.forEach(t),aer=i(Ve),Y6=n(Ve,"LI",{});var cke=s(Y6);s_e=n(cke,"STRONG",{});var z_t=s(s_e);ner=r(z_t,"unispeech-sat"),z_t.forEach(t),ser=r(cke," \u2014 "),sz=n(cke,"A",{href:!0});var W_t=s(sz);ler=r(W_t,"UniSpeechSatForCTC"),W_t.forEach(t),ier=r(cke," (UniSpeechSat model)"),cke.forEach(t),der=i(Ve),K6=n(Ve,"LI",{});var fke=s(K6);l_e=n(fke,"STRONG",{});var Q_t=s(l_e);cer=r(Q_t,"wav2vec2"),Q_t.forEach(t),fer=r(fke," \u2014 "),lz=n(fke,"A",{href:!0});var H_t=s(lz);mer=r(H_t,"Wav2Vec2ForCTC"),H_t.forEach(t),ger=r(fke," (Wav2Vec2 model)"),fke.forEach(t),her=i(Ve),Z6=n(Ve,"LI",{});var mke=s(Z6);i_e=n(mke,"STRONG",{});var U_t=s(i_e);per=r(U_t,"wav2vec2-conformer"),U_t.forEach(t),uer=r(mke," \u2014 "),iz=n(mke,"A",{href:!0});var J_t=s(iz);_er=r(J_t,"Wav2Vec2ConformerForCTC"),J_t.forEach(t),ber=r(mke," (Wav2Vec2-Conformer model)"),mke.forEach(t),ver=i(Ve),eT=n(Ve,"LI",{});var gke=s(eT);d_e=n(gke,"STRONG",{});var Y_t=s(d_e);Fer=r(Y_t,"wavlm"),Y_t.forEach(t),Ter=r(gke," \u2014 "),dz=n(gke,"A",{href:!0});var K_t=s(dz);Mer=r(K_t,"WavLMForCTC"),K_t.forEach(t),Eer=r(gke," (WavLM model)"),gke.forEach(t),Ve.forEach(t),Cer=i(Fa),oT=n(Fa,"P",{});var hke=s(oT);wer=r(hke,"The model is set in evaluation mode by default using "),c_e=n(hke,"CODE",{});var Z_t=s(c_e);Aer=r(Z_t,"model.eval()"),Z_t.forEach(t),yer=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(hke,"CODE",{});var e2t=s(f_e);Ler=r(e2t,"model.train()"),e2t.forEach(t),hke.forEach(t),xer=i(Fa),T(rT.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),uNe=i(f),Ld=n(f,"H2",{class:!0});var MDe=s(Ld);tT=n(MDe,"A",{id:!0,class:!0,href:!0});var o2t=s(tT);m_e=n(o2t,"SPAN",{});var r2t=s(m_e);T(xy.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),$er=i(MDe),g_e=n(MDe,"SPAN",{});var t2t=s(g_e);ker=r(t2t,"AutoModelForSpeechSeq2Seq"),t2t.forEach(t),MDe.forEach(t),_Ne=i(f),Wo=n(f,"DIV",{class:!0});var fl=s(Wo);T($y.$$.fragment,fl),Ser=i(fl),xd=n(fl,"P",{});var jZ=s(xd);Rer=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cz=n(jZ,"A",{href:!0});var a2t=s(cz);Per=r(a2t,"from_pretrained()"),a2t.forEach(t),Ber=r(jZ," class method or the "),fz=n(jZ,"A",{href:!0});var n2t=s(fz);Ier=r(n2t,"from_config()"),n2t.forEach(t),qer=r(jZ,` class
method.`),jZ.forEach(t),Ner=i(fl),ky=n(fl,"P",{});var EDe=s(ky);jer=r(EDe,"This class cannot be instantiated directly using "),h_e=n(EDe,"CODE",{});var s2t=s(h_e);Der=r(s2t,"__init__()"),s2t.forEach(t),Ger=r(EDe," (throws an error)."),EDe.forEach(t),Oer=i(fl),Et=n(fl,"DIV",{class:!0});var iw=s(Et);T(Sy.$$.fragment,iw),Ver=i(iw),p_e=n(iw,"P",{});var l2t=s(p_e);Xer=r(l2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),l2t.forEach(t),zer=i(iw),$d=n(iw,"P",{});var DZ=s($d);Wer=r(DZ,`Note:
Loading a model from its configuration file does `),u_e=n(DZ,"STRONG",{});var i2t=s(u_e);Qer=r(i2t,"not"),i2t.forEach(t),Her=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(DZ,"A",{href:!0});var d2t=s(mz);Uer=r(d2t,"from_pretrained()"),d2t.forEach(t),Jer=r(DZ," to load the model weights."),DZ.forEach(t),Yer=i(iw),T(aT.$$.fragment,iw),iw.forEach(t),Ker=i(fl),ho=n(fl,"DIV",{class:!0});var Ta=s(ho);T(Ry.$$.fragment,Ta),Zer=i(Ta),__e=n(Ta,"P",{});var c2t=s(__e);eor=r(c2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),c2t.forEach(t),oor=i(Ta),Ua=n(Ta,"P",{});var dw=s(Ua);ror=r(dw,"The model class to instantiate is selected based on the "),b_e=n(dw,"CODE",{});var f2t=s(b_e);tor=r(f2t,"model_type"),f2t.forEach(t),aor=r(dw,` property of the config object (either
passed as an argument or loaded from `),v_e=n(dw,"CODE",{});var m2t=s(v_e);nor=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),sor=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(dw,"CODE",{});var g2t=s(F_e);lor=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),ior=r(dw,":"),dw.forEach(t),dor=i(Ta),Py=n(Ta,"UL",{});var CDe=s(Py);nT=n(CDe,"LI",{});var pke=s(nT);T_e=n(pke,"STRONG",{});var h2t=s(T_e);cor=r(h2t,"speech-encoder-decoder"),h2t.forEach(t),mor=r(pke," \u2014 "),gz=n(pke,"A",{href:!0});var p2t=s(gz);gor=r(p2t,"SpeechEncoderDecoderModel"),p2t.forEach(t),hor=r(pke," (Speech Encoder decoder model)"),pke.forEach(t),por=i(CDe),sT=n(CDe,"LI",{});var uke=s(sT);M_e=n(uke,"STRONG",{});var u2t=s(M_e);uor=r(u2t,"speech_to_text"),u2t.forEach(t),_or=r(uke," \u2014 "),hz=n(uke,"A",{href:!0});var _2t=s(hz);bor=r(_2t,"Speech2TextForConditionalGeneration"),_2t.forEach(t),vor=r(uke," (Speech2Text model)"),uke.forEach(t),CDe.forEach(t),For=i(Ta),lT=n(Ta,"P",{});var _ke=s(lT);Tor=r(_ke,"The model is set in evaluation mode by default using "),E_e=n(_ke,"CODE",{});var b2t=s(E_e);Mor=r(b2t,"model.eval()"),b2t.forEach(t),Eor=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(_ke,"CODE",{});var v2t=s(C_e);Cor=r(v2t,"model.train()"),v2t.forEach(t),_ke.forEach(t),wor=i(Ta),T(iT.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),bNe=i(f),kd=n(f,"H2",{class:!0});var wDe=s(kd);dT=n(wDe,"A",{id:!0,class:!0,href:!0});var F2t=s(dT);w_e=n(F2t,"SPAN",{});var T2t=s(w_e);T(By.$$.fragment,T2t),T2t.forEach(t),F2t.forEach(t),Aor=i(wDe),A_e=n(wDe,"SPAN",{});var M2t=s(A_e);yor=r(M2t,"AutoModelForAudioXVector"),M2t.forEach(t),wDe.forEach(t),vNe=i(f),Qo=n(f,"DIV",{class:!0});var ml=s(Qo);T(Iy.$$.fragment,ml),Lor=i(ml),Sd=n(ml,"P",{});var GZ=s(Sd);xor=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pz=n(GZ,"A",{href:!0});var E2t=s(pz);$or=r(E2t,"from_pretrained()"),E2t.forEach(t),kor=r(GZ," class method or the "),uz=n(GZ,"A",{href:!0});var C2t=s(uz);Sor=r(C2t,"from_config()"),C2t.forEach(t),Ror=r(GZ,` class
method.`),GZ.forEach(t),Por=i(ml),qy=n(ml,"P",{});var ADe=s(qy);Bor=r(ADe,"This class cannot be instantiated directly using "),y_e=n(ADe,"CODE",{});var w2t=s(y_e);Ior=r(w2t,"__init__()"),w2t.forEach(t),qor=r(ADe," (throws an error)."),ADe.forEach(t),Nor=i(ml),Ct=n(ml,"DIV",{class:!0});var cw=s(Ct);T(Ny.$$.fragment,cw),jor=i(cw),L_e=n(cw,"P",{});var A2t=s(L_e);Dor=r(A2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),A2t.forEach(t),Gor=i(cw),Rd=n(cw,"P",{});var OZ=s(Rd);Oor=r(OZ,`Note:
Loading a model from its configuration file does `),x_e=n(OZ,"STRONG",{});var y2t=s(x_e);Vor=r(y2t,"not"),y2t.forEach(t),Xor=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(OZ,"A",{href:!0});var L2t=s(_z);zor=r(L2t,"from_pretrained()"),L2t.forEach(t),Wor=r(OZ," to load the model weights."),OZ.forEach(t),Qor=i(cw),T(cT.$$.fragment,cw),cw.forEach(t),Hor=i(ml),po=n(ml,"DIV",{class:!0});var Ma=s(po);T(jy.$$.fragment,Ma),Uor=i(Ma),$_e=n(Ma,"P",{});var x2t=s($_e);Jor=r(x2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),x2t.forEach(t),Yor=i(Ma),Ja=n(Ma,"P",{});var fw=s(Ja);Kor=r(fw,"The model class to instantiate is selected based on the "),k_e=n(fw,"CODE",{});var $2t=s(k_e);Zor=r($2t,"model_type"),$2t.forEach(t),err=r(fw,` property of the config object (either
passed as an argument or loaded from `),S_e=n(fw,"CODE",{});var k2t=s(S_e);orr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),rrr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(fw,"CODE",{});var S2t=s(R_e);trr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),arr=r(fw,":"),fw.forEach(t),nrr=i(Ma),ot=n(Ma,"UL",{});var gl=s(ot);fT=n(gl,"LI",{});var bke=s(fT);P_e=n(bke,"STRONG",{});var R2t=s(P_e);srr=r(R2t,"data2vec-audio"),R2t.forEach(t),lrr=r(bke," \u2014 "),bz=n(bke,"A",{href:!0});var P2t=s(bz);irr=r(P2t,"Data2VecAudioForXVector"),P2t.forEach(t),drr=r(bke," (Data2VecAudio model)"),bke.forEach(t),crr=i(gl),mT=n(gl,"LI",{});var vke=s(mT);B_e=n(vke,"STRONG",{});var B2t=s(B_e);frr=r(B2t,"unispeech-sat"),B2t.forEach(t),mrr=r(vke," \u2014 "),vz=n(vke,"A",{href:!0});var I2t=s(vz);grr=r(I2t,"UniSpeechSatForXVector"),I2t.forEach(t),hrr=r(vke," (UniSpeechSat model)"),vke.forEach(t),prr=i(gl),gT=n(gl,"LI",{});var Fke=s(gT);I_e=n(Fke,"STRONG",{});var q2t=s(I_e);urr=r(q2t,"wav2vec2"),q2t.forEach(t),_rr=r(Fke," \u2014 "),Fz=n(Fke,"A",{href:!0});var N2t=s(Fz);brr=r(N2t,"Wav2Vec2ForXVector"),N2t.forEach(t),vrr=r(Fke," (Wav2Vec2 model)"),Fke.forEach(t),Frr=i(gl),hT=n(gl,"LI",{});var Tke=s(hT);q_e=n(Tke,"STRONG",{});var j2t=s(q_e);Trr=r(j2t,"wav2vec2-conformer"),j2t.forEach(t),Mrr=r(Tke," \u2014 "),Tz=n(Tke,"A",{href:!0});var D2t=s(Tz);Err=r(D2t,"Wav2Vec2ConformerForXVector"),D2t.forEach(t),Crr=r(Tke," (Wav2Vec2-Conformer model)"),Tke.forEach(t),wrr=i(gl),pT=n(gl,"LI",{});var Mke=s(pT);N_e=n(Mke,"STRONG",{});var G2t=s(N_e);Arr=r(G2t,"wavlm"),G2t.forEach(t),yrr=r(Mke," \u2014 "),Mz=n(Mke,"A",{href:!0});var O2t=s(Mz);Lrr=r(O2t,"WavLMForXVector"),O2t.forEach(t),xrr=r(Mke," (WavLM model)"),Mke.forEach(t),gl.forEach(t),$rr=i(Ma),uT=n(Ma,"P",{});var Eke=s(uT);krr=r(Eke,"The model is set in evaluation mode by default using "),j_e=n(Eke,"CODE",{});var V2t=s(j_e);Srr=r(V2t,"model.eval()"),V2t.forEach(t),Rrr=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(Eke,"CODE",{});var X2t=s(D_e);Prr=r(X2t,"model.train()"),X2t.forEach(t),Eke.forEach(t),Brr=i(Ma),T(_T.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),FNe=i(f),Pd=n(f,"H2",{class:!0});var yDe=s(Pd);bT=n(yDe,"A",{id:!0,class:!0,href:!0});var z2t=s(bT);G_e=n(z2t,"SPAN",{});var W2t=s(G_e);T(Dy.$$.fragment,W2t),W2t.forEach(t),z2t.forEach(t),Irr=i(yDe),O_e=n(yDe,"SPAN",{});var Q2t=s(O_e);qrr=r(Q2t,"AutoModelForMaskedImageModeling"),Q2t.forEach(t),yDe.forEach(t),TNe=i(f),Ho=n(f,"DIV",{class:!0});var hl=s(Ho);T(Gy.$$.fragment,hl),Nrr=i(hl),Bd=n(hl,"P",{});var VZ=s(Bd);jrr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ez=n(VZ,"A",{href:!0});var H2t=s(Ez);Drr=r(H2t,"from_pretrained()"),H2t.forEach(t),Grr=r(VZ," class method or the "),Cz=n(VZ,"A",{href:!0});var U2t=s(Cz);Orr=r(U2t,"from_config()"),U2t.forEach(t),Vrr=r(VZ,` class
method.`),VZ.forEach(t),Xrr=i(hl),Oy=n(hl,"P",{});var LDe=s(Oy);zrr=r(LDe,"This class cannot be instantiated directly using "),V_e=n(LDe,"CODE",{});var J2t=s(V_e);Wrr=r(J2t,"__init__()"),J2t.forEach(t),Qrr=r(LDe," (throws an error)."),LDe.forEach(t),Hrr=i(hl),wt=n(hl,"DIV",{class:!0});var mw=s(wt);T(Vy.$$.fragment,mw),Urr=i(mw),X_e=n(mw,"P",{});var Y2t=s(X_e);Jrr=r(Y2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Y2t.forEach(t),Yrr=i(mw),Id=n(mw,"P",{});var XZ=s(Id);Krr=r(XZ,`Note:
Loading a model from its configuration file does `),z_e=n(XZ,"STRONG",{});var K2t=s(z_e);Zrr=r(K2t,"not"),K2t.forEach(t),etr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(XZ,"A",{href:!0});var Z2t=s(wz);otr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),rtr=r(XZ," to load the model weights."),XZ.forEach(t),ttr=i(mw),T(vT.$$.fragment,mw),mw.forEach(t),atr=i(hl),uo=n(hl,"DIV",{class:!0});var Ea=s(uo);T(Xy.$$.fragment,Ea),ntr=i(Ea),W_e=n(Ea,"P",{});var e1t=s(W_e);str=r(e1t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),e1t.forEach(t),ltr=i(Ea),Ya=n(Ea,"P",{});var gw=s(Ya);itr=r(gw,"The model class to instantiate is selected based on the "),Q_e=n(gw,"CODE",{});var o1t=s(Q_e);dtr=r(o1t,"model_type"),o1t.forEach(t),ctr=r(gw,` property of the config object (either
passed as an argument or loaded from `),H_e=n(gw,"CODE",{});var r1t=s(H_e);ftr=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),mtr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(gw,"CODE",{});var t1t=s(U_e);gtr=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),htr=r(gw,":"),gw.forEach(t),ptr=i(Ea),qd=n(Ea,"UL",{});var zZ=s(qd);FT=n(zZ,"LI",{});var Cke=s(FT);J_e=n(Cke,"STRONG",{});var a1t=s(J_e);utr=r(a1t,"deit"),a1t.forEach(t),_tr=r(Cke," \u2014 "),Az=n(Cke,"A",{href:!0});var n1t=s(Az);btr=r(n1t,"DeiTForMaskedImageModeling"),n1t.forEach(t),vtr=r(Cke," (DeiT model)"),Cke.forEach(t),Ftr=i(zZ),TT=n(zZ,"LI",{});var wke=s(TT);Y_e=n(wke,"STRONG",{});var s1t=s(Y_e);Ttr=r(s1t,"swin"),s1t.forEach(t),Mtr=r(wke," \u2014 "),yz=n(wke,"A",{href:!0});var l1t=s(yz);Etr=r(l1t,"SwinForMaskedImageModeling"),l1t.forEach(t),Ctr=r(wke," (Swin model)"),wke.forEach(t),wtr=i(zZ),MT=n(zZ,"LI",{});var Ake=s(MT);K_e=n(Ake,"STRONG",{});var i1t=s(K_e);Atr=r(i1t,"vit"),i1t.forEach(t),ytr=r(Ake," \u2014 "),Lz=n(Ake,"A",{href:!0});var d1t=s(Lz);Ltr=r(d1t,"ViTForMaskedImageModeling"),d1t.forEach(t),xtr=r(Ake," (ViT model)"),Ake.forEach(t),zZ.forEach(t),$tr=i(Ea),ET=n(Ea,"P",{});var yke=s(ET);ktr=r(yke,"The model is set in evaluation mode by default using "),Z_e=n(yke,"CODE",{});var c1t=s(Z_e);Str=r(c1t,"model.eval()"),c1t.forEach(t),Rtr=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(yke,"CODE",{});var f1t=s(e2e);Ptr=r(f1t,"model.train()"),f1t.forEach(t),yke.forEach(t),Btr=i(Ea),T(CT.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),MNe=i(f),Nd=n(f,"H2",{class:!0});var xDe=s(Nd);wT=n(xDe,"A",{id:!0,class:!0,href:!0});var m1t=s(wT);o2e=n(m1t,"SPAN",{});var g1t=s(o2e);T(zy.$$.fragment,g1t),g1t.forEach(t),m1t.forEach(t),Itr=i(xDe),r2e=n(xDe,"SPAN",{});var h1t=s(r2e);qtr=r(h1t,"AutoModelForObjectDetection"),h1t.forEach(t),xDe.forEach(t),ENe=i(f),Uo=n(f,"DIV",{class:!0});var pl=s(Uo);T(Wy.$$.fragment,pl),Ntr=i(pl),jd=n(pl,"P",{});var WZ=s(jd);jtr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),xz=n(WZ,"A",{href:!0});var p1t=s(xz);Dtr=r(p1t,"from_pretrained()"),p1t.forEach(t),Gtr=r(WZ," class method or the "),$z=n(WZ,"A",{href:!0});var u1t=s($z);Otr=r(u1t,"from_config()"),u1t.forEach(t),Vtr=r(WZ,` class
method.`),WZ.forEach(t),Xtr=i(pl),Qy=n(pl,"P",{});var $De=s(Qy);ztr=r($De,"This class cannot be instantiated directly using "),t2e=n($De,"CODE",{});var _1t=s(t2e);Wtr=r(_1t,"__init__()"),_1t.forEach(t),Qtr=r($De," (throws an error)."),$De.forEach(t),Htr=i(pl),At=n(pl,"DIV",{class:!0});var hw=s(At);T(Hy.$$.fragment,hw),Utr=i(hw),a2e=n(hw,"P",{});var b1t=s(a2e);Jtr=r(b1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),b1t.forEach(t),Ytr=i(hw),Dd=n(hw,"P",{});var QZ=s(Dd);Ktr=r(QZ,`Note:
Loading a model from its configuration file does `),n2e=n(QZ,"STRONG",{});var v1t=s(n2e);Ztr=r(v1t,"not"),v1t.forEach(t),ear=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(QZ,"A",{href:!0});var F1t=s(kz);oar=r(F1t,"from_pretrained()"),F1t.forEach(t),rar=r(QZ," to load the model weights."),QZ.forEach(t),tar=i(hw),T(AT.$$.fragment,hw),hw.forEach(t),aar=i(pl),_o=n(pl,"DIV",{class:!0});var Ca=s(_o);T(Uy.$$.fragment,Ca),nar=i(Ca),s2e=n(Ca,"P",{});var T1t=s(s2e);sar=r(T1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),T1t.forEach(t),lar=i(Ca),Ka=n(Ca,"P",{});var pw=s(Ka);iar=r(pw,"The model class to instantiate is selected based on the "),l2e=n(pw,"CODE",{});var M1t=s(l2e);dar=r(M1t,"model_type"),M1t.forEach(t),car=r(pw,` property of the config object (either
passed as an argument or loaded from `),i2e=n(pw,"CODE",{});var E1t=s(i2e);far=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),mar=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(pw,"CODE",{});var C1t=s(d2e);gar=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),har=r(pw,":"),pw.forEach(t),par=i(Ca),Jy=n(Ca,"UL",{});var kDe=s(Jy);yT=n(kDe,"LI",{});var Lke=s(yT);c2e=n(Lke,"STRONG",{});var w1t=s(c2e);uar=r(w1t,"detr"),w1t.forEach(t),_ar=r(Lke," \u2014 "),Sz=n(Lke,"A",{href:!0});var A1t=s(Sz);bar=r(A1t,"DetrForObjectDetection"),A1t.forEach(t),Far=r(Lke," (DETR model)"),Lke.forEach(t),Tar=i(kDe),LT=n(kDe,"LI",{});var xke=s(LT);f2e=n(xke,"STRONG",{});var y1t=s(f2e);Mar=r(y1t,"yolos"),y1t.forEach(t),Ear=r(xke," \u2014 "),Rz=n(xke,"A",{href:!0});var L1t=s(Rz);Car=r(L1t,"YolosForObjectDetection"),L1t.forEach(t),war=r(xke," (YOLOS model)"),xke.forEach(t),kDe.forEach(t),Aar=i(Ca),xT=n(Ca,"P",{});var $ke=s(xT);yar=r($ke,"The model is set in evaluation mode by default using "),m2e=n($ke,"CODE",{});var x1t=s(m2e);Lar=r(x1t,"model.eval()"),x1t.forEach(t),xar=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=n($ke,"CODE",{});var $1t=s(g2e);$ar=r($1t,"model.train()"),$1t.forEach(t),$ke.forEach(t),kar=i(Ca),T($T.$$.fragment,Ca),Ca.forEach(t),pl.forEach(t),CNe=i(f),Gd=n(f,"H2",{class:!0});var SDe=s(Gd);kT=n(SDe,"A",{id:!0,class:!0,href:!0});var k1t=s(kT);h2e=n(k1t,"SPAN",{});var S1t=s(h2e);T(Yy.$$.fragment,S1t),S1t.forEach(t),k1t.forEach(t),Sar=i(SDe),p2e=n(SDe,"SPAN",{});var R1t=s(p2e);Rar=r(R1t,"AutoModelForImageSegmentation"),R1t.forEach(t),SDe.forEach(t),wNe=i(f),Jo=n(f,"DIV",{class:!0});var ul=s(Jo);T(Ky.$$.fragment,ul),Par=i(ul),Od=n(ul,"P",{});var HZ=s(Od);Bar=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Pz=n(HZ,"A",{href:!0});var P1t=s(Pz);Iar=r(P1t,"from_pretrained()"),P1t.forEach(t),qar=r(HZ," class method or the "),Bz=n(HZ,"A",{href:!0});var B1t=s(Bz);Nar=r(B1t,"from_config()"),B1t.forEach(t),jar=r(HZ,` class
method.`),HZ.forEach(t),Dar=i(ul),Zy=n(ul,"P",{});var RDe=s(Zy);Gar=r(RDe,"This class cannot be instantiated directly using "),u2e=n(RDe,"CODE",{});var I1t=s(u2e);Oar=r(I1t,"__init__()"),I1t.forEach(t),Var=r(RDe," (throws an error)."),RDe.forEach(t),Xar=i(ul),yt=n(ul,"DIV",{class:!0});var uw=s(yt);T(eL.$$.fragment,uw),zar=i(uw),_2e=n(uw,"P",{});var q1t=s(_2e);War=r(q1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),q1t.forEach(t),Qar=i(uw),Vd=n(uw,"P",{});var UZ=s(Vd);Har=r(UZ,`Note:
Loading a model from its configuration file does `),b2e=n(UZ,"STRONG",{});var N1t=s(b2e);Uar=r(N1t,"not"),N1t.forEach(t),Jar=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(UZ,"A",{href:!0});var j1t=s(Iz);Yar=r(j1t,"from_pretrained()"),j1t.forEach(t),Kar=r(UZ," to load the model weights."),UZ.forEach(t),Zar=i(uw),T(ST.$$.fragment,uw),uw.forEach(t),enr=i(ul),bo=n(ul,"DIV",{class:!0});var wa=s(bo);T(oL.$$.fragment,wa),onr=i(wa),v2e=n(wa,"P",{});var D1t=s(v2e);rnr=r(D1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),D1t.forEach(t),tnr=i(wa),Za=n(wa,"P",{});var _w=s(Za);anr=r(_w,"The model class to instantiate is selected based on the "),F2e=n(_w,"CODE",{});var G1t=s(F2e);nnr=r(G1t,"model_type"),G1t.forEach(t),snr=r(_w,` property of the config object (either
passed as an argument or loaded from `),T2e=n(_w,"CODE",{});var O1t=s(T2e);lnr=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),inr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(_w,"CODE",{});var V1t=s(M2e);dnr=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),cnr=r(_w,":"),_w.forEach(t),fnr=i(wa),E2e=n(wa,"UL",{});var X1t=s(E2e);RT=n(X1t,"LI",{});var kke=s(RT);C2e=n(kke,"STRONG",{});var z1t=s(C2e);mnr=r(z1t,"detr"),z1t.forEach(t),gnr=r(kke," \u2014 "),qz=n(kke,"A",{href:!0});var W1t=s(qz);hnr=r(W1t,"DetrForSegmentation"),W1t.forEach(t),pnr=r(kke," (DETR model)"),kke.forEach(t),X1t.forEach(t),unr=i(wa),PT=n(wa,"P",{});var Ske=s(PT);_nr=r(Ske,"The model is set in evaluation mode by default using "),w2e=n(Ske,"CODE",{});var Q1t=s(w2e);bnr=r(Q1t,"model.eval()"),Q1t.forEach(t),vnr=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=n(Ske,"CODE",{});var H1t=s(A2e);Fnr=r(H1t,"model.train()"),H1t.forEach(t),Ske.forEach(t),Tnr=i(wa),T(BT.$$.fragment,wa),wa.forEach(t),ul.forEach(t),ANe=i(f),Xd=n(f,"H2",{class:!0});var PDe=s(Xd);IT=n(PDe,"A",{id:!0,class:!0,href:!0});var U1t=s(IT);y2e=n(U1t,"SPAN",{});var J1t=s(y2e);T(rL.$$.fragment,J1t),J1t.forEach(t),U1t.forEach(t),Mnr=i(PDe),L2e=n(PDe,"SPAN",{});var Y1t=s(L2e);Enr=r(Y1t,"AutoModelForSemanticSegmentation"),Y1t.forEach(t),PDe.forEach(t),yNe=i(f),Yo=n(f,"DIV",{class:!0});var _l=s(Yo);T(tL.$$.fragment,_l),Cnr=i(_l),zd=n(_l,"P",{});var JZ=s(zd);wnr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nz=n(JZ,"A",{href:!0});var K1t=s(Nz);Anr=r(K1t,"from_pretrained()"),K1t.forEach(t),ynr=r(JZ," class method or the "),jz=n(JZ,"A",{href:!0});var Z1t=s(jz);Lnr=r(Z1t,"from_config()"),Z1t.forEach(t),xnr=r(JZ,` class
method.`),JZ.forEach(t),$nr=i(_l),aL=n(_l,"P",{});var BDe=s(aL);knr=r(BDe,"This class cannot be instantiated directly using "),x2e=n(BDe,"CODE",{});var ebt=s(x2e);Snr=r(ebt,"__init__()"),ebt.forEach(t),Rnr=r(BDe," (throws an error)."),BDe.forEach(t),Pnr=i(_l),Lt=n(_l,"DIV",{class:!0});var bw=s(Lt);T(nL.$$.fragment,bw),Bnr=i(bw),$2e=n(bw,"P",{});var obt=s($2e);Inr=r(obt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),obt.forEach(t),qnr=i(bw),Wd=n(bw,"P",{});var YZ=s(Wd);Nnr=r(YZ,`Note:
Loading a model from its configuration file does `),k2e=n(YZ,"STRONG",{});var rbt=s(k2e);jnr=r(rbt,"not"),rbt.forEach(t),Dnr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(YZ,"A",{href:!0});var tbt=s(Dz);Gnr=r(tbt,"from_pretrained()"),tbt.forEach(t),Onr=r(YZ," to load the model weights."),YZ.forEach(t),Vnr=i(bw),T(qT.$$.fragment,bw),bw.forEach(t),Xnr=i(_l),vo=n(_l,"DIV",{class:!0});var Aa=s(vo);T(sL.$$.fragment,Aa),znr=i(Aa),S2e=n(Aa,"P",{});var abt=s(S2e);Wnr=r(abt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),abt.forEach(t),Qnr=i(Aa),en=n(Aa,"P",{});var vw=s(en);Hnr=r(vw,"The model class to instantiate is selected based on the "),R2e=n(vw,"CODE",{});var nbt=s(R2e);Unr=r(nbt,"model_type"),nbt.forEach(t),Jnr=r(vw,` property of the config object (either
passed as an argument or loaded from `),P2e=n(vw,"CODE",{});var sbt=s(P2e);Ynr=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),Knr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(vw,"CODE",{});var lbt=s(B2e);Znr=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),esr=r(vw,":"),vw.forEach(t),osr=i(Aa),on=n(Aa,"UL",{});var Fw=s(on);NT=n(Fw,"LI",{});var Rke=s(NT);I2e=n(Rke,"STRONG",{});var ibt=s(I2e);rsr=r(ibt,"beit"),ibt.forEach(t),tsr=r(Rke," \u2014 "),Gz=n(Rke,"A",{href:!0});var dbt=s(Gz);asr=r(dbt,"BeitForSemanticSegmentation"),dbt.forEach(t),nsr=r(Rke," (BEiT model)"),Rke.forEach(t),ssr=i(Fw),jT=n(Fw,"LI",{});var Pke=s(jT);q2e=n(Pke,"STRONG",{});var cbt=s(q2e);lsr=r(cbt,"data2vec-vision"),cbt.forEach(t),isr=r(Pke," \u2014 "),Oz=n(Pke,"A",{href:!0});var fbt=s(Oz);dsr=r(fbt,"Data2VecVisionForSemanticSegmentation"),fbt.forEach(t),csr=r(Pke," (Data2VecVision model)"),Pke.forEach(t),fsr=i(Fw),DT=n(Fw,"LI",{});var Bke=s(DT);N2e=n(Bke,"STRONG",{});var mbt=s(N2e);msr=r(mbt,"dpt"),mbt.forEach(t),gsr=r(Bke," \u2014 "),Vz=n(Bke,"A",{href:!0});var gbt=s(Vz);hsr=r(gbt,"DPTForSemanticSegmentation"),gbt.forEach(t),psr=r(Bke," (DPT model)"),Bke.forEach(t),usr=i(Fw),GT=n(Fw,"LI",{});var Ike=s(GT);j2e=n(Ike,"STRONG",{});var hbt=s(j2e);_sr=r(hbt,"segformer"),hbt.forEach(t),bsr=r(Ike," \u2014 "),Xz=n(Ike,"A",{href:!0});var pbt=s(Xz);vsr=r(pbt,"SegformerForSemanticSegmentation"),pbt.forEach(t),Fsr=r(Ike," (SegFormer model)"),Ike.forEach(t),Fw.forEach(t),Tsr=i(Aa),OT=n(Aa,"P",{});var qke=s(OT);Msr=r(qke,"The model is set in evaluation mode by default using "),D2e=n(qke,"CODE",{});var ubt=s(D2e);Esr=r(ubt,"model.eval()"),ubt.forEach(t),Csr=r(qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=n(qke,"CODE",{});var _bt=s(G2e);wsr=r(_bt,"model.train()"),_bt.forEach(t),qke.forEach(t),Asr=i(Aa),T(VT.$$.fragment,Aa),Aa.forEach(t),_l.forEach(t),LNe=i(f),Qd=n(f,"H2",{class:!0});var IDe=s(Qd);XT=n(IDe,"A",{id:!0,class:!0,href:!0});var bbt=s(XT);O2e=n(bbt,"SPAN",{});var vbt=s(O2e);T(lL.$$.fragment,vbt),vbt.forEach(t),bbt.forEach(t),ysr=i(IDe),V2e=n(IDe,"SPAN",{});var Fbt=s(V2e);Lsr=r(Fbt,"AutoModelForInstanceSegmentation"),Fbt.forEach(t),IDe.forEach(t),xNe=i(f),Ko=n(f,"DIV",{class:!0});var bl=s(Ko);T(iL.$$.fragment,bl),xsr=i(bl),Hd=n(bl,"P",{});var KZ=s(Hd);$sr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zz=n(KZ,"A",{href:!0});var Tbt=s(zz);ksr=r(Tbt,"from_pretrained()"),Tbt.forEach(t),Ssr=r(KZ," class method or the "),Wz=n(KZ,"A",{href:!0});var Mbt=s(Wz);Rsr=r(Mbt,"from_config()"),Mbt.forEach(t),Psr=r(KZ,` class
method.`),KZ.forEach(t),Bsr=i(bl),dL=n(bl,"P",{});var qDe=s(dL);Isr=r(qDe,"This class cannot be instantiated directly using "),X2e=n(qDe,"CODE",{});var Ebt=s(X2e);qsr=r(Ebt,"__init__()"),Ebt.forEach(t),Nsr=r(qDe," (throws an error)."),qDe.forEach(t),jsr=i(bl),xt=n(bl,"DIV",{class:!0});var Tw=s(xt);T(cL.$$.fragment,Tw),Dsr=i(Tw),z2e=n(Tw,"P",{});var Cbt=s(z2e);Gsr=r(Cbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Cbt.forEach(t),Osr=i(Tw),Ud=n(Tw,"P",{});var ZZ=s(Ud);Vsr=r(ZZ,`Note:
Loading a model from its configuration file does `),W2e=n(ZZ,"STRONG",{});var wbt=s(W2e);Xsr=r(wbt,"not"),wbt.forEach(t),zsr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(ZZ,"A",{href:!0});var Abt=s(Qz);Wsr=r(Abt,"from_pretrained()"),Abt.forEach(t),Qsr=r(ZZ," to load the model weights."),ZZ.forEach(t),Hsr=i(Tw),T(zT.$$.fragment,Tw),Tw.forEach(t),Usr=i(bl),Fo=n(bl,"DIV",{class:!0});var ya=s(Fo);T(fL.$$.fragment,ya),Jsr=i(ya),Q2e=n(ya,"P",{});var ybt=s(Q2e);Ysr=r(ybt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ybt.forEach(t),Ksr=i(ya),rn=n(ya,"P",{});var Mw=s(rn);Zsr=r(Mw,"The model class to instantiate is selected based on the "),H2e=n(Mw,"CODE",{});var Lbt=s(H2e);elr=r(Lbt,"model_type"),Lbt.forEach(t),olr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),U2e=n(Mw,"CODE",{});var xbt=s(U2e);rlr=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),tlr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(Mw,"CODE",{});var $bt=s(J2e);alr=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),nlr=r(Mw,":"),Mw.forEach(t),slr=i(ya),Y2e=n(ya,"UL",{});var kbt=s(Y2e);WT=n(kbt,"LI",{});var Nke=s(WT);K2e=n(Nke,"STRONG",{});var Sbt=s(K2e);llr=r(Sbt,"maskformer"),Sbt.forEach(t),ilr=r(Nke," \u2014 "),Hz=n(Nke,"A",{href:!0});var Rbt=s(Hz);dlr=r(Rbt,"MaskFormerForInstanceSegmentation"),Rbt.forEach(t),clr=r(Nke," (MaskFormer model)"),Nke.forEach(t),kbt.forEach(t),flr=i(ya),QT=n(ya,"P",{});var jke=s(QT);mlr=r(jke,"The model is set in evaluation mode by default using "),Z2e=n(jke,"CODE",{});var Pbt=s(Z2e);glr=r(Pbt,"model.eval()"),Pbt.forEach(t),hlr=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(jke,"CODE",{});var Bbt=s(e1e);plr=r(Bbt,"model.train()"),Bbt.forEach(t),jke.forEach(t),ulr=i(ya),T(HT.$$.fragment,ya),ya.forEach(t),bl.forEach(t),$Ne=i(f),Jd=n(f,"H2",{class:!0});var NDe=s(Jd);UT=n(NDe,"A",{id:!0,class:!0,href:!0});var Ibt=s(UT);o1e=n(Ibt,"SPAN",{});var qbt=s(o1e);T(mL.$$.fragment,qbt),qbt.forEach(t),Ibt.forEach(t),_lr=i(NDe),r1e=n(NDe,"SPAN",{});var Nbt=s(r1e);blr=r(Nbt,"TFAutoModel"),Nbt.forEach(t),NDe.forEach(t),kNe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(gL.$$.fragment,vl),vlr=i(vl),Yd=n(vl,"P",{});var eee=s(Yd);Flr=r(eee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uz=n(eee,"A",{href:!0});var jbt=s(Uz);Tlr=r(jbt,"from_pretrained()"),jbt.forEach(t),Mlr=r(eee," class method or the "),Jz=n(eee,"A",{href:!0});var Dbt=s(Jz);Elr=r(Dbt,"from_config()"),Dbt.forEach(t),Clr=r(eee,` class
method.`),eee.forEach(t),wlr=i(vl),hL=n(vl,"P",{});var jDe=s(hL);Alr=r(jDe,"This class cannot be instantiated directly using "),t1e=n(jDe,"CODE",{});var Gbt=s(t1e);ylr=r(Gbt,"__init__()"),Gbt.forEach(t),Llr=r(jDe," (throws an error)."),jDe.forEach(t),xlr=i(vl),$t=n(vl,"DIV",{class:!0});var Ew=s($t);T(pL.$$.fragment,Ew),$lr=i(Ew),a1e=n(Ew,"P",{});var Obt=s(a1e);klr=r(Obt,"Instantiates one of the base model classes of the library from a configuration."),Obt.forEach(t),Slr=i(Ew),Kd=n(Ew,"P",{});var oee=s(Kd);Rlr=r(oee,`Note:
Loading a model from its configuration file does `),n1e=n(oee,"STRONG",{});var Vbt=s(n1e);Plr=r(Vbt,"not"),Vbt.forEach(t),Blr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(oee,"A",{href:!0});var Xbt=s(Yz);Ilr=r(Xbt,"from_pretrained()"),Xbt.forEach(t),qlr=r(oee," to load the model weights."),oee.forEach(t),Nlr=i(Ew),T(JT.$$.fragment,Ew),Ew.forEach(t),jlr=i(vl),yr=n(vl,"DIV",{class:!0});var Fl=s(yr);T(uL.$$.fragment,Fl),Dlr=i(Fl),s1e=n(Fl,"P",{});var zbt=s(s1e);Glr=r(zbt,"Instantiate one of the base model classes of the library from a pretrained model."),zbt.forEach(t),Olr=i(Fl),tn=n(Fl,"P",{});var Cw=s(tn);Vlr=r(Cw,"The model class to instantiate is selected based on the "),l1e=n(Cw,"CODE",{});var Wbt=s(l1e);Xlr=r(Wbt,"model_type"),Wbt.forEach(t),zlr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),i1e=n(Cw,"CODE",{});var Qbt=s(i1e);Wlr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),Qlr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(Cw,"CODE",{});var Hbt=s(d1e);Hlr=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),Ulr=r(Cw,":"),Cw.forEach(t),Jlr=i(Fl),N=n(Fl,"UL",{});var D=s(N);YT=n(D,"LI",{});var Dke=s(YT);c1e=n(Dke,"STRONG",{});var Ubt=s(c1e);Ylr=r(Ubt,"albert"),Ubt.forEach(t),Klr=r(Dke," \u2014 "),Kz=n(Dke,"A",{href:!0});var Jbt=s(Kz);Zlr=r(Jbt,"TFAlbertModel"),Jbt.forEach(t),eir=r(Dke," (ALBERT model)"),Dke.forEach(t),oir=i(D),KT=n(D,"LI",{});var Gke=s(KT);f1e=n(Gke,"STRONG",{});var Ybt=s(f1e);rir=r(Ybt,"bart"),Ybt.forEach(t),tir=r(Gke," \u2014 "),Zz=n(Gke,"A",{href:!0});var Kbt=s(Zz);air=r(Kbt,"TFBartModel"),Kbt.forEach(t),nir=r(Gke," (BART model)"),Gke.forEach(t),sir=i(D),ZT=n(D,"LI",{});var Oke=s(ZT);m1e=n(Oke,"STRONG",{});var Zbt=s(m1e);lir=r(Zbt,"bert"),Zbt.forEach(t),iir=r(Oke," \u2014 "),eW=n(Oke,"A",{href:!0});var evt=s(eW);dir=r(evt,"TFBertModel"),evt.forEach(t),cir=r(Oke," (BERT model)"),Oke.forEach(t),fir=i(D),e8=n(D,"LI",{});var Vke=s(e8);g1e=n(Vke,"STRONG",{});var ovt=s(g1e);mir=r(ovt,"blenderbot"),ovt.forEach(t),gir=r(Vke," \u2014 "),oW=n(Vke,"A",{href:!0});var rvt=s(oW);hir=r(rvt,"TFBlenderbotModel"),rvt.forEach(t),pir=r(Vke," (Blenderbot model)"),Vke.forEach(t),uir=i(D),o8=n(D,"LI",{});var Xke=s(o8);h1e=n(Xke,"STRONG",{});var tvt=s(h1e);_ir=r(tvt,"blenderbot-small"),tvt.forEach(t),bir=r(Xke," \u2014 "),rW=n(Xke,"A",{href:!0});var avt=s(rW);vir=r(avt,"TFBlenderbotSmallModel"),avt.forEach(t),Fir=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),Tir=i(D),r8=n(D,"LI",{});var zke=s(r8);p1e=n(zke,"STRONG",{});var nvt=s(p1e);Mir=r(nvt,"camembert"),nvt.forEach(t),Eir=r(zke," \u2014 "),tW=n(zke,"A",{href:!0});var svt=s(tW);Cir=r(svt,"TFCamembertModel"),svt.forEach(t),wir=r(zke," (CamemBERT model)"),zke.forEach(t),Air=i(D),t8=n(D,"LI",{});var Wke=s(t8);u1e=n(Wke,"STRONG",{});var lvt=s(u1e);yir=r(lvt,"clip"),lvt.forEach(t),Lir=r(Wke," \u2014 "),aW=n(Wke,"A",{href:!0});var ivt=s(aW);xir=r(ivt,"TFCLIPModel"),ivt.forEach(t),$ir=r(Wke," (CLIP model)"),Wke.forEach(t),kir=i(D),a8=n(D,"LI",{});var Qke=s(a8);_1e=n(Qke,"STRONG",{});var dvt=s(_1e);Sir=r(dvt,"convbert"),dvt.forEach(t),Rir=r(Qke," \u2014 "),nW=n(Qke,"A",{href:!0});var cvt=s(nW);Pir=r(cvt,"TFConvBertModel"),cvt.forEach(t),Bir=r(Qke," (ConvBERT model)"),Qke.forEach(t),Iir=i(D),n8=n(D,"LI",{});var Hke=s(n8);b1e=n(Hke,"STRONG",{});var fvt=s(b1e);qir=r(fvt,"convnext"),fvt.forEach(t),Nir=r(Hke," \u2014 "),sW=n(Hke,"A",{href:!0});var mvt=s(sW);jir=r(mvt,"TFConvNextModel"),mvt.forEach(t),Dir=r(Hke," (ConvNext model)"),Hke.forEach(t),Gir=i(D),s8=n(D,"LI",{});var Uke=s(s8);v1e=n(Uke,"STRONG",{});var gvt=s(v1e);Oir=r(gvt,"ctrl"),gvt.forEach(t),Vir=r(Uke," \u2014 "),lW=n(Uke,"A",{href:!0});var hvt=s(lW);Xir=r(hvt,"TFCTRLModel"),hvt.forEach(t),zir=r(Uke," (CTRL model)"),Uke.forEach(t),Wir=i(D),l8=n(D,"LI",{});var Jke=s(l8);F1e=n(Jke,"STRONG",{});var pvt=s(F1e);Qir=r(pvt,"data2vec-vision"),pvt.forEach(t),Hir=r(Jke," \u2014 "),iW=n(Jke,"A",{href:!0});var uvt=s(iW);Uir=r(uvt,"TFData2VecVisionModel"),uvt.forEach(t),Jir=r(Jke," (Data2VecVision model)"),Jke.forEach(t),Yir=i(D),i8=n(D,"LI",{});var Yke=s(i8);T1e=n(Yke,"STRONG",{});var _vt=s(T1e);Kir=r(_vt,"deberta"),_vt.forEach(t),Zir=r(Yke," \u2014 "),dW=n(Yke,"A",{href:!0});var bvt=s(dW);edr=r(bvt,"TFDebertaModel"),bvt.forEach(t),odr=r(Yke," (DeBERTa model)"),Yke.forEach(t),rdr=i(D),d8=n(D,"LI",{});var Kke=s(d8);M1e=n(Kke,"STRONG",{});var vvt=s(M1e);tdr=r(vvt,"deberta-v2"),vvt.forEach(t),adr=r(Kke," \u2014 "),cW=n(Kke,"A",{href:!0});var Fvt=s(cW);ndr=r(Fvt,"TFDebertaV2Model"),Fvt.forEach(t),sdr=r(Kke," (DeBERTa-v2 model)"),Kke.forEach(t),ldr=i(D),c8=n(D,"LI",{});var Zke=s(c8);E1e=n(Zke,"STRONG",{});var Tvt=s(E1e);idr=r(Tvt,"distilbert"),Tvt.forEach(t),ddr=r(Zke," \u2014 "),fW=n(Zke,"A",{href:!0});var Mvt=s(fW);cdr=r(Mvt,"TFDistilBertModel"),Mvt.forEach(t),fdr=r(Zke," (DistilBERT model)"),Zke.forEach(t),mdr=i(D),f8=n(D,"LI",{});var eSe=s(f8);C1e=n(eSe,"STRONG",{});var Evt=s(C1e);gdr=r(Evt,"dpr"),Evt.forEach(t),hdr=r(eSe," \u2014 "),mW=n(eSe,"A",{href:!0});var Cvt=s(mW);pdr=r(Cvt,"TFDPRQuestionEncoder"),Cvt.forEach(t),udr=r(eSe," (DPR model)"),eSe.forEach(t),_dr=i(D),m8=n(D,"LI",{});var oSe=s(m8);w1e=n(oSe,"STRONG",{});var wvt=s(w1e);bdr=r(wvt,"electra"),wvt.forEach(t),vdr=r(oSe," \u2014 "),gW=n(oSe,"A",{href:!0});var Avt=s(gW);Fdr=r(Avt,"TFElectraModel"),Avt.forEach(t),Tdr=r(oSe," (ELECTRA model)"),oSe.forEach(t),Mdr=i(D),g8=n(D,"LI",{});var rSe=s(g8);A1e=n(rSe,"STRONG",{});var yvt=s(A1e);Edr=r(yvt,"flaubert"),yvt.forEach(t),Cdr=r(rSe," \u2014 "),hW=n(rSe,"A",{href:!0});var Lvt=s(hW);wdr=r(Lvt,"TFFlaubertModel"),Lvt.forEach(t),Adr=r(rSe," (FlauBERT model)"),rSe.forEach(t),ydr=i(D),Gs=n(D,"LI",{});var H$=s(Gs);y1e=n(H$,"STRONG",{});var xvt=s(y1e);Ldr=r(xvt,"funnel"),xvt.forEach(t),xdr=r(H$," \u2014 "),pW=n(H$,"A",{href:!0});var $vt=s(pW);$dr=r($vt,"TFFunnelModel"),$vt.forEach(t),kdr=r(H$," or "),uW=n(H$,"A",{href:!0});var kvt=s(uW);Sdr=r(kvt,"TFFunnelBaseModel"),kvt.forEach(t),Rdr=r(H$," (Funnel Transformer model)"),H$.forEach(t),Pdr=i(D),h8=n(D,"LI",{});var tSe=s(h8);L1e=n(tSe,"STRONG",{});var Svt=s(L1e);Bdr=r(Svt,"gpt2"),Svt.forEach(t),Idr=r(tSe," \u2014 "),_W=n(tSe,"A",{href:!0});var Rvt=s(_W);qdr=r(Rvt,"TFGPT2Model"),Rvt.forEach(t),Ndr=r(tSe," (OpenAI GPT-2 model)"),tSe.forEach(t),jdr=i(D),p8=n(D,"LI",{});var aSe=s(p8);x1e=n(aSe,"STRONG",{});var Pvt=s(x1e);Ddr=r(Pvt,"gptj"),Pvt.forEach(t),Gdr=r(aSe," \u2014 "),bW=n(aSe,"A",{href:!0});var Bvt=s(bW);Odr=r(Bvt,"TFGPTJModel"),Bvt.forEach(t),Vdr=r(aSe," (GPT-J model)"),aSe.forEach(t),Xdr=i(D),u8=n(D,"LI",{});var nSe=s(u8);$1e=n(nSe,"STRONG",{});var Ivt=s($1e);zdr=r(Ivt,"hubert"),Ivt.forEach(t),Wdr=r(nSe," \u2014 "),vW=n(nSe,"A",{href:!0});var qvt=s(vW);Qdr=r(qvt,"TFHubertModel"),qvt.forEach(t),Hdr=r(nSe," (Hubert model)"),nSe.forEach(t),Udr=i(D),_8=n(D,"LI",{});var sSe=s(_8);k1e=n(sSe,"STRONG",{});var Nvt=s(k1e);Jdr=r(Nvt,"layoutlm"),Nvt.forEach(t),Ydr=r(sSe," \u2014 "),FW=n(sSe,"A",{href:!0});var jvt=s(FW);Kdr=r(jvt,"TFLayoutLMModel"),jvt.forEach(t),Zdr=r(sSe," (LayoutLM model)"),sSe.forEach(t),ecr=i(D),b8=n(D,"LI",{});var lSe=s(b8);S1e=n(lSe,"STRONG",{});var Dvt=s(S1e);ocr=r(Dvt,"led"),Dvt.forEach(t),rcr=r(lSe," \u2014 "),TW=n(lSe,"A",{href:!0});var Gvt=s(TW);tcr=r(Gvt,"TFLEDModel"),Gvt.forEach(t),acr=r(lSe," (LED model)"),lSe.forEach(t),ncr=i(D),v8=n(D,"LI",{});var iSe=s(v8);R1e=n(iSe,"STRONG",{});var Ovt=s(R1e);scr=r(Ovt,"longformer"),Ovt.forEach(t),lcr=r(iSe," \u2014 "),MW=n(iSe,"A",{href:!0});var Vvt=s(MW);icr=r(Vvt,"TFLongformerModel"),Vvt.forEach(t),dcr=r(iSe," (Longformer model)"),iSe.forEach(t),ccr=i(D),F8=n(D,"LI",{});var dSe=s(F8);P1e=n(dSe,"STRONG",{});var Xvt=s(P1e);fcr=r(Xvt,"lxmert"),Xvt.forEach(t),mcr=r(dSe," \u2014 "),EW=n(dSe,"A",{href:!0});var zvt=s(EW);gcr=r(zvt,"TFLxmertModel"),zvt.forEach(t),hcr=r(dSe," (LXMERT model)"),dSe.forEach(t),pcr=i(D),T8=n(D,"LI",{});var cSe=s(T8);B1e=n(cSe,"STRONG",{});var Wvt=s(B1e);ucr=r(Wvt,"marian"),Wvt.forEach(t),_cr=r(cSe," \u2014 "),CW=n(cSe,"A",{href:!0});var Qvt=s(CW);bcr=r(Qvt,"TFMarianModel"),Qvt.forEach(t),vcr=r(cSe," (Marian model)"),cSe.forEach(t),Fcr=i(D),M8=n(D,"LI",{});var fSe=s(M8);I1e=n(fSe,"STRONG",{});var Hvt=s(I1e);Tcr=r(Hvt,"mbart"),Hvt.forEach(t),Mcr=r(fSe," \u2014 "),wW=n(fSe,"A",{href:!0});var Uvt=s(wW);Ecr=r(Uvt,"TFMBartModel"),Uvt.forEach(t),Ccr=r(fSe," (mBART model)"),fSe.forEach(t),wcr=i(D),E8=n(D,"LI",{});var mSe=s(E8);q1e=n(mSe,"STRONG",{});var Jvt=s(q1e);Acr=r(Jvt,"mobilebert"),Jvt.forEach(t),ycr=r(mSe," \u2014 "),AW=n(mSe,"A",{href:!0});var Yvt=s(AW);Lcr=r(Yvt,"TFMobileBertModel"),Yvt.forEach(t),xcr=r(mSe," (MobileBERT model)"),mSe.forEach(t),$cr=i(D),C8=n(D,"LI",{});var gSe=s(C8);N1e=n(gSe,"STRONG",{});var Kvt=s(N1e);kcr=r(Kvt,"mpnet"),Kvt.forEach(t),Scr=r(gSe," \u2014 "),yW=n(gSe,"A",{href:!0});var Zvt=s(yW);Rcr=r(Zvt,"TFMPNetModel"),Zvt.forEach(t),Pcr=r(gSe," (MPNet model)"),gSe.forEach(t),Bcr=i(D),w8=n(D,"LI",{});var hSe=s(w8);j1e=n(hSe,"STRONG",{});var eFt=s(j1e);Icr=r(eFt,"mt5"),eFt.forEach(t),qcr=r(hSe," \u2014 "),LW=n(hSe,"A",{href:!0});var oFt=s(LW);Ncr=r(oFt,"TFMT5Model"),oFt.forEach(t),jcr=r(hSe," (mT5 model)"),hSe.forEach(t),Dcr=i(D),A8=n(D,"LI",{});var pSe=s(A8);D1e=n(pSe,"STRONG",{});var rFt=s(D1e);Gcr=r(rFt,"openai-gpt"),rFt.forEach(t),Ocr=r(pSe," \u2014 "),xW=n(pSe,"A",{href:!0});var tFt=s(xW);Vcr=r(tFt,"TFOpenAIGPTModel"),tFt.forEach(t),Xcr=r(pSe," (OpenAI GPT model)"),pSe.forEach(t),zcr=i(D),y8=n(D,"LI",{});var uSe=s(y8);G1e=n(uSe,"STRONG",{});var aFt=s(G1e);Wcr=r(aFt,"pegasus"),aFt.forEach(t),Qcr=r(uSe," \u2014 "),$W=n(uSe,"A",{href:!0});var nFt=s($W);Hcr=r(nFt,"TFPegasusModel"),nFt.forEach(t),Ucr=r(uSe," (Pegasus model)"),uSe.forEach(t),Jcr=i(D),L8=n(D,"LI",{});var _Se=s(L8);O1e=n(_Se,"STRONG",{});var sFt=s(O1e);Ycr=r(sFt,"rembert"),sFt.forEach(t),Kcr=r(_Se," \u2014 "),kW=n(_Se,"A",{href:!0});var lFt=s(kW);Zcr=r(lFt,"TFRemBertModel"),lFt.forEach(t),efr=r(_Se," (RemBERT model)"),_Se.forEach(t),ofr=i(D),x8=n(D,"LI",{});var bSe=s(x8);V1e=n(bSe,"STRONG",{});var iFt=s(V1e);rfr=r(iFt,"roberta"),iFt.forEach(t),tfr=r(bSe," \u2014 "),SW=n(bSe,"A",{href:!0});var dFt=s(SW);afr=r(dFt,"TFRobertaModel"),dFt.forEach(t),nfr=r(bSe," (RoBERTa model)"),bSe.forEach(t),sfr=i(D),$8=n(D,"LI",{});var vSe=s($8);X1e=n(vSe,"STRONG",{});var cFt=s(X1e);lfr=r(cFt,"roformer"),cFt.forEach(t),ifr=r(vSe," \u2014 "),RW=n(vSe,"A",{href:!0});var fFt=s(RW);dfr=r(fFt,"TFRoFormerModel"),fFt.forEach(t),cfr=r(vSe," (RoFormer model)"),vSe.forEach(t),ffr=i(D),k8=n(D,"LI",{});var FSe=s(k8);z1e=n(FSe,"STRONG",{});var mFt=s(z1e);mfr=r(mFt,"speech_to_text"),mFt.forEach(t),gfr=r(FSe," \u2014 "),PW=n(FSe,"A",{href:!0});var gFt=s(PW);hfr=r(gFt,"TFSpeech2TextModel"),gFt.forEach(t),pfr=r(FSe," (Speech2Text model)"),FSe.forEach(t),ufr=i(D),S8=n(D,"LI",{});var TSe=s(S8);W1e=n(TSe,"STRONG",{});var hFt=s(W1e);_fr=r(hFt,"swin"),hFt.forEach(t),bfr=r(TSe," \u2014 "),BW=n(TSe,"A",{href:!0});var pFt=s(BW);vfr=r(pFt,"TFSwinModel"),pFt.forEach(t),Ffr=r(TSe," (Swin model)"),TSe.forEach(t),Tfr=i(D),R8=n(D,"LI",{});var MSe=s(R8);Q1e=n(MSe,"STRONG",{});var uFt=s(Q1e);Mfr=r(uFt,"t5"),uFt.forEach(t),Efr=r(MSe," \u2014 "),IW=n(MSe,"A",{href:!0});var _Ft=s(IW);Cfr=r(_Ft,"TFT5Model"),_Ft.forEach(t),wfr=r(MSe," (T5 model)"),MSe.forEach(t),Afr=i(D),P8=n(D,"LI",{});var ESe=s(P8);H1e=n(ESe,"STRONG",{});var bFt=s(H1e);yfr=r(bFt,"tapas"),bFt.forEach(t),Lfr=r(ESe," \u2014 "),qW=n(ESe,"A",{href:!0});var vFt=s(qW);xfr=r(vFt,"TFTapasModel"),vFt.forEach(t),$fr=r(ESe," (TAPAS model)"),ESe.forEach(t),kfr=i(D),B8=n(D,"LI",{});var CSe=s(B8);U1e=n(CSe,"STRONG",{});var FFt=s(U1e);Sfr=r(FFt,"transfo-xl"),FFt.forEach(t),Rfr=r(CSe," \u2014 "),NW=n(CSe,"A",{href:!0});var TFt=s(NW);Pfr=r(TFt,"TFTransfoXLModel"),TFt.forEach(t),Bfr=r(CSe," (Transformer-XL model)"),CSe.forEach(t),Ifr=i(D),I8=n(D,"LI",{});var wSe=s(I8);J1e=n(wSe,"STRONG",{});var MFt=s(J1e);qfr=r(MFt,"vit"),MFt.forEach(t),Nfr=r(wSe," \u2014 "),jW=n(wSe,"A",{href:!0});var EFt=s(jW);jfr=r(EFt,"TFViTModel"),EFt.forEach(t),Dfr=r(wSe," (ViT model)"),wSe.forEach(t),Gfr=i(D),q8=n(D,"LI",{});var ASe=s(q8);Y1e=n(ASe,"STRONG",{});var CFt=s(Y1e);Ofr=r(CFt,"vit_mae"),CFt.forEach(t),Vfr=r(ASe," \u2014 "),DW=n(ASe,"A",{href:!0});var wFt=s(DW);Xfr=r(wFt,"TFViTMAEModel"),wFt.forEach(t),zfr=r(ASe," (ViTMAE model)"),ASe.forEach(t),Wfr=i(D),N8=n(D,"LI",{});var ySe=s(N8);K1e=n(ySe,"STRONG",{});var AFt=s(K1e);Qfr=r(AFt,"wav2vec2"),AFt.forEach(t),Hfr=r(ySe," \u2014 "),GW=n(ySe,"A",{href:!0});var yFt=s(GW);Ufr=r(yFt,"TFWav2Vec2Model"),yFt.forEach(t),Jfr=r(ySe," (Wav2Vec2 model)"),ySe.forEach(t),Yfr=i(D),j8=n(D,"LI",{});var LSe=s(j8);Z1e=n(LSe,"STRONG",{});var LFt=s(Z1e);Kfr=r(LFt,"xlm"),LFt.forEach(t),Zfr=r(LSe," \u2014 "),OW=n(LSe,"A",{href:!0});var xFt=s(OW);emr=r(xFt,"TFXLMModel"),xFt.forEach(t),omr=r(LSe," (XLM model)"),LSe.forEach(t),rmr=i(D),D8=n(D,"LI",{});var xSe=s(D8);ebe=n(xSe,"STRONG",{});var $Ft=s(ebe);tmr=r($Ft,"xlm-roberta"),$Ft.forEach(t),amr=r(xSe," \u2014 "),VW=n(xSe,"A",{href:!0});var kFt=s(VW);nmr=r(kFt,"TFXLMRobertaModel"),kFt.forEach(t),smr=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),lmr=i(D),G8=n(D,"LI",{});var $Se=s(G8);obe=n($Se,"STRONG",{});var SFt=s(obe);imr=r(SFt,"xlnet"),SFt.forEach(t),dmr=r($Se," \u2014 "),XW=n($Se,"A",{href:!0});var RFt=s(XW);cmr=r(RFt,"TFXLNetModel"),RFt.forEach(t),fmr=r($Se," (XLNet model)"),$Se.forEach(t),D.forEach(t),mmr=i(Fl),T(O8.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),SNe=i(f),Zd=n(f,"H2",{class:!0});var DDe=s(Zd);V8=n(DDe,"A",{id:!0,class:!0,href:!0});var PFt=s(V8);rbe=n(PFt,"SPAN",{});var BFt=s(rbe);T(_L.$$.fragment,BFt),BFt.forEach(t),PFt.forEach(t),gmr=i(DDe),tbe=n(DDe,"SPAN",{});var IFt=s(tbe);hmr=r(IFt,"TFAutoModelForPreTraining"),IFt.forEach(t),DDe.forEach(t),RNe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(bL.$$.fragment,Tl),pmr=i(Tl),ec=n(Tl,"P",{});var ree=s(ec);umr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zW=n(ree,"A",{href:!0});var qFt=s(zW);_mr=r(qFt,"from_pretrained()"),qFt.forEach(t),bmr=r(ree," class method or the "),WW=n(ree,"A",{href:!0});var NFt=s(WW);vmr=r(NFt,"from_config()"),NFt.forEach(t),Fmr=r(ree,` class
method.`),ree.forEach(t),Tmr=i(Tl),vL=n(Tl,"P",{});var GDe=s(vL);Mmr=r(GDe,"This class cannot be instantiated directly using "),abe=n(GDe,"CODE",{});var jFt=s(abe);Emr=r(jFt,"__init__()"),jFt.forEach(t),Cmr=r(GDe," (throws an error)."),GDe.forEach(t),wmr=i(Tl),kt=n(Tl,"DIV",{class:!0});var ww=s(kt);T(FL.$$.fragment,ww),Amr=i(ww),nbe=n(ww,"P",{});var DFt=s(nbe);ymr=r(DFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DFt.forEach(t),Lmr=i(ww),oc=n(ww,"P",{});var tee=s(oc);xmr=r(tee,`Note:
Loading a model from its configuration file does `),sbe=n(tee,"STRONG",{});var GFt=s(sbe);$mr=r(GFt,"not"),GFt.forEach(t),kmr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(tee,"A",{href:!0});var OFt=s(QW);Smr=r(OFt,"from_pretrained()"),OFt.forEach(t),Rmr=r(tee," to load the model weights."),tee.forEach(t),Pmr=i(ww),T(X8.$$.fragment,ww),ww.forEach(t),Bmr=i(Tl),Lr=n(Tl,"DIV",{class:!0});var Ml=s(Lr);T(TL.$$.fragment,Ml),Imr=i(Ml),lbe=n(Ml,"P",{});var VFt=s(lbe);qmr=r(VFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VFt.forEach(t),Nmr=i(Ml),an=n(Ml,"P",{});var Aw=s(an);jmr=r(Aw,"The model class to instantiate is selected based on the "),ibe=n(Aw,"CODE",{});var XFt=s(ibe);Dmr=r(XFt,"model_type"),XFt.forEach(t),Gmr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),dbe=n(Aw,"CODE",{});var zFt=s(dbe);Omr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),Vmr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(Aw,"CODE",{});var WFt=s(cbe);Xmr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),zmr=r(Aw,":"),Aw.forEach(t),Wmr=i(Ml),se=n(Ml,"UL",{});var le=s(se);z8=n(le,"LI",{});var kSe=s(z8);fbe=n(kSe,"STRONG",{});var QFt=s(fbe);Qmr=r(QFt,"albert"),QFt.forEach(t),Hmr=r(kSe," \u2014 "),HW=n(kSe,"A",{href:!0});var HFt=s(HW);Umr=r(HFt,"TFAlbertForPreTraining"),HFt.forEach(t),Jmr=r(kSe," (ALBERT model)"),kSe.forEach(t),Ymr=i(le),W8=n(le,"LI",{});var SSe=s(W8);mbe=n(SSe,"STRONG",{});var UFt=s(mbe);Kmr=r(UFt,"bart"),UFt.forEach(t),Zmr=r(SSe," \u2014 "),UW=n(SSe,"A",{href:!0});var JFt=s(UW);egr=r(JFt,"TFBartForConditionalGeneration"),JFt.forEach(t),ogr=r(SSe," (BART model)"),SSe.forEach(t),rgr=i(le),Q8=n(le,"LI",{});var RSe=s(Q8);gbe=n(RSe,"STRONG",{});var YFt=s(gbe);tgr=r(YFt,"bert"),YFt.forEach(t),agr=r(RSe," \u2014 "),JW=n(RSe,"A",{href:!0});var KFt=s(JW);ngr=r(KFt,"TFBertForPreTraining"),KFt.forEach(t),sgr=r(RSe," (BERT model)"),RSe.forEach(t),lgr=i(le),H8=n(le,"LI",{});var PSe=s(H8);hbe=n(PSe,"STRONG",{});var ZFt=s(hbe);igr=r(ZFt,"camembert"),ZFt.forEach(t),dgr=r(PSe," \u2014 "),YW=n(PSe,"A",{href:!0});var e6t=s(YW);cgr=r(e6t,"TFCamembertForMaskedLM"),e6t.forEach(t),fgr=r(PSe," (CamemBERT model)"),PSe.forEach(t),mgr=i(le),U8=n(le,"LI",{});var BSe=s(U8);pbe=n(BSe,"STRONG",{});var o6t=s(pbe);ggr=r(o6t,"ctrl"),o6t.forEach(t),hgr=r(BSe," \u2014 "),KW=n(BSe,"A",{href:!0});var r6t=s(KW);pgr=r(r6t,"TFCTRLLMHeadModel"),r6t.forEach(t),ugr=r(BSe," (CTRL model)"),BSe.forEach(t),_gr=i(le),J8=n(le,"LI",{});var ISe=s(J8);ube=n(ISe,"STRONG",{});var t6t=s(ube);bgr=r(t6t,"distilbert"),t6t.forEach(t),vgr=r(ISe," \u2014 "),ZW=n(ISe,"A",{href:!0});var a6t=s(ZW);Fgr=r(a6t,"TFDistilBertForMaskedLM"),a6t.forEach(t),Tgr=r(ISe," (DistilBERT model)"),ISe.forEach(t),Mgr=i(le),Y8=n(le,"LI",{});var qSe=s(Y8);_be=n(qSe,"STRONG",{});var n6t=s(_be);Egr=r(n6t,"electra"),n6t.forEach(t),Cgr=r(qSe," \u2014 "),eQ=n(qSe,"A",{href:!0});var s6t=s(eQ);wgr=r(s6t,"TFElectraForPreTraining"),s6t.forEach(t),Agr=r(qSe," (ELECTRA model)"),qSe.forEach(t),ygr=i(le),K8=n(le,"LI",{});var NSe=s(K8);bbe=n(NSe,"STRONG",{});var l6t=s(bbe);Lgr=r(l6t,"flaubert"),l6t.forEach(t),xgr=r(NSe," \u2014 "),oQ=n(NSe,"A",{href:!0});var i6t=s(oQ);$gr=r(i6t,"TFFlaubertWithLMHeadModel"),i6t.forEach(t),kgr=r(NSe," (FlauBERT model)"),NSe.forEach(t),Sgr=i(le),Z8=n(le,"LI",{});var jSe=s(Z8);vbe=n(jSe,"STRONG",{});var d6t=s(vbe);Rgr=r(d6t,"funnel"),d6t.forEach(t),Pgr=r(jSe," \u2014 "),rQ=n(jSe,"A",{href:!0});var c6t=s(rQ);Bgr=r(c6t,"TFFunnelForPreTraining"),c6t.forEach(t),Igr=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),qgr=i(le),e7=n(le,"LI",{});var DSe=s(e7);Fbe=n(DSe,"STRONG",{});var f6t=s(Fbe);Ngr=r(f6t,"gpt2"),f6t.forEach(t),jgr=r(DSe," \u2014 "),tQ=n(DSe,"A",{href:!0});var m6t=s(tQ);Dgr=r(m6t,"TFGPT2LMHeadModel"),m6t.forEach(t),Ggr=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),Ogr=i(le),o7=n(le,"LI",{});var GSe=s(o7);Tbe=n(GSe,"STRONG",{});var g6t=s(Tbe);Vgr=r(g6t,"layoutlm"),g6t.forEach(t),Xgr=r(GSe," \u2014 "),aQ=n(GSe,"A",{href:!0});var h6t=s(aQ);zgr=r(h6t,"TFLayoutLMForMaskedLM"),h6t.forEach(t),Wgr=r(GSe," (LayoutLM model)"),GSe.forEach(t),Qgr=i(le),r7=n(le,"LI",{});var OSe=s(r7);Mbe=n(OSe,"STRONG",{});var p6t=s(Mbe);Hgr=r(p6t,"lxmert"),p6t.forEach(t),Ugr=r(OSe," \u2014 "),nQ=n(OSe,"A",{href:!0});var u6t=s(nQ);Jgr=r(u6t,"TFLxmertForPreTraining"),u6t.forEach(t),Ygr=r(OSe," (LXMERT model)"),OSe.forEach(t),Kgr=i(le),t7=n(le,"LI",{});var VSe=s(t7);Ebe=n(VSe,"STRONG",{});var _6t=s(Ebe);Zgr=r(_6t,"mobilebert"),_6t.forEach(t),ehr=r(VSe," \u2014 "),sQ=n(VSe,"A",{href:!0});var b6t=s(sQ);ohr=r(b6t,"TFMobileBertForPreTraining"),b6t.forEach(t),rhr=r(VSe," (MobileBERT model)"),VSe.forEach(t),thr=i(le),a7=n(le,"LI",{});var XSe=s(a7);Cbe=n(XSe,"STRONG",{});var v6t=s(Cbe);ahr=r(v6t,"mpnet"),v6t.forEach(t),nhr=r(XSe," \u2014 "),lQ=n(XSe,"A",{href:!0});var F6t=s(lQ);shr=r(F6t,"TFMPNetForMaskedLM"),F6t.forEach(t),lhr=r(XSe," (MPNet model)"),XSe.forEach(t),ihr=i(le),n7=n(le,"LI",{});var zSe=s(n7);wbe=n(zSe,"STRONG",{});var T6t=s(wbe);dhr=r(T6t,"openai-gpt"),T6t.forEach(t),chr=r(zSe," \u2014 "),iQ=n(zSe,"A",{href:!0});var M6t=s(iQ);fhr=r(M6t,"TFOpenAIGPTLMHeadModel"),M6t.forEach(t),mhr=r(zSe," (OpenAI GPT model)"),zSe.forEach(t),ghr=i(le),s7=n(le,"LI",{});var WSe=s(s7);Abe=n(WSe,"STRONG",{});var E6t=s(Abe);hhr=r(E6t,"roberta"),E6t.forEach(t),phr=r(WSe," \u2014 "),dQ=n(WSe,"A",{href:!0});var C6t=s(dQ);uhr=r(C6t,"TFRobertaForMaskedLM"),C6t.forEach(t),_hr=r(WSe," (RoBERTa model)"),WSe.forEach(t),bhr=i(le),l7=n(le,"LI",{});var QSe=s(l7);ybe=n(QSe,"STRONG",{});var w6t=s(ybe);vhr=r(w6t,"t5"),w6t.forEach(t),Fhr=r(QSe," \u2014 "),cQ=n(QSe,"A",{href:!0});var A6t=s(cQ);Thr=r(A6t,"TFT5ForConditionalGeneration"),A6t.forEach(t),Mhr=r(QSe," (T5 model)"),QSe.forEach(t),Ehr=i(le),i7=n(le,"LI",{});var HSe=s(i7);Lbe=n(HSe,"STRONG",{});var y6t=s(Lbe);Chr=r(y6t,"tapas"),y6t.forEach(t),whr=r(HSe," \u2014 "),fQ=n(HSe,"A",{href:!0});var L6t=s(fQ);Ahr=r(L6t,"TFTapasForMaskedLM"),L6t.forEach(t),yhr=r(HSe," (TAPAS model)"),HSe.forEach(t),Lhr=i(le),d7=n(le,"LI",{});var USe=s(d7);xbe=n(USe,"STRONG",{});var x6t=s(xbe);xhr=r(x6t,"transfo-xl"),x6t.forEach(t),$hr=r(USe," \u2014 "),mQ=n(USe,"A",{href:!0});var $6t=s(mQ);khr=r($6t,"TFTransfoXLLMHeadModel"),$6t.forEach(t),Shr=r(USe," (Transformer-XL model)"),USe.forEach(t),Rhr=i(le),c7=n(le,"LI",{});var JSe=s(c7);$be=n(JSe,"STRONG",{});var k6t=s($be);Phr=r(k6t,"vit_mae"),k6t.forEach(t),Bhr=r(JSe," \u2014 "),gQ=n(JSe,"A",{href:!0});var S6t=s(gQ);Ihr=r(S6t,"TFViTMAEForPreTraining"),S6t.forEach(t),qhr=r(JSe," (ViTMAE model)"),JSe.forEach(t),Nhr=i(le),f7=n(le,"LI",{});var YSe=s(f7);kbe=n(YSe,"STRONG",{});var R6t=s(kbe);jhr=r(R6t,"xlm"),R6t.forEach(t),Dhr=r(YSe," \u2014 "),hQ=n(YSe,"A",{href:!0});var P6t=s(hQ);Ghr=r(P6t,"TFXLMWithLMHeadModel"),P6t.forEach(t),Ohr=r(YSe," (XLM model)"),YSe.forEach(t),Vhr=i(le),m7=n(le,"LI",{});var KSe=s(m7);Sbe=n(KSe,"STRONG",{});var B6t=s(Sbe);Xhr=r(B6t,"xlm-roberta"),B6t.forEach(t),zhr=r(KSe," \u2014 "),pQ=n(KSe,"A",{href:!0});var I6t=s(pQ);Whr=r(I6t,"TFXLMRobertaForMaskedLM"),I6t.forEach(t),Qhr=r(KSe," (XLM-RoBERTa model)"),KSe.forEach(t),Hhr=i(le),g7=n(le,"LI",{});var ZSe=s(g7);Rbe=n(ZSe,"STRONG",{});var q6t=s(Rbe);Uhr=r(q6t,"xlnet"),q6t.forEach(t),Jhr=r(ZSe," \u2014 "),uQ=n(ZSe,"A",{href:!0});var N6t=s(uQ);Yhr=r(N6t,"TFXLNetLMHeadModel"),N6t.forEach(t),Khr=r(ZSe," (XLNet model)"),ZSe.forEach(t),le.forEach(t),Zhr=i(Ml),T(h7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),PNe=i(f),rc=n(f,"H2",{class:!0});var ODe=s(rc);p7=n(ODe,"A",{id:!0,class:!0,href:!0});var j6t=s(p7);Pbe=n(j6t,"SPAN",{});var D6t=s(Pbe);T(ML.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),epr=i(ODe),Bbe=n(ODe,"SPAN",{});var G6t=s(Bbe);opr=r(G6t,"TFAutoModelForCausalLM"),G6t.forEach(t),ODe.forEach(t),BNe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(EL.$$.fragment,El),rpr=i(El),tc=n(El,"P",{});var aee=s(tc);tpr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=n(aee,"A",{href:!0});var O6t=s(_Q);apr=r(O6t,"from_pretrained()"),O6t.forEach(t),npr=r(aee," class method or the "),bQ=n(aee,"A",{href:!0});var V6t=s(bQ);spr=r(V6t,"from_config()"),V6t.forEach(t),lpr=r(aee,` class
method.`),aee.forEach(t),ipr=i(El),CL=n(El,"P",{});var VDe=s(CL);dpr=r(VDe,"This class cannot be instantiated directly using "),Ibe=n(VDe,"CODE",{});var X6t=s(Ibe);cpr=r(X6t,"__init__()"),X6t.forEach(t),fpr=r(VDe," (throws an error)."),VDe.forEach(t),mpr=i(El),St=n(El,"DIV",{class:!0});var yw=s(St);T(wL.$$.fragment,yw),gpr=i(yw),qbe=n(yw,"P",{});var z6t=s(qbe);hpr=r(z6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z6t.forEach(t),ppr=i(yw),ac=n(yw,"P",{});var nee=s(ac);upr=r(nee,`Note:
Loading a model from its configuration file does `),Nbe=n(nee,"STRONG",{});var W6t=s(Nbe);_pr=r(W6t,"not"),W6t.forEach(t),bpr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(nee,"A",{href:!0});var Q6t=s(vQ);vpr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),Fpr=r(nee," to load the model weights."),nee.forEach(t),Tpr=i(yw),T(u7.$$.fragment,yw),yw.forEach(t),Mpr=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(AL.$$.fragment,Cl),Epr=i(Cl),jbe=n(Cl,"P",{});var H6t=s(jbe);Cpr=r(H6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H6t.forEach(t),wpr=i(Cl),nn=n(Cl,"P",{});var Lw=s(nn);Apr=r(Lw,"The model class to instantiate is selected based on the "),Dbe=n(Lw,"CODE",{});var U6t=s(Dbe);ypr=r(U6t,"model_type"),U6t.forEach(t),Lpr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(Lw,"CODE",{});var J6t=s(Gbe);xpr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),$pr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(Lw,"CODE",{});var Y6t=s(Obe);kpr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),Spr=r(Lw,":"),Lw.forEach(t),Rpr=i(Cl),Te=n(Cl,"UL",{});var Ce=s(Te);_7=n(Ce,"LI",{});var eRe=s(_7);Vbe=n(eRe,"STRONG",{});var K6t=s(Vbe);Ppr=r(K6t,"bert"),K6t.forEach(t),Bpr=r(eRe," \u2014 "),FQ=n(eRe,"A",{href:!0});var Z6t=s(FQ);Ipr=r(Z6t,"TFBertLMHeadModel"),Z6t.forEach(t),qpr=r(eRe," (BERT model)"),eRe.forEach(t),Npr=i(Ce),b7=n(Ce,"LI",{});var oRe=s(b7);Xbe=n(oRe,"STRONG",{});var eTt=s(Xbe);jpr=r(eTt,"camembert"),eTt.forEach(t),Dpr=r(oRe," \u2014 "),TQ=n(oRe,"A",{href:!0});var oTt=s(TQ);Gpr=r(oTt,"TFCamembertForCausalLM"),oTt.forEach(t),Opr=r(oRe," (CamemBERT model)"),oRe.forEach(t),Vpr=i(Ce),v7=n(Ce,"LI",{});var rRe=s(v7);zbe=n(rRe,"STRONG",{});var rTt=s(zbe);Xpr=r(rTt,"ctrl"),rTt.forEach(t),zpr=r(rRe," \u2014 "),MQ=n(rRe,"A",{href:!0});var tTt=s(MQ);Wpr=r(tTt,"TFCTRLLMHeadModel"),tTt.forEach(t),Qpr=r(rRe," (CTRL model)"),rRe.forEach(t),Hpr=i(Ce),F7=n(Ce,"LI",{});var tRe=s(F7);Wbe=n(tRe,"STRONG",{});var aTt=s(Wbe);Upr=r(aTt,"gpt2"),aTt.forEach(t),Jpr=r(tRe," \u2014 "),EQ=n(tRe,"A",{href:!0});var nTt=s(EQ);Ypr=r(nTt,"TFGPT2LMHeadModel"),nTt.forEach(t),Kpr=r(tRe," (OpenAI GPT-2 model)"),tRe.forEach(t),Zpr=i(Ce),T7=n(Ce,"LI",{});var aRe=s(T7);Qbe=n(aRe,"STRONG",{});var sTt=s(Qbe);eur=r(sTt,"gptj"),sTt.forEach(t),our=r(aRe," \u2014 "),CQ=n(aRe,"A",{href:!0});var lTt=s(CQ);rur=r(lTt,"TFGPTJForCausalLM"),lTt.forEach(t),tur=r(aRe," (GPT-J model)"),aRe.forEach(t),aur=i(Ce),M7=n(Ce,"LI",{});var nRe=s(M7);Hbe=n(nRe,"STRONG",{});var iTt=s(Hbe);nur=r(iTt,"openai-gpt"),iTt.forEach(t),sur=r(nRe," \u2014 "),wQ=n(nRe,"A",{href:!0});var dTt=s(wQ);lur=r(dTt,"TFOpenAIGPTLMHeadModel"),dTt.forEach(t),iur=r(nRe," (OpenAI GPT model)"),nRe.forEach(t),dur=i(Ce),E7=n(Ce,"LI",{});var sRe=s(E7);Ube=n(sRe,"STRONG",{});var cTt=s(Ube);cur=r(cTt,"rembert"),cTt.forEach(t),fur=r(sRe," \u2014 "),AQ=n(sRe,"A",{href:!0});var fTt=s(AQ);mur=r(fTt,"TFRemBertForCausalLM"),fTt.forEach(t),gur=r(sRe," (RemBERT model)"),sRe.forEach(t),hur=i(Ce),C7=n(Ce,"LI",{});var lRe=s(C7);Jbe=n(lRe,"STRONG",{});var mTt=s(Jbe);pur=r(mTt,"roberta"),mTt.forEach(t),uur=r(lRe," \u2014 "),yQ=n(lRe,"A",{href:!0});var gTt=s(yQ);_ur=r(gTt,"TFRobertaForCausalLM"),gTt.forEach(t),bur=r(lRe," (RoBERTa model)"),lRe.forEach(t),vur=i(Ce),w7=n(Ce,"LI",{});var iRe=s(w7);Ybe=n(iRe,"STRONG",{});var hTt=s(Ybe);Fur=r(hTt,"roformer"),hTt.forEach(t),Tur=r(iRe," \u2014 "),LQ=n(iRe,"A",{href:!0});var pTt=s(LQ);Mur=r(pTt,"TFRoFormerForCausalLM"),pTt.forEach(t),Eur=r(iRe," (RoFormer model)"),iRe.forEach(t),Cur=i(Ce),A7=n(Ce,"LI",{});var dRe=s(A7);Kbe=n(dRe,"STRONG",{});var uTt=s(Kbe);wur=r(uTt,"transfo-xl"),uTt.forEach(t),Aur=r(dRe," \u2014 "),xQ=n(dRe,"A",{href:!0});var _Tt=s(xQ);yur=r(_Tt,"TFTransfoXLLMHeadModel"),_Tt.forEach(t),Lur=r(dRe," (Transformer-XL model)"),dRe.forEach(t),xur=i(Ce),y7=n(Ce,"LI",{});var cRe=s(y7);Zbe=n(cRe,"STRONG",{});var bTt=s(Zbe);$ur=r(bTt,"xlm"),bTt.forEach(t),kur=r(cRe," \u2014 "),$Q=n(cRe,"A",{href:!0});var vTt=s($Q);Sur=r(vTt,"TFXLMWithLMHeadModel"),vTt.forEach(t),Rur=r(cRe," (XLM model)"),cRe.forEach(t),Pur=i(Ce),L7=n(Ce,"LI",{});var fRe=s(L7);eve=n(fRe,"STRONG",{});var FTt=s(eve);Bur=r(FTt,"xlnet"),FTt.forEach(t),Iur=r(fRe," \u2014 "),kQ=n(fRe,"A",{href:!0});var TTt=s(kQ);qur=r(TTt,"TFXLNetLMHeadModel"),TTt.forEach(t),Nur=r(fRe," (XLNet model)"),fRe.forEach(t),Ce.forEach(t),jur=i(Cl),T(x7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),INe=i(f),nc=n(f,"H2",{class:!0});var XDe=s(nc);$7=n(XDe,"A",{id:!0,class:!0,href:!0});var MTt=s($7);ove=n(MTt,"SPAN",{});var ETt=s(ove);T(yL.$$.fragment,ETt),ETt.forEach(t),MTt.forEach(t),Dur=i(XDe),rve=n(XDe,"SPAN",{});var CTt=s(rve);Gur=r(CTt,"TFAutoModelForImageClassification"),CTt.forEach(t),XDe.forEach(t),qNe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(LL.$$.fragment,wl),Our=i(wl),sc=n(wl,"P",{});var see=s(sc);Vur=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=n(see,"A",{href:!0});var wTt=s(SQ);Xur=r(wTt,"from_pretrained()"),wTt.forEach(t),zur=r(see," class method or the "),RQ=n(see,"A",{href:!0});var ATt=s(RQ);Wur=r(ATt,"from_config()"),ATt.forEach(t),Qur=r(see,` class
method.`),see.forEach(t),Hur=i(wl),xL=n(wl,"P",{});var zDe=s(xL);Uur=r(zDe,"This class cannot be instantiated directly using "),tve=n(zDe,"CODE",{});var yTt=s(tve);Jur=r(yTt,"__init__()"),yTt.forEach(t),Yur=r(zDe," (throws an error)."),zDe.forEach(t),Kur=i(wl),Rt=n(wl,"DIV",{class:!0});var xw=s(Rt);T($L.$$.fragment,xw),Zur=i(xw),ave=n(xw,"P",{});var LTt=s(ave);e_r=r(LTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LTt.forEach(t),o_r=i(xw),lc=n(xw,"P",{});var lee=s(lc);r_r=r(lee,`Note:
Loading a model from its configuration file does `),nve=n(lee,"STRONG",{});var xTt=s(nve);t_r=r(xTt,"not"),xTt.forEach(t),a_r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(lee,"A",{href:!0});var $Tt=s(PQ);n_r=r($Tt,"from_pretrained()"),$Tt.forEach(t),s_r=r(lee," to load the model weights."),lee.forEach(t),l_r=i(xw),T(k7.$$.fragment,xw),xw.forEach(t),i_r=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(kL.$$.fragment,Al),d_r=i(Al),sve=n(Al,"P",{});var kTt=s(sve);c_r=r(kTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kTt.forEach(t),f_r=i(Al),sn=n(Al,"P",{});var $w=s(sn);m_r=r($w,"The model class to instantiate is selected based on the "),lve=n($w,"CODE",{});var STt=s(lve);g_r=r(STt,"model_type"),STt.forEach(t),h_r=r($w,` property of the config object (either
passed as an argument or loaded from `),ive=n($w,"CODE",{});var RTt=s(ive);p_r=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),u_r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n($w,"CODE",{});var PTt=s(dve);__r=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),b_r=r($w,":"),$w.forEach(t),v_r=i(Al),ln=n(Al,"UL",{});var kw=s(ln);S7=n(kw,"LI",{});var mRe=s(S7);cve=n(mRe,"STRONG",{});var BTt=s(cve);F_r=r(BTt,"convnext"),BTt.forEach(t),T_r=r(mRe," \u2014 "),BQ=n(mRe,"A",{href:!0});var ITt=s(BQ);M_r=r(ITt,"TFConvNextForImageClassification"),ITt.forEach(t),E_r=r(mRe," (ConvNext model)"),mRe.forEach(t),C_r=i(kw),R7=n(kw,"LI",{});var gRe=s(R7);fve=n(gRe,"STRONG",{});var qTt=s(fve);w_r=r(qTt,"data2vec-vision"),qTt.forEach(t),A_r=r(gRe," \u2014 "),IQ=n(gRe,"A",{href:!0});var NTt=s(IQ);y_r=r(NTt,"TFData2VecVisionForImageClassification"),NTt.forEach(t),L_r=r(gRe," (Data2VecVision model)"),gRe.forEach(t),x_r=i(kw),P7=n(kw,"LI",{});var hRe=s(P7);mve=n(hRe,"STRONG",{});var jTt=s(mve);$_r=r(jTt,"swin"),jTt.forEach(t),k_r=r(hRe," \u2014 "),qQ=n(hRe,"A",{href:!0});var DTt=s(qQ);S_r=r(DTt,"TFSwinForImageClassification"),DTt.forEach(t),R_r=r(hRe," (Swin model)"),hRe.forEach(t),P_r=i(kw),B7=n(kw,"LI",{});var pRe=s(B7);gve=n(pRe,"STRONG",{});var GTt=s(gve);B_r=r(GTt,"vit"),GTt.forEach(t),I_r=r(pRe," \u2014 "),NQ=n(pRe,"A",{href:!0});var OTt=s(NQ);q_r=r(OTt,"TFViTForImageClassification"),OTt.forEach(t),N_r=r(pRe," (ViT model)"),pRe.forEach(t),kw.forEach(t),j_r=i(Al),T(I7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),NNe=i(f),ic=n(f,"H2",{class:!0});var WDe=s(ic);q7=n(WDe,"A",{id:!0,class:!0,href:!0});var VTt=s(q7);hve=n(VTt,"SPAN",{});var XTt=s(hve);T(SL.$$.fragment,XTt),XTt.forEach(t),VTt.forEach(t),D_r=i(WDe),pve=n(WDe,"SPAN",{});var zTt=s(pve);G_r=r(zTt,"TFAutoModelForMaskedLM"),zTt.forEach(t),WDe.forEach(t),jNe=i(f),tr=n(f,"DIV",{class:!0});var yl=s(tr);T(RL.$$.fragment,yl),O_r=i(yl),dc=n(yl,"P",{});var iee=s(dc);V_r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=n(iee,"A",{href:!0});var WTt=s(jQ);X_r=r(WTt,"from_pretrained()"),WTt.forEach(t),z_r=r(iee," class method or the "),DQ=n(iee,"A",{href:!0});var QTt=s(DQ);W_r=r(QTt,"from_config()"),QTt.forEach(t),Q_r=r(iee,` class
method.`),iee.forEach(t),H_r=i(yl),PL=n(yl,"P",{});var QDe=s(PL);U_r=r(QDe,"This class cannot be instantiated directly using "),uve=n(QDe,"CODE",{});var HTt=s(uve);J_r=r(HTt,"__init__()"),HTt.forEach(t),Y_r=r(QDe," (throws an error)."),QDe.forEach(t),K_r=i(yl),Pt=n(yl,"DIV",{class:!0});var Sw=s(Pt);T(BL.$$.fragment,Sw),Z_r=i(Sw),_ve=n(Sw,"P",{});var UTt=s(_ve);e2r=r(UTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UTt.forEach(t),o2r=i(Sw),cc=n(Sw,"P",{});var dee=s(cc);r2r=r(dee,`Note:
Loading a model from its configuration file does `),bve=n(dee,"STRONG",{});var JTt=s(bve);t2r=r(JTt,"not"),JTt.forEach(t),a2r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(dee,"A",{href:!0});var YTt=s(GQ);n2r=r(YTt,"from_pretrained()"),YTt.forEach(t),s2r=r(dee," to load the model weights."),dee.forEach(t),l2r=i(Sw),T(N7.$$.fragment,Sw),Sw.forEach(t),i2r=i(yl),kr=n(yl,"DIV",{class:!0});var Ll=s(kr);T(IL.$$.fragment,Ll),d2r=i(Ll),vve=n(Ll,"P",{});var KTt=s(vve);c2r=r(KTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KTt.forEach(t),f2r=i(Ll),dn=n(Ll,"P",{});var Rw=s(dn);m2r=r(Rw,"The model class to instantiate is selected based on the "),Fve=n(Rw,"CODE",{});var ZTt=s(Fve);g2r=r(ZTt,"model_type"),ZTt.forEach(t),h2r=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Tve=n(Rw,"CODE",{});var e8t=s(Tve);p2r=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),u2r=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(Rw,"CODE",{});var o8t=s(Mve);_2r=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),b2r=r(Rw,":"),Rw.forEach(t),v2r=i(Ll),ie=n(Ll,"UL",{});var fe=s(ie);j7=n(fe,"LI",{});var uRe=s(j7);Eve=n(uRe,"STRONG",{});var r8t=s(Eve);F2r=r(r8t,"albert"),r8t.forEach(t),T2r=r(uRe," \u2014 "),OQ=n(uRe,"A",{href:!0});var t8t=s(OQ);M2r=r(t8t,"TFAlbertForMaskedLM"),t8t.forEach(t),E2r=r(uRe," (ALBERT model)"),uRe.forEach(t),C2r=i(fe),D7=n(fe,"LI",{});var _Re=s(D7);Cve=n(_Re,"STRONG",{});var a8t=s(Cve);w2r=r(a8t,"bert"),a8t.forEach(t),A2r=r(_Re," \u2014 "),VQ=n(_Re,"A",{href:!0});var n8t=s(VQ);y2r=r(n8t,"TFBertForMaskedLM"),n8t.forEach(t),L2r=r(_Re," (BERT model)"),_Re.forEach(t),x2r=i(fe),G7=n(fe,"LI",{});var bRe=s(G7);wve=n(bRe,"STRONG",{});var s8t=s(wve);$2r=r(s8t,"camembert"),s8t.forEach(t),k2r=r(bRe," \u2014 "),XQ=n(bRe,"A",{href:!0});var l8t=s(XQ);S2r=r(l8t,"TFCamembertForMaskedLM"),l8t.forEach(t),R2r=r(bRe," (CamemBERT model)"),bRe.forEach(t),P2r=i(fe),O7=n(fe,"LI",{});var vRe=s(O7);Ave=n(vRe,"STRONG",{});var i8t=s(Ave);B2r=r(i8t,"convbert"),i8t.forEach(t),I2r=r(vRe," \u2014 "),zQ=n(vRe,"A",{href:!0});var d8t=s(zQ);q2r=r(d8t,"TFConvBertForMaskedLM"),d8t.forEach(t),N2r=r(vRe," (ConvBERT model)"),vRe.forEach(t),j2r=i(fe),V7=n(fe,"LI",{});var FRe=s(V7);yve=n(FRe,"STRONG",{});var c8t=s(yve);D2r=r(c8t,"deberta"),c8t.forEach(t),G2r=r(FRe," \u2014 "),WQ=n(FRe,"A",{href:!0});var f8t=s(WQ);O2r=r(f8t,"TFDebertaForMaskedLM"),f8t.forEach(t),V2r=r(FRe," (DeBERTa model)"),FRe.forEach(t),X2r=i(fe),X7=n(fe,"LI",{});var TRe=s(X7);Lve=n(TRe,"STRONG",{});var m8t=s(Lve);z2r=r(m8t,"deberta-v2"),m8t.forEach(t),W2r=r(TRe," \u2014 "),QQ=n(TRe,"A",{href:!0});var g8t=s(QQ);Q2r=r(g8t,"TFDebertaV2ForMaskedLM"),g8t.forEach(t),H2r=r(TRe," (DeBERTa-v2 model)"),TRe.forEach(t),U2r=i(fe),z7=n(fe,"LI",{});var MRe=s(z7);xve=n(MRe,"STRONG",{});var h8t=s(xve);J2r=r(h8t,"distilbert"),h8t.forEach(t),Y2r=r(MRe," \u2014 "),HQ=n(MRe,"A",{href:!0});var p8t=s(HQ);K2r=r(p8t,"TFDistilBertForMaskedLM"),p8t.forEach(t),Z2r=r(MRe," (DistilBERT model)"),MRe.forEach(t),e1r=i(fe),W7=n(fe,"LI",{});var ERe=s(W7);$ve=n(ERe,"STRONG",{});var u8t=s($ve);o1r=r(u8t,"electra"),u8t.forEach(t),r1r=r(ERe," \u2014 "),UQ=n(ERe,"A",{href:!0});var _8t=s(UQ);t1r=r(_8t,"TFElectraForMaskedLM"),_8t.forEach(t),a1r=r(ERe," (ELECTRA model)"),ERe.forEach(t),n1r=i(fe),Q7=n(fe,"LI",{});var CRe=s(Q7);kve=n(CRe,"STRONG",{});var b8t=s(kve);s1r=r(b8t,"flaubert"),b8t.forEach(t),l1r=r(CRe," \u2014 "),JQ=n(CRe,"A",{href:!0});var v8t=s(JQ);i1r=r(v8t,"TFFlaubertWithLMHeadModel"),v8t.forEach(t),d1r=r(CRe," (FlauBERT model)"),CRe.forEach(t),c1r=i(fe),H7=n(fe,"LI",{});var wRe=s(H7);Sve=n(wRe,"STRONG",{});var F8t=s(Sve);f1r=r(F8t,"funnel"),F8t.forEach(t),m1r=r(wRe," \u2014 "),YQ=n(wRe,"A",{href:!0});var T8t=s(YQ);g1r=r(T8t,"TFFunnelForMaskedLM"),T8t.forEach(t),h1r=r(wRe," (Funnel Transformer model)"),wRe.forEach(t),p1r=i(fe),U7=n(fe,"LI",{});var ARe=s(U7);Rve=n(ARe,"STRONG",{});var M8t=s(Rve);u1r=r(M8t,"layoutlm"),M8t.forEach(t),_1r=r(ARe," \u2014 "),KQ=n(ARe,"A",{href:!0});var E8t=s(KQ);b1r=r(E8t,"TFLayoutLMForMaskedLM"),E8t.forEach(t),v1r=r(ARe," (LayoutLM model)"),ARe.forEach(t),F1r=i(fe),J7=n(fe,"LI",{});var yRe=s(J7);Pve=n(yRe,"STRONG",{});var C8t=s(Pve);T1r=r(C8t,"longformer"),C8t.forEach(t),M1r=r(yRe," \u2014 "),ZQ=n(yRe,"A",{href:!0});var w8t=s(ZQ);E1r=r(w8t,"TFLongformerForMaskedLM"),w8t.forEach(t),C1r=r(yRe," (Longformer model)"),yRe.forEach(t),w1r=i(fe),Y7=n(fe,"LI",{});var LRe=s(Y7);Bve=n(LRe,"STRONG",{});var A8t=s(Bve);A1r=r(A8t,"mobilebert"),A8t.forEach(t),y1r=r(LRe," \u2014 "),eH=n(LRe,"A",{href:!0});var y8t=s(eH);L1r=r(y8t,"TFMobileBertForMaskedLM"),y8t.forEach(t),x1r=r(LRe," (MobileBERT model)"),LRe.forEach(t),$1r=i(fe),K7=n(fe,"LI",{});var xRe=s(K7);Ive=n(xRe,"STRONG",{});var L8t=s(Ive);k1r=r(L8t,"mpnet"),L8t.forEach(t),S1r=r(xRe," \u2014 "),oH=n(xRe,"A",{href:!0});var x8t=s(oH);R1r=r(x8t,"TFMPNetForMaskedLM"),x8t.forEach(t),P1r=r(xRe," (MPNet model)"),xRe.forEach(t),B1r=i(fe),Z7=n(fe,"LI",{});var $Re=s(Z7);qve=n($Re,"STRONG",{});var $8t=s(qve);I1r=r($8t,"rembert"),$8t.forEach(t),q1r=r($Re," \u2014 "),rH=n($Re,"A",{href:!0});var k8t=s(rH);N1r=r(k8t,"TFRemBertForMaskedLM"),k8t.forEach(t),j1r=r($Re," (RemBERT model)"),$Re.forEach(t),D1r=i(fe),eM=n(fe,"LI",{});var kRe=s(eM);Nve=n(kRe,"STRONG",{});var S8t=s(Nve);G1r=r(S8t,"roberta"),S8t.forEach(t),O1r=r(kRe," \u2014 "),tH=n(kRe,"A",{href:!0});var R8t=s(tH);V1r=r(R8t,"TFRobertaForMaskedLM"),R8t.forEach(t),X1r=r(kRe," (RoBERTa model)"),kRe.forEach(t),z1r=i(fe),oM=n(fe,"LI",{});var SRe=s(oM);jve=n(SRe,"STRONG",{});var P8t=s(jve);W1r=r(P8t,"roformer"),P8t.forEach(t),Q1r=r(SRe," \u2014 "),aH=n(SRe,"A",{href:!0});var B8t=s(aH);H1r=r(B8t,"TFRoFormerForMaskedLM"),B8t.forEach(t),U1r=r(SRe," (RoFormer model)"),SRe.forEach(t),J1r=i(fe),rM=n(fe,"LI",{});var RRe=s(rM);Dve=n(RRe,"STRONG",{});var I8t=s(Dve);Y1r=r(I8t,"tapas"),I8t.forEach(t),K1r=r(RRe," \u2014 "),nH=n(RRe,"A",{href:!0});var q8t=s(nH);Z1r=r(q8t,"TFTapasForMaskedLM"),q8t.forEach(t),ebr=r(RRe," (TAPAS model)"),RRe.forEach(t),obr=i(fe),tM=n(fe,"LI",{});var PRe=s(tM);Gve=n(PRe,"STRONG",{});var N8t=s(Gve);rbr=r(N8t,"xlm"),N8t.forEach(t),tbr=r(PRe," \u2014 "),sH=n(PRe,"A",{href:!0});var j8t=s(sH);abr=r(j8t,"TFXLMWithLMHeadModel"),j8t.forEach(t),nbr=r(PRe," (XLM model)"),PRe.forEach(t),sbr=i(fe),aM=n(fe,"LI",{});var BRe=s(aM);Ove=n(BRe,"STRONG",{});var D8t=s(Ove);lbr=r(D8t,"xlm-roberta"),D8t.forEach(t),ibr=r(BRe," \u2014 "),lH=n(BRe,"A",{href:!0});var G8t=s(lH);dbr=r(G8t,"TFXLMRobertaForMaskedLM"),G8t.forEach(t),cbr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),fe.forEach(t),fbr=i(Ll),T(nM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),DNe=i(f),fc=n(f,"H2",{class:!0});var HDe=s(fc);sM=n(HDe,"A",{id:!0,class:!0,href:!0});var O8t=s(sM);Vve=n(O8t,"SPAN",{});var V8t=s(Vve);T(qL.$$.fragment,V8t),V8t.forEach(t),O8t.forEach(t),mbr=i(HDe),Xve=n(HDe,"SPAN",{});var X8t=s(Xve);gbr=r(X8t,"TFAutoModelForSeq2SeqLM"),X8t.forEach(t),HDe.forEach(t),GNe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(NL.$$.fragment,xl),hbr=i(xl),mc=n(xl,"P",{});var cee=s(mc);pbr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=n(cee,"A",{href:!0});var z8t=s(iH);ubr=r(z8t,"from_pretrained()"),z8t.forEach(t),_br=r(cee," class method or the "),dH=n(cee,"A",{href:!0});var W8t=s(dH);bbr=r(W8t,"from_config()"),W8t.forEach(t),vbr=r(cee,` class
method.`),cee.forEach(t),Fbr=i(xl),jL=n(xl,"P",{});var UDe=s(jL);Tbr=r(UDe,"This class cannot be instantiated directly using "),zve=n(UDe,"CODE",{});var Q8t=s(zve);Mbr=r(Q8t,"__init__()"),Q8t.forEach(t),Ebr=r(UDe," (throws an error)."),UDe.forEach(t),Cbr=i(xl),Bt=n(xl,"DIV",{class:!0});var Pw=s(Bt);T(DL.$$.fragment,Pw),wbr=i(Pw),Wve=n(Pw,"P",{});var H8t=s(Wve);Abr=r(H8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H8t.forEach(t),ybr=i(Pw),gc=n(Pw,"P",{});var fee=s(gc);Lbr=r(fee,`Note:
Loading a model from its configuration file does `),Qve=n(fee,"STRONG",{});var U8t=s(Qve);xbr=r(U8t,"not"),U8t.forEach(t),$br=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(fee,"A",{href:!0});var J8t=s(cH);kbr=r(J8t,"from_pretrained()"),J8t.forEach(t),Sbr=r(fee," to load the model weights."),fee.forEach(t),Rbr=i(Pw),T(lM.$$.fragment,Pw),Pw.forEach(t),Pbr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(GL.$$.fragment,$l),Bbr=i($l),Hve=n($l,"P",{});var Y8t=s(Hve);Ibr=r(Y8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y8t.forEach(t),qbr=i($l),cn=n($l,"P",{});var Bw=s(cn);Nbr=r(Bw,"The model class to instantiate is selected based on the "),Uve=n(Bw,"CODE",{});var K8t=s(Uve);jbr=r(K8t,"model_type"),K8t.forEach(t),Dbr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Bw,"CODE",{});var Z8t=s(Jve);Gbr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),Obr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Bw,"CODE",{});var e7t=s(Yve);Vbr=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),Xbr=r(Bw,":"),Bw.forEach(t),zbr=i($l),ye=n($l,"UL",{});var Be=s(ye);iM=n(Be,"LI",{});var IRe=s(iM);Kve=n(IRe,"STRONG",{});var o7t=s(Kve);Wbr=r(o7t,"bart"),o7t.forEach(t),Qbr=r(IRe," \u2014 "),fH=n(IRe,"A",{href:!0});var r7t=s(fH);Hbr=r(r7t,"TFBartForConditionalGeneration"),r7t.forEach(t),Ubr=r(IRe," (BART model)"),IRe.forEach(t),Jbr=i(Be),dM=n(Be,"LI",{});var qRe=s(dM);Zve=n(qRe,"STRONG",{});var t7t=s(Zve);Ybr=r(t7t,"blenderbot"),t7t.forEach(t),Kbr=r(qRe," \u2014 "),mH=n(qRe,"A",{href:!0});var a7t=s(mH);Zbr=r(a7t,"TFBlenderbotForConditionalGeneration"),a7t.forEach(t),evr=r(qRe," (Blenderbot model)"),qRe.forEach(t),ovr=i(Be),cM=n(Be,"LI",{});var NRe=s(cM);eFe=n(NRe,"STRONG",{});var n7t=s(eFe);rvr=r(n7t,"blenderbot-small"),n7t.forEach(t),tvr=r(NRe," \u2014 "),gH=n(NRe,"A",{href:!0});var s7t=s(gH);avr=r(s7t,"TFBlenderbotSmallForConditionalGeneration"),s7t.forEach(t),nvr=r(NRe," (BlenderbotSmall model)"),NRe.forEach(t),svr=i(Be),fM=n(Be,"LI",{});var jRe=s(fM);oFe=n(jRe,"STRONG",{});var l7t=s(oFe);lvr=r(l7t,"encoder-decoder"),l7t.forEach(t),ivr=r(jRe," \u2014 "),hH=n(jRe,"A",{href:!0});var i7t=s(hH);dvr=r(i7t,"TFEncoderDecoderModel"),i7t.forEach(t),cvr=r(jRe," (Encoder decoder model)"),jRe.forEach(t),fvr=i(Be),mM=n(Be,"LI",{});var DRe=s(mM);rFe=n(DRe,"STRONG",{});var d7t=s(rFe);mvr=r(d7t,"led"),d7t.forEach(t),gvr=r(DRe," \u2014 "),pH=n(DRe,"A",{href:!0});var c7t=s(pH);hvr=r(c7t,"TFLEDForConditionalGeneration"),c7t.forEach(t),pvr=r(DRe," (LED model)"),DRe.forEach(t),uvr=i(Be),gM=n(Be,"LI",{});var GRe=s(gM);tFe=n(GRe,"STRONG",{});var f7t=s(tFe);_vr=r(f7t,"marian"),f7t.forEach(t),bvr=r(GRe," \u2014 "),uH=n(GRe,"A",{href:!0});var m7t=s(uH);vvr=r(m7t,"TFMarianMTModel"),m7t.forEach(t),Fvr=r(GRe," (Marian model)"),GRe.forEach(t),Tvr=i(Be),hM=n(Be,"LI",{});var ORe=s(hM);aFe=n(ORe,"STRONG",{});var g7t=s(aFe);Mvr=r(g7t,"mbart"),g7t.forEach(t),Evr=r(ORe," \u2014 "),_H=n(ORe,"A",{href:!0});var h7t=s(_H);Cvr=r(h7t,"TFMBartForConditionalGeneration"),h7t.forEach(t),wvr=r(ORe," (mBART model)"),ORe.forEach(t),Avr=i(Be),pM=n(Be,"LI",{});var VRe=s(pM);nFe=n(VRe,"STRONG",{});var p7t=s(nFe);yvr=r(p7t,"mt5"),p7t.forEach(t),Lvr=r(VRe," \u2014 "),bH=n(VRe,"A",{href:!0});var u7t=s(bH);xvr=r(u7t,"TFMT5ForConditionalGeneration"),u7t.forEach(t),$vr=r(VRe," (mT5 model)"),VRe.forEach(t),kvr=i(Be),uM=n(Be,"LI",{});var XRe=s(uM);sFe=n(XRe,"STRONG",{});var _7t=s(sFe);Svr=r(_7t,"pegasus"),_7t.forEach(t),Rvr=r(XRe," \u2014 "),vH=n(XRe,"A",{href:!0});var b7t=s(vH);Pvr=r(b7t,"TFPegasusForConditionalGeneration"),b7t.forEach(t),Bvr=r(XRe," (Pegasus model)"),XRe.forEach(t),Ivr=i(Be),_M=n(Be,"LI",{});var zRe=s(_M);lFe=n(zRe,"STRONG",{});var v7t=s(lFe);qvr=r(v7t,"t5"),v7t.forEach(t),Nvr=r(zRe," \u2014 "),FH=n(zRe,"A",{href:!0});var F7t=s(FH);jvr=r(F7t,"TFT5ForConditionalGeneration"),F7t.forEach(t),Dvr=r(zRe," (T5 model)"),zRe.forEach(t),Be.forEach(t),Gvr=i($l),T(bM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),ONe=i(f),hc=n(f,"H2",{class:!0});var JDe=s(hc);vM=n(JDe,"A",{id:!0,class:!0,href:!0});var T7t=s(vM);iFe=n(T7t,"SPAN",{});var M7t=s(iFe);T(OL.$$.fragment,M7t),M7t.forEach(t),T7t.forEach(t),Ovr=i(JDe),dFe=n(JDe,"SPAN",{});var E7t=s(dFe);Vvr=r(E7t,"TFAutoModelForSequenceClassification"),E7t.forEach(t),JDe.forEach(t),VNe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(VL.$$.fragment,kl),Xvr=i(kl),pc=n(kl,"P",{});var mee=s(pc);zvr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TH=n(mee,"A",{href:!0});var C7t=s(TH);Wvr=r(C7t,"from_pretrained()"),C7t.forEach(t),Qvr=r(mee," class method or the "),MH=n(mee,"A",{href:!0});var w7t=s(MH);Hvr=r(w7t,"from_config()"),w7t.forEach(t),Uvr=r(mee,` class
method.`),mee.forEach(t),Jvr=i(kl),XL=n(kl,"P",{});var YDe=s(XL);Yvr=r(YDe,"This class cannot be instantiated directly using "),cFe=n(YDe,"CODE",{});var A7t=s(cFe);Kvr=r(A7t,"__init__()"),A7t.forEach(t),Zvr=r(YDe," (throws an error)."),YDe.forEach(t),eFr=i(kl),It=n(kl,"DIV",{class:!0});var Iw=s(It);T(zL.$$.fragment,Iw),oFr=i(Iw),fFe=n(Iw,"P",{});var y7t=s(fFe);rFr=r(y7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y7t.forEach(t),tFr=i(Iw),uc=n(Iw,"P",{});var gee=s(uc);aFr=r(gee,`Note:
Loading a model from its configuration file does `),mFe=n(gee,"STRONG",{});var L7t=s(mFe);nFr=r(L7t,"not"),L7t.forEach(t),sFr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(gee,"A",{href:!0});var x7t=s(EH);lFr=r(x7t,"from_pretrained()"),x7t.forEach(t),iFr=r(gee," to load the model weights."),gee.forEach(t),dFr=i(Iw),T(FM.$$.fragment,Iw),Iw.forEach(t),cFr=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(WL.$$.fragment,Sl),fFr=i(Sl),gFe=n(Sl,"P",{});var $7t=s(gFe);mFr=r($7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$7t.forEach(t),gFr=i(Sl),fn=n(Sl,"P",{});var qw=s(fn);hFr=r(qw,"The model class to instantiate is selected based on the "),hFe=n(qw,"CODE",{});var k7t=s(hFe);pFr=r(k7t,"model_type"),k7t.forEach(t),uFr=r(qw,` property of the config object (either
passed as an argument or loaded from `),pFe=n(qw,"CODE",{});var S7t=s(pFe);_Fr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),bFr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(qw,"CODE",{});var R7t=s(uFe);vFr=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),FFr=r(qw,":"),qw.forEach(t),TFr=i(Sl),oe=n(Sl,"UL",{});var ae=s(oe);TM=n(ae,"LI",{});var WRe=s(TM);_Fe=n(WRe,"STRONG",{});var P7t=s(_Fe);MFr=r(P7t,"albert"),P7t.forEach(t),EFr=r(WRe," \u2014 "),CH=n(WRe,"A",{href:!0});var B7t=s(CH);CFr=r(B7t,"TFAlbertForSequenceClassification"),B7t.forEach(t),wFr=r(WRe," (ALBERT model)"),WRe.forEach(t),AFr=i(ae),MM=n(ae,"LI",{});var QRe=s(MM);bFe=n(QRe,"STRONG",{});var I7t=s(bFe);yFr=r(I7t,"bert"),I7t.forEach(t),LFr=r(QRe," \u2014 "),wH=n(QRe,"A",{href:!0});var q7t=s(wH);xFr=r(q7t,"TFBertForSequenceClassification"),q7t.forEach(t),$Fr=r(QRe," (BERT model)"),QRe.forEach(t),kFr=i(ae),EM=n(ae,"LI",{});var HRe=s(EM);vFe=n(HRe,"STRONG",{});var N7t=s(vFe);SFr=r(N7t,"camembert"),N7t.forEach(t),RFr=r(HRe," \u2014 "),AH=n(HRe,"A",{href:!0});var j7t=s(AH);PFr=r(j7t,"TFCamembertForSequenceClassification"),j7t.forEach(t),BFr=r(HRe," (CamemBERT model)"),HRe.forEach(t),IFr=i(ae),CM=n(ae,"LI",{});var URe=s(CM);FFe=n(URe,"STRONG",{});var D7t=s(FFe);qFr=r(D7t,"convbert"),D7t.forEach(t),NFr=r(URe," \u2014 "),yH=n(URe,"A",{href:!0});var G7t=s(yH);jFr=r(G7t,"TFConvBertForSequenceClassification"),G7t.forEach(t),DFr=r(URe," (ConvBERT model)"),URe.forEach(t),GFr=i(ae),wM=n(ae,"LI",{});var JRe=s(wM);TFe=n(JRe,"STRONG",{});var O7t=s(TFe);OFr=r(O7t,"ctrl"),O7t.forEach(t),VFr=r(JRe," \u2014 "),LH=n(JRe,"A",{href:!0});var V7t=s(LH);XFr=r(V7t,"TFCTRLForSequenceClassification"),V7t.forEach(t),zFr=r(JRe," (CTRL model)"),JRe.forEach(t),WFr=i(ae),AM=n(ae,"LI",{});var YRe=s(AM);MFe=n(YRe,"STRONG",{});var X7t=s(MFe);QFr=r(X7t,"deberta"),X7t.forEach(t),HFr=r(YRe," \u2014 "),xH=n(YRe,"A",{href:!0});var z7t=s(xH);UFr=r(z7t,"TFDebertaForSequenceClassification"),z7t.forEach(t),JFr=r(YRe," (DeBERTa model)"),YRe.forEach(t),YFr=i(ae),yM=n(ae,"LI",{});var KRe=s(yM);EFe=n(KRe,"STRONG",{});var W7t=s(EFe);KFr=r(W7t,"deberta-v2"),W7t.forEach(t),ZFr=r(KRe," \u2014 "),$H=n(KRe,"A",{href:!0});var Q7t=s($H);e6r=r(Q7t,"TFDebertaV2ForSequenceClassification"),Q7t.forEach(t),o6r=r(KRe," (DeBERTa-v2 model)"),KRe.forEach(t),r6r=i(ae),LM=n(ae,"LI",{});var ZRe=s(LM);CFe=n(ZRe,"STRONG",{});var H7t=s(CFe);t6r=r(H7t,"distilbert"),H7t.forEach(t),a6r=r(ZRe," \u2014 "),kH=n(ZRe,"A",{href:!0});var U7t=s(kH);n6r=r(U7t,"TFDistilBertForSequenceClassification"),U7t.forEach(t),s6r=r(ZRe," (DistilBERT model)"),ZRe.forEach(t),l6r=i(ae),xM=n(ae,"LI",{});var ePe=s(xM);wFe=n(ePe,"STRONG",{});var J7t=s(wFe);i6r=r(J7t,"electra"),J7t.forEach(t),d6r=r(ePe," \u2014 "),SH=n(ePe,"A",{href:!0});var Y7t=s(SH);c6r=r(Y7t,"TFElectraForSequenceClassification"),Y7t.forEach(t),f6r=r(ePe," (ELECTRA model)"),ePe.forEach(t),m6r=i(ae),$M=n(ae,"LI",{});var oPe=s($M);AFe=n(oPe,"STRONG",{});var K7t=s(AFe);g6r=r(K7t,"flaubert"),K7t.forEach(t),h6r=r(oPe," \u2014 "),RH=n(oPe,"A",{href:!0});var Z7t=s(RH);p6r=r(Z7t,"TFFlaubertForSequenceClassification"),Z7t.forEach(t),u6r=r(oPe," (FlauBERT model)"),oPe.forEach(t),_6r=i(ae),kM=n(ae,"LI",{});var rPe=s(kM);yFe=n(rPe,"STRONG",{});var eMt=s(yFe);b6r=r(eMt,"funnel"),eMt.forEach(t),v6r=r(rPe," \u2014 "),PH=n(rPe,"A",{href:!0});var oMt=s(PH);F6r=r(oMt,"TFFunnelForSequenceClassification"),oMt.forEach(t),T6r=r(rPe," (Funnel Transformer model)"),rPe.forEach(t),M6r=i(ae),SM=n(ae,"LI",{});var tPe=s(SM);LFe=n(tPe,"STRONG",{});var rMt=s(LFe);E6r=r(rMt,"gpt2"),rMt.forEach(t),C6r=r(tPe," \u2014 "),BH=n(tPe,"A",{href:!0});var tMt=s(BH);w6r=r(tMt,"TFGPT2ForSequenceClassification"),tMt.forEach(t),A6r=r(tPe," (OpenAI GPT-2 model)"),tPe.forEach(t),y6r=i(ae),RM=n(ae,"LI",{});var aPe=s(RM);xFe=n(aPe,"STRONG",{});var aMt=s(xFe);L6r=r(aMt,"gptj"),aMt.forEach(t),x6r=r(aPe," \u2014 "),IH=n(aPe,"A",{href:!0});var nMt=s(IH);$6r=r(nMt,"TFGPTJForSequenceClassification"),nMt.forEach(t),k6r=r(aPe," (GPT-J model)"),aPe.forEach(t),S6r=i(ae),PM=n(ae,"LI",{});var nPe=s(PM);$Fe=n(nPe,"STRONG",{});var sMt=s($Fe);R6r=r(sMt,"layoutlm"),sMt.forEach(t),P6r=r(nPe," \u2014 "),qH=n(nPe,"A",{href:!0});var lMt=s(qH);B6r=r(lMt,"TFLayoutLMForSequenceClassification"),lMt.forEach(t),I6r=r(nPe," (LayoutLM model)"),nPe.forEach(t),q6r=i(ae),BM=n(ae,"LI",{});var sPe=s(BM);kFe=n(sPe,"STRONG",{});var iMt=s(kFe);N6r=r(iMt,"longformer"),iMt.forEach(t),j6r=r(sPe," \u2014 "),NH=n(sPe,"A",{href:!0});var dMt=s(NH);D6r=r(dMt,"TFLongformerForSequenceClassification"),dMt.forEach(t),G6r=r(sPe," (Longformer model)"),sPe.forEach(t),O6r=i(ae),IM=n(ae,"LI",{});var lPe=s(IM);SFe=n(lPe,"STRONG",{});var cMt=s(SFe);V6r=r(cMt,"mobilebert"),cMt.forEach(t),X6r=r(lPe," \u2014 "),jH=n(lPe,"A",{href:!0});var fMt=s(jH);z6r=r(fMt,"TFMobileBertForSequenceClassification"),fMt.forEach(t),W6r=r(lPe," (MobileBERT model)"),lPe.forEach(t),Q6r=i(ae),qM=n(ae,"LI",{});var iPe=s(qM);RFe=n(iPe,"STRONG",{});var mMt=s(RFe);H6r=r(mMt,"mpnet"),mMt.forEach(t),U6r=r(iPe," \u2014 "),DH=n(iPe,"A",{href:!0});var gMt=s(DH);J6r=r(gMt,"TFMPNetForSequenceClassification"),gMt.forEach(t),Y6r=r(iPe," (MPNet model)"),iPe.forEach(t),K6r=i(ae),NM=n(ae,"LI",{});var dPe=s(NM);PFe=n(dPe,"STRONG",{});var hMt=s(PFe);Z6r=r(hMt,"openai-gpt"),hMt.forEach(t),eTr=r(dPe," \u2014 "),GH=n(dPe,"A",{href:!0});var pMt=s(GH);oTr=r(pMt,"TFOpenAIGPTForSequenceClassification"),pMt.forEach(t),rTr=r(dPe," (OpenAI GPT model)"),dPe.forEach(t),tTr=i(ae),jM=n(ae,"LI",{});var cPe=s(jM);BFe=n(cPe,"STRONG",{});var uMt=s(BFe);aTr=r(uMt,"rembert"),uMt.forEach(t),nTr=r(cPe," \u2014 "),OH=n(cPe,"A",{href:!0});var _Mt=s(OH);sTr=r(_Mt,"TFRemBertForSequenceClassification"),_Mt.forEach(t),lTr=r(cPe," (RemBERT model)"),cPe.forEach(t),iTr=i(ae),DM=n(ae,"LI",{});var fPe=s(DM);IFe=n(fPe,"STRONG",{});var bMt=s(IFe);dTr=r(bMt,"roberta"),bMt.forEach(t),cTr=r(fPe," \u2014 "),VH=n(fPe,"A",{href:!0});var vMt=s(VH);fTr=r(vMt,"TFRobertaForSequenceClassification"),vMt.forEach(t),mTr=r(fPe," (RoBERTa model)"),fPe.forEach(t),gTr=i(ae),GM=n(ae,"LI",{});var mPe=s(GM);qFe=n(mPe,"STRONG",{});var FMt=s(qFe);hTr=r(FMt,"roformer"),FMt.forEach(t),pTr=r(mPe," \u2014 "),XH=n(mPe,"A",{href:!0});var TMt=s(XH);uTr=r(TMt,"TFRoFormerForSequenceClassification"),TMt.forEach(t),_Tr=r(mPe," (RoFormer model)"),mPe.forEach(t),bTr=i(ae),OM=n(ae,"LI",{});var gPe=s(OM);NFe=n(gPe,"STRONG",{});var MMt=s(NFe);vTr=r(MMt,"tapas"),MMt.forEach(t),FTr=r(gPe," \u2014 "),zH=n(gPe,"A",{href:!0});var EMt=s(zH);TTr=r(EMt,"TFTapasForSequenceClassification"),EMt.forEach(t),MTr=r(gPe," (TAPAS model)"),gPe.forEach(t),ETr=i(ae),VM=n(ae,"LI",{});var hPe=s(VM);jFe=n(hPe,"STRONG",{});var CMt=s(jFe);CTr=r(CMt,"transfo-xl"),CMt.forEach(t),wTr=r(hPe," \u2014 "),WH=n(hPe,"A",{href:!0});var wMt=s(WH);ATr=r(wMt,"TFTransfoXLForSequenceClassification"),wMt.forEach(t),yTr=r(hPe," (Transformer-XL model)"),hPe.forEach(t),LTr=i(ae),XM=n(ae,"LI",{});var pPe=s(XM);DFe=n(pPe,"STRONG",{});var AMt=s(DFe);xTr=r(AMt,"xlm"),AMt.forEach(t),$Tr=r(pPe," \u2014 "),QH=n(pPe,"A",{href:!0});var yMt=s(QH);kTr=r(yMt,"TFXLMForSequenceClassification"),yMt.forEach(t),STr=r(pPe," (XLM model)"),pPe.forEach(t),RTr=i(ae),zM=n(ae,"LI",{});var uPe=s(zM);GFe=n(uPe,"STRONG",{});var LMt=s(GFe);PTr=r(LMt,"xlm-roberta"),LMt.forEach(t),BTr=r(uPe," \u2014 "),HH=n(uPe,"A",{href:!0});var xMt=s(HH);ITr=r(xMt,"TFXLMRobertaForSequenceClassification"),xMt.forEach(t),qTr=r(uPe," (XLM-RoBERTa model)"),uPe.forEach(t),NTr=i(ae),WM=n(ae,"LI",{});var _Pe=s(WM);OFe=n(_Pe,"STRONG",{});var $Mt=s(OFe);jTr=r($Mt,"xlnet"),$Mt.forEach(t),DTr=r(_Pe," \u2014 "),UH=n(_Pe,"A",{href:!0});var kMt=s(UH);GTr=r(kMt,"TFXLNetForSequenceClassification"),kMt.forEach(t),OTr=r(_Pe," (XLNet model)"),_Pe.forEach(t),ae.forEach(t),VTr=i(Sl),T(QM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),XNe=i(f),_c=n(f,"H2",{class:!0});var KDe=s(_c);HM=n(KDe,"A",{id:!0,class:!0,href:!0});var SMt=s(HM);VFe=n(SMt,"SPAN",{});var RMt=s(VFe);T(QL.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),XTr=i(KDe),XFe=n(KDe,"SPAN",{});var PMt=s(XFe);zTr=r(PMt,"TFAutoModelForMultipleChoice"),PMt.forEach(t),KDe.forEach(t),zNe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(HL.$$.fragment,Rl),WTr=i(Rl),bc=n(Rl,"P",{});var hee=s(bc);QTr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JH=n(hee,"A",{href:!0});var BMt=s(JH);HTr=r(BMt,"from_pretrained()"),BMt.forEach(t),UTr=r(hee," class method or the "),YH=n(hee,"A",{href:!0});var IMt=s(YH);JTr=r(IMt,"from_config()"),IMt.forEach(t),YTr=r(hee,` class
method.`),hee.forEach(t),KTr=i(Rl),UL=n(Rl,"P",{});var ZDe=s(UL);ZTr=r(ZDe,"This class cannot be instantiated directly using "),zFe=n(ZDe,"CODE",{});var qMt=s(zFe);e8r=r(qMt,"__init__()"),qMt.forEach(t),o8r=r(ZDe," (throws an error)."),ZDe.forEach(t),r8r=i(Rl),qt=n(Rl,"DIV",{class:!0});var Nw=s(qt);T(JL.$$.fragment,Nw),t8r=i(Nw),WFe=n(Nw,"P",{});var NMt=s(WFe);a8r=r(NMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NMt.forEach(t),n8r=i(Nw),vc=n(Nw,"P",{});var pee=s(vc);s8r=r(pee,`Note:
Loading a model from its configuration file does `),QFe=n(pee,"STRONG",{});var jMt=s(QFe);l8r=r(jMt,"not"),jMt.forEach(t),i8r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(pee,"A",{href:!0});var DMt=s(KH);d8r=r(DMt,"from_pretrained()"),DMt.forEach(t),c8r=r(pee," to load the model weights."),pee.forEach(t),f8r=i(Nw),T(UM.$$.fragment,Nw),Nw.forEach(t),m8r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(YL.$$.fragment,Pl),g8r=i(Pl),HFe=n(Pl,"P",{});var GMt=s(HFe);h8r=r(GMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GMt.forEach(t),p8r=i(Pl),mn=n(Pl,"P",{});var jw=s(mn);u8r=r(jw,"The model class to instantiate is selected based on the "),UFe=n(jw,"CODE",{});var OMt=s(UFe);_8r=r(OMt,"model_type"),OMt.forEach(t),b8r=r(jw,` property of the config object (either
passed as an argument or loaded from `),JFe=n(jw,"CODE",{});var VMt=s(JFe);v8r=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),F8r=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(jw,"CODE",{});var XMt=s(YFe);T8r=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),M8r=r(jw,":"),jw.forEach(t),E8r=i(Pl),he=n(Pl,"UL",{});var _e=s(he);JM=n(_e,"LI",{});var bPe=s(JM);KFe=n(bPe,"STRONG",{});var zMt=s(KFe);C8r=r(zMt,"albert"),zMt.forEach(t),w8r=r(bPe," \u2014 "),ZH=n(bPe,"A",{href:!0});var WMt=s(ZH);A8r=r(WMt,"TFAlbertForMultipleChoice"),WMt.forEach(t),y8r=r(bPe," (ALBERT model)"),bPe.forEach(t),L8r=i(_e),YM=n(_e,"LI",{});var vPe=s(YM);ZFe=n(vPe,"STRONG",{});var QMt=s(ZFe);x8r=r(QMt,"bert"),QMt.forEach(t),$8r=r(vPe," \u2014 "),eU=n(vPe,"A",{href:!0});var HMt=s(eU);k8r=r(HMt,"TFBertForMultipleChoice"),HMt.forEach(t),S8r=r(vPe," (BERT model)"),vPe.forEach(t),R8r=i(_e),KM=n(_e,"LI",{});var FPe=s(KM);e6e=n(FPe,"STRONG",{});var UMt=s(e6e);P8r=r(UMt,"camembert"),UMt.forEach(t),B8r=r(FPe," \u2014 "),oU=n(FPe,"A",{href:!0});var JMt=s(oU);I8r=r(JMt,"TFCamembertForMultipleChoice"),JMt.forEach(t),q8r=r(FPe," (CamemBERT model)"),FPe.forEach(t),N8r=i(_e),ZM=n(_e,"LI",{});var TPe=s(ZM);o6e=n(TPe,"STRONG",{});var YMt=s(o6e);j8r=r(YMt,"convbert"),YMt.forEach(t),D8r=r(TPe," \u2014 "),rU=n(TPe,"A",{href:!0});var KMt=s(rU);G8r=r(KMt,"TFConvBertForMultipleChoice"),KMt.forEach(t),O8r=r(TPe," (ConvBERT model)"),TPe.forEach(t),V8r=i(_e),e4=n(_e,"LI",{});var MPe=s(e4);r6e=n(MPe,"STRONG",{});var ZMt=s(r6e);X8r=r(ZMt,"distilbert"),ZMt.forEach(t),z8r=r(MPe," \u2014 "),tU=n(MPe,"A",{href:!0});var e4t=s(tU);W8r=r(e4t,"TFDistilBertForMultipleChoice"),e4t.forEach(t),Q8r=r(MPe," (DistilBERT model)"),MPe.forEach(t),H8r=i(_e),o4=n(_e,"LI",{});var EPe=s(o4);t6e=n(EPe,"STRONG",{});var o4t=s(t6e);U8r=r(o4t,"electra"),o4t.forEach(t),J8r=r(EPe," \u2014 "),aU=n(EPe,"A",{href:!0});var r4t=s(aU);Y8r=r(r4t,"TFElectraForMultipleChoice"),r4t.forEach(t),K8r=r(EPe," (ELECTRA model)"),EPe.forEach(t),Z8r=i(_e),r4=n(_e,"LI",{});var CPe=s(r4);a6e=n(CPe,"STRONG",{});var t4t=s(a6e);e7r=r(t4t,"flaubert"),t4t.forEach(t),o7r=r(CPe," \u2014 "),nU=n(CPe,"A",{href:!0});var a4t=s(nU);r7r=r(a4t,"TFFlaubertForMultipleChoice"),a4t.forEach(t),t7r=r(CPe," (FlauBERT model)"),CPe.forEach(t),a7r=i(_e),t4=n(_e,"LI",{});var wPe=s(t4);n6e=n(wPe,"STRONG",{});var n4t=s(n6e);n7r=r(n4t,"funnel"),n4t.forEach(t),s7r=r(wPe," \u2014 "),sU=n(wPe,"A",{href:!0});var s4t=s(sU);l7r=r(s4t,"TFFunnelForMultipleChoice"),s4t.forEach(t),i7r=r(wPe," (Funnel Transformer model)"),wPe.forEach(t),d7r=i(_e),a4=n(_e,"LI",{});var APe=s(a4);s6e=n(APe,"STRONG",{});var l4t=s(s6e);c7r=r(l4t,"longformer"),l4t.forEach(t),f7r=r(APe," \u2014 "),lU=n(APe,"A",{href:!0});var i4t=s(lU);m7r=r(i4t,"TFLongformerForMultipleChoice"),i4t.forEach(t),g7r=r(APe," (Longformer model)"),APe.forEach(t),h7r=i(_e),n4=n(_e,"LI",{});var yPe=s(n4);l6e=n(yPe,"STRONG",{});var d4t=s(l6e);p7r=r(d4t,"mobilebert"),d4t.forEach(t),u7r=r(yPe," \u2014 "),iU=n(yPe,"A",{href:!0});var c4t=s(iU);_7r=r(c4t,"TFMobileBertForMultipleChoice"),c4t.forEach(t),b7r=r(yPe," (MobileBERT model)"),yPe.forEach(t),v7r=i(_e),s4=n(_e,"LI",{});var LPe=s(s4);i6e=n(LPe,"STRONG",{});var f4t=s(i6e);F7r=r(f4t,"mpnet"),f4t.forEach(t),T7r=r(LPe," \u2014 "),dU=n(LPe,"A",{href:!0});var m4t=s(dU);M7r=r(m4t,"TFMPNetForMultipleChoice"),m4t.forEach(t),E7r=r(LPe," (MPNet model)"),LPe.forEach(t),C7r=i(_e),l4=n(_e,"LI",{});var xPe=s(l4);d6e=n(xPe,"STRONG",{});var g4t=s(d6e);w7r=r(g4t,"rembert"),g4t.forEach(t),A7r=r(xPe," \u2014 "),cU=n(xPe,"A",{href:!0});var h4t=s(cU);y7r=r(h4t,"TFRemBertForMultipleChoice"),h4t.forEach(t),L7r=r(xPe," (RemBERT model)"),xPe.forEach(t),x7r=i(_e),i4=n(_e,"LI",{});var $Pe=s(i4);c6e=n($Pe,"STRONG",{});var p4t=s(c6e);$7r=r(p4t,"roberta"),p4t.forEach(t),k7r=r($Pe," \u2014 "),fU=n($Pe,"A",{href:!0});var u4t=s(fU);S7r=r(u4t,"TFRobertaForMultipleChoice"),u4t.forEach(t),R7r=r($Pe," (RoBERTa model)"),$Pe.forEach(t),P7r=i(_e),d4=n(_e,"LI",{});var kPe=s(d4);f6e=n(kPe,"STRONG",{});var _4t=s(f6e);B7r=r(_4t,"roformer"),_4t.forEach(t),I7r=r(kPe," \u2014 "),mU=n(kPe,"A",{href:!0});var b4t=s(mU);q7r=r(b4t,"TFRoFormerForMultipleChoice"),b4t.forEach(t),N7r=r(kPe," (RoFormer model)"),kPe.forEach(t),j7r=i(_e),c4=n(_e,"LI",{});var SPe=s(c4);m6e=n(SPe,"STRONG",{});var v4t=s(m6e);D7r=r(v4t,"xlm"),v4t.forEach(t),G7r=r(SPe," \u2014 "),gU=n(SPe,"A",{href:!0});var F4t=s(gU);O7r=r(F4t,"TFXLMForMultipleChoice"),F4t.forEach(t),V7r=r(SPe," (XLM model)"),SPe.forEach(t),X7r=i(_e),f4=n(_e,"LI",{});var RPe=s(f4);g6e=n(RPe,"STRONG",{});var T4t=s(g6e);z7r=r(T4t,"xlm-roberta"),T4t.forEach(t),W7r=r(RPe," \u2014 "),hU=n(RPe,"A",{href:!0});var M4t=s(hU);Q7r=r(M4t,"TFXLMRobertaForMultipleChoice"),M4t.forEach(t),H7r=r(RPe," (XLM-RoBERTa model)"),RPe.forEach(t),U7r=i(_e),m4=n(_e,"LI",{});var PPe=s(m4);h6e=n(PPe,"STRONG",{});var E4t=s(h6e);J7r=r(E4t,"xlnet"),E4t.forEach(t),Y7r=r(PPe," \u2014 "),pU=n(PPe,"A",{href:!0});var C4t=s(pU);K7r=r(C4t,"TFXLNetForMultipleChoice"),C4t.forEach(t),Z7r=r(PPe," (XLNet model)"),PPe.forEach(t),_e.forEach(t),eMr=i(Pl),T(g4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),WNe=i(f),Fc=n(f,"H2",{class:!0});var eGe=s(Fc);h4=n(eGe,"A",{id:!0,class:!0,href:!0});var w4t=s(h4);p6e=n(w4t,"SPAN",{});var A4t=s(p6e);T(KL.$$.fragment,A4t),A4t.forEach(t),w4t.forEach(t),oMr=i(eGe),u6e=n(eGe,"SPAN",{});var y4t=s(u6e);rMr=r(y4t,"TFAutoModelForNextSentencePrediction"),y4t.forEach(t),eGe.forEach(t),QNe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(ZL.$$.fragment,Bl),tMr=i(Bl),Tc=n(Bl,"P",{});var uee=s(Tc);aMr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uU=n(uee,"A",{href:!0});var L4t=s(uU);nMr=r(L4t,"from_pretrained()"),L4t.forEach(t),sMr=r(uee," class method or the "),_U=n(uee,"A",{href:!0});var x4t=s(_U);lMr=r(x4t,"from_config()"),x4t.forEach(t),iMr=r(uee,` class
method.`),uee.forEach(t),dMr=i(Bl),ex=n(Bl,"P",{});var oGe=s(ex);cMr=r(oGe,"This class cannot be instantiated directly using "),_6e=n(oGe,"CODE",{});var $4t=s(_6e);fMr=r($4t,"__init__()"),$4t.forEach(t),mMr=r(oGe," (throws an error)."),oGe.forEach(t),gMr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Dw=s(Nt);T(ox.$$.fragment,Dw),hMr=i(Dw),b6e=n(Dw,"P",{});var k4t=s(b6e);pMr=r(k4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),k4t.forEach(t),uMr=i(Dw),Mc=n(Dw,"P",{});var _ee=s(Mc);_Mr=r(_ee,`Note:
Loading a model from its configuration file does `),v6e=n(_ee,"STRONG",{});var S4t=s(v6e);bMr=r(S4t,"not"),S4t.forEach(t),vMr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(_ee,"A",{href:!0});var R4t=s(bU);FMr=r(R4t,"from_pretrained()"),R4t.forEach(t),TMr=r(_ee," to load the model weights."),_ee.forEach(t),MMr=i(Dw),T(p4.$$.fragment,Dw),Dw.forEach(t),EMr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(rx.$$.fragment,Il),CMr=i(Il),F6e=n(Il,"P",{});var P4t=s(F6e);wMr=r(P4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),P4t.forEach(t),AMr=i(Il),gn=n(Il,"P",{});var Gw=s(gn);yMr=r(Gw,"The model class to instantiate is selected based on the "),T6e=n(Gw,"CODE",{});var B4t=s(T6e);LMr=r(B4t,"model_type"),B4t.forEach(t),xMr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),M6e=n(Gw,"CODE",{});var I4t=s(M6e);$Mr=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),kMr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(Gw,"CODE",{});var q4t=s(E6e);SMr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),RMr=r(Gw,":"),Gw.forEach(t),PMr=i(Il),tx=n(Il,"UL",{});var rGe=s(tx);u4=n(rGe,"LI",{});var BPe=s(u4);C6e=n(BPe,"STRONG",{});var N4t=s(C6e);BMr=r(N4t,"bert"),N4t.forEach(t),IMr=r(BPe," \u2014 "),vU=n(BPe,"A",{href:!0});var j4t=s(vU);qMr=r(j4t,"TFBertForNextSentencePrediction"),j4t.forEach(t),NMr=r(BPe," (BERT model)"),BPe.forEach(t),jMr=i(rGe),_4=n(rGe,"LI",{});var IPe=s(_4);w6e=n(IPe,"STRONG",{});var D4t=s(w6e);DMr=r(D4t,"mobilebert"),D4t.forEach(t),GMr=r(IPe," \u2014 "),FU=n(IPe,"A",{href:!0});var G4t=s(FU);OMr=r(G4t,"TFMobileBertForNextSentencePrediction"),G4t.forEach(t),VMr=r(IPe," (MobileBERT model)"),IPe.forEach(t),rGe.forEach(t),XMr=i(Il),T(b4.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),HNe=i(f),Ec=n(f,"H2",{class:!0});var tGe=s(Ec);v4=n(tGe,"A",{id:!0,class:!0,href:!0});var O4t=s(v4);A6e=n(O4t,"SPAN",{});var V4t=s(A6e);T(ax.$$.fragment,V4t),V4t.forEach(t),O4t.forEach(t),zMr=i(tGe),y6e=n(tGe,"SPAN",{});var X4t=s(y6e);WMr=r(X4t,"TFAutoModelForTableQuestionAnswering"),X4t.forEach(t),tGe.forEach(t),UNe=i(f),ir=n(f,"DIV",{class:!0});var ql=s(ir);T(nx.$$.fragment,ql),QMr=i(ql),Cc=n(ql,"P",{});var bee=s(Cc);HMr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TU=n(bee,"A",{href:!0});var z4t=s(TU);UMr=r(z4t,"from_pretrained()"),z4t.forEach(t),JMr=r(bee," class method or the "),MU=n(bee,"A",{href:!0});var W4t=s(MU);YMr=r(W4t,"from_config()"),W4t.forEach(t),KMr=r(bee,` class
method.`),bee.forEach(t),ZMr=i(ql),sx=n(ql,"P",{});var aGe=s(sx);e4r=r(aGe,"This class cannot be instantiated directly using "),L6e=n(aGe,"CODE",{});var Q4t=s(L6e);o4r=r(Q4t,"__init__()"),Q4t.forEach(t),r4r=r(aGe," (throws an error)."),aGe.forEach(t),t4r=i(ql),jt=n(ql,"DIV",{class:!0});var Ow=s(jt);T(lx.$$.fragment,Ow),a4r=i(Ow),x6e=n(Ow,"P",{});var H4t=s(x6e);n4r=r(H4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),H4t.forEach(t),s4r=i(Ow),wc=n(Ow,"P",{});var vee=s(wc);l4r=r(vee,`Note:
Loading a model from its configuration file does `),$6e=n(vee,"STRONG",{});var U4t=s($6e);i4r=r(U4t,"not"),U4t.forEach(t),d4r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(vee,"A",{href:!0});var J4t=s(EU);c4r=r(J4t,"from_pretrained()"),J4t.forEach(t),f4r=r(vee," to load the model weights."),vee.forEach(t),m4r=i(Ow),T(F4.$$.fragment,Ow),Ow.forEach(t),g4r=i(ql),Ir=n(ql,"DIV",{class:!0});var Nl=s(Ir);T(ix.$$.fragment,Nl),h4r=i(Nl),k6e=n(Nl,"P",{});var Y4t=s(k6e);p4r=r(Y4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y4t.forEach(t),u4r=i(Nl),hn=n(Nl,"P",{});var Vw=s(hn);_4r=r(Vw,"The model class to instantiate is selected based on the "),S6e=n(Vw,"CODE",{});var K4t=s(S6e);b4r=r(K4t,"model_type"),K4t.forEach(t),v4r=r(Vw,` property of the config object (either
passed as an argument or loaded from `),R6e=n(Vw,"CODE",{});var Z4t=s(R6e);F4r=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),T4r=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(Vw,"CODE",{});var eEt=s(P6e);M4r=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),E4r=r(Vw,":"),Vw.forEach(t),C4r=i(Nl),B6e=n(Nl,"UL",{});var oEt=s(B6e);T4=n(oEt,"LI",{});var qPe=s(T4);I6e=n(qPe,"STRONG",{});var rEt=s(I6e);w4r=r(rEt,"tapas"),rEt.forEach(t),A4r=r(qPe," \u2014 "),CU=n(qPe,"A",{href:!0});var tEt=s(CU);y4r=r(tEt,"TFTapasForQuestionAnswering"),tEt.forEach(t),L4r=r(qPe," (TAPAS model)"),qPe.forEach(t),oEt.forEach(t),x4r=i(Nl),T(M4.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),JNe=i(f),Ac=n(f,"H2",{class:!0});var nGe=s(Ac);E4=n(nGe,"A",{id:!0,class:!0,href:!0});var aEt=s(E4);q6e=n(aEt,"SPAN",{});var nEt=s(q6e);T(dx.$$.fragment,nEt),nEt.forEach(t),aEt.forEach(t),$4r=i(nGe),N6e=n(nGe,"SPAN",{});var sEt=s(N6e);k4r=r(sEt,"TFAutoModelForTokenClassification"),sEt.forEach(t),nGe.forEach(t),YNe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(cx.$$.fragment,jl),S4r=i(jl),yc=n(jl,"P",{});var Fee=s(yc);R4r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wU=n(Fee,"A",{href:!0});var lEt=s(wU);P4r=r(lEt,"from_pretrained()"),lEt.forEach(t),B4r=r(Fee," class method or the "),AU=n(Fee,"A",{href:!0});var iEt=s(AU);I4r=r(iEt,"from_config()"),iEt.forEach(t),q4r=r(Fee,` class
method.`),Fee.forEach(t),N4r=i(jl),fx=n(jl,"P",{});var sGe=s(fx);j4r=r(sGe,"This class cannot be instantiated directly using "),j6e=n(sGe,"CODE",{});var dEt=s(j6e);D4r=r(dEt,"__init__()"),dEt.forEach(t),G4r=r(sGe," (throws an error)."),sGe.forEach(t),O4r=i(jl),Dt=n(jl,"DIV",{class:!0});var Xw=s(Dt);T(mx.$$.fragment,Xw),V4r=i(Xw),D6e=n(Xw,"P",{});var cEt=s(D6e);X4r=r(cEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cEt.forEach(t),z4r=i(Xw),Lc=n(Xw,"P",{});var Tee=s(Lc);W4r=r(Tee,`Note:
Loading a model from its configuration file does `),G6e=n(Tee,"STRONG",{});var fEt=s(G6e);Q4r=r(fEt,"not"),fEt.forEach(t),H4r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(Tee,"A",{href:!0});var mEt=s(yU);U4r=r(mEt,"from_pretrained()"),mEt.forEach(t),J4r=r(Tee," to load the model weights."),Tee.forEach(t),Y4r=i(Xw),T(C4.$$.fragment,Xw),Xw.forEach(t),K4r=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(gx.$$.fragment,Dl),Z4r=i(Dl),O6e=n(Dl,"P",{});var gEt=s(O6e);eEr=r(gEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gEt.forEach(t),oEr=i(Dl),pn=n(Dl,"P",{});var zw=s(pn);rEr=r(zw,"The model class to instantiate is selected based on the "),V6e=n(zw,"CODE",{});var hEt=s(V6e);tEr=r(hEt,"model_type"),hEt.forEach(t),aEr=r(zw,` property of the config object (either
passed as an argument or loaded from `),X6e=n(zw,"CODE",{});var pEt=s(X6e);nEr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),sEr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=n(zw,"CODE",{});var uEt=s(z6e);lEr=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),iEr=r(zw,":"),zw.forEach(t),dEr=i(Dl),de=n(Dl,"UL",{});var me=s(de);w4=n(me,"LI",{});var NPe=s(w4);W6e=n(NPe,"STRONG",{});var _Et=s(W6e);cEr=r(_Et,"albert"),_Et.forEach(t),fEr=r(NPe," \u2014 "),LU=n(NPe,"A",{href:!0});var bEt=s(LU);mEr=r(bEt,"TFAlbertForTokenClassification"),bEt.forEach(t),gEr=r(NPe," (ALBERT model)"),NPe.forEach(t),hEr=i(me),A4=n(me,"LI",{});var jPe=s(A4);Q6e=n(jPe,"STRONG",{});var vEt=s(Q6e);pEr=r(vEt,"bert"),vEt.forEach(t),uEr=r(jPe," \u2014 "),xU=n(jPe,"A",{href:!0});var FEt=s(xU);_Er=r(FEt,"TFBertForTokenClassification"),FEt.forEach(t),bEr=r(jPe," (BERT model)"),jPe.forEach(t),vEr=i(me),y4=n(me,"LI",{});var DPe=s(y4);H6e=n(DPe,"STRONG",{});var TEt=s(H6e);FEr=r(TEt,"camembert"),TEt.forEach(t),TEr=r(DPe," \u2014 "),$U=n(DPe,"A",{href:!0});var MEt=s($U);MEr=r(MEt,"TFCamembertForTokenClassification"),MEt.forEach(t),EEr=r(DPe," (CamemBERT model)"),DPe.forEach(t),CEr=i(me),L4=n(me,"LI",{});var GPe=s(L4);U6e=n(GPe,"STRONG",{});var EEt=s(U6e);wEr=r(EEt,"convbert"),EEt.forEach(t),AEr=r(GPe," \u2014 "),kU=n(GPe,"A",{href:!0});var CEt=s(kU);yEr=r(CEt,"TFConvBertForTokenClassification"),CEt.forEach(t),LEr=r(GPe," (ConvBERT model)"),GPe.forEach(t),xEr=i(me),x4=n(me,"LI",{});var OPe=s(x4);J6e=n(OPe,"STRONG",{});var wEt=s(J6e);$Er=r(wEt,"deberta"),wEt.forEach(t),kEr=r(OPe," \u2014 "),SU=n(OPe,"A",{href:!0});var AEt=s(SU);SEr=r(AEt,"TFDebertaForTokenClassification"),AEt.forEach(t),REr=r(OPe," (DeBERTa model)"),OPe.forEach(t),PEr=i(me),$4=n(me,"LI",{});var VPe=s($4);Y6e=n(VPe,"STRONG",{});var yEt=s(Y6e);BEr=r(yEt,"deberta-v2"),yEt.forEach(t),IEr=r(VPe," \u2014 "),RU=n(VPe,"A",{href:!0});var LEt=s(RU);qEr=r(LEt,"TFDebertaV2ForTokenClassification"),LEt.forEach(t),NEr=r(VPe," (DeBERTa-v2 model)"),VPe.forEach(t),jEr=i(me),k4=n(me,"LI",{});var XPe=s(k4);K6e=n(XPe,"STRONG",{});var xEt=s(K6e);DEr=r(xEt,"distilbert"),xEt.forEach(t),GEr=r(XPe," \u2014 "),PU=n(XPe,"A",{href:!0});var $Et=s(PU);OEr=r($Et,"TFDistilBertForTokenClassification"),$Et.forEach(t),VEr=r(XPe," (DistilBERT model)"),XPe.forEach(t),XEr=i(me),S4=n(me,"LI",{});var zPe=s(S4);Z6e=n(zPe,"STRONG",{});var kEt=s(Z6e);zEr=r(kEt,"electra"),kEt.forEach(t),WEr=r(zPe," \u2014 "),BU=n(zPe,"A",{href:!0});var SEt=s(BU);QEr=r(SEt,"TFElectraForTokenClassification"),SEt.forEach(t),HEr=r(zPe," (ELECTRA model)"),zPe.forEach(t),UEr=i(me),R4=n(me,"LI",{});var WPe=s(R4);eTe=n(WPe,"STRONG",{});var REt=s(eTe);JEr=r(REt,"flaubert"),REt.forEach(t),YEr=r(WPe," \u2014 "),IU=n(WPe,"A",{href:!0});var PEt=s(IU);KEr=r(PEt,"TFFlaubertForTokenClassification"),PEt.forEach(t),ZEr=r(WPe," (FlauBERT model)"),WPe.forEach(t),eCr=i(me),P4=n(me,"LI",{});var QPe=s(P4);oTe=n(QPe,"STRONG",{});var BEt=s(oTe);oCr=r(BEt,"funnel"),BEt.forEach(t),rCr=r(QPe," \u2014 "),qU=n(QPe,"A",{href:!0});var IEt=s(qU);tCr=r(IEt,"TFFunnelForTokenClassification"),IEt.forEach(t),aCr=r(QPe," (Funnel Transformer model)"),QPe.forEach(t),nCr=i(me),B4=n(me,"LI",{});var HPe=s(B4);rTe=n(HPe,"STRONG",{});var qEt=s(rTe);sCr=r(qEt,"layoutlm"),qEt.forEach(t),lCr=r(HPe," \u2014 "),NU=n(HPe,"A",{href:!0});var NEt=s(NU);iCr=r(NEt,"TFLayoutLMForTokenClassification"),NEt.forEach(t),dCr=r(HPe," (LayoutLM model)"),HPe.forEach(t),cCr=i(me),I4=n(me,"LI",{});var UPe=s(I4);tTe=n(UPe,"STRONG",{});var jEt=s(tTe);fCr=r(jEt,"longformer"),jEt.forEach(t),mCr=r(UPe," \u2014 "),jU=n(UPe,"A",{href:!0});var DEt=s(jU);gCr=r(DEt,"TFLongformerForTokenClassification"),DEt.forEach(t),hCr=r(UPe," (Longformer model)"),UPe.forEach(t),pCr=i(me),q4=n(me,"LI",{});var JPe=s(q4);aTe=n(JPe,"STRONG",{});var GEt=s(aTe);uCr=r(GEt,"mobilebert"),GEt.forEach(t),_Cr=r(JPe," \u2014 "),DU=n(JPe,"A",{href:!0});var OEt=s(DU);bCr=r(OEt,"TFMobileBertForTokenClassification"),OEt.forEach(t),vCr=r(JPe," (MobileBERT model)"),JPe.forEach(t),FCr=i(me),N4=n(me,"LI",{});var YPe=s(N4);nTe=n(YPe,"STRONG",{});var VEt=s(nTe);TCr=r(VEt,"mpnet"),VEt.forEach(t),MCr=r(YPe," \u2014 "),GU=n(YPe,"A",{href:!0});var XEt=s(GU);ECr=r(XEt,"TFMPNetForTokenClassification"),XEt.forEach(t),CCr=r(YPe," (MPNet model)"),YPe.forEach(t),wCr=i(me),j4=n(me,"LI",{});var KPe=s(j4);sTe=n(KPe,"STRONG",{});var zEt=s(sTe);ACr=r(zEt,"rembert"),zEt.forEach(t),yCr=r(KPe," \u2014 "),OU=n(KPe,"A",{href:!0});var WEt=s(OU);LCr=r(WEt,"TFRemBertForTokenClassification"),WEt.forEach(t),xCr=r(KPe," (RemBERT model)"),KPe.forEach(t),$Cr=i(me),D4=n(me,"LI",{});var ZPe=s(D4);lTe=n(ZPe,"STRONG",{});var QEt=s(lTe);kCr=r(QEt,"roberta"),QEt.forEach(t),SCr=r(ZPe," \u2014 "),VU=n(ZPe,"A",{href:!0});var HEt=s(VU);RCr=r(HEt,"TFRobertaForTokenClassification"),HEt.forEach(t),PCr=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),BCr=i(me),G4=n(me,"LI",{});var eBe=s(G4);iTe=n(eBe,"STRONG",{});var UEt=s(iTe);ICr=r(UEt,"roformer"),UEt.forEach(t),qCr=r(eBe," \u2014 "),XU=n(eBe,"A",{href:!0});var JEt=s(XU);NCr=r(JEt,"TFRoFormerForTokenClassification"),JEt.forEach(t),jCr=r(eBe," (RoFormer model)"),eBe.forEach(t),DCr=i(me),O4=n(me,"LI",{});var oBe=s(O4);dTe=n(oBe,"STRONG",{});var YEt=s(dTe);GCr=r(YEt,"xlm"),YEt.forEach(t),OCr=r(oBe," \u2014 "),zU=n(oBe,"A",{href:!0});var KEt=s(zU);VCr=r(KEt,"TFXLMForTokenClassification"),KEt.forEach(t),XCr=r(oBe," (XLM model)"),oBe.forEach(t),zCr=i(me),V4=n(me,"LI",{});var rBe=s(V4);cTe=n(rBe,"STRONG",{});var ZEt=s(cTe);WCr=r(ZEt,"xlm-roberta"),ZEt.forEach(t),QCr=r(rBe," \u2014 "),WU=n(rBe,"A",{href:!0});var eCt=s(WU);HCr=r(eCt,"TFXLMRobertaForTokenClassification"),eCt.forEach(t),UCr=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),JCr=i(me),X4=n(me,"LI",{});var tBe=s(X4);fTe=n(tBe,"STRONG",{});var oCt=s(fTe);YCr=r(oCt,"xlnet"),oCt.forEach(t),KCr=r(tBe," \u2014 "),QU=n(tBe,"A",{href:!0});var rCt=s(QU);ZCr=r(rCt,"TFXLNetForTokenClassification"),rCt.forEach(t),e5r=r(tBe," (XLNet model)"),tBe.forEach(t),me.forEach(t),o5r=i(Dl),T(z4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),KNe=i(f),xc=n(f,"H2",{class:!0});var lGe=s(xc);W4=n(lGe,"A",{id:!0,class:!0,href:!0});var tCt=s(W4);mTe=n(tCt,"SPAN",{});var aCt=s(mTe);T(hx.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),r5r=i(lGe),gTe=n(lGe,"SPAN",{});var nCt=s(gTe);t5r=r(nCt,"TFAutoModelForQuestionAnswering"),nCt.forEach(t),lGe.forEach(t),ZNe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(px.$$.fragment,Gl),a5r=i(Gl),$c=n(Gl,"P",{});var Mee=s($c);n5r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HU=n(Mee,"A",{href:!0});var sCt=s(HU);s5r=r(sCt,"from_pretrained()"),sCt.forEach(t),l5r=r(Mee," class method or the "),UU=n(Mee,"A",{href:!0});var lCt=s(UU);i5r=r(lCt,"from_config()"),lCt.forEach(t),d5r=r(Mee,` class
method.`),Mee.forEach(t),c5r=i(Gl),ux=n(Gl,"P",{});var iGe=s(ux);f5r=r(iGe,"This class cannot be instantiated directly using "),hTe=n(iGe,"CODE",{});var iCt=s(hTe);m5r=r(iCt,"__init__()"),iCt.forEach(t),g5r=r(iGe," (throws an error)."),iGe.forEach(t),h5r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Ww=s(Gt);T(_x.$$.fragment,Ww),p5r=i(Ww),pTe=n(Ww,"P",{});var dCt=s(pTe);u5r=r(dCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dCt.forEach(t),_5r=i(Ww),kc=n(Ww,"P",{});var Eee=s(kc);b5r=r(Eee,`Note:
Loading a model from its configuration file does `),uTe=n(Eee,"STRONG",{});var cCt=s(uTe);v5r=r(cCt,"not"),cCt.forEach(t),F5r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=n(Eee,"A",{href:!0});var fCt=s(JU);T5r=r(fCt,"from_pretrained()"),fCt.forEach(t),M5r=r(Eee," to load the model weights."),Eee.forEach(t),E5r=i(Ww),T(Q4.$$.fragment,Ww),Ww.forEach(t),C5r=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(bx.$$.fragment,Ol),w5r=i(Ol),_Te=n(Ol,"P",{});var mCt=s(_Te);A5r=r(mCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mCt.forEach(t),y5r=i(Ol),un=n(Ol,"P",{});var Qw=s(un);L5r=r(Qw,"The model class to instantiate is selected based on the "),bTe=n(Qw,"CODE",{});var gCt=s(bTe);x5r=r(gCt,"model_type"),gCt.forEach(t),$5r=r(Qw,` property of the config object (either
passed as an argument or loaded from `),vTe=n(Qw,"CODE",{});var hCt=s(vTe);k5r=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),S5r=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(Qw,"CODE",{});var pCt=s(FTe);R5r=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),P5r=r(Qw,":"),Qw.forEach(t),B5r=i(Ol),ce=n(Ol,"UL",{});var ge=s(ce);H4=n(ge,"LI",{});var aBe=s(H4);TTe=n(aBe,"STRONG",{});var uCt=s(TTe);I5r=r(uCt,"albert"),uCt.forEach(t),q5r=r(aBe," \u2014 "),YU=n(aBe,"A",{href:!0});var _Ct=s(YU);N5r=r(_Ct,"TFAlbertForQuestionAnswering"),_Ct.forEach(t),j5r=r(aBe," (ALBERT model)"),aBe.forEach(t),D5r=i(ge),U4=n(ge,"LI",{});var nBe=s(U4);MTe=n(nBe,"STRONG",{});var bCt=s(MTe);G5r=r(bCt,"bert"),bCt.forEach(t),O5r=r(nBe," \u2014 "),KU=n(nBe,"A",{href:!0});var vCt=s(KU);V5r=r(vCt,"TFBertForQuestionAnswering"),vCt.forEach(t),X5r=r(nBe," (BERT model)"),nBe.forEach(t),z5r=i(ge),J4=n(ge,"LI",{});var sBe=s(J4);ETe=n(sBe,"STRONG",{});var FCt=s(ETe);W5r=r(FCt,"camembert"),FCt.forEach(t),Q5r=r(sBe," \u2014 "),ZU=n(sBe,"A",{href:!0});var TCt=s(ZU);H5r=r(TCt,"TFCamembertForQuestionAnswering"),TCt.forEach(t),U5r=r(sBe," (CamemBERT model)"),sBe.forEach(t),J5r=i(ge),Y4=n(ge,"LI",{});var lBe=s(Y4);CTe=n(lBe,"STRONG",{});var MCt=s(CTe);Y5r=r(MCt,"convbert"),MCt.forEach(t),K5r=r(lBe," \u2014 "),eJ=n(lBe,"A",{href:!0});var ECt=s(eJ);Z5r=r(ECt,"TFConvBertForQuestionAnswering"),ECt.forEach(t),e3r=r(lBe," (ConvBERT model)"),lBe.forEach(t),o3r=i(ge),K4=n(ge,"LI",{});var iBe=s(K4);wTe=n(iBe,"STRONG",{});var CCt=s(wTe);r3r=r(CCt,"deberta"),CCt.forEach(t),t3r=r(iBe," \u2014 "),oJ=n(iBe,"A",{href:!0});var wCt=s(oJ);a3r=r(wCt,"TFDebertaForQuestionAnswering"),wCt.forEach(t),n3r=r(iBe," (DeBERTa model)"),iBe.forEach(t),s3r=i(ge),Z4=n(ge,"LI",{});var dBe=s(Z4);ATe=n(dBe,"STRONG",{});var ACt=s(ATe);l3r=r(ACt,"deberta-v2"),ACt.forEach(t),i3r=r(dBe," \u2014 "),rJ=n(dBe,"A",{href:!0});var yCt=s(rJ);d3r=r(yCt,"TFDebertaV2ForQuestionAnswering"),yCt.forEach(t),c3r=r(dBe," (DeBERTa-v2 model)"),dBe.forEach(t),f3r=i(ge),eE=n(ge,"LI",{});var cBe=s(eE);yTe=n(cBe,"STRONG",{});var LCt=s(yTe);m3r=r(LCt,"distilbert"),LCt.forEach(t),g3r=r(cBe," \u2014 "),tJ=n(cBe,"A",{href:!0});var xCt=s(tJ);h3r=r(xCt,"TFDistilBertForQuestionAnswering"),xCt.forEach(t),p3r=r(cBe," (DistilBERT model)"),cBe.forEach(t),u3r=i(ge),oE=n(ge,"LI",{});var fBe=s(oE);LTe=n(fBe,"STRONG",{});var $Ct=s(LTe);_3r=r($Ct,"electra"),$Ct.forEach(t),b3r=r(fBe," \u2014 "),aJ=n(fBe,"A",{href:!0});var kCt=s(aJ);v3r=r(kCt,"TFElectraForQuestionAnswering"),kCt.forEach(t),F3r=r(fBe," (ELECTRA model)"),fBe.forEach(t),T3r=i(ge),rE=n(ge,"LI",{});var mBe=s(rE);xTe=n(mBe,"STRONG",{});var SCt=s(xTe);M3r=r(SCt,"flaubert"),SCt.forEach(t),E3r=r(mBe," \u2014 "),nJ=n(mBe,"A",{href:!0});var RCt=s(nJ);C3r=r(RCt,"TFFlaubertForQuestionAnsweringSimple"),RCt.forEach(t),w3r=r(mBe," (FlauBERT model)"),mBe.forEach(t),A3r=i(ge),tE=n(ge,"LI",{});var gBe=s(tE);$Te=n(gBe,"STRONG",{});var PCt=s($Te);y3r=r(PCt,"funnel"),PCt.forEach(t),L3r=r(gBe," \u2014 "),sJ=n(gBe,"A",{href:!0});var BCt=s(sJ);x3r=r(BCt,"TFFunnelForQuestionAnswering"),BCt.forEach(t),$3r=r(gBe," (Funnel Transformer model)"),gBe.forEach(t),k3r=i(ge),aE=n(ge,"LI",{});var hBe=s(aE);kTe=n(hBe,"STRONG",{});var ICt=s(kTe);S3r=r(ICt,"gptj"),ICt.forEach(t),R3r=r(hBe," \u2014 "),lJ=n(hBe,"A",{href:!0});var qCt=s(lJ);P3r=r(qCt,"TFGPTJForQuestionAnswering"),qCt.forEach(t),B3r=r(hBe," (GPT-J model)"),hBe.forEach(t),I3r=i(ge),nE=n(ge,"LI",{});var pBe=s(nE);STe=n(pBe,"STRONG",{});var NCt=s(STe);q3r=r(NCt,"longformer"),NCt.forEach(t),N3r=r(pBe," \u2014 "),iJ=n(pBe,"A",{href:!0});var jCt=s(iJ);j3r=r(jCt,"TFLongformerForQuestionAnswering"),jCt.forEach(t),D3r=r(pBe," (Longformer model)"),pBe.forEach(t),G3r=i(ge),sE=n(ge,"LI",{});var uBe=s(sE);RTe=n(uBe,"STRONG",{});var DCt=s(RTe);O3r=r(DCt,"mobilebert"),DCt.forEach(t),V3r=r(uBe," \u2014 "),dJ=n(uBe,"A",{href:!0});var GCt=s(dJ);X3r=r(GCt,"TFMobileBertForQuestionAnswering"),GCt.forEach(t),z3r=r(uBe," (MobileBERT model)"),uBe.forEach(t),W3r=i(ge),lE=n(ge,"LI",{});var _Be=s(lE);PTe=n(_Be,"STRONG",{});var OCt=s(PTe);Q3r=r(OCt,"mpnet"),OCt.forEach(t),H3r=r(_Be," \u2014 "),cJ=n(_Be,"A",{href:!0});var VCt=s(cJ);U3r=r(VCt,"TFMPNetForQuestionAnswering"),VCt.forEach(t),J3r=r(_Be," (MPNet model)"),_Be.forEach(t),Y3r=i(ge),iE=n(ge,"LI",{});var bBe=s(iE);BTe=n(bBe,"STRONG",{});var XCt=s(BTe);K3r=r(XCt,"rembert"),XCt.forEach(t),Z3r=r(bBe," \u2014 "),fJ=n(bBe,"A",{href:!0});var zCt=s(fJ);ewr=r(zCt,"TFRemBertForQuestionAnswering"),zCt.forEach(t),owr=r(bBe," (RemBERT model)"),bBe.forEach(t),rwr=i(ge),dE=n(ge,"LI",{});var vBe=s(dE);ITe=n(vBe,"STRONG",{});var WCt=s(ITe);twr=r(WCt,"roberta"),WCt.forEach(t),awr=r(vBe," \u2014 "),mJ=n(vBe,"A",{href:!0});var QCt=s(mJ);nwr=r(QCt,"TFRobertaForQuestionAnswering"),QCt.forEach(t),swr=r(vBe," (RoBERTa model)"),vBe.forEach(t),lwr=i(ge),cE=n(ge,"LI",{});var FBe=s(cE);qTe=n(FBe,"STRONG",{});var HCt=s(qTe);iwr=r(HCt,"roformer"),HCt.forEach(t),dwr=r(FBe," \u2014 "),gJ=n(FBe,"A",{href:!0});var UCt=s(gJ);cwr=r(UCt,"TFRoFormerForQuestionAnswering"),UCt.forEach(t),fwr=r(FBe," (RoFormer model)"),FBe.forEach(t),mwr=i(ge),fE=n(ge,"LI",{});var TBe=s(fE);NTe=n(TBe,"STRONG",{});var JCt=s(NTe);gwr=r(JCt,"xlm"),JCt.forEach(t),hwr=r(TBe," \u2014 "),hJ=n(TBe,"A",{href:!0});var YCt=s(hJ);pwr=r(YCt,"TFXLMForQuestionAnsweringSimple"),YCt.forEach(t),uwr=r(TBe," (XLM model)"),TBe.forEach(t),_wr=i(ge),mE=n(ge,"LI",{});var MBe=s(mE);jTe=n(MBe,"STRONG",{});var KCt=s(jTe);bwr=r(KCt,"xlm-roberta"),KCt.forEach(t),vwr=r(MBe," \u2014 "),pJ=n(MBe,"A",{href:!0});var ZCt=s(pJ);Fwr=r(ZCt,"TFXLMRobertaForQuestionAnswering"),ZCt.forEach(t),Twr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),Mwr=i(ge),gE=n(ge,"LI",{});var EBe=s(gE);DTe=n(EBe,"STRONG",{});var e5t=s(DTe);Ewr=r(e5t,"xlnet"),e5t.forEach(t),Cwr=r(EBe," \u2014 "),uJ=n(EBe,"A",{href:!0});var o5t=s(uJ);wwr=r(o5t,"TFXLNetForQuestionAnsweringSimple"),o5t.forEach(t),Awr=r(EBe," (XLNet model)"),EBe.forEach(t),ge.forEach(t),ywr=i(Ol),T(hE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),eje=i(f),Sc=n(f,"H2",{class:!0});var dGe=s(Sc);pE=n(dGe,"A",{id:!0,class:!0,href:!0});var r5t=s(pE);GTe=n(r5t,"SPAN",{});var t5t=s(GTe);T(vx.$$.fragment,t5t),t5t.forEach(t),r5t.forEach(t),Lwr=i(dGe),OTe=n(dGe,"SPAN",{});var a5t=s(OTe);xwr=r(a5t,"TFAutoModelForVision2Seq"),a5t.forEach(t),dGe.forEach(t),oje=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(Fx.$$.fragment,Vl),$wr=i(Vl),Rc=n(Vl,"P",{});var Cee=s(Rc);kwr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_J=n(Cee,"A",{href:!0});var n5t=s(_J);Swr=r(n5t,"from_pretrained()"),n5t.forEach(t),Rwr=r(Cee," class method or the "),bJ=n(Cee,"A",{href:!0});var s5t=s(bJ);Pwr=r(s5t,"from_config()"),s5t.forEach(t),Bwr=r(Cee,` class
method.`),Cee.forEach(t),Iwr=i(Vl),Tx=n(Vl,"P",{});var cGe=s(Tx);qwr=r(cGe,"This class cannot be instantiated directly using "),VTe=n(cGe,"CODE",{});var l5t=s(VTe);Nwr=r(l5t,"__init__()"),l5t.forEach(t),jwr=r(cGe," (throws an error)."),cGe.forEach(t),Dwr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Hw=s(Ot);T(Mx.$$.fragment,Hw),Gwr=i(Hw),XTe=n(Hw,"P",{});var i5t=s(XTe);Owr=r(i5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),i5t.forEach(t),Vwr=i(Hw),Pc=n(Hw,"P",{});var wee=s(Pc);Xwr=r(wee,`Note:
Loading a model from its configuration file does `),zTe=n(wee,"STRONG",{});var d5t=s(zTe);zwr=r(d5t,"not"),d5t.forEach(t),Wwr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(wee,"A",{href:!0});var c5t=s(vJ);Qwr=r(c5t,"from_pretrained()"),c5t.forEach(t),Hwr=r(wee," to load the model weights."),wee.forEach(t),Uwr=i(Hw),T(uE.$$.fragment,Hw),Hw.forEach(t),Jwr=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(Ex.$$.fragment,Xl),Ywr=i(Xl),WTe=n(Xl,"P",{});var f5t=s(WTe);Kwr=r(f5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),f5t.forEach(t),Zwr=i(Xl),_n=n(Xl,"P",{});var Uw=s(_n);eAr=r(Uw,"The model class to instantiate is selected based on the "),QTe=n(Uw,"CODE",{});var m5t=s(QTe);oAr=r(m5t,"model_type"),m5t.forEach(t),rAr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),HTe=n(Uw,"CODE",{});var g5t=s(HTe);tAr=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),aAr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(Uw,"CODE",{});var h5t=s(UTe);nAr=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),sAr=r(Uw,":"),Uw.forEach(t),lAr=i(Xl),JTe=n(Xl,"UL",{});var p5t=s(JTe);_E=n(p5t,"LI",{});var CBe=s(_E);YTe=n(CBe,"STRONG",{});var u5t=s(YTe);iAr=r(u5t,"vision-encoder-decoder"),u5t.forEach(t),dAr=r(CBe," \u2014 "),FJ=n(CBe,"A",{href:!0});var _5t=s(FJ);cAr=r(_5t,"TFVisionEncoderDecoderModel"),_5t.forEach(t),fAr=r(CBe," (Vision Encoder decoder model)"),CBe.forEach(t),p5t.forEach(t),mAr=i(Xl),T(bE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),rje=i(f),Bc=n(f,"H2",{class:!0});var fGe=s(Bc);vE=n(fGe,"A",{id:!0,class:!0,href:!0});var b5t=s(vE);KTe=n(b5t,"SPAN",{});var v5t=s(KTe);T(Cx.$$.fragment,v5t),v5t.forEach(t),b5t.forEach(t),gAr=i(fGe),ZTe=n(fGe,"SPAN",{});var F5t=s(ZTe);hAr=r(F5t,"TFAutoModelForSpeechSeq2Seq"),F5t.forEach(t),fGe.forEach(t),tje=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(wx.$$.fragment,zl),pAr=i(zl),Ic=n(zl,"P",{});var Aee=s(Ic);uAr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TJ=n(Aee,"A",{href:!0});var T5t=s(TJ);_Ar=r(T5t,"from_pretrained()"),T5t.forEach(t),bAr=r(Aee," class method or the "),MJ=n(Aee,"A",{href:!0});var M5t=s(MJ);vAr=r(M5t,"from_config()"),M5t.forEach(t),FAr=r(Aee,` class
method.`),Aee.forEach(t),TAr=i(zl),Ax=n(zl,"P",{});var mGe=s(Ax);MAr=r(mGe,"This class cannot be instantiated directly using "),e8e=n(mGe,"CODE",{});var E5t=s(e8e);EAr=r(E5t,"__init__()"),E5t.forEach(t),CAr=r(mGe," (throws an error)."),mGe.forEach(t),wAr=i(zl),Vt=n(zl,"DIV",{class:!0});var Jw=s(Vt);T(yx.$$.fragment,Jw),AAr=i(Jw),o8e=n(Jw,"P",{});var C5t=s(o8e);yAr=r(C5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C5t.forEach(t),LAr=i(Jw),qc=n(Jw,"P",{});var yee=s(qc);xAr=r(yee,`Note:
Loading a model from its configuration file does `),r8e=n(yee,"STRONG",{});var w5t=s(r8e);$Ar=r(w5t,"not"),w5t.forEach(t),kAr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(yee,"A",{href:!0});var A5t=s(EJ);SAr=r(A5t,"from_pretrained()"),A5t.forEach(t),RAr=r(yee," to load the model weights."),yee.forEach(t),PAr=i(Jw),T(FE.$$.fragment,Jw),Jw.forEach(t),BAr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(Lx.$$.fragment,Wl),IAr=i(Wl),t8e=n(Wl,"P",{});var y5t=s(t8e);qAr=r(y5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y5t.forEach(t),NAr=i(Wl),bn=n(Wl,"P",{});var Yw=s(bn);jAr=r(Yw,"The model class to instantiate is selected based on the "),a8e=n(Yw,"CODE",{});var L5t=s(a8e);DAr=r(L5t,"model_type"),L5t.forEach(t),GAr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),n8e=n(Yw,"CODE",{});var x5t=s(n8e);OAr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),VAr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=n(Yw,"CODE",{});var $5t=s(s8e);XAr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),zAr=r(Yw,":"),Yw.forEach(t),WAr=i(Wl),l8e=n(Wl,"UL",{});var k5t=s(l8e);TE=n(k5t,"LI",{});var wBe=s(TE);i8e=n(wBe,"STRONG",{});var S5t=s(i8e);QAr=r(S5t,"speech_to_text"),S5t.forEach(t),HAr=r(wBe," \u2014 "),CJ=n(wBe,"A",{href:!0});var R5t=s(CJ);UAr=r(R5t,"TFSpeech2TextForConditionalGeneration"),R5t.forEach(t),JAr=r(wBe," (Speech2Text model)"),wBe.forEach(t),k5t.forEach(t),YAr=i(Wl),T(ME.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),aje=i(f),Nc=n(f,"H2",{class:!0});var gGe=s(Nc);EE=n(gGe,"A",{id:!0,class:!0,href:!0});var P5t=s(EE);d8e=n(P5t,"SPAN",{});var B5t=s(d8e);T(xx.$$.fragment,B5t),B5t.forEach(t),P5t.forEach(t),KAr=i(gGe),c8e=n(gGe,"SPAN",{});var I5t=s(c8e);ZAr=r(I5t,"FlaxAutoModel"),I5t.forEach(t),gGe.forEach(t),nje=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T($x.$$.fragment,Ql),e0r=i(Ql),jc=n(Ql,"P",{});var Lee=s(jc);o0r=r(Lee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wJ=n(Lee,"A",{href:!0});var q5t=s(wJ);r0r=r(q5t,"from_pretrained()"),q5t.forEach(t),t0r=r(Lee," class method or the "),AJ=n(Lee,"A",{href:!0});var N5t=s(AJ);a0r=r(N5t,"from_config()"),N5t.forEach(t),n0r=r(Lee,` class
method.`),Lee.forEach(t),s0r=i(Ql),kx=n(Ql,"P",{});var hGe=s(kx);l0r=r(hGe,"This class cannot be instantiated directly using "),f8e=n(hGe,"CODE",{});var j5t=s(f8e);i0r=r(j5t,"__init__()"),j5t.forEach(t),d0r=r(hGe," (throws an error)."),hGe.forEach(t),c0r=i(Ql),Xt=n(Ql,"DIV",{class:!0});var Kw=s(Xt);T(Sx.$$.fragment,Kw),f0r=i(Kw),m8e=n(Kw,"P",{});var D5t=s(m8e);m0r=r(D5t,"Instantiates one of the base model classes of the library from a configuration."),D5t.forEach(t),g0r=i(Kw),Dc=n(Kw,"P",{});var xee=s(Dc);h0r=r(xee,`Note:
Loading a model from its configuration file does `),g8e=n(xee,"STRONG",{});var G5t=s(g8e);p0r=r(G5t,"not"),G5t.forEach(t),u0r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(xee,"A",{href:!0});var O5t=s(yJ);_0r=r(O5t,"from_pretrained()"),O5t.forEach(t),b0r=r(xee," to load the model weights."),xee.forEach(t),v0r=i(Kw),T(CE.$$.fragment,Kw),Kw.forEach(t),F0r=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(Rx.$$.fragment,Hl),T0r=i(Hl),h8e=n(Hl,"P",{});var V5t=s(h8e);M0r=r(V5t,"Instantiate one of the base model classes of the library from a pretrained model."),V5t.forEach(t),E0r=i(Hl),vn=n(Hl,"P",{});var Zw=s(vn);C0r=r(Zw,"The model class to instantiate is selected based on the "),p8e=n(Zw,"CODE",{});var X5t=s(p8e);w0r=r(X5t,"model_type"),X5t.forEach(t),A0r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),u8e=n(Zw,"CODE",{});var z5t=s(u8e);y0r=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),L0r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(Zw,"CODE",{});var W5t=s(_8e);x0r=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),$0r=r(Zw,":"),Zw.forEach(t),k0r=i(Hl),te=n(Hl,"UL",{});var ne=s(te);wE=n(ne,"LI",{});var ABe=s(wE);b8e=n(ABe,"STRONG",{});var Q5t=s(b8e);S0r=r(Q5t,"albert"),Q5t.forEach(t),R0r=r(ABe," \u2014 "),LJ=n(ABe,"A",{href:!0});var H5t=s(LJ);P0r=r(H5t,"FlaxAlbertModel"),H5t.forEach(t),B0r=r(ABe," (ALBERT model)"),ABe.forEach(t),I0r=i(ne),AE=n(ne,"LI",{});var yBe=s(AE);v8e=n(yBe,"STRONG",{});var U5t=s(v8e);q0r=r(U5t,"bart"),U5t.forEach(t),N0r=r(yBe," \u2014 "),xJ=n(yBe,"A",{href:!0});var J5t=s(xJ);j0r=r(J5t,"FlaxBartModel"),J5t.forEach(t),D0r=r(yBe," (BART model)"),yBe.forEach(t),G0r=i(ne),yE=n(ne,"LI",{});var LBe=s(yE);F8e=n(LBe,"STRONG",{});var Y5t=s(F8e);O0r=r(Y5t,"beit"),Y5t.forEach(t),V0r=r(LBe," \u2014 "),$J=n(LBe,"A",{href:!0});var K5t=s($J);X0r=r(K5t,"FlaxBeitModel"),K5t.forEach(t),z0r=r(LBe," (BEiT model)"),LBe.forEach(t),W0r=i(ne),LE=n(ne,"LI",{});var xBe=s(LE);T8e=n(xBe,"STRONG",{});var Z5t=s(T8e);Q0r=r(Z5t,"bert"),Z5t.forEach(t),H0r=r(xBe," \u2014 "),kJ=n(xBe,"A",{href:!0});var e3t=s(kJ);U0r=r(e3t,"FlaxBertModel"),e3t.forEach(t),J0r=r(xBe," (BERT model)"),xBe.forEach(t),Y0r=i(ne),xE=n(ne,"LI",{});var $Be=s(xE);M8e=n($Be,"STRONG",{});var o3t=s(M8e);K0r=r(o3t,"big_bird"),o3t.forEach(t),Z0r=r($Be," \u2014 "),SJ=n($Be,"A",{href:!0});var r3t=s(SJ);eyr=r(r3t,"FlaxBigBirdModel"),r3t.forEach(t),oyr=r($Be," (BigBird model)"),$Be.forEach(t),ryr=i(ne),$E=n(ne,"LI",{});var kBe=s($E);E8e=n(kBe,"STRONG",{});var t3t=s(E8e);tyr=r(t3t,"blenderbot"),t3t.forEach(t),ayr=r(kBe," \u2014 "),RJ=n(kBe,"A",{href:!0});var a3t=s(RJ);nyr=r(a3t,"FlaxBlenderbotModel"),a3t.forEach(t),syr=r(kBe," (Blenderbot model)"),kBe.forEach(t),lyr=i(ne),kE=n(ne,"LI",{});var SBe=s(kE);C8e=n(SBe,"STRONG",{});var n3t=s(C8e);iyr=r(n3t,"blenderbot-small"),n3t.forEach(t),dyr=r(SBe," \u2014 "),PJ=n(SBe,"A",{href:!0});var s3t=s(PJ);cyr=r(s3t,"FlaxBlenderbotSmallModel"),s3t.forEach(t),fyr=r(SBe," (BlenderbotSmall model)"),SBe.forEach(t),myr=i(ne),SE=n(ne,"LI",{});var RBe=s(SE);w8e=n(RBe,"STRONG",{});var l3t=s(w8e);gyr=r(l3t,"clip"),l3t.forEach(t),hyr=r(RBe," \u2014 "),BJ=n(RBe,"A",{href:!0});var i3t=s(BJ);pyr=r(i3t,"FlaxCLIPModel"),i3t.forEach(t),uyr=r(RBe," (CLIP model)"),RBe.forEach(t),_yr=i(ne),RE=n(ne,"LI",{});var PBe=s(RE);A8e=n(PBe,"STRONG",{});var d3t=s(A8e);byr=r(d3t,"distilbert"),d3t.forEach(t),vyr=r(PBe," \u2014 "),IJ=n(PBe,"A",{href:!0});var c3t=s(IJ);Fyr=r(c3t,"FlaxDistilBertModel"),c3t.forEach(t),Tyr=r(PBe," (DistilBERT model)"),PBe.forEach(t),Myr=i(ne),PE=n(ne,"LI",{});var BBe=s(PE);y8e=n(BBe,"STRONG",{});var f3t=s(y8e);Eyr=r(f3t,"electra"),f3t.forEach(t),Cyr=r(BBe," \u2014 "),qJ=n(BBe,"A",{href:!0});var m3t=s(qJ);wyr=r(m3t,"FlaxElectraModel"),m3t.forEach(t),Ayr=r(BBe," (ELECTRA model)"),BBe.forEach(t),yyr=i(ne),BE=n(ne,"LI",{});var IBe=s(BE);L8e=n(IBe,"STRONG",{});var g3t=s(L8e);Lyr=r(g3t,"gpt2"),g3t.forEach(t),xyr=r(IBe," \u2014 "),NJ=n(IBe,"A",{href:!0});var h3t=s(NJ);$yr=r(h3t,"FlaxGPT2Model"),h3t.forEach(t),kyr=r(IBe," (OpenAI GPT-2 model)"),IBe.forEach(t),Syr=i(ne),IE=n(ne,"LI",{});var qBe=s(IE);x8e=n(qBe,"STRONG",{});var p3t=s(x8e);Ryr=r(p3t,"gpt_neo"),p3t.forEach(t),Pyr=r(qBe," \u2014 "),jJ=n(qBe,"A",{href:!0});var u3t=s(jJ);Byr=r(u3t,"FlaxGPTNeoModel"),u3t.forEach(t),Iyr=r(qBe," (GPT Neo model)"),qBe.forEach(t),qyr=i(ne),qE=n(ne,"LI",{});var NBe=s(qE);$8e=n(NBe,"STRONG",{});var _3t=s($8e);Nyr=r(_3t,"gptj"),_3t.forEach(t),jyr=r(NBe," \u2014 "),DJ=n(NBe,"A",{href:!0});var b3t=s(DJ);Dyr=r(b3t,"FlaxGPTJModel"),b3t.forEach(t),Gyr=r(NBe," (GPT-J model)"),NBe.forEach(t),Oyr=i(ne),NE=n(ne,"LI",{});var jBe=s(NE);k8e=n(jBe,"STRONG",{});var v3t=s(k8e);Vyr=r(v3t,"marian"),v3t.forEach(t),Xyr=r(jBe," \u2014 "),GJ=n(jBe,"A",{href:!0});var F3t=s(GJ);zyr=r(F3t,"FlaxMarianModel"),F3t.forEach(t),Wyr=r(jBe," (Marian model)"),jBe.forEach(t),Qyr=i(ne),jE=n(ne,"LI",{});var DBe=s(jE);S8e=n(DBe,"STRONG",{});var T3t=s(S8e);Hyr=r(T3t,"mbart"),T3t.forEach(t),Uyr=r(DBe," \u2014 "),OJ=n(DBe,"A",{href:!0});var M3t=s(OJ);Jyr=r(M3t,"FlaxMBartModel"),M3t.forEach(t),Yyr=r(DBe," (mBART model)"),DBe.forEach(t),Kyr=i(ne),DE=n(ne,"LI",{});var GBe=s(DE);R8e=n(GBe,"STRONG",{});var E3t=s(R8e);Zyr=r(E3t,"mt5"),E3t.forEach(t),eLr=r(GBe," \u2014 "),VJ=n(GBe,"A",{href:!0});var C3t=s(VJ);oLr=r(C3t,"FlaxMT5Model"),C3t.forEach(t),rLr=r(GBe," (mT5 model)"),GBe.forEach(t),tLr=i(ne),GE=n(ne,"LI",{});var OBe=s(GE);P8e=n(OBe,"STRONG",{});var w3t=s(P8e);aLr=r(w3t,"pegasus"),w3t.forEach(t),nLr=r(OBe," \u2014 "),XJ=n(OBe,"A",{href:!0});var A3t=s(XJ);sLr=r(A3t,"FlaxPegasusModel"),A3t.forEach(t),lLr=r(OBe," (Pegasus model)"),OBe.forEach(t),iLr=i(ne),OE=n(ne,"LI",{});var VBe=s(OE);B8e=n(VBe,"STRONG",{});var y3t=s(B8e);dLr=r(y3t,"roberta"),y3t.forEach(t),cLr=r(VBe," \u2014 "),zJ=n(VBe,"A",{href:!0});var L3t=s(zJ);fLr=r(L3t,"FlaxRobertaModel"),L3t.forEach(t),mLr=r(VBe," (RoBERTa model)"),VBe.forEach(t),gLr=i(ne),VE=n(ne,"LI",{});var XBe=s(VE);I8e=n(XBe,"STRONG",{});var x3t=s(I8e);hLr=r(x3t,"roformer"),x3t.forEach(t),pLr=r(XBe," \u2014 "),WJ=n(XBe,"A",{href:!0});var $3t=s(WJ);uLr=r($3t,"FlaxRoFormerModel"),$3t.forEach(t),_Lr=r(XBe," (RoFormer model)"),XBe.forEach(t),bLr=i(ne),XE=n(ne,"LI",{});var zBe=s(XE);q8e=n(zBe,"STRONG",{});var k3t=s(q8e);vLr=r(k3t,"t5"),k3t.forEach(t),FLr=r(zBe," \u2014 "),QJ=n(zBe,"A",{href:!0});var S3t=s(QJ);TLr=r(S3t,"FlaxT5Model"),S3t.forEach(t),MLr=r(zBe," (T5 model)"),zBe.forEach(t),ELr=i(ne),zE=n(ne,"LI",{});var WBe=s(zE);N8e=n(WBe,"STRONG",{});var R3t=s(N8e);CLr=r(R3t,"vision-text-dual-encoder"),R3t.forEach(t),wLr=r(WBe," \u2014 "),HJ=n(WBe,"A",{href:!0});var P3t=s(HJ);ALr=r(P3t,"FlaxVisionTextDualEncoderModel"),P3t.forEach(t),yLr=r(WBe," (VisionTextDualEncoder model)"),WBe.forEach(t),LLr=i(ne),WE=n(ne,"LI",{});var QBe=s(WE);j8e=n(QBe,"STRONG",{});var B3t=s(j8e);xLr=r(B3t,"vit"),B3t.forEach(t),$Lr=r(QBe," \u2014 "),UJ=n(QBe,"A",{href:!0});var I3t=s(UJ);kLr=r(I3t,"FlaxViTModel"),I3t.forEach(t),SLr=r(QBe," (ViT model)"),QBe.forEach(t),RLr=i(ne),QE=n(ne,"LI",{});var HBe=s(QE);D8e=n(HBe,"STRONG",{});var q3t=s(D8e);PLr=r(q3t,"wav2vec2"),q3t.forEach(t),BLr=r(HBe," \u2014 "),JJ=n(HBe,"A",{href:!0});var N3t=s(JJ);ILr=r(N3t,"FlaxWav2Vec2Model"),N3t.forEach(t),qLr=r(HBe," (Wav2Vec2 model)"),HBe.forEach(t),NLr=i(ne),HE=n(ne,"LI",{});var UBe=s(HE);G8e=n(UBe,"STRONG",{});var j3t=s(G8e);jLr=r(j3t,"xglm"),j3t.forEach(t),DLr=r(UBe," \u2014 "),YJ=n(UBe,"A",{href:!0});var D3t=s(YJ);GLr=r(D3t,"FlaxXGLMModel"),D3t.forEach(t),OLr=r(UBe," (XGLM model)"),UBe.forEach(t),VLr=i(ne),UE=n(ne,"LI",{});var JBe=s(UE);O8e=n(JBe,"STRONG",{});var G3t=s(O8e);XLr=r(G3t,"xlm-roberta"),G3t.forEach(t),zLr=r(JBe," \u2014 "),KJ=n(JBe,"A",{href:!0});var O3t=s(KJ);WLr=r(O3t,"FlaxXLMRobertaModel"),O3t.forEach(t),QLr=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),ne.forEach(t),HLr=i(Hl),T(JE.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),sje=i(f),Gc=n(f,"H2",{class:!0});var pGe=s(Gc);YE=n(pGe,"A",{id:!0,class:!0,href:!0});var V3t=s(YE);V8e=n(V3t,"SPAN",{});var X3t=s(V8e);T(Px.$$.fragment,X3t),X3t.forEach(t),V3t.forEach(t),ULr=i(pGe),X8e=n(pGe,"SPAN",{});var z3t=s(X8e);JLr=r(z3t,"FlaxAutoModelForCausalLM"),z3t.forEach(t),pGe.forEach(t),lje=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(Bx.$$.fragment,Ul),YLr=i(Ul),Oc=n(Ul,"P",{});var $ee=s(Oc);KLr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=n($ee,"A",{href:!0});var W3t=s(ZJ);ZLr=r(W3t,"from_pretrained()"),W3t.forEach(t),exr=r($ee," class method or the "),eY=n($ee,"A",{href:!0});var Q3t=s(eY);oxr=r(Q3t,"from_config()"),Q3t.forEach(t),rxr=r($ee,` class
method.`),$ee.forEach(t),txr=i(Ul),Ix=n(Ul,"P",{});var uGe=s(Ix);axr=r(uGe,"This class cannot be instantiated directly using "),z8e=n(uGe,"CODE",{});var H3t=s(z8e);nxr=r(H3t,"__init__()"),H3t.forEach(t),sxr=r(uGe," (throws an error)."),uGe.forEach(t),lxr=i(Ul),zt=n(Ul,"DIV",{class:!0});var eA=s(zt);T(qx.$$.fragment,eA),ixr=i(eA),W8e=n(eA,"P",{});var U3t=s(W8e);dxr=r(U3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U3t.forEach(t),cxr=i(eA),Vc=n(eA,"P",{});var kee=s(Vc);fxr=r(kee,`Note:
Loading a model from its configuration file does `),Q8e=n(kee,"STRONG",{});var J3t=s(Q8e);mxr=r(J3t,"not"),J3t.forEach(t),gxr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(kee,"A",{href:!0});var Y3t=s(oY);hxr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),pxr=r(kee," to load the model weights."),kee.forEach(t),uxr=i(eA),T(KE.$$.fragment,eA),eA.forEach(t),_xr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(Nx.$$.fragment,Jl),bxr=i(Jl),H8e=n(Jl,"P",{});var K3t=s(H8e);vxr=r(K3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),K3t.forEach(t),Fxr=i(Jl),Fn=n(Jl,"P",{});var oA=s(Fn);Txr=r(oA,"The model class to instantiate is selected based on the "),U8e=n(oA,"CODE",{});var Z3t=s(U8e);Mxr=r(Z3t,"model_type"),Z3t.forEach(t),Exr=r(oA,` property of the config object (either
passed as an argument or loaded from `),J8e=n(oA,"CODE",{});var ewt=s(J8e);Cxr=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),wxr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(oA,"CODE",{});var owt=s(Y8e);Axr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),yxr=r(oA,":"),oA.forEach(t),Lxr=i(Jl),Re=n(Jl,"UL",{});var Xe=s(Re);ZE=n(Xe,"LI",{});var YBe=s(ZE);K8e=n(YBe,"STRONG",{});var rwt=s(K8e);xxr=r(rwt,"bart"),rwt.forEach(t),$xr=r(YBe," \u2014 "),rY=n(YBe,"A",{href:!0});var twt=s(rY);kxr=r(twt,"FlaxBartForCausalLM"),twt.forEach(t),Sxr=r(YBe," (BART model)"),YBe.forEach(t),Rxr=i(Xe),eC=n(Xe,"LI",{});var KBe=s(eC);Z8e=n(KBe,"STRONG",{});var awt=s(Z8e);Pxr=r(awt,"bert"),awt.forEach(t),Bxr=r(KBe," \u2014 "),tY=n(KBe,"A",{href:!0});var nwt=s(tY);Ixr=r(nwt,"FlaxBertForCausalLM"),nwt.forEach(t),qxr=r(KBe," (BERT model)"),KBe.forEach(t),Nxr=i(Xe),oC=n(Xe,"LI",{});var ZBe=s(oC);e7e=n(ZBe,"STRONG",{});var swt=s(e7e);jxr=r(swt,"big_bird"),swt.forEach(t),Dxr=r(ZBe," \u2014 "),aY=n(ZBe,"A",{href:!0});var lwt=s(aY);Gxr=r(lwt,"FlaxBigBirdForCausalLM"),lwt.forEach(t),Oxr=r(ZBe," (BigBird model)"),ZBe.forEach(t),Vxr=i(Xe),rC=n(Xe,"LI",{});var eIe=s(rC);o7e=n(eIe,"STRONG",{});var iwt=s(o7e);Xxr=r(iwt,"electra"),iwt.forEach(t),zxr=r(eIe," \u2014 "),nY=n(eIe,"A",{href:!0});var dwt=s(nY);Wxr=r(dwt,"FlaxElectraForCausalLM"),dwt.forEach(t),Qxr=r(eIe," (ELECTRA model)"),eIe.forEach(t),Hxr=i(Xe),tC=n(Xe,"LI",{});var oIe=s(tC);r7e=n(oIe,"STRONG",{});var cwt=s(r7e);Uxr=r(cwt,"gpt2"),cwt.forEach(t),Jxr=r(oIe," \u2014 "),sY=n(oIe,"A",{href:!0});var fwt=s(sY);Yxr=r(fwt,"FlaxGPT2LMHeadModel"),fwt.forEach(t),Kxr=r(oIe," (OpenAI GPT-2 model)"),oIe.forEach(t),Zxr=i(Xe),aC=n(Xe,"LI",{});var rIe=s(aC);t7e=n(rIe,"STRONG",{});var mwt=s(t7e);e9r=r(mwt,"gpt_neo"),mwt.forEach(t),o9r=r(rIe," \u2014 "),lY=n(rIe,"A",{href:!0});var gwt=s(lY);r9r=r(gwt,"FlaxGPTNeoForCausalLM"),gwt.forEach(t),t9r=r(rIe," (GPT Neo model)"),rIe.forEach(t),a9r=i(Xe),nC=n(Xe,"LI",{});var tIe=s(nC);a7e=n(tIe,"STRONG",{});var hwt=s(a7e);n9r=r(hwt,"gptj"),hwt.forEach(t),s9r=r(tIe," \u2014 "),iY=n(tIe,"A",{href:!0});var pwt=s(iY);l9r=r(pwt,"FlaxGPTJForCausalLM"),pwt.forEach(t),i9r=r(tIe," (GPT-J model)"),tIe.forEach(t),d9r=i(Xe),sC=n(Xe,"LI",{});var aIe=s(sC);n7e=n(aIe,"STRONG",{});var uwt=s(n7e);c9r=r(uwt,"roberta"),uwt.forEach(t),f9r=r(aIe," \u2014 "),dY=n(aIe,"A",{href:!0});var _wt=s(dY);m9r=r(_wt,"FlaxRobertaForCausalLM"),_wt.forEach(t),g9r=r(aIe," (RoBERTa model)"),aIe.forEach(t),h9r=i(Xe),lC=n(Xe,"LI",{});var nIe=s(lC);s7e=n(nIe,"STRONG",{});var bwt=s(s7e);p9r=r(bwt,"xglm"),bwt.forEach(t),u9r=r(nIe," \u2014 "),cY=n(nIe,"A",{href:!0});var vwt=s(cY);_9r=r(vwt,"FlaxXGLMForCausalLM"),vwt.forEach(t),b9r=r(nIe," (XGLM model)"),nIe.forEach(t),Xe.forEach(t),v9r=i(Jl),T(iC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),ije=i(f),Xc=n(f,"H2",{class:!0});var _Ge=s(Xc);dC=n(_Ge,"A",{id:!0,class:!0,href:!0});var Fwt=s(dC);l7e=n(Fwt,"SPAN",{});var Twt=s(l7e);T(jx.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),F9r=i(_Ge),i7e=n(_Ge,"SPAN",{});var Mwt=s(i7e);T9r=r(Mwt,"FlaxAutoModelForPreTraining"),Mwt.forEach(t),_Ge.forEach(t),dje=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(Dx.$$.fragment,Yl),M9r=i(Yl),zc=n(Yl,"P",{});var See=s(zc);E9r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fY=n(See,"A",{href:!0});var Ewt=s(fY);C9r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),w9r=r(See," class method or the "),mY=n(See,"A",{href:!0});var Cwt=s(mY);A9r=r(Cwt,"from_config()"),Cwt.forEach(t),y9r=r(See,` class
method.`),See.forEach(t),L9r=i(Yl),Gx=n(Yl,"P",{});var bGe=s(Gx);x9r=r(bGe,"This class cannot be instantiated directly using "),d7e=n(bGe,"CODE",{});var wwt=s(d7e);$9r=r(wwt,"__init__()"),wwt.forEach(t),k9r=r(bGe," (throws an error)."),bGe.forEach(t),S9r=i(Yl),Wt=n(Yl,"DIV",{class:!0});var rA=s(Wt);T(Ox.$$.fragment,rA),R9r=i(rA),c7e=n(rA,"P",{});var Awt=s(c7e);P9r=r(Awt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Awt.forEach(t),B9r=i(rA),Wc=n(rA,"P",{});var Ree=s(Wc);I9r=r(Ree,`Note:
Loading a model from its configuration file does `),f7e=n(Ree,"STRONG",{});var ywt=s(f7e);q9r=r(ywt,"not"),ywt.forEach(t),N9r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Ree,"A",{href:!0});var Lwt=s(gY);j9r=r(Lwt,"from_pretrained()"),Lwt.forEach(t),D9r=r(Ree," to load the model weights."),Ree.forEach(t),G9r=i(rA),T(cC.$$.fragment,rA),rA.forEach(t),O9r=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(Vx.$$.fragment,Kl),V9r=i(Kl),m7e=n(Kl,"P",{});var xwt=s(m7e);X9r=r(xwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xwt.forEach(t),z9r=i(Kl),Tn=n(Kl,"P",{});var tA=s(Tn);W9r=r(tA,"The model class to instantiate is selected based on the "),g7e=n(tA,"CODE",{});var $wt=s(g7e);Q9r=r($wt,"model_type"),$wt.forEach(t),H9r=r(tA,` property of the config object (either
passed as an argument or loaded from `),h7e=n(tA,"CODE",{});var kwt=s(h7e);U9r=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),J9r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(tA,"CODE",{});var Swt=s(p7e);Y9r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),K9r=r(tA,":"),tA.forEach(t),Z9r=i(Kl),Me=n(Kl,"UL",{});var we=s(Me);fC=n(we,"LI",{});var sIe=s(fC);u7e=n(sIe,"STRONG",{});var Rwt=s(u7e);e$r=r(Rwt,"albert"),Rwt.forEach(t),o$r=r(sIe," \u2014 "),hY=n(sIe,"A",{href:!0});var Pwt=s(hY);r$r=r(Pwt,"FlaxAlbertForPreTraining"),Pwt.forEach(t),t$r=r(sIe," (ALBERT model)"),sIe.forEach(t),a$r=i(we),mC=n(we,"LI",{});var lIe=s(mC);_7e=n(lIe,"STRONG",{});var Bwt=s(_7e);n$r=r(Bwt,"bart"),Bwt.forEach(t),s$r=r(lIe," \u2014 "),pY=n(lIe,"A",{href:!0});var Iwt=s(pY);l$r=r(Iwt,"FlaxBartForConditionalGeneration"),Iwt.forEach(t),i$r=r(lIe," (BART model)"),lIe.forEach(t),d$r=i(we),gC=n(we,"LI",{});var iIe=s(gC);b7e=n(iIe,"STRONG",{});var qwt=s(b7e);c$r=r(qwt,"bert"),qwt.forEach(t),f$r=r(iIe," \u2014 "),uY=n(iIe,"A",{href:!0});var Nwt=s(uY);m$r=r(Nwt,"FlaxBertForPreTraining"),Nwt.forEach(t),g$r=r(iIe," (BERT model)"),iIe.forEach(t),h$r=i(we),hC=n(we,"LI",{});var dIe=s(hC);v7e=n(dIe,"STRONG",{});var jwt=s(v7e);p$r=r(jwt,"big_bird"),jwt.forEach(t),u$r=r(dIe," \u2014 "),_Y=n(dIe,"A",{href:!0});var Dwt=s(_Y);_$r=r(Dwt,"FlaxBigBirdForPreTraining"),Dwt.forEach(t),b$r=r(dIe," (BigBird model)"),dIe.forEach(t),v$r=i(we),pC=n(we,"LI",{});var cIe=s(pC);F7e=n(cIe,"STRONG",{});var Gwt=s(F7e);F$r=r(Gwt,"electra"),Gwt.forEach(t),T$r=r(cIe," \u2014 "),bY=n(cIe,"A",{href:!0});var Owt=s(bY);M$r=r(Owt,"FlaxElectraForPreTraining"),Owt.forEach(t),E$r=r(cIe," (ELECTRA model)"),cIe.forEach(t),C$r=i(we),uC=n(we,"LI",{});var fIe=s(uC);T7e=n(fIe,"STRONG",{});var Vwt=s(T7e);w$r=r(Vwt,"mbart"),Vwt.forEach(t),A$r=r(fIe," \u2014 "),vY=n(fIe,"A",{href:!0});var Xwt=s(vY);y$r=r(Xwt,"FlaxMBartForConditionalGeneration"),Xwt.forEach(t),L$r=r(fIe," (mBART model)"),fIe.forEach(t),x$r=i(we),_C=n(we,"LI",{});var mIe=s(_C);M7e=n(mIe,"STRONG",{});var zwt=s(M7e);$$r=r(zwt,"mt5"),zwt.forEach(t),k$r=r(mIe," \u2014 "),FY=n(mIe,"A",{href:!0});var Wwt=s(FY);S$r=r(Wwt,"FlaxMT5ForConditionalGeneration"),Wwt.forEach(t),R$r=r(mIe," (mT5 model)"),mIe.forEach(t),P$r=i(we),bC=n(we,"LI",{});var gIe=s(bC);E7e=n(gIe,"STRONG",{});var Qwt=s(E7e);B$r=r(Qwt,"roberta"),Qwt.forEach(t),I$r=r(gIe," \u2014 "),TY=n(gIe,"A",{href:!0});var Hwt=s(TY);q$r=r(Hwt,"FlaxRobertaForMaskedLM"),Hwt.forEach(t),N$r=r(gIe," (RoBERTa model)"),gIe.forEach(t),j$r=i(we),vC=n(we,"LI",{});var hIe=s(vC);C7e=n(hIe,"STRONG",{});var Uwt=s(C7e);D$r=r(Uwt,"roformer"),Uwt.forEach(t),G$r=r(hIe," \u2014 "),MY=n(hIe,"A",{href:!0});var Jwt=s(MY);O$r=r(Jwt,"FlaxRoFormerForMaskedLM"),Jwt.forEach(t),V$r=r(hIe," (RoFormer model)"),hIe.forEach(t),X$r=i(we),FC=n(we,"LI",{});var pIe=s(FC);w7e=n(pIe,"STRONG",{});var Ywt=s(w7e);z$r=r(Ywt,"t5"),Ywt.forEach(t),W$r=r(pIe," \u2014 "),EY=n(pIe,"A",{href:!0});var Kwt=s(EY);Q$r=r(Kwt,"FlaxT5ForConditionalGeneration"),Kwt.forEach(t),H$r=r(pIe," (T5 model)"),pIe.forEach(t),U$r=i(we),TC=n(we,"LI",{});var uIe=s(TC);A7e=n(uIe,"STRONG",{});var Zwt=s(A7e);J$r=r(Zwt,"wav2vec2"),Zwt.forEach(t),Y$r=r(uIe," \u2014 "),CY=n(uIe,"A",{href:!0});var eAt=s(CY);K$r=r(eAt,"FlaxWav2Vec2ForPreTraining"),eAt.forEach(t),Z$r=r(uIe," (Wav2Vec2 model)"),uIe.forEach(t),ekr=i(we),MC=n(we,"LI",{});var _Ie=s(MC);y7e=n(_Ie,"STRONG",{});var oAt=s(y7e);okr=r(oAt,"xlm-roberta"),oAt.forEach(t),rkr=r(_Ie," \u2014 "),wY=n(_Ie,"A",{href:!0});var rAt=s(wY);tkr=r(rAt,"FlaxXLMRobertaForMaskedLM"),rAt.forEach(t),akr=r(_Ie," (XLM-RoBERTa model)"),_Ie.forEach(t),we.forEach(t),nkr=i(Kl),T(EC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),cje=i(f),Qc=n(f,"H2",{class:!0});var vGe=s(Qc);CC=n(vGe,"A",{id:!0,class:!0,href:!0});var tAt=s(CC);L7e=n(tAt,"SPAN",{});var aAt=s(L7e);T(Xx.$$.fragment,aAt),aAt.forEach(t),tAt.forEach(t),skr=i(vGe),x7e=n(vGe,"SPAN",{});var nAt=s(x7e);lkr=r(nAt,"FlaxAutoModelForMaskedLM"),nAt.forEach(t),vGe.forEach(t),fje=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(zx.$$.fragment,Zl),ikr=i(Zl),Hc=n(Zl,"P",{});var Pee=s(Hc);dkr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=n(Pee,"A",{href:!0});var sAt=s(AY);ckr=r(sAt,"from_pretrained()"),sAt.forEach(t),fkr=r(Pee," class method or the "),yY=n(Pee,"A",{href:!0});var lAt=s(yY);mkr=r(lAt,"from_config()"),lAt.forEach(t),gkr=r(Pee,` class
method.`),Pee.forEach(t),hkr=i(Zl),Wx=n(Zl,"P",{});var FGe=s(Wx);pkr=r(FGe,"This class cannot be instantiated directly using "),$7e=n(FGe,"CODE",{});var iAt=s($7e);ukr=r(iAt,"__init__()"),iAt.forEach(t),_kr=r(FGe," (throws an error)."),FGe.forEach(t),bkr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var aA=s(Qt);T(Qx.$$.fragment,aA),vkr=i(aA),k7e=n(aA,"P",{});var dAt=s(k7e);Fkr=r(dAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dAt.forEach(t),Tkr=i(aA),Uc=n(aA,"P",{});var Bee=s(Uc);Mkr=r(Bee,`Note:
Loading a model from its configuration file does `),S7e=n(Bee,"STRONG",{});var cAt=s(S7e);Ekr=r(cAt,"not"),cAt.forEach(t),Ckr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(Bee,"A",{href:!0});var fAt=s(LY);wkr=r(fAt,"from_pretrained()"),fAt.forEach(t),Akr=r(Bee," to load the model weights."),Bee.forEach(t),ykr=i(aA),T(wC.$$.fragment,aA),aA.forEach(t),Lkr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(Hx.$$.fragment,ei),xkr=i(ei),R7e=n(ei,"P",{});var mAt=s(R7e);$kr=r(mAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mAt.forEach(t),kkr=i(ei),Mn=n(ei,"P",{});var nA=s(Mn);Skr=r(nA,"The model class to instantiate is selected based on the "),P7e=n(nA,"CODE",{});var gAt=s(P7e);Rkr=r(gAt,"model_type"),gAt.forEach(t),Pkr=r(nA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(nA,"CODE",{});var hAt=s(B7e);Bkr=r(hAt,"pretrained_model_name_or_path"),hAt.forEach(t),Ikr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(nA,"CODE",{});var pAt=s(I7e);qkr=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),Nkr=r(nA,":"),nA.forEach(t),jkr=i(ei),Le=n(ei,"UL",{});var Ie=s(Le);AC=n(Ie,"LI",{});var bIe=s(AC);q7e=n(bIe,"STRONG",{});var uAt=s(q7e);Dkr=r(uAt,"albert"),uAt.forEach(t),Gkr=r(bIe," \u2014 "),xY=n(bIe,"A",{href:!0});var _At=s(xY);Okr=r(_At,"FlaxAlbertForMaskedLM"),_At.forEach(t),Vkr=r(bIe," (ALBERT model)"),bIe.forEach(t),Xkr=i(Ie),yC=n(Ie,"LI",{});var vIe=s(yC);N7e=n(vIe,"STRONG",{});var bAt=s(N7e);zkr=r(bAt,"bart"),bAt.forEach(t),Wkr=r(vIe," \u2014 "),$Y=n(vIe,"A",{href:!0});var vAt=s($Y);Qkr=r(vAt,"FlaxBartForConditionalGeneration"),vAt.forEach(t),Hkr=r(vIe," (BART model)"),vIe.forEach(t),Ukr=i(Ie),LC=n(Ie,"LI",{});var FIe=s(LC);j7e=n(FIe,"STRONG",{});var FAt=s(j7e);Jkr=r(FAt,"bert"),FAt.forEach(t),Ykr=r(FIe," \u2014 "),kY=n(FIe,"A",{href:!0});var TAt=s(kY);Kkr=r(TAt,"FlaxBertForMaskedLM"),TAt.forEach(t),Zkr=r(FIe," (BERT model)"),FIe.forEach(t),eSr=i(Ie),xC=n(Ie,"LI",{});var TIe=s(xC);D7e=n(TIe,"STRONG",{});var MAt=s(D7e);oSr=r(MAt,"big_bird"),MAt.forEach(t),rSr=r(TIe," \u2014 "),SY=n(TIe,"A",{href:!0});var EAt=s(SY);tSr=r(EAt,"FlaxBigBirdForMaskedLM"),EAt.forEach(t),aSr=r(TIe," (BigBird model)"),TIe.forEach(t),nSr=i(Ie),$C=n(Ie,"LI",{});var MIe=s($C);G7e=n(MIe,"STRONG",{});var CAt=s(G7e);sSr=r(CAt,"distilbert"),CAt.forEach(t),lSr=r(MIe," \u2014 "),RY=n(MIe,"A",{href:!0});var wAt=s(RY);iSr=r(wAt,"FlaxDistilBertForMaskedLM"),wAt.forEach(t),dSr=r(MIe," (DistilBERT model)"),MIe.forEach(t),cSr=i(Ie),kC=n(Ie,"LI",{});var EIe=s(kC);O7e=n(EIe,"STRONG",{});var AAt=s(O7e);fSr=r(AAt,"electra"),AAt.forEach(t),mSr=r(EIe," \u2014 "),PY=n(EIe,"A",{href:!0});var yAt=s(PY);gSr=r(yAt,"FlaxElectraForMaskedLM"),yAt.forEach(t),hSr=r(EIe," (ELECTRA model)"),EIe.forEach(t),pSr=i(Ie),SC=n(Ie,"LI",{});var CIe=s(SC);V7e=n(CIe,"STRONG",{});var LAt=s(V7e);uSr=r(LAt,"mbart"),LAt.forEach(t),_Sr=r(CIe," \u2014 "),BY=n(CIe,"A",{href:!0});var xAt=s(BY);bSr=r(xAt,"FlaxMBartForConditionalGeneration"),xAt.forEach(t),vSr=r(CIe," (mBART model)"),CIe.forEach(t),FSr=i(Ie),RC=n(Ie,"LI",{});var wIe=s(RC);X7e=n(wIe,"STRONG",{});var $At=s(X7e);TSr=r($At,"roberta"),$At.forEach(t),MSr=r(wIe," \u2014 "),IY=n(wIe,"A",{href:!0});var kAt=s(IY);ESr=r(kAt,"FlaxRobertaForMaskedLM"),kAt.forEach(t),CSr=r(wIe," (RoBERTa model)"),wIe.forEach(t),wSr=i(Ie),PC=n(Ie,"LI",{});var AIe=s(PC);z7e=n(AIe,"STRONG",{});var SAt=s(z7e);ASr=r(SAt,"roformer"),SAt.forEach(t),ySr=r(AIe," \u2014 "),qY=n(AIe,"A",{href:!0});var RAt=s(qY);LSr=r(RAt,"FlaxRoFormerForMaskedLM"),RAt.forEach(t),xSr=r(AIe," (RoFormer model)"),AIe.forEach(t),$Sr=i(Ie),BC=n(Ie,"LI",{});var yIe=s(BC);W7e=n(yIe,"STRONG",{});var PAt=s(W7e);kSr=r(PAt,"xlm-roberta"),PAt.forEach(t),SSr=r(yIe," \u2014 "),NY=n(yIe,"A",{href:!0});var BAt=s(NY);RSr=r(BAt,"FlaxXLMRobertaForMaskedLM"),BAt.forEach(t),PSr=r(yIe," (XLM-RoBERTa model)"),yIe.forEach(t),Ie.forEach(t),BSr=i(ei),T(IC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),mje=i(f),Jc=n(f,"H2",{class:!0});var TGe=s(Jc);qC=n(TGe,"A",{id:!0,class:!0,href:!0});var IAt=s(qC);Q7e=n(IAt,"SPAN",{});var qAt=s(Q7e);T(Ux.$$.fragment,qAt),qAt.forEach(t),IAt.forEach(t),ISr=i(TGe),H7e=n(TGe,"SPAN",{});var NAt=s(H7e);qSr=r(NAt,"FlaxAutoModelForSeq2SeqLM"),NAt.forEach(t),TGe.forEach(t),gje=i(f),_r=n(f,"DIV",{class:!0});var oi=s(_r);T(Jx.$$.fragment,oi),NSr=i(oi),Yc=n(oi,"P",{});var Iee=s(Yc);jSr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=n(Iee,"A",{href:!0});var jAt=s(jY);DSr=r(jAt,"from_pretrained()"),jAt.forEach(t),GSr=r(Iee," class method or the "),DY=n(Iee,"A",{href:!0});var DAt=s(DY);OSr=r(DAt,"from_config()"),DAt.forEach(t),VSr=r(Iee,` class
method.`),Iee.forEach(t),XSr=i(oi),Yx=n(oi,"P",{});var MGe=s(Yx);zSr=r(MGe,"This class cannot be instantiated directly using "),U7e=n(MGe,"CODE",{});var GAt=s(U7e);WSr=r(GAt,"__init__()"),GAt.forEach(t),QSr=r(MGe," (throws an error)."),MGe.forEach(t),HSr=i(oi),Ht=n(oi,"DIV",{class:!0});var sA=s(Ht);T(Kx.$$.fragment,sA),USr=i(sA),J7e=n(sA,"P",{});var OAt=s(J7e);JSr=r(OAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OAt.forEach(t),YSr=i(sA),Kc=n(sA,"P",{});var qee=s(Kc);KSr=r(qee,`Note:
Loading a model from its configuration file does `),Y7e=n(qee,"STRONG",{});var VAt=s(Y7e);ZSr=r(VAt,"not"),VAt.forEach(t),eRr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(qee,"A",{href:!0});var XAt=s(GY);oRr=r(XAt,"from_pretrained()"),XAt.forEach(t),rRr=r(qee," to load the model weights."),qee.forEach(t),tRr=i(sA),T(NC.$$.fragment,sA),sA.forEach(t),aRr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(Zx.$$.fragment,ri),nRr=i(ri),K7e=n(ri,"P",{});var zAt=s(K7e);sRr=r(zAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zAt.forEach(t),lRr=i(ri),En=n(ri,"P",{});var lA=s(En);iRr=r(lA,"The model class to instantiate is selected based on the "),Z7e=n(lA,"CODE",{});var WAt=s(Z7e);dRr=r(WAt,"model_type"),WAt.forEach(t),cRr=r(lA,` property of the config object (either
passed as an argument or loaded from `),eMe=n(lA,"CODE",{});var QAt=s(eMe);fRr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),mRr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=n(lA,"CODE",{});var HAt=s(oMe);gRr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),hRr=r(lA,":"),lA.forEach(t),pRr=i(ri),Pe=n(ri,"UL",{});var ze=s(Pe);jC=n(ze,"LI",{});var LIe=s(jC);rMe=n(LIe,"STRONG",{});var UAt=s(rMe);uRr=r(UAt,"bart"),UAt.forEach(t),_Rr=r(LIe," \u2014 "),OY=n(LIe,"A",{href:!0});var JAt=s(OY);bRr=r(JAt,"FlaxBartForConditionalGeneration"),JAt.forEach(t),vRr=r(LIe," (BART model)"),LIe.forEach(t),FRr=i(ze),DC=n(ze,"LI",{});var xIe=s(DC);tMe=n(xIe,"STRONG",{});var YAt=s(tMe);TRr=r(YAt,"blenderbot"),YAt.forEach(t),MRr=r(xIe," \u2014 "),VY=n(xIe,"A",{href:!0});var KAt=s(VY);ERr=r(KAt,"FlaxBlenderbotForConditionalGeneration"),KAt.forEach(t),CRr=r(xIe," (Blenderbot model)"),xIe.forEach(t),wRr=i(ze),GC=n(ze,"LI",{});var $Ie=s(GC);aMe=n($Ie,"STRONG",{});var ZAt=s(aMe);ARr=r(ZAt,"blenderbot-small"),ZAt.forEach(t),yRr=r($Ie," \u2014 "),XY=n($Ie,"A",{href:!0});var e0t=s(XY);LRr=r(e0t,"FlaxBlenderbotSmallForConditionalGeneration"),e0t.forEach(t),xRr=r($Ie," (BlenderbotSmall model)"),$Ie.forEach(t),$Rr=i(ze),OC=n(ze,"LI",{});var kIe=s(OC);nMe=n(kIe,"STRONG",{});var o0t=s(nMe);kRr=r(o0t,"encoder-decoder"),o0t.forEach(t),SRr=r(kIe," \u2014 "),zY=n(kIe,"A",{href:!0});var r0t=s(zY);RRr=r(r0t,"FlaxEncoderDecoderModel"),r0t.forEach(t),PRr=r(kIe," (Encoder decoder model)"),kIe.forEach(t),BRr=i(ze),VC=n(ze,"LI",{});var SIe=s(VC);sMe=n(SIe,"STRONG",{});var t0t=s(sMe);IRr=r(t0t,"marian"),t0t.forEach(t),qRr=r(SIe," \u2014 "),WY=n(SIe,"A",{href:!0});var a0t=s(WY);NRr=r(a0t,"FlaxMarianMTModel"),a0t.forEach(t),jRr=r(SIe," (Marian model)"),SIe.forEach(t),DRr=i(ze),XC=n(ze,"LI",{});var RIe=s(XC);lMe=n(RIe,"STRONG",{});var n0t=s(lMe);GRr=r(n0t,"mbart"),n0t.forEach(t),ORr=r(RIe," \u2014 "),QY=n(RIe,"A",{href:!0});var s0t=s(QY);VRr=r(s0t,"FlaxMBartForConditionalGeneration"),s0t.forEach(t),XRr=r(RIe," (mBART model)"),RIe.forEach(t),zRr=i(ze),zC=n(ze,"LI",{});var PIe=s(zC);iMe=n(PIe,"STRONG",{});var l0t=s(iMe);WRr=r(l0t,"mt5"),l0t.forEach(t),QRr=r(PIe," \u2014 "),HY=n(PIe,"A",{href:!0});var i0t=s(HY);HRr=r(i0t,"FlaxMT5ForConditionalGeneration"),i0t.forEach(t),URr=r(PIe," (mT5 model)"),PIe.forEach(t),JRr=i(ze),WC=n(ze,"LI",{});var BIe=s(WC);dMe=n(BIe,"STRONG",{});var d0t=s(dMe);YRr=r(d0t,"pegasus"),d0t.forEach(t),KRr=r(BIe," \u2014 "),UY=n(BIe,"A",{href:!0});var c0t=s(UY);ZRr=r(c0t,"FlaxPegasusForConditionalGeneration"),c0t.forEach(t),ePr=r(BIe," (Pegasus model)"),BIe.forEach(t),oPr=i(ze),QC=n(ze,"LI",{});var IIe=s(QC);cMe=n(IIe,"STRONG",{});var f0t=s(cMe);rPr=r(f0t,"t5"),f0t.forEach(t),tPr=r(IIe," \u2014 "),JY=n(IIe,"A",{href:!0});var m0t=s(JY);aPr=r(m0t,"FlaxT5ForConditionalGeneration"),m0t.forEach(t),nPr=r(IIe," (T5 model)"),IIe.forEach(t),ze.forEach(t),sPr=i(ri),T(HC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),hje=i(f),Zc=n(f,"H2",{class:!0});var EGe=s(Zc);UC=n(EGe,"A",{id:!0,class:!0,href:!0});var g0t=s(UC);fMe=n(g0t,"SPAN",{});var h0t=s(fMe);T(e9.$$.fragment,h0t),h0t.forEach(t),g0t.forEach(t),lPr=i(EGe),mMe=n(EGe,"SPAN",{});var p0t=s(mMe);iPr=r(p0t,"FlaxAutoModelForSequenceClassification"),p0t.forEach(t),EGe.forEach(t),pje=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(o9.$$.fragment,ti),dPr=i(ti),ef=n(ti,"P",{});var Nee=s(ef);cPr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=n(Nee,"A",{href:!0});var u0t=s(YY);fPr=r(u0t,"from_pretrained()"),u0t.forEach(t),mPr=r(Nee," class method or the "),KY=n(Nee,"A",{href:!0});var _0t=s(KY);gPr=r(_0t,"from_config()"),_0t.forEach(t),hPr=r(Nee,` class
method.`),Nee.forEach(t),pPr=i(ti),r9=n(ti,"P",{});var CGe=s(r9);uPr=r(CGe,"This class cannot be instantiated directly using "),gMe=n(CGe,"CODE",{});var b0t=s(gMe);_Pr=r(b0t,"__init__()"),b0t.forEach(t),bPr=r(CGe," (throws an error)."),CGe.forEach(t),vPr=i(ti),Ut=n(ti,"DIV",{class:!0});var iA=s(Ut);T(t9.$$.fragment,iA),FPr=i(iA),hMe=n(iA,"P",{});var v0t=s(hMe);TPr=r(v0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v0t.forEach(t),MPr=i(iA),of=n(iA,"P",{});var jee=s(of);EPr=r(jee,`Note:
Loading a model from its configuration file does `),pMe=n(jee,"STRONG",{});var F0t=s(pMe);CPr=r(F0t,"not"),F0t.forEach(t),wPr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(jee,"A",{href:!0});var T0t=s(ZY);APr=r(T0t,"from_pretrained()"),T0t.forEach(t),yPr=r(jee," to load the model weights."),jee.forEach(t),LPr=i(iA),T(JC.$$.fragment,iA),iA.forEach(t),xPr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(a9.$$.fragment,ai),$Pr=i(ai),uMe=n(ai,"P",{});var M0t=s(uMe);kPr=r(M0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M0t.forEach(t),SPr=i(ai),Cn=n(ai,"P",{});var dA=s(Cn);RPr=r(dA,"The model class to instantiate is selected based on the "),_Me=n(dA,"CODE",{});var E0t=s(_Me);PPr=r(E0t,"model_type"),E0t.forEach(t),BPr=r(dA,` property of the config object (either
passed as an argument or loaded from `),bMe=n(dA,"CODE",{});var C0t=s(bMe);IPr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),qPr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(dA,"CODE",{});var w0t=s(vMe);NPr=r(w0t,"pretrained_model_name_or_path"),w0t.forEach(t),jPr=r(dA,":"),dA.forEach(t),DPr=i(ai),xe=n(ai,"UL",{});var qe=s(xe);YC=n(qe,"LI",{});var qIe=s(YC);FMe=n(qIe,"STRONG",{});var A0t=s(FMe);GPr=r(A0t,"albert"),A0t.forEach(t),OPr=r(qIe," \u2014 "),eK=n(qIe,"A",{href:!0});var y0t=s(eK);VPr=r(y0t,"FlaxAlbertForSequenceClassification"),y0t.forEach(t),XPr=r(qIe," (ALBERT model)"),qIe.forEach(t),zPr=i(qe),KC=n(qe,"LI",{});var NIe=s(KC);TMe=n(NIe,"STRONG",{});var L0t=s(TMe);WPr=r(L0t,"bart"),L0t.forEach(t),QPr=r(NIe," \u2014 "),oK=n(NIe,"A",{href:!0});var x0t=s(oK);HPr=r(x0t,"FlaxBartForSequenceClassification"),x0t.forEach(t),UPr=r(NIe," (BART model)"),NIe.forEach(t),JPr=i(qe),ZC=n(qe,"LI",{});var jIe=s(ZC);MMe=n(jIe,"STRONG",{});var $0t=s(MMe);YPr=r($0t,"bert"),$0t.forEach(t),KPr=r(jIe," \u2014 "),rK=n(jIe,"A",{href:!0});var k0t=s(rK);ZPr=r(k0t,"FlaxBertForSequenceClassification"),k0t.forEach(t),eBr=r(jIe," (BERT model)"),jIe.forEach(t),oBr=i(qe),e5=n(qe,"LI",{});var DIe=s(e5);EMe=n(DIe,"STRONG",{});var S0t=s(EMe);rBr=r(S0t,"big_bird"),S0t.forEach(t),tBr=r(DIe," \u2014 "),tK=n(DIe,"A",{href:!0});var R0t=s(tK);aBr=r(R0t,"FlaxBigBirdForSequenceClassification"),R0t.forEach(t),nBr=r(DIe," (BigBird model)"),DIe.forEach(t),sBr=i(qe),o5=n(qe,"LI",{});var GIe=s(o5);CMe=n(GIe,"STRONG",{});var P0t=s(CMe);lBr=r(P0t,"distilbert"),P0t.forEach(t),iBr=r(GIe," \u2014 "),aK=n(GIe,"A",{href:!0});var B0t=s(aK);dBr=r(B0t,"FlaxDistilBertForSequenceClassification"),B0t.forEach(t),cBr=r(GIe," (DistilBERT model)"),GIe.forEach(t),fBr=i(qe),r5=n(qe,"LI",{});var OIe=s(r5);wMe=n(OIe,"STRONG",{});var I0t=s(wMe);mBr=r(I0t,"electra"),I0t.forEach(t),gBr=r(OIe," \u2014 "),nK=n(OIe,"A",{href:!0});var q0t=s(nK);hBr=r(q0t,"FlaxElectraForSequenceClassification"),q0t.forEach(t),pBr=r(OIe," (ELECTRA model)"),OIe.forEach(t),uBr=i(qe),t5=n(qe,"LI",{});var VIe=s(t5);AMe=n(VIe,"STRONG",{});var N0t=s(AMe);_Br=r(N0t,"mbart"),N0t.forEach(t),bBr=r(VIe," \u2014 "),sK=n(VIe,"A",{href:!0});var j0t=s(sK);vBr=r(j0t,"FlaxMBartForSequenceClassification"),j0t.forEach(t),FBr=r(VIe," (mBART model)"),VIe.forEach(t),TBr=i(qe),a5=n(qe,"LI",{});var XIe=s(a5);yMe=n(XIe,"STRONG",{});var D0t=s(yMe);MBr=r(D0t,"roberta"),D0t.forEach(t),EBr=r(XIe," \u2014 "),lK=n(XIe,"A",{href:!0});var G0t=s(lK);CBr=r(G0t,"FlaxRobertaForSequenceClassification"),G0t.forEach(t),wBr=r(XIe," (RoBERTa model)"),XIe.forEach(t),ABr=i(qe),n5=n(qe,"LI",{});var zIe=s(n5);LMe=n(zIe,"STRONG",{});var O0t=s(LMe);yBr=r(O0t,"roformer"),O0t.forEach(t),LBr=r(zIe," \u2014 "),iK=n(zIe,"A",{href:!0});var V0t=s(iK);xBr=r(V0t,"FlaxRoFormerForSequenceClassification"),V0t.forEach(t),$Br=r(zIe," (RoFormer model)"),zIe.forEach(t),kBr=i(qe),s5=n(qe,"LI",{});var WIe=s(s5);xMe=n(WIe,"STRONG",{});var X0t=s(xMe);SBr=r(X0t,"xlm-roberta"),X0t.forEach(t),RBr=r(WIe," \u2014 "),dK=n(WIe,"A",{href:!0});var z0t=s(dK);PBr=r(z0t,"FlaxXLMRobertaForSequenceClassification"),z0t.forEach(t),BBr=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),qe.forEach(t),IBr=i(ai),T(l5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),uje=i(f),rf=n(f,"H2",{class:!0});var wGe=s(rf);i5=n(wGe,"A",{id:!0,class:!0,href:!0});var W0t=s(i5);$Me=n(W0t,"SPAN",{});var Q0t=s($Me);T(n9.$$.fragment,Q0t),Q0t.forEach(t),W0t.forEach(t),qBr=i(wGe),kMe=n(wGe,"SPAN",{});var H0t=s(kMe);NBr=r(H0t,"FlaxAutoModelForQuestionAnswering"),H0t.forEach(t),wGe.forEach(t),_je=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(s9.$$.fragment,ni),jBr=i(ni),tf=n(ni,"P",{});var Dee=s(tf);DBr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=n(Dee,"A",{href:!0});var U0t=s(cK);GBr=r(U0t,"from_pretrained()"),U0t.forEach(t),OBr=r(Dee," class method or the "),fK=n(Dee,"A",{href:!0});var J0t=s(fK);VBr=r(J0t,"from_config()"),J0t.forEach(t),XBr=r(Dee,` class
method.`),Dee.forEach(t),zBr=i(ni),l9=n(ni,"P",{});var AGe=s(l9);WBr=r(AGe,"This class cannot be instantiated directly using "),SMe=n(AGe,"CODE",{});var Y0t=s(SMe);QBr=r(Y0t,"__init__()"),Y0t.forEach(t),HBr=r(AGe," (throws an error)."),AGe.forEach(t),UBr=i(ni),Jt=n(ni,"DIV",{class:!0});var cA=s(Jt);T(i9.$$.fragment,cA),JBr=i(cA),RMe=n(cA,"P",{});var K0t=s(RMe);YBr=r(K0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K0t.forEach(t),KBr=i(cA),af=n(cA,"P",{});var Gee=s(af);ZBr=r(Gee,`Note:
Loading a model from its configuration file does `),PMe=n(Gee,"STRONG",{});var Z0t=s(PMe);eIr=r(Z0t,"not"),Z0t.forEach(t),oIr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(Gee,"A",{href:!0});var eyt=s(mK);rIr=r(eyt,"from_pretrained()"),eyt.forEach(t),tIr=r(Gee," to load the model weights."),Gee.forEach(t),aIr=i(cA),T(d5.$$.fragment,cA),cA.forEach(t),nIr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(d9.$$.fragment,si),sIr=i(si),BMe=n(si,"P",{});var oyt=s(BMe);lIr=r(oyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oyt.forEach(t),iIr=i(si),wn=n(si,"P",{});var fA=s(wn);dIr=r(fA,"The model class to instantiate is selected based on the "),IMe=n(fA,"CODE",{});var ryt=s(IMe);cIr=r(ryt,"model_type"),ryt.forEach(t),fIr=r(fA,` property of the config object (either
passed as an argument or loaded from `),qMe=n(fA,"CODE",{});var tyt=s(qMe);mIr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),gIr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(fA,"CODE",{});var ayt=s(NMe);hIr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),pIr=r(fA,":"),fA.forEach(t),uIr=i(si),$e=n(si,"UL",{});var Ne=s($e);c5=n(Ne,"LI",{});var QIe=s(c5);jMe=n(QIe,"STRONG",{});var nyt=s(jMe);_Ir=r(nyt,"albert"),nyt.forEach(t),bIr=r(QIe," \u2014 "),gK=n(QIe,"A",{href:!0});var syt=s(gK);vIr=r(syt,"FlaxAlbertForQuestionAnswering"),syt.forEach(t),FIr=r(QIe," (ALBERT model)"),QIe.forEach(t),TIr=i(Ne),f5=n(Ne,"LI",{});var HIe=s(f5);DMe=n(HIe,"STRONG",{});var lyt=s(DMe);MIr=r(lyt,"bart"),lyt.forEach(t),EIr=r(HIe," \u2014 "),hK=n(HIe,"A",{href:!0});var iyt=s(hK);CIr=r(iyt,"FlaxBartForQuestionAnswering"),iyt.forEach(t),wIr=r(HIe," (BART model)"),HIe.forEach(t),AIr=i(Ne),m5=n(Ne,"LI",{});var UIe=s(m5);GMe=n(UIe,"STRONG",{});var dyt=s(GMe);yIr=r(dyt,"bert"),dyt.forEach(t),LIr=r(UIe," \u2014 "),pK=n(UIe,"A",{href:!0});var cyt=s(pK);xIr=r(cyt,"FlaxBertForQuestionAnswering"),cyt.forEach(t),$Ir=r(UIe," (BERT model)"),UIe.forEach(t),kIr=i(Ne),g5=n(Ne,"LI",{});var JIe=s(g5);OMe=n(JIe,"STRONG",{});var fyt=s(OMe);SIr=r(fyt,"big_bird"),fyt.forEach(t),RIr=r(JIe," \u2014 "),uK=n(JIe,"A",{href:!0});var myt=s(uK);PIr=r(myt,"FlaxBigBirdForQuestionAnswering"),myt.forEach(t),BIr=r(JIe," (BigBird model)"),JIe.forEach(t),IIr=i(Ne),h5=n(Ne,"LI",{});var YIe=s(h5);VMe=n(YIe,"STRONG",{});var gyt=s(VMe);qIr=r(gyt,"distilbert"),gyt.forEach(t),NIr=r(YIe," \u2014 "),_K=n(YIe,"A",{href:!0});var hyt=s(_K);jIr=r(hyt,"FlaxDistilBertForQuestionAnswering"),hyt.forEach(t),DIr=r(YIe," (DistilBERT model)"),YIe.forEach(t),GIr=i(Ne),p5=n(Ne,"LI",{});var KIe=s(p5);XMe=n(KIe,"STRONG",{});var pyt=s(XMe);OIr=r(pyt,"electra"),pyt.forEach(t),VIr=r(KIe," \u2014 "),bK=n(KIe,"A",{href:!0});var uyt=s(bK);XIr=r(uyt,"FlaxElectraForQuestionAnswering"),uyt.forEach(t),zIr=r(KIe," (ELECTRA model)"),KIe.forEach(t),WIr=i(Ne),u5=n(Ne,"LI",{});var ZIe=s(u5);zMe=n(ZIe,"STRONG",{});var _yt=s(zMe);QIr=r(_yt,"mbart"),_yt.forEach(t),HIr=r(ZIe," \u2014 "),vK=n(ZIe,"A",{href:!0});var byt=s(vK);UIr=r(byt,"FlaxMBartForQuestionAnswering"),byt.forEach(t),JIr=r(ZIe," (mBART model)"),ZIe.forEach(t),YIr=i(Ne),_5=n(Ne,"LI",{});var eqe=s(_5);WMe=n(eqe,"STRONG",{});var vyt=s(WMe);KIr=r(vyt,"roberta"),vyt.forEach(t),ZIr=r(eqe," \u2014 "),FK=n(eqe,"A",{href:!0});var Fyt=s(FK);eqr=r(Fyt,"FlaxRobertaForQuestionAnswering"),Fyt.forEach(t),oqr=r(eqe," (RoBERTa model)"),eqe.forEach(t),rqr=i(Ne),b5=n(Ne,"LI",{});var oqe=s(b5);QMe=n(oqe,"STRONG",{});var Tyt=s(QMe);tqr=r(Tyt,"roformer"),Tyt.forEach(t),aqr=r(oqe," \u2014 "),TK=n(oqe,"A",{href:!0});var Myt=s(TK);nqr=r(Myt,"FlaxRoFormerForQuestionAnswering"),Myt.forEach(t),sqr=r(oqe," (RoFormer model)"),oqe.forEach(t),lqr=i(Ne),v5=n(Ne,"LI",{});var rqe=s(v5);HMe=n(rqe,"STRONG",{});var Eyt=s(HMe);iqr=r(Eyt,"xlm-roberta"),Eyt.forEach(t),dqr=r(rqe," \u2014 "),MK=n(rqe,"A",{href:!0});var Cyt=s(MK);cqr=r(Cyt,"FlaxXLMRobertaForQuestionAnswering"),Cyt.forEach(t),fqr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),Ne.forEach(t),mqr=i(si),T(F5.$$.fragment,si),si.forEach(t),ni.forEach(t),bje=i(f),nf=n(f,"H2",{class:!0});var yGe=s(nf);T5=n(yGe,"A",{id:!0,class:!0,href:!0});var wyt=s(T5);UMe=n(wyt,"SPAN",{});var Ayt=s(UMe);T(c9.$$.fragment,Ayt),Ayt.forEach(t),wyt.forEach(t),gqr=i(yGe),JMe=n(yGe,"SPAN",{});var yyt=s(JMe);hqr=r(yyt,"FlaxAutoModelForTokenClassification"),yyt.forEach(t),yGe.forEach(t),vje=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(f9.$$.fragment,li),pqr=i(li),sf=n(li,"P",{});var Oee=s(sf);uqr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=n(Oee,"A",{href:!0});var Lyt=s(EK);_qr=r(Lyt,"from_pretrained()"),Lyt.forEach(t),bqr=r(Oee," class method or the "),CK=n(Oee,"A",{href:!0});var xyt=s(CK);vqr=r(xyt,"from_config()"),xyt.forEach(t),Fqr=r(Oee,` class
method.`),Oee.forEach(t),Tqr=i(li),m9=n(li,"P",{});var LGe=s(m9);Mqr=r(LGe,"This class cannot be instantiated directly using "),YMe=n(LGe,"CODE",{});var $yt=s(YMe);Eqr=r($yt,"__init__()"),$yt.forEach(t),Cqr=r(LGe," (throws an error)."),LGe.forEach(t),wqr=i(li),Yt=n(li,"DIV",{class:!0});var mA=s(Yt);T(g9.$$.fragment,mA),Aqr=i(mA),KMe=n(mA,"P",{});var kyt=s(KMe);yqr=r(kyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kyt.forEach(t),Lqr=i(mA),lf=n(mA,"P",{});var Vee=s(lf);xqr=r(Vee,`Note:
Loading a model from its configuration file does `),ZMe=n(Vee,"STRONG",{});var Syt=s(ZMe);$qr=r(Syt,"not"),Syt.forEach(t),kqr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Vee,"A",{href:!0});var Ryt=s(wK);Sqr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),Rqr=r(Vee," to load the model weights."),Vee.forEach(t),Pqr=i(mA),T(M5.$$.fragment,mA),mA.forEach(t),Bqr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(h9.$$.fragment,ii),Iqr=i(ii),e4e=n(ii,"P",{});var Pyt=s(e4e);qqr=r(Pyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pyt.forEach(t),Nqr=i(ii),An=n(ii,"P",{});var gA=s(An);jqr=r(gA,"The model class to instantiate is selected based on the "),o4e=n(gA,"CODE",{});var Byt=s(o4e);Dqr=r(Byt,"model_type"),Byt.forEach(t),Gqr=r(gA,` property of the config object (either
passed as an argument or loaded from `),r4e=n(gA,"CODE",{});var Iyt=s(r4e);Oqr=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),Vqr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(gA,"CODE",{});var qyt=s(t4e);Xqr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),zqr=r(gA,":"),gA.forEach(t),Wqr=i(ii),De=n(ii,"UL",{});var To=s(De);E5=n(To,"LI",{});var tqe=s(E5);a4e=n(tqe,"STRONG",{});var Nyt=s(a4e);Qqr=r(Nyt,"albert"),Nyt.forEach(t),Hqr=r(tqe," \u2014 "),AK=n(tqe,"A",{href:!0});var jyt=s(AK);Uqr=r(jyt,"FlaxAlbertForTokenClassification"),jyt.forEach(t),Jqr=r(tqe," (ALBERT model)"),tqe.forEach(t),Yqr=i(To),C5=n(To,"LI",{});var aqe=s(C5);n4e=n(aqe,"STRONG",{});var Dyt=s(n4e);Kqr=r(Dyt,"bert"),Dyt.forEach(t),Zqr=r(aqe," \u2014 "),yK=n(aqe,"A",{href:!0});var Gyt=s(yK);eNr=r(Gyt,"FlaxBertForTokenClassification"),Gyt.forEach(t),oNr=r(aqe," (BERT model)"),aqe.forEach(t),rNr=i(To),w5=n(To,"LI",{});var nqe=s(w5);s4e=n(nqe,"STRONG",{});var Oyt=s(s4e);tNr=r(Oyt,"big_bird"),Oyt.forEach(t),aNr=r(nqe," \u2014 "),LK=n(nqe,"A",{href:!0});var Vyt=s(LK);nNr=r(Vyt,"FlaxBigBirdForTokenClassification"),Vyt.forEach(t),sNr=r(nqe," (BigBird model)"),nqe.forEach(t),lNr=i(To),A5=n(To,"LI",{});var sqe=s(A5);l4e=n(sqe,"STRONG",{});var Xyt=s(l4e);iNr=r(Xyt,"distilbert"),Xyt.forEach(t),dNr=r(sqe," \u2014 "),xK=n(sqe,"A",{href:!0});var zyt=s(xK);cNr=r(zyt,"FlaxDistilBertForTokenClassification"),zyt.forEach(t),fNr=r(sqe," (DistilBERT model)"),sqe.forEach(t),mNr=i(To),y5=n(To,"LI",{});var lqe=s(y5);i4e=n(lqe,"STRONG",{});var Wyt=s(i4e);gNr=r(Wyt,"electra"),Wyt.forEach(t),hNr=r(lqe," \u2014 "),$K=n(lqe,"A",{href:!0});var Qyt=s($K);pNr=r(Qyt,"FlaxElectraForTokenClassification"),Qyt.forEach(t),uNr=r(lqe," (ELECTRA model)"),lqe.forEach(t),_Nr=i(To),L5=n(To,"LI",{});var iqe=s(L5);d4e=n(iqe,"STRONG",{});var Hyt=s(d4e);bNr=r(Hyt,"roberta"),Hyt.forEach(t),vNr=r(iqe," \u2014 "),kK=n(iqe,"A",{href:!0});var Uyt=s(kK);FNr=r(Uyt,"FlaxRobertaForTokenClassification"),Uyt.forEach(t),TNr=r(iqe," (RoBERTa model)"),iqe.forEach(t),MNr=i(To),x5=n(To,"LI",{});var dqe=s(x5);c4e=n(dqe,"STRONG",{});var Jyt=s(c4e);ENr=r(Jyt,"roformer"),Jyt.forEach(t),CNr=r(dqe," \u2014 "),SK=n(dqe,"A",{href:!0});var Yyt=s(SK);wNr=r(Yyt,"FlaxRoFormerForTokenClassification"),Yyt.forEach(t),ANr=r(dqe," (RoFormer model)"),dqe.forEach(t),yNr=i(To),$5=n(To,"LI",{});var cqe=s($5);f4e=n(cqe,"STRONG",{});var Kyt=s(f4e);LNr=r(Kyt,"xlm-roberta"),Kyt.forEach(t),xNr=r(cqe," \u2014 "),RK=n(cqe,"A",{href:!0});var Zyt=s(RK);$Nr=r(Zyt,"FlaxXLMRobertaForTokenClassification"),Zyt.forEach(t),kNr=r(cqe," (XLM-RoBERTa model)"),cqe.forEach(t),To.forEach(t),SNr=i(ii),T(k5.$$.fragment,ii),ii.forEach(t),li.forEach(t),Fje=i(f),df=n(f,"H2",{class:!0});var xGe=s(df);S5=n(xGe,"A",{id:!0,class:!0,href:!0});var eLt=s(S5);m4e=n(eLt,"SPAN",{});var oLt=s(m4e);T(p9.$$.fragment,oLt),oLt.forEach(t),eLt.forEach(t),RNr=i(xGe),g4e=n(xGe,"SPAN",{});var rLt=s(g4e);PNr=r(rLt,"FlaxAutoModelForMultipleChoice"),rLt.forEach(t),xGe.forEach(t),Tje=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(u9.$$.fragment,di),BNr=i(di),cf=n(di,"P",{});var Xee=s(cf);INr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=n(Xee,"A",{href:!0});var tLt=s(PK);qNr=r(tLt,"from_pretrained()"),tLt.forEach(t),NNr=r(Xee," class method or the "),BK=n(Xee,"A",{href:!0});var aLt=s(BK);jNr=r(aLt,"from_config()"),aLt.forEach(t),DNr=r(Xee,` class
method.`),Xee.forEach(t),GNr=i(di),_9=n(di,"P",{});var $Ge=s(_9);ONr=r($Ge,"This class cannot be instantiated directly using "),h4e=n($Ge,"CODE",{});var nLt=s(h4e);VNr=r(nLt,"__init__()"),nLt.forEach(t),XNr=r($Ge," (throws an error)."),$Ge.forEach(t),zNr=i(di),Kt=n(di,"DIV",{class:!0});var hA=s(Kt);T(b9.$$.fragment,hA),WNr=i(hA),p4e=n(hA,"P",{});var sLt=s(p4e);QNr=r(sLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sLt.forEach(t),HNr=i(hA),ff=n(hA,"P",{});var zee=s(ff);UNr=r(zee,`Note:
Loading a model from its configuration file does `),u4e=n(zee,"STRONG",{});var lLt=s(u4e);JNr=r(lLt,"not"),lLt.forEach(t),YNr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(zee,"A",{href:!0});var iLt=s(IK);KNr=r(iLt,"from_pretrained()"),iLt.forEach(t),ZNr=r(zee," to load the model weights."),zee.forEach(t),ejr=i(hA),T(R5.$$.fragment,hA),hA.forEach(t),ojr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(v9.$$.fragment,ci),rjr=i(ci),_4e=n(ci,"P",{});var dLt=s(_4e);tjr=r(dLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dLt.forEach(t),ajr=i(ci),yn=n(ci,"P",{});var pA=s(yn);njr=r(pA,"The model class to instantiate is selected based on the "),b4e=n(pA,"CODE",{});var cLt=s(b4e);sjr=r(cLt,"model_type"),cLt.forEach(t),ljr=r(pA,` property of the config object (either
passed as an argument or loaded from `),v4e=n(pA,"CODE",{});var fLt=s(v4e);ijr=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),djr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(pA,"CODE",{});var mLt=s(F4e);cjr=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),fjr=r(pA,":"),pA.forEach(t),mjr=i(ci),Ge=n(ci,"UL",{});var Mo=s(Ge);P5=n(Mo,"LI",{});var fqe=s(P5);T4e=n(fqe,"STRONG",{});var gLt=s(T4e);gjr=r(gLt,"albert"),gLt.forEach(t),hjr=r(fqe," \u2014 "),qK=n(fqe,"A",{href:!0});var hLt=s(qK);pjr=r(hLt,"FlaxAlbertForMultipleChoice"),hLt.forEach(t),ujr=r(fqe," (ALBERT model)"),fqe.forEach(t),_jr=i(Mo),B5=n(Mo,"LI",{});var mqe=s(B5);M4e=n(mqe,"STRONG",{});var pLt=s(M4e);bjr=r(pLt,"bert"),pLt.forEach(t),vjr=r(mqe," \u2014 "),NK=n(mqe,"A",{href:!0});var uLt=s(NK);Fjr=r(uLt,"FlaxBertForMultipleChoice"),uLt.forEach(t),Tjr=r(mqe," (BERT model)"),mqe.forEach(t),Mjr=i(Mo),I5=n(Mo,"LI",{});var gqe=s(I5);E4e=n(gqe,"STRONG",{});var _Lt=s(E4e);Ejr=r(_Lt,"big_bird"),_Lt.forEach(t),Cjr=r(gqe," \u2014 "),jK=n(gqe,"A",{href:!0});var bLt=s(jK);wjr=r(bLt,"FlaxBigBirdForMultipleChoice"),bLt.forEach(t),Ajr=r(gqe," (BigBird model)"),gqe.forEach(t),yjr=i(Mo),q5=n(Mo,"LI",{});var hqe=s(q5);C4e=n(hqe,"STRONG",{});var vLt=s(C4e);Ljr=r(vLt,"distilbert"),vLt.forEach(t),xjr=r(hqe," \u2014 "),DK=n(hqe,"A",{href:!0});var FLt=s(DK);$jr=r(FLt,"FlaxDistilBertForMultipleChoice"),FLt.forEach(t),kjr=r(hqe," (DistilBERT model)"),hqe.forEach(t),Sjr=i(Mo),N5=n(Mo,"LI",{});var pqe=s(N5);w4e=n(pqe,"STRONG",{});var TLt=s(w4e);Rjr=r(TLt,"electra"),TLt.forEach(t),Pjr=r(pqe," \u2014 "),GK=n(pqe,"A",{href:!0});var MLt=s(GK);Bjr=r(MLt,"FlaxElectraForMultipleChoice"),MLt.forEach(t),Ijr=r(pqe," (ELECTRA model)"),pqe.forEach(t),qjr=i(Mo),j5=n(Mo,"LI",{});var uqe=s(j5);A4e=n(uqe,"STRONG",{});var ELt=s(A4e);Njr=r(ELt,"roberta"),ELt.forEach(t),jjr=r(uqe," \u2014 "),OK=n(uqe,"A",{href:!0});var CLt=s(OK);Djr=r(CLt,"FlaxRobertaForMultipleChoice"),CLt.forEach(t),Gjr=r(uqe," (RoBERTa model)"),uqe.forEach(t),Ojr=i(Mo),D5=n(Mo,"LI",{});var _qe=s(D5);y4e=n(_qe,"STRONG",{});var wLt=s(y4e);Vjr=r(wLt,"roformer"),wLt.forEach(t),Xjr=r(_qe," \u2014 "),VK=n(_qe,"A",{href:!0});var ALt=s(VK);zjr=r(ALt,"FlaxRoFormerForMultipleChoice"),ALt.forEach(t),Wjr=r(_qe," (RoFormer model)"),_qe.forEach(t),Qjr=i(Mo),G5=n(Mo,"LI",{});var bqe=s(G5);L4e=n(bqe,"STRONG",{});var yLt=s(L4e);Hjr=r(yLt,"xlm-roberta"),yLt.forEach(t),Ujr=r(bqe," \u2014 "),XK=n(bqe,"A",{href:!0});var LLt=s(XK);Jjr=r(LLt,"FlaxXLMRobertaForMultipleChoice"),LLt.forEach(t),Yjr=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),Mo.forEach(t),Kjr=i(ci),T(O5.$$.fragment,ci),ci.forEach(t),di.forEach(t),Mje=i(f),mf=n(f,"H2",{class:!0});var kGe=s(mf);V5=n(kGe,"A",{id:!0,class:!0,href:!0});var xLt=s(V5);x4e=n(xLt,"SPAN",{});var $Lt=s(x4e);T(F9.$$.fragment,$Lt),$Lt.forEach(t),xLt.forEach(t),Zjr=i(kGe),$4e=n(kGe,"SPAN",{});var kLt=s($4e);eDr=r(kLt,"FlaxAutoModelForNextSentencePrediction"),kLt.forEach(t),kGe.forEach(t),Eje=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(T9.$$.fragment,fi),oDr=i(fi),gf=n(fi,"P",{});var Wee=s(gf);rDr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=n(Wee,"A",{href:!0});var SLt=s(zK);tDr=r(SLt,"from_pretrained()"),SLt.forEach(t),aDr=r(Wee," class method or the "),WK=n(Wee,"A",{href:!0});var RLt=s(WK);nDr=r(RLt,"from_config()"),RLt.forEach(t),sDr=r(Wee,` class
method.`),Wee.forEach(t),lDr=i(fi),M9=n(fi,"P",{});var SGe=s(M9);iDr=r(SGe,"This class cannot be instantiated directly using "),k4e=n(SGe,"CODE",{});var PLt=s(k4e);dDr=r(PLt,"__init__()"),PLt.forEach(t),cDr=r(SGe," (throws an error)."),SGe.forEach(t),fDr=i(fi),Zt=n(fi,"DIV",{class:!0});var uA=s(Zt);T(E9.$$.fragment,uA),mDr=i(uA),S4e=n(uA,"P",{});var BLt=s(S4e);gDr=r(BLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BLt.forEach(t),hDr=i(uA),hf=n(uA,"P",{});var Qee=s(hf);pDr=r(Qee,`Note:
Loading a model from its configuration file does `),R4e=n(Qee,"STRONG",{});var ILt=s(R4e);uDr=r(ILt,"not"),ILt.forEach(t),_Dr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Qee,"A",{href:!0});var qLt=s(QK);bDr=r(qLt,"from_pretrained()"),qLt.forEach(t),vDr=r(Qee," to load the model weights."),Qee.forEach(t),FDr=i(uA),T(X5.$$.fragment,uA),uA.forEach(t),TDr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(C9.$$.fragment,mi),MDr=i(mi),P4e=n(mi,"P",{});var NLt=s(P4e);EDr=r(NLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NLt.forEach(t),CDr=i(mi),Ln=n(mi,"P",{});var _A=s(Ln);wDr=r(_A,"The model class to instantiate is selected based on the "),B4e=n(_A,"CODE",{});var jLt=s(B4e);ADr=r(jLt,"model_type"),jLt.forEach(t),yDr=r(_A,` property of the config object (either
passed as an argument or loaded from `),I4e=n(_A,"CODE",{});var DLt=s(I4e);LDr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),xDr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(_A,"CODE",{});var GLt=s(q4e);$Dr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),kDr=r(_A,":"),_A.forEach(t),SDr=i(mi),N4e=n(mi,"UL",{});var OLt=s(N4e);z5=n(OLt,"LI",{});var vqe=s(z5);j4e=n(vqe,"STRONG",{});var VLt=s(j4e);RDr=r(VLt,"bert"),VLt.forEach(t),PDr=r(vqe," \u2014 "),HK=n(vqe,"A",{href:!0});var XLt=s(HK);BDr=r(XLt,"FlaxBertForNextSentencePrediction"),XLt.forEach(t),IDr=r(vqe," (BERT model)"),vqe.forEach(t),OLt.forEach(t),qDr=i(mi),T(W5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Cje=i(f),pf=n(f,"H2",{class:!0});var RGe=s(pf);Q5=n(RGe,"A",{id:!0,class:!0,href:!0});var zLt=s(Q5);D4e=n(zLt,"SPAN",{});var WLt=s(D4e);T(w9.$$.fragment,WLt),WLt.forEach(t),zLt.forEach(t),NDr=i(RGe),G4e=n(RGe,"SPAN",{});var QLt=s(G4e);jDr=r(QLt,"FlaxAutoModelForImageClassification"),QLt.forEach(t),RGe.forEach(t),wje=i(f),Er=n(f,"DIV",{class:!0});var gi=s(Er);T(A9.$$.fragment,gi),DDr=i(gi),uf=n(gi,"P",{});var Hee=s(uf);GDr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=n(Hee,"A",{href:!0});var HLt=s(UK);ODr=r(HLt,"from_pretrained()"),HLt.forEach(t),VDr=r(Hee," class method or the "),JK=n(Hee,"A",{href:!0});var ULt=s(JK);XDr=r(ULt,"from_config()"),ULt.forEach(t),zDr=r(Hee,` class
method.`),Hee.forEach(t),WDr=i(gi),y9=n(gi,"P",{});var PGe=s(y9);QDr=r(PGe,"This class cannot be instantiated directly using "),O4e=n(PGe,"CODE",{});var JLt=s(O4e);HDr=r(JLt,"__init__()"),JLt.forEach(t),UDr=r(PGe," (throws an error)."),PGe.forEach(t),JDr=i(gi),ea=n(gi,"DIV",{class:!0});var bA=s(ea);T(L9.$$.fragment,bA),YDr=i(bA),V4e=n(bA,"P",{});var YLt=s(V4e);KDr=r(YLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YLt.forEach(t),ZDr=i(bA),_f=n(bA,"P",{});var Uee=s(_f);eGr=r(Uee,`Note:
Loading a model from its configuration file does `),X4e=n(Uee,"STRONG",{});var KLt=s(X4e);oGr=r(KLt,"not"),KLt.forEach(t),rGr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(Uee,"A",{href:!0});var ZLt=s(YK);tGr=r(ZLt,"from_pretrained()"),ZLt.forEach(t),aGr=r(Uee," to load the model weights."),Uee.forEach(t),nGr=i(bA),T(H5.$$.fragment,bA),bA.forEach(t),sGr=i(gi),Yr=n(gi,"DIV",{class:!0});var hi=s(Yr);T(x9.$$.fragment,hi),lGr=i(hi),z4e=n(hi,"P",{});var ext=s(z4e);iGr=r(ext,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ext.forEach(t),dGr=i(hi),xn=n(hi,"P",{});var vA=s(xn);cGr=r(vA,"The model class to instantiate is selected based on the "),W4e=n(vA,"CODE",{});var oxt=s(W4e);fGr=r(oxt,"model_type"),oxt.forEach(t),mGr=r(vA,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(vA,"CODE",{});var rxt=s(Q4e);gGr=r(rxt,"pretrained_model_name_or_path"),rxt.forEach(t),hGr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(vA,"CODE",{});var txt=s(H4e);pGr=r(txt,"pretrained_model_name_or_path"),txt.forEach(t),uGr=r(vA,":"),vA.forEach(t),_Gr=i(hi),$9=n(hi,"UL",{});var BGe=s($9);U5=n(BGe,"LI",{});var Fqe=s(U5);U4e=n(Fqe,"STRONG",{});var axt=s(U4e);bGr=r(axt,"beit"),axt.forEach(t),vGr=r(Fqe," \u2014 "),KK=n(Fqe,"A",{href:!0});var nxt=s(KK);FGr=r(nxt,"FlaxBeitForImageClassification"),nxt.forEach(t),TGr=r(Fqe," (BEiT model)"),Fqe.forEach(t),MGr=i(BGe),J5=n(BGe,"LI",{});var Tqe=s(J5);J4e=n(Tqe,"STRONG",{});var sxt=s(J4e);EGr=r(sxt,"vit"),sxt.forEach(t),CGr=r(Tqe," \u2014 "),ZK=n(Tqe,"A",{href:!0});var lxt=s(ZK);wGr=r(lxt,"FlaxViTForImageClassification"),lxt.forEach(t),AGr=r(Tqe," (ViT model)"),Tqe.forEach(t),BGe.forEach(t),yGr=i(hi),T(Y5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Aje=i(f),bf=n(f,"H2",{class:!0});var IGe=s(bf);K5=n(IGe,"A",{id:!0,class:!0,href:!0});var ixt=s(K5);Y4e=n(ixt,"SPAN",{});var dxt=s(Y4e);T(k9.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),LGr=i(IGe),K4e=n(IGe,"SPAN",{});var cxt=s(K4e);xGr=r(cxt,"FlaxAutoModelForVision2Seq"),cxt.forEach(t),IGe.forEach(t),yje=i(f),Cr=n(f,"DIV",{class:!0});var pi=s(Cr);T(S9.$$.fragment,pi),$Gr=i(pi),vf=n(pi,"P",{});var Jee=s(vf);kGr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=n(Jee,"A",{href:!0});var fxt=s(eZ);SGr=r(fxt,"from_pretrained()"),fxt.forEach(t),RGr=r(Jee," class method or the "),oZ=n(Jee,"A",{href:!0});var mxt=s(oZ);PGr=r(mxt,"from_config()"),mxt.forEach(t),BGr=r(Jee,` class
method.`),Jee.forEach(t),IGr=i(pi),R9=n(pi,"P",{});var qGe=s(R9);qGr=r(qGe,"This class cannot be instantiated directly using "),Z4e=n(qGe,"CODE",{});var gxt=s(Z4e);NGr=r(gxt,"__init__()"),gxt.forEach(t),jGr=r(qGe," (throws an error)."),qGe.forEach(t),DGr=i(pi),oa=n(pi,"DIV",{class:!0});var FA=s(oa);T(P9.$$.fragment,FA),GGr=i(FA),eEe=n(FA,"P",{});var hxt=s(eEe);OGr=r(hxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hxt.forEach(t),VGr=i(FA),Ff=n(FA,"P",{});var Yee=s(Ff);XGr=r(Yee,`Note:
Loading a model from its configuration file does `),oEe=n(Yee,"STRONG",{});var pxt=s(oEe);zGr=r(pxt,"not"),pxt.forEach(t),WGr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(Yee,"A",{href:!0});var uxt=s(rZ);QGr=r(uxt,"from_pretrained()"),uxt.forEach(t),HGr=r(Yee," to load the model weights."),Yee.forEach(t),UGr=i(FA),T(Z5.$$.fragment,FA),FA.forEach(t),JGr=i(pi),Kr=n(pi,"DIV",{class:!0});var ui=s(Kr);T(B9.$$.fragment,ui),YGr=i(ui),rEe=n(ui,"P",{});var _xt=s(rEe);KGr=r(_xt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_xt.forEach(t),ZGr=i(ui),$n=n(ui,"P",{});var TA=s($n);eOr=r(TA,"The model class to instantiate is selected based on the "),tEe=n(TA,"CODE",{});var bxt=s(tEe);oOr=r(bxt,"model_type"),bxt.forEach(t),rOr=r(TA,` property of the config object (either
passed as an argument or loaded from `),aEe=n(TA,"CODE",{});var vxt=s(aEe);tOr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),aOr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nEe=n(TA,"CODE",{});var Fxt=s(nEe);nOr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),sOr=r(TA,":"),TA.forEach(t),lOr=i(ui),sEe=n(ui,"UL",{});var Txt=s(sEe);e3=n(Txt,"LI",{});var Mqe=s(e3);lEe=n(Mqe,"STRONG",{});var Mxt=s(lEe);iOr=r(Mxt,"vision-encoder-decoder"),Mxt.forEach(t),dOr=r(Mqe," \u2014 "),tZ=n(Mqe,"A",{href:!0});var Ext=s(tZ);cOr=r(Ext,"FlaxVisionEncoderDecoderModel"),Ext.forEach(t),fOr=r(Mqe," (Vision Encoder decoder model)"),Mqe.forEach(t),Txt.forEach(t),mOr=i(ui),T(o3.$$.fragment,ui),ui.forEach(t),pi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(x$t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoTokenizer"),c(Ei,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(Ci,"class","relative group"),c($f,"id","transformers.AutoConfig"),c($f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($f,"href","#transformers.AutoConfig"),c(wi,"class","relative group"),c(ok,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(rk,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertConfig"),c(tk,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartConfig"),c(ak,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitConfig"),c(nk,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertConfig"),c(sk,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(lk,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ik,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(dk,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ck,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(fk,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertConfig"),c(mk,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineConfig"),c(gk,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPConfig"),c(hk,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertConfig"),c(pk,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextConfig"),c(uk,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLConfig"),c(_k,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(bk,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(vk,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Fk,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaConfig"),c(Tk,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Mk,"href","/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ek,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTConfig"),c(Ck,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrConfig"),c(wk,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Ak,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRConfig"),c(yk,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTConfig"),c(Lk,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraConfig"),c(xk,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c($k,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertConfig"),c(kk,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaConfig"),c(Sk,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetConfig"),c(Rk,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTConfig"),c(Pk,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelConfig"),c(Bk,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNConfig"),c(Ik,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Config"),c(qk,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Nk,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJConfig"),c(jk,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertConfig"),c(Dk,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertConfig"),c(Gk,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ok,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Vk,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Xk,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDConfig"),c(zk,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerConfig"),c(Wk,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeConfig"),c(Qk,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertConfig"),c(Hk,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Config"),c(Uk,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianConfig"),c(Jk,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Yk,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartConfig"),c(Kk,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Zk,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eS,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetConfig"),c(oS,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Config"),c(rS,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tS,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aS,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTConfig"),c(nS,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusConfig"),c(sS,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverConfig"),c(lS,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartConfig"),c(iS,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(dS,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(cS,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fS,"href","/docs/transformers/pr_17286/en/model_doc/rag#transformers.RagConfig"),c(mS,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmConfig"),c(gS,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerConfig"),c(hS,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetConfig"),c(pS,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertConfig"),c(uS,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetConfig"),c(_S,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertConfig"),c(bS,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaConfig"),c(vS,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerConfig"),c(FS,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerConfig"),c(TS,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWConfig"),c(MS,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDConfig"),c(ES,"href","/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(CS,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(wS,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(AS,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterConfig"),c(yS,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(LS,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinConfig"),c(xS,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Config"),c($S,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasConfig"),c(kS,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SS,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRConfig"),c(RS,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PS,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BS,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanConfig"),c(IS,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltConfig"),c(qS,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NS,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jS,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DS,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTConfig"),c(GS,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OS,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VS,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XS,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMConfig"),c(zS,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMConfig"),c(WS,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMConfig"),c(QS,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HS,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(US,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JS,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetConfig"),c(YS,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosConfig"),c(KS,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($g,"id","transformers.AutoTokenizer"),c($g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($g,"href","#transformers.AutoTokenizer"),c(yi,"class","relative group"),c(ZS,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eR,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(oR,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartTokenizer"),c(tR,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartTokenizerFast"),c(aR,"href","/docs/transformers/pr_17286/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nR,"href","/docs/transformers/pr_17286/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sR,"href","/docs/transformers/pr_17286/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lR,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(iR,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(dR,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cR,"href","/docs/transformers/pr_17286/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(fR,"href","/docs/transformers/pr_17286/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mR,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gR,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hR,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pR,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uR,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_R,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bR,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vR,"href","/docs/transformers/pr_17286/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FR,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TR,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineTokenizer"),c(ER,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPTokenizer"),c(CR,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wR,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AR,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_17286/en/model_doc/cpm#transformers.CpmTokenizer"),c(LR,"href","/docs/transformers/pr_17286/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xR,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($R,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kR,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SR,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RR,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BR,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(IR,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(qR,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(NR,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jR,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DR,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraTokenizer"),c(GR,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OR,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VR,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetTokenizer"),c(XR,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zR,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WR,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QR,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HR,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UR,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JR,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eP,"href","/docs/transformers/pr_17286/en/model_doc/herbert#transformers.HerbertTokenizer"),c(oP,"href","/docs/transformers/pr_17286/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tP,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aP,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(sP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(lP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(iP,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(dP,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(cP,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(fP,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDTokenizer"),c(mP,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDTokenizerFast"),c(gP,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerTokenizer"),c(hP,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(pP,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeTokenizer"),c(uP,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(_P,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(vP,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianTokenizer"),c(FP,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartTokenizer"),c(TP,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(MP,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(EP,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(CP,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(wP,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17286/en/model_doc/mluke#transformers.MLukeTokenizer"),c(yP,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(LP,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetTokenizer"),c($P,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(kP,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.T5Tokenizer"),c(SP,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.T5TokenizerFast"),c(RP,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(PP,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(IP,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(qP,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NP,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jP,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(DP,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(GP,"href","/docs/transformers/pr_17286/en/model_doc/phobert#transformers.PhobertTokenizer"),c(OP,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartTokenizer"),c(VP,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(XP,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(zP,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17286/en/model_doc/rag#transformers.RagTokenizer"),c(QP,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmTokenizer"),c(HP,"href","/docs/transformers/pr_17286/en/model_doc/realm#transformers.RealmTokenizerFast"),c(UP,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerTokenizer"),c(JP,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(YP,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertTokenizer"),c(KP,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(eB,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tB,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(aB,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(nB,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(sB,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(lB,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterTokenizer"),c(iB,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(dB,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(cB,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.T5Tokenizer"),c(mB,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.T5TokenizerFast"),c(gB,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasTokenizer"),c(hB,"href","/docs/transformers/pr_17286/en/model_doc/tapex#transformers.TapexTokenizer"),c(pB,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(uB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(_B,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizer"),c(vB,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(EB,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMTokenizer"),c(CB,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(wB,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMTokenizer"),c(AB,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(yB,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(LB,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(xB,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(SB,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(RB,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizer"),c(PB,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoFeatureExtractor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoFeatureExtractor"),c(Li,"class","relative group"),c(BB,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(IB,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DB,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(HB,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(xi,"class","relative group"),c(dI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cI,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPProcessor"),c(fI,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(mI,"href","/docs/transformers/pr_17286/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pI,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(uI,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(_I,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltProcessor"),c(TI,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(MI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoModel"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoModel"),c(ki,"class","relative group"),c(wI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yI,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LI,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertModel"),c(xI,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartModel"),c($I,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitModel"),c(kI,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertModel"),c(SI,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(RI,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdModel"),c(PI,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(BI,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(II,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(qI,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertModel"),c(NI,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineModel"),c(jI,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.CLIPModel"),c(DI,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertModel"),c(GI,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextModel"),c(OI,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLModel"),c(VI,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(XI,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zI,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(WI,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaModel"),c(QI,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(HI,"href","/docs/transformers/pr_17286/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(UI,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTModel"),c(JI,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrModel"),c(YI,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertModel"),c(KI,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(ZI,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTModel"),c(eq,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraModel"),c(oq,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertModel"),c(rq,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaModel"),c(tq,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetModel"),c(aq,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTModel"),c(nq,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelModel"),c(sq,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lq,"href","/docs/transformers/pr_17286/en/model_doc/glpn#transformers.GLPNModel"),c(iq,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2Model"),c(dq,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(cq,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJModel"),c(fq,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertModel"),c(mq,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertModel"),c(gq,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(hq,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(pq,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(uq,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDModel"),c(_q,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerModel"),c(bq,"href","/docs/transformers/pr_17286/en/model_doc/luke#transformers.LukeModel"),c(vq,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertModel"),c(Fq,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100Model"),c(Tq,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianModel"),c(Mq,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Eq,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartModel"),c(Cq,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(wq,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Aq,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetModel"),c(yq,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5Model"),c(Lq,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerModel"),c(xq,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c($q,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTModel"),c(kq,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusModel"),c(Sq,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverModel"),c(Rq,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartModel"),c(Pq,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Bq,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Iq,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertModel"),c(qq,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModel"),c(Nq,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetModel"),c(jq,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertModel"),c(Dq,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetModel"),c(Gq,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel"),c(Oq,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaModel"),c(Vq,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerModel"),c(Xq,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerModel"),c(zq,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWModel"),c(Wq,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDModel"),c(Qq,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Hq,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterModel"),c(Uq,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Jq,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinModel"),c(Yq,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5Model"),c(Kq,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasModel"),c(Zq,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(eN,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechModel"),c(oN,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(rN,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanModel"),c(tN,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltModel"),c(aN,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(nN,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertModel"),c(sN,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTModel"),c(lN,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(iN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(dN,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(cN,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMModel"),c(fN,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMModel"),c(mN,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMModel"),c(gN,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(hN,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(pN,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(uN,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetModel"),c(_N,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosModel"),c(bN,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e_,"id","transformers.AutoModelForPreTraining"),c(e_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e_,"href","#transformers.AutoModelForPreTraining"),c(Pi,"class","relative group"),c(vN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TN,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MN,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForPreTraining"),c(EN,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CN,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForPreTraining"),c(wN,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(AN,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(yN,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LN,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(xN,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c($N,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(kN,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForPreTraining"),c(RN,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(PN,"href","/docs/transformers/pr_17286/en/model_doc/flava#transformers.FlavaForPreTraining"),c(BN,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForPreTraining"),c(IN,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(qN,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(NN,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(jN,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(DN,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(GN,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ON,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(VN,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(XN,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(zN,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(WN,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(QN,"href","/docs/transformers/pr_17286/en/model_doc/retribert#transformers.RetriBertModel"),c(HN,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(UN,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JN,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(KN,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(ej,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(oj,"href","/docs/transformers/pr_17286/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(rj,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(tj,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(aj,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(nj,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ij,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForCausalLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForCausalLM"),c(qi,"class","relative group"),c(dj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForCausalLM"),c(gj,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertLMHeadModel"),c(hj,"href","/docs/transformers/pr_17286/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(pj,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(uj,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_j,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(bj,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(vj,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Fj,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Mj,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Ej,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Cj,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(wj,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Aj,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianForCausalLM"),c(yj,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Lj,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(xj,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($j,"href","/docs/transformers/pr_17286/en/model_doc/opt#transformers.OPTForCausalLM"),c(kj,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Sj,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Rj,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Pj,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Ij,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(qj,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Nj,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jj,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Dj,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Gj,"href","/docs/transformers/pr_17286/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Oj,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Vj,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Wj,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Qj,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForMaskedLM"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForMaskedLM"),c(Di,"class","relative group"),c(Hj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jj,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yj,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oD,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aD,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nD,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sD,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iD,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dD,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cD,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(fD,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gD,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hD,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bD,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vD,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(FD,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(MD,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CD,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wD,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yD,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($D,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u1,"id","transformers.AutoModelForSeq2SeqLM"),c(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Vi,"class","relative group"),c(kD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PD,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jD,"href","/docs/transformers/pr_17286/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17286/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.MarianMTModel"),c(VD,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17286/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17286/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForSequenceClassification"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForSequenceClassification"),c(Wi,"class","relative group"),c(JD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c($G,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17286/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForMultipleChoice"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForMultipleChoice"),c(Ui,"class","relative group"),c(zG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QG,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForNextSentencePrediction"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ki,"class","relative group"),c(EO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yO,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(LO,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(xO,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c($O,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForTokenClassification"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForTokenClassification"),c(od,"class","relative group"),c(kO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RO,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PO,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(BO,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForTokenClassification"),c(IO,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(qO,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(NO,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForTokenClassification"),c(jO,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(GO,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(OO,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(VO,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(zO,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(WO,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(QO,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(HO,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(UO,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(YO,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(KO,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(eV,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(rV,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tV,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aV,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sV,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lV,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iV,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fV,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mV,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForQuestionAnswering"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForQuestionAnswering"),c(ad,"class","relative group"),c(gV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17286/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17286/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c($V,"href","/docs/transformers/pr_17286/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17286/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17286/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17286/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17286/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17286/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17286/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17286/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17286/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(YV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(eX,"href","/docs/transformers/pr_17286/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForTableQuestionAnswering"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ld,"class","relative group"),c(oX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForImageClassification"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForImageClassification"),c(cd,"class","relative group"),c(nX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForImageClassification"),c(dX,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(cX,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(fX,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassification"),c(mX,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(gX,"href","/docs/transformers/pr_17286/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(hX,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(pX,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(uX,"href","/docs/transformers/pr_17286/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(_X,"href","/docs/transformers/pr_17286/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(bX,"href","/docs/transformers/pr_17286/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(vX,"href","/docs/transformers/pr_17286/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(FX,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(TX,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForImageClassification"),c(MX,"href","/docs/transformers/pr_17286/en/model_doc/van#transformers.VanForImageClassification"),c(EX,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.AutoModelForVision2Seq"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.AutoModelForVision2Seq"),c(gd,"class","relative group"),c(CX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(ud,"class","relative group"),c(LX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17286/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.AutoModelForAudioClassification"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.AutoModelForAudioClassification"),c(vd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.AutoModelForAudioFrameClassification"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.AutoModelForAudioFrameClassification"),c(Md,"class","relative group"),c(XX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(HX,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(UX,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(JX,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(YX,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X6,"id","transformers.AutoModelForCTC"),c(X6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X6,"href","#transformers.AutoModelForCTC"),c(wd,"class","relative group"),c(KX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(rz,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.HubertForCTC"),c(tz,"href","/docs/transformers/pr_17286/en/model_doc/sew#transformers.SEWForCTC"),c(az,"href","/docs/transformers/pr_17286/en/model_doc/sew-d#transformers.SEWDForCTC"),c(nz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(sz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(lz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(iz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(dz,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Ld,"class","relative group"),c(cz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17286/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(hz,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForAudioXVector"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForAudioXVector"),c(kd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(vz,"href","/docs/transformers/pr_17286/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Fz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Tz,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Mz,"href","/docs/transformers/pr_17286/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForMaskedImageModeling"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Pd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17286/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(yz,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Lz,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForObjectDetection"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForObjectDetection"),c(Nd,"class","relative group"),c(xz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Rz,"href","/docs/transformers/pr_17286/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForImageSegmentation"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForImageSegmentation"),c(Gd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17286/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForSemanticSegmentation"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Xd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Oz,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Vz,"href","/docs/transformers/pr_17286/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Xz,"href","/docs/transformers/pr_17286/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForInstanceSegmentation"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Qd,"class","relative group"),c(zz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17286/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModel"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModel"),c(Jd,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertModel"),c(Zz,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartModel"),c(eW,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertModel"),c(oW,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(rW,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(tW,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertModel"),c(aW,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.TFCLIPModel"),c(nW,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertModel"),c(sW,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextModel"),c(lW,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLModel"),c(iW,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(dW,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaModel"),c(cW,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(fW,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mW,"href","/docs/transformers/pr_17286/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gW,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraModel"),c(hW,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(pW,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelModel"),c(uW,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(_W,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bW,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJModel"),c(vW,"href","/docs/transformers/pr_17286/en/model_doc/hubert#transformers.TFHubertModel"),c(FW,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(TW,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDModel"),c(MW,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerModel"),c(EW,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertModel"),c(CW,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianModel"),c(wW,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartModel"),c(AW,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(yW,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetModel"),c(LW,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5Model"),c(xW,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c($W,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusModel"),c(kW,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertModel"),c(SW,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaModel"),c(RW,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerModel"),c(PW,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(BW,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinModel"),c(IW,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5Model"),c(qW,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasModel"),c(NW,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jW,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTModel"),c(DW,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(GW,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(OW,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMModel"),c(VW,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(XW,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V8,"id","transformers.TFAutoModelForPreTraining"),c(V8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V8,"href","#transformers.TFAutoModelForPreTraining"),c(Zd,"class","relative group"),c(zW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(UW,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JW,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForPreTraining"),c(YW,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KW,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(oQ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(tQ,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aQ,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17286/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(sQ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(fQ,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17286/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(hQ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p7,"id","transformers.TFAutoModelForCausalLM"),c(p7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p7,"href","#transformers.TFAutoModelForCausalLM"),c(rc,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(MQ,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CQ,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(wQ,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(yQ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(LQ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(xQ,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($Q,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($7,"id","transformers.TFAutoModelForImageClassification"),c($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($7,"href","#transformers.TFAutoModelForImageClassification"),c(nc,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17286/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(IQ,"href","/docs/transformers/pr_17286/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(qQ,"href","/docs/transformers/pr_17286/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(NQ,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForMaskedLM"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForMaskedLM"),c(ic,"class","relative group"),c(jQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(eH,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rH,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aH,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(nH,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sH,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lH,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(fc,"class","relative group"),c(iH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mH,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(gH,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(hH,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(pH,"href","/docs/transformers/pr_17286/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(uH,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.TFMarianMTModel"),c(_H,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(bH,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(vH,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(FH,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForSequenceClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForSequenceClassification"),c(hc,"class","relative group"),c(TH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17286/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c($H,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17286/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17286/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForMultipleChoice"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForMultipleChoice"),c(_c,"class","relative group"),c(JH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(iU,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(dU,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(cU,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(fU,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Fc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(FU,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ec,"class","relative group"),c(TU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17286/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForTokenClassification"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForTokenClassification"),c(Ac,"class","relative group"),c(wU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForTokenClassification"),c($U,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(kU,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(SU,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(RU,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(PU,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(BU,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(IU,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qU,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(NU,"href","/docs/transformers/pr_17286/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(jU,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(DU,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(OU,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(XU,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zU,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(WU,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(QU,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.TFAutoModelForQuestionAnswering"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(xc,"class","relative group"),c(HU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JU,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YU,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17286/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17286/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17286/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17286/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17286/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(sJ,"href","/docs/transformers/pr_17286/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17286/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_17286/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17286/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17286/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17286/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForVision2Seq"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForVision2Seq"),c(Sc,"class","relative group"),c(_J,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Bc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17286/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.FlaxAutoModel"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.FlaxAutoModel"),c(Nc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xJ,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartModel"),c($J,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitModel"),c(kJ,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertModel"),c(SJ,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RJ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(PJ,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(BJ,"href","/docs/transformers/pr_17286/en/model_doc/clip#transformers.FlaxCLIPModel"),c(IJ,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qJ,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraModel"),c(NJ,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jJ,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DJ,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GJ,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianModel"),c(OJ,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VJ,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XJ,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(zJ,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(WJ,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(QJ,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5Model"),c(HJ,"href","/docs/transformers/pr_17286/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(UJ,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTModel"),c(JJ,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(YJ,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(KJ,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.FlaxAutoModelForCausalLM"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Gc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(tY,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(aY,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(nY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(sY,"href","/docs/transformers/pr_17286/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(lY,"href","/docs/transformers/pr_17286/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(iY,"href","/docs/transformers/pr_17286/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(dY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(cY,"href","/docs/transformers/pr_17286/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForPreTraining"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Xc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(pY,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(_Y,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(bY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(vY,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MY,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EY,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17286/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(wY,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForMaskedLM"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Qc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c($Y,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(SY,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(RY,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(PY,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(BY,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qY,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Jc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17286/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17286/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(WY,"href","/docs/transformers/pr_17286/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(QY,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17286/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17286/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17286/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Zc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(rf,"class","relative group"),c(cK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17286/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(pK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(uK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17286/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForTokenClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(nf,"class","relative group"),c(EK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(yK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(LK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(xK,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c($K,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(SK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(RK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(df,"class","relative group"),c(PK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_17286/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17286/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17286/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17286/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17286/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17286/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17286/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(mf,"class","relative group"),c(zK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/pr_17286/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForImageClassification"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForImageClassification"),c(pf,"class","relative group"),c(UK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17286/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ZK,"href","/docs/transformers/pr_17286/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForVision2Seq"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(bf,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17286/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17286/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,_i),b(f,Cf,_),b(f,at,_),e(at,bi),e(at,vi),e(vi,MA),e(at,wf),b(f,je,_),b(f,We,_),e(We,Fi),e(We,Sn),e(Sn,EA),e(We,Rn),e(We,Pn),e(Pn,CA),e(We,Ti),e(We,Bn),e(Bn,wA),e(We,Mi),b(f,Af,_),M(La,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,U$),e(Ae,Ei),e(Ei,J$),e(Ae,Y$),b(f,Co,_),b(f,xa,_),e(xa,K$),e(xa,yf),e(yf,Z$),e(xa,NGe),b(f,Eqe,_),b(f,Ci,_),e(Ci,Lf),e(Lf,Kee),M(AA,Kee,null),e(Ci,jGe),e(Ci,Zee),e(Zee,DGe),b(f,Cqe,_),b(f,In,_),e(In,GGe),e(In,eoe),e(eoe,OGe),e(In,VGe),e(In,ooe),e(ooe,XGe),e(In,zGe),b(f,wqe,_),M(yA,f,_),b(f,Aqe,_),b(f,ek,_),e(ek,WGe),b(f,yqe,_),M(xf,f,_),b(f,Lqe,_),b(f,wi,_),e(wi,$f),e($f,roe),M(LA,roe,null),e(wi,QGe),e(wi,toe),e(toe,HGe),b(f,xqe,_),b(f,wo,_),M(xA,wo,null),e(wo,UGe),e(wo,$A),e($A,JGe),e($A,ok),e(ok,YGe),e($A,KGe),e(wo,ZGe),e(wo,kA),e(kA,eOe),e(kA,aoe),e(aoe,oOe),e(kA,rOe),e(wo,tOe),e(wo,wr),M(SA,wr,null),e(wr,aOe),e(wr,noe),e(noe,nOe),e(wr,sOe),e(wr,Ai),e(Ai,lOe),e(Ai,soe),e(soe,iOe),e(Ai,dOe),e(Ai,loe),e(loe,cOe),e(Ai,fOe),e(wr,mOe),e(wr,y),e(y,kf),e(kf,ioe),e(ioe,gOe),e(kf,hOe),e(kf,rk),e(rk,pOe),e(kf,uOe),e(y,_Oe),e(y,Sf),e(Sf,doe),e(doe,bOe),e(Sf,vOe),e(Sf,tk),e(tk,FOe),e(Sf,TOe),e(y,MOe),e(y,Rf),e(Rf,coe),e(coe,EOe),e(Rf,COe),e(Rf,ak),e(ak,wOe),e(Rf,AOe),e(y,yOe),e(y,Pf),e(Pf,foe),e(foe,LOe),e(Pf,xOe),e(Pf,nk),e(nk,$Oe),e(Pf,kOe),e(y,SOe),e(y,Bf),e(Bf,moe),e(moe,ROe),e(Bf,POe),e(Bf,sk),e(sk,BOe),e(Bf,IOe),e(y,qOe),e(y,If),e(If,goe),e(goe,NOe),e(If,jOe),e(If,lk),e(lk,DOe),e(If,GOe),e(y,OOe),e(y,qf),e(qf,hoe),e(hoe,VOe),e(qf,XOe),e(qf,ik),e(ik,zOe),e(qf,WOe),e(y,QOe),e(y,Nf),e(Nf,poe),e(poe,HOe),e(Nf,UOe),e(Nf,dk),e(dk,JOe),e(Nf,YOe),e(y,KOe),e(y,jf),e(jf,uoe),e(uoe,ZOe),e(jf,eVe),e(jf,ck),e(ck,oVe),e(jf,rVe),e(y,tVe),e(y,Df),e(Df,_oe),e(_oe,aVe),e(Df,nVe),e(Df,fk),e(fk,sVe),e(Df,lVe),e(y,iVe),e(y,Gf),e(Gf,boe),e(boe,dVe),e(Gf,cVe),e(Gf,mk),e(mk,fVe),e(Gf,mVe),e(y,gVe),e(y,Of),e(Of,voe),e(voe,hVe),e(Of,pVe),e(Of,gk),e(gk,uVe),e(Of,_Ve),e(y,bVe),e(y,Vf),e(Vf,Foe),e(Foe,vVe),e(Vf,FVe),e(Vf,hk),e(hk,TVe),e(Vf,MVe),e(y,EVe),e(y,Xf),e(Xf,Toe),e(Toe,CVe),e(Xf,wVe),e(Xf,pk),e(pk,AVe),e(Xf,yVe),e(y,LVe),e(y,zf),e(zf,Moe),e(Moe,xVe),e(zf,$Ve),e(zf,uk),e(uk,kVe),e(zf,SVe),e(y,RVe),e(y,Wf),e(Wf,Eoe),e(Eoe,PVe),e(Wf,BVe),e(Wf,_k),e(_k,IVe),e(Wf,qVe),e(y,NVe),e(y,Qf),e(Qf,Coe),e(Coe,jVe),e(Qf,DVe),e(Qf,bk),e(bk,GVe),e(Qf,OVe),e(y,VVe),e(y,Hf),e(Hf,woe),e(woe,XVe),e(Hf,zVe),e(Hf,vk),e(vk,WVe),e(Hf,QVe),e(y,HVe),e(y,Uf),e(Uf,Aoe),e(Aoe,UVe),e(Uf,JVe),e(Uf,Fk),e(Fk,YVe),e(Uf,KVe),e(y,ZVe),e(y,Jf),e(Jf,yoe),e(yoe,eXe),e(Jf,oXe),e(Jf,Tk),e(Tk,rXe),e(Jf,tXe),e(y,aXe),e(y,Yf),e(Yf,Loe),e(Loe,nXe),e(Yf,sXe),e(Yf,Mk),e(Mk,lXe),e(Yf,iXe),e(y,dXe),e(y,Kf),e(Kf,xoe),e(xoe,cXe),e(Kf,fXe),e(Kf,Ek),e(Ek,mXe),e(Kf,gXe),e(y,hXe),e(y,Zf),e(Zf,$oe),e($oe,pXe),e(Zf,uXe),e(Zf,Ck),e(Ck,_Xe),e(Zf,bXe),e(y,vXe),e(y,em),e(em,koe),e(koe,FXe),e(em,TXe),e(em,wk),e(wk,MXe),e(em,EXe),e(y,CXe),e(y,om),e(om,Soe),e(Soe,wXe),e(om,AXe),e(om,Ak),e(Ak,yXe),e(om,LXe),e(y,xXe),e(y,rm),e(rm,Roe),e(Roe,$Xe),e(rm,kXe),e(rm,yk),e(yk,SXe),e(rm,RXe),e(y,PXe),e(y,tm),e(tm,Poe),e(Poe,BXe),e(tm,IXe),e(tm,Lk),e(Lk,qXe),e(tm,NXe),e(y,jXe),e(y,am),e(am,Boe),e(Boe,DXe),e(am,GXe),e(am,xk),e(xk,OXe),e(am,VXe),e(y,XXe),e(y,nm),e(nm,Ioe),e(Ioe,zXe),e(nm,WXe),e(nm,$k),e($k,QXe),e(nm,HXe),e(y,UXe),e(y,sm),e(sm,qoe),e(qoe,JXe),e(sm,YXe),e(sm,kk),e(kk,KXe),e(sm,ZXe),e(y,eze),e(y,lm),e(lm,Noe),e(Noe,oze),e(lm,rze),e(lm,Sk),e(Sk,tze),e(lm,aze),e(y,nze),e(y,im),e(im,joe),e(joe,sze),e(im,lze),e(im,Rk),e(Rk,ize),e(im,dze),e(y,cze),e(y,dm),e(dm,Doe),e(Doe,fze),e(dm,mze),e(dm,Pk),e(Pk,gze),e(dm,hze),e(y,pze),e(y,cm),e(cm,Goe),e(Goe,uze),e(cm,_ze),e(cm,Bk),e(Bk,bze),e(cm,vze),e(y,Fze),e(y,fm),e(fm,Ooe),e(Ooe,Tze),e(fm,Mze),e(fm,Ik),e(Ik,Eze),e(fm,Cze),e(y,wze),e(y,mm),e(mm,Voe),e(Voe,Aze),e(mm,yze),e(mm,qk),e(qk,Lze),e(mm,xze),e(y,$ze),e(y,gm),e(gm,Xoe),e(Xoe,kze),e(gm,Sze),e(gm,Nk),e(Nk,Rze),e(gm,Pze),e(y,Bze),e(y,hm),e(hm,zoe),e(zoe,Ize),e(hm,qze),e(hm,jk),e(jk,Nze),e(hm,jze),e(y,Dze),e(y,pm),e(pm,Woe),e(Woe,Gze),e(pm,Oze),e(pm,Dk),e(Dk,Vze),e(pm,Xze),e(y,zze),e(y,um),e(um,Qoe),e(Qoe,Wze),e(um,Qze),e(um,Gk),e(Gk,Hze),e(um,Uze),e(y,Jze),e(y,_m),e(_m,Hoe),e(Hoe,Yze),e(_m,Kze),e(_m,Ok),e(Ok,Zze),e(_m,eWe),e(y,oWe),e(y,bm),e(bm,Uoe),e(Uoe,rWe),e(bm,tWe),e(bm,Vk),e(Vk,aWe),e(bm,nWe),e(y,sWe),e(y,vm),e(vm,Joe),e(Joe,lWe),e(vm,iWe),e(vm,Xk),e(Xk,dWe),e(vm,cWe),e(y,fWe),e(y,Fm),e(Fm,Yoe),e(Yoe,mWe),e(Fm,gWe),e(Fm,zk),e(zk,hWe),e(Fm,pWe),e(y,uWe),e(y,Tm),e(Tm,Koe),e(Koe,_We),e(Tm,bWe),e(Tm,Wk),e(Wk,vWe),e(Tm,FWe),e(y,TWe),e(y,Mm),e(Mm,Zoe),e(Zoe,MWe),e(Mm,EWe),e(Mm,Qk),e(Qk,CWe),e(Mm,wWe),e(y,AWe),e(y,Em),e(Em,ere),e(ere,yWe),e(Em,LWe),e(Em,Hk),e(Hk,xWe),e(Em,$We),e(y,kWe),e(y,Cm),e(Cm,ore),e(ore,SWe),e(Cm,RWe),e(Cm,Uk),e(Uk,PWe),e(Cm,BWe),e(y,IWe),e(y,wm),e(wm,rre),e(rre,qWe),e(wm,NWe),e(wm,Jk),e(Jk,jWe),e(wm,DWe),e(y,GWe),e(y,Am),e(Am,tre),e(tre,OWe),e(Am,VWe),e(Am,Yk),e(Yk,XWe),e(Am,zWe),e(y,WWe),e(y,ym),e(ym,are),e(are,QWe),e(ym,HWe),e(ym,Kk),e(Kk,UWe),e(ym,JWe),e(y,YWe),e(y,Lm),e(Lm,nre),e(nre,KWe),e(Lm,ZWe),e(Lm,Zk),e(Zk,eQe),e(Lm,oQe),e(y,rQe),e(y,xm),e(xm,sre),e(sre,tQe),e(xm,aQe),e(xm,eS),e(eS,nQe),e(xm,sQe),e(y,lQe),e(y,$m),e($m,lre),e(lre,iQe),e($m,dQe),e($m,oS),e(oS,cQe),e($m,fQe),e(y,mQe),e(y,km),e(km,ire),e(ire,gQe),e(km,hQe),e(km,rS),e(rS,pQe),e(km,uQe),e(y,_Qe),e(y,Sm),e(Sm,dre),e(dre,bQe),e(Sm,vQe),e(Sm,tS),e(tS,FQe),e(Sm,TQe),e(y,MQe),e(y,Rm),e(Rm,cre),e(cre,EQe),e(Rm,CQe),e(Rm,aS),e(aS,wQe),e(Rm,AQe),e(y,yQe),e(y,Pm),e(Pm,fre),e(fre,LQe),e(Pm,xQe),e(Pm,nS),e(nS,$Qe),e(Pm,kQe),e(y,SQe),e(y,Bm),e(Bm,mre),e(mre,RQe),e(Bm,PQe),e(Bm,sS),e(sS,BQe),e(Bm,IQe),e(y,qQe),e(y,Im),e(Im,gre),e(gre,NQe),e(Im,jQe),e(Im,lS),e(lS,DQe),e(Im,GQe),e(y,OQe),e(y,qm),e(qm,hre),e(hre,VQe),e(qm,XQe),e(qm,iS),e(iS,zQe),e(qm,WQe),e(y,QQe),e(y,Nm),e(Nm,pre),e(pre,HQe),e(Nm,UQe),e(Nm,dS),e(dS,JQe),e(Nm,YQe),e(y,KQe),e(y,jm),e(jm,ure),e(ure,ZQe),e(jm,eHe),e(jm,cS),e(cS,oHe),e(jm,rHe),e(y,tHe),e(y,Dm),e(Dm,_re),e(_re,aHe),e(Dm,nHe),e(Dm,fS),e(fS,sHe),e(Dm,lHe),e(y,iHe),e(y,Gm),e(Gm,bre),e(bre,dHe),e(Gm,cHe),e(Gm,mS),e(mS,fHe),e(Gm,mHe),e(y,gHe),e(y,Om),e(Om,vre),e(vre,hHe),e(Om,pHe),e(Om,gS),e(gS,uHe),e(Om,_He),e(y,bHe),e(y,Vm),e(Vm,Fre),e(Fre,vHe),e(Vm,FHe),e(Vm,hS),e(hS,THe),e(Vm,MHe),e(y,EHe),e(y,Xm),e(Xm,Tre),e(Tre,CHe),e(Xm,wHe),e(Xm,pS),e(pS,AHe),e(Xm,yHe),e(y,LHe),e(y,zm),e(zm,Mre),e(Mre,xHe),e(zm,$He),e(zm,uS),e(uS,kHe),e(zm,SHe),e(y,RHe),e(y,Wm),e(Wm,Ere),e(Ere,PHe),e(Wm,BHe),e(Wm,_S),e(_S,IHe),e(Wm,qHe),e(y,NHe),e(y,Qm),e(Qm,Cre),e(Cre,jHe),e(Qm,DHe),e(Qm,bS),e(bS,GHe),e(Qm,OHe),e(y,VHe),e(y,Hm),e(Hm,wre),e(wre,XHe),e(Hm,zHe),e(Hm,vS),e(vS,WHe),e(Hm,QHe),e(y,HHe),e(y,Um),e(Um,Are),e(Are,UHe),e(Um,JHe),e(Um,FS),e(FS,YHe),e(Um,KHe),e(y,ZHe),e(y,Jm),e(Jm,yre),e(yre,eUe),e(Jm,oUe),e(Jm,TS),e(TS,rUe),e(Jm,tUe),e(y,aUe),e(y,Ym),e(Ym,Lre),e(Lre,nUe),e(Ym,sUe),e(Ym,MS),e(MS,lUe),e(Ym,iUe),e(y,dUe),e(y,Km),e(Km,xre),e(xre,cUe),e(Km,fUe),e(Km,ES),e(ES,mUe),e(Km,gUe),e(y,hUe),e(y,Zm),e(Zm,$re),e($re,pUe),e(Zm,uUe),e(Zm,CS),e(CS,_Ue),e(Zm,bUe),e(y,vUe),e(y,eg),e(eg,kre),e(kre,FUe),e(eg,TUe),e(eg,wS),e(wS,MUe),e(eg,EUe),e(y,CUe),e(y,og),e(og,Sre),e(Sre,wUe),e(og,AUe),e(og,AS),e(AS,yUe),e(og,LUe),e(y,xUe),e(y,rg),e(rg,Rre),e(Rre,$Ue),e(rg,kUe),e(rg,yS),e(yS,SUe),e(rg,RUe),e(y,PUe),e(y,tg),e(tg,Pre),e(Pre,BUe),e(tg,IUe),e(tg,LS),e(LS,qUe),e(tg,NUe),e(y,jUe),e(y,ag),e(ag,Bre),e(Bre,DUe),e(ag,GUe),e(ag,xS),e(xS,OUe),e(ag,VUe),e(y,XUe),e(y,ng),e(ng,Ire),e(Ire,zUe),e(ng,WUe),e(ng,$S),e($S,QUe),e(ng,HUe),e(y,UUe),e(y,sg),e(sg,qre),e(qre,JUe),e(sg,YUe),e(sg,kS),e(kS,KUe),e(sg,ZUe),e(y,eJe),e(y,lg),e(lg,Nre),e(Nre,oJe),e(lg,rJe),e(lg,SS),e(SS,tJe),e(lg,aJe),e(y,nJe),e(y,ig),e(ig,jre),e(jre,sJe),e(ig,lJe),e(ig,RS),e(RS,iJe),e(ig,dJe),e(y,cJe),e(y,dg),e(dg,Dre),e(Dre,fJe),e(dg,mJe),e(dg,PS),e(PS,gJe),e(dg,hJe),e(y,pJe),e(y,cg),e(cg,Gre),e(Gre,uJe),e(cg,_Je),e(cg,BS),e(BS,bJe),e(cg,vJe),e(y,FJe),e(y,fg),e(fg,Ore),e(Ore,TJe),e(fg,MJe),e(fg,IS),e(IS,EJe),e(fg,CJe),e(y,wJe),e(y,mg),e(mg,Vre),e(Vre,AJe),e(mg,yJe),e(mg,qS),e(qS,LJe),e(mg,xJe),e(y,$Je),e(y,gg),e(gg,Xre),e(Xre,kJe),e(gg,SJe),e(gg,NS),e(NS,RJe),e(gg,PJe),e(y,BJe),e(y,hg),e(hg,zre),e(zre,IJe),e(hg,qJe),e(hg,jS),e(jS,NJe),e(hg,jJe),e(y,DJe),e(y,pg),e(pg,Wre),e(Wre,GJe),e(pg,OJe),e(pg,DS),e(DS,VJe),e(pg,XJe),e(y,zJe),e(y,ug),e(ug,Qre),e(Qre,WJe),e(ug,QJe),e(ug,GS),e(GS,HJe),e(ug,UJe),e(y,JJe),e(y,_g),e(_g,Hre),e(Hre,YJe),e(_g,KJe),e(_g,OS),e(OS,ZJe),e(_g,eYe),e(y,oYe),e(y,bg),e(bg,Ure),e(Ure,rYe),e(bg,tYe),e(bg,VS),e(VS,aYe),e(bg,nYe),e(y,sYe),e(y,vg),e(vg,Jre),e(Jre,lYe),e(vg,iYe),e(vg,XS),e(XS,dYe),e(vg,cYe),e(y,fYe),e(y,Fg),e(Fg,Yre),e(Yre,mYe),e(Fg,gYe),e(Fg,zS),e(zS,hYe),e(Fg,pYe),e(y,uYe),e(y,Tg),e(Tg,Kre),e(Kre,_Ye),e(Tg,bYe),e(Tg,WS),e(WS,vYe),e(Tg,FYe),e(y,TYe),e(y,Mg),e(Mg,Zre),e(Zre,MYe),e(Mg,EYe),e(Mg,QS),e(QS,CYe),e(Mg,wYe),e(y,AYe),e(y,Eg),e(Eg,ete),e(ete,yYe),e(Eg,LYe),e(Eg,HS),e(HS,xYe),e(Eg,$Ye),e(y,kYe),e(y,Cg),e(Cg,ote),e(ote,SYe),e(Cg,RYe),e(Cg,US),e(US,PYe),e(Cg,BYe),e(y,IYe),e(y,wg),e(wg,rte),e(rte,qYe),e(wg,NYe),e(wg,JS),e(JS,jYe),e(wg,DYe),e(y,GYe),e(y,Ag),e(Ag,tte),e(tte,OYe),e(Ag,VYe),e(Ag,YS),e(YS,XYe),e(Ag,zYe),e(y,WYe),e(y,yg),e(yg,ate),e(ate,QYe),e(yg,HYe),e(yg,KS),e(KS,UYe),e(yg,JYe),e(wr,YYe),M(Lg,wr,null),e(wo,KYe),e(wo,xg),M(RA,xg,null),e(xg,ZYe),e(xg,nte),e(nte,eKe),b(f,$qe,_),b(f,yi,_),e(yi,$g),e($g,ste),M(PA,ste,null),e(yi,oKe),e(yi,lte),e(lte,rKe),b(f,kqe,_),b(f,Ao,_),M(BA,Ao,null),e(Ao,tKe),e(Ao,IA),e(IA,aKe),e(IA,ZS),e(ZS,nKe),e(IA,sKe),e(Ao,lKe),e(Ao,qA),e(qA,iKe),e(qA,ite),e(ite,dKe),e(qA,cKe),e(Ao,fKe),e(Ao,Ar),M(NA,Ar,null),e(Ar,mKe),e(Ar,dte),e(dte,gKe),e(Ar,hKe),e(Ar,$a),e($a,pKe),e($a,cte),e(cte,uKe),e($a,_Ke),e($a,fte),e(fte,bKe),e($a,vKe),e($a,mte),e(mte,FKe),e($a,TKe),e(Ar,MKe),e(Ar,k),e(k,qn),e(qn,gte),e(gte,EKe),e(qn,CKe),e(qn,eR),e(eR,wKe),e(qn,AKe),e(qn,oR),e(oR,yKe),e(qn,LKe),e(k,xKe),e(k,Nn),e(Nn,hte),e(hte,$Ke),e(Nn,kKe),e(Nn,rR),e(rR,SKe),e(Nn,RKe),e(Nn,tR),e(tR,PKe),e(Nn,BKe),e(k,IKe),e(k,jn),e(jn,pte),e(pte,qKe),e(jn,NKe),e(jn,aR),e(aR,jKe),e(jn,DKe),e(jn,nR),e(nR,GKe),e(jn,OKe),e(k,VKe),e(k,kg),e(kg,ute),e(ute,XKe),e(kg,zKe),e(kg,sR),e(sR,WKe),e(kg,QKe),e(k,HKe),e(k,Dn),e(Dn,_te),e(_te,UKe),e(Dn,JKe),e(Dn,lR),e(lR,YKe),e(Dn,KKe),e(Dn,iR),e(iR,ZKe),e(Dn,eZe),e(k,oZe),e(k,Sg),e(Sg,bte),e(bte,rZe),e(Sg,tZe),e(Sg,dR),e(dR,aZe),e(Sg,nZe),e(k,sZe),e(k,Rg),e(Rg,vte),e(vte,lZe),e(Rg,iZe),e(Rg,cR),e(cR,dZe),e(Rg,cZe),e(k,fZe),e(k,Pg),e(Pg,Fte),e(Fte,mZe),e(Pg,gZe),e(Pg,fR),e(fR,hZe),e(Pg,pZe),e(k,uZe),e(k,Gn),e(Gn,Tte),e(Tte,_Ze),e(Gn,bZe),e(Gn,mR),e(mR,vZe),e(Gn,FZe),e(Gn,gR),e(gR,TZe),e(Gn,MZe),e(k,EZe),e(k,On),e(On,Mte),e(Mte,CZe),e(On,wZe),e(On,hR),e(hR,AZe),e(On,yZe),e(On,pR),e(pR,LZe),e(On,xZe),e(k,$Ze),e(k,Vn),e(Vn,Ete),e(Ete,kZe),e(Vn,SZe),e(Vn,uR),e(uR,RZe),e(Vn,PZe),e(Vn,_R),e(_R,BZe),e(Vn,IZe),e(k,qZe),e(k,Bg),e(Bg,Cte),e(Cte,NZe),e(Bg,jZe),e(Bg,bR),e(bR,DZe),e(Bg,GZe),e(k,OZe),e(k,Ig),e(Ig,wte),e(wte,VZe),e(Ig,XZe),e(Ig,vR),e(vR,zZe),e(Ig,WZe),e(k,QZe),e(k,Xn),e(Xn,Ate),e(Ate,HZe),e(Xn,UZe),e(Xn,FR),e(FR,JZe),e(Xn,YZe),e(Xn,TR),e(TR,KZe),e(Xn,ZZe),e(k,eeo),e(k,qg),e(qg,yte),e(yte,oeo),e(qg,reo),e(qg,MR),e(MR,teo),e(qg,aeo),e(k,neo),e(k,zn),e(zn,Lte),e(Lte,seo),e(zn,leo),e(zn,ER),e(ER,ieo),e(zn,deo),e(zn,CR),e(CR,ceo),e(zn,feo),e(k,meo),e(k,Wn),e(Wn,xte),e(xte,geo),e(Wn,heo),e(Wn,wR),e(wR,peo),e(Wn,ueo),e(Wn,AR),e(AR,_eo),e(Wn,beo),e(k,veo),e(k,Qn),e(Qn,$te),e($te,Feo),e(Qn,Teo),e(Qn,yR),e(yR,Meo),e(Qn,Eeo),e(Qn,LR),e(LR,Ceo),e(Qn,weo),e(k,Aeo),e(k,Ng),e(Ng,kte),e(kte,yeo),e(Ng,Leo),e(Ng,xR),e(xR,xeo),e(Ng,$eo),e(k,keo),e(k,Hn),e(Hn,Ste),e(Ste,Seo),e(Hn,Reo),e(Hn,$R),e($R,Peo),e(Hn,Beo),e(Hn,kR),e(kR,Ieo),e(Hn,qeo),e(k,Neo),e(k,Un),e(Un,Rte),e(Rte,jeo),e(Un,Deo),e(Un,SR),e(SR,Geo),e(Un,Oeo),e(Un,RR),e(RR,Veo),e(Un,Xeo),e(k,zeo),e(k,Jn),e(Jn,Pte),e(Pte,Weo),e(Jn,Qeo),e(Jn,PR),e(PR,Heo),e(Jn,Ueo),e(Jn,BR),e(BR,Jeo),e(Jn,Yeo),e(k,Keo),e(k,Yn),e(Yn,Bte),e(Bte,Zeo),e(Yn,eoo),e(Yn,IR),e(IR,ooo),e(Yn,roo),e(Yn,qR),e(qR,too),e(Yn,aoo),e(k,noo),e(k,Kn),e(Kn,Ite),e(Ite,soo),e(Kn,loo),e(Kn,NR),e(NR,ioo),e(Kn,doo),e(Kn,jR),e(jR,coo),e(Kn,foo),e(k,moo),e(k,Zn),e(Zn,qte),e(qte,goo),e(Zn,hoo),e(Zn,DR),e(DR,poo),e(Zn,uoo),e(Zn,GR),e(GR,_oo),e(Zn,boo),e(k,voo),e(k,jg),e(jg,Nte),e(Nte,Foo),e(jg,Too),e(jg,OR),e(OR,Moo),e(jg,Eoo),e(k,Coo),e(k,es),e(es,jte),e(jte,woo),e(es,Aoo),e(es,VR),e(VR,yoo),e(es,Loo),e(es,XR),e(XR,xoo),e(es,$oo),e(k,koo),e(k,Dg),e(Dg,Dte),e(Dte,Soo),e(Dg,Roo),e(Dg,zR),e(zR,Poo),e(Dg,Boo),e(k,Ioo),e(k,os),e(os,Gte),e(Gte,qoo),e(os,Noo),e(os,WR),e(WR,joo),e(os,Doo),e(os,QR),e(QR,Goo),e(os,Ooo),e(k,Voo),e(k,rs),e(rs,Ote),e(Ote,Xoo),e(rs,zoo),e(rs,HR),e(HR,Woo),e(rs,Qoo),e(rs,UR),e(UR,Hoo),e(rs,Uoo),e(k,Joo),e(k,ts),e(ts,Vte),e(Vte,Yoo),e(ts,Koo),e(ts,JR),e(JR,Zoo),e(ts,ero),e(ts,YR),e(YR,oro),e(ts,rro),e(k,tro),e(k,as),e(as,Xte),e(Xte,aro),e(as,nro),e(as,KR),e(KR,sro),e(as,lro),e(as,ZR),e(ZR,iro),e(as,dro),e(k,cro),e(k,ns),e(ns,zte),e(zte,fro),e(ns,mro),e(ns,eP),e(eP,gro),e(ns,hro),e(ns,oP),e(oP,pro),e(ns,uro),e(k,_ro),e(k,Gg),e(Gg,Wte),e(Wte,bro),e(Gg,vro),e(Gg,rP),e(rP,Fro),e(Gg,Tro),e(k,Mro),e(k,ss),e(ss,Qte),e(Qte,Ero),e(ss,Cro),e(ss,tP),e(tP,wro),e(ss,Aro),e(ss,aP),e(aP,yro),e(ss,Lro),e(k,xro),e(k,ls),e(ls,Hte),e(Hte,$ro),e(ls,kro),e(ls,nP),e(nP,Sro),e(ls,Rro),e(ls,sP),e(sP,Pro),e(ls,Bro),e(k,Iro),e(k,is),e(is,Ute),e(Ute,qro),e(is,Nro),e(is,lP),e(lP,jro),e(is,Dro),e(is,iP),e(iP,Gro),e(is,Oro),e(k,Vro),e(k,ds),e(ds,Jte),e(Jte,Xro),e(ds,zro),e(ds,dP),e(dP,Wro),e(ds,Qro),e(ds,cP),e(cP,Hro),e(ds,Uro),e(k,Jro),e(k,cs),e(cs,Yte),e(Yte,Yro),e(cs,Kro),e(cs,fP),e(fP,Zro),e(cs,eto),e(cs,mP),e(mP,oto),e(cs,rto),e(k,tto),e(k,fs),e(fs,Kte),e(Kte,ato),e(fs,nto),e(fs,gP),e(gP,sto),e(fs,lto),e(fs,hP),e(hP,ito),e(fs,dto),e(k,cto),e(k,Og),e(Og,Zte),e(Zte,fto),e(Og,mto),e(Og,pP),e(pP,gto),e(Og,hto),e(k,pto),e(k,ms),e(ms,eae),e(eae,uto),e(ms,_to),e(ms,uP),e(uP,bto),e(ms,vto),e(ms,_P),e(_P,Fto),e(ms,Tto),e(k,Mto),e(k,Vg),e(Vg,oae),e(oae,Eto),e(Vg,Cto),e(Vg,bP),e(bP,wto),e(Vg,Ato),e(k,yto),e(k,Xg),e(Xg,rae),e(rae,Lto),e(Xg,xto),e(Xg,vP),e(vP,$to),e(Xg,kto),e(k,Sto),e(k,gs),e(gs,tae),e(tae,Rto),e(gs,Pto),e(gs,FP),e(FP,Bto),e(gs,Ito),e(gs,TP),e(TP,qto),e(gs,Nto),e(k,jto),e(k,hs),e(hs,aae),e(aae,Dto),e(hs,Gto),e(hs,MP),e(MP,Oto),e(hs,Vto),e(hs,EP),e(EP,Xto),e(hs,zto),e(k,Wto),e(k,ps),e(ps,nae),e(nae,Qto),e(ps,Hto),e(ps,CP),e(CP,Uto),e(ps,Jto),e(ps,wP),e(wP,Yto),e(ps,Kto),e(k,Zto),e(k,zg),e(zg,sae),e(sae,eao),e(zg,oao),e(zg,AP),e(AP,rao),e(zg,tao),e(k,aao),e(k,us),e(us,lae),e(lae,nao),e(us,sao),e(us,yP),e(yP,lao),e(us,iao),e(us,LP),e(LP,dao),e(us,cao),e(k,fao),e(k,_s),e(_s,iae),e(iae,mao),e(_s,gao),e(_s,xP),e(xP,hao),e(_s,pao),e(_s,$P),e($P,uao),e(_s,_ao),e(k,bao),e(k,bs),e(bs,dae),e(dae,vao),e(bs,Fao),e(bs,kP),e(kP,Tao),e(bs,Mao),e(bs,SP),e(SP,Eao),e(bs,Cao),e(k,wao),e(k,vs),e(vs,cae),e(cae,Aao),e(vs,yao),e(vs,RP),e(RP,Lao),e(vs,xao),e(vs,PP),e(PP,$ao),e(vs,kao),e(k,Sao),e(k,Fs),e(Fs,fae),e(fae,Rao),e(Fs,Pao),e(Fs,BP),e(BP,Bao),e(Fs,Iao),e(Fs,IP),e(IP,qao),e(Fs,Nao),e(k,jao),e(k,Wg),e(Wg,mae),e(mae,Dao),e(Wg,Gao),e(Wg,qP),e(qP,Oao),e(Wg,Vao),e(k,Xao),e(k,Ts),e(Ts,gae),e(gae,zao),e(Ts,Wao),e(Ts,NP),e(NP,Qao),e(Ts,Hao),e(Ts,jP),e(jP,Uao),e(Ts,Jao),e(k,Yao),e(k,Qg),e(Qg,hae),e(hae,Kao),e(Qg,Zao),e(Qg,DP),e(DP,eno),e(Qg,ono),e(k,rno),e(k,Hg),e(Hg,pae),e(pae,tno),e(Hg,ano),e(Hg,GP),e(GP,nno),e(Hg,sno),e(k,lno),e(k,Ug),e(Ug,uae),e(uae,ino),e(Ug,dno),e(Ug,OP),e(OP,cno),e(Ug,fno),e(k,mno),e(k,Jg),e(Jg,_ae),e(_ae,gno),e(Jg,hno),e(Jg,VP),e(VP,pno),e(Jg,uno),e(k,_no),e(k,Ms),e(Ms,bae),e(bae,bno),e(Ms,vno),e(Ms,XP),e(XP,Fno),e(Ms,Tno),e(Ms,zP),e(zP,Mno),e(Ms,Eno),e(k,Cno),e(k,Yg),e(Yg,vae),e(vae,wno),e(Yg,Ano),e(Yg,WP),e(WP,yno),e(Yg,Lno),e(k,xno),e(k,Es),e(Es,Fae),e(Fae,$no),e(Es,kno),e(Es,QP),e(QP,Sno),e(Es,Rno),e(Es,HP),e(HP,Pno),e(Es,Bno),e(k,Ino),e(k,Cs),e(Cs,Tae),e(Tae,qno),e(Cs,Nno),e(Cs,UP),e(UP,jno),e(Cs,Dno),e(Cs,JP),e(JP,Gno),e(Cs,Ono),e(k,Vno),e(k,ws),e(ws,Mae),e(Mae,Xno),e(ws,zno),e(ws,YP),e(YP,Wno),e(ws,Qno),e(ws,KP),e(KP,Hno),e(ws,Uno),e(k,Jno),e(k,As),e(As,Eae),e(Eae,Yno),e(As,Kno),e(As,ZP),e(ZP,Zno),e(As,eso),e(As,eB),e(eB,oso),e(As,rso),e(k,tso),e(k,ys),e(ys,Cae),e(Cae,aso),e(ys,nso),e(ys,oB),e(oB,sso),e(ys,lso),e(ys,rB),e(rB,iso),e(ys,dso),e(k,cso),e(k,Ls),e(Ls,wae),e(wae,fso),e(Ls,mso),e(Ls,tB),e(tB,gso),e(Ls,hso),e(Ls,aB),e(aB,pso),e(Ls,uso),e(k,_so),e(k,Kg),e(Kg,Aae),e(Aae,bso),e(Kg,vso),e(Kg,nB),e(nB,Fso),e(Kg,Tso),e(k,Mso),e(k,Zg),e(Zg,yae),e(yae,Eso),e(Zg,Cso),e(Zg,sB),e(sB,wso),e(Zg,Aso),e(k,yso),e(k,xs),e(xs,Lae),e(Lae,Lso),e(xs,xso),e(xs,lB),e(lB,$so),e(xs,kso),e(xs,iB),e(iB,Sso),e(xs,Rso),e(k,Pso),e(k,$s),e($s,xae),e(xae,Bso),e($s,Iso),e($s,dB),e(dB,qso),e($s,Nso),e($s,cB),e(cB,jso),e($s,Dso),e(k,Gso),e(k,ks),e(ks,$ae),e($ae,Oso),e(ks,Vso),e(ks,fB),e(fB,Xso),e(ks,zso),e(ks,mB),e(mB,Wso),e(ks,Qso),e(k,Hso),e(k,eh),e(eh,kae),e(kae,Uso),e(eh,Jso),e(eh,gB),e(gB,Yso),e(eh,Kso),e(k,Zso),e(k,oh),e(oh,Sae),e(Sae,elo),e(oh,olo),e(oh,hB),e(hB,rlo),e(oh,tlo),e(k,alo),e(k,rh),e(rh,Rae),e(Rae,nlo),e(rh,slo),e(rh,pB),e(pB,llo),e(rh,ilo),e(k,dlo),e(k,Ss),e(Ss,Pae),e(Pae,clo),e(Ss,flo),e(Ss,uB),e(uB,mlo),e(Ss,glo),e(Ss,_B),e(_B,hlo),e(Ss,plo),e(k,ulo),e(k,Rs),e(Rs,Bae),e(Bae,_lo),e(Rs,blo),e(Rs,bB),e(bB,vlo),e(Rs,Flo),e(Rs,vB),e(vB,Tlo),e(Rs,Mlo),e(k,Elo),e(k,th),e(th,Iae),e(Iae,Clo),e(th,wlo),e(th,FB),e(FB,Alo),e(th,ylo),e(k,Llo),e(k,ah),e(ah,qae),e(qae,xlo),e(ah,$lo),e(ah,TB),e(TB,klo),e(ah,Slo),e(k,Rlo),e(k,nh),e(nh,Nae),e(Nae,Plo),e(nh,Blo),e(nh,MB),e(MB,Ilo),e(nh,qlo),e(k,Nlo),e(k,Ps),e(Ps,jae),e(jae,jlo),e(Ps,Dlo),e(Ps,EB),e(EB,Glo),e(Ps,Olo),e(Ps,CB),e(CB,Vlo),e(Ps,Xlo),e(k,zlo),e(k,sh),e(sh,Dae),e(Dae,Wlo),e(sh,Qlo),e(sh,wB),e(wB,Hlo),e(sh,Ulo),e(k,Jlo),e(k,lh),e(lh,Gae),e(Gae,Ylo),e(lh,Klo),e(lh,AB),e(AB,Zlo),e(lh,eio),e(k,oio),e(k,Bs),e(Bs,Oae),e(Oae,rio),e(Bs,tio),e(Bs,yB),e(yB,aio),e(Bs,nio),e(Bs,LB),e(LB,sio),e(Bs,lio),e(k,iio),e(k,Is),e(Is,Vae),e(Vae,dio),e(Is,cio),e(Is,xB),e(xB,fio),e(Is,mio),e(Is,$B),e($B,gio),e(Is,hio),e(k,pio),e(k,qs),e(qs,Xae),e(Xae,uio),e(qs,_io),e(qs,kB),e(kB,bio),e(qs,vio),e(qs,SB),e(SB,Fio),e(qs,Tio),e(k,Mio),e(k,Ns),e(Ns,zae),e(zae,Eio),e(Ns,Cio),e(Ns,RB),e(RB,wio),e(Ns,Aio),e(Ns,PB),e(PB,yio),e(Ns,Lio),e(Ar,xio),M(ih,Ar,null),e(Ao,$io),e(Ao,dh),M(jA,dh,null),e(dh,kio),e(dh,Wae),e(Wae,Sio),b(f,Sqe,_),b(f,Li,_),e(Li,ch),e(ch,Qae),M(DA,Qae,null),e(Li,Rio),e(Li,Hae),e(Hae,Pio),b(f,Rqe,_),b(f,yo,_),M(GA,yo,null),e(yo,Bio),e(yo,OA),e(OA,Iio),e(OA,BB),e(BB,qio),e(OA,Nio),e(yo,jio),e(yo,VA),e(VA,Dio),e(VA,Uae),e(Uae,Gio),e(VA,Oio),e(yo,Vio),e(yo,He),M(XA,He,null),e(He,Xio),e(He,Jae),e(Jae,zio),e(He,Wio),e(He,ka),e(ka,Qio),e(ka,Yae),e(Yae,Hio),e(ka,Uio),e(ka,Kae),e(Kae,Jio),e(ka,Yio),e(ka,Zae),e(Zae,Kio),e(ka,Zio),e(He,edo),e(He,Z),e(Z,fh),e(fh,ene),e(ene,odo),e(fh,rdo),e(fh,IB),e(IB,tdo),e(fh,ado),e(Z,ndo),e(Z,mh),e(mh,one),e(one,sdo),e(mh,ldo),e(mh,qB),e(qB,ido),e(mh,ddo),e(Z,cdo),e(Z,gh),e(gh,rne),e(rne,fdo),e(gh,mdo),e(gh,NB),e(NB,gdo),e(gh,hdo),e(Z,pdo),e(Z,hh),e(hh,tne),e(tne,udo),e(hh,_do),e(hh,jB),e(jB,bdo),e(hh,vdo),e(Z,Fdo),e(Z,ph),e(ph,ane),e(ane,Tdo),e(ph,Mdo),e(ph,DB),e(DB,Edo),e(ph,Cdo),e(Z,wdo),e(Z,uh),e(uh,nne),e(nne,Ado),e(uh,ydo),e(uh,GB),e(GB,Ldo),e(uh,xdo),e(Z,$do),e(Z,_h),e(_h,sne),e(sne,kdo),e(_h,Sdo),e(_h,OB),e(OB,Rdo),e(_h,Pdo),e(Z,Bdo),e(Z,bh),e(bh,lne),e(lne,Ido),e(bh,qdo),e(bh,VB),e(VB,Ndo),e(bh,jdo),e(Z,Ddo),e(Z,vh),e(vh,ine),e(ine,Gdo),e(vh,Odo),e(vh,XB),e(XB,Vdo),e(vh,Xdo),e(Z,zdo),e(Z,Fh),e(Fh,dne),e(dne,Wdo),e(Fh,Qdo),e(Fh,zB),e(zB,Hdo),e(Fh,Udo),e(Z,Jdo),e(Z,Th),e(Th,cne),e(cne,Ydo),e(Th,Kdo),e(Th,WB),e(WB,Zdo),e(Th,eco),e(Z,oco),e(Z,Mh),e(Mh,fne),e(fne,rco),e(Mh,tco),e(Mh,QB),e(QB,aco),e(Mh,nco),e(Z,sco),e(Z,Eh),e(Eh,mne),e(mne,lco),e(Eh,ico),e(Eh,HB),e(HB,dco),e(Eh,cco),e(Z,fco),e(Z,Ch),e(Ch,gne),e(gne,mco),e(Ch,gco),e(Ch,UB),e(UB,hco),e(Ch,pco),e(Z,uco),e(Z,wh),e(wh,hne),e(hne,_co),e(wh,bco),e(wh,JB),e(JB,vco),e(wh,Fco),e(Z,Tco),e(Z,Ah),e(Ah,pne),e(pne,Mco),e(Ah,Eco),e(Ah,YB),e(YB,Cco),e(Ah,wco),e(Z,Aco),e(Z,yh),e(yh,une),e(une,yco),e(yh,Lco),e(yh,KB),e(KB,xco),e(yh,$co),e(Z,kco),e(Z,Lh),e(Lh,_ne),e(_ne,Sco),e(Lh,Rco),e(Lh,ZB),e(ZB,Pco),e(Lh,Bco),e(Z,Ico),e(Z,xh),e(xh,bne),e(bne,qco),e(xh,Nco),e(xh,eI),e(eI,jco),e(xh,Dco),e(Z,Gco),e(Z,$h),e($h,vne),e(vne,Oco),e($h,Vco),e($h,oI),e(oI,Xco),e($h,zco),e(Z,Wco),e(Z,kh),e(kh,Fne),e(Fne,Qco),e(kh,Hco),e(kh,rI),e(rI,Uco),e(kh,Jco),e(Z,Yco),e(Z,Sh),e(Sh,Tne),e(Tne,Kco),e(Sh,Zco),e(Sh,tI),e(tI,efo),e(Sh,ofo),e(Z,rfo),e(Z,Rh),e(Rh,Mne),e(Mne,tfo),e(Rh,afo),e(Rh,aI),e(aI,nfo),e(Rh,sfo),e(Z,lfo),e(Z,Ph),e(Ph,Ene),e(Ene,ifo),e(Ph,dfo),e(Ph,nI),e(nI,cfo),e(Ph,ffo),e(Z,mfo),e(Z,Bh),e(Bh,Cne),e(Cne,gfo),e(Bh,hfo),e(Bh,sI),e(sI,pfo),e(Bh,ufo),e(Z,_fo),e(Z,Ih),e(Ih,wne),e(wne,bfo),e(Ih,vfo),e(Ih,lI),e(lI,Ffo),e(Ih,Tfo),e(Z,Mfo),e(Z,qh),e(qh,Ane),e(Ane,Efo),e(qh,Cfo),e(qh,iI),e(iI,wfo),e(qh,Afo),e(He,yfo),M(Nh,He,null),e(He,Lfo),M(jh,He,null),e(yo,xfo),e(yo,Dh),M(zA,Dh,null),e(Dh,$fo),e(Dh,yne),e(yne,kfo),b(f,Pqe,_),b(f,xi,_),e(xi,Gh),e(Gh,Lne),M(WA,Lne,null),e(xi,Sfo),e(xi,xne),e(xne,Rfo),b(f,Bqe,_),b(f,Lo,_),M(QA,Lo,null),e(Lo,Pfo),e(Lo,HA),e(HA,Bfo),e(HA,dI),e(dI,Ifo),e(HA,qfo),e(Lo,Nfo),e(Lo,UA),e(UA,jfo),e(UA,$ne),e($ne,Dfo),e(UA,Gfo),e(Lo,Ofo),e(Lo,Ue),M(JA,Ue,null),e(Ue,Vfo),e(Ue,kne),e(kne,Xfo),e(Ue,zfo),e(Ue,$i),e($i,Wfo),e($i,Sne),e(Sne,Qfo),e($i,Hfo),e($i,Rne),e(Rne,Ufo),e($i,Jfo),e(Ue,Yfo),e(Ue,pe),e(pe,Oh),e(Oh,Pne),e(Pne,Kfo),e(Oh,Zfo),e(Oh,cI),e(cI,emo),e(Oh,omo),e(pe,rmo),e(pe,Vh),e(Vh,Bne),e(Bne,tmo),e(Vh,amo),e(Vh,Ine),e(Ine,nmo),e(Vh,smo),e(pe,lmo),e(pe,Xh),e(Xh,qne),e(qne,imo),e(Xh,dmo),e(Xh,fI),e(fI,cmo),e(Xh,fmo),e(pe,mmo),e(pe,zh),e(zh,Nne),e(Nne,gmo),e(zh,hmo),e(zh,mI),e(mI,pmo),e(zh,umo),e(pe,_mo),e(pe,Wh),e(Wh,jne),e(jne,bmo),e(Wh,vmo),e(Wh,gI),e(gI,Fmo),e(Wh,Tmo),e(pe,Mmo),e(pe,Qh),e(Qh,Dne),e(Dne,Emo),e(Qh,Cmo),e(Qh,hI),e(hI,wmo),e(Qh,Amo),e(pe,ymo),e(pe,Hh),e(Hh,Gne),e(Gne,Lmo),e(Hh,xmo),e(Hh,pI),e(pI,$mo),e(Hh,kmo),e(pe,Smo),e(pe,Uh),e(Uh,One),e(One,Rmo),e(Uh,Pmo),e(Uh,uI),e(uI,Bmo),e(Uh,Imo),e(pe,qmo),e(pe,Jh),e(Jh,Vne),e(Vne,Nmo),e(Jh,jmo),e(Jh,_I),e(_I,Dmo),e(Jh,Gmo),e(pe,Omo),e(pe,Yh),e(Yh,Xne),e(Xne,Vmo),e(Yh,Xmo),e(Yh,bI),e(bI,zmo),e(Yh,Wmo),e(pe,Qmo),e(pe,Kh),e(Kh,zne),e(zne,Hmo),e(Kh,Umo),e(Kh,vI),e(vI,Jmo),e(Kh,Ymo),e(pe,Kmo),e(pe,Zh),e(Zh,Wne),e(Wne,Zmo),e(Zh,ego),e(Zh,FI),e(FI,ogo),e(Zh,rgo),e(pe,tgo),e(pe,ep),e(ep,Qne),e(Qne,ago),e(ep,ngo),e(ep,TI),e(TI,sgo),e(ep,lgo),e(pe,igo),e(pe,op),e(op,Hne),e(Hne,dgo),e(op,cgo),e(op,MI),e(MI,fgo),e(op,mgo),e(pe,ggo),e(pe,rp),e(rp,Une),e(Une,hgo),e(rp,pgo),e(rp,EI),e(EI,ugo),e(rp,_go),e(pe,bgo),e(pe,tp),e(tp,Jne),e(Jne,vgo),e(tp,Fgo),e(tp,CI),e(CI,Tgo),e(tp,Mgo),e(Ue,Ego),M(ap,Ue,null),e(Ue,Cgo),M(np,Ue,null),e(Lo,wgo),e(Lo,sp),M(YA,sp,null),e(sp,Ago),e(sp,Yne),e(Yne,ygo),b(f,Iqe,_),b(f,ki,_),e(ki,lp),e(lp,Kne),M(KA,Kne,null),e(ki,Lgo),e(ki,Zne),e(Zne,xgo),b(f,qqe,_),b(f,xo,_),M(ZA,xo,null),e(xo,$go),e(xo,Si),e(Si,kgo),e(Si,wI),e(wI,Sgo),e(Si,Rgo),e(Si,AI),e(AI,Pgo),e(Si,Bgo),e(xo,Igo),e(xo,e0),e(e0,qgo),e(e0,ese),e(ese,Ngo),e(e0,jgo),e(xo,Dgo),e(xo,nt),M(o0,nt,null),e(nt,Ggo),e(nt,ose),e(ose,Ogo),e(nt,Vgo),e(nt,Ri),e(Ri,Xgo),e(Ri,rse),e(rse,zgo),e(Ri,Wgo),e(Ri,yI),e(yI,Qgo),e(Ri,Hgo),e(nt,Ugo),M(ip,nt,null),e(xo,Jgo),e(xo,Je),M(r0,Je,null),e(Je,Ygo),e(Je,tse),e(tse,Kgo),e(Je,Zgo),e(Je,Sa),e(Sa,eho),e(Sa,ase),e(ase,oho),e(Sa,rho),e(Sa,nse),e(nse,tho),e(Sa,aho),e(Sa,sse),e(sse,nho),e(Sa,sho),e(Je,lho),e(Je,x),e(x,dp),e(dp,lse),e(lse,iho),e(dp,dho),e(dp,LI),e(LI,cho),e(dp,fho),e(x,mho),e(x,cp),e(cp,ise),e(ise,gho),e(cp,hho),e(cp,xI),e(xI,pho),e(cp,uho),e(x,_ho),e(x,fp),e(fp,dse),e(dse,bho),e(fp,vho),e(fp,$I),e($I,Fho),e(fp,Tho),e(x,Mho),e(x,mp),e(mp,cse),e(cse,Eho),e(mp,Cho),e(mp,kI),e(kI,who),e(mp,Aho),e(x,yho),e(x,gp),e(gp,fse),e(fse,Lho),e(gp,xho),e(gp,SI),e(SI,$ho),e(gp,kho),e(x,Sho),e(x,hp),e(hp,mse),e(mse,Rho),e(hp,Pho),e(hp,RI),e(RI,Bho),e(hp,Iho),e(x,qho),e(x,pp),e(pp,gse),e(gse,Nho),e(pp,jho),e(pp,PI),e(PI,Dho),e(pp,Gho),e(x,Oho),e(x,up),e(up,hse),e(hse,Vho),e(up,Xho),e(up,BI),e(BI,zho),e(up,Who),e(x,Qho),e(x,_p),e(_p,pse),e(pse,Hho),e(_p,Uho),e(_p,II),e(II,Jho),e(_p,Yho),e(x,Kho),e(x,bp),e(bp,use),e(use,Zho),e(bp,epo),e(bp,qI),e(qI,opo),e(bp,rpo),e(x,tpo),e(x,vp),e(vp,_se),e(_se,apo),e(vp,npo),e(vp,NI),e(NI,spo),e(vp,lpo),e(x,ipo),e(x,Fp),e(Fp,bse),e(bse,dpo),e(Fp,cpo),e(Fp,jI),e(jI,fpo),e(Fp,mpo),e(x,gpo),e(x,Tp),e(Tp,vse),e(vse,hpo),e(Tp,ppo),e(Tp,DI),e(DI,upo),e(Tp,_po),e(x,bpo),e(x,Mp),e(Mp,Fse),e(Fse,vpo),e(Mp,Fpo),e(Mp,GI),e(GI,Tpo),e(Mp,Mpo),e(x,Epo),e(x,Ep),e(Ep,Tse),e(Tse,Cpo),e(Ep,wpo),e(Ep,OI),e(OI,Apo),e(Ep,ypo),e(x,Lpo),e(x,Cp),e(Cp,Mse),e(Mse,xpo),e(Cp,$po),e(Cp,VI),e(VI,kpo),e(Cp,Spo),e(x,Rpo),e(x,wp),e(wp,Ese),e(Ese,Ppo),e(wp,Bpo),e(wp,XI),e(XI,Ipo),e(wp,qpo),e(x,Npo),e(x,Ap),e(Ap,Cse),e(Cse,jpo),e(Ap,Dpo),e(Ap,zI),e(zI,Gpo),e(Ap,Opo),e(x,Vpo),e(x,yp),e(yp,wse),e(wse,Xpo),e(yp,zpo),e(yp,WI),e(WI,Wpo),e(yp,Qpo),e(x,Hpo),e(x,Lp),e(Lp,Ase),e(Ase,Upo),e(Lp,Jpo),e(Lp,QI),e(QI,Ypo),e(Lp,Kpo),e(x,Zpo),e(x,xp),e(xp,yse),e(yse,euo),e(xp,ouo),e(xp,HI),e(HI,ruo),e(xp,tuo),e(x,auo),e(x,$p),e($p,Lse),e(Lse,nuo),e($p,suo),e($p,UI),e(UI,luo),e($p,iuo),e(x,duo),e(x,kp),e(kp,xse),e(xse,cuo),e(kp,fuo),e(kp,JI),e(JI,muo),e(kp,guo),e(x,huo),e(x,Sp),e(Sp,$se),e($se,puo),e(Sp,uuo),e(Sp,YI),e(YI,_uo),e(Sp,buo),e(x,vuo),e(x,Rp),e(Rp,kse),e(kse,Fuo),e(Rp,Tuo),e(Rp,KI),e(KI,Muo),e(Rp,Euo),e(x,Cuo),e(x,Pp),e(Pp,Sse),e(Sse,wuo),e(Pp,Auo),e(Pp,ZI),e(ZI,yuo),e(Pp,Luo),e(x,xuo),e(x,Bp),e(Bp,Rse),e(Rse,$uo),e(Bp,kuo),e(Bp,eq),e(eq,Suo),e(Bp,Ruo),e(x,Puo),e(x,Ip),e(Ip,Pse),e(Pse,Buo),e(Ip,Iuo),e(Ip,oq),e(oq,quo),e(Ip,Nuo),e(x,juo),e(x,qp),e(qp,Bse),e(Bse,Duo),e(qp,Guo),e(qp,rq),e(rq,Ouo),e(qp,Vuo),e(x,Xuo),e(x,Np),e(Np,Ise),e(Ise,zuo),e(Np,Wuo),e(Np,tq),e(tq,Quo),e(Np,Huo),e(x,Uuo),e(x,jp),e(jp,qse),e(qse,Juo),e(jp,Yuo),e(jp,aq),e(aq,Kuo),e(jp,Zuo),e(x,e_o),e(x,js),e(js,Nse),e(Nse,o_o),e(js,r_o),e(js,nq),e(nq,t_o),e(js,a_o),e(js,sq),e(sq,n_o),e(js,s_o),e(x,l_o),e(x,Dp),e(Dp,jse),e(jse,i_o),e(Dp,d_o),e(Dp,lq),e(lq,c_o),e(Dp,f_o),e(x,m_o),e(x,Gp),e(Gp,Dse),e(Dse,g_o),e(Gp,h_o),e(Gp,iq),e(iq,p_o),e(Gp,u_o),e(x,__o),e(x,Op),e(Op,Gse),e(Gse,b_o),e(Op,v_o),e(Op,dq),e(dq,F_o),e(Op,T_o),e(x,M_o),e(x,Vp),e(Vp,Ose),e(Ose,E_o),e(Vp,C_o),e(Vp,cq),e(cq,w_o),e(Vp,A_o),e(x,y_o),e(x,Xp),e(Xp,Vse),e(Vse,L_o),e(Xp,x_o),e(Xp,fq),e(fq,$_o),e(Xp,k_o),e(x,S_o),e(x,zp),e(zp,Xse),e(Xse,R_o),e(zp,P_o),e(zp,mq),e(mq,B_o),e(zp,I_o),e(x,q_o),e(x,Wp),e(Wp,zse),e(zse,N_o),e(Wp,j_o),e(Wp,gq),e(gq,D_o),e(Wp,G_o),e(x,O_o),e(x,Qp),e(Qp,Wse),e(Wse,V_o),e(Qp,X_o),e(Qp,hq),e(hq,z_o),e(Qp,W_o),e(x,Q_o),e(x,Hp),e(Hp,Qse),e(Qse,H_o),e(Hp,U_o),e(Hp,pq),e(pq,J_o),e(Hp,Y_o),e(x,K_o),e(x,Up),e(Up,Hse),e(Hse,Z_o),e(Up,e2o),e(Up,uq),e(uq,o2o),e(Up,r2o),e(x,t2o),e(x,Jp),e(Jp,Use),e(Use,a2o),e(Jp,n2o),e(Jp,_q),e(_q,s2o),e(Jp,l2o),e(x,i2o),e(x,Yp),e(Yp,Jse),e(Jse,d2o),e(Yp,c2o),e(Yp,bq),e(bq,f2o),e(Yp,m2o),e(x,g2o),e(x,Kp),e(Kp,Yse),e(Yse,h2o),e(Kp,p2o),e(Kp,vq),e(vq,u2o),e(Kp,_2o),e(x,b2o),e(x,Zp),e(Zp,Kse),e(Kse,v2o),e(Zp,F2o),e(Zp,Fq),e(Fq,T2o),e(Zp,M2o),e(x,E2o),e(x,eu),e(eu,Zse),e(Zse,C2o),e(eu,w2o),e(eu,Tq),e(Tq,A2o),e(eu,y2o),e(x,L2o),e(x,ou),e(ou,ele),e(ele,x2o),e(ou,$2o),e(ou,Mq),e(Mq,k2o),e(ou,S2o),e(x,R2o),e(x,ru),e(ru,ole),e(ole,P2o),e(ru,B2o),e(ru,Eq),e(Eq,I2o),e(ru,q2o),e(x,N2o),e(x,tu),e(tu,rle),e(rle,j2o),e(tu,D2o),e(tu,Cq),e(Cq,G2o),e(tu,O2o),e(x,V2o),e(x,au),e(au,tle),e(tle,X2o),e(au,z2o),e(au,wq),e(wq,W2o),e(au,Q2o),e(x,H2o),e(x,nu),e(nu,ale),e(ale,U2o),e(nu,J2o),e(nu,Aq),e(Aq,Y2o),e(nu,K2o),e(x,Z2o),e(x,su),e(su,nle),e(nle,e1o),e(su,o1o),e(su,yq),e(yq,r1o),e(su,t1o),e(x,a1o),e(x,lu),e(lu,sle),e(sle,n1o),e(lu,s1o),e(lu,Lq),e(Lq,l1o),e(lu,i1o),e(x,d1o),e(x,iu),e(iu,lle),e(lle,c1o),e(iu,f1o),e(iu,xq),e(xq,m1o),e(iu,g1o),e(x,h1o),e(x,du),e(du,ile),e(ile,p1o),e(du,u1o),e(du,$q),e($q,_1o),e(du,b1o),e(x,v1o),e(x,cu),e(cu,dle),e(dle,F1o),e(cu,T1o),e(cu,kq),e(kq,M1o),e(cu,E1o),e(x,C1o),e(x,fu),e(fu,cle),e(cle,w1o),e(fu,A1o),e(fu,Sq),e(Sq,y1o),e(fu,L1o),e(x,x1o),e(x,mu),e(mu,fle),e(fle,$1o),e(mu,k1o),e(mu,Rq),e(Rq,S1o),e(mu,R1o),e(x,P1o),e(x,gu),e(gu,mle),e(mle,B1o),e(gu,I1o),e(gu,Pq),e(Pq,q1o),e(gu,N1o),e(x,j1o),e(x,hu),e(hu,gle),e(gle,D1o),e(hu,G1o),e(hu,Bq),e(Bq,O1o),e(hu,V1o),e(x,X1o),e(x,pu),e(pu,hle),e(hle,z1o),e(pu,W1o),e(pu,Iq),e(Iq,Q1o),e(pu,H1o),e(x,U1o),e(x,uu),e(uu,ple),e(ple,J1o),e(uu,Y1o),e(uu,qq),e(qq,K1o),e(uu,Z1o),e(x,ebo),e(x,_u),e(_u,ule),e(ule,obo),e(_u,rbo),e(_u,Nq),e(Nq,tbo),e(_u,abo),e(x,nbo),e(x,bu),e(bu,_le),e(_le,sbo),e(bu,lbo),e(bu,jq),e(jq,ibo),e(bu,dbo),e(x,cbo),e(x,vu),e(vu,ble),e(ble,fbo),e(vu,mbo),e(vu,Dq),e(Dq,gbo),e(vu,hbo),e(x,pbo),e(x,Fu),e(Fu,vle),e(vle,ubo),e(Fu,_bo),e(Fu,Gq),e(Gq,bbo),e(Fu,vbo),e(x,Fbo),e(x,Tu),e(Tu,Fle),e(Fle,Tbo),e(Tu,Mbo),e(Tu,Oq),e(Oq,Ebo),e(Tu,Cbo),e(x,wbo),e(x,Mu),e(Mu,Tle),e(Tle,Abo),e(Mu,ybo),e(Mu,Vq),e(Vq,Lbo),e(Mu,xbo),e(x,$bo),e(x,Eu),e(Eu,Mle),e(Mle,kbo),e(Eu,Sbo),e(Eu,Xq),e(Xq,Rbo),e(Eu,Pbo),e(x,Bbo),e(x,Cu),e(Cu,Ele),e(Ele,Ibo),e(Cu,qbo),e(Cu,zq),e(zq,Nbo),e(Cu,jbo),e(x,Dbo),e(x,wu),e(wu,Cle),e(Cle,Gbo),e(wu,Obo),e(wu,Wq),e(Wq,Vbo),e(wu,Xbo),e(x,zbo),e(x,Au),e(Au,wle),e(wle,Wbo),e(Au,Qbo),e(Au,Qq),e(Qq,Hbo),e(Au,Ubo),e(x,Jbo),e(x,yu),e(yu,Ale),e(Ale,Ybo),e(yu,Kbo),e(yu,Hq),e(Hq,Zbo),e(yu,evo),e(x,ovo),e(x,Lu),e(Lu,yle),e(yle,rvo),e(Lu,tvo),e(Lu,Uq),e(Uq,avo),e(Lu,nvo),e(x,svo),e(x,xu),e(xu,Lle),e(Lle,lvo),e(xu,ivo),e(xu,Jq),e(Jq,dvo),e(xu,cvo),e(x,fvo),e(x,$u),e($u,xle),e(xle,mvo),e($u,gvo),e($u,Yq),e(Yq,hvo),e($u,pvo),e(x,uvo),e(x,ku),e(ku,$le),e($le,_vo),e(ku,bvo),e(ku,Kq),e(Kq,vvo),e(ku,Fvo),e(x,Tvo),e(x,Su),e(Su,kle),e(kle,Mvo),e(Su,Evo),e(Su,Zq),e(Zq,Cvo),e(Su,wvo),e(x,Avo),e(x,Ru),e(Ru,Sle),e(Sle,yvo),e(Ru,Lvo),e(Ru,eN),e(eN,xvo),e(Ru,$vo),e(x,kvo),e(x,Pu),e(Pu,Rle),e(Rle,Svo),e(Pu,Rvo),e(Pu,oN),e(oN,Pvo),e(Pu,Bvo),e(x,Ivo),e(x,Bu),e(Bu,Ple),e(Ple,qvo),e(Bu,Nvo),e(Bu,rN),e(rN,jvo),e(Bu,Dvo),e(x,Gvo),e(x,Iu),e(Iu,Ble),e(Ble,Ovo),e(Iu,Vvo),e(Iu,tN),e(tN,Xvo),e(Iu,zvo),e(x,Wvo),e(x,qu),e(qu,Ile),e(Ile,Qvo),e(qu,Hvo),e(qu,aN),e(aN,Uvo),e(qu,Jvo),e(x,Yvo),e(x,Nu),e(Nu,qle),e(qle,Kvo),e(Nu,Zvo),e(Nu,nN),e(nN,eFo),e(Nu,oFo),e(x,rFo),e(x,ju),e(ju,Nle),e(Nle,tFo),e(ju,aFo),e(ju,sN),e(sN,nFo),e(ju,sFo),e(x,lFo),e(x,Du),e(Du,jle),e(jle,iFo),e(Du,dFo),e(Du,lN),e(lN,cFo),e(Du,fFo),e(x,mFo),e(x,Gu),e(Gu,Dle),e(Dle,gFo),e(Gu,hFo),e(Gu,iN),e(iN,pFo),e(Gu,uFo),e(x,_Fo),e(x,Ou),e(Ou,Gle),e(Gle,bFo),e(Ou,vFo),e(Ou,dN),e(dN,FFo),e(Ou,TFo),e(x,MFo),e(x,Vu),e(Vu,Ole),e(Ole,EFo),e(Vu,CFo),e(Vu,cN),e(cN,wFo),e(Vu,AFo),e(x,yFo),e(x,Xu),e(Xu,Vle),e(Vle,LFo),e(Xu,xFo),e(Xu,fN),e(fN,$Fo),e(Xu,kFo),e(x,SFo),e(x,zu),e(zu,Xle),e(Xle,RFo),e(zu,PFo),e(zu,mN),e(mN,BFo),e(zu,IFo),e(x,qFo),e(x,Wu),e(Wu,zle),e(zle,NFo),e(Wu,jFo),e(Wu,gN),e(gN,DFo),e(Wu,GFo),e(x,OFo),e(x,Qu),e(Qu,Wle),e(Wle,VFo),e(Qu,XFo),e(Qu,hN),e(hN,zFo),e(Qu,WFo),e(x,QFo),e(x,Hu),e(Hu,Qle),e(Qle,HFo),e(Hu,UFo),e(Hu,pN),e(pN,JFo),e(Hu,YFo),e(x,KFo),e(x,Uu),e(Uu,Hle),e(Hle,ZFo),e(Uu,e6o),e(Uu,uN),e(uN,o6o),e(Uu,r6o),e(x,t6o),e(x,Ju),e(Ju,Ule),e(Ule,a6o),e(Ju,n6o),e(Ju,_N),e(_N,s6o),e(Ju,l6o),e(x,i6o),e(x,Yu),e(Yu,Jle),e(Jle,d6o),e(Yu,c6o),e(Yu,bN),e(bN,f6o),e(Yu,m6o),e(Je,g6o),e(Je,Ku),e(Ku,h6o),e(Ku,Yle),e(Yle,p6o),e(Ku,u6o),e(Ku,Kle),e(Kle,_6o),e(Je,b6o),M(Zu,Je,null),b(f,Nqe,_),b(f,Pi,_),e(Pi,e_),e(e_,Zle),M(t0,Zle,null),e(Pi,v6o),e(Pi,eie),e(eie,F6o),b(f,jqe,_),b(f,$o,_),M(a0,$o,null),e($o,T6o),e($o,Bi),e(Bi,M6o),e(Bi,vN),e(vN,E6o),e(Bi,C6o),e(Bi,FN),e(FN,w6o),e(Bi,A6o),e($o,y6o),e($o,n0),e(n0,L6o),e(n0,oie),e(oie,x6o),e(n0,$6o),e($o,k6o),e($o,st),M(s0,st,null),e(st,S6o),e(st,rie),e(rie,R6o),e(st,P6o),e(st,Ii),e(Ii,B6o),e(Ii,tie),e(tie,I6o),e(Ii,q6o),e(Ii,TN),e(TN,N6o),e(Ii,j6o),e(st,D6o),M(o_,st,null),e($o,G6o),e($o,Ye),M(l0,Ye,null),e(Ye,O6o),e(Ye,aie),e(aie,V6o),e(Ye,X6o),e(Ye,Ra),e(Ra,z6o),e(Ra,nie),e(nie,W6o),e(Ra,Q6o),e(Ra,sie),e(sie,H6o),e(Ra,U6o),e(Ra,lie),e(lie,J6o),e(Ra,Y6o),e(Ye,K6o),e(Ye,G),e(G,r_),e(r_,iie),e(iie,Z6o),e(r_,eTo),e(r_,MN),e(MN,oTo),e(r_,rTo),e(G,tTo),e(G,t_),e(t_,die),e(die,aTo),e(t_,nTo),e(t_,EN),e(EN,sTo),e(t_,lTo),e(G,iTo),e(G,a_),e(a_,cie),e(cie,dTo),e(a_,cTo),e(a_,CN),e(CN,fTo),e(a_,mTo),e(G,gTo),e(G,n_),e(n_,fie),e(fie,hTo),e(n_,pTo),e(n_,wN),e(wN,uTo),e(n_,_To),e(G,bTo),e(G,s_),e(s_,mie),e(mie,vTo),e(s_,FTo),e(s_,AN),e(AN,TTo),e(s_,MTo),e(G,ETo),e(G,l_),e(l_,gie),e(gie,CTo),e(l_,wTo),e(l_,yN),e(yN,ATo),e(l_,yTo),e(G,LTo),e(G,i_),e(i_,hie),e(hie,xTo),e(i_,$To),e(i_,LN),e(LN,kTo),e(i_,STo),e(G,RTo),e(G,d_),e(d_,pie),e(pie,PTo),e(d_,BTo),e(d_,xN),e(xN,ITo),e(d_,qTo),e(G,NTo),e(G,c_),e(c_,uie),e(uie,jTo),e(c_,DTo),e(c_,$N),e($N,GTo),e(c_,OTo),e(G,VTo),e(G,f_),e(f_,_ie),e(_ie,XTo),e(f_,zTo),e(f_,kN),e(kN,WTo),e(f_,QTo),e(G,HTo),e(G,m_),e(m_,bie),e(bie,UTo),e(m_,JTo),e(m_,SN),e(SN,YTo),e(m_,KTo),e(G,ZTo),e(G,g_),e(g_,vie),e(vie,e8o),e(g_,o8o),e(g_,RN),e(RN,r8o),e(g_,t8o),e(G,a8o),e(G,h_),e(h_,Fie),e(Fie,n8o),e(h_,s8o),e(h_,PN),e(PN,l8o),e(h_,i8o),e(G,d8o),e(G,p_),e(p_,Tie),e(Tie,c8o),e(p_,f8o),e(p_,BN),e(BN,m8o),e(p_,g8o),e(G,h8o),e(G,u_),e(u_,Mie),e(Mie,p8o),e(u_,u8o),e(u_,IN),e(IN,_8o),e(u_,b8o),e(G,v8o),e(G,__),e(__,Eie),e(Eie,F8o),e(__,T8o),e(__,qN),e(qN,M8o),e(__,E8o),e(G,C8o),e(G,b_),e(b_,Cie),e(Cie,w8o),e(b_,A8o),e(b_,NN),e(NN,y8o),e(b_,L8o),e(G,x8o),e(G,v_),e(v_,wie),e(wie,$8o),e(v_,k8o),e(v_,jN),e(jN,S8o),e(v_,R8o),e(G,P8o),e(G,F_),e(F_,Aie),e(Aie,B8o),e(F_,I8o),e(F_,DN),e(DN,q8o),e(F_,N8o),e(G,j8o),e(G,T_),e(T_,yie),e(yie,D8o),e(T_,G8o),e(T_,GN),e(GN,O8o),e(T_,V8o),e(G,X8o),e(G,M_),e(M_,Lie),e(Lie,z8o),e(M_,W8o),e(M_,ON),e(ON,Q8o),e(M_,H8o),e(G,U8o),e(G,E_),e(E_,xie),e(xie,J8o),e(E_,Y8o),e(E_,VN),e(VN,K8o),e(E_,Z8o),e(G,e7o),e(G,C_),e(C_,$ie),e($ie,o7o),e(C_,r7o),e(C_,XN),e(XN,t7o),e(C_,a7o),e(G,n7o),e(G,w_),e(w_,kie),e(kie,s7o),e(w_,l7o),e(w_,zN),e(zN,i7o),e(w_,d7o),e(G,c7o),e(G,A_),e(A_,Sie),e(Sie,f7o),e(A_,m7o),e(A_,WN),e(WN,g7o),e(A_,h7o),e(G,p7o),e(G,y_),e(y_,Rie),e(Rie,u7o),e(y_,_7o),e(y_,QN),e(QN,b7o),e(y_,v7o),e(G,F7o),e(G,L_),e(L_,Pie),e(Pie,T7o),e(L_,M7o),e(L_,HN),e(HN,E7o),e(L_,C7o),e(G,w7o),e(G,x_),e(x_,Bie),e(Bie,A7o),e(x_,y7o),e(x_,UN),e(UN,L7o),e(x_,x7o),e(G,$7o),e(G,$_),e($_,Iie),e(Iie,k7o),e($_,S7o),e($_,JN),e(JN,R7o),e($_,P7o),e(G,B7o),e(G,k_),e(k_,qie),e(qie,I7o),e(k_,q7o),e(k_,YN),e(YN,N7o),e(k_,j7o),e(G,D7o),e(G,S_),e(S_,Nie),e(Nie,G7o),e(S_,O7o),e(S_,KN),e(KN,V7o),e(S_,X7o),e(G,z7o),e(G,R_),e(R_,jie),e(jie,W7o),e(R_,Q7o),e(R_,ZN),e(ZN,H7o),e(R_,U7o),e(G,J7o),e(G,P_),e(P_,Die),e(Die,Y7o),e(P_,K7o),e(P_,ej),e(ej,Z7o),e(P_,eMo),e(G,oMo),e(G,B_),e(B_,Gie),e(Gie,rMo),e(B_,tMo),e(B_,oj),e(oj,aMo),e(B_,nMo),e(G,sMo),e(G,I_),e(I_,Oie),e(Oie,lMo),e(I_,iMo),e(I_,rj),e(rj,dMo),e(I_,cMo),e(G,fMo),e(G,q_),e(q_,Vie),e(Vie,mMo),e(q_,gMo),e(q_,tj),e(tj,hMo),e(q_,pMo),e(G,uMo),e(G,N_),e(N_,Xie),e(Xie,_Mo),e(N_,bMo),e(N_,aj),e(aj,vMo),e(N_,FMo),e(G,TMo),e(G,j_),e(j_,zie),e(zie,MMo),e(j_,EMo),e(j_,nj),e(nj,CMo),e(j_,wMo),e(G,AMo),e(G,D_),e(D_,Wie),e(Wie,yMo),e(D_,LMo),e(D_,sj),e(sj,xMo),e(D_,$Mo),e(G,kMo),e(G,G_),e(G_,Qie),e(Qie,SMo),e(G_,RMo),e(G_,lj),e(lj,PMo),e(G_,BMo),e(G,IMo),e(G,O_),e(O_,Hie),e(Hie,qMo),e(O_,NMo),e(O_,ij),e(ij,jMo),e(O_,DMo),e(Ye,GMo),e(Ye,V_),e(V_,OMo),e(V_,Uie),e(Uie,VMo),e(V_,XMo),e(V_,Jie),e(Jie,zMo),e(Ye,WMo),M(X_,Ye,null),b(f,Dqe,_),b(f,qi,_),e(qi,z_),e(z_,Yie),M(i0,Yie,null),e(qi,QMo),e(qi,Kie),e(Kie,HMo),b(f,Gqe,_),b(f,ko,_),M(d0,ko,null),e(ko,UMo),e(ko,Ni),e(Ni,JMo),e(Ni,dj),e(dj,YMo),e(Ni,KMo),e(Ni,cj),e(cj,ZMo),e(Ni,e4o),e(ko,o4o),e(ko,c0),e(c0,r4o),e(c0,Zie),e(Zie,t4o),e(c0,a4o),e(ko,n4o),e(ko,lt),M(f0,lt,null),e(lt,s4o),e(lt,ede),e(ede,l4o),e(lt,i4o),e(lt,ji),e(ji,d4o),e(ji,ode),e(ode,c4o),e(ji,f4o),e(ji,fj),e(fj,m4o),e(ji,g4o),e(lt,h4o),M(W_,lt,null),e(ko,p4o),e(ko,Ke),M(m0,Ke,null),e(Ke,u4o),e(Ke,rde),e(rde,_4o),e(Ke,b4o),e(Ke,Pa),e(Pa,v4o),e(Pa,tde),e(tde,F4o),e(Pa,T4o),e(Pa,ade),e(ade,M4o),e(Pa,E4o),e(Pa,nde),e(nde,C4o),e(Pa,w4o),e(Ke,A4o),e(Ke,z),e(z,Q_),e(Q_,sde),e(sde,y4o),e(Q_,L4o),e(Q_,mj),e(mj,x4o),e(Q_,$4o),e(z,k4o),e(z,H_),e(H_,lde),e(lde,S4o),e(H_,R4o),e(H_,gj),e(gj,P4o),e(H_,B4o),e(z,I4o),e(z,U_),e(U_,ide),e(ide,q4o),e(U_,N4o),e(U_,hj),e(hj,j4o),e(U_,D4o),e(z,G4o),e(z,J_),e(J_,dde),e(dde,O4o),e(J_,V4o),e(J_,pj),e(pj,X4o),e(J_,z4o),e(z,W4o),e(z,Y_),e(Y_,cde),e(cde,Q4o),e(Y_,H4o),e(Y_,uj),e(uj,U4o),e(Y_,J4o),e(z,Y4o),e(z,K_),e(K_,fde),e(fde,K4o),e(K_,Z4o),e(K_,_j),e(_j,eEo),e(K_,oEo),e(z,rEo),e(z,Z_),e(Z_,mde),e(mde,tEo),e(Z_,aEo),e(Z_,bj),e(bj,nEo),e(Z_,sEo),e(z,lEo),e(z,e2),e(e2,gde),e(gde,iEo),e(e2,dEo),e(e2,vj),e(vj,cEo),e(e2,fEo),e(z,mEo),e(z,o2),e(o2,hde),e(hde,gEo),e(o2,hEo),e(o2,Fj),e(Fj,pEo),e(o2,uEo),e(z,_Eo),e(z,r2),e(r2,pde),e(pde,bEo),e(r2,vEo),e(r2,Tj),e(Tj,FEo),e(r2,TEo),e(z,MEo),e(z,t2),e(t2,ude),e(ude,EEo),e(t2,CEo),e(t2,Mj),e(Mj,wEo),e(t2,AEo),e(z,yEo),e(z,a2),e(a2,_de),e(_de,LEo),e(a2,xEo),e(a2,Ej),e(Ej,$Eo),e(a2,kEo),e(z,SEo),e(z,n2),e(n2,bde),e(bde,REo),e(n2,PEo),e(n2,Cj),e(Cj,BEo),e(n2,IEo),e(z,qEo),e(z,s2),e(s2,vde),e(vde,NEo),e(s2,jEo),e(s2,wj),e(wj,DEo),e(s2,GEo),e(z,OEo),e(z,l2),e(l2,Fde),e(Fde,VEo),e(l2,XEo),e(l2,Aj),e(Aj,zEo),e(l2,WEo),e(z,QEo),e(z,i2),e(i2,Tde),e(Tde,HEo),e(i2,UEo),e(i2,yj),e(yj,JEo),e(i2,YEo),e(z,KEo),e(z,d2),e(d2,Mde),e(Mde,ZEo),e(d2,eCo),e(d2,Lj),e(Lj,oCo),e(d2,rCo),e(z,tCo),e(z,c2),e(c2,Ede),e(Ede,aCo),e(c2,nCo),e(c2,xj),e(xj,sCo),e(c2,lCo),e(z,iCo),e(z,f2),e(f2,Cde),e(Cde,dCo),e(f2,cCo),e(f2,$j),e($j,fCo),e(f2,mCo),e(z,gCo),e(z,m2),e(m2,wde),e(wde,hCo),e(m2,pCo),e(m2,kj),e(kj,uCo),e(m2,_Co),e(z,bCo),e(z,g2),e(g2,Ade),e(Ade,vCo),e(g2,FCo),e(g2,Sj),e(Sj,TCo),e(g2,MCo),e(z,ECo),e(z,h2),e(h2,yde),e(yde,CCo),e(h2,wCo),e(h2,Rj),e(Rj,ACo),e(h2,yCo),e(z,LCo),e(z,p2),e(p2,Lde),e(Lde,xCo),e(p2,$Co),e(p2,Pj),e(Pj,kCo),e(p2,SCo),e(z,RCo),e(z,u2),e(u2,xde),e(xde,PCo),e(u2,BCo),e(u2,Bj),e(Bj,ICo),e(u2,qCo),e(z,NCo),e(z,_2),e(_2,$de),e($de,jCo),e(_2,DCo),e(_2,Ij),e(Ij,GCo),e(_2,OCo),e(z,VCo),e(z,b2),e(b2,kde),e(kde,XCo),e(b2,zCo),e(b2,qj),e(qj,WCo),e(b2,QCo),e(z,HCo),e(z,v2),e(v2,Sde),e(Sde,UCo),e(v2,JCo),e(v2,Nj),e(Nj,YCo),e(v2,KCo),e(z,ZCo),e(z,F2),e(F2,Rde),e(Rde,e5o),e(F2,o5o),e(F2,jj),e(jj,r5o),e(F2,t5o),e(z,a5o),e(z,T2),e(T2,Pde),e(Pde,n5o),e(T2,s5o),e(T2,Dj),e(Dj,l5o),e(T2,i5o),e(z,d5o),e(z,M2),e(M2,Bde),e(Bde,c5o),e(M2,f5o),e(M2,Gj),e(Gj,m5o),e(M2,g5o),e(z,h5o),e(z,E2),e(E2,Ide),e(Ide,p5o),e(E2,u5o),e(E2,Oj),e(Oj,_5o),e(E2,b5o),e(z,v5o),e(z,C2),e(C2,qde),e(qde,F5o),e(C2,T5o),e(C2,Vj),e(Vj,M5o),e(C2,E5o),e(z,C5o),e(z,w2),e(w2,Nde),e(Nde,w5o),e(w2,A5o),e(w2,Xj),e(Xj,y5o),e(w2,L5o),e(z,x5o),e(z,A2),e(A2,jde),e(jde,$5o),e(A2,k5o),e(A2,zj),e(zj,S5o),e(A2,R5o),e(z,P5o),e(z,y2),e(y2,Dde),e(Dde,B5o),e(y2,I5o),e(y2,Wj),e(Wj,q5o),e(y2,N5o),e(z,j5o),e(z,L2),e(L2,Gde),e(Gde,D5o),e(L2,G5o),e(L2,Qj),e(Qj,O5o),e(L2,V5o),e(Ke,X5o),e(Ke,x2),e(x2,z5o),e(x2,Ode),e(Ode,W5o),e(x2,Q5o),e(x2,Vde),e(Vde,H5o),e(Ke,U5o),M($2,Ke,null),b(f,Oqe,_),b(f,Di,_),e(Di,k2),e(k2,Xde),M(g0,Xde,null),e(Di,J5o),e(Di,zde),e(zde,Y5o),b(f,Vqe,_),b(f,So,_),M(h0,So,null),e(So,K5o),e(So,Gi),e(Gi,Z5o),e(Gi,Hj),e(Hj,e3o),e(Gi,o3o),e(Gi,Uj),e(Uj,r3o),e(Gi,t3o),e(So,a3o),e(So,p0),e(p0,n3o),e(p0,Wde),e(Wde,s3o),e(p0,l3o),e(So,i3o),e(So,it),M(u0,it,null),e(it,d3o),e(it,Qde),e(Qde,c3o),e(it,f3o),e(it,Oi),e(Oi,m3o),e(Oi,Hde),e(Hde,g3o),e(Oi,h3o),e(Oi,Jj),e(Jj,p3o),e(Oi,u3o),e(it,_3o),M(S2,it,null),e(So,b3o),e(So,Ze),M(_0,Ze,null),e(Ze,v3o),e(Ze,Ude),e(Ude,F3o),e(Ze,T3o),e(Ze,Ba),e(Ba,M3o),e(Ba,Jde),e(Jde,E3o),e(Ba,C3o),e(Ba,Yde),e(Yde,w3o),e(Ba,A3o),e(Ba,Kde),e(Kde,y3o),e(Ba,L3o),e(Ze,x3o),e(Ze,W),e(W,R2),e(R2,Zde),e(Zde,$3o),e(R2,k3o),e(R2,Yj),e(Yj,S3o),e(R2,R3o),e(W,P3o),e(W,P2),e(P2,ece),e(ece,B3o),e(P2,I3o),e(P2,Kj),e(Kj,q3o),e(P2,N3o),e(W,j3o),e(W,B2),e(B2,oce),e(oce,D3o),e(B2,G3o),e(B2,Zj),e(Zj,O3o),e(B2,V3o),e(W,X3o),e(W,I2),e(I2,rce),e(rce,z3o),e(I2,W3o),e(I2,eD),e(eD,Q3o),e(I2,H3o),e(W,U3o),e(W,q2),e(q2,tce),e(tce,J3o),e(q2,Y3o),e(q2,oD),e(oD,K3o),e(q2,Z3o),e(W,ewo),e(W,N2),e(N2,ace),e(ace,owo),e(N2,rwo),e(N2,rD),e(rD,two),e(N2,awo),e(W,nwo),e(W,j2),e(j2,nce),e(nce,swo),e(j2,lwo),e(j2,tD),e(tD,iwo),e(j2,dwo),e(W,cwo),e(W,D2),e(D2,sce),e(sce,fwo),e(D2,mwo),e(D2,aD),e(aD,gwo),e(D2,hwo),e(W,pwo),e(W,G2),e(G2,lce),e(lce,uwo),e(G2,_wo),e(G2,nD),e(nD,bwo),e(G2,vwo),e(W,Fwo),e(W,O2),e(O2,ice),e(ice,Two),e(O2,Mwo),e(O2,sD),e(sD,Ewo),e(O2,Cwo),e(W,wwo),e(W,V2),e(V2,dce),e(dce,Awo),e(V2,ywo),e(V2,lD),e(lD,Lwo),e(V2,xwo),e(W,$wo),e(W,X2),e(X2,cce),e(cce,kwo),e(X2,Swo),e(X2,iD),e(iD,Rwo),e(X2,Pwo),e(W,Bwo),e(W,z2),e(z2,fce),e(fce,Iwo),e(z2,qwo),e(z2,dD),e(dD,Nwo),e(z2,jwo),e(W,Dwo),e(W,W2),e(W2,mce),e(mce,Gwo),e(W2,Owo),e(W2,cD),e(cD,Vwo),e(W2,Xwo),e(W,zwo),e(W,Q2),e(Q2,gce),e(gce,Wwo),e(Q2,Qwo),e(Q2,fD),e(fD,Hwo),e(Q2,Uwo),e(W,Jwo),e(W,H2),e(H2,hce),e(hce,Ywo),e(H2,Kwo),e(H2,mD),e(mD,Zwo),e(H2,eAo),e(W,oAo),e(W,U2),e(U2,pce),e(pce,rAo),e(U2,tAo),e(U2,gD),e(gD,aAo),e(U2,nAo),e(W,sAo),e(W,J2),e(J2,uce),e(uce,lAo),e(J2,iAo),e(J2,hD),e(hD,dAo),e(J2,cAo),e(W,fAo),e(W,Y2),e(Y2,_ce),e(_ce,mAo),e(Y2,gAo),e(Y2,pD),e(pD,hAo),e(Y2,pAo),e(W,uAo),e(W,K2),e(K2,bce),e(bce,_Ao),e(K2,bAo),e(K2,uD),e(uD,vAo),e(K2,FAo),e(W,TAo),e(W,Z2),e(Z2,vce),e(vce,MAo),e(Z2,EAo),e(Z2,_D),e(_D,CAo),e(Z2,wAo),e(W,AAo),e(W,e1),e(e1,Fce),e(Fce,yAo),e(e1,LAo),e(e1,bD),e(bD,xAo),e(e1,$Ao),e(W,kAo),e(W,o1),e(o1,Tce),e(Tce,SAo),e(o1,RAo),e(o1,vD),e(vD,PAo),e(o1,BAo),e(W,IAo),e(W,r1),e(r1,Mce),e(Mce,qAo),e(r1,NAo),e(r1,FD),e(FD,jAo),e(r1,DAo),e(W,GAo),e(W,t1),e(t1,Ece),e(Ece,OAo),e(t1,VAo),e(t1,TD),e(TD,XAo),e(t1,zAo),e(W,WAo),e(W,a1),e(a1,Cce),e(Cce,QAo),e(a1,HAo),e(a1,MD),e(MD,UAo),e(a1,JAo),e(W,YAo),e(W,n1),e(n1,wce),e(wce,KAo),e(n1,ZAo),e(n1,ED),e(ED,e0o),e(n1,o0o),e(W,r0o),e(W,s1),e(s1,Ace),e(Ace,t0o),e(s1,a0o),e(s1,CD),e(CD,n0o),e(s1,s0o),e(W,l0o),e(W,l1),e(l1,yce),e(yce,i0o),e(l1,d0o),e(l1,wD),e(wD,c0o),e(l1,f0o),e(W,m0o),e(W,i1),e(i1,Lce),e(Lce,g0o),e(i1,h0o),e(i1,AD),e(AD,p0o),e(i1,u0o),e(W,_0o),e(W,d1),e(d1,xce),e(xce,b0o),e(d1,v0o),e(d1,$ce),e($ce,F0o),e(d1,T0o),e(W,M0o),e(W,c1),e(c1,kce),e(kce,E0o),e(c1,C0o),e(c1,yD),e(yD,w0o),e(c1,A0o),e(W,y0o),e(W,f1),e(f1,Sce),e(Sce,L0o),e(f1,x0o),e(f1,LD),e(LD,$0o),e(f1,k0o),e(W,S0o),e(W,m1),e(m1,Rce),e(Rce,R0o),e(m1,P0o),e(m1,xD),e(xD,B0o),e(m1,I0o),e(W,q0o),e(W,g1),e(g1,Pce),e(Pce,N0o),e(g1,j0o),e(g1,$D),e($D,D0o),e(g1,G0o),e(Ze,O0o),e(Ze,h1),e(h1,V0o),e(h1,Bce),e(Bce,X0o),e(h1,z0o),e(h1,Ice),e(Ice,W0o),e(Ze,Q0o),M(p1,Ze,null),b(f,Xqe,_),b(f,Vi,_),e(Vi,u1),e(u1,qce),M(b0,qce,null),e(Vi,H0o),e(Vi,Nce),e(Nce,U0o),b(f,zqe,_),b(f,Ro,_),M(v0,Ro,null),e(Ro,J0o),e(Ro,Xi),e(Xi,Y0o),e(Xi,kD),e(kD,K0o),e(Xi,Z0o),e(Xi,SD),e(SD,eyo),e(Xi,oyo),e(Ro,ryo),e(Ro,F0),e(F0,tyo),e(F0,jce),e(jce,ayo),e(F0,nyo),e(Ro,syo),e(Ro,dt),M(T0,dt,null),e(dt,lyo),e(dt,Dce),e(Dce,iyo),e(dt,dyo),e(dt,zi),e(zi,cyo),e(zi,Gce),e(Gce,fyo),e(zi,myo),e(zi,RD),e(RD,gyo),e(zi,hyo),e(dt,pyo),M(_1,dt,null),e(Ro,uyo),e(Ro,eo),M(M0,eo,null),e(eo,_yo),e(eo,Oce),e(Oce,byo),e(eo,vyo),e(eo,Ia),e(Ia,Fyo),e(Ia,Vce),e(Vce,Tyo),e(Ia,Myo),e(Ia,Xce),e(Xce,Eyo),e(Ia,Cyo),e(Ia,zce),e(zce,wyo),e(Ia,Ayo),e(eo,yyo),e(eo,ue),e(ue,b1),e(b1,Wce),e(Wce,Lyo),e(b1,xyo),e(b1,PD),e(PD,$yo),e(b1,kyo),e(ue,Syo),e(ue,v1),e(v1,Qce),e(Qce,Ryo),e(v1,Pyo),e(v1,BD),e(BD,Byo),e(v1,Iyo),e(ue,qyo),e(ue,F1),e(F1,Hce),e(Hce,Nyo),e(F1,jyo),e(F1,ID),e(ID,Dyo),e(F1,Gyo),e(ue,Oyo),e(ue,T1),e(T1,Uce),e(Uce,Vyo),e(T1,Xyo),e(T1,qD),e(qD,zyo),e(T1,Wyo),e(ue,Qyo),e(ue,M1),e(M1,Jce),e(Jce,Hyo),e(M1,Uyo),e(M1,ND),e(ND,Jyo),e(M1,Yyo),e(ue,Kyo),e(ue,E1),e(E1,Yce),e(Yce,Zyo),e(E1,eLo),e(E1,jD),e(jD,oLo),e(E1,rLo),e(ue,tLo),e(ue,C1),e(C1,Kce),e(Kce,aLo),e(C1,nLo),e(C1,DD),e(DD,sLo),e(C1,lLo),e(ue,iLo),e(ue,w1),e(w1,Zce),e(Zce,dLo),e(w1,cLo),e(w1,GD),e(GD,fLo),e(w1,mLo),e(ue,gLo),e(ue,A1),e(A1,efe),e(efe,hLo),e(A1,pLo),e(A1,OD),e(OD,uLo),e(A1,_Lo),e(ue,bLo),e(ue,y1),e(y1,ofe),e(ofe,vLo),e(y1,FLo),e(y1,VD),e(VD,TLo),e(y1,MLo),e(ue,ELo),e(ue,L1),e(L1,rfe),e(rfe,CLo),e(L1,wLo),e(L1,XD),e(XD,ALo),e(L1,yLo),e(ue,LLo),e(ue,x1),e(x1,tfe),e(tfe,xLo),e(x1,$Lo),e(x1,zD),e(zD,kLo),e(x1,SLo),e(ue,RLo),e(ue,$1),e($1,afe),e(afe,PLo),e($1,BLo),e($1,WD),e(WD,ILo),e($1,qLo),e(ue,NLo),e(ue,k1),e(k1,nfe),e(nfe,jLo),e(k1,DLo),e(k1,QD),e(QD,GLo),e(k1,OLo),e(ue,VLo),e(ue,S1),e(S1,sfe),e(sfe,XLo),e(S1,zLo),e(S1,HD),e(HD,WLo),e(S1,QLo),e(ue,HLo),e(ue,R1),e(R1,lfe),e(lfe,ULo),e(R1,JLo),e(R1,UD),e(UD,YLo),e(R1,KLo),e(eo,ZLo),e(eo,P1),e(P1,exo),e(P1,ife),e(ife,oxo),e(P1,rxo),e(P1,dfe),e(dfe,txo),e(eo,axo),M(B1,eo,null),b(f,Wqe,_),b(f,Wi,_),e(Wi,I1),e(I1,cfe),M(E0,cfe,null),e(Wi,nxo),e(Wi,ffe),e(ffe,sxo),b(f,Qqe,_),b(f,Po,_),M(C0,Po,null),e(Po,lxo),e(Po,Qi),e(Qi,ixo),e(Qi,JD),e(JD,dxo),e(Qi,cxo),e(Qi,YD),e(YD,fxo),e(Qi,mxo),e(Po,gxo),e(Po,w0),e(w0,hxo),e(w0,mfe),e(mfe,pxo),e(w0,uxo),e(Po,_xo),e(Po,ct),M(A0,ct,null),e(ct,bxo),e(ct,gfe),e(gfe,vxo),e(ct,Fxo),e(ct,Hi),e(Hi,Txo),e(Hi,hfe),e(hfe,Mxo),e(Hi,Exo),e(Hi,KD),e(KD,Cxo),e(Hi,wxo),e(ct,Axo),M(q1,ct,null),e(Po,yxo),e(Po,oo),M(y0,oo,null),e(oo,Lxo),e(oo,pfe),e(pfe,xxo),e(oo,$xo),e(oo,qa),e(qa,kxo),e(qa,ufe),e(ufe,Sxo),e(qa,Rxo),e(qa,_fe),e(_fe,Pxo),e(qa,Bxo),e(qa,bfe),e(bfe,Ixo),e(qa,qxo),e(oo,Nxo),e(oo,q),e(q,N1),e(N1,vfe),e(vfe,jxo),e(N1,Dxo),e(N1,ZD),e(ZD,Gxo),e(N1,Oxo),e(q,Vxo),e(q,j1),e(j1,Ffe),e(Ffe,Xxo),e(j1,zxo),e(j1,eG),e(eG,Wxo),e(j1,Qxo),e(q,Hxo),e(q,D1),e(D1,Tfe),e(Tfe,Uxo),e(D1,Jxo),e(D1,oG),e(oG,Yxo),e(D1,Kxo),e(q,Zxo),e(q,G1),e(G1,Mfe),e(Mfe,e9o),e(G1,o9o),e(G1,rG),e(rG,r9o),e(G1,t9o),e(q,a9o),e(q,O1),e(O1,Efe),e(Efe,n9o),e(O1,s9o),e(O1,tG),e(tG,l9o),e(O1,i9o),e(q,d9o),e(q,V1),e(V1,Cfe),e(Cfe,c9o),e(V1,f9o),e(V1,aG),e(aG,m9o),e(V1,g9o),e(q,h9o),e(q,X1),e(X1,wfe),e(wfe,p9o),e(X1,u9o),e(X1,nG),e(nG,_9o),e(X1,b9o),e(q,v9o),e(q,z1),e(z1,Afe),e(Afe,F9o),e(z1,T9o),e(z1,sG),e(sG,M9o),e(z1,E9o),e(q,C9o),e(q,W1),e(W1,yfe),e(yfe,w9o),e(W1,A9o),e(W1,lG),e(lG,y9o),e(W1,L9o),e(q,x9o),e(q,Q1),e(Q1,Lfe),e(Lfe,$9o),e(Q1,k9o),e(Q1,iG),e(iG,S9o),e(Q1,R9o),e(q,P9o),e(q,H1),e(H1,xfe),e(xfe,B9o),e(H1,I9o),e(H1,dG),e(dG,q9o),e(H1,N9o),e(q,j9o),e(q,U1),e(U1,$fe),e($fe,D9o),e(U1,G9o),e(U1,cG),e(cG,O9o),e(U1,V9o),e(q,X9o),e(q,J1),e(J1,kfe),e(kfe,z9o),e(J1,W9o),e(J1,fG),e(fG,Q9o),e(J1,H9o),e(q,U9o),e(q,Y1),e(Y1,Sfe),e(Sfe,J9o),e(Y1,Y9o),e(Y1,mG),e(mG,K9o),e(Y1,Z9o),e(q,e$o),e(q,K1),e(K1,Rfe),e(Rfe,o$o),e(K1,r$o),e(K1,gG),e(gG,t$o),e(K1,a$o),e(q,n$o),e(q,Z1),e(Z1,Pfe),e(Pfe,s$o),e(Z1,l$o),e(Z1,hG),e(hG,i$o),e(Z1,d$o),e(q,c$o),e(q,eb),e(eb,Bfe),e(Bfe,f$o),e(eb,m$o),e(eb,pG),e(pG,g$o),e(eb,h$o),e(q,p$o),e(q,ob),e(ob,Ife),e(Ife,u$o),e(ob,_$o),e(ob,uG),e(uG,b$o),e(ob,v$o),e(q,F$o),e(q,rb),e(rb,qfe),e(qfe,T$o),e(rb,M$o),e(rb,_G),e(_G,E$o),e(rb,C$o),e(q,w$o),e(q,tb),e(tb,Nfe),e(Nfe,A$o),e(tb,y$o),e(tb,bG),e(bG,L$o),e(tb,x$o),e(q,$$o),e(q,ab),e(ab,jfe),e(jfe,k$o),e(ab,S$o),e(ab,vG),e(vG,R$o),e(ab,P$o),e(q,B$o),e(q,nb),e(nb,Dfe),e(Dfe,I$o),e(nb,q$o),e(nb,FG),e(FG,N$o),e(nb,j$o),e(q,D$o),e(q,sb),e(sb,Gfe),e(Gfe,G$o),e(sb,O$o),e(sb,TG),e(TG,V$o),e(sb,X$o),e(q,z$o),e(q,lb),e(lb,Ofe),e(Ofe,W$o),e(lb,Q$o),e(lb,MG),e(MG,H$o),e(lb,U$o),e(q,J$o),e(q,ib),e(ib,Vfe),e(Vfe,Y$o),e(ib,K$o),e(ib,EG),e(EG,Z$o),e(ib,eko),e(q,oko),e(q,db),e(db,Xfe),e(Xfe,rko),e(db,tko),e(db,CG),e(CG,ako),e(db,nko),e(q,sko),e(q,cb),e(cb,zfe),e(zfe,lko),e(cb,iko),e(cb,wG),e(wG,dko),e(cb,cko),e(q,fko),e(q,fb),e(fb,Wfe),e(Wfe,mko),e(fb,gko),e(fb,AG),e(AG,hko),e(fb,pko),e(q,uko),e(q,mb),e(mb,Qfe),e(Qfe,_ko),e(mb,bko),e(mb,yG),e(yG,vko),e(mb,Fko),e(q,Tko),e(q,gb),e(gb,Hfe),e(Hfe,Mko),e(gb,Eko),e(gb,LG),e(LG,Cko),e(gb,wko),e(q,Ako),e(q,hb),e(hb,Ufe),e(Ufe,yko),e(hb,Lko),e(hb,xG),e(xG,xko),e(hb,$ko),e(q,kko),e(q,pb),e(pb,Jfe),e(Jfe,Sko),e(pb,Rko),e(pb,$G),e($G,Pko),e(pb,Bko),e(q,Iko),e(q,ub),e(ub,Yfe),e(Yfe,qko),e(ub,Nko),e(ub,kG),e(kG,jko),e(ub,Dko),e(q,Gko),e(q,_b),e(_b,Kfe),e(Kfe,Oko),e(_b,Vko),e(_b,SG),e(SG,Xko),e(_b,zko),e(q,Wko),e(q,bb),e(bb,Zfe),e(Zfe,Qko),e(bb,Hko),e(bb,RG),e(RG,Uko),e(bb,Jko),e(q,Yko),e(q,vb),e(vb,eme),e(eme,Kko),e(vb,Zko),e(vb,PG),e(PG,eSo),e(vb,oSo),e(q,rSo),e(q,Fb),e(Fb,ome),e(ome,tSo),e(Fb,aSo),e(Fb,BG),e(BG,nSo),e(Fb,sSo),e(q,lSo),e(q,Tb),e(Tb,rme),e(rme,iSo),e(Tb,dSo),e(Tb,IG),e(IG,cSo),e(Tb,fSo),e(q,mSo),e(q,Mb),e(Mb,tme),e(tme,gSo),e(Mb,hSo),e(Mb,qG),e(qG,pSo),e(Mb,uSo),e(q,_So),e(q,Eb),e(Eb,ame),e(ame,bSo),e(Eb,vSo),e(Eb,NG),e(NG,FSo),e(Eb,TSo),e(q,MSo),e(q,Cb),e(Cb,nme),e(nme,ESo),e(Cb,CSo),e(Cb,jG),e(jG,wSo),e(Cb,ASo),e(q,ySo),e(q,wb),e(wb,sme),e(sme,LSo),e(wb,xSo),e(wb,DG),e(DG,$So),e(wb,kSo),e(q,SSo),e(q,Ab),e(Ab,lme),e(lme,RSo),e(Ab,PSo),e(Ab,GG),e(GG,BSo),e(Ab,ISo),e(q,qSo),e(q,yb),e(yb,ime),e(ime,NSo),e(yb,jSo),e(yb,OG),e(OG,DSo),e(yb,GSo),e(q,OSo),e(q,Lb),e(Lb,dme),e(dme,VSo),e(Lb,XSo),e(Lb,VG),e(VG,zSo),e(Lb,WSo),e(q,QSo),e(q,xb),e(xb,cme),e(cme,HSo),e(xb,USo),e(xb,XG),e(XG,JSo),e(xb,YSo),e(oo,KSo),e(oo,$b),e($b,ZSo),e($b,fme),e(fme,eRo),e($b,oRo),e($b,mme),e(mme,rRo),e(oo,tRo),M(kb,oo,null),b(f,Hqe,_),b(f,Ui,_),e(Ui,Sb),e(Sb,gme),M(L0,gme,null),e(Ui,aRo),e(Ui,hme),e(hme,nRo),b(f,Uqe,_),b(f,Bo,_),M(x0,Bo,null),e(Bo,sRo),e(Bo,Ji),e(Ji,lRo),e(Ji,zG),e(zG,iRo),e(Ji,dRo),e(Ji,WG),e(WG,cRo),e(Ji,fRo),e(Bo,mRo),e(Bo,$0),e($0,gRo),e($0,pme),e(pme,hRo),e($0,pRo),e(Bo,uRo),e(Bo,ft),M(k0,ft,null),e(ft,_Ro),e(ft,ume),e(ume,bRo),e(ft,vRo),e(ft,Yi),e(Yi,FRo),e(Yi,_me),e(_me,TRo),e(Yi,MRo),e(Yi,QG),e(QG,ERo),e(Yi,CRo),e(ft,wRo),M(Rb,ft,null),e(Bo,ARo),e(Bo,ro),M(S0,ro,null),e(ro,yRo),e(ro,bme),e(bme,LRo),e(ro,xRo),e(ro,Na),e(Na,$Ro),e(Na,vme),e(vme,kRo),e(Na,SRo),e(Na,Fme),e(Fme,RRo),e(Na,PRo),e(Na,Tme),e(Tme,BRo),e(Na,IRo),e(ro,qRo),e(ro,Y),e(Y,Pb),e(Pb,Mme),e(Mme,NRo),e(Pb,jRo),e(Pb,HG),e(HG,DRo),e(Pb,GRo),e(Y,ORo),e(Y,Bb),e(Bb,Eme),e(Eme,VRo),e(Bb,XRo),e(Bb,UG),e(UG,zRo),e(Bb,WRo),e(Y,QRo),e(Y,Ib),e(Ib,Cme),e(Cme,HRo),e(Ib,URo),e(Ib,JG),e(JG,JRo),e(Ib,YRo),e(Y,KRo),e(Y,qb),e(qb,wme),e(wme,ZRo),e(qb,ePo),e(qb,YG),e(YG,oPo),e(qb,rPo),e(Y,tPo),e(Y,Nb),e(Nb,Ame),e(Ame,aPo),e(Nb,nPo),e(Nb,KG),e(KG,sPo),e(Nb,lPo),e(Y,iPo),e(Y,jb),e(jb,yme),e(yme,dPo),e(jb,cPo),e(jb,ZG),e(ZG,fPo),e(jb,mPo),e(Y,gPo),e(Y,Db),e(Db,Lme),e(Lme,hPo),e(Db,pPo),e(Db,eO),e(eO,uPo),e(Db,_Po),e(Y,bPo),e(Y,Gb),e(Gb,xme),e(xme,vPo),e(Gb,FPo),e(Gb,oO),e(oO,TPo),e(Gb,MPo),e(Y,EPo),e(Y,Ob),e(Ob,$me),e($me,CPo),e(Ob,wPo),e(Ob,rO),e(rO,APo),e(Ob,yPo),e(Y,LPo),e(Y,Vb),e(Vb,kme),e(kme,xPo),e(Vb,$Po),e(Vb,tO),e(tO,kPo),e(Vb,SPo),e(Y,RPo),e(Y,Xb),e(Xb,Sme),e(Sme,PPo),e(Xb,BPo),e(Xb,aO),e(aO,IPo),e(Xb,qPo),e(Y,NPo),e(Y,zb),e(zb,Rme),e(Rme,jPo),e(zb,DPo),e(zb,nO),e(nO,GPo),e(zb,OPo),e(Y,VPo),e(Y,Wb),e(Wb,Pme),e(Pme,XPo),e(Wb,zPo),e(Wb,sO),e(sO,WPo),e(Wb,QPo),e(Y,HPo),e(Y,Qb),e(Qb,Bme),e(Bme,UPo),e(Qb,JPo),e(Qb,lO),e(lO,YPo),e(Qb,KPo),e(Y,ZPo),e(Y,Hb),e(Hb,Ime),e(Ime,eBo),e(Hb,oBo),e(Hb,iO),e(iO,rBo),e(Hb,tBo),e(Y,aBo),e(Y,Ub),e(Ub,qme),e(qme,nBo),e(Ub,sBo),e(Ub,dO),e(dO,lBo),e(Ub,iBo),e(Y,dBo),e(Y,Jb),e(Jb,Nme),e(Nme,cBo),e(Jb,fBo),e(Jb,cO),e(cO,mBo),e(Jb,gBo),e(Y,hBo),e(Y,Yb),e(Yb,jme),e(jme,pBo),e(Yb,uBo),e(Yb,fO),e(fO,_Bo),e(Yb,bBo),e(Y,vBo),e(Y,Kb),e(Kb,Dme),e(Dme,FBo),e(Kb,TBo),e(Kb,mO),e(mO,MBo),e(Kb,EBo),e(Y,CBo),e(Y,Zb),e(Zb,Gme),e(Gme,wBo),e(Zb,ABo),e(Zb,gO),e(gO,yBo),e(Zb,LBo),e(Y,xBo),e(Y,ev),e(ev,Ome),e(Ome,$Bo),e(ev,kBo),e(ev,hO),e(hO,SBo),e(ev,RBo),e(Y,PBo),e(Y,ov),e(ov,Vme),e(Vme,BBo),e(ov,IBo),e(ov,pO),e(pO,qBo),e(ov,NBo),e(Y,jBo),e(Y,rv),e(rv,Xme),e(Xme,DBo),e(rv,GBo),e(rv,uO),e(uO,OBo),e(rv,VBo),e(Y,XBo),e(Y,tv),e(tv,zme),e(zme,zBo),e(tv,WBo),e(tv,_O),e(_O,QBo),e(tv,HBo),e(Y,UBo),e(Y,av),e(av,Wme),e(Wme,JBo),e(av,YBo),e(av,bO),e(bO,KBo),e(av,ZBo),e(Y,eIo),e(Y,nv),e(nv,Qme),e(Qme,oIo),e(nv,rIo),e(nv,vO),e(vO,tIo),e(nv,aIo),e(Y,nIo),e(Y,sv),e(sv,Hme),e(Hme,sIo),e(sv,lIo),e(sv,FO),e(FO,iIo),e(sv,dIo),e(Y,cIo),e(Y,lv),e(lv,Ume),e(Ume,fIo),e(lv,mIo),e(lv,TO),e(TO,gIo),e(lv,hIo),e(Y,pIo),e(Y,iv),e(iv,Jme),e(Jme,uIo),e(iv,_Io),e(iv,MO),e(MO,bIo),e(iv,vIo),e(ro,FIo),e(ro,dv),e(dv,TIo),e(dv,Yme),e(Yme,MIo),e(dv,EIo),e(dv,Kme),e(Kme,CIo),e(ro,wIo),M(cv,ro,null),b(f,Jqe,_),b(f,Ki,_),e(Ki,fv),e(fv,Zme),M(R0,Zme,null),e(Ki,AIo),e(Ki,ege),e(ege,yIo),b(f,Yqe,_),b(f,Io,_),M(P0,Io,null),e(Io,LIo),e(Io,Zi),e(Zi,xIo),e(Zi,EO),e(EO,$Io),e(Zi,kIo),e(Zi,CO),e(CO,SIo),e(Zi,RIo),e(Io,PIo),e(Io,B0),e(B0,BIo),e(B0,oge),e(oge,IIo),e(B0,qIo),e(Io,NIo),e(Io,mt),M(I0,mt,null),e(mt,jIo),e(mt,rge),e(rge,DIo),e(mt,GIo),e(mt,ed),e(ed,OIo),e(ed,tge),e(tge,VIo),e(ed,XIo),e(ed,wO),e(wO,zIo),e(ed,WIo),e(mt,QIo),M(mv,mt,null),e(Io,HIo),e(Io,to),M(q0,to,null),e(to,UIo),e(to,age),e(age,JIo),e(to,YIo),e(to,ja),e(ja,KIo),e(ja,nge),e(nge,ZIo),e(ja,eqo),e(ja,sge),e(sge,oqo),e(ja,rqo),e(ja,lge),e(lge,tqo),e(ja,aqo),e(to,nqo),e(to,Zr),e(Zr,gv),e(gv,ige),e(ige,sqo),e(gv,lqo),e(gv,AO),e(AO,iqo),e(gv,dqo),e(Zr,cqo),e(Zr,hv),e(hv,dge),e(dge,fqo),e(hv,mqo),e(hv,yO),e(yO,gqo),e(hv,hqo),e(Zr,pqo),e(Zr,pv),e(pv,cge),e(cge,uqo),e(pv,_qo),e(pv,LO),e(LO,bqo),e(pv,vqo),e(Zr,Fqo),e(Zr,uv),e(uv,fge),e(fge,Tqo),e(uv,Mqo),e(uv,xO),e(xO,Eqo),e(uv,Cqo),e(Zr,wqo),e(Zr,_v),e(_v,mge),e(mge,Aqo),e(_v,yqo),e(_v,$O),e($O,Lqo),e(_v,xqo),e(to,$qo),e(to,bv),e(bv,kqo),e(bv,gge),e(gge,Sqo),e(bv,Rqo),e(bv,hge),e(hge,Pqo),e(to,Bqo),M(vv,to,null),b(f,Kqe,_),b(f,od,_),e(od,Fv),e(Fv,pge),M(N0,pge,null),e(od,Iqo),e(od,uge),e(uge,qqo),b(f,Zqe,_),b(f,qo,_),M(j0,qo,null),e(qo,Nqo),e(qo,rd),e(rd,jqo),e(rd,kO),e(kO,Dqo),e(rd,Gqo),e(rd,SO),e(SO,Oqo),e(rd,Vqo),e(qo,Xqo),e(qo,D0),e(D0,zqo),e(D0,_ge),e(_ge,Wqo),e(D0,Qqo),e(qo,Hqo),e(qo,gt),M(G0,gt,null),e(gt,Uqo),e(gt,bge),e(bge,Jqo),e(gt,Yqo),e(gt,td),e(td,Kqo),e(td,vge),e(vge,Zqo),e(td,eNo),e(td,RO),e(RO,oNo),e(td,rNo),e(gt,tNo),M(Tv,gt,null),e(qo,aNo),e(qo,ao),M(O0,ao,null),e(ao,nNo),e(ao,Fge),e(Fge,sNo),e(ao,lNo),e(ao,Da),e(Da,iNo),e(Da,Tge),e(Tge,dNo),e(Da,cNo),e(Da,Mge),e(Mge,fNo),e(Da,mNo),e(Da,Ege),e(Ege,gNo),e(Da,hNo),e(ao,pNo),e(ao,U),e(U,Mv),e(Mv,Cge),e(Cge,uNo),e(Mv,_No),e(Mv,PO),e(PO,bNo),e(Mv,vNo),e(U,FNo),e(U,Ev),e(Ev,wge),e(wge,TNo),e(Ev,MNo),e(Ev,BO),e(BO,ENo),e(Ev,CNo),e(U,wNo),e(U,Cv),e(Cv,Age),e(Age,ANo),e(Cv,yNo),e(Cv,IO),e(IO,LNo),e(Cv,xNo),e(U,$No),e(U,wv),e(wv,yge),e(yge,kNo),e(wv,SNo),e(wv,qO),e(qO,RNo),e(wv,PNo),e(U,BNo),e(U,Av),e(Av,Lge),e(Lge,INo),e(Av,qNo),e(Av,NO),e(NO,NNo),e(Av,jNo),e(U,DNo),e(U,yv),e(yv,xge),e(xge,GNo),e(yv,ONo),e(yv,jO),e(jO,VNo),e(yv,XNo),e(U,zNo),e(U,Lv),e(Lv,$ge),e($ge,WNo),e(Lv,QNo),e(Lv,DO),e(DO,HNo),e(Lv,UNo),e(U,JNo),e(U,xv),e(xv,kge),e(kge,YNo),e(xv,KNo),e(xv,GO),e(GO,ZNo),e(xv,ejo),e(U,ojo),e(U,$v),e($v,Sge),e(Sge,rjo),e($v,tjo),e($v,OO),e(OO,ajo),e($v,njo),e(U,sjo),e(U,kv),e(kv,Rge),e(Rge,ljo),e(kv,ijo),e(kv,VO),e(VO,djo),e(kv,cjo),e(U,fjo),e(U,Sv),e(Sv,Pge),e(Pge,mjo),e(Sv,gjo),e(Sv,XO),e(XO,hjo),e(Sv,pjo),e(U,ujo),e(U,Rv),e(Rv,Bge),e(Bge,_jo),e(Rv,bjo),e(Rv,zO),e(zO,vjo),e(Rv,Fjo),e(U,Tjo),e(U,Pv),e(Pv,Ige),e(Ige,Mjo),e(Pv,Ejo),e(Pv,WO),e(WO,Cjo),e(Pv,wjo),e(U,Ajo),e(U,Bv),e(Bv,qge),e(qge,yjo),e(Bv,Ljo),e(Bv,QO),e(QO,xjo),e(Bv,$jo),e(U,kjo),e(U,Iv),e(Iv,Nge),e(Nge,Sjo),e(Iv,Rjo),e(Iv,HO),e(HO,Pjo),e(Iv,Bjo),e(U,Ijo),e(U,qv),e(qv,jge),e(jge,qjo),e(qv,Njo),e(qv,UO),e(UO,jjo),e(qv,Djo),e(U,Gjo),e(U,Nv),e(Nv,Dge),e(Dge,Ojo),e(Nv,Vjo),e(Nv,JO),e(JO,Xjo),e(Nv,zjo),e(U,Wjo),e(U,jv),e(jv,Gge),e(Gge,Qjo),e(jv,Hjo),e(jv,YO),e(YO,Ujo),e(jv,Jjo),e(U,Yjo),e(U,Dv),e(Dv,Oge),e(Oge,Kjo),e(Dv,Zjo),e(Dv,KO),e(KO,eDo),e(Dv,oDo),e(U,rDo),e(U,Gv),e(Gv,Vge),e(Vge,tDo),e(Gv,aDo),e(Gv,ZO),e(ZO,nDo),e(Gv,sDo),e(U,lDo),e(U,Ov),e(Ov,Xge),e(Xge,iDo),e(Ov,dDo),e(Ov,eV),e(eV,cDo),e(Ov,fDo),e(U,mDo),e(U,Vv),e(Vv,zge),e(zge,gDo),e(Vv,hDo),e(Vv,oV),e(oV,pDo),e(Vv,uDo),e(U,_Do),e(U,Xv),e(Xv,Wge),e(Wge,bDo),e(Xv,vDo),e(Xv,rV),e(rV,FDo),e(Xv,TDo),e(U,MDo),e(U,zv),e(zv,Qge),e(Qge,EDo),e(zv,CDo),e(zv,tV),e(tV,wDo),e(zv,ADo),e(U,yDo),e(U,Wv),e(Wv,Hge),e(Hge,LDo),e(Wv,xDo),e(Wv,aV),e(aV,$Do),e(Wv,kDo),e(U,SDo),e(U,Qv),e(Qv,Uge),e(Uge,RDo),e(Qv,PDo),e(Qv,nV),e(nV,BDo),e(Qv,IDo),e(U,qDo),e(U,Hv),e(Hv,Jge),e(Jge,NDo),e(Hv,jDo),e(Hv,sV),e(sV,DDo),e(Hv,GDo),e(U,ODo),e(U,Uv),e(Uv,Yge),e(Yge,VDo),e(Uv,XDo),e(Uv,lV),e(lV,zDo),e(Uv,WDo),e(U,QDo),e(U,Jv),e(Jv,Kge),e(Kge,HDo),e(Jv,UDo),e(Jv,iV),e(iV,JDo),e(Jv,YDo),e(U,KDo),e(U,Yv),e(Yv,Zge),e(Zge,ZDo),e(Yv,eGo),e(Yv,dV),e(dV,oGo),e(Yv,rGo),e(U,tGo),e(U,Kv),e(Kv,ehe),e(ehe,aGo),e(Kv,nGo),e(Kv,cV),e(cV,sGo),e(Kv,lGo),e(U,iGo),e(U,Zv),e(Zv,ohe),e(ohe,dGo),e(Zv,cGo),e(Zv,fV),e(fV,fGo),e(Zv,mGo),e(U,gGo),e(U,eF),e(eF,rhe),e(rhe,hGo),e(eF,pGo),e(eF,mV),e(mV,uGo),e(eF,_Go),e(ao,bGo),e(ao,oF),e(oF,vGo),e(oF,the),e(the,FGo),e(oF,TGo),e(oF,ahe),e(ahe,MGo),e(ao,EGo),M(rF,ao,null),b(f,eNe,_),b(f,ad,_),e(ad,tF),e(tF,nhe),M(V0,nhe,null),e(ad,CGo),e(ad,she),e(she,wGo),b(f,oNe,_),b(f,No,_),M(X0,No,null),e(No,AGo),e(No,nd),e(nd,yGo),e(nd,gV),e(gV,LGo),e(nd,xGo),e(nd,hV),e(hV,$Go),e(nd,kGo),e(No,SGo),e(No,z0),e(z0,RGo),e(z0,lhe),e(lhe,PGo),e(z0,BGo),e(No,IGo),e(No,ht),M(W0,ht,null),e(ht,qGo),e(ht,ihe),e(ihe,NGo),e(ht,jGo),e(ht,sd),e(sd,DGo),e(sd,dhe),e(dhe,GGo),e(sd,OGo),e(sd,pV),e(pV,VGo),e(sd,XGo),e(ht,zGo),M(aF,ht,null),e(No,WGo),e(No,no),M(Q0,no,null),e(no,QGo),e(no,che),e(che,HGo),e(no,UGo),e(no,Ga),e(Ga,JGo),e(Ga,fhe),e(fhe,YGo),e(Ga,KGo),e(Ga,mhe),e(mhe,ZGo),e(Ga,eOo),e(Ga,ghe),e(ghe,oOo),e(Ga,rOo),e(no,tOo),e(no,V),e(V,nF),e(nF,hhe),e(hhe,aOo),e(nF,nOo),e(nF,uV),e(uV,sOo),e(nF,lOo),e(V,iOo),e(V,sF),e(sF,phe),e(phe,dOo),e(sF,cOo),e(sF,_V),e(_V,fOo),e(sF,mOo),e(V,gOo),e(V,lF),e(lF,uhe),e(uhe,hOo),e(lF,pOo),e(lF,bV),e(bV,uOo),e(lF,_Oo),e(V,bOo),e(V,iF),e(iF,_he),e(_he,vOo),e(iF,FOo),e(iF,vV),e(vV,TOo),e(iF,MOo),e(V,EOo),e(V,dF),e(dF,bhe),e(bhe,COo),e(dF,wOo),e(dF,FV),e(FV,AOo),e(dF,yOo),e(V,LOo),e(V,cF),e(cF,vhe),e(vhe,xOo),e(cF,$Oo),e(cF,TV),e(TV,kOo),e(cF,SOo),e(V,ROo),e(V,fF),e(fF,Fhe),e(Fhe,POo),e(fF,BOo),e(fF,MV),e(MV,IOo),e(fF,qOo),e(V,NOo),e(V,mF),e(mF,The),e(The,jOo),e(mF,DOo),e(mF,EV),e(EV,GOo),e(mF,OOo),e(V,VOo),e(V,gF),e(gF,Mhe),e(Mhe,XOo),e(gF,zOo),e(gF,CV),e(CV,WOo),e(gF,QOo),e(V,HOo),e(V,hF),e(hF,Ehe),e(Ehe,UOo),e(hF,JOo),e(hF,wV),e(wV,YOo),e(hF,KOo),e(V,ZOo),e(V,pF),e(pF,Che),e(Che,eVo),e(pF,oVo),e(pF,AV),e(AV,rVo),e(pF,tVo),e(V,aVo),e(V,uF),e(uF,whe),e(whe,nVo),e(uF,sVo),e(uF,yV),e(yV,lVo),e(uF,iVo),e(V,dVo),e(V,_F),e(_F,Ahe),e(Ahe,cVo),e(_F,fVo),e(_F,LV),e(LV,mVo),e(_F,gVo),e(V,hVo),e(V,bF),e(bF,yhe),e(yhe,pVo),e(bF,uVo),e(bF,xV),e(xV,_Vo),e(bF,bVo),e(V,vVo),e(V,vF),e(vF,Lhe),e(Lhe,FVo),e(vF,TVo),e(vF,$V),e($V,MVo),e(vF,EVo),e(V,CVo),e(V,FF),e(FF,xhe),e(xhe,wVo),e(FF,AVo),e(FF,kV),e(kV,yVo),e(FF,LVo),e(V,xVo),e(V,TF),e(TF,$he),e($he,$Vo),e(TF,kVo),e(TF,SV),e(SV,SVo),e(TF,RVo),e(V,PVo),e(V,MF),e(MF,khe),e(khe,BVo),e(MF,IVo),e(MF,RV),e(RV,qVo),e(MF,NVo),e(V,jVo),e(V,EF),e(EF,She),e(She,DVo),e(EF,GVo),e(EF,PV),e(PV,OVo),e(EF,VVo),e(V,XVo),e(V,CF),e(CF,Rhe),e(Rhe,zVo),e(CF,WVo),e(CF,BV),e(BV,QVo),e(CF,HVo),e(V,UVo),e(V,wF),e(wF,Phe),e(Phe,JVo),e(wF,YVo),e(wF,IV),e(IV,KVo),e(wF,ZVo),e(V,eXo),e(V,AF),e(AF,Bhe),e(Bhe,oXo),e(AF,rXo),e(AF,qV),e(qV,tXo),e(AF,aXo),e(V,nXo),e(V,yF),e(yF,Ihe),e(Ihe,sXo),e(yF,lXo),e(yF,NV),e(NV,iXo),e(yF,dXo),e(V,cXo),e(V,LF),e(LF,qhe),e(qhe,fXo),e(LF,mXo),e(LF,jV),e(jV,gXo),e(LF,hXo),e(V,pXo),e(V,xF),e(xF,Nhe),e(Nhe,uXo),e(xF,_Xo),e(xF,DV),e(DV,bXo),e(xF,vXo),e(V,FXo),e(V,$F),e($F,jhe),e(jhe,TXo),e($F,MXo),e($F,GV),e(GV,EXo),e($F,CXo),e(V,wXo),e(V,kF),e(kF,Dhe),e(Dhe,AXo),e(kF,yXo),e(kF,OV),e(OV,LXo),e(kF,xXo),e(V,$Xo),e(V,SF),e(SF,Ghe),e(Ghe,kXo),e(SF,SXo),e(SF,VV),e(VV,RXo),e(SF,PXo),e(V,BXo),e(V,RF),e(RF,Ohe),e(Ohe,IXo),e(RF,qXo),e(RF,XV),e(XV,NXo),e(RF,jXo),e(V,DXo),e(V,PF),e(PF,Vhe),e(Vhe,GXo),e(PF,OXo),e(PF,zV),e(zV,VXo),e(PF,XXo),e(V,zXo),e(V,BF),e(BF,Xhe),e(Xhe,WXo),e(BF,QXo),e(BF,WV),e(WV,HXo),e(BF,UXo),e(V,JXo),e(V,IF),e(IF,zhe),e(zhe,YXo),e(IF,KXo),e(IF,QV),e(QV,ZXo),e(IF,ezo),e(V,ozo),e(V,qF),e(qF,Whe),e(Whe,rzo),e(qF,tzo),e(qF,HV),e(HV,azo),e(qF,nzo),e(V,szo),e(V,NF),e(NF,Qhe),e(Qhe,lzo),e(NF,izo),e(NF,UV),e(UV,dzo),e(NF,czo),e(V,fzo),e(V,jF),e(jF,Hhe),e(Hhe,mzo),e(jF,gzo),e(jF,JV),e(JV,hzo),e(jF,pzo),e(V,uzo),e(V,DF),e(DF,Uhe),e(Uhe,_zo),e(DF,bzo),e(DF,YV),e(YV,vzo),e(DF,Fzo),e(V,Tzo),e(V,GF),e(GF,Jhe),e(Jhe,Mzo),e(GF,Ezo),e(GF,KV),e(KV,Czo),e(GF,wzo),e(V,Azo),e(V,OF),e(OF,Yhe),e(Yhe,yzo),e(OF,Lzo),e(OF,ZV),e(ZV,xzo),e(OF,$zo),e(V,kzo),e(V,VF),e(VF,Khe),e(Khe,Szo),e(VF,Rzo),e(VF,eX),e(eX,Pzo),e(VF,Bzo),e(no,Izo),e(no,XF),e(XF,qzo),e(XF,Zhe),e(Zhe,Nzo),e(XF,jzo),e(XF,epe),e(epe,Dzo),e(no,Gzo),M(zF,no,null),b(f,rNe,_),b(f,ld,_),e(ld,WF),e(WF,ope),M(H0,ope,null),e(ld,Ozo),e(ld,rpe),e(rpe,Vzo),b(f,tNe,_),b(f,jo,_),M(U0,jo,null),e(jo,Xzo),e(jo,id),e(id,zzo),e(id,oX),e(oX,Wzo),e(id,Qzo),e(id,rX),e(rX,Hzo),e(id,Uzo),e(jo,Jzo),e(jo,J0),e(J0,Yzo),e(J0,tpe),e(tpe,Kzo),e(J0,Zzo),e(jo,eWo),e(jo,pt),M(Y0,pt,null),e(pt,oWo),e(pt,ape),e(ape,rWo),e(pt,tWo),e(pt,dd),e(dd,aWo),e(dd,npe),e(npe,nWo),e(dd,sWo),e(dd,tX),e(tX,lWo),e(dd,iWo),e(pt,dWo),M(QF,pt,null),e(jo,cWo),e(jo,so),M(K0,so,null),e(so,fWo),e(so,spe),e(spe,mWo),e(so,gWo),e(so,Oa),e(Oa,hWo),e(Oa,lpe),e(lpe,pWo),e(Oa,uWo),e(Oa,ipe),e(ipe,_Wo),e(Oa,bWo),e(Oa,dpe),e(dpe,vWo),e(Oa,FWo),e(so,TWo),e(so,cpe),e(cpe,HF),e(HF,fpe),e(fpe,MWo),e(HF,EWo),e(HF,aX),e(aX,CWo),e(HF,wWo),e(so,AWo),e(so,UF),e(UF,yWo),e(UF,mpe),e(mpe,LWo),e(UF,xWo),e(UF,gpe),e(gpe,$Wo),e(so,kWo),M(JF,so,null),b(f,aNe,_),b(f,cd,_),e(cd,YF),e(YF,hpe),M(Z0,hpe,null),e(cd,SWo),e(cd,ppe),e(ppe,RWo),b(f,nNe,_),b(f,Do,_),M(ey,Do,null),e(Do,PWo),e(Do,fd),e(fd,BWo),e(fd,nX),e(nX,IWo),e(fd,qWo),e(fd,sX),e(sX,NWo),e(fd,jWo),e(Do,DWo),e(Do,oy),e(oy,GWo),e(oy,upe),e(upe,OWo),e(oy,VWo),e(Do,XWo),e(Do,ut),M(ry,ut,null),e(ut,zWo),e(ut,_pe),e(_pe,WWo),e(ut,QWo),e(ut,md),e(md,HWo),e(md,bpe),e(bpe,UWo),e(md,JWo),e(md,lX),e(lX,YWo),e(md,KWo),e(ut,ZWo),M(KF,ut,null),e(Do,eQo),e(Do,lo),M(ty,lo,null),e(lo,oQo),e(lo,vpe),e(vpe,rQo),e(lo,tQo),e(lo,Va),e(Va,aQo),e(Va,Fpe),e(Fpe,nQo),e(Va,sQo),e(Va,Tpe),e(Tpe,lQo),e(Va,iQo),e(Va,Mpe),e(Mpe,dQo),e(Va,cQo),e(lo,fQo),e(lo,Fe),e(Fe,ZF),e(ZF,Epe),e(Epe,mQo),e(ZF,gQo),e(ZF,iX),e(iX,hQo),e(ZF,pQo),e(Fe,uQo),e(Fe,e6),e(e6,Cpe),e(Cpe,_Qo),e(e6,bQo),e(e6,dX),e(dX,vQo),e(e6,FQo),e(Fe,TQo),e(Fe,o6),e(o6,wpe),e(wpe,MQo),e(o6,EQo),e(o6,cX),e(cX,CQo),e(o6,wQo),e(Fe,AQo),e(Fe,Ds),e(Ds,Ape),e(Ape,yQo),e(Ds,LQo),e(Ds,fX),e(fX,xQo),e(Ds,$Qo),e(Ds,mX),e(mX,kQo),e(Ds,SQo),e(Fe,RQo),e(Fe,r6),e(r6,ype),e(ype,PQo),e(r6,BQo),e(r6,gX),e(gX,IQo),e(r6,qQo),e(Fe,NQo),e(Fe,_t),e(_t,Lpe),e(Lpe,jQo),e(_t,DQo),e(_t,hX),e(hX,GQo),e(_t,OQo),e(_t,pX),e(pX,VQo),e(_t,XQo),e(_t,uX),e(uX,zQo),e(_t,WQo),e(Fe,QQo),e(Fe,t6),e(t6,xpe),e(xpe,HQo),e(t6,UQo),e(t6,_X),e(_X,JQo),e(t6,YQo),e(Fe,KQo),e(Fe,a6),e(a6,$pe),e($pe,ZQo),e(a6,eHo),e(a6,bX),e(bX,oHo),e(a6,rHo),e(Fe,tHo),e(Fe,n6),e(n6,kpe),e(kpe,aHo),e(n6,nHo),e(n6,vX),e(vX,sHo),e(n6,lHo),e(Fe,iHo),e(Fe,s6),e(s6,Spe),e(Spe,dHo),e(s6,cHo),e(s6,FX),e(FX,fHo),e(s6,mHo),e(Fe,gHo),e(Fe,l6),e(l6,Rpe),e(Rpe,hHo),e(l6,pHo),e(l6,TX),e(TX,uHo),e(l6,_Ho),e(Fe,bHo),e(Fe,i6),e(i6,Ppe),e(Ppe,vHo),e(i6,FHo),e(i6,MX),e(MX,THo),e(i6,MHo),e(Fe,EHo),e(Fe,d6),e(d6,Bpe),e(Bpe,CHo),e(d6,wHo),e(d6,EX),e(EX,AHo),e(d6,yHo),e(lo,LHo),e(lo,c6),e(c6,xHo),e(c6,Ipe),e(Ipe,$Ho),e(c6,kHo),e(c6,qpe),e(qpe,SHo),e(lo,RHo),M(f6,lo,null),b(f,sNe,_),b(f,gd,_),e(gd,m6),e(m6,Npe),M(ay,Npe,null),e(gd,PHo),e(gd,jpe),e(jpe,BHo),b(f,lNe,_),b(f,Go,_),M(ny,Go,null),e(Go,IHo),e(Go,hd),e(hd,qHo),e(hd,CX),e(CX,NHo),e(hd,jHo),e(hd,wX),e(wX,DHo),e(hd,GHo),e(Go,OHo),e(Go,sy),e(sy,VHo),e(sy,Dpe),e(Dpe,XHo),e(sy,zHo),e(Go,WHo),e(Go,bt),M(ly,bt,null),e(bt,QHo),e(bt,Gpe),e(Gpe,HHo),e(bt,UHo),e(bt,pd),e(pd,JHo),e(pd,Ope),e(Ope,YHo),e(pd,KHo),e(pd,AX),e(AX,ZHo),e(pd,eUo),e(bt,oUo),M(g6,bt,null),e(Go,rUo),e(Go,io),M(iy,io,null),e(io,tUo),e(io,Vpe),e(Vpe,aUo),e(io,nUo),e(io,Xa),e(Xa,sUo),e(Xa,Xpe),e(Xpe,lUo),e(Xa,iUo),e(Xa,zpe),e(zpe,dUo),e(Xa,cUo),e(Xa,Wpe),e(Wpe,fUo),e(Xa,mUo),e(io,gUo),e(io,Qpe),e(Qpe,h6),e(h6,Hpe),e(Hpe,hUo),e(h6,pUo),e(h6,yX),e(yX,uUo),e(h6,_Uo),e(io,bUo),e(io,p6),e(p6,vUo),e(p6,Upe),e(Upe,FUo),e(p6,TUo),e(p6,Jpe),e(Jpe,MUo),e(io,EUo),M(u6,io,null),b(f,iNe,_),b(f,ud,_),e(ud,_6),e(_6,Ype),M(dy,Ype,null),e(ud,CUo),e(ud,Kpe),e(Kpe,wUo),b(f,dNe,_),b(f,Oo,_),M(cy,Oo,null),e(Oo,AUo),e(Oo,_d),e(_d,yUo),e(_d,LX),e(LX,LUo),e(_d,xUo),e(_d,xX),e(xX,$Uo),e(_d,kUo),e(Oo,SUo),e(Oo,fy),e(fy,RUo),e(fy,Zpe),e(Zpe,PUo),e(fy,BUo),e(Oo,IUo),e(Oo,vt),M(my,vt,null),e(vt,qUo),e(vt,eue),e(eue,NUo),e(vt,jUo),e(vt,bd),e(bd,DUo),e(bd,oue),e(oue,GUo),e(bd,OUo),e(bd,$X),e($X,VUo),e(bd,XUo),e(vt,zUo),M(b6,vt,null),e(Oo,WUo),e(Oo,co),M(gy,co,null),e(co,QUo),e(co,rue),e(rue,HUo),e(co,UUo),e(co,za),e(za,JUo),e(za,tue),e(tue,YUo),e(za,KUo),e(za,aue),e(aue,ZUo),e(za,eJo),e(za,nue),e(nue,oJo),e(za,rJo),e(co,tJo),e(co,sue),e(sue,v6),e(v6,lue),e(lue,aJo),e(v6,nJo),e(v6,kX),e(kX,sJo),e(v6,lJo),e(co,iJo),e(co,F6),e(F6,dJo),e(F6,iue),e(iue,cJo),e(F6,fJo),e(F6,due),e(due,mJo),e(co,gJo),M(T6,co,null),b(f,cNe,_),b(f,vd,_),e(vd,M6),e(M6,cue),M(hy,cue,null),e(vd,hJo),e(vd,fue),e(fue,pJo),b(f,fNe,_),b(f,Vo,_),M(py,Vo,null),e(Vo,uJo),e(Vo,Fd),e(Fd,_Jo),e(Fd,SX),e(SX,bJo),e(Fd,vJo),e(Fd,RX),e(RX,FJo),e(Fd,TJo),e(Vo,MJo),e(Vo,uy),e(uy,EJo),e(uy,mue),e(mue,CJo),e(uy,wJo),e(Vo,AJo),e(Vo,Ft),M(_y,Ft,null),e(Ft,yJo),e(Ft,gue),e(gue,LJo),e(Ft,xJo),e(Ft,Td),e(Td,$Jo),e(Td,hue),e(hue,kJo),e(Td,SJo),e(Td,PX),e(PX,RJo),e(Td,PJo),e(Ft,BJo),M(E6,Ft,null),e(Vo,IJo),e(Vo,fo),M(by,fo,null),e(fo,qJo),e(fo,pue),e(pue,NJo),e(fo,jJo),e(fo,Wa),e(Wa,DJo),e(Wa,uue),e(uue,GJo),e(Wa,OJo),e(Wa,_ue),e(_ue,VJo),e(Wa,XJo),e(Wa,bue),e(bue,zJo),e(Wa,WJo),e(fo,QJo),e(fo,ke),e(ke,C6),e(C6,vue),e(vue,HJo),e(C6,UJo),e(C6,BX),e(BX,JJo),e(C6,YJo),e(ke,KJo),e(ke,w6),e(w6,Fue),e(Fue,ZJo),e(w6,eYo),e(w6,IX),e(IX,oYo),e(w6,rYo),e(ke,tYo),e(ke,A6),e(A6,Tue),e(Tue,aYo),e(A6,nYo),e(A6,qX),e(qX,sYo),e(A6,lYo),e(ke,iYo),e(ke,y6),e(y6,Mue),e(Mue,dYo),e(y6,cYo),e(y6,NX),e(NX,fYo),e(y6,mYo),e(ke,gYo),e(ke,L6),e(L6,Eue),e(Eue,hYo),e(L6,pYo),e(L6,jX),e(jX,uYo),e(L6,_Yo),e(ke,bYo),e(ke,x6),e(x6,Cue),e(Cue,vYo),e(x6,FYo),e(x6,DX),e(DX,TYo),e(x6,MYo),e(ke,EYo),e(ke,$6),e($6,wue),e(wue,CYo),e($6,wYo),e($6,GX),e(GX,AYo),e($6,yYo),e(ke,LYo),e(ke,k6),e(k6,Aue),e(Aue,xYo),e(k6,$Yo),e(k6,OX),e(OX,kYo),e(k6,SYo),e(ke,RYo),e(ke,S6),e(S6,yue),e(yue,PYo),e(S6,BYo),e(S6,VX),e(VX,IYo),e(S6,qYo),e(fo,NYo),e(fo,R6),e(R6,jYo),e(R6,Lue),e(Lue,DYo),e(R6,GYo),e(R6,xue),e(xue,OYo),e(fo,VYo),M(P6,fo,null),b(f,mNe,_),b(f,Md,_),e(Md,B6),e(B6,$ue),M(vy,$ue,null),e(Md,XYo),e(Md,kue),e(kue,zYo),b(f,gNe,_),b(f,Xo,_),M(Fy,Xo,null),e(Xo,WYo),e(Xo,Ed),e(Ed,QYo),e(Ed,XX),e(XX,HYo),e(Ed,UYo),e(Ed,zX),e(zX,JYo),e(Ed,YYo),e(Xo,KYo),e(Xo,Ty),e(Ty,ZYo),e(Ty,Sue),e(Sue,eKo),e(Ty,oKo),e(Xo,rKo),e(Xo,Tt),M(My,Tt,null),e(Tt,tKo),e(Tt,Rue),e(Rue,aKo),e(Tt,nKo),e(Tt,Cd),e(Cd,sKo),e(Cd,Pue),e(Pue,lKo),e(Cd,iKo),e(Cd,WX),e(WX,dKo),e(Cd,cKo),e(Tt,fKo),M(I6,Tt,null),e(Xo,mKo),e(Xo,mo),M(Ey,mo,null),e(mo,gKo),e(mo,Bue),e(Bue,hKo),e(mo,pKo),e(mo,Qa),e(Qa,uKo),e(Qa,Iue),e(Iue,_Ko),e(Qa,bKo),e(Qa,que),e(que,vKo),e(Qa,FKo),e(Qa,Nue),e(Nue,TKo),e(Qa,MKo),e(mo,EKo),e(mo,et),e(et,q6),e(q6,jue),e(jue,CKo),e(q6,wKo),e(q6,QX),e(QX,AKo),e(q6,yKo),e(et,LKo),e(et,N6),e(N6,Due),e(Due,xKo),e(N6,$Ko),e(N6,HX),e(HX,kKo),e(N6,SKo),e(et,RKo),e(et,j6),e(j6,Gue),e(Gue,PKo),e(j6,BKo),e(j6,UX),e(UX,IKo),e(j6,qKo),e(et,NKo),e(et,D6),e(D6,Oue),e(Oue,jKo),e(D6,DKo),e(D6,JX),e(JX,GKo),e(D6,OKo),e(et,VKo),e(et,G6),e(G6,Vue),e(Vue,XKo),e(G6,zKo),e(G6,YX),e(YX,WKo),e(G6,QKo),e(mo,HKo),e(mo,O6),e(O6,UKo),e(O6,Xue),e(Xue,JKo),e(O6,YKo),e(O6,zue),e(zue,KKo),e(mo,ZKo),M(V6,mo,null),b(f,hNe,_),b(f,wd,_),e(wd,X6),e(X6,Wue),M(Cy,Wue,null),e(wd,eZo),e(wd,Que),e(Que,oZo),b(f,pNe,_),b(f,zo,_),M(wy,zo,null),e(zo,rZo),e(zo,Ad),e(Ad,tZo),e(Ad,KX),e(KX,aZo),e(Ad,nZo),e(Ad,ZX),e(ZX,sZo),e(Ad,lZo),e(zo,iZo),e(zo,Ay),e(Ay,dZo),e(Ay,Hue),e(Hue,cZo),e(Ay,fZo),e(zo,mZo),e(zo,Mt),M(yy,Mt,null),e(Mt,gZo),e(Mt,Uue),e(Uue,hZo),e(Mt,pZo),e(Mt,yd),e(yd,uZo),e(yd,Jue),e(Jue,_Zo),e(yd,bZo),e(yd,ez),e(ez,vZo),e(yd,FZo),e(Mt,TZo),M(z6,Mt,null),e(zo,MZo),e(zo,go),M(Ly,go,null),e(go,EZo),e(go,Yue),e(Yue,CZo),e(go,wZo),e(go,Ha),e(Ha,AZo),e(Ha,Kue),e(Kue,yZo),e(Ha,LZo),e(Ha,Zue),e(Zue,xZo),e(Ha,$Zo),e(Ha,e_e),e(e_e,kZo),e(Ha,SZo),e(go,RZo),e(go,Se),e(Se,W6),e(W6,o_e),e(o_e,PZo),e(W6,BZo),e(W6,oz),e(oz,IZo),e(W6,qZo),e(Se,NZo),e(Se,Q6),e(Q6,r_e),e(r_e,jZo),e(Q6,DZo),e(Q6,rz),e(rz,GZo),e(Q6,OZo),e(Se,VZo),e(Se,H6),e(H6,t_e),e(t_e,XZo),e(H6,zZo),e(H6,tz),e(tz,WZo),e(H6,QZo),e(Se,HZo),e(Se,U6),e(U6,a_e),e(a_e,UZo),e(U6,JZo),e(U6,az),e(az,YZo),e(U6,KZo),e(Se,ZZo),e(Se,J6),e(J6,n_e),e(n_e,eer),e(J6,oer),e(J6,nz),e(nz,rer),e(J6,ter),e(Se,aer),e(Se,Y6),e(Y6,s_e),e(s_e,ner),e(Y6,ser),e(Y6,sz),e(sz,ler),e(Y6,ier),e(Se,der),e(Se,K6),e(K6,l_e),e(l_e,cer),e(K6,fer),e(K6,lz),e(lz,mer),e(K6,ger),e(Se,her),e(Se,Z6),e(Z6,i_e),e(i_e,per),e(Z6,uer),e(Z6,iz),e(iz,_er),e(Z6,ber),e(Se,ver),e(Se,eT),e(eT,d_e),e(d_e,Fer),e(eT,Ter),e(eT,dz),e(dz,Mer),e(eT,Eer),e(go,Cer),e(go,oT),e(oT,wer),e(oT,c_e),e(c_e,Aer),e(oT,yer),e(oT,f_e),e(f_e,Ler),e(go,xer),M(rT,go,null),b(f,uNe,_),b(f,Ld,_),e(Ld,tT),e(tT,m_e),M(xy,m_e,null),e(Ld,$er),e(Ld,g_e),e(g_e,ker),b(f,_Ne,_),b(f,Wo,_),M($y,Wo,null),e(Wo,Ser),e(Wo,xd),e(xd,Rer),e(xd,cz),e(cz,Per),e(xd,Ber),e(xd,fz),e(fz,Ier),e(xd,qer),e(Wo,Ner),e(Wo,ky),e(ky,jer),e(ky,h_e),e(h_e,Der),e(ky,Ger),e(Wo,Oer),e(Wo,Et),M(Sy,Et,null),e(Et,Ver),e(Et,p_e),e(p_e,Xer),e(Et,zer),e(Et,$d),e($d,Wer),e($d,u_e),e(u_e,Qer),e($d,Her),e($d,mz),e(mz,Uer),e($d,Jer),e(Et,Yer),M(aT,Et,null),e(Wo,Ker),e(Wo,ho),M(Ry,ho,null),e(ho,Zer),e(ho,__e),e(__e,eor),e(ho,oor),e(ho,Ua),e(Ua,ror),e(Ua,b_e),e(b_e,tor),e(Ua,aor),e(Ua,v_e),e(v_e,nor),e(Ua,sor),e(Ua,F_e),e(F_e,lor),e(Ua,ior),e(ho,dor),e(ho,Py),e(Py,nT),e(nT,T_e),e(T_e,cor),e(nT,mor),e(nT,gz),e(gz,gor),e(nT,hor),e(Py,por),e(Py,sT),e(sT,M_e),e(M_e,uor),e(sT,_or),e(sT,hz),e(hz,bor),e(sT,vor),e(ho,For),e(ho,lT),e(lT,Tor),e(lT,E_e),e(E_e,Mor),e(lT,Eor),e(lT,C_e),e(C_e,Cor),e(ho,wor),M(iT,ho,null),b(f,bNe,_),b(f,kd,_),e(kd,dT),e(dT,w_e),M(By,w_e,null),e(kd,Aor),e(kd,A_e),e(A_e,yor),b(f,vNe,_),b(f,Qo,_),M(Iy,Qo,null),e(Qo,Lor),e(Qo,Sd),e(Sd,xor),e(Sd,pz),e(pz,$or),e(Sd,kor),e(Sd,uz),e(uz,Sor),e(Sd,Ror),e(Qo,Por),e(Qo,qy),e(qy,Bor),e(qy,y_e),e(y_e,Ior),e(qy,qor),e(Qo,Nor),e(Qo,Ct),M(Ny,Ct,null),e(Ct,jor),e(Ct,L_e),e(L_e,Dor),e(Ct,Gor),e(Ct,Rd),e(Rd,Oor),e(Rd,x_e),e(x_e,Vor),e(Rd,Xor),e(Rd,_z),e(_z,zor),e(Rd,Wor),e(Ct,Qor),M(cT,Ct,null),e(Qo,Hor),e(Qo,po),M(jy,po,null),e(po,Uor),e(po,$_e),e($_e,Jor),e(po,Yor),e(po,Ja),e(Ja,Kor),e(Ja,k_e),e(k_e,Zor),e(Ja,err),e(Ja,S_e),e(S_e,orr),e(Ja,rrr),e(Ja,R_e),e(R_e,trr),e(Ja,arr),e(po,nrr),e(po,ot),e(ot,fT),e(fT,P_e),e(P_e,srr),e(fT,lrr),e(fT,bz),e(bz,irr),e(fT,drr),e(ot,crr),e(ot,mT),e(mT,B_e),e(B_e,frr),e(mT,mrr),e(mT,vz),e(vz,grr),e(mT,hrr),e(ot,prr),e(ot,gT),e(gT,I_e),e(I_e,urr),e(gT,_rr),e(gT,Fz),e(Fz,brr),e(gT,vrr),e(ot,Frr),e(ot,hT),e(hT,q_e),e(q_e,Trr),e(hT,Mrr),e(hT,Tz),e(Tz,Err),e(hT,Crr),e(ot,wrr),e(ot,pT),e(pT,N_e),e(N_e,Arr),e(pT,yrr),e(pT,Mz),e(Mz,Lrr),e(pT,xrr),e(po,$rr),e(po,uT),e(uT,krr),e(uT,j_e),e(j_e,Srr),e(uT,Rrr),e(uT,D_e),e(D_e,Prr),e(po,Brr),M(_T,po,null),b(f,FNe,_),b(f,Pd,_),e(Pd,bT),e(bT,G_e),M(Dy,G_e,null),e(Pd,Irr),e(Pd,O_e),e(O_e,qrr),b(f,TNe,_),b(f,Ho,_),M(Gy,Ho,null),e(Ho,Nrr),e(Ho,Bd),e(Bd,jrr),e(Bd,Ez),e(Ez,Drr),e(Bd,Grr),e(Bd,Cz),e(Cz,Orr),e(Bd,Vrr),e(Ho,Xrr),e(Ho,Oy),e(Oy,zrr),e(Oy,V_e),e(V_e,Wrr),e(Oy,Qrr),e(Ho,Hrr),e(Ho,wt),M(Vy,wt,null),e(wt,Urr),e(wt,X_e),e(X_e,Jrr),e(wt,Yrr),e(wt,Id),e(Id,Krr),e(Id,z_e),e(z_e,Zrr),e(Id,etr),e(Id,wz),e(wz,otr),e(Id,rtr),e(wt,ttr),M(vT,wt,null),e(Ho,atr),e(Ho,uo),M(Xy,uo,null),e(uo,ntr),e(uo,W_e),e(W_e,str),e(uo,ltr),e(uo,Ya),e(Ya,itr),e(Ya,Q_e),e(Q_e,dtr),e(Ya,ctr),e(Ya,H_e),e(H_e,ftr),e(Ya,mtr),e(Ya,U_e),e(U_e,gtr),e(Ya,htr),e(uo,ptr),e(uo,qd),e(qd,FT),e(FT,J_e),e(J_e,utr),e(FT,_tr),e(FT,Az),e(Az,btr),e(FT,vtr),e(qd,Ftr),e(qd,TT),e(TT,Y_e),e(Y_e,Ttr),e(TT,Mtr),e(TT,yz),e(yz,Etr),e(TT,Ctr),e(qd,wtr),e(qd,MT),e(MT,K_e),e(K_e,Atr),e(MT,ytr),e(MT,Lz),e(Lz,Ltr),e(MT,xtr),e(uo,$tr),e(uo,ET),e(ET,ktr),e(ET,Z_e),e(Z_e,Str),e(ET,Rtr),e(ET,e2e),e(e2e,Ptr),e(uo,Btr),M(CT,uo,null),b(f,MNe,_),b(f,Nd,_),e(Nd,wT),e(wT,o2e),M(zy,o2e,null),e(Nd,Itr),e(Nd,r2e),e(r2e,qtr),b(f,ENe,_),b(f,Uo,_),M(Wy,Uo,null),e(Uo,Ntr),e(Uo,jd),e(jd,jtr),e(jd,xz),e(xz,Dtr),e(jd,Gtr),e(jd,$z),e($z,Otr),e(jd,Vtr),e(Uo,Xtr),e(Uo,Qy),e(Qy,ztr),e(Qy,t2e),e(t2e,Wtr),e(Qy,Qtr),e(Uo,Htr),e(Uo,At),M(Hy,At,null),e(At,Utr),e(At,a2e),e(a2e,Jtr),e(At,Ytr),e(At,Dd),e(Dd,Ktr),e(Dd,n2e),e(n2e,Ztr),e(Dd,ear),e(Dd,kz),e(kz,oar),e(Dd,rar),e(At,tar),M(AT,At,null),e(Uo,aar),e(Uo,_o),M(Uy,_o,null),e(_o,nar),e(_o,s2e),e(s2e,sar),e(_o,lar),e(_o,Ka),e(Ka,iar),e(Ka,l2e),e(l2e,dar),e(Ka,car),e(Ka,i2e),e(i2e,far),e(Ka,mar),e(Ka,d2e),e(d2e,gar),e(Ka,har),e(_o,par),e(_o,Jy),e(Jy,yT),e(yT,c2e),e(c2e,uar),e(yT,_ar),e(yT,Sz),e(Sz,bar),e(yT,Far),e(Jy,Tar),e(Jy,LT),e(LT,f2e),e(f2e,Mar),e(LT,Ear),e(LT,Rz),e(Rz,Car),e(LT,war),e(_o,Aar),e(_o,xT),e(xT,yar),e(xT,m2e),e(m2e,Lar),e(xT,xar),e(xT,g2e),e(g2e,$ar),e(_o,kar),M($T,_o,null),b(f,CNe,_),b(f,Gd,_),e(Gd,kT),e(kT,h2e),M(Yy,h2e,null),e(Gd,Sar),e(Gd,p2e),e(p2e,Rar),b(f,wNe,_),b(f,Jo,_),M(Ky,Jo,null),e(Jo,Par),e(Jo,Od),e(Od,Bar),e(Od,Pz),e(Pz,Iar),e(Od,qar),e(Od,Bz),e(Bz,Nar),e(Od,jar),e(Jo,Dar),e(Jo,Zy),e(Zy,Gar),e(Zy,u2e),e(u2e,Oar),e(Zy,Var),e(Jo,Xar),e(Jo,yt),M(eL,yt,null),e(yt,zar),e(yt,_2e),e(_2e,War),e(yt,Qar),e(yt,Vd),e(Vd,Har),e(Vd,b2e),e(b2e,Uar),e(Vd,Jar),e(Vd,Iz),e(Iz,Yar),e(Vd,Kar),e(yt,Zar),M(ST,yt,null),e(Jo,enr),e(Jo,bo),M(oL,bo,null),e(bo,onr),e(bo,v2e),e(v2e,rnr),e(bo,tnr),e(bo,Za),e(Za,anr),e(Za,F2e),e(F2e,nnr),e(Za,snr),e(Za,T2e),e(T2e,lnr),e(Za,inr),e(Za,M2e),e(M2e,dnr),e(Za,cnr),e(bo,fnr),e(bo,E2e),e(E2e,RT),e(RT,C2e),e(C2e,mnr),e(RT,gnr),e(RT,qz),e(qz,hnr),e(RT,pnr),e(bo,unr),e(bo,PT),e(PT,_nr),e(PT,w2e),e(w2e,bnr),e(PT,vnr),e(PT,A2e),e(A2e,Fnr),e(bo,Tnr),M(BT,bo,null),b(f,ANe,_),b(f,Xd,_),e(Xd,IT),e(IT,y2e),M(rL,y2e,null),e(Xd,Mnr),e(Xd,L2e),e(L2e,Enr),b(f,yNe,_),b(f,Yo,_),M(tL,Yo,null),e(Yo,Cnr),e(Yo,zd),e(zd,wnr),e(zd,Nz),e(Nz,Anr),e(zd,ynr),e(zd,jz),e(jz,Lnr),e(zd,xnr),e(Yo,$nr),e(Yo,aL),e(aL,knr),e(aL,x2e),e(x2e,Snr),e(aL,Rnr),e(Yo,Pnr),e(Yo,Lt),M(nL,Lt,null),e(Lt,Bnr),e(Lt,$2e),e($2e,Inr),e(Lt,qnr),e(Lt,Wd),e(Wd,Nnr),e(Wd,k2e),e(k2e,jnr),e(Wd,Dnr),e(Wd,Dz),e(Dz,Gnr),e(Wd,Onr),e(Lt,Vnr),M(qT,Lt,null),e(Yo,Xnr),e(Yo,vo),M(sL,vo,null),e(vo,znr),e(vo,S2e),e(S2e,Wnr),e(vo,Qnr),e(vo,en),e(en,Hnr),e(en,R2e),e(R2e,Unr),e(en,Jnr),e(en,P2e),e(P2e,Ynr),e(en,Knr),e(en,B2e),e(B2e,Znr),e(en,esr),e(vo,osr),e(vo,on),e(on,NT),e(NT,I2e),e(I2e,rsr),e(NT,tsr),e(NT,Gz),e(Gz,asr),e(NT,nsr),e(on,ssr),e(on,jT),e(jT,q2e),e(q2e,lsr),e(jT,isr),e(jT,Oz),e(Oz,dsr),e(jT,csr),e(on,fsr),e(on,DT),e(DT,N2e),e(N2e,msr),e(DT,gsr),e(DT,Vz),e(Vz,hsr),e(DT,psr),e(on,usr),e(on,GT),e(GT,j2e),e(j2e,_sr),e(GT,bsr),e(GT,Xz),e(Xz,vsr),e(GT,Fsr),e(vo,Tsr),e(vo,OT),e(OT,Msr),e(OT,D2e),e(D2e,Esr),e(OT,Csr),e(OT,G2e),e(G2e,wsr),e(vo,Asr),M(VT,vo,null),b(f,LNe,_),b(f,Qd,_),e(Qd,XT),e(XT,O2e),M(lL,O2e,null),e(Qd,ysr),e(Qd,V2e),e(V2e,Lsr),b(f,xNe,_),b(f,Ko,_),M(iL,Ko,null),e(Ko,xsr),e(Ko,Hd),e(Hd,$sr),e(Hd,zz),e(zz,ksr),e(Hd,Ssr),e(Hd,Wz),e(Wz,Rsr),e(Hd,Psr),e(Ko,Bsr),e(Ko,dL),e(dL,Isr),e(dL,X2e),e(X2e,qsr),e(dL,Nsr),e(Ko,jsr),e(Ko,xt),M(cL,xt,null),e(xt,Dsr),e(xt,z2e),e(z2e,Gsr),e(xt,Osr),e(xt,Ud),e(Ud,Vsr),e(Ud,W2e),e(W2e,Xsr),e(Ud,zsr),e(Ud,Qz),e(Qz,Wsr),e(Ud,Qsr),e(xt,Hsr),M(zT,xt,null),e(Ko,Usr),e(Ko,Fo),M(fL,Fo,null),e(Fo,Jsr),e(Fo,Q2e),e(Q2e,Ysr),e(Fo,Ksr),e(Fo,rn),e(rn,Zsr),e(rn,H2e),e(H2e,elr),e(rn,olr),e(rn,U2e),e(U2e,rlr),e(rn,tlr),e(rn,J2e),e(J2e,alr),e(rn,nlr),e(Fo,slr),e(Fo,Y2e),e(Y2e,WT),e(WT,K2e),e(K2e,llr),e(WT,ilr),e(WT,Hz),e(Hz,dlr),e(WT,clr),e(Fo,flr),e(Fo,QT),e(QT,mlr),e(QT,Z2e),e(Z2e,glr),e(QT,hlr),e(QT,e1e),e(e1e,plr),e(Fo,ulr),M(HT,Fo,null),b(f,$Ne,_),b(f,Jd,_),e(Jd,UT),e(UT,o1e),M(mL,o1e,null),e(Jd,_lr),e(Jd,r1e),e(r1e,blr),b(f,kNe,_),b(f,Zo,_),M(gL,Zo,null),e(Zo,vlr),e(Zo,Yd),e(Yd,Flr),e(Yd,Uz),e(Uz,Tlr),e(Yd,Mlr),e(Yd,Jz),e(Jz,Elr),e(Yd,Clr),e(Zo,wlr),e(Zo,hL),e(hL,Alr),e(hL,t1e),e(t1e,ylr),e(hL,Llr),e(Zo,xlr),e(Zo,$t),M(pL,$t,null),e($t,$lr),e($t,a1e),e(a1e,klr),e($t,Slr),e($t,Kd),e(Kd,Rlr),e(Kd,n1e),e(n1e,Plr),e(Kd,Blr),e(Kd,Yz),e(Yz,Ilr),e(Kd,qlr),e($t,Nlr),M(JT,$t,null),e(Zo,jlr),e(Zo,yr),M(uL,yr,null),e(yr,Dlr),e(yr,s1e),e(s1e,Glr),e(yr,Olr),e(yr,tn),e(tn,Vlr),e(tn,l1e),e(l1e,Xlr),e(tn,zlr),e(tn,i1e),e(i1e,Wlr),e(tn,Qlr),e(tn,d1e),e(d1e,Hlr),e(tn,Ulr),e(yr,Jlr),e(yr,N),e(N,YT),e(YT,c1e),e(c1e,Ylr),e(YT,Klr),e(YT,Kz),e(Kz,Zlr),e(YT,eir),e(N,oir),e(N,KT),e(KT,f1e),e(f1e,rir),e(KT,tir),e(KT,Zz),e(Zz,air),e(KT,nir),e(N,sir),e(N,ZT),e(ZT,m1e),e(m1e,lir),e(ZT,iir),e(ZT,eW),e(eW,dir),e(ZT,cir),e(N,fir),e(N,e8),e(e8,g1e),e(g1e,mir),e(e8,gir),e(e8,oW),e(oW,hir),e(e8,pir),e(N,uir),e(N,o8),e(o8,h1e),e(h1e,_ir),e(o8,bir),e(o8,rW),e(rW,vir),e(o8,Fir),e(N,Tir),e(N,r8),e(r8,p1e),e(p1e,Mir),e(r8,Eir),e(r8,tW),e(tW,Cir),e(r8,wir),e(N,Air),e(N,t8),e(t8,u1e),e(u1e,yir),e(t8,Lir),e(t8,aW),e(aW,xir),e(t8,$ir),e(N,kir),e(N,a8),e(a8,_1e),e(_1e,Sir),e(a8,Rir),e(a8,nW),e(nW,Pir),e(a8,Bir),e(N,Iir),e(N,n8),e(n8,b1e),e(b1e,qir),e(n8,Nir),e(n8,sW),e(sW,jir),e(n8,Dir),e(N,Gir),e(N,s8),e(s8,v1e),e(v1e,Oir),e(s8,Vir),e(s8,lW),e(lW,Xir),e(s8,zir),e(N,Wir),e(N,l8),e(l8,F1e),e(F1e,Qir),e(l8,Hir),e(l8,iW),e(iW,Uir),e(l8,Jir),e(N,Yir),e(N,i8),e(i8,T1e),e(T1e,Kir),e(i8,Zir),e(i8,dW),e(dW,edr),e(i8,odr),e(N,rdr),e(N,d8),e(d8,M1e),e(M1e,tdr),e(d8,adr),e(d8,cW),e(cW,ndr),e(d8,sdr),e(N,ldr),e(N,c8),e(c8,E1e),e(E1e,idr),e(c8,ddr),e(c8,fW),e(fW,cdr),e(c8,fdr),e(N,mdr),e(N,f8),e(f8,C1e),e(C1e,gdr),e(f8,hdr),e(f8,mW),e(mW,pdr),e(f8,udr),e(N,_dr),e(N,m8),e(m8,w1e),e(w1e,bdr),e(m8,vdr),e(m8,gW),e(gW,Fdr),e(m8,Tdr),e(N,Mdr),e(N,g8),e(g8,A1e),e(A1e,Edr),e(g8,Cdr),e(g8,hW),e(hW,wdr),e(g8,Adr),e(N,ydr),e(N,Gs),e(Gs,y1e),e(y1e,Ldr),e(Gs,xdr),e(Gs,pW),e(pW,$dr),e(Gs,kdr),e(Gs,uW),e(uW,Sdr),e(Gs,Rdr),e(N,Pdr),e(N,h8),e(h8,L1e),e(L1e,Bdr),e(h8,Idr),e(h8,_W),e(_W,qdr),e(h8,Ndr),e(N,jdr),e(N,p8),e(p8,x1e),e(x1e,Ddr),e(p8,Gdr),e(p8,bW),e(bW,Odr),e(p8,Vdr),e(N,Xdr),e(N,u8),e(u8,$1e),e($1e,zdr),e(u8,Wdr),e(u8,vW),e(vW,Qdr),e(u8,Hdr),e(N,Udr),e(N,_8),e(_8,k1e),e(k1e,Jdr),e(_8,Ydr),e(_8,FW),e(FW,Kdr),e(_8,Zdr),e(N,ecr),e(N,b8),e(b8,S1e),e(S1e,ocr),e(b8,rcr),e(b8,TW),e(TW,tcr),e(b8,acr),e(N,ncr),e(N,v8),e(v8,R1e),e(R1e,scr),e(v8,lcr),e(v8,MW),e(MW,icr),e(v8,dcr),e(N,ccr),e(N,F8),e(F8,P1e),e(P1e,fcr),e(F8,mcr),e(F8,EW),e(EW,gcr),e(F8,hcr),e(N,pcr),e(N,T8),e(T8,B1e),e(B1e,ucr),e(T8,_cr),e(T8,CW),e(CW,bcr),e(T8,vcr),e(N,Fcr),e(N,M8),e(M8,I1e),e(I1e,Tcr),e(M8,Mcr),e(M8,wW),e(wW,Ecr),e(M8,Ccr),e(N,wcr),e(N,E8),e(E8,q1e),e(q1e,Acr),e(E8,ycr),e(E8,AW),e(AW,Lcr),e(E8,xcr),e(N,$cr),e(N,C8),e(C8,N1e),e(N1e,kcr),e(C8,Scr),e(C8,yW),e(yW,Rcr),e(C8,Pcr),e(N,Bcr),e(N,w8),e(w8,j1e),e(j1e,Icr),e(w8,qcr),e(w8,LW),e(LW,Ncr),e(w8,jcr),e(N,Dcr),e(N,A8),e(A8,D1e),e(D1e,Gcr),e(A8,Ocr),e(A8,xW),e(xW,Vcr),e(A8,Xcr),e(N,zcr),e(N,y8),e(y8,G1e),e(G1e,Wcr),e(y8,Qcr),e(y8,$W),e($W,Hcr),e(y8,Ucr),e(N,Jcr),e(N,L8),e(L8,O1e),e(O1e,Ycr),e(L8,Kcr),e(L8,kW),e(kW,Zcr),e(L8,efr),e(N,ofr),e(N,x8),e(x8,V1e),e(V1e,rfr),e(x8,tfr),e(x8,SW),e(SW,afr),e(x8,nfr),e(N,sfr),e(N,$8),e($8,X1e),e(X1e,lfr),e($8,ifr),e($8,RW),e(RW,dfr),e($8,cfr),e(N,ffr),e(N,k8),e(k8,z1e),e(z1e,mfr),e(k8,gfr),e(k8,PW),e(PW,hfr),e(k8,pfr),e(N,ufr),e(N,S8),e(S8,W1e),e(W1e,_fr),e(S8,bfr),e(S8,BW),e(BW,vfr),e(S8,Ffr),e(N,Tfr),e(N,R8),e(R8,Q1e),e(Q1e,Mfr),e(R8,Efr),e(R8,IW),e(IW,Cfr),e(R8,wfr),e(N,Afr),e(N,P8),e(P8,H1e),e(H1e,yfr),e(P8,Lfr),e(P8,qW),e(qW,xfr),e(P8,$fr),e(N,kfr),e(N,B8),e(B8,U1e),e(U1e,Sfr),e(B8,Rfr),e(B8,NW),e(NW,Pfr),e(B8,Bfr),e(N,Ifr),e(N,I8),e(I8,J1e),e(J1e,qfr),e(I8,Nfr),e(I8,jW),e(jW,jfr),e(I8,Dfr),e(N,Gfr),e(N,q8),e(q8,Y1e),e(Y1e,Ofr),e(q8,Vfr),e(q8,DW),e(DW,Xfr),e(q8,zfr),e(N,Wfr),e(N,N8),e(N8,K1e),e(K1e,Qfr),e(N8,Hfr),e(N8,GW),e(GW,Ufr),e(N8,Jfr),e(N,Yfr),e(N,j8),e(j8,Z1e),e(Z1e,Kfr),e(j8,Zfr),e(j8,OW),e(OW,emr),e(j8,omr),e(N,rmr),e(N,D8),e(D8,ebe),e(ebe,tmr),e(D8,amr),e(D8,VW),e(VW,nmr),e(D8,smr),e(N,lmr),e(N,G8),e(G8,obe),e(obe,imr),e(G8,dmr),e(G8,XW),e(XW,cmr),e(G8,fmr),e(yr,mmr),M(O8,yr,null),b(f,SNe,_),b(f,Zd,_),e(Zd,V8),e(V8,rbe),M(_L,rbe,null),e(Zd,gmr),e(Zd,tbe),e(tbe,hmr),b(f,RNe,_),b(f,er,_),M(bL,er,null),e(er,pmr),e(er,ec),e(ec,umr),e(ec,zW),e(zW,_mr),e(ec,bmr),e(ec,WW),e(WW,vmr),e(ec,Fmr),e(er,Tmr),e(er,vL),e(vL,Mmr),e(vL,abe),e(abe,Emr),e(vL,Cmr),e(er,wmr),e(er,kt),M(FL,kt,null),e(kt,Amr),e(kt,nbe),e(nbe,ymr),e(kt,Lmr),e(kt,oc),e(oc,xmr),e(oc,sbe),e(sbe,$mr),e(oc,kmr),e(oc,QW),e(QW,Smr),e(oc,Rmr),e(kt,Pmr),M(X8,kt,null),e(er,Bmr),e(er,Lr),M(TL,Lr,null),e(Lr,Imr),e(Lr,lbe),e(lbe,qmr),e(Lr,Nmr),e(Lr,an),e(an,jmr),e(an,ibe),e(ibe,Dmr),e(an,Gmr),e(an,dbe),e(dbe,Omr),e(an,Vmr),e(an,cbe),e(cbe,Xmr),e(an,zmr),e(Lr,Wmr),e(Lr,se),e(se,z8),e(z8,fbe),e(fbe,Qmr),e(z8,Hmr),e(z8,HW),e(HW,Umr),e(z8,Jmr),e(se,Ymr),e(se,W8),e(W8,mbe),e(mbe,Kmr),e(W8,Zmr),e(W8,UW),e(UW,egr),e(W8,ogr),e(se,rgr),e(se,Q8),e(Q8,gbe),e(gbe,tgr),e(Q8,agr),e(Q8,JW),e(JW,ngr),e(Q8,sgr),e(se,lgr),e(se,H8),e(H8,hbe),e(hbe,igr),e(H8,dgr),e(H8,YW),e(YW,cgr),e(H8,fgr),e(se,mgr),e(se,U8),e(U8,pbe),e(pbe,ggr),e(U8,hgr),e(U8,KW),e(KW,pgr),e(U8,ugr),e(se,_gr),e(se,J8),e(J8,ube),e(ube,bgr),e(J8,vgr),e(J8,ZW),e(ZW,Fgr),e(J8,Tgr),e(se,Mgr),e(se,Y8),e(Y8,_be),e(_be,Egr),e(Y8,Cgr),e(Y8,eQ),e(eQ,wgr),e(Y8,Agr),e(se,ygr),e(se,K8),e(K8,bbe),e(bbe,Lgr),e(K8,xgr),e(K8,oQ),e(oQ,$gr),e(K8,kgr),e(se,Sgr),e(se,Z8),e(Z8,vbe),e(vbe,Rgr),e(Z8,Pgr),e(Z8,rQ),e(rQ,Bgr),e(Z8,Igr),e(se,qgr),e(se,e7),e(e7,Fbe),e(Fbe,Ngr),e(e7,jgr),e(e7,tQ),e(tQ,Dgr),e(e7,Ggr),e(se,Ogr),e(se,o7),e(o7,Tbe),e(Tbe,Vgr),e(o7,Xgr),e(o7,aQ),e(aQ,zgr),e(o7,Wgr),e(se,Qgr),e(se,r7),e(r7,Mbe),e(Mbe,Hgr),e(r7,Ugr),e(r7,nQ),e(nQ,Jgr),e(r7,Ygr),e(se,Kgr),e(se,t7),e(t7,Ebe),e(Ebe,Zgr),e(t7,ehr),e(t7,sQ),e(sQ,ohr),e(t7,rhr),e(se,thr),e(se,a7),e(a7,Cbe),e(Cbe,ahr),e(a7,nhr),e(a7,lQ),e(lQ,shr),e(a7,lhr),e(se,ihr),e(se,n7),e(n7,wbe),e(wbe,dhr),e(n7,chr),e(n7,iQ),e(iQ,fhr),e(n7,mhr),e(se,ghr),e(se,s7),e(s7,Abe),e(Abe,hhr),e(s7,phr),e(s7,dQ),e(dQ,uhr),e(s7,_hr),e(se,bhr),e(se,l7),e(l7,ybe),e(ybe,vhr),e(l7,Fhr),e(l7,cQ),e(cQ,Thr),e(l7,Mhr),e(se,Ehr),e(se,i7),e(i7,Lbe),e(Lbe,Chr),e(i7,whr),e(i7,fQ),e(fQ,Ahr),e(i7,yhr),e(se,Lhr),e(se,d7),e(d7,xbe),e(xbe,xhr),e(d7,$hr),e(d7,mQ),e(mQ,khr),e(d7,Shr),e(se,Rhr),e(se,c7),e(c7,$be),e($be,Phr),e(c7,Bhr),e(c7,gQ),e(gQ,Ihr),e(c7,qhr),e(se,Nhr),e(se,f7),e(f7,kbe),e(kbe,jhr),e(f7,Dhr),e(f7,hQ),e(hQ,Ghr),e(f7,Ohr),e(se,Vhr),e(se,m7),e(m7,Sbe),e(Sbe,Xhr),e(m7,zhr),e(m7,pQ),e(pQ,Whr),e(m7,Qhr),e(se,Hhr),e(se,g7),e(g7,Rbe),e(Rbe,Uhr),e(g7,Jhr),e(g7,uQ),e(uQ,Yhr),e(g7,Khr),e(Lr,Zhr),M(h7,Lr,null),b(f,PNe,_),b(f,rc,_),e(rc,p7),e(p7,Pbe),M(ML,Pbe,null),e(rc,epr),e(rc,Bbe),e(Bbe,opr),b(f,BNe,_),b(f,or,_),M(EL,or,null),e(or,rpr),e(or,tc),e(tc,tpr),e(tc,_Q),e(_Q,apr),e(tc,npr),e(tc,bQ),e(bQ,spr),e(tc,lpr),e(or,ipr),e(or,CL),e(CL,dpr),e(CL,Ibe),e(Ibe,cpr),e(CL,fpr),e(or,mpr),e(or,St),M(wL,St,null),e(St,gpr),e(St,qbe),e(qbe,hpr),e(St,ppr),e(St,ac),e(ac,upr),e(ac,Nbe),e(Nbe,_pr),e(ac,bpr),e(ac,vQ),e(vQ,vpr),e(ac,Fpr),e(St,Tpr),M(u7,St,null),e(or,Mpr),e(or,xr),M(AL,xr,null),e(xr,Epr),e(xr,jbe),e(jbe,Cpr),e(xr,wpr),e(xr,nn),e(nn,Apr),e(nn,Dbe),e(Dbe,ypr),e(nn,Lpr),e(nn,Gbe),e(Gbe,xpr),e(nn,$pr),e(nn,Obe),e(Obe,kpr),e(nn,Spr),e(xr,Rpr),e(xr,Te),e(Te,_7),e(_7,Vbe),e(Vbe,Ppr),e(_7,Bpr),e(_7,FQ),e(FQ,Ipr),e(_7,qpr),e(Te,Npr),e(Te,b7),e(b7,Xbe),e(Xbe,jpr),e(b7,Dpr),e(b7,TQ),e(TQ,Gpr),e(b7,Opr),e(Te,Vpr),e(Te,v7),e(v7,zbe),e(zbe,Xpr),e(v7,zpr),e(v7,MQ),e(MQ,Wpr),e(v7,Qpr),e(Te,Hpr),e(Te,F7),e(F7,Wbe),e(Wbe,Upr),e(F7,Jpr),e(F7,EQ),e(EQ,Ypr),e(F7,Kpr),e(Te,Zpr),e(Te,T7),e(T7,Qbe),e(Qbe,eur),e(T7,our),e(T7,CQ),e(CQ,rur),e(T7,tur),e(Te,aur),e(Te,M7),e(M7,Hbe),e(Hbe,nur),e(M7,sur),e(M7,wQ),e(wQ,lur),e(M7,iur),e(Te,dur),e(Te,E7),e(E7,Ube),e(Ube,cur),e(E7,fur),e(E7,AQ),e(AQ,mur),e(E7,gur),e(Te,hur),e(Te,C7),e(C7,Jbe),e(Jbe,pur),e(C7,uur),e(C7,yQ),e(yQ,_ur),e(C7,bur),e(Te,vur),e(Te,w7),e(w7,Ybe),e(Ybe,Fur),e(w7,Tur),e(w7,LQ),e(LQ,Mur),e(w7,Eur),e(Te,Cur),e(Te,A7),e(A7,Kbe),e(Kbe,wur),e(A7,Aur),e(A7,xQ),e(xQ,yur),e(A7,Lur),e(Te,xur),e(Te,y7),e(y7,Zbe),e(Zbe,$ur),e(y7,kur),e(y7,$Q),e($Q,Sur),e(y7,Rur),e(Te,Pur),e(Te,L7),e(L7,eve),e(eve,Bur),e(L7,Iur),e(L7,kQ),e(kQ,qur),e(L7,Nur),e(xr,jur),M(x7,xr,null),b(f,INe,_),b(f,nc,_),e(nc,$7),e($7,ove),M(yL,ove,null),e(nc,Dur),e(nc,rve),e(rve,Gur),b(f,qNe,_),b(f,rr,_),M(LL,rr,null),e(rr,Our),e(rr,sc),e(sc,Vur),e(sc,SQ),e(SQ,Xur),e(sc,zur),e(sc,RQ),e(RQ,Wur),e(sc,Qur),e(rr,Hur),e(rr,xL),e(xL,Uur),e(xL,tve),e(tve,Jur),e(xL,Yur),e(rr,Kur),e(rr,Rt),M($L,Rt,null),e(Rt,Zur),e(Rt,ave),e(ave,e_r),e(Rt,o_r),e(Rt,lc),e(lc,r_r),e(lc,nve),e(nve,t_r),e(lc,a_r),e(lc,PQ),e(PQ,n_r),e(lc,s_r),e(Rt,l_r),M(k7,Rt,null),e(rr,i_r),e(rr,$r),M(kL,$r,null),e($r,d_r),e($r,sve),e(sve,c_r),e($r,f_r),e($r,sn),e(sn,m_r),e(sn,lve),e(lve,g_r),e(sn,h_r),e(sn,ive),e(ive,p_r),e(sn,u_r),e(sn,dve),e(dve,__r),e(sn,b_r),e($r,v_r),e($r,ln),e(ln,S7),e(S7,cve),e(cve,F_r),e(S7,T_r),e(S7,BQ),e(BQ,M_r),e(S7,E_r),e(ln,C_r),e(ln,R7),e(R7,fve),e(fve,w_r),e(R7,A_r),e(R7,IQ),e(IQ,y_r),e(R7,L_r),e(ln,x_r),e(ln,P7),e(P7,mve),e(mve,$_r),e(P7,k_r),e(P7,qQ),e(qQ,S_r),e(P7,R_r),e(ln,P_r),e(ln,B7),e(B7,gve),e(gve,B_r),e(B7,I_r),e(B7,NQ),e(NQ,q_r),e(B7,N_r),e($r,j_r),M(I7,$r,null),b(f,NNe,_),b(f,ic,_),e(ic,q7),e(q7,hve),M(SL,hve,null),e(ic,D_r),e(ic,pve),e(pve,G_r),b(f,jNe,_),b(f,tr,_),M(RL,tr,null),e(tr,O_r),e(tr,dc),e(dc,V_r),e(dc,jQ),e(jQ,X_r),e(dc,z_r),e(dc,DQ),e(DQ,W_r),e(dc,Q_r),e(tr,H_r),e(tr,PL),e(PL,U_r),e(PL,uve),e(uve,J_r),e(PL,Y_r),e(tr,K_r),e(tr,Pt),M(BL,Pt,null),e(Pt,Z_r),e(Pt,_ve),e(_ve,e2r),e(Pt,o2r),e(Pt,cc),e(cc,r2r),e(cc,bve),e(bve,t2r),e(cc,a2r),e(cc,GQ),e(GQ,n2r),e(cc,s2r),e(Pt,l2r),M(N7,Pt,null),e(tr,i2r),e(tr,kr),M(IL,kr,null),e(kr,d2r),e(kr,vve),e(vve,c2r),e(kr,f2r),e(kr,dn),e(dn,m2r),e(dn,Fve),e(Fve,g2r),e(dn,h2r),e(dn,Tve),e(Tve,p2r),e(dn,u2r),e(dn,Mve),e(Mve,_2r),e(dn,b2r),e(kr,v2r),e(kr,ie),e(ie,j7),e(j7,Eve),e(Eve,F2r),e(j7,T2r),e(j7,OQ),e(OQ,M2r),e(j7,E2r),e(ie,C2r),e(ie,D7),e(D7,Cve),e(Cve,w2r),e(D7,A2r),e(D7,VQ),e(VQ,y2r),e(D7,L2r),e(ie,x2r),e(ie,G7),e(G7,wve),e(wve,$2r),e(G7,k2r),e(G7,XQ),e(XQ,S2r),e(G7,R2r),e(ie,P2r),e(ie,O7),e(O7,Ave),e(Ave,B2r),e(O7,I2r),e(O7,zQ),e(zQ,q2r),e(O7,N2r),e(ie,j2r),e(ie,V7),e(V7,yve),e(yve,D2r),e(V7,G2r),e(V7,WQ),e(WQ,O2r),e(V7,V2r),e(ie,X2r),e(ie,X7),e(X7,Lve),e(Lve,z2r),e(X7,W2r),e(X7,QQ),e(QQ,Q2r),e(X7,H2r),e(ie,U2r),e(ie,z7),e(z7,xve),e(xve,J2r),e(z7,Y2r),e(z7,HQ),e(HQ,K2r),e(z7,Z2r),e(ie,e1r),e(ie,W7),e(W7,$ve),e($ve,o1r),e(W7,r1r),e(W7,UQ),e(UQ,t1r),e(W7,a1r),e(ie,n1r),e(ie,Q7),e(Q7,kve),e(kve,s1r),e(Q7,l1r),e(Q7,JQ),e(JQ,i1r),e(Q7,d1r),e(ie,c1r),e(ie,H7),e(H7,Sve),e(Sve,f1r),e(H7,m1r),e(H7,YQ),e(YQ,g1r),e(H7,h1r),e(ie,p1r),e(ie,U7),e(U7,Rve),e(Rve,u1r),e(U7,_1r),e(U7,KQ),e(KQ,b1r),e(U7,v1r),e(ie,F1r),e(ie,J7),e(J7,Pve),e(Pve,T1r),e(J7,M1r),e(J7,ZQ),e(ZQ,E1r),e(J7,C1r),e(ie,w1r),e(ie,Y7),e(Y7,Bve),e(Bve,A1r),e(Y7,y1r),e(Y7,eH),e(eH,L1r),e(Y7,x1r),e(ie,$1r),e(ie,K7),e(K7,Ive),e(Ive,k1r),e(K7,S1r),e(K7,oH),e(oH,R1r),e(K7,P1r),e(ie,B1r),e(ie,Z7),e(Z7,qve),e(qve,I1r),e(Z7,q1r),e(Z7,rH),e(rH,N1r),e(Z7,j1r),e(ie,D1r),e(ie,eM),e(eM,Nve),e(Nve,G1r),e(eM,O1r),e(eM,tH),e(tH,V1r),e(eM,X1r),e(ie,z1r),e(ie,oM),e(oM,jve),e(jve,W1r),e(oM,Q1r),e(oM,aH),e(aH,H1r),e(oM,U1r),e(ie,J1r),e(ie,rM),e(rM,Dve),e(Dve,Y1r),e(rM,K1r),e(rM,nH),e(nH,Z1r),e(rM,ebr),e(ie,obr),e(ie,tM),e(tM,Gve),e(Gve,rbr),e(tM,tbr),e(tM,sH),e(sH,abr),e(tM,nbr),e(ie,sbr),e(ie,aM),e(aM,Ove),e(Ove,lbr),e(aM,ibr),e(aM,lH),e(lH,dbr),e(aM,cbr),e(kr,fbr),M(nM,kr,null),b(f,DNe,_),b(f,fc,_),e(fc,sM),e(sM,Vve),M(qL,Vve,null),e(fc,mbr),e(fc,Xve),e(Xve,gbr),b(f,GNe,_),b(f,ar,_),M(NL,ar,null),e(ar,hbr),e(ar,mc),e(mc,pbr),e(mc,iH),e(iH,ubr),e(mc,_br),e(mc,dH),e(dH,bbr),e(mc,vbr),e(ar,Fbr),e(ar,jL),e(jL,Tbr),e(jL,zve),e(zve,Mbr),e(jL,Ebr),e(ar,Cbr),e(ar,Bt),M(DL,Bt,null),e(Bt,wbr),e(Bt,Wve),e(Wve,Abr),e(Bt,ybr),e(Bt,gc),e(gc,Lbr),e(gc,Qve),e(Qve,xbr),e(gc,$br),e(gc,cH),e(cH,kbr),e(gc,Sbr),e(Bt,Rbr),M(lM,Bt,null),e(ar,Pbr),e(ar,Sr),M(GL,Sr,null),e(Sr,Bbr),e(Sr,Hve),e(Hve,Ibr),e(Sr,qbr),e(Sr,cn),e(cn,Nbr),e(cn,Uve),e(Uve,jbr),e(cn,Dbr),e(cn,Jve),e(Jve,Gbr),e(cn,Obr),e(cn,Yve),e(Yve,Vbr),e(cn,Xbr),e(Sr,zbr),e(Sr,ye),e(ye,iM),e(iM,Kve),e(Kve,Wbr),e(iM,Qbr),e(iM,fH),e(fH,Hbr),e(iM,Ubr),e(ye,Jbr),e(ye,dM),e(dM,Zve),e(Zve,Ybr),e(dM,Kbr),e(dM,mH),e(mH,Zbr),e(dM,evr),e(ye,ovr),e(ye,cM),e(cM,eFe),e(eFe,rvr),e(cM,tvr),e(cM,gH),e(gH,avr),e(cM,nvr),e(ye,svr),e(ye,fM),e(fM,oFe),e(oFe,lvr),e(fM,ivr),e(fM,hH),e(hH,dvr),e(fM,cvr),e(ye,fvr),e(ye,mM),e(mM,rFe),e(rFe,mvr),e(mM,gvr),e(mM,pH),e(pH,hvr),e(mM,pvr),e(ye,uvr),e(ye,gM),e(gM,tFe),e(tFe,_vr),e(gM,bvr),e(gM,uH),e(uH,vvr),e(gM,Fvr),e(ye,Tvr),e(ye,hM),e(hM,aFe),e(aFe,Mvr),e(hM,Evr),e(hM,_H),e(_H,Cvr),e(hM,wvr),e(ye,Avr),e(ye,pM),e(pM,nFe),e(nFe,yvr),e(pM,Lvr),e(pM,bH),e(bH,xvr),e(pM,$vr),e(ye,kvr),e(ye,uM),e(uM,sFe),e(sFe,Svr),e(uM,Rvr),e(uM,vH),e(vH,Pvr),e(uM,Bvr),e(ye,Ivr),e(ye,_M),e(_M,lFe),e(lFe,qvr),e(_M,Nvr),e(_M,FH),e(FH,jvr),e(_M,Dvr),e(Sr,Gvr),M(bM,Sr,null),b(f,ONe,_),b(f,hc,_),e(hc,vM),e(vM,iFe),M(OL,iFe,null),e(hc,Ovr),e(hc,dFe),e(dFe,Vvr),b(f,VNe,_),b(f,nr,_),M(VL,nr,null),e(nr,Xvr),e(nr,pc),e(pc,zvr),e(pc,TH),e(TH,Wvr),e(pc,Qvr),e(pc,MH),e(MH,Hvr),e(pc,Uvr),e(nr,Jvr),e(nr,XL),e(XL,Yvr),e(XL,cFe),e(cFe,Kvr),e(XL,Zvr),e(nr,eFr),e(nr,It),M(zL,It,null),e(It,oFr),e(It,fFe),e(fFe,rFr),e(It,tFr),e(It,uc),e(uc,aFr),e(uc,mFe),e(mFe,nFr),e(uc,sFr),e(uc,EH),e(EH,lFr),e(uc,iFr),e(It,dFr),M(FM,It,null),e(nr,cFr),e(nr,Rr),M(WL,Rr,null),e(Rr,fFr),e(Rr,gFe),e(gFe,mFr),e(Rr,gFr),e(Rr,fn),e(fn,hFr),e(fn,hFe),e(hFe,pFr),e(fn,uFr),e(fn,pFe),e(pFe,_Fr),e(fn,bFr),e(fn,uFe),e(uFe,vFr),e(fn,FFr),e(Rr,TFr),e(Rr,oe),e(oe,TM),e(TM,_Fe),e(_Fe,MFr),e(TM,EFr),e(TM,CH),e(CH,CFr),e(TM,wFr),e(oe,AFr),e(oe,MM),e(MM,bFe),e(bFe,yFr),e(MM,LFr),e(MM,wH),e(wH,xFr),e(MM,$Fr),e(oe,kFr),e(oe,EM),e(EM,vFe),e(vFe,SFr),e(EM,RFr),e(EM,AH),e(AH,PFr),e(EM,BFr),e(oe,IFr),e(oe,CM),e(CM,FFe),e(FFe,qFr),e(CM,NFr),e(CM,yH),e(yH,jFr),e(CM,DFr),e(oe,GFr),e(oe,wM),e(wM,TFe),e(TFe,OFr),e(wM,VFr),e(wM,LH),e(LH,XFr),e(wM,zFr),e(oe,WFr),e(oe,AM),e(AM,MFe),e(MFe,QFr),e(AM,HFr),e(AM,xH),e(xH,UFr),e(AM,JFr),e(oe,YFr),e(oe,yM),e(yM,EFe),e(EFe,KFr),e(yM,ZFr),e(yM,$H),e($H,e6r),e(yM,o6r),e(oe,r6r),e(oe,LM),e(LM,CFe),e(CFe,t6r),e(LM,a6r),e(LM,kH),e(kH,n6r),e(LM,s6r),e(oe,l6r),e(oe,xM),e(xM,wFe),e(wFe,i6r),e(xM,d6r),e(xM,SH),e(SH,c6r),e(xM,f6r),e(oe,m6r),e(oe,$M),e($M,AFe),e(AFe,g6r),e($M,h6r),e($M,RH),e(RH,p6r),e($M,u6r),e(oe,_6r),e(oe,kM),e(kM,yFe),e(yFe,b6r),e(kM,v6r),e(kM,PH),e(PH,F6r),e(kM,T6r),e(oe,M6r),e(oe,SM),e(SM,LFe),e(LFe,E6r),e(SM,C6r),e(SM,BH),e(BH,w6r),e(SM,A6r),e(oe,y6r),e(oe,RM),e(RM,xFe),e(xFe,L6r),e(RM,x6r),e(RM,IH),e(IH,$6r),e(RM,k6r),e(oe,S6r),e(oe,PM),e(PM,$Fe),e($Fe,R6r),e(PM,P6r),e(PM,qH),e(qH,B6r),e(PM,I6r),e(oe,q6r),e(oe,BM),e(BM,kFe),e(kFe,N6r),e(BM,j6r),e(BM,NH),e(NH,D6r),e(BM,G6r),e(oe,O6r),e(oe,IM),e(IM,SFe),e(SFe,V6r),e(IM,X6r),e(IM,jH),e(jH,z6r),e(IM,W6r),e(oe,Q6r),e(oe,qM),e(qM,RFe),e(RFe,H6r),e(qM,U6r),e(qM,DH),e(DH,J6r),e(qM,Y6r),e(oe,K6r),e(oe,NM),e(NM,PFe),e(PFe,Z6r),e(NM,eTr),e(NM,GH),e(GH,oTr),e(NM,rTr),e(oe,tTr),e(oe,jM),e(jM,BFe),e(BFe,aTr),e(jM,nTr),e(jM,OH),e(OH,sTr),e(jM,lTr),e(oe,iTr),e(oe,DM),e(DM,IFe),e(IFe,dTr),e(DM,cTr),e(DM,VH),e(VH,fTr),e(DM,mTr),e(oe,gTr),e(oe,GM),e(GM,qFe),e(qFe,hTr),e(GM,pTr),e(GM,XH),e(XH,uTr),e(GM,_Tr),e(oe,bTr),e(oe,OM),e(OM,NFe),e(NFe,vTr),e(OM,FTr),e(OM,zH),e(zH,TTr),e(OM,MTr),e(oe,ETr),e(oe,VM),e(VM,jFe),e(jFe,CTr),e(VM,wTr),e(VM,WH),e(WH,ATr),e(VM,yTr),e(oe,LTr),e(oe,XM),e(XM,DFe),e(DFe,xTr),e(XM,$Tr),e(XM,QH),e(QH,kTr),e(XM,STr),e(oe,RTr),e(oe,zM),e(zM,GFe),e(GFe,PTr),e(zM,BTr),e(zM,HH),e(HH,ITr),e(zM,qTr),e(oe,NTr),e(oe,WM),e(WM,OFe),e(OFe,jTr),e(WM,DTr),e(WM,UH),e(UH,GTr),e(WM,OTr),e(Rr,VTr),M(QM,Rr,null),b(f,XNe,_),b(f,_c,_),e(_c,HM),e(HM,VFe),M(QL,VFe,null),e(_c,XTr),e(_c,XFe),e(XFe,zTr),b(f,zNe,_),b(f,sr,_),M(HL,sr,null),e(sr,WTr),e(sr,bc),e(bc,QTr),e(bc,JH),e(JH,HTr),e(bc,UTr),e(bc,YH),e(YH,JTr),e(bc,YTr),e(sr,KTr),e(sr,UL),e(UL,ZTr),e(UL,zFe),e(zFe,e8r),e(UL,o8r),e(sr,r8r),e(sr,qt),M(JL,qt,null),e(qt,t8r),e(qt,WFe),e(WFe,a8r),e(qt,n8r),e(qt,vc),e(vc,s8r),e(vc,QFe),e(QFe,l8r),e(vc,i8r),e(vc,KH),e(KH,d8r),e(vc,c8r),e(qt,f8r),M(UM,qt,null),e(sr,m8r),e(sr,Pr),M(YL,Pr,null),e(Pr,g8r),e(Pr,HFe),e(HFe,h8r),e(Pr,p8r),e(Pr,mn),e(mn,u8r),e(mn,UFe),e(UFe,_8r),e(mn,b8r),e(mn,JFe),e(JFe,v8r),e(mn,F8r),e(mn,YFe),e(YFe,T8r),e(mn,M8r),e(Pr,E8r),e(Pr,he),e(he,JM),e(JM,KFe),e(KFe,C8r),e(JM,w8r),e(JM,ZH),e(ZH,A8r),e(JM,y8r),e(he,L8r),e(he,YM),e(YM,ZFe),e(ZFe,x8r),e(YM,$8r),e(YM,eU),e(eU,k8r),e(YM,S8r),e(he,R8r),e(he,KM),e(KM,e6e),e(e6e,P8r),e(KM,B8r),e(KM,oU),e(oU,I8r),e(KM,q8r),e(he,N8r),e(he,ZM),e(ZM,o6e),e(o6e,j8r),e(ZM,D8r),e(ZM,rU),e(rU,G8r),e(ZM,O8r),e(he,V8r),e(he,e4),e(e4,r6e),e(r6e,X8r),e(e4,z8r),e(e4,tU),e(tU,W8r),e(e4,Q8r),e(he,H8r),e(he,o4),e(o4,t6e),e(t6e,U8r),e(o4,J8r),e(o4,aU),e(aU,Y8r),e(o4,K8r),e(he,Z8r),e(he,r4),e(r4,a6e),e(a6e,e7r),e(r4,o7r),e(r4,nU),e(nU,r7r),e(r4,t7r),e(he,a7r),e(he,t4),e(t4,n6e),e(n6e,n7r),e(t4,s7r),e(t4,sU),e(sU,l7r),e(t4,i7r),e(he,d7r),e(he,a4),e(a4,s6e),e(s6e,c7r),e(a4,f7r),e(a4,lU),e(lU,m7r),e(a4,g7r),e(he,h7r),e(he,n4),e(n4,l6e),e(l6e,p7r),e(n4,u7r),e(n4,iU),e(iU,_7r),e(n4,b7r),e(he,v7r),e(he,s4),e(s4,i6e),e(i6e,F7r),e(s4,T7r),e(s4,dU),e(dU,M7r),e(s4,E7r),e(he,C7r),e(he,l4),e(l4,d6e),e(d6e,w7r),e(l4,A7r),e(l4,cU),e(cU,y7r),e(l4,L7r),e(he,x7r),e(he,i4),e(i4,c6e),e(c6e,$7r),e(i4,k7r),e(i4,fU),e(fU,S7r),e(i4,R7r),e(he,P7r),e(he,d4),e(d4,f6e),e(f6e,B7r),e(d4,I7r),e(d4,mU),e(mU,q7r),e(d4,N7r),e(he,j7r),e(he,c4),e(c4,m6e),e(m6e,D7r),e(c4,G7r),e(c4,gU),e(gU,O7r),e(c4,V7r),e(he,X7r),e(he,f4),e(f4,g6e),e(g6e,z7r),e(f4,W7r),e(f4,hU),e(hU,Q7r),e(f4,H7r),e(he,U7r),e(he,m4),e(m4,h6e),e(h6e,J7r),e(m4,Y7r),e(m4,pU),e(pU,K7r),e(m4,Z7r),e(Pr,eMr),M(g4,Pr,null),b(f,WNe,_),b(f,Fc,_),e(Fc,h4),e(h4,p6e),M(KL,p6e,null),e(Fc,oMr),e(Fc,u6e),e(u6e,rMr),b(f,QNe,_),b(f,lr,_),M(ZL,lr,null),e(lr,tMr),e(lr,Tc),e(Tc,aMr),e(Tc,uU),e(uU,nMr),e(Tc,sMr),e(Tc,_U),e(_U,lMr),e(Tc,iMr),e(lr,dMr),e(lr,ex),e(ex,cMr),e(ex,_6e),e(_6e,fMr),e(ex,mMr),e(lr,gMr),e(lr,Nt),M(ox,Nt,null),e(Nt,hMr),e(Nt,b6e),e(b6e,pMr),e(Nt,uMr),e(Nt,Mc),e(Mc,_Mr),e(Mc,v6e),e(v6e,bMr),e(Mc,vMr),e(Mc,bU),e(bU,FMr),e(Mc,TMr),e(Nt,MMr),M(p4,Nt,null),e(lr,EMr),e(lr,Br),M(rx,Br,null),e(Br,CMr),e(Br,F6e),e(F6e,wMr),e(Br,AMr),e(Br,gn),e(gn,yMr),e(gn,T6e),e(T6e,LMr),e(gn,xMr),e(gn,M6e),e(M6e,$Mr),e(gn,kMr),e(gn,E6e),e(E6e,SMr),e(gn,RMr),e(Br,PMr),e(Br,tx),e(tx,u4),e(u4,C6e),e(C6e,BMr),e(u4,IMr),e(u4,vU),e(vU,qMr),e(u4,NMr),e(tx,jMr),e(tx,_4),e(_4,w6e),e(w6e,DMr),e(_4,GMr),e(_4,FU),e(FU,OMr),e(_4,VMr),e(Br,XMr),M(b4,Br,null),b(f,HNe,_),b(f,Ec,_),e(Ec,v4),e(v4,A6e),M(ax,A6e,null),e(Ec,zMr),e(Ec,y6e),e(y6e,WMr),b(f,UNe,_),b(f,ir,_),M(nx,ir,null),e(ir,QMr),e(ir,Cc),e(Cc,HMr),e(Cc,TU),e(TU,UMr),e(Cc,JMr),e(Cc,MU),e(MU,YMr),e(Cc,KMr),e(ir,ZMr),e(ir,sx),e(sx,e4r),e(sx,L6e),e(L6e,o4r),e(sx,r4r),e(ir,t4r),e(ir,jt),M(lx,jt,null),e(jt,a4r),e(jt,x6e),e(x6e,n4r),e(jt,s4r),e(jt,wc),e(wc,l4r),e(wc,$6e),e($6e,i4r),e(wc,d4r),e(wc,EU),e(EU,c4r),e(wc,f4r),e(jt,m4r),M(F4,jt,null),e(ir,g4r),e(ir,Ir),M(ix,Ir,null),e(Ir,h4r),e(Ir,k6e),e(k6e,p4r),e(Ir,u4r),e(Ir,hn),e(hn,_4r),e(hn,S6e),e(S6e,b4r),e(hn,v4r),e(hn,R6e),e(R6e,F4r),e(hn,T4r),e(hn,P6e),e(P6e,M4r),e(hn,E4r),e(Ir,C4r),e(Ir,B6e),e(B6e,T4),e(T4,I6e),e(I6e,w4r),e(T4,A4r),e(T4,CU),e(CU,y4r),e(T4,L4r),e(Ir,x4r),M(M4,Ir,null),b(f,JNe,_),b(f,Ac,_),e(Ac,E4),e(E4,q6e),M(dx,q6e,null),e(Ac,$4r),e(Ac,N6e),e(N6e,k4r),b(f,YNe,_),b(f,dr,_),M(cx,dr,null),e(dr,S4r),e(dr,yc),e(yc,R4r),e(yc,wU),e(wU,P4r),e(yc,B4r),e(yc,AU),e(AU,I4r),e(yc,q4r),e(dr,N4r),e(dr,fx),e(fx,j4r),e(fx,j6e),e(j6e,D4r),e(fx,G4r),e(dr,O4r),e(dr,Dt),M(mx,Dt,null),e(Dt,V4r),e(Dt,D6e),e(D6e,X4r),e(Dt,z4r),e(Dt,Lc),e(Lc,W4r),e(Lc,G6e),e(G6e,Q4r),e(Lc,H4r),e(Lc,yU),e(yU,U4r),e(Lc,J4r),e(Dt,Y4r),M(C4,Dt,null),e(dr,K4r),e(dr,qr),M(gx,qr,null),e(qr,Z4r),e(qr,O6e),e(O6e,eEr),e(qr,oEr),e(qr,pn),e(pn,rEr),e(pn,V6e),e(V6e,tEr),e(pn,aEr),e(pn,X6e),e(X6e,nEr),e(pn,sEr),e(pn,z6e),e(z6e,lEr),e(pn,iEr),e(qr,dEr),e(qr,de),e(de,w4),e(w4,W6e),e(W6e,cEr),e(w4,fEr),e(w4,LU),e(LU,mEr),e(w4,gEr),e(de,hEr),e(de,A4),e(A4,Q6e),e(Q6e,pEr),e(A4,uEr),e(A4,xU),e(xU,_Er),e(A4,bEr),e(de,vEr),e(de,y4),e(y4,H6e),e(H6e,FEr),e(y4,TEr),e(y4,$U),e($U,MEr),e(y4,EEr),e(de,CEr),e(de,L4),e(L4,U6e),e(U6e,wEr),e(L4,AEr),e(L4,kU),e(kU,yEr),e(L4,LEr),e(de,xEr),e(de,x4),e(x4,J6e),e(J6e,$Er),e(x4,kEr),e(x4,SU),e(SU,SEr),e(x4,REr),e(de,PEr),e(de,$4),e($4,Y6e),e(Y6e,BEr),e($4,IEr),e($4,RU),e(RU,qEr),e($4,NEr),e(de,jEr),e(de,k4),e(k4,K6e),e(K6e,DEr),e(k4,GEr),e(k4,PU),e(PU,OEr),e(k4,VEr),e(de,XEr),e(de,S4),e(S4,Z6e),e(Z6e,zEr),e(S4,WEr),e(S4,BU),e(BU,QEr),e(S4,HEr),e(de,UEr),e(de,R4),e(R4,eTe),e(eTe,JEr),e(R4,YEr),e(R4,IU),e(IU,KEr),e(R4,ZEr),e(de,eCr),e(de,P4),e(P4,oTe),e(oTe,oCr),e(P4,rCr),e(P4,qU),e(qU,tCr),e(P4,aCr),e(de,nCr),e(de,B4),e(B4,rTe),e(rTe,sCr),e(B4,lCr),e(B4,NU),e(NU,iCr),e(B4,dCr),e(de,cCr),e(de,I4),e(I4,tTe),e(tTe,fCr),e(I4,mCr),e(I4,jU),e(jU,gCr),e(I4,hCr),e(de,pCr),e(de,q4),e(q4,aTe),e(aTe,uCr),e(q4,_Cr),e(q4,DU),e(DU,bCr),e(q4,vCr),e(de,FCr),e(de,N4),e(N4,nTe),e(nTe,TCr),e(N4,MCr),e(N4,GU),e(GU,ECr),e(N4,CCr),e(de,wCr),e(de,j4),e(j4,sTe),e(sTe,ACr),e(j4,yCr),e(j4,OU),e(OU,LCr),e(j4,xCr),e(de,$Cr),e(de,D4),e(D4,lTe),e(lTe,kCr),e(D4,SCr),e(D4,VU),e(VU,RCr),e(D4,PCr),e(de,BCr),e(de,G4),e(G4,iTe),e(iTe,ICr),e(G4,qCr),e(G4,XU),e(XU,NCr),e(G4,jCr),e(de,DCr),e(de,O4),e(O4,dTe),e(dTe,GCr),e(O4,OCr),e(O4,zU),e(zU,VCr),e(O4,XCr),e(de,zCr),e(de,V4),e(V4,cTe),e(cTe,WCr),e(V4,QCr),e(V4,WU),e(WU,HCr),e(V4,UCr),e(de,JCr),e(de,X4),e(X4,fTe),e(fTe,YCr),e(X4,KCr),e(X4,QU),e(QU,ZCr),e(X4,e5r),e(qr,o5r),M(z4,qr,null),b(f,KNe,_),b(f,xc,_),e(xc,W4),e(W4,mTe),M(hx,mTe,null),e(xc,r5r),e(xc,gTe),e(gTe,t5r),b(f,ZNe,_),b(f,cr,_),M(px,cr,null),e(cr,a5r),e(cr,$c),e($c,n5r),e($c,HU),e(HU,s5r),e($c,l5r),e($c,UU),e(UU,i5r),e($c,d5r),e(cr,c5r),e(cr,ux),e(ux,f5r),e(ux,hTe),e(hTe,m5r),e(ux,g5r),e(cr,h5r),e(cr,Gt),M(_x,Gt,null),e(Gt,p5r),e(Gt,pTe),e(pTe,u5r),e(Gt,_5r),e(Gt,kc),e(kc,b5r),e(kc,uTe),e(uTe,v5r),e(kc,F5r),e(kc,JU),e(JU,T5r),e(kc,M5r),e(Gt,E5r),M(Q4,Gt,null),e(cr,C5r),e(cr,Nr),M(bx,Nr,null),e(Nr,w5r),e(Nr,_Te),e(_Te,A5r),e(Nr,y5r),e(Nr,un),e(un,L5r),e(un,bTe),e(bTe,x5r),e(un,$5r),e(un,vTe),e(vTe,k5r),e(un,S5r),e(un,FTe),e(FTe,R5r),e(un,P5r),e(Nr,B5r),e(Nr,ce),e(ce,H4),e(H4,TTe),e(TTe,I5r),e(H4,q5r),e(H4,YU),e(YU,N5r),e(H4,j5r),e(ce,D5r),e(ce,U4),e(U4,MTe),e(MTe,G5r),e(U4,O5r),e(U4,KU),e(KU,V5r),e(U4,X5r),e(ce,z5r),e(ce,J4),e(J4,ETe),e(ETe,W5r),e(J4,Q5r),e(J4,ZU),e(ZU,H5r),e(J4,U5r),e(ce,J5r),e(ce,Y4),e(Y4,CTe),e(CTe,Y5r),e(Y4,K5r),e(Y4,eJ),e(eJ,Z5r),e(Y4,e3r),e(ce,o3r),e(ce,K4),e(K4,wTe),e(wTe,r3r),e(K4,t3r),e(K4,oJ),e(oJ,a3r),e(K4,n3r),e(ce,s3r),e(ce,Z4),e(Z4,ATe),e(ATe,l3r),e(Z4,i3r),e(Z4,rJ),e(rJ,d3r),e(Z4,c3r),e(ce,f3r),e(ce,eE),e(eE,yTe),e(yTe,m3r),e(eE,g3r),e(eE,tJ),e(tJ,h3r),e(eE,p3r),e(ce,u3r),e(ce,oE),e(oE,LTe),e(LTe,_3r),e(oE,b3r),e(oE,aJ),e(aJ,v3r),e(oE,F3r),e(ce,T3r),e(ce,rE),e(rE,xTe),e(xTe,M3r),e(rE,E3r),e(rE,nJ),e(nJ,C3r),e(rE,w3r),e(ce,A3r),e(ce,tE),e(tE,$Te),e($Te,y3r),e(tE,L3r),e(tE,sJ),e(sJ,x3r),e(tE,$3r),e(ce,k3r),e(ce,aE),e(aE,kTe),e(kTe,S3r),e(aE,R3r),e(aE,lJ),e(lJ,P3r),e(aE,B3r),e(ce,I3r),e(ce,nE),e(nE,STe),e(STe,q3r),e(nE,N3r),e(nE,iJ),e(iJ,j3r),e(nE,D3r),e(ce,G3r),e(ce,sE),e(sE,RTe),e(RTe,O3r),e(sE,V3r),e(sE,dJ),e(dJ,X3r),e(sE,z3r),e(ce,W3r),e(ce,lE),e(lE,PTe),e(PTe,Q3r),e(lE,H3r),e(lE,cJ),e(cJ,U3r),e(lE,J3r),e(ce,Y3r),e(ce,iE),e(iE,BTe),e(BTe,K3r),e(iE,Z3r),e(iE,fJ),e(fJ,ewr),e(iE,owr),e(ce,rwr),e(ce,dE),e(dE,ITe),e(ITe,twr),e(dE,awr),e(dE,mJ),e(mJ,nwr),e(dE,swr),e(ce,lwr),e(ce,cE),e(cE,qTe),e(qTe,iwr),e(cE,dwr),e(cE,gJ),e(gJ,cwr),e(cE,fwr),e(ce,mwr),e(ce,fE),e(fE,NTe),e(NTe,gwr),e(fE,hwr),e(fE,hJ),e(hJ,pwr),e(fE,uwr),e(ce,_wr),e(ce,mE),e(mE,jTe),e(jTe,bwr),e(mE,vwr),e(mE,pJ),e(pJ,Fwr),e(mE,Twr),e(ce,Mwr),e(ce,gE),e(gE,DTe),e(DTe,Ewr),e(gE,Cwr),e(gE,uJ),e(uJ,wwr),e(gE,Awr),e(Nr,ywr),M(hE,Nr,null),b(f,eje,_),b(f,Sc,_),e(Sc,pE),e(pE,GTe),M(vx,GTe,null),e(Sc,Lwr),e(Sc,OTe),e(OTe,xwr),b(f,oje,_),b(f,fr,_),M(Fx,fr,null),e(fr,$wr),e(fr,Rc),e(Rc,kwr),e(Rc,_J),e(_J,Swr),e(Rc,Rwr),e(Rc,bJ),e(bJ,Pwr),e(Rc,Bwr),e(fr,Iwr),e(fr,Tx),e(Tx,qwr),e(Tx,VTe),e(VTe,Nwr),e(Tx,jwr),e(fr,Dwr),e(fr,Ot),M(Mx,Ot,null),e(Ot,Gwr),e(Ot,XTe),e(XTe,Owr),e(Ot,Vwr),e(Ot,Pc),e(Pc,Xwr),e(Pc,zTe),e(zTe,zwr),e(Pc,Wwr),e(Pc,vJ),e(vJ,Qwr),e(Pc,Hwr),e(Ot,Uwr),M(uE,Ot,null),e(fr,Jwr),e(fr,jr),M(Ex,jr,null),e(jr,Ywr),e(jr,WTe),e(WTe,Kwr),e(jr,Zwr),e(jr,_n),e(_n,eAr),e(_n,QTe),e(QTe,oAr),e(_n,rAr),e(_n,HTe),e(HTe,tAr),e(_n,aAr),e(_n,UTe),e(UTe,nAr),e(_n,sAr),e(jr,lAr),e(jr,JTe),e(JTe,_E),e(_E,YTe),e(YTe,iAr),e(_E,dAr),e(_E,FJ),e(FJ,cAr),e(_E,fAr),e(jr,mAr),M(bE,jr,null),b(f,rje,_),b(f,Bc,_),e(Bc,vE),e(vE,KTe),M(Cx,KTe,null),e(Bc,gAr),e(Bc,ZTe),e(ZTe,hAr),b(f,tje,_),b(f,mr,_),M(wx,mr,null),e(mr,pAr),e(mr,Ic),e(Ic,uAr),e(Ic,TJ),e(TJ,_Ar),e(Ic,bAr),e(Ic,MJ),e(MJ,vAr),e(Ic,FAr),e(mr,TAr),e(mr,Ax),e(Ax,MAr),e(Ax,e8e),e(e8e,EAr),e(Ax,CAr),e(mr,wAr),e(mr,Vt),M(yx,Vt,null),e(Vt,AAr),e(Vt,o8e),e(o8e,yAr),e(Vt,LAr),e(Vt,qc),e(qc,xAr),e(qc,r8e),e(r8e,$Ar),e(qc,kAr),e(qc,EJ),e(EJ,SAr),e(qc,RAr),e(Vt,PAr),M(FE,Vt,null),e(mr,BAr),e(mr,Dr),M(Lx,Dr,null),e(Dr,IAr),e(Dr,t8e),e(t8e,qAr),e(Dr,NAr),e(Dr,bn),e(bn,jAr),e(bn,a8e),e(a8e,DAr),e(bn,GAr),e(bn,n8e),e(n8e,OAr),e(bn,VAr),e(bn,s8e),e(s8e,XAr),e(bn,zAr),e(Dr,WAr),e(Dr,l8e),e(l8e,TE),e(TE,i8e),e(i8e,QAr),e(TE,HAr),e(TE,CJ),e(CJ,UAr),e(TE,JAr),e(Dr,YAr),M(ME,Dr,null),b(f,aje,_),b(f,Nc,_),e(Nc,EE),e(EE,d8e),M(xx,d8e,null),e(Nc,KAr),e(Nc,c8e),e(c8e,ZAr),b(f,nje,_),b(f,gr,_),M($x,gr,null),e(gr,e0r),e(gr,jc),e(jc,o0r),e(jc,wJ),e(wJ,r0r),e(jc,t0r),e(jc,AJ),e(AJ,a0r),e(jc,n0r),e(gr,s0r),e(gr,kx),e(kx,l0r),e(kx,f8e),e(f8e,i0r),e(kx,d0r),e(gr,c0r),e(gr,Xt),M(Sx,Xt,null),e(Xt,f0r),e(Xt,m8e),e(m8e,m0r),e(Xt,g0r),e(Xt,Dc),e(Dc,h0r),e(Dc,g8e),e(g8e,p0r),e(Dc,u0r),e(Dc,yJ),e(yJ,_0r),e(Dc,b0r),e(Xt,v0r),M(CE,Xt,null),e(gr,F0r),e(gr,Gr),M(Rx,Gr,null),e(Gr,T0r),e(Gr,h8e),e(h8e,M0r),e(Gr,E0r),e(Gr,vn),e(vn,C0r),e(vn,p8e),e(p8e,w0r),e(vn,A0r),e(vn,u8e),e(u8e,y0r),e(vn,L0r),e(vn,_8e),e(_8e,x0r),e(vn,$0r),e(Gr,k0r),e(Gr,te),e(te,wE),e(wE,b8e),e(b8e,S0r),e(wE,R0r),e(wE,LJ),e(LJ,P0r),e(wE,B0r),e(te,I0r),e(te,AE),e(AE,v8e),e(v8e,q0r),e(AE,N0r),e(AE,xJ),e(xJ,j0r),e(AE,D0r),e(te,G0r),e(te,yE),e(yE,F8e),e(F8e,O0r),e(yE,V0r),e(yE,$J),e($J,X0r),e(yE,z0r),e(te,W0r),e(te,LE),e(LE,T8e),e(T8e,Q0r),e(LE,H0r),e(LE,kJ),e(kJ,U0r),e(LE,J0r),e(te,Y0r),e(te,xE),e(xE,M8e),e(M8e,K0r),e(xE,Z0r),e(xE,SJ),e(SJ,eyr),e(xE,oyr),e(te,ryr),e(te,$E),e($E,E8e),e(E8e,tyr),e($E,ayr),e($E,RJ),e(RJ,nyr),e($E,syr),e(te,lyr),e(te,kE),e(kE,C8e),e(C8e,iyr),e(kE,dyr),e(kE,PJ),e(PJ,cyr),e(kE,fyr),e(te,myr),e(te,SE),e(SE,w8e),e(w8e,gyr),e(SE,hyr),e(SE,BJ),e(BJ,pyr),e(SE,uyr),e(te,_yr),e(te,RE),e(RE,A8e),e(A8e,byr),e(RE,vyr),e(RE,IJ),e(IJ,Fyr),e(RE,Tyr),e(te,Myr),e(te,PE),e(PE,y8e),e(y8e,Eyr),e(PE,Cyr),e(PE,qJ),e(qJ,wyr),e(PE,Ayr),e(te,yyr),e(te,BE),e(BE,L8e),e(L8e,Lyr),e(BE,xyr),e(BE,NJ),e(NJ,$yr),e(BE,kyr),e(te,Syr),e(te,IE),e(IE,x8e),e(x8e,Ryr),e(IE,Pyr),e(IE,jJ),e(jJ,Byr),e(IE,Iyr),e(te,qyr),e(te,qE),e(qE,$8e),e($8e,Nyr),e(qE,jyr),e(qE,DJ),e(DJ,Dyr),e(qE,Gyr),e(te,Oyr),e(te,NE),e(NE,k8e),e(k8e,Vyr),e(NE,Xyr),e(NE,GJ),e(GJ,zyr),e(NE,Wyr),e(te,Qyr),e(te,jE),e(jE,S8e),e(S8e,Hyr),e(jE,Uyr),e(jE,OJ),e(OJ,Jyr),e(jE,Yyr),e(te,Kyr),e(te,DE),e(DE,R8e),e(R8e,Zyr),e(DE,eLr),e(DE,VJ),e(VJ,oLr),e(DE,rLr),e(te,tLr),e(te,GE),e(GE,P8e),e(P8e,aLr),e(GE,nLr),e(GE,XJ),e(XJ,sLr),e(GE,lLr),e(te,iLr),e(te,OE),e(OE,B8e),e(B8e,dLr),e(OE,cLr),e(OE,zJ),e(zJ,fLr),e(OE,mLr),e(te,gLr),e(te,VE),e(VE,I8e),e(I8e,hLr),e(VE,pLr),e(VE,WJ),e(WJ,uLr),e(VE,_Lr),e(te,bLr),e(te,XE),e(XE,q8e),e(q8e,vLr),e(XE,FLr),e(XE,QJ),e(QJ,TLr),e(XE,MLr),e(te,ELr),e(te,zE),e(zE,N8e),e(N8e,CLr),e(zE,wLr),e(zE,HJ),e(HJ,ALr),e(zE,yLr),e(te,LLr),e(te,WE),e(WE,j8e),e(j8e,xLr),e(WE,$Lr),e(WE,UJ),e(UJ,kLr),e(WE,SLr),e(te,RLr),e(te,QE),e(QE,D8e),e(D8e,PLr),e(QE,BLr),e(QE,JJ),e(JJ,ILr),e(QE,qLr),e(te,NLr),e(te,HE),e(HE,G8e),e(G8e,jLr),e(HE,DLr),e(HE,YJ),e(YJ,GLr),e(HE,OLr),e(te,VLr),e(te,UE),e(UE,O8e),e(O8e,XLr),e(UE,zLr),e(UE,KJ),e(KJ,WLr),e(UE,QLr),e(Gr,HLr),M(JE,Gr,null),b(f,sje,_),b(f,Gc,_),e(Gc,YE),e(YE,V8e),M(Px,V8e,null),e(Gc,ULr),e(Gc,X8e),e(X8e,JLr),b(f,lje,_),b(f,hr,_),M(Bx,hr,null),e(hr,YLr),e(hr,Oc),e(Oc,KLr),e(Oc,ZJ),e(ZJ,ZLr),e(Oc,exr),e(Oc,eY),e(eY,oxr),e(Oc,rxr),e(hr,txr),e(hr,Ix),e(Ix,axr),e(Ix,z8e),e(z8e,nxr),e(Ix,sxr),e(hr,lxr),e(hr,zt),M(qx,zt,null),e(zt,ixr),e(zt,W8e),e(W8e,dxr),e(zt,cxr),e(zt,Vc),e(Vc,fxr),e(Vc,Q8e),e(Q8e,mxr),e(Vc,gxr),e(Vc,oY),e(oY,hxr),e(Vc,pxr),e(zt,uxr),M(KE,zt,null),e(hr,_xr),e(hr,Or),M(Nx,Or,null),e(Or,bxr),e(Or,H8e),e(H8e,vxr),e(Or,Fxr),e(Or,Fn),e(Fn,Txr),e(Fn,U8e),e(U8e,Mxr),e(Fn,Exr),e(Fn,J8e),e(J8e,Cxr),e(Fn,wxr),e(Fn,Y8e),e(Y8e,Axr),e(Fn,yxr),e(Or,Lxr),e(Or,Re),e(Re,ZE),e(ZE,K8e),e(K8e,xxr),e(ZE,$xr),e(ZE,rY),e(rY,kxr),e(ZE,Sxr),e(Re,Rxr),e(Re,eC),e(eC,Z8e),e(Z8e,Pxr),e(eC,Bxr),e(eC,tY),e(tY,Ixr),e(eC,qxr),e(Re,Nxr),e(Re,oC),e(oC,e7e),e(e7e,jxr),e(oC,Dxr),e(oC,aY),e(aY,Gxr),e(oC,Oxr),e(Re,Vxr),e(Re,rC),e(rC,o7e),e(o7e,Xxr),e(rC,zxr),e(rC,nY),e(nY,Wxr),e(rC,Qxr),e(Re,Hxr),e(Re,tC),e(tC,r7e),e(r7e,Uxr),e(tC,Jxr),e(tC,sY),e(sY,Yxr),e(tC,Kxr),e(Re,Zxr),e(Re,aC),e(aC,t7e),e(t7e,e9r),e(aC,o9r),e(aC,lY),e(lY,r9r),e(aC,t9r),e(Re,a9r),e(Re,nC),e(nC,a7e),e(a7e,n9r),e(nC,s9r),e(nC,iY),e(iY,l9r),e(nC,i9r),e(Re,d9r),e(Re,sC),e(sC,n7e),e(n7e,c9r),e(sC,f9r),e(sC,dY),e(dY,m9r),e(sC,g9r),e(Re,h9r),e(Re,lC),e(lC,s7e),e(s7e,p9r),e(lC,u9r),e(lC,cY),e(cY,_9r),e(lC,b9r),e(Or,v9r),M(iC,Or,null),b(f,ije,_),b(f,Xc,_),e(Xc,dC),e(dC,l7e),M(jx,l7e,null),e(Xc,F9r),e(Xc,i7e),e(i7e,T9r),b(f,dje,_),b(f,pr,_),M(Dx,pr,null),e(pr,M9r),e(pr,zc),e(zc,E9r),e(zc,fY),e(fY,C9r),e(zc,w9r),e(zc,mY),e(mY,A9r),e(zc,y9r),e(pr,L9r),e(pr,Gx),e(Gx,x9r),e(Gx,d7e),e(d7e,$9r),e(Gx,k9r),e(pr,S9r),e(pr,Wt),M(Ox,Wt,null),e(Wt,R9r),e(Wt,c7e),e(c7e,P9r),e(Wt,B9r),e(Wt,Wc),e(Wc,I9r),e(Wc,f7e),e(f7e,q9r),e(Wc,N9r),e(Wc,gY),e(gY,j9r),e(Wc,D9r),e(Wt,G9r),M(cC,Wt,null),e(pr,O9r),e(pr,Vr),M(Vx,Vr,null),e(Vr,V9r),e(Vr,m7e),e(m7e,X9r),e(Vr,z9r),e(Vr,Tn),e(Tn,W9r),e(Tn,g7e),e(g7e,Q9r),e(Tn,H9r),e(Tn,h7e),e(h7e,U9r),e(Tn,J9r),e(Tn,p7e),e(p7e,Y9r),e(Tn,K9r),e(Vr,Z9r),e(Vr,Me),e(Me,fC),e(fC,u7e),e(u7e,e$r),e(fC,o$r),e(fC,hY),e(hY,r$r),e(fC,t$r),e(Me,a$r),e(Me,mC),e(mC,_7e),e(_7e,n$r),e(mC,s$r),e(mC,pY),e(pY,l$r),e(mC,i$r),e(Me,d$r),e(Me,gC),e(gC,b7e),e(b7e,c$r),e(gC,f$r),e(gC,uY),e(uY,m$r),e(gC,g$r),e(Me,h$r),e(Me,hC),e(hC,v7e),e(v7e,p$r),e(hC,u$r),e(hC,_Y),e(_Y,_$r),e(hC,b$r),e(Me,v$r),e(Me,pC),e(pC,F7e),e(F7e,F$r),e(pC,T$r),e(pC,bY),e(bY,M$r),e(pC,E$r),e(Me,C$r),e(Me,uC),e(uC,T7e),e(T7e,w$r),e(uC,A$r),e(uC,vY),e(vY,y$r),e(uC,L$r),e(Me,x$r),e(Me,_C),e(_C,M7e),e(M7e,$$r),e(_C,k$r),e(_C,FY),e(FY,S$r),e(_C,R$r),e(Me,P$r),e(Me,bC),e(bC,E7e),e(E7e,B$r),e(bC,I$r),e(bC,TY),e(TY,q$r),e(bC,N$r),e(Me,j$r),e(Me,vC),e(vC,C7e),e(C7e,D$r),e(vC,G$r),e(vC,MY),e(MY,O$r),e(vC,V$r),e(Me,X$r),e(Me,FC),e(FC,w7e),e(w7e,z$r),e(FC,W$r),e(FC,EY),e(EY,Q$r),e(FC,H$r),e(Me,U$r),e(Me,TC),e(TC,A7e),e(A7e,J$r),e(TC,Y$r),e(TC,CY),e(CY,K$r),e(TC,Z$r),e(Me,ekr),e(Me,MC),e(MC,y7e),e(y7e,okr),e(MC,rkr),e(MC,wY),e(wY,tkr),e(MC,akr),e(Vr,nkr),M(EC,Vr,null),b(f,cje,_),b(f,Qc,_),e(Qc,CC),e(CC,L7e),M(Xx,L7e,null),e(Qc,skr),e(Qc,x7e),e(x7e,lkr),b(f,fje,_),b(f,ur,_),M(zx,ur,null),e(ur,ikr),e(ur,Hc),e(Hc,dkr),e(Hc,AY),e(AY,ckr),e(Hc,fkr),e(Hc,yY),e(yY,mkr),e(Hc,gkr),e(ur,hkr),e(ur,Wx),e(Wx,pkr),e(Wx,$7e),e($7e,ukr),e(Wx,_kr),e(ur,bkr),e(ur,Qt),M(Qx,Qt,null),e(Qt,vkr),e(Qt,k7e),e(k7e,Fkr),e(Qt,Tkr),e(Qt,Uc),e(Uc,Mkr),e(Uc,S7e),e(S7e,Ekr),e(Uc,Ckr),e(Uc,LY),e(LY,wkr),e(Uc,Akr),e(Qt,ykr),M(wC,Qt,null),e(ur,Lkr),e(ur,Xr),M(Hx,Xr,null),e(Xr,xkr),e(Xr,R7e),e(R7e,$kr),e(Xr,kkr),e(Xr,Mn),e(Mn,Skr),e(Mn,P7e),e(P7e,Rkr),e(Mn,Pkr),e(Mn,B7e),e(B7e,Bkr),e(Mn,Ikr),e(Mn,I7e),e(I7e,qkr),e(Mn,Nkr),e(Xr,jkr),e(Xr,Le),e(Le,AC),e(AC,q7e),e(q7e,Dkr),e(AC,Gkr),e(AC,xY),e(xY,Okr),e(AC,Vkr),e(Le,Xkr),e(Le,yC),e(yC,N7e),e(N7e,zkr),e(yC,Wkr),e(yC,$Y),e($Y,Qkr),e(yC,Hkr),e(Le,Ukr),e(Le,LC),e(LC,j7e),e(j7e,Jkr),e(LC,Ykr),e(LC,kY),e(kY,Kkr),e(LC,Zkr),e(Le,eSr),e(Le,xC),e(xC,D7e),e(D7e,oSr),e(xC,rSr),e(xC,SY),e(SY,tSr),e(xC,aSr),e(Le,nSr),e(Le,$C),e($C,G7e),e(G7e,sSr),e($C,lSr),e($C,RY),e(RY,iSr),e($C,dSr),e(Le,cSr),e(Le,kC),e(kC,O7e),e(O7e,fSr),e(kC,mSr),e(kC,PY),e(PY,gSr),e(kC,hSr),e(Le,pSr),e(Le,SC),e(SC,V7e),e(V7e,uSr),e(SC,_Sr),e(SC,BY),e(BY,bSr),e(SC,vSr),e(Le,FSr),e(Le,RC),e(RC,X7e),e(X7e,TSr),e(RC,MSr),e(RC,IY),e(IY,ESr),e(RC,CSr),e(Le,wSr),e(Le,PC),e(PC,z7e),e(z7e,ASr),e(PC,ySr),e(PC,qY),e(qY,LSr),e(PC,xSr),e(Le,$Sr),e(Le,BC),e(BC,W7e),e(W7e,kSr),e(BC,SSr),e(BC,NY),e(NY,RSr),e(BC,PSr),e(Xr,BSr),M(IC,Xr,null),b(f,mje,_),b(f,Jc,_),e(Jc,qC),e(qC,Q7e),M(Ux,Q7e,null),e(Jc,ISr),e(Jc,H7e),e(H7e,qSr),b(f,gje,_),b(f,_r,_),M(Jx,_r,null),e(_r,NSr),e(_r,Yc),e(Yc,jSr),e(Yc,jY),e(jY,DSr),e(Yc,GSr),e(Yc,DY),e(DY,OSr),e(Yc,VSr),e(_r,XSr),e(_r,Yx),e(Yx,zSr),e(Yx,U7e),e(U7e,WSr),e(Yx,QSr),e(_r,HSr),e(_r,Ht),M(Kx,Ht,null),e(Ht,USr),e(Ht,J7e),e(J7e,JSr),e(Ht,YSr),e(Ht,Kc),e(Kc,KSr),e(Kc,Y7e),e(Y7e,ZSr),e(Kc,eRr),e(Kc,GY),e(GY,oRr),e(Kc,rRr),e(Ht,tRr),M(NC,Ht,null),e(_r,aRr),e(_r,zr),M(Zx,zr,null),e(zr,nRr),e(zr,K7e),e(K7e,sRr),e(zr,lRr),e(zr,En),e(En,iRr),e(En,Z7e),e(Z7e,dRr),e(En,cRr),e(En,eMe),e(eMe,fRr),e(En,mRr),e(En,oMe),e(oMe,gRr),e(En,hRr),e(zr,pRr),e(zr,Pe),e(Pe,jC),e(jC,rMe),e(rMe,uRr),e(jC,_Rr),e(jC,OY),e(OY,bRr),e(jC,vRr),e(Pe,FRr),e(Pe,DC),e(DC,tMe),e(tMe,TRr),e(DC,MRr),e(DC,VY),e(VY,ERr),e(DC,CRr),e(Pe,wRr),e(Pe,GC),e(GC,aMe),e(aMe,ARr),e(GC,yRr),e(GC,XY),e(XY,LRr),e(GC,xRr),e(Pe,$Rr),e(Pe,OC),e(OC,nMe),e(nMe,kRr),e(OC,SRr),e(OC,zY),e(zY,RRr),e(OC,PRr),e(Pe,BRr),e(Pe,VC),e(VC,sMe),e(sMe,IRr),e(VC,qRr),e(VC,WY),e(WY,NRr),e(VC,jRr),e(Pe,DRr),e(Pe,XC),e(XC,lMe),e(lMe,GRr),e(XC,ORr),e(XC,QY),e(QY,VRr),e(XC,XRr),e(Pe,zRr),e(Pe,zC),e(zC,iMe),e(iMe,WRr),e(zC,QRr),e(zC,HY),e(HY,HRr),e(zC,URr),e(Pe,JRr),e(Pe,WC),e(WC,dMe),e(dMe,YRr),e(WC,KRr),e(WC,UY),e(UY,ZRr),e(WC,ePr),e(Pe,oPr),e(Pe,QC),e(QC,cMe),e(cMe,rPr),e(QC,tPr),e(QC,JY),e(JY,aPr),e(QC,nPr),e(zr,sPr),M(HC,zr,null),b(f,hje,_),b(f,Zc,_),e(Zc,UC),e(UC,fMe),M(e9,fMe,null),e(Zc,lPr),e(Zc,mMe),e(mMe,iPr),b(f,pje,_),b(f,br,_),M(o9,br,null),e(br,dPr),e(br,ef),e(ef,cPr),e(ef,YY),e(YY,fPr),e(ef,mPr),e(ef,KY),e(KY,gPr),e(ef,hPr),e(br,pPr),e(br,r9),e(r9,uPr),e(r9,gMe),e(gMe,_Pr),e(r9,bPr),e(br,vPr),e(br,Ut),M(t9,Ut,null),e(Ut,FPr),e(Ut,hMe),e(hMe,TPr),e(Ut,MPr),e(Ut,of),e(of,EPr),e(of,pMe),e(pMe,CPr),e(of,wPr),e(of,ZY),e(ZY,APr),e(of,yPr),e(Ut,LPr),M(JC,Ut,null),e(br,xPr),e(br,Wr),M(a9,Wr,null),e(Wr,$Pr),e(Wr,uMe),e(uMe,kPr),e(Wr,SPr),e(Wr,Cn),e(Cn,RPr),e(Cn,_Me),e(_Me,PPr),e(Cn,BPr),e(Cn,bMe),e(bMe,IPr),e(Cn,qPr),e(Cn,vMe),e(vMe,NPr),e(Cn,jPr),e(Wr,DPr),e(Wr,xe),e(xe,YC),e(YC,FMe),e(FMe,GPr),e(YC,OPr),e(YC,eK),e(eK,VPr),e(YC,XPr),e(xe,zPr),e(xe,KC),e(KC,TMe),e(TMe,WPr),e(KC,QPr),e(KC,oK),e(oK,HPr),e(KC,UPr),e(xe,JPr),e(xe,ZC),e(ZC,MMe),e(MMe,YPr),e(ZC,KPr),e(ZC,rK),e(rK,ZPr),e(ZC,eBr),e(xe,oBr),e(xe,e5),e(e5,EMe),e(EMe,rBr),e(e5,tBr),e(e5,tK),e(tK,aBr),e(e5,nBr),e(xe,sBr),e(xe,o5),e(o5,CMe),e(CMe,lBr),e(o5,iBr),e(o5,aK),e(aK,dBr),e(o5,cBr),e(xe,fBr),e(xe,r5),e(r5,wMe),e(wMe,mBr),e(r5,gBr),e(r5,nK),e(nK,hBr),e(r5,pBr),e(xe,uBr),e(xe,t5),e(t5,AMe),e(AMe,_Br),e(t5,bBr),e(t5,sK),e(sK,vBr),e(t5,FBr),e(xe,TBr),e(xe,a5),e(a5,yMe),e(yMe,MBr),e(a5,EBr),e(a5,lK),e(lK,CBr),e(a5,wBr),e(xe,ABr),e(xe,n5),e(n5,LMe),e(LMe,yBr),e(n5,LBr),e(n5,iK),e(iK,xBr),e(n5,$Br),e(xe,kBr),e(xe,s5),e(s5,xMe),e(xMe,SBr),e(s5,RBr),e(s5,dK),e(dK,PBr),e(s5,BBr),e(Wr,IBr),M(l5,Wr,null),b(f,uje,_),b(f,rf,_),e(rf,i5),e(i5,$Me),M(n9,$Me,null),e(rf,qBr),e(rf,kMe),e(kMe,NBr),b(f,_je,_),b(f,vr,_),M(s9,vr,null),e(vr,jBr),e(vr,tf),e(tf,DBr),e(tf,cK),e(cK,GBr),e(tf,OBr),e(tf,fK),e(fK,VBr),e(tf,XBr),e(vr,zBr),e(vr,l9),e(l9,WBr),e(l9,SMe),e(SMe,QBr),e(l9,HBr),e(vr,UBr),e(vr,Jt),M(i9,Jt,null),e(Jt,JBr),e(Jt,RMe),e(RMe,YBr),e(Jt,KBr),e(Jt,af),e(af,ZBr),e(af,PMe),e(PMe,eIr),e(af,oIr),e(af,mK),e(mK,rIr),e(af,tIr),e(Jt,aIr),M(d5,Jt,null),e(vr,nIr),e(vr,Qr),M(d9,Qr,null),e(Qr,sIr),e(Qr,BMe),e(BMe,lIr),e(Qr,iIr),e(Qr,wn),e(wn,dIr),e(wn,IMe),e(IMe,cIr),e(wn,fIr),e(wn,qMe),e(qMe,mIr),e(wn,gIr),e(wn,NMe),e(NMe,hIr),e(wn,pIr),e(Qr,uIr),e(Qr,$e),e($e,c5),e(c5,jMe),e(jMe,_Ir),e(c5,bIr),e(c5,gK),e(gK,vIr),e(c5,FIr),e($e,TIr),e($e,f5),e(f5,DMe),e(DMe,MIr),e(f5,EIr),e(f5,hK),e(hK,CIr),e(f5,wIr),e($e,AIr),e($e,m5),e(m5,GMe),e(GMe,yIr),e(m5,LIr),e(m5,pK),e(pK,xIr),e(m5,$Ir),e($e,kIr),e($e,g5),e(g5,OMe),e(OMe,SIr),e(g5,RIr),e(g5,uK),e(uK,PIr),e(g5,BIr),e($e,IIr),e($e,h5),e(h5,VMe),e(VMe,qIr),e(h5,NIr),e(h5,_K),e(_K,jIr),e(h5,DIr),e($e,GIr),e($e,p5),e(p5,XMe),e(XMe,OIr),e(p5,VIr),e(p5,bK),e(bK,XIr),e(p5,zIr),e($e,WIr),e($e,u5),e(u5,zMe),e(zMe,QIr),e(u5,HIr),e(u5,vK),e(vK,UIr),e(u5,JIr),e($e,YIr),e($e,_5),e(_5,WMe),e(WMe,KIr),e(_5,ZIr),e(_5,FK),e(FK,eqr),e(_5,oqr),e($e,rqr),e($e,b5),e(b5,QMe),e(QMe,tqr),e(b5,aqr),e(b5,TK),e(TK,nqr),e(b5,sqr),e($e,lqr),e($e,v5),e(v5,HMe),e(HMe,iqr),e(v5,dqr),e(v5,MK),e(MK,cqr),e(v5,fqr),e(Qr,mqr),M(F5,Qr,null),b(f,bje,_),b(f,nf,_),e(nf,T5),e(T5,UMe),M(c9,UMe,null),e(nf,gqr),e(nf,JMe),e(JMe,hqr),b(f,vje,_),b(f,Fr,_),M(f9,Fr,null),e(Fr,pqr),e(Fr,sf),e(sf,uqr),e(sf,EK),e(EK,_qr),e(sf,bqr),e(sf,CK),e(CK,vqr),e(sf,Fqr),e(Fr,Tqr),e(Fr,m9),e(m9,Mqr),e(m9,YMe),e(YMe,Eqr),e(m9,Cqr),e(Fr,wqr),e(Fr,Yt),M(g9,Yt,null),e(Yt,Aqr),e(Yt,KMe),e(KMe,yqr),e(Yt,Lqr),e(Yt,lf),e(lf,xqr),e(lf,ZMe),e(ZMe,$qr),e(lf,kqr),e(lf,wK),e(wK,Sqr),e(lf,Rqr),e(Yt,Pqr),M(M5,Yt,null),e(Fr,Bqr),e(Fr,Hr),M(h9,Hr,null),e(Hr,Iqr),e(Hr,e4e),e(e4e,qqr),e(Hr,Nqr),e(Hr,An),e(An,jqr),e(An,o4e),e(o4e,Dqr),e(An,Gqr),e(An,r4e),e(r4e,Oqr),e(An,Vqr),e(An,t4e),e(t4e,Xqr),e(An,zqr),e(Hr,Wqr),e(Hr,De),e(De,E5),e(E5,a4e),e(a4e,Qqr),e(E5,Hqr),e(E5,AK),e(AK,Uqr),e(E5,Jqr),e(De,Yqr),e(De,C5),e(C5,n4e),e(n4e,Kqr),e(C5,Zqr),e(C5,yK),e(yK,eNr),e(C5,oNr),e(De,rNr),e(De,w5),e(w5,s4e),e(s4e,tNr),e(w5,aNr),e(w5,LK),e(LK,nNr),e(w5,sNr),e(De,lNr),e(De,A5),e(A5,l4e),e(l4e,iNr),e(A5,dNr),e(A5,xK),e(xK,cNr),e(A5,fNr),e(De,mNr),e(De,y5),e(y5,i4e),e(i4e,gNr),e(y5,hNr),e(y5,$K),e($K,pNr),e(y5,uNr),e(De,_Nr),e(De,L5),e(L5,d4e),e(d4e,bNr),e(L5,vNr),e(L5,kK),e(kK,FNr),e(L5,TNr),e(De,MNr),e(De,x5),e(x5,c4e),e(c4e,ENr),e(x5,CNr),e(x5,SK),e(SK,wNr),e(x5,ANr),e(De,yNr),e(De,$5),e($5,f4e),e(f4e,LNr),e($5,xNr),e($5,RK),e(RK,$Nr),e($5,kNr),e(Hr,SNr),M(k5,Hr,null),b(f,Fje,_),b(f,df,_),e(df,S5),e(S5,m4e),M(p9,m4e,null),e(df,RNr),e(df,g4e),e(g4e,PNr),b(f,Tje,_),b(f,Tr,_),M(u9,Tr,null),e(Tr,BNr),e(Tr,cf),e(cf,INr),e(cf,PK),e(PK,qNr),e(cf,NNr),e(cf,BK),e(BK,jNr),e(cf,DNr),e(Tr,GNr),e(Tr,_9),e(_9,ONr),e(_9,h4e),e(h4e,VNr),e(_9,XNr),e(Tr,zNr),e(Tr,Kt),M(b9,Kt,null),e(Kt,WNr),e(Kt,p4e),e(p4e,QNr),e(Kt,HNr),e(Kt,ff),e(ff,UNr),e(ff,u4e),e(u4e,JNr),e(ff,YNr),e(ff,IK),e(IK,KNr),e(ff,ZNr),e(Kt,ejr),M(R5,Kt,null),e(Tr,ojr),e(Tr,Ur),M(v9,Ur,null),e(Ur,rjr),e(Ur,_4e),e(_4e,tjr),e(Ur,ajr),e(Ur,yn),e(yn,njr),e(yn,b4e),e(b4e,sjr),e(yn,ljr),e(yn,v4e),e(v4e,ijr),e(yn,djr),e(yn,F4e),e(F4e,cjr),e(yn,fjr),e(Ur,mjr),e(Ur,Ge),e(Ge,P5),e(P5,T4e),e(T4e,gjr),e(P5,hjr),e(P5,qK),e(qK,pjr),e(P5,ujr),e(Ge,_jr),e(Ge,B5),e(B5,M4e),e(M4e,bjr),e(B5,vjr),e(B5,NK),e(NK,Fjr),e(B5,Tjr),e(Ge,Mjr),e(Ge,I5),e(I5,E4e),e(E4e,Ejr),e(I5,Cjr),e(I5,jK),e(jK,wjr),e(I5,Ajr),e(Ge,yjr),e(Ge,q5),e(q5,C4e),e(C4e,Ljr),e(q5,xjr),e(q5,DK),e(DK,$jr),e(q5,kjr),e(Ge,Sjr),e(Ge,N5),e(N5,w4e),e(w4e,Rjr),e(N5,Pjr),e(N5,GK),e(GK,Bjr),e(N5,Ijr),e(Ge,qjr),e(Ge,j5),e(j5,A4e),e(A4e,Njr),e(j5,jjr),e(j5,OK),e(OK,Djr),e(j5,Gjr),e(Ge,Ojr),e(Ge,D5),e(D5,y4e),e(y4e,Vjr),e(D5,Xjr),e(D5,VK),e(VK,zjr),e(D5,Wjr),e(Ge,Qjr),e(Ge,G5),e(G5,L4e),e(L4e,Hjr),e(G5,Ujr),e(G5,XK),e(XK,Jjr),e(G5,Yjr),e(Ur,Kjr),M(O5,Ur,null),b(f,Mje,_),b(f,mf,_),e(mf,V5),e(V5,x4e),M(F9,x4e,null),e(mf,Zjr),e(mf,$4e),e($4e,eDr),b(f,Eje,_),b(f,Mr,_),M(T9,Mr,null),e(Mr,oDr),e(Mr,gf),e(gf,rDr),e(gf,zK),e(zK,tDr),e(gf,aDr),e(gf,WK),e(WK,nDr),e(gf,sDr),e(Mr,lDr),e(Mr,M9),e(M9,iDr),e(M9,k4e),e(k4e,dDr),e(M9,cDr),e(Mr,fDr),e(Mr,Zt),M(E9,Zt,null),e(Zt,mDr),e(Zt,S4e),e(S4e,gDr),e(Zt,hDr),e(Zt,hf),e(hf,pDr),e(hf,R4e),e(R4e,uDr),e(hf,_Dr),e(hf,QK),e(QK,bDr),e(hf,vDr),e(Zt,FDr),M(X5,Zt,null),e(Mr,TDr),e(Mr,Jr),M(C9,Jr,null),e(Jr,MDr),e(Jr,P4e),e(P4e,EDr),e(Jr,CDr),e(Jr,Ln),e(Ln,wDr),e(Ln,B4e),e(B4e,ADr),e(Ln,yDr),e(Ln,I4e),e(I4e,LDr),e(Ln,xDr),e(Ln,q4e),e(q4e,$Dr),e(Ln,kDr),e(Jr,SDr),e(Jr,N4e),e(N4e,z5),e(z5,j4e),e(j4e,RDr),e(z5,PDr),e(z5,HK),e(HK,BDr),e(z5,IDr),e(Jr,qDr),M(W5,Jr,null),b(f,Cje,_),b(f,pf,_),e(pf,Q5),e(Q5,D4e),M(w9,D4e,null),e(pf,NDr),e(pf,G4e),e(G4e,jDr),b(f,wje,_),b(f,Er,_),M(A9,Er,null),e(Er,DDr),e(Er,uf),e(uf,GDr),e(uf,UK),e(UK,ODr),e(uf,VDr),e(uf,JK),e(JK,XDr),e(uf,zDr),e(Er,WDr),e(Er,y9),e(y9,QDr),e(y9,O4e),e(O4e,HDr),e(y9,UDr),e(Er,JDr),e(Er,ea),M(L9,ea,null),e(ea,YDr),e(ea,V4e),e(V4e,KDr),e(ea,ZDr),e(ea,_f),e(_f,eGr),e(_f,X4e),e(X4e,oGr),e(_f,rGr),e(_f,YK),e(YK,tGr),e(_f,aGr),e(ea,nGr),M(H5,ea,null),e(Er,sGr),e(Er,Yr),M(x9,Yr,null),e(Yr,lGr),e(Yr,z4e),e(z4e,iGr),e(Yr,dGr),e(Yr,xn),e(xn,cGr),e(xn,W4e),e(W4e,fGr),e(xn,mGr),e(xn,Q4e),e(Q4e,gGr),e(xn,hGr),e(xn,H4e),e(H4e,pGr),e(xn,uGr),e(Yr,_Gr),e(Yr,$9),e($9,U5),e(U5,U4e),e(U4e,bGr),e(U5,vGr),e(U5,KK),e(KK,FGr),e(U5,TGr),e($9,MGr),e($9,J5),e(J5,J4e),e(J4e,EGr),e(J5,CGr),e(J5,ZK),e(ZK,wGr),e(J5,AGr),e(Yr,yGr),M(Y5,Yr,null),b(f,Aje,_),b(f,bf,_),e(bf,K5),e(K5,Y4e),M(k9,Y4e,null),e(bf,LGr),e(bf,K4e),e(K4e,xGr),b(f,yje,_),b(f,Cr,_),M(S9,Cr,null),e(Cr,$Gr),e(Cr,vf),e(vf,kGr),e(vf,eZ),e(eZ,SGr),e(vf,RGr),e(vf,oZ),e(oZ,PGr),e(vf,BGr),e(Cr,IGr),e(Cr,R9),e(R9,qGr),e(R9,Z4e),e(Z4e,NGr),e(R9,jGr),e(Cr,DGr),e(Cr,oa),M(P9,oa,null),e(oa,GGr),e(oa,eEe),e(eEe,OGr),e(oa,VGr),e(oa,Ff),e(Ff,XGr),e(Ff,oEe),e(oEe,zGr),e(Ff,WGr),e(Ff,rZ),e(rZ,QGr),e(Ff,HGr),e(oa,UGr),M(Z5,oa,null),e(Cr,JGr),e(Cr,Kr),M(B9,Kr,null),e(Kr,YGr),e(Kr,rEe),e(rEe,KGr),e(Kr,ZGr),e(Kr,$n),e($n,eOr),e($n,tEe),e(tEe,oOr),e($n,rOr),e($n,aEe),e(aEe,tOr),e($n,aOr),e($n,nEe),e(nEe,nOr),e($n,sOr),e(Kr,lOr),e(Kr,sEe),e(sEe,e3),e(e3,lEe),e(lEe,iOr),e(e3,dOr),e(e3,tZ),e(tZ,cOr),e(e3,fOr),e(Kr,mOr),M(o3,Kr,null),Lje=!0},p(f,[_]){const I9={};_&2&&(I9.$$scope={dirty:_,ctx:f}),xf.$set(I9);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),Lg.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),ih.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),Nh.$set(cEe);const q9={};_&2&&(q9.$$scope={dirty:_,ctx:f}),jh.$set(q9);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),ap.$set(fEe);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),np.$set(kn);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),ip.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),Zu.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),o_.$set(hEe);const N9={};_&2&&(N9.$$scope={dirty:_,ctx:f}),X_.$set(N9);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),W_.$set(pEe);const j9={};_&2&&(j9.$$scope={dirty:_,ctx:f}),$2.$set(j9);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),S2.$set(uEe);const D9={};_&2&&(D9.$$scope={dirty:_,ctx:f}),p1.$set(D9);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),_1.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),B1.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),q1.$set(vEe);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:f}),kb.$set(Tf);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),Rb.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),cv.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),mv.$set(MEe);const G9={};_&2&&(G9.$$scope={dirty:_,ctx:f}),vv.$set(G9);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),Tv.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),rF.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),aF.$set(wEe);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:f}),zF.$set(rt);const O9={};_&2&&(O9.$$scope={dirty:_,ctx:f}),QF.$set(O9);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),JF.$set(AEe);const V9={};_&2&&(V9.$$scope={dirty:_,ctx:f}),KF.$set(V9);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),f6.$set(yEe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),g6.$set(tt);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),u6.$set(LEe);const Mf={};_&2&&(Mf.$$scope={dirty:_,ctx:f}),b6.$set(Mf);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),T6.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),E6.$set($Ee);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),P6.$set(L);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),I6.$set(r3);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),V6.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),z6.$set(SEe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),rT.$set(t3);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),aT.$set(REe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),iT.$set(PEe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),cT.$set(a3);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),_T.$set(BEe);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),vT.$set(IEe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),CT.$set(n3);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),AT.$set(qEe);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),$T.$set(NEe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),ST.$set(s3);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),BT.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),qT.$set(DEe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),VT.$set(l3);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),zT.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),HT.$set(OEe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),JT.$set(i3);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),O8.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),X8.$set(XEe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),h7.$set(d3);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),u7.$set(zEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),x7.$set(WEe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),k7.$set(c3);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),I7.$set(QEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),N7.$set(HEe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),nM.$set(f3);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),lM.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),bM.$set(JEe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),FM.$set(m3);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),QM.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),UM.$set(KEe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),g4.$set(g3);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),p4.$set(ZEe);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),b4.$set(eCe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),F4.$set(h3);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),M4.$set(oCe);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),C4.$set(rCe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),z4.$set(p3);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),Q4.$set(tCe);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),hE.$set(aCe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),uE.$set(u3);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),bE.$set(nCe);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),FE.$set(sCe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),ME.$set(_3);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),CE.$set(lCe);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),JE.$set(iCe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),KE.$set(b3);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),iC.$set(dCe);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),cC.$set(cCe);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),EC.$set(v3);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),wC.$set(fCe);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),IC.$set(mCe);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),NC.$set(F3);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),HC.$set(gCe);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),JC.$set(hCe);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),l5.$set(T3);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),d5.$set(pCe);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),F5.$set(uCe);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),M5.$set(M3);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),k5.$set(_Ce);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),R5.$set(bCe);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),O5.$set(E3);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),X5.$set(vCe);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:f}),W5.$set(FCe);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),H5.$set(C3);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),Y5.$set(TCe);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),Z5.$set(MCe);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),o3.$set(w3)},i(f){Lje||(E(d.$$.fragment,f),E(La.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(xf.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(SA.$$.fragment,f),E(Lg.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(NA.$$.fragment,f),E(ih.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(XA.$$.fragment,f),E(Nh.$$.fragment,f),E(jh.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(JA.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(o0.$$.fragment,f),E(ip.$$.fragment,f),E(r0.$$.fragment,f),E(Zu.$$.fragment,f),E(t0.$$.fragment,f),E(a0.$$.fragment,f),E(s0.$$.fragment,f),E(o_.$$.fragment,f),E(l0.$$.fragment,f),E(X_.$$.fragment,f),E(i0.$$.fragment,f),E(d0.$$.fragment,f),E(f0.$$.fragment,f),E(W_.$$.fragment,f),E(m0.$$.fragment,f),E($2.$$.fragment,f),E(g0.$$.fragment,f),E(h0.$$.fragment,f),E(u0.$$.fragment,f),E(S2.$$.fragment,f),E(_0.$$.fragment,f),E(p1.$$.fragment,f),E(b0.$$.fragment,f),E(v0.$$.fragment,f),E(T0.$$.fragment,f),E(_1.$$.fragment,f),E(M0.$$.fragment,f),E(B1.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(A0.$$.fragment,f),E(q1.$$.fragment,f),E(y0.$$.fragment,f),E(kb.$$.fragment,f),E(L0.$$.fragment,f),E(x0.$$.fragment,f),E(k0.$$.fragment,f),E(Rb.$$.fragment,f),E(S0.$$.fragment,f),E(cv.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(I0.$$.fragment,f),E(mv.$$.fragment,f),E(q0.$$.fragment,f),E(vv.$$.fragment,f),E(N0.$$.fragment,f),E(j0.$$.fragment,f),E(G0.$$.fragment,f),E(Tv.$$.fragment,f),E(O0.$$.fragment,f),E(rF.$$.fragment,f),E(V0.$$.fragment,f),E(X0.$$.fragment,f),E(W0.$$.fragment,f),E(aF.$$.fragment,f),E(Q0.$$.fragment,f),E(zF.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(Y0.$$.fragment,f),E(QF.$$.fragment,f),E(K0.$$.fragment,f),E(JF.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(KF.$$.fragment,f),E(ty.$$.fragment,f),E(f6.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(g6.$$.fragment,f),E(iy.$$.fragment,f),E(u6.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(b6.$$.fragment,f),E(gy.$$.fragment,f),E(T6.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(E6.$$.fragment,f),E(by.$$.fragment,f),E(P6.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(I6.$$.fragment,f),E(Ey.$$.fragment,f),E(V6.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(z6.$$.fragment,f),E(Ly.$$.fragment,f),E(rT.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(aT.$$.fragment,f),E(Ry.$$.fragment,f),E(iT.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(cT.$$.fragment,f),E(jy.$$.fragment,f),E(_T.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(vT.$$.fragment,f),E(Xy.$$.fragment,f),E(CT.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(AT.$$.fragment,f),E(Uy.$$.fragment,f),E($T.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(ST.$$.fragment,f),E(oL.$$.fragment,f),E(BT.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(qT.$$.fragment,f),E(sL.$$.fragment,f),E(VT.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(zT.$$.fragment,f),E(fL.$$.fragment,f),E(HT.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(JT.$$.fragment,f),E(uL.$$.fragment,f),E(O8.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(X8.$$.fragment,f),E(TL.$$.fragment,f),E(h7.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(u7.$$.fragment,f),E(AL.$$.fragment,f),E(x7.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(k7.$$.fragment,f),E(kL.$$.fragment,f),E(I7.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(N7.$$.fragment,f),E(IL.$$.fragment,f),E(nM.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(lM.$$.fragment,f),E(GL.$$.fragment,f),E(bM.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(FM.$$.fragment,f),E(WL.$$.fragment,f),E(QM.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(UM.$$.fragment,f),E(YL.$$.fragment,f),E(g4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ox.$$.fragment,f),E(p4.$$.fragment,f),E(rx.$$.fragment,f),E(b4.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(F4.$$.fragment,f),E(ix.$$.fragment,f),E(M4.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(C4.$$.fragment,f),E(gx.$$.fragment,f),E(z4.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(Q4.$$.fragment,f),E(bx.$$.fragment,f),E(hE.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(uE.$$.fragment,f),E(Ex.$$.fragment,f),E(bE.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(FE.$$.fragment,f),E(Lx.$$.fragment,f),E(ME.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(CE.$$.fragment,f),E(Rx.$$.fragment,f),E(JE.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(qx.$$.fragment,f),E(KE.$$.fragment,f),E(Nx.$$.fragment,f),E(iC.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(cC.$$.fragment,f),E(Vx.$$.fragment,f),E(EC.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(wC.$$.fragment,f),E(Hx.$$.fragment,f),E(IC.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(NC.$$.fragment,f),E(Zx.$$.fragment,f),E(HC.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(JC.$$.fragment,f),E(a9.$$.fragment,f),E(l5.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(d5.$$.fragment,f),E(d9.$$.fragment,f),E(F5.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(M5.$$.fragment,f),E(h9.$$.fragment,f),E(k5.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(R5.$$.fragment,f),E(v9.$$.fragment,f),E(O5.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(X5.$$.fragment,f),E(C9.$$.fragment,f),E(W5.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(H5.$$.fragment,f),E(x9.$$.fragment,f),E(Y5.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(Z5.$$.fragment,f),E(B9.$$.fragment,f),E(o3.$$.fragment,f),Lje=!0)},o(f){C(d.$$.fragment,f),C(La.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(xf.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(SA.$$.fragment,f),C(Lg.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(NA.$$.fragment,f),C(ih.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(XA.$$.fragment,f),C(Nh.$$.fragment,f),C(jh.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(JA.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(o0.$$.fragment,f),C(ip.$$.fragment,f),C(r0.$$.fragment,f),C(Zu.$$.fragment,f),C(t0.$$.fragment,f),C(a0.$$.fragment,f),C(s0.$$.fragment,f),C(o_.$$.fragment,f),C(l0.$$.fragment,f),C(X_.$$.fragment,f),C(i0.$$.fragment,f),C(d0.$$.fragment,f),C(f0.$$.fragment,f),C(W_.$$.fragment,f),C(m0.$$.fragment,f),C($2.$$.fragment,f),C(g0.$$.fragment,f),C(h0.$$.fragment,f),C(u0.$$.fragment,f),C(S2.$$.fragment,f),C(_0.$$.fragment,f),C(p1.$$.fragment,f),C(b0.$$.fragment,f),C(v0.$$.fragment,f),C(T0.$$.fragment,f),C(_1.$$.fragment,f),C(M0.$$.fragment,f),C(B1.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(A0.$$.fragment,f),C(q1.$$.fragment,f),C(y0.$$.fragment,f),C(kb.$$.fragment,f),C(L0.$$.fragment,f),C(x0.$$.fragment,f),C(k0.$$.fragment,f),C(Rb.$$.fragment,f),C(S0.$$.fragment,f),C(cv.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(I0.$$.fragment,f),C(mv.$$.fragment,f),C(q0.$$.fragment,f),C(vv.$$.fragment,f),C(N0.$$.fragment,f),C(j0.$$.fragment,f),C(G0.$$.fragment,f),C(Tv.$$.fragment,f),C(O0.$$.fragment,f),C(rF.$$.fragment,f),C(V0.$$.fragment,f),C(X0.$$.fragment,f),C(W0.$$.fragment,f),C(aF.$$.fragment,f),C(Q0.$$.fragment,f),C(zF.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(Y0.$$.fragment,f),C(QF.$$.fragment,f),C(K0.$$.fragment,f),C(JF.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(KF.$$.fragment,f),C(ty.$$.fragment,f),C(f6.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(g6.$$.fragment,f),C(iy.$$.fragment,f),C(u6.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(b6.$$.fragment,f),C(gy.$$.fragment,f),C(T6.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(E6.$$.fragment,f),C(by.$$.fragment,f),C(P6.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(I6.$$.fragment,f),C(Ey.$$.fragment,f),C(V6.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(z6.$$.fragment,f),C(Ly.$$.fragment,f),C(rT.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(aT.$$.fragment,f),C(Ry.$$.fragment,f),C(iT.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(cT.$$.fragment,f),C(jy.$$.fragment,f),C(_T.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(vT.$$.fragment,f),C(Xy.$$.fragment,f),C(CT.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(AT.$$.fragment,f),C(Uy.$$.fragment,f),C($T.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(ST.$$.fragment,f),C(oL.$$.fragment,f),C(BT.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(qT.$$.fragment,f),C(sL.$$.fragment,f),C(VT.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(zT.$$.fragment,f),C(fL.$$.fragment,f),C(HT.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(JT.$$.fragment,f),C(uL.$$.fragment,f),C(O8.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(X8.$$.fragment,f),C(TL.$$.fragment,f),C(h7.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(u7.$$.fragment,f),C(AL.$$.fragment,f),C(x7.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(k7.$$.fragment,f),C(kL.$$.fragment,f),C(I7.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(N7.$$.fragment,f),C(IL.$$.fragment,f),C(nM.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(lM.$$.fragment,f),C(GL.$$.fragment,f),C(bM.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(FM.$$.fragment,f),C(WL.$$.fragment,f),C(QM.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(UM.$$.fragment,f),C(YL.$$.fragment,f),C(g4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ox.$$.fragment,f),C(p4.$$.fragment,f),C(rx.$$.fragment,f),C(b4.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(F4.$$.fragment,f),C(ix.$$.fragment,f),C(M4.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(C4.$$.fragment,f),C(gx.$$.fragment,f),C(z4.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(Q4.$$.fragment,f),C(bx.$$.fragment,f),C(hE.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(uE.$$.fragment,f),C(Ex.$$.fragment,f),C(bE.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(FE.$$.fragment,f),C(Lx.$$.fragment,f),C(ME.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(CE.$$.fragment,f),C(Rx.$$.fragment,f),C(JE.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(qx.$$.fragment,f),C(KE.$$.fragment,f),C(Nx.$$.fragment,f),C(iC.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(cC.$$.fragment,f),C(Vx.$$.fragment,f),C(EC.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(wC.$$.fragment,f),C(Hx.$$.fragment,f),C(IC.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(NC.$$.fragment,f),C(Zx.$$.fragment,f),C(HC.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(JC.$$.fragment,f),C(a9.$$.fragment,f),C(l5.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(d5.$$.fragment,f),C(d9.$$.fragment,f),C(F5.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(M5.$$.fragment,f),C(h9.$$.fragment,f),C(k5.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(R5.$$.fragment,f),C(v9.$$.fragment,f),C(O5.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(X5.$$.fragment,f),C(C9.$$.fragment,f),C(W5.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(H5.$$.fragment,f),C(x9.$$.fragment,f),C(Y5.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(Z5.$$.fragment,f),C(B9.$$.fragment,f),C(o3.$$.fragment,f),Lje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Cf),f&&t(at),f&&t(je),f&&t(We),f&&t(Af),w(La,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(Eqe),f&&t(Ci),w(AA),f&&t(Cqe),f&&t(In),f&&t(wqe),w(yA,f),f&&t(Aqe),f&&t(ek),f&&t(yqe),w(xf,f),f&&t(Lqe),f&&t(wi),w(LA),f&&t(xqe),f&&t(wo),w(xA),w(SA),w(Lg),w(RA),f&&t($qe),f&&t(yi),w(PA),f&&t(kqe),f&&t(Ao),w(BA),w(NA),w(ih),w(jA),f&&t(Sqe),f&&t(Li),w(DA),f&&t(Rqe),f&&t(yo),w(GA),w(XA),w(Nh),w(jh),w(zA),f&&t(Pqe),f&&t(xi),w(WA),f&&t(Bqe),f&&t(Lo),w(QA),w(JA),w(ap),w(np),w(YA),f&&t(Iqe),f&&t(ki),w(KA),f&&t(qqe),f&&t(xo),w(ZA),w(o0),w(ip),w(r0),w(Zu),f&&t(Nqe),f&&t(Pi),w(t0),f&&t(jqe),f&&t($o),w(a0),w(s0),w(o_),w(l0),w(X_),f&&t(Dqe),f&&t(qi),w(i0),f&&t(Gqe),f&&t(ko),w(d0),w(f0),w(W_),w(m0),w($2),f&&t(Oqe),f&&t(Di),w(g0),f&&t(Vqe),f&&t(So),w(h0),w(u0),w(S2),w(_0),w(p1),f&&t(Xqe),f&&t(Vi),w(b0),f&&t(zqe),f&&t(Ro),w(v0),w(T0),w(_1),w(M0),w(B1),f&&t(Wqe),f&&t(Wi),w(E0),f&&t(Qqe),f&&t(Po),w(C0),w(A0),w(q1),w(y0),w(kb),f&&t(Hqe),f&&t(Ui),w(L0),f&&t(Uqe),f&&t(Bo),w(x0),w(k0),w(Rb),w(S0),w(cv),f&&t(Jqe),f&&t(Ki),w(R0),f&&t(Yqe),f&&t(Io),w(P0),w(I0),w(mv),w(q0),w(vv),f&&t(Kqe),f&&t(od),w(N0),f&&t(Zqe),f&&t(qo),w(j0),w(G0),w(Tv),w(O0),w(rF),f&&t(eNe),f&&t(ad),w(V0),f&&t(oNe),f&&t(No),w(X0),w(W0),w(aF),w(Q0),w(zF),f&&t(rNe),f&&t(ld),w(H0),f&&t(tNe),f&&t(jo),w(U0),w(Y0),w(QF),w(K0),w(JF),f&&t(aNe),f&&t(cd),w(Z0),f&&t(nNe),f&&t(Do),w(ey),w(ry),w(KF),w(ty),w(f6),f&&t(sNe),f&&t(gd),w(ay),f&&t(lNe),f&&t(Go),w(ny),w(ly),w(g6),w(iy),w(u6),f&&t(iNe),f&&t(ud),w(dy),f&&t(dNe),f&&t(Oo),w(cy),w(my),w(b6),w(gy),w(T6),f&&t(cNe),f&&t(vd),w(hy),f&&t(fNe),f&&t(Vo),w(py),w(_y),w(E6),w(by),w(P6),f&&t(mNe),f&&t(Md),w(vy),f&&t(gNe),f&&t(Xo),w(Fy),w(My),w(I6),w(Ey),w(V6),f&&t(hNe),f&&t(wd),w(Cy),f&&t(pNe),f&&t(zo),w(wy),w(yy),w(z6),w(Ly),w(rT),f&&t(uNe),f&&t(Ld),w(xy),f&&t(_Ne),f&&t(Wo),w($y),w(Sy),w(aT),w(Ry),w(iT),f&&t(bNe),f&&t(kd),w(By),f&&t(vNe),f&&t(Qo),w(Iy),w(Ny),w(cT),w(jy),w(_T),f&&t(FNe),f&&t(Pd),w(Dy),f&&t(TNe),f&&t(Ho),w(Gy),w(Vy),w(vT),w(Xy),w(CT),f&&t(MNe),f&&t(Nd),w(zy),f&&t(ENe),f&&t(Uo),w(Wy),w(Hy),w(AT),w(Uy),w($T),f&&t(CNe),f&&t(Gd),w(Yy),f&&t(wNe),f&&t(Jo),w(Ky),w(eL),w(ST),w(oL),w(BT),f&&t(ANe),f&&t(Xd),w(rL),f&&t(yNe),f&&t(Yo),w(tL),w(nL),w(qT),w(sL),w(VT),f&&t(LNe),f&&t(Qd),w(lL),f&&t(xNe),f&&t(Ko),w(iL),w(cL),w(zT),w(fL),w(HT),f&&t($Ne),f&&t(Jd),w(mL),f&&t(kNe),f&&t(Zo),w(gL),w(pL),w(JT),w(uL),w(O8),f&&t(SNe),f&&t(Zd),w(_L),f&&t(RNe),f&&t(er),w(bL),w(FL),w(X8),w(TL),w(h7),f&&t(PNe),f&&t(rc),w(ML),f&&t(BNe),f&&t(or),w(EL),w(wL),w(u7),w(AL),w(x7),f&&t(INe),f&&t(nc),w(yL),f&&t(qNe),f&&t(rr),w(LL),w($L),w(k7),w(kL),w(I7),f&&t(NNe),f&&t(ic),w(SL),f&&t(jNe),f&&t(tr),w(RL),w(BL),w(N7),w(IL),w(nM),f&&t(DNe),f&&t(fc),w(qL),f&&t(GNe),f&&t(ar),w(NL),w(DL),w(lM),w(GL),w(bM),f&&t(ONe),f&&t(hc),w(OL),f&&t(VNe),f&&t(nr),w(VL),w(zL),w(FM),w(WL),w(QM),f&&t(XNe),f&&t(_c),w(QL),f&&t(zNe),f&&t(sr),w(HL),w(JL),w(UM),w(YL),w(g4),f&&t(WNe),f&&t(Fc),w(KL),f&&t(QNe),f&&t(lr),w(ZL),w(ox),w(p4),w(rx),w(b4),f&&t(HNe),f&&t(Ec),w(ax),f&&t(UNe),f&&t(ir),w(nx),w(lx),w(F4),w(ix),w(M4),f&&t(JNe),f&&t(Ac),w(dx),f&&t(YNe),f&&t(dr),w(cx),w(mx),w(C4),w(gx),w(z4),f&&t(KNe),f&&t(xc),w(hx),f&&t(ZNe),f&&t(cr),w(px),w(_x),w(Q4),w(bx),w(hE),f&&t(eje),f&&t(Sc),w(vx),f&&t(oje),f&&t(fr),w(Fx),w(Mx),w(uE),w(Ex),w(bE),f&&t(rje),f&&t(Bc),w(Cx),f&&t(tje),f&&t(mr),w(wx),w(yx),w(FE),w(Lx),w(ME),f&&t(aje),f&&t(Nc),w(xx),f&&t(nje),f&&t(gr),w($x),w(Sx),w(CE),w(Rx),w(JE),f&&t(sje),f&&t(Gc),w(Px),f&&t(lje),f&&t(hr),w(Bx),w(qx),w(KE),w(Nx),w(iC),f&&t(ije),f&&t(Xc),w(jx),f&&t(dje),f&&t(pr),w(Dx),w(Ox),w(cC),w(Vx),w(EC),f&&t(cje),f&&t(Qc),w(Xx),f&&t(fje),f&&t(ur),w(zx),w(Qx),w(wC),w(Hx),w(IC),f&&t(mje),f&&t(Jc),w(Ux),f&&t(gje),f&&t(_r),w(Jx),w(Kx),w(NC),w(Zx),w(HC),f&&t(hje),f&&t(Zc),w(e9),f&&t(pje),f&&t(br),w(o9),w(t9),w(JC),w(a9),w(l5),f&&t(uje),f&&t(rf),w(n9),f&&t(_je),f&&t(vr),w(s9),w(i9),w(d5),w(d9),w(F5),f&&t(bje),f&&t(nf),w(c9),f&&t(vje),f&&t(Fr),w(f9),w(g9),w(M5),w(h9),w(k5),f&&t(Fje),f&&t(df),w(p9),f&&t(Tje),f&&t(Tr),w(u9),w(b9),w(R5),w(v9),w(O5),f&&t(Mje),f&&t(mf),w(F9),f&&t(Eje),f&&t(Mr),w(T9),w(E9),w(X5),w(C9),w(W5),f&&t(Cje),f&&t(pf),w(w9),f&&t(wje),f&&t(Er),w(A9),w(L9),w(H5),w(x9),w(Y5),f&&t(Aje),f&&t(bf),w(k9),f&&t(yje),f&&t(Cr),w(S9),w(P9),w(Z5),w(B9),w(o3)}}}const x$t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function $$t(A){return Lxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class q$t extends Cxt{constructor(g){super();wxt(this,g,$$t,L$t,Axt,{})}}export{q$t as default,x$t as metadata};
