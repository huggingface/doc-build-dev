import{S as q$,i as I$,s as L$,e as n,k as d,w as v,t as r,M as B$,c as s,d as o,m as h,a,x as w,h as l,b as f,G as t,g as p,y as E,q as $,o as b,B as y,v as M$,L as P$}from"../chunks/vendor-hf-doc-builder.js";import{T as ds}from"../chunks/Tip-hf-doc-builder.js";import{I as z}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as I}from"../chunks/CodeBlock-hf-doc-builder.js";import{F as z$,M as S$}from"../chunks/Markdown-hf-doc-builder.js";function X$(B){let c,k,g,x,O,T,P,C,A,N,S,D,q;return c=new I({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Load tokenizer and PyTorch weights form the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
pt_model = AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-pt-checkpoint")
pt_model.save_pretrained("local-pt-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and PyTorch weights form the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)`}}),D=new I({props:{code:"python -m transformers.onnx --model=local-pt-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-pt-checkpoint onnx/"}}),{c(){v(c.$$.fragment),k=d(),g=n("p"),x=r("Once the checkpoint is saved, we can export it to ONNX by pointing the "),O=n("code"),T=r("--model"),P=r(`
argument of the `),C=n("code"),A=r("transformers.onnx"),N=r(" package to the desired directory:"),S=d(),v(D.$$.fragment)},l(_){w(c.$$.fragment,_),k=h(_),g=s(_,"P",{});var j=a(g);x=l(j,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),O=s(j,"CODE",{});var M=a(O);T=l(M,"--model"),M.forEach(o),P=l(j,`
argument of the `),C=s(j,"CODE",{});var U=a(C);A=l(U,"transformers.onnx"),U.forEach(o),N=l(j," package to the desired directory:"),j.forEach(o),S=h(_),w(D.$$.fragment,_)},m(_,j){E(c,_,j),p(_,k,j),p(_,g,j),t(g,x),t(g,O),t(O,T),t(g,P),t(g,C),t(C,A),t(g,N),p(_,S,j),E(D,_,j),q=!0},p:P$,i(_){q||($(c.$$.fragment,_),$(D.$$.fragment,_),q=!0)},o(_){b(c.$$.fragment,_),b(D.$$.fragment,_),q=!1},d(_){y(c,_),_&&o(k),_&&o(g),_&&o(S),y(D,_)}}}function R$(B){let c,k;return c=new S$({props:{$$slots:{default:[X$]},$$scope:{ctx:B}}}),{c(){v(c.$$.fragment)},l(g){w(c.$$.fragment,g)},m(g,x){E(c,g,x),k=!0},p(g,x){const O={};x&2&&(O.$$scope={dirty:x,ctx:g}),c.$set(O)},i(g){k||($(c.$$.fragment,g),k=!0)},o(g){b(c.$$.fragment,g),k=!1},d(g){y(c,g)}}}function F$(B){let c,k,g,x,O,T,P,C,A,N,S,D,q;return c=new I({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

# Load tokenizer and TensorFlow weights from the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
tf_model = TFAutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-tf-checkpoint")
tf_model.save_pretrained("local-tf-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and TensorFlow weights from the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)`}}),D=new I({props:{code:"python -m transformers.onnx --model=local-tf-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-tf-checkpoint onnx/"}}),{c(){v(c.$$.fragment),k=d(),g=n("p"),x=r("Once the checkpoint is saved, we can export it to ONNX by pointing the "),O=n("code"),T=r("--model"),P=r(`
argument of the `),C=n("code"),A=r("transformers.onnx"),N=r(" package to the desired directory:"),S=d(),v(D.$$.fragment)},l(_){w(c.$$.fragment,_),k=h(_),g=s(_,"P",{});var j=a(g);x=l(j,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),O=s(j,"CODE",{});var M=a(O);T=l(M,"--model"),M.forEach(o),P=l(j,`
argument of the `),C=s(j,"CODE",{});var U=a(C);A=l(U,"transformers.onnx"),U.forEach(o),N=l(j," package to the desired directory:"),j.forEach(o),S=h(_),w(D.$$.fragment,_)},m(_,j){E(c,_,j),p(_,k,j),p(_,g,j),t(g,x),t(g,O),t(O,T),t(g,P),t(g,C),t(C,A),t(g,N),p(_,S,j),E(D,_,j),q=!0},p:P$,i(_){q||($(c.$$.fragment,_),$(D.$$.fragment,_),q=!0)},o(_){b(c.$$.fragment,_),b(D.$$.fragment,_),q=!1},d(_){y(c,_),_&&o(k),_&&o(g),_&&o(S),y(D,_)}}}function H$(B){let c,k;return c=new S$({props:{$$slots:{default:[F$]},$$scope:{ctx:B}}}),{c(){v(c.$$.fragment)},l(g){w(c.$$.fragment,g)},m(g,x){E(c,g,x),k=!0},p(g,x){const O={};x&2&&(O.$$scope={dirty:x,ctx:g}),c.$set(O)},i(g){k||($(c.$$.fragment,g),k=!0)},o(g){b(c.$$.fragment,g),k=!1},d(g){y(c,g)}}}function W$(B){let c,k,g,x,O,T,P,C;return{c(){c=n("p"),k=r("The features that have a "),g=n("code"),x=r("with-past"),O=r(" suffix (e.g. "),T=n("code"),P=r("causal-lm-with-past"),C=r(`)
correspond to model topologies with precomputed hidden states (key and values
in the attention blocks) that can be used for fast autoregressive decoding.`)},l(A){c=s(A,"P",{});var N=a(c);k=l(N,"The features that have a "),g=s(N,"CODE",{});var S=a(g);x=l(S,"with-past"),S.forEach(o),O=l(N," suffix (e.g. "),T=s(N,"CODE",{});var D=a(T);P=l(D,"causal-lm-with-past"),D.forEach(o),C=l(N,`)
correspond to model topologies with precomputed hidden states (key and values
in the attention blocks) that can be used for fast autoregressive decoding.`),N.forEach(o)},m(A,N){p(A,c,N),t(c,k),t(c,g),t(g,x),t(c,O),t(c,T),t(T,P),t(c,C)},d(A){A&&o(c)}}}function V$(B){let c,k,g,x,O;return{c(){c=n("p"),k=r(`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),g=n("code"),x=r("configuration_<model_name>.py"),O=r(" file of a similar architecture.")},l(T){c=s(T,"P",{});var P=a(c);k=l(P,`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),g=s(P,"CODE",{});var C=a(g);x=l(C,"configuration_<model_name>.py"),C.forEach(o),O=l(P," file of a similar architecture."),P.forEach(o)},m(T,P){p(T,c,P),t(c,k),t(c,g),t(g,x),t(c,O)},d(T){T&&o(c)}}}function K$(B){let c,k,g,x,O,T,P,C,A,N,S,D,q,_,j,M,U,we,Fe,G,H,Ee,se;return{c(){c=n("p"),k=r("Notice that "),g=n("code"),x=r("inputs"),O=r(" property for "),T=n("code"),P=r("DistilBertOnnxConfig"),C=r(` returns an
`),A=n("code"),N=r("OrderedDict"),S=r(`. This ensures that the inputs are matched with their relative
position within the `),D=n("code"),q=r("PreTrainedModel.forward()"),_=r(` method when tracing the graph.
We recommend using an `),j=n("code"),M=r("OrderedDict"),U=r(" for the "),we=n("code"),Fe=r("inputs"),G=r(" and "),H=n("code"),Ee=r("outputs"),se=r(` properties
when implementing custom ONNX configurations.`)},l($e){c=s($e,"P",{});var L=a(c);k=l(L,"Notice that "),g=s(L,"CODE",{});var rn=a(g);x=l(rn,"inputs"),rn.forEach(o),O=l(L," property for "),T=s(L,"CODE",{});var qt=a(T);P=l(qt,"DistilBertOnnxConfig"),qt.forEach(o),C=l(L,` returns an
`),A=s(L,"CODE",{});var J=a(A);N=l(J,"OrderedDict"),J.forEach(o),S=l(L,`. This ensures that the inputs are matched with their relative
position within the `),D=s(L,"CODE",{});var ln=a(D);q=l(ln,"PreTrainedModel.forward()"),ln.forEach(o),_=l(L,` method when tracing the graph.
We recommend using an `),j=s(L,"CODE",{});var ae=a(j);M=l(ae,"OrderedDict"),ae.forEach(o),U=l(L," for the "),we=s(L,"CODE",{});var pn=a(we);Fe=l(pn,"inputs"),pn.forEach(o),G=l(L," and "),H=s(L,"CODE",{});var dn=a(H);Ee=l(dn,"outputs"),dn.forEach(o),se=l(L,` properties
when implementing custom ONNX configurations.`),L.forEach(o)},m($e,L){p($e,c,L),t(c,k),t(c,g),t(g,x),t(c,O),t(c,T),t(T,P),t(c,C),t(c,A),t(A,N),t(c,S),t(c,D),t(D,q),t(c,_),t(c,j),t(j,M),t(c,U),t(c,we),t(we,Fe),t(c,G),t(c,H),t(H,Ee),t(c,se)},d($e){$e&&o(c)}}}function U$(B){let c,k,g,x,O,T,P,C;return{c(){c=n("p"),k=r("All of the base properties and methods associated with "),g=n("a"),x=r("OnnxConfig"),O=r(` and the
other configuration classes can be overriden if needed. Check out
`),T=n("code"),P=r("BartOnnxConfig"),C=r(" for an advanced example."),this.h()},l(A){c=s(A,"P",{});var N=a(c);k=l(N,"All of the base properties and methods associated with "),g=s(N,"A",{href:!0});var S=a(g);x=l(S,"OnnxConfig"),S.forEach(o),O=l(N,` and the
other configuration classes can be overriden if needed. Check out
`),T=s(N,"CODE",{});var D=a(T);P=l(D,"BartOnnxConfig"),D.forEach(o),C=l(N," for an advanced example."),N.forEach(o),this.h()},h(){f(g,"href","/docs/transformers/pr_18286/en/main_classes/onnx#transformers.onnx.OnnxConfig")},m(A,N){p(A,c,N),t(c,k),t(c,g),t(g,x),t(c,O),t(c,T),t(T,P),t(c,C)},d(A){A&&o(c)}}}function G$(B){let c,k,g,x,O,T,P,C,A,N,S;return{c(){c=n("p"),k=r(`If your model is larger than 2GB, you will see that many additional files are
created during the export. This is `),g=n("em"),x=r("expected"),O=r(" because ONNX uses "),T=n("a"),P=r(`Protocol
Buffers`),C=r(` to store the model and
these have a size limit of 2GB. See the `),A=n("a"),N=r(`ONNX
documentation`),S=r(`
for instructions on how to load models with external data.`),this.h()},l(D){c=s(D,"P",{});var q=a(c);k=l(q,`If your model is larger than 2GB, you will see that many additional files are
created during the export. This is `),g=s(q,"EM",{});var _=a(g);x=l(_,"expected"),_.forEach(o),O=l(q," because ONNX uses "),T=s(q,"A",{href:!0,rel:!0});var j=a(T);P=l(j,`Protocol
Buffers`),j.forEach(o),C=l(q,` to store the model and
these have a size limit of 2GB. See the `),A=s(q,"A",{href:!0,rel:!0});var M=a(A);N=l(M,`ONNX
documentation`),M.forEach(o),S=l(q,`
for instructions on how to load models with external data.`),q.forEach(o),this.h()},h(){f(T,"href","https://developers.google.com/protocol-buffers/"),f(T,"rel","nofollow"),f(A,"href","https://github.com/onnx/onnx/blob/master/docs/ExternalData.md"),f(A,"rel","nofollow")},m(D,q){p(D,c,q),t(c,k),t(c,g),t(g,x),t(c,O),t(c,T),t(T,P),t(c,C),t(c,A),t(A,N),t(c,S)},d(D){D&&o(c)}}}function J$(B){let c,k;return{c(){c=n("p"),k=r(`This is the very beginning of our experiments with TorchScript and we are still exploring its capabilities with
variable-input-size models. It is a focus of interest to us and we will deepen our analysis in upcoming releases,
with more code examples, a more flexible implementation, and benchmarks comparing python-based codes with compiled
TorchScript.`)},l(g){c=s(g,"P",{});var x=a(c);k=l(x,`This is the very beginning of our experiments with TorchScript and we are still exploring its capabilities with
variable-input-size models. It is a focus of interest to us and we will deepen our analysis in upcoming releases,
with more code examples, a more flexible implementation, and benchmarks comparing python-based codes with compiled
TorchScript.`),x.forEach(o)},m(g,x){p(g,c,x),t(c,k)},d(g){g&&o(c)}}}function Y$(B){let c,k,g,x,O,T,P,C,A,N,S,D,q,_,j,M,U,we,Fe,G,H,Ee,se,$e,L,rn,qt,J,ln,ae,pn,dn,hs,Cd,Pd,Nl,hn,Sd,jl,He,qd,fs,Id,Ld,Al,fn,Bd,Dl,u,cs,Md,zd,us,Xd,Rd,ms,Fd,Hd,gs,Wd,Vd,_s,Kd,Ud,vs,Gd,Jd,ws,Yd,Qd,Es,Zd,eh,$s,th,oh,bs,nh,sh,ys,ah,rh,xs,lh,ih,ks,ph,dh,Ts,hh,fh,Os,ch,uh,Ns,mh,gh,js,_h,vh,As,wh,Eh,Ds,$h,bh,Cs,yh,xh,Ps,kh,Th,Ss,Oh,Nh,qs,jh,Ah,Is,Dh,Ch,Ls,Ph,Sh,Bs,qh,Ih,Ms,Lh,Bh,zs,Mh,zh,Xs,Xh,Rh,Rs,Fh,Hh,Fs,Wh,Vh,Hs,Kh,Uh,Ws,Gh,Jh,Vs,Yh,Qh,Ks,Zh,ef,Us,tf,of,Gs,nf,sf,Js,af,rf,Ys,lf,pf,Qs,df,hf,Zs,ff,cf,ea,uf,mf,ta,gf,_f,oa,vf,wf,na,Ef,$f,sa,bf,yf,aa,xf,Cl,cn,kf,Pl,We,It,Tf,ra,Of,Nf,jf,la,Af,Sl,be,Ve,ia,Lt,Df,pa,Cf,ql,un,Pf,Il,Bt,Ll,Ke,Sf,da,qf,If,Bl,Mt,Ml,mn,Lf,zl,zt,Xl,gn,Bf,Rl,Xt,Fl,re,Mf,ha,zf,Xf,fa,Rf,Ff,Hl,Q,Hf,ca,Wf,Vf,Rt,Kf,Uf,Ft,Gf,Jf,Wl,Ht,Vl,Ue,Yf,ua,Qf,Zf,Kl,Wt,Ul,Ge,ec,Vt,tc,oc,Gl,Kt,Jl,_n,nc,Yl,Je,Ql,ye,Ye,ma,Ut,sc,ga,ac,Zl,Qe,rc,_a,lc,ic,ei,Ze,va,Gt,wa,pc,dc,Ea,hc,fc,X,Jt,Yt,$a,cc,uc,ba,mc,gc,ya,xa,_c,vc,Qt,Zt,ka,wc,Ec,Ta,$c,bc,Oa,Na,yc,xc,eo,ja,Aa,kc,Tc,Da,Ca,Oc,Nc,to,Pa,Sa,jc,Ac,qa,Ia,Dc,Cc,oo,no,La,Pc,Sc,Ba,qc,Ic,Ma,za,Lc,Bc,so,Xa,Ra,Mc,zc,Fa,Ha,Xc,Rc,ao,Wa,Va,Fc,Hc,Ka,Ua,Wc,ti,et,Vc,Ga,Kc,Uc,oi,ro,ni,le,Gc,Ja,Jc,Yc,Ya,Qc,Zc,si,lo,ai,vn,eu,ri,io,li,Z,tu,Qa,ou,nu,Za,su,au,er,ru,lu,ii,tt,pi,xe,ot,tr,po,iu,or,pu,di,wn,du,hi,ie,nr,hu,fu,sr,cu,uu,ar,mu,fi,En,gu,ci,ke,nt,rr,ho,_u,lr,vu,ui,$n,wu,mi,pe,bn,Eu,yn,$u,bu,xn,yu,kn,xu,ku,Tn,Tu,On,Ou,gi,st,_i,at,Nu,ir,ju,Au,vi,fo,wi,W,Du,pr,Cu,Pu,dr,Su,qu,hr,Iu,Lu,fr,Bu,Mu,Ei,rt,$i,Nn,zu,bi,co,yi,jn,Xu,xi,uo,ki,An,Ru,Ti,mo,Oi,V,Fu,cr,Hu,Wu,ur,Vu,Ku,mr,Uu,Gu,gr,Ju,Yu,Ni,go,ji,lt,Ai,Te,it,_r,_o,Qu,vr,Zu,Di,de,em,wr,tm,om,Er,nm,sm,Ci,vo,Pi,R,am,$r,rm,lm,br,im,pm,yr,dm,hm,xr,fm,cm,kr,um,mm,Si,wo,qi,pt,Ii,Oe,dt,Tr,Eo,gm,Or,_m,Li,he,vm,Nr,wm,Em,jr,$m,bm,Bi,$o,Mi,ht,ym,Ar,xm,km,zi,Ne,ft,Dr,bo,Tm,Cr,Om,Xi,Dn,Nm,Ri,fe,yo,jm,Pr,Am,Dm,Cm,Cn,Pm,Sr,Sm,qm,Pn,Im,qr,Lm,Fi,ct,Bm,xo,Mm,zm,Hi,je,ut,Ir,ko,Xm,Lr,Rm,Wi,mt,Vi,gt,Fm,To,Hm,Wm,Ki,Sn,Vm,Ui,qn,Km,Gi,_t,Br,Um,Gm,Oo,Jm,Mr,Ym,Qm,Ji,In,Zm,Yi,Ae,vt,zr,No,eg,Xr,tg,Qi,ce,og,Rr,ng,sg,Fr,ag,rg,Zi,ee,lg,Hr,ig,pg,Wr,dg,hg,Vr,fg,cg,ep,wt,ug,Kr,mg,gg,tp,De,Et,Ur,jo,_g,Gr,vg,op,Ln,wg,np,Bn,Eg,sp,Mn,Jr,$g,ap,zn,bg,rp,Xn,yg,lp,Ce,$t,Yr,Ao,xg,Qr,kg,ip,Rn,Tg,pp,Pe,bt,Zr,Do,Og,el,Ng,dp,Y,jg,tl,Ag,Dg,ol,Cg,Pg,nl,Sg,qg,sl,Ig,hp,Co,fp,Se,yt,al,Po,Lg,rl,Bg,cp,te,Mg,ll,zg,Xg,il,Rg,Fg,pl,Hg,Wg,up,So,mp,qe,xt,dl,qo,Vg,hl,Kg,gp,kt,Ug,fl,Gg,Jg,_p,Io,vp,Ie,Tt,cl,Lo,Yg,ul,Qg,wp,ue,Zg,Bo,e_,t_,Mo,o_,n_,Ep,me,ml,s_,a_,Fn,r_,zo,l_,i_,Le,p_,Xo,d_,h_,Ro,f_,c_,$p,Be,Ot,gl,Fo,u_,_l,m_,bp,F,g_,Ho,__,v_,Wo,w_,E_,Vo,$_,b_,Ko,y_,x_,Uo,k_,T_,yp,Me,Nt,vl,Go,O_,wl,N_,xp,Hn,j_,kp,Wn,ze,A_,Jo,D_,C_,Yo,P_,S_,Tp,Xe,jt,El,Qo,q_,$l,I_,Op,ge,L_,Zo,B_,M_,bl,z_,X_,Np,en,jp,Vn,R_,Ap,Kn,F_,Dp,tn,Cp,Un,H_,Pp,on,Sp,Gn,W_,qp,At,V_,nn,K_,U_,Ip;return T=new z({}),se=new z({}),Lt=new z({}),Bt=new I({props:{code:"pip install transformers[onnx]",highlighted:"pip install transformers[onnx]"}}),Mt=new I({props:{code:`python -m transformers.onnx --help

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating where to store generated ONNX model.

optional arguments:
  -h, --help            show this help message and exit
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The type of features to export the model with.
  --opset OPSET         ONNX opset version to export the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`,highlighted:`python -m transformers.onnx --<span class="hljs-built_in">help</span>

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating <span class="hljs-built_in">where</span> to store generated ONNX model.

optional arguments:
  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span>
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The <span class="hljs-built_in">type</span> of features to <span class="hljs-built_in">export</span> the model with.
  --opset OPSET         ONNX opset version to <span class="hljs-built_in">export</span> the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`}}),zt=new I({props:{code:"python -m transformers.onnx --model=distilbert-base-uncased onnx/",highlighted:"python -m transformers.onnx --model=distilbert-base-uncased onnx/"}}),Xt=new I({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'last_hidden_state'})
        - Validating ONNX Model output "last_hidden_state":
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;last_hidden_state&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;last_hidden_state&quot;</span>:
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),Ht=new I({props:{code:`from transformers import AutoTokenizer
from onnxruntime import InferenceSession

tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
session = InferenceSession("onnx/model.onnx")
# ONNX Runtime expects NumPy arrays as input
inputs = tokenizer("Using DistilBERT with ONNX Runtime!", return_tensors="np")
outputs = session.run(output_names=["last_hidden_state"], input_feed=dict(inputs))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> onnxruntime <span class="hljs-keyword">import</span> InferenceSession

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>session = InferenceSession(<span class="hljs-string">&quot;onnx/model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># ONNX Runtime expects NumPy arrays as input</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Using DistilBERT with ONNX Runtime!&quot;</span>, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = session.run(output_names=[<span class="hljs-string">&quot;last_hidden_state&quot;</span>], input_feed=<span class="hljs-built_in">dict</span>(inputs))`}}),Wt=new I({props:{code:`from transformers.models.distilbert import DistilBertConfig, DistilBertOnnxConfig

config = DistilBertConfig()
onnx_config = DistilBertOnnxConfig(config)
print(list(onnx_config.outputs.keys()))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.models.distilbert <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertOnnxConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(onnx_config.outputs.keys()))
[<span class="hljs-string">&quot;last_hidden_state&quot;</span>]`}}),Kt=new I({props:{code:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/",highlighted:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/"}}),Je=new z$({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[H$],pytorch:[R$]},$$scope:{ctx:B}}}),Ut=new z({}),ro=new I({props:{code:`from transformers.onnx.features import FeaturesManager

distilbert_features = list(FeaturesManager.get_supported_features_for_model_type("distilbert").keys())
print(distilbert_features)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx.features <span class="hljs-keyword">import</span> FeaturesManager

<span class="hljs-meta">&gt;&gt;&gt; </span>distilbert_features = <span class="hljs-built_in">list</span>(FeaturesManager.get_supported_features_for_model_type(<span class="hljs-string">&quot;distilbert&quot;</span>).keys())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(distilbert_features)
[<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;masked-lm&quot;</span>, <span class="hljs-string">&quot;causal-lm&quot;</span>, <span class="hljs-string">&quot;sequence-classification&quot;</span>, <span class="hljs-string">&quot;token-classification&quot;</span>, <span class="hljs-string">&quot;question-answering&quot;</span>]`}}),lo=new I({props:{code:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`,highlighted:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`}}),io=new I({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'logits'})
        - Validating ONNX Model output "logits":
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;logits&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;logits&quot;</span>:
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),tt=new ds({props:{$$slots:{default:[W$]},$$scope:{ctx:B}}}),po=new z({}),ho=new z({}),st=new ds({props:{$$slots:{default:[V$]},$$scope:{ctx:B}}}),fo=new I({props:{code:`from typing import Mapping, OrderedDict
from transformers.onnx import OnnxConfig


class DistilBertOnnxConfig(OnnxConfig):
    @property
    def inputs(self) -> Mapping[str, Mapping[int, str]]:
        return OrderedDict(
            [
                ("input_ids", {0: "batch", 1: "sequence"}),
                ("attention_mask", {0: "batch", 1: "sequence"}),
            ]
        )`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Mapping, OrderedDict
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> OnnxConfig


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">DistilBertOnnxConfig</span>(<span class="hljs-title class_ inherited__">OnnxConfig</span>):
<span class="hljs-meta">... </span>    @<span class="hljs-built_in">property</span>
<span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inputs</span>(<span class="hljs-params">self</span>) -&gt; Mapping[<span class="hljs-built_in">str</span>, Mapping[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>]]:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> OrderedDict(
<span class="hljs-meta">... </span>            [
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;input_ids&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;attention_mask&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>            ]
<span class="hljs-meta">... </span>        )`}}),rt=new ds({props:{$$slots:{default:[K$]},$$scope:{ctx:B}}}),co=new I({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config = DistilBertOnnxConfig(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)`}}),uo=new I({props:{code:"print(onnx_config.default_onnx_opset)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.default_onnx_opset)
<span class="hljs-number">11</span>`}}),mo=new I({props:{code:"print(onnx_config.outputs)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.outputs)
OrderedDict([(<span class="hljs-string">&quot;last_hidden_state&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>})])`}}),go=new I({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task="sequence-classification")
print(onnx_config_for_seq_clf.outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task=<span class="hljs-string">&quot;sequence-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config_for_seq_clf.outputs)
OrderedDict([(<span class="hljs-string">&#x27;logits&#x27;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;batch&#x27;</span>})])`}}),lt=new ds({props:{$$slots:{default:[U$]},$$scope:{ctx:B}}}),_o=new z({}),vo=new I({props:{code:`from pathlib import Path
from transformers.onnx import export
from transformers import AutoTokenizer, AutoModel

onnx_path = Path("model.onnx")
model_ckpt = "distilbert-base-uncased"
base_model = AutoModel.from_pretrained(model_ckpt)
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> export
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_path = Path(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model_ckpt = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>base_model = AutoModel.from_pretrained(model_ckpt)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`}}),wo=new I({props:{code:`import onnx

onnx_model = onnx.load("model.onnx")
onnx.checker.check_model(onnx_model)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> onnx

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_model = onnx.load(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx.checker.check_model(onnx_model)`}}),pt=new ds({props:{$$slots:{default:[G$]},$$scope:{ctx:B}}}),Eo=new z({}),$o=new I({props:{code:`from transformers.onnx import validate_model_outputs

validate_model_outputs(
    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> validate_model_outputs

<span class="hljs-meta">&gt;&gt;&gt; </span>validate_model_outputs(
<span class="hljs-meta">... </span>    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
<span class="hljs-meta">... </span>)`}}),bo=new z({}),ko=new z({}),mt=new ds({props:{$$slots:{default:[J$]},$$scope:{ctx:B}}}),No=new z({}),jo=new z({}),Ao=new z({}),Do=new z({}),Co=new I({props:{code:`from transformers import BertModel, BertTokenizer, BertConfig
import torch

enc = BertTokenizer.from_pretrained("bert-base-uncased")

# Tokenizing input text
text = "[CLS] Who was Jim Henson ? [SEP] Jim Henson was a puppeteer [SEP]"
tokenized_text = enc.tokenize(text)

# Masking one of the input tokens
masked_index = 8
tokenized_text[masked_index] = "[MASK]"
indexed_tokens = enc.convert_tokens_to_ids(tokenized_text)
segments_ids = [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]

# Creating a dummy input
tokens_tensor = torch.tensor([indexed_tokens])
segments_tensors = torch.tensor([segments_ids])
dummy_input = [tokens_tensor, segments_tensors]

# Initializing the model with the torchscript flag
# Flag set to True even though it is not necessary as this model does not have an LM Head.
config = BertConfig(
    vocab_size_or_config_json_file=32000,
    hidden_size=768,
    num_hidden_layers=12,
    num_attention_heads=12,
    intermediate_size=3072,
    torchscript=True,
)

# Instantiating the model
model = BertModel(config)

# The model needs to be in evaluation mode
model.eval()

# If you are instantiating the model with *from_pretrained* you can also easily set the TorchScript flag
model = BertModel.from_pretrained("bert-base-uncased", torchscript=True)

# Creating the trace
traced_model = torch.jit.trace(model, [tokens_tensor, segments_tensors])
torch.jit.save(traced_model, "traced_bert.pt")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel, BertTokenizer, BertConfig
<span class="hljs-keyword">import</span> torch

enc = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-comment"># Tokenizing input text</span>
text = <span class="hljs-string">&quot;[CLS] Who was Jim Henson ? [SEP] Jim Henson was a puppeteer [SEP]&quot;</span>
tokenized_text = enc.tokenize(text)

<span class="hljs-comment"># Masking one of the input tokens</span>
masked_index = <span class="hljs-number">8</span>
tokenized_text[masked_index] = <span class="hljs-string">&quot;[MASK]&quot;</span>
indexed_tokens = enc.convert_tokens_to_ids(tokenized_text)
segments_ids = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># Creating a dummy input</span>
tokens_tensor = torch.tensor([indexed_tokens])
segments_tensors = torch.tensor([segments_ids])
dummy_input = [tokens_tensor, segments_tensors]

<span class="hljs-comment"># Initializing the model with the torchscript flag</span>
<span class="hljs-comment"># Flag set to True even though it is not necessary as this model does not have an LM Head.</span>
config = BertConfig(
    vocab_size_or_config_json_file=<span class="hljs-number">32000</span>,
    hidden_size=<span class="hljs-number">768</span>,
    num_hidden_layers=<span class="hljs-number">12</span>,
    num_attention_heads=<span class="hljs-number">12</span>,
    intermediate_size=<span class="hljs-number">3072</span>,
    torchscript=<span class="hljs-literal">True</span>,
)

<span class="hljs-comment"># Instantiating the model</span>
model = BertModel(config)

<span class="hljs-comment"># The model needs to be in evaluation mode</span>
model.<span class="hljs-built_in">eval</span>()

<span class="hljs-comment"># If you are instantiating the model with *from_pretrained* you can also easily set the TorchScript flag</span>
model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, torchscript=<span class="hljs-literal">True</span>)

<span class="hljs-comment"># Creating the trace</span>
traced_model = torch.jit.trace(model, [tokens_tensor, segments_tensors])
torch.jit.save(traced_model, <span class="hljs-string">&quot;traced_bert.pt&quot;</span>)`}}),Po=new z({}),So=new I({props:{code:`loaded_model = torch.jit.load("traced_bert.pt")
loaded_model.eval()

all_encoder_layers, pooled_output = loaded_model(*dummy_input)`,highlighted:`loaded_model = torch.jit.load(<span class="hljs-string">&quot;traced_bert.pt&quot;</span>)
loaded_model.<span class="hljs-built_in">eval</span>()

all_encoder_layers, pooled_output = loaded_model(*dummy_input)`}}),qo=new z({}),Io=new I({props:{code:"traced_model(tokens_tensor, segments_tensors)",highlighted:"traced_model(tokens_tensor, segments_tensors)"}}),Lo=new z({}),Fo=new z({}),Go=new z({}),Qo=new z({}),en=new I({props:{code:`from transformers import BertModel, BertTokenizer, BertConfig
import torch
import torch.neuron`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel, BertTokenizer, BertConfig
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">import</span> torch.neuron`}}),tn=new I({props:{code:"torch.jit.trace(model, [tokens_tensor, segments_tensors])",highlighted:"torch.jit.trace(model, [tokens_tensor, segments_tensors])"}}),on=new I({props:{code:"torch.neuron.trace(model, [token_tensor, segments_tensors])",highlighted:"torch.neuron.trace(model, [token_tensor, segments_tensors])"}}),{c(){c=n("meta"),k=d(),g=n("h1"),x=n("a"),O=n("span"),v(T.$$.fragment),P=d(),C=n("span"),A=r("Export \u{1F917} Transformers Models"),N=d(),S=n("p"),D=r(`If you need to deploy \u{1F917} Transformers models in production environments, we
recommend exporting them to a serialized format that can be loaded and executed
on specialized runtimes and hardware. In this guide, we\u2019ll show you how to
export \u{1F917} Transformers models in two widely used formats: ONNX and TorchScript.`),q=d(),_=n("p"),j=r(`Once exported, a model can optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run
with maximum efficiency, check out the `),M=n("a"),U=r(`\u{1F917} Optimum
library`),we=r("."),Fe=d(),G=n("h2"),H=n("a"),Ee=n("span"),v(se.$$.fragment),$e=d(),L=n("span"),rn=r("ONNX"),qt=d(),J=n("p"),ln=r("The "),ae=n("a"),pn=r("ONNX (Open Neural Network eXchange)"),dn=r(` project is an open
standard that defines a common set of operators and a common file format to
represent deep learning models in a wide variety of frameworks, including
PyTorch and TensorFlow. When a model is exported to the ONNX format, these
operators are used to construct a computational graph (often called an
`),hs=n("em"),Cd=r("intermediate representation"),Pd=r(`) which represents the flow of data through the
neural network.`),Nl=d(),hn=n("p"),Sd=r(`By exposing a graph with standardized operators and data types, ONNX makes it
easy to switch between frameworks. For example, a model trained in PyTorch can
be exported to ONNX format and then imported in TensorFlow (and vice versa).`),jl=d(),He=n("p"),qd=r("\u{1F917} Transformers provides a "),fs=n("code"),Id=r("transformers.onnx"),Ld=r(` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures,
and are designed to be easily extendable to other architectures.`),Al=d(),fn=n("p"),Bd=r("Ready-made configurations include the following architectures:"),Dl=d(),u=n("ul"),cs=n("li"),Md=r("ALBERT"),zd=d(),us=n("li"),Xd=r("BART"),Rd=d(),ms=n("li"),Fd=r("BEiT"),Hd=d(),gs=n("li"),Wd=r("BERT"),Vd=d(),_s=n("li"),Kd=r("BigBird"),Ud=d(),vs=n("li"),Gd=r("BigBird-Pegasus"),Jd=d(),ws=n("li"),Yd=r("Blenderbot"),Qd=d(),Es=n("li"),Zd=r("BlenderbotSmall"),eh=d(),$s=n("li"),th=r("BLOOM"),oh=d(),bs=n("li"),nh=r("CamemBERT"),sh=d(),ys=n("li"),ah=r("CodeGen"),rh=d(),xs=n("li"),lh=r("ConvBERT"),ih=d(),ks=n("li"),ph=r("ConvNeXT"),dh=d(),Ts=n("li"),hh=r("Data2VecText"),fh=d(),Os=n("li"),ch=r("Data2VecVision"),uh=d(),Ns=n("li"),mh=r("DeBERTa"),gh=d(),js=n("li"),_h=r("DeBERTa-v2"),vh=d(),As=n("li"),wh=r("DeiT"),Eh=d(),Ds=n("li"),$h=r("DETR"),bh=d(),Cs=n("li"),yh=r("DistilBERT"),xh=d(),Ps=n("li"),kh=r("ELECTRA"),Th=d(),Ss=n("li"),Oh=r("FlauBERT"),Nh=d(),qs=n("li"),jh=r("GPT Neo"),Ah=d(),Is=n("li"),Dh=r("GPT-J"),Ch=d(),Ls=n("li"),Ph=r("I-BERT"),Sh=d(),Bs=n("li"),qh=r("LayoutLM"),Ih=d(),Ms=n("li"),Lh=r("LayoutLMv3"),Bh=d(),zs=n("li"),Mh=r("LeViT"),zh=d(),Xs=n("li"),Xh=r("LongT5"),Rh=d(),Rs=n("li"),Fh=r("M2M100"),Hh=d(),Fs=n("li"),Wh=r("Marian"),Vh=d(),Hs=n("li"),Kh=r("mBART"),Uh=d(),Ws=n("li"),Gh=r("MobileBERT"),Jh=d(),Vs=n("li"),Yh=r("MobileViT"),Qh=d(),Ks=n("li"),Zh=r("OpenAI GPT-2"),ef=d(),Us=n("li"),tf=r("Perceiver"),of=d(),Gs=n("li"),nf=r("PLBart"),sf=d(),Js=n("li"),af=r("ResNet"),rf=d(),Ys=n("li"),lf=r("RoBERTa"),pf=d(),Qs=n("li"),df=r("RoFormer"),hf=d(),Zs=n("li"),ff=r("SqueezeBERT"),cf=d(),ea=n("li"),uf=r("T5"),mf=d(),ta=n("li"),gf=r("ViT"),_f=d(),oa=n("li"),vf=r("XLM"),wf=d(),na=n("li"),Ef=r("XLM-RoBERTa"),$f=d(),sa=n("li"),bf=r("XLM-RoBERTa-XL"),yf=d(),aa=n("li"),xf=r("YOLOS"),Cl=d(),cn=n("p"),kf=r("In the next two sections, we\u2019ll show you how to:"),Pl=d(),We=n("ul"),It=n("li"),Tf=r("Export a supported model using the "),ra=n("code"),Of=r("transformers.onnx"),Nf=r(" package."),jf=d(),la=n("li"),Af=r("Export a custom model for an unsupported architecture."),Sl=d(),be=n("h3"),Ve=n("a"),ia=n("span"),v(Lt.$$.fragment),Df=d(),pa=n("span"),Cf=r("Exporting a model to ONNX"),ql=d(),un=n("p"),Pf=r(`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some
extra dependencies:`),Il=d(),v(Bt.$$.fragment),Ll=d(),Ke=n("p"),Sf=r("The "),da=n("code"),qf=r("transformers.onnx"),If=r(" package can then be used as a Python module:"),Bl=d(),v(Mt.$$.fragment),Ml=d(),mn=n("p"),Lf=r("Exporting a checkpoint using a ready-made configuration can be done as follows:"),zl=d(),v(zt.$$.fragment),Xl=d(),gn=n("p"),Bf=r("which should show the following logs:"),Rl=d(),v(Xt.$$.fragment),Fl=d(),re=n("p"),Mf=r("This exports an ONNX graph of the checkpoint defined by the "),ha=n("code"),zf=r("--model"),Xf=r(` argument.
In this example it is `),fa=n("code"),Rf=r("distilbert-base-uncased"),Ff=r(`, but it can be any checkpoint on
the Hugging Face Hub or one that\u2019s stored locally.`),Hl=d(),Q=n("p"),Hf=r("The resulting "),ca=n("code"),Wf=r("model.onnx"),Vf=r(" file can then be run on one of the "),Rt=n("a"),Kf=r(`many
accelerators`),Uf=r(` that support the
ONNX standard. For example, we can load and run the model with `),Ft=n("a"),Gf=r(`ONNX
Runtime`),Jf=r(" as follows:"),Wl=d(),v(Ht.$$.fragment),Vl=d(),Ue=n("p"),Yf=r("The required output names (i.e. "),ua=n("code"),Qf=r('["last_hidden_state"]'),Zf=r(`) can be obtained by
taking a look at the ONNX configuration of each model. For example, for
DistilBERT we have:`),Kl=d(),v(Wt.$$.fragment),Ul=d(),Ge=n("p"),ec=r(`The process is identical for TensorFlow checkpoints on the Hub. For example, we
can export a pure TensorFlow checkpoint from the `),Vt=n("a"),tc=r(`Keras
organization`),oc=r(" as follows:"),Gl=d(),v(Kt.$$.fragment),Jl=d(),_n=n("p"),nc=r(`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights
and tokenizer files stored in a directory. For example, we can load and save a
checkpoint as follows:`),Yl=d(),v(Je.$$.fragment),Ql=d(),ye=n("h3"),Ye=n("a"),ma=n("span"),v(Ut.$$.fragment),sc=d(),ga=n("span"),ac=r("Selecting features for different model topologies"),Zl=d(),Qe=n("p"),rc=r("Each ready-made configuration comes with a set of "),_a=n("em"),lc=r("features"),ic=r(` that enable you to
export models for different types of topologies or tasks. As shown in the table
below, each feature is associated with a different auto class:`),ei=d(),Ze=n("table"),va=n("thead"),Gt=n("tr"),wa=n("th"),pc=r("Feature"),dc=d(),Ea=n("th"),hc=r("Auto Class"),fc=d(),X=n("tbody"),Jt=n("tr"),Yt=n("td"),$a=n("code"),cc=r("causal-lm"),uc=r(", "),ba=n("code"),mc=r("causal-lm-with-past"),gc=d(),ya=n("td"),xa=n("code"),_c=r("AutoModelForCausalLM"),vc=d(),Qt=n("tr"),Zt=n("td"),ka=n("code"),wc=r("default"),Ec=r(", "),Ta=n("code"),$c=r("default-with-past"),bc=d(),Oa=n("td"),Na=n("code"),yc=r("AutoModel"),xc=d(),eo=n("tr"),ja=n("td"),Aa=n("code"),kc=r("masked-lm"),Tc=d(),Da=n("td"),Ca=n("code"),Oc=r("AutoModelForMaskedLM"),Nc=d(),to=n("tr"),Pa=n("td"),Sa=n("code"),jc=r("question-answering"),Ac=d(),qa=n("td"),Ia=n("code"),Dc=r("AutoModelForQuestionAnswering"),Cc=d(),oo=n("tr"),no=n("td"),La=n("code"),Pc=r("seq2seq-lm"),Sc=r(", "),Ba=n("code"),qc=r("seq2seq-lm-with-past"),Ic=d(),Ma=n("td"),za=n("code"),Lc=r("AutoModelForSeq2SeqLM"),Bc=d(),so=n("tr"),Xa=n("td"),Ra=n("code"),Mc=r("sequence-classification"),zc=d(),Fa=n("td"),Ha=n("code"),Xc=r("AutoModelForSequenceClassification"),Rc=d(),ao=n("tr"),Wa=n("td"),Va=n("code"),Fc=r("token-classification"),Hc=d(),Ka=n("td"),Ua=n("code"),Wc=r("AutoModelForTokenClassification"),ti=d(),et=n("p"),Vc=r(`For each configuration, you can find the list of supported features via the
`),Ga=n("code"),Kc=r("FeaturesManager"),Uc=r(". For example, for DistilBERT we have:"),oi=d(),v(ro.$$.fragment),ni=d(),le=n("p"),Gc=r("You can then pass one of these features to the "),Ja=n("code"),Jc=r("--feature"),Yc=r(` argument in the
`),Ya=n("code"),Qc=r("transformers.onnx"),Zc=r(` package. For example, to export a text-classification model
we can pick a fine-tuned model from the Hub and run:`),si=d(),v(lo.$$.fragment),ai=d(),vn=n("p"),eu=r("which will display the following logs:"),ri=d(),v(io.$$.fragment),li=d(),Z=n("p"),tu=r(`Notice that in this case, the output names from the fine-tuned model are
`),Qa=n("code"),ou=r("logits"),nu=r(" instead of the "),Za=n("code"),su=r("last_hidden_state"),au=r(` we saw with the
`),er=n("code"),ru=r("distilbert-base-uncased"),lu=r(` checkpoint earlier. This is expected since the
fine-tuned model has a sequence classification head.`),ii=d(),v(tt.$$.fragment),pi=d(),xe=n("h3"),ot=n("a"),tr=n("span"),v(po.$$.fragment),iu=d(),or=n("span"),pu=r("Exporting a model for an unsupported architecture"),di=d(),wn=n("p"),du=r(`If you wish to export a model whose architecture is not natively supported by
the library, there are three main steps to follow:`),hi=d(),ie=n("ol"),nr=n("li"),hu=r("Implement a custom ONNX configuration."),fu=d(),sr=n("li"),cu=r("Export the model to ONNX."),uu=d(),ar=n("li"),mu=r("Validate the outputs of the PyTorch and exported models."),fi=d(),En=n("p"),gu=r(`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s
involved with each step.`),ci=d(),ke=n("h4"),nt=n("a"),rr=n("span"),v(ho.$$.fragment),_u=d(),lr=n("span"),vu=r("Implementing a custom ONNX configuration"),ui=d(),$n=n("p"),wu=r(`Let\u2019s start with the ONNX configuration object. We provide three abstract
classes that you should inherit from, depending on the type of model
architecture you wish to export:`),mi=d(),pe=n("ul"),bn=n("li"),Eu=r("Encoder-based models inherit from "),yn=n("a"),$u=r("OnnxConfig"),bu=d(),xn=n("li"),yu=r("Decoder-based models inherit from "),kn=n("a"),xu=r("OnnxConfigWithPast"),ku=d(),Tn=n("li"),Tu=r("Encoder-decoder models inherit from "),On=n("a"),Ou=r("OnnxSeq2SeqConfigWithPast"),gi=d(),v(st.$$.fragment),_i=d(),at=n("p"),Nu=r(`Since DistilBERT is an encoder-based model, its configuration inherits from
`),ir=n("code"),ju=r("OnnxConfig"),Au=r(":"),vi=d(),v(fo.$$.fragment),wi=d(),W=n("p"),Du=r("Every configuration object must implement the "),pr=n("code"),Cu=r("inputs"),Pu=r(` property and return a
mapping, where each key corresponds to an expected input, and each value
indicates the axis of that input. For DistilBERT, we can see that two inputs are
required: `),dr=n("code"),Su=r("input_ids"),qu=r(" and "),hr=n("code"),Iu=r("attention_mask"),Lu=r(`. These inputs have the same shape of
`),fr=n("code"),Bu=r("(batch_size, sequence_length)"),Mu=r(` which is why we see the same axes used in the
configuration.`),Ei=d(),v(rt.$$.fragment),$i=d(),Nn=n("p"),zu=r(`Once you have implemented an ONNX configuration, you can instantiate it by
providing the base model\u2019s configuration as follows:`),bi=d(),v(co.$$.fragment),yi=d(),jn=n("p"),Xu=r(`The resulting object has several useful properties. For example you can view the
ONNX operator set that will be used during the export:`),xi=d(),v(uo.$$.fragment),ki=d(),An=n("p"),Ru=r("You can also view the outputs associated with the model as follows:"),Ti=d(),v(mo.$$.fragment),Oi=d(),V=n("p"),Fu=r(`Notice that the outputs property follows the same structure as the inputs; it
returns an `),cr=n("code"),Hu=r("OrderedDict"),Wu=r(` of named outputs and their shapes. The output structure
is linked to the choice of feature that the configuration is initialised with.
By default, the ONNX configuration is initialized with the `),ur=n("code"),Vu=r("default"),Ku=r(` feature
that corresponds to exporting a model loaded with the `),mr=n("code"),Uu=r("AutoModel"),Gu=r(` class. If you
want to export a different model topology, just provide a different feature to
the `),gr=n("code"),Ju=r("task"),Yu=r(` argument when you initialize the ONNX configuration. For example, if
we wished to export DistilBERT with a sequence classification head, we could
use:`),Ni=d(),v(go.$$.fragment),ji=d(),v(lt.$$.fragment),Ai=d(),Te=n("h4"),it=n("a"),_r=n("span"),v(_o.$$.fragment),Qu=d(),vr=n("span"),Zu=r("Exporting the model"),Di=d(),de=n("p"),em=r(`Once you have implemented the ONNX configuration, the next step is to export the
model. Here we can use the `),wr=n("code"),tm=r("export()"),om=r(` function provided by the
`),Er=n("code"),nm=r("transformers.onnx"),sm=r(` package. This function expects the ONNX configuration, along
with the base model and tokenizer, and the path to save the exported file:`),Ci=d(),v(vo.$$.fragment),Pi=d(),R=n("p"),am=r("The "),$r=n("code"),rm=r("onnx_inputs"),lm=r(" and "),br=n("code"),im=r("onnx_outputs"),pm=r(" returned by the "),yr=n("code"),dm=r("export()"),hm=r(` function are
lists of the keys defined in the `),xr=n("code"),fm=r("inputs"),cm=r(" and "),kr=n("code"),um=r("outputs"),mm=r(` properties of the
configuration. Once the model is exported, you can test that the model is well
formed as follows:`),Si=d(),v(wo.$$.fragment),qi=d(),v(pt.$$.fragment),Ii=d(),Oe=n("h4"),dt=n("a"),Tr=n("span"),v(Eo.$$.fragment),gm=d(),Or=n("span"),_m=r("Validating the model outputs"),Li=d(),he=n("p"),vm=r(`The final step is to validate that the outputs from the base and exported model
agree within some absolute tolerance. Here we can use the
`),Nr=n("code"),wm=r("validate_model_outputs()"),Em=r(" function provided by the "),jr=n("code"),$m=r("transformers.onnx"),bm=r(` package
as follows:`),Bi=d(),v($o.$$.fragment),Mi=d(),ht=n("p"),ym=r("This function uses the "),Ar=n("code"),xm=r("OnnxConfig.generate_dummy_inputs()"),km=r(` method to generate
inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6
to 1e-4 range, although anything smaller than 1e-3 is likely to be OK.`),zi=d(),Ne=n("h3"),ft=n("a"),Dr=n("span"),v(bo.$$.fragment),Tm=d(),Cr=n("span"),Om=r("Contributing a new configuration to \u{1F917} Transformers"),Xi=d(),Dn=n("p"),Nm=r(`We are looking to expand the set of ready-made configurations and welcome
contributions from the community! If you would like to contribute your addition
to the library, you will need to:`),Ri=d(),fe=n("ul"),yo=n("li"),jm=r("Implement the ONNX configuration in the corresponding "),Pr=n("code"),Am=r("configuration_<model_name>.py"),Dm=r(`
file`),Cm=d(),Cn=n("li"),Pm=r("Include the model architecture and corresponding features in "),Sr=n("code"),Sm=r("FeatureManager"),qm=d(),Pn=n("li"),Im=r("Add your model architecture to the tests in "),qr=n("code"),Lm=r("test_onnx_v2.py"),Fi=d(),ct=n("p"),Bm=r("Check out how the configuration for "),xo=n("a"),Mm=r(`IBERT was
contributed`),zm=r(` to
get an idea of what\u2019s involved.`),Hi=d(),je=n("h2"),ut=n("a"),Ir=n("span"),v(ko.$$.fragment),Xm=d(),Lr=n("span"),Rm=r("TorchScript"),Wi=d(),v(mt.$$.fragment),Vi=d(),gt=n("p"),Fm=r(`According to Pytorch\u2019s documentation: \u201CTorchScript is a way to create serializable and optimizable models from PyTorch
code\u201D. Pytorch\u2019s two modules `),To=n("a"),Hm=r("JIT and TRACE"),Wm=r(` allow the developer to export
their model to be re-used in other programs, such as efficiency-oriented C++ programs.`),Ki=d(),Sn=n("p"),Vm=r(`We have provided an interface that allows the export of \u{1F917} Transformers models to TorchScript so that they can be reused
in a different environment than a Pytorch-based python program. Here we explain how to export and use our models using
TorchScript.`),Ui=d(),qn=n("p"),Km=r("Exporting a model requires two things:"),Gi=d(),_t=n("ul"),Br=n("li"),Um=r("a forward pass with dummy inputs."),Gm=d(),Oo=n("li"),Jm=r("model instantiation with the "),Mr=n("code"),Ym=r("torchscript"),Qm=r(" flag."),Ji=d(),In=n("p"),Zm=r("These necessities imply several things developers should be careful about. These are detailed below."),Yi=d(),Ae=n("h3"),vt=n("a"),zr=n("span"),v(No.$$.fragment),eg=d(),Xr=n("span"),tg=r("TorchScript flag and tied weights"),Qi=d(),ce=n("p"),og=r(`This flag is necessary because most of the language models in this repository have tied weights between their
`),Rr=n("code"),ng=r("Embedding"),sg=r(" layer and their "),Fr=n("code"),ag=r("Decoding"),rg=r(` layer. TorchScript does not allow the export of models that have tied
weights, therefore it is necessary to untie and clone the weights beforehand.`),Zi=d(),ee=n("p"),lg=r("This implies that models instantiated with the "),Hr=n("code"),ig=r("torchscript"),pg=r(" flag have their "),Wr=n("code"),dg=r("Embedding"),hg=r(" layer and "),Vr=n("code"),fg=r("Decoding"),cg=r(`
layer separate, which means that they should not be trained down the line. Training would de-synchronize the two
layers, leading to unexpected results.`),ep=d(),wt=n("p"),ug=r(`This is not the case for models that do not have a Language Model head, as those do not have tied weights. These models
can be safely exported without the `),Kr=n("code"),mg=r("torchscript"),gg=r(" flag."),tp=d(),De=n("h3"),Et=n("a"),Ur=n("span"),v(jo.$$.fragment),_g=d(),Gr=n("span"),vg=r("Dummy inputs and standard lengths"),op=d(),Ln=n("p"),wg=r(`The dummy inputs are used to do a model forward pass. While the inputs\u2019 values are propagating through the layers,
Pytorch keeps track of the different operations executed on each tensor. These recorded operations are then used to
create the \u201Ctrace\u201D of the model.`),np=d(),Bn=n("p"),Eg=r(`The trace is created relatively to the inputs\u2019 dimensions. It is therefore constrained by the dimensions of the dummy
input, and will not work for any other sequence length or batch size. When trying with a different size, an error such
as:`),sp=d(),Mn=n("p"),Jr=n("code"),$g=r("The expanded size of the tensor (3) must match the existing size (7) at non-singleton dimension 2"),ap=d(),zn=n("p"),bg=r(`will be raised. It is therefore recommended to trace the model with a dummy input size at least as large as the largest
input that will be fed to the model during inference. Padding can be performed to fill the missing values. As the model
will have been traced with a large input size however, the dimensions of the different matrix will be large as well,
resulting in more calculations.`),rp=d(),Xn=n("p"),yg=r(`It is recommended to be careful of the total number of operations done on each input and to follow performance closely
when exporting varying sequence-length models.`),lp=d(),Ce=n("h3"),$t=n("a"),Yr=n("span"),v(Ao.$$.fragment),xg=d(),Qr=n("span"),kg=r("Using TorchScript in Python"),ip=d(),Rn=n("p"),Tg=r("Below is an example, showing how to save, load models as well as how to use the trace for inference."),pp=d(),Pe=n("h4"),bt=n("a"),Zr=n("span"),v(Do.$$.fragment),Og=d(),el=n("span"),Ng=r("Saving a model"),dp=d(),Y=n("p"),jg=r("This snippet shows how to use TorchScript to export a "),tl=n("code"),Ag=r("BertModel"),Dg=r(". Here the "),ol=n("code"),Cg=r("BertModel"),Pg=r(` is instantiated according
to a `),nl=n("code"),Sg=r("BertConfig"),qg=r(" class and then saved to disk under the filename "),sl=n("code"),Ig=r("traced_bert.pt"),hp=d(),v(Co.$$.fragment),fp=d(),Se=n("h4"),yt=n("a"),al=n("span"),v(Po.$$.fragment),Lg=d(),rl=n("span"),Bg=r("Loading a model"),cp=d(),te=n("p"),Mg=r("This snippet shows how to load the "),ll=n("code"),zg=r("BertModel"),Xg=r(" that was previously saved to disk under the name "),il=n("code"),Rg=r("traced_bert.pt"),Fg=r(`.
We are re-using the previously initialised `),pl=n("code"),Hg=r("dummy_input"),Wg=r("."),up=d(),v(So.$$.fragment),mp=d(),qe=n("h4"),xt=n("a"),dl=n("span"),v(qo.$$.fragment),Vg=d(),hl=n("span"),Kg=r("Using a traced model for inference"),gp=d(),kt=n("p"),Ug=r("Using the traced model for inference is as simple as using its "),fl=n("code"),Gg=r("__call__"),Jg=r(" dunder method:"),_p=d(),v(Io.$$.fragment),vp=d(),Ie=n("h3"),Tt=n("a"),cl=n("span"),v(Lo.$$.fragment),Yg=d(),ul=n("span"),Qg=r("Deploying HuggingFace TorchScript models on AWS using the Neuron SDK"),wp=d(),ue=n("p"),Zg=r("AWS introduced the "),Bo=n("a"),e_=r("Amazon EC2 Inf1"),t_=r(`
instance family for low cost, high performance machine learning inference in the cloud.
The Inf1 instances are powered by the AWS Inferentia chip, a custom-built hardware accelerator,
specializing in deep learning inferencing workloads.
`),Mo=n("a"),o_=r("AWS Neuron"),n_=r(`
is the SDK for Inferentia that supports tracing and optimizing transformers models for
deployment on Inf1. The Neuron SDK provides:`),Ep=d(),me=n("ol"),ml=n("li"),s_=r("Easy-to-use API with one line of code change to trace and optimize a TorchScript model for inference in the cloud."),a_=d(),Fn=n("li"),r_=r("Out of the box performance optimizations for "),zo=n("a"),l_=r("improved cost-performance"),i_=d(),Le=n("li"),p_=r("Support for HuggingFace transformers models built with either "),Xo=n("a"),d_=r("PyTorch"),h_=r(`
or `),Ro=n("a"),f_=r("TensorFlow"),c_=r("."),$p=d(),Be=n("h4"),Ot=n("a"),gl=n("span"),v(Fo.$$.fragment),u_=d(),_l=n("span"),m_=r("Implications"),bp=d(),F=n("p"),g_=r("Transformers Models based on the "),Ho=n("a"),__=r("BERT (Bidirectional Encoder Representations from Transformers)"),v_=r(`
architecture, or its variants such as `),Wo=n("a"),w_=r("distilBERT"),E_=r(`
and `),Vo=n("a"),$_=r("roBERTa"),b_=r(`
will run best on Inf1 for non-generative tasks such as Extractive Question Answering,
Sequence Classification, Token Classification. Alternatively, text generation
tasks can be adapted to run on Inf1, according to this `),Ko=n("a"),y_=r("AWS Neuron MarianMT tutorial"),x_=r(`.
More information about models that can be converted out of the box on Inferentia can be
found in the `),Uo=n("a"),k_=r("Model Architecture Fit section of the Neuron documentation"),T_=r("."),yp=d(),Me=n("h4"),Nt=n("a"),vl=n("span"),v(Go.$$.fragment),O_=d(),wl=n("span"),N_=r("Dependencies"),xp=d(),Hn=n("p"),j_=r("Using AWS Neuron to convert models requires the following dependencies and environment:"),kp=d(),Wn=n("ul"),ze=n("li"),A_=r("A "),Jo=n("a"),D_=r("Neuron SDK environment"),C_=r(`,
which comes pre-configured on `),Yo=n("a"),P_=r("AWS Deep Learning AMI"),S_=r("."),Tp=d(),Xe=n("h4"),jt=n("a"),El=n("span"),v(Qo.$$.fragment),q_=d(),$l=n("span"),I_=r("Converting a Model for AWS Neuron"),Op=d(),ge=n("p"),L_=r("Using the same script as in "),Zo=n("a"),B_=r("Using TorchScript in Python"),M_=r(`
to trace a \u201CBertModel\u201D, you import `),bl=n("code"),z_=r("torch.neuron"),X_=r(` framework extension to access
the components of the Neuron SDK through a Python API.`),Np=d(),v(en.$$.fragment),jp=d(),Vn=n("p"),R_=r("And only modify the tracing line of code"),Ap=d(),Kn=n("p"),F_=r("from:"),Dp=d(),v(tn.$$.fragment),Cp=d(),Un=n("p"),H_=r("to:"),Pp=d(),v(on.$$.fragment),Sp=d(),Gn=n("p"),W_=r("This change enables Neuron SDK to trace the model and optimize it to run in Inf1 instances."),qp=d(),At=n("p"),V_=r(`To learn more about AWS Neuron SDK features, tools, example tutorials and latest updates,
please see the `),nn=n("a"),K_=r("AWS NeuronSDK documentation"),U_=r("."),this.h()},l(e){const i=B$('[data-svelte="svelte-1phssyn"]',document.head);c=s(i,"META",{name:!0,content:!0}),i.forEach(o),k=h(e),g=s(e,"H1",{class:!0});var sn=a(g);x=s(sn,"A",{id:!0,class:!0,href:!0});var yl=a(x);O=s(yl,"SPAN",{});var xl=a(O);w(T.$$.fragment,xl),xl.forEach(o),yl.forEach(o),P=h(sn),C=s(sn,"SPAN",{});var kl=a(C);A=l(kl,"Export \u{1F917} Transformers Models"),kl.forEach(o),sn.forEach(o),N=h(e),S=s(e,"P",{});var Tl=a(S);D=l(Tl,`If you need to deploy \u{1F917} Transformers models in production environments, we
recommend exporting them to a serialized format that can be loaded and executed
on specialized runtimes and hardware. In this guide, we\u2019ll show you how to
export \u{1F917} Transformers models in two widely used formats: ONNX and TorchScript.`),Tl.forEach(o),q=h(e),_=s(e,"P",{});var an=a(_);j=l(an,`Once exported, a model can optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run
with maximum efficiency, check out the `),M=s(an,"A",{href:!0,rel:!0});var Ol=a(M);U=l(Ol,`\u{1F917} Optimum
library`),Ol.forEach(o),we=l(an,"."),an.forEach(o),Fe=h(e),G=s(e,"H2",{class:!0});var Lp=a(G);H=s(Lp,"A",{id:!0,class:!0,href:!0});var tv=a(H);Ee=s(tv,"SPAN",{});var ov=a(Ee);w(se.$$.fragment,ov),ov.forEach(o),tv.forEach(o),$e=h(Lp),L=s(Lp,"SPAN",{});var nv=a(L);rn=l(nv,"ONNX"),nv.forEach(o),Lp.forEach(o),qt=h(e),J=s(e,"P",{});var Jn=a(J);ln=l(Jn,"The "),ae=s(Jn,"A",{href:!0,rel:!0});var sv=a(ae);pn=l(sv,"ONNX (Open Neural Network eXchange)"),sv.forEach(o),dn=l(Jn,` project is an open
standard that defines a common set of operators and a common file format to
represent deep learning models in a wide variety of frameworks, including
PyTorch and TensorFlow. When a model is exported to the ONNX format, these
operators are used to construct a computational graph (often called an
`),hs=s(Jn,"EM",{});var av=a(hs);Cd=l(av,"intermediate representation"),av.forEach(o),Pd=l(Jn,`) which represents the flow of data through the
neural network.`),Jn.forEach(o),Nl=h(e),hn=s(e,"P",{});var rv=a(hn);Sd=l(rv,`By exposing a graph with standardized operators and data types, ONNX makes it
easy to switch between frameworks. For example, a model trained in PyTorch can
be exported to ONNX format and then imported in TensorFlow (and vice versa).`),rv.forEach(o),jl=h(e),He=s(e,"P",{});var Bp=a(He);qd=l(Bp,"\u{1F917} Transformers provides a "),fs=s(Bp,"CODE",{});var lv=a(fs);Id=l(lv,"transformers.onnx"),lv.forEach(o),Ld=l(Bp,` package that enables you to
convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures,
and are designed to be easily extendable to other architectures.`),Bp.forEach(o),Al=h(e),fn=s(e,"P",{});var iv=a(fn);Bd=l(iv,"Ready-made configurations include the following architectures:"),iv.forEach(o),Dl=h(e),u=s(e,"UL",{});var m=a(u);cs=s(m,"LI",{});var pv=a(cs);Md=l(pv,"ALBERT"),pv.forEach(o),zd=h(m),us=s(m,"LI",{});var dv=a(us);Xd=l(dv,"BART"),dv.forEach(o),Rd=h(m),ms=s(m,"LI",{});var hv=a(ms);Fd=l(hv,"BEiT"),hv.forEach(o),Hd=h(m),gs=s(m,"LI",{});var fv=a(gs);Wd=l(fv,"BERT"),fv.forEach(o),Vd=h(m),_s=s(m,"LI",{});var cv=a(_s);Kd=l(cv,"BigBird"),cv.forEach(o),Ud=h(m),vs=s(m,"LI",{});var uv=a(vs);Gd=l(uv,"BigBird-Pegasus"),uv.forEach(o),Jd=h(m),ws=s(m,"LI",{});var mv=a(ws);Yd=l(mv,"Blenderbot"),mv.forEach(o),Qd=h(m),Es=s(m,"LI",{});var gv=a(Es);Zd=l(gv,"BlenderbotSmall"),gv.forEach(o),eh=h(m),$s=s(m,"LI",{});var _v=a($s);th=l(_v,"BLOOM"),_v.forEach(o),oh=h(m),bs=s(m,"LI",{});var vv=a(bs);nh=l(vv,"CamemBERT"),vv.forEach(o),sh=h(m),ys=s(m,"LI",{});var wv=a(ys);ah=l(wv,"CodeGen"),wv.forEach(o),rh=h(m),xs=s(m,"LI",{});var Ev=a(xs);lh=l(Ev,"ConvBERT"),Ev.forEach(o),ih=h(m),ks=s(m,"LI",{});var $v=a(ks);ph=l($v,"ConvNeXT"),$v.forEach(o),dh=h(m),Ts=s(m,"LI",{});var bv=a(Ts);hh=l(bv,"Data2VecText"),bv.forEach(o),fh=h(m),Os=s(m,"LI",{});var yv=a(Os);ch=l(yv,"Data2VecVision"),yv.forEach(o),uh=h(m),Ns=s(m,"LI",{});var xv=a(Ns);mh=l(xv,"DeBERTa"),xv.forEach(o),gh=h(m),js=s(m,"LI",{});var kv=a(js);_h=l(kv,"DeBERTa-v2"),kv.forEach(o),vh=h(m),As=s(m,"LI",{});var Tv=a(As);wh=l(Tv,"DeiT"),Tv.forEach(o),Eh=h(m),Ds=s(m,"LI",{});var Ov=a(Ds);$h=l(Ov,"DETR"),Ov.forEach(o),bh=h(m),Cs=s(m,"LI",{});var Nv=a(Cs);yh=l(Nv,"DistilBERT"),Nv.forEach(o),xh=h(m),Ps=s(m,"LI",{});var jv=a(Ps);kh=l(jv,"ELECTRA"),jv.forEach(o),Th=h(m),Ss=s(m,"LI",{});var Av=a(Ss);Oh=l(Av,"FlauBERT"),Av.forEach(o),Nh=h(m),qs=s(m,"LI",{});var Dv=a(qs);jh=l(Dv,"GPT Neo"),Dv.forEach(o),Ah=h(m),Is=s(m,"LI",{});var Cv=a(Is);Dh=l(Cv,"GPT-J"),Cv.forEach(o),Ch=h(m),Ls=s(m,"LI",{});var Pv=a(Ls);Ph=l(Pv,"I-BERT"),Pv.forEach(o),Sh=h(m),Bs=s(m,"LI",{});var Sv=a(Bs);qh=l(Sv,"LayoutLM"),Sv.forEach(o),Ih=h(m),Ms=s(m,"LI",{});var qv=a(Ms);Lh=l(qv,"LayoutLMv3"),qv.forEach(o),Bh=h(m),zs=s(m,"LI",{});var Iv=a(zs);Mh=l(Iv,"LeViT"),Iv.forEach(o),zh=h(m),Xs=s(m,"LI",{});var Lv=a(Xs);Xh=l(Lv,"LongT5"),Lv.forEach(o),Rh=h(m),Rs=s(m,"LI",{});var Bv=a(Rs);Fh=l(Bv,"M2M100"),Bv.forEach(o),Hh=h(m),Fs=s(m,"LI",{});var Mv=a(Fs);Wh=l(Mv,"Marian"),Mv.forEach(o),Vh=h(m),Hs=s(m,"LI",{});var zv=a(Hs);Kh=l(zv,"mBART"),zv.forEach(o),Uh=h(m),Ws=s(m,"LI",{});var Xv=a(Ws);Gh=l(Xv,"MobileBERT"),Xv.forEach(o),Jh=h(m),Vs=s(m,"LI",{});var Rv=a(Vs);Yh=l(Rv,"MobileViT"),Rv.forEach(o),Qh=h(m),Ks=s(m,"LI",{});var Fv=a(Ks);Zh=l(Fv,"OpenAI GPT-2"),Fv.forEach(o),ef=h(m),Us=s(m,"LI",{});var Hv=a(Us);tf=l(Hv,"Perceiver"),Hv.forEach(o),of=h(m),Gs=s(m,"LI",{});var Wv=a(Gs);nf=l(Wv,"PLBart"),Wv.forEach(o),sf=h(m),Js=s(m,"LI",{});var Vv=a(Js);af=l(Vv,"ResNet"),Vv.forEach(o),rf=h(m),Ys=s(m,"LI",{});var Kv=a(Ys);lf=l(Kv,"RoBERTa"),Kv.forEach(o),pf=h(m),Qs=s(m,"LI",{});var Uv=a(Qs);df=l(Uv,"RoFormer"),Uv.forEach(o),hf=h(m),Zs=s(m,"LI",{});var Gv=a(Zs);ff=l(Gv,"SqueezeBERT"),Gv.forEach(o),cf=h(m),ea=s(m,"LI",{});var Jv=a(ea);uf=l(Jv,"T5"),Jv.forEach(o),mf=h(m),ta=s(m,"LI",{});var Yv=a(ta);gf=l(Yv,"ViT"),Yv.forEach(o),_f=h(m),oa=s(m,"LI",{});var Qv=a(oa);vf=l(Qv,"XLM"),Qv.forEach(o),wf=h(m),na=s(m,"LI",{});var Zv=a(na);Ef=l(Zv,"XLM-RoBERTa"),Zv.forEach(o),$f=h(m),sa=s(m,"LI",{});var ew=a(sa);bf=l(ew,"XLM-RoBERTa-XL"),ew.forEach(o),yf=h(m),aa=s(m,"LI",{});var tw=a(aa);xf=l(tw,"YOLOS"),tw.forEach(o),m.forEach(o),Cl=h(e),cn=s(e,"P",{});var ow=a(cn);kf=l(ow,"In the next two sections, we\u2019ll show you how to:"),ow.forEach(o),Pl=h(e),We=s(e,"UL",{});var Mp=a(We);It=s(Mp,"LI",{});var zp=a(It);Tf=l(zp,"Export a supported model using the "),ra=s(zp,"CODE",{});var nw=a(ra);Of=l(nw,"transformers.onnx"),nw.forEach(o),Nf=l(zp," package."),zp.forEach(o),jf=h(Mp),la=s(Mp,"LI",{});var sw=a(la);Af=l(sw,"Export a custom model for an unsupported architecture."),sw.forEach(o),Mp.forEach(o),Sl=h(e),be=s(e,"H3",{class:!0});var Xp=a(be);Ve=s(Xp,"A",{id:!0,class:!0,href:!0});var aw=a(Ve);ia=s(aw,"SPAN",{});var rw=a(ia);w(Lt.$$.fragment,rw),rw.forEach(o),aw.forEach(o),Df=h(Xp),pa=s(Xp,"SPAN",{});var lw=a(pa);Cf=l(lw,"Exporting a model to ONNX"),lw.forEach(o),Xp.forEach(o),ql=h(e),un=s(e,"P",{});var iw=a(un);Pf=l(iw,`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some
extra dependencies:`),iw.forEach(o),Il=h(e),w(Bt.$$.fragment,e),Ll=h(e),Ke=s(e,"P",{});var Rp=a(Ke);Sf=l(Rp,"The "),da=s(Rp,"CODE",{});var pw=a(da);qf=l(pw,"transformers.onnx"),pw.forEach(o),If=l(Rp," package can then be used as a Python module:"),Rp.forEach(o),Bl=h(e),w(Mt.$$.fragment,e),Ml=h(e),mn=s(e,"P",{});var dw=a(mn);Lf=l(dw,"Exporting a checkpoint using a ready-made configuration can be done as follows:"),dw.forEach(o),zl=h(e),w(zt.$$.fragment,e),Xl=h(e),gn=s(e,"P",{});var hw=a(gn);Bf=l(hw,"which should show the following logs:"),hw.forEach(o),Rl=h(e),w(Xt.$$.fragment,e),Fl=h(e),re=s(e,"P",{});var Yn=a(re);Mf=l(Yn,"This exports an ONNX graph of the checkpoint defined by the "),ha=s(Yn,"CODE",{});var fw=a(ha);zf=l(fw,"--model"),fw.forEach(o),Xf=l(Yn,` argument.
In this example it is `),fa=s(Yn,"CODE",{});var cw=a(fa);Rf=l(cw,"distilbert-base-uncased"),cw.forEach(o),Ff=l(Yn,`, but it can be any checkpoint on
the Hugging Face Hub or one that\u2019s stored locally.`),Yn.forEach(o),Hl=h(e),Q=s(e,"P",{});var Dt=a(Q);Hf=l(Dt,"The resulting "),ca=s(Dt,"CODE",{});var uw=a(ca);Wf=l(uw,"model.onnx"),uw.forEach(o),Vf=l(Dt," file can then be run on one of the "),Rt=s(Dt,"A",{href:!0,rel:!0});var mw=a(Rt);Kf=l(mw,`many
accelerators`),mw.forEach(o),Uf=l(Dt,` that support the
ONNX standard. For example, we can load and run the model with `),Ft=s(Dt,"A",{href:!0,rel:!0});var gw=a(Ft);Gf=l(gw,`ONNX
Runtime`),gw.forEach(o),Jf=l(Dt," as follows:"),Dt.forEach(o),Wl=h(e),w(Ht.$$.fragment,e),Vl=h(e),Ue=s(e,"P",{});var Fp=a(Ue);Yf=l(Fp,"The required output names (i.e. "),ua=s(Fp,"CODE",{});var _w=a(ua);Qf=l(_w,'["last_hidden_state"]'),_w.forEach(o),Zf=l(Fp,`) can be obtained by
taking a look at the ONNX configuration of each model. For example, for
DistilBERT we have:`),Fp.forEach(o),Kl=h(e),w(Wt.$$.fragment,e),Ul=h(e),Ge=s(e,"P",{});var Hp=a(Ge);ec=l(Hp,`The process is identical for TensorFlow checkpoints on the Hub. For example, we
can export a pure TensorFlow checkpoint from the `),Vt=s(Hp,"A",{href:!0,rel:!0});var vw=a(Vt);tc=l(vw,`Keras
organization`),vw.forEach(o),oc=l(Hp," as follows:"),Hp.forEach(o),Gl=h(e),w(Kt.$$.fragment,e),Jl=h(e),_n=s(e,"P",{});var ww=a(_n);nc=l(ww,`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights
and tokenizer files stored in a directory. For example, we can load and save a
checkpoint as follows:`),ww.forEach(o),Yl=h(e),w(Je.$$.fragment,e),Ql=h(e),ye=s(e,"H3",{class:!0});var Wp=a(ye);Ye=s(Wp,"A",{id:!0,class:!0,href:!0});var Ew=a(Ye);ma=s(Ew,"SPAN",{});var $w=a(ma);w(Ut.$$.fragment,$w),$w.forEach(o),Ew.forEach(o),sc=h(Wp),ga=s(Wp,"SPAN",{});var bw=a(ga);ac=l(bw,"Selecting features for different model topologies"),bw.forEach(o),Wp.forEach(o),Zl=h(e),Qe=s(e,"P",{});var Vp=a(Qe);rc=l(Vp,"Each ready-made configuration comes with a set of "),_a=s(Vp,"EM",{});var yw=a(_a);lc=l(yw,"features"),yw.forEach(o),ic=l(Vp,` that enable you to
export models for different types of topologies or tasks. As shown in the table
below, each feature is associated with a different auto class:`),Vp.forEach(o),ei=h(e),Ze=s(e,"TABLE",{});var Kp=a(Ze);va=s(Kp,"THEAD",{});var xw=a(va);Gt=s(xw,"TR",{});var Up=a(Gt);wa=s(Up,"TH",{});var kw=a(wa);pc=l(kw,"Feature"),kw.forEach(o),dc=h(Up),Ea=s(Up,"TH",{});var Tw=a(Ea);hc=l(Tw,"Auto Class"),Tw.forEach(o),Up.forEach(o),xw.forEach(o),fc=h(Kp),X=s(Kp,"TBODY",{});var K=a(X);Jt=s(K,"TR",{});var Gp=a(Jt);Yt=s(Gp,"TD",{});var Jp=a(Yt);$a=s(Jp,"CODE",{});var Ow=a($a);cc=l(Ow,"causal-lm"),Ow.forEach(o),uc=l(Jp,", "),ba=s(Jp,"CODE",{});var Nw=a(ba);mc=l(Nw,"causal-lm-with-past"),Nw.forEach(o),Jp.forEach(o),gc=h(Gp),ya=s(Gp,"TD",{});var jw=a(ya);xa=s(jw,"CODE",{});var Aw=a(xa);_c=l(Aw,"AutoModelForCausalLM"),Aw.forEach(o),jw.forEach(o),Gp.forEach(o),vc=h(K),Qt=s(K,"TR",{});var Yp=a(Qt);Zt=s(Yp,"TD",{});var Qp=a(Zt);ka=s(Qp,"CODE",{});var Dw=a(ka);wc=l(Dw,"default"),Dw.forEach(o),Ec=l(Qp,", "),Ta=s(Qp,"CODE",{});var Cw=a(Ta);$c=l(Cw,"default-with-past"),Cw.forEach(o),Qp.forEach(o),bc=h(Yp),Oa=s(Yp,"TD",{});var Pw=a(Oa);Na=s(Pw,"CODE",{});var Sw=a(Na);yc=l(Sw,"AutoModel"),Sw.forEach(o),Pw.forEach(o),Yp.forEach(o),xc=h(K),eo=s(K,"TR",{});var Zp=a(eo);ja=s(Zp,"TD",{});var qw=a(ja);Aa=s(qw,"CODE",{});var Iw=a(Aa);kc=l(Iw,"masked-lm"),Iw.forEach(o),qw.forEach(o),Tc=h(Zp),Da=s(Zp,"TD",{});var Lw=a(Da);Ca=s(Lw,"CODE",{});var Bw=a(Ca);Oc=l(Bw,"AutoModelForMaskedLM"),Bw.forEach(o),Lw.forEach(o),Zp.forEach(o),Nc=h(K),to=s(K,"TR",{});var ed=a(to);Pa=s(ed,"TD",{});var Mw=a(Pa);Sa=s(Mw,"CODE",{});var zw=a(Sa);jc=l(zw,"question-answering"),zw.forEach(o),Mw.forEach(o),Ac=h(ed),qa=s(ed,"TD",{});var Xw=a(qa);Ia=s(Xw,"CODE",{});var Rw=a(Ia);Dc=l(Rw,"AutoModelForQuestionAnswering"),Rw.forEach(o),Xw.forEach(o),ed.forEach(o),Cc=h(K),oo=s(K,"TR",{});var td=a(oo);no=s(td,"TD",{});var od=a(no);La=s(od,"CODE",{});var Fw=a(La);Pc=l(Fw,"seq2seq-lm"),Fw.forEach(o),Sc=l(od,", "),Ba=s(od,"CODE",{});var Hw=a(Ba);qc=l(Hw,"seq2seq-lm-with-past"),Hw.forEach(o),od.forEach(o),Ic=h(td),Ma=s(td,"TD",{});var Ww=a(Ma);za=s(Ww,"CODE",{});var Vw=a(za);Lc=l(Vw,"AutoModelForSeq2SeqLM"),Vw.forEach(o),Ww.forEach(o),td.forEach(o),Bc=h(K),so=s(K,"TR",{});var nd=a(so);Xa=s(nd,"TD",{});var Kw=a(Xa);Ra=s(Kw,"CODE",{});var Uw=a(Ra);Mc=l(Uw,"sequence-classification"),Uw.forEach(o),Kw.forEach(o),zc=h(nd),Fa=s(nd,"TD",{});var Gw=a(Fa);Ha=s(Gw,"CODE",{});var Jw=a(Ha);Xc=l(Jw,"AutoModelForSequenceClassification"),Jw.forEach(o),Gw.forEach(o),nd.forEach(o),Rc=h(K),ao=s(K,"TR",{});var sd=a(ao);Wa=s(sd,"TD",{});var Yw=a(Wa);Va=s(Yw,"CODE",{});var Qw=a(Va);Fc=l(Qw,"token-classification"),Qw.forEach(o),Yw.forEach(o),Hc=h(sd),Ka=s(sd,"TD",{});var Zw=a(Ka);Ua=s(Zw,"CODE",{});var e1=a(Ua);Wc=l(e1,"AutoModelForTokenClassification"),e1.forEach(o),Zw.forEach(o),sd.forEach(o),K.forEach(o),Kp.forEach(o),ti=h(e),et=s(e,"P",{});var ad=a(et);Vc=l(ad,`For each configuration, you can find the list of supported features via the
`),Ga=s(ad,"CODE",{});var t1=a(Ga);Kc=l(t1,"FeaturesManager"),t1.forEach(o),Uc=l(ad,". For example, for DistilBERT we have:"),ad.forEach(o),oi=h(e),w(ro.$$.fragment,e),ni=h(e),le=s(e,"P",{});var Qn=a(le);Gc=l(Qn,"You can then pass one of these features to the "),Ja=s(Qn,"CODE",{});var o1=a(Ja);Jc=l(o1,"--feature"),o1.forEach(o),Yc=l(Qn,` argument in the
`),Ya=s(Qn,"CODE",{});var n1=a(Ya);Qc=l(n1,"transformers.onnx"),n1.forEach(o),Zc=l(Qn,` package. For example, to export a text-classification model
we can pick a fine-tuned model from the Hub and run:`),Qn.forEach(o),si=h(e),w(lo.$$.fragment,e),ai=h(e),vn=s(e,"P",{});var s1=a(vn);eu=l(s1,"which will display the following logs:"),s1.forEach(o),ri=h(e),w(io.$$.fragment,e),li=h(e),Z=s(e,"P",{});var Ct=a(Z);tu=l(Ct,`Notice that in this case, the output names from the fine-tuned model are
`),Qa=s(Ct,"CODE",{});var a1=a(Qa);ou=l(a1,"logits"),a1.forEach(o),nu=l(Ct," instead of the "),Za=s(Ct,"CODE",{});var r1=a(Za);su=l(r1,"last_hidden_state"),r1.forEach(o),au=l(Ct,` we saw with the
`),er=s(Ct,"CODE",{});var l1=a(er);ru=l(l1,"distilbert-base-uncased"),l1.forEach(o),lu=l(Ct,` checkpoint earlier. This is expected since the
fine-tuned model has a sequence classification head.`),Ct.forEach(o),ii=h(e),w(tt.$$.fragment,e),pi=h(e),xe=s(e,"H3",{class:!0});var rd=a(xe);ot=s(rd,"A",{id:!0,class:!0,href:!0});var i1=a(ot);tr=s(i1,"SPAN",{});var p1=a(tr);w(po.$$.fragment,p1),p1.forEach(o),i1.forEach(o),iu=h(rd),or=s(rd,"SPAN",{});var d1=a(or);pu=l(d1,"Exporting a model for an unsupported architecture"),d1.forEach(o),rd.forEach(o),di=h(e),wn=s(e,"P",{});var h1=a(wn);du=l(h1,`If you wish to export a model whose architecture is not natively supported by
the library, there are three main steps to follow:`),h1.forEach(o),hi=h(e),ie=s(e,"OL",{});var Zn=a(ie);nr=s(Zn,"LI",{});var f1=a(nr);hu=l(f1,"Implement a custom ONNX configuration."),f1.forEach(o),fu=h(Zn),sr=s(Zn,"LI",{});var c1=a(sr);cu=l(c1,"Export the model to ONNX."),c1.forEach(o),uu=h(Zn),ar=s(Zn,"LI",{});var u1=a(ar);mu=l(u1,"Validate the outputs of the PyTorch and exported models."),u1.forEach(o),Zn.forEach(o),fi=h(e),En=s(e,"P",{});var m1=a(En);gu=l(m1,`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s
involved with each step.`),m1.forEach(o),ci=h(e),ke=s(e,"H4",{class:!0});var ld=a(ke);nt=s(ld,"A",{id:!0,class:!0,href:!0});var g1=a(nt);rr=s(g1,"SPAN",{});var _1=a(rr);w(ho.$$.fragment,_1),_1.forEach(o),g1.forEach(o),_u=h(ld),lr=s(ld,"SPAN",{});var v1=a(lr);vu=l(v1,"Implementing a custom ONNX configuration"),v1.forEach(o),ld.forEach(o),ui=h(e),$n=s(e,"P",{});var w1=a($n);wu=l(w1,`Let\u2019s start with the ONNX configuration object. We provide three abstract
classes that you should inherit from, depending on the type of model
architecture you wish to export:`),w1.forEach(o),mi=h(e),pe=s(e,"UL",{});var es=a(pe);bn=s(es,"LI",{});var G_=a(bn);Eu=l(G_,"Encoder-based models inherit from "),yn=s(G_,"A",{href:!0});var E1=a(yn);$u=l(E1,"OnnxConfig"),E1.forEach(o),G_.forEach(o),bu=h(es),xn=s(es,"LI",{});var J_=a(xn);yu=l(J_,"Decoder-based models inherit from "),kn=s(J_,"A",{href:!0});var $1=a(kn);xu=l($1,"OnnxConfigWithPast"),$1.forEach(o),J_.forEach(o),ku=h(es),Tn=s(es,"LI",{});var Y_=a(Tn);Tu=l(Y_,"Encoder-decoder models inherit from "),On=s(Y_,"A",{href:!0});var b1=a(On);Ou=l(b1,"OnnxSeq2SeqConfigWithPast"),b1.forEach(o),Y_.forEach(o),es.forEach(o),gi=h(e),w(st.$$.fragment,e),_i=h(e),at=s(e,"P",{});var id=a(at);Nu=l(id,`Since DistilBERT is an encoder-based model, its configuration inherits from
`),ir=s(id,"CODE",{});var y1=a(ir);ju=l(y1,"OnnxConfig"),y1.forEach(o),Au=l(id,":"),id.forEach(o),vi=h(e),w(fo.$$.fragment,e),wi=h(e),W=s(e,"P",{});var _e=a(W);Du=l(_e,"Every configuration object must implement the "),pr=s(_e,"CODE",{});var x1=a(pr);Cu=l(x1,"inputs"),x1.forEach(o),Pu=l(_e,` property and return a
mapping, where each key corresponds to an expected input, and each value
indicates the axis of that input. For DistilBERT, we can see that two inputs are
required: `),dr=s(_e,"CODE",{});var k1=a(dr);Su=l(k1,"input_ids"),k1.forEach(o),qu=l(_e," and "),hr=s(_e,"CODE",{});var T1=a(hr);Iu=l(T1,"attention_mask"),T1.forEach(o),Lu=l(_e,`. These inputs have the same shape of
`),fr=s(_e,"CODE",{});var O1=a(fr);Bu=l(O1,"(batch_size, sequence_length)"),O1.forEach(o),Mu=l(_e,` which is why we see the same axes used in the
configuration.`),_e.forEach(o),Ei=h(e),w(rt.$$.fragment,e),$i=h(e),Nn=s(e,"P",{});var N1=a(Nn);zu=l(N1,`Once you have implemented an ONNX configuration, you can instantiate it by
providing the base model\u2019s configuration as follows:`),N1.forEach(o),bi=h(e),w(co.$$.fragment,e),yi=h(e),jn=s(e,"P",{});var j1=a(jn);Xu=l(j1,`The resulting object has several useful properties. For example you can view the
ONNX operator set that will be used during the export:`),j1.forEach(o),xi=h(e),w(uo.$$.fragment,e),ki=h(e),An=s(e,"P",{});var A1=a(An);Ru=l(A1,"You can also view the outputs associated with the model as follows:"),A1.forEach(o),Ti=h(e),w(mo.$$.fragment,e),Oi=h(e),V=s(e,"P",{});var ve=a(V);Fu=l(ve,`Notice that the outputs property follows the same structure as the inputs; it
returns an `),cr=s(ve,"CODE",{});var D1=a(cr);Hu=l(D1,"OrderedDict"),D1.forEach(o),Wu=l(ve,` of named outputs and their shapes. The output structure
is linked to the choice of feature that the configuration is initialised with.
By default, the ONNX configuration is initialized with the `),ur=s(ve,"CODE",{});var C1=a(ur);Vu=l(C1,"default"),C1.forEach(o),Ku=l(ve,` feature
that corresponds to exporting a model loaded with the `),mr=s(ve,"CODE",{});var P1=a(mr);Uu=l(P1,"AutoModel"),P1.forEach(o),Gu=l(ve,` class. If you
want to export a different model topology, just provide a different feature to
the `),gr=s(ve,"CODE",{});var S1=a(gr);Ju=l(S1,"task"),S1.forEach(o),Yu=l(ve,` argument when you initialize the ONNX configuration. For example, if
we wished to export DistilBERT with a sequence classification head, we could
use:`),ve.forEach(o),Ni=h(e),w(go.$$.fragment,e),ji=h(e),w(lt.$$.fragment,e),Ai=h(e),Te=s(e,"H4",{class:!0});var pd=a(Te);it=s(pd,"A",{id:!0,class:!0,href:!0});var q1=a(it);_r=s(q1,"SPAN",{});var I1=a(_r);w(_o.$$.fragment,I1),I1.forEach(o),q1.forEach(o),Qu=h(pd),vr=s(pd,"SPAN",{});var L1=a(vr);Zu=l(L1,"Exporting the model"),L1.forEach(o),pd.forEach(o),Di=h(e),de=s(e,"P",{});var ts=a(de);em=l(ts,`Once you have implemented the ONNX configuration, the next step is to export the
model. Here we can use the `),wr=s(ts,"CODE",{});var B1=a(wr);tm=l(B1,"export()"),B1.forEach(o),om=l(ts,` function provided by the
`),Er=s(ts,"CODE",{});var M1=a(Er);nm=l(M1,"transformers.onnx"),M1.forEach(o),sm=l(ts,` package. This function expects the ONNX configuration, along
with the base model and tokenizer, and the path to save the exported file:`),ts.forEach(o),Ci=h(e),w(vo.$$.fragment,e),Pi=h(e),R=s(e,"P",{});var oe=a(R);am=l(oe,"The "),$r=s(oe,"CODE",{});var z1=a($r);rm=l(z1,"onnx_inputs"),z1.forEach(o),lm=l(oe," and "),br=s(oe,"CODE",{});var X1=a(br);im=l(X1,"onnx_outputs"),X1.forEach(o),pm=l(oe," returned by the "),yr=s(oe,"CODE",{});var R1=a(yr);dm=l(R1,"export()"),R1.forEach(o),hm=l(oe,` function are
lists of the keys defined in the `),xr=s(oe,"CODE",{});var F1=a(xr);fm=l(F1,"inputs"),F1.forEach(o),cm=l(oe," and "),kr=s(oe,"CODE",{});var H1=a(kr);um=l(H1,"outputs"),H1.forEach(o),mm=l(oe,` properties of the
configuration. Once the model is exported, you can test that the model is well
formed as follows:`),oe.forEach(o),Si=h(e),w(wo.$$.fragment,e),qi=h(e),w(pt.$$.fragment,e),Ii=h(e),Oe=s(e,"H4",{class:!0});var dd=a(Oe);dt=s(dd,"A",{id:!0,class:!0,href:!0});var W1=a(dt);Tr=s(W1,"SPAN",{});var V1=a(Tr);w(Eo.$$.fragment,V1),V1.forEach(o),W1.forEach(o),gm=h(dd),Or=s(dd,"SPAN",{});var K1=a(Or);_m=l(K1,"Validating the model outputs"),K1.forEach(o),dd.forEach(o),Li=h(e),he=s(e,"P",{});var os=a(he);vm=l(os,`The final step is to validate that the outputs from the base and exported model
agree within some absolute tolerance. Here we can use the
`),Nr=s(os,"CODE",{});var U1=a(Nr);wm=l(U1,"validate_model_outputs()"),U1.forEach(o),Em=l(os," function provided by the "),jr=s(os,"CODE",{});var G1=a(jr);$m=l(G1,"transformers.onnx"),G1.forEach(o),bm=l(os,` package
as follows:`),os.forEach(o),Bi=h(e),w($o.$$.fragment,e),Mi=h(e),ht=s(e,"P",{});var hd=a(ht);ym=l(hd,"This function uses the "),Ar=s(hd,"CODE",{});var J1=a(Ar);xm=l(J1,"OnnxConfig.generate_dummy_inputs()"),J1.forEach(o),km=l(hd,` method to generate
inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6
to 1e-4 range, although anything smaller than 1e-3 is likely to be OK.`),hd.forEach(o),zi=h(e),Ne=s(e,"H3",{class:!0});var fd=a(Ne);ft=s(fd,"A",{id:!0,class:!0,href:!0});var Y1=a(ft);Dr=s(Y1,"SPAN",{});var Q1=a(Dr);w(bo.$$.fragment,Q1),Q1.forEach(o),Y1.forEach(o),Tm=h(fd),Cr=s(fd,"SPAN",{});var Z1=a(Cr);Om=l(Z1,"Contributing a new configuration to \u{1F917} Transformers"),Z1.forEach(o),fd.forEach(o),Xi=h(e),Dn=s(e,"P",{});var eE=a(Dn);Nm=l(eE,`We are looking to expand the set of ready-made configurations and welcome
contributions from the community! If you would like to contribute your addition
to the library, you will need to:`),eE.forEach(o),Ri=h(e),fe=s(e,"UL",{});var ns=a(fe);yo=s(ns,"LI",{});var cd=a(yo);jm=l(cd,"Implement the ONNX configuration in the corresponding "),Pr=s(cd,"CODE",{});var tE=a(Pr);Am=l(tE,"configuration_<model_name>.py"),tE.forEach(o),Dm=l(cd,`
file`),cd.forEach(o),Cm=h(ns),Cn=s(ns,"LI",{});var Q_=a(Cn);Pm=l(Q_,"Include the model architecture and corresponding features in "),Sr=s(Q_,"CODE",{});var oE=a(Sr);Sm=l(oE,"FeatureManager"),oE.forEach(o),Q_.forEach(o),qm=h(ns),Pn=s(ns,"LI",{});var Z_=a(Pn);Im=l(Z_,"Add your model architecture to the tests in "),qr=s(Z_,"CODE",{});var nE=a(qr);Lm=l(nE,"test_onnx_v2.py"),nE.forEach(o),Z_.forEach(o),ns.forEach(o),Fi=h(e),ct=s(e,"P",{});var ud=a(ct);Bm=l(ud,"Check out how the configuration for "),xo=s(ud,"A",{href:!0,rel:!0});var sE=a(xo);Mm=l(sE,`IBERT was
contributed`),sE.forEach(o),zm=l(ud,` to
get an idea of what\u2019s involved.`),ud.forEach(o),Hi=h(e),je=s(e,"H2",{class:!0});var md=a(je);ut=s(md,"A",{id:!0,class:!0,href:!0});var aE=a(ut);Ir=s(aE,"SPAN",{});var rE=a(Ir);w(ko.$$.fragment,rE),rE.forEach(o),aE.forEach(o),Xm=h(md),Lr=s(md,"SPAN",{});var lE=a(Lr);Rm=l(lE,"TorchScript"),lE.forEach(o),md.forEach(o),Wi=h(e),w(mt.$$.fragment,e),Vi=h(e),gt=s(e,"P",{});var gd=a(gt);Fm=l(gd,`According to Pytorch\u2019s documentation: \u201CTorchScript is a way to create serializable and optimizable models from PyTorch
code\u201D. Pytorch\u2019s two modules `),To=s(gd,"A",{href:!0,rel:!0});var iE=a(To);Hm=l(iE,"JIT and TRACE"),iE.forEach(o),Wm=l(gd,` allow the developer to export
their model to be re-used in other programs, such as efficiency-oriented C++ programs.`),gd.forEach(o),Ki=h(e),Sn=s(e,"P",{});var pE=a(Sn);Vm=l(pE,`We have provided an interface that allows the export of \u{1F917} Transformers models to TorchScript so that they can be reused
in a different environment than a Pytorch-based python program. Here we explain how to export and use our models using
TorchScript.`),pE.forEach(o),Ui=h(e),qn=s(e,"P",{});var dE=a(qn);Km=l(dE,"Exporting a model requires two things:"),dE.forEach(o),Gi=h(e),_t=s(e,"UL",{});var _d=a(_t);Br=s(_d,"LI",{});var hE=a(Br);Um=l(hE,"a forward pass with dummy inputs."),hE.forEach(o),Gm=h(_d),Oo=s(_d,"LI",{});var vd=a(Oo);Jm=l(vd,"model instantiation with the "),Mr=s(vd,"CODE",{});var fE=a(Mr);Ym=l(fE,"torchscript"),fE.forEach(o),Qm=l(vd," flag."),vd.forEach(o),_d.forEach(o),Ji=h(e),In=s(e,"P",{});var cE=a(In);Zm=l(cE,"These necessities imply several things developers should be careful about. These are detailed below."),cE.forEach(o),Yi=h(e),Ae=s(e,"H3",{class:!0});var wd=a(Ae);vt=s(wd,"A",{id:!0,class:!0,href:!0});var uE=a(vt);zr=s(uE,"SPAN",{});var mE=a(zr);w(No.$$.fragment,mE),mE.forEach(o),uE.forEach(o),eg=h(wd),Xr=s(wd,"SPAN",{});var gE=a(Xr);tg=l(gE,"TorchScript flag and tied weights"),gE.forEach(o),wd.forEach(o),Qi=h(e),ce=s(e,"P",{});var ss=a(ce);og=l(ss,`This flag is necessary because most of the language models in this repository have tied weights between their
`),Rr=s(ss,"CODE",{});var _E=a(Rr);ng=l(_E,"Embedding"),_E.forEach(o),sg=l(ss," layer and their "),Fr=s(ss,"CODE",{});var vE=a(Fr);ag=l(vE,"Decoding"),vE.forEach(o),rg=l(ss,` layer. TorchScript does not allow the export of models that have tied
weights, therefore it is necessary to untie and clone the weights beforehand.`),ss.forEach(o),Zi=h(e),ee=s(e,"P",{});var Pt=a(ee);lg=l(Pt,"This implies that models instantiated with the "),Hr=s(Pt,"CODE",{});var wE=a(Hr);ig=l(wE,"torchscript"),wE.forEach(o),pg=l(Pt," flag have their "),Wr=s(Pt,"CODE",{});var EE=a(Wr);dg=l(EE,"Embedding"),EE.forEach(o),hg=l(Pt," layer and "),Vr=s(Pt,"CODE",{});var $E=a(Vr);fg=l($E,"Decoding"),$E.forEach(o),cg=l(Pt,`
layer separate, which means that they should not be trained down the line. Training would de-synchronize the two
layers, leading to unexpected results.`),Pt.forEach(o),ep=h(e),wt=s(e,"P",{});var Ed=a(wt);ug=l(Ed,`This is not the case for models that do not have a Language Model head, as those do not have tied weights. These models
can be safely exported without the `),Kr=s(Ed,"CODE",{});var bE=a(Kr);mg=l(bE,"torchscript"),bE.forEach(o),gg=l(Ed," flag."),Ed.forEach(o),tp=h(e),De=s(e,"H3",{class:!0});var $d=a(De);Et=s($d,"A",{id:!0,class:!0,href:!0});var yE=a(Et);Ur=s(yE,"SPAN",{});var xE=a(Ur);w(jo.$$.fragment,xE),xE.forEach(o),yE.forEach(o),_g=h($d),Gr=s($d,"SPAN",{});var kE=a(Gr);vg=l(kE,"Dummy inputs and standard lengths"),kE.forEach(o),$d.forEach(o),op=h(e),Ln=s(e,"P",{});var TE=a(Ln);wg=l(TE,`The dummy inputs are used to do a model forward pass. While the inputs\u2019 values are propagating through the layers,
Pytorch keeps track of the different operations executed on each tensor. These recorded operations are then used to
create the \u201Ctrace\u201D of the model.`),TE.forEach(o),np=h(e),Bn=s(e,"P",{});var OE=a(Bn);Eg=l(OE,`The trace is created relatively to the inputs\u2019 dimensions. It is therefore constrained by the dimensions of the dummy
input, and will not work for any other sequence length or batch size. When trying with a different size, an error such
as:`),OE.forEach(o),sp=h(e),Mn=s(e,"P",{});var NE=a(Mn);Jr=s(NE,"CODE",{});var jE=a(Jr);$g=l(jE,"The expanded size of the tensor (3) must match the existing size (7) at non-singleton dimension 2"),jE.forEach(o),NE.forEach(o),ap=h(e),zn=s(e,"P",{});var AE=a(zn);bg=l(AE,`will be raised. It is therefore recommended to trace the model with a dummy input size at least as large as the largest
input that will be fed to the model during inference. Padding can be performed to fill the missing values. As the model
will have been traced with a large input size however, the dimensions of the different matrix will be large as well,
resulting in more calculations.`),AE.forEach(o),rp=h(e),Xn=s(e,"P",{});var DE=a(Xn);yg=l(DE,`It is recommended to be careful of the total number of operations done on each input and to follow performance closely
when exporting varying sequence-length models.`),DE.forEach(o),lp=h(e),Ce=s(e,"H3",{class:!0});var bd=a(Ce);$t=s(bd,"A",{id:!0,class:!0,href:!0});var CE=a($t);Yr=s(CE,"SPAN",{});var PE=a(Yr);w(Ao.$$.fragment,PE),PE.forEach(o),CE.forEach(o),xg=h(bd),Qr=s(bd,"SPAN",{});var SE=a(Qr);kg=l(SE,"Using TorchScript in Python"),SE.forEach(o),bd.forEach(o),ip=h(e),Rn=s(e,"P",{});var qE=a(Rn);Tg=l(qE,"Below is an example, showing how to save, load models as well as how to use the trace for inference."),qE.forEach(o),pp=h(e),Pe=s(e,"H4",{class:!0});var yd=a(Pe);bt=s(yd,"A",{id:!0,class:!0,href:!0});var IE=a(bt);Zr=s(IE,"SPAN",{});var LE=a(Zr);w(Do.$$.fragment,LE),LE.forEach(o),IE.forEach(o),Og=h(yd),el=s(yd,"SPAN",{});var BE=a(el);Ng=l(BE,"Saving a model"),BE.forEach(o),yd.forEach(o),dp=h(e),Y=s(e,"P",{});var Re=a(Y);jg=l(Re,"This snippet shows how to use TorchScript to export a "),tl=s(Re,"CODE",{});var ME=a(tl);Ag=l(ME,"BertModel"),ME.forEach(o),Dg=l(Re,". Here the "),ol=s(Re,"CODE",{});var zE=a(ol);Cg=l(zE,"BertModel"),zE.forEach(o),Pg=l(Re,` is instantiated according
to a `),nl=s(Re,"CODE",{});var XE=a(nl);Sg=l(XE,"BertConfig"),XE.forEach(o),qg=l(Re," class and then saved to disk under the filename "),sl=s(Re,"CODE",{});var RE=a(sl);Ig=l(RE,"traced_bert.pt"),RE.forEach(o),Re.forEach(o),hp=h(e),w(Co.$$.fragment,e),fp=h(e),Se=s(e,"H4",{class:!0});var xd=a(Se);yt=s(xd,"A",{id:!0,class:!0,href:!0});var FE=a(yt);al=s(FE,"SPAN",{});var HE=a(al);w(Po.$$.fragment,HE),HE.forEach(o),FE.forEach(o),Lg=h(xd),rl=s(xd,"SPAN",{});var WE=a(rl);Bg=l(WE,"Loading a model"),WE.forEach(o),xd.forEach(o),cp=h(e),te=s(e,"P",{});var St=a(te);Mg=l(St,"This snippet shows how to load the "),ll=s(St,"CODE",{});var VE=a(ll);zg=l(VE,"BertModel"),VE.forEach(o),Xg=l(St," that was previously saved to disk under the name "),il=s(St,"CODE",{});var KE=a(il);Rg=l(KE,"traced_bert.pt"),KE.forEach(o),Fg=l(St,`.
We are re-using the previously initialised `),pl=s(St,"CODE",{});var UE=a(pl);Hg=l(UE,"dummy_input"),UE.forEach(o),Wg=l(St,"."),St.forEach(o),up=h(e),w(So.$$.fragment,e),mp=h(e),qe=s(e,"H4",{class:!0});var kd=a(qe);xt=s(kd,"A",{id:!0,class:!0,href:!0});var GE=a(xt);dl=s(GE,"SPAN",{});var JE=a(dl);w(qo.$$.fragment,JE),JE.forEach(o),GE.forEach(o),Vg=h(kd),hl=s(kd,"SPAN",{});var YE=a(hl);Kg=l(YE,"Using a traced model for inference"),YE.forEach(o),kd.forEach(o),gp=h(e),kt=s(e,"P",{});var Td=a(kt);Ug=l(Td,"Using the traced model for inference is as simple as using its "),fl=s(Td,"CODE",{});var QE=a(fl);Gg=l(QE,"__call__"),QE.forEach(o),Jg=l(Td," dunder method:"),Td.forEach(o),_p=h(e),w(Io.$$.fragment,e),vp=h(e),Ie=s(e,"H3",{class:!0});var Od=a(Ie);Tt=s(Od,"A",{id:!0,class:!0,href:!0});var ZE=a(Tt);cl=s(ZE,"SPAN",{});var e$=a(cl);w(Lo.$$.fragment,e$),e$.forEach(o),ZE.forEach(o),Yg=h(Od),ul=s(Od,"SPAN",{});var t$=a(ul);Qg=l(t$,"Deploying HuggingFace TorchScript models on AWS using the Neuron SDK"),t$.forEach(o),Od.forEach(o),wp=h(e),ue=s(e,"P",{});var as=a(ue);Zg=l(as,"AWS introduced the "),Bo=s(as,"A",{href:!0,rel:!0});var o$=a(Bo);e_=l(o$,"Amazon EC2 Inf1"),o$.forEach(o),t_=l(as,`
instance family for low cost, high performance machine learning inference in the cloud.
The Inf1 instances are powered by the AWS Inferentia chip, a custom-built hardware accelerator,
specializing in deep learning inferencing workloads.
`),Mo=s(as,"A",{href:!0,rel:!0});var n$=a(Mo);o_=l(n$,"AWS Neuron"),n$.forEach(o),n_=l(as,`
is the SDK for Inferentia that supports tracing and optimizing transformers models for
deployment on Inf1. The Neuron SDK provides:`),as.forEach(o),Ep=h(e),me=s(e,"OL",{});var rs=a(me);ml=s(rs,"LI",{});var s$=a(ml);s_=l(s$,"Easy-to-use API with one line of code change to trace and optimize a TorchScript model for inference in the cloud."),s$.forEach(o),a_=h(rs),Fn=s(rs,"LI",{});var ev=a(Fn);r_=l(ev,"Out of the box performance optimizations for "),zo=s(ev,"A",{href:!0,rel:!0});var a$=a(zo);l_=l(a$,"improved cost-performance"),a$.forEach(o),ev.forEach(o),i_=h(rs),Le=s(rs,"LI",{});var ls=a(Le);p_=l(ls,"Support for HuggingFace transformers models built with either "),Xo=s(ls,"A",{href:!0,rel:!0});var r$=a(Xo);d_=l(r$,"PyTorch"),r$.forEach(o),h_=l(ls,`
or `),Ro=s(ls,"A",{href:!0,rel:!0});var l$=a(Ro);f_=l(l$,"TensorFlow"),l$.forEach(o),c_=l(ls,"."),ls.forEach(o),rs.forEach(o),$p=h(e),Be=s(e,"H4",{class:!0});var Nd=a(Be);Ot=s(Nd,"A",{id:!0,class:!0,href:!0});var i$=a(Ot);gl=s(i$,"SPAN",{});var p$=a(gl);w(Fo.$$.fragment,p$),p$.forEach(o),i$.forEach(o),u_=h(Nd),_l=s(Nd,"SPAN",{});var d$=a(_l);m_=l(d$,"Implications"),d$.forEach(o),Nd.forEach(o),bp=h(e),F=s(e,"P",{});var ne=a(F);g_=l(ne,"Transformers Models based on the "),Ho=s(ne,"A",{href:!0,rel:!0});var h$=a(Ho);__=l(h$,"BERT (Bidirectional Encoder Representations from Transformers)"),h$.forEach(o),v_=l(ne,`
architecture, or its variants such as `),Wo=s(ne,"A",{href:!0,rel:!0});var f$=a(Wo);w_=l(f$,"distilBERT"),f$.forEach(o),E_=l(ne,`
and `),Vo=s(ne,"A",{href:!0,rel:!0});var c$=a(Vo);$_=l(c$,"roBERTa"),c$.forEach(o),b_=l(ne,`
will run best on Inf1 for non-generative tasks such as Extractive Question Answering,
Sequence Classification, Token Classification. Alternatively, text generation
tasks can be adapted to run on Inf1, according to this `),Ko=s(ne,"A",{href:!0,rel:!0});var u$=a(Ko);y_=l(u$,"AWS Neuron MarianMT tutorial"),u$.forEach(o),x_=l(ne,`.
More information about models that can be converted out of the box on Inferentia can be
found in the `),Uo=s(ne,"A",{href:!0,rel:!0});var m$=a(Uo);k_=l(m$,"Model Architecture Fit section of the Neuron documentation"),m$.forEach(o),T_=l(ne,"."),ne.forEach(o),yp=h(e),Me=s(e,"H4",{class:!0});var jd=a(Me);Nt=s(jd,"A",{id:!0,class:!0,href:!0});var g$=a(Nt);vl=s(g$,"SPAN",{});var _$=a(vl);w(Go.$$.fragment,_$),_$.forEach(o),g$.forEach(o),O_=h(jd),wl=s(jd,"SPAN",{});var v$=a(wl);N_=l(v$,"Dependencies"),v$.forEach(o),jd.forEach(o),xp=h(e),Hn=s(e,"P",{});var w$=a(Hn);j_=l(w$,"Using AWS Neuron to convert models requires the following dependencies and environment:"),w$.forEach(o),kp=h(e),Wn=s(e,"UL",{});var E$=a(Wn);ze=s(E$,"LI",{});var is=a(ze);A_=l(is,"A "),Jo=s(is,"A",{href:!0,rel:!0});var $$=a(Jo);D_=l($$,"Neuron SDK environment"),$$.forEach(o),C_=l(is,`,
which comes pre-configured on `),Yo=s(is,"A",{href:!0,rel:!0});var b$=a(Yo);P_=l(b$,"AWS Deep Learning AMI"),b$.forEach(o),S_=l(is,"."),is.forEach(o),E$.forEach(o),Tp=h(e),Xe=s(e,"H4",{class:!0});var Ad=a(Xe);jt=s(Ad,"A",{id:!0,class:!0,href:!0});var y$=a(jt);El=s(y$,"SPAN",{});var x$=a(El);w(Qo.$$.fragment,x$),x$.forEach(o),y$.forEach(o),q_=h(Ad),$l=s(Ad,"SPAN",{});var k$=a($l);I_=l(k$,"Converting a Model for AWS Neuron"),k$.forEach(o),Ad.forEach(o),Op=h(e),ge=s(e,"P",{});var ps=a(ge);L_=l(ps,"Using the same script as in "),Zo=s(ps,"A",{href:!0,rel:!0});var T$=a(Zo);B_=l(T$,"Using TorchScript in Python"),T$.forEach(o),M_=l(ps,`
to trace a \u201CBertModel\u201D, you import `),bl=s(ps,"CODE",{});var O$=a(bl);z_=l(O$,"torch.neuron"),O$.forEach(o),X_=l(ps,` framework extension to access
the components of the Neuron SDK through a Python API.`),ps.forEach(o),Np=h(e),w(en.$$.fragment,e),jp=h(e),Vn=s(e,"P",{});var N$=a(Vn);R_=l(N$,"And only modify the tracing line of code"),N$.forEach(o),Ap=h(e),Kn=s(e,"P",{});var j$=a(Kn);F_=l(j$,"from:"),j$.forEach(o),Dp=h(e),w(tn.$$.fragment,e),Cp=h(e),Un=s(e,"P",{});var A$=a(Un);H_=l(A$,"to:"),A$.forEach(o),Pp=h(e),w(on.$$.fragment,e),Sp=h(e),Gn=s(e,"P",{});var D$=a(Gn);W_=l(D$,"This change enables Neuron SDK to trace the model and optimize it to run in Inf1 instances."),D$.forEach(o),qp=h(e),At=s(e,"P",{});var Dd=a(At);V_=l(Dd,`To learn more about AWS Neuron SDK features, tools, example tutorials and latest updates,
please see the `),nn=s(Dd,"A",{href:!0,rel:!0});var C$=a(nn);K_=l(C$,"AWS NeuronSDK documentation"),C$.forEach(o),U_=l(Dd,"."),Dd.forEach(o),this.h()},h(){f(c,"name","hf:doc:metadata"),f(c,"content",JSON.stringify(Q$)),f(x,"id","export-transformers-models"),f(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(x,"href","#export-transformers-models"),f(g,"class","relative group"),f(M,"href","https://github.com/huggingface/optimum"),f(M,"rel","nofollow"),f(H,"id","onnx"),f(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(H,"href","#onnx"),f(G,"class","relative group"),f(ae,"href","http://onnx.ai"),f(ae,"rel","nofollow"),f(Ve,"id","exporting-a-model-to-onnx"),f(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ve,"href","#exporting-a-model-to-onnx"),f(be,"class","relative group"),f(Rt,"href","https://onnx.ai/supported-tools.html#deployModel"),f(Rt,"rel","nofollow"),f(Ft,"href","https://onnxruntime.ai/"),f(Ft,"rel","nofollow"),f(Vt,"href","https://huggingface.co/keras-io"),f(Vt,"rel","nofollow"),f(Ye,"id","selecting-features-for-different-model-topologies"),f(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ye,"href","#selecting-features-for-different-model-topologies"),f(ye,"class","relative group"),f(ot,"id","exporting-a-model-for-an-unsupported-architecture"),f(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ot,"href","#exporting-a-model-for-an-unsupported-architecture"),f(xe,"class","relative group"),f(nt,"id","implementing-a-custom-onnx-configuration"),f(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(nt,"href","#implementing-a-custom-onnx-configuration"),f(ke,"class","relative group"),f(yn,"href","/docs/transformers/pr_18286/en/main_classes/onnx#transformers.onnx.OnnxConfig"),f(kn,"href","/docs/transformers/pr_18286/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast"),f(On,"href","/docs/transformers/pr_18286/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast"),f(it,"id","exporting-the-model"),f(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(it,"href","#exporting-the-model"),f(Te,"class","relative group"),f(dt,"id","validating-the-model-outputs"),f(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(dt,"href","#validating-the-model-outputs"),f(Oe,"class","relative group"),f(ft,"id","contributing-a-new-configuration-to-transformers"),f(ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ft,"href","#contributing-a-new-configuration-to-transformers"),f(Ne,"class","relative group"),f(xo,"href","https://github.com/huggingface/transformers/pull/14868/files"),f(xo,"rel","nofollow"),f(ut,"id","torchscript"),f(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ut,"href","#torchscript"),f(je,"class","relative group"),f(To,"href","https://pytorch.org/docs/stable/jit.html"),f(To,"rel","nofollow"),f(vt,"id","torchscript-flag-and-tied-weights"),f(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(vt,"href","#torchscript-flag-and-tied-weights"),f(Ae,"class","relative group"),f(Et,"id","dummy-inputs-and-standard-lengths"),f(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Et,"href","#dummy-inputs-and-standard-lengths"),f(De,"class","relative group"),f($t,"id","using-torchscript-in-python"),f($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f($t,"href","#using-torchscript-in-python"),f(Ce,"class","relative group"),f(bt,"id","saving-a-model"),f(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(bt,"href","#saving-a-model"),f(Pe,"class","relative group"),f(yt,"id","loading-a-model"),f(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(yt,"href","#loading-a-model"),f(Se,"class","relative group"),f(xt,"id","using-a-traced-model-for-inference"),f(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xt,"href","#using-a-traced-model-for-inference"),f(qe,"class","relative group"),f(Tt,"id","deploying-huggingface-torchscript-models-on-aws-using-the-neuron-sdk"),f(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Tt,"href","#deploying-huggingface-torchscript-models-on-aws-using-the-neuron-sdk"),f(Ie,"class","relative group"),f(Bo,"href","https://aws.amazon.com/ec2/instance-types/inf1/"),f(Bo,"rel","nofollow"),f(Mo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/#"),f(Mo,"rel","nofollow"),f(zo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/neuron-guide/benchmark/%3E"),f(zo,"rel","nofollow"),f(Xo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/pytorch/bert_tutorial/tutorial_pretrained_bert.html"),f(Xo,"rel","nofollow"),f(Ro,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/tensorflow/huggingface_bert/huggingface_bert.html"),f(Ro,"rel","nofollow"),f(Ot,"id","implications"),f(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ot,"href","#implications"),f(Be,"class","relative group"),f(Ho,"href","https://huggingface.co/docs/transformers/main/model_doc/bert"),f(Ho,"rel","nofollow"),f(Wo,"href","https://huggingface.co/docs/transformers/main/model_doc/distilbert"),f(Wo,"rel","nofollow"),f(Vo,"href","https://huggingface.co/docs/transformers/main/model_doc/roberta"),f(Vo,"rel","nofollow"),f(Ko,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/pytorch/transformers-marianmt.html"),f(Ko,"rel","nofollow"),f(Uo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/neuron-guide/models/models-inferentia.html#models-inferentia"),f(Uo,"rel","nofollow"),f(Nt,"id","dependencies"),f(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Nt,"href","#dependencies"),f(Me,"class","relative group"),f(Jo,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/neuron-guide/neuron-frameworks/pytorch-neuron/index.html#installation-guide"),f(Jo,"rel","nofollow"),f(Yo,"href","https://docs.aws.amazon.com/dlami/latest/devguide/tutorial-inferentia-launching.html"),f(Yo,"rel","nofollow"),f(jt,"id","converting-a-model-for-aws-neuron"),f(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(jt,"href","#converting-a-model-for-aws-neuron"),f(Xe,"class","relative group"),f(Zo,"href","https://huggingface.co/docs/transformers/main/en/serialization#using-torchscript-in-python"),f(Zo,"rel","nofollow"),f(nn,"href","https://awsdocs-neuron.readthedocs-hosted.com/en/latest/index.html"),f(nn,"rel","nofollow")},m(e,i){t(document.head,c),p(e,k,i),p(e,g,i),t(g,x),t(x,O),E(T,O,null),t(g,P),t(g,C),t(C,A),p(e,N,i),p(e,S,i),t(S,D),p(e,q,i),p(e,_,i),t(_,j),t(_,M),t(M,U),t(_,we),p(e,Fe,i),p(e,G,i),t(G,H),t(H,Ee),E(se,Ee,null),t(G,$e),t(G,L),t(L,rn),p(e,qt,i),p(e,J,i),t(J,ln),t(J,ae),t(ae,pn),t(J,dn),t(J,hs),t(hs,Cd),t(J,Pd),p(e,Nl,i),p(e,hn,i),t(hn,Sd),p(e,jl,i),p(e,He,i),t(He,qd),t(He,fs),t(fs,Id),t(He,Ld),p(e,Al,i),p(e,fn,i),t(fn,Bd),p(e,Dl,i),p(e,u,i),t(u,cs),t(cs,Md),t(u,zd),t(u,us),t(us,Xd),t(u,Rd),t(u,ms),t(ms,Fd),t(u,Hd),t(u,gs),t(gs,Wd),t(u,Vd),t(u,_s),t(_s,Kd),t(u,Ud),t(u,vs),t(vs,Gd),t(u,Jd),t(u,ws),t(ws,Yd),t(u,Qd),t(u,Es),t(Es,Zd),t(u,eh),t(u,$s),t($s,th),t(u,oh),t(u,bs),t(bs,nh),t(u,sh),t(u,ys),t(ys,ah),t(u,rh),t(u,xs),t(xs,lh),t(u,ih),t(u,ks),t(ks,ph),t(u,dh),t(u,Ts),t(Ts,hh),t(u,fh),t(u,Os),t(Os,ch),t(u,uh),t(u,Ns),t(Ns,mh),t(u,gh),t(u,js),t(js,_h),t(u,vh),t(u,As),t(As,wh),t(u,Eh),t(u,Ds),t(Ds,$h),t(u,bh),t(u,Cs),t(Cs,yh),t(u,xh),t(u,Ps),t(Ps,kh),t(u,Th),t(u,Ss),t(Ss,Oh),t(u,Nh),t(u,qs),t(qs,jh),t(u,Ah),t(u,Is),t(Is,Dh),t(u,Ch),t(u,Ls),t(Ls,Ph),t(u,Sh),t(u,Bs),t(Bs,qh),t(u,Ih),t(u,Ms),t(Ms,Lh),t(u,Bh),t(u,zs),t(zs,Mh),t(u,zh),t(u,Xs),t(Xs,Xh),t(u,Rh),t(u,Rs),t(Rs,Fh),t(u,Hh),t(u,Fs),t(Fs,Wh),t(u,Vh),t(u,Hs),t(Hs,Kh),t(u,Uh),t(u,Ws),t(Ws,Gh),t(u,Jh),t(u,Vs),t(Vs,Yh),t(u,Qh),t(u,Ks),t(Ks,Zh),t(u,ef),t(u,Us),t(Us,tf),t(u,of),t(u,Gs),t(Gs,nf),t(u,sf),t(u,Js),t(Js,af),t(u,rf),t(u,Ys),t(Ys,lf),t(u,pf),t(u,Qs),t(Qs,df),t(u,hf),t(u,Zs),t(Zs,ff),t(u,cf),t(u,ea),t(ea,uf),t(u,mf),t(u,ta),t(ta,gf),t(u,_f),t(u,oa),t(oa,vf),t(u,wf),t(u,na),t(na,Ef),t(u,$f),t(u,sa),t(sa,bf),t(u,yf),t(u,aa),t(aa,xf),p(e,Cl,i),p(e,cn,i),t(cn,kf),p(e,Pl,i),p(e,We,i),t(We,It),t(It,Tf),t(It,ra),t(ra,Of),t(It,Nf),t(We,jf),t(We,la),t(la,Af),p(e,Sl,i),p(e,be,i),t(be,Ve),t(Ve,ia),E(Lt,ia,null),t(be,Df),t(be,pa),t(pa,Cf),p(e,ql,i),p(e,un,i),t(un,Pf),p(e,Il,i),E(Bt,e,i),p(e,Ll,i),p(e,Ke,i),t(Ke,Sf),t(Ke,da),t(da,qf),t(Ke,If),p(e,Bl,i),E(Mt,e,i),p(e,Ml,i),p(e,mn,i),t(mn,Lf),p(e,zl,i),E(zt,e,i),p(e,Xl,i),p(e,gn,i),t(gn,Bf),p(e,Rl,i),E(Xt,e,i),p(e,Fl,i),p(e,re,i),t(re,Mf),t(re,ha),t(ha,zf),t(re,Xf),t(re,fa),t(fa,Rf),t(re,Ff),p(e,Hl,i),p(e,Q,i),t(Q,Hf),t(Q,ca),t(ca,Wf),t(Q,Vf),t(Q,Rt),t(Rt,Kf),t(Q,Uf),t(Q,Ft),t(Ft,Gf),t(Q,Jf),p(e,Wl,i),E(Ht,e,i),p(e,Vl,i),p(e,Ue,i),t(Ue,Yf),t(Ue,ua),t(ua,Qf),t(Ue,Zf),p(e,Kl,i),E(Wt,e,i),p(e,Ul,i),p(e,Ge,i),t(Ge,ec),t(Ge,Vt),t(Vt,tc),t(Ge,oc),p(e,Gl,i),E(Kt,e,i),p(e,Jl,i),p(e,_n,i),t(_n,nc),p(e,Yl,i),E(Je,e,i),p(e,Ql,i),p(e,ye,i),t(ye,Ye),t(Ye,ma),E(Ut,ma,null),t(ye,sc),t(ye,ga),t(ga,ac),p(e,Zl,i),p(e,Qe,i),t(Qe,rc),t(Qe,_a),t(_a,lc),t(Qe,ic),p(e,ei,i),p(e,Ze,i),t(Ze,va),t(va,Gt),t(Gt,wa),t(wa,pc),t(Gt,dc),t(Gt,Ea),t(Ea,hc),t(Ze,fc),t(Ze,X),t(X,Jt),t(Jt,Yt),t(Yt,$a),t($a,cc),t(Yt,uc),t(Yt,ba),t(ba,mc),t(Jt,gc),t(Jt,ya),t(ya,xa),t(xa,_c),t(X,vc),t(X,Qt),t(Qt,Zt),t(Zt,ka),t(ka,wc),t(Zt,Ec),t(Zt,Ta),t(Ta,$c),t(Qt,bc),t(Qt,Oa),t(Oa,Na),t(Na,yc),t(X,xc),t(X,eo),t(eo,ja),t(ja,Aa),t(Aa,kc),t(eo,Tc),t(eo,Da),t(Da,Ca),t(Ca,Oc),t(X,Nc),t(X,to),t(to,Pa),t(Pa,Sa),t(Sa,jc),t(to,Ac),t(to,qa),t(qa,Ia),t(Ia,Dc),t(X,Cc),t(X,oo),t(oo,no),t(no,La),t(La,Pc),t(no,Sc),t(no,Ba),t(Ba,qc),t(oo,Ic),t(oo,Ma),t(Ma,za),t(za,Lc),t(X,Bc),t(X,so),t(so,Xa),t(Xa,Ra),t(Ra,Mc),t(so,zc),t(so,Fa),t(Fa,Ha),t(Ha,Xc),t(X,Rc),t(X,ao),t(ao,Wa),t(Wa,Va),t(Va,Fc),t(ao,Hc),t(ao,Ka),t(Ka,Ua),t(Ua,Wc),p(e,ti,i),p(e,et,i),t(et,Vc),t(et,Ga),t(Ga,Kc),t(et,Uc),p(e,oi,i),E(ro,e,i),p(e,ni,i),p(e,le,i),t(le,Gc),t(le,Ja),t(Ja,Jc),t(le,Yc),t(le,Ya),t(Ya,Qc),t(le,Zc),p(e,si,i),E(lo,e,i),p(e,ai,i),p(e,vn,i),t(vn,eu),p(e,ri,i),E(io,e,i),p(e,li,i),p(e,Z,i),t(Z,tu),t(Z,Qa),t(Qa,ou),t(Z,nu),t(Z,Za),t(Za,su),t(Z,au),t(Z,er),t(er,ru),t(Z,lu),p(e,ii,i),E(tt,e,i),p(e,pi,i),p(e,xe,i),t(xe,ot),t(ot,tr),E(po,tr,null),t(xe,iu),t(xe,or),t(or,pu),p(e,di,i),p(e,wn,i),t(wn,du),p(e,hi,i),p(e,ie,i),t(ie,nr),t(nr,hu),t(ie,fu),t(ie,sr),t(sr,cu),t(ie,uu),t(ie,ar),t(ar,mu),p(e,fi,i),p(e,En,i),t(En,gu),p(e,ci,i),p(e,ke,i),t(ke,nt),t(nt,rr),E(ho,rr,null),t(ke,_u),t(ke,lr),t(lr,vu),p(e,ui,i),p(e,$n,i),t($n,wu),p(e,mi,i),p(e,pe,i),t(pe,bn),t(bn,Eu),t(bn,yn),t(yn,$u),t(pe,bu),t(pe,xn),t(xn,yu),t(xn,kn),t(kn,xu),t(pe,ku),t(pe,Tn),t(Tn,Tu),t(Tn,On),t(On,Ou),p(e,gi,i),E(st,e,i),p(e,_i,i),p(e,at,i),t(at,Nu),t(at,ir),t(ir,ju),t(at,Au),p(e,vi,i),E(fo,e,i),p(e,wi,i),p(e,W,i),t(W,Du),t(W,pr),t(pr,Cu),t(W,Pu),t(W,dr),t(dr,Su),t(W,qu),t(W,hr),t(hr,Iu),t(W,Lu),t(W,fr),t(fr,Bu),t(W,Mu),p(e,Ei,i),E(rt,e,i),p(e,$i,i),p(e,Nn,i),t(Nn,zu),p(e,bi,i),E(co,e,i),p(e,yi,i),p(e,jn,i),t(jn,Xu),p(e,xi,i),E(uo,e,i),p(e,ki,i),p(e,An,i),t(An,Ru),p(e,Ti,i),E(mo,e,i),p(e,Oi,i),p(e,V,i),t(V,Fu),t(V,cr),t(cr,Hu),t(V,Wu),t(V,ur),t(ur,Vu),t(V,Ku),t(V,mr),t(mr,Uu),t(V,Gu),t(V,gr),t(gr,Ju),t(V,Yu),p(e,Ni,i),E(go,e,i),p(e,ji,i),E(lt,e,i),p(e,Ai,i),p(e,Te,i),t(Te,it),t(it,_r),E(_o,_r,null),t(Te,Qu),t(Te,vr),t(vr,Zu),p(e,Di,i),p(e,de,i),t(de,em),t(de,wr),t(wr,tm),t(de,om),t(de,Er),t(Er,nm),t(de,sm),p(e,Ci,i),E(vo,e,i),p(e,Pi,i),p(e,R,i),t(R,am),t(R,$r),t($r,rm),t(R,lm),t(R,br),t(br,im),t(R,pm),t(R,yr),t(yr,dm),t(R,hm),t(R,xr),t(xr,fm),t(R,cm),t(R,kr),t(kr,um),t(R,mm),p(e,Si,i),E(wo,e,i),p(e,qi,i),E(pt,e,i),p(e,Ii,i),p(e,Oe,i),t(Oe,dt),t(dt,Tr),E(Eo,Tr,null),t(Oe,gm),t(Oe,Or),t(Or,_m),p(e,Li,i),p(e,he,i),t(he,vm),t(he,Nr),t(Nr,wm),t(he,Em),t(he,jr),t(jr,$m),t(he,bm),p(e,Bi,i),E($o,e,i),p(e,Mi,i),p(e,ht,i),t(ht,ym),t(ht,Ar),t(Ar,xm),t(ht,km),p(e,zi,i),p(e,Ne,i),t(Ne,ft),t(ft,Dr),E(bo,Dr,null),t(Ne,Tm),t(Ne,Cr),t(Cr,Om),p(e,Xi,i),p(e,Dn,i),t(Dn,Nm),p(e,Ri,i),p(e,fe,i),t(fe,yo),t(yo,jm),t(yo,Pr),t(Pr,Am),t(yo,Dm),t(fe,Cm),t(fe,Cn),t(Cn,Pm),t(Cn,Sr),t(Sr,Sm),t(fe,qm),t(fe,Pn),t(Pn,Im),t(Pn,qr),t(qr,Lm),p(e,Fi,i),p(e,ct,i),t(ct,Bm),t(ct,xo),t(xo,Mm),t(ct,zm),p(e,Hi,i),p(e,je,i),t(je,ut),t(ut,Ir),E(ko,Ir,null),t(je,Xm),t(je,Lr),t(Lr,Rm),p(e,Wi,i),E(mt,e,i),p(e,Vi,i),p(e,gt,i),t(gt,Fm),t(gt,To),t(To,Hm),t(gt,Wm),p(e,Ki,i),p(e,Sn,i),t(Sn,Vm),p(e,Ui,i),p(e,qn,i),t(qn,Km),p(e,Gi,i),p(e,_t,i),t(_t,Br),t(Br,Um),t(_t,Gm),t(_t,Oo),t(Oo,Jm),t(Oo,Mr),t(Mr,Ym),t(Oo,Qm),p(e,Ji,i),p(e,In,i),t(In,Zm),p(e,Yi,i),p(e,Ae,i),t(Ae,vt),t(vt,zr),E(No,zr,null),t(Ae,eg),t(Ae,Xr),t(Xr,tg),p(e,Qi,i),p(e,ce,i),t(ce,og),t(ce,Rr),t(Rr,ng),t(ce,sg),t(ce,Fr),t(Fr,ag),t(ce,rg),p(e,Zi,i),p(e,ee,i),t(ee,lg),t(ee,Hr),t(Hr,ig),t(ee,pg),t(ee,Wr),t(Wr,dg),t(ee,hg),t(ee,Vr),t(Vr,fg),t(ee,cg),p(e,ep,i),p(e,wt,i),t(wt,ug),t(wt,Kr),t(Kr,mg),t(wt,gg),p(e,tp,i),p(e,De,i),t(De,Et),t(Et,Ur),E(jo,Ur,null),t(De,_g),t(De,Gr),t(Gr,vg),p(e,op,i),p(e,Ln,i),t(Ln,wg),p(e,np,i),p(e,Bn,i),t(Bn,Eg),p(e,sp,i),p(e,Mn,i),t(Mn,Jr),t(Jr,$g),p(e,ap,i),p(e,zn,i),t(zn,bg),p(e,rp,i),p(e,Xn,i),t(Xn,yg),p(e,lp,i),p(e,Ce,i),t(Ce,$t),t($t,Yr),E(Ao,Yr,null),t(Ce,xg),t(Ce,Qr),t(Qr,kg),p(e,ip,i),p(e,Rn,i),t(Rn,Tg),p(e,pp,i),p(e,Pe,i),t(Pe,bt),t(bt,Zr),E(Do,Zr,null),t(Pe,Og),t(Pe,el),t(el,Ng),p(e,dp,i),p(e,Y,i),t(Y,jg),t(Y,tl),t(tl,Ag),t(Y,Dg),t(Y,ol),t(ol,Cg),t(Y,Pg),t(Y,nl),t(nl,Sg),t(Y,qg),t(Y,sl),t(sl,Ig),p(e,hp,i),E(Co,e,i),p(e,fp,i),p(e,Se,i),t(Se,yt),t(yt,al),E(Po,al,null),t(Se,Lg),t(Se,rl),t(rl,Bg),p(e,cp,i),p(e,te,i),t(te,Mg),t(te,ll),t(ll,zg),t(te,Xg),t(te,il),t(il,Rg),t(te,Fg),t(te,pl),t(pl,Hg),t(te,Wg),p(e,up,i),E(So,e,i),p(e,mp,i),p(e,qe,i),t(qe,xt),t(xt,dl),E(qo,dl,null),t(qe,Vg),t(qe,hl),t(hl,Kg),p(e,gp,i),p(e,kt,i),t(kt,Ug),t(kt,fl),t(fl,Gg),t(kt,Jg),p(e,_p,i),E(Io,e,i),p(e,vp,i),p(e,Ie,i),t(Ie,Tt),t(Tt,cl),E(Lo,cl,null),t(Ie,Yg),t(Ie,ul),t(ul,Qg),p(e,wp,i),p(e,ue,i),t(ue,Zg),t(ue,Bo),t(Bo,e_),t(ue,t_),t(ue,Mo),t(Mo,o_),t(ue,n_),p(e,Ep,i),p(e,me,i),t(me,ml),t(ml,s_),t(me,a_),t(me,Fn),t(Fn,r_),t(Fn,zo),t(zo,l_),t(me,i_),t(me,Le),t(Le,p_),t(Le,Xo),t(Xo,d_),t(Le,h_),t(Le,Ro),t(Ro,f_),t(Le,c_),p(e,$p,i),p(e,Be,i),t(Be,Ot),t(Ot,gl),E(Fo,gl,null),t(Be,u_),t(Be,_l),t(_l,m_),p(e,bp,i),p(e,F,i),t(F,g_),t(F,Ho),t(Ho,__),t(F,v_),t(F,Wo),t(Wo,w_),t(F,E_),t(F,Vo),t(Vo,$_),t(F,b_),t(F,Ko),t(Ko,y_),t(F,x_),t(F,Uo),t(Uo,k_),t(F,T_),p(e,yp,i),p(e,Me,i),t(Me,Nt),t(Nt,vl),E(Go,vl,null),t(Me,O_),t(Me,wl),t(wl,N_),p(e,xp,i),p(e,Hn,i),t(Hn,j_),p(e,kp,i),p(e,Wn,i),t(Wn,ze),t(ze,A_),t(ze,Jo),t(Jo,D_),t(ze,C_),t(ze,Yo),t(Yo,P_),t(ze,S_),p(e,Tp,i),p(e,Xe,i),t(Xe,jt),t(jt,El),E(Qo,El,null),t(Xe,q_),t(Xe,$l),t($l,I_),p(e,Op,i),p(e,ge,i),t(ge,L_),t(ge,Zo),t(Zo,B_),t(ge,M_),t(ge,bl),t(bl,z_),t(ge,X_),p(e,Np,i),E(en,e,i),p(e,jp,i),p(e,Vn,i),t(Vn,R_),p(e,Ap,i),p(e,Kn,i),t(Kn,F_),p(e,Dp,i),E(tn,e,i),p(e,Cp,i),p(e,Un,i),t(Un,H_),p(e,Pp,i),E(on,e,i),p(e,Sp,i),p(e,Gn,i),t(Gn,W_),p(e,qp,i),p(e,At,i),t(At,V_),t(At,nn),t(nn,K_),t(At,U_),Ip=!0},p(e,[i]){const sn={};i&2&&(sn.$$scope={dirty:i,ctx:e}),Je.$set(sn);const yl={};i&2&&(yl.$$scope={dirty:i,ctx:e}),tt.$set(yl);const xl={};i&2&&(xl.$$scope={dirty:i,ctx:e}),st.$set(xl);const kl={};i&2&&(kl.$$scope={dirty:i,ctx:e}),rt.$set(kl);const Tl={};i&2&&(Tl.$$scope={dirty:i,ctx:e}),lt.$set(Tl);const an={};i&2&&(an.$$scope={dirty:i,ctx:e}),pt.$set(an);const Ol={};i&2&&(Ol.$$scope={dirty:i,ctx:e}),mt.$set(Ol)},i(e){Ip||($(T.$$.fragment,e),$(se.$$.fragment,e),$(Lt.$$.fragment,e),$(Bt.$$.fragment,e),$(Mt.$$.fragment,e),$(zt.$$.fragment,e),$(Xt.$$.fragment,e),$(Ht.$$.fragment,e),$(Wt.$$.fragment,e),$(Kt.$$.fragment,e),$(Je.$$.fragment,e),$(Ut.$$.fragment,e),$(ro.$$.fragment,e),$(lo.$$.fragment,e),$(io.$$.fragment,e),$(tt.$$.fragment,e),$(po.$$.fragment,e),$(ho.$$.fragment,e),$(st.$$.fragment,e),$(fo.$$.fragment,e),$(rt.$$.fragment,e),$(co.$$.fragment,e),$(uo.$$.fragment,e),$(mo.$$.fragment,e),$(go.$$.fragment,e),$(lt.$$.fragment,e),$(_o.$$.fragment,e),$(vo.$$.fragment,e),$(wo.$$.fragment,e),$(pt.$$.fragment,e),$(Eo.$$.fragment,e),$($o.$$.fragment,e),$(bo.$$.fragment,e),$(ko.$$.fragment,e),$(mt.$$.fragment,e),$(No.$$.fragment,e),$(jo.$$.fragment,e),$(Ao.$$.fragment,e),$(Do.$$.fragment,e),$(Co.$$.fragment,e),$(Po.$$.fragment,e),$(So.$$.fragment,e),$(qo.$$.fragment,e),$(Io.$$.fragment,e),$(Lo.$$.fragment,e),$(Fo.$$.fragment,e),$(Go.$$.fragment,e),$(Qo.$$.fragment,e),$(en.$$.fragment,e),$(tn.$$.fragment,e),$(on.$$.fragment,e),Ip=!0)},o(e){b(T.$$.fragment,e),b(se.$$.fragment,e),b(Lt.$$.fragment,e),b(Bt.$$.fragment,e),b(Mt.$$.fragment,e),b(zt.$$.fragment,e),b(Xt.$$.fragment,e),b(Ht.$$.fragment,e),b(Wt.$$.fragment,e),b(Kt.$$.fragment,e),b(Je.$$.fragment,e),b(Ut.$$.fragment,e),b(ro.$$.fragment,e),b(lo.$$.fragment,e),b(io.$$.fragment,e),b(tt.$$.fragment,e),b(po.$$.fragment,e),b(ho.$$.fragment,e),b(st.$$.fragment,e),b(fo.$$.fragment,e),b(rt.$$.fragment,e),b(co.$$.fragment,e),b(uo.$$.fragment,e),b(mo.$$.fragment,e),b(go.$$.fragment,e),b(lt.$$.fragment,e),b(_o.$$.fragment,e),b(vo.$$.fragment,e),b(wo.$$.fragment,e),b(pt.$$.fragment,e),b(Eo.$$.fragment,e),b($o.$$.fragment,e),b(bo.$$.fragment,e),b(ko.$$.fragment,e),b(mt.$$.fragment,e),b(No.$$.fragment,e),b(jo.$$.fragment,e),b(Ao.$$.fragment,e),b(Do.$$.fragment,e),b(Co.$$.fragment,e),b(Po.$$.fragment,e),b(So.$$.fragment,e),b(qo.$$.fragment,e),b(Io.$$.fragment,e),b(Lo.$$.fragment,e),b(Fo.$$.fragment,e),b(Go.$$.fragment,e),b(Qo.$$.fragment,e),b(en.$$.fragment,e),b(tn.$$.fragment,e),b(on.$$.fragment,e),Ip=!1},d(e){o(c),e&&o(k),e&&o(g),y(T),e&&o(N),e&&o(S),e&&o(q),e&&o(_),e&&o(Fe),e&&o(G),y(se),e&&o(qt),e&&o(J),e&&o(Nl),e&&o(hn),e&&o(jl),e&&o(He),e&&o(Al),e&&o(fn),e&&o(Dl),e&&o(u),e&&o(Cl),e&&o(cn),e&&o(Pl),e&&o(We),e&&o(Sl),e&&o(be),y(Lt),e&&o(ql),e&&o(un),e&&o(Il),y(Bt,e),e&&o(Ll),e&&o(Ke),e&&o(Bl),y(Mt,e),e&&o(Ml),e&&o(mn),e&&o(zl),y(zt,e),e&&o(Xl),e&&o(gn),e&&o(Rl),y(Xt,e),e&&o(Fl),e&&o(re),e&&o(Hl),e&&o(Q),e&&o(Wl),y(Ht,e),e&&o(Vl),e&&o(Ue),e&&o(Kl),y(Wt,e),e&&o(Ul),e&&o(Ge),e&&o(Gl),y(Kt,e),e&&o(Jl),e&&o(_n),e&&o(Yl),y(Je,e),e&&o(Ql),e&&o(ye),y(Ut),e&&o(Zl),e&&o(Qe),e&&o(ei),e&&o(Ze),e&&o(ti),e&&o(et),e&&o(oi),y(ro,e),e&&o(ni),e&&o(le),e&&o(si),y(lo,e),e&&o(ai),e&&o(vn),e&&o(ri),y(io,e),e&&o(li),e&&o(Z),e&&o(ii),y(tt,e),e&&o(pi),e&&o(xe),y(po),e&&o(di),e&&o(wn),e&&o(hi),e&&o(ie),e&&o(fi),e&&o(En),e&&o(ci),e&&o(ke),y(ho),e&&o(ui),e&&o($n),e&&o(mi),e&&o(pe),e&&o(gi),y(st,e),e&&o(_i),e&&o(at),e&&o(vi),y(fo,e),e&&o(wi),e&&o(W),e&&o(Ei),y(rt,e),e&&o($i),e&&o(Nn),e&&o(bi),y(co,e),e&&o(yi),e&&o(jn),e&&o(xi),y(uo,e),e&&o(ki),e&&o(An),e&&o(Ti),y(mo,e),e&&o(Oi),e&&o(V),e&&o(Ni),y(go,e),e&&o(ji),y(lt,e),e&&o(Ai),e&&o(Te),y(_o),e&&o(Di),e&&o(de),e&&o(Ci),y(vo,e),e&&o(Pi),e&&o(R),e&&o(Si),y(wo,e),e&&o(qi),y(pt,e),e&&o(Ii),e&&o(Oe),y(Eo),e&&o(Li),e&&o(he),e&&o(Bi),y($o,e),e&&o(Mi),e&&o(ht),e&&o(zi),e&&o(Ne),y(bo),e&&o(Xi),e&&o(Dn),e&&o(Ri),e&&o(fe),e&&o(Fi),e&&o(ct),e&&o(Hi),e&&o(je),y(ko),e&&o(Wi),y(mt,e),e&&o(Vi),e&&o(gt),e&&o(Ki),e&&o(Sn),e&&o(Ui),e&&o(qn),e&&o(Gi),e&&o(_t),e&&o(Ji),e&&o(In),e&&o(Yi),e&&o(Ae),y(No),e&&o(Qi),e&&o(ce),e&&o(Zi),e&&o(ee),e&&o(ep),e&&o(wt),e&&o(tp),e&&o(De),y(jo),e&&o(op),e&&o(Ln),e&&o(np),e&&o(Bn),e&&o(sp),e&&o(Mn),e&&o(ap),e&&o(zn),e&&o(rp),e&&o(Xn),e&&o(lp),e&&o(Ce),y(Ao),e&&o(ip),e&&o(Rn),e&&o(pp),e&&o(Pe),y(Do),e&&o(dp),e&&o(Y),e&&o(hp),y(Co,e),e&&o(fp),e&&o(Se),y(Po),e&&o(cp),e&&o(te),e&&o(up),y(So,e),e&&o(mp),e&&o(qe),y(qo),e&&o(gp),e&&o(kt),e&&o(_p),y(Io,e),e&&o(vp),e&&o(Ie),y(Lo),e&&o(wp),e&&o(ue),e&&o(Ep),e&&o(me),e&&o($p),e&&o(Be),y(Fo),e&&o(bp),e&&o(F),e&&o(yp),e&&o(Me),y(Go),e&&o(xp),e&&o(Hn),e&&o(kp),e&&o(Wn),e&&o(Tp),e&&o(Xe),y(Qo),e&&o(Op),e&&o(ge),e&&o(Np),y(en,e),e&&o(jp),e&&o(Vn),e&&o(Ap),e&&o(Kn),e&&o(Dp),y(tn,e),e&&o(Cp),e&&o(Un),e&&o(Pp),y(on,e),e&&o(Sp),e&&o(Gn),e&&o(qp),e&&o(At)}}}const Q$={local:"export-transformers-models",sections:[{local:"onnx",sections:[{local:"exporting-a-model-to-onnx",title:"Exporting a model to ONNX"},{local:"selecting-features-for-different-model-topologies",title:"Selecting features for different model topologies"},{local:"exporting-a-model-for-an-unsupported-architecture",sections:[{local:"implementing-a-custom-onnx-configuration",title:"Implementing a custom ONNX configuration"},{local:"exporting-the-model",title:"Exporting the model"},{local:"validating-the-model-outputs",title:"Validating the model outputs"}],title:"Exporting a model for an unsupported architecture"},{local:"contributing-a-new-configuration-to-transformers",title:"Contributing a new configuration to \u{1F917} Transformers"}],title:"ONNX"},{local:"torchscript",sections:[{local:"torchscript-flag-and-tied-weights",title:"TorchScript flag and tied weights"},{local:"dummy-inputs-and-standard-lengths",title:"Dummy inputs and standard lengths"},{local:"using-torchscript-in-python",sections:[{local:"saving-a-model",title:"Saving a model"},{local:"loading-a-model",title:"Loading a model"},{local:"using-a-traced-model-for-inference",title:"Using a traced model for inference"}],title:"Using TorchScript in Python"},{local:"deploying-huggingface-torchscript-models-on-aws-using-the-neuron-sdk",sections:[{local:"implications",title:"Implications"},{local:"dependencies",title:"Dependencies"},{local:"converting-a-model-for-aws-neuron",title:"Converting a Model for AWS Neuron"}],title:"Deploying HuggingFace TorchScript models on AWS using the Neuron SDK"}],title:"TorchScript"}],title:"Export \u{1F917} Transformers Models"};function Z$(B){return M$(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class a2 extends q${constructor(c){super();I$(this,c,Z$,Y$,L$,{})}}export{a2 as default,Q$ as metadata};
