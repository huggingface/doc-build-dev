import{S as p9t,i as u9t,s as _9t,e as a,k as l,w as F,t as o,M as b9t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as v9t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as tOr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function F9t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,hA,uf,je,We,hi,yn,pA,Ln,xn,uA,pi,$n,_A,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),hA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),pA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),uA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),_A=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var I$=s(p);m=r(I$,"NewModelConfig"),I$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var q$=s(fi);pf=r(q$,"model_type"),q$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var N$=s(mi);gi=r(N$,'"new-model"'),N$.forEach(t),hA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),pA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var j$=s(Ln);xn=r(j$,"PreTrainedModel"),j$.forEach(t),uA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),_A=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var D$=s(ui);_f=r(D$,"NewModelConfig"),D$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,hA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,pA),e(je,Ln),e(Ln,xn),e(je,uA),e(je,pi),e(pi,$n),e(je,_A),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function T9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function C9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function A9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,hA,uf,je,We,hi,yn,pA,Ln,xn,uA,pi,$n,_A,ui,_f,Ca,Qe,Ae,I$,_i,q$,N$,Eo,wa,j$,bf,D$,yGe,uqe,bi,vf,Oee,bA,LGe,Vee,xGe,_qe,kn,$Ge,Xee,kGe,SGe,zee,RGe,PGe,bqe,vA,vqe,G$,BGe,Fqe,Ff,Tqe,vi,Tf,Wee,FA,IGe,Qee,qGe,Mqe,Co,TA,NGe,MA,jGe,O$,DGe,GGe,OGe,EA,VGe,Hee,XGe,zGe,WGe,Er,CA,QGe,Uee,HGe,UGe,Fi,JGe,Jee,YGe,KGe,Yee,ZGe,eOe,oOe,A,Mf,Kee,rOe,tOe,V$,aOe,nOe,sOe,Ef,Zee,lOe,iOe,X$,dOe,cOe,fOe,Cf,eoe,mOe,gOe,z$,hOe,pOe,uOe,wf,ooe,_Oe,bOe,W$,vOe,FOe,TOe,Af,roe,MOe,EOe,Q$,COe,wOe,AOe,yf,toe,yOe,LOe,H$,xOe,$Oe,kOe,Lf,aoe,SOe,ROe,U$,POe,BOe,IOe,xf,noe,qOe,NOe,J$,jOe,DOe,GOe,$f,soe,OOe,VOe,Y$,XOe,zOe,WOe,kf,loe,QOe,HOe,K$,UOe,JOe,YOe,Sf,ioe,KOe,ZOe,Z$,eVe,oVe,rVe,Rf,doe,tVe,aVe,ek,nVe,sVe,lVe,Pf,coe,iVe,dVe,ok,cVe,fVe,mVe,Bf,foe,gVe,hVe,rk,pVe,uVe,_Ve,If,moe,bVe,vVe,tk,FVe,TVe,MVe,qf,goe,EVe,CVe,ak,wVe,AVe,yVe,Nf,hoe,LVe,xVe,nk,$Ve,kVe,SVe,jf,poe,RVe,PVe,sk,BVe,IVe,qVe,Df,uoe,NVe,jVe,lk,DVe,GVe,OVe,Gf,_oe,VVe,XVe,ik,zVe,WVe,QVe,Of,boe,HVe,UVe,dk,JVe,YVe,KVe,Vf,voe,ZVe,eXe,ck,oXe,rXe,tXe,Xf,Foe,aXe,nXe,fk,sXe,lXe,iXe,zf,Toe,dXe,cXe,mk,fXe,mXe,gXe,Wf,Moe,hXe,pXe,gk,uXe,_Xe,bXe,Qf,Eoe,vXe,FXe,hk,TXe,MXe,EXe,Hf,Coe,CXe,wXe,pk,AXe,yXe,LXe,Uf,woe,xXe,$Xe,uk,kXe,SXe,RXe,Jf,Aoe,PXe,BXe,_k,IXe,qXe,NXe,Yf,yoe,jXe,DXe,bk,GXe,OXe,VXe,Kf,Loe,XXe,zXe,vk,WXe,QXe,HXe,Zf,xoe,UXe,JXe,Fk,YXe,KXe,ZXe,em,$oe,eze,oze,Tk,rze,tze,aze,om,koe,nze,sze,Mk,lze,ize,dze,rm,Soe,cze,fze,Ek,mze,gze,hze,tm,Roe,pze,uze,Ck,_ze,bze,vze,am,Poe,Fze,Tze,wk,Mze,Eze,Cze,nm,Boe,wze,Aze,Ak,yze,Lze,xze,sm,Ioe,$ze,kze,yk,Sze,Rze,Pze,lm,qoe,Bze,Ize,Lk,qze,Nze,jze,im,Noe,Dze,Gze,xk,Oze,Vze,Xze,dm,joe,zze,Wze,$k,Qze,Hze,Uze,cm,Doe,Jze,Yze,kk,Kze,Zze,eWe,fm,Goe,oWe,rWe,Sk,tWe,aWe,nWe,mm,Ooe,sWe,lWe,Rk,iWe,dWe,cWe,gm,Voe,fWe,mWe,Pk,gWe,hWe,pWe,hm,Xoe,uWe,_We,Bk,bWe,vWe,FWe,pm,zoe,TWe,MWe,Ik,EWe,CWe,wWe,um,Woe,AWe,yWe,qk,LWe,xWe,$We,_m,Qoe,kWe,SWe,Nk,RWe,PWe,BWe,bm,Hoe,IWe,qWe,jk,NWe,jWe,DWe,vm,Uoe,GWe,OWe,Dk,VWe,XWe,zWe,Fm,Joe,WWe,QWe,Gk,HWe,UWe,JWe,Tm,Yoe,YWe,KWe,Ok,ZWe,eQe,oQe,Mm,Koe,rQe,tQe,Vk,aQe,nQe,sQe,Em,Zoe,lQe,iQe,Xk,dQe,cQe,fQe,Cm,ere,mQe,gQe,zk,hQe,pQe,uQe,wm,ore,_Qe,bQe,Wk,vQe,FQe,TQe,Am,rre,MQe,EQe,Qk,CQe,wQe,AQe,ym,tre,yQe,LQe,Hk,xQe,$Qe,kQe,Lm,are,SQe,RQe,Uk,PQe,BQe,IQe,xm,nre,qQe,NQe,Jk,jQe,DQe,GQe,$m,sre,OQe,VQe,Yk,XQe,zQe,WQe,km,lre,QQe,HQe,Kk,UQe,JQe,YQe,Sm,ire,KQe,ZQe,Zk,eHe,oHe,rHe,Rm,dre,tHe,aHe,eS,nHe,sHe,lHe,Pm,cre,iHe,dHe,oS,cHe,fHe,mHe,Bm,fre,gHe,hHe,rS,pHe,uHe,_He,Im,mre,bHe,vHe,tS,FHe,THe,MHe,qm,gre,EHe,CHe,aS,wHe,AHe,yHe,Nm,hre,LHe,xHe,nS,$He,kHe,SHe,jm,pre,RHe,PHe,sS,BHe,IHe,qHe,Dm,ure,NHe,jHe,lS,DHe,GHe,OHe,Gm,_re,VHe,XHe,iS,zHe,WHe,QHe,Om,bre,HHe,UHe,dS,JHe,YHe,KHe,Vm,vre,ZHe,eUe,cS,oUe,rUe,tUe,Xm,Fre,aUe,nUe,fS,sUe,lUe,iUe,zm,Tre,dUe,cUe,mS,fUe,mUe,gUe,Wm,Mre,hUe,pUe,gS,uUe,_Ue,bUe,Qm,Ere,vUe,FUe,hS,TUe,MUe,EUe,Hm,Cre,CUe,wUe,pS,AUe,yUe,LUe,Um,wre,xUe,$Ue,uS,kUe,SUe,RUe,Jm,Are,PUe,BUe,_S,IUe,qUe,NUe,Ym,yre,jUe,DUe,bS,GUe,OUe,VUe,Km,Lre,XUe,zUe,vS,WUe,QUe,HUe,Zm,xre,UUe,JUe,FS,YUe,KUe,ZUe,eg,$re,eJe,oJe,TS,rJe,tJe,aJe,og,kre,nJe,sJe,MS,lJe,iJe,dJe,rg,Sre,cJe,fJe,ES,mJe,gJe,hJe,tg,Rre,pJe,uJe,CS,_Je,bJe,vJe,ag,Pre,FJe,TJe,wS,MJe,EJe,CJe,ng,Bre,wJe,AJe,AS,yJe,LJe,xJe,sg,Ire,$Je,kJe,yS,SJe,RJe,PJe,lg,qre,BJe,IJe,LS,qJe,NJe,jJe,ig,Nre,DJe,GJe,xS,OJe,VJe,XJe,dg,jre,zJe,WJe,$S,QJe,HJe,UJe,cg,Dre,JJe,YJe,kS,KJe,ZJe,eYe,fg,Gre,oYe,rYe,SS,tYe,aYe,nYe,mg,Ore,sYe,lYe,RS,iYe,dYe,cYe,gg,Vre,fYe,mYe,PS,gYe,hYe,pYe,hg,Xre,uYe,_Ye,BS,bYe,vYe,FYe,pg,zre,TYe,MYe,IS,EYe,CYe,wYe,ug,Wre,AYe,yYe,qS,LYe,xYe,$Ye,_g,Qre,kYe,SYe,NS,RYe,PYe,BYe,bg,Hre,IYe,qYe,jS,NYe,jYe,DYe,vg,Ure,GYe,OYe,DS,VYe,XYe,zYe,Fg,Jre,WYe,QYe,GS,HYe,UYe,JYe,Tg,YYe,Mg,wA,KYe,Yre,ZYe,Eqe,Ti,Eg,Kre,AA,eKe,Zre,oKe,Cqe,wo,yA,rKe,LA,tKe,OS,aKe,nKe,sKe,xA,lKe,ete,iKe,dKe,cKe,Cr,$A,fKe,ote,mKe,gKe,Aa,hKe,rte,pKe,uKe,tte,_Ke,bKe,ate,vKe,FKe,TKe,k,Sn,nte,MKe,EKe,VS,CKe,wKe,XS,AKe,yKe,LKe,Rn,ste,xKe,$Ke,zS,kKe,SKe,WS,RKe,PKe,BKe,Pn,lte,IKe,qKe,QS,NKe,jKe,HS,DKe,GKe,OKe,Cg,ite,VKe,XKe,US,zKe,WKe,QKe,Bn,dte,HKe,UKe,JS,JKe,YKe,YS,KKe,ZKe,eZe,wg,cte,oZe,rZe,KS,tZe,aZe,nZe,Ag,fte,sZe,lZe,ZS,iZe,dZe,cZe,yg,mte,fZe,mZe,eR,gZe,hZe,pZe,In,gte,uZe,_Ze,oR,bZe,vZe,rR,FZe,TZe,MZe,qn,hte,EZe,CZe,tR,wZe,AZe,aR,yZe,LZe,xZe,Nn,pte,$Ze,kZe,nR,SZe,RZe,sR,PZe,BZe,IZe,Lg,ute,qZe,NZe,lR,jZe,DZe,GZe,xg,_te,OZe,VZe,iR,XZe,zZe,WZe,jn,bte,QZe,HZe,dR,UZe,JZe,cR,YZe,KZe,ZZe,$g,vte,eeo,oeo,fR,reo,teo,aeo,Dn,Fte,neo,seo,mR,leo,ieo,gR,deo,ceo,feo,Gn,Tte,meo,geo,hR,heo,peo,pR,ueo,_eo,beo,On,Mte,veo,Feo,uR,Teo,Meo,_R,Eeo,Ceo,weo,kg,Ete,Aeo,yeo,bR,Leo,xeo,$eo,Vn,Cte,keo,Seo,vR,Reo,Peo,FR,Beo,Ieo,qeo,Xn,wte,Neo,jeo,TR,Deo,Geo,MR,Oeo,Veo,Xeo,zn,Ate,zeo,Weo,ER,Qeo,Heo,CR,Ueo,Jeo,Yeo,Wn,yte,Keo,Zeo,wR,eoo,ooo,AR,roo,too,aoo,Qn,Lte,noo,soo,yR,loo,ioo,LR,doo,coo,foo,Hn,xte,moo,goo,xR,hoo,poo,$R,uoo,_oo,boo,Sg,$te,voo,Foo,kR,Too,Moo,Eoo,Un,kte,Coo,woo,SR,Aoo,yoo,RR,Loo,xoo,$oo,Rg,Ste,koo,Soo,PR,Roo,Poo,Boo,Jn,Rte,Ioo,qoo,BR,Noo,joo,IR,Doo,Goo,Ooo,Yn,Pte,Voo,Xoo,qR,zoo,Woo,NR,Qoo,Hoo,Uoo,Kn,Bte,Joo,Yoo,jR,Koo,Zoo,DR,ero,oro,rro,Zn,Ite,tro,aro,GR,nro,sro,OR,lro,iro,dro,es,qte,cro,fro,VR,mro,gro,XR,hro,pro,uro,Pg,Nte,_ro,bro,zR,vro,Fro,Tro,os,jte,Mro,Ero,WR,Cro,wro,QR,Aro,yro,Lro,rs,Dte,xro,$ro,HR,kro,Sro,UR,Rro,Pro,Bro,ts,Gte,Iro,qro,JR,Nro,jro,YR,Dro,Gro,Oro,as,Ote,Vro,Xro,KR,zro,Wro,ZR,Qro,Hro,Uro,ns,Vte,Jro,Yro,eP,Kro,Zro,oP,eto,oto,rto,ss,Xte,tto,ato,rP,nto,sto,tP,lto,ito,dto,ls,zte,cto,fto,aP,mto,gto,nP,hto,pto,uto,Bg,Wte,_to,bto,sP,vto,Fto,Tto,is,Qte,Mto,Eto,lP,Cto,wto,iP,Ato,yto,Lto,Ig,Hte,xto,$to,dP,kto,Sto,Rto,qg,Ute,Pto,Bto,cP,Ito,qto,Nto,ds,Jte,jto,Dto,fP,Gto,Oto,mP,Vto,Xto,zto,cs,Yte,Wto,Qto,gP,Hto,Uto,hP,Jto,Yto,Kto,fs,Kte,Zto,eao,pP,oao,rao,uP,tao,aao,nao,Ng,Zte,sao,lao,_P,iao,dao,cao,ms,eae,fao,mao,bP,gao,hao,vP,pao,uao,_ao,gs,oae,bao,vao,FP,Fao,Tao,TP,Mao,Eao,Cao,hs,rae,wao,Aao,MP,yao,Lao,EP,xao,$ao,kao,ps,tae,Sao,Rao,CP,Pao,Bao,wP,Iao,qao,Nao,us,aae,jao,Dao,AP,Gao,Oao,yP,Vao,Xao,zao,jg,nae,Wao,Qao,LP,Hao,Uao,Jao,_s,sae,Yao,Kao,xP,Zao,eno,$P,ono,rno,tno,Dg,lae,ano,nno,kP,sno,lno,ino,Gg,iae,dno,cno,SP,fno,mno,gno,Og,dae,hno,pno,RP,uno,_no,bno,Vg,cae,vno,Fno,PP,Tno,Mno,Eno,bs,fae,Cno,wno,BP,Ano,yno,IP,Lno,xno,$no,Xg,mae,kno,Sno,qP,Rno,Pno,Bno,vs,gae,Ino,qno,NP,Nno,jno,jP,Dno,Gno,Ono,Fs,hae,Vno,Xno,DP,zno,Wno,GP,Qno,Hno,Uno,Ts,pae,Jno,Yno,OP,Kno,Zno,VP,eso,oso,rso,Ms,uae,tso,aso,XP,nso,sso,zP,lso,iso,dso,Es,_ae,cso,fso,WP,mso,gso,QP,hso,pso,uso,Cs,bae,_so,bso,HP,vso,Fso,UP,Tso,Mso,Eso,zg,vae,Cso,wso,JP,Aso,yso,Lso,Wg,Fae,xso,$so,YP,kso,Sso,Rso,ws,Tae,Pso,Bso,KP,Iso,qso,ZP,Nso,jso,Dso,As,Mae,Gso,Oso,eB,Vso,Xso,oB,zso,Wso,Qso,ys,Eae,Hso,Uso,rB,Jso,Yso,tB,Kso,Zso,elo,Qg,Cae,olo,rlo,aB,tlo,alo,nlo,Hg,wae,slo,llo,nB,ilo,dlo,clo,Ug,Aae,flo,mlo,sB,glo,hlo,plo,Ls,yae,ulo,_lo,lB,blo,vlo,iB,Flo,Tlo,Mlo,Jg,Lae,Elo,Clo,dB,wlo,Alo,ylo,Yg,xae,Llo,xlo,cB,$lo,klo,Slo,Kg,$ae,Rlo,Plo,fB,Blo,Ilo,qlo,xs,kae,Nlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,Zg,Sae,zlo,Wlo,hB,Qlo,Hlo,Ulo,eh,Rae,Jlo,Ylo,pB,Klo,Zlo,eio,$s,Pae,oio,rio,uB,tio,aio,_B,nio,sio,lio,ks,Bae,iio,dio,bB,cio,fio,vB,mio,gio,hio,Ss,Iae,pio,uio,FB,_io,bio,TB,vio,Fio,Tio,Rs,qae,Mio,Eio,MB,Cio,wio,EB,Aio,yio,Lio,oh,xio,rh,kA,$io,Nae,kio,wqe,Mi,th,jae,SA,Sio,Dae,Rio,Aqe,Ao,RA,Pio,PA,Bio,CB,Iio,qio,Nio,BA,jio,Gae,Dio,Gio,Oio,He,IA,Vio,Oae,Xio,zio,ya,Wio,Vae,Qio,Hio,Xae,Uio,Jio,zae,Yio,Kio,Zio,Z,ah,Wae,edo,odo,wB,rdo,tdo,ado,nh,Qae,ndo,sdo,AB,ldo,ido,ddo,sh,Hae,cdo,fdo,yB,mdo,gdo,hdo,lh,Uae,pdo,udo,LB,_do,bdo,vdo,ih,Jae,Fdo,Tdo,xB,Mdo,Edo,Cdo,dh,Yae,wdo,Ado,$B,ydo,Ldo,xdo,ch,Kae,$do,kdo,kB,Sdo,Rdo,Pdo,fh,Zae,Bdo,Ido,SB,qdo,Ndo,jdo,mh,ene,Ddo,Gdo,RB,Odo,Vdo,Xdo,gh,one,zdo,Wdo,PB,Qdo,Hdo,Udo,hh,rne,Jdo,Ydo,BB,Kdo,Zdo,eco,ph,tne,oco,rco,IB,tco,aco,nco,uh,ane,sco,lco,qB,ico,dco,cco,_h,nne,fco,mco,NB,gco,hco,pco,bh,sne,uco,_co,jB,bco,vco,Fco,vh,lne,Tco,Mco,DB,Eco,Cco,wco,Fh,ine,Aco,yco,GB,Lco,xco,$co,Th,dne,kco,Sco,OB,Rco,Pco,Bco,Mh,cne,Ico,qco,VB,Nco,jco,Dco,Eh,fne,Gco,Oco,XB,Vco,Xco,zco,Ch,mne,Wco,Qco,zB,Hco,Uco,Jco,wh,gne,Yco,Kco,WB,Zco,efo,ofo,Ah,hne,rfo,tfo,QB,afo,nfo,sfo,yh,pne,lfo,ifo,HB,dfo,cfo,ffo,Lh,une,mfo,gfo,UB,hfo,pfo,ufo,xh,_ne,_fo,bfo,JB,vfo,Ffo,Tfo,$h,bne,Mfo,Efo,YB,Cfo,wfo,Afo,kh,yfo,Sh,Lfo,Rh,qA,xfo,vne,$fo,yqe,Ei,Ph,Fne,NA,kfo,Tne,Sfo,Lqe,yo,jA,Rfo,DA,Pfo,KB,Bfo,Ifo,qfo,GA,Nfo,Mne,jfo,Dfo,Gfo,Ue,OA,Ofo,Ene,Vfo,Xfo,Ci,zfo,Cne,Wfo,Qfo,wne,Hfo,Ufo,Jfo,he,Bh,Ane,Yfo,Kfo,ZB,Zfo,emo,omo,Ih,yne,rmo,tmo,Lne,amo,nmo,smo,qh,xne,lmo,imo,eI,dmo,cmo,fmo,Nh,$ne,mmo,gmo,oI,hmo,pmo,umo,jh,kne,_mo,bmo,rI,vmo,Fmo,Tmo,Dh,Sne,Mmo,Emo,tI,Cmo,wmo,Amo,Gh,Rne,ymo,Lmo,aI,xmo,$mo,kmo,Oh,Pne,Smo,Rmo,nI,Pmo,Bmo,Imo,Vh,Bne,qmo,Nmo,sI,jmo,Dmo,Gmo,Xh,Ine,Omo,Vmo,lI,Xmo,zmo,Wmo,zh,qne,Qmo,Hmo,iI,Umo,Jmo,Ymo,Wh,Nne,Kmo,Zmo,dI,ego,ogo,rgo,Qh,jne,tgo,ago,cI,ngo,sgo,lgo,Hh,Dne,igo,dgo,fI,cgo,fgo,mgo,Uh,Gne,ggo,hgo,mI,pgo,ugo,_go,Jh,One,bgo,vgo,gI,Fgo,Tgo,Mgo,Yh,Vne,Ego,Cgo,hI,wgo,Ago,ygo,Kh,Lgo,Zh,xgo,ep,VA,$go,Xne,kgo,xqe,wi,op,zne,XA,Sgo,Wne,Rgo,$qe,Lo,zA,Pgo,Ai,Bgo,pI,Igo,qgo,uI,Ngo,jgo,Dgo,WA,Ggo,Qne,Ogo,Vgo,Xgo,tt,QA,zgo,Hne,Wgo,Qgo,yi,Hgo,Une,Ugo,Jgo,_I,Ygo,Kgo,Zgo,rp,eho,Je,HA,oho,Jne,rho,tho,La,aho,Yne,nho,sho,Kne,lho,iho,Zne,dho,cho,fho,x,tp,ese,mho,gho,bI,hho,pho,uho,ap,ose,_ho,bho,vI,vho,Fho,Tho,np,rse,Mho,Eho,FI,Cho,who,Aho,sp,tse,yho,Lho,TI,xho,$ho,kho,lp,ase,Sho,Rho,MI,Pho,Bho,Iho,ip,nse,qho,Nho,EI,jho,Dho,Gho,dp,sse,Oho,Vho,CI,Xho,zho,Who,cp,lse,Qho,Hho,wI,Uho,Jho,Yho,fp,ise,Kho,Zho,AI,epo,opo,rpo,mp,dse,tpo,apo,yI,npo,spo,lpo,gp,cse,ipo,dpo,LI,cpo,fpo,mpo,hp,fse,gpo,hpo,xI,ppo,upo,_po,pp,mse,bpo,vpo,$I,Fpo,Tpo,Mpo,up,gse,Epo,Cpo,kI,wpo,Apo,ypo,_p,hse,Lpo,xpo,SI,$po,kpo,Spo,bp,pse,Rpo,Ppo,RI,Bpo,Ipo,qpo,vp,use,Npo,jpo,PI,Dpo,Gpo,Opo,Fp,_se,Vpo,Xpo,BI,zpo,Wpo,Qpo,Tp,bse,Hpo,Upo,II,Jpo,Ypo,Kpo,Mp,vse,Zpo,euo,qI,ouo,ruo,tuo,Ep,Fse,auo,nuo,NI,suo,luo,iuo,Cp,Tse,duo,cuo,jI,fuo,muo,guo,wp,Mse,huo,puo,DI,uuo,_uo,buo,Ap,Ese,vuo,Fuo,GI,Tuo,Muo,Euo,yp,Cse,Cuo,wuo,OI,Auo,yuo,Luo,Lp,wse,xuo,$uo,VI,kuo,Suo,Ruo,xp,Ase,Puo,Buo,XI,Iuo,quo,Nuo,$p,yse,juo,Duo,zI,Guo,Ouo,Vuo,kp,Lse,Xuo,zuo,WI,Wuo,Quo,Huo,Sp,xse,Uuo,Juo,QI,Yuo,Kuo,Zuo,Rp,$se,e_o,o_o,HI,r_o,t_o,a_o,Ps,kse,n_o,s_o,UI,l_o,i_o,JI,d_o,c_o,f_o,Pp,Sse,m_o,g_o,YI,h_o,p_o,u_o,Bp,Rse,__o,b_o,KI,v_o,F_o,T_o,Ip,Pse,M_o,E_o,ZI,C_o,w_o,A_o,qp,Bse,y_o,L_o,eq,x_o,$_o,k_o,Np,Ise,S_o,R_o,oq,P_o,B_o,I_o,jp,qse,q_o,N_o,rq,j_o,D_o,G_o,Dp,Nse,O_o,V_o,tq,X_o,z_o,W_o,Gp,jse,Q_o,H_o,aq,U_o,J_o,Y_o,Op,Dse,K_o,Z_o,nq,e0o,o0o,r0o,Vp,Gse,t0o,a0o,sq,n0o,s0o,l0o,Xp,Ose,i0o,d0o,lq,c0o,f0o,m0o,zp,Vse,g0o,h0o,iq,p0o,u0o,_0o,Wp,Xse,b0o,v0o,dq,F0o,T0o,M0o,Qp,zse,E0o,C0o,cq,w0o,A0o,y0o,Hp,Wse,L0o,x0o,fq,$0o,k0o,S0o,Up,Qse,R0o,P0o,mq,B0o,I0o,q0o,Jp,Hse,N0o,j0o,gq,D0o,G0o,O0o,Yp,Use,V0o,X0o,hq,z0o,W0o,Q0o,Kp,Jse,H0o,U0o,pq,J0o,Y0o,K0o,Zp,Yse,Z0o,e1o,uq,o1o,r1o,t1o,eu,Kse,a1o,n1o,_q,s1o,l1o,i1o,ou,Zse,d1o,c1o,bq,f1o,m1o,g1o,ru,ele,h1o,p1o,vq,u1o,_1o,b1o,tu,ole,v1o,F1o,Fq,T1o,M1o,E1o,au,rle,C1o,w1o,Tq,A1o,y1o,L1o,nu,tle,x1o,$1o,Mq,k1o,S1o,R1o,su,ale,P1o,B1o,Eq,I1o,q1o,N1o,lu,nle,j1o,D1o,Cq,G1o,O1o,V1o,iu,sle,X1o,z1o,wq,W1o,Q1o,H1o,du,lle,U1o,J1o,Aq,Y1o,K1o,Z1o,cu,ile,ebo,obo,yq,rbo,tbo,abo,fu,dle,nbo,sbo,Lq,lbo,ibo,dbo,mu,cle,cbo,fbo,xq,mbo,gbo,hbo,gu,fle,pbo,ubo,$q,_bo,bbo,vbo,hu,mle,Fbo,Tbo,kq,Mbo,Ebo,Cbo,pu,gle,wbo,Abo,Sq,ybo,Lbo,xbo,uu,hle,$bo,kbo,Rq,Sbo,Rbo,Pbo,_u,ple,Bbo,Ibo,Pq,qbo,Nbo,jbo,bu,ule,Dbo,Gbo,Bq,Obo,Vbo,Xbo,vu,_le,zbo,Wbo,Iq,Qbo,Hbo,Ubo,Fu,ble,Jbo,Ybo,qq,Kbo,Zbo,e2o,Tu,vle,o2o,r2o,Nq,t2o,a2o,n2o,Mu,Fle,s2o,l2o,jq,i2o,d2o,c2o,Eu,Tle,f2o,m2o,Dq,g2o,h2o,p2o,Cu,Mle,u2o,_2o,Gq,b2o,v2o,F2o,wu,Ele,T2o,M2o,Oq,E2o,C2o,w2o,Au,Cle,A2o,y2o,Vq,L2o,x2o,$2o,yu,wle,k2o,S2o,Xq,R2o,P2o,B2o,Lu,Ale,I2o,q2o,zq,N2o,j2o,D2o,xu,yle,G2o,O2o,Wq,V2o,X2o,z2o,$u,Lle,W2o,Q2o,Qq,H2o,U2o,J2o,ku,xle,Y2o,K2o,Hq,Z2o,evo,ovo,Su,$le,rvo,tvo,Uq,avo,nvo,svo,Ru,kle,lvo,ivo,Jq,dvo,cvo,fvo,Pu,Sle,mvo,gvo,Yq,hvo,pvo,uvo,Bu,Rle,_vo,bvo,Kq,vvo,Fvo,Tvo,Iu,Ple,Mvo,Evo,Zq,Cvo,wvo,Avo,qu,Ble,yvo,Lvo,eN,xvo,$vo,kvo,Nu,Ile,Svo,Rvo,oN,Pvo,Bvo,Ivo,ju,qle,qvo,Nvo,rN,jvo,Dvo,Gvo,Du,Nle,Ovo,Vvo,tN,Xvo,zvo,Wvo,Gu,jle,Qvo,Hvo,aN,Uvo,Jvo,Yvo,Ou,Dle,Kvo,Zvo,nN,eFo,oFo,rFo,Vu,Gle,tFo,aFo,sN,nFo,sFo,lFo,Xu,Ole,iFo,dFo,lN,cFo,fFo,mFo,zu,Vle,gFo,hFo,iN,pFo,uFo,_Fo,Wu,Xle,bFo,vFo,dN,FFo,TFo,MFo,Qu,zle,EFo,CFo,cN,wFo,AFo,yFo,Hu,LFo,Wle,xFo,$Fo,Qle,kFo,SFo,Uu,kqe,Li,Ju,Hle,UA,RFo,Ule,PFo,Sqe,xo,JA,BFo,xi,IFo,fN,qFo,NFo,mN,jFo,DFo,GFo,YA,OFo,Jle,VFo,XFo,zFo,at,KA,WFo,Yle,QFo,HFo,$i,UFo,Kle,JFo,YFo,gN,KFo,ZFo,e6o,Yu,o6o,Ye,ZA,r6o,Zle,t6o,a6o,xa,n6o,eie,s6o,l6o,oie,i6o,d6o,rie,c6o,f6o,m6o,G,Ku,tie,g6o,h6o,hN,p6o,u6o,_6o,Zu,aie,b6o,v6o,pN,F6o,T6o,M6o,e_,nie,E6o,C6o,uN,w6o,A6o,y6o,o_,sie,L6o,x6o,_N,$6o,k6o,S6o,r_,lie,R6o,P6o,bN,B6o,I6o,q6o,t_,iie,N6o,j6o,vN,D6o,G6o,O6o,a_,die,V6o,X6o,FN,z6o,W6o,Q6o,n_,cie,H6o,U6o,TN,J6o,Y6o,K6o,s_,fie,Z6o,eTo,MN,oTo,rTo,tTo,l_,mie,aTo,nTo,EN,sTo,lTo,iTo,i_,gie,dTo,cTo,CN,fTo,mTo,gTo,d_,hie,hTo,pTo,wN,uTo,_To,bTo,c_,pie,vTo,FTo,AN,TTo,MTo,ETo,f_,uie,CTo,wTo,yN,ATo,yTo,LTo,m_,_ie,xTo,$To,LN,kTo,STo,RTo,g_,bie,PTo,BTo,xN,ITo,qTo,NTo,h_,vie,jTo,DTo,$N,GTo,OTo,VTo,p_,Fie,XTo,zTo,kN,WTo,QTo,HTo,u_,Tie,UTo,JTo,SN,YTo,KTo,ZTo,__,Mie,e7o,o7o,RN,r7o,t7o,a7o,b_,Eie,n7o,s7o,PN,l7o,i7o,d7o,v_,Cie,c7o,f7o,BN,m7o,g7o,h7o,F_,wie,p7o,u7o,IN,_7o,b7o,v7o,T_,Aie,F7o,T7o,qN,M7o,E7o,C7o,M_,yie,w7o,A7o,NN,y7o,L7o,x7o,E_,Lie,$7o,k7o,jN,S7o,R7o,P7o,C_,xie,B7o,I7o,DN,q7o,N7o,j7o,w_,$ie,D7o,G7o,GN,O7o,V7o,X7o,A_,kie,z7o,W7o,ON,Q7o,H7o,U7o,y_,Sie,J7o,Y7o,VN,K7o,Z7o,eMo,L_,Rie,oMo,rMo,XN,tMo,aMo,nMo,x_,Pie,sMo,lMo,zN,iMo,dMo,cMo,$_,Bie,fMo,mMo,WN,gMo,hMo,pMo,k_,Iie,uMo,_Mo,QN,bMo,vMo,FMo,S_,qie,TMo,MMo,HN,EMo,CMo,wMo,R_,Nie,AMo,yMo,UN,LMo,xMo,$Mo,P_,jie,kMo,SMo,JN,RMo,PMo,BMo,B_,Die,IMo,qMo,YN,NMo,jMo,DMo,I_,Gie,GMo,OMo,KN,VMo,XMo,zMo,q_,Oie,WMo,QMo,ZN,HMo,UMo,JMo,N_,Vie,YMo,KMo,ej,ZMo,e4o,o4o,j_,Xie,r4o,t4o,oj,a4o,n4o,s4o,D_,l4o,zie,i4o,d4o,Wie,c4o,f4o,G_,Rqe,ki,O_,Qie,ey,m4o,Hie,g4o,Pqe,$o,oy,h4o,Si,p4o,rj,u4o,_4o,tj,b4o,v4o,F4o,ry,T4o,Uie,M4o,E4o,C4o,nt,ty,w4o,Jie,A4o,y4o,Ri,L4o,Yie,x4o,$4o,aj,k4o,S4o,R4o,V_,P4o,Ke,ay,B4o,Kie,I4o,q4o,$a,N4o,Zie,j4o,D4o,ede,G4o,O4o,ode,V4o,X4o,z4o,z,X_,rde,W4o,Q4o,nj,H4o,U4o,J4o,z_,tde,Y4o,K4o,sj,Z4o,eEo,oEo,W_,ade,rEo,tEo,lj,aEo,nEo,sEo,Q_,nde,lEo,iEo,ij,dEo,cEo,fEo,H_,sde,mEo,gEo,dj,hEo,pEo,uEo,U_,lde,_Eo,bEo,cj,vEo,FEo,TEo,J_,ide,MEo,EEo,fj,CEo,wEo,AEo,Y_,dde,yEo,LEo,mj,xEo,$Eo,kEo,K_,cde,SEo,REo,gj,PEo,BEo,IEo,Z_,fde,qEo,NEo,hj,jEo,DEo,GEo,e0,mde,OEo,VEo,pj,XEo,zEo,WEo,o0,gde,QEo,HEo,uj,UEo,JEo,YEo,r0,hde,KEo,ZEo,_j,eCo,oCo,rCo,t0,pde,tCo,aCo,bj,nCo,sCo,lCo,a0,ude,iCo,dCo,vj,cCo,fCo,mCo,n0,_de,gCo,hCo,Fj,pCo,uCo,_Co,s0,bde,bCo,vCo,Tj,FCo,TCo,MCo,l0,vde,ECo,CCo,Mj,wCo,ACo,yCo,i0,Fde,LCo,xCo,Ej,$Co,kCo,SCo,d0,Tde,RCo,PCo,Cj,BCo,ICo,qCo,c0,Mde,NCo,jCo,wj,DCo,GCo,OCo,f0,Ede,VCo,XCo,Aj,zCo,WCo,QCo,m0,Cde,HCo,UCo,yj,JCo,YCo,KCo,g0,wde,ZCo,e5o,Lj,o5o,r5o,t5o,h0,Ade,a5o,n5o,xj,s5o,l5o,i5o,p0,yde,d5o,c5o,$j,f5o,m5o,g5o,u0,Lde,h5o,p5o,kj,u5o,_5o,b5o,_0,xde,v5o,F5o,Sj,T5o,M5o,E5o,b0,$de,C5o,w5o,Rj,A5o,y5o,L5o,v0,kde,x5o,$5o,Pj,k5o,S5o,R5o,F0,Sde,P5o,B5o,Bj,I5o,q5o,N5o,T0,Rde,j5o,D5o,Ij,G5o,O5o,V5o,M0,Pde,X5o,z5o,qj,W5o,Q5o,H5o,E0,Bde,U5o,J5o,Nj,Y5o,K5o,Z5o,C0,Ide,e3o,o3o,jj,r3o,t3o,a3o,w0,qde,n3o,s3o,Dj,l3o,i3o,d3o,A0,c3o,Nde,f3o,m3o,jde,g3o,h3o,y0,Bqe,Pi,L0,Dde,ny,p3o,Gde,u3o,Iqe,ko,sy,_3o,Bi,b3o,Gj,v3o,F3o,Oj,T3o,M3o,E3o,ly,C3o,Ode,w3o,A3o,y3o,st,iy,L3o,Vde,x3o,$3o,Ii,k3o,Xde,S3o,R3o,Vj,P3o,B3o,I3o,x0,q3o,Ze,dy,N3o,zde,j3o,D3o,ka,G3o,Wde,O3o,V3o,Qde,X3o,z3o,Hde,W3o,Q3o,H3o,W,$0,Ude,U3o,J3o,Xj,Y3o,K3o,Z3o,k0,Jde,ewo,owo,zj,rwo,two,awo,S0,Yde,nwo,swo,Wj,lwo,iwo,dwo,R0,Kde,cwo,fwo,Qj,mwo,gwo,hwo,P0,Zde,pwo,uwo,Hj,_wo,bwo,vwo,B0,ece,Fwo,Two,Uj,Mwo,Ewo,Cwo,I0,oce,wwo,Awo,Jj,ywo,Lwo,xwo,q0,rce,$wo,kwo,Yj,Swo,Rwo,Pwo,N0,tce,Bwo,Iwo,Kj,qwo,Nwo,jwo,j0,ace,Dwo,Gwo,Zj,Owo,Vwo,Xwo,D0,nce,zwo,Wwo,eD,Qwo,Hwo,Uwo,G0,sce,Jwo,Ywo,oD,Kwo,Zwo,eAo,O0,lce,oAo,rAo,rD,tAo,aAo,nAo,V0,ice,sAo,lAo,tD,iAo,dAo,cAo,X0,dce,fAo,mAo,aD,gAo,hAo,pAo,z0,cce,uAo,_Ao,nD,bAo,vAo,FAo,W0,fce,TAo,MAo,sD,EAo,CAo,wAo,Q0,mce,AAo,yAo,lD,LAo,xAo,$Ao,H0,gce,kAo,SAo,iD,RAo,PAo,BAo,U0,hce,IAo,qAo,dD,NAo,jAo,DAo,J0,pce,GAo,OAo,cD,VAo,XAo,zAo,Y0,uce,WAo,QAo,fD,HAo,UAo,JAo,K0,_ce,YAo,KAo,mD,ZAo,eyo,oyo,Z0,bce,ryo,tyo,gD,ayo,nyo,syo,e1,vce,lyo,iyo,hD,dyo,cyo,fyo,o1,Fce,myo,gyo,pD,hyo,pyo,uyo,r1,Tce,_yo,byo,uD,vyo,Fyo,Tyo,t1,Mce,Myo,Eyo,_D,Cyo,wyo,Ayo,a1,Ece,yyo,Lyo,bD,xyo,$yo,kyo,n1,Cce,Syo,Ryo,vD,Pyo,Byo,Iyo,s1,wce,qyo,Nyo,Ace,jyo,Dyo,Gyo,l1,yce,Oyo,Vyo,FD,Xyo,zyo,Wyo,i1,Lce,Qyo,Hyo,TD,Uyo,Jyo,Yyo,d1,xce,Kyo,Zyo,MD,eLo,oLo,rLo,c1,$ce,tLo,aLo,ED,nLo,sLo,lLo,f1,iLo,kce,dLo,cLo,Sce,fLo,mLo,m1,qqe,qi,g1,Rce,cy,gLo,Pce,hLo,Nqe,So,fy,pLo,Ni,uLo,CD,_Lo,bLo,wD,vLo,FLo,TLo,my,MLo,Bce,ELo,CLo,wLo,lt,gy,ALo,Ice,yLo,LLo,ji,xLo,qce,$Lo,kLo,AD,SLo,RLo,PLo,h1,BLo,eo,hy,ILo,Nce,qLo,NLo,Sa,jLo,jce,DLo,GLo,Dce,OLo,VLo,Gce,XLo,zLo,WLo,ue,p1,Oce,QLo,HLo,yD,ULo,JLo,YLo,u1,Vce,KLo,ZLo,LD,e8o,o8o,r8o,_1,Xce,t8o,a8o,xD,n8o,s8o,l8o,b1,zce,i8o,d8o,$D,c8o,f8o,m8o,v1,Wce,g8o,h8o,kD,p8o,u8o,_8o,F1,Qce,b8o,v8o,SD,F8o,T8o,M8o,T1,Hce,E8o,C8o,RD,w8o,A8o,y8o,M1,Uce,L8o,x8o,PD,$8o,k8o,S8o,E1,Jce,R8o,P8o,BD,B8o,I8o,q8o,C1,Yce,N8o,j8o,ID,D8o,G8o,O8o,w1,Kce,V8o,X8o,qD,z8o,W8o,Q8o,A1,Zce,H8o,U8o,ND,J8o,Y8o,K8o,y1,efe,Z8o,e9o,jD,o9o,r9o,t9o,L1,ofe,a9o,n9o,DD,s9o,l9o,i9o,x1,rfe,d9o,c9o,GD,f9o,m9o,g9o,$1,tfe,h9o,p9o,OD,u9o,_9o,b9o,k1,v9o,afe,F9o,T9o,nfe,M9o,E9o,S1,jqe,Di,R1,sfe,py,C9o,lfe,w9o,Dqe,Ro,uy,A9o,Gi,y9o,VD,L9o,x9o,XD,$9o,k9o,S9o,_y,R9o,ife,P9o,B9o,I9o,it,by,q9o,dfe,N9o,j9o,Oi,D9o,cfe,G9o,O9o,zD,V9o,X9o,z9o,P1,W9o,oo,vy,Q9o,ffe,H9o,U9o,Ra,J9o,mfe,Y9o,K9o,gfe,Z9o,exo,hfe,oxo,rxo,txo,q,B1,pfe,axo,nxo,WD,sxo,lxo,ixo,I1,ufe,dxo,cxo,QD,fxo,mxo,gxo,q1,_fe,hxo,pxo,HD,uxo,_xo,bxo,N1,bfe,vxo,Fxo,UD,Txo,Mxo,Exo,j1,vfe,Cxo,wxo,JD,Axo,yxo,Lxo,D1,Ffe,xxo,$xo,YD,kxo,Sxo,Rxo,G1,Tfe,Pxo,Bxo,KD,Ixo,qxo,Nxo,O1,Mfe,jxo,Dxo,ZD,Gxo,Oxo,Vxo,V1,Efe,Xxo,zxo,eG,Wxo,Qxo,Hxo,X1,Cfe,Uxo,Jxo,oG,Yxo,Kxo,Zxo,z1,wfe,e$o,o$o,rG,r$o,t$o,a$o,W1,Afe,n$o,s$o,tG,l$o,i$o,d$o,Q1,yfe,c$o,f$o,aG,m$o,g$o,h$o,H1,Lfe,p$o,u$o,nG,_$o,b$o,v$o,U1,xfe,F$o,T$o,sG,M$o,E$o,C$o,J1,$fe,w$o,A$o,lG,y$o,L$o,x$o,Y1,kfe,$$o,k$o,iG,S$o,R$o,P$o,K1,Sfe,B$o,I$o,dG,q$o,N$o,j$o,Z1,Rfe,D$o,G$o,cG,O$o,V$o,X$o,eb,Pfe,z$o,W$o,fG,Q$o,H$o,U$o,ob,Bfe,J$o,Y$o,mG,K$o,Z$o,eko,rb,Ife,oko,rko,gG,tko,ako,nko,tb,qfe,sko,lko,hG,iko,dko,cko,ab,Nfe,fko,mko,pG,gko,hko,pko,nb,jfe,uko,_ko,uG,bko,vko,Fko,sb,Dfe,Tko,Mko,_G,Eko,Cko,wko,lb,Gfe,Ako,yko,bG,Lko,xko,$ko,ib,Ofe,kko,Sko,vG,Rko,Pko,Bko,db,Vfe,Iko,qko,FG,Nko,jko,Dko,cb,Xfe,Gko,Oko,TG,Vko,Xko,zko,fb,zfe,Wko,Qko,MG,Hko,Uko,Jko,mb,Wfe,Yko,Kko,EG,Zko,eSo,oSo,gb,Qfe,rSo,tSo,CG,aSo,nSo,sSo,hb,Hfe,lSo,iSo,wG,dSo,cSo,fSo,pb,Ufe,mSo,gSo,AG,hSo,pSo,uSo,ub,Jfe,_So,bSo,yG,vSo,FSo,TSo,_b,Yfe,MSo,ESo,LG,CSo,wSo,ASo,bb,Kfe,ySo,LSo,xG,xSo,$So,kSo,vb,Zfe,SSo,RSo,$G,PSo,BSo,ISo,Fb,eme,qSo,NSo,kG,jSo,DSo,GSo,Tb,ome,OSo,VSo,SG,XSo,zSo,WSo,Mb,rme,QSo,HSo,RG,USo,JSo,YSo,Eb,tme,KSo,ZSo,PG,eRo,oRo,rRo,Cb,ame,tRo,aRo,BG,nRo,sRo,lRo,wb,nme,iRo,dRo,IG,cRo,fRo,mRo,Ab,sme,gRo,hRo,qG,pRo,uRo,_Ro,yb,lme,bRo,vRo,NG,FRo,TRo,MRo,Lb,ERo,ime,CRo,wRo,dme,ARo,yRo,xb,Gqe,Vi,$b,cme,Fy,LRo,fme,xRo,Oqe,Po,Ty,$Ro,Xi,kRo,jG,SRo,RRo,DG,PRo,BRo,IRo,My,qRo,mme,NRo,jRo,DRo,dt,Ey,GRo,gme,ORo,VRo,zi,XRo,hme,zRo,WRo,GG,QRo,HRo,URo,kb,JRo,ro,Cy,YRo,pme,KRo,ZRo,Pa,ePo,ume,oPo,rPo,_me,tPo,aPo,bme,nPo,sPo,lPo,Y,Sb,vme,iPo,dPo,OG,cPo,fPo,mPo,Rb,Fme,gPo,hPo,VG,pPo,uPo,_Po,Pb,Tme,bPo,vPo,XG,FPo,TPo,MPo,Bb,Mme,EPo,CPo,zG,wPo,APo,yPo,Ib,Eme,LPo,xPo,WG,$Po,kPo,SPo,qb,Cme,RPo,PPo,QG,BPo,IPo,qPo,Nb,wme,NPo,jPo,HG,DPo,GPo,OPo,jb,Ame,VPo,XPo,UG,zPo,WPo,QPo,Db,yme,HPo,UPo,JG,JPo,YPo,KPo,Gb,Lme,ZPo,eBo,YG,oBo,rBo,tBo,Ob,xme,aBo,nBo,KG,sBo,lBo,iBo,Vb,$me,dBo,cBo,ZG,fBo,mBo,gBo,Xb,kme,hBo,pBo,eO,uBo,_Bo,bBo,zb,Sme,vBo,FBo,oO,TBo,MBo,EBo,Wb,Rme,CBo,wBo,rO,ABo,yBo,LBo,Qb,Pme,xBo,$Bo,tO,kBo,SBo,RBo,Hb,Bme,PBo,BBo,aO,IBo,qBo,NBo,Ub,Ime,jBo,DBo,nO,GBo,OBo,VBo,Jb,qme,XBo,zBo,sO,WBo,QBo,HBo,Yb,Nme,UBo,JBo,lO,YBo,KBo,ZBo,Kb,jme,eIo,oIo,iO,rIo,tIo,aIo,Zb,Dme,nIo,sIo,dO,lIo,iIo,dIo,e2,Gme,cIo,fIo,cO,mIo,gIo,hIo,o2,Ome,pIo,uIo,fO,_Io,bIo,vIo,r2,Vme,FIo,TIo,mO,MIo,EIo,CIo,t2,Xme,wIo,AIo,gO,yIo,LIo,xIo,a2,zme,$Io,kIo,hO,SIo,RIo,PIo,n2,Wme,BIo,IIo,pO,qIo,NIo,jIo,s2,Qme,DIo,GIo,uO,OIo,VIo,XIo,l2,zIo,Hme,WIo,QIo,Ume,HIo,UIo,i2,Vqe,Wi,d2,Jme,wy,JIo,Yme,YIo,Xqe,Bo,Ay,KIo,Qi,ZIo,_O,eqo,oqo,bO,rqo,tqo,aqo,yy,nqo,Kme,sqo,lqo,iqo,ct,Ly,dqo,Zme,cqo,fqo,Hi,mqo,ege,gqo,hqo,vO,pqo,uqo,_qo,c2,bqo,to,xy,vqo,oge,Fqo,Tqo,Ba,Mqo,rge,Eqo,Cqo,tge,wqo,Aqo,age,yqo,Lqo,xqo,Yr,f2,nge,$qo,kqo,FO,Sqo,Rqo,Pqo,m2,sge,Bqo,Iqo,TO,qqo,Nqo,jqo,g2,lge,Dqo,Gqo,MO,Oqo,Vqo,Xqo,h2,ige,zqo,Wqo,EO,Qqo,Hqo,Uqo,p2,dge,Jqo,Yqo,CO,Kqo,Zqo,eNo,u2,oNo,cge,rNo,tNo,fge,aNo,nNo,_2,zqe,Ui,b2,mge,$y,sNo,gge,lNo,Wqe,Io,ky,iNo,Ji,dNo,wO,cNo,fNo,AO,mNo,gNo,hNo,Sy,pNo,hge,uNo,_No,bNo,ft,Ry,vNo,pge,FNo,TNo,Yi,MNo,uge,ENo,CNo,yO,wNo,ANo,yNo,v2,LNo,ao,Py,xNo,_ge,$No,kNo,Ia,SNo,bge,RNo,PNo,vge,BNo,INo,Fge,qNo,NNo,jNo,H,F2,Tge,DNo,GNo,LO,ONo,VNo,XNo,T2,Mge,zNo,WNo,xO,QNo,HNo,UNo,M2,Ege,JNo,YNo,$O,KNo,ZNo,ejo,E2,Cge,ojo,rjo,kO,tjo,ajo,njo,C2,wge,sjo,ljo,SO,ijo,djo,cjo,w2,Age,fjo,mjo,RO,gjo,hjo,pjo,A2,yge,ujo,_jo,PO,bjo,vjo,Fjo,y2,Lge,Tjo,Mjo,BO,Ejo,Cjo,wjo,L2,xge,Ajo,yjo,IO,Ljo,xjo,$jo,x2,$ge,kjo,Sjo,qO,Rjo,Pjo,Bjo,$2,kge,Ijo,qjo,NO,Njo,jjo,Djo,k2,Sge,Gjo,Ojo,jO,Vjo,Xjo,zjo,S2,Rge,Wjo,Qjo,DO,Hjo,Ujo,Jjo,R2,Pge,Yjo,Kjo,GO,Zjo,eDo,oDo,P2,Bge,rDo,tDo,OO,aDo,nDo,sDo,B2,Ige,lDo,iDo,VO,dDo,cDo,fDo,I2,qge,mDo,gDo,XO,hDo,pDo,uDo,q2,Nge,_Do,bDo,zO,vDo,FDo,TDo,N2,jge,MDo,EDo,WO,CDo,wDo,ADo,j2,Dge,yDo,LDo,QO,xDo,$Do,kDo,D2,Gge,SDo,RDo,HO,PDo,BDo,IDo,G2,Oge,qDo,NDo,UO,jDo,DDo,GDo,O2,Vge,ODo,VDo,JO,XDo,zDo,WDo,V2,Xge,QDo,HDo,YO,UDo,JDo,YDo,X2,zge,KDo,ZDo,KO,eGo,oGo,rGo,z2,Wge,tGo,aGo,ZO,nGo,sGo,lGo,W2,Qge,iGo,dGo,eV,cGo,fGo,mGo,Q2,Hge,gGo,hGo,oV,pGo,uGo,_Go,H2,Uge,bGo,vGo,rV,FGo,TGo,MGo,U2,Jge,EGo,CGo,tV,wGo,AGo,yGo,J2,Yge,LGo,xGo,aV,$Go,kGo,SGo,Y2,Kge,RGo,PGo,nV,BGo,IGo,qGo,K2,Zge,NGo,jGo,sV,DGo,GGo,OGo,Z2,ehe,VGo,XGo,lV,zGo,WGo,QGo,ev,HGo,ohe,UGo,JGo,rhe,YGo,KGo,ov,Qqe,Ki,rv,the,By,ZGo,ahe,eOo,Hqe,qo,Iy,oOo,Zi,rOo,iV,tOo,aOo,dV,nOo,sOo,lOo,qy,iOo,nhe,dOo,cOo,fOo,mt,Ny,mOo,she,gOo,hOo,ed,pOo,lhe,uOo,_Oo,cV,bOo,vOo,FOo,tv,TOo,no,jy,MOo,ihe,EOo,COo,qa,wOo,dhe,AOo,yOo,che,LOo,xOo,fhe,$Oo,kOo,SOo,V,av,mhe,ROo,POo,fV,BOo,IOo,qOo,nv,ghe,NOo,jOo,mV,DOo,GOo,OOo,sv,hhe,VOo,XOo,gV,zOo,WOo,QOo,lv,phe,HOo,UOo,hV,JOo,YOo,KOo,iv,uhe,ZOo,eVo,pV,oVo,rVo,tVo,dv,_he,aVo,nVo,uV,sVo,lVo,iVo,cv,bhe,dVo,cVo,_V,fVo,mVo,gVo,fv,vhe,hVo,pVo,bV,uVo,_Vo,bVo,mv,Fhe,vVo,FVo,vV,TVo,MVo,EVo,gv,The,CVo,wVo,FV,AVo,yVo,LVo,hv,Mhe,xVo,$Vo,TV,kVo,SVo,RVo,pv,Ehe,PVo,BVo,MV,IVo,qVo,NVo,uv,Che,jVo,DVo,EV,GVo,OVo,VVo,_v,whe,XVo,zVo,CV,WVo,QVo,HVo,bv,Ahe,UVo,JVo,wV,YVo,KVo,ZVo,vv,yhe,eXo,oXo,AV,rXo,tXo,aXo,Fv,Lhe,nXo,sXo,yV,lXo,iXo,dXo,Tv,xhe,cXo,fXo,LV,mXo,gXo,hXo,Mv,$he,pXo,uXo,xV,_Xo,bXo,vXo,Ev,khe,FXo,TXo,$V,MXo,EXo,CXo,Cv,She,wXo,AXo,kV,yXo,LXo,xXo,wv,Rhe,$Xo,kXo,SV,SXo,RXo,PXo,Av,Phe,BXo,IXo,RV,qXo,NXo,jXo,yv,Bhe,DXo,GXo,PV,OXo,VXo,XXo,Lv,Ihe,zXo,WXo,BV,QXo,HXo,UXo,xv,qhe,JXo,YXo,IV,KXo,ZXo,ezo,$v,Nhe,ozo,rzo,qV,tzo,azo,nzo,kv,jhe,szo,lzo,NV,izo,dzo,czo,Sv,Dhe,fzo,mzo,jV,gzo,hzo,pzo,Rv,Ghe,uzo,_zo,DV,bzo,vzo,Fzo,Pv,Ohe,Tzo,Mzo,GV,Ezo,Czo,wzo,Bv,Vhe,Azo,yzo,OV,Lzo,xzo,$zo,Iv,Xhe,kzo,Szo,VV,Rzo,Pzo,Bzo,qv,zhe,Izo,qzo,XV,Nzo,jzo,Dzo,Nv,Whe,Gzo,Ozo,zV,Vzo,Xzo,zzo,jv,Qhe,Wzo,Qzo,WV,Hzo,Uzo,Jzo,Dv,Hhe,Yzo,Kzo,QV,Zzo,eWo,oWo,Gv,Uhe,rWo,tWo,HV,aWo,nWo,sWo,Ov,Jhe,lWo,iWo,UV,dWo,cWo,fWo,Vv,Yhe,mWo,gWo,JV,hWo,pWo,uWo,Xv,_Wo,Khe,bWo,vWo,Zhe,FWo,TWo,zv,Uqe,od,Wv,epe,Dy,MWo,ope,EWo,Jqe,No,Gy,CWo,rd,wWo,YV,AWo,yWo,KV,LWo,xWo,$Wo,Oy,kWo,rpe,SWo,RWo,PWo,gt,Vy,BWo,tpe,IWo,qWo,td,NWo,ape,jWo,DWo,ZV,GWo,OWo,VWo,Qv,XWo,so,Xy,zWo,npe,WWo,QWo,Na,HWo,spe,UWo,JWo,lpe,YWo,KWo,ipe,ZWo,eQo,oQo,dpe,Hv,cpe,rQo,tQo,eX,aQo,nQo,sQo,Uv,lQo,fpe,iQo,dQo,mpe,cQo,fQo,Jv,Yqe,ad,Yv,gpe,zy,mQo,hpe,gQo,Kqe,jo,Wy,hQo,nd,pQo,oX,uQo,_Qo,rX,bQo,vQo,FQo,Qy,TQo,ppe,MQo,EQo,CQo,ht,Hy,wQo,upe,AQo,yQo,sd,LQo,_pe,xQo,$Qo,tX,kQo,SQo,RQo,Kv,PQo,lo,Uy,BQo,bpe,IQo,qQo,ja,NQo,vpe,jQo,DQo,Fpe,GQo,OQo,Tpe,VQo,XQo,zQo,Fe,Zv,Mpe,WQo,QQo,aX,HQo,UQo,JQo,eF,Epe,YQo,KQo,nX,ZQo,eHo,oHo,oF,Cpe,rHo,tHo,sX,aHo,nHo,sHo,Bs,wpe,lHo,iHo,lX,dHo,cHo,iX,fHo,mHo,gHo,rF,Ape,hHo,pHo,dX,uHo,_Ho,bHo,pt,ype,vHo,FHo,cX,THo,MHo,fX,EHo,CHo,mX,wHo,AHo,yHo,tF,Lpe,LHo,xHo,gX,$Ho,kHo,SHo,aF,xpe,RHo,PHo,hX,BHo,IHo,qHo,nF,$pe,NHo,jHo,pX,DHo,GHo,OHo,sF,kpe,VHo,XHo,uX,zHo,WHo,QHo,lF,Spe,HHo,UHo,_X,JHo,YHo,KHo,iF,Rpe,ZHo,eUo,bX,oUo,rUo,tUo,dF,Ppe,aUo,nUo,vX,sUo,lUo,iUo,cF,dUo,Bpe,cUo,fUo,Ipe,mUo,gUo,fF,Zqe,ld,mF,qpe,Jy,hUo,Npe,pUo,eNe,Do,Yy,uUo,id,_Uo,FX,bUo,vUo,TX,FUo,TUo,MUo,Ky,EUo,jpe,CUo,wUo,AUo,ut,Zy,yUo,Dpe,LUo,xUo,dd,$Uo,Gpe,kUo,SUo,MX,RUo,PUo,BUo,gF,IUo,io,eL,qUo,Ope,NUo,jUo,Da,DUo,Vpe,GUo,OUo,Xpe,VUo,XUo,zpe,zUo,WUo,QUo,Wpe,hF,Qpe,HUo,UUo,EX,JUo,YUo,KUo,pF,ZUo,Hpe,eJo,oJo,Upe,rJo,tJo,uF,oNe,cd,_F,Jpe,oL,aJo,Ype,nJo,rNe,Go,rL,sJo,fd,lJo,CX,iJo,dJo,wX,cJo,fJo,mJo,tL,gJo,Kpe,hJo,pJo,uJo,_t,aL,_Jo,Zpe,bJo,vJo,md,FJo,eue,TJo,MJo,AX,EJo,CJo,wJo,bF,AJo,co,nL,yJo,oue,LJo,xJo,Ga,$Jo,rue,kJo,SJo,tue,RJo,PJo,aue,BJo,IJo,qJo,ke,vF,nue,NJo,jJo,yX,DJo,GJo,OJo,FF,sue,VJo,XJo,LX,zJo,WJo,QJo,TF,lue,HJo,UJo,xX,JJo,YJo,KJo,MF,iue,ZJo,eYo,$X,oYo,rYo,tYo,EF,due,aYo,nYo,kX,sYo,lYo,iYo,CF,cue,dYo,cYo,SX,fYo,mYo,gYo,wF,fue,hYo,pYo,RX,uYo,_Yo,bYo,AF,mue,vYo,FYo,PX,TYo,MYo,EYo,yF,gue,CYo,wYo,BX,AYo,yYo,LYo,LF,xYo,hue,$Yo,kYo,pue,SYo,RYo,xF,tNe,gd,$F,uue,sL,PYo,_ue,BYo,aNe,Oo,lL,IYo,hd,qYo,IX,NYo,jYo,qX,DYo,GYo,OYo,iL,VYo,bue,XYo,zYo,WYo,bt,dL,QYo,vue,HYo,UYo,pd,JYo,Fue,YYo,KYo,NX,ZYo,eKo,oKo,kF,rKo,fo,cL,tKo,Tue,aKo,nKo,Oa,sKo,Mue,lKo,iKo,Eue,dKo,cKo,Cue,fKo,mKo,gKo,Kr,SF,wue,hKo,pKo,jX,uKo,_Ko,bKo,RF,Aue,vKo,FKo,DX,TKo,MKo,EKo,PF,yue,CKo,wKo,GX,AKo,yKo,LKo,BF,Lue,xKo,$Ko,OX,kKo,SKo,RKo,IF,xue,PKo,BKo,VX,IKo,qKo,NKo,qF,jKo,$ue,DKo,GKo,kue,OKo,VKo,NF,nNe,ud,jF,Sue,fL,XKo,Rue,zKo,sNe,Vo,mL,WKo,_d,QKo,XX,HKo,UKo,zX,JKo,YKo,KKo,gL,ZKo,Pue,eZo,oZo,rZo,vt,hL,tZo,Bue,aZo,nZo,bd,sZo,Iue,lZo,iZo,WX,dZo,cZo,fZo,DF,mZo,mo,pL,gZo,que,hZo,pZo,Va,uZo,Nue,_Zo,bZo,jue,vZo,FZo,Due,TZo,MZo,EZo,Se,GF,Gue,CZo,wZo,QX,AZo,yZo,LZo,OF,Oue,xZo,$Zo,HX,kZo,SZo,RZo,VF,Vue,PZo,BZo,UX,IZo,qZo,NZo,XF,Xue,jZo,DZo,JX,GZo,OZo,VZo,zF,zue,XZo,zZo,YX,WZo,QZo,HZo,WF,Wue,UZo,JZo,KX,YZo,KZo,ZZo,QF,Que,eer,oer,ZX,rer,ter,aer,HF,Hue,ner,ser,ez,ler,ier,der,UF,Uue,cer,fer,oz,mer,ger,her,JF,per,Jue,uer,_er,Yue,ber,ver,YF,lNe,vd,KF,Kue,uL,Fer,Zue,Ter,iNe,Xo,_L,Mer,Fd,Eer,rz,Cer,wer,tz,Aer,yer,Ler,bL,xer,e_e,$er,ker,Ser,Ft,vL,Rer,o_e,Per,Ber,Td,Ier,r_e,qer,Ner,az,jer,Der,Ger,ZF,Oer,go,FL,Ver,t_e,Xer,zer,Xa,Wer,a_e,Qer,Her,n_e,Uer,Jer,s_e,Yer,Ker,Zer,TL,e6,l_e,eor,oor,nz,ror,tor,aor,o6,i_e,nor,sor,sz,lor,ior,dor,r6,cor,d_e,mor,gor,c_e,hor,por,t6,dNe,Md,a6,f_e,ML,uor,m_e,_or,cNe,zo,EL,bor,Ed,vor,lz,For,Tor,iz,Mor,Eor,Cor,CL,wor,g_e,Aor,yor,Lor,Tt,wL,xor,h_e,$or,kor,Cd,Sor,p_e,Ror,Por,dz,Bor,Ior,qor,n6,Nor,ho,AL,jor,u_e,Dor,Gor,za,Oor,__e,Vor,Xor,b_e,zor,Wor,v_e,Qor,Hor,Uor,Zr,s6,F_e,Jor,Yor,cz,Kor,Zor,err,l6,T_e,orr,rrr,fz,trr,arr,nrr,i6,M_e,srr,lrr,mz,irr,drr,crr,d6,E_e,frr,mrr,gz,grr,hrr,prr,c6,C_e,urr,_rr,hz,brr,vrr,Frr,f6,Trr,w_e,Mrr,Err,A_e,Crr,wrr,m6,fNe,wd,g6,y_e,yL,Arr,L_e,yrr,mNe,Wo,LL,Lrr,Ad,xrr,pz,$rr,krr,uz,Srr,Rrr,Prr,xL,Brr,x_e,Irr,qrr,Nrr,Mt,$L,jrr,$_e,Drr,Grr,yd,Orr,k_e,Vrr,Xrr,_z,zrr,Wrr,Qrr,h6,Hrr,po,kL,Urr,S_e,Jrr,Yrr,Wa,Krr,R_e,Zrr,etr,P_e,otr,rtr,B_e,ttr,atr,ntr,Ld,p6,I_e,str,ltr,bz,itr,dtr,ctr,u6,q_e,ftr,mtr,vz,gtr,htr,ptr,_6,N_e,utr,_tr,Fz,btr,vtr,Ftr,b6,Ttr,j_e,Mtr,Etr,D_e,Ctr,wtr,v6,gNe,xd,F6,G_e,SL,Atr,O_e,ytr,hNe,Qo,RL,Ltr,$d,xtr,Tz,$tr,ktr,Mz,Str,Rtr,Ptr,PL,Btr,V_e,Itr,qtr,Ntr,Et,BL,jtr,X_e,Dtr,Gtr,kd,Otr,z_e,Vtr,Xtr,Ez,ztr,Wtr,Qtr,T6,Htr,uo,IL,Utr,W_e,Jtr,Ytr,Qa,Ktr,Q_e,Ztr,ear,H_e,oar,rar,U_e,tar,aar,nar,qL,M6,J_e,sar,lar,Cz,iar,dar,car,E6,Y_e,far,mar,wz,gar,har,par,C6,uar,K_e,_ar,bar,Z_e,Far,Tar,w6,pNe,Sd,A6,e0e,NL,Mar,o0e,Ear,uNe,Ho,jL,Car,Rd,war,Az,Aar,yar,yz,Lar,xar,$ar,DL,kar,r0e,Sar,Rar,Par,Ct,GL,Bar,t0e,Iar,qar,Pd,Nar,a0e,jar,Dar,Lz,Gar,Oar,Var,y6,Xar,_o,OL,zar,n0e,War,Qar,Ha,Har,s0e,Uar,Jar,l0e,Yar,Kar,i0e,Zar,enr,onr,d0e,L6,c0e,rnr,tnr,xz,anr,nnr,snr,x6,lnr,f0e,inr,dnr,m0e,cnr,fnr,$6,_Ne,Bd,k6,g0e,VL,mnr,h0e,gnr,bNe,Uo,XL,hnr,Id,pnr,$z,unr,_nr,kz,bnr,vnr,Fnr,zL,Tnr,p0e,Mnr,Enr,Cnr,wt,WL,wnr,u0e,Anr,ynr,qd,Lnr,_0e,xnr,$nr,Sz,knr,Snr,Rnr,S6,Pnr,bo,QL,Bnr,b0e,Inr,qnr,Ua,Nnr,v0e,jnr,Dnr,F0e,Gnr,Onr,T0e,Vnr,Xnr,znr,Ja,R6,M0e,Wnr,Qnr,Rz,Hnr,Unr,Jnr,P6,E0e,Ynr,Knr,Pz,Znr,esr,osr,B6,C0e,rsr,tsr,Bz,asr,nsr,ssr,I6,w0e,lsr,isr,Iz,dsr,csr,fsr,q6,msr,A0e,gsr,hsr,y0e,psr,usr,N6,vNe,Nd,j6,L0e,HL,_sr,x0e,bsr,FNe,Jo,UL,vsr,jd,Fsr,qz,Tsr,Msr,Nz,Esr,Csr,wsr,JL,Asr,$0e,ysr,Lsr,xsr,At,YL,$sr,k0e,ksr,Ssr,Dd,Rsr,S0e,Psr,Bsr,jz,Isr,qsr,Nsr,D6,jsr,vo,KL,Dsr,R0e,Gsr,Osr,Ya,Vsr,P0e,Xsr,zsr,B0e,Wsr,Qsr,I0e,Hsr,Usr,Jsr,q0e,G6,N0e,Ysr,Ksr,Dz,Zsr,elr,olr,O6,rlr,j0e,tlr,alr,D0e,nlr,slr,V6,TNe,Gd,X6,G0e,ZL,llr,O0e,ilr,MNe,Yo,e8,dlr,Od,clr,Gz,flr,mlr,Oz,glr,hlr,plr,o8,ulr,V0e,_lr,blr,vlr,yt,r8,Flr,X0e,Tlr,Mlr,Vd,Elr,z0e,Clr,wlr,Vz,Alr,ylr,Llr,z6,xlr,wr,t8,$lr,W0e,klr,Slr,Ka,Rlr,Q0e,Plr,Blr,H0e,Ilr,qlr,U0e,Nlr,jlr,Dlr,N,W6,J0e,Glr,Olr,Xz,Vlr,Xlr,zlr,Q6,Y0e,Wlr,Qlr,zz,Hlr,Ulr,Jlr,H6,K0e,Ylr,Klr,Wz,Zlr,eir,oir,U6,Z0e,rir,tir,Qz,air,nir,sir,J6,e1e,lir,iir,Hz,dir,cir,fir,Y6,o1e,mir,gir,Uz,hir,pir,uir,K6,r1e,_ir,bir,Jz,vir,Fir,Tir,Z6,t1e,Mir,Eir,Yz,Cir,wir,Air,eT,a1e,yir,Lir,Kz,xir,$ir,kir,oT,n1e,Sir,Rir,Zz,Pir,Bir,Iir,rT,s1e,qir,Nir,eW,jir,Dir,Gir,tT,l1e,Oir,Vir,oW,Xir,zir,Wir,aT,i1e,Qir,Hir,rW,Uir,Jir,Yir,nT,d1e,Kir,Zir,tW,edr,odr,rdr,sT,c1e,tdr,adr,aW,ndr,sdr,ldr,lT,f1e,idr,ddr,nW,cdr,fdr,mdr,iT,m1e,gdr,hdr,sW,pdr,udr,_dr,Is,g1e,bdr,vdr,lW,Fdr,Tdr,iW,Mdr,Edr,Cdr,dT,h1e,wdr,Adr,dW,ydr,Ldr,xdr,cT,p1e,$dr,kdr,cW,Sdr,Rdr,Pdr,fT,u1e,Bdr,Idr,fW,qdr,Ndr,jdr,mT,_1e,Ddr,Gdr,mW,Odr,Vdr,Xdr,gT,b1e,zdr,Wdr,gW,Qdr,Hdr,Udr,hT,v1e,Jdr,Ydr,hW,Kdr,Zdr,ecr,pT,F1e,ocr,rcr,pW,tcr,acr,ncr,uT,T1e,scr,lcr,uW,icr,dcr,ccr,_T,M1e,fcr,mcr,_W,gcr,hcr,pcr,bT,E1e,ucr,_cr,bW,bcr,vcr,Fcr,vT,C1e,Tcr,Mcr,vW,Ecr,Ccr,wcr,FT,w1e,Acr,ycr,FW,Lcr,xcr,$cr,TT,A1e,kcr,Scr,TW,Rcr,Pcr,Bcr,MT,y1e,Icr,qcr,MW,Ncr,jcr,Dcr,ET,L1e,Gcr,Ocr,EW,Vcr,Xcr,zcr,CT,x1e,Wcr,Qcr,CW,Hcr,Ucr,Jcr,wT,$1e,Ycr,Kcr,wW,Zcr,efr,ofr,AT,k1e,rfr,tfr,AW,afr,nfr,sfr,yT,S1e,lfr,ifr,yW,dfr,cfr,ffr,LT,R1e,mfr,gfr,LW,hfr,pfr,ufr,xT,P1e,_fr,bfr,xW,vfr,Ffr,Tfr,$T,B1e,Mfr,Efr,$W,Cfr,wfr,Afr,kT,I1e,yfr,Lfr,kW,xfr,$fr,kfr,ST,q1e,Sfr,Rfr,SW,Pfr,Bfr,Ifr,RT,N1e,qfr,Nfr,RW,jfr,Dfr,Gfr,PT,j1e,Ofr,Vfr,PW,Xfr,zfr,Wfr,BT,D1e,Qfr,Hfr,BW,Ufr,Jfr,Yfr,IT,G1e,Kfr,Zfr,IW,emr,omr,rmr,qT,ENe,Xd,NT,O1e,a8,tmr,V1e,amr,CNe,Ko,n8,nmr,zd,smr,qW,lmr,imr,NW,dmr,cmr,fmr,s8,mmr,X1e,gmr,hmr,pmr,Lt,l8,umr,z1e,_mr,bmr,Wd,vmr,W1e,Fmr,Tmr,jW,Mmr,Emr,Cmr,jT,wmr,Ar,i8,Amr,Q1e,ymr,Lmr,Za,xmr,H1e,$mr,kmr,U1e,Smr,Rmr,J1e,Pmr,Bmr,Imr,se,DT,Y1e,qmr,Nmr,DW,jmr,Dmr,Gmr,GT,K1e,Omr,Vmr,GW,Xmr,zmr,Wmr,OT,Z1e,Qmr,Hmr,OW,Umr,Jmr,Ymr,VT,ebe,Kmr,Zmr,VW,egr,ogr,rgr,XT,obe,tgr,agr,XW,ngr,sgr,lgr,zT,rbe,igr,dgr,zW,cgr,fgr,mgr,WT,tbe,ggr,hgr,WW,pgr,ugr,_gr,QT,abe,bgr,vgr,QW,Fgr,Tgr,Mgr,HT,nbe,Egr,Cgr,HW,wgr,Agr,ygr,UT,sbe,Lgr,xgr,UW,$gr,kgr,Sgr,JT,lbe,Rgr,Pgr,JW,Bgr,Igr,qgr,YT,ibe,Ngr,jgr,YW,Dgr,Ggr,Ogr,KT,dbe,Vgr,Xgr,KW,zgr,Wgr,Qgr,ZT,cbe,Hgr,Ugr,ZW,Jgr,Ygr,Kgr,e7,fbe,Zgr,ehr,eQ,ohr,rhr,thr,o7,mbe,ahr,nhr,oQ,shr,lhr,ihr,r7,gbe,dhr,chr,rQ,fhr,mhr,ghr,t7,hbe,hhr,phr,tQ,uhr,_hr,bhr,a7,pbe,vhr,Fhr,aQ,Thr,Mhr,Ehr,n7,ube,Chr,whr,nQ,Ahr,yhr,Lhr,s7,_be,xhr,$hr,sQ,khr,Shr,Rhr,l7,bbe,Phr,Bhr,lQ,Ihr,qhr,Nhr,i7,vbe,jhr,Dhr,iQ,Ghr,Ohr,Vhr,d7,wNe,Qd,c7,Fbe,d8,Xhr,Tbe,zhr,ANe,Zo,c8,Whr,Hd,Qhr,dQ,Hhr,Uhr,cQ,Jhr,Yhr,Khr,f8,Zhr,Mbe,epr,opr,rpr,xt,m8,tpr,Ebe,apr,npr,Ud,spr,Cbe,lpr,ipr,fQ,dpr,cpr,fpr,f7,mpr,yr,g8,gpr,wbe,hpr,ppr,en,upr,Abe,_pr,bpr,ybe,vpr,Fpr,Lbe,Tpr,Mpr,Epr,Te,m7,xbe,Cpr,wpr,mQ,Apr,ypr,Lpr,g7,$be,xpr,$pr,gQ,kpr,Spr,Rpr,h7,kbe,Ppr,Bpr,hQ,Ipr,qpr,Npr,p7,Sbe,jpr,Dpr,pQ,Gpr,Opr,Vpr,u7,Rbe,Xpr,zpr,uQ,Wpr,Qpr,Hpr,_7,Pbe,Upr,Jpr,_Q,Ypr,Kpr,Zpr,b7,Bbe,eur,our,bQ,rur,tur,aur,v7,Ibe,nur,sur,vQ,lur,iur,dur,F7,qbe,cur,fur,FQ,mur,gur,hur,T7,Nbe,pur,uur,TQ,_ur,bur,vur,M7,jbe,Fur,Tur,MQ,Mur,Eur,Cur,E7,Dbe,wur,Aur,EQ,yur,Lur,xur,C7,yNe,Jd,w7,Gbe,h8,$ur,Obe,kur,LNe,er,p8,Sur,Yd,Rur,CQ,Pur,Bur,wQ,Iur,qur,Nur,u8,jur,Vbe,Dur,Gur,Our,$t,_8,Vur,Xbe,Xur,zur,Kd,Wur,zbe,Qur,Hur,AQ,Uur,Jur,Yur,A7,Kur,Lr,b8,Zur,Wbe,e_r,o_r,on,r_r,Qbe,t_r,a_r,Hbe,n_r,s_r,Ube,l_r,i_r,d_r,rn,y7,Jbe,c_r,f_r,yQ,m_r,g_r,h_r,L7,Ybe,p_r,u_r,LQ,__r,b_r,v_r,x7,Kbe,F_r,T_r,xQ,M_r,E_r,C_r,$7,Zbe,w_r,A_r,$Q,y_r,L_r,x_r,k7,xNe,Zd,S7,e2e,v8,$_r,o2e,k_r,$Ne,or,F8,S_r,ec,R_r,kQ,P_r,B_r,SQ,I_r,q_r,N_r,T8,j_r,r2e,D_r,G_r,O_r,kt,M8,V_r,t2e,X_r,z_r,oc,W_r,a2e,Q_r,H_r,RQ,U_r,J_r,Y_r,R7,K_r,xr,E8,Z_r,n2e,e0r,o0r,tn,r0r,s2e,t0r,a0r,l2e,n0r,s0r,i2e,l0r,i0r,d0r,ie,P7,d2e,c0r,f0r,PQ,m0r,g0r,h0r,B7,c2e,p0r,u0r,BQ,_0r,b0r,v0r,I7,f2e,F0r,T0r,IQ,M0r,E0r,C0r,q7,m2e,w0r,A0r,qQ,y0r,L0r,x0r,N7,g2e,$0r,k0r,NQ,S0r,R0r,P0r,j7,h2e,B0r,I0r,jQ,q0r,N0r,j0r,D7,p2e,D0r,G0r,DQ,O0r,V0r,X0r,G7,u2e,z0r,W0r,GQ,Q0r,H0r,U0r,O7,_2e,J0r,Y0r,OQ,K0r,Z0r,e1r,V7,b2e,o1r,r1r,VQ,t1r,a1r,n1r,X7,v2e,s1r,l1r,XQ,i1r,d1r,c1r,z7,F2e,f1r,m1r,zQ,g1r,h1r,p1r,W7,T2e,u1r,_1r,WQ,b1r,v1r,F1r,Q7,M2e,T1r,M1r,QQ,E1r,C1r,w1r,H7,E2e,A1r,y1r,HQ,L1r,x1r,$1r,U7,C2e,k1r,S1r,UQ,R1r,P1r,B1r,J7,w2e,I1r,q1r,JQ,N1r,j1r,D1r,Y7,A2e,G1r,O1r,YQ,V1r,X1r,z1r,K7,y2e,W1r,Q1r,KQ,H1r,U1r,J1r,Z7,L2e,Y1r,K1r,ZQ,Z1r,ebr,obr,eM,kNe,rc,oM,x2e,C8,rbr,$2e,tbr,SNe,rr,w8,abr,tc,nbr,eH,sbr,lbr,oH,ibr,dbr,cbr,A8,fbr,k2e,mbr,gbr,hbr,St,y8,pbr,S2e,ubr,_br,ac,bbr,R2e,vbr,Fbr,rH,Tbr,Mbr,Ebr,rM,Cbr,$r,L8,wbr,P2e,Abr,ybr,an,Lbr,B2e,xbr,$br,I2e,kbr,Sbr,q2e,Rbr,Pbr,Bbr,ye,tM,N2e,Ibr,qbr,tH,Nbr,jbr,Dbr,aM,j2e,Gbr,Obr,aH,Vbr,Xbr,zbr,nM,D2e,Wbr,Qbr,nH,Hbr,Ubr,Jbr,sM,G2e,Ybr,Kbr,sH,Zbr,e2r,o2r,lM,O2e,r2r,t2r,lH,a2r,n2r,s2r,iM,V2e,l2r,i2r,iH,d2r,c2r,f2r,dM,X2e,m2r,g2r,dH,h2r,p2r,u2r,cM,z2e,_2r,b2r,cH,v2r,F2r,T2r,fM,W2e,M2r,E2r,fH,C2r,w2r,A2r,mM,Q2e,y2r,L2r,mH,x2r,$2r,k2r,gM,RNe,nc,hM,H2e,x8,S2r,U2e,R2r,PNe,tr,$8,P2r,sc,B2r,gH,I2r,q2r,hH,N2r,j2r,D2r,k8,G2r,J2e,O2r,V2r,X2r,Rt,S8,z2r,Y2e,W2r,Q2r,lc,H2r,K2e,U2r,J2r,pH,Y2r,K2r,Z2r,pM,evr,kr,R8,ovr,Z2e,rvr,tvr,nn,avr,eve,nvr,svr,ove,lvr,ivr,rve,dvr,cvr,fvr,ee,uM,tve,mvr,gvr,uH,hvr,pvr,uvr,_M,ave,_vr,bvr,_H,vvr,Fvr,Tvr,bM,nve,Mvr,Evr,bH,Cvr,wvr,Avr,vM,sve,yvr,Lvr,vH,xvr,$vr,kvr,FM,lve,Svr,Rvr,FH,Pvr,Bvr,Ivr,TM,ive,qvr,Nvr,TH,jvr,Dvr,Gvr,MM,dve,Ovr,Vvr,MH,Xvr,zvr,Wvr,EM,cve,Qvr,Hvr,EH,Uvr,Jvr,Yvr,CM,fve,Kvr,Zvr,CH,eFr,oFr,rFr,wM,mve,tFr,aFr,wH,nFr,sFr,lFr,AM,gve,iFr,dFr,AH,cFr,fFr,mFr,yM,hve,gFr,hFr,yH,pFr,uFr,_Fr,LM,pve,bFr,vFr,LH,FFr,TFr,MFr,xM,uve,EFr,CFr,xH,wFr,AFr,yFr,$M,_ve,LFr,xFr,$H,$Fr,kFr,SFr,kM,bve,RFr,PFr,kH,BFr,IFr,qFr,SM,vve,NFr,jFr,SH,DFr,GFr,OFr,RM,Fve,VFr,XFr,RH,zFr,WFr,QFr,PM,Tve,HFr,UFr,PH,JFr,YFr,KFr,BM,Mve,ZFr,e6r,BH,o6r,r6r,t6r,IM,Eve,a6r,n6r,IH,s6r,l6r,i6r,qM,Cve,d6r,c6r,qH,f6r,m6r,g6r,NM,wve,h6r,p6r,NH,u6r,_6r,b6r,jM,Ave,v6r,F6r,jH,T6r,M6r,E6r,DM,yve,C6r,w6r,DH,A6r,y6r,L6r,GM,Lve,x6r,$6r,GH,k6r,S6r,R6r,OM,BNe,ic,VM,xve,P8,P6r,$ve,B6r,INe,ar,B8,I6r,dc,q6r,OH,N6r,j6r,VH,D6r,G6r,O6r,I8,V6r,kve,X6r,z6r,W6r,Pt,q8,Q6r,Sve,H6r,U6r,cc,J6r,Rve,Y6r,K6r,XH,Z6r,eTr,oTr,XM,rTr,Sr,N8,tTr,Pve,aTr,nTr,sn,sTr,Bve,lTr,iTr,Ive,dTr,cTr,qve,fTr,mTr,gTr,pe,zM,Nve,hTr,pTr,zH,uTr,_Tr,bTr,WM,jve,vTr,FTr,WH,TTr,MTr,ETr,QM,Dve,CTr,wTr,QH,ATr,yTr,LTr,HM,Gve,xTr,$Tr,HH,kTr,STr,RTr,UM,Ove,PTr,BTr,UH,ITr,qTr,NTr,JM,Vve,jTr,DTr,JH,GTr,OTr,VTr,YM,Xve,XTr,zTr,YH,WTr,QTr,HTr,KM,zve,UTr,JTr,KH,YTr,KTr,ZTr,ZM,Wve,e7r,o7r,ZH,r7r,t7r,a7r,e4,Qve,n7r,s7r,eU,l7r,i7r,d7r,o4,Hve,c7r,f7r,oU,m7r,g7r,h7r,r4,Uve,p7r,u7r,rU,_7r,b7r,v7r,t4,Jve,F7r,T7r,tU,M7r,E7r,C7r,a4,Yve,w7r,A7r,aU,y7r,L7r,x7r,n4,Kve,$7r,k7r,nU,S7r,R7r,P7r,s4,Zve,B7r,I7r,sU,q7r,N7r,j7r,l4,eFe,D7r,G7r,lU,O7r,V7r,X7r,i4,qNe,fc,d4,oFe,j8,z7r,rFe,W7r,NNe,nr,D8,Q7r,mc,H7r,iU,U7r,J7r,dU,Y7r,K7r,Z7r,G8,eMr,tFe,oMr,rMr,tMr,Bt,O8,aMr,aFe,nMr,sMr,gc,lMr,nFe,iMr,dMr,cU,cMr,fMr,mMr,c4,gMr,Rr,V8,hMr,sFe,pMr,uMr,ln,_Mr,lFe,bMr,vMr,iFe,FMr,TMr,dFe,MMr,EMr,CMr,X8,f4,cFe,wMr,AMr,fU,yMr,LMr,xMr,m4,fFe,$Mr,kMr,mU,SMr,RMr,PMr,g4,jNe,hc,h4,mFe,z8,BMr,gFe,IMr,DNe,sr,W8,qMr,pc,NMr,gU,jMr,DMr,hU,GMr,OMr,VMr,Q8,XMr,hFe,zMr,WMr,QMr,It,H8,HMr,pFe,UMr,JMr,uc,YMr,uFe,KMr,ZMr,pU,e4r,o4r,r4r,p4,t4r,Pr,U8,a4r,_Fe,n4r,s4r,dn,l4r,bFe,i4r,d4r,vFe,c4r,f4r,FFe,m4r,g4r,h4r,TFe,u4,MFe,p4r,u4r,uU,_4r,b4r,v4r,_4,GNe,_c,b4,EFe,J8,F4r,CFe,T4r,ONe,lr,Y8,M4r,bc,E4r,_U,C4r,w4r,bU,A4r,y4r,L4r,K8,x4r,wFe,$4r,k4r,S4r,qt,Z8,R4r,AFe,P4r,B4r,vc,I4r,yFe,q4r,N4r,vU,j4r,D4r,G4r,v4,O4r,Br,e9,V4r,LFe,X4r,z4r,cn,W4r,xFe,Q4r,H4r,$Fe,U4r,J4r,kFe,Y4r,K4r,Z4r,de,F4,SFe,eEr,oEr,FU,rEr,tEr,aEr,T4,RFe,nEr,sEr,TU,lEr,iEr,dEr,M4,PFe,cEr,fEr,MU,mEr,gEr,hEr,E4,BFe,pEr,uEr,EU,_Er,bEr,vEr,C4,IFe,FEr,TEr,CU,MEr,EEr,CEr,w4,qFe,wEr,AEr,wU,yEr,LEr,xEr,A4,NFe,$Er,kEr,AU,SEr,REr,PEr,y4,jFe,BEr,IEr,yU,qEr,NEr,jEr,L4,DFe,DEr,GEr,LU,OEr,VEr,XEr,x4,GFe,zEr,WEr,xU,QEr,HEr,UEr,$4,OFe,JEr,YEr,$U,KEr,ZEr,eCr,k4,VFe,oCr,rCr,kU,tCr,aCr,nCr,S4,XFe,sCr,lCr,SU,iCr,dCr,cCr,R4,zFe,fCr,mCr,RU,gCr,hCr,pCr,P4,WFe,uCr,_Cr,PU,bCr,vCr,FCr,B4,QFe,TCr,MCr,BU,ECr,CCr,wCr,I4,HFe,ACr,yCr,IU,LCr,xCr,$Cr,q4,UFe,kCr,SCr,qU,RCr,PCr,BCr,N4,JFe,ICr,qCr,NU,NCr,jCr,DCr,j4,YFe,GCr,OCr,jU,VCr,XCr,zCr,D4,VNe,Fc,G4,KFe,o9,WCr,ZFe,QCr,XNe,ir,r9,HCr,Tc,UCr,DU,JCr,YCr,GU,KCr,ZCr,e5r,t9,o5r,e6e,r5r,t5r,a5r,Nt,a9,n5r,o6e,s5r,l5r,Mc,i5r,r6e,d5r,c5r,OU,f5r,m5r,g5r,O4,h5r,Ir,n9,p5r,t6e,u5r,_5r,fn,b5r,a6e,v5r,F5r,n6e,T5r,M5r,s6e,E5r,C5r,w5r,ce,V4,l6e,A5r,y5r,VU,L5r,x5r,$5r,X4,i6e,k5r,S5r,XU,R5r,P5r,B5r,z4,d6e,I5r,q5r,zU,N5r,j5r,D5r,W4,c6e,G5r,O5r,WU,V5r,X5r,z5r,Q4,f6e,W5r,Q5r,QU,H5r,U5r,J5r,H4,m6e,Y5r,K5r,HU,Z5r,e3r,o3r,U4,g6e,r3r,t3r,UU,a3r,n3r,s3r,J4,h6e,l3r,i3r,JU,d3r,c3r,f3r,Y4,p6e,m3r,g3r,YU,h3r,p3r,u3r,K4,u6e,_3r,b3r,KU,v3r,F3r,T3r,Z4,_6e,M3r,E3r,ZU,C3r,w3r,A3r,eE,b6e,y3r,L3r,eJ,x3r,$3r,k3r,oE,v6e,S3r,R3r,oJ,P3r,B3r,I3r,rE,F6e,q3r,N3r,rJ,j3r,D3r,G3r,tE,T6e,O3r,V3r,tJ,X3r,z3r,W3r,aE,M6e,Q3r,H3r,aJ,U3r,J3r,Y3r,nE,E6e,K3r,Z3r,nJ,ewr,owr,rwr,sE,C6e,twr,awr,sJ,nwr,swr,lwr,lE,w6e,iwr,dwr,lJ,cwr,fwr,mwr,iE,A6e,gwr,hwr,iJ,pwr,uwr,_wr,dE,zNe,Ec,cE,y6e,s9,bwr,L6e,vwr,WNe,dr,l9,Fwr,Cc,Twr,dJ,Mwr,Ewr,cJ,Cwr,wwr,Awr,i9,ywr,x6e,Lwr,xwr,$wr,jt,d9,kwr,$6e,Swr,Rwr,wc,Pwr,k6e,Bwr,Iwr,fJ,qwr,Nwr,jwr,fE,Dwr,qr,c9,Gwr,S6e,Owr,Vwr,mn,Xwr,R6e,zwr,Wwr,P6e,Qwr,Hwr,B6e,Uwr,Jwr,Ywr,I6e,mE,q6e,Kwr,Zwr,mJ,eAr,oAr,rAr,gE,QNe,Ac,hE,N6e,f9,tAr,j6e,aAr,HNe,cr,m9,nAr,yc,sAr,gJ,lAr,iAr,hJ,dAr,cAr,fAr,g9,mAr,D6e,gAr,hAr,pAr,Dt,h9,uAr,G6e,_Ar,bAr,Lc,vAr,O6e,FAr,TAr,pJ,MAr,EAr,CAr,pE,wAr,Nr,p9,AAr,V6e,yAr,LAr,gn,xAr,X6e,$Ar,kAr,z6e,SAr,RAr,W6e,PAr,BAr,IAr,Q6e,uE,H6e,qAr,NAr,uJ,jAr,DAr,GAr,_E,UNe,xc,bE,U6e,u9,OAr,J6e,VAr,JNe,fr,_9,XAr,$c,zAr,_J,WAr,QAr,bJ,HAr,UAr,JAr,b9,YAr,Y6e,KAr,ZAr,eyr,Gt,v9,oyr,K6e,ryr,tyr,kc,ayr,Z6e,nyr,syr,vJ,lyr,iyr,dyr,vE,cyr,jr,F9,fyr,eTe,myr,gyr,hn,hyr,oTe,pyr,uyr,rTe,_yr,byr,tTe,vyr,Fyr,Tyr,te,FE,aTe,Myr,Eyr,FJ,Cyr,wyr,Ayr,TE,nTe,yyr,Lyr,TJ,xyr,$yr,kyr,ME,sTe,Syr,Ryr,MJ,Pyr,Byr,Iyr,EE,lTe,qyr,Nyr,EJ,jyr,Dyr,Gyr,CE,iTe,Oyr,Vyr,CJ,Xyr,zyr,Wyr,wE,dTe,Qyr,Hyr,wJ,Uyr,Jyr,Yyr,AE,cTe,Kyr,Zyr,AJ,eLr,oLr,rLr,yE,fTe,tLr,aLr,yJ,nLr,sLr,lLr,LE,mTe,iLr,dLr,LJ,cLr,fLr,mLr,xE,gTe,gLr,hLr,xJ,pLr,uLr,_Lr,$E,hTe,bLr,vLr,$J,FLr,TLr,MLr,kE,pTe,ELr,CLr,kJ,wLr,ALr,yLr,SE,uTe,LLr,xLr,SJ,$Lr,kLr,SLr,RE,_Te,RLr,PLr,RJ,BLr,ILr,qLr,PE,bTe,NLr,jLr,PJ,DLr,GLr,OLr,BE,vTe,VLr,XLr,BJ,zLr,WLr,QLr,IE,FTe,HLr,ULr,IJ,JLr,YLr,KLr,qE,TTe,ZLr,e8r,qJ,o8r,r8r,t8r,NE,MTe,a8r,n8r,NJ,s8r,l8r,i8r,jE,ETe,d8r,c8r,jJ,f8r,m8r,g8r,DE,CTe,h8r,p8r,DJ,u8r,_8r,b8r,GE,wTe,v8r,F8r,GJ,T8r,M8r,E8r,OE,ATe,C8r,w8r,OJ,A8r,y8r,L8r,VE,yTe,x8r,$8r,VJ,k8r,S8r,R8r,XE,LTe,P8r,B8r,XJ,I8r,q8r,N8r,zE,YNe,Sc,WE,xTe,T9,j8r,$Te,D8r,KNe,mr,M9,G8r,Rc,O8r,zJ,V8r,X8r,WJ,z8r,W8r,Q8r,E9,H8r,kTe,U8r,J8r,Y8r,Ot,C9,K8r,STe,Z8r,e9r,Pc,o9r,RTe,r9r,t9r,QJ,a9r,n9r,s9r,QE,l9r,Dr,w9,i9r,PTe,d9r,c9r,pn,f9r,BTe,m9r,g9r,ITe,h9r,p9r,qTe,u9r,_9r,b9r,Re,HE,NTe,v9r,F9r,HJ,T9r,M9r,E9r,UE,jTe,C9r,w9r,UJ,A9r,y9r,L9r,JE,DTe,x9r,$9r,JJ,k9r,S9r,R9r,YE,GTe,P9r,B9r,YJ,I9r,q9r,N9r,KE,OTe,j9r,D9r,KJ,G9r,O9r,V9r,ZE,VTe,X9r,z9r,ZJ,W9r,Q9r,H9r,eC,XTe,U9r,J9r,eY,Y9r,K9r,Z9r,oC,zTe,exr,oxr,oY,rxr,txr,axr,rC,WTe,nxr,sxr,rY,lxr,ixr,dxr,tC,ZNe,Bc,aC,QTe,A9,cxr,HTe,fxr,eje,gr,y9,mxr,Ic,gxr,tY,hxr,pxr,aY,uxr,_xr,bxr,L9,vxr,UTe,Fxr,Txr,Mxr,Vt,x9,Exr,JTe,Cxr,wxr,qc,Axr,YTe,yxr,Lxr,nY,xxr,$xr,kxr,nC,Sxr,Gr,$9,Rxr,KTe,Pxr,Bxr,un,Ixr,ZTe,qxr,Nxr,e7e,jxr,Dxr,o7e,Gxr,Oxr,Vxr,Me,sC,r7e,Xxr,zxr,sY,Wxr,Qxr,Hxr,lC,t7e,Uxr,Jxr,lY,Yxr,Kxr,Zxr,iC,a7e,e$r,o$r,iY,r$r,t$r,a$r,dC,n7e,n$r,s$r,dY,l$r,i$r,d$r,cC,s7e,c$r,f$r,cY,m$r,g$r,h$r,fC,l7e,p$r,u$r,fY,_$r,b$r,v$r,mC,i7e,F$r,T$r,mY,M$r,E$r,C$r,gC,d7e,w$r,A$r,gY,y$r,L$r,x$r,hC,c7e,$$r,k$r,hY,S$r,R$r,P$r,pC,f7e,B$r,I$r,pY,q$r,N$r,j$r,uC,m7e,D$r,G$r,uY,O$r,V$r,X$r,_C,g7e,z$r,W$r,_Y,Q$r,H$r,U$r,bC,oje,Nc,vC,h7e,k9,J$r,p7e,Y$r,rje,hr,S9,K$r,jc,Z$r,bY,ekr,okr,vY,rkr,tkr,akr,R9,nkr,u7e,skr,lkr,ikr,Xt,P9,dkr,_7e,ckr,fkr,Dc,mkr,b7e,gkr,hkr,FY,pkr,ukr,_kr,FC,bkr,Or,B9,vkr,v7e,Fkr,Tkr,_n,Mkr,F7e,Ekr,Ckr,T7e,wkr,Akr,M7e,ykr,Lkr,xkr,Le,TC,E7e,$kr,kkr,TY,Skr,Rkr,Pkr,MC,C7e,Bkr,Ikr,MY,qkr,Nkr,jkr,EC,w7e,Dkr,Gkr,EY,Okr,Vkr,Xkr,CC,A7e,zkr,Wkr,CY,Qkr,Hkr,Ukr,wC,y7e,Jkr,Ykr,wY,Kkr,Zkr,eSr,AC,L7e,oSr,rSr,AY,tSr,aSr,nSr,yC,x7e,sSr,lSr,yY,iSr,dSr,cSr,LC,$7e,fSr,mSr,LY,gSr,hSr,pSr,xC,k7e,uSr,_Sr,xY,bSr,vSr,FSr,$C,S7e,TSr,MSr,$Y,ESr,CSr,wSr,kC,tje,Gc,SC,R7e,I9,ASr,P7e,ySr,aje,pr,q9,LSr,Oc,xSr,kY,$Sr,kSr,SY,SSr,RSr,PSr,N9,BSr,B7e,ISr,qSr,NSr,zt,j9,jSr,I7e,DSr,GSr,Vc,OSr,q7e,VSr,XSr,RY,zSr,WSr,QSr,RC,HSr,Vr,D9,USr,N7e,JSr,YSr,bn,KSr,j7e,ZSr,eRr,D7e,oRr,rRr,G7e,tRr,aRr,nRr,Pe,PC,O7e,sRr,lRr,PY,iRr,dRr,cRr,BC,V7e,fRr,mRr,BY,gRr,hRr,pRr,IC,X7e,uRr,_Rr,IY,bRr,vRr,FRr,qC,z7e,TRr,MRr,qY,ERr,CRr,wRr,NC,W7e,ARr,yRr,NY,LRr,xRr,$Rr,jC,Q7e,kRr,SRr,jY,RRr,PRr,BRr,DC,H7e,IRr,qRr,DY,NRr,jRr,DRr,GC,U7e,GRr,ORr,GY,VRr,XRr,zRr,OC,J7e,WRr,QRr,OY,HRr,URr,JRr,VC,nje,Xc,XC,Y7e,G9,YRr,K7e,KRr,sje,ur,O9,ZRr,zc,ePr,VY,oPr,rPr,XY,tPr,aPr,nPr,V9,sPr,Z7e,lPr,iPr,dPr,Wt,X9,cPr,eMe,fPr,mPr,Wc,gPr,oMe,hPr,pPr,zY,uPr,_Pr,bPr,zC,vPr,Xr,z9,FPr,rMe,TPr,MPr,vn,EPr,tMe,CPr,wPr,aMe,APr,yPr,nMe,LPr,xPr,$Pr,xe,WC,sMe,kPr,SPr,WY,RPr,PPr,BPr,QC,lMe,IPr,qPr,QY,NPr,jPr,DPr,HC,iMe,GPr,OPr,HY,VPr,XPr,zPr,UC,dMe,WPr,QPr,UY,HPr,UPr,JPr,JC,cMe,YPr,KPr,JY,ZPr,eBr,oBr,YC,fMe,rBr,tBr,YY,aBr,nBr,sBr,KC,mMe,lBr,iBr,KY,dBr,cBr,fBr,ZC,gMe,mBr,gBr,ZY,hBr,pBr,uBr,e5,hMe,_Br,bBr,eK,vBr,FBr,TBr,o5,pMe,MBr,EBr,oK,CBr,wBr,ABr,r5,lje,Qc,t5,uMe,W9,yBr,_Me,LBr,ije,_r,Q9,xBr,Hc,$Br,rK,kBr,SBr,tK,RBr,PBr,BBr,H9,IBr,bMe,qBr,NBr,jBr,Qt,U9,DBr,vMe,GBr,OBr,Uc,VBr,FMe,XBr,zBr,aK,WBr,QBr,HBr,a5,UBr,zr,J9,JBr,TMe,YBr,KBr,Fn,ZBr,MMe,eIr,oIr,EMe,rIr,tIr,CMe,aIr,nIr,sIr,$e,n5,wMe,lIr,iIr,nK,dIr,cIr,fIr,s5,AMe,mIr,gIr,sK,hIr,pIr,uIr,l5,yMe,_Ir,bIr,lK,vIr,FIr,TIr,i5,LMe,MIr,EIr,iK,CIr,wIr,AIr,d5,xMe,yIr,LIr,dK,xIr,$Ir,kIr,c5,$Me,SIr,RIr,cK,PIr,BIr,IIr,f5,kMe,qIr,NIr,fK,jIr,DIr,GIr,m5,SMe,OIr,VIr,mK,XIr,zIr,WIr,g5,RMe,QIr,HIr,gK,UIr,JIr,YIr,h5,PMe,KIr,ZIr,hK,eqr,oqr,rqr,p5,dje,Jc,u5,BMe,Y9,tqr,IMe,aqr,cje,br,K9,nqr,Yc,sqr,pK,lqr,iqr,uK,dqr,cqr,fqr,Z9,mqr,qMe,gqr,hqr,pqr,Ht,ex,uqr,NMe,_qr,bqr,Kc,vqr,jMe,Fqr,Tqr,_K,Mqr,Eqr,Cqr,_5,wqr,Wr,ox,Aqr,DMe,yqr,Lqr,Tn,xqr,GMe,$qr,kqr,OMe,Sqr,Rqr,VMe,Pqr,Bqr,Iqr,De,b5,XMe,qqr,Nqr,bK,jqr,Dqr,Gqr,v5,zMe,Oqr,Vqr,vK,Xqr,zqr,Wqr,F5,WMe,Qqr,Hqr,FK,Uqr,Jqr,Yqr,T5,QMe,Kqr,Zqr,TK,eNr,oNr,rNr,M5,HMe,tNr,aNr,MK,nNr,sNr,lNr,E5,UMe,iNr,dNr,EK,cNr,fNr,mNr,C5,JMe,gNr,hNr,CK,pNr,uNr,_Nr,w5,YMe,bNr,vNr,wK,FNr,TNr,MNr,A5,fje,Zc,y5,KMe,rx,ENr,ZMe,CNr,mje,vr,tx,wNr,ef,ANr,AK,yNr,LNr,yK,xNr,$Nr,kNr,ax,SNr,e4e,RNr,PNr,BNr,Ut,nx,INr,o4e,qNr,NNr,of,jNr,r4e,DNr,GNr,LK,ONr,VNr,XNr,L5,zNr,Qr,sx,WNr,t4e,QNr,HNr,Mn,UNr,a4e,JNr,YNr,n4e,KNr,ZNr,s4e,ejr,ojr,rjr,Ge,x5,l4e,tjr,ajr,xK,njr,sjr,ljr,$5,i4e,ijr,djr,$K,cjr,fjr,mjr,k5,d4e,gjr,hjr,kK,pjr,ujr,_jr,S5,c4e,bjr,vjr,SK,Fjr,Tjr,Mjr,R5,f4e,Ejr,Cjr,RK,wjr,Ajr,yjr,P5,m4e,Ljr,xjr,PK,$jr,kjr,Sjr,B5,g4e,Rjr,Pjr,BK,Bjr,Ijr,qjr,I5,h4e,Njr,jjr,IK,Djr,Gjr,Ojr,q5,gje,rf,N5,p4e,lx,Vjr,u4e,Xjr,hje,Fr,ix,zjr,tf,Wjr,qK,Qjr,Hjr,NK,Ujr,Jjr,Yjr,dx,Kjr,_4e,Zjr,eDr,oDr,Jt,cx,rDr,b4e,tDr,aDr,af,nDr,v4e,sDr,lDr,jK,iDr,dDr,cDr,j5,fDr,Hr,fx,mDr,F4e,gDr,hDr,En,pDr,T4e,uDr,_Dr,M4e,bDr,vDr,E4e,FDr,TDr,MDr,C4e,D5,w4e,EDr,CDr,DK,wDr,ADr,yDr,G5,pje,nf,O5,A4e,mx,LDr,y4e,xDr,uje,Tr,gx,$Dr,sf,kDr,GK,SDr,RDr,OK,PDr,BDr,IDr,hx,qDr,L4e,NDr,jDr,DDr,Yt,px,GDr,x4e,ODr,VDr,lf,XDr,$4e,zDr,WDr,VK,QDr,HDr,UDr,V5,JDr,Ur,ux,YDr,k4e,KDr,ZDr,Cn,eGr,S4e,oGr,rGr,R4e,tGr,aGr,P4e,nGr,sGr,lGr,_x,X5,B4e,iGr,dGr,XK,cGr,fGr,mGr,z5,I4e,gGr,hGr,zK,pGr,uGr,_Gr,W5,_je,df,Q5,q4e,bx,bGr,N4e,vGr,bje,Mr,vx,FGr,cf,TGr,WK,MGr,EGr,QK,CGr,wGr,AGr,Fx,yGr,j4e,LGr,xGr,$Gr,Kt,Tx,kGr,D4e,SGr,RGr,ff,PGr,G4e,BGr,IGr,HK,qGr,NGr,jGr,H5,DGr,Jr,Mx,GGr,O4e,OGr,VGr,wn,XGr,V4e,zGr,WGr,X4e,QGr,HGr,z4e,UGr,JGr,YGr,W4e,U5,Q4e,KGr,ZGr,UK,eOr,oOr,rOr,J5,vje;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),bA=new oe({}),vA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new tOr({props:{warning:!0,$$slots:{default:[F9t]},$$scope:{ctx:L}}}),FA=new oe({}),TA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L578"}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L601"}}),Tg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),wA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L724"}}),AA=new oe({}),yA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L389"}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17060/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L403"}}),oh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),kA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L599"}}),SA=new oe({}),RA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),kh=new tOr({props:{$$slots:{default:[E9t]},$$scope:{ctx:L}}}),Sh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),qA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),NA=new oe({}),jA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L88"}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L102"}}),Kh=new tOr({props:{$$slots:{default:[w9t]},$$scope:{ctx:L}}}),Zh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),VA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L255"}}),XA=new oe({}),zA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L731"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),rp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Uu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),UA=new oe({}),JA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L738"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Yu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),G_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),ey=new oe({}),oy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L753"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),V_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),ny=new oe({}),sy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L760"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),cy=new oe({}),fy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L767"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),S1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),py=new oe({}),uy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L776"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),P1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L810"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),i2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L817"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),c2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L803"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),ov=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L785"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),tv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L792"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L826"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L865"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L872"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L895"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L879"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L886"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),ML=new oe({}),EL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L904"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),yL=new oe({}),LL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L911"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L858"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),NL=new oe({}),jL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L833"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),VL=new oe({}),XL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L840"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),HL=new oe({}),UL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L849"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),D6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),V6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),ZL=new oe({}),e8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),z6=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),a8=new oe({}),n8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),d8=new oe({}),c8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),h8=new oe({}),p8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),v8=new oe({}),F8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),C8=new oe({}),w8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),x8=new oe({}),$8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),P8=new oe({}),B8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),z8=new oe({}),W8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),J8=new oe({}),Y8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),a9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),d9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),f9=new oe({}),m9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),u9=new oe({}),_9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),v9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),T9=new oe({}),M9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),C9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),A9=new oe({}),y9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),x9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),k9=new oe({}),S9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),P9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),I9=new oe({}),q9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),j9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),G9=new oe({}),O9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),X9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),W9=new oe({}),Q9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),U9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),Y9=new oe({}),K9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),rx=new oe({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),lx=new oe({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),mx=new oe({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),hA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),pA=o("AutoConfig"),Ln=o(", "),xn=a("a"),uA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),_A=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),I$=o("will create a model that is an instance of "),_i=a("a"),q$=o("BertModel"),N$=o("."),Eo=l(),wa=a("p"),j$=o("There is one class of "),bf=a("code"),D$=o("AutoModel"),yGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uqe=l(),bi=a("h2"),vf=a("a"),Oee=a("span"),F(bA.$$.fragment),LGe=l(),Vee=a("span"),xGe=o("Extending the Auto Classes"),_qe=l(),kn=a("p"),$Ge=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xee=a("code"),kGe=o("NewModel"),SGe=o(", make sure you have a "),zee=a("code"),RGe=o("NewModelConfig"),PGe=o(` then you can add those to the auto
classes like this:`),bqe=l(),F(vA.$$.fragment),vqe=l(),G$=a("p"),BGe=o("You will then be able to use the auto classes like you would usually do!"),Fqe=l(),F(Ff.$$.fragment),Tqe=l(),vi=a("h2"),Tf=a("a"),Wee=a("span"),F(FA.$$.fragment),IGe=l(),Qee=a("span"),qGe=o("AutoConfig"),Mqe=l(),Co=a("div"),F(TA.$$.fragment),NGe=l(),MA=a("p"),jGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O$=a("a"),DGe=o("from_pretrained()"),GGe=o(" class method."),OGe=l(),EA=a("p"),VGe=o("This class cannot be instantiated directly using "),Hee=a("code"),XGe=o("__init__()"),zGe=o(" (throws an error)."),WGe=l(),Er=a("div"),F(CA.$$.fragment),QGe=l(),Uee=a("p"),HGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),UGe=l(),Fi=a("p"),JGe=o("The configuration class to instantiate is selected based on the "),Jee=a("code"),YGe=o("model_type"),KGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yee=a("code"),ZGe=o("pretrained_model_name_or_path"),eOe=o(":"),oOe=l(),A=a("ul"),Mf=a("li"),Kee=a("strong"),rOe=o("albert"),tOe=o(" \u2014 "),V$=a("a"),aOe=o("AlbertConfig"),nOe=o(" (ALBERT model)"),sOe=l(),Ef=a("li"),Zee=a("strong"),lOe=o("bart"),iOe=o(" \u2014 "),X$=a("a"),dOe=o("BartConfig"),cOe=o(" (BART model)"),fOe=l(),Cf=a("li"),eoe=a("strong"),mOe=o("beit"),gOe=o(" \u2014 "),z$=a("a"),hOe=o("BeitConfig"),pOe=o(" (BEiT model)"),uOe=l(),wf=a("li"),ooe=a("strong"),_Oe=o("bert"),bOe=o(" \u2014 "),W$=a("a"),vOe=o("BertConfig"),FOe=o(" (BERT model)"),TOe=l(),Af=a("li"),roe=a("strong"),MOe=o("bert-generation"),EOe=o(" \u2014 "),Q$=a("a"),COe=o("BertGenerationConfig"),wOe=o(" (Bert Generation model)"),AOe=l(),yf=a("li"),toe=a("strong"),yOe=o("big_bird"),LOe=o(" \u2014 "),H$=a("a"),xOe=o("BigBirdConfig"),$Oe=o(" (BigBird model)"),kOe=l(),Lf=a("li"),aoe=a("strong"),SOe=o("bigbird_pegasus"),ROe=o(" \u2014 "),U$=a("a"),POe=o("BigBirdPegasusConfig"),BOe=o(" (BigBirdPegasus model)"),IOe=l(),xf=a("li"),noe=a("strong"),qOe=o("blenderbot"),NOe=o(" \u2014 "),J$=a("a"),jOe=o("BlenderbotConfig"),DOe=o(" (Blenderbot model)"),GOe=l(),$f=a("li"),soe=a("strong"),OOe=o("blenderbot-small"),VOe=o(" \u2014 "),Y$=a("a"),XOe=o("BlenderbotSmallConfig"),zOe=o(" (BlenderbotSmall model)"),WOe=l(),kf=a("li"),loe=a("strong"),QOe=o("camembert"),HOe=o(" \u2014 "),K$=a("a"),UOe=o("CamembertConfig"),JOe=o(" (CamemBERT model)"),YOe=l(),Sf=a("li"),ioe=a("strong"),KOe=o("canine"),ZOe=o(" \u2014 "),Z$=a("a"),eVe=o("CanineConfig"),oVe=o(" (Canine model)"),rVe=l(),Rf=a("li"),doe=a("strong"),tVe=o("clip"),aVe=o(" \u2014 "),ek=a("a"),nVe=o("CLIPConfig"),sVe=o(" (CLIP model)"),lVe=l(),Pf=a("li"),coe=a("strong"),iVe=o("convbert"),dVe=o(" \u2014 "),ok=a("a"),cVe=o("ConvBertConfig"),fVe=o(" (ConvBERT model)"),mVe=l(),Bf=a("li"),foe=a("strong"),gVe=o("convnext"),hVe=o(" \u2014 "),rk=a("a"),pVe=o("ConvNextConfig"),uVe=o(" (ConvNext model)"),_Ve=l(),If=a("li"),moe=a("strong"),bVe=o("ctrl"),vVe=o(" \u2014 "),tk=a("a"),FVe=o("CTRLConfig"),TVe=o(" (CTRL model)"),MVe=l(),qf=a("li"),goe=a("strong"),EVe=o("data2vec-audio"),CVe=o(" \u2014 "),ak=a("a"),wVe=o("Data2VecAudioConfig"),AVe=o(" (Data2VecAudio model)"),yVe=l(),Nf=a("li"),hoe=a("strong"),LVe=o("data2vec-text"),xVe=o(" \u2014 "),nk=a("a"),$Ve=o("Data2VecTextConfig"),kVe=o(" (Data2VecText model)"),SVe=l(),jf=a("li"),poe=a("strong"),RVe=o("data2vec-vision"),PVe=o(" \u2014 "),sk=a("a"),BVe=o("Data2VecVisionConfig"),IVe=o(" (Data2VecVision model)"),qVe=l(),Df=a("li"),uoe=a("strong"),NVe=o("deberta"),jVe=o(" \u2014 "),lk=a("a"),DVe=o("DebertaConfig"),GVe=o(" (DeBERTa model)"),OVe=l(),Gf=a("li"),_oe=a("strong"),VVe=o("deberta-v2"),XVe=o(" \u2014 "),ik=a("a"),zVe=o("DebertaV2Config"),WVe=o(" (DeBERTa-v2 model)"),QVe=l(),Of=a("li"),boe=a("strong"),HVe=o("decision_transformer"),UVe=o(" \u2014 "),dk=a("a"),JVe=o("DecisionTransformerConfig"),YVe=o(" (Decision Transformer model)"),KVe=l(),Vf=a("li"),voe=a("strong"),ZVe=o("deit"),eXe=o(" \u2014 "),ck=a("a"),oXe=o("DeiTConfig"),rXe=o(" (DeiT model)"),tXe=l(),Xf=a("li"),Foe=a("strong"),aXe=o("detr"),nXe=o(" \u2014 "),fk=a("a"),sXe=o("DetrConfig"),lXe=o(" (DETR model)"),iXe=l(),zf=a("li"),Toe=a("strong"),dXe=o("distilbert"),cXe=o(" \u2014 "),mk=a("a"),fXe=o("DistilBertConfig"),mXe=o(" (DistilBERT model)"),gXe=l(),Wf=a("li"),Moe=a("strong"),hXe=o("dpr"),pXe=o(" \u2014 "),gk=a("a"),uXe=o("DPRConfig"),_Xe=o(" (DPR model)"),bXe=l(),Qf=a("li"),Eoe=a("strong"),vXe=o("dpt"),FXe=o(" \u2014 "),hk=a("a"),TXe=o("DPTConfig"),MXe=o(" (DPT model)"),EXe=l(),Hf=a("li"),Coe=a("strong"),CXe=o("electra"),wXe=o(" \u2014 "),pk=a("a"),AXe=o("ElectraConfig"),yXe=o(" (ELECTRA model)"),LXe=l(),Uf=a("li"),woe=a("strong"),xXe=o("encoder-decoder"),$Xe=o(" \u2014 "),uk=a("a"),kXe=o("EncoderDecoderConfig"),SXe=o(" (Encoder decoder model)"),RXe=l(),Jf=a("li"),Aoe=a("strong"),PXe=o("flaubert"),BXe=o(" \u2014 "),_k=a("a"),IXe=o("FlaubertConfig"),qXe=o(" (FlauBERT model)"),NXe=l(),Yf=a("li"),yoe=a("strong"),jXe=o("flava"),DXe=o(" \u2014 "),bk=a("a"),GXe=o("FlavaConfig"),OXe=o(" (Flava model)"),VXe=l(),Kf=a("li"),Loe=a("strong"),XXe=o("fnet"),zXe=o(" \u2014 "),vk=a("a"),WXe=o("FNetConfig"),QXe=o(" (FNet model)"),HXe=l(),Zf=a("li"),xoe=a("strong"),UXe=o("fsmt"),JXe=o(" \u2014 "),Fk=a("a"),YXe=o("FSMTConfig"),KXe=o(" (FairSeq Machine-Translation model)"),ZXe=l(),em=a("li"),$oe=a("strong"),eze=o("funnel"),oze=o(" \u2014 "),Tk=a("a"),rze=o("FunnelConfig"),tze=o(" (Funnel Transformer model)"),aze=l(),om=a("li"),koe=a("strong"),nze=o("glpn"),sze=o(" \u2014 "),Mk=a("a"),lze=o("GLPNConfig"),ize=o(" (GLPN model)"),dze=l(),rm=a("li"),Soe=a("strong"),cze=o("gpt2"),fze=o(" \u2014 "),Ek=a("a"),mze=o("GPT2Config"),gze=o(" (OpenAI GPT-2 model)"),hze=l(),tm=a("li"),Roe=a("strong"),pze=o("gpt_neo"),uze=o(" \u2014 "),Ck=a("a"),_ze=o("GPTNeoConfig"),bze=o(" (GPT Neo model)"),vze=l(),am=a("li"),Poe=a("strong"),Fze=o("gptj"),Tze=o(" \u2014 "),wk=a("a"),Mze=o("GPTJConfig"),Eze=o(" (GPT-J model)"),Cze=l(),nm=a("li"),Boe=a("strong"),wze=o("hubert"),Aze=o(" \u2014 "),Ak=a("a"),yze=o("HubertConfig"),Lze=o(" (Hubert model)"),xze=l(),sm=a("li"),Ioe=a("strong"),$ze=o("ibert"),kze=o(" \u2014 "),yk=a("a"),Sze=o("IBertConfig"),Rze=o(" (I-BERT model)"),Pze=l(),lm=a("li"),qoe=a("strong"),Bze=o("imagegpt"),Ize=o(" \u2014 "),Lk=a("a"),qze=o("ImageGPTConfig"),Nze=o(" (ImageGPT model)"),jze=l(),im=a("li"),Noe=a("strong"),Dze=o("layoutlm"),Gze=o(" \u2014 "),xk=a("a"),Oze=o("LayoutLMConfig"),Vze=o(" (LayoutLM model)"),Xze=l(),dm=a("li"),joe=a("strong"),zze=o("layoutlmv2"),Wze=o(" \u2014 "),$k=a("a"),Qze=o("LayoutLMv2Config"),Hze=o(" (LayoutLMv2 model)"),Uze=l(),cm=a("li"),Doe=a("strong"),Jze=o("layoutlmv3"),Yze=o(" \u2014 "),kk=a("a"),Kze=o("LayoutLMv3Config"),Zze=o(" (LayoutLMv3 model)"),eWe=l(),fm=a("li"),Goe=a("strong"),oWe=o("led"),rWe=o(" \u2014 "),Sk=a("a"),tWe=o("LEDConfig"),aWe=o(" (LED model)"),nWe=l(),mm=a("li"),Ooe=a("strong"),sWe=o("longformer"),lWe=o(" \u2014 "),Rk=a("a"),iWe=o("LongformerConfig"),dWe=o(" (Longformer model)"),cWe=l(),gm=a("li"),Voe=a("strong"),fWe=o("luke"),mWe=o(" \u2014 "),Pk=a("a"),gWe=o("LukeConfig"),hWe=o(" (LUKE model)"),pWe=l(),hm=a("li"),Xoe=a("strong"),uWe=o("lxmert"),_We=o(" \u2014 "),Bk=a("a"),bWe=o("LxmertConfig"),vWe=o(" (LXMERT model)"),FWe=l(),pm=a("li"),zoe=a("strong"),TWe=o("m2m_100"),MWe=o(" \u2014 "),Ik=a("a"),EWe=o("M2M100Config"),CWe=o(" (M2M100 model)"),wWe=l(),um=a("li"),Woe=a("strong"),AWe=o("marian"),yWe=o(" \u2014 "),qk=a("a"),LWe=o("MarianConfig"),xWe=o(" (Marian model)"),$We=l(),_m=a("li"),Qoe=a("strong"),kWe=o("maskformer"),SWe=o(" \u2014 "),Nk=a("a"),RWe=o("MaskFormerConfig"),PWe=o(" (MaskFormer model)"),BWe=l(),bm=a("li"),Hoe=a("strong"),IWe=o("mbart"),qWe=o(" \u2014 "),jk=a("a"),NWe=o("MBartConfig"),jWe=o(" (mBART model)"),DWe=l(),vm=a("li"),Uoe=a("strong"),GWe=o("megatron-bert"),OWe=o(" \u2014 "),Dk=a("a"),VWe=o("MegatronBertConfig"),XWe=o(" (MegatronBert model)"),zWe=l(),Fm=a("li"),Joe=a("strong"),WWe=o("mobilebert"),QWe=o(" \u2014 "),Gk=a("a"),HWe=o("MobileBertConfig"),UWe=o(" (MobileBERT model)"),JWe=l(),Tm=a("li"),Yoe=a("strong"),YWe=o("mpnet"),KWe=o(" \u2014 "),Ok=a("a"),ZWe=o("MPNetConfig"),eQe=o(" (MPNet model)"),oQe=l(),Mm=a("li"),Koe=a("strong"),rQe=o("mt5"),tQe=o(" \u2014 "),Vk=a("a"),aQe=o("MT5Config"),nQe=o(" (mT5 model)"),sQe=l(),Em=a("li"),Zoe=a("strong"),lQe=o("nystromformer"),iQe=o(" \u2014 "),Xk=a("a"),dQe=o("NystromformerConfig"),cQe=o(" (Nystromformer model)"),fQe=l(),Cm=a("li"),ere=a("strong"),mQe=o("openai-gpt"),gQe=o(" \u2014 "),zk=a("a"),hQe=o("OpenAIGPTConfig"),pQe=o(" (OpenAI GPT model)"),uQe=l(),wm=a("li"),ore=a("strong"),_Qe=o("opt"),bQe=o(" \u2014 "),Wk=a("a"),vQe=o("OPTConfig"),FQe=o(" (OPT model)"),TQe=l(),Am=a("li"),rre=a("strong"),MQe=o("pegasus"),EQe=o(" \u2014 "),Qk=a("a"),CQe=o("PegasusConfig"),wQe=o(" (Pegasus model)"),AQe=l(),ym=a("li"),tre=a("strong"),yQe=o("perceiver"),LQe=o(" \u2014 "),Hk=a("a"),xQe=o("PerceiverConfig"),$Qe=o(" (Perceiver model)"),kQe=l(),Lm=a("li"),are=a("strong"),SQe=o("plbart"),RQe=o(" \u2014 "),Uk=a("a"),PQe=o("PLBartConfig"),BQe=o(" (PLBart model)"),IQe=l(),xm=a("li"),nre=a("strong"),qQe=o("poolformer"),NQe=o(" \u2014 "),Jk=a("a"),jQe=o("PoolFormerConfig"),DQe=o(" (PoolFormer model)"),GQe=l(),$m=a("li"),sre=a("strong"),OQe=o("prophetnet"),VQe=o(" \u2014 "),Yk=a("a"),XQe=o("ProphetNetConfig"),zQe=o(" (ProphetNet model)"),WQe=l(),km=a("li"),lre=a("strong"),QQe=o("qdqbert"),HQe=o(" \u2014 "),Kk=a("a"),UQe=o("QDQBertConfig"),JQe=o(" (QDQBert model)"),YQe=l(),Sm=a("li"),ire=a("strong"),KQe=o("rag"),ZQe=o(" \u2014 "),Zk=a("a"),eHe=o("RagConfig"),oHe=o(" (RAG model)"),rHe=l(),Rm=a("li"),dre=a("strong"),tHe=o("realm"),aHe=o(" \u2014 "),eS=a("a"),nHe=o("RealmConfig"),sHe=o(" (Realm model)"),lHe=l(),Pm=a("li"),cre=a("strong"),iHe=o("reformer"),dHe=o(" \u2014 "),oS=a("a"),cHe=o("ReformerConfig"),fHe=o(" (Reformer model)"),mHe=l(),Bm=a("li"),fre=a("strong"),gHe=o("regnet"),hHe=o(" \u2014 "),rS=a("a"),pHe=o("RegNetConfig"),uHe=o(" (RegNet model)"),_He=l(),Im=a("li"),mre=a("strong"),bHe=o("rembert"),vHe=o(" \u2014 "),tS=a("a"),FHe=o("RemBertConfig"),THe=o(" (RemBERT model)"),MHe=l(),qm=a("li"),gre=a("strong"),EHe=o("resnet"),CHe=o(" \u2014 "),aS=a("a"),wHe=o("ResNetConfig"),AHe=o(" (ResNet model)"),yHe=l(),Nm=a("li"),hre=a("strong"),LHe=o("retribert"),xHe=o(" \u2014 "),nS=a("a"),$He=o("RetriBertConfig"),kHe=o(" (RetriBERT model)"),SHe=l(),jm=a("li"),pre=a("strong"),RHe=o("roberta"),PHe=o(" \u2014 "),sS=a("a"),BHe=o("RobertaConfig"),IHe=o(" (RoBERTa model)"),qHe=l(),Dm=a("li"),ure=a("strong"),NHe=o("roformer"),jHe=o(" \u2014 "),lS=a("a"),DHe=o("RoFormerConfig"),GHe=o(" (RoFormer model)"),OHe=l(),Gm=a("li"),_re=a("strong"),VHe=o("segformer"),XHe=o(" \u2014 "),iS=a("a"),zHe=o("SegformerConfig"),WHe=o(" (SegFormer model)"),QHe=l(),Om=a("li"),bre=a("strong"),HHe=o("sew"),UHe=o(" \u2014 "),dS=a("a"),JHe=o("SEWConfig"),YHe=o(" (SEW model)"),KHe=l(),Vm=a("li"),vre=a("strong"),ZHe=o("sew-d"),eUe=o(" \u2014 "),cS=a("a"),oUe=o("SEWDConfig"),rUe=o(" (SEW-D model)"),tUe=l(),Xm=a("li"),Fre=a("strong"),aUe=o("speech-encoder-decoder"),nUe=o(" \u2014 "),fS=a("a"),sUe=o("SpeechEncoderDecoderConfig"),lUe=o(" (Speech Encoder decoder model)"),iUe=l(),zm=a("li"),Tre=a("strong"),dUe=o("speech_to_text"),cUe=o(" \u2014 "),mS=a("a"),fUe=o("Speech2TextConfig"),mUe=o(" (Speech2Text model)"),gUe=l(),Wm=a("li"),Mre=a("strong"),hUe=o("speech_to_text_2"),pUe=o(" \u2014 "),gS=a("a"),uUe=o("Speech2Text2Config"),_Ue=o(" (Speech2Text2 model)"),bUe=l(),Qm=a("li"),Ere=a("strong"),vUe=o("splinter"),FUe=o(" \u2014 "),hS=a("a"),TUe=o("SplinterConfig"),MUe=o(" (Splinter model)"),EUe=l(),Hm=a("li"),Cre=a("strong"),CUe=o("squeezebert"),wUe=o(" \u2014 "),pS=a("a"),AUe=o("SqueezeBertConfig"),yUe=o(" (SqueezeBERT model)"),LUe=l(),Um=a("li"),wre=a("strong"),xUe=o("swin"),$Ue=o(" \u2014 "),uS=a("a"),kUe=o("SwinConfig"),SUe=o(" (Swin model)"),RUe=l(),Jm=a("li"),Are=a("strong"),PUe=o("t5"),BUe=o(" \u2014 "),_S=a("a"),IUe=o("T5Config"),qUe=o(" (T5 model)"),NUe=l(),Ym=a("li"),yre=a("strong"),jUe=o("tapas"),DUe=o(" \u2014 "),bS=a("a"),GUe=o("TapasConfig"),OUe=o(" (TAPAS model)"),VUe=l(),Km=a("li"),Lre=a("strong"),XUe=o("trajectory_transformer"),zUe=o(" \u2014 "),vS=a("a"),WUe=o("TrajectoryTransformerConfig"),QUe=o(" (Trajectory Transformer model)"),HUe=l(),Zm=a("li"),xre=a("strong"),UUe=o("transfo-xl"),JUe=o(" \u2014 "),FS=a("a"),YUe=o("TransfoXLConfig"),KUe=o(" (Transformer-XL model)"),ZUe=l(),eg=a("li"),$re=a("strong"),eJe=o("trocr"),oJe=o(" \u2014 "),TS=a("a"),rJe=o("TrOCRConfig"),tJe=o(" (TrOCR model)"),aJe=l(),og=a("li"),kre=a("strong"),nJe=o("unispeech"),sJe=o(" \u2014 "),MS=a("a"),lJe=o("UniSpeechConfig"),iJe=o(" (UniSpeech model)"),dJe=l(),rg=a("li"),Sre=a("strong"),cJe=o("unispeech-sat"),fJe=o(" \u2014 "),ES=a("a"),mJe=o("UniSpeechSatConfig"),gJe=o(" (UniSpeechSat model)"),hJe=l(),tg=a("li"),Rre=a("strong"),pJe=o("van"),uJe=o(" \u2014 "),CS=a("a"),_Je=o("VanConfig"),bJe=o(" (VAN model)"),vJe=l(),ag=a("li"),Pre=a("strong"),FJe=o("vilt"),TJe=o(" \u2014 "),wS=a("a"),MJe=o("ViltConfig"),EJe=o(" (ViLT model)"),CJe=l(),ng=a("li"),Bre=a("strong"),wJe=o("vision-encoder-decoder"),AJe=o(" \u2014 "),AS=a("a"),yJe=o("VisionEncoderDecoderConfig"),LJe=o(" (Vision Encoder decoder model)"),xJe=l(),sg=a("li"),Ire=a("strong"),$Je=o("vision-text-dual-encoder"),kJe=o(" \u2014 "),yS=a("a"),SJe=o("VisionTextDualEncoderConfig"),RJe=o(" (VisionTextDualEncoder model)"),PJe=l(),lg=a("li"),qre=a("strong"),BJe=o("visual_bert"),IJe=o(" \u2014 "),LS=a("a"),qJe=o("VisualBertConfig"),NJe=o(" (VisualBert model)"),jJe=l(),ig=a("li"),Nre=a("strong"),DJe=o("vit"),GJe=o(" \u2014 "),xS=a("a"),OJe=o("ViTConfig"),VJe=o(" (ViT model)"),XJe=l(),dg=a("li"),jre=a("strong"),zJe=o("vit_mae"),WJe=o(" \u2014 "),$S=a("a"),QJe=o("ViTMAEConfig"),HJe=o(" (ViTMAE model)"),UJe=l(),cg=a("li"),Dre=a("strong"),JJe=o("wav2vec2"),YJe=o(" \u2014 "),kS=a("a"),KJe=o("Wav2Vec2Config"),ZJe=o(" (Wav2Vec2 model)"),eYe=l(),fg=a("li"),Gre=a("strong"),oYe=o("wav2vec2-conformer"),rYe=o(" \u2014 "),SS=a("a"),tYe=o("Wav2Vec2ConformerConfig"),aYe=o(" (Wav2Vec2-Conformer model)"),nYe=l(),mg=a("li"),Ore=a("strong"),sYe=o("wavlm"),lYe=o(" \u2014 "),RS=a("a"),iYe=o("WavLMConfig"),dYe=o(" (WavLM model)"),cYe=l(),gg=a("li"),Vre=a("strong"),fYe=o("xglm"),mYe=o(" \u2014 "),PS=a("a"),gYe=o("XGLMConfig"),hYe=o(" (XGLM model)"),pYe=l(),hg=a("li"),Xre=a("strong"),uYe=o("xlm"),_Ye=o(" \u2014 "),BS=a("a"),bYe=o("XLMConfig"),vYe=o(" (XLM model)"),FYe=l(),pg=a("li"),zre=a("strong"),TYe=o("xlm-prophetnet"),MYe=o(" \u2014 "),IS=a("a"),EYe=o("XLMProphetNetConfig"),CYe=o(" (XLMProphetNet model)"),wYe=l(),ug=a("li"),Wre=a("strong"),AYe=o("xlm-roberta"),yYe=o(" \u2014 "),qS=a("a"),LYe=o("XLMRobertaConfig"),xYe=o(" (XLM-RoBERTa model)"),$Ye=l(),_g=a("li"),Qre=a("strong"),kYe=o("xlm-roberta-xl"),SYe=o(" \u2014 "),NS=a("a"),RYe=o("XLMRobertaXLConfig"),PYe=o(" (XLM-RoBERTa-XL model)"),BYe=l(),bg=a("li"),Hre=a("strong"),IYe=o("xlnet"),qYe=o(" \u2014 "),jS=a("a"),NYe=o("XLNetConfig"),jYe=o(" (XLNet model)"),DYe=l(),vg=a("li"),Ure=a("strong"),GYe=o("yolos"),OYe=o(" \u2014 "),DS=a("a"),VYe=o("YolosConfig"),XYe=o(" (YOLOS model)"),zYe=l(),Fg=a("li"),Jre=a("strong"),WYe=o("yoso"),QYe=o(" \u2014 "),GS=a("a"),HYe=o("YosoConfig"),UYe=o(" (YOSO model)"),JYe=l(),F(Tg.$$.fragment),YYe=l(),Mg=a("div"),F(wA.$$.fragment),KYe=l(),Yre=a("p"),ZYe=o("Register a new configuration for this class."),Eqe=l(),Ti=a("h2"),Eg=a("a"),Kre=a("span"),F(AA.$$.fragment),eKe=l(),Zre=a("span"),oKe=o("AutoTokenizer"),Cqe=l(),wo=a("div"),F(yA.$$.fragment),rKe=l(),LA=a("p"),tKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),OS=a("a"),aKe=o("AutoTokenizer.from_pretrained()"),nKe=o(" class method."),sKe=l(),xA=a("p"),lKe=o("This class cannot be instantiated directly using "),ete=a("code"),iKe=o("__init__()"),dKe=o(" (throws an error)."),cKe=l(),Cr=a("div"),F($A.$$.fragment),fKe=l(),ote=a("p"),mKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gKe=l(),Aa=a("p"),hKe=o("The tokenizer class to instantiate is selected based on the "),rte=a("code"),pKe=o("model_type"),uKe=o(` property of the config object (either
passed as an argument or loaded from `),tte=a("code"),_Ke=o("pretrained_model_name_or_path"),bKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ate=a("code"),vKe=o("pretrained_model_name_or_path"),FKe=o(":"),TKe=l(),k=a("ul"),Sn=a("li"),nte=a("strong"),MKe=o("albert"),EKe=o(" \u2014 "),VS=a("a"),CKe=o("AlbertTokenizer"),wKe=o(" or "),XS=a("a"),AKe=o("AlbertTokenizerFast"),yKe=o(" (ALBERT model)"),LKe=l(),Rn=a("li"),ste=a("strong"),xKe=o("bart"),$Ke=o(" \u2014 "),zS=a("a"),kKe=o("BartTokenizer"),SKe=o(" or "),WS=a("a"),RKe=o("BartTokenizerFast"),PKe=o(" (BART model)"),BKe=l(),Pn=a("li"),lte=a("strong"),IKe=o("barthez"),qKe=o(" \u2014 "),QS=a("a"),NKe=o("BarthezTokenizer"),jKe=o(" or "),HS=a("a"),DKe=o("BarthezTokenizerFast"),GKe=o(" (BARThez model)"),OKe=l(),Cg=a("li"),ite=a("strong"),VKe=o("bartpho"),XKe=o(" \u2014 "),US=a("a"),zKe=o("BartphoTokenizer"),WKe=o(" (BARTpho model)"),QKe=l(),Bn=a("li"),dte=a("strong"),HKe=o("bert"),UKe=o(" \u2014 "),JS=a("a"),JKe=o("BertTokenizer"),YKe=o(" or "),YS=a("a"),KKe=o("BertTokenizerFast"),ZKe=o(" (BERT model)"),eZe=l(),wg=a("li"),cte=a("strong"),oZe=o("bert-generation"),rZe=o(" \u2014 "),KS=a("a"),tZe=o("BertGenerationTokenizer"),aZe=o(" (Bert Generation model)"),nZe=l(),Ag=a("li"),fte=a("strong"),sZe=o("bert-japanese"),lZe=o(" \u2014 "),ZS=a("a"),iZe=o("BertJapaneseTokenizer"),dZe=o(" (BertJapanese model)"),cZe=l(),yg=a("li"),mte=a("strong"),fZe=o("bertweet"),mZe=o(" \u2014 "),eR=a("a"),gZe=o("BertweetTokenizer"),hZe=o(" (Bertweet model)"),pZe=l(),In=a("li"),gte=a("strong"),uZe=o("big_bird"),_Ze=o(" \u2014 "),oR=a("a"),bZe=o("BigBirdTokenizer"),vZe=o(" or "),rR=a("a"),FZe=o("BigBirdTokenizerFast"),TZe=o(" (BigBird model)"),MZe=l(),qn=a("li"),hte=a("strong"),EZe=o("bigbird_pegasus"),CZe=o(" \u2014 "),tR=a("a"),wZe=o("PegasusTokenizer"),AZe=o(" or "),aR=a("a"),yZe=o("PegasusTokenizerFast"),LZe=o(" (BigBirdPegasus model)"),xZe=l(),Nn=a("li"),pte=a("strong"),$Ze=o("blenderbot"),kZe=o(" \u2014 "),nR=a("a"),SZe=o("BlenderbotTokenizer"),RZe=o(" or "),sR=a("a"),PZe=o("BlenderbotTokenizerFast"),BZe=o(" (Blenderbot model)"),IZe=l(),Lg=a("li"),ute=a("strong"),qZe=o("blenderbot-small"),NZe=o(" \u2014 "),lR=a("a"),jZe=o("BlenderbotSmallTokenizer"),DZe=o(" (BlenderbotSmall model)"),GZe=l(),xg=a("li"),_te=a("strong"),OZe=o("byt5"),VZe=o(" \u2014 "),iR=a("a"),XZe=o("ByT5Tokenizer"),zZe=o(" (ByT5 model)"),WZe=l(),jn=a("li"),bte=a("strong"),QZe=o("camembert"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("CamembertTokenizer"),JZe=o(" or "),cR=a("a"),YZe=o("CamembertTokenizerFast"),KZe=o(" (CamemBERT model)"),ZZe=l(),$g=a("li"),vte=a("strong"),eeo=o("canine"),oeo=o(" \u2014 "),fR=a("a"),reo=o("CanineTokenizer"),teo=o(" (Canine model)"),aeo=l(),Dn=a("li"),Fte=a("strong"),neo=o("clip"),seo=o(" \u2014 "),mR=a("a"),leo=o("CLIPTokenizer"),ieo=o(" or "),gR=a("a"),deo=o("CLIPTokenizerFast"),ceo=o(" (CLIP model)"),feo=l(),Gn=a("li"),Tte=a("strong"),meo=o("convbert"),geo=o(" \u2014 "),hR=a("a"),heo=o("ConvBertTokenizer"),peo=o(" or "),pR=a("a"),ueo=o("ConvBertTokenizerFast"),_eo=o(" (ConvBERT model)"),beo=l(),On=a("li"),Mte=a("strong"),veo=o("cpm"),Feo=o(" \u2014 "),uR=a("a"),Teo=o("CpmTokenizer"),Meo=o(" or "),_R=a("a"),Eeo=o("CpmTokenizerFast"),Ceo=o(" (CPM model)"),weo=l(),kg=a("li"),Ete=a("strong"),Aeo=o("ctrl"),yeo=o(" \u2014 "),bR=a("a"),Leo=o("CTRLTokenizer"),xeo=o(" (CTRL model)"),$eo=l(),Vn=a("li"),Cte=a("strong"),keo=o("data2vec-text"),Seo=o(" \u2014 "),vR=a("a"),Reo=o("RobertaTokenizer"),Peo=o(" or "),FR=a("a"),Beo=o("RobertaTokenizerFast"),Ieo=o(" (Data2VecText model)"),qeo=l(),Xn=a("li"),wte=a("strong"),Neo=o("deberta"),jeo=o(" \u2014 "),TR=a("a"),Deo=o("DebertaTokenizer"),Geo=o(" or "),MR=a("a"),Oeo=o("DebertaTokenizerFast"),Veo=o(" (DeBERTa model)"),Xeo=l(),zn=a("li"),Ate=a("strong"),zeo=o("deberta-v2"),Weo=o(" \u2014 "),ER=a("a"),Qeo=o("DebertaV2Tokenizer"),Heo=o(" or "),CR=a("a"),Ueo=o("DebertaV2TokenizerFast"),Jeo=o(" (DeBERTa-v2 model)"),Yeo=l(),Wn=a("li"),yte=a("strong"),Keo=o("distilbert"),Zeo=o(" \u2014 "),wR=a("a"),eoo=o("DistilBertTokenizer"),ooo=o(" or "),AR=a("a"),roo=o("DistilBertTokenizerFast"),too=o(" (DistilBERT model)"),aoo=l(),Qn=a("li"),Lte=a("strong"),noo=o("dpr"),soo=o(" \u2014 "),yR=a("a"),loo=o("DPRQuestionEncoderTokenizer"),ioo=o(" or "),LR=a("a"),doo=o("DPRQuestionEncoderTokenizerFast"),coo=o(" (DPR model)"),foo=l(),Hn=a("li"),xte=a("strong"),moo=o("electra"),goo=o(" \u2014 "),xR=a("a"),hoo=o("ElectraTokenizer"),poo=o(" or "),$R=a("a"),uoo=o("ElectraTokenizerFast"),_oo=o(" (ELECTRA model)"),boo=l(),Sg=a("li"),$te=a("strong"),voo=o("flaubert"),Foo=o(" \u2014 "),kR=a("a"),Too=o("FlaubertTokenizer"),Moo=o(" (FlauBERT model)"),Eoo=l(),Un=a("li"),kte=a("strong"),Coo=o("fnet"),woo=o(" \u2014 "),SR=a("a"),Aoo=o("FNetTokenizer"),yoo=o(" or "),RR=a("a"),Loo=o("FNetTokenizerFast"),xoo=o(" (FNet model)"),$oo=l(),Rg=a("li"),Ste=a("strong"),koo=o("fsmt"),Soo=o(" \u2014 "),PR=a("a"),Roo=o("FSMTTokenizer"),Poo=o(" (FairSeq Machine-Translation model)"),Boo=l(),Jn=a("li"),Rte=a("strong"),Ioo=o("funnel"),qoo=o(" \u2014 "),BR=a("a"),Noo=o("FunnelTokenizer"),joo=o(" or "),IR=a("a"),Doo=o("FunnelTokenizerFast"),Goo=o(" (Funnel Transformer model)"),Ooo=l(),Yn=a("li"),Pte=a("strong"),Voo=o("gpt2"),Xoo=o(" \u2014 "),qR=a("a"),zoo=o("GPT2Tokenizer"),Woo=o(" or "),NR=a("a"),Qoo=o("GPT2TokenizerFast"),Hoo=o(" (OpenAI GPT-2 model)"),Uoo=l(),Kn=a("li"),Bte=a("strong"),Joo=o("gpt_neo"),Yoo=o(" \u2014 "),jR=a("a"),Koo=o("GPT2Tokenizer"),Zoo=o(" or "),DR=a("a"),ero=o("GPT2TokenizerFast"),oro=o(" (GPT Neo model)"),rro=l(),Zn=a("li"),Ite=a("strong"),tro=o("gptj"),aro=o(" \u2014 "),GR=a("a"),nro=o("GPT2Tokenizer"),sro=o(" or "),OR=a("a"),lro=o("GPT2TokenizerFast"),iro=o(" (GPT-J model)"),dro=l(),es=a("li"),qte=a("strong"),cro=o("herbert"),fro=o(" \u2014 "),VR=a("a"),mro=o("HerbertTokenizer"),gro=o(" or "),XR=a("a"),hro=o("HerbertTokenizerFast"),pro=o(" (HerBERT model)"),uro=l(),Pg=a("li"),Nte=a("strong"),_ro=o("hubert"),bro=o(" \u2014 "),zR=a("a"),vro=o("Wav2Vec2CTCTokenizer"),Fro=o(" (Hubert model)"),Tro=l(),os=a("li"),jte=a("strong"),Mro=o("ibert"),Ero=o(" \u2014 "),WR=a("a"),Cro=o("RobertaTokenizer"),wro=o(" or "),QR=a("a"),Aro=o("RobertaTokenizerFast"),yro=o(" (I-BERT model)"),Lro=l(),rs=a("li"),Dte=a("strong"),xro=o("layoutlm"),$ro=o(" \u2014 "),HR=a("a"),kro=o("LayoutLMTokenizer"),Sro=o(" or "),UR=a("a"),Rro=o("LayoutLMTokenizerFast"),Pro=o(" (LayoutLM model)"),Bro=l(),ts=a("li"),Gte=a("strong"),Iro=o("layoutlmv2"),qro=o(" \u2014 "),JR=a("a"),Nro=o("LayoutLMv2Tokenizer"),jro=o(" or "),YR=a("a"),Dro=o("LayoutLMv2TokenizerFast"),Gro=o(" (LayoutLMv2 model)"),Oro=l(),as=a("li"),Ote=a("strong"),Vro=o("layoutlmv3"),Xro=o(" \u2014 "),KR=a("a"),zro=o("LayoutLMv3Tokenizer"),Wro=o(" or "),ZR=a("a"),Qro=o("LayoutLMv3TokenizerFast"),Hro=o(" (LayoutLMv3 model)"),Uro=l(),ns=a("li"),Vte=a("strong"),Jro=o("layoutxlm"),Yro=o(" \u2014 "),eP=a("a"),Kro=o("LayoutXLMTokenizer"),Zro=o(" or "),oP=a("a"),eto=o("LayoutXLMTokenizerFast"),oto=o(" (LayoutXLM model)"),rto=l(),ss=a("li"),Xte=a("strong"),tto=o("led"),ato=o(" \u2014 "),rP=a("a"),nto=o("LEDTokenizer"),sto=o(" or "),tP=a("a"),lto=o("LEDTokenizerFast"),ito=o(" (LED model)"),dto=l(),ls=a("li"),zte=a("strong"),cto=o("longformer"),fto=o(" \u2014 "),aP=a("a"),mto=o("LongformerTokenizer"),gto=o(" or "),nP=a("a"),hto=o("LongformerTokenizerFast"),pto=o(" (Longformer model)"),uto=l(),Bg=a("li"),Wte=a("strong"),_to=o("luke"),bto=o(" \u2014 "),sP=a("a"),vto=o("LukeTokenizer"),Fto=o(" (LUKE model)"),Tto=l(),is=a("li"),Qte=a("strong"),Mto=o("lxmert"),Eto=o(" \u2014 "),lP=a("a"),Cto=o("LxmertTokenizer"),wto=o(" or "),iP=a("a"),Ato=o("LxmertTokenizerFast"),yto=o(" (LXMERT model)"),Lto=l(),Ig=a("li"),Hte=a("strong"),xto=o("m2m_100"),$to=o(" \u2014 "),dP=a("a"),kto=o("M2M100Tokenizer"),Sto=o(" (M2M100 model)"),Rto=l(),qg=a("li"),Ute=a("strong"),Pto=o("marian"),Bto=o(" \u2014 "),cP=a("a"),Ito=o("MarianTokenizer"),qto=o(" (Marian model)"),Nto=l(),ds=a("li"),Jte=a("strong"),jto=o("mbart"),Dto=o(" \u2014 "),fP=a("a"),Gto=o("MBartTokenizer"),Oto=o(" or "),mP=a("a"),Vto=o("MBartTokenizerFast"),Xto=o(" (mBART model)"),zto=l(),cs=a("li"),Yte=a("strong"),Wto=o("mbart50"),Qto=o(" \u2014 "),gP=a("a"),Hto=o("MBart50Tokenizer"),Uto=o(" or "),hP=a("a"),Jto=o("MBart50TokenizerFast"),Yto=o(" (mBART-50 model)"),Kto=l(),fs=a("li"),Kte=a("strong"),Zto=o("megatron-bert"),eao=o(" \u2014 "),pP=a("a"),oao=o("BertTokenizer"),rao=o(" or "),uP=a("a"),tao=o("BertTokenizerFast"),aao=o(" (MegatronBert model)"),nao=l(),Ng=a("li"),Zte=a("strong"),sao=o("mluke"),lao=o(" \u2014 "),_P=a("a"),iao=o("MLukeTokenizer"),dao=o(" (mLUKE model)"),cao=l(),ms=a("li"),eae=a("strong"),fao=o("mobilebert"),mao=o(" \u2014 "),bP=a("a"),gao=o("MobileBertTokenizer"),hao=o(" or "),vP=a("a"),pao=o("MobileBertTokenizerFast"),uao=o(" (MobileBERT model)"),_ao=l(),gs=a("li"),oae=a("strong"),bao=o("mpnet"),vao=o(" \u2014 "),FP=a("a"),Fao=o("MPNetTokenizer"),Tao=o(" or "),TP=a("a"),Mao=o("MPNetTokenizerFast"),Eao=o(" (MPNet model)"),Cao=l(),hs=a("li"),rae=a("strong"),wao=o("mt5"),Aao=o(" \u2014 "),MP=a("a"),yao=o("MT5Tokenizer"),Lao=o(" or "),EP=a("a"),xao=o("MT5TokenizerFast"),$ao=o(" (mT5 model)"),kao=l(),ps=a("li"),tae=a("strong"),Sao=o("nystromformer"),Rao=o(" \u2014 "),CP=a("a"),Pao=o("AlbertTokenizer"),Bao=o(" or "),wP=a("a"),Iao=o("AlbertTokenizerFast"),qao=o(" (Nystromformer model)"),Nao=l(),us=a("li"),aae=a("strong"),jao=o("openai-gpt"),Dao=o(" \u2014 "),AP=a("a"),Gao=o("OpenAIGPTTokenizer"),Oao=o(" or "),yP=a("a"),Vao=o("OpenAIGPTTokenizerFast"),Xao=o(" (OpenAI GPT model)"),zao=l(),jg=a("li"),nae=a("strong"),Wao=o("opt"),Qao=o(" \u2014 "),LP=a("a"),Hao=o("GPT2Tokenizer"),Uao=o(" (OPT model)"),Jao=l(),_s=a("li"),sae=a("strong"),Yao=o("pegasus"),Kao=o(" \u2014 "),xP=a("a"),Zao=o("PegasusTokenizer"),eno=o(" or "),$P=a("a"),ono=o("PegasusTokenizerFast"),rno=o(" (Pegasus model)"),tno=l(),Dg=a("li"),lae=a("strong"),ano=o("perceiver"),nno=o(" \u2014 "),kP=a("a"),sno=o("PerceiverTokenizer"),lno=o(" (Perceiver model)"),ino=l(),Gg=a("li"),iae=a("strong"),dno=o("phobert"),cno=o(" \u2014 "),SP=a("a"),fno=o("PhobertTokenizer"),mno=o(" (PhoBERT model)"),gno=l(),Og=a("li"),dae=a("strong"),hno=o("plbart"),pno=o(" \u2014 "),RP=a("a"),uno=o("PLBartTokenizer"),_no=o(" (PLBart model)"),bno=l(),Vg=a("li"),cae=a("strong"),vno=o("prophetnet"),Fno=o(" \u2014 "),PP=a("a"),Tno=o("ProphetNetTokenizer"),Mno=o(" (ProphetNet model)"),Eno=l(),bs=a("li"),fae=a("strong"),Cno=o("qdqbert"),wno=o(" \u2014 "),BP=a("a"),Ano=o("BertTokenizer"),yno=o(" or "),IP=a("a"),Lno=o("BertTokenizerFast"),xno=o(" (QDQBert model)"),$no=l(),Xg=a("li"),mae=a("strong"),kno=o("rag"),Sno=o(" \u2014 "),qP=a("a"),Rno=o("RagTokenizer"),Pno=o(" (RAG model)"),Bno=l(),vs=a("li"),gae=a("strong"),Ino=o("realm"),qno=o(" \u2014 "),NP=a("a"),Nno=o("RealmTokenizer"),jno=o(" or "),jP=a("a"),Dno=o("RealmTokenizerFast"),Gno=o(" (Realm model)"),Ono=l(),Fs=a("li"),hae=a("strong"),Vno=o("reformer"),Xno=o(" \u2014 "),DP=a("a"),zno=o("ReformerTokenizer"),Wno=o(" or "),GP=a("a"),Qno=o("ReformerTokenizerFast"),Hno=o(" (Reformer model)"),Uno=l(),Ts=a("li"),pae=a("strong"),Jno=o("rembert"),Yno=o(" \u2014 "),OP=a("a"),Kno=o("RemBertTokenizer"),Zno=o(" or "),VP=a("a"),eso=o("RemBertTokenizerFast"),oso=o(" (RemBERT model)"),rso=l(),Ms=a("li"),uae=a("strong"),tso=o("retribert"),aso=o(" \u2014 "),XP=a("a"),nso=o("RetriBertTokenizer"),sso=o(" or "),zP=a("a"),lso=o("RetriBertTokenizerFast"),iso=o(" (RetriBERT model)"),dso=l(),Es=a("li"),_ae=a("strong"),cso=o("roberta"),fso=o(" \u2014 "),WP=a("a"),mso=o("RobertaTokenizer"),gso=o(" or "),QP=a("a"),hso=o("RobertaTokenizerFast"),pso=o(" (RoBERTa model)"),uso=l(),Cs=a("li"),bae=a("strong"),_so=o("roformer"),bso=o(" \u2014 "),HP=a("a"),vso=o("RoFormerTokenizer"),Fso=o(" or "),UP=a("a"),Tso=o("RoFormerTokenizerFast"),Mso=o(" (RoFormer model)"),Eso=l(),zg=a("li"),vae=a("strong"),Cso=o("speech_to_text"),wso=o(" \u2014 "),JP=a("a"),Aso=o("Speech2TextTokenizer"),yso=o(" (Speech2Text model)"),Lso=l(),Wg=a("li"),Fae=a("strong"),xso=o("speech_to_text_2"),$so=o(" \u2014 "),YP=a("a"),kso=o("Speech2Text2Tokenizer"),Sso=o(" (Speech2Text2 model)"),Rso=l(),ws=a("li"),Tae=a("strong"),Pso=o("splinter"),Bso=o(" \u2014 "),KP=a("a"),Iso=o("SplinterTokenizer"),qso=o(" or "),ZP=a("a"),Nso=o("SplinterTokenizerFast"),jso=o(" (Splinter model)"),Dso=l(),As=a("li"),Mae=a("strong"),Gso=o("squeezebert"),Oso=o(" \u2014 "),eB=a("a"),Vso=o("SqueezeBertTokenizer"),Xso=o(" or "),oB=a("a"),zso=o("SqueezeBertTokenizerFast"),Wso=o(" (SqueezeBERT model)"),Qso=l(),ys=a("li"),Eae=a("strong"),Hso=o("t5"),Uso=o(" \u2014 "),rB=a("a"),Jso=o("T5Tokenizer"),Yso=o(" or "),tB=a("a"),Kso=o("T5TokenizerFast"),Zso=o(" (T5 model)"),elo=l(),Qg=a("li"),Cae=a("strong"),olo=o("tapas"),rlo=o(" \u2014 "),aB=a("a"),tlo=o("TapasTokenizer"),alo=o(" (TAPAS model)"),nlo=l(),Hg=a("li"),wae=a("strong"),slo=o("tapex"),llo=o(" \u2014 "),nB=a("a"),ilo=o("TapexTokenizer"),dlo=o(" (TAPEX model)"),clo=l(),Ug=a("li"),Aae=a("strong"),flo=o("transfo-xl"),mlo=o(" \u2014 "),sB=a("a"),glo=o("TransfoXLTokenizer"),hlo=o(" (Transformer-XL model)"),plo=l(),Ls=a("li"),yae=a("strong"),ulo=o("visual_bert"),_lo=o(" \u2014 "),lB=a("a"),blo=o("BertTokenizer"),vlo=o(" or "),iB=a("a"),Flo=o("BertTokenizerFast"),Tlo=o(" (VisualBert model)"),Mlo=l(),Jg=a("li"),Lae=a("strong"),Elo=o("wav2vec2"),Clo=o(" \u2014 "),dB=a("a"),wlo=o("Wav2Vec2CTCTokenizer"),Alo=o(" (Wav2Vec2 model)"),ylo=l(),Yg=a("li"),xae=a("strong"),Llo=o("wav2vec2-conformer"),xlo=o(" \u2014 "),cB=a("a"),$lo=o("Wav2Vec2CTCTokenizer"),klo=o(" (Wav2Vec2-Conformer model)"),Slo=l(),Kg=a("li"),$ae=a("strong"),Rlo=o("wav2vec2_phoneme"),Plo=o(" \u2014 "),fB=a("a"),Blo=o("Wav2Vec2PhonemeCTCTokenizer"),Ilo=o(" (Wav2Vec2Phoneme model)"),qlo=l(),xs=a("li"),kae=a("strong"),Nlo=o("xglm"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("XGLMTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("XGLMTokenizerFast"),Vlo=o(" (XGLM model)"),Xlo=l(),Zg=a("li"),Sae=a("strong"),zlo=o("xlm"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("XLMTokenizer"),Hlo=o(" (XLM model)"),Ulo=l(),eh=a("li"),Rae=a("strong"),Jlo=o("xlm-prophetnet"),Ylo=o(" \u2014 "),pB=a("a"),Klo=o("XLMProphetNetTokenizer"),Zlo=o(" (XLMProphetNet model)"),eio=l(),$s=a("li"),Pae=a("strong"),oio=o("xlm-roberta"),rio=o(" \u2014 "),uB=a("a"),tio=o("XLMRobertaTokenizer"),aio=o(" or "),_B=a("a"),nio=o("XLMRobertaTokenizerFast"),sio=o(" (XLM-RoBERTa model)"),lio=l(),ks=a("li"),Bae=a("strong"),iio=o("xlm-roberta-xl"),dio=o(" \u2014 "),bB=a("a"),cio=o("RobertaTokenizer"),fio=o(" or "),vB=a("a"),mio=o("RobertaTokenizerFast"),gio=o(" (XLM-RoBERTa-XL model)"),hio=l(),Ss=a("li"),Iae=a("strong"),pio=o("xlnet"),uio=o(" \u2014 "),FB=a("a"),_io=o("XLNetTokenizer"),bio=o(" or "),TB=a("a"),vio=o("XLNetTokenizerFast"),Fio=o(" (XLNet model)"),Tio=l(),Rs=a("li"),qae=a("strong"),Mio=o("yoso"),Eio=o(" \u2014 "),MB=a("a"),Cio=o("AlbertTokenizer"),wio=o(" or "),EB=a("a"),Aio=o("AlbertTokenizerFast"),yio=o(" (YOSO model)"),Lio=l(),F(oh.$$.fragment),xio=l(),rh=a("div"),F(kA.$$.fragment),$io=l(),Nae=a("p"),kio=o("Register a new tokenizer in this mapping."),wqe=l(),Mi=a("h2"),th=a("a"),jae=a("span"),F(SA.$$.fragment),Sio=l(),Dae=a("span"),Rio=o("AutoFeatureExtractor"),Aqe=l(),Ao=a("div"),F(RA.$$.fragment),Pio=l(),PA=a("p"),Bio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CB=a("a"),Iio=o("AutoFeatureExtractor.from_pretrained()"),qio=o(" class method."),Nio=l(),BA=a("p"),jio=o("This class cannot be instantiated directly using "),Gae=a("code"),Dio=o("__init__()"),Gio=o(" (throws an error)."),Oio=l(),He=a("div"),F(IA.$$.fragment),Vio=l(),Oae=a("p"),Xio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zio=l(),ya=a("p"),Wio=o("The feature extractor class to instantiate is selected based on the "),Vae=a("code"),Qio=o("model_type"),Hio=o(` property of the config object
(either passed as an argument or loaded from `),Xae=a("code"),Uio=o("pretrained_model_name_or_path"),Jio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zae=a("code"),Yio=o("pretrained_model_name_or_path"),Kio=o(":"),Zio=l(),Z=a("ul"),ah=a("li"),Wae=a("strong"),edo=o("beit"),odo=o(" \u2014 "),wB=a("a"),rdo=o("BeitFeatureExtractor"),tdo=o(" (BEiT model)"),ado=l(),nh=a("li"),Qae=a("strong"),ndo=o("clip"),sdo=o(" \u2014 "),AB=a("a"),ldo=o("CLIPFeatureExtractor"),ido=o(" (CLIP model)"),ddo=l(),sh=a("li"),Hae=a("strong"),cdo=o("convnext"),fdo=o(" \u2014 "),yB=a("a"),mdo=o("ConvNextFeatureExtractor"),gdo=o(" (ConvNext model)"),hdo=l(),lh=a("li"),Uae=a("strong"),pdo=o("data2vec-audio"),udo=o(" \u2014 "),LB=a("a"),_do=o("Wav2Vec2FeatureExtractor"),bdo=o(" (Data2VecAudio model)"),vdo=l(),ih=a("li"),Jae=a("strong"),Fdo=o("data2vec-vision"),Tdo=o(" \u2014 "),xB=a("a"),Mdo=o("BeitFeatureExtractor"),Edo=o(" (Data2VecVision model)"),Cdo=l(),dh=a("li"),Yae=a("strong"),wdo=o("deit"),Ado=o(" \u2014 "),$B=a("a"),ydo=o("DeiTFeatureExtractor"),Ldo=o(" (DeiT model)"),xdo=l(),ch=a("li"),Kae=a("strong"),$do=o("detr"),kdo=o(" \u2014 "),kB=a("a"),Sdo=o("DetrFeatureExtractor"),Rdo=o(" (DETR model)"),Pdo=l(),fh=a("li"),Zae=a("strong"),Bdo=o("dpt"),Ido=o(" \u2014 "),SB=a("a"),qdo=o("DPTFeatureExtractor"),Ndo=o(" (DPT model)"),jdo=l(),mh=a("li"),ene=a("strong"),Ddo=o("flava"),Gdo=o(" \u2014 "),RB=a("a"),Odo=o("FlavaFeatureExtractor"),Vdo=o(" (Flava model)"),Xdo=l(),gh=a("li"),one=a("strong"),zdo=o("glpn"),Wdo=o(" \u2014 "),PB=a("a"),Qdo=o("GLPNFeatureExtractor"),Hdo=o(" (GLPN model)"),Udo=l(),hh=a("li"),rne=a("strong"),Jdo=o("hubert"),Ydo=o(" \u2014 "),BB=a("a"),Kdo=o("Wav2Vec2FeatureExtractor"),Zdo=o(" (Hubert model)"),eco=l(),ph=a("li"),tne=a("strong"),oco=o("layoutlmv2"),rco=o(" \u2014 "),IB=a("a"),tco=o("LayoutLMv2FeatureExtractor"),aco=o(" (LayoutLMv2 model)"),nco=l(),uh=a("li"),ane=a("strong"),sco=o("layoutlmv3"),lco=o(" \u2014 "),qB=a("a"),ico=o("LayoutLMv3FeatureExtractor"),dco=o(" (LayoutLMv3 model)"),cco=l(),_h=a("li"),nne=a("strong"),fco=o("maskformer"),mco=o(" \u2014 "),NB=a("a"),gco=o("MaskFormerFeatureExtractor"),hco=o(" (MaskFormer model)"),pco=l(),bh=a("li"),sne=a("strong"),uco=o("perceiver"),_co=o(" \u2014 "),jB=a("a"),bco=o("PerceiverFeatureExtractor"),vco=o(" (Perceiver model)"),Fco=l(),vh=a("li"),lne=a("strong"),Tco=o("poolformer"),Mco=o(" \u2014 "),DB=a("a"),Eco=o("PoolFormerFeatureExtractor"),Cco=o(" (PoolFormer model)"),wco=l(),Fh=a("li"),ine=a("strong"),Aco=o("regnet"),yco=o(" \u2014 "),GB=a("a"),Lco=o("ConvNextFeatureExtractor"),xco=o(" (RegNet model)"),$co=l(),Th=a("li"),dne=a("strong"),kco=o("resnet"),Sco=o(" \u2014 "),OB=a("a"),Rco=o("ConvNextFeatureExtractor"),Pco=o(" (ResNet model)"),Bco=l(),Mh=a("li"),cne=a("strong"),Ico=o("segformer"),qco=o(" \u2014 "),VB=a("a"),Nco=o("SegformerFeatureExtractor"),jco=o(" (SegFormer model)"),Dco=l(),Eh=a("li"),fne=a("strong"),Gco=o("speech_to_text"),Oco=o(" \u2014 "),XB=a("a"),Vco=o("Speech2TextFeatureExtractor"),Xco=o(" (Speech2Text model)"),zco=l(),Ch=a("li"),mne=a("strong"),Wco=o("swin"),Qco=o(" \u2014 "),zB=a("a"),Hco=o("ViTFeatureExtractor"),Uco=o(" (Swin model)"),Jco=l(),wh=a("li"),gne=a("strong"),Yco=o("van"),Kco=o(" \u2014 "),WB=a("a"),Zco=o("ConvNextFeatureExtractor"),efo=o(" (VAN model)"),ofo=l(),Ah=a("li"),hne=a("strong"),rfo=o("vit"),tfo=o(" \u2014 "),QB=a("a"),afo=o("ViTFeatureExtractor"),nfo=o(" (ViT model)"),sfo=l(),yh=a("li"),pne=a("strong"),lfo=o("vit_mae"),ifo=o(" \u2014 "),HB=a("a"),dfo=o("ViTFeatureExtractor"),cfo=o(" (ViTMAE model)"),ffo=l(),Lh=a("li"),une=a("strong"),mfo=o("wav2vec2"),gfo=o(" \u2014 "),UB=a("a"),hfo=o("Wav2Vec2FeatureExtractor"),pfo=o(" (Wav2Vec2 model)"),ufo=l(),xh=a("li"),_ne=a("strong"),_fo=o("wav2vec2-conformer"),bfo=o(" \u2014 "),JB=a("a"),vfo=o("Wav2Vec2FeatureExtractor"),Ffo=o(" (Wav2Vec2-Conformer model)"),Tfo=l(),$h=a("li"),bne=a("strong"),Mfo=o("yolos"),Efo=o(" \u2014 "),YB=a("a"),Cfo=o("YolosFeatureExtractor"),wfo=o(" (YOLOS model)"),Afo=l(),F(kh.$$.fragment),yfo=l(),F(Sh.$$.fragment),Lfo=l(),Rh=a("div"),F(qA.$$.fragment),xfo=l(),vne=a("p"),$fo=o("Register a new feature extractor for this class."),yqe=l(),Ei=a("h2"),Ph=a("a"),Fne=a("span"),F(NA.$$.fragment),kfo=l(),Tne=a("span"),Sfo=o("AutoProcessor"),Lqe=l(),yo=a("div"),F(jA.$$.fragment),Rfo=l(),DA=a("p"),Pfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KB=a("a"),Bfo=o("AutoProcessor.from_pretrained()"),Ifo=o(" class method."),qfo=l(),GA=a("p"),Nfo=o("This class cannot be instantiated directly using "),Mne=a("code"),jfo=o("__init__()"),Dfo=o(" (throws an error)."),Gfo=l(),Ue=a("div"),F(OA.$$.fragment),Ofo=l(),Ene=a("p"),Vfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Xfo=l(),Ci=a("p"),zfo=o("The processor class to instantiate is selected based on the "),Cne=a("code"),Wfo=o("model_type"),Qfo=o(` property of the config object (either
passed as an argument or loaded from `),wne=a("code"),Hfo=o("pretrained_model_name_or_path"),Ufo=o(" if possible):"),Jfo=l(),he=a("ul"),Bh=a("li"),Ane=a("strong"),Yfo=o("clip"),Kfo=o(" \u2014 "),ZB=a("a"),Zfo=o("CLIPProcessor"),emo=o(" (CLIP model)"),omo=l(),Ih=a("li"),yne=a("strong"),rmo=o("flava"),tmo=o(" \u2014 "),Lne=a("code"),amo=o("FLAVAProcessor"),nmo=o(" (Flava model)"),smo=l(),qh=a("li"),xne=a("strong"),lmo=o("layoutlmv2"),imo=o(" \u2014 "),eI=a("a"),dmo=o("LayoutLMv2Processor"),cmo=o(" (LayoutLMv2 model)"),fmo=l(),Nh=a("li"),$ne=a("strong"),mmo=o("layoutlmv3"),gmo=o(" \u2014 "),oI=a("a"),hmo=o("LayoutLMv3Processor"),pmo=o(" (LayoutLMv3 model)"),umo=l(),jh=a("li"),kne=a("strong"),_mo=o("layoutxlm"),bmo=o(" \u2014 "),rI=a("a"),vmo=o("LayoutXLMProcessor"),Fmo=o(" (LayoutXLM model)"),Tmo=l(),Dh=a("li"),Sne=a("strong"),Mmo=o("sew"),Emo=o(" \u2014 "),tI=a("a"),Cmo=o("Wav2Vec2Processor"),wmo=o(" (SEW model)"),Amo=l(),Gh=a("li"),Rne=a("strong"),ymo=o("sew-d"),Lmo=o(" \u2014 "),aI=a("a"),xmo=o("Wav2Vec2Processor"),$mo=o(" (SEW-D model)"),kmo=l(),Oh=a("li"),Pne=a("strong"),Smo=o("speech_to_text"),Rmo=o(" \u2014 "),nI=a("a"),Pmo=o("Speech2TextProcessor"),Bmo=o(" (Speech2Text model)"),Imo=l(),Vh=a("li"),Bne=a("strong"),qmo=o("speech_to_text_2"),Nmo=o(" \u2014 "),sI=a("a"),jmo=o("Speech2Text2Processor"),Dmo=o(" (Speech2Text2 model)"),Gmo=l(),Xh=a("li"),Ine=a("strong"),Omo=o("trocr"),Vmo=o(" \u2014 "),lI=a("a"),Xmo=o("TrOCRProcessor"),zmo=o(" (TrOCR model)"),Wmo=l(),zh=a("li"),qne=a("strong"),Qmo=o("unispeech"),Hmo=o(" \u2014 "),iI=a("a"),Umo=o("Wav2Vec2Processor"),Jmo=o(" (UniSpeech model)"),Ymo=l(),Wh=a("li"),Nne=a("strong"),Kmo=o("unispeech-sat"),Zmo=o(" \u2014 "),dI=a("a"),ego=o("Wav2Vec2Processor"),ogo=o(" (UniSpeechSat model)"),rgo=l(),Qh=a("li"),jne=a("strong"),tgo=o("vilt"),ago=o(" \u2014 "),cI=a("a"),ngo=o("ViltProcessor"),sgo=o(" (ViLT model)"),lgo=l(),Hh=a("li"),Dne=a("strong"),igo=o("vision-text-dual-encoder"),dgo=o(" \u2014 "),fI=a("a"),cgo=o("VisionTextDualEncoderProcessor"),fgo=o(" (VisionTextDualEncoder model)"),mgo=l(),Uh=a("li"),Gne=a("strong"),ggo=o("wav2vec2"),hgo=o(" \u2014 "),mI=a("a"),pgo=o("Wav2Vec2Processor"),ugo=o(" (Wav2Vec2 model)"),_go=l(),Jh=a("li"),One=a("strong"),bgo=o("wav2vec2-conformer"),vgo=o(" \u2014 "),gI=a("a"),Fgo=o("Wav2Vec2Processor"),Tgo=o(" (Wav2Vec2-Conformer model)"),Mgo=l(),Yh=a("li"),Vne=a("strong"),Ego=o("wavlm"),Cgo=o(" \u2014 "),hI=a("a"),wgo=o("Wav2Vec2Processor"),Ago=o(" (WavLM model)"),ygo=l(),F(Kh.$$.fragment),Lgo=l(),F(Zh.$$.fragment),xgo=l(),ep=a("div"),F(VA.$$.fragment),$go=l(),Xne=a("p"),kgo=o("Register a new processor for this class."),xqe=l(),wi=a("h2"),op=a("a"),zne=a("span"),F(XA.$$.fragment),Sgo=l(),Wne=a("span"),Rgo=o("AutoModel"),$qe=l(),Lo=a("div"),F(zA.$$.fragment),Pgo=l(),Ai=a("p"),Bgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pI=a("a"),Igo=o("from_pretrained()"),qgo=o(" class method or the "),uI=a("a"),Ngo=o("from_config()"),jgo=o(` class
method.`),Dgo=l(),WA=a("p"),Ggo=o("This class cannot be instantiated directly using "),Qne=a("code"),Ogo=o("__init__()"),Vgo=o(" (throws an error)."),Xgo=l(),tt=a("div"),F(QA.$$.fragment),zgo=l(),Hne=a("p"),Wgo=o("Instantiates one of the base model classes of the library from a configuration."),Qgo=l(),yi=a("p"),Hgo=o(`Note:
Loading a model from its configuration file does `),Une=a("strong"),Ugo=o("not"),Jgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=a("a"),Ygo=o("from_pretrained()"),Kgo=o(" to load the model weights."),Zgo=l(),F(rp.$$.fragment),eho=l(),Je=a("div"),F(HA.$$.fragment),oho=l(),Jne=a("p"),rho=o("Instantiate one of the base model classes of the library from a pretrained model."),tho=l(),La=a("p"),aho=o("The model class to instantiate is selected based on the "),Yne=a("code"),nho=o("model_type"),sho=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),lho=o("pretrained_model_name_or_path"),iho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=a("code"),dho=o("pretrained_model_name_or_path"),cho=o(":"),fho=l(),x=a("ul"),tp=a("li"),ese=a("strong"),mho=o("albert"),gho=o(" \u2014 "),bI=a("a"),hho=o("AlbertModel"),pho=o(" (ALBERT model)"),uho=l(),ap=a("li"),ose=a("strong"),_ho=o("bart"),bho=o(" \u2014 "),vI=a("a"),vho=o("BartModel"),Fho=o(" (BART model)"),Tho=l(),np=a("li"),rse=a("strong"),Mho=o("beit"),Eho=o(" \u2014 "),FI=a("a"),Cho=o("BeitModel"),who=o(" (BEiT model)"),Aho=l(),sp=a("li"),tse=a("strong"),yho=o("bert"),Lho=o(" \u2014 "),TI=a("a"),xho=o("BertModel"),$ho=o(" (BERT model)"),kho=l(),lp=a("li"),ase=a("strong"),Sho=o("bert-generation"),Rho=o(" \u2014 "),MI=a("a"),Pho=o("BertGenerationEncoder"),Bho=o(" (Bert Generation model)"),Iho=l(),ip=a("li"),nse=a("strong"),qho=o("big_bird"),Nho=o(" \u2014 "),EI=a("a"),jho=o("BigBirdModel"),Dho=o(" (BigBird model)"),Gho=l(),dp=a("li"),sse=a("strong"),Oho=o("bigbird_pegasus"),Vho=o(" \u2014 "),CI=a("a"),Xho=o("BigBirdPegasusModel"),zho=o(" (BigBirdPegasus model)"),Who=l(),cp=a("li"),lse=a("strong"),Qho=o("blenderbot"),Hho=o(" \u2014 "),wI=a("a"),Uho=o("BlenderbotModel"),Jho=o(" (Blenderbot model)"),Yho=l(),fp=a("li"),ise=a("strong"),Kho=o("blenderbot-small"),Zho=o(" \u2014 "),AI=a("a"),epo=o("BlenderbotSmallModel"),opo=o(" (BlenderbotSmall model)"),rpo=l(),mp=a("li"),dse=a("strong"),tpo=o("camembert"),apo=o(" \u2014 "),yI=a("a"),npo=o("CamembertModel"),spo=o(" (CamemBERT model)"),lpo=l(),gp=a("li"),cse=a("strong"),ipo=o("canine"),dpo=o(" \u2014 "),LI=a("a"),cpo=o("CanineModel"),fpo=o(" (Canine model)"),mpo=l(),hp=a("li"),fse=a("strong"),gpo=o("clip"),hpo=o(" \u2014 "),xI=a("a"),ppo=o("CLIPModel"),upo=o(" (CLIP model)"),_po=l(),pp=a("li"),mse=a("strong"),bpo=o("convbert"),vpo=o(" \u2014 "),$I=a("a"),Fpo=o("ConvBertModel"),Tpo=o(" (ConvBERT model)"),Mpo=l(),up=a("li"),gse=a("strong"),Epo=o("convnext"),Cpo=o(" \u2014 "),kI=a("a"),wpo=o("ConvNextModel"),Apo=o(" (ConvNext model)"),ypo=l(),_p=a("li"),hse=a("strong"),Lpo=o("ctrl"),xpo=o(" \u2014 "),SI=a("a"),$po=o("CTRLModel"),kpo=o(" (CTRL model)"),Spo=l(),bp=a("li"),pse=a("strong"),Rpo=o("data2vec-audio"),Ppo=o(" \u2014 "),RI=a("a"),Bpo=o("Data2VecAudioModel"),Ipo=o(" (Data2VecAudio model)"),qpo=l(),vp=a("li"),use=a("strong"),Npo=o("data2vec-text"),jpo=o(" \u2014 "),PI=a("a"),Dpo=o("Data2VecTextModel"),Gpo=o(" (Data2VecText model)"),Opo=l(),Fp=a("li"),_se=a("strong"),Vpo=o("data2vec-vision"),Xpo=o(" \u2014 "),BI=a("a"),zpo=o("Data2VecVisionModel"),Wpo=o(" (Data2VecVision model)"),Qpo=l(),Tp=a("li"),bse=a("strong"),Hpo=o("deberta"),Upo=o(" \u2014 "),II=a("a"),Jpo=o("DebertaModel"),Ypo=o(" (DeBERTa model)"),Kpo=l(),Mp=a("li"),vse=a("strong"),Zpo=o("deberta-v2"),euo=o(" \u2014 "),qI=a("a"),ouo=o("DebertaV2Model"),ruo=o(" (DeBERTa-v2 model)"),tuo=l(),Ep=a("li"),Fse=a("strong"),auo=o("decision_transformer"),nuo=o(" \u2014 "),NI=a("a"),suo=o("DecisionTransformerModel"),luo=o(" (Decision Transformer model)"),iuo=l(),Cp=a("li"),Tse=a("strong"),duo=o("deit"),cuo=o(" \u2014 "),jI=a("a"),fuo=o("DeiTModel"),muo=o(" (DeiT model)"),guo=l(),wp=a("li"),Mse=a("strong"),huo=o("detr"),puo=o(" \u2014 "),DI=a("a"),uuo=o("DetrModel"),_uo=o(" (DETR model)"),buo=l(),Ap=a("li"),Ese=a("strong"),vuo=o("distilbert"),Fuo=o(" \u2014 "),GI=a("a"),Tuo=o("DistilBertModel"),Muo=o(" (DistilBERT model)"),Euo=l(),yp=a("li"),Cse=a("strong"),Cuo=o("dpr"),wuo=o(" \u2014 "),OI=a("a"),Auo=o("DPRQuestionEncoder"),yuo=o(" (DPR model)"),Luo=l(),Lp=a("li"),wse=a("strong"),xuo=o("dpt"),$uo=o(" \u2014 "),VI=a("a"),kuo=o("DPTModel"),Suo=o(" (DPT model)"),Ruo=l(),xp=a("li"),Ase=a("strong"),Puo=o("electra"),Buo=o(" \u2014 "),XI=a("a"),Iuo=o("ElectraModel"),quo=o(" (ELECTRA model)"),Nuo=l(),$p=a("li"),yse=a("strong"),juo=o("flaubert"),Duo=o(" \u2014 "),zI=a("a"),Guo=o("FlaubertModel"),Ouo=o(" (FlauBERT model)"),Vuo=l(),kp=a("li"),Lse=a("strong"),Xuo=o("flava"),zuo=o(" \u2014 "),WI=a("a"),Wuo=o("FlavaModel"),Quo=o(" (Flava model)"),Huo=l(),Sp=a("li"),xse=a("strong"),Uuo=o("fnet"),Juo=o(" \u2014 "),QI=a("a"),Yuo=o("FNetModel"),Kuo=o(" (FNet model)"),Zuo=l(),Rp=a("li"),$se=a("strong"),e_o=o("fsmt"),o_o=o(" \u2014 "),HI=a("a"),r_o=o("FSMTModel"),t_o=o(" (FairSeq Machine-Translation model)"),a_o=l(),Ps=a("li"),kse=a("strong"),n_o=o("funnel"),s_o=o(" \u2014 "),UI=a("a"),l_o=o("FunnelModel"),i_o=o(" or "),JI=a("a"),d_o=o("FunnelBaseModel"),c_o=o(" (Funnel Transformer model)"),f_o=l(),Pp=a("li"),Sse=a("strong"),m_o=o("glpn"),g_o=o(" \u2014 "),YI=a("a"),h_o=o("GLPNModel"),p_o=o(" (GLPN model)"),u_o=l(),Bp=a("li"),Rse=a("strong"),__o=o("gpt2"),b_o=o(" \u2014 "),KI=a("a"),v_o=o("GPT2Model"),F_o=o(" (OpenAI GPT-2 model)"),T_o=l(),Ip=a("li"),Pse=a("strong"),M_o=o("gpt_neo"),E_o=o(" \u2014 "),ZI=a("a"),C_o=o("GPTNeoModel"),w_o=o(" (GPT Neo model)"),A_o=l(),qp=a("li"),Bse=a("strong"),y_o=o("gptj"),L_o=o(" \u2014 "),eq=a("a"),x_o=o("GPTJModel"),$_o=o(" (GPT-J model)"),k_o=l(),Np=a("li"),Ise=a("strong"),S_o=o("hubert"),R_o=o(" \u2014 "),oq=a("a"),P_o=o("HubertModel"),B_o=o(" (Hubert model)"),I_o=l(),jp=a("li"),qse=a("strong"),q_o=o("ibert"),N_o=o(" \u2014 "),rq=a("a"),j_o=o("IBertModel"),D_o=o(" (I-BERT model)"),G_o=l(),Dp=a("li"),Nse=a("strong"),O_o=o("imagegpt"),V_o=o(" \u2014 "),tq=a("a"),X_o=o("ImageGPTModel"),z_o=o(" (ImageGPT model)"),W_o=l(),Gp=a("li"),jse=a("strong"),Q_o=o("layoutlm"),H_o=o(" \u2014 "),aq=a("a"),U_o=o("LayoutLMModel"),J_o=o(" (LayoutLM model)"),Y_o=l(),Op=a("li"),Dse=a("strong"),K_o=o("layoutlmv2"),Z_o=o(" \u2014 "),nq=a("a"),e0o=o("LayoutLMv2Model"),o0o=o(" (LayoutLMv2 model)"),r0o=l(),Vp=a("li"),Gse=a("strong"),t0o=o("layoutlmv3"),a0o=o(" \u2014 "),sq=a("a"),n0o=o("LayoutLMv3Model"),s0o=o(" (LayoutLMv3 model)"),l0o=l(),Xp=a("li"),Ose=a("strong"),i0o=o("led"),d0o=o(" \u2014 "),lq=a("a"),c0o=o("LEDModel"),f0o=o(" (LED model)"),m0o=l(),zp=a("li"),Vse=a("strong"),g0o=o("longformer"),h0o=o(" \u2014 "),iq=a("a"),p0o=o("LongformerModel"),u0o=o(" (Longformer model)"),_0o=l(),Wp=a("li"),Xse=a("strong"),b0o=o("luke"),v0o=o(" \u2014 "),dq=a("a"),F0o=o("LukeModel"),T0o=o(" (LUKE model)"),M0o=l(),Qp=a("li"),zse=a("strong"),E0o=o("lxmert"),C0o=o(" \u2014 "),cq=a("a"),w0o=o("LxmertModel"),A0o=o(" (LXMERT model)"),y0o=l(),Hp=a("li"),Wse=a("strong"),L0o=o("m2m_100"),x0o=o(" \u2014 "),fq=a("a"),$0o=o("M2M100Model"),k0o=o(" (M2M100 model)"),S0o=l(),Up=a("li"),Qse=a("strong"),R0o=o("marian"),P0o=o(" \u2014 "),mq=a("a"),B0o=o("MarianModel"),I0o=o(" (Marian model)"),q0o=l(),Jp=a("li"),Hse=a("strong"),N0o=o("maskformer"),j0o=o(" \u2014 "),gq=a("a"),D0o=o("MaskFormerModel"),G0o=o(" (MaskFormer model)"),O0o=l(),Yp=a("li"),Use=a("strong"),V0o=o("mbart"),X0o=o(" \u2014 "),hq=a("a"),z0o=o("MBartModel"),W0o=o(" (mBART model)"),Q0o=l(),Kp=a("li"),Jse=a("strong"),H0o=o("megatron-bert"),U0o=o(" \u2014 "),pq=a("a"),J0o=o("MegatronBertModel"),Y0o=o(" (MegatronBert model)"),K0o=l(),Zp=a("li"),Yse=a("strong"),Z0o=o("mobilebert"),e1o=o(" \u2014 "),uq=a("a"),o1o=o("MobileBertModel"),r1o=o(" (MobileBERT model)"),t1o=l(),eu=a("li"),Kse=a("strong"),a1o=o("mpnet"),n1o=o(" \u2014 "),_q=a("a"),s1o=o("MPNetModel"),l1o=o(" (MPNet model)"),i1o=l(),ou=a("li"),Zse=a("strong"),d1o=o("mt5"),c1o=o(" \u2014 "),bq=a("a"),f1o=o("MT5Model"),m1o=o(" (mT5 model)"),g1o=l(),ru=a("li"),ele=a("strong"),h1o=o("nystromformer"),p1o=o(" \u2014 "),vq=a("a"),u1o=o("NystromformerModel"),_1o=o(" (Nystromformer model)"),b1o=l(),tu=a("li"),ole=a("strong"),v1o=o("openai-gpt"),F1o=o(" \u2014 "),Fq=a("a"),T1o=o("OpenAIGPTModel"),M1o=o(" (OpenAI GPT model)"),E1o=l(),au=a("li"),rle=a("strong"),C1o=o("opt"),w1o=o(" \u2014 "),Tq=a("a"),A1o=o("OPTModel"),y1o=o(" (OPT model)"),L1o=l(),nu=a("li"),tle=a("strong"),x1o=o("pegasus"),$1o=o(" \u2014 "),Mq=a("a"),k1o=o("PegasusModel"),S1o=o(" (Pegasus model)"),R1o=l(),su=a("li"),ale=a("strong"),P1o=o("perceiver"),B1o=o(" \u2014 "),Eq=a("a"),I1o=o("PerceiverModel"),q1o=o(" (Perceiver model)"),N1o=l(),lu=a("li"),nle=a("strong"),j1o=o("plbart"),D1o=o(" \u2014 "),Cq=a("a"),G1o=o("PLBartModel"),O1o=o(" (PLBart model)"),V1o=l(),iu=a("li"),sle=a("strong"),X1o=o("poolformer"),z1o=o(" \u2014 "),wq=a("a"),W1o=o("PoolFormerModel"),Q1o=o(" (PoolFormer model)"),H1o=l(),du=a("li"),lle=a("strong"),U1o=o("prophetnet"),J1o=o(" \u2014 "),Aq=a("a"),Y1o=o("ProphetNetModel"),K1o=o(" (ProphetNet model)"),Z1o=l(),cu=a("li"),ile=a("strong"),ebo=o("qdqbert"),obo=o(" \u2014 "),yq=a("a"),rbo=o("QDQBertModel"),tbo=o(" (QDQBert model)"),abo=l(),fu=a("li"),dle=a("strong"),nbo=o("reformer"),sbo=o(" \u2014 "),Lq=a("a"),lbo=o("ReformerModel"),ibo=o(" (Reformer model)"),dbo=l(),mu=a("li"),cle=a("strong"),cbo=o("regnet"),fbo=o(" \u2014 "),xq=a("a"),mbo=o("RegNetModel"),gbo=o(" (RegNet model)"),hbo=l(),gu=a("li"),fle=a("strong"),pbo=o("rembert"),ubo=o(" \u2014 "),$q=a("a"),_bo=o("RemBertModel"),bbo=o(" (RemBERT model)"),vbo=l(),hu=a("li"),mle=a("strong"),Fbo=o("resnet"),Tbo=o(" \u2014 "),kq=a("a"),Mbo=o("ResNetModel"),Ebo=o(" (ResNet model)"),Cbo=l(),pu=a("li"),gle=a("strong"),wbo=o("retribert"),Abo=o(" \u2014 "),Sq=a("a"),ybo=o("RetriBertModel"),Lbo=o(" (RetriBERT model)"),xbo=l(),uu=a("li"),hle=a("strong"),$bo=o("roberta"),kbo=o(" \u2014 "),Rq=a("a"),Sbo=o("RobertaModel"),Rbo=o(" (RoBERTa model)"),Pbo=l(),_u=a("li"),ple=a("strong"),Bbo=o("roformer"),Ibo=o(" \u2014 "),Pq=a("a"),qbo=o("RoFormerModel"),Nbo=o(" (RoFormer model)"),jbo=l(),bu=a("li"),ule=a("strong"),Dbo=o("segformer"),Gbo=o(" \u2014 "),Bq=a("a"),Obo=o("SegformerModel"),Vbo=o(" (SegFormer model)"),Xbo=l(),vu=a("li"),_le=a("strong"),zbo=o("sew"),Wbo=o(" \u2014 "),Iq=a("a"),Qbo=o("SEWModel"),Hbo=o(" (SEW model)"),Ubo=l(),Fu=a("li"),ble=a("strong"),Jbo=o("sew-d"),Ybo=o(" \u2014 "),qq=a("a"),Kbo=o("SEWDModel"),Zbo=o(" (SEW-D model)"),e2o=l(),Tu=a("li"),vle=a("strong"),o2o=o("speech_to_text"),r2o=o(" \u2014 "),Nq=a("a"),t2o=o("Speech2TextModel"),a2o=o(" (Speech2Text model)"),n2o=l(),Mu=a("li"),Fle=a("strong"),s2o=o("splinter"),l2o=o(" \u2014 "),jq=a("a"),i2o=o("SplinterModel"),d2o=o(" (Splinter model)"),c2o=l(),Eu=a("li"),Tle=a("strong"),f2o=o("squeezebert"),m2o=o(" \u2014 "),Dq=a("a"),g2o=o("SqueezeBertModel"),h2o=o(" (SqueezeBERT model)"),p2o=l(),Cu=a("li"),Mle=a("strong"),u2o=o("swin"),_2o=o(" \u2014 "),Gq=a("a"),b2o=o("SwinModel"),v2o=o(" (Swin model)"),F2o=l(),wu=a("li"),Ele=a("strong"),T2o=o("t5"),M2o=o(" \u2014 "),Oq=a("a"),E2o=o("T5Model"),C2o=o(" (T5 model)"),w2o=l(),Au=a("li"),Cle=a("strong"),A2o=o("tapas"),y2o=o(" \u2014 "),Vq=a("a"),L2o=o("TapasModel"),x2o=o(" (TAPAS model)"),$2o=l(),yu=a("li"),wle=a("strong"),k2o=o("trajectory_transformer"),S2o=o(" \u2014 "),Xq=a("a"),R2o=o("TrajectoryTransformerModel"),P2o=o(" (Trajectory Transformer model)"),B2o=l(),Lu=a("li"),Ale=a("strong"),I2o=o("transfo-xl"),q2o=o(" \u2014 "),zq=a("a"),N2o=o("TransfoXLModel"),j2o=o(" (Transformer-XL model)"),D2o=l(),xu=a("li"),yle=a("strong"),G2o=o("unispeech"),O2o=o(" \u2014 "),Wq=a("a"),V2o=o("UniSpeechModel"),X2o=o(" (UniSpeech model)"),z2o=l(),$u=a("li"),Lle=a("strong"),W2o=o("unispeech-sat"),Q2o=o(" \u2014 "),Qq=a("a"),H2o=o("UniSpeechSatModel"),U2o=o(" (UniSpeechSat model)"),J2o=l(),ku=a("li"),xle=a("strong"),Y2o=o("van"),K2o=o(" \u2014 "),Hq=a("a"),Z2o=o("VanModel"),evo=o(" (VAN model)"),ovo=l(),Su=a("li"),$le=a("strong"),rvo=o("vilt"),tvo=o(" \u2014 "),Uq=a("a"),avo=o("ViltModel"),nvo=o(" (ViLT model)"),svo=l(),Ru=a("li"),kle=a("strong"),lvo=o("vision-text-dual-encoder"),ivo=o(" \u2014 "),Jq=a("a"),dvo=o("VisionTextDualEncoderModel"),cvo=o(" (VisionTextDualEncoder model)"),fvo=l(),Pu=a("li"),Sle=a("strong"),mvo=o("visual_bert"),gvo=o(" \u2014 "),Yq=a("a"),hvo=o("VisualBertModel"),pvo=o(" (VisualBert model)"),uvo=l(),Bu=a("li"),Rle=a("strong"),_vo=o("vit"),bvo=o(" \u2014 "),Kq=a("a"),vvo=o("ViTModel"),Fvo=o(" (ViT model)"),Tvo=l(),Iu=a("li"),Ple=a("strong"),Mvo=o("vit_mae"),Evo=o(" \u2014 "),Zq=a("a"),Cvo=o("ViTMAEModel"),wvo=o(" (ViTMAE model)"),Avo=l(),qu=a("li"),Ble=a("strong"),yvo=o("wav2vec2"),Lvo=o(" \u2014 "),eN=a("a"),xvo=o("Wav2Vec2Model"),$vo=o(" (Wav2Vec2 model)"),kvo=l(),Nu=a("li"),Ile=a("strong"),Svo=o("wav2vec2-conformer"),Rvo=o(" \u2014 "),oN=a("a"),Pvo=o("Wav2Vec2ConformerModel"),Bvo=o(" (Wav2Vec2-Conformer model)"),Ivo=l(),ju=a("li"),qle=a("strong"),qvo=o("wavlm"),Nvo=o(" \u2014 "),rN=a("a"),jvo=o("WavLMModel"),Dvo=o(" (WavLM model)"),Gvo=l(),Du=a("li"),Nle=a("strong"),Ovo=o("xglm"),Vvo=o(" \u2014 "),tN=a("a"),Xvo=o("XGLMModel"),zvo=o(" (XGLM model)"),Wvo=l(),Gu=a("li"),jle=a("strong"),Qvo=o("xlm"),Hvo=o(" \u2014 "),aN=a("a"),Uvo=o("XLMModel"),Jvo=o(" (XLM model)"),Yvo=l(),Ou=a("li"),Dle=a("strong"),Kvo=o("xlm-prophetnet"),Zvo=o(" \u2014 "),nN=a("a"),eFo=o("XLMProphetNetModel"),oFo=o(" (XLMProphetNet model)"),rFo=l(),Vu=a("li"),Gle=a("strong"),tFo=o("xlm-roberta"),aFo=o(" \u2014 "),sN=a("a"),nFo=o("XLMRobertaModel"),sFo=o(" (XLM-RoBERTa model)"),lFo=l(),Xu=a("li"),Ole=a("strong"),iFo=o("xlm-roberta-xl"),dFo=o(" \u2014 "),lN=a("a"),cFo=o("XLMRobertaXLModel"),fFo=o(" (XLM-RoBERTa-XL model)"),mFo=l(),zu=a("li"),Vle=a("strong"),gFo=o("xlnet"),hFo=o(" \u2014 "),iN=a("a"),pFo=o("XLNetModel"),uFo=o(" (XLNet model)"),_Fo=l(),Wu=a("li"),Xle=a("strong"),bFo=o("yolos"),vFo=o(" \u2014 "),dN=a("a"),FFo=o("YolosModel"),TFo=o(" (YOLOS model)"),MFo=l(),Qu=a("li"),zle=a("strong"),EFo=o("yoso"),CFo=o(" \u2014 "),cN=a("a"),wFo=o("YosoModel"),AFo=o(" (YOSO model)"),yFo=l(),Hu=a("p"),LFo=o("The model is set in evaluation mode by default using "),Wle=a("code"),xFo=o("model.eval()"),$Fo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=a("code"),kFo=o("model.train()"),SFo=l(),F(Uu.$$.fragment),kqe=l(),Li=a("h2"),Ju=a("a"),Hle=a("span"),F(UA.$$.fragment),RFo=l(),Ule=a("span"),PFo=o("AutoModelForPreTraining"),Sqe=l(),xo=a("div"),F(JA.$$.fragment),BFo=l(),xi=a("p"),IFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fN=a("a"),qFo=o("from_pretrained()"),NFo=o(" class method or the "),mN=a("a"),jFo=o("from_config()"),DFo=o(` class
method.`),GFo=l(),YA=a("p"),OFo=o("This class cannot be instantiated directly using "),Jle=a("code"),VFo=o("__init__()"),XFo=o(" (throws an error)."),zFo=l(),at=a("div"),F(KA.$$.fragment),WFo=l(),Yle=a("p"),QFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HFo=l(),$i=a("p"),UFo=o(`Note:
Loading a model from its configuration file does `),Kle=a("strong"),JFo=o("not"),YFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=a("a"),KFo=o("from_pretrained()"),ZFo=o(" to load the model weights."),e6o=l(),F(Yu.$$.fragment),o6o=l(),Ye=a("div"),F(ZA.$$.fragment),r6o=l(),Zle=a("p"),t6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a6o=l(),xa=a("p"),n6o=o("The model class to instantiate is selected based on the "),eie=a("code"),s6o=o("model_type"),l6o=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),i6o=o("pretrained_model_name_or_path"),d6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),c6o=o("pretrained_model_name_or_path"),f6o=o(":"),m6o=l(),G=a("ul"),Ku=a("li"),tie=a("strong"),g6o=o("albert"),h6o=o(" \u2014 "),hN=a("a"),p6o=o("AlbertForPreTraining"),u6o=o(" (ALBERT model)"),_6o=l(),Zu=a("li"),aie=a("strong"),b6o=o("bart"),v6o=o(" \u2014 "),pN=a("a"),F6o=o("BartForConditionalGeneration"),T6o=o(" (BART model)"),M6o=l(),e_=a("li"),nie=a("strong"),E6o=o("bert"),C6o=o(" \u2014 "),uN=a("a"),w6o=o("BertForPreTraining"),A6o=o(" (BERT model)"),y6o=l(),o_=a("li"),sie=a("strong"),L6o=o("big_bird"),x6o=o(" \u2014 "),_N=a("a"),$6o=o("BigBirdForPreTraining"),k6o=o(" (BigBird model)"),S6o=l(),r_=a("li"),lie=a("strong"),R6o=o("camembert"),P6o=o(" \u2014 "),bN=a("a"),B6o=o("CamembertForMaskedLM"),I6o=o(" (CamemBERT model)"),q6o=l(),t_=a("li"),iie=a("strong"),N6o=o("ctrl"),j6o=o(" \u2014 "),vN=a("a"),D6o=o("CTRLLMHeadModel"),G6o=o(" (CTRL model)"),O6o=l(),a_=a("li"),die=a("strong"),V6o=o("data2vec-text"),X6o=o(" \u2014 "),FN=a("a"),z6o=o("Data2VecTextForMaskedLM"),W6o=o(" (Data2VecText model)"),Q6o=l(),n_=a("li"),cie=a("strong"),H6o=o("deberta"),U6o=o(" \u2014 "),TN=a("a"),J6o=o("DebertaForMaskedLM"),Y6o=o(" (DeBERTa model)"),K6o=l(),s_=a("li"),fie=a("strong"),Z6o=o("deberta-v2"),eTo=o(" \u2014 "),MN=a("a"),oTo=o("DebertaV2ForMaskedLM"),rTo=o(" (DeBERTa-v2 model)"),tTo=l(),l_=a("li"),mie=a("strong"),aTo=o("distilbert"),nTo=o(" \u2014 "),EN=a("a"),sTo=o("DistilBertForMaskedLM"),lTo=o(" (DistilBERT model)"),iTo=l(),i_=a("li"),gie=a("strong"),dTo=o("electra"),cTo=o(" \u2014 "),CN=a("a"),fTo=o("ElectraForPreTraining"),mTo=o(" (ELECTRA model)"),gTo=l(),d_=a("li"),hie=a("strong"),hTo=o("flaubert"),pTo=o(" \u2014 "),wN=a("a"),uTo=o("FlaubertWithLMHeadModel"),_To=o(" (FlauBERT model)"),bTo=l(),c_=a("li"),pie=a("strong"),vTo=o("flava"),FTo=o(" \u2014 "),AN=a("a"),TTo=o("FlavaForPreTraining"),MTo=o(" (Flava model)"),ETo=l(),f_=a("li"),uie=a("strong"),CTo=o("fnet"),wTo=o(" \u2014 "),yN=a("a"),ATo=o("FNetForPreTraining"),yTo=o(" (FNet model)"),LTo=l(),m_=a("li"),_ie=a("strong"),xTo=o("fsmt"),$To=o(" \u2014 "),LN=a("a"),kTo=o("FSMTForConditionalGeneration"),STo=o(" (FairSeq Machine-Translation model)"),RTo=l(),g_=a("li"),bie=a("strong"),PTo=o("funnel"),BTo=o(" \u2014 "),xN=a("a"),ITo=o("FunnelForPreTraining"),qTo=o(" (Funnel Transformer model)"),NTo=l(),h_=a("li"),vie=a("strong"),jTo=o("gpt2"),DTo=o(" \u2014 "),$N=a("a"),GTo=o("GPT2LMHeadModel"),OTo=o(" (OpenAI GPT-2 model)"),VTo=l(),p_=a("li"),Fie=a("strong"),XTo=o("ibert"),zTo=o(" \u2014 "),kN=a("a"),WTo=o("IBertForMaskedLM"),QTo=o(" (I-BERT model)"),HTo=l(),u_=a("li"),Tie=a("strong"),UTo=o("layoutlm"),JTo=o(" \u2014 "),SN=a("a"),YTo=o("LayoutLMForMaskedLM"),KTo=o(" (LayoutLM model)"),ZTo=l(),__=a("li"),Mie=a("strong"),e7o=o("longformer"),o7o=o(" \u2014 "),RN=a("a"),r7o=o("LongformerForMaskedLM"),t7o=o(" (Longformer model)"),a7o=l(),b_=a("li"),Eie=a("strong"),n7o=o("lxmert"),s7o=o(" \u2014 "),PN=a("a"),l7o=o("LxmertForPreTraining"),i7o=o(" (LXMERT model)"),d7o=l(),v_=a("li"),Cie=a("strong"),c7o=o("megatron-bert"),f7o=o(" \u2014 "),BN=a("a"),m7o=o("MegatronBertForPreTraining"),g7o=o(" (MegatronBert model)"),h7o=l(),F_=a("li"),wie=a("strong"),p7o=o("mobilebert"),u7o=o(" \u2014 "),IN=a("a"),_7o=o("MobileBertForPreTraining"),b7o=o(" (MobileBERT model)"),v7o=l(),T_=a("li"),Aie=a("strong"),F7o=o("mpnet"),T7o=o(" \u2014 "),qN=a("a"),M7o=o("MPNetForMaskedLM"),E7o=o(" (MPNet model)"),C7o=l(),M_=a("li"),yie=a("strong"),w7o=o("openai-gpt"),A7o=o(" \u2014 "),NN=a("a"),y7o=o("OpenAIGPTLMHeadModel"),L7o=o(" (OpenAI GPT model)"),x7o=l(),E_=a("li"),Lie=a("strong"),$7o=o("retribert"),k7o=o(" \u2014 "),jN=a("a"),S7o=o("RetriBertModel"),R7o=o(" (RetriBERT model)"),P7o=l(),C_=a("li"),xie=a("strong"),B7o=o("roberta"),I7o=o(" \u2014 "),DN=a("a"),q7o=o("RobertaForMaskedLM"),N7o=o(" (RoBERTa model)"),j7o=l(),w_=a("li"),$ie=a("strong"),D7o=o("splinter"),G7o=o(" \u2014 "),GN=a("a"),O7o=o("SplinterForPreTraining"),V7o=o(" (Splinter model)"),X7o=l(),A_=a("li"),kie=a("strong"),z7o=o("squeezebert"),W7o=o(" \u2014 "),ON=a("a"),Q7o=o("SqueezeBertForMaskedLM"),H7o=o(" (SqueezeBERT model)"),U7o=l(),y_=a("li"),Sie=a("strong"),J7o=o("t5"),Y7o=o(" \u2014 "),VN=a("a"),K7o=o("T5ForConditionalGeneration"),Z7o=o(" (T5 model)"),eMo=l(),L_=a("li"),Rie=a("strong"),oMo=o("tapas"),rMo=o(" \u2014 "),XN=a("a"),tMo=o("TapasForMaskedLM"),aMo=o(" (TAPAS model)"),nMo=l(),x_=a("li"),Pie=a("strong"),sMo=o("transfo-xl"),lMo=o(" \u2014 "),zN=a("a"),iMo=o("TransfoXLLMHeadModel"),dMo=o(" (Transformer-XL model)"),cMo=l(),$_=a("li"),Bie=a("strong"),fMo=o("unispeech"),mMo=o(" \u2014 "),WN=a("a"),gMo=o("UniSpeechForPreTraining"),hMo=o(" (UniSpeech model)"),pMo=l(),k_=a("li"),Iie=a("strong"),uMo=o("unispeech-sat"),_Mo=o(" \u2014 "),QN=a("a"),bMo=o("UniSpeechSatForPreTraining"),vMo=o(" (UniSpeechSat model)"),FMo=l(),S_=a("li"),qie=a("strong"),TMo=o("visual_bert"),MMo=o(" \u2014 "),HN=a("a"),EMo=o("VisualBertForPreTraining"),CMo=o(" (VisualBert model)"),wMo=l(),R_=a("li"),Nie=a("strong"),AMo=o("vit_mae"),yMo=o(" \u2014 "),UN=a("a"),LMo=o("ViTMAEForPreTraining"),xMo=o(" (ViTMAE model)"),$Mo=l(),P_=a("li"),jie=a("strong"),kMo=o("wav2vec2"),SMo=o(" \u2014 "),JN=a("a"),RMo=o("Wav2Vec2ForPreTraining"),PMo=o(" (Wav2Vec2 model)"),BMo=l(),B_=a("li"),Die=a("strong"),IMo=o("wav2vec2-conformer"),qMo=o(" \u2014 "),YN=a("a"),NMo=o("Wav2Vec2ConformerForPreTraining"),jMo=o(" (Wav2Vec2-Conformer model)"),DMo=l(),I_=a("li"),Gie=a("strong"),GMo=o("xlm"),OMo=o(" \u2014 "),KN=a("a"),VMo=o("XLMWithLMHeadModel"),XMo=o(" (XLM model)"),zMo=l(),q_=a("li"),Oie=a("strong"),WMo=o("xlm-roberta"),QMo=o(" \u2014 "),ZN=a("a"),HMo=o("XLMRobertaForMaskedLM"),UMo=o(" (XLM-RoBERTa model)"),JMo=l(),N_=a("li"),Vie=a("strong"),YMo=o("xlm-roberta-xl"),KMo=o(" \u2014 "),ej=a("a"),ZMo=o("XLMRobertaXLForMaskedLM"),e4o=o(" (XLM-RoBERTa-XL model)"),o4o=l(),j_=a("li"),Xie=a("strong"),r4o=o("xlnet"),t4o=o(" \u2014 "),oj=a("a"),a4o=o("XLNetLMHeadModel"),n4o=o(" (XLNet model)"),s4o=l(),D_=a("p"),l4o=o("The model is set in evaluation mode by default using "),zie=a("code"),i4o=o("model.eval()"),d4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),c4o=o("model.train()"),f4o=l(),F(G_.$$.fragment),Rqe=l(),ki=a("h2"),O_=a("a"),Qie=a("span"),F(ey.$$.fragment),m4o=l(),Hie=a("span"),g4o=o("AutoModelForCausalLM"),Pqe=l(),$o=a("div"),F(oy.$$.fragment),h4o=l(),Si=a("p"),p4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rj=a("a"),u4o=o("from_pretrained()"),_4o=o(" class method or the "),tj=a("a"),b4o=o("from_config()"),v4o=o(` class
method.`),F4o=l(),ry=a("p"),T4o=o("This class cannot be instantiated directly using "),Uie=a("code"),M4o=o("__init__()"),E4o=o(" (throws an error)."),C4o=l(),nt=a("div"),F(ty.$$.fragment),w4o=l(),Jie=a("p"),A4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y4o=l(),Ri=a("p"),L4o=o(`Note:
Loading a model from its configuration file does `),Yie=a("strong"),x4o=o("not"),$4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=a("a"),k4o=o("from_pretrained()"),S4o=o(" to load the model weights."),R4o=l(),F(V_.$$.fragment),P4o=l(),Ke=a("div"),F(ay.$$.fragment),B4o=l(),Kie=a("p"),I4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q4o=l(),$a=a("p"),N4o=o("The model class to instantiate is selected based on the "),Zie=a("code"),j4o=o("model_type"),D4o=o(` property of the config object (either
passed as an argument or loaded from `),ede=a("code"),G4o=o("pretrained_model_name_or_path"),O4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=a("code"),V4o=o("pretrained_model_name_or_path"),X4o=o(":"),z4o=l(),z=a("ul"),X_=a("li"),rde=a("strong"),W4o=o("bart"),Q4o=o(" \u2014 "),nj=a("a"),H4o=o("BartForCausalLM"),U4o=o(" (BART model)"),J4o=l(),z_=a("li"),tde=a("strong"),Y4o=o("bert"),K4o=o(" \u2014 "),sj=a("a"),Z4o=o("BertLMHeadModel"),eEo=o(" (BERT model)"),oEo=l(),W_=a("li"),ade=a("strong"),rEo=o("bert-generation"),tEo=o(" \u2014 "),lj=a("a"),aEo=o("BertGenerationDecoder"),nEo=o(" (Bert Generation model)"),sEo=l(),Q_=a("li"),nde=a("strong"),lEo=o("big_bird"),iEo=o(" \u2014 "),ij=a("a"),dEo=o("BigBirdForCausalLM"),cEo=o(" (BigBird model)"),fEo=l(),H_=a("li"),sde=a("strong"),mEo=o("bigbird_pegasus"),gEo=o(" \u2014 "),dj=a("a"),hEo=o("BigBirdPegasusForCausalLM"),pEo=o(" (BigBirdPegasus model)"),uEo=l(),U_=a("li"),lde=a("strong"),_Eo=o("blenderbot"),bEo=o(" \u2014 "),cj=a("a"),vEo=o("BlenderbotForCausalLM"),FEo=o(" (Blenderbot model)"),TEo=l(),J_=a("li"),ide=a("strong"),MEo=o("blenderbot-small"),EEo=o(" \u2014 "),fj=a("a"),CEo=o("BlenderbotSmallForCausalLM"),wEo=o(" (BlenderbotSmall model)"),AEo=l(),Y_=a("li"),dde=a("strong"),yEo=o("camembert"),LEo=o(" \u2014 "),mj=a("a"),xEo=o("CamembertForCausalLM"),$Eo=o(" (CamemBERT model)"),kEo=l(),K_=a("li"),cde=a("strong"),SEo=o("ctrl"),REo=o(" \u2014 "),gj=a("a"),PEo=o("CTRLLMHeadModel"),BEo=o(" (CTRL model)"),IEo=l(),Z_=a("li"),fde=a("strong"),qEo=o("data2vec-text"),NEo=o(" \u2014 "),hj=a("a"),jEo=o("Data2VecTextForCausalLM"),DEo=o(" (Data2VecText model)"),GEo=l(),e0=a("li"),mde=a("strong"),OEo=o("electra"),VEo=o(" \u2014 "),pj=a("a"),XEo=o("ElectraForCausalLM"),zEo=o(" (ELECTRA model)"),WEo=l(),o0=a("li"),gde=a("strong"),QEo=o("gpt2"),HEo=o(" \u2014 "),uj=a("a"),UEo=o("GPT2LMHeadModel"),JEo=o(" (OpenAI GPT-2 model)"),YEo=l(),r0=a("li"),hde=a("strong"),KEo=o("gpt_neo"),ZEo=o(" \u2014 "),_j=a("a"),eCo=o("GPTNeoForCausalLM"),oCo=o(" (GPT Neo model)"),rCo=l(),t0=a("li"),pde=a("strong"),tCo=o("gptj"),aCo=o(" \u2014 "),bj=a("a"),nCo=o("GPTJForCausalLM"),sCo=o(" (GPT-J model)"),lCo=l(),a0=a("li"),ude=a("strong"),iCo=o("marian"),dCo=o(" \u2014 "),vj=a("a"),cCo=o("MarianForCausalLM"),fCo=o(" (Marian model)"),mCo=l(),n0=a("li"),_de=a("strong"),gCo=o("mbart"),hCo=o(" \u2014 "),Fj=a("a"),pCo=o("MBartForCausalLM"),uCo=o(" (mBART model)"),_Co=l(),s0=a("li"),bde=a("strong"),bCo=o("megatron-bert"),vCo=o(" \u2014 "),Tj=a("a"),FCo=o("MegatronBertForCausalLM"),TCo=o(" (MegatronBert model)"),MCo=l(),l0=a("li"),vde=a("strong"),ECo=o("openai-gpt"),CCo=o(" \u2014 "),Mj=a("a"),wCo=o("OpenAIGPTLMHeadModel"),ACo=o(" (OpenAI GPT model)"),yCo=l(),i0=a("li"),Fde=a("strong"),LCo=o("opt"),xCo=o(" \u2014 "),Ej=a("a"),$Co=o("OPTForCausalLM"),kCo=o(" (OPT model)"),SCo=l(),d0=a("li"),Tde=a("strong"),RCo=o("pegasus"),PCo=o(" \u2014 "),Cj=a("a"),BCo=o("PegasusForCausalLM"),ICo=o(" (Pegasus model)"),qCo=l(),c0=a("li"),Mde=a("strong"),NCo=o("plbart"),jCo=o(" \u2014 "),wj=a("a"),DCo=o("PLBartForCausalLM"),GCo=o(" (PLBart model)"),OCo=l(),f0=a("li"),Ede=a("strong"),VCo=o("prophetnet"),XCo=o(" \u2014 "),Aj=a("a"),zCo=o("ProphetNetForCausalLM"),WCo=o(" (ProphetNet model)"),QCo=l(),m0=a("li"),Cde=a("strong"),HCo=o("qdqbert"),UCo=o(" \u2014 "),yj=a("a"),JCo=o("QDQBertLMHeadModel"),YCo=o(" (QDQBert model)"),KCo=l(),g0=a("li"),wde=a("strong"),ZCo=o("reformer"),e5o=o(" \u2014 "),Lj=a("a"),o5o=o("ReformerModelWithLMHead"),r5o=o(" (Reformer model)"),t5o=l(),h0=a("li"),Ade=a("strong"),a5o=o("rembert"),n5o=o(" \u2014 "),xj=a("a"),s5o=o("RemBertForCausalLM"),l5o=o(" (RemBERT model)"),i5o=l(),p0=a("li"),yde=a("strong"),d5o=o("roberta"),c5o=o(" \u2014 "),$j=a("a"),f5o=o("RobertaForCausalLM"),m5o=o(" (RoBERTa model)"),g5o=l(),u0=a("li"),Lde=a("strong"),h5o=o("roformer"),p5o=o(" \u2014 "),kj=a("a"),u5o=o("RoFormerForCausalLM"),_5o=o(" (RoFormer model)"),b5o=l(),_0=a("li"),xde=a("strong"),v5o=o("speech_to_text_2"),F5o=o(" \u2014 "),Sj=a("a"),T5o=o("Speech2Text2ForCausalLM"),M5o=o(" (Speech2Text2 model)"),E5o=l(),b0=a("li"),$de=a("strong"),C5o=o("transfo-xl"),w5o=o(" \u2014 "),Rj=a("a"),A5o=o("TransfoXLLMHeadModel"),y5o=o(" (Transformer-XL model)"),L5o=l(),v0=a("li"),kde=a("strong"),x5o=o("trocr"),$5o=o(" \u2014 "),Pj=a("a"),k5o=o("TrOCRForCausalLM"),S5o=o(" (TrOCR model)"),R5o=l(),F0=a("li"),Sde=a("strong"),P5o=o("xglm"),B5o=o(" \u2014 "),Bj=a("a"),I5o=o("XGLMForCausalLM"),q5o=o(" (XGLM model)"),N5o=l(),T0=a("li"),Rde=a("strong"),j5o=o("xlm"),D5o=o(" \u2014 "),Ij=a("a"),G5o=o("XLMWithLMHeadModel"),O5o=o(" (XLM model)"),V5o=l(),M0=a("li"),Pde=a("strong"),X5o=o("xlm-prophetnet"),z5o=o(" \u2014 "),qj=a("a"),W5o=o("XLMProphetNetForCausalLM"),Q5o=o(" (XLMProphetNet model)"),H5o=l(),E0=a("li"),Bde=a("strong"),U5o=o("xlm-roberta"),J5o=o(" \u2014 "),Nj=a("a"),Y5o=o("XLMRobertaForCausalLM"),K5o=o(" (XLM-RoBERTa model)"),Z5o=l(),C0=a("li"),Ide=a("strong"),e3o=o("xlm-roberta-xl"),o3o=o(" \u2014 "),jj=a("a"),r3o=o("XLMRobertaXLForCausalLM"),t3o=o(" (XLM-RoBERTa-XL model)"),a3o=l(),w0=a("li"),qde=a("strong"),n3o=o("xlnet"),s3o=o(" \u2014 "),Dj=a("a"),l3o=o("XLNetLMHeadModel"),i3o=o(" (XLNet model)"),d3o=l(),A0=a("p"),c3o=o("The model is set in evaluation mode by default using "),Nde=a("code"),f3o=o("model.eval()"),m3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=a("code"),g3o=o("model.train()"),h3o=l(),F(y0.$$.fragment),Bqe=l(),Pi=a("h2"),L0=a("a"),Dde=a("span"),F(ny.$$.fragment),p3o=l(),Gde=a("span"),u3o=o("AutoModelForMaskedLM"),Iqe=l(),ko=a("div"),F(sy.$$.fragment),_3o=l(),Bi=a("p"),b3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gj=a("a"),v3o=o("from_pretrained()"),F3o=o(" class method or the "),Oj=a("a"),T3o=o("from_config()"),M3o=o(` class
method.`),E3o=l(),ly=a("p"),C3o=o("This class cannot be instantiated directly using "),Ode=a("code"),w3o=o("__init__()"),A3o=o(" (throws an error)."),y3o=l(),st=a("div"),F(iy.$$.fragment),L3o=l(),Vde=a("p"),x3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$3o=l(),Ii=a("p"),k3o=o(`Note:
Loading a model from its configuration file does `),Xde=a("strong"),S3o=o("not"),R3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),P3o=o("from_pretrained()"),B3o=o(" to load the model weights."),I3o=l(),F(x0.$$.fragment),q3o=l(),Ze=a("div"),F(dy.$$.fragment),N3o=l(),zde=a("p"),j3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D3o=l(),ka=a("p"),G3o=o("The model class to instantiate is selected based on the "),Wde=a("code"),O3o=o("model_type"),V3o=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),X3o=o("pretrained_model_name_or_path"),z3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),W3o=o("pretrained_model_name_or_path"),Q3o=o(":"),H3o=l(),W=a("ul"),$0=a("li"),Ude=a("strong"),U3o=o("albert"),J3o=o(" \u2014 "),Xj=a("a"),Y3o=o("AlbertForMaskedLM"),K3o=o(" (ALBERT model)"),Z3o=l(),k0=a("li"),Jde=a("strong"),ewo=o("bart"),owo=o(" \u2014 "),zj=a("a"),rwo=o("BartForConditionalGeneration"),two=o(" (BART model)"),awo=l(),S0=a("li"),Yde=a("strong"),nwo=o("bert"),swo=o(" \u2014 "),Wj=a("a"),lwo=o("BertForMaskedLM"),iwo=o(" (BERT model)"),dwo=l(),R0=a("li"),Kde=a("strong"),cwo=o("big_bird"),fwo=o(" \u2014 "),Qj=a("a"),mwo=o("BigBirdForMaskedLM"),gwo=o(" (BigBird model)"),hwo=l(),P0=a("li"),Zde=a("strong"),pwo=o("camembert"),uwo=o(" \u2014 "),Hj=a("a"),_wo=o("CamembertForMaskedLM"),bwo=o(" (CamemBERT model)"),vwo=l(),B0=a("li"),ece=a("strong"),Fwo=o("convbert"),Two=o(" \u2014 "),Uj=a("a"),Mwo=o("ConvBertForMaskedLM"),Ewo=o(" (ConvBERT model)"),Cwo=l(),I0=a("li"),oce=a("strong"),wwo=o("data2vec-text"),Awo=o(" \u2014 "),Jj=a("a"),ywo=o("Data2VecTextForMaskedLM"),Lwo=o(" (Data2VecText model)"),xwo=l(),q0=a("li"),rce=a("strong"),$wo=o("deberta"),kwo=o(" \u2014 "),Yj=a("a"),Swo=o("DebertaForMaskedLM"),Rwo=o(" (DeBERTa model)"),Pwo=l(),N0=a("li"),tce=a("strong"),Bwo=o("deberta-v2"),Iwo=o(" \u2014 "),Kj=a("a"),qwo=o("DebertaV2ForMaskedLM"),Nwo=o(" (DeBERTa-v2 model)"),jwo=l(),j0=a("li"),ace=a("strong"),Dwo=o("distilbert"),Gwo=o(" \u2014 "),Zj=a("a"),Owo=o("DistilBertForMaskedLM"),Vwo=o(" (DistilBERT model)"),Xwo=l(),D0=a("li"),nce=a("strong"),zwo=o("electra"),Wwo=o(" \u2014 "),eD=a("a"),Qwo=o("ElectraForMaskedLM"),Hwo=o(" (ELECTRA model)"),Uwo=l(),G0=a("li"),sce=a("strong"),Jwo=o("flaubert"),Ywo=o(" \u2014 "),oD=a("a"),Kwo=o("FlaubertWithLMHeadModel"),Zwo=o(" (FlauBERT model)"),eAo=l(),O0=a("li"),lce=a("strong"),oAo=o("fnet"),rAo=o(" \u2014 "),rD=a("a"),tAo=o("FNetForMaskedLM"),aAo=o(" (FNet model)"),nAo=l(),V0=a("li"),ice=a("strong"),sAo=o("funnel"),lAo=o(" \u2014 "),tD=a("a"),iAo=o("FunnelForMaskedLM"),dAo=o(" (Funnel Transformer model)"),cAo=l(),X0=a("li"),dce=a("strong"),fAo=o("ibert"),mAo=o(" \u2014 "),aD=a("a"),gAo=o("IBertForMaskedLM"),hAo=o(" (I-BERT model)"),pAo=l(),z0=a("li"),cce=a("strong"),uAo=o("layoutlm"),_Ao=o(" \u2014 "),nD=a("a"),bAo=o("LayoutLMForMaskedLM"),vAo=o(" (LayoutLM model)"),FAo=l(),W0=a("li"),fce=a("strong"),TAo=o("longformer"),MAo=o(" \u2014 "),sD=a("a"),EAo=o("LongformerForMaskedLM"),CAo=o(" (Longformer model)"),wAo=l(),Q0=a("li"),mce=a("strong"),AAo=o("mbart"),yAo=o(" \u2014 "),lD=a("a"),LAo=o("MBartForConditionalGeneration"),xAo=o(" (mBART model)"),$Ao=l(),H0=a("li"),gce=a("strong"),kAo=o("megatron-bert"),SAo=o(" \u2014 "),iD=a("a"),RAo=o("MegatronBertForMaskedLM"),PAo=o(" (MegatronBert model)"),BAo=l(),U0=a("li"),hce=a("strong"),IAo=o("mobilebert"),qAo=o(" \u2014 "),dD=a("a"),NAo=o("MobileBertForMaskedLM"),jAo=o(" (MobileBERT model)"),DAo=l(),J0=a("li"),pce=a("strong"),GAo=o("mpnet"),OAo=o(" \u2014 "),cD=a("a"),VAo=o("MPNetForMaskedLM"),XAo=o(" (MPNet model)"),zAo=l(),Y0=a("li"),uce=a("strong"),WAo=o("nystromformer"),QAo=o(" \u2014 "),fD=a("a"),HAo=o("NystromformerForMaskedLM"),UAo=o(" (Nystromformer model)"),JAo=l(),K0=a("li"),_ce=a("strong"),YAo=o("perceiver"),KAo=o(" \u2014 "),mD=a("a"),ZAo=o("PerceiverForMaskedLM"),eyo=o(" (Perceiver model)"),oyo=l(),Z0=a("li"),bce=a("strong"),ryo=o("qdqbert"),tyo=o(" \u2014 "),gD=a("a"),ayo=o("QDQBertForMaskedLM"),nyo=o(" (QDQBert model)"),syo=l(),e1=a("li"),vce=a("strong"),lyo=o("reformer"),iyo=o(" \u2014 "),hD=a("a"),dyo=o("ReformerForMaskedLM"),cyo=o(" (Reformer model)"),fyo=l(),o1=a("li"),Fce=a("strong"),myo=o("rembert"),gyo=o(" \u2014 "),pD=a("a"),hyo=o("RemBertForMaskedLM"),pyo=o(" (RemBERT model)"),uyo=l(),r1=a("li"),Tce=a("strong"),_yo=o("roberta"),byo=o(" \u2014 "),uD=a("a"),vyo=o("RobertaForMaskedLM"),Fyo=o(" (RoBERTa model)"),Tyo=l(),t1=a("li"),Mce=a("strong"),Myo=o("roformer"),Eyo=o(" \u2014 "),_D=a("a"),Cyo=o("RoFormerForMaskedLM"),wyo=o(" (RoFormer model)"),Ayo=l(),a1=a("li"),Ece=a("strong"),yyo=o("squeezebert"),Lyo=o(" \u2014 "),bD=a("a"),xyo=o("SqueezeBertForMaskedLM"),$yo=o(" (SqueezeBERT model)"),kyo=l(),n1=a("li"),Cce=a("strong"),Syo=o("tapas"),Ryo=o(" \u2014 "),vD=a("a"),Pyo=o("TapasForMaskedLM"),Byo=o(" (TAPAS model)"),Iyo=l(),s1=a("li"),wce=a("strong"),qyo=o("wav2vec2"),Nyo=o(" \u2014 "),Ace=a("code"),jyo=o("Wav2Vec2ForMaskedLM"),Dyo=o(" (Wav2Vec2 model)"),Gyo=l(),l1=a("li"),yce=a("strong"),Oyo=o("xlm"),Vyo=o(" \u2014 "),FD=a("a"),Xyo=o("XLMWithLMHeadModel"),zyo=o(" (XLM model)"),Wyo=l(),i1=a("li"),Lce=a("strong"),Qyo=o("xlm-roberta"),Hyo=o(" \u2014 "),TD=a("a"),Uyo=o("XLMRobertaForMaskedLM"),Jyo=o(" (XLM-RoBERTa model)"),Yyo=l(),d1=a("li"),xce=a("strong"),Kyo=o("xlm-roberta-xl"),Zyo=o(" \u2014 "),MD=a("a"),eLo=o("XLMRobertaXLForMaskedLM"),oLo=o(" (XLM-RoBERTa-XL model)"),rLo=l(),c1=a("li"),$ce=a("strong"),tLo=o("yoso"),aLo=o(" \u2014 "),ED=a("a"),nLo=o("YosoForMaskedLM"),sLo=o(" (YOSO model)"),lLo=l(),f1=a("p"),iLo=o("The model is set in evaluation mode by default using "),kce=a("code"),dLo=o("model.eval()"),cLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),fLo=o("model.train()"),mLo=l(),F(m1.$$.fragment),qqe=l(),qi=a("h2"),g1=a("a"),Rce=a("span"),F(cy.$$.fragment),gLo=l(),Pce=a("span"),hLo=o("AutoModelForSeq2SeqLM"),Nqe=l(),So=a("div"),F(fy.$$.fragment),pLo=l(),Ni=a("p"),uLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CD=a("a"),_Lo=o("from_pretrained()"),bLo=o(" class method or the "),wD=a("a"),vLo=o("from_config()"),FLo=o(` class
method.`),TLo=l(),my=a("p"),MLo=o("This class cannot be instantiated directly using "),Bce=a("code"),ELo=o("__init__()"),CLo=o(" (throws an error)."),wLo=l(),lt=a("div"),F(gy.$$.fragment),ALo=l(),Ice=a("p"),yLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LLo=l(),ji=a("p"),xLo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),$Lo=o("not"),kLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),SLo=o("from_pretrained()"),RLo=o(" to load the model weights."),PLo=l(),F(h1.$$.fragment),BLo=l(),eo=a("div"),F(hy.$$.fragment),ILo=l(),Nce=a("p"),qLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NLo=l(),Sa=a("p"),jLo=o("The model class to instantiate is selected based on the "),jce=a("code"),DLo=o("model_type"),GLo=o(` property of the config object (either
passed as an argument or loaded from `),Dce=a("code"),OLo=o("pretrained_model_name_or_path"),VLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gce=a("code"),XLo=o("pretrained_model_name_or_path"),zLo=o(":"),WLo=l(),ue=a("ul"),p1=a("li"),Oce=a("strong"),QLo=o("bart"),HLo=o(" \u2014 "),yD=a("a"),ULo=o("BartForConditionalGeneration"),JLo=o(" (BART model)"),YLo=l(),u1=a("li"),Vce=a("strong"),KLo=o("bigbird_pegasus"),ZLo=o(" \u2014 "),LD=a("a"),e8o=o("BigBirdPegasusForConditionalGeneration"),o8o=o(" (BigBirdPegasus model)"),r8o=l(),_1=a("li"),Xce=a("strong"),t8o=o("blenderbot"),a8o=o(" \u2014 "),xD=a("a"),n8o=o("BlenderbotForConditionalGeneration"),s8o=o(" (Blenderbot model)"),l8o=l(),b1=a("li"),zce=a("strong"),i8o=o("blenderbot-small"),d8o=o(" \u2014 "),$D=a("a"),c8o=o("BlenderbotSmallForConditionalGeneration"),f8o=o(" (BlenderbotSmall model)"),m8o=l(),v1=a("li"),Wce=a("strong"),g8o=o("encoder-decoder"),h8o=o(" \u2014 "),kD=a("a"),p8o=o("EncoderDecoderModel"),u8o=o(" (Encoder decoder model)"),_8o=l(),F1=a("li"),Qce=a("strong"),b8o=o("fsmt"),v8o=o(" \u2014 "),SD=a("a"),F8o=o("FSMTForConditionalGeneration"),T8o=o(" (FairSeq Machine-Translation model)"),M8o=l(),T1=a("li"),Hce=a("strong"),E8o=o("led"),C8o=o(" \u2014 "),RD=a("a"),w8o=o("LEDForConditionalGeneration"),A8o=o(" (LED model)"),y8o=l(),M1=a("li"),Uce=a("strong"),L8o=o("m2m_100"),x8o=o(" \u2014 "),PD=a("a"),$8o=o("M2M100ForConditionalGeneration"),k8o=o(" (M2M100 model)"),S8o=l(),E1=a("li"),Jce=a("strong"),R8o=o("marian"),P8o=o(" \u2014 "),BD=a("a"),B8o=o("MarianMTModel"),I8o=o(" (Marian model)"),q8o=l(),C1=a("li"),Yce=a("strong"),N8o=o("mbart"),j8o=o(" \u2014 "),ID=a("a"),D8o=o("MBartForConditionalGeneration"),G8o=o(" (mBART model)"),O8o=l(),w1=a("li"),Kce=a("strong"),V8o=o("mt5"),X8o=o(" \u2014 "),qD=a("a"),z8o=o("MT5ForConditionalGeneration"),W8o=o(" (mT5 model)"),Q8o=l(),A1=a("li"),Zce=a("strong"),H8o=o("pegasus"),U8o=o(" \u2014 "),ND=a("a"),J8o=o("PegasusForConditionalGeneration"),Y8o=o(" (Pegasus model)"),K8o=l(),y1=a("li"),efe=a("strong"),Z8o=o("plbart"),e9o=o(" \u2014 "),jD=a("a"),o9o=o("PLBartForConditionalGeneration"),r9o=o(" (PLBart model)"),t9o=l(),L1=a("li"),ofe=a("strong"),a9o=o("prophetnet"),n9o=o(" \u2014 "),DD=a("a"),s9o=o("ProphetNetForConditionalGeneration"),l9o=o(" (ProphetNet model)"),i9o=l(),x1=a("li"),rfe=a("strong"),d9o=o("t5"),c9o=o(" \u2014 "),GD=a("a"),f9o=o("T5ForConditionalGeneration"),m9o=o(" (T5 model)"),g9o=l(),$1=a("li"),tfe=a("strong"),h9o=o("xlm-prophetnet"),p9o=o(" \u2014 "),OD=a("a"),u9o=o("XLMProphetNetForConditionalGeneration"),_9o=o(" (XLMProphetNet model)"),b9o=l(),k1=a("p"),v9o=o("The model is set in evaluation mode by default using "),afe=a("code"),F9o=o("model.eval()"),T9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=a("code"),M9o=o("model.train()"),E9o=l(),F(S1.$$.fragment),jqe=l(),Di=a("h2"),R1=a("a"),sfe=a("span"),F(py.$$.fragment),C9o=l(),lfe=a("span"),w9o=o("AutoModelForSequenceClassification"),Dqe=l(),Ro=a("div"),F(uy.$$.fragment),A9o=l(),Gi=a("p"),y9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VD=a("a"),L9o=o("from_pretrained()"),x9o=o(" class method or the "),XD=a("a"),$9o=o("from_config()"),k9o=o(` class
method.`),S9o=l(),_y=a("p"),R9o=o("This class cannot be instantiated directly using "),ife=a("code"),P9o=o("__init__()"),B9o=o(" (throws an error)."),I9o=l(),it=a("div"),F(by.$$.fragment),q9o=l(),dfe=a("p"),N9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),j9o=l(),Oi=a("p"),D9o=o(`Note:
Loading a model from its configuration file does `),cfe=a("strong"),G9o=o("not"),O9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),V9o=o("from_pretrained()"),X9o=o(" to load the model weights."),z9o=l(),F(P1.$$.fragment),W9o=l(),oo=a("div"),F(vy.$$.fragment),Q9o=l(),ffe=a("p"),H9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),U9o=l(),Ra=a("p"),J9o=o("The model class to instantiate is selected based on the "),mfe=a("code"),Y9o=o("model_type"),K9o=o(` property of the config object (either
passed as an argument or loaded from `),gfe=a("code"),Z9o=o("pretrained_model_name_or_path"),exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(":"),txo=l(),q=a("ul"),B1=a("li"),pfe=a("strong"),axo=o("albert"),nxo=o(" \u2014 "),WD=a("a"),sxo=o("AlbertForSequenceClassification"),lxo=o(" (ALBERT model)"),ixo=l(),I1=a("li"),ufe=a("strong"),dxo=o("bart"),cxo=o(" \u2014 "),QD=a("a"),fxo=o("BartForSequenceClassification"),mxo=o(" (BART model)"),gxo=l(),q1=a("li"),_fe=a("strong"),hxo=o("bert"),pxo=o(" \u2014 "),HD=a("a"),uxo=o("BertForSequenceClassification"),_xo=o(" (BERT model)"),bxo=l(),N1=a("li"),bfe=a("strong"),vxo=o("big_bird"),Fxo=o(" \u2014 "),UD=a("a"),Txo=o("BigBirdForSequenceClassification"),Mxo=o(" (BigBird model)"),Exo=l(),j1=a("li"),vfe=a("strong"),Cxo=o("bigbird_pegasus"),wxo=o(" \u2014 "),JD=a("a"),Axo=o("BigBirdPegasusForSequenceClassification"),yxo=o(" (BigBirdPegasus model)"),Lxo=l(),D1=a("li"),Ffe=a("strong"),xxo=o("camembert"),$xo=o(" \u2014 "),YD=a("a"),kxo=o("CamembertForSequenceClassification"),Sxo=o(" (CamemBERT model)"),Rxo=l(),G1=a("li"),Tfe=a("strong"),Pxo=o("canine"),Bxo=o(" \u2014 "),KD=a("a"),Ixo=o("CanineForSequenceClassification"),qxo=o(" (Canine model)"),Nxo=l(),O1=a("li"),Mfe=a("strong"),jxo=o("convbert"),Dxo=o(" \u2014 "),ZD=a("a"),Gxo=o("ConvBertForSequenceClassification"),Oxo=o(" (ConvBERT model)"),Vxo=l(),V1=a("li"),Efe=a("strong"),Xxo=o("ctrl"),zxo=o(" \u2014 "),eG=a("a"),Wxo=o("CTRLForSequenceClassification"),Qxo=o(" (CTRL model)"),Hxo=l(),X1=a("li"),Cfe=a("strong"),Uxo=o("data2vec-text"),Jxo=o(" \u2014 "),oG=a("a"),Yxo=o("Data2VecTextForSequenceClassification"),Kxo=o(" (Data2VecText model)"),Zxo=l(),z1=a("li"),wfe=a("strong"),e$o=o("deberta"),o$o=o(" \u2014 "),rG=a("a"),r$o=o("DebertaForSequenceClassification"),t$o=o(" (DeBERTa model)"),a$o=l(),W1=a("li"),Afe=a("strong"),n$o=o("deberta-v2"),s$o=o(" \u2014 "),tG=a("a"),l$o=o("DebertaV2ForSequenceClassification"),i$o=o(" (DeBERTa-v2 model)"),d$o=l(),Q1=a("li"),yfe=a("strong"),c$o=o("distilbert"),f$o=o(" \u2014 "),aG=a("a"),m$o=o("DistilBertForSequenceClassification"),g$o=o(" (DistilBERT model)"),h$o=l(),H1=a("li"),Lfe=a("strong"),p$o=o("electra"),u$o=o(" \u2014 "),nG=a("a"),_$o=o("ElectraForSequenceClassification"),b$o=o(" (ELECTRA model)"),v$o=l(),U1=a("li"),xfe=a("strong"),F$o=o("flaubert"),T$o=o(" \u2014 "),sG=a("a"),M$o=o("FlaubertForSequenceClassification"),E$o=o(" (FlauBERT model)"),C$o=l(),J1=a("li"),$fe=a("strong"),w$o=o("fnet"),A$o=o(" \u2014 "),lG=a("a"),y$o=o("FNetForSequenceClassification"),L$o=o(" (FNet model)"),x$o=l(),Y1=a("li"),kfe=a("strong"),$$o=o("funnel"),k$o=o(" \u2014 "),iG=a("a"),S$o=o("FunnelForSequenceClassification"),R$o=o(" (Funnel Transformer model)"),P$o=l(),K1=a("li"),Sfe=a("strong"),B$o=o("gpt2"),I$o=o(" \u2014 "),dG=a("a"),q$o=o("GPT2ForSequenceClassification"),N$o=o(" (OpenAI GPT-2 model)"),j$o=l(),Z1=a("li"),Rfe=a("strong"),D$o=o("gpt_neo"),G$o=o(" \u2014 "),cG=a("a"),O$o=o("GPTNeoForSequenceClassification"),V$o=o(" (GPT Neo model)"),X$o=l(),eb=a("li"),Pfe=a("strong"),z$o=o("gptj"),W$o=o(" \u2014 "),fG=a("a"),Q$o=o("GPTJForSequenceClassification"),H$o=o(" (GPT-J model)"),U$o=l(),ob=a("li"),Bfe=a("strong"),J$o=o("ibert"),Y$o=o(" \u2014 "),mG=a("a"),K$o=o("IBertForSequenceClassification"),Z$o=o(" (I-BERT model)"),eko=l(),rb=a("li"),Ife=a("strong"),oko=o("layoutlm"),rko=o(" \u2014 "),gG=a("a"),tko=o("LayoutLMForSequenceClassification"),ako=o(" (LayoutLM model)"),nko=l(),tb=a("li"),qfe=a("strong"),sko=o("layoutlmv2"),lko=o(" \u2014 "),hG=a("a"),iko=o("LayoutLMv2ForSequenceClassification"),dko=o(" (LayoutLMv2 model)"),cko=l(),ab=a("li"),Nfe=a("strong"),fko=o("layoutlmv3"),mko=o(" \u2014 "),pG=a("a"),gko=o("LayoutLMv3ForSequenceClassification"),hko=o(" (LayoutLMv3 model)"),pko=l(),nb=a("li"),jfe=a("strong"),uko=o("led"),_ko=o(" \u2014 "),uG=a("a"),bko=o("LEDForSequenceClassification"),vko=o(" (LED model)"),Fko=l(),sb=a("li"),Dfe=a("strong"),Tko=o("longformer"),Mko=o(" \u2014 "),_G=a("a"),Eko=o("LongformerForSequenceClassification"),Cko=o(" (Longformer model)"),wko=l(),lb=a("li"),Gfe=a("strong"),Ako=o("mbart"),yko=o(" \u2014 "),bG=a("a"),Lko=o("MBartForSequenceClassification"),xko=o(" (mBART model)"),$ko=l(),ib=a("li"),Ofe=a("strong"),kko=o("megatron-bert"),Sko=o(" \u2014 "),vG=a("a"),Rko=o("MegatronBertForSequenceClassification"),Pko=o(" (MegatronBert model)"),Bko=l(),db=a("li"),Vfe=a("strong"),Iko=o("mobilebert"),qko=o(" \u2014 "),FG=a("a"),Nko=o("MobileBertForSequenceClassification"),jko=o(" (MobileBERT model)"),Dko=l(),cb=a("li"),Xfe=a("strong"),Gko=o("mpnet"),Oko=o(" \u2014 "),TG=a("a"),Vko=o("MPNetForSequenceClassification"),Xko=o(" (MPNet model)"),zko=l(),fb=a("li"),zfe=a("strong"),Wko=o("nystromformer"),Qko=o(" \u2014 "),MG=a("a"),Hko=o("NystromformerForSequenceClassification"),Uko=o(" (Nystromformer model)"),Jko=l(),mb=a("li"),Wfe=a("strong"),Yko=o("openai-gpt"),Kko=o(" \u2014 "),EG=a("a"),Zko=o("OpenAIGPTForSequenceClassification"),eSo=o(" (OpenAI GPT model)"),oSo=l(),gb=a("li"),Qfe=a("strong"),rSo=o("perceiver"),tSo=o(" \u2014 "),CG=a("a"),aSo=o("PerceiverForSequenceClassification"),nSo=o(" (Perceiver model)"),sSo=l(),hb=a("li"),Hfe=a("strong"),lSo=o("plbart"),iSo=o(" \u2014 "),wG=a("a"),dSo=o("PLBartForSequenceClassification"),cSo=o(" (PLBart model)"),fSo=l(),pb=a("li"),Ufe=a("strong"),mSo=o("qdqbert"),gSo=o(" \u2014 "),AG=a("a"),hSo=o("QDQBertForSequenceClassification"),pSo=o(" (QDQBert model)"),uSo=l(),ub=a("li"),Jfe=a("strong"),_So=o("reformer"),bSo=o(" \u2014 "),yG=a("a"),vSo=o("ReformerForSequenceClassification"),FSo=o(" (Reformer model)"),TSo=l(),_b=a("li"),Yfe=a("strong"),MSo=o("rembert"),ESo=o(" \u2014 "),LG=a("a"),CSo=o("RemBertForSequenceClassification"),wSo=o(" (RemBERT model)"),ASo=l(),bb=a("li"),Kfe=a("strong"),ySo=o("roberta"),LSo=o(" \u2014 "),xG=a("a"),xSo=o("RobertaForSequenceClassification"),$So=o(" (RoBERTa model)"),kSo=l(),vb=a("li"),Zfe=a("strong"),SSo=o("roformer"),RSo=o(" \u2014 "),$G=a("a"),PSo=o("RoFormerForSequenceClassification"),BSo=o(" (RoFormer model)"),ISo=l(),Fb=a("li"),eme=a("strong"),qSo=o("squeezebert"),NSo=o(" \u2014 "),kG=a("a"),jSo=o("SqueezeBertForSequenceClassification"),DSo=o(" (SqueezeBERT model)"),GSo=l(),Tb=a("li"),ome=a("strong"),OSo=o("tapas"),VSo=o(" \u2014 "),SG=a("a"),XSo=o("TapasForSequenceClassification"),zSo=o(" (TAPAS model)"),WSo=l(),Mb=a("li"),rme=a("strong"),QSo=o("transfo-xl"),HSo=o(" \u2014 "),RG=a("a"),USo=o("TransfoXLForSequenceClassification"),JSo=o(" (Transformer-XL model)"),YSo=l(),Eb=a("li"),tme=a("strong"),KSo=o("xlm"),ZSo=o(" \u2014 "),PG=a("a"),eRo=o("XLMForSequenceClassification"),oRo=o(" (XLM model)"),rRo=l(),Cb=a("li"),ame=a("strong"),tRo=o("xlm-roberta"),aRo=o(" \u2014 "),BG=a("a"),nRo=o("XLMRobertaForSequenceClassification"),sRo=o(" (XLM-RoBERTa model)"),lRo=l(),wb=a("li"),nme=a("strong"),iRo=o("xlm-roberta-xl"),dRo=o(" \u2014 "),IG=a("a"),cRo=o("XLMRobertaXLForSequenceClassification"),fRo=o(" (XLM-RoBERTa-XL model)"),mRo=l(),Ab=a("li"),sme=a("strong"),gRo=o("xlnet"),hRo=o(" \u2014 "),qG=a("a"),pRo=o("XLNetForSequenceClassification"),uRo=o(" (XLNet model)"),_Ro=l(),yb=a("li"),lme=a("strong"),bRo=o("yoso"),vRo=o(" \u2014 "),NG=a("a"),FRo=o("YosoForSequenceClassification"),TRo=o(" (YOSO model)"),MRo=l(),Lb=a("p"),ERo=o("The model is set in evaluation mode by default using "),ime=a("code"),CRo=o("model.eval()"),wRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=a("code"),ARo=o("model.train()"),yRo=l(),F(xb.$$.fragment),Gqe=l(),Vi=a("h2"),$b=a("a"),cme=a("span"),F(Fy.$$.fragment),LRo=l(),fme=a("span"),xRo=o("AutoModelForMultipleChoice"),Oqe=l(),Po=a("div"),F(Ty.$$.fragment),$Ro=l(),Xi=a("p"),kRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jG=a("a"),SRo=o("from_pretrained()"),RRo=o(" class method or the "),DG=a("a"),PRo=o("from_config()"),BRo=o(` class
method.`),IRo=l(),My=a("p"),qRo=o("This class cannot be instantiated directly using "),mme=a("code"),NRo=o("__init__()"),jRo=o(" (throws an error)."),DRo=l(),dt=a("div"),F(Ey.$$.fragment),GRo=l(),gme=a("p"),ORo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VRo=l(),zi=a("p"),XRo=o(`Note:
Loading a model from its configuration file does `),hme=a("strong"),zRo=o("not"),WRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),QRo=o("from_pretrained()"),HRo=o(" to load the model weights."),URo=l(),F(kb.$$.fragment),JRo=l(),ro=a("div"),F(Cy.$$.fragment),YRo=l(),pme=a("p"),KRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZRo=l(),Pa=a("p"),ePo=o("The model class to instantiate is selected based on the "),ume=a("code"),oPo=o("model_type"),rPo=o(` property of the config object (either
passed as an argument or loaded from `),_me=a("code"),tPo=o("pretrained_model_name_or_path"),aPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),nPo=o("pretrained_model_name_or_path"),sPo=o(":"),lPo=l(),Y=a("ul"),Sb=a("li"),vme=a("strong"),iPo=o("albert"),dPo=o(" \u2014 "),OG=a("a"),cPo=o("AlbertForMultipleChoice"),fPo=o(" (ALBERT model)"),mPo=l(),Rb=a("li"),Fme=a("strong"),gPo=o("bert"),hPo=o(" \u2014 "),VG=a("a"),pPo=o("BertForMultipleChoice"),uPo=o(" (BERT model)"),_Po=l(),Pb=a("li"),Tme=a("strong"),bPo=o("big_bird"),vPo=o(" \u2014 "),XG=a("a"),FPo=o("BigBirdForMultipleChoice"),TPo=o(" (BigBird model)"),MPo=l(),Bb=a("li"),Mme=a("strong"),EPo=o("camembert"),CPo=o(" \u2014 "),zG=a("a"),wPo=o("CamembertForMultipleChoice"),APo=o(" (CamemBERT model)"),yPo=l(),Ib=a("li"),Eme=a("strong"),LPo=o("canine"),xPo=o(" \u2014 "),WG=a("a"),$Po=o("CanineForMultipleChoice"),kPo=o(" (Canine model)"),SPo=l(),qb=a("li"),Cme=a("strong"),RPo=o("convbert"),PPo=o(" \u2014 "),QG=a("a"),BPo=o("ConvBertForMultipleChoice"),IPo=o(" (ConvBERT model)"),qPo=l(),Nb=a("li"),wme=a("strong"),NPo=o("data2vec-text"),jPo=o(" \u2014 "),HG=a("a"),DPo=o("Data2VecTextForMultipleChoice"),GPo=o(" (Data2VecText model)"),OPo=l(),jb=a("li"),Ame=a("strong"),VPo=o("deberta-v2"),XPo=o(" \u2014 "),UG=a("a"),zPo=o("DebertaV2ForMultipleChoice"),WPo=o(" (DeBERTa-v2 model)"),QPo=l(),Db=a("li"),yme=a("strong"),HPo=o("distilbert"),UPo=o(" \u2014 "),JG=a("a"),JPo=o("DistilBertForMultipleChoice"),YPo=o(" (DistilBERT model)"),KPo=l(),Gb=a("li"),Lme=a("strong"),ZPo=o("electra"),eBo=o(" \u2014 "),YG=a("a"),oBo=o("ElectraForMultipleChoice"),rBo=o(" (ELECTRA model)"),tBo=l(),Ob=a("li"),xme=a("strong"),aBo=o("flaubert"),nBo=o(" \u2014 "),KG=a("a"),sBo=o("FlaubertForMultipleChoice"),lBo=o(" (FlauBERT model)"),iBo=l(),Vb=a("li"),$me=a("strong"),dBo=o("fnet"),cBo=o(" \u2014 "),ZG=a("a"),fBo=o("FNetForMultipleChoice"),mBo=o(" (FNet model)"),gBo=l(),Xb=a("li"),kme=a("strong"),hBo=o("funnel"),pBo=o(" \u2014 "),eO=a("a"),uBo=o("FunnelForMultipleChoice"),_Bo=o(" (Funnel Transformer model)"),bBo=l(),zb=a("li"),Sme=a("strong"),vBo=o("ibert"),FBo=o(" \u2014 "),oO=a("a"),TBo=o("IBertForMultipleChoice"),MBo=o(" (I-BERT model)"),EBo=l(),Wb=a("li"),Rme=a("strong"),CBo=o("longformer"),wBo=o(" \u2014 "),rO=a("a"),ABo=o("LongformerForMultipleChoice"),yBo=o(" (Longformer model)"),LBo=l(),Qb=a("li"),Pme=a("strong"),xBo=o("megatron-bert"),$Bo=o(" \u2014 "),tO=a("a"),kBo=o("MegatronBertForMultipleChoice"),SBo=o(" (MegatronBert model)"),RBo=l(),Hb=a("li"),Bme=a("strong"),PBo=o("mobilebert"),BBo=o(" \u2014 "),aO=a("a"),IBo=o("MobileBertForMultipleChoice"),qBo=o(" (MobileBERT model)"),NBo=l(),Ub=a("li"),Ime=a("strong"),jBo=o("mpnet"),DBo=o(" \u2014 "),nO=a("a"),GBo=o("MPNetForMultipleChoice"),OBo=o(" (MPNet model)"),VBo=l(),Jb=a("li"),qme=a("strong"),XBo=o("nystromformer"),zBo=o(" \u2014 "),sO=a("a"),WBo=o("NystromformerForMultipleChoice"),QBo=o(" (Nystromformer model)"),HBo=l(),Yb=a("li"),Nme=a("strong"),UBo=o("qdqbert"),JBo=o(" \u2014 "),lO=a("a"),YBo=o("QDQBertForMultipleChoice"),KBo=o(" (QDQBert model)"),ZBo=l(),Kb=a("li"),jme=a("strong"),eIo=o("rembert"),oIo=o(" \u2014 "),iO=a("a"),rIo=o("RemBertForMultipleChoice"),tIo=o(" (RemBERT model)"),aIo=l(),Zb=a("li"),Dme=a("strong"),nIo=o("roberta"),sIo=o(" \u2014 "),dO=a("a"),lIo=o("RobertaForMultipleChoice"),iIo=o(" (RoBERTa model)"),dIo=l(),e2=a("li"),Gme=a("strong"),cIo=o("roformer"),fIo=o(" \u2014 "),cO=a("a"),mIo=o("RoFormerForMultipleChoice"),gIo=o(" (RoFormer model)"),hIo=l(),o2=a("li"),Ome=a("strong"),pIo=o("squeezebert"),uIo=o(" \u2014 "),fO=a("a"),_Io=o("SqueezeBertForMultipleChoice"),bIo=o(" (SqueezeBERT model)"),vIo=l(),r2=a("li"),Vme=a("strong"),FIo=o("xlm"),TIo=o(" \u2014 "),mO=a("a"),MIo=o("XLMForMultipleChoice"),EIo=o(" (XLM model)"),CIo=l(),t2=a("li"),Xme=a("strong"),wIo=o("xlm-roberta"),AIo=o(" \u2014 "),gO=a("a"),yIo=o("XLMRobertaForMultipleChoice"),LIo=o(" (XLM-RoBERTa model)"),xIo=l(),a2=a("li"),zme=a("strong"),$Io=o("xlm-roberta-xl"),kIo=o(" \u2014 "),hO=a("a"),SIo=o("XLMRobertaXLForMultipleChoice"),RIo=o(" (XLM-RoBERTa-XL model)"),PIo=l(),n2=a("li"),Wme=a("strong"),BIo=o("xlnet"),IIo=o(" \u2014 "),pO=a("a"),qIo=o("XLNetForMultipleChoice"),NIo=o(" (XLNet model)"),jIo=l(),s2=a("li"),Qme=a("strong"),DIo=o("yoso"),GIo=o(" \u2014 "),uO=a("a"),OIo=o("YosoForMultipleChoice"),VIo=o(" (YOSO model)"),XIo=l(),l2=a("p"),zIo=o("The model is set in evaluation mode by default using "),Hme=a("code"),WIo=o("model.eval()"),QIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),HIo=o("model.train()"),UIo=l(),F(i2.$$.fragment),Vqe=l(),Wi=a("h2"),d2=a("a"),Jme=a("span"),F(wy.$$.fragment),JIo=l(),Yme=a("span"),YIo=o("AutoModelForNextSentencePrediction"),Xqe=l(),Bo=a("div"),F(Ay.$$.fragment),KIo=l(),Qi=a("p"),ZIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_O=a("a"),eqo=o("from_pretrained()"),oqo=o(" class method or the "),bO=a("a"),rqo=o("from_config()"),tqo=o(` class
method.`),aqo=l(),yy=a("p"),nqo=o("This class cannot be instantiated directly using "),Kme=a("code"),sqo=o("__init__()"),lqo=o(" (throws an error)."),iqo=l(),ct=a("div"),F(Ly.$$.fragment),dqo=l(),Zme=a("p"),cqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fqo=l(),Hi=a("p"),mqo=o(`Note:
Loading a model from its configuration file does `),ege=a("strong"),gqo=o("not"),hqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),pqo=o("from_pretrained()"),uqo=o(" to load the model weights."),_qo=l(),F(c2.$$.fragment),bqo=l(),to=a("div"),F(xy.$$.fragment),vqo=l(),oge=a("p"),Fqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Tqo=l(),Ba=a("p"),Mqo=o("The model class to instantiate is selected based on the "),rge=a("code"),Eqo=o("model_type"),Cqo=o(` property of the config object (either
passed as an argument or loaded from `),tge=a("code"),wqo=o("pretrained_model_name_or_path"),Aqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=a("code"),yqo=o("pretrained_model_name_or_path"),Lqo=o(":"),xqo=l(),Yr=a("ul"),f2=a("li"),nge=a("strong"),$qo=o("bert"),kqo=o(" \u2014 "),FO=a("a"),Sqo=o("BertForNextSentencePrediction"),Rqo=o(" (BERT model)"),Pqo=l(),m2=a("li"),sge=a("strong"),Bqo=o("fnet"),Iqo=o(" \u2014 "),TO=a("a"),qqo=o("FNetForNextSentencePrediction"),Nqo=o(" (FNet model)"),jqo=l(),g2=a("li"),lge=a("strong"),Dqo=o("megatron-bert"),Gqo=o(" \u2014 "),MO=a("a"),Oqo=o("MegatronBertForNextSentencePrediction"),Vqo=o(" (MegatronBert model)"),Xqo=l(),h2=a("li"),ige=a("strong"),zqo=o("mobilebert"),Wqo=o(" \u2014 "),EO=a("a"),Qqo=o("MobileBertForNextSentencePrediction"),Hqo=o(" (MobileBERT model)"),Uqo=l(),p2=a("li"),dge=a("strong"),Jqo=o("qdqbert"),Yqo=o(" \u2014 "),CO=a("a"),Kqo=o("QDQBertForNextSentencePrediction"),Zqo=o(" (QDQBert model)"),eNo=l(),u2=a("p"),oNo=o("The model is set in evaluation mode by default using "),cge=a("code"),rNo=o("model.eval()"),tNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=a("code"),aNo=o("model.train()"),nNo=l(),F(_2.$$.fragment),zqe=l(),Ui=a("h2"),b2=a("a"),mge=a("span"),F($y.$$.fragment),sNo=l(),gge=a("span"),lNo=o("AutoModelForTokenClassification"),Wqe=l(),Io=a("div"),F(ky.$$.fragment),iNo=l(),Ji=a("p"),dNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wO=a("a"),cNo=o("from_pretrained()"),fNo=o(" class method or the "),AO=a("a"),mNo=o("from_config()"),gNo=o(` class
method.`),hNo=l(),Sy=a("p"),pNo=o("This class cannot be instantiated directly using "),hge=a("code"),uNo=o("__init__()"),_No=o(" (throws an error)."),bNo=l(),ft=a("div"),F(Ry.$$.fragment),vNo=l(),pge=a("p"),FNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TNo=l(),Yi=a("p"),MNo=o(`Note:
Loading a model from its configuration file does `),uge=a("strong"),ENo=o("not"),CNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),wNo=o("from_pretrained()"),ANo=o(" to load the model weights."),yNo=l(),F(v2.$$.fragment),LNo=l(),ao=a("div"),F(Py.$$.fragment),xNo=l(),_ge=a("p"),$No=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kNo=l(),Ia=a("p"),SNo=o("The model class to instantiate is selected based on the "),bge=a("code"),RNo=o("model_type"),PNo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),BNo=o("pretrained_model_name_or_path"),INo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),qNo=o("pretrained_model_name_or_path"),NNo=o(":"),jNo=l(),H=a("ul"),F2=a("li"),Tge=a("strong"),DNo=o("albert"),GNo=o(" \u2014 "),LO=a("a"),ONo=o("AlbertForTokenClassification"),VNo=o(" (ALBERT model)"),XNo=l(),T2=a("li"),Mge=a("strong"),zNo=o("bert"),WNo=o(" \u2014 "),xO=a("a"),QNo=o("BertForTokenClassification"),HNo=o(" (BERT model)"),UNo=l(),M2=a("li"),Ege=a("strong"),JNo=o("big_bird"),YNo=o(" \u2014 "),$O=a("a"),KNo=o("BigBirdForTokenClassification"),ZNo=o(" (BigBird model)"),ejo=l(),E2=a("li"),Cge=a("strong"),ojo=o("camembert"),rjo=o(" \u2014 "),kO=a("a"),tjo=o("CamembertForTokenClassification"),ajo=o(" (CamemBERT model)"),njo=l(),C2=a("li"),wge=a("strong"),sjo=o("canine"),ljo=o(" \u2014 "),SO=a("a"),ijo=o("CanineForTokenClassification"),djo=o(" (Canine model)"),cjo=l(),w2=a("li"),Age=a("strong"),fjo=o("convbert"),mjo=o(" \u2014 "),RO=a("a"),gjo=o("ConvBertForTokenClassification"),hjo=o(" (ConvBERT model)"),pjo=l(),A2=a("li"),yge=a("strong"),ujo=o("data2vec-text"),_jo=o(" \u2014 "),PO=a("a"),bjo=o("Data2VecTextForTokenClassification"),vjo=o(" (Data2VecText model)"),Fjo=l(),y2=a("li"),Lge=a("strong"),Tjo=o("deberta"),Mjo=o(" \u2014 "),BO=a("a"),Ejo=o("DebertaForTokenClassification"),Cjo=o(" (DeBERTa model)"),wjo=l(),L2=a("li"),xge=a("strong"),Ajo=o("deberta-v2"),yjo=o(" \u2014 "),IO=a("a"),Ljo=o("DebertaV2ForTokenClassification"),xjo=o(" (DeBERTa-v2 model)"),$jo=l(),x2=a("li"),$ge=a("strong"),kjo=o("distilbert"),Sjo=o(" \u2014 "),qO=a("a"),Rjo=o("DistilBertForTokenClassification"),Pjo=o(" (DistilBERT model)"),Bjo=l(),$2=a("li"),kge=a("strong"),Ijo=o("electra"),qjo=o(" \u2014 "),NO=a("a"),Njo=o("ElectraForTokenClassification"),jjo=o(" (ELECTRA model)"),Djo=l(),k2=a("li"),Sge=a("strong"),Gjo=o("flaubert"),Ojo=o(" \u2014 "),jO=a("a"),Vjo=o("FlaubertForTokenClassification"),Xjo=o(" (FlauBERT model)"),zjo=l(),S2=a("li"),Rge=a("strong"),Wjo=o("fnet"),Qjo=o(" \u2014 "),DO=a("a"),Hjo=o("FNetForTokenClassification"),Ujo=o(" (FNet model)"),Jjo=l(),R2=a("li"),Pge=a("strong"),Yjo=o("funnel"),Kjo=o(" \u2014 "),GO=a("a"),Zjo=o("FunnelForTokenClassification"),eDo=o(" (Funnel Transformer model)"),oDo=l(),P2=a("li"),Bge=a("strong"),rDo=o("gpt2"),tDo=o(" \u2014 "),OO=a("a"),aDo=o("GPT2ForTokenClassification"),nDo=o(" (OpenAI GPT-2 model)"),sDo=l(),B2=a("li"),Ige=a("strong"),lDo=o("ibert"),iDo=o(" \u2014 "),VO=a("a"),dDo=o("IBertForTokenClassification"),cDo=o(" (I-BERT model)"),fDo=l(),I2=a("li"),qge=a("strong"),mDo=o("layoutlm"),gDo=o(" \u2014 "),XO=a("a"),hDo=o("LayoutLMForTokenClassification"),pDo=o(" (LayoutLM model)"),uDo=l(),q2=a("li"),Nge=a("strong"),_Do=o("layoutlmv2"),bDo=o(" \u2014 "),zO=a("a"),vDo=o("LayoutLMv2ForTokenClassification"),FDo=o(" (LayoutLMv2 model)"),TDo=l(),N2=a("li"),jge=a("strong"),MDo=o("layoutlmv3"),EDo=o(" \u2014 "),WO=a("a"),CDo=o("LayoutLMv3ForTokenClassification"),wDo=o(" (LayoutLMv3 model)"),ADo=l(),j2=a("li"),Dge=a("strong"),yDo=o("longformer"),LDo=o(" \u2014 "),QO=a("a"),xDo=o("LongformerForTokenClassification"),$Do=o(" (Longformer model)"),kDo=l(),D2=a("li"),Gge=a("strong"),SDo=o("megatron-bert"),RDo=o(" \u2014 "),HO=a("a"),PDo=o("MegatronBertForTokenClassification"),BDo=o(" (MegatronBert model)"),IDo=l(),G2=a("li"),Oge=a("strong"),qDo=o("mobilebert"),NDo=o(" \u2014 "),UO=a("a"),jDo=o("MobileBertForTokenClassification"),DDo=o(" (MobileBERT model)"),GDo=l(),O2=a("li"),Vge=a("strong"),ODo=o("mpnet"),VDo=o(" \u2014 "),JO=a("a"),XDo=o("MPNetForTokenClassification"),zDo=o(" (MPNet model)"),WDo=l(),V2=a("li"),Xge=a("strong"),QDo=o("nystromformer"),HDo=o(" \u2014 "),YO=a("a"),UDo=o("NystromformerForTokenClassification"),JDo=o(" (Nystromformer model)"),YDo=l(),X2=a("li"),zge=a("strong"),KDo=o("qdqbert"),ZDo=o(" \u2014 "),KO=a("a"),eGo=o("QDQBertForTokenClassification"),oGo=o(" (QDQBert model)"),rGo=l(),z2=a("li"),Wge=a("strong"),tGo=o("rembert"),aGo=o(" \u2014 "),ZO=a("a"),nGo=o("RemBertForTokenClassification"),sGo=o(" (RemBERT model)"),lGo=l(),W2=a("li"),Qge=a("strong"),iGo=o("roberta"),dGo=o(" \u2014 "),eV=a("a"),cGo=o("RobertaForTokenClassification"),fGo=o(" (RoBERTa model)"),mGo=l(),Q2=a("li"),Hge=a("strong"),gGo=o("roformer"),hGo=o(" \u2014 "),oV=a("a"),pGo=o("RoFormerForTokenClassification"),uGo=o(" (RoFormer model)"),_Go=l(),H2=a("li"),Uge=a("strong"),bGo=o("squeezebert"),vGo=o(" \u2014 "),rV=a("a"),FGo=o("SqueezeBertForTokenClassification"),TGo=o(" (SqueezeBERT model)"),MGo=l(),U2=a("li"),Jge=a("strong"),EGo=o("xlm"),CGo=o(" \u2014 "),tV=a("a"),wGo=o("XLMForTokenClassification"),AGo=o(" (XLM model)"),yGo=l(),J2=a("li"),Yge=a("strong"),LGo=o("xlm-roberta"),xGo=o(" \u2014 "),aV=a("a"),$Go=o("XLMRobertaForTokenClassification"),kGo=o(" (XLM-RoBERTa model)"),SGo=l(),Y2=a("li"),Kge=a("strong"),RGo=o("xlm-roberta-xl"),PGo=o(" \u2014 "),nV=a("a"),BGo=o("XLMRobertaXLForTokenClassification"),IGo=o(" (XLM-RoBERTa-XL model)"),qGo=l(),K2=a("li"),Zge=a("strong"),NGo=o("xlnet"),jGo=o(" \u2014 "),sV=a("a"),DGo=o("XLNetForTokenClassification"),GGo=o(" (XLNet model)"),OGo=l(),Z2=a("li"),ehe=a("strong"),VGo=o("yoso"),XGo=o(" \u2014 "),lV=a("a"),zGo=o("YosoForTokenClassification"),WGo=o(" (YOSO model)"),QGo=l(),ev=a("p"),HGo=o("The model is set in evaluation mode by default using "),ohe=a("code"),UGo=o("model.eval()"),JGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=a("code"),YGo=o("model.train()"),KGo=l(),F(ov.$$.fragment),Qqe=l(),Ki=a("h2"),rv=a("a"),the=a("span"),F(By.$$.fragment),ZGo=l(),ahe=a("span"),eOo=o("AutoModelForQuestionAnswering"),Hqe=l(),qo=a("div"),F(Iy.$$.fragment),oOo=l(),Zi=a("p"),rOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iV=a("a"),tOo=o("from_pretrained()"),aOo=o(" class method or the "),dV=a("a"),nOo=o("from_config()"),sOo=o(` class
method.`),lOo=l(),qy=a("p"),iOo=o("This class cannot be instantiated directly using "),nhe=a("code"),dOo=o("__init__()"),cOo=o(" (throws an error)."),fOo=l(),mt=a("div"),F(Ny.$$.fragment),mOo=l(),she=a("p"),gOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hOo=l(),ed=a("p"),pOo=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),uOo=o("not"),_Oo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),bOo=o("from_pretrained()"),vOo=o(" to load the model weights."),FOo=l(),F(tv.$$.fragment),TOo=l(),no=a("div"),F(jy.$$.fragment),MOo=l(),ihe=a("p"),EOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),COo=l(),qa=a("p"),wOo=o("The model class to instantiate is selected based on the "),dhe=a("code"),AOo=o("model_type"),yOo=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),LOo=o("pretrained_model_name_or_path"),xOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),$Oo=o("pretrained_model_name_or_path"),kOo=o(":"),SOo=l(),V=a("ul"),av=a("li"),mhe=a("strong"),ROo=o("albert"),POo=o(" \u2014 "),fV=a("a"),BOo=o("AlbertForQuestionAnswering"),IOo=o(" (ALBERT model)"),qOo=l(),nv=a("li"),ghe=a("strong"),NOo=o("bart"),jOo=o(" \u2014 "),mV=a("a"),DOo=o("BartForQuestionAnswering"),GOo=o(" (BART model)"),OOo=l(),sv=a("li"),hhe=a("strong"),VOo=o("bert"),XOo=o(" \u2014 "),gV=a("a"),zOo=o("BertForQuestionAnswering"),WOo=o(" (BERT model)"),QOo=l(),lv=a("li"),phe=a("strong"),HOo=o("big_bird"),UOo=o(" \u2014 "),hV=a("a"),JOo=o("BigBirdForQuestionAnswering"),YOo=o(" (BigBird model)"),KOo=l(),iv=a("li"),uhe=a("strong"),ZOo=o("bigbird_pegasus"),eVo=o(" \u2014 "),pV=a("a"),oVo=o("BigBirdPegasusForQuestionAnswering"),rVo=o(" (BigBirdPegasus model)"),tVo=l(),dv=a("li"),_he=a("strong"),aVo=o("camembert"),nVo=o(" \u2014 "),uV=a("a"),sVo=o("CamembertForQuestionAnswering"),lVo=o(" (CamemBERT model)"),iVo=l(),cv=a("li"),bhe=a("strong"),dVo=o("canine"),cVo=o(" \u2014 "),_V=a("a"),fVo=o("CanineForQuestionAnswering"),mVo=o(" (Canine model)"),gVo=l(),fv=a("li"),vhe=a("strong"),hVo=o("convbert"),pVo=o(" \u2014 "),bV=a("a"),uVo=o("ConvBertForQuestionAnswering"),_Vo=o(" (ConvBERT model)"),bVo=l(),mv=a("li"),Fhe=a("strong"),vVo=o("data2vec-text"),FVo=o(" \u2014 "),vV=a("a"),TVo=o("Data2VecTextForQuestionAnswering"),MVo=o(" (Data2VecText model)"),EVo=l(),gv=a("li"),The=a("strong"),CVo=o("deberta"),wVo=o(" \u2014 "),FV=a("a"),AVo=o("DebertaForQuestionAnswering"),yVo=o(" (DeBERTa model)"),LVo=l(),hv=a("li"),Mhe=a("strong"),xVo=o("deberta-v2"),$Vo=o(" \u2014 "),TV=a("a"),kVo=o("DebertaV2ForQuestionAnswering"),SVo=o(" (DeBERTa-v2 model)"),RVo=l(),pv=a("li"),Ehe=a("strong"),PVo=o("distilbert"),BVo=o(" \u2014 "),MV=a("a"),IVo=o("DistilBertForQuestionAnswering"),qVo=o(" (DistilBERT model)"),NVo=l(),uv=a("li"),Che=a("strong"),jVo=o("electra"),DVo=o(" \u2014 "),EV=a("a"),GVo=o("ElectraForQuestionAnswering"),OVo=o(" (ELECTRA model)"),VVo=l(),_v=a("li"),whe=a("strong"),XVo=o("flaubert"),zVo=o(" \u2014 "),CV=a("a"),WVo=o("FlaubertForQuestionAnsweringSimple"),QVo=o(" (FlauBERT model)"),HVo=l(),bv=a("li"),Ahe=a("strong"),UVo=o("fnet"),JVo=o(" \u2014 "),wV=a("a"),YVo=o("FNetForQuestionAnswering"),KVo=o(" (FNet model)"),ZVo=l(),vv=a("li"),yhe=a("strong"),eXo=o("funnel"),oXo=o(" \u2014 "),AV=a("a"),rXo=o("FunnelForQuestionAnswering"),tXo=o(" (Funnel Transformer model)"),aXo=l(),Fv=a("li"),Lhe=a("strong"),nXo=o("gptj"),sXo=o(" \u2014 "),yV=a("a"),lXo=o("GPTJForQuestionAnswering"),iXo=o(" (GPT-J model)"),dXo=l(),Tv=a("li"),xhe=a("strong"),cXo=o("ibert"),fXo=o(" \u2014 "),LV=a("a"),mXo=o("IBertForQuestionAnswering"),gXo=o(" (I-BERT model)"),hXo=l(),Mv=a("li"),$he=a("strong"),pXo=o("layoutlmv2"),uXo=o(" \u2014 "),xV=a("a"),_Xo=o("LayoutLMv2ForQuestionAnswering"),bXo=o(" (LayoutLMv2 model)"),vXo=l(),Ev=a("li"),khe=a("strong"),FXo=o("layoutlmv3"),TXo=o(" \u2014 "),$V=a("a"),MXo=o("LayoutLMv3ForQuestionAnswering"),EXo=o(" (LayoutLMv3 model)"),CXo=l(),Cv=a("li"),She=a("strong"),wXo=o("led"),AXo=o(" \u2014 "),kV=a("a"),yXo=o("LEDForQuestionAnswering"),LXo=o(" (LED model)"),xXo=l(),wv=a("li"),Rhe=a("strong"),$Xo=o("longformer"),kXo=o(" \u2014 "),SV=a("a"),SXo=o("LongformerForQuestionAnswering"),RXo=o(" (Longformer model)"),PXo=l(),Av=a("li"),Phe=a("strong"),BXo=o("lxmert"),IXo=o(" \u2014 "),RV=a("a"),qXo=o("LxmertForQuestionAnswering"),NXo=o(" (LXMERT model)"),jXo=l(),yv=a("li"),Bhe=a("strong"),DXo=o("mbart"),GXo=o(" \u2014 "),PV=a("a"),OXo=o("MBartForQuestionAnswering"),VXo=o(" (mBART model)"),XXo=l(),Lv=a("li"),Ihe=a("strong"),zXo=o("megatron-bert"),WXo=o(" \u2014 "),BV=a("a"),QXo=o("MegatronBertForQuestionAnswering"),HXo=o(" (MegatronBert model)"),UXo=l(),xv=a("li"),qhe=a("strong"),JXo=o("mobilebert"),YXo=o(" \u2014 "),IV=a("a"),KXo=o("MobileBertForQuestionAnswering"),ZXo=o(" (MobileBERT model)"),ezo=l(),$v=a("li"),Nhe=a("strong"),ozo=o("mpnet"),rzo=o(" \u2014 "),qV=a("a"),tzo=o("MPNetForQuestionAnswering"),azo=o(" (MPNet model)"),nzo=l(),kv=a("li"),jhe=a("strong"),szo=o("nystromformer"),lzo=o(" \u2014 "),NV=a("a"),izo=o("NystromformerForQuestionAnswering"),dzo=o(" (Nystromformer model)"),czo=l(),Sv=a("li"),Dhe=a("strong"),fzo=o("qdqbert"),mzo=o(" \u2014 "),jV=a("a"),gzo=o("QDQBertForQuestionAnswering"),hzo=o(" (QDQBert model)"),pzo=l(),Rv=a("li"),Ghe=a("strong"),uzo=o("reformer"),_zo=o(" \u2014 "),DV=a("a"),bzo=o("ReformerForQuestionAnswering"),vzo=o(" (Reformer model)"),Fzo=l(),Pv=a("li"),Ohe=a("strong"),Tzo=o("rembert"),Mzo=o(" \u2014 "),GV=a("a"),Ezo=o("RemBertForQuestionAnswering"),Czo=o(" (RemBERT model)"),wzo=l(),Bv=a("li"),Vhe=a("strong"),Azo=o("roberta"),yzo=o(" \u2014 "),OV=a("a"),Lzo=o("RobertaForQuestionAnswering"),xzo=o(" (RoBERTa model)"),$zo=l(),Iv=a("li"),Xhe=a("strong"),kzo=o("roformer"),Szo=o(" \u2014 "),VV=a("a"),Rzo=o("RoFormerForQuestionAnswering"),Pzo=o(" (RoFormer model)"),Bzo=l(),qv=a("li"),zhe=a("strong"),Izo=o("splinter"),qzo=o(" \u2014 "),XV=a("a"),Nzo=o("SplinterForQuestionAnswering"),jzo=o(" (Splinter model)"),Dzo=l(),Nv=a("li"),Whe=a("strong"),Gzo=o("squeezebert"),Ozo=o(" \u2014 "),zV=a("a"),Vzo=o("SqueezeBertForQuestionAnswering"),Xzo=o(" (SqueezeBERT model)"),zzo=l(),jv=a("li"),Qhe=a("strong"),Wzo=o("xlm"),Qzo=o(" \u2014 "),WV=a("a"),Hzo=o("XLMForQuestionAnsweringSimple"),Uzo=o(" (XLM model)"),Jzo=l(),Dv=a("li"),Hhe=a("strong"),Yzo=o("xlm-roberta"),Kzo=o(" \u2014 "),QV=a("a"),Zzo=o("XLMRobertaForQuestionAnswering"),eWo=o(" (XLM-RoBERTa model)"),oWo=l(),Gv=a("li"),Uhe=a("strong"),rWo=o("xlm-roberta-xl"),tWo=o(" \u2014 "),HV=a("a"),aWo=o("XLMRobertaXLForQuestionAnswering"),nWo=o(" (XLM-RoBERTa-XL model)"),sWo=l(),Ov=a("li"),Jhe=a("strong"),lWo=o("xlnet"),iWo=o(" \u2014 "),UV=a("a"),dWo=o("XLNetForQuestionAnsweringSimple"),cWo=o(" (XLNet model)"),fWo=l(),Vv=a("li"),Yhe=a("strong"),mWo=o("yoso"),gWo=o(" \u2014 "),JV=a("a"),hWo=o("YosoForQuestionAnswering"),pWo=o(" (YOSO model)"),uWo=l(),Xv=a("p"),_Wo=o("The model is set in evaluation mode by default using "),Khe=a("code"),bWo=o("model.eval()"),vWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),FWo=o("model.train()"),TWo=l(),F(zv.$$.fragment),Uqe=l(),od=a("h2"),Wv=a("a"),epe=a("span"),F(Dy.$$.fragment),MWo=l(),ope=a("span"),EWo=o("AutoModelForTableQuestionAnswering"),Jqe=l(),No=a("div"),F(Gy.$$.fragment),CWo=l(),rd=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YV=a("a"),AWo=o("from_pretrained()"),yWo=o(" class method or the "),KV=a("a"),LWo=o("from_config()"),xWo=o(` class
method.`),$Wo=l(),Oy=a("p"),kWo=o("This class cannot be instantiated directly using "),rpe=a("code"),SWo=o("__init__()"),RWo=o(" (throws an error)."),PWo=l(),gt=a("div"),F(Vy.$$.fragment),BWo=l(),tpe=a("p"),IWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qWo=l(),td=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),jWo=o("not"),DWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),GWo=o("from_pretrained()"),OWo=o(" to load the model weights."),VWo=l(),F(Qv.$$.fragment),XWo=l(),so=a("div"),F(Xy.$$.fragment),zWo=l(),npe=a("p"),WWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),QWo=l(),Na=a("p"),HWo=o("The model class to instantiate is selected based on the "),spe=a("code"),UWo=o("model_type"),JWo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),YWo=o("pretrained_model_name_or_path"),KWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),ZWo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),dpe=a("ul"),Hv=a("li"),cpe=a("strong"),rQo=o("tapas"),tQo=o(" \u2014 "),eX=a("a"),aQo=o("TapasForQuestionAnswering"),nQo=o(" (TAPAS model)"),sQo=l(),Uv=a("p"),lQo=o("The model is set in evaluation mode by default using "),fpe=a("code"),iQo=o("model.eval()"),dQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),cQo=o("model.train()"),fQo=l(),F(Jv.$$.fragment),Yqe=l(),ad=a("h2"),Yv=a("a"),gpe=a("span"),F(zy.$$.fragment),mQo=l(),hpe=a("span"),gQo=o("AutoModelForImageClassification"),Kqe=l(),jo=a("div"),F(Wy.$$.fragment),hQo=l(),nd=a("p"),pQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oX=a("a"),uQo=o("from_pretrained()"),_Qo=o(" class method or the "),rX=a("a"),bQo=o("from_config()"),vQo=o(` class
method.`),FQo=l(),Qy=a("p"),TQo=o("This class cannot be instantiated directly using "),ppe=a("code"),MQo=o("__init__()"),EQo=o(" (throws an error)."),CQo=l(),ht=a("div"),F(Hy.$$.fragment),wQo=l(),upe=a("p"),AQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yQo=l(),sd=a("p"),LQo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),xQo=o("not"),$Qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),kQo=o("from_pretrained()"),SQo=o(" to load the model weights."),RQo=l(),F(Kv.$$.fragment),PQo=l(),lo=a("div"),F(Uy.$$.fragment),BQo=l(),bpe=a("p"),IQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qQo=l(),ja=a("p"),NQo=o("The model class to instantiate is selected based on the "),vpe=a("code"),jQo=o("model_type"),DQo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),GQo=o("pretrained_model_name_or_path"),OQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(":"),zQo=l(),Fe=a("ul"),Zv=a("li"),Mpe=a("strong"),WQo=o("beit"),QQo=o(" \u2014 "),aX=a("a"),HQo=o("BeitForImageClassification"),UQo=o(" (BEiT model)"),JQo=l(),eF=a("li"),Epe=a("strong"),YQo=o("convnext"),KQo=o(" \u2014 "),nX=a("a"),ZQo=o("ConvNextForImageClassification"),eHo=o(" (ConvNext model)"),oHo=l(),oF=a("li"),Cpe=a("strong"),rHo=o("data2vec-vision"),tHo=o(" \u2014 "),sX=a("a"),aHo=o("Data2VecVisionForImageClassification"),nHo=o(" (Data2VecVision model)"),sHo=l(),Bs=a("li"),wpe=a("strong"),lHo=o("deit"),iHo=o(" \u2014 "),lX=a("a"),dHo=o("DeiTForImageClassification"),cHo=o(" or "),iX=a("a"),fHo=o("DeiTForImageClassificationWithTeacher"),mHo=o(" (DeiT model)"),gHo=l(),rF=a("li"),Ape=a("strong"),hHo=o("imagegpt"),pHo=o(" \u2014 "),dX=a("a"),uHo=o("ImageGPTForImageClassification"),_Ho=o(" (ImageGPT model)"),bHo=l(),pt=a("li"),ype=a("strong"),vHo=o("perceiver"),FHo=o(" \u2014 "),cX=a("a"),THo=o("PerceiverForImageClassificationLearned"),MHo=o(" or "),fX=a("a"),EHo=o("PerceiverForImageClassificationFourier"),CHo=o(" or "),mX=a("a"),wHo=o("PerceiverForImageClassificationConvProcessing"),AHo=o(" (Perceiver model)"),yHo=l(),tF=a("li"),Lpe=a("strong"),LHo=o("poolformer"),xHo=o(" \u2014 "),gX=a("a"),$Ho=o("PoolFormerForImageClassification"),kHo=o(" (PoolFormer model)"),SHo=l(),aF=a("li"),xpe=a("strong"),RHo=o("regnet"),PHo=o(" \u2014 "),hX=a("a"),BHo=o("RegNetForImageClassification"),IHo=o(" (RegNet model)"),qHo=l(),nF=a("li"),$pe=a("strong"),NHo=o("resnet"),jHo=o(" \u2014 "),pX=a("a"),DHo=o("ResNetForImageClassification"),GHo=o(" (ResNet model)"),OHo=l(),sF=a("li"),kpe=a("strong"),VHo=o("segformer"),XHo=o(" \u2014 "),uX=a("a"),zHo=o("SegformerForImageClassification"),WHo=o(" (SegFormer model)"),QHo=l(),lF=a("li"),Spe=a("strong"),HHo=o("swin"),UHo=o(" \u2014 "),_X=a("a"),JHo=o("SwinForImageClassification"),YHo=o(" (Swin model)"),KHo=l(),iF=a("li"),Rpe=a("strong"),ZHo=o("van"),eUo=o(" \u2014 "),bX=a("a"),oUo=o("VanForImageClassification"),rUo=o(" (VAN model)"),tUo=l(),dF=a("li"),Ppe=a("strong"),aUo=o("vit"),nUo=o(" \u2014 "),vX=a("a"),sUo=o("ViTForImageClassification"),lUo=o(" (ViT model)"),iUo=l(),cF=a("p"),dUo=o("The model is set in evaluation mode by default using "),Bpe=a("code"),cUo=o("model.eval()"),fUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),mUo=o("model.train()"),gUo=l(),F(fF.$$.fragment),Zqe=l(),ld=a("h2"),mF=a("a"),qpe=a("span"),F(Jy.$$.fragment),hUo=l(),Npe=a("span"),pUo=o("AutoModelForVision2Seq"),eNe=l(),Do=a("div"),F(Yy.$$.fragment),uUo=l(),id=a("p"),_Uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FX=a("a"),bUo=o("from_pretrained()"),vUo=o(" class method or the "),TX=a("a"),FUo=o("from_config()"),TUo=o(` class
method.`),MUo=l(),Ky=a("p"),EUo=o("This class cannot be instantiated directly using "),jpe=a("code"),CUo=o("__init__()"),wUo=o(" (throws an error)."),AUo=l(),ut=a("div"),F(Zy.$$.fragment),yUo=l(),Dpe=a("p"),LUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xUo=l(),dd=a("p"),$Uo=o(`Note:
Loading a model from its configuration file does `),Gpe=a("strong"),kUo=o("not"),SUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),RUo=o("from_pretrained()"),PUo=o(" to load the model weights."),BUo=l(),F(gF.$$.fragment),IUo=l(),io=a("div"),F(eL.$$.fragment),qUo=l(),Ope=a("p"),NUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jUo=l(),Da=a("p"),DUo=o("The model class to instantiate is selected based on the "),Vpe=a("code"),GUo=o("model_type"),OUo=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),VUo=o("pretrained_model_name_or_path"),XUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),zUo=o("pretrained_model_name_or_path"),WUo=o(":"),QUo=l(),Wpe=a("ul"),hF=a("li"),Qpe=a("strong"),HUo=o("vision-encoder-decoder"),UUo=o(" \u2014 "),EX=a("a"),JUo=o("VisionEncoderDecoderModel"),YUo=o(" (Vision Encoder decoder model)"),KUo=l(),pF=a("p"),ZUo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),eJo=o("model.eval()"),oJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),rJo=o("model.train()"),tJo=l(),F(uF.$$.fragment),oNe=l(),cd=a("h2"),_F=a("a"),Jpe=a("span"),F(oL.$$.fragment),aJo=l(),Ype=a("span"),nJo=o("AutoModelForAudioClassification"),rNe=l(),Go=a("div"),F(rL.$$.fragment),sJo=l(),fd=a("p"),lJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CX=a("a"),iJo=o("from_pretrained()"),dJo=o(" class method or the "),wX=a("a"),cJo=o("from_config()"),fJo=o(` class
method.`),mJo=l(),tL=a("p"),gJo=o("This class cannot be instantiated directly using "),Kpe=a("code"),hJo=o("__init__()"),pJo=o(" (throws an error)."),uJo=l(),_t=a("div"),F(aL.$$.fragment),_Jo=l(),Zpe=a("p"),bJo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vJo=l(),md=a("p"),FJo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),TJo=o("not"),MJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),EJo=o("from_pretrained()"),CJo=o(" to load the model weights."),wJo=l(),F(bF.$$.fragment),AJo=l(),co=a("div"),F(nL.$$.fragment),yJo=l(),oue=a("p"),LJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xJo=l(),Ga=a("p"),$Jo=o("The model class to instantiate is selected based on the "),rue=a("code"),kJo=o("model_type"),SJo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),RJo=o("pretrained_model_name_or_path"),PJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),BJo=o("pretrained_model_name_or_path"),IJo=o(":"),qJo=l(),ke=a("ul"),vF=a("li"),nue=a("strong"),NJo=o("data2vec-audio"),jJo=o(" \u2014 "),yX=a("a"),DJo=o("Data2VecAudioForSequenceClassification"),GJo=o(" (Data2VecAudio model)"),OJo=l(),FF=a("li"),sue=a("strong"),VJo=o("hubert"),XJo=o(" \u2014 "),LX=a("a"),zJo=o("HubertForSequenceClassification"),WJo=o(" (Hubert model)"),QJo=l(),TF=a("li"),lue=a("strong"),HJo=o("sew"),UJo=o(" \u2014 "),xX=a("a"),JJo=o("SEWForSequenceClassification"),YJo=o(" (SEW model)"),KJo=l(),MF=a("li"),iue=a("strong"),ZJo=o("sew-d"),eYo=o(" \u2014 "),$X=a("a"),oYo=o("SEWDForSequenceClassification"),rYo=o(" (SEW-D model)"),tYo=l(),EF=a("li"),due=a("strong"),aYo=o("unispeech"),nYo=o(" \u2014 "),kX=a("a"),sYo=o("UniSpeechForSequenceClassification"),lYo=o(" (UniSpeech model)"),iYo=l(),CF=a("li"),cue=a("strong"),dYo=o("unispeech-sat"),cYo=o(" \u2014 "),SX=a("a"),fYo=o("UniSpeechSatForSequenceClassification"),mYo=o(" (UniSpeechSat model)"),gYo=l(),wF=a("li"),fue=a("strong"),hYo=o("wav2vec2"),pYo=o(" \u2014 "),RX=a("a"),uYo=o("Wav2Vec2ForSequenceClassification"),_Yo=o(" (Wav2Vec2 model)"),bYo=l(),AF=a("li"),mue=a("strong"),vYo=o("wav2vec2-conformer"),FYo=o(" \u2014 "),PX=a("a"),TYo=o("Wav2Vec2ConformerForSequenceClassification"),MYo=o(" (Wav2Vec2-Conformer model)"),EYo=l(),yF=a("li"),gue=a("strong"),CYo=o("wavlm"),wYo=o(" \u2014 "),BX=a("a"),AYo=o("WavLMForSequenceClassification"),yYo=o(" (WavLM model)"),LYo=l(),LF=a("p"),xYo=o("The model is set in evaluation mode by default using "),hue=a("code"),$Yo=o("model.eval()"),kYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),SYo=o("model.train()"),RYo=l(),F(xF.$$.fragment),tNe=l(),gd=a("h2"),$F=a("a"),uue=a("span"),F(sL.$$.fragment),PYo=l(),_ue=a("span"),BYo=o("AutoModelForAudioFrameClassification"),aNe=l(),Oo=a("div"),F(lL.$$.fragment),IYo=l(),hd=a("p"),qYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IX=a("a"),NYo=o("from_pretrained()"),jYo=o(" class method or the "),qX=a("a"),DYo=o("from_config()"),GYo=o(` class
method.`),OYo=l(),iL=a("p"),VYo=o("This class cannot be instantiated directly using "),bue=a("code"),XYo=o("__init__()"),zYo=o(" (throws an error)."),WYo=l(),bt=a("div"),F(dL.$$.fragment),QYo=l(),vue=a("p"),HYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UYo=l(),pd=a("p"),JYo=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),YYo=o("not"),KYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),ZYo=o("from_pretrained()"),eKo=o(" to load the model weights."),oKo=l(),F(kF.$$.fragment),rKo=l(),fo=a("div"),F(cL.$$.fragment),tKo=l(),Tue=a("p"),aKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),nKo=l(),Oa=a("p"),sKo=o("The model class to instantiate is selected based on the "),Mue=a("code"),lKo=o("model_type"),iKo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),fKo=o("pretrained_model_name_or_path"),mKo=o(":"),gKo=l(),Kr=a("ul"),SF=a("li"),wue=a("strong"),hKo=o("data2vec-audio"),pKo=o(" \u2014 "),jX=a("a"),uKo=o("Data2VecAudioForAudioFrameClassification"),_Ko=o(" (Data2VecAudio model)"),bKo=l(),RF=a("li"),Aue=a("strong"),vKo=o("unispeech-sat"),FKo=o(" \u2014 "),DX=a("a"),TKo=o("UniSpeechSatForAudioFrameClassification"),MKo=o(" (UniSpeechSat model)"),EKo=l(),PF=a("li"),yue=a("strong"),CKo=o("wav2vec2"),wKo=o(" \u2014 "),GX=a("a"),AKo=o("Wav2Vec2ForAudioFrameClassification"),yKo=o(" (Wav2Vec2 model)"),LKo=l(),BF=a("li"),Lue=a("strong"),xKo=o("wav2vec2-conformer"),$Ko=o(" \u2014 "),OX=a("a"),kKo=o("Wav2Vec2ConformerForAudioFrameClassification"),SKo=o(" (Wav2Vec2-Conformer model)"),RKo=l(),IF=a("li"),xue=a("strong"),PKo=o("wavlm"),BKo=o(" \u2014 "),VX=a("a"),IKo=o("WavLMForAudioFrameClassification"),qKo=o(" (WavLM model)"),NKo=l(),qF=a("p"),jKo=o("The model is set in evaluation mode by default using "),$ue=a("code"),DKo=o("model.eval()"),GKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=a("code"),OKo=o("model.train()"),VKo=l(),F(NF.$$.fragment),nNe=l(),ud=a("h2"),jF=a("a"),Sue=a("span"),F(fL.$$.fragment),XKo=l(),Rue=a("span"),zKo=o("AutoModelForCTC"),sNe=l(),Vo=a("div"),F(mL.$$.fragment),WKo=l(),_d=a("p"),QKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XX=a("a"),HKo=o("from_pretrained()"),UKo=o(" class method or the "),zX=a("a"),JKo=o("from_config()"),YKo=o(` class
method.`),KKo=l(),gL=a("p"),ZKo=o("This class cannot be instantiated directly using "),Pue=a("code"),eZo=o("__init__()"),oZo=o(" (throws an error)."),rZo=l(),vt=a("div"),F(hL.$$.fragment),tZo=l(),Bue=a("p"),aZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),nZo=l(),bd=a("p"),sZo=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),lZo=o("not"),iZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),dZo=o("from_pretrained()"),cZo=o(" to load the model weights."),fZo=l(),F(DF.$$.fragment),mZo=l(),mo=a("div"),F(pL.$$.fragment),gZo=l(),que=a("p"),hZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pZo=l(),Va=a("p"),uZo=o("The model class to instantiate is selected based on the "),Nue=a("code"),_Zo=o("model_type"),bZo=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),TZo=o("pretrained_model_name_or_path"),MZo=o(":"),EZo=l(),Se=a("ul"),GF=a("li"),Gue=a("strong"),CZo=o("data2vec-audio"),wZo=o(" \u2014 "),QX=a("a"),AZo=o("Data2VecAudioForCTC"),yZo=o(" (Data2VecAudio model)"),LZo=l(),OF=a("li"),Oue=a("strong"),xZo=o("hubert"),$Zo=o(" \u2014 "),HX=a("a"),kZo=o("HubertForCTC"),SZo=o(" (Hubert model)"),RZo=l(),VF=a("li"),Vue=a("strong"),PZo=o("sew"),BZo=o(" \u2014 "),UX=a("a"),IZo=o("SEWForCTC"),qZo=o(" (SEW model)"),NZo=l(),XF=a("li"),Xue=a("strong"),jZo=o("sew-d"),DZo=o(" \u2014 "),JX=a("a"),GZo=o("SEWDForCTC"),OZo=o(" (SEW-D model)"),VZo=l(),zF=a("li"),zue=a("strong"),XZo=o("unispeech"),zZo=o(" \u2014 "),YX=a("a"),WZo=o("UniSpeechForCTC"),QZo=o(" (UniSpeech model)"),HZo=l(),WF=a("li"),Wue=a("strong"),UZo=o("unispeech-sat"),JZo=o(" \u2014 "),KX=a("a"),YZo=o("UniSpeechSatForCTC"),KZo=o(" (UniSpeechSat model)"),ZZo=l(),QF=a("li"),Que=a("strong"),eer=o("wav2vec2"),oer=o(" \u2014 "),ZX=a("a"),rer=o("Wav2Vec2ForCTC"),ter=o(" (Wav2Vec2 model)"),aer=l(),HF=a("li"),Hue=a("strong"),ner=o("wav2vec2-conformer"),ser=o(" \u2014 "),ez=a("a"),ler=o("Wav2Vec2ConformerForCTC"),ier=o(" (Wav2Vec2-Conformer model)"),der=l(),UF=a("li"),Uue=a("strong"),cer=o("wavlm"),fer=o(" \u2014 "),oz=a("a"),mer=o("WavLMForCTC"),ger=o(" (WavLM model)"),her=l(),JF=a("p"),per=o("The model is set in evaluation mode by default using "),Jue=a("code"),uer=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),ber=o("model.train()"),ver=l(),F(YF.$$.fragment),lNe=l(),vd=a("h2"),KF=a("a"),Kue=a("span"),F(uL.$$.fragment),Fer=l(),Zue=a("span"),Ter=o("AutoModelForSpeechSeq2Seq"),iNe=l(),Xo=a("div"),F(_L.$$.fragment),Mer=l(),Fd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rz=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),tz=a("a"),Aer=o("from_config()"),yer=o(` class
method.`),Ler=l(),bL=a("p"),xer=o("This class cannot be instantiated directly using "),e_e=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),Ft=a("div"),F(vL.$$.fragment),Rer=l(),o_e=a("p"),Per=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ber=l(),Td=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),qer=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(ZF.$$.fragment),Oer=l(),go=a("div"),F(FL.$$.fragment),Ver=l(),t_e=a("p"),Xer=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zer=l(),Xa=a("p"),Wer=o("The model class to instantiate is selected based on the "),a_e=a("code"),Qer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),TL=a("ul"),e6=a("li"),l_e=a("strong"),eor=o("speech-encoder-decoder"),oor=o(" \u2014 "),nz=a("a"),ror=o("SpeechEncoderDecoderModel"),tor=o(" (Speech Encoder decoder model)"),aor=l(),o6=a("li"),i_e=a("strong"),nor=o("speech_to_text"),sor=o(" \u2014 "),sz=a("a"),lor=o("Speech2TextForConditionalGeneration"),ior=o(" (Speech2Text model)"),dor=l(),r6=a("p"),cor=o("The model is set in evaluation mode by default using "),d_e=a("code"),mor=o("model.eval()"),gor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=a("code"),hor=o("model.train()"),por=l(),F(t6.$$.fragment),dNe=l(),Md=a("h2"),a6=a("a"),f_e=a("span"),F(ML.$$.fragment),uor=l(),m_e=a("span"),_or=o("AutoModelForAudioXVector"),cNe=l(),zo=a("div"),F(EL.$$.fragment),bor=l(),Ed=a("p"),vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lz=a("a"),For=o("from_pretrained()"),Tor=o(" class method or the "),iz=a("a"),Mor=o("from_config()"),Eor=o(` class
method.`),Cor=l(),CL=a("p"),wor=o("This class cannot be instantiated directly using "),g_e=a("code"),Aor=o("__init__()"),yor=o(" (throws an error)."),Lor=l(),Tt=a("div"),F(wL.$$.fragment),xor=l(),h_e=a("p"),$or=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kor=l(),Cd=a("p"),Sor=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),Ror=o("not"),Por=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),Bor=o("from_pretrained()"),Ior=o(" to load the model weights."),qor=l(),F(n6.$$.fragment),Nor=l(),ho=a("div"),F(AL.$$.fragment),jor=l(),u_e=a("p"),Dor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Gor=l(),za=a("p"),Oor=o("The model class to instantiate is selected based on the "),__e=a("code"),Vor=o("model_type"),Xor=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),zor=o("pretrained_model_name_or_path"),Wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),Qor=o("pretrained_model_name_or_path"),Hor=o(":"),Uor=l(),Zr=a("ul"),s6=a("li"),F_e=a("strong"),Jor=o("data2vec-audio"),Yor=o(" \u2014 "),cz=a("a"),Kor=o("Data2VecAudioForXVector"),Zor=o(" (Data2VecAudio model)"),err=l(),l6=a("li"),T_e=a("strong"),orr=o("unispeech-sat"),rrr=o(" \u2014 "),fz=a("a"),trr=o("UniSpeechSatForXVector"),arr=o(" (UniSpeechSat model)"),nrr=l(),i6=a("li"),M_e=a("strong"),srr=o("wav2vec2"),lrr=o(" \u2014 "),mz=a("a"),irr=o("Wav2Vec2ForXVector"),drr=o(" (Wav2Vec2 model)"),crr=l(),d6=a("li"),E_e=a("strong"),frr=o("wav2vec2-conformer"),mrr=o(" \u2014 "),gz=a("a"),grr=o("Wav2Vec2ConformerForXVector"),hrr=o(" (Wav2Vec2-Conformer model)"),prr=l(),c6=a("li"),C_e=a("strong"),urr=o("wavlm"),_rr=o(" \u2014 "),hz=a("a"),brr=o("WavLMForXVector"),vrr=o(" (WavLM model)"),Frr=l(),f6=a("p"),Trr=o("The model is set in evaluation mode by default using "),w_e=a("code"),Mrr=o("model.eval()"),Err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),Crr=o("model.train()"),wrr=l(),F(m6.$$.fragment),fNe=l(),wd=a("h2"),g6=a("a"),y_e=a("span"),F(yL.$$.fragment),Arr=l(),L_e=a("span"),yrr=o("AutoModelForMaskedImageModeling"),mNe=l(),Wo=a("div"),F(LL.$$.fragment),Lrr=l(),Ad=a("p"),xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pz=a("a"),$rr=o("from_pretrained()"),krr=o(" class method or the "),uz=a("a"),Srr=o("from_config()"),Rrr=o(` class
method.`),Prr=l(),xL=a("p"),Brr=o("This class cannot be instantiated directly using "),x_e=a("code"),Irr=o("__init__()"),qrr=o(" (throws an error)."),Nrr=l(),Mt=a("div"),F($L.$$.fragment),jrr=l(),$_e=a("p"),Drr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Grr=l(),yd=a("p"),Orr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),Vrr=o("not"),Xrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),zrr=o("from_pretrained()"),Wrr=o(" to load the model weights."),Qrr=l(),F(h6.$$.fragment),Hrr=l(),po=a("div"),F(kL.$$.fragment),Urr=l(),S_e=a("p"),Jrr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Yrr=l(),Wa=a("p"),Krr=o("The model class to instantiate is selected based on the "),R_e=a("code"),Zrr=o("model_type"),etr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),otr=o("pretrained_model_name_or_path"),rtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),ttr=o("pretrained_model_name_or_path"),atr=o(":"),ntr=l(),Ld=a("ul"),p6=a("li"),I_e=a("strong"),str=o("deit"),ltr=o(" \u2014 "),bz=a("a"),itr=o("DeiTForMaskedImageModeling"),dtr=o(" (DeiT model)"),ctr=l(),u6=a("li"),q_e=a("strong"),ftr=o("swin"),mtr=o(" \u2014 "),vz=a("a"),gtr=o("SwinForMaskedImageModeling"),htr=o(" (Swin model)"),ptr=l(),_6=a("li"),N_e=a("strong"),utr=o("vit"),_tr=o(" \u2014 "),Fz=a("a"),btr=o("ViTForMaskedImageModeling"),vtr=o(" (ViT model)"),Ftr=l(),b6=a("p"),Ttr=o("The model is set in evaluation mode by default using "),j_e=a("code"),Mtr=o("model.eval()"),Etr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),Ctr=o("model.train()"),wtr=l(),F(v6.$$.fragment),gNe=l(),xd=a("h2"),F6=a("a"),G_e=a("span"),F(SL.$$.fragment),Atr=l(),O_e=a("span"),ytr=o("AutoModelForObjectDetection"),hNe=l(),Qo=a("div"),F(RL.$$.fragment),Ltr=l(),$d=a("p"),xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Tz=a("a"),$tr=o("from_pretrained()"),ktr=o(" class method or the "),Mz=a("a"),Str=o("from_config()"),Rtr=o(` class
method.`),Ptr=l(),PL=a("p"),Btr=o("This class cannot be instantiated directly using "),V_e=a("code"),Itr=o("__init__()"),qtr=o(" (throws an error)."),Ntr=l(),Et=a("div"),F(BL.$$.fragment),jtr=l(),X_e=a("p"),Dtr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Gtr=l(),kd=a("p"),Otr=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),Vtr=o("not"),Xtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),ztr=o("from_pretrained()"),Wtr=o(" to load the model weights."),Qtr=l(),F(T6.$$.fragment),Htr=l(),uo=a("div"),F(IL.$$.fragment),Utr=l(),W_e=a("p"),Jtr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ytr=l(),Qa=a("p"),Ktr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),Ztr=o("model_type"),ear=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),oar=o("pretrained_model_name_or_path"),rar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),tar=o("pretrained_model_name_or_path"),aar=o(":"),nar=l(),qL=a("ul"),M6=a("li"),J_e=a("strong"),sar=o("detr"),lar=o(" \u2014 "),Cz=a("a"),iar=o("DetrForObjectDetection"),dar=o(" (DETR model)"),car=l(),E6=a("li"),Y_e=a("strong"),far=o("yolos"),mar=o(" \u2014 "),wz=a("a"),gar=o("YolosForObjectDetection"),har=o(" (YOLOS model)"),par=l(),C6=a("p"),uar=o("The model is set in evaluation mode by default using "),K_e=a("code"),_ar=o("model.eval()"),bar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),Far=o("model.train()"),Tar=l(),F(w6.$$.fragment),pNe=l(),Sd=a("h2"),A6=a("a"),e0e=a("span"),F(NL.$$.fragment),Mar=l(),o0e=a("span"),Ear=o("AutoModelForImageSegmentation"),uNe=l(),Ho=a("div"),F(jL.$$.fragment),Car=l(),Rd=a("p"),war=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Az=a("a"),Aar=o("from_pretrained()"),yar=o(" class method or the "),yz=a("a"),Lar=o("from_config()"),xar=o(` class
method.`),$ar=l(),DL=a("p"),kar=o("This class cannot be instantiated directly using "),r0e=a("code"),Sar=o("__init__()"),Rar=o(" (throws an error)."),Par=l(),Ct=a("div"),F(GL.$$.fragment),Bar=l(),t0e=a("p"),Iar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),qar=l(),Pd=a("p"),Nar=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),jar=o("not"),Dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Gar=o("from_pretrained()"),Oar=o(" to load the model weights."),Var=l(),F(y6.$$.fragment),Xar=l(),_o=a("div"),F(OL.$$.fragment),zar=l(),n0e=a("p"),War=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qar=l(),Ha=a("p"),Har=o("The model class to instantiate is selected based on the "),s0e=a("code"),Uar=o("model_type"),Jar=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),Yar=o("pretrained_model_name_or_path"),Kar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),Zar=o("pretrained_model_name_or_path"),enr=o(":"),onr=l(),d0e=a("ul"),L6=a("li"),c0e=a("strong"),rnr=o("detr"),tnr=o(" \u2014 "),xz=a("a"),anr=o("DetrForSegmentation"),nnr=o(" (DETR model)"),snr=l(),x6=a("p"),lnr=o("The model is set in evaluation mode by default using "),f0e=a("code"),inr=o("model.eval()"),dnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m0e=a("code"),cnr=o("model.train()"),fnr=l(),F($6.$$.fragment),_Ne=l(),Bd=a("h2"),k6=a("a"),g0e=a("span"),F(VL.$$.fragment),mnr=l(),h0e=a("span"),gnr=o("AutoModelForSemanticSegmentation"),bNe=l(),Uo=a("div"),F(XL.$$.fragment),hnr=l(),Id=a("p"),pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$z=a("a"),unr=o("from_pretrained()"),_nr=o(" class method or the "),kz=a("a"),bnr=o("from_config()"),vnr=o(` class
method.`),Fnr=l(),zL=a("p"),Tnr=o("This class cannot be instantiated directly using "),p0e=a("code"),Mnr=o("__init__()"),Enr=o(" (throws an error)."),Cnr=l(),wt=a("div"),F(WL.$$.fragment),wnr=l(),u0e=a("p"),Anr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ynr=l(),qd=a("p"),Lnr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),xnr=o("not"),$nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),knr=o("from_pretrained()"),Snr=o(" to load the model weights."),Rnr=l(),F(S6.$$.fragment),Pnr=l(),bo=a("div"),F(QL.$$.fragment),Bnr=l(),b0e=a("p"),Inr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qnr=l(),Ua=a("p"),Nnr=o("The model class to instantiate is selected based on the "),v0e=a("code"),jnr=o("model_type"),Dnr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(":"),znr=l(),Ja=a("ul"),R6=a("li"),M0e=a("strong"),Wnr=o("beit"),Qnr=o(" \u2014 "),Rz=a("a"),Hnr=o("BeitForSemanticSegmentation"),Unr=o(" (BEiT model)"),Jnr=l(),P6=a("li"),E0e=a("strong"),Ynr=o("data2vec-vision"),Knr=o(" \u2014 "),Pz=a("a"),Znr=o("Data2VecVisionForSemanticSegmentation"),esr=o(" (Data2VecVision model)"),osr=l(),B6=a("li"),C0e=a("strong"),rsr=o("dpt"),tsr=o(" \u2014 "),Bz=a("a"),asr=o("DPTForSemanticSegmentation"),nsr=o(" (DPT model)"),ssr=l(),I6=a("li"),w0e=a("strong"),lsr=o("segformer"),isr=o(" \u2014 "),Iz=a("a"),dsr=o("SegformerForSemanticSegmentation"),csr=o(" (SegFormer model)"),fsr=l(),q6=a("p"),msr=o("The model is set in evaluation mode by default using "),A0e=a("code"),gsr=o("model.eval()"),hsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y0e=a("code"),psr=o("model.train()"),usr=l(),F(N6.$$.fragment),vNe=l(),Nd=a("h2"),j6=a("a"),L0e=a("span"),F(HL.$$.fragment),_sr=l(),x0e=a("span"),bsr=o("AutoModelForInstanceSegmentation"),FNe=l(),Jo=a("div"),F(UL.$$.fragment),vsr=l(),jd=a("p"),Fsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qz=a("a"),Tsr=o("from_pretrained()"),Msr=o(" class method or the "),Nz=a("a"),Esr=o("from_config()"),Csr=o(` class
method.`),wsr=l(),JL=a("p"),Asr=o("This class cannot be instantiated directly using "),$0e=a("code"),ysr=o("__init__()"),Lsr=o(" (throws an error)."),xsr=l(),At=a("div"),F(YL.$$.fragment),$sr=l(),k0e=a("p"),ksr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ssr=l(),Dd=a("p"),Rsr=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),Psr=o("not"),Bsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Isr=o("from_pretrained()"),qsr=o(" to load the model weights."),Nsr=l(),F(D6.$$.fragment),jsr=l(),vo=a("div"),F(KL.$$.fragment),Dsr=l(),R0e=a("p"),Gsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Osr=l(),Ya=a("p"),Vsr=o("The model class to instantiate is selected based on the "),P0e=a("code"),Xsr=o("model_type"),zsr=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),Wsr=o("pretrained_model_name_or_path"),Qsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),Hsr=o("pretrained_model_name_or_path"),Usr=o(":"),Jsr=l(),q0e=a("ul"),G6=a("li"),N0e=a("strong"),Ysr=o("maskformer"),Ksr=o(" \u2014 "),Dz=a("a"),Zsr=o("MaskFormerForInstanceSegmentation"),elr=o(" (MaskFormer model)"),olr=l(),O6=a("p"),rlr=o("The model is set in evaluation mode by default using "),j0e=a("code"),tlr=o("model.eval()"),alr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D0e=a("code"),nlr=o("model.train()"),slr=l(),F(V6.$$.fragment),TNe=l(),Gd=a("h2"),X6=a("a"),G0e=a("span"),F(ZL.$$.fragment),llr=l(),O0e=a("span"),ilr=o("TFAutoModel"),MNe=l(),Yo=a("div"),F(e8.$$.fragment),dlr=l(),Od=a("p"),clr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gz=a("a"),flr=o("from_pretrained()"),mlr=o(" class method or the "),Oz=a("a"),glr=o("from_config()"),hlr=o(` class
method.`),plr=l(),o8=a("p"),ulr=o("This class cannot be instantiated directly using "),V0e=a("code"),_lr=o("__init__()"),blr=o(" (throws an error)."),vlr=l(),yt=a("div"),F(r8.$$.fragment),Flr=l(),X0e=a("p"),Tlr=o("Instantiates one of the base model classes of the library from a configuration."),Mlr=l(),Vd=a("p"),Elr=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),Clr=o("not"),wlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Alr=o("from_pretrained()"),ylr=o(" to load the model weights."),Llr=l(),F(z6.$$.fragment),xlr=l(),wr=a("div"),F(t8.$$.fragment),$lr=l(),W0e=a("p"),klr=o("Instantiate one of the base model classes of the library from a pretrained model."),Slr=l(),Ka=a("p"),Rlr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),Plr=o("model_type"),Blr=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),Ilr=o("pretrained_model_name_or_path"),qlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),Nlr=o("pretrained_model_name_or_path"),jlr=o(":"),Dlr=l(),N=a("ul"),W6=a("li"),J0e=a("strong"),Glr=o("albert"),Olr=o(" \u2014 "),Xz=a("a"),Vlr=o("TFAlbertModel"),Xlr=o(" (ALBERT model)"),zlr=l(),Q6=a("li"),Y0e=a("strong"),Wlr=o("bart"),Qlr=o(" \u2014 "),zz=a("a"),Hlr=o("TFBartModel"),Ulr=o(" (BART model)"),Jlr=l(),H6=a("li"),K0e=a("strong"),Ylr=o("bert"),Klr=o(" \u2014 "),Wz=a("a"),Zlr=o("TFBertModel"),eir=o(" (BERT model)"),oir=l(),U6=a("li"),Z0e=a("strong"),rir=o("blenderbot"),tir=o(" \u2014 "),Qz=a("a"),air=o("TFBlenderbotModel"),nir=o(" (Blenderbot model)"),sir=l(),J6=a("li"),e1e=a("strong"),lir=o("blenderbot-small"),iir=o(" \u2014 "),Hz=a("a"),dir=o("TFBlenderbotSmallModel"),cir=o(" (BlenderbotSmall model)"),fir=l(),Y6=a("li"),o1e=a("strong"),mir=o("camembert"),gir=o(" \u2014 "),Uz=a("a"),hir=o("TFCamembertModel"),pir=o(" (CamemBERT model)"),uir=l(),K6=a("li"),r1e=a("strong"),_ir=o("clip"),bir=o(" \u2014 "),Jz=a("a"),vir=o("TFCLIPModel"),Fir=o(" (CLIP model)"),Tir=l(),Z6=a("li"),t1e=a("strong"),Mir=o("convbert"),Eir=o(" \u2014 "),Yz=a("a"),Cir=o("TFConvBertModel"),wir=o(" (ConvBERT model)"),Air=l(),eT=a("li"),a1e=a("strong"),yir=o("convnext"),Lir=o(" \u2014 "),Kz=a("a"),xir=o("TFConvNextModel"),$ir=o(" (ConvNext model)"),kir=l(),oT=a("li"),n1e=a("strong"),Sir=o("ctrl"),Rir=o(" \u2014 "),Zz=a("a"),Pir=o("TFCTRLModel"),Bir=o(" (CTRL model)"),Iir=l(),rT=a("li"),s1e=a("strong"),qir=o("data2vec-vision"),Nir=o(" \u2014 "),eW=a("a"),jir=o("TFData2VecVisionModel"),Dir=o(" (Data2VecVision model)"),Gir=l(),tT=a("li"),l1e=a("strong"),Oir=o("deberta"),Vir=o(" \u2014 "),oW=a("a"),Xir=o("TFDebertaModel"),zir=o(" (DeBERTa model)"),Wir=l(),aT=a("li"),i1e=a("strong"),Qir=o("deberta-v2"),Hir=o(" \u2014 "),rW=a("a"),Uir=o("TFDebertaV2Model"),Jir=o(" (DeBERTa-v2 model)"),Yir=l(),nT=a("li"),d1e=a("strong"),Kir=o("distilbert"),Zir=o(" \u2014 "),tW=a("a"),edr=o("TFDistilBertModel"),odr=o(" (DistilBERT model)"),rdr=l(),sT=a("li"),c1e=a("strong"),tdr=o("dpr"),adr=o(" \u2014 "),aW=a("a"),ndr=o("TFDPRQuestionEncoder"),sdr=o(" (DPR model)"),ldr=l(),lT=a("li"),f1e=a("strong"),idr=o("electra"),ddr=o(" \u2014 "),nW=a("a"),cdr=o("TFElectraModel"),fdr=o(" (ELECTRA model)"),mdr=l(),iT=a("li"),m1e=a("strong"),gdr=o("flaubert"),hdr=o(" \u2014 "),sW=a("a"),pdr=o("TFFlaubertModel"),udr=o(" (FlauBERT model)"),_dr=l(),Is=a("li"),g1e=a("strong"),bdr=o("funnel"),vdr=o(" \u2014 "),lW=a("a"),Fdr=o("TFFunnelModel"),Tdr=o(" or "),iW=a("a"),Mdr=o("TFFunnelBaseModel"),Edr=o(" (Funnel Transformer model)"),Cdr=l(),dT=a("li"),h1e=a("strong"),wdr=o("gpt2"),Adr=o(" \u2014 "),dW=a("a"),ydr=o("TFGPT2Model"),Ldr=o(" (OpenAI GPT-2 model)"),xdr=l(),cT=a("li"),p1e=a("strong"),$dr=o("gptj"),kdr=o(" \u2014 "),cW=a("a"),Sdr=o("TFGPTJModel"),Rdr=o(" (GPT-J model)"),Pdr=l(),fT=a("li"),u1e=a("strong"),Bdr=o("hubert"),Idr=o(" \u2014 "),fW=a("a"),qdr=o("TFHubertModel"),Ndr=o(" (Hubert model)"),jdr=l(),mT=a("li"),_1e=a("strong"),Ddr=o("layoutlm"),Gdr=o(" \u2014 "),mW=a("a"),Odr=o("TFLayoutLMModel"),Vdr=o(" (LayoutLM model)"),Xdr=l(),gT=a("li"),b1e=a("strong"),zdr=o("led"),Wdr=o(" \u2014 "),gW=a("a"),Qdr=o("TFLEDModel"),Hdr=o(" (LED model)"),Udr=l(),hT=a("li"),v1e=a("strong"),Jdr=o("longformer"),Ydr=o(" \u2014 "),hW=a("a"),Kdr=o("TFLongformerModel"),Zdr=o(" (Longformer model)"),ecr=l(),pT=a("li"),F1e=a("strong"),ocr=o("lxmert"),rcr=o(" \u2014 "),pW=a("a"),tcr=o("TFLxmertModel"),acr=o(" (LXMERT model)"),ncr=l(),uT=a("li"),T1e=a("strong"),scr=o("marian"),lcr=o(" \u2014 "),uW=a("a"),icr=o("TFMarianModel"),dcr=o(" (Marian model)"),ccr=l(),_T=a("li"),M1e=a("strong"),fcr=o("mbart"),mcr=o(" \u2014 "),_W=a("a"),gcr=o("TFMBartModel"),hcr=o(" (mBART model)"),pcr=l(),bT=a("li"),E1e=a("strong"),ucr=o("mobilebert"),_cr=o(" \u2014 "),bW=a("a"),bcr=o("TFMobileBertModel"),vcr=o(" (MobileBERT model)"),Fcr=l(),vT=a("li"),C1e=a("strong"),Tcr=o("mpnet"),Mcr=o(" \u2014 "),vW=a("a"),Ecr=o("TFMPNetModel"),Ccr=o(" (MPNet model)"),wcr=l(),FT=a("li"),w1e=a("strong"),Acr=o("mt5"),ycr=o(" \u2014 "),FW=a("a"),Lcr=o("TFMT5Model"),xcr=o(" (mT5 model)"),$cr=l(),TT=a("li"),A1e=a("strong"),kcr=o("openai-gpt"),Scr=o(" \u2014 "),TW=a("a"),Rcr=o("TFOpenAIGPTModel"),Pcr=o(" (OpenAI GPT model)"),Bcr=l(),MT=a("li"),y1e=a("strong"),Icr=o("pegasus"),qcr=o(" \u2014 "),MW=a("a"),Ncr=o("TFPegasusModel"),jcr=o(" (Pegasus model)"),Dcr=l(),ET=a("li"),L1e=a("strong"),Gcr=o("rembert"),Ocr=o(" \u2014 "),EW=a("a"),Vcr=o("TFRemBertModel"),Xcr=o(" (RemBERT model)"),zcr=l(),CT=a("li"),x1e=a("strong"),Wcr=o("roberta"),Qcr=o(" \u2014 "),CW=a("a"),Hcr=o("TFRobertaModel"),Ucr=o(" (RoBERTa model)"),Jcr=l(),wT=a("li"),$1e=a("strong"),Ycr=o("roformer"),Kcr=o(" \u2014 "),wW=a("a"),Zcr=o("TFRoFormerModel"),efr=o(" (RoFormer model)"),ofr=l(),AT=a("li"),k1e=a("strong"),rfr=o("speech_to_text"),tfr=o(" \u2014 "),AW=a("a"),afr=o("TFSpeech2TextModel"),nfr=o(" (Speech2Text model)"),sfr=l(),yT=a("li"),S1e=a("strong"),lfr=o("swin"),ifr=o(" \u2014 "),yW=a("a"),dfr=o("TFSwinModel"),cfr=o(" (Swin model)"),ffr=l(),LT=a("li"),R1e=a("strong"),mfr=o("t5"),gfr=o(" \u2014 "),LW=a("a"),hfr=o("TFT5Model"),pfr=o(" (T5 model)"),ufr=l(),xT=a("li"),P1e=a("strong"),_fr=o("tapas"),bfr=o(" \u2014 "),xW=a("a"),vfr=o("TFTapasModel"),Ffr=o(" (TAPAS model)"),Tfr=l(),$T=a("li"),B1e=a("strong"),Mfr=o("transfo-xl"),Efr=o(" \u2014 "),$W=a("a"),Cfr=o("TFTransfoXLModel"),wfr=o(" (Transformer-XL model)"),Afr=l(),kT=a("li"),I1e=a("strong"),yfr=o("vit"),Lfr=o(" \u2014 "),kW=a("a"),xfr=o("TFViTModel"),$fr=o(" (ViT model)"),kfr=l(),ST=a("li"),q1e=a("strong"),Sfr=o("vit_mae"),Rfr=o(" \u2014 "),SW=a("a"),Pfr=o("TFViTMAEModel"),Bfr=o(" (ViTMAE model)"),Ifr=l(),RT=a("li"),N1e=a("strong"),qfr=o("wav2vec2"),Nfr=o(" \u2014 "),RW=a("a"),jfr=o("TFWav2Vec2Model"),Dfr=o(" (Wav2Vec2 model)"),Gfr=l(),PT=a("li"),j1e=a("strong"),Ofr=o("xlm"),Vfr=o(" \u2014 "),PW=a("a"),Xfr=o("TFXLMModel"),zfr=o(" (XLM model)"),Wfr=l(),BT=a("li"),D1e=a("strong"),Qfr=o("xlm-roberta"),Hfr=o(" \u2014 "),BW=a("a"),Ufr=o("TFXLMRobertaModel"),Jfr=o(" (XLM-RoBERTa model)"),Yfr=l(),IT=a("li"),G1e=a("strong"),Kfr=o("xlnet"),Zfr=o(" \u2014 "),IW=a("a"),emr=o("TFXLNetModel"),omr=o(" (XLNet model)"),rmr=l(),F(qT.$$.fragment),ENe=l(),Xd=a("h2"),NT=a("a"),O1e=a("span"),F(a8.$$.fragment),tmr=l(),V1e=a("span"),amr=o("TFAutoModelForPreTraining"),CNe=l(),Ko=a("div"),F(n8.$$.fragment),nmr=l(),zd=a("p"),smr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qW=a("a"),lmr=o("from_pretrained()"),imr=o(" class method or the "),NW=a("a"),dmr=o("from_config()"),cmr=o(` class
method.`),fmr=l(),s8=a("p"),mmr=o("This class cannot be instantiated directly using "),X1e=a("code"),gmr=o("__init__()"),hmr=o(" (throws an error)."),pmr=l(),Lt=a("div"),F(l8.$$.fragment),umr=l(),z1e=a("p"),_mr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bmr=l(),Wd=a("p"),vmr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),Fmr=o("not"),Tmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Mmr=o("from_pretrained()"),Emr=o(" to load the model weights."),Cmr=l(),F(jT.$$.fragment),wmr=l(),Ar=a("div"),F(i8.$$.fragment),Amr=l(),Q1e=a("p"),ymr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lmr=l(),Za=a("p"),xmr=o("The model class to instantiate is selected based on the "),H1e=a("code"),$mr=o("model_type"),kmr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),Pmr=o("pretrained_model_name_or_path"),Bmr=o(":"),Imr=l(),se=a("ul"),DT=a("li"),Y1e=a("strong"),qmr=o("albert"),Nmr=o(" \u2014 "),DW=a("a"),jmr=o("TFAlbertForPreTraining"),Dmr=o(" (ALBERT model)"),Gmr=l(),GT=a("li"),K1e=a("strong"),Omr=o("bart"),Vmr=o(" \u2014 "),GW=a("a"),Xmr=o("TFBartForConditionalGeneration"),zmr=o(" (BART model)"),Wmr=l(),OT=a("li"),Z1e=a("strong"),Qmr=o("bert"),Hmr=o(" \u2014 "),OW=a("a"),Umr=o("TFBertForPreTraining"),Jmr=o(" (BERT model)"),Ymr=l(),VT=a("li"),ebe=a("strong"),Kmr=o("camembert"),Zmr=o(" \u2014 "),VW=a("a"),egr=o("TFCamembertForMaskedLM"),ogr=o(" (CamemBERT model)"),rgr=l(),XT=a("li"),obe=a("strong"),tgr=o("ctrl"),agr=o(" \u2014 "),XW=a("a"),ngr=o("TFCTRLLMHeadModel"),sgr=o(" (CTRL model)"),lgr=l(),zT=a("li"),rbe=a("strong"),igr=o("distilbert"),dgr=o(" \u2014 "),zW=a("a"),cgr=o("TFDistilBertForMaskedLM"),fgr=o(" (DistilBERT model)"),mgr=l(),WT=a("li"),tbe=a("strong"),ggr=o("electra"),hgr=o(" \u2014 "),WW=a("a"),pgr=o("TFElectraForPreTraining"),ugr=o(" (ELECTRA model)"),_gr=l(),QT=a("li"),abe=a("strong"),bgr=o("flaubert"),vgr=o(" \u2014 "),QW=a("a"),Fgr=o("TFFlaubertWithLMHeadModel"),Tgr=o(" (FlauBERT model)"),Mgr=l(),HT=a("li"),nbe=a("strong"),Egr=o("funnel"),Cgr=o(" \u2014 "),HW=a("a"),wgr=o("TFFunnelForPreTraining"),Agr=o(" (Funnel Transformer model)"),ygr=l(),UT=a("li"),sbe=a("strong"),Lgr=o("gpt2"),xgr=o(" \u2014 "),UW=a("a"),$gr=o("TFGPT2LMHeadModel"),kgr=o(" (OpenAI GPT-2 model)"),Sgr=l(),JT=a("li"),lbe=a("strong"),Rgr=o("layoutlm"),Pgr=o(" \u2014 "),JW=a("a"),Bgr=o("TFLayoutLMForMaskedLM"),Igr=o(" (LayoutLM model)"),qgr=l(),YT=a("li"),ibe=a("strong"),Ngr=o("lxmert"),jgr=o(" \u2014 "),YW=a("a"),Dgr=o("TFLxmertForPreTraining"),Ggr=o(" (LXMERT model)"),Ogr=l(),KT=a("li"),dbe=a("strong"),Vgr=o("mobilebert"),Xgr=o(" \u2014 "),KW=a("a"),zgr=o("TFMobileBertForPreTraining"),Wgr=o(" (MobileBERT model)"),Qgr=l(),ZT=a("li"),cbe=a("strong"),Hgr=o("mpnet"),Ugr=o(" \u2014 "),ZW=a("a"),Jgr=o("TFMPNetForMaskedLM"),Ygr=o(" (MPNet model)"),Kgr=l(),e7=a("li"),fbe=a("strong"),Zgr=o("openai-gpt"),ehr=o(" \u2014 "),eQ=a("a"),ohr=o("TFOpenAIGPTLMHeadModel"),rhr=o(" (OpenAI GPT model)"),thr=l(),o7=a("li"),mbe=a("strong"),ahr=o("roberta"),nhr=o(" \u2014 "),oQ=a("a"),shr=o("TFRobertaForMaskedLM"),lhr=o(" (RoBERTa model)"),ihr=l(),r7=a("li"),gbe=a("strong"),dhr=o("t5"),chr=o(" \u2014 "),rQ=a("a"),fhr=o("TFT5ForConditionalGeneration"),mhr=o(" (T5 model)"),ghr=l(),t7=a("li"),hbe=a("strong"),hhr=o("tapas"),phr=o(" \u2014 "),tQ=a("a"),uhr=o("TFTapasForMaskedLM"),_hr=o(" (TAPAS model)"),bhr=l(),a7=a("li"),pbe=a("strong"),vhr=o("transfo-xl"),Fhr=o(" \u2014 "),aQ=a("a"),Thr=o("TFTransfoXLLMHeadModel"),Mhr=o(" (Transformer-XL model)"),Ehr=l(),n7=a("li"),ube=a("strong"),Chr=o("vit_mae"),whr=o(" \u2014 "),nQ=a("a"),Ahr=o("TFViTMAEForPreTraining"),yhr=o(" (ViTMAE model)"),Lhr=l(),s7=a("li"),_be=a("strong"),xhr=o("xlm"),$hr=o(" \u2014 "),sQ=a("a"),khr=o("TFXLMWithLMHeadModel"),Shr=o(" (XLM model)"),Rhr=l(),l7=a("li"),bbe=a("strong"),Phr=o("xlm-roberta"),Bhr=o(" \u2014 "),lQ=a("a"),Ihr=o("TFXLMRobertaForMaskedLM"),qhr=o(" (XLM-RoBERTa model)"),Nhr=l(),i7=a("li"),vbe=a("strong"),jhr=o("xlnet"),Dhr=o(" \u2014 "),iQ=a("a"),Ghr=o("TFXLNetLMHeadModel"),Ohr=o(" (XLNet model)"),Vhr=l(),F(d7.$$.fragment),wNe=l(),Qd=a("h2"),c7=a("a"),Fbe=a("span"),F(d8.$$.fragment),Xhr=l(),Tbe=a("span"),zhr=o("TFAutoModelForCausalLM"),ANe=l(),Zo=a("div"),F(c8.$$.fragment),Whr=l(),Hd=a("p"),Qhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=a("a"),Hhr=o("from_pretrained()"),Uhr=o(" class method or the "),cQ=a("a"),Jhr=o("from_config()"),Yhr=o(` class
method.`),Khr=l(),f8=a("p"),Zhr=o("This class cannot be instantiated directly using "),Mbe=a("code"),epr=o("__init__()"),opr=o(" (throws an error)."),rpr=l(),xt=a("div"),F(m8.$$.fragment),tpr=l(),Ebe=a("p"),apr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),npr=l(),Ud=a("p"),spr=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),lpr=o("not"),ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),dpr=o("from_pretrained()"),cpr=o(" to load the model weights."),fpr=l(),F(f7.$$.fragment),mpr=l(),yr=a("div"),F(g8.$$.fragment),gpr=l(),wbe=a("p"),hpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ppr=l(),en=a("p"),upr=o("The model class to instantiate is selected based on the "),Abe=a("code"),_pr=o("model_type"),bpr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),vpr=o("pretrained_model_name_or_path"),Fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),Tpr=o("pretrained_model_name_or_path"),Mpr=o(":"),Epr=l(),Te=a("ul"),m7=a("li"),xbe=a("strong"),Cpr=o("bert"),wpr=o(" \u2014 "),mQ=a("a"),Apr=o("TFBertLMHeadModel"),ypr=o(" (BERT model)"),Lpr=l(),g7=a("li"),$be=a("strong"),xpr=o("camembert"),$pr=o(" \u2014 "),gQ=a("a"),kpr=o("TFCamembertForCausalLM"),Spr=o(" (CamemBERT model)"),Rpr=l(),h7=a("li"),kbe=a("strong"),Ppr=o("ctrl"),Bpr=o(" \u2014 "),hQ=a("a"),Ipr=o("TFCTRLLMHeadModel"),qpr=o(" (CTRL model)"),Npr=l(),p7=a("li"),Sbe=a("strong"),jpr=o("gpt2"),Dpr=o(" \u2014 "),pQ=a("a"),Gpr=o("TFGPT2LMHeadModel"),Opr=o(" (OpenAI GPT-2 model)"),Vpr=l(),u7=a("li"),Rbe=a("strong"),Xpr=o("gptj"),zpr=o(" \u2014 "),uQ=a("a"),Wpr=o("TFGPTJForCausalLM"),Qpr=o(" (GPT-J model)"),Hpr=l(),_7=a("li"),Pbe=a("strong"),Upr=o("openai-gpt"),Jpr=o(" \u2014 "),_Q=a("a"),Ypr=o("TFOpenAIGPTLMHeadModel"),Kpr=o(" (OpenAI GPT model)"),Zpr=l(),b7=a("li"),Bbe=a("strong"),eur=o("rembert"),our=o(" \u2014 "),bQ=a("a"),rur=o("TFRemBertForCausalLM"),tur=o(" (RemBERT model)"),aur=l(),v7=a("li"),Ibe=a("strong"),nur=o("roberta"),sur=o(" \u2014 "),vQ=a("a"),lur=o("TFRobertaForCausalLM"),iur=o(" (RoBERTa model)"),dur=l(),F7=a("li"),qbe=a("strong"),cur=o("roformer"),fur=o(" \u2014 "),FQ=a("a"),mur=o("TFRoFormerForCausalLM"),gur=o(" (RoFormer model)"),hur=l(),T7=a("li"),Nbe=a("strong"),pur=o("transfo-xl"),uur=o(" \u2014 "),TQ=a("a"),_ur=o("TFTransfoXLLMHeadModel"),bur=o(" (Transformer-XL model)"),vur=l(),M7=a("li"),jbe=a("strong"),Fur=o("xlm"),Tur=o(" \u2014 "),MQ=a("a"),Mur=o("TFXLMWithLMHeadModel"),Eur=o(" (XLM model)"),Cur=l(),E7=a("li"),Dbe=a("strong"),wur=o("xlnet"),Aur=o(" \u2014 "),EQ=a("a"),yur=o("TFXLNetLMHeadModel"),Lur=o(" (XLNet model)"),xur=l(),F(C7.$$.fragment),yNe=l(),Jd=a("h2"),w7=a("a"),Gbe=a("span"),F(h8.$$.fragment),$ur=l(),Obe=a("span"),kur=o("TFAutoModelForImageClassification"),LNe=l(),er=a("div"),F(p8.$$.fragment),Sur=l(),Yd=a("p"),Rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CQ=a("a"),Pur=o("from_pretrained()"),Bur=o(" class method or the "),wQ=a("a"),Iur=o("from_config()"),qur=o(` class
method.`),Nur=l(),u8=a("p"),jur=o("This class cannot be instantiated directly using "),Vbe=a("code"),Dur=o("__init__()"),Gur=o(" (throws an error)."),Our=l(),$t=a("div"),F(_8.$$.fragment),Vur=l(),Xbe=a("p"),Xur=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zur=l(),Kd=a("p"),Wur=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),Qur=o("not"),Hur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),Uur=o("from_pretrained()"),Jur=o(" to load the model weights."),Yur=l(),F(A7.$$.fragment),Kur=l(),Lr=a("div"),F(b8.$$.fragment),Zur=l(),Wbe=a("p"),e_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o_r=l(),on=a("p"),r_r=o("The model class to instantiate is selected based on the "),Qbe=a("code"),t_r=o("model_type"),a_r=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),n_r=o("pretrained_model_name_or_path"),s_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),l_r=o("pretrained_model_name_or_path"),i_r=o(":"),d_r=l(),rn=a("ul"),y7=a("li"),Jbe=a("strong"),c_r=o("convnext"),f_r=o(" \u2014 "),yQ=a("a"),m_r=o("TFConvNextForImageClassification"),g_r=o(" (ConvNext model)"),h_r=l(),L7=a("li"),Ybe=a("strong"),p_r=o("data2vec-vision"),u_r=o(" \u2014 "),LQ=a("a"),__r=o("TFData2VecVisionForImageClassification"),b_r=o(" (Data2VecVision model)"),v_r=l(),x7=a("li"),Kbe=a("strong"),F_r=o("swin"),T_r=o(" \u2014 "),xQ=a("a"),M_r=o("TFSwinForImageClassification"),E_r=o(" (Swin model)"),C_r=l(),$7=a("li"),Zbe=a("strong"),w_r=o("vit"),A_r=o(" \u2014 "),$Q=a("a"),y_r=o("TFViTForImageClassification"),L_r=o(" (ViT model)"),x_r=l(),F(k7.$$.fragment),xNe=l(),Zd=a("h2"),S7=a("a"),e2e=a("span"),F(v8.$$.fragment),$_r=l(),o2e=a("span"),k_r=o("TFAutoModelForMaskedLM"),$Ne=l(),or=a("div"),F(F8.$$.fragment),S_r=l(),ec=a("p"),R_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=a("a"),P_r=o("from_pretrained()"),B_r=o(" class method or the "),SQ=a("a"),I_r=o("from_config()"),q_r=o(` class
method.`),N_r=l(),T8=a("p"),j_r=o("This class cannot be instantiated directly using "),r2e=a("code"),D_r=o("__init__()"),G_r=o(" (throws an error)."),O_r=l(),kt=a("div"),F(M8.$$.fragment),V_r=l(),t2e=a("p"),X_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),z_r=l(),oc=a("p"),W_r=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),Q_r=o("not"),H_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),U_r=o("from_pretrained()"),J_r=o(" to load the model weights."),Y_r=l(),F(R7.$$.fragment),K_r=l(),xr=a("div"),F(E8.$$.fragment),Z_r=l(),n2e=a("p"),e0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o0r=l(),tn=a("p"),r0r=o("The model class to instantiate is selected based on the "),s2e=a("code"),t0r=o("model_type"),a0r=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(":"),d0r=l(),ie=a("ul"),P7=a("li"),d2e=a("strong"),c0r=o("albert"),f0r=o(" \u2014 "),PQ=a("a"),m0r=o("TFAlbertForMaskedLM"),g0r=o(" (ALBERT model)"),h0r=l(),B7=a("li"),c2e=a("strong"),p0r=o("bert"),u0r=o(" \u2014 "),BQ=a("a"),_0r=o("TFBertForMaskedLM"),b0r=o(" (BERT model)"),v0r=l(),I7=a("li"),f2e=a("strong"),F0r=o("camembert"),T0r=o(" \u2014 "),IQ=a("a"),M0r=o("TFCamembertForMaskedLM"),E0r=o(" (CamemBERT model)"),C0r=l(),q7=a("li"),m2e=a("strong"),w0r=o("convbert"),A0r=o(" \u2014 "),qQ=a("a"),y0r=o("TFConvBertForMaskedLM"),L0r=o(" (ConvBERT model)"),x0r=l(),N7=a("li"),g2e=a("strong"),$0r=o("deberta"),k0r=o(" \u2014 "),NQ=a("a"),S0r=o("TFDebertaForMaskedLM"),R0r=o(" (DeBERTa model)"),P0r=l(),j7=a("li"),h2e=a("strong"),B0r=o("deberta-v2"),I0r=o(" \u2014 "),jQ=a("a"),q0r=o("TFDebertaV2ForMaskedLM"),N0r=o(" (DeBERTa-v2 model)"),j0r=l(),D7=a("li"),p2e=a("strong"),D0r=o("distilbert"),G0r=o(" \u2014 "),DQ=a("a"),O0r=o("TFDistilBertForMaskedLM"),V0r=o(" (DistilBERT model)"),X0r=l(),G7=a("li"),u2e=a("strong"),z0r=o("electra"),W0r=o(" \u2014 "),GQ=a("a"),Q0r=o("TFElectraForMaskedLM"),H0r=o(" (ELECTRA model)"),U0r=l(),O7=a("li"),_2e=a("strong"),J0r=o("flaubert"),Y0r=o(" \u2014 "),OQ=a("a"),K0r=o("TFFlaubertWithLMHeadModel"),Z0r=o(" (FlauBERT model)"),e1r=l(),V7=a("li"),b2e=a("strong"),o1r=o("funnel"),r1r=o(" \u2014 "),VQ=a("a"),t1r=o("TFFunnelForMaskedLM"),a1r=o(" (Funnel Transformer model)"),n1r=l(),X7=a("li"),v2e=a("strong"),s1r=o("layoutlm"),l1r=o(" \u2014 "),XQ=a("a"),i1r=o("TFLayoutLMForMaskedLM"),d1r=o(" (LayoutLM model)"),c1r=l(),z7=a("li"),F2e=a("strong"),f1r=o("longformer"),m1r=o(" \u2014 "),zQ=a("a"),g1r=o("TFLongformerForMaskedLM"),h1r=o(" (Longformer model)"),p1r=l(),W7=a("li"),T2e=a("strong"),u1r=o("mobilebert"),_1r=o(" \u2014 "),WQ=a("a"),b1r=o("TFMobileBertForMaskedLM"),v1r=o(" (MobileBERT model)"),F1r=l(),Q7=a("li"),M2e=a("strong"),T1r=o("mpnet"),M1r=o(" \u2014 "),QQ=a("a"),E1r=o("TFMPNetForMaskedLM"),C1r=o(" (MPNet model)"),w1r=l(),H7=a("li"),E2e=a("strong"),A1r=o("rembert"),y1r=o(" \u2014 "),HQ=a("a"),L1r=o("TFRemBertForMaskedLM"),x1r=o(" (RemBERT model)"),$1r=l(),U7=a("li"),C2e=a("strong"),k1r=o("roberta"),S1r=o(" \u2014 "),UQ=a("a"),R1r=o("TFRobertaForMaskedLM"),P1r=o(" (RoBERTa model)"),B1r=l(),J7=a("li"),w2e=a("strong"),I1r=o("roformer"),q1r=o(" \u2014 "),JQ=a("a"),N1r=o("TFRoFormerForMaskedLM"),j1r=o(" (RoFormer model)"),D1r=l(),Y7=a("li"),A2e=a("strong"),G1r=o("tapas"),O1r=o(" \u2014 "),YQ=a("a"),V1r=o("TFTapasForMaskedLM"),X1r=o(" (TAPAS model)"),z1r=l(),K7=a("li"),y2e=a("strong"),W1r=o("xlm"),Q1r=o(" \u2014 "),KQ=a("a"),H1r=o("TFXLMWithLMHeadModel"),U1r=o(" (XLM model)"),J1r=l(),Z7=a("li"),L2e=a("strong"),Y1r=o("xlm-roberta"),K1r=o(" \u2014 "),ZQ=a("a"),Z1r=o("TFXLMRobertaForMaskedLM"),ebr=o(" (XLM-RoBERTa model)"),obr=l(),F(eM.$$.fragment),kNe=l(),rc=a("h2"),oM=a("a"),x2e=a("span"),F(C8.$$.fragment),rbr=l(),$2e=a("span"),tbr=o("TFAutoModelForSeq2SeqLM"),SNe=l(),rr=a("div"),F(w8.$$.fragment),abr=l(),tc=a("p"),nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=a("a"),sbr=o("from_pretrained()"),lbr=o(" class method or the "),oH=a("a"),ibr=o("from_config()"),dbr=o(` class
method.`),cbr=l(),A8=a("p"),fbr=o("This class cannot be instantiated directly using "),k2e=a("code"),mbr=o("__init__()"),gbr=o(" (throws an error)."),hbr=l(),St=a("div"),F(y8.$$.fragment),pbr=l(),S2e=a("p"),ubr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_br=l(),ac=a("p"),bbr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),vbr=o("not"),Fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Tbr=o("from_pretrained()"),Mbr=o(" to load the model weights."),Ebr=l(),F(rM.$$.fragment),Cbr=l(),$r=a("div"),F(L8.$$.fragment),wbr=l(),P2e=a("p"),Abr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ybr=l(),an=a("p"),Lbr=o("The model class to instantiate is selected based on the "),B2e=a("code"),xbr=o("model_type"),$br=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),Rbr=o("pretrained_model_name_or_path"),Pbr=o(":"),Bbr=l(),ye=a("ul"),tM=a("li"),N2e=a("strong"),Ibr=o("bart"),qbr=o(" \u2014 "),tH=a("a"),Nbr=o("TFBartForConditionalGeneration"),jbr=o(" (BART model)"),Dbr=l(),aM=a("li"),j2e=a("strong"),Gbr=o("blenderbot"),Obr=o(" \u2014 "),aH=a("a"),Vbr=o("TFBlenderbotForConditionalGeneration"),Xbr=o(" (Blenderbot model)"),zbr=l(),nM=a("li"),D2e=a("strong"),Wbr=o("blenderbot-small"),Qbr=o(" \u2014 "),nH=a("a"),Hbr=o("TFBlenderbotSmallForConditionalGeneration"),Ubr=o(" (BlenderbotSmall model)"),Jbr=l(),sM=a("li"),G2e=a("strong"),Ybr=o("encoder-decoder"),Kbr=o(" \u2014 "),sH=a("a"),Zbr=o("TFEncoderDecoderModel"),e2r=o(" (Encoder decoder model)"),o2r=l(),lM=a("li"),O2e=a("strong"),r2r=o("led"),t2r=o(" \u2014 "),lH=a("a"),a2r=o("TFLEDForConditionalGeneration"),n2r=o(" (LED model)"),s2r=l(),iM=a("li"),V2e=a("strong"),l2r=o("marian"),i2r=o(" \u2014 "),iH=a("a"),d2r=o("TFMarianMTModel"),c2r=o(" (Marian model)"),f2r=l(),dM=a("li"),X2e=a("strong"),m2r=o("mbart"),g2r=o(" \u2014 "),dH=a("a"),h2r=o("TFMBartForConditionalGeneration"),p2r=o(" (mBART model)"),u2r=l(),cM=a("li"),z2e=a("strong"),_2r=o("mt5"),b2r=o(" \u2014 "),cH=a("a"),v2r=o("TFMT5ForConditionalGeneration"),F2r=o(" (mT5 model)"),T2r=l(),fM=a("li"),W2e=a("strong"),M2r=o("pegasus"),E2r=o(" \u2014 "),fH=a("a"),C2r=o("TFPegasusForConditionalGeneration"),w2r=o(" (Pegasus model)"),A2r=l(),mM=a("li"),Q2e=a("strong"),y2r=o("t5"),L2r=o(" \u2014 "),mH=a("a"),x2r=o("TFT5ForConditionalGeneration"),$2r=o(" (T5 model)"),k2r=l(),F(gM.$$.fragment),RNe=l(),nc=a("h2"),hM=a("a"),H2e=a("span"),F(x8.$$.fragment),S2r=l(),U2e=a("span"),R2r=o("TFAutoModelForSequenceClassification"),PNe=l(),tr=a("div"),F($8.$$.fragment),P2r=l(),sc=a("p"),B2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gH=a("a"),I2r=o("from_pretrained()"),q2r=o(" class method or the "),hH=a("a"),N2r=o("from_config()"),j2r=o(` class
method.`),D2r=l(),k8=a("p"),G2r=o("This class cannot be instantiated directly using "),J2e=a("code"),O2r=o("__init__()"),V2r=o(" (throws an error)."),X2r=l(),Rt=a("div"),F(S8.$$.fragment),z2r=l(),Y2e=a("p"),W2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q2r=l(),lc=a("p"),H2r=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),U2r=o("not"),J2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),Y2r=o("from_pretrained()"),K2r=o(" to load the model weights."),Z2r=l(),F(pM.$$.fragment),evr=l(),kr=a("div"),F(R8.$$.fragment),ovr=l(),Z2e=a("p"),rvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tvr=l(),nn=a("p"),avr=o("The model class to instantiate is selected based on the "),eve=a("code"),nvr=o("model_type"),svr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(":"),fvr=l(),ee=a("ul"),uM=a("li"),tve=a("strong"),mvr=o("albert"),gvr=o(" \u2014 "),uH=a("a"),hvr=o("TFAlbertForSequenceClassification"),pvr=o(" (ALBERT model)"),uvr=l(),_M=a("li"),ave=a("strong"),_vr=o("bert"),bvr=o(" \u2014 "),_H=a("a"),vvr=o("TFBertForSequenceClassification"),Fvr=o(" (BERT model)"),Tvr=l(),bM=a("li"),nve=a("strong"),Mvr=o("camembert"),Evr=o(" \u2014 "),bH=a("a"),Cvr=o("TFCamembertForSequenceClassification"),wvr=o(" (CamemBERT model)"),Avr=l(),vM=a("li"),sve=a("strong"),yvr=o("convbert"),Lvr=o(" \u2014 "),vH=a("a"),xvr=o("TFConvBertForSequenceClassification"),$vr=o(" (ConvBERT model)"),kvr=l(),FM=a("li"),lve=a("strong"),Svr=o("ctrl"),Rvr=o(" \u2014 "),FH=a("a"),Pvr=o("TFCTRLForSequenceClassification"),Bvr=o(" (CTRL model)"),Ivr=l(),TM=a("li"),ive=a("strong"),qvr=o("deberta"),Nvr=o(" \u2014 "),TH=a("a"),jvr=o("TFDebertaForSequenceClassification"),Dvr=o(" (DeBERTa model)"),Gvr=l(),MM=a("li"),dve=a("strong"),Ovr=o("deberta-v2"),Vvr=o(" \u2014 "),MH=a("a"),Xvr=o("TFDebertaV2ForSequenceClassification"),zvr=o(" (DeBERTa-v2 model)"),Wvr=l(),EM=a("li"),cve=a("strong"),Qvr=o("distilbert"),Hvr=o(" \u2014 "),EH=a("a"),Uvr=o("TFDistilBertForSequenceClassification"),Jvr=o(" (DistilBERT model)"),Yvr=l(),CM=a("li"),fve=a("strong"),Kvr=o("electra"),Zvr=o(" \u2014 "),CH=a("a"),eFr=o("TFElectraForSequenceClassification"),oFr=o(" (ELECTRA model)"),rFr=l(),wM=a("li"),mve=a("strong"),tFr=o("flaubert"),aFr=o(" \u2014 "),wH=a("a"),nFr=o("TFFlaubertForSequenceClassification"),sFr=o(" (FlauBERT model)"),lFr=l(),AM=a("li"),gve=a("strong"),iFr=o("funnel"),dFr=o(" \u2014 "),AH=a("a"),cFr=o("TFFunnelForSequenceClassification"),fFr=o(" (Funnel Transformer model)"),mFr=l(),yM=a("li"),hve=a("strong"),gFr=o("gpt2"),hFr=o(" \u2014 "),yH=a("a"),pFr=o("TFGPT2ForSequenceClassification"),uFr=o(" (OpenAI GPT-2 model)"),_Fr=l(),LM=a("li"),pve=a("strong"),bFr=o("gptj"),vFr=o(" \u2014 "),LH=a("a"),FFr=o("TFGPTJForSequenceClassification"),TFr=o(" (GPT-J model)"),MFr=l(),xM=a("li"),uve=a("strong"),EFr=o("layoutlm"),CFr=o(" \u2014 "),xH=a("a"),wFr=o("TFLayoutLMForSequenceClassification"),AFr=o(" (LayoutLM model)"),yFr=l(),$M=a("li"),_ve=a("strong"),LFr=o("longformer"),xFr=o(" \u2014 "),$H=a("a"),$Fr=o("TFLongformerForSequenceClassification"),kFr=o(" (Longformer model)"),SFr=l(),kM=a("li"),bve=a("strong"),RFr=o("mobilebert"),PFr=o(" \u2014 "),kH=a("a"),BFr=o("TFMobileBertForSequenceClassification"),IFr=o(" (MobileBERT model)"),qFr=l(),SM=a("li"),vve=a("strong"),NFr=o("mpnet"),jFr=o(" \u2014 "),SH=a("a"),DFr=o("TFMPNetForSequenceClassification"),GFr=o(" (MPNet model)"),OFr=l(),RM=a("li"),Fve=a("strong"),VFr=o("openai-gpt"),XFr=o(" \u2014 "),RH=a("a"),zFr=o("TFOpenAIGPTForSequenceClassification"),WFr=o(" (OpenAI GPT model)"),QFr=l(),PM=a("li"),Tve=a("strong"),HFr=o("rembert"),UFr=o(" \u2014 "),PH=a("a"),JFr=o("TFRemBertForSequenceClassification"),YFr=o(" (RemBERT model)"),KFr=l(),BM=a("li"),Mve=a("strong"),ZFr=o("roberta"),e6r=o(" \u2014 "),BH=a("a"),o6r=o("TFRobertaForSequenceClassification"),r6r=o(" (RoBERTa model)"),t6r=l(),IM=a("li"),Eve=a("strong"),a6r=o("roformer"),n6r=o(" \u2014 "),IH=a("a"),s6r=o("TFRoFormerForSequenceClassification"),l6r=o(" (RoFormer model)"),i6r=l(),qM=a("li"),Cve=a("strong"),d6r=o("tapas"),c6r=o(" \u2014 "),qH=a("a"),f6r=o("TFTapasForSequenceClassification"),m6r=o(" (TAPAS model)"),g6r=l(),NM=a("li"),wve=a("strong"),h6r=o("transfo-xl"),p6r=o(" \u2014 "),NH=a("a"),u6r=o("TFTransfoXLForSequenceClassification"),_6r=o(" (Transformer-XL model)"),b6r=l(),jM=a("li"),Ave=a("strong"),v6r=o("xlm"),F6r=o(" \u2014 "),jH=a("a"),T6r=o("TFXLMForSequenceClassification"),M6r=o(" (XLM model)"),E6r=l(),DM=a("li"),yve=a("strong"),C6r=o("xlm-roberta"),w6r=o(" \u2014 "),DH=a("a"),A6r=o("TFXLMRobertaForSequenceClassification"),y6r=o(" (XLM-RoBERTa model)"),L6r=l(),GM=a("li"),Lve=a("strong"),x6r=o("xlnet"),$6r=o(" \u2014 "),GH=a("a"),k6r=o("TFXLNetForSequenceClassification"),S6r=o(" (XLNet model)"),R6r=l(),F(OM.$$.fragment),BNe=l(),ic=a("h2"),VM=a("a"),xve=a("span"),F(P8.$$.fragment),P6r=l(),$ve=a("span"),B6r=o("TFAutoModelForMultipleChoice"),INe=l(),ar=a("div"),F(B8.$$.fragment),I6r=l(),dc=a("p"),q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=a("a"),N6r=o("from_pretrained()"),j6r=o(" class method or the "),VH=a("a"),D6r=o("from_config()"),G6r=o(` class
method.`),O6r=l(),I8=a("p"),V6r=o("This class cannot be instantiated directly using "),kve=a("code"),X6r=o("__init__()"),z6r=o(" (throws an error)."),W6r=l(),Pt=a("div"),F(q8.$$.fragment),Q6r=l(),Sve=a("p"),H6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),U6r=l(),cc=a("p"),J6r=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),Y6r=o("not"),K6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Z6r=o("from_pretrained()"),eTr=o(" to load the model weights."),oTr=l(),F(XM.$$.fragment),rTr=l(),Sr=a("div"),F(N8.$$.fragment),tTr=l(),Pve=a("p"),aTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nTr=l(),sn=a("p"),sTr=o("The model class to instantiate is selected based on the "),Bve=a("code"),lTr=o("model_type"),iTr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),fTr=o("pretrained_model_name_or_path"),mTr=o(":"),gTr=l(),pe=a("ul"),zM=a("li"),Nve=a("strong"),hTr=o("albert"),pTr=o(" \u2014 "),zH=a("a"),uTr=o("TFAlbertForMultipleChoice"),_Tr=o(" (ALBERT model)"),bTr=l(),WM=a("li"),jve=a("strong"),vTr=o("bert"),FTr=o(" \u2014 "),WH=a("a"),TTr=o("TFBertForMultipleChoice"),MTr=o(" (BERT model)"),ETr=l(),QM=a("li"),Dve=a("strong"),CTr=o("camembert"),wTr=o(" \u2014 "),QH=a("a"),ATr=o("TFCamembertForMultipleChoice"),yTr=o(" (CamemBERT model)"),LTr=l(),HM=a("li"),Gve=a("strong"),xTr=o("convbert"),$Tr=o(" \u2014 "),HH=a("a"),kTr=o("TFConvBertForMultipleChoice"),STr=o(" (ConvBERT model)"),RTr=l(),UM=a("li"),Ove=a("strong"),PTr=o("distilbert"),BTr=o(" \u2014 "),UH=a("a"),ITr=o("TFDistilBertForMultipleChoice"),qTr=o(" (DistilBERT model)"),NTr=l(),JM=a("li"),Vve=a("strong"),jTr=o("electra"),DTr=o(" \u2014 "),JH=a("a"),GTr=o("TFElectraForMultipleChoice"),OTr=o(" (ELECTRA model)"),VTr=l(),YM=a("li"),Xve=a("strong"),XTr=o("flaubert"),zTr=o(" \u2014 "),YH=a("a"),WTr=o("TFFlaubertForMultipleChoice"),QTr=o(" (FlauBERT model)"),HTr=l(),KM=a("li"),zve=a("strong"),UTr=o("funnel"),JTr=o(" \u2014 "),KH=a("a"),YTr=o("TFFunnelForMultipleChoice"),KTr=o(" (Funnel Transformer model)"),ZTr=l(),ZM=a("li"),Wve=a("strong"),e7r=o("longformer"),o7r=o(" \u2014 "),ZH=a("a"),r7r=o("TFLongformerForMultipleChoice"),t7r=o(" (Longformer model)"),a7r=l(),e4=a("li"),Qve=a("strong"),n7r=o("mobilebert"),s7r=o(" \u2014 "),eU=a("a"),l7r=o("TFMobileBertForMultipleChoice"),i7r=o(" (MobileBERT model)"),d7r=l(),o4=a("li"),Hve=a("strong"),c7r=o("mpnet"),f7r=o(" \u2014 "),oU=a("a"),m7r=o("TFMPNetForMultipleChoice"),g7r=o(" (MPNet model)"),h7r=l(),r4=a("li"),Uve=a("strong"),p7r=o("rembert"),u7r=o(" \u2014 "),rU=a("a"),_7r=o("TFRemBertForMultipleChoice"),b7r=o(" (RemBERT model)"),v7r=l(),t4=a("li"),Jve=a("strong"),F7r=o("roberta"),T7r=o(" \u2014 "),tU=a("a"),M7r=o("TFRobertaForMultipleChoice"),E7r=o(" (RoBERTa model)"),C7r=l(),a4=a("li"),Yve=a("strong"),w7r=o("roformer"),A7r=o(" \u2014 "),aU=a("a"),y7r=o("TFRoFormerForMultipleChoice"),L7r=o(" (RoFormer model)"),x7r=l(),n4=a("li"),Kve=a("strong"),$7r=o("xlm"),k7r=o(" \u2014 "),nU=a("a"),S7r=o("TFXLMForMultipleChoice"),R7r=o(" (XLM model)"),P7r=l(),s4=a("li"),Zve=a("strong"),B7r=o("xlm-roberta"),I7r=o(" \u2014 "),sU=a("a"),q7r=o("TFXLMRobertaForMultipleChoice"),N7r=o(" (XLM-RoBERTa model)"),j7r=l(),l4=a("li"),eFe=a("strong"),D7r=o("xlnet"),G7r=o(" \u2014 "),lU=a("a"),O7r=o("TFXLNetForMultipleChoice"),V7r=o(" (XLNet model)"),X7r=l(),F(i4.$$.fragment),qNe=l(),fc=a("h2"),d4=a("a"),oFe=a("span"),F(j8.$$.fragment),z7r=l(),rFe=a("span"),W7r=o("TFAutoModelForNextSentencePrediction"),NNe=l(),nr=a("div"),F(D8.$$.fragment),Q7r=l(),mc=a("p"),H7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=a("a"),U7r=o("from_pretrained()"),J7r=o(" class method or the "),dU=a("a"),Y7r=o("from_config()"),K7r=o(` class
method.`),Z7r=l(),G8=a("p"),eMr=o("This class cannot be instantiated directly using "),tFe=a("code"),oMr=o("__init__()"),rMr=o(" (throws an error)."),tMr=l(),Bt=a("div"),F(O8.$$.fragment),aMr=l(),aFe=a("p"),nMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sMr=l(),gc=a("p"),lMr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),iMr=o("not"),dMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),cMr=o("from_pretrained()"),fMr=o(" to load the model weights."),mMr=l(),F(c4.$$.fragment),gMr=l(),Rr=a("div"),F(V8.$$.fragment),hMr=l(),sFe=a("p"),pMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uMr=l(),ln=a("p"),_Mr=o("The model class to instantiate is selected based on the "),lFe=a("code"),bMr=o("model_type"),vMr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),FMr=o("pretrained_model_name_or_path"),TMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(":"),CMr=l(),X8=a("ul"),f4=a("li"),cFe=a("strong"),wMr=o("bert"),AMr=o(" \u2014 "),fU=a("a"),yMr=o("TFBertForNextSentencePrediction"),LMr=o(" (BERT model)"),xMr=l(),m4=a("li"),fFe=a("strong"),$Mr=o("mobilebert"),kMr=o(" \u2014 "),mU=a("a"),SMr=o("TFMobileBertForNextSentencePrediction"),RMr=o(" (MobileBERT model)"),PMr=l(),F(g4.$$.fragment),jNe=l(),hc=a("h2"),h4=a("a"),mFe=a("span"),F(z8.$$.fragment),BMr=l(),gFe=a("span"),IMr=o("TFAutoModelForTableQuestionAnswering"),DNe=l(),sr=a("div"),F(W8.$$.fragment),qMr=l(),pc=a("p"),NMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gU=a("a"),jMr=o("from_pretrained()"),DMr=o(" class method or the "),hU=a("a"),GMr=o("from_config()"),OMr=o(` class
method.`),VMr=l(),Q8=a("p"),XMr=o("This class cannot be instantiated directly using "),hFe=a("code"),zMr=o("__init__()"),WMr=o(" (throws an error)."),QMr=l(),It=a("div"),F(H8.$$.fragment),HMr=l(),pFe=a("p"),UMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JMr=l(),uc=a("p"),YMr=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),KMr=o("not"),ZMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),e4r=o("from_pretrained()"),o4r=o(" to load the model weights."),r4r=l(),F(p4.$$.fragment),t4r=l(),Pr=a("div"),F(U8.$$.fragment),a4r=l(),_Fe=a("p"),n4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),s4r=l(),dn=a("p"),l4r=o("The model class to instantiate is selected based on the "),bFe=a("code"),i4r=o("model_type"),d4r=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(":"),h4r=l(),TFe=a("ul"),u4=a("li"),MFe=a("strong"),p4r=o("tapas"),u4r=o(" \u2014 "),uU=a("a"),_4r=o("TFTapasForQuestionAnswering"),b4r=o(" (TAPAS model)"),v4r=l(),F(_4.$$.fragment),GNe=l(),_c=a("h2"),b4=a("a"),EFe=a("span"),F(J8.$$.fragment),F4r=l(),CFe=a("span"),T4r=o("TFAutoModelForTokenClassification"),ONe=l(),lr=a("div"),F(Y8.$$.fragment),M4r=l(),bc=a("p"),E4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_U=a("a"),C4r=o("from_pretrained()"),w4r=o(" class method or the "),bU=a("a"),A4r=o("from_config()"),y4r=o(` class
method.`),L4r=l(),K8=a("p"),x4r=o("This class cannot be instantiated directly using "),wFe=a("code"),$4r=o("__init__()"),k4r=o(" (throws an error)."),S4r=l(),qt=a("div"),F(Z8.$$.fragment),R4r=l(),AFe=a("p"),P4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B4r=l(),vc=a("p"),I4r=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),q4r=o("not"),N4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),j4r=o("from_pretrained()"),D4r=o(" to load the model weights."),G4r=l(),F(v4.$$.fragment),O4r=l(),Br=a("div"),F(e9.$$.fragment),V4r=l(),LFe=a("p"),X4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),z4r=l(),cn=a("p"),W4r=o("The model class to instantiate is selected based on the "),xFe=a("code"),Q4r=o("model_type"),H4r=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),U4r=o("pretrained_model_name_or_path"),J4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),Y4r=o("pretrained_model_name_or_path"),K4r=o(":"),Z4r=l(),de=a("ul"),F4=a("li"),SFe=a("strong"),eEr=o("albert"),oEr=o(" \u2014 "),FU=a("a"),rEr=o("TFAlbertForTokenClassification"),tEr=o(" (ALBERT model)"),aEr=l(),T4=a("li"),RFe=a("strong"),nEr=o("bert"),sEr=o(" \u2014 "),TU=a("a"),lEr=o("TFBertForTokenClassification"),iEr=o(" (BERT model)"),dEr=l(),M4=a("li"),PFe=a("strong"),cEr=o("camembert"),fEr=o(" \u2014 "),MU=a("a"),mEr=o("TFCamembertForTokenClassification"),gEr=o(" (CamemBERT model)"),hEr=l(),E4=a("li"),BFe=a("strong"),pEr=o("convbert"),uEr=o(" \u2014 "),EU=a("a"),_Er=o("TFConvBertForTokenClassification"),bEr=o(" (ConvBERT model)"),vEr=l(),C4=a("li"),IFe=a("strong"),FEr=o("deberta"),TEr=o(" \u2014 "),CU=a("a"),MEr=o("TFDebertaForTokenClassification"),EEr=o(" (DeBERTa model)"),CEr=l(),w4=a("li"),qFe=a("strong"),wEr=o("deberta-v2"),AEr=o(" \u2014 "),wU=a("a"),yEr=o("TFDebertaV2ForTokenClassification"),LEr=o(" (DeBERTa-v2 model)"),xEr=l(),A4=a("li"),NFe=a("strong"),$Er=o("distilbert"),kEr=o(" \u2014 "),AU=a("a"),SEr=o("TFDistilBertForTokenClassification"),REr=o(" (DistilBERT model)"),PEr=l(),y4=a("li"),jFe=a("strong"),BEr=o("electra"),IEr=o(" \u2014 "),yU=a("a"),qEr=o("TFElectraForTokenClassification"),NEr=o(" (ELECTRA model)"),jEr=l(),L4=a("li"),DFe=a("strong"),DEr=o("flaubert"),GEr=o(" \u2014 "),LU=a("a"),OEr=o("TFFlaubertForTokenClassification"),VEr=o(" (FlauBERT model)"),XEr=l(),x4=a("li"),GFe=a("strong"),zEr=o("funnel"),WEr=o(" \u2014 "),xU=a("a"),QEr=o("TFFunnelForTokenClassification"),HEr=o(" (Funnel Transformer model)"),UEr=l(),$4=a("li"),OFe=a("strong"),JEr=o("layoutlm"),YEr=o(" \u2014 "),$U=a("a"),KEr=o("TFLayoutLMForTokenClassification"),ZEr=o(" (LayoutLM model)"),eCr=l(),k4=a("li"),VFe=a("strong"),oCr=o("longformer"),rCr=o(" \u2014 "),kU=a("a"),tCr=o("TFLongformerForTokenClassification"),aCr=o(" (Longformer model)"),nCr=l(),S4=a("li"),XFe=a("strong"),sCr=o("mobilebert"),lCr=o(" \u2014 "),SU=a("a"),iCr=o("TFMobileBertForTokenClassification"),dCr=o(" (MobileBERT model)"),cCr=l(),R4=a("li"),zFe=a("strong"),fCr=o("mpnet"),mCr=o(" \u2014 "),RU=a("a"),gCr=o("TFMPNetForTokenClassification"),hCr=o(" (MPNet model)"),pCr=l(),P4=a("li"),WFe=a("strong"),uCr=o("rembert"),_Cr=o(" \u2014 "),PU=a("a"),bCr=o("TFRemBertForTokenClassification"),vCr=o(" (RemBERT model)"),FCr=l(),B4=a("li"),QFe=a("strong"),TCr=o("roberta"),MCr=o(" \u2014 "),BU=a("a"),ECr=o("TFRobertaForTokenClassification"),CCr=o(" (RoBERTa model)"),wCr=l(),I4=a("li"),HFe=a("strong"),ACr=o("roformer"),yCr=o(" \u2014 "),IU=a("a"),LCr=o("TFRoFormerForTokenClassification"),xCr=o(" (RoFormer model)"),$Cr=l(),q4=a("li"),UFe=a("strong"),kCr=o("xlm"),SCr=o(" \u2014 "),qU=a("a"),RCr=o("TFXLMForTokenClassification"),PCr=o(" (XLM model)"),BCr=l(),N4=a("li"),JFe=a("strong"),ICr=o("xlm-roberta"),qCr=o(" \u2014 "),NU=a("a"),NCr=o("TFXLMRobertaForTokenClassification"),jCr=o(" (XLM-RoBERTa model)"),DCr=l(),j4=a("li"),YFe=a("strong"),GCr=o("xlnet"),OCr=o(" \u2014 "),jU=a("a"),VCr=o("TFXLNetForTokenClassification"),XCr=o(" (XLNet model)"),zCr=l(),F(D4.$$.fragment),VNe=l(),Fc=a("h2"),G4=a("a"),KFe=a("span"),F(o9.$$.fragment),WCr=l(),ZFe=a("span"),QCr=o("TFAutoModelForQuestionAnswering"),XNe=l(),ir=a("div"),F(r9.$$.fragment),HCr=l(),Tc=a("p"),UCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DU=a("a"),JCr=o("from_pretrained()"),YCr=o(" class method or the "),GU=a("a"),KCr=o("from_config()"),ZCr=o(` class
method.`),e5r=l(),t9=a("p"),o5r=o("This class cannot be instantiated directly using "),e6e=a("code"),r5r=o("__init__()"),t5r=o(" (throws an error)."),a5r=l(),Nt=a("div"),F(a9.$$.fragment),n5r=l(),o6e=a("p"),s5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l5r=l(),Mc=a("p"),i5r=o(`Note:
Loading a model from its configuration file does `),r6e=a("strong"),d5r=o("not"),c5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=a("a"),f5r=o("from_pretrained()"),m5r=o(" to load the model weights."),g5r=l(),F(O4.$$.fragment),h5r=l(),Ir=a("div"),F(n9.$$.fragment),p5r=l(),t6e=a("p"),u5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_5r=l(),fn=a("p"),b5r=o("The model class to instantiate is selected based on the "),a6e=a("code"),v5r=o("model_type"),F5r=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),T5r=o("pretrained_model_name_or_path"),M5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),E5r=o("pretrained_model_name_or_path"),C5r=o(":"),w5r=l(),ce=a("ul"),V4=a("li"),l6e=a("strong"),A5r=o("albert"),y5r=o(" \u2014 "),VU=a("a"),L5r=o("TFAlbertForQuestionAnswering"),x5r=o(" (ALBERT model)"),$5r=l(),X4=a("li"),i6e=a("strong"),k5r=o("bert"),S5r=o(" \u2014 "),XU=a("a"),R5r=o("TFBertForQuestionAnswering"),P5r=o(" (BERT model)"),B5r=l(),z4=a("li"),d6e=a("strong"),I5r=o("camembert"),q5r=o(" \u2014 "),zU=a("a"),N5r=o("TFCamembertForQuestionAnswering"),j5r=o(" (CamemBERT model)"),D5r=l(),W4=a("li"),c6e=a("strong"),G5r=o("convbert"),O5r=o(" \u2014 "),WU=a("a"),V5r=o("TFConvBertForQuestionAnswering"),X5r=o(" (ConvBERT model)"),z5r=l(),Q4=a("li"),f6e=a("strong"),W5r=o("deberta"),Q5r=o(" \u2014 "),QU=a("a"),H5r=o("TFDebertaForQuestionAnswering"),U5r=o(" (DeBERTa model)"),J5r=l(),H4=a("li"),m6e=a("strong"),Y5r=o("deberta-v2"),K5r=o(" \u2014 "),HU=a("a"),Z5r=o("TFDebertaV2ForQuestionAnswering"),e3r=o(" (DeBERTa-v2 model)"),o3r=l(),U4=a("li"),g6e=a("strong"),r3r=o("distilbert"),t3r=o(" \u2014 "),UU=a("a"),a3r=o("TFDistilBertForQuestionAnswering"),n3r=o(" (DistilBERT model)"),s3r=l(),J4=a("li"),h6e=a("strong"),l3r=o("electra"),i3r=o(" \u2014 "),JU=a("a"),d3r=o("TFElectraForQuestionAnswering"),c3r=o(" (ELECTRA model)"),f3r=l(),Y4=a("li"),p6e=a("strong"),m3r=o("flaubert"),g3r=o(" \u2014 "),YU=a("a"),h3r=o("TFFlaubertForQuestionAnsweringSimple"),p3r=o(" (FlauBERT model)"),u3r=l(),K4=a("li"),u6e=a("strong"),_3r=o("funnel"),b3r=o(" \u2014 "),KU=a("a"),v3r=o("TFFunnelForQuestionAnswering"),F3r=o(" (Funnel Transformer model)"),T3r=l(),Z4=a("li"),_6e=a("strong"),M3r=o("gptj"),E3r=o(" \u2014 "),ZU=a("a"),C3r=o("TFGPTJForQuestionAnswering"),w3r=o(" (GPT-J model)"),A3r=l(),eE=a("li"),b6e=a("strong"),y3r=o("longformer"),L3r=o(" \u2014 "),eJ=a("a"),x3r=o("TFLongformerForQuestionAnswering"),$3r=o(" (Longformer model)"),k3r=l(),oE=a("li"),v6e=a("strong"),S3r=o("mobilebert"),R3r=o(" \u2014 "),oJ=a("a"),P3r=o("TFMobileBertForQuestionAnswering"),B3r=o(" (MobileBERT model)"),I3r=l(),rE=a("li"),F6e=a("strong"),q3r=o("mpnet"),N3r=o(" \u2014 "),rJ=a("a"),j3r=o("TFMPNetForQuestionAnswering"),D3r=o(" (MPNet model)"),G3r=l(),tE=a("li"),T6e=a("strong"),O3r=o("rembert"),V3r=o(" \u2014 "),tJ=a("a"),X3r=o("TFRemBertForQuestionAnswering"),z3r=o(" (RemBERT model)"),W3r=l(),aE=a("li"),M6e=a("strong"),Q3r=o("roberta"),H3r=o(" \u2014 "),aJ=a("a"),U3r=o("TFRobertaForQuestionAnswering"),J3r=o(" (RoBERTa model)"),Y3r=l(),nE=a("li"),E6e=a("strong"),K3r=o("roformer"),Z3r=o(" \u2014 "),nJ=a("a"),ewr=o("TFRoFormerForQuestionAnswering"),owr=o(" (RoFormer model)"),rwr=l(),sE=a("li"),C6e=a("strong"),twr=o("xlm"),awr=o(" \u2014 "),sJ=a("a"),nwr=o("TFXLMForQuestionAnsweringSimple"),swr=o(" (XLM model)"),lwr=l(),lE=a("li"),w6e=a("strong"),iwr=o("xlm-roberta"),dwr=o(" \u2014 "),lJ=a("a"),cwr=o("TFXLMRobertaForQuestionAnswering"),fwr=o(" (XLM-RoBERTa model)"),mwr=l(),iE=a("li"),A6e=a("strong"),gwr=o("xlnet"),hwr=o(" \u2014 "),iJ=a("a"),pwr=o("TFXLNetForQuestionAnsweringSimple"),uwr=o(" (XLNet model)"),_wr=l(),F(dE.$$.fragment),zNe=l(),Ec=a("h2"),cE=a("a"),y6e=a("span"),F(s9.$$.fragment),bwr=l(),L6e=a("span"),vwr=o("TFAutoModelForVision2Seq"),WNe=l(),dr=a("div"),F(l9.$$.fragment),Fwr=l(),Cc=a("p"),Twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=a("a"),Mwr=o("from_pretrained()"),Ewr=o(" class method or the "),cJ=a("a"),Cwr=o("from_config()"),wwr=o(` class
method.`),Awr=l(),i9=a("p"),ywr=o("This class cannot be instantiated directly using "),x6e=a("code"),Lwr=o("__init__()"),xwr=o(" (throws an error)."),$wr=l(),jt=a("div"),F(d9.$$.fragment),kwr=l(),$6e=a("p"),Swr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rwr=l(),wc=a("p"),Pwr=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),Bwr=o("not"),Iwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),qwr=o("from_pretrained()"),Nwr=o(" to load the model weights."),jwr=l(),F(fE.$$.fragment),Dwr=l(),qr=a("div"),F(c9.$$.fragment),Gwr=l(),S6e=a("p"),Owr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vwr=l(),mn=a("p"),Xwr=o("The model class to instantiate is selected based on the "),R6e=a("code"),zwr=o("model_type"),Wwr=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),Qwr=o("pretrained_model_name_or_path"),Hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=a("code"),Uwr=o("pretrained_model_name_or_path"),Jwr=o(":"),Ywr=l(),I6e=a("ul"),mE=a("li"),q6e=a("strong"),Kwr=o("vision-encoder-decoder"),Zwr=o(" \u2014 "),mJ=a("a"),eAr=o("TFVisionEncoderDecoderModel"),oAr=o(" (Vision Encoder decoder model)"),rAr=l(),F(gE.$$.fragment),QNe=l(),Ac=a("h2"),hE=a("a"),N6e=a("span"),F(f9.$$.fragment),tAr=l(),j6e=a("span"),aAr=o("TFAutoModelForSpeechSeq2Seq"),HNe=l(),cr=a("div"),F(m9.$$.fragment),nAr=l(),yc=a("p"),sAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gJ=a("a"),lAr=o("from_pretrained()"),iAr=o(" class method or the "),hJ=a("a"),dAr=o("from_config()"),cAr=o(` class
method.`),fAr=l(),g9=a("p"),mAr=o("This class cannot be instantiated directly using "),D6e=a("code"),gAr=o("__init__()"),hAr=o(" (throws an error)."),pAr=l(),Dt=a("div"),F(h9.$$.fragment),uAr=l(),G6e=a("p"),_Ar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bAr=l(),Lc=a("p"),vAr=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),FAr=o("not"),TAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),MAr=o("from_pretrained()"),EAr=o(" to load the model weights."),CAr=l(),F(pE.$$.fragment),wAr=l(),Nr=a("div"),F(p9.$$.fragment),AAr=l(),V6e=a("p"),yAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),LAr=l(),gn=a("p"),xAr=o("The model class to instantiate is selected based on the "),X6e=a("code"),$Ar=o("model_type"),kAr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(":"),IAr=l(),Q6e=a("ul"),uE=a("li"),H6e=a("strong"),qAr=o("speech_to_text"),NAr=o(" \u2014 "),uJ=a("a"),jAr=o("TFSpeech2TextForConditionalGeneration"),DAr=o(" (Speech2Text model)"),GAr=l(),F(_E.$$.fragment),UNe=l(),xc=a("h2"),bE=a("a"),U6e=a("span"),F(u9.$$.fragment),OAr=l(),J6e=a("span"),VAr=o("FlaxAutoModel"),JNe=l(),fr=a("div"),F(_9.$$.fragment),XAr=l(),$c=a("p"),zAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_J=a("a"),WAr=o("from_pretrained()"),QAr=o(" class method or the "),bJ=a("a"),HAr=o("from_config()"),UAr=o(` class
method.`),JAr=l(),b9=a("p"),YAr=o("This class cannot be instantiated directly using "),Y6e=a("code"),KAr=o("__init__()"),ZAr=o(" (throws an error)."),eyr=l(),Gt=a("div"),F(v9.$$.fragment),oyr=l(),K6e=a("p"),ryr=o("Instantiates one of the base model classes of the library from a configuration."),tyr=l(),kc=a("p"),ayr=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),nyr=o("not"),syr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),lyr=o("from_pretrained()"),iyr=o(" to load the model weights."),dyr=l(),F(vE.$$.fragment),cyr=l(),jr=a("div"),F(F9.$$.fragment),fyr=l(),eTe=a("p"),myr=o("Instantiate one of the base model classes of the library from a pretrained model."),gyr=l(),hn=a("p"),hyr=o("The model class to instantiate is selected based on the "),oTe=a("code"),pyr=o("model_type"),uyr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),_yr=o("pretrained_model_name_or_path"),byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),vyr=o("pretrained_model_name_or_path"),Fyr=o(":"),Tyr=l(),te=a("ul"),FE=a("li"),aTe=a("strong"),Myr=o("albert"),Eyr=o(" \u2014 "),FJ=a("a"),Cyr=o("FlaxAlbertModel"),wyr=o(" (ALBERT model)"),Ayr=l(),TE=a("li"),nTe=a("strong"),yyr=o("bart"),Lyr=o(" \u2014 "),TJ=a("a"),xyr=o("FlaxBartModel"),$yr=o(" (BART model)"),kyr=l(),ME=a("li"),sTe=a("strong"),Syr=o("beit"),Ryr=o(" \u2014 "),MJ=a("a"),Pyr=o("FlaxBeitModel"),Byr=o(" (BEiT model)"),Iyr=l(),EE=a("li"),lTe=a("strong"),qyr=o("bert"),Nyr=o(" \u2014 "),EJ=a("a"),jyr=o("FlaxBertModel"),Dyr=o(" (BERT model)"),Gyr=l(),CE=a("li"),iTe=a("strong"),Oyr=o("big_bird"),Vyr=o(" \u2014 "),CJ=a("a"),Xyr=o("FlaxBigBirdModel"),zyr=o(" (BigBird model)"),Wyr=l(),wE=a("li"),dTe=a("strong"),Qyr=o("blenderbot"),Hyr=o(" \u2014 "),wJ=a("a"),Uyr=o("FlaxBlenderbotModel"),Jyr=o(" (Blenderbot model)"),Yyr=l(),AE=a("li"),cTe=a("strong"),Kyr=o("blenderbot-small"),Zyr=o(" \u2014 "),AJ=a("a"),eLr=o("FlaxBlenderbotSmallModel"),oLr=o(" (BlenderbotSmall model)"),rLr=l(),yE=a("li"),fTe=a("strong"),tLr=o("clip"),aLr=o(" \u2014 "),yJ=a("a"),nLr=o("FlaxCLIPModel"),sLr=o(" (CLIP model)"),lLr=l(),LE=a("li"),mTe=a("strong"),iLr=o("distilbert"),dLr=o(" \u2014 "),LJ=a("a"),cLr=o("FlaxDistilBertModel"),fLr=o(" (DistilBERT model)"),mLr=l(),xE=a("li"),gTe=a("strong"),gLr=o("electra"),hLr=o(" \u2014 "),xJ=a("a"),pLr=o("FlaxElectraModel"),uLr=o(" (ELECTRA model)"),_Lr=l(),$E=a("li"),hTe=a("strong"),bLr=o("gpt2"),vLr=o(" \u2014 "),$J=a("a"),FLr=o("FlaxGPT2Model"),TLr=o(" (OpenAI GPT-2 model)"),MLr=l(),kE=a("li"),pTe=a("strong"),ELr=o("gpt_neo"),CLr=o(" \u2014 "),kJ=a("a"),wLr=o("FlaxGPTNeoModel"),ALr=o(" (GPT Neo model)"),yLr=l(),SE=a("li"),uTe=a("strong"),LLr=o("gptj"),xLr=o(" \u2014 "),SJ=a("a"),$Lr=o("FlaxGPTJModel"),kLr=o(" (GPT-J model)"),SLr=l(),RE=a("li"),_Te=a("strong"),RLr=o("marian"),PLr=o(" \u2014 "),RJ=a("a"),BLr=o("FlaxMarianModel"),ILr=o(" (Marian model)"),qLr=l(),PE=a("li"),bTe=a("strong"),NLr=o("mbart"),jLr=o(" \u2014 "),PJ=a("a"),DLr=o("FlaxMBartModel"),GLr=o(" (mBART model)"),OLr=l(),BE=a("li"),vTe=a("strong"),VLr=o("mt5"),XLr=o(" \u2014 "),BJ=a("a"),zLr=o("FlaxMT5Model"),WLr=o(" (mT5 model)"),QLr=l(),IE=a("li"),FTe=a("strong"),HLr=o("pegasus"),ULr=o(" \u2014 "),IJ=a("a"),JLr=o("FlaxPegasusModel"),YLr=o(" (Pegasus model)"),KLr=l(),qE=a("li"),TTe=a("strong"),ZLr=o("roberta"),e8r=o(" \u2014 "),qJ=a("a"),o8r=o("FlaxRobertaModel"),r8r=o(" (RoBERTa model)"),t8r=l(),NE=a("li"),MTe=a("strong"),a8r=o("roformer"),n8r=o(" \u2014 "),NJ=a("a"),s8r=o("FlaxRoFormerModel"),l8r=o(" (RoFormer model)"),i8r=l(),jE=a("li"),ETe=a("strong"),d8r=o("t5"),c8r=o(" \u2014 "),jJ=a("a"),f8r=o("FlaxT5Model"),m8r=o(" (T5 model)"),g8r=l(),DE=a("li"),CTe=a("strong"),h8r=o("vision-text-dual-encoder"),p8r=o(" \u2014 "),DJ=a("a"),u8r=o("FlaxVisionTextDualEncoderModel"),_8r=o(" (VisionTextDualEncoder model)"),b8r=l(),GE=a("li"),wTe=a("strong"),v8r=o("vit"),F8r=o(" \u2014 "),GJ=a("a"),T8r=o("FlaxViTModel"),M8r=o(" (ViT model)"),E8r=l(),OE=a("li"),ATe=a("strong"),C8r=o("wav2vec2"),w8r=o(" \u2014 "),OJ=a("a"),A8r=o("FlaxWav2Vec2Model"),y8r=o(" (Wav2Vec2 model)"),L8r=l(),VE=a("li"),yTe=a("strong"),x8r=o("xglm"),$8r=o(" \u2014 "),VJ=a("a"),k8r=o("FlaxXGLMModel"),S8r=o(" (XGLM model)"),R8r=l(),XE=a("li"),LTe=a("strong"),P8r=o("xlm-roberta"),B8r=o(" \u2014 "),XJ=a("a"),I8r=o("FlaxXLMRobertaModel"),q8r=o(" (XLM-RoBERTa model)"),N8r=l(),F(zE.$$.fragment),YNe=l(),Sc=a("h2"),WE=a("a"),xTe=a("span"),F(T9.$$.fragment),j8r=l(),$Te=a("span"),D8r=o("FlaxAutoModelForCausalLM"),KNe=l(),mr=a("div"),F(M9.$$.fragment),G8r=l(),Rc=a("p"),O8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=a("a"),V8r=o("from_pretrained()"),X8r=o(" class method or the "),WJ=a("a"),z8r=o("from_config()"),W8r=o(` class
method.`),Q8r=l(),E9=a("p"),H8r=o("This class cannot be instantiated directly using "),kTe=a("code"),U8r=o("__init__()"),J8r=o(" (throws an error)."),Y8r=l(),Ot=a("div"),F(C9.$$.fragment),K8r=l(),STe=a("p"),Z8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e9r=l(),Pc=a("p"),o9r=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),r9r=o("not"),t9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),a9r=o("from_pretrained()"),n9r=o(" to load the model weights."),s9r=l(),F(QE.$$.fragment),l9r=l(),Dr=a("div"),F(w9.$$.fragment),i9r=l(),PTe=a("p"),d9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c9r=l(),pn=a("p"),f9r=o("The model class to instantiate is selected based on the "),BTe=a("code"),m9r=o("model_type"),g9r=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),h9r=o("pretrained_model_name_or_path"),p9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),u9r=o("pretrained_model_name_or_path"),_9r=o(":"),b9r=l(),Re=a("ul"),HE=a("li"),NTe=a("strong"),v9r=o("bart"),F9r=o(" \u2014 "),HJ=a("a"),T9r=o("FlaxBartForCausalLM"),M9r=o(" (BART model)"),E9r=l(),UE=a("li"),jTe=a("strong"),C9r=o("bert"),w9r=o(" \u2014 "),UJ=a("a"),A9r=o("FlaxBertForCausalLM"),y9r=o(" (BERT model)"),L9r=l(),JE=a("li"),DTe=a("strong"),x9r=o("big_bird"),$9r=o(" \u2014 "),JJ=a("a"),k9r=o("FlaxBigBirdForCausalLM"),S9r=o(" (BigBird model)"),R9r=l(),YE=a("li"),GTe=a("strong"),P9r=o("electra"),B9r=o(" \u2014 "),YJ=a("a"),I9r=o("FlaxElectraForCausalLM"),q9r=o(" (ELECTRA model)"),N9r=l(),KE=a("li"),OTe=a("strong"),j9r=o("gpt2"),D9r=o(" \u2014 "),KJ=a("a"),G9r=o("FlaxGPT2LMHeadModel"),O9r=o(" (OpenAI GPT-2 model)"),V9r=l(),ZE=a("li"),VTe=a("strong"),X9r=o("gpt_neo"),z9r=o(" \u2014 "),ZJ=a("a"),W9r=o("FlaxGPTNeoForCausalLM"),Q9r=o(" (GPT Neo model)"),H9r=l(),eC=a("li"),XTe=a("strong"),U9r=o("gptj"),J9r=o(" \u2014 "),eY=a("a"),Y9r=o("FlaxGPTJForCausalLM"),K9r=o(" (GPT-J model)"),Z9r=l(),oC=a("li"),zTe=a("strong"),exr=o("roberta"),oxr=o(" \u2014 "),oY=a("a"),rxr=o("FlaxRobertaForCausalLM"),txr=o(" (RoBERTa model)"),axr=l(),rC=a("li"),WTe=a("strong"),nxr=o("xglm"),sxr=o(" \u2014 "),rY=a("a"),lxr=o("FlaxXGLMForCausalLM"),ixr=o(" (XGLM model)"),dxr=l(),F(tC.$$.fragment),ZNe=l(),Bc=a("h2"),aC=a("a"),QTe=a("span"),F(A9.$$.fragment),cxr=l(),HTe=a("span"),fxr=o("FlaxAutoModelForPreTraining"),eje=l(),gr=a("div"),F(y9.$$.fragment),mxr=l(),Ic=a("p"),gxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tY=a("a"),hxr=o("from_pretrained()"),pxr=o(" class method or the "),aY=a("a"),uxr=o("from_config()"),_xr=o(` class
method.`),bxr=l(),L9=a("p"),vxr=o("This class cannot be instantiated directly using "),UTe=a("code"),Fxr=o("__init__()"),Txr=o(" (throws an error)."),Mxr=l(),Vt=a("div"),F(x9.$$.fragment),Exr=l(),JTe=a("p"),Cxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wxr=l(),qc=a("p"),Axr=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),yxr=o("not"),Lxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),xxr=o("from_pretrained()"),$xr=o(" to load the model weights."),kxr=l(),F(nC.$$.fragment),Sxr=l(),Gr=a("div"),F($9.$$.fragment),Rxr=l(),KTe=a("p"),Pxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bxr=l(),un=a("p"),Ixr=o("The model class to instantiate is selected based on the "),ZTe=a("code"),qxr=o("model_type"),Nxr=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),jxr=o("pretrained_model_name_or_path"),Dxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),Gxr=o("pretrained_model_name_or_path"),Oxr=o(":"),Vxr=l(),Me=a("ul"),sC=a("li"),r7e=a("strong"),Xxr=o("albert"),zxr=o(" \u2014 "),sY=a("a"),Wxr=o("FlaxAlbertForPreTraining"),Qxr=o(" (ALBERT model)"),Hxr=l(),lC=a("li"),t7e=a("strong"),Uxr=o("bart"),Jxr=o(" \u2014 "),lY=a("a"),Yxr=o("FlaxBartForConditionalGeneration"),Kxr=o(" (BART model)"),Zxr=l(),iC=a("li"),a7e=a("strong"),e$r=o("bert"),o$r=o(" \u2014 "),iY=a("a"),r$r=o("FlaxBertForPreTraining"),t$r=o(" (BERT model)"),a$r=l(),dC=a("li"),n7e=a("strong"),n$r=o("big_bird"),s$r=o(" \u2014 "),dY=a("a"),l$r=o("FlaxBigBirdForPreTraining"),i$r=o(" (BigBird model)"),d$r=l(),cC=a("li"),s7e=a("strong"),c$r=o("electra"),f$r=o(" \u2014 "),cY=a("a"),m$r=o("FlaxElectraForPreTraining"),g$r=o(" (ELECTRA model)"),h$r=l(),fC=a("li"),l7e=a("strong"),p$r=o("mbart"),u$r=o(" \u2014 "),fY=a("a"),_$r=o("FlaxMBartForConditionalGeneration"),b$r=o(" (mBART model)"),v$r=l(),mC=a("li"),i7e=a("strong"),F$r=o("mt5"),T$r=o(" \u2014 "),mY=a("a"),M$r=o("FlaxMT5ForConditionalGeneration"),E$r=o(" (mT5 model)"),C$r=l(),gC=a("li"),d7e=a("strong"),w$r=o("roberta"),A$r=o(" \u2014 "),gY=a("a"),y$r=o("FlaxRobertaForMaskedLM"),L$r=o(" (RoBERTa model)"),x$r=l(),hC=a("li"),c7e=a("strong"),$$r=o("roformer"),k$r=o(" \u2014 "),hY=a("a"),S$r=o("FlaxRoFormerForMaskedLM"),R$r=o(" (RoFormer model)"),P$r=l(),pC=a("li"),f7e=a("strong"),B$r=o("t5"),I$r=o(" \u2014 "),pY=a("a"),q$r=o("FlaxT5ForConditionalGeneration"),N$r=o(" (T5 model)"),j$r=l(),uC=a("li"),m7e=a("strong"),D$r=o("wav2vec2"),G$r=o(" \u2014 "),uY=a("a"),O$r=o("FlaxWav2Vec2ForPreTraining"),V$r=o(" (Wav2Vec2 model)"),X$r=l(),_C=a("li"),g7e=a("strong"),z$r=o("xlm-roberta"),W$r=o(" \u2014 "),_Y=a("a"),Q$r=o("FlaxXLMRobertaForMaskedLM"),H$r=o(" (XLM-RoBERTa model)"),U$r=l(),F(bC.$$.fragment),oje=l(),Nc=a("h2"),vC=a("a"),h7e=a("span"),F(k9.$$.fragment),J$r=l(),p7e=a("span"),Y$r=o("FlaxAutoModelForMaskedLM"),rje=l(),hr=a("div"),F(S9.$$.fragment),K$r=l(),jc=a("p"),Z$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=a("a"),ekr=o("from_pretrained()"),okr=o(" class method or the "),vY=a("a"),rkr=o("from_config()"),tkr=o(` class
method.`),akr=l(),R9=a("p"),nkr=o("This class cannot be instantiated directly using "),u7e=a("code"),skr=o("__init__()"),lkr=o(" (throws an error)."),ikr=l(),Xt=a("div"),F(P9.$$.fragment),dkr=l(),_7e=a("p"),ckr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fkr=l(),Dc=a("p"),mkr=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),gkr=o("not"),hkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),pkr=o("from_pretrained()"),ukr=o(" to load the model weights."),_kr=l(),F(FC.$$.fragment),bkr=l(),Or=a("div"),F(B9.$$.fragment),vkr=l(),v7e=a("p"),Fkr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tkr=l(),_n=a("p"),Mkr=o("The model class to instantiate is selected based on the "),F7e=a("code"),Ekr=o("model_type"),Ckr=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),wkr=o("pretrained_model_name_or_path"),Akr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),ykr=o("pretrained_model_name_or_path"),Lkr=o(":"),xkr=l(),Le=a("ul"),TC=a("li"),E7e=a("strong"),$kr=o("albert"),kkr=o(" \u2014 "),TY=a("a"),Skr=o("FlaxAlbertForMaskedLM"),Rkr=o(" (ALBERT model)"),Pkr=l(),MC=a("li"),C7e=a("strong"),Bkr=o("bart"),Ikr=o(" \u2014 "),MY=a("a"),qkr=o("FlaxBartForConditionalGeneration"),Nkr=o(" (BART model)"),jkr=l(),EC=a("li"),w7e=a("strong"),Dkr=o("bert"),Gkr=o(" \u2014 "),EY=a("a"),Okr=o("FlaxBertForMaskedLM"),Vkr=o(" (BERT model)"),Xkr=l(),CC=a("li"),A7e=a("strong"),zkr=o("big_bird"),Wkr=o(" \u2014 "),CY=a("a"),Qkr=o("FlaxBigBirdForMaskedLM"),Hkr=o(" (BigBird model)"),Ukr=l(),wC=a("li"),y7e=a("strong"),Jkr=o("distilbert"),Ykr=o(" \u2014 "),wY=a("a"),Kkr=o("FlaxDistilBertForMaskedLM"),Zkr=o(" (DistilBERT model)"),eSr=l(),AC=a("li"),L7e=a("strong"),oSr=o("electra"),rSr=o(" \u2014 "),AY=a("a"),tSr=o("FlaxElectraForMaskedLM"),aSr=o(" (ELECTRA model)"),nSr=l(),yC=a("li"),x7e=a("strong"),sSr=o("mbart"),lSr=o(" \u2014 "),yY=a("a"),iSr=o("FlaxMBartForConditionalGeneration"),dSr=o(" (mBART model)"),cSr=l(),LC=a("li"),$7e=a("strong"),fSr=o("roberta"),mSr=o(" \u2014 "),LY=a("a"),gSr=o("FlaxRobertaForMaskedLM"),hSr=o(" (RoBERTa model)"),pSr=l(),xC=a("li"),k7e=a("strong"),uSr=o("roformer"),_Sr=o(" \u2014 "),xY=a("a"),bSr=o("FlaxRoFormerForMaskedLM"),vSr=o(" (RoFormer model)"),FSr=l(),$C=a("li"),S7e=a("strong"),TSr=o("xlm-roberta"),MSr=o(" \u2014 "),$Y=a("a"),ESr=o("FlaxXLMRobertaForMaskedLM"),CSr=o(" (XLM-RoBERTa model)"),wSr=l(),F(kC.$$.fragment),tje=l(),Gc=a("h2"),SC=a("a"),R7e=a("span"),F(I9.$$.fragment),ASr=l(),P7e=a("span"),ySr=o("FlaxAutoModelForSeq2SeqLM"),aje=l(),pr=a("div"),F(q9.$$.fragment),LSr=l(),Oc=a("p"),xSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=a("a"),$Sr=o("from_pretrained()"),kSr=o(" class method or the "),SY=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),PSr=l(),N9=a("p"),BSr=o("This class cannot be instantiated directly using "),B7e=a("code"),ISr=o("__init__()"),qSr=o(" (throws an error)."),NSr=l(),zt=a("div"),F(j9.$$.fragment),jSr=l(),I7e=a("p"),DSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GSr=l(),Vc=a("p"),OSr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),VSr=o("not"),XSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),zSr=o("from_pretrained()"),WSr=o(" to load the model weights."),QSr=l(),F(RC.$$.fragment),HSr=l(),Vr=a("div"),F(D9.$$.fragment),USr=l(),N7e=a("p"),JSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YSr=l(),bn=a("p"),KSr=o("The model class to instantiate is selected based on the "),j7e=a("code"),ZSr=o("model_type"),eRr=o(` property of the config object (either
passed as an argument or loaded from `),D7e=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(":"),nRr=l(),Pe=a("ul"),PC=a("li"),O7e=a("strong"),sRr=o("bart"),lRr=o(" \u2014 "),PY=a("a"),iRr=o("FlaxBartForConditionalGeneration"),dRr=o(" (BART model)"),cRr=l(),BC=a("li"),V7e=a("strong"),fRr=o("blenderbot"),mRr=o(" \u2014 "),BY=a("a"),gRr=o("FlaxBlenderbotForConditionalGeneration"),hRr=o(" (Blenderbot model)"),pRr=l(),IC=a("li"),X7e=a("strong"),uRr=o("blenderbot-small"),_Rr=o(" \u2014 "),IY=a("a"),bRr=o("FlaxBlenderbotSmallForConditionalGeneration"),vRr=o(" (BlenderbotSmall model)"),FRr=l(),qC=a("li"),z7e=a("strong"),TRr=o("encoder-decoder"),MRr=o(" \u2014 "),qY=a("a"),ERr=o("FlaxEncoderDecoderModel"),CRr=o(" (Encoder decoder model)"),wRr=l(),NC=a("li"),W7e=a("strong"),ARr=o("marian"),yRr=o(" \u2014 "),NY=a("a"),LRr=o("FlaxMarianMTModel"),xRr=o(" (Marian model)"),$Rr=l(),jC=a("li"),Q7e=a("strong"),kRr=o("mbart"),SRr=o(" \u2014 "),jY=a("a"),RRr=o("FlaxMBartForConditionalGeneration"),PRr=o(" (mBART model)"),BRr=l(),DC=a("li"),H7e=a("strong"),IRr=o("mt5"),qRr=o(" \u2014 "),DY=a("a"),NRr=o("FlaxMT5ForConditionalGeneration"),jRr=o(" (mT5 model)"),DRr=l(),GC=a("li"),U7e=a("strong"),GRr=o("pegasus"),ORr=o(" \u2014 "),GY=a("a"),VRr=o("FlaxPegasusForConditionalGeneration"),XRr=o(" (Pegasus model)"),zRr=l(),OC=a("li"),J7e=a("strong"),WRr=o("t5"),QRr=o(" \u2014 "),OY=a("a"),HRr=o("FlaxT5ForConditionalGeneration"),URr=o(" (T5 model)"),JRr=l(),F(VC.$$.fragment),nje=l(),Xc=a("h2"),XC=a("a"),Y7e=a("span"),F(G9.$$.fragment),YRr=l(),K7e=a("span"),KRr=o("FlaxAutoModelForSequenceClassification"),sje=l(),ur=a("div"),F(O9.$$.fragment),ZRr=l(),zc=a("p"),ePr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VY=a("a"),oPr=o("from_pretrained()"),rPr=o(" class method or the "),XY=a("a"),tPr=o("from_config()"),aPr=o(` class
method.`),nPr=l(),V9=a("p"),sPr=o("This class cannot be instantiated directly using "),Z7e=a("code"),lPr=o("__init__()"),iPr=o(" (throws an error)."),dPr=l(),Wt=a("div"),F(X9.$$.fragment),cPr=l(),eMe=a("p"),fPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mPr=l(),Wc=a("p"),gPr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),hPr=o("not"),pPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),uPr=o("from_pretrained()"),_Pr=o(" to load the model weights."),bPr=l(),F(zC.$$.fragment),vPr=l(),Xr=a("div"),F(z9.$$.fragment),FPr=l(),rMe=a("p"),TPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MPr=l(),vn=a("p"),EPr=o("The model class to instantiate is selected based on the "),tMe=a("code"),CPr=o("model_type"),wPr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(":"),$Pr=l(),xe=a("ul"),WC=a("li"),sMe=a("strong"),kPr=o("albert"),SPr=o(" \u2014 "),WY=a("a"),RPr=o("FlaxAlbertForSequenceClassification"),PPr=o(" (ALBERT model)"),BPr=l(),QC=a("li"),lMe=a("strong"),IPr=o("bart"),qPr=o(" \u2014 "),QY=a("a"),NPr=o("FlaxBartForSequenceClassification"),jPr=o(" (BART model)"),DPr=l(),HC=a("li"),iMe=a("strong"),GPr=o("bert"),OPr=o(" \u2014 "),HY=a("a"),VPr=o("FlaxBertForSequenceClassification"),XPr=o(" (BERT model)"),zPr=l(),UC=a("li"),dMe=a("strong"),WPr=o("big_bird"),QPr=o(" \u2014 "),UY=a("a"),HPr=o("FlaxBigBirdForSequenceClassification"),UPr=o(" (BigBird model)"),JPr=l(),JC=a("li"),cMe=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),JY=a("a"),ZPr=o("FlaxDistilBertForSequenceClassification"),eBr=o(" (DistilBERT model)"),oBr=l(),YC=a("li"),fMe=a("strong"),rBr=o("electra"),tBr=o(" \u2014 "),YY=a("a"),aBr=o("FlaxElectraForSequenceClassification"),nBr=o(" (ELECTRA model)"),sBr=l(),KC=a("li"),mMe=a("strong"),lBr=o("mbart"),iBr=o(" \u2014 "),KY=a("a"),dBr=o("FlaxMBartForSequenceClassification"),cBr=o(" (mBART model)"),fBr=l(),ZC=a("li"),gMe=a("strong"),mBr=o("roberta"),gBr=o(" \u2014 "),ZY=a("a"),hBr=o("FlaxRobertaForSequenceClassification"),pBr=o(" (RoBERTa model)"),uBr=l(),e5=a("li"),hMe=a("strong"),_Br=o("roformer"),bBr=o(" \u2014 "),eK=a("a"),vBr=o("FlaxRoFormerForSequenceClassification"),FBr=o(" (RoFormer model)"),TBr=l(),o5=a("li"),pMe=a("strong"),MBr=o("xlm-roberta"),EBr=o(" \u2014 "),oK=a("a"),CBr=o("FlaxXLMRobertaForSequenceClassification"),wBr=o(" (XLM-RoBERTa model)"),ABr=l(),F(r5.$$.fragment),lje=l(),Qc=a("h2"),t5=a("a"),uMe=a("span"),F(W9.$$.fragment),yBr=l(),_Me=a("span"),LBr=o("FlaxAutoModelForQuestionAnswering"),ije=l(),_r=a("div"),F(Q9.$$.fragment),xBr=l(),Hc=a("p"),$Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rK=a("a"),kBr=o("from_pretrained()"),SBr=o(" class method or the "),tK=a("a"),RBr=o("from_config()"),PBr=o(` class
method.`),BBr=l(),H9=a("p"),IBr=o("This class cannot be instantiated directly using "),bMe=a("code"),qBr=o("__init__()"),NBr=o(" (throws an error)."),jBr=l(),Qt=a("div"),F(U9.$$.fragment),DBr=l(),vMe=a("p"),GBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OBr=l(),Uc=a("p"),VBr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),XBr=o("not"),zBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),WBr=o("from_pretrained()"),QBr=o(" to load the model weights."),HBr=l(),F(a5.$$.fragment),UBr=l(),zr=a("div"),F(J9.$$.fragment),JBr=l(),TMe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KBr=l(),Fn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),MMe=a("code"),eIr=o("model_type"),oIr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),rIr=o("pretrained_model_name_or_path"),tIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(":"),sIr=l(),$e=a("ul"),n5=a("li"),wMe=a("strong"),lIr=o("albert"),iIr=o(" \u2014 "),nK=a("a"),dIr=o("FlaxAlbertForQuestionAnswering"),cIr=o(" (ALBERT model)"),fIr=l(),s5=a("li"),AMe=a("strong"),mIr=o("bart"),gIr=o(" \u2014 "),sK=a("a"),hIr=o("FlaxBartForQuestionAnswering"),pIr=o(" (BART model)"),uIr=l(),l5=a("li"),yMe=a("strong"),_Ir=o("bert"),bIr=o(" \u2014 "),lK=a("a"),vIr=o("FlaxBertForQuestionAnswering"),FIr=o(" (BERT model)"),TIr=l(),i5=a("li"),LMe=a("strong"),MIr=o("big_bird"),EIr=o(" \u2014 "),iK=a("a"),CIr=o("FlaxBigBirdForQuestionAnswering"),wIr=o(" (BigBird model)"),AIr=l(),d5=a("li"),xMe=a("strong"),yIr=o("distilbert"),LIr=o(" \u2014 "),dK=a("a"),xIr=o("FlaxDistilBertForQuestionAnswering"),$Ir=o(" (DistilBERT model)"),kIr=l(),c5=a("li"),$Me=a("strong"),SIr=o("electra"),RIr=o(" \u2014 "),cK=a("a"),PIr=o("FlaxElectraForQuestionAnswering"),BIr=o(" (ELECTRA model)"),IIr=l(),f5=a("li"),kMe=a("strong"),qIr=o("mbart"),NIr=o(" \u2014 "),fK=a("a"),jIr=o("FlaxMBartForQuestionAnswering"),DIr=o(" (mBART model)"),GIr=l(),m5=a("li"),SMe=a("strong"),OIr=o("roberta"),VIr=o(" \u2014 "),mK=a("a"),XIr=o("FlaxRobertaForQuestionAnswering"),zIr=o(" (RoBERTa model)"),WIr=l(),g5=a("li"),RMe=a("strong"),QIr=o("roformer"),HIr=o(" \u2014 "),gK=a("a"),UIr=o("FlaxRoFormerForQuestionAnswering"),JIr=o(" (RoFormer model)"),YIr=l(),h5=a("li"),PMe=a("strong"),KIr=o("xlm-roberta"),ZIr=o(" \u2014 "),hK=a("a"),eqr=o("FlaxXLMRobertaForQuestionAnswering"),oqr=o(" (XLM-RoBERTa model)"),rqr=l(),F(p5.$$.fragment),dje=l(),Jc=a("h2"),u5=a("a"),BMe=a("span"),F(Y9.$$.fragment),tqr=l(),IMe=a("span"),aqr=o("FlaxAutoModelForTokenClassification"),cje=l(),br=a("div"),F(K9.$$.fragment),nqr=l(),Yc=a("p"),sqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pK=a("a"),lqr=o("from_pretrained()"),iqr=o(" class method or the "),uK=a("a"),dqr=o("from_config()"),cqr=o(` class
method.`),fqr=l(),Z9=a("p"),mqr=o("This class cannot be instantiated directly using "),qMe=a("code"),gqr=o("__init__()"),hqr=o(" (throws an error)."),pqr=l(),Ht=a("div"),F(ex.$$.fragment),uqr=l(),NMe=a("p"),_qr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bqr=l(),Kc=a("p"),vqr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),Fqr=o("not"),Tqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),Mqr=o("from_pretrained()"),Eqr=o(" to load the model weights."),Cqr=l(),F(_5.$$.fragment),wqr=l(),Wr=a("div"),F(ox.$$.fragment),Aqr=l(),DMe=a("p"),yqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lqr=l(),Tn=a("p"),xqr=o("The model class to instantiate is selected based on the "),GMe=a("code"),$qr=o("model_type"),kqr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),Sqr=o("pretrained_model_name_or_path"),Rqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),Pqr=o("pretrained_model_name_or_path"),Bqr=o(":"),Iqr=l(),De=a("ul"),b5=a("li"),XMe=a("strong"),qqr=o("albert"),Nqr=o(" \u2014 "),bK=a("a"),jqr=o("FlaxAlbertForTokenClassification"),Dqr=o(" (ALBERT model)"),Gqr=l(),v5=a("li"),zMe=a("strong"),Oqr=o("bert"),Vqr=o(" \u2014 "),vK=a("a"),Xqr=o("FlaxBertForTokenClassification"),zqr=o(" (BERT model)"),Wqr=l(),F5=a("li"),WMe=a("strong"),Qqr=o("big_bird"),Hqr=o(" \u2014 "),FK=a("a"),Uqr=o("FlaxBigBirdForTokenClassification"),Jqr=o(" (BigBird model)"),Yqr=l(),T5=a("li"),QMe=a("strong"),Kqr=o("distilbert"),Zqr=o(" \u2014 "),TK=a("a"),eNr=o("FlaxDistilBertForTokenClassification"),oNr=o(" (DistilBERT model)"),rNr=l(),M5=a("li"),HMe=a("strong"),tNr=o("electra"),aNr=o(" \u2014 "),MK=a("a"),nNr=o("FlaxElectraForTokenClassification"),sNr=o(" (ELECTRA model)"),lNr=l(),E5=a("li"),UMe=a("strong"),iNr=o("roberta"),dNr=o(" \u2014 "),EK=a("a"),cNr=o("FlaxRobertaForTokenClassification"),fNr=o(" (RoBERTa model)"),mNr=l(),C5=a("li"),JMe=a("strong"),gNr=o("roformer"),hNr=o(" \u2014 "),CK=a("a"),pNr=o("FlaxRoFormerForTokenClassification"),uNr=o(" (RoFormer model)"),_Nr=l(),w5=a("li"),YMe=a("strong"),bNr=o("xlm-roberta"),vNr=o(" \u2014 "),wK=a("a"),FNr=o("FlaxXLMRobertaForTokenClassification"),TNr=o(" (XLM-RoBERTa model)"),MNr=l(),F(A5.$$.fragment),fje=l(),Zc=a("h2"),y5=a("a"),KMe=a("span"),F(rx.$$.fragment),ENr=l(),ZMe=a("span"),CNr=o("FlaxAutoModelForMultipleChoice"),mje=l(),vr=a("div"),F(tx.$$.fragment),wNr=l(),ef=a("p"),ANr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=a("a"),yNr=o("from_pretrained()"),LNr=o(" class method or the "),yK=a("a"),xNr=o("from_config()"),$Nr=o(` class
method.`),kNr=l(),ax=a("p"),SNr=o("This class cannot be instantiated directly using "),e4e=a("code"),RNr=o("__init__()"),PNr=o(" (throws an error)."),BNr=l(),Ut=a("div"),F(nx.$$.fragment),INr=l(),o4e=a("p"),qNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NNr=l(),of=a("p"),jNr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),DNr=o("not"),GNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),ONr=o("from_pretrained()"),VNr=o(" to load the model weights."),XNr=l(),F(L5.$$.fragment),zNr=l(),Qr=a("div"),F(sx.$$.fragment),WNr=l(),t4e=a("p"),QNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HNr=l(),Mn=a("p"),UNr=o("The model class to instantiate is selected based on the "),a4e=a("code"),JNr=o("model_type"),YNr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),KNr=o("pretrained_model_name_or_path"),ZNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),ejr=o("pretrained_model_name_or_path"),ojr=o(":"),rjr=l(),Ge=a("ul"),x5=a("li"),l4e=a("strong"),tjr=o("albert"),ajr=o(" \u2014 "),xK=a("a"),njr=o("FlaxAlbertForMultipleChoice"),sjr=o(" (ALBERT model)"),ljr=l(),$5=a("li"),i4e=a("strong"),ijr=o("bert"),djr=o(" \u2014 "),$K=a("a"),cjr=o("FlaxBertForMultipleChoice"),fjr=o(" (BERT model)"),mjr=l(),k5=a("li"),d4e=a("strong"),gjr=o("big_bird"),hjr=o(" \u2014 "),kK=a("a"),pjr=o("FlaxBigBirdForMultipleChoice"),ujr=o(" (BigBird model)"),_jr=l(),S5=a("li"),c4e=a("strong"),bjr=o("distilbert"),vjr=o(" \u2014 "),SK=a("a"),Fjr=o("FlaxDistilBertForMultipleChoice"),Tjr=o(" (DistilBERT model)"),Mjr=l(),R5=a("li"),f4e=a("strong"),Ejr=o("electra"),Cjr=o(" \u2014 "),RK=a("a"),wjr=o("FlaxElectraForMultipleChoice"),Ajr=o(" (ELECTRA model)"),yjr=l(),P5=a("li"),m4e=a("strong"),Ljr=o("roberta"),xjr=o(" \u2014 "),PK=a("a"),$jr=o("FlaxRobertaForMultipleChoice"),kjr=o(" (RoBERTa model)"),Sjr=l(),B5=a("li"),g4e=a("strong"),Rjr=o("roformer"),Pjr=o(" \u2014 "),BK=a("a"),Bjr=o("FlaxRoFormerForMultipleChoice"),Ijr=o(" (RoFormer model)"),qjr=l(),I5=a("li"),h4e=a("strong"),Njr=o("xlm-roberta"),jjr=o(" \u2014 "),IK=a("a"),Djr=o("FlaxXLMRobertaForMultipleChoice"),Gjr=o(" (XLM-RoBERTa model)"),Ojr=l(),F(q5.$$.fragment),gje=l(),rf=a("h2"),N5=a("a"),p4e=a("span"),F(lx.$$.fragment),Vjr=l(),u4e=a("span"),Xjr=o("FlaxAutoModelForNextSentencePrediction"),hje=l(),Fr=a("div"),F(ix.$$.fragment),zjr=l(),tf=a("p"),Wjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qK=a("a"),Qjr=o("from_pretrained()"),Hjr=o(" class method or the "),NK=a("a"),Ujr=o("from_config()"),Jjr=o(` class
method.`),Yjr=l(),dx=a("p"),Kjr=o("This class cannot be instantiated directly using "),_4e=a("code"),Zjr=o("__init__()"),eDr=o(" (throws an error)."),oDr=l(),Jt=a("div"),F(cx.$$.fragment),rDr=l(),b4e=a("p"),tDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aDr=l(),af=a("p"),nDr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),sDr=o("not"),lDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),iDr=o("from_pretrained()"),dDr=o(" to load the model weights."),cDr=l(),F(j5.$$.fragment),fDr=l(),Hr=a("div"),F(fx.$$.fragment),mDr=l(),F4e=a("p"),gDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hDr=l(),En=a("p"),pDr=o("The model class to instantiate is selected based on the "),T4e=a("code"),uDr=o("model_type"),_Dr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(":"),MDr=l(),C4e=a("ul"),D5=a("li"),w4e=a("strong"),EDr=o("bert"),CDr=o(" \u2014 "),DK=a("a"),wDr=o("FlaxBertForNextSentencePrediction"),ADr=o(" (BERT model)"),yDr=l(),F(G5.$$.fragment),pje=l(),nf=a("h2"),O5=a("a"),A4e=a("span"),F(mx.$$.fragment),LDr=l(),y4e=a("span"),xDr=o("FlaxAutoModelForImageClassification"),uje=l(),Tr=a("div"),F(gx.$$.fragment),$Dr=l(),sf=a("p"),kDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GK=a("a"),SDr=o("from_pretrained()"),RDr=o(" class method or the "),OK=a("a"),PDr=o("from_config()"),BDr=o(` class
method.`),IDr=l(),hx=a("p"),qDr=o("This class cannot be instantiated directly using "),L4e=a("code"),NDr=o("__init__()"),jDr=o(" (throws an error)."),DDr=l(),Yt=a("div"),F(px.$$.fragment),GDr=l(),x4e=a("p"),ODr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VDr=l(),lf=a("p"),XDr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),zDr=o("not"),WDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),QDr=o("from_pretrained()"),HDr=o(" to load the model weights."),UDr=l(),F(V5.$$.fragment),JDr=l(),Ur=a("div"),F(ux.$$.fragment),YDr=l(),k4e=a("p"),KDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZDr=l(),Cn=a("p"),eGr=o("The model class to instantiate is selected based on the "),S4e=a("code"),oGr=o("model_type"),rGr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),tGr=o("pretrained_model_name_or_path"),aGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),nGr=o("pretrained_model_name_or_path"),sGr=o(":"),lGr=l(),_x=a("ul"),X5=a("li"),B4e=a("strong"),iGr=o("beit"),dGr=o(" \u2014 "),XK=a("a"),cGr=o("FlaxBeitForImageClassification"),fGr=o(" (BEiT model)"),mGr=l(),z5=a("li"),I4e=a("strong"),gGr=o("vit"),hGr=o(" \u2014 "),zK=a("a"),pGr=o("FlaxViTForImageClassification"),uGr=o(" (ViT model)"),_Gr=l(),F(W5.$$.fragment),_je=l(),df=a("h2"),Q5=a("a"),q4e=a("span"),F(bx.$$.fragment),bGr=l(),N4e=a("span"),vGr=o("FlaxAutoModelForVision2Seq"),bje=l(),Mr=a("div"),F(vx.$$.fragment),FGr=l(),cf=a("p"),TGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WK=a("a"),MGr=o("from_pretrained()"),EGr=o(" class method or the "),QK=a("a"),CGr=o("from_config()"),wGr=o(` class
method.`),AGr=l(),Fx=a("p"),yGr=o("This class cannot be instantiated directly using "),j4e=a("code"),LGr=o("__init__()"),xGr=o(" (throws an error)."),$Gr=l(),Kt=a("div"),F(Tx.$$.fragment),kGr=l(),D4e=a("p"),SGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RGr=l(),ff=a("p"),PGr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),BGr=o("not"),IGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),qGr=o("from_pretrained()"),NGr=o(" to load the model weights."),jGr=l(),F(H5.$$.fragment),DGr=l(),Jr=a("div"),F(Mx.$$.fragment),GGr=l(),O4e=a("p"),OGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VGr=l(),wn=a("p"),XGr=o("The model class to instantiate is selected based on the "),V4e=a("code"),zGr=o("model_type"),WGr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),UGr=o("pretrained_model_name_or_path"),JGr=o(":"),YGr=l(),W4e=a("ul"),U5=a("li"),Q4e=a("strong"),KGr=o("vision-encoder-decoder"),ZGr=o(" \u2014 "),UK=a("a"),eOr=o("FlaxVisionEncoderDecoderModel"),oOr=o(" (Vision Encoder decoder model)"),rOr=l(),F(J5.$$.fragment),this.h()},l(f){const _=b9t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ex=s(p);m=n(Ex,"A",{id:!0,class:!0,href:!0});var H4e=s(m);u=n(H4e,"SPAN",{});var U4e=s(u);T(d.$$.fragment,U4e),U4e.forEach(t),H4e.forEach(t),h=i(Ex),Mo=n(Ex,"SPAN",{});var J4e=s(Mo);fi=r(J4e,"Auto Classes"),J4e.forEach(t),Ex.forEach(t),pf=i(f),rt=n(f,"P",{});var Cx=s(rt);mi=r(Cx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Cx,"CODE",{});var Y4e=s(gi);hA=r(Y4e,"from_pretrained()"),Y4e.forEach(t),uf=r(Cx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Cx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var K4e=s(yn);pA=r(K4e,"AutoConfig"),K4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var Z4e=s(xn);uA=r(Z4e,"AutoModel"),Z4e.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var eEe=s($n);_A=r(eEe,"AutoTokenizer"),eEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var wx=s(Ae);I$=r(wx,"will create a model that is an instance of "),_i=n(wx,"A",{href:!0});var oEe=s(_i);q$=r(oEe,"BertModel"),oEe.forEach(t),N$=r(wx,"."),wx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ax=s(wa);j$=r(Ax,"There is one class of "),bf=n(Ax,"CODE",{});var rEe=s(bf);D$=r(rEe,"AutoModel"),rEe.forEach(t),yGe=r(Ax," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ax.forEach(t),uqe=i(f),bi=n(f,"H2",{class:!0});var yx=s(bi);vf=n(yx,"A",{id:!0,class:!0,href:!0});var tEe=s(vf);Oee=n(tEe,"SPAN",{});var aEe=s(Oee);T(bA.$$.fragment,aEe),aEe.forEach(t),tEe.forEach(t),LGe=i(yx),Vee=n(yx,"SPAN",{});var nEe=s(Vee);xGe=r(nEe,"Extending the Auto Classes"),nEe.forEach(t),yx.forEach(t),_qe=i(f),kn=n(f,"P",{});var mf=s(kn);$Ge=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xee=n(mf,"CODE",{});var sEe=s(Xee);kGe=r(sEe,"NewModel"),sEe.forEach(t),SGe=r(mf,", make sure you have a "),zee=n(mf,"CODE",{});var lEe=s(zee);RGe=r(lEe,"NewModelConfig"),lEe.forEach(t),PGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),bqe=i(f),T(vA.$$.fragment,f),vqe=i(f),G$=n(f,"P",{});var iEe=s(G$);BGe=r(iEe,"You will then be able to use the auto classes like you would usually do!"),iEe.forEach(t),Fqe=i(f),T(Ff.$$.fragment,f),Tqe=i(f),vi=n(f,"H2",{class:!0});var Lx=s(vi);Tf=n(Lx,"A",{id:!0,class:!0,href:!0});var dEe=s(Tf);Wee=n(dEe,"SPAN",{});var cEe=s(Wee);T(FA.$$.fragment,cEe),cEe.forEach(t),dEe.forEach(t),IGe=i(Lx),Qee=n(Lx,"SPAN",{});var fEe=s(Qee);qGe=r(fEe,"AutoConfig"),fEe.forEach(t),Lx.forEach(t),Mqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(TA.$$.fragment,et),NGe=i(et),MA=n(et,"P",{});var xx=s(MA);jGe=r(xx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O$=n(xx,"A",{href:!0});var mEe=s(O$);DGe=r(mEe,"from_pretrained()"),mEe.forEach(t),GGe=r(xx," class method."),xx.forEach(t),OGe=i(et),EA=n(et,"P",{});var $x=s(EA);VGe=r($x,"This class cannot be instantiated directly using "),Hee=n($x,"CODE",{});var gEe=s(Hee);XGe=r(gEe,"__init__()"),gEe.forEach(t),zGe=r($x," (throws an error)."),$x.forEach(t),WGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(CA.$$.fragment,ot),QGe=i(ot),Uee=n(ot,"P",{});var hEe=s(Uee);HGe=r(hEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),hEe.forEach(t),UGe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);JGe=r(gf,"The configuration class to instantiate is selected based on the "),Jee=n(gf,"CODE",{});var pEe=s(Jee);YGe=r(pEe,"model_type"),pEe.forEach(t),KGe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yee=n(gf,"CODE",{});var uEe=s(Yee);ZGe=r(uEe,"pretrained_model_name_or_path"),uEe.forEach(t),eOe=r(gf,":"),gf.forEach(t),oOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var Y5=s(Mf);Kee=n(Y5,"STRONG",{});var _Ee=s(Kee);rOe=r(_Ee,"albert"),_Ee.forEach(t),tOe=r(Y5," \u2014 "),V$=n(Y5,"A",{href:!0});var bEe=s(V$);aOe=r(bEe,"AlbertConfig"),bEe.forEach(t),nOe=r(Y5," (ALBERT model)"),Y5.forEach(t),sOe=i(y),Ef=n(y,"LI",{});var K5=s(Ef);Zee=n(K5,"STRONG",{});var vEe=s(Zee);lOe=r(vEe,"bart"),vEe.forEach(t),iOe=r(K5," \u2014 "),X$=n(K5,"A",{href:!0});var FEe=s(X$);dOe=r(FEe,"BartConfig"),FEe.forEach(t),cOe=r(K5," (BART model)"),K5.forEach(t),fOe=i(y),Cf=n(y,"LI",{});var Z5=s(Cf);eoe=n(Z5,"STRONG",{});var TEe=s(eoe);mOe=r(TEe,"beit"),TEe.forEach(t),gOe=r(Z5," \u2014 "),z$=n(Z5,"A",{href:!0});var MEe=s(z$);hOe=r(MEe,"BeitConfig"),MEe.forEach(t),pOe=r(Z5," (BEiT model)"),Z5.forEach(t),uOe=i(y),wf=n(y,"LI",{});var e3=s(wf);ooe=n(e3,"STRONG",{});var EEe=s(ooe);_Oe=r(EEe,"bert"),EEe.forEach(t),bOe=r(e3," \u2014 "),W$=n(e3,"A",{href:!0});var CEe=s(W$);vOe=r(CEe,"BertConfig"),CEe.forEach(t),FOe=r(e3," (BERT model)"),e3.forEach(t),TOe=i(y),Af=n(y,"LI",{});var o3=s(Af);roe=n(o3,"STRONG",{});var wEe=s(roe);MOe=r(wEe,"bert-generation"),wEe.forEach(t),EOe=r(o3," \u2014 "),Q$=n(o3,"A",{href:!0});var AEe=s(Q$);COe=r(AEe,"BertGenerationConfig"),AEe.forEach(t),wOe=r(o3," (Bert Generation model)"),o3.forEach(t),AOe=i(y),yf=n(y,"LI",{});var r3=s(yf);toe=n(r3,"STRONG",{});var yEe=s(toe);yOe=r(yEe,"big_bird"),yEe.forEach(t),LOe=r(r3," \u2014 "),H$=n(r3,"A",{href:!0});var LEe=s(H$);xOe=r(LEe,"BigBirdConfig"),LEe.forEach(t),$Oe=r(r3," (BigBird model)"),r3.forEach(t),kOe=i(y),Lf=n(y,"LI",{});var t3=s(Lf);aoe=n(t3,"STRONG",{});var xEe=s(aoe);SOe=r(xEe,"bigbird_pegasus"),xEe.forEach(t),ROe=r(t3," \u2014 "),U$=n(t3,"A",{href:!0});var $Ee=s(U$);POe=r($Ee,"BigBirdPegasusConfig"),$Ee.forEach(t),BOe=r(t3," (BigBirdPegasus model)"),t3.forEach(t),IOe=i(y),xf=n(y,"LI",{});var a3=s(xf);noe=n(a3,"STRONG",{});var kEe=s(noe);qOe=r(kEe,"blenderbot"),kEe.forEach(t),NOe=r(a3," \u2014 "),J$=n(a3,"A",{href:!0});var SEe=s(J$);jOe=r(SEe,"BlenderbotConfig"),SEe.forEach(t),DOe=r(a3," (Blenderbot model)"),a3.forEach(t),GOe=i(y),$f=n(y,"LI",{});var n3=s($f);soe=n(n3,"STRONG",{});var REe=s(soe);OOe=r(REe,"blenderbot-small"),REe.forEach(t),VOe=r(n3," \u2014 "),Y$=n(n3,"A",{href:!0});var PEe=s(Y$);XOe=r(PEe,"BlenderbotSmallConfig"),PEe.forEach(t),zOe=r(n3," (BlenderbotSmall model)"),n3.forEach(t),WOe=i(y),kf=n(y,"LI",{});var s3=s(kf);loe=n(s3,"STRONG",{});var BEe=s(loe);QOe=r(BEe,"camembert"),BEe.forEach(t),HOe=r(s3," \u2014 "),K$=n(s3,"A",{href:!0});var IEe=s(K$);UOe=r(IEe,"CamembertConfig"),IEe.forEach(t),JOe=r(s3," (CamemBERT model)"),s3.forEach(t),YOe=i(y),Sf=n(y,"LI",{});var l3=s(Sf);ioe=n(l3,"STRONG",{});var qEe=s(ioe);KOe=r(qEe,"canine"),qEe.forEach(t),ZOe=r(l3," \u2014 "),Z$=n(l3,"A",{href:!0});var NEe=s(Z$);eVe=r(NEe,"CanineConfig"),NEe.forEach(t),oVe=r(l3," (Canine model)"),l3.forEach(t),rVe=i(y),Rf=n(y,"LI",{});var i3=s(Rf);doe=n(i3,"STRONG",{});var jEe=s(doe);tVe=r(jEe,"clip"),jEe.forEach(t),aVe=r(i3," \u2014 "),ek=n(i3,"A",{href:!0});var DEe=s(ek);nVe=r(DEe,"CLIPConfig"),DEe.forEach(t),sVe=r(i3," (CLIP model)"),i3.forEach(t),lVe=i(y),Pf=n(y,"LI",{});var d3=s(Pf);coe=n(d3,"STRONG",{});var GEe=s(coe);iVe=r(GEe,"convbert"),GEe.forEach(t),dVe=r(d3," \u2014 "),ok=n(d3,"A",{href:!0});var OEe=s(ok);cVe=r(OEe,"ConvBertConfig"),OEe.forEach(t),fVe=r(d3," (ConvBERT model)"),d3.forEach(t),mVe=i(y),Bf=n(y,"LI",{});var c3=s(Bf);foe=n(c3,"STRONG",{});var VEe=s(foe);gVe=r(VEe,"convnext"),VEe.forEach(t),hVe=r(c3," \u2014 "),rk=n(c3,"A",{href:!0});var XEe=s(rk);pVe=r(XEe,"ConvNextConfig"),XEe.forEach(t),uVe=r(c3," (ConvNext model)"),c3.forEach(t),_Ve=i(y),If=n(y,"LI",{});var f3=s(If);moe=n(f3,"STRONG",{});var zEe=s(moe);bVe=r(zEe,"ctrl"),zEe.forEach(t),vVe=r(f3," \u2014 "),tk=n(f3,"A",{href:!0});var WEe=s(tk);FVe=r(WEe,"CTRLConfig"),WEe.forEach(t),TVe=r(f3," (CTRL model)"),f3.forEach(t),MVe=i(y),qf=n(y,"LI",{});var m3=s(qf);goe=n(m3,"STRONG",{});var QEe=s(goe);EVe=r(QEe,"data2vec-audio"),QEe.forEach(t),CVe=r(m3," \u2014 "),ak=n(m3,"A",{href:!0});var HEe=s(ak);wVe=r(HEe,"Data2VecAudioConfig"),HEe.forEach(t),AVe=r(m3," (Data2VecAudio model)"),m3.forEach(t),yVe=i(y),Nf=n(y,"LI",{});var g3=s(Nf);hoe=n(g3,"STRONG",{});var UEe=s(hoe);LVe=r(UEe,"data2vec-text"),UEe.forEach(t),xVe=r(g3," \u2014 "),nk=n(g3,"A",{href:!0});var JEe=s(nk);$Ve=r(JEe,"Data2VecTextConfig"),JEe.forEach(t),kVe=r(g3," (Data2VecText model)"),g3.forEach(t),SVe=i(y),jf=n(y,"LI",{});var h3=s(jf);poe=n(h3,"STRONG",{});var YEe=s(poe);RVe=r(YEe,"data2vec-vision"),YEe.forEach(t),PVe=r(h3," \u2014 "),sk=n(h3,"A",{href:!0});var KEe=s(sk);BVe=r(KEe,"Data2VecVisionConfig"),KEe.forEach(t),IVe=r(h3," (Data2VecVision model)"),h3.forEach(t),qVe=i(y),Df=n(y,"LI",{});var p3=s(Df);uoe=n(p3,"STRONG",{});var ZEe=s(uoe);NVe=r(ZEe,"deberta"),ZEe.forEach(t),jVe=r(p3," \u2014 "),lk=n(p3,"A",{href:!0});var eCe=s(lk);DVe=r(eCe,"DebertaConfig"),eCe.forEach(t),GVe=r(p3," (DeBERTa model)"),p3.forEach(t),OVe=i(y),Gf=n(y,"LI",{});var u3=s(Gf);_oe=n(u3,"STRONG",{});var oCe=s(_oe);VVe=r(oCe,"deberta-v2"),oCe.forEach(t),XVe=r(u3," \u2014 "),ik=n(u3,"A",{href:!0});var rCe=s(ik);zVe=r(rCe,"DebertaV2Config"),rCe.forEach(t),WVe=r(u3," (DeBERTa-v2 model)"),u3.forEach(t),QVe=i(y),Of=n(y,"LI",{});var _3=s(Of);boe=n(_3,"STRONG",{});var tCe=s(boe);HVe=r(tCe,"decision_transformer"),tCe.forEach(t),UVe=r(_3," \u2014 "),dk=n(_3,"A",{href:!0});var aCe=s(dk);JVe=r(aCe,"DecisionTransformerConfig"),aCe.forEach(t),YVe=r(_3," (Decision Transformer model)"),_3.forEach(t),KVe=i(y),Vf=n(y,"LI",{});var b3=s(Vf);voe=n(b3,"STRONG",{});var nCe=s(voe);ZVe=r(nCe,"deit"),nCe.forEach(t),eXe=r(b3," \u2014 "),ck=n(b3,"A",{href:!0});var sCe=s(ck);oXe=r(sCe,"DeiTConfig"),sCe.forEach(t),rXe=r(b3," (DeiT model)"),b3.forEach(t),tXe=i(y),Xf=n(y,"LI",{});var v3=s(Xf);Foe=n(v3,"STRONG",{});var lCe=s(Foe);aXe=r(lCe,"detr"),lCe.forEach(t),nXe=r(v3," \u2014 "),fk=n(v3,"A",{href:!0});var aOr=s(fk);sXe=r(aOr,"DetrConfig"),aOr.forEach(t),lXe=r(v3," (DETR model)"),v3.forEach(t),iXe=i(y),zf=n(y,"LI",{});var iCe=s(zf);Toe=n(iCe,"STRONG",{});var nOr=s(Toe);dXe=r(nOr,"distilbert"),nOr.forEach(t),cXe=r(iCe," \u2014 "),mk=n(iCe,"A",{href:!0});var sOr=s(mk);fXe=r(sOr,"DistilBertConfig"),sOr.forEach(t),mXe=r(iCe," (DistilBERT model)"),iCe.forEach(t),gXe=i(y),Wf=n(y,"LI",{});var dCe=s(Wf);Moe=n(dCe,"STRONG",{});var lOr=s(Moe);hXe=r(lOr,"dpr"),lOr.forEach(t),pXe=r(dCe," \u2014 "),gk=n(dCe,"A",{href:!0});var iOr=s(gk);uXe=r(iOr,"DPRConfig"),iOr.forEach(t),_Xe=r(dCe," (DPR model)"),dCe.forEach(t),bXe=i(y),Qf=n(y,"LI",{});var cCe=s(Qf);Eoe=n(cCe,"STRONG",{});var dOr=s(Eoe);vXe=r(dOr,"dpt"),dOr.forEach(t),FXe=r(cCe," \u2014 "),hk=n(cCe,"A",{href:!0});var cOr=s(hk);TXe=r(cOr,"DPTConfig"),cOr.forEach(t),MXe=r(cCe," (DPT model)"),cCe.forEach(t),EXe=i(y),Hf=n(y,"LI",{});var fCe=s(Hf);Coe=n(fCe,"STRONG",{});var fOr=s(Coe);CXe=r(fOr,"electra"),fOr.forEach(t),wXe=r(fCe," \u2014 "),pk=n(fCe,"A",{href:!0});var mOr=s(pk);AXe=r(mOr,"ElectraConfig"),mOr.forEach(t),yXe=r(fCe," (ELECTRA model)"),fCe.forEach(t),LXe=i(y),Uf=n(y,"LI",{});var mCe=s(Uf);woe=n(mCe,"STRONG",{});var gOr=s(woe);xXe=r(gOr,"encoder-decoder"),gOr.forEach(t),$Xe=r(mCe," \u2014 "),uk=n(mCe,"A",{href:!0});var hOr=s(uk);kXe=r(hOr,"EncoderDecoderConfig"),hOr.forEach(t),SXe=r(mCe," (Encoder decoder model)"),mCe.forEach(t),RXe=i(y),Jf=n(y,"LI",{});var gCe=s(Jf);Aoe=n(gCe,"STRONG",{});var pOr=s(Aoe);PXe=r(pOr,"flaubert"),pOr.forEach(t),BXe=r(gCe," \u2014 "),_k=n(gCe,"A",{href:!0});var uOr=s(_k);IXe=r(uOr,"FlaubertConfig"),uOr.forEach(t),qXe=r(gCe," (FlauBERT model)"),gCe.forEach(t),NXe=i(y),Yf=n(y,"LI",{});var hCe=s(Yf);yoe=n(hCe,"STRONG",{});var _Or=s(yoe);jXe=r(_Or,"flava"),_Or.forEach(t),DXe=r(hCe," \u2014 "),bk=n(hCe,"A",{href:!0});var bOr=s(bk);GXe=r(bOr,"FlavaConfig"),bOr.forEach(t),OXe=r(hCe," (Flava model)"),hCe.forEach(t),VXe=i(y),Kf=n(y,"LI",{});var pCe=s(Kf);Loe=n(pCe,"STRONG",{});var vOr=s(Loe);XXe=r(vOr,"fnet"),vOr.forEach(t),zXe=r(pCe," \u2014 "),vk=n(pCe,"A",{href:!0});var FOr=s(vk);WXe=r(FOr,"FNetConfig"),FOr.forEach(t),QXe=r(pCe," (FNet model)"),pCe.forEach(t),HXe=i(y),Zf=n(y,"LI",{});var uCe=s(Zf);xoe=n(uCe,"STRONG",{});var TOr=s(xoe);UXe=r(TOr,"fsmt"),TOr.forEach(t),JXe=r(uCe," \u2014 "),Fk=n(uCe,"A",{href:!0});var MOr=s(Fk);YXe=r(MOr,"FSMTConfig"),MOr.forEach(t),KXe=r(uCe," (FairSeq Machine-Translation model)"),uCe.forEach(t),ZXe=i(y),em=n(y,"LI",{});var _Ce=s(em);$oe=n(_Ce,"STRONG",{});var EOr=s($oe);eze=r(EOr,"funnel"),EOr.forEach(t),oze=r(_Ce," \u2014 "),Tk=n(_Ce,"A",{href:!0});var COr=s(Tk);rze=r(COr,"FunnelConfig"),COr.forEach(t),tze=r(_Ce," (Funnel Transformer model)"),_Ce.forEach(t),aze=i(y),om=n(y,"LI",{});var bCe=s(om);koe=n(bCe,"STRONG",{});var wOr=s(koe);nze=r(wOr,"glpn"),wOr.forEach(t),sze=r(bCe," \u2014 "),Mk=n(bCe,"A",{href:!0});var AOr=s(Mk);lze=r(AOr,"GLPNConfig"),AOr.forEach(t),ize=r(bCe," (GLPN model)"),bCe.forEach(t),dze=i(y),rm=n(y,"LI",{});var vCe=s(rm);Soe=n(vCe,"STRONG",{});var yOr=s(Soe);cze=r(yOr,"gpt2"),yOr.forEach(t),fze=r(vCe," \u2014 "),Ek=n(vCe,"A",{href:!0});var LOr=s(Ek);mze=r(LOr,"GPT2Config"),LOr.forEach(t),gze=r(vCe," (OpenAI GPT-2 model)"),vCe.forEach(t),hze=i(y),tm=n(y,"LI",{});var FCe=s(tm);Roe=n(FCe,"STRONG",{});var xOr=s(Roe);pze=r(xOr,"gpt_neo"),xOr.forEach(t),uze=r(FCe," \u2014 "),Ck=n(FCe,"A",{href:!0});var $Or=s(Ck);_ze=r($Or,"GPTNeoConfig"),$Or.forEach(t),bze=r(FCe," (GPT Neo model)"),FCe.forEach(t),vze=i(y),am=n(y,"LI",{});var TCe=s(am);Poe=n(TCe,"STRONG",{});var kOr=s(Poe);Fze=r(kOr,"gptj"),kOr.forEach(t),Tze=r(TCe," \u2014 "),wk=n(TCe,"A",{href:!0});var SOr=s(wk);Mze=r(SOr,"GPTJConfig"),SOr.forEach(t),Eze=r(TCe," (GPT-J model)"),TCe.forEach(t),Cze=i(y),nm=n(y,"LI",{});var MCe=s(nm);Boe=n(MCe,"STRONG",{});var ROr=s(Boe);wze=r(ROr,"hubert"),ROr.forEach(t),Aze=r(MCe," \u2014 "),Ak=n(MCe,"A",{href:!0});var POr=s(Ak);yze=r(POr,"HubertConfig"),POr.forEach(t),Lze=r(MCe," (Hubert model)"),MCe.forEach(t),xze=i(y),sm=n(y,"LI",{});var ECe=s(sm);Ioe=n(ECe,"STRONG",{});var BOr=s(Ioe);$ze=r(BOr,"ibert"),BOr.forEach(t),kze=r(ECe," \u2014 "),yk=n(ECe,"A",{href:!0});var IOr=s(yk);Sze=r(IOr,"IBertConfig"),IOr.forEach(t),Rze=r(ECe," (I-BERT model)"),ECe.forEach(t),Pze=i(y),lm=n(y,"LI",{});var CCe=s(lm);qoe=n(CCe,"STRONG",{});var qOr=s(qoe);Bze=r(qOr,"imagegpt"),qOr.forEach(t),Ize=r(CCe," \u2014 "),Lk=n(CCe,"A",{href:!0});var NOr=s(Lk);qze=r(NOr,"ImageGPTConfig"),NOr.forEach(t),Nze=r(CCe," (ImageGPT model)"),CCe.forEach(t),jze=i(y),im=n(y,"LI",{});var wCe=s(im);Noe=n(wCe,"STRONG",{});var jOr=s(Noe);Dze=r(jOr,"layoutlm"),jOr.forEach(t),Gze=r(wCe," \u2014 "),xk=n(wCe,"A",{href:!0});var DOr=s(xk);Oze=r(DOr,"LayoutLMConfig"),DOr.forEach(t),Vze=r(wCe," (LayoutLM model)"),wCe.forEach(t),Xze=i(y),dm=n(y,"LI",{});var ACe=s(dm);joe=n(ACe,"STRONG",{});var GOr=s(joe);zze=r(GOr,"layoutlmv2"),GOr.forEach(t),Wze=r(ACe," \u2014 "),$k=n(ACe,"A",{href:!0});var OOr=s($k);Qze=r(OOr,"LayoutLMv2Config"),OOr.forEach(t),Hze=r(ACe," (LayoutLMv2 model)"),ACe.forEach(t),Uze=i(y),cm=n(y,"LI",{});var yCe=s(cm);Doe=n(yCe,"STRONG",{});var VOr=s(Doe);Jze=r(VOr,"layoutlmv3"),VOr.forEach(t),Yze=r(yCe," \u2014 "),kk=n(yCe,"A",{href:!0});var XOr=s(kk);Kze=r(XOr,"LayoutLMv3Config"),XOr.forEach(t),Zze=r(yCe," (LayoutLMv3 model)"),yCe.forEach(t),eWe=i(y),fm=n(y,"LI",{});var LCe=s(fm);Goe=n(LCe,"STRONG",{});var zOr=s(Goe);oWe=r(zOr,"led"),zOr.forEach(t),rWe=r(LCe," \u2014 "),Sk=n(LCe,"A",{href:!0});var WOr=s(Sk);tWe=r(WOr,"LEDConfig"),WOr.forEach(t),aWe=r(LCe," (LED model)"),LCe.forEach(t),nWe=i(y),mm=n(y,"LI",{});var xCe=s(mm);Ooe=n(xCe,"STRONG",{});var QOr=s(Ooe);sWe=r(QOr,"longformer"),QOr.forEach(t),lWe=r(xCe," \u2014 "),Rk=n(xCe,"A",{href:!0});var HOr=s(Rk);iWe=r(HOr,"LongformerConfig"),HOr.forEach(t),dWe=r(xCe," (Longformer model)"),xCe.forEach(t),cWe=i(y),gm=n(y,"LI",{});var $Ce=s(gm);Voe=n($Ce,"STRONG",{});var UOr=s(Voe);fWe=r(UOr,"luke"),UOr.forEach(t),mWe=r($Ce," \u2014 "),Pk=n($Ce,"A",{href:!0});var JOr=s(Pk);gWe=r(JOr,"LukeConfig"),JOr.forEach(t),hWe=r($Ce," (LUKE model)"),$Ce.forEach(t),pWe=i(y),hm=n(y,"LI",{});var kCe=s(hm);Xoe=n(kCe,"STRONG",{});var YOr=s(Xoe);uWe=r(YOr,"lxmert"),YOr.forEach(t),_We=r(kCe," \u2014 "),Bk=n(kCe,"A",{href:!0});var KOr=s(Bk);bWe=r(KOr,"LxmertConfig"),KOr.forEach(t),vWe=r(kCe," (LXMERT model)"),kCe.forEach(t),FWe=i(y),pm=n(y,"LI",{});var SCe=s(pm);zoe=n(SCe,"STRONG",{});var ZOr=s(zoe);TWe=r(ZOr,"m2m_100"),ZOr.forEach(t),MWe=r(SCe," \u2014 "),Ik=n(SCe,"A",{href:!0});var eVr=s(Ik);EWe=r(eVr,"M2M100Config"),eVr.forEach(t),CWe=r(SCe," (M2M100 model)"),SCe.forEach(t),wWe=i(y),um=n(y,"LI",{});var RCe=s(um);Woe=n(RCe,"STRONG",{});var oVr=s(Woe);AWe=r(oVr,"marian"),oVr.forEach(t),yWe=r(RCe," \u2014 "),qk=n(RCe,"A",{href:!0});var rVr=s(qk);LWe=r(rVr,"MarianConfig"),rVr.forEach(t),xWe=r(RCe," (Marian model)"),RCe.forEach(t),$We=i(y),_m=n(y,"LI",{});var PCe=s(_m);Qoe=n(PCe,"STRONG",{});var tVr=s(Qoe);kWe=r(tVr,"maskformer"),tVr.forEach(t),SWe=r(PCe," \u2014 "),Nk=n(PCe,"A",{href:!0});var aVr=s(Nk);RWe=r(aVr,"MaskFormerConfig"),aVr.forEach(t),PWe=r(PCe," (MaskFormer model)"),PCe.forEach(t),BWe=i(y),bm=n(y,"LI",{});var BCe=s(bm);Hoe=n(BCe,"STRONG",{});var nVr=s(Hoe);IWe=r(nVr,"mbart"),nVr.forEach(t),qWe=r(BCe," \u2014 "),jk=n(BCe,"A",{href:!0});var sVr=s(jk);NWe=r(sVr,"MBartConfig"),sVr.forEach(t),jWe=r(BCe," (mBART model)"),BCe.forEach(t),DWe=i(y),vm=n(y,"LI",{});var ICe=s(vm);Uoe=n(ICe,"STRONG",{});var lVr=s(Uoe);GWe=r(lVr,"megatron-bert"),lVr.forEach(t),OWe=r(ICe," \u2014 "),Dk=n(ICe,"A",{href:!0});var iVr=s(Dk);VWe=r(iVr,"MegatronBertConfig"),iVr.forEach(t),XWe=r(ICe," (MegatronBert model)"),ICe.forEach(t),zWe=i(y),Fm=n(y,"LI",{});var qCe=s(Fm);Joe=n(qCe,"STRONG",{});var dVr=s(Joe);WWe=r(dVr,"mobilebert"),dVr.forEach(t),QWe=r(qCe," \u2014 "),Gk=n(qCe,"A",{href:!0});var cVr=s(Gk);HWe=r(cVr,"MobileBertConfig"),cVr.forEach(t),UWe=r(qCe," (MobileBERT model)"),qCe.forEach(t),JWe=i(y),Tm=n(y,"LI",{});var NCe=s(Tm);Yoe=n(NCe,"STRONG",{});var fVr=s(Yoe);YWe=r(fVr,"mpnet"),fVr.forEach(t),KWe=r(NCe," \u2014 "),Ok=n(NCe,"A",{href:!0});var mVr=s(Ok);ZWe=r(mVr,"MPNetConfig"),mVr.forEach(t),eQe=r(NCe," (MPNet model)"),NCe.forEach(t),oQe=i(y),Mm=n(y,"LI",{});var jCe=s(Mm);Koe=n(jCe,"STRONG",{});var gVr=s(Koe);rQe=r(gVr,"mt5"),gVr.forEach(t),tQe=r(jCe," \u2014 "),Vk=n(jCe,"A",{href:!0});var hVr=s(Vk);aQe=r(hVr,"MT5Config"),hVr.forEach(t),nQe=r(jCe," (mT5 model)"),jCe.forEach(t),sQe=i(y),Em=n(y,"LI",{});var DCe=s(Em);Zoe=n(DCe,"STRONG",{});var pVr=s(Zoe);lQe=r(pVr,"nystromformer"),pVr.forEach(t),iQe=r(DCe," \u2014 "),Xk=n(DCe,"A",{href:!0});var uVr=s(Xk);dQe=r(uVr,"NystromformerConfig"),uVr.forEach(t),cQe=r(DCe," (Nystromformer model)"),DCe.forEach(t),fQe=i(y),Cm=n(y,"LI",{});var GCe=s(Cm);ere=n(GCe,"STRONG",{});var _Vr=s(ere);mQe=r(_Vr,"openai-gpt"),_Vr.forEach(t),gQe=r(GCe," \u2014 "),zk=n(GCe,"A",{href:!0});var bVr=s(zk);hQe=r(bVr,"OpenAIGPTConfig"),bVr.forEach(t),pQe=r(GCe," (OpenAI GPT model)"),GCe.forEach(t),uQe=i(y),wm=n(y,"LI",{});var OCe=s(wm);ore=n(OCe,"STRONG",{});var vVr=s(ore);_Qe=r(vVr,"opt"),vVr.forEach(t),bQe=r(OCe," \u2014 "),Wk=n(OCe,"A",{href:!0});var FVr=s(Wk);vQe=r(FVr,"OPTConfig"),FVr.forEach(t),FQe=r(OCe," (OPT model)"),OCe.forEach(t),TQe=i(y),Am=n(y,"LI",{});var VCe=s(Am);rre=n(VCe,"STRONG",{});var TVr=s(rre);MQe=r(TVr,"pegasus"),TVr.forEach(t),EQe=r(VCe," \u2014 "),Qk=n(VCe,"A",{href:!0});var MVr=s(Qk);CQe=r(MVr,"PegasusConfig"),MVr.forEach(t),wQe=r(VCe," (Pegasus model)"),VCe.forEach(t),AQe=i(y),ym=n(y,"LI",{});var XCe=s(ym);tre=n(XCe,"STRONG",{});var EVr=s(tre);yQe=r(EVr,"perceiver"),EVr.forEach(t),LQe=r(XCe," \u2014 "),Hk=n(XCe,"A",{href:!0});var CVr=s(Hk);xQe=r(CVr,"PerceiverConfig"),CVr.forEach(t),$Qe=r(XCe," (Perceiver model)"),XCe.forEach(t),kQe=i(y),Lm=n(y,"LI",{});var zCe=s(Lm);are=n(zCe,"STRONG",{});var wVr=s(are);SQe=r(wVr,"plbart"),wVr.forEach(t),RQe=r(zCe," \u2014 "),Uk=n(zCe,"A",{href:!0});var AVr=s(Uk);PQe=r(AVr,"PLBartConfig"),AVr.forEach(t),BQe=r(zCe," (PLBart model)"),zCe.forEach(t),IQe=i(y),xm=n(y,"LI",{});var WCe=s(xm);nre=n(WCe,"STRONG",{});var yVr=s(nre);qQe=r(yVr,"poolformer"),yVr.forEach(t),NQe=r(WCe," \u2014 "),Jk=n(WCe,"A",{href:!0});var LVr=s(Jk);jQe=r(LVr,"PoolFormerConfig"),LVr.forEach(t),DQe=r(WCe," (PoolFormer model)"),WCe.forEach(t),GQe=i(y),$m=n(y,"LI",{});var QCe=s($m);sre=n(QCe,"STRONG",{});var xVr=s(sre);OQe=r(xVr,"prophetnet"),xVr.forEach(t),VQe=r(QCe," \u2014 "),Yk=n(QCe,"A",{href:!0});var $Vr=s(Yk);XQe=r($Vr,"ProphetNetConfig"),$Vr.forEach(t),zQe=r(QCe," (ProphetNet model)"),QCe.forEach(t),WQe=i(y),km=n(y,"LI",{});var HCe=s(km);lre=n(HCe,"STRONG",{});var kVr=s(lre);QQe=r(kVr,"qdqbert"),kVr.forEach(t),HQe=r(HCe," \u2014 "),Kk=n(HCe,"A",{href:!0});var SVr=s(Kk);UQe=r(SVr,"QDQBertConfig"),SVr.forEach(t),JQe=r(HCe," (QDQBert model)"),HCe.forEach(t),YQe=i(y),Sm=n(y,"LI",{});var UCe=s(Sm);ire=n(UCe,"STRONG",{});var RVr=s(ire);KQe=r(RVr,"rag"),RVr.forEach(t),ZQe=r(UCe," \u2014 "),Zk=n(UCe,"A",{href:!0});var PVr=s(Zk);eHe=r(PVr,"RagConfig"),PVr.forEach(t),oHe=r(UCe," (RAG model)"),UCe.forEach(t),rHe=i(y),Rm=n(y,"LI",{});var JCe=s(Rm);dre=n(JCe,"STRONG",{});var BVr=s(dre);tHe=r(BVr,"realm"),BVr.forEach(t),aHe=r(JCe," \u2014 "),eS=n(JCe,"A",{href:!0});var IVr=s(eS);nHe=r(IVr,"RealmConfig"),IVr.forEach(t),sHe=r(JCe," (Realm model)"),JCe.forEach(t),lHe=i(y),Pm=n(y,"LI",{});var YCe=s(Pm);cre=n(YCe,"STRONG",{});var qVr=s(cre);iHe=r(qVr,"reformer"),qVr.forEach(t),dHe=r(YCe," \u2014 "),oS=n(YCe,"A",{href:!0});var NVr=s(oS);cHe=r(NVr,"ReformerConfig"),NVr.forEach(t),fHe=r(YCe," (Reformer model)"),YCe.forEach(t),mHe=i(y),Bm=n(y,"LI",{});var KCe=s(Bm);fre=n(KCe,"STRONG",{});var jVr=s(fre);gHe=r(jVr,"regnet"),jVr.forEach(t),hHe=r(KCe," \u2014 "),rS=n(KCe,"A",{href:!0});var DVr=s(rS);pHe=r(DVr,"RegNetConfig"),DVr.forEach(t),uHe=r(KCe," (RegNet model)"),KCe.forEach(t),_He=i(y),Im=n(y,"LI",{});var ZCe=s(Im);mre=n(ZCe,"STRONG",{});var GVr=s(mre);bHe=r(GVr,"rembert"),GVr.forEach(t),vHe=r(ZCe," \u2014 "),tS=n(ZCe,"A",{href:!0});var OVr=s(tS);FHe=r(OVr,"RemBertConfig"),OVr.forEach(t),THe=r(ZCe," (RemBERT model)"),ZCe.forEach(t),MHe=i(y),qm=n(y,"LI",{});var e5e=s(qm);gre=n(e5e,"STRONG",{});var VVr=s(gre);EHe=r(VVr,"resnet"),VVr.forEach(t),CHe=r(e5e," \u2014 "),aS=n(e5e,"A",{href:!0});var XVr=s(aS);wHe=r(XVr,"ResNetConfig"),XVr.forEach(t),AHe=r(e5e," (ResNet model)"),e5e.forEach(t),yHe=i(y),Nm=n(y,"LI",{});var o5e=s(Nm);hre=n(o5e,"STRONG",{});var zVr=s(hre);LHe=r(zVr,"retribert"),zVr.forEach(t),xHe=r(o5e," \u2014 "),nS=n(o5e,"A",{href:!0});var WVr=s(nS);$He=r(WVr,"RetriBertConfig"),WVr.forEach(t),kHe=r(o5e," (RetriBERT model)"),o5e.forEach(t),SHe=i(y),jm=n(y,"LI",{});var r5e=s(jm);pre=n(r5e,"STRONG",{});var QVr=s(pre);RHe=r(QVr,"roberta"),QVr.forEach(t),PHe=r(r5e," \u2014 "),sS=n(r5e,"A",{href:!0});var HVr=s(sS);BHe=r(HVr,"RobertaConfig"),HVr.forEach(t),IHe=r(r5e," (RoBERTa model)"),r5e.forEach(t),qHe=i(y),Dm=n(y,"LI",{});var t5e=s(Dm);ure=n(t5e,"STRONG",{});var UVr=s(ure);NHe=r(UVr,"roformer"),UVr.forEach(t),jHe=r(t5e," \u2014 "),lS=n(t5e,"A",{href:!0});var JVr=s(lS);DHe=r(JVr,"RoFormerConfig"),JVr.forEach(t),GHe=r(t5e," (RoFormer model)"),t5e.forEach(t),OHe=i(y),Gm=n(y,"LI",{});var a5e=s(Gm);_re=n(a5e,"STRONG",{});var YVr=s(_re);VHe=r(YVr,"segformer"),YVr.forEach(t),XHe=r(a5e," \u2014 "),iS=n(a5e,"A",{href:!0});var KVr=s(iS);zHe=r(KVr,"SegformerConfig"),KVr.forEach(t),WHe=r(a5e," (SegFormer model)"),a5e.forEach(t),QHe=i(y),Om=n(y,"LI",{});var n5e=s(Om);bre=n(n5e,"STRONG",{});var ZVr=s(bre);HHe=r(ZVr,"sew"),ZVr.forEach(t),UHe=r(n5e," \u2014 "),dS=n(n5e,"A",{href:!0});var eXr=s(dS);JHe=r(eXr,"SEWConfig"),eXr.forEach(t),YHe=r(n5e," (SEW model)"),n5e.forEach(t),KHe=i(y),Vm=n(y,"LI",{});var s5e=s(Vm);vre=n(s5e,"STRONG",{});var oXr=s(vre);ZHe=r(oXr,"sew-d"),oXr.forEach(t),eUe=r(s5e," \u2014 "),cS=n(s5e,"A",{href:!0});var rXr=s(cS);oUe=r(rXr,"SEWDConfig"),rXr.forEach(t),rUe=r(s5e," (SEW-D model)"),s5e.forEach(t),tUe=i(y),Xm=n(y,"LI",{});var l5e=s(Xm);Fre=n(l5e,"STRONG",{});var tXr=s(Fre);aUe=r(tXr,"speech-encoder-decoder"),tXr.forEach(t),nUe=r(l5e," \u2014 "),fS=n(l5e,"A",{href:!0});var aXr=s(fS);sUe=r(aXr,"SpeechEncoderDecoderConfig"),aXr.forEach(t),lUe=r(l5e," (Speech Encoder decoder model)"),l5e.forEach(t),iUe=i(y),zm=n(y,"LI",{});var i5e=s(zm);Tre=n(i5e,"STRONG",{});var nXr=s(Tre);dUe=r(nXr,"speech_to_text"),nXr.forEach(t),cUe=r(i5e," \u2014 "),mS=n(i5e,"A",{href:!0});var sXr=s(mS);fUe=r(sXr,"Speech2TextConfig"),sXr.forEach(t),mUe=r(i5e," (Speech2Text model)"),i5e.forEach(t),gUe=i(y),Wm=n(y,"LI",{});var d5e=s(Wm);Mre=n(d5e,"STRONG",{});var lXr=s(Mre);hUe=r(lXr,"speech_to_text_2"),lXr.forEach(t),pUe=r(d5e," \u2014 "),gS=n(d5e,"A",{href:!0});var iXr=s(gS);uUe=r(iXr,"Speech2Text2Config"),iXr.forEach(t),_Ue=r(d5e," (Speech2Text2 model)"),d5e.forEach(t),bUe=i(y),Qm=n(y,"LI",{});var c5e=s(Qm);Ere=n(c5e,"STRONG",{});var dXr=s(Ere);vUe=r(dXr,"splinter"),dXr.forEach(t),FUe=r(c5e," \u2014 "),hS=n(c5e,"A",{href:!0});var cXr=s(hS);TUe=r(cXr,"SplinterConfig"),cXr.forEach(t),MUe=r(c5e," (Splinter model)"),c5e.forEach(t),EUe=i(y),Hm=n(y,"LI",{});var f5e=s(Hm);Cre=n(f5e,"STRONG",{});var fXr=s(Cre);CUe=r(fXr,"squeezebert"),fXr.forEach(t),wUe=r(f5e," \u2014 "),pS=n(f5e,"A",{href:!0});var mXr=s(pS);AUe=r(mXr,"SqueezeBertConfig"),mXr.forEach(t),yUe=r(f5e," (SqueezeBERT model)"),f5e.forEach(t),LUe=i(y),Um=n(y,"LI",{});var m5e=s(Um);wre=n(m5e,"STRONG",{});var gXr=s(wre);xUe=r(gXr,"swin"),gXr.forEach(t),$Ue=r(m5e," \u2014 "),uS=n(m5e,"A",{href:!0});var hXr=s(uS);kUe=r(hXr,"SwinConfig"),hXr.forEach(t),SUe=r(m5e," (Swin model)"),m5e.forEach(t),RUe=i(y),Jm=n(y,"LI",{});var g5e=s(Jm);Are=n(g5e,"STRONG",{});var pXr=s(Are);PUe=r(pXr,"t5"),pXr.forEach(t),BUe=r(g5e," \u2014 "),_S=n(g5e,"A",{href:!0});var uXr=s(_S);IUe=r(uXr,"T5Config"),uXr.forEach(t),qUe=r(g5e," (T5 model)"),g5e.forEach(t),NUe=i(y),Ym=n(y,"LI",{});var h5e=s(Ym);yre=n(h5e,"STRONG",{});var _Xr=s(yre);jUe=r(_Xr,"tapas"),_Xr.forEach(t),DUe=r(h5e," \u2014 "),bS=n(h5e,"A",{href:!0});var bXr=s(bS);GUe=r(bXr,"TapasConfig"),bXr.forEach(t),OUe=r(h5e," (TAPAS model)"),h5e.forEach(t),VUe=i(y),Km=n(y,"LI",{});var p5e=s(Km);Lre=n(p5e,"STRONG",{});var vXr=s(Lre);XUe=r(vXr,"trajectory_transformer"),vXr.forEach(t),zUe=r(p5e," \u2014 "),vS=n(p5e,"A",{href:!0});var FXr=s(vS);WUe=r(FXr,"TrajectoryTransformerConfig"),FXr.forEach(t),QUe=r(p5e," (Trajectory Transformer model)"),p5e.forEach(t),HUe=i(y),Zm=n(y,"LI",{});var u5e=s(Zm);xre=n(u5e,"STRONG",{});var TXr=s(xre);UUe=r(TXr,"transfo-xl"),TXr.forEach(t),JUe=r(u5e," \u2014 "),FS=n(u5e,"A",{href:!0});var MXr=s(FS);YUe=r(MXr,"TransfoXLConfig"),MXr.forEach(t),KUe=r(u5e," (Transformer-XL model)"),u5e.forEach(t),ZUe=i(y),eg=n(y,"LI",{});var _5e=s(eg);$re=n(_5e,"STRONG",{});var EXr=s($re);eJe=r(EXr,"trocr"),EXr.forEach(t),oJe=r(_5e," \u2014 "),TS=n(_5e,"A",{href:!0});var CXr=s(TS);rJe=r(CXr,"TrOCRConfig"),CXr.forEach(t),tJe=r(_5e," (TrOCR model)"),_5e.forEach(t),aJe=i(y),og=n(y,"LI",{});var b5e=s(og);kre=n(b5e,"STRONG",{});var wXr=s(kre);nJe=r(wXr,"unispeech"),wXr.forEach(t),sJe=r(b5e," \u2014 "),MS=n(b5e,"A",{href:!0});var AXr=s(MS);lJe=r(AXr,"UniSpeechConfig"),AXr.forEach(t),iJe=r(b5e," (UniSpeech model)"),b5e.forEach(t),dJe=i(y),rg=n(y,"LI",{});var v5e=s(rg);Sre=n(v5e,"STRONG",{});var yXr=s(Sre);cJe=r(yXr,"unispeech-sat"),yXr.forEach(t),fJe=r(v5e," \u2014 "),ES=n(v5e,"A",{href:!0});var LXr=s(ES);mJe=r(LXr,"UniSpeechSatConfig"),LXr.forEach(t),gJe=r(v5e," (UniSpeechSat model)"),v5e.forEach(t),hJe=i(y),tg=n(y,"LI",{});var F5e=s(tg);Rre=n(F5e,"STRONG",{});var xXr=s(Rre);pJe=r(xXr,"van"),xXr.forEach(t),uJe=r(F5e," \u2014 "),CS=n(F5e,"A",{href:!0});var $Xr=s(CS);_Je=r($Xr,"VanConfig"),$Xr.forEach(t),bJe=r(F5e," (VAN model)"),F5e.forEach(t),vJe=i(y),ag=n(y,"LI",{});var T5e=s(ag);Pre=n(T5e,"STRONG",{});var kXr=s(Pre);FJe=r(kXr,"vilt"),kXr.forEach(t),TJe=r(T5e," \u2014 "),wS=n(T5e,"A",{href:!0});var SXr=s(wS);MJe=r(SXr,"ViltConfig"),SXr.forEach(t),EJe=r(T5e," (ViLT model)"),T5e.forEach(t),CJe=i(y),ng=n(y,"LI",{});var M5e=s(ng);Bre=n(M5e,"STRONG",{});var RXr=s(Bre);wJe=r(RXr,"vision-encoder-decoder"),RXr.forEach(t),AJe=r(M5e," \u2014 "),AS=n(M5e,"A",{href:!0});var PXr=s(AS);yJe=r(PXr,"VisionEncoderDecoderConfig"),PXr.forEach(t),LJe=r(M5e," (Vision Encoder decoder model)"),M5e.forEach(t),xJe=i(y),sg=n(y,"LI",{});var E5e=s(sg);Ire=n(E5e,"STRONG",{});var BXr=s(Ire);$Je=r(BXr,"vision-text-dual-encoder"),BXr.forEach(t),kJe=r(E5e," \u2014 "),yS=n(E5e,"A",{href:!0});var IXr=s(yS);SJe=r(IXr,"VisionTextDualEncoderConfig"),IXr.forEach(t),RJe=r(E5e," (VisionTextDualEncoder model)"),E5e.forEach(t),PJe=i(y),lg=n(y,"LI",{});var C5e=s(lg);qre=n(C5e,"STRONG",{});var qXr=s(qre);BJe=r(qXr,"visual_bert"),qXr.forEach(t),IJe=r(C5e," \u2014 "),LS=n(C5e,"A",{href:!0});var NXr=s(LS);qJe=r(NXr,"VisualBertConfig"),NXr.forEach(t),NJe=r(C5e," (VisualBert model)"),C5e.forEach(t),jJe=i(y),ig=n(y,"LI",{});var w5e=s(ig);Nre=n(w5e,"STRONG",{});var jXr=s(Nre);DJe=r(jXr,"vit"),jXr.forEach(t),GJe=r(w5e," \u2014 "),xS=n(w5e,"A",{href:!0});var DXr=s(xS);OJe=r(DXr,"ViTConfig"),DXr.forEach(t),VJe=r(w5e," (ViT model)"),w5e.forEach(t),XJe=i(y),dg=n(y,"LI",{});var A5e=s(dg);jre=n(A5e,"STRONG",{});var GXr=s(jre);zJe=r(GXr,"vit_mae"),GXr.forEach(t),WJe=r(A5e," \u2014 "),$S=n(A5e,"A",{href:!0});var OXr=s($S);QJe=r(OXr,"ViTMAEConfig"),OXr.forEach(t),HJe=r(A5e," (ViTMAE model)"),A5e.forEach(t),UJe=i(y),cg=n(y,"LI",{});var y5e=s(cg);Dre=n(y5e,"STRONG",{});var VXr=s(Dre);JJe=r(VXr,"wav2vec2"),VXr.forEach(t),YJe=r(y5e," \u2014 "),kS=n(y5e,"A",{href:!0});var XXr=s(kS);KJe=r(XXr,"Wav2Vec2Config"),XXr.forEach(t),ZJe=r(y5e," (Wav2Vec2 model)"),y5e.forEach(t),eYe=i(y),fg=n(y,"LI",{});var L5e=s(fg);Gre=n(L5e,"STRONG",{});var zXr=s(Gre);oYe=r(zXr,"wav2vec2-conformer"),zXr.forEach(t),rYe=r(L5e," \u2014 "),SS=n(L5e,"A",{href:!0});var WXr=s(SS);tYe=r(WXr,"Wav2Vec2ConformerConfig"),WXr.forEach(t),aYe=r(L5e," (Wav2Vec2-Conformer model)"),L5e.forEach(t),nYe=i(y),mg=n(y,"LI",{});var x5e=s(mg);Ore=n(x5e,"STRONG",{});var QXr=s(Ore);sYe=r(QXr,"wavlm"),QXr.forEach(t),lYe=r(x5e," \u2014 "),RS=n(x5e,"A",{href:!0});var HXr=s(RS);iYe=r(HXr,"WavLMConfig"),HXr.forEach(t),dYe=r(x5e," (WavLM model)"),x5e.forEach(t),cYe=i(y),gg=n(y,"LI",{});var $5e=s(gg);Vre=n($5e,"STRONG",{});var UXr=s(Vre);fYe=r(UXr,"xglm"),UXr.forEach(t),mYe=r($5e," \u2014 "),PS=n($5e,"A",{href:!0});var JXr=s(PS);gYe=r(JXr,"XGLMConfig"),JXr.forEach(t),hYe=r($5e," (XGLM model)"),$5e.forEach(t),pYe=i(y),hg=n(y,"LI",{});var k5e=s(hg);Xre=n(k5e,"STRONG",{});var YXr=s(Xre);uYe=r(YXr,"xlm"),YXr.forEach(t),_Ye=r(k5e," \u2014 "),BS=n(k5e,"A",{href:!0});var KXr=s(BS);bYe=r(KXr,"XLMConfig"),KXr.forEach(t),vYe=r(k5e," (XLM model)"),k5e.forEach(t),FYe=i(y),pg=n(y,"LI",{});var S5e=s(pg);zre=n(S5e,"STRONG",{});var ZXr=s(zre);TYe=r(ZXr,"xlm-prophetnet"),ZXr.forEach(t),MYe=r(S5e," \u2014 "),IS=n(S5e,"A",{href:!0});var ezr=s(IS);EYe=r(ezr,"XLMProphetNetConfig"),ezr.forEach(t),CYe=r(S5e," (XLMProphetNet model)"),S5e.forEach(t),wYe=i(y),ug=n(y,"LI",{});var R5e=s(ug);Wre=n(R5e,"STRONG",{});var ozr=s(Wre);AYe=r(ozr,"xlm-roberta"),ozr.forEach(t),yYe=r(R5e," \u2014 "),qS=n(R5e,"A",{href:!0});var rzr=s(qS);LYe=r(rzr,"XLMRobertaConfig"),rzr.forEach(t),xYe=r(R5e," (XLM-RoBERTa model)"),R5e.forEach(t),$Ye=i(y),_g=n(y,"LI",{});var P5e=s(_g);Qre=n(P5e,"STRONG",{});var tzr=s(Qre);kYe=r(tzr,"xlm-roberta-xl"),tzr.forEach(t),SYe=r(P5e," \u2014 "),NS=n(P5e,"A",{href:!0});var azr=s(NS);RYe=r(azr,"XLMRobertaXLConfig"),azr.forEach(t),PYe=r(P5e," (XLM-RoBERTa-XL model)"),P5e.forEach(t),BYe=i(y),bg=n(y,"LI",{});var B5e=s(bg);Hre=n(B5e,"STRONG",{});var nzr=s(Hre);IYe=r(nzr,"xlnet"),nzr.forEach(t),qYe=r(B5e," \u2014 "),jS=n(B5e,"A",{href:!0});var szr=s(jS);NYe=r(szr,"XLNetConfig"),szr.forEach(t),jYe=r(B5e," (XLNet model)"),B5e.forEach(t),DYe=i(y),vg=n(y,"LI",{});var I5e=s(vg);Ure=n(I5e,"STRONG",{});var lzr=s(Ure);GYe=r(lzr,"yolos"),lzr.forEach(t),OYe=r(I5e," \u2014 "),DS=n(I5e,"A",{href:!0});var izr=s(DS);VYe=r(izr,"YolosConfig"),izr.forEach(t),XYe=r(I5e," (YOLOS model)"),I5e.forEach(t),zYe=i(y),Fg=n(y,"LI",{});var q5e=s(Fg);Jre=n(q5e,"STRONG",{});var dzr=s(Jre);WYe=r(dzr,"yoso"),dzr.forEach(t),QYe=r(q5e," \u2014 "),GS=n(q5e,"A",{href:!0});var czr=s(GS);HYe=r(czr,"YosoConfig"),czr.forEach(t),UYe=r(q5e," (YOSO model)"),q5e.forEach(t),y.forEach(t),JYe=i(ot),T(Tg.$$.fragment,ot),ot.forEach(t),YYe=i(et),Mg=n(et,"DIV",{class:!0});var Fje=s(Mg);T(wA.$$.fragment,Fje),KYe=i(Fje),Yre=n(Fje,"P",{});var fzr=s(Yre);ZYe=r(fzr,"Register a new configuration for this class."),fzr.forEach(t),Fje.forEach(t),et.forEach(t),Eqe=i(f),Ti=n(f,"H2",{class:!0});var Tje=s(Ti);Eg=n(Tje,"A",{id:!0,class:!0,href:!0});var mzr=s(Eg);Kre=n(mzr,"SPAN",{});var gzr=s(Kre);T(AA.$$.fragment,gzr),gzr.forEach(t),mzr.forEach(t),eKe=i(Tje),Zre=n(Tje,"SPAN",{});var hzr=s(Zre);oKe=r(hzr,"AutoTokenizer"),hzr.forEach(t),Tje.forEach(t),Cqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(yA.$$.fragment,qs),rKe=i(qs),LA=n(qs,"P",{});var Mje=s(LA);tKe=r(Mje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),OS=n(Mje,"A",{href:!0});var pzr=s(OS);aKe=r(pzr,"AutoTokenizer.from_pretrained()"),pzr.forEach(t),nKe=r(Mje," class method."),Mje.forEach(t),sKe=i(qs),xA=n(qs,"P",{});var Eje=s(xA);lKe=r(Eje,"This class cannot be instantiated directly using "),ete=n(Eje,"CODE",{});var uzr=s(ete);iKe=r(uzr,"__init__()"),uzr.forEach(t),dKe=r(Eje," (throws an error)."),Eje.forEach(t),cKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T($A.$$.fragment,Ns),fKe=i(Ns),ote=n(Ns,"P",{});var _zr=s(ote);mKe=r(_zr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_zr.forEach(t),gKe=i(Ns),Aa=n(Ns,"P",{});var F3=s(Aa);hKe=r(F3,"The tokenizer class to instantiate is selected based on the "),rte=n(F3,"CODE",{});var bzr=s(rte);pKe=r(bzr,"model_type"),bzr.forEach(t),uKe=r(F3,` property of the config object (either
passed as an argument or loaded from `),tte=n(F3,"CODE",{});var vzr=s(tte);_Ke=r(vzr,"pretrained_model_name_or_path"),vzr.forEach(t),bKe=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ate=n(F3,"CODE",{});var Fzr=s(ate);vKe=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),FKe=r(F3,":"),F3.forEach(t),TKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var kx=s(Sn);nte=n(kx,"STRONG",{});var Tzr=s(nte);MKe=r(Tzr,"albert"),Tzr.forEach(t),EKe=r(kx," \u2014 "),VS=n(kx,"A",{href:!0});var Mzr=s(VS);CKe=r(Mzr,"AlbertTokenizer"),Mzr.forEach(t),wKe=r(kx," or "),XS=n(kx,"A",{href:!0});var Ezr=s(XS);AKe=r(Ezr,"AlbertTokenizerFast"),Ezr.forEach(t),yKe=r(kx," (ALBERT model)"),kx.forEach(t),LKe=i(S),Rn=n(S,"LI",{});var Sx=s(Rn);ste=n(Sx,"STRONG",{});var Czr=s(ste);xKe=r(Czr,"bart"),Czr.forEach(t),$Ke=r(Sx," \u2014 "),zS=n(Sx,"A",{href:!0});var wzr=s(zS);kKe=r(wzr,"BartTokenizer"),wzr.forEach(t),SKe=r(Sx," or "),WS=n(Sx,"A",{href:!0});var Azr=s(WS);RKe=r(Azr,"BartTokenizerFast"),Azr.forEach(t),PKe=r(Sx," (BART model)"),Sx.forEach(t),BKe=i(S),Pn=n(S,"LI",{});var Rx=s(Pn);lte=n(Rx,"STRONG",{});var yzr=s(lte);IKe=r(yzr,"barthez"),yzr.forEach(t),qKe=r(Rx," \u2014 "),QS=n(Rx,"A",{href:!0});var Lzr=s(QS);NKe=r(Lzr,"BarthezTokenizer"),Lzr.forEach(t),jKe=r(Rx," or "),HS=n(Rx,"A",{href:!0});var xzr=s(HS);DKe=r(xzr,"BarthezTokenizerFast"),xzr.forEach(t),GKe=r(Rx," (BARThez model)"),Rx.forEach(t),OKe=i(S),Cg=n(S,"LI",{});var N5e=s(Cg);ite=n(N5e,"STRONG",{});var $zr=s(ite);VKe=r($zr,"bartpho"),$zr.forEach(t),XKe=r(N5e," \u2014 "),US=n(N5e,"A",{href:!0});var kzr=s(US);zKe=r(kzr,"BartphoTokenizer"),kzr.forEach(t),WKe=r(N5e," (BARTpho model)"),N5e.forEach(t),QKe=i(S),Bn=n(S,"LI",{});var Px=s(Bn);dte=n(Px,"STRONG",{});var Szr=s(dte);HKe=r(Szr,"bert"),Szr.forEach(t),UKe=r(Px," \u2014 "),JS=n(Px,"A",{href:!0});var Rzr=s(JS);JKe=r(Rzr,"BertTokenizer"),Rzr.forEach(t),YKe=r(Px," or "),YS=n(Px,"A",{href:!0});var Pzr=s(YS);KKe=r(Pzr,"BertTokenizerFast"),Pzr.forEach(t),ZKe=r(Px," (BERT model)"),Px.forEach(t),eZe=i(S),wg=n(S,"LI",{});var j5e=s(wg);cte=n(j5e,"STRONG",{});var Bzr=s(cte);oZe=r(Bzr,"bert-generation"),Bzr.forEach(t),rZe=r(j5e," \u2014 "),KS=n(j5e,"A",{href:!0});var Izr=s(KS);tZe=r(Izr,"BertGenerationTokenizer"),Izr.forEach(t),aZe=r(j5e," (Bert Generation model)"),j5e.forEach(t),nZe=i(S),Ag=n(S,"LI",{});var D5e=s(Ag);fte=n(D5e,"STRONG",{});var qzr=s(fte);sZe=r(qzr,"bert-japanese"),qzr.forEach(t),lZe=r(D5e," \u2014 "),ZS=n(D5e,"A",{href:!0});var Nzr=s(ZS);iZe=r(Nzr,"BertJapaneseTokenizer"),Nzr.forEach(t),dZe=r(D5e," (BertJapanese model)"),D5e.forEach(t),cZe=i(S),yg=n(S,"LI",{});var G5e=s(yg);mte=n(G5e,"STRONG",{});var jzr=s(mte);fZe=r(jzr,"bertweet"),jzr.forEach(t),mZe=r(G5e," \u2014 "),eR=n(G5e,"A",{href:!0});var Dzr=s(eR);gZe=r(Dzr,"BertweetTokenizer"),Dzr.forEach(t),hZe=r(G5e," (Bertweet model)"),G5e.forEach(t),pZe=i(S),In=n(S,"LI",{});var Bx=s(In);gte=n(Bx,"STRONG",{});var Gzr=s(gte);uZe=r(Gzr,"big_bird"),Gzr.forEach(t),_Ze=r(Bx," \u2014 "),oR=n(Bx,"A",{href:!0});var Ozr=s(oR);bZe=r(Ozr,"BigBirdTokenizer"),Ozr.forEach(t),vZe=r(Bx," or "),rR=n(Bx,"A",{href:!0});var Vzr=s(rR);FZe=r(Vzr,"BigBirdTokenizerFast"),Vzr.forEach(t),TZe=r(Bx," (BigBird model)"),Bx.forEach(t),MZe=i(S),qn=n(S,"LI",{});var Ix=s(qn);hte=n(Ix,"STRONG",{});var Xzr=s(hte);EZe=r(Xzr,"bigbird_pegasus"),Xzr.forEach(t),CZe=r(Ix," \u2014 "),tR=n(Ix,"A",{href:!0});var zzr=s(tR);wZe=r(zzr,"PegasusTokenizer"),zzr.forEach(t),AZe=r(Ix," or "),aR=n(Ix,"A",{href:!0});var Wzr=s(aR);yZe=r(Wzr,"PegasusTokenizerFast"),Wzr.forEach(t),LZe=r(Ix," (BigBirdPegasus model)"),Ix.forEach(t),xZe=i(S),Nn=n(S,"LI",{});var qx=s(Nn);pte=n(qx,"STRONG",{});var Qzr=s(pte);$Ze=r(Qzr,"blenderbot"),Qzr.forEach(t),kZe=r(qx," \u2014 "),nR=n(qx,"A",{href:!0});var Hzr=s(nR);SZe=r(Hzr,"BlenderbotTokenizer"),Hzr.forEach(t),RZe=r(qx," or "),sR=n(qx,"A",{href:!0});var Uzr=s(sR);PZe=r(Uzr,"BlenderbotTokenizerFast"),Uzr.forEach(t),BZe=r(qx," (Blenderbot model)"),qx.forEach(t),IZe=i(S),Lg=n(S,"LI",{});var O5e=s(Lg);ute=n(O5e,"STRONG",{});var Jzr=s(ute);qZe=r(Jzr,"blenderbot-small"),Jzr.forEach(t),NZe=r(O5e," \u2014 "),lR=n(O5e,"A",{href:!0});var Yzr=s(lR);jZe=r(Yzr,"BlenderbotSmallTokenizer"),Yzr.forEach(t),DZe=r(O5e," (BlenderbotSmall model)"),O5e.forEach(t),GZe=i(S),xg=n(S,"LI",{});var V5e=s(xg);_te=n(V5e,"STRONG",{});var Kzr=s(_te);OZe=r(Kzr,"byt5"),Kzr.forEach(t),VZe=r(V5e," \u2014 "),iR=n(V5e,"A",{href:!0});var Zzr=s(iR);XZe=r(Zzr,"ByT5Tokenizer"),Zzr.forEach(t),zZe=r(V5e," (ByT5 model)"),V5e.forEach(t),WZe=i(S),jn=n(S,"LI",{});var Nx=s(jn);bte=n(Nx,"STRONG",{});var eWr=s(bte);QZe=r(eWr,"camembert"),eWr.forEach(t),HZe=r(Nx," \u2014 "),dR=n(Nx,"A",{href:!0});var oWr=s(dR);UZe=r(oWr,"CamembertTokenizer"),oWr.forEach(t),JZe=r(Nx," or "),cR=n(Nx,"A",{href:!0});var rWr=s(cR);YZe=r(rWr,"CamembertTokenizerFast"),rWr.forEach(t),KZe=r(Nx," (CamemBERT model)"),Nx.forEach(t),ZZe=i(S),$g=n(S,"LI",{});var X5e=s($g);vte=n(X5e,"STRONG",{});var tWr=s(vte);eeo=r(tWr,"canine"),tWr.forEach(t),oeo=r(X5e," \u2014 "),fR=n(X5e,"A",{href:!0});var aWr=s(fR);reo=r(aWr,"CanineTokenizer"),aWr.forEach(t),teo=r(X5e," (Canine model)"),X5e.forEach(t),aeo=i(S),Dn=n(S,"LI",{});var jx=s(Dn);Fte=n(jx,"STRONG",{});var nWr=s(Fte);neo=r(nWr,"clip"),nWr.forEach(t),seo=r(jx," \u2014 "),mR=n(jx,"A",{href:!0});var sWr=s(mR);leo=r(sWr,"CLIPTokenizer"),sWr.forEach(t),ieo=r(jx," or "),gR=n(jx,"A",{href:!0});var lWr=s(gR);deo=r(lWr,"CLIPTokenizerFast"),lWr.forEach(t),ceo=r(jx," (CLIP model)"),jx.forEach(t),feo=i(S),Gn=n(S,"LI",{});var Dx=s(Gn);Tte=n(Dx,"STRONG",{});var iWr=s(Tte);meo=r(iWr,"convbert"),iWr.forEach(t),geo=r(Dx," \u2014 "),hR=n(Dx,"A",{href:!0});var dWr=s(hR);heo=r(dWr,"ConvBertTokenizer"),dWr.forEach(t),peo=r(Dx," or "),pR=n(Dx,"A",{href:!0});var cWr=s(pR);ueo=r(cWr,"ConvBertTokenizerFast"),cWr.forEach(t),_eo=r(Dx," (ConvBERT model)"),Dx.forEach(t),beo=i(S),On=n(S,"LI",{});var Gx=s(On);Mte=n(Gx,"STRONG",{});var fWr=s(Mte);veo=r(fWr,"cpm"),fWr.forEach(t),Feo=r(Gx," \u2014 "),uR=n(Gx,"A",{href:!0});var mWr=s(uR);Teo=r(mWr,"CpmTokenizer"),mWr.forEach(t),Meo=r(Gx," or "),_R=n(Gx,"A",{href:!0});var gWr=s(_R);Eeo=r(gWr,"CpmTokenizerFast"),gWr.forEach(t),Ceo=r(Gx," (CPM model)"),Gx.forEach(t),weo=i(S),kg=n(S,"LI",{});var z5e=s(kg);Ete=n(z5e,"STRONG",{});var hWr=s(Ete);Aeo=r(hWr,"ctrl"),hWr.forEach(t),yeo=r(z5e," \u2014 "),bR=n(z5e,"A",{href:!0});var pWr=s(bR);Leo=r(pWr,"CTRLTokenizer"),pWr.forEach(t),xeo=r(z5e," (CTRL model)"),z5e.forEach(t),$eo=i(S),Vn=n(S,"LI",{});var Ox=s(Vn);Cte=n(Ox,"STRONG",{});var uWr=s(Cte);keo=r(uWr,"data2vec-text"),uWr.forEach(t),Seo=r(Ox," \u2014 "),vR=n(Ox,"A",{href:!0});var _Wr=s(vR);Reo=r(_Wr,"RobertaTokenizer"),_Wr.forEach(t),Peo=r(Ox," or "),FR=n(Ox,"A",{href:!0});var bWr=s(FR);Beo=r(bWr,"RobertaTokenizerFast"),bWr.forEach(t),Ieo=r(Ox," (Data2VecText model)"),Ox.forEach(t),qeo=i(S),Xn=n(S,"LI",{});var Vx=s(Xn);wte=n(Vx,"STRONG",{});var vWr=s(wte);Neo=r(vWr,"deberta"),vWr.forEach(t),jeo=r(Vx," \u2014 "),TR=n(Vx,"A",{href:!0});var FWr=s(TR);Deo=r(FWr,"DebertaTokenizer"),FWr.forEach(t),Geo=r(Vx," or "),MR=n(Vx,"A",{href:!0});var TWr=s(MR);Oeo=r(TWr,"DebertaTokenizerFast"),TWr.forEach(t),Veo=r(Vx," (DeBERTa model)"),Vx.forEach(t),Xeo=i(S),zn=n(S,"LI",{});var Xx=s(zn);Ate=n(Xx,"STRONG",{});var MWr=s(Ate);zeo=r(MWr,"deberta-v2"),MWr.forEach(t),Weo=r(Xx," \u2014 "),ER=n(Xx,"A",{href:!0});var EWr=s(ER);Qeo=r(EWr,"DebertaV2Tokenizer"),EWr.forEach(t),Heo=r(Xx," or "),CR=n(Xx,"A",{href:!0});var CWr=s(CR);Ueo=r(CWr,"DebertaV2TokenizerFast"),CWr.forEach(t),Jeo=r(Xx," (DeBERTa-v2 model)"),Xx.forEach(t),Yeo=i(S),Wn=n(S,"LI",{});var zx=s(Wn);yte=n(zx,"STRONG",{});var wWr=s(yte);Keo=r(wWr,"distilbert"),wWr.forEach(t),Zeo=r(zx," \u2014 "),wR=n(zx,"A",{href:!0});var AWr=s(wR);eoo=r(AWr,"DistilBertTokenizer"),AWr.forEach(t),ooo=r(zx," or "),AR=n(zx,"A",{href:!0});var yWr=s(AR);roo=r(yWr,"DistilBertTokenizerFast"),yWr.forEach(t),too=r(zx," (DistilBERT model)"),zx.forEach(t),aoo=i(S),Qn=n(S,"LI",{});var Wx=s(Qn);Lte=n(Wx,"STRONG",{});var LWr=s(Lte);noo=r(LWr,"dpr"),LWr.forEach(t),soo=r(Wx," \u2014 "),yR=n(Wx,"A",{href:!0});var xWr=s(yR);loo=r(xWr,"DPRQuestionEncoderTokenizer"),xWr.forEach(t),ioo=r(Wx," or "),LR=n(Wx,"A",{href:!0});var $Wr=s(LR);doo=r($Wr,"DPRQuestionEncoderTokenizerFast"),$Wr.forEach(t),coo=r(Wx," (DPR model)"),Wx.forEach(t),foo=i(S),Hn=n(S,"LI",{});var Qx=s(Hn);xte=n(Qx,"STRONG",{});var kWr=s(xte);moo=r(kWr,"electra"),kWr.forEach(t),goo=r(Qx," \u2014 "),xR=n(Qx,"A",{href:!0});var SWr=s(xR);hoo=r(SWr,"ElectraTokenizer"),SWr.forEach(t),poo=r(Qx," or "),$R=n(Qx,"A",{href:!0});var RWr=s($R);uoo=r(RWr,"ElectraTokenizerFast"),RWr.forEach(t),_oo=r(Qx," (ELECTRA model)"),Qx.forEach(t),boo=i(S),Sg=n(S,"LI",{});var W5e=s(Sg);$te=n(W5e,"STRONG",{});var PWr=s($te);voo=r(PWr,"flaubert"),PWr.forEach(t),Foo=r(W5e," \u2014 "),kR=n(W5e,"A",{href:!0});var BWr=s(kR);Too=r(BWr,"FlaubertTokenizer"),BWr.forEach(t),Moo=r(W5e," (FlauBERT model)"),W5e.forEach(t),Eoo=i(S),Un=n(S,"LI",{});var Hx=s(Un);kte=n(Hx,"STRONG",{});var IWr=s(kte);Coo=r(IWr,"fnet"),IWr.forEach(t),woo=r(Hx," \u2014 "),SR=n(Hx,"A",{href:!0});var qWr=s(SR);Aoo=r(qWr,"FNetTokenizer"),qWr.forEach(t),yoo=r(Hx," or "),RR=n(Hx,"A",{href:!0});var NWr=s(RR);Loo=r(NWr,"FNetTokenizerFast"),NWr.forEach(t),xoo=r(Hx," (FNet model)"),Hx.forEach(t),$oo=i(S),Rg=n(S,"LI",{});var Q5e=s(Rg);Ste=n(Q5e,"STRONG",{});var jWr=s(Ste);koo=r(jWr,"fsmt"),jWr.forEach(t),Soo=r(Q5e," \u2014 "),PR=n(Q5e,"A",{href:!0});var DWr=s(PR);Roo=r(DWr,"FSMTTokenizer"),DWr.forEach(t),Poo=r(Q5e," (FairSeq Machine-Translation model)"),Q5e.forEach(t),Boo=i(S),Jn=n(S,"LI",{});var Ux=s(Jn);Rte=n(Ux,"STRONG",{});var GWr=s(Rte);Ioo=r(GWr,"funnel"),GWr.forEach(t),qoo=r(Ux," \u2014 "),BR=n(Ux,"A",{href:!0});var OWr=s(BR);Noo=r(OWr,"FunnelTokenizer"),OWr.forEach(t),joo=r(Ux," or "),IR=n(Ux,"A",{href:!0});var VWr=s(IR);Doo=r(VWr,"FunnelTokenizerFast"),VWr.forEach(t),Goo=r(Ux," (Funnel Transformer model)"),Ux.forEach(t),Ooo=i(S),Yn=n(S,"LI",{});var Jx=s(Yn);Pte=n(Jx,"STRONG",{});var XWr=s(Pte);Voo=r(XWr,"gpt2"),XWr.forEach(t),Xoo=r(Jx," \u2014 "),qR=n(Jx,"A",{href:!0});var zWr=s(qR);zoo=r(zWr,"GPT2Tokenizer"),zWr.forEach(t),Woo=r(Jx," or "),NR=n(Jx,"A",{href:!0});var WWr=s(NR);Qoo=r(WWr,"GPT2TokenizerFast"),WWr.forEach(t),Hoo=r(Jx," (OpenAI GPT-2 model)"),Jx.forEach(t),Uoo=i(S),Kn=n(S,"LI",{});var Yx=s(Kn);Bte=n(Yx,"STRONG",{});var QWr=s(Bte);Joo=r(QWr,"gpt_neo"),QWr.forEach(t),Yoo=r(Yx," \u2014 "),jR=n(Yx,"A",{href:!0});var HWr=s(jR);Koo=r(HWr,"GPT2Tokenizer"),HWr.forEach(t),Zoo=r(Yx," or "),DR=n(Yx,"A",{href:!0});var UWr=s(DR);ero=r(UWr,"GPT2TokenizerFast"),UWr.forEach(t),oro=r(Yx," (GPT Neo model)"),Yx.forEach(t),rro=i(S),Zn=n(S,"LI",{});var Kx=s(Zn);Ite=n(Kx,"STRONG",{});var JWr=s(Ite);tro=r(JWr,"gptj"),JWr.forEach(t),aro=r(Kx," \u2014 "),GR=n(Kx,"A",{href:!0});var YWr=s(GR);nro=r(YWr,"GPT2Tokenizer"),YWr.forEach(t),sro=r(Kx," or "),OR=n(Kx,"A",{href:!0});var KWr=s(OR);lro=r(KWr,"GPT2TokenizerFast"),KWr.forEach(t),iro=r(Kx," (GPT-J model)"),Kx.forEach(t),dro=i(S),es=n(S,"LI",{});var Zx=s(es);qte=n(Zx,"STRONG",{});var ZWr=s(qte);cro=r(ZWr,"herbert"),ZWr.forEach(t),fro=r(Zx," \u2014 "),VR=n(Zx,"A",{href:!0});var eQr=s(VR);mro=r(eQr,"HerbertTokenizer"),eQr.forEach(t),gro=r(Zx," or "),XR=n(Zx,"A",{href:!0});var oQr=s(XR);hro=r(oQr,"HerbertTokenizerFast"),oQr.forEach(t),pro=r(Zx," (HerBERT model)"),Zx.forEach(t),uro=i(S),Pg=n(S,"LI",{});var H5e=s(Pg);Nte=n(H5e,"STRONG",{});var rQr=s(Nte);_ro=r(rQr,"hubert"),rQr.forEach(t),bro=r(H5e," \u2014 "),zR=n(H5e,"A",{href:!0});var tQr=s(zR);vro=r(tQr,"Wav2Vec2CTCTokenizer"),tQr.forEach(t),Fro=r(H5e," (Hubert model)"),H5e.forEach(t),Tro=i(S),os=n(S,"LI",{});var e$=s(os);jte=n(e$,"STRONG",{});var aQr=s(jte);Mro=r(aQr,"ibert"),aQr.forEach(t),Ero=r(e$," \u2014 "),WR=n(e$,"A",{href:!0});var nQr=s(WR);Cro=r(nQr,"RobertaTokenizer"),nQr.forEach(t),wro=r(e$," or "),QR=n(e$,"A",{href:!0});var sQr=s(QR);Aro=r(sQr,"RobertaTokenizerFast"),sQr.forEach(t),yro=r(e$," (I-BERT model)"),e$.forEach(t),Lro=i(S),rs=n(S,"LI",{});var o$=s(rs);Dte=n(o$,"STRONG",{});var lQr=s(Dte);xro=r(lQr,"layoutlm"),lQr.forEach(t),$ro=r(o$," \u2014 "),HR=n(o$,"A",{href:!0});var iQr=s(HR);kro=r(iQr,"LayoutLMTokenizer"),iQr.forEach(t),Sro=r(o$," or "),UR=n(o$,"A",{href:!0});var dQr=s(UR);Rro=r(dQr,"LayoutLMTokenizerFast"),dQr.forEach(t),Pro=r(o$," (LayoutLM model)"),o$.forEach(t),Bro=i(S),ts=n(S,"LI",{});var r$=s(ts);Gte=n(r$,"STRONG",{});var cQr=s(Gte);Iro=r(cQr,"layoutlmv2"),cQr.forEach(t),qro=r(r$," \u2014 "),JR=n(r$,"A",{href:!0});var fQr=s(JR);Nro=r(fQr,"LayoutLMv2Tokenizer"),fQr.forEach(t),jro=r(r$," or "),YR=n(r$,"A",{href:!0});var mQr=s(YR);Dro=r(mQr,"LayoutLMv2TokenizerFast"),mQr.forEach(t),Gro=r(r$," (LayoutLMv2 model)"),r$.forEach(t),Oro=i(S),as=n(S,"LI",{});var t$=s(as);Ote=n(t$,"STRONG",{});var gQr=s(Ote);Vro=r(gQr,"layoutlmv3"),gQr.forEach(t),Xro=r(t$," \u2014 "),KR=n(t$,"A",{href:!0});var hQr=s(KR);zro=r(hQr,"LayoutLMv3Tokenizer"),hQr.forEach(t),Wro=r(t$," or "),ZR=n(t$,"A",{href:!0});var pQr=s(ZR);Qro=r(pQr,"LayoutLMv3TokenizerFast"),pQr.forEach(t),Hro=r(t$," (LayoutLMv3 model)"),t$.forEach(t),Uro=i(S),ns=n(S,"LI",{});var a$=s(ns);Vte=n(a$,"STRONG",{});var uQr=s(Vte);Jro=r(uQr,"layoutxlm"),uQr.forEach(t),Yro=r(a$," \u2014 "),eP=n(a$,"A",{href:!0});var _Qr=s(eP);Kro=r(_Qr,"LayoutXLMTokenizer"),_Qr.forEach(t),Zro=r(a$," or "),oP=n(a$,"A",{href:!0});var bQr=s(oP);eto=r(bQr,"LayoutXLMTokenizerFast"),bQr.forEach(t),oto=r(a$," (LayoutXLM model)"),a$.forEach(t),rto=i(S),ss=n(S,"LI",{});var n$=s(ss);Xte=n(n$,"STRONG",{});var vQr=s(Xte);tto=r(vQr,"led"),vQr.forEach(t),ato=r(n$," \u2014 "),rP=n(n$,"A",{href:!0});var FQr=s(rP);nto=r(FQr,"LEDTokenizer"),FQr.forEach(t),sto=r(n$," or "),tP=n(n$,"A",{href:!0});var TQr=s(tP);lto=r(TQr,"LEDTokenizerFast"),TQr.forEach(t),ito=r(n$," (LED model)"),n$.forEach(t),dto=i(S),ls=n(S,"LI",{});var s$=s(ls);zte=n(s$,"STRONG",{});var MQr=s(zte);cto=r(MQr,"longformer"),MQr.forEach(t),fto=r(s$," \u2014 "),aP=n(s$,"A",{href:!0});var EQr=s(aP);mto=r(EQr,"LongformerTokenizer"),EQr.forEach(t),gto=r(s$," or "),nP=n(s$,"A",{href:!0});var CQr=s(nP);hto=r(CQr,"LongformerTokenizerFast"),CQr.forEach(t),pto=r(s$," (Longformer model)"),s$.forEach(t),uto=i(S),Bg=n(S,"LI",{});var U5e=s(Bg);Wte=n(U5e,"STRONG",{});var wQr=s(Wte);_to=r(wQr,"luke"),wQr.forEach(t),bto=r(U5e," \u2014 "),sP=n(U5e,"A",{href:!0});var AQr=s(sP);vto=r(AQr,"LukeTokenizer"),AQr.forEach(t),Fto=r(U5e," (LUKE model)"),U5e.forEach(t),Tto=i(S),is=n(S,"LI",{});var l$=s(is);Qte=n(l$,"STRONG",{});var yQr=s(Qte);Mto=r(yQr,"lxmert"),yQr.forEach(t),Eto=r(l$," \u2014 "),lP=n(l$,"A",{href:!0});var LQr=s(lP);Cto=r(LQr,"LxmertTokenizer"),LQr.forEach(t),wto=r(l$," or "),iP=n(l$,"A",{href:!0});var xQr=s(iP);Ato=r(xQr,"LxmertTokenizerFast"),xQr.forEach(t),yto=r(l$," (LXMERT model)"),l$.forEach(t),Lto=i(S),Ig=n(S,"LI",{});var J5e=s(Ig);Hte=n(J5e,"STRONG",{});var $Qr=s(Hte);xto=r($Qr,"m2m_100"),$Qr.forEach(t),$to=r(J5e," \u2014 "),dP=n(J5e,"A",{href:!0});var kQr=s(dP);kto=r(kQr,"M2M100Tokenizer"),kQr.forEach(t),Sto=r(J5e," (M2M100 model)"),J5e.forEach(t),Rto=i(S),qg=n(S,"LI",{});var Y5e=s(qg);Ute=n(Y5e,"STRONG",{});var SQr=s(Ute);Pto=r(SQr,"marian"),SQr.forEach(t),Bto=r(Y5e," \u2014 "),cP=n(Y5e,"A",{href:!0});var RQr=s(cP);Ito=r(RQr,"MarianTokenizer"),RQr.forEach(t),qto=r(Y5e," (Marian model)"),Y5e.forEach(t),Nto=i(S),ds=n(S,"LI",{});var i$=s(ds);Jte=n(i$,"STRONG",{});var PQr=s(Jte);jto=r(PQr,"mbart"),PQr.forEach(t),Dto=r(i$," \u2014 "),fP=n(i$,"A",{href:!0});var BQr=s(fP);Gto=r(BQr,"MBartTokenizer"),BQr.forEach(t),Oto=r(i$," or "),mP=n(i$,"A",{href:!0});var IQr=s(mP);Vto=r(IQr,"MBartTokenizerFast"),IQr.forEach(t),Xto=r(i$," (mBART model)"),i$.forEach(t),zto=i(S),cs=n(S,"LI",{});var d$=s(cs);Yte=n(d$,"STRONG",{});var qQr=s(Yte);Wto=r(qQr,"mbart50"),qQr.forEach(t),Qto=r(d$," \u2014 "),gP=n(d$,"A",{href:!0});var NQr=s(gP);Hto=r(NQr,"MBart50Tokenizer"),NQr.forEach(t),Uto=r(d$," or "),hP=n(d$,"A",{href:!0});var jQr=s(hP);Jto=r(jQr,"MBart50TokenizerFast"),jQr.forEach(t),Yto=r(d$," (mBART-50 model)"),d$.forEach(t),Kto=i(S),fs=n(S,"LI",{});var c$=s(fs);Kte=n(c$,"STRONG",{});var DQr=s(Kte);Zto=r(DQr,"megatron-bert"),DQr.forEach(t),eao=r(c$," \u2014 "),pP=n(c$,"A",{href:!0});var GQr=s(pP);oao=r(GQr,"BertTokenizer"),GQr.forEach(t),rao=r(c$," or "),uP=n(c$,"A",{href:!0});var OQr=s(uP);tao=r(OQr,"BertTokenizerFast"),OQr.forEach(t),aao=r(c$," (MegatronBert model)"),c$.forEach(t),nao=i(S),Ng=n(S,"LI",{});var K5e=s(Ng);Zte=n(K5e,"STRONG",{});var VQr=s(Zte);sao=r(VQr,"mluke"),VQr.forEach(t),lao=r(K5e," \u2014 "),_P=n(K5e,"A",{href:!0});var XQr=s(_P);iao=r(XQr,"MLukeTokenizer"),XQr.forEach(t),dao=r(K5e," (mLUKE model)"),K5e.forEach(t),cao=i(S),ms=n(S,"LI",{});var f$=s(ms);eae=n(f$,"STRONG",{});var zQr=s(eae);fao=r(zQr,"mobilebert"),zQr.forEach(t),mao=r(f$," \u2014 "),bP=n(f$,"A",{href:!0});var WQr=s(bP);gao=r(WQr,"MobileBertTokenizer"),WQr.forEach(t),hao=r(f$," or "),vP=n(f$,"A",{href:!0});var QQr=s(vP);pao=r(QQr,"MobileBertTokenizerFast"),QQr.forEach(t),uao=r(f$," (MobileBERT model)"),f$.forEach(t),_ao=i(S),gs=n(S,"LI",{});var m$=s(gs);oae=n(m$,"STRONG",{});var HQr=s(oae);bao=r(HQr,"mpnet"),HQr.forEach(t),vao=r(m$," \u2014 "),FP=n(m$,"A",{href:!0});var UQr=s(FP);Fao=r(UQr,"MPNetTokenizer"),UQr.forEach(t),Tao=r(m$," or "),TP=n(m$,"A",{href:!0});var JQr=s(TP);Mao=r(JQr,"MPNetTokenizerFast"),JQr.forEach(t),Eao=r(m$," (MPNet model)"),m$.forEach(t),Cao=i(S),hs=n(S,"LI",{});var g$=s(hs);rae=n(g$,"STRONG",{});var YQr=s(rae);wao=r(YQr,"mt5"),YQr.forEach(t),Aao=r(g$," \u2014 "),MP=n(g$,"A",{href:!0});var KQr=s(MP);yao=r(KQr,"MT5Tokenizer"),KQr.forEach(t),Lao=r(g$," or "),EP=n(g$,"A",{href:!0});var ZQr=s(EP);xao=r(ZQr,"MT5TokenizerFast"),ZQr.forEach(t),$ao=r(g$," (mT5 model)"),g$.forEach(t),kao=i(S),ps=n(S,"LI",{});var h$=s(ps);tae=n(h$,"STRONG",{});var eHr=s(tae);Sao=r(eHr,"nystromformer"),eHr.forEach(t),Rao=r(h$," \u2014 "),CP=n(h$,"A",{href:!0});var oHr=s(CP);Pao=r(oHr,"AlbertTokenizer"),oHr.forEach(t),Bao=r(h$," or "),wP=n(h$,"A",{href:!0});var rHr=s(wP);Iao=r(rHr,"AlbertTokenizerFast"),rHr.forEach(t),qao=r(h$," (Nystromformer model)"),h$.forEach(t),Nao=i(S),us=n(S,"LI",{});var p$=s(us);aae=n(p$,"STRONG",{});var tHr=s(aae);jao=r(tHr,"openai-gpt"),tHr.forEach(t),Dao=r(p$," \u2014 "),AP=n(p$,"A",{href:!0});var aHr=s(AP);Gao=r(aHr,"OpenAIGPTTokenizer"),aHr.forEach(t),Oao=r(p$," or "),yP=n(p$,"A",{href:!0});var nHr=s(yP);Vao=r(nHr,"OpenAIGPTTokenizerFast"),nHr.forEach(t),Xao=r(p$," (OpenAI GPT model)"),p$.forEach(t),zao=i(S),jg=n(S,"LI",{});var Z5e=s(jg);nae=n(Z5e,"STRONG",{});var sHr=s(nae);Wao=r(sHr,"opt"),sHr.forEach(t),Qao=r(Z5e," \u2014 "),LP=n(Z5e,"A",{href:!0});var lHr=s(LP);Hao=r(lHr,"GPT2Tokenizer"),lHr.forEach(t),Uao=r(Z5e," (OPT model)"),Z5e.forEach(t),Jao=i(S),_s=n(S,"LI",{});var u$=s(_s);sae=n(u$,"STRONG",{});var iHr=s(sae);Yao=r(iHr,"pegasus"),iHr.forEach(t),Kao=r(u$," \u2014 "),xP=n(u$,"A",{href:!0});var dHr=s(xP);Zao=r(dHr,"PegasusTokenizer"),dHr.forEach(t),eno=r(u$," or "),$P=n(u$,"A",{href:!0});var cHr=s($P);ono=r(cHr,"PegasusTokenizerFast"),cHr.forEach(t),rno=r(u$," (Pegasus model)"),u$.forEach(t),tno=i(S),Dg=n(S,"LI",{});var e3e=s(Dg);lae=n(e3e,"STRONG",{});var fHr=s(lae);ano=r(fHr,"perceiver"),fHr.forEach(t),nno=r(e3e," \u2014 "),kP=n(e3e,"A",{href:!0});var mHr=s(kP);sno=r(mHr,"PerceiverTokenizer"),mHr.forEach(t),lno=r(e3e," (Perceiver model)"),e3e.forEach(t),ino=i(S),Gg=n(S,"LI",{});var o3e=s(Gg);iae=n(o3e,"STRONG",{});var gHr=s(iae);dno=r(gHr,"phobert"),gHr.forEach(t),cno=r(o3e," \u2014 "),SP=n(o3e,"A",{href:!0});var hHr=s(SP);fno=r(hHr,"PhobertTokenizer"),hHr.forEach(t),mno=r(o3e," (PhoBERT model)"),o3e.forEach(t),gno=i(S),Og=n(S,"LI",{});var r3e=s(Og);dae=n(r3e,"STRONG",{});var pHr=s(dae);hno=r(pHr,"plbart"),pHr.forEach(t),pno=r(r3e," \u2014 "),RP=n(r3e,"A",{href:!0});var uHr=s(RP);uno=r(uHr,"PLBartTokenizer"),uHr.forEach(t),_no=r(r3e," (PLBart model)"),r3e.forEach(t),bno=i(S),Vg=n(S,"LI",{});var t3e=s(Vg);cae=n(t3e,"STRONG",{});var _Hr=s(cae);vno=r(_Hr,"prophetnet"),_Hr.forEach(t),Fno=r(t3e," \u2014 "),PP=n(t3e,"A",{href:!0});var bHr=s(PP);Tno=r(bHr,"ProphetNetTokenizer"),bHr.forEach(t),Mno=r(t3e," (ProphetNet model)"),t3e.forEach(t),Eno=i(S),bs=n(S,"LI",{});var _$=s(bs);fae=n(_$,"STRONG",{});var vHr=s(fae);Cno=r(vHr,"qdqbert"),vHr.forEach(t),wno=r(_$," \u2014 "),BP=n(_$,"A",{href:!0});var FHr=s(BP);Ano=r(FHr,"BertTokenizer"),FHr.forEach(t),yno=r(_$," or "),IP=n(_$,"A",{href:!0});var THr=s(IP);Lno=r(THr,"BertTokenizerFast"),THr.forEach(t),xno=r(_$," (QDQBert model)"),_$.forEach(t),$no=i(S),Xg=n(S,"LI",{});var a3e=s(Xg);mae=n(a3e,"STRONG",{});var MHr=s(mae);kno=r(MHr,"rag"),MHr.forEach(t),Sno=r(a3e," \u2014 "),qP=n(a3e,"A",{href:!0});var EHr=s(qP);Rno=r(EHr,"RagTokenizer"),EHr.forEach(t),Pno=r(a3e," (RAG model)"),a3e.forEach(t),Bno=i(S),vs=n(S,"LI",{});var b$=s(vs);gae=n(b$,"STRONG",{});var CHr=s(gae);Ino=r(CHr,"realm"),CHr.forEach(t),qno=r(b$," \u2014 "),NP=n(b$,"A",{href:!0});var wHr=s(NP);Nno=r(wHr,"RealmTokenizer"),wHr.forEach(t),jno=r(b$," or "),jP=n(b$,"A",{href:!0});var AHr=s(jP);Dno=r(AHr,"RealmTokenizerFast"),AHr.forEach(t),Gno=r(b$," (Realm model)"),b$.forEach(t),Ono=i(S),Fs=n(S,"LI",{});var v$=s(Fs);hae=n(v$,"STRONG",{});var yHr=s(hae);Vno=r(yHr,"reformer"),yHr.forEach(t),Xno=r(v$," \u2014 "),DP=n(v$,"A",{href:!0});var LHr=s(DP);zno=r(LHr,"ReformerTokenizer"),LHr.forEach(t),Wno=r(v$," or "),GP=n(v$,"A",{href:!0});var xHr=s(GP);Qno=r(xHr,"ReformerTokenizerFast"),xHr.forEach(t),Hno=r(v$," (Reformer model)"),v$.forEach(t),Uno=i(S),Ts=n(S,"LI",{});var F$=s(Ts);pae=n(F$,"STRONG",{});var $Hr=s(pae);Jno=r($Hr,"rembert"),$Hr.forEach(t),Yno=r(F$," \u2014 "),OP=n(F$,"A",{href:!0});var kHr=s(OP);Kno=r(kHr,"RemBertTokenizer"),kHr.forEach(t),Zno=r(F$," or "),VP=n(F$,"A",{href:!0});var SHr=s(VP);eso=r(SHr,"RemBertTokenizerFast"),SHr.forEach(t),oso=r(F$," (RemBERT model)"),F$.forEach(t),rso=i(S),Ms=n(S,"LI",{});var T$=s(Ms);uae=n(T$,"STRONG",{});var RHr=s(uae);tso=r(RHr,"retribert"),RHr.forEach(t),aso=r(T$," \u2014 "),XP=n(T$,"A",{href:!0});var PHr=s(XP);nso=r(PHr,"RetriBertTokenizer"),PHr.forEach(t),sso=r(T$," or "),zP=n(T$,"A",{href:!0});var BHr=s(zP);lso=r(BHr,"RetriBertTokenizerFast"),BHr.forEach(t),iso=r(T$," (RetriBERT model)"),T$.forEach(t),dso=i(S),Es=n(S,"LI",{});var M$=s(Es);_ae=n(M$,"STRONG",{});var IHr=s(_ae);cso=r(IHr,"roberta"),IHr.forEach(t),fso=r(M$," \u2014 "),WP=n(M$,"A",{href:!0});var qHr=s(WP);mso=r(qHr,"RobertaTokenizer"),qHr.forEach(t),gso=r(M$," or "),QP=n(M$,"A",{href:!0});var NHr=s(QP);hso=r(NHr,"RobertaTokenizerFast"),NHr.forEach(t),pso=r(M$," (RoBERTa model)"),M$.forEach(t),uso=i(S),Cs=n(S,"LI",{});var E$=s(Cs);bae=n(E$,"STRONG",{});var jHr=s(bae);_so=r(jHr,"roformer"),jHr.forEach(t),bso=r(E$," \u2014 "),HP=n(E$,"A",{href:!0});var DHr=s(HP);vso=r(DHr,"RoFormerTokenizer"),DHr.forEach(t),Fso=r(E$," or "),UP=n(E$,"A",{href:!0});var GHr=s(UP);Tso=r(GHr,"RoFormerTokenizerFast"),GHr.forEach(t),Mso=r(E$," (RoFormer model)"),E$.forEach(t),Eso=i(S),zg=n(S,"LI",{});var n3e=s(zg);vae=n(n3e,"STRONG",{});var OHr=s(vae);Cso=r(OHr,"speech_to_text"),OHr.forEach(t),wso=r(n3e," \u2014 "),JP=n(n3e,"A",{href:!0});var VHr=s(JP);Aso=r(VHr,"Speech2TextTokenizer"),VHr.forEach(t),yso=r(n3e," (Speech2Text model)"),n3e.forEach(t),Lso=i(S),Wg=n(S,"LI",{});var s3e=s(Wg);Fae=n(s3e,"STRONG",{});var XHr=s(Fae);xso=r(XHr,"speech_to_text_2"),XHr.forEach(t),$so=r(s3e," \u2014 "),YP=n(s3e,"A",{href:!0});var zHr=s(YP);kso=r(zHr,"Speech2Text2Tokenizer"),zHr.forEach(t),Sso=r(s3e," (Speech2Text2 model)"),s3e.forEach(t),Rso=i(S),ws=n(S,"LI",{});var C$=s(ws);Tae=n(C$,"STRONG",{});var WHr=s(Tae);Pso=r(WHr,"splinter"),WHr.forEach(t),Bso=r(C$," \u2014 "),KP=n(C$,"A",{href:!0});var QHr=s(KP);Iso=r(QHr,"SplinterTokenizer"),QHr.forEach(t),qso=r(C$," or "),ZP=n(C$,"A",{href:!0});var HHr=s(ZP);Nso=r(HHr,"SplinterTokenizerFast"),HHr.forEach(t),jso=r(C$," (Splinter model)"),C$.forEach(t),Dso=i(S),As=n(S,"LI",{});var w$=s(As);Mae=n(w$,"STRONG",{});var UHr=s(Mae);Gso=r(UHr,"squeezebert"),UHr.forEach(t),Oso=r(w$," \u2014 "),eB=n(w$,"A",{href:!0});var JHr=s(eB);Vso=r(JHr,"SqueezeBertTokenizer"),JHr.forEach(t),Xso=r(w$," or "),oB=n(w$,"A",{href:!0});var YHr=s(oB);zso=r(YHr,"SqueezeBertTokenizerFast"),YHr.forEach(t),Wso=r(w$," (SqueezeBERT model)"),w$.forEach(t),Qso=i(S),ys=n(S,"LI",{});var A$=s(ys);Eae=n(A$,"STRONG",{});var KHr=s(Eae);Hso=r(KHr,"t5"),KHr.forEach(t),Uso=r(A$," \u2014 "),rB=n(A$,"A",{href:!0});var ZHr=s(rB);Jso=r(ZHr,"T5Tokenizer"),ZHr.forEach(t),Yso=r(A$," or "),tB=n(A$,"A",{href:!0});var eUr=s(tB);Kso=r(eUr,"T5TokenizerFast"),eUr.forEach(t),Zso=r(A$," (T5 model)"),A$.forEach(t),elo=i(S),Qg=n(S,"LI",{});var l3e=s(Qg);Cae=n(l3e,"STRONG",{});var oUr=s(Cae);olo=r(oUr,"tapas"),oUr.forEach(t),rlo=r(l3e," \u2014 "),aB=n(l3e,"A",{href:!0});var rUr=s(aB);tlo=r(rUr,"TapasTokenizer"),rUr.forEach(t),alo=r(l3e," (TAPAS model)"),l3e.forEach(t),nlo=i(S),Hg=n(S,"LI",{});var i3e=s(Hg);wae=n(i3e,"STRONG",{});var tUr=s(wae);slo=r(tUr,"tapex"),tUr.forEach(t),llo=r(i3e," \u2014 "),nB=n(i3e,"A",{href:!0});var aUr=s(nB);ilo=r(aUr,"TapexTokenizer"),aUr.forEach(t),dlo=r(i3e," (TAPEX model)"),i3e.forEach(t),clo=i(S),Ug=n(S,"LI",{});var d3e=s(Ug);Aae=n(d3e,"STRONG",{});var nUr=s(Aae);flo=r(nUr,"transfo-xl"),nUr.forEach(t),mlo=r(d3e," \u2014 "),sB=n(d3e,"A",{href:!0});var sUr=s(sB);glo=r(sUr,"TransfoXLTokenizer"),sUr.forEach(t),hlo=r(d3e," (Transformer-XL model)"),d3e.forEach(t),plo=i(S),Ls=n(S,"LI",{});var y$=s(Ls);yae=n(y$,"STRONG",{});var lUr=s(yae);ulo=r(lUr,"visual_bert"),lUr.forEach(t),_lo=r(y$," \u2014 "),lB=n(y$,"A",{href:!0});var iUr=s(lB);blo=r(iUr,"BertTokenizer"),iUr.forEach(t),vlo=r(y$," or "),iB=n(y$,"A",{href:!0});var dUr=s(iB);Flo=r(dUr,"BertTokenizerFast"),dUr.forEach(t),Tlo=r(y$," (VisualBert model)"),y$.forEach(t),Mlo=i(S),Jg=n(S,"LI",{});var c3e=s(Jg);Lae=n(c3e,"STRONG",{});var cUr=s(Lae);Elo=r(cUr,"wav2vec2"),cUr.forEach(t),Clo=r(c3e," \u2014 "),dB=n(c3e,"A",{href:!0});var fUr=s(dB);wlo=r(fUr,"Wav2Vec2CTCTokenizer"),fUr.forEach(t),Alo=r(c3e," (Wav2Vec2 model)"),c3e.forEach(t),ylo=i(S),Yg=n(S,"LI",{});var f3e=s(Yg);xae=n(f3e,"STRONG",{});var mUr=s(xae);Llo=r(mUr,"wav2vec2-conformer"),mUr.forEach(t),xlo=r(f3e," \u2014 "),cB=n(f3e,"A",{href:!0});var gUr=s(cB);$lo=r(gUr,"Wav2Vec2CTCTokenizer"),gUr.forEach(t),klo=r(f3e," (Wav2Vec2-Conformer model)"),f3e.forEach(t),Slo=i(S),Kg=n(S,"LI",{});var m3e=s(Kg);$ae=n(m3e,"STRONG",{});var hUr=s($ae);Rlo=r(hUr,"wav2vec2_phoneme"),hUr.forEach(t),Plo=r(m3e," \u2014 "),fB=n(m3e,"A",{href:!0});var pUr=s(fB);Blo=r(pUr,"Wav2Vec2PhonemeCTCTokenizer"),pUr.forEach(t),Ilo=r(m3e," (Wav2Vec2Phoneme model)"),m3e.forEach(t),qlo=i(S),xs=n(S,"LI",{});var L$=s(xs);kae=n(L$,"STRONG",{});var uUr=s(kae);Nlo=r(uUr,"xglm"),uUr.forEach(t),jlo=r(L$," \u2014 "),mB=n(L$,"A",{href:!0});var _Ur=s(mB);Dlo=r(_Ur,"XGLMTokenizer"),_Ur.forEach(t),Glo=r(L$," or "),gB=n(L$,"A",{href:!0});var bUr=s(gB);Olo=r(bUr,"XGLMTokenizerFast"),bUr.forEach(t),Vlo=r(L$," (XGLM model)"),L$.forEach(t),Xlo=i(S),Zg=n(S,"LI",{});var g3e=s(Zg);Sae=n(g3e,"STRONG",{});var vUr=s(Sae);zlo=r(vUr,"xlm"),vUr.forEach(t),Wlo=r(g3e," \u2014 "),hB=n(g3e,"A",{href:!0});var FUr=s(hB);Qlo=r(FUr,"XLMTokenizer"),FUr.forEach(t),Hlo=r(g3e," (XLM model)"),g3e.forEach(t),Ulo=i(S),eh=n(S,"LI",{});var h3e=s(eh);Rae=n(h3e,"STRONG",{});var TUr=s(Rae);Jlo=r(TUr,"xlm-prophetnet"),TUr.forEach(t),Ylo=r(h3e," \u2014 "),pB=n(h3e,"A",{href:!0});var MUr=s(pB);Klo=r(MUr,"XLMProphetNetTokenizer"),MUr.forEach(t),Zlo=r(h3e," (XLMProphetNet model)"),h3e.forEach(t),eio=i(S),$s=n(S,"LI",{});var x$=s($s);Pae=n(x$,"STRONG",{});var EUr=s(Pae);oio=r(EUr,"xlm-roberta"),EUr.forEach(t),rio=r(x$," \u2014 "),uB=n(x$,"A",{href:!0});var CUr=s(uB);tio=r(CUr,"XLMRobertaTokenizer"),CUr.forEach(t),aio=r(x$," or "),_B=n(x$,"A",{href:!0});var wUr=s(_B);nio=r(wUr,"XLMRobertaTokenizerFast"),wUr.forEach(t),sio=r(x$," (XLM-RoBERTa model)"),x$.forEach(t),lio=i(S),ks=n(S,"LI",{});var $$=s(ks);Bae=n($$,"STRONG",{});var AUr=s(Bae);iio=r(AUr,"xlm-roberta-xl"),AUr.forEach(t),dio=r($$," \u2014 "),bB=n($$,"A",{href:!0});var yUr=s(bB);cio=r(yUr,"RobertaTokenizer"),yUr.forEach(t),fio=r($$," or "),vB=n($$,"A",{href:!0});var LUr=s(vB);mio=r(LUr,"RobertaTokenizerFast"),LUr.forEach(t),gio=r($$," (XLM-RoBERTa-XL model)"),$$.forEach(t),hio=i(S),Ss=n(S,"LI",{});var k$=s(Ss);Iae=n(k$,"STRONG",{});var xUr=s(Iae);pio=r(xUr,"xlnet"),xUr.forEach(t),uio=r(k$," \u2014 "),FB=n(k$,"A",{href:!0});var $Ur=s(FB);_io=r($Ur,"XLNetTokenizer"),$Ur.forEach(t),bio=r(k$," or "),TB=n(k$,"A",{href:!0});var kUr=s(TB);vio=r(kUr,"XLNetTokenizerFast"),kUr.forEach(t),Fio=r(k$," (XLNet model)"),k$.forEach(t),Tio=i(S),Rs=n(S,"LI",{});var S$=s(Rs);qae=n(S$,"STRONG",{});var SUr=s(qae);Mio=r(SUr,"yoso"),SUr.forEach(t),Eio=r(S$," \u2014 "),MB=n(S$,"A",{href:!0});var RUr=s(MB);Cio=r(RUr,"AlbertTokenizer"),RUr.forEach(t),wio=r(S$," or "),EB=n(S$,"A",{href:!0});var PUr=s(EB);Aio=r(PUr,"AlbertTokenizerFast"),PUr.forEach(t),yio=r(S$," (YOSO model)"),S$.forEach(t),S.forEach(t),Lio=i(Ns),T(oh.$$.fragment,Ns),Ns.forEach(t),xio=i(qs),rh=n(qs,"DIV",{class:!0});var Cje=s(rh);T(kA.$$.fragment,Cje),$io=i(Cje),Nae=n(Cje,"P",{});var BUr=s(Nae);kio=r(BUr,"Register a new tokenizer in this mapping."),BUr.forEach(t),Cje.forEach(t),qs.forEach(t),wqe=i(f),Mi=n(f,"H2",{class:!0});var wje=s(Mi);th=n(wje,"A",{id:!0,class:!0,href:!0});var IUr=s(th);jae=n(IUr,"SPAN",{});var qUr=s(jae);T(SA.$$.fragment,qUr),qUr.forEach(t),IUr.forEach(t),Sio=i(wje),Dae=n(wje,"SPAN",{});var NUr=s(Dae);Rio=r(NUr,"AutoFeatureExtractor"),NUr.forEach(t),wje.forEach(t),Aqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(RA.$$.fragment,js),Pio=i(js),PA=n(js,"P",{});var Aje=s(PA);Bio=r(Aje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CB=n(Aje,"A",{href:!0});var jUr=s(CB);Iio=r(jUr,"AutoFeatureExtractor.from_pretrained()"),jUr.forEach(t),qio=r(Aje," class method."),Aje.forEach(t),Nio=i(js),BA=n(js,"P",{});var yje=s(BA);jio=r(yje,"This class cannot be instantiated directly using "),Gae=n(yje,"CODE",{});var DUr=s(Gae);Dio=r(DUr,"__init__()"),DUr.forEach(t),Gio=r(yje," (throws an error)."),yje.forEach(t),Oio=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(IA.$$.fragment,Zt),Vio=i(Zt),Oae=n(Zt,"P",{});var GUr=s(Oae);Xio=r(GUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),GUr.forEach(t),zio=i(Zt),ya=n(Zt,"P",{});var T3=s(ya);Wio=r(T3,"The feature extractor class to instantiate is selected based on the "),Vae=n(T3,"CODE",{});var OUr=s(Vae);Qio=r(OUr,"model_type"),OUr.forEach(t),Hio=r(T3,` property of the config object
(either passed as an argument or loaded from `),Xae=n(T3,"CODE",{});var VUr=s(Xae);Uio=r(VUr,"pretrained_model_name_or_path"),VUr.forEach(t),Jio=r(T3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zae=n(T3,"CODE",{});var XUr=s(zae);Yio=r(XUr,"pretrained_model_name_or_path"),XUr.forEach(t),Kio=r(T3,":"),T3.forEach(t),Zio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);ah=n(re,"LI",{});var p3e=s(ah);Wae=n(p3e,"STRONG",{});var zUr=s(Wae);edo=r(zUr,"beit"),zUr.forEach(t),odo=r(p3e," \u2014 "),wB=n(p3e,"A",{href:!0});var WUr=s(wB);rdo=r(WUr,"BeitFeatureExtractor"),WUr.forEach(t),tdo=r(p3e," (BEiT model)"),p3e.forEach(t),ado=i(re),nh=n(re,"LI",{});var u3e=s(nh);Qae=n(u3e,"STRONG",{});var QUr=s(Qae);ndo=r(QUr,"clip"),QUr.forEach(t),sdo=r(u3e," \u2014 "),AB=n(u3e,"A",{href:!0});var HUr=s(AB);ldo=r(HUr,"CLIPFeatureExtractor"),HUr.forEach(t),ido=r(u3e," (CLIP model)"),u3e.forEach(t),ddo=i(re),sh=n(re,"LI",{});var _3e=s(sh);Hae=n(_3e,"STRONG",{});var UUr=s(Hae);cdo=r(UUr,"convnext"),UUr.forEach(t),fdo=r(_3e," \u2014 "),yB=n(_3e,"A",{href:!0});var JUr=s(yB);mdo=r(JUr,"ConvNextFeatureExtractor"),JUr.forEach(t),gdo=r(_3e," (ConvNext model)"),_3e.forEach(t),hdo=i(re),lh=n(re,"LI",{});var b3e=s(lh);Uae=n(b3e,"STRONG",{});var YUr=s(Uae);pdo=r(YUr,"data2vec-audio"),YUr.forEach(t),udo=r(b3e," \u2014 "),LB=n(b3e,"A",{href:!0});var KUr=s(LB);_do=r(KUr,"Wav2Vec2FeatureExtractor"),KUr.forEach(t),bdo=r(b3e," (Data2VecAudio model)"),b3e.forEach(t),vdo=i(re),ih=n(re,"LI",{});var v3e=s(ih);Jae=n(v3e,"STRONG",{});var ZUr=s(Jae);Fdo=r(ZUr,"data2vec-vision"),ZUr.forEach(t),Tdo=r(v3e," \u2014 "),xB=n(v3e,"A",{href:!0});var eJr=s(xB);Mdo=r(eJr,"BeitFeatureExtractor"),eJr.forEach(t),Edo=r(v3e," (Data2VecVision model)"),v3e.forEach(t),Cdo=i(re),dh=n(re,"LI",{});var F3e=s(dh);Yae=n(F3e,"STRONG",{});var oJr=s(Yae);wdo=r(oJr,"deit"),oJr.forEach(t),Ado=r(F3e," \u2014 "),$B=n(F3e,"A",{href:!0});var rJr=s($B);ydo=r(rJr,"DeiTFeatureExtractor"),rJr.forEach(t),Ldo=r(F3e," (DeiT model)"),F3e.forEach(t),xdo=i(re),ch=n(re,"LI",{});var T3e=s(ch);Kae=n(T3e,"STRONG",{});var tJr=s(Kae);$do=r(tJr,"detr"),tJr.forEach(t),kdo=r(T3e," \u2014 "),kB=n(T3e,"A",{href:!0});var aJr=s(kB);Sdo=r(aJr,"DetrFeatureExtractor"),aJr.forEach(t),Rdo=r(T3e," (DETR model)"),T3e.forEach(t),Pdo=i(re),fh=n(re,"LI",{});var M3e=s(fh);Zae=n(M3e,"STRONG",{});var nJr=s(Zae);Bdo=r(nJr,"dpt"),nJr.forEach(t),Ido=r(M3e," \u2014 "),SB=n(M3e,"A",{href:!0});var sJr=s(SB);qdo=r(sJr,"DPTFeatureExtractor"),sJr.forEach(t),Ndo=r(M3e," (DPT model)"),M3e.forEach(t),jdo=i(re),mh=n(re,"LI",{});var E3e=s(mh);ene=n(E3e,"STRONG",{});var lJr=s(ene);Ddo=r(lJr,"flava"),lJr.forEach(t),Gdo=r(E3e," \u2014 "),RB=n(E3e,"A",{href:!0});var iJr=s(RB);Odo=r(iJr,"FlavaFeatureExtractor"),iJr.forEach(t),Vdo=r(E3e," (Flava model)"),E3e.forEach(t),Xdo=i(re),gh=n(re,"LI",{});var C3e=s(gh);one=n(C3e,"STRONG",{});var dJr=s(one);zdo=r(dJr,"glpn"),dJr.forEach(t),Wdo=r(C3e," \u2014 "),PB=n(C3e,"A",{href:!0});var cJr=s(PB);Qdo=r(cJr,"GLPNFeatureExtractor"),cJr.forEach(t),Hdo=r(C3e," (GLPN model)"),C3e.forEach(t),Udo=i(re),hh=n(re,"LI",{});var w3e=s(hh);rne=n(w3e,"STRONG",{});var fJr=s(rne);Jdo=r(fJr,"hubert"),fJr.forEach(t),Ydo=r(w3e," \u2014 "),BB=n(w3e,"A",{href:!0});var mJr=s(BB);Kdo=r(mJr,"Wav2Vec2FeatureExtractor"),mJr.forEach(t),Zdo=r(w3e," (Hubert model)"),w3e.forEach(t),eco=i(re),ph=n(re,"LI",{});var A3e=s(ph);tne=n(A3e,"STRONG",{});var gJr=s(tne);oco=r(gJr,"layoutlmv2"),gJr.forEach(t),rco=r(A3e," \u2014 "),IB=n(A3e,"A",{href:!0});var hJr=s(IB);tco=r(hJr,"LayoutLMv2FeatureExtractor"),hJr.forEach(t),aco=r(A3e," (LayoutLMv2 model)"),A3e.forEach(t),nco=i(re),uh=n(re,"LI",{});var y3e=s(uh);ane=n(y3e,"STRONG",{});var pJr=s(ane);sco=r(pJr,"layoutlmv3"),pJr.forEach(t),lco=r(y3e," \u2014 "),qB=n(y3e,"A",{href:!0});var uJr=s(qB);ico=r(uJr,"LayoutLMv3FeatureExtractor"),uJr.forEach(t),dco=r(y3e," (LayoutLMv3 model)"),y3e.forEach(t),cco=i(re),_h=n(re,"LI",{});var L3e=s(_h);nne=n(L3e,"STRONG",{});var _Jr=s(nne);fco=r(_Jr,"maskformer"),_Jr.forEach(t),mco=r(L3e," \u2014 "),NB=n(L3e,"A",{href:!0});var bJr=s(NB);gco=r(bJr,"MaskFormerFeatureExtractor"),bJr.forEach(t),hco=r(L3e," (MaskFormer model)"),L3e.forEach(t),pco=i(re),bh=n(re,"LI",{});var x3e=s(bh);sne=n(x3e,"STRONG",{});var vJr=s(sne);uco=r(vJr,"perceiver"),vJr.forEach(t),_co=r(x3e," \u2014 "),jB=n(x3e,"A",{href:!0});var FJr=s(jB);bco=r(FJr,"PerceiverFeatureExtractor"),FJr.forEach(t),vco=r(x3e," (Perceiver model)"),x3e.forEach(t),Fco=i(re),vh=n(re,"LI",{});var $3e=s(vh);lne=n($3e,"STRONG",{});var TJr=s(lne);Tco=r(TJr,"poolformer"),TJr.forEach(t),Mco=r($3e," \u2014 "),DB=n($3e,"A",{href:!0});var MJr=s(DB);Eco=r(MJr,"PoolFormerFeatureExtractor"),MJr.forEach(t),Cco=r($3e," (PoolFormer model)"),$3e.forEach(t),wco=i(re),Fh=n(re,"LI",{});var k3e=s(Fh);ine=n(k3e,"STRONG",{});var EJr=s(ine);Aco=r(EJr,"regnet"),EJr.forEach(t),yco=r(k3e," \u2014 "),GB=n(k3e,"A",{href:!0});var CJr=s(GB);Lco=r(CJr,"ConvNextFeatureExtractor"),CJr.forEach(t),xco=r(k3e," (RegNet model)"),k3e.forEach(t),$co=i(re),Th=n(re,"LI",{});var S3e=s(Th);dne=n(S3e,"STRONG",{});var wJr=s(dne);kco=r(wJr,"resnet"),wJr.forEach(t),Sco=r(S3e," \u2014 "),OB=n(S3e,"A",{href:!0});var AJr=s(OB);Rco=r(AJr,"ConvNextFeatureExtractor"),AJr.forEach(t),Pco=r(S3e," (ResNet model)"),S3e.forEach(t),Bco=i(re),Mh=n(re,"LI",{});var R3e=s(Mh);cne=n(R3e,"STRONG",{});var yJr=s(cne);Ico=r(yJr,"segformer"),yJr.forEach(t),qco=r(R3e," \u2014 "),VB=n(R3e,"A",{href:!0});var LJr=s(VB);Nco=r(LJr,"SegformerFeatureExtractor"),LJr.forEach(t),jco=r(R3e," (SegFormer model)"),R3e.forEach(t),Dco=i(re),Eh=n(re,"LI",{});var P3e=s(Eh);fne=n(P3e,"STRONG",{});var xJr=s(fne);Gco=r(xJr,"speech_to_text"),xJr.forEach(t),Oco=r(P3e," \u2014 "),XB=n(P3e,"A",{href:!0});var $Jr=s(XB);Vco=r($Jr,"Speech2TextFeatureExtractor"),$Jr.forEach(t),Xco=r(P3e," (Speech2Text model)"),P3e.forEach(t),zco=i(re),Ch=n(re,"LI",{});var B3e=s(Ch);mne=n(B3e,"STRONG",{});var kJr=s(mne);Wco=r(kJr,"swin"),kJr.forEach(t),Qco=r(B3e," \u2014 "),zB=n(B3e,"A",{href:!0});var SJr=s(zB);Hco=r(SJr,"ViTFeatureExtractor"),SJr.forEach(t),Uco=r(B3e," (Swin model)"),B3e.forEach(t),Jco=i(re),wh=n(re,"LI",{});var I3e=s(wh);gne=n(I3e,"STRONG",{});var RJr=s(gne);Yco=r(RJr,"van"),RJr.forEach(t),Kco=r(I3e," \u2014 "),WB=n(I3e,"A",{href:!0});var PJr=s(WB);Zco=r(PJr,"ConvNextFeatureExtractor"),PJr.forEach(t),efo=r(I3e," (VAN model)"),I3e.forEach(t),ofo=i(re),Ah=n(re,"LI",{});var q3e=s(Ah);hne=n(q3e,"STRONG",{});var BJr=s(hne);rfo=r(BJr,"vit"),BJr.forEach(t),tfo=r(q3e," \u2014 "),QB=n(q3e,"A",{href:!0});var IJr=s(QB);afo=r(IJr,"ViTFeatureExtractor"),IJr.forEach(t),nfo=r(q3e," (ViT model)"),q3e.forEach(t),sfo=i(re),yh=n(re,"LI",{});var N3e=s(yh);pne=n(N3e,"STRONG",{});var qJr=s(pne);lfo=r(qJr,"vit_mae"),qJr.forEach(t),ifo=r(N3e," \u2014 "),HB=n(N3e,"A",{href:!0});var NJr=s(HB);dfo=r(NJr,"ViTFeatureExtractor"),NJr.forEach(t),cfo=r(N3e," (ViTMAE model)"),N3e.forEach(t),ffo=i(re),Lh=n(re,"LI",{});var j3e=s(Lh);une=n(j3e,"STRONG",{});var jJr=s(une);mfo=r(jJr,"wav2vec2"),jJr.forEach(t),gfo=r(j3e," \u2014 "),UB=n(j3e,"A",{href:!0});var DJr=s(UB);hfo=r(DJr,"Wav2Vec2FeatureExtractor"),DJr.forEach(t),pfo=r(j3e," (Wav2Vec2 model)"),j3e.forEach(t),ufo=i(re),xh=n(re,"LI",{});var D3e=s(xh);_ne=n(D3e,"STRONG",{});var GJr=s(_ne);_fo=r(GJr,"wav2vec2-conformer"),GJr.forEach(t),bfo=r(D3e," \u2014 "),JB=n(D3e,"A",{href:!0});var OJr=s(JB);vfo=r(OJr,"Wav2Vec2FeatureExtractor"),OJr.forEach(t),Ffo=r(D3e," (Wav2Vec2-Conformer model)"),D3e.forEach(t),Tfo=i(re),$h=n(re,"LI",{});var G3e=s($h);bne=n(G3e,"STRONG",{});var VJr=s(bne);Mfo=r(VJr,"yolos"),VJr.forEach(t),Efo=r(G3e," \u2014 "),YB=n(G3e,"A",{href:!0});var XJr=s(YB);Cfo=r(XJr,"YolosFeatureExtractor"),XJr.forEach(t),wfo=r(G3e," (YOLOS model)"),G3e.forEach(t),re.forEach(t),Afo=i(Zt),T(kh.$$.fragment,Zt),yfo=i(Zt),T(Sh.$$.fragment,Zt),Zt.forEach(t),Lfo=i(js),Rh=n(js,"DIV",{class:!0});var Lje=s(Rh);T(qA.$$.fragment,Lje),xfo=i(Lje),vne=n(Lje,"P",{});var zJr=s(vne);$fo=r(zJr,"Register a new feature extractor for this class."),zJr.forEach(t),Lje.forEach(t),js.forEach(t),yqe=i(f),Ei=n(f,"H2",{class:!0});var xje=s(Ei);Ph=n(xje,"A",{id:!0,class:!0,href:!0});var WJr=s(Ph);Fne=n(WJr,"SPAN",{});var QJr=s(Fne);T(NA.$$.fragment,QJr),QJr.forEach(t),WJr.forEach(t),kfo=i(xje),Tne=n(xje,"SPAN",{});var HJr=s(Tne);Sfo=r(HJr,"AutoProcessor"),HJr.forEach(t),xje.forEach(t),Lqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(jA.$$.fragment,Ds),Rfo=i(Ds),DA=n(Ds,"P",{});var $je=s(DA);Pfo=r($je,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KB=n($je,"A",{href:!0});var UJr=s(KB);Bfo=r(UJr,"AutoProcessor.from_pretrained()"),UJr.forEach(t),Ifo=r($je," class method."),$je.forEach(t),qfo=i(Ds),GA=n(Ds,"P",{});var kje=s(GA);Nfo=r(kje,"This class cannot be instantiated directly using "),Mne=n(kje,"CODE",{});var JJr=s(Mne);jfo=r(JJr,"__init__()"),JJr.forEach(t),Dfo=r(kje," (throws an error)."),kje.forEach(t),Gfo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(OA.$$.fragment,ea),Ofo=i(ea),Ene=n(ea,"P",{});var YJr=s(Ene);Vfo=r(YJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),YJr.forEach(t),Xfo=i(ea),Ci=n(ea,"P",{});var JK=s(Ci);zfo=r(JK,"The processor class to instantiate is selected based on the "),Cne=n(JK,"CODE",{});var KJr=s(Cne);Wfo=r(KJr,"model_type"),KJr.forEach(t),Qfo=r(JK,` property of the config object (either
passed as an argument or loaded from `),wne=n(JK,"CODE",{});var ZJr=s(wne);Hfo=r(ZJr,"pretrained_model_name_or_path"),ZJr.forEach(t),Ufo=r(JK," if possible):"),JK.forEach(t),Jfo=i(ea),he=n(ea,"UL",{});var _e=s(he);Bh=n(_e,"LI",{});var O3e=s(Bh);Ane=n(O3e,"STRONG",{});var eYr=s(Ane);Yfo=r(eYr,"clip"),eYr.forEach(t),Kfo=r(O3e," \u2014 "),ZB=n(O3e,"A",{href:!0});var oYr=s(ZB);Zfo=r(oYr,"CLIPProcessor"),oYr.forEach(t),emo=r(O3e," (CLIP model)"),O3e.forEach(t),omo=i(_e),Ih=n(_e,"LI",{});var V3e=s(Ih);yne=n(V3e,"STRONG",{});var rYr=s(yne);rmo=r(rYr,"flava"),rYr.forEach(t),tmo=r(V3e," \u2014 "),Lne=n(V3e,"CODE",{});var tYr=s(Lne);amo=r(tYr,"FLAVAProcessor"),tYr.forEach(t),nmo=r(V3e," (Flava model)"),V3e.forEach(t),smo=i(_e),qh=n(_e,"LI",{});var X3e=s(qh);xne=n(X3e,"STRONG",{});var aYr=s(xne);lmo=r(aYr,"layoutlmv2"),aYr.forEach(t),imo=r(X3e," \u2014 "),eI=n(X3e,"A",{href:!0});var nYr=s(eI);dmo=r(nYr,"LayoutLMv2Processor"),nYr.forEach(t),cmo=r(X3e," (LayoutLMv2 model)"),X3e.forEach(t),fmo=i(_e),Nh=n(_e,"LI",{});var z3e=s(Nh);$ne=n(z3e,"STRONG",{});var sYr=s($ne);mmo=r(sYr,"layoutlmv3"),sYr.forEach(t),gmo=r(z3e," \u2014 "),oI=n(z3e,"A",{href:!0});var lYr=s(oI);hmo=r(lYr,"LayoutLMv3Processor"),lYr.forEach(t),pmo=r(z3e," (LayoutLMv3 model)"),z3e.forEach(t),umo=i(_e),jh=n(_e,"LI",{});var W3e=s(jh);kne=n(W3e,"STRONG",{});var iYr=s(kne);_mo=r(iYr,"layoutxlm"),iYr.forEach(t),bmo=r(W3e," \u2014 "),rI=n(W3e,"A",{href:!0});var dYr=s(rI);vmo=r(dYr,"LayoutXLMProcessor"),dYr.forEach(t),Fmo=r(W3e," (LayoutXLM model)"),W3e.forEach(t),Tmo=i(_e),Dh=n(_e,"LI",{});var Q3e=s(Dh);Sne=n(Q3e,"STRONG",{});var cYr=s(Sne);Mmo=r(cYr,"sew"),cYr.forEach(t),Emo=r(Q3e," \u2014 "),tI=n(Q3e,"A",{href:!0});var fYr=s(tI);Cmo=r(fYr,"Wav2Vec2Processor"),fYr.forEach(t),wmo=r(Q3e," (SEW model)"),Q3e.forEach(t),Amo=i(_e),Gh=n(_e,"LI",{});var H3e=s(Gh);Rne=n(H3e,"STRONG",{});var mYr=s(Rne);ymo=r(mYr,"sew-d"),mYr.forEach(t),Lmo=r(H3e," \u2014 "),aI=n(H3e,"A",{href:!0});var gYr=s(aI);xmo=r(gYr,"Wav2Vec2Processor"),gYr.forEach(t),$mo=r(H3e," (SEW-D model)"),H3e.forEach(t),kmo=i(_e),Oh=n(_e,"LI",{});var U3e=s(Oh);Pne=n(U3e,"STRONG",{});var hYr=s(Pne);Smo=r(hYr,"speech_to_text"),hYr.forEach(t),Rmo=r(U3e," \u2014 "),nI=n(U3e,"A",{href:!0});var pYr=s(nI);Pmo=r(pYr,"Speech2TextProcessor"),pYr.forEach(t),Bmo=r(U3e," (Speech2Text model)"),U3e.forEach(t),Imo=i(_e),Vh=n(_e,"LI",{});var J3e=s(Vh);Bne=n(J3e,"STRONG",{});var uYr=s(Bne);qmo=r(uYr,"speech_to_text_2"),uYr.forEach(t),Nmo=r(J3e," \u2014 "),sI=n(J3e,"A",{href:!0});var _Yr=s(sI);jmo=r(_Yr,"Speech2Text2Processor"),_Yr.forEach(t),Dmo=r(J3e," (Speech2Text2 model)"),J3e.forEach(t),Gmo=i(_e),Xh=n(_e,"LI",{});var Y3e=s(Xh);Ine=n(Y3e,"STRONG",{});var bYr=s(Ine);Omo=r(bYr,"trocr"),bYr.forEach(t),Vmo=r(Y3e," \u2014 "),lI=n(Y3e,"A",{href:!0});var vYr=s(lI);Xmo=r(vYr,"TrOCRProcessor"),vYr.forEach(t),zmo=r(Y3e," (TrOCR model)"),Y3e.forEach(t),Wmo=i(_e),zh=n(_e,"LI",{});var K3e=s(zh);qne=n(K3e,"STRONG",{});var FYr=s(qne);Qmo=r(FYr,"unispeech"),FYr.forEach(t),Hmo=r(K3e," \u2014 "),iI=n(K3e,"A",{href:!0});var TYr=s(iI);Umo=r(TYr,"Wav2Vec2Processor"),TYr.forEach(t),Jmo=r(K3e," (UniSpeech model)"),K3e.forEach(t),Ymo=i(_e),Wh=n(_e,"LI",{});var Z3e=s(Wh);Nne=n(Z3e,"STRONG",{});var MYr=s(Nne);Kmo=r(MYr,"unispeech-sat"),MYr.forEach(t),Zmo=r(Z3e," \u2014 "),dI=n(Z3e,"A",{href:!0});var EYr=s(dI);ego=r(EYr,"Wav2Vec2Processor"),EYr.forEach(t),ogo=r(Z3e," (UniSpeechSat model)"),Z3e.forEach(t),rgo=i(_e),Qh=n(_e,"LI",{});var ewe=s(Qh);jne=n(ewe,"STRONG",{});var CYr=s(jne);tgo=r(CYr,"vilt"),CYr.forEach(t),ago=r(ewe," \u2014 "),cI=n(ewe,"A",{href:!0});var wYr=s(cI);ngo=r(wYr,"ViltProcessor"),wYr.forEach(t),sgo=r(ewe," (ViLT model)"),ewe.forEach(t),lgo=i(_e),Hh=n(_e,"LI",{});var owe=s(Hh);Dne=n(owe,"STRONG",{});var AYr=s(Dne);igo=r(AYr,"vision-text-dual-encoder"),AYr.forEach(t),dgo=r(owe," \u2014 "),fI=n(owe,"A",{href:!0});var yYr=s(fI);cgo=r(yYr,"VisionTextDualEncoderProcessor"),yYr.forEach(t),fgo=r(owe," (VisionTextDualEncoder model)"),owe.forEach(t),mgo=i(_e),Uh=n(_e,"LI",{});var rwe=s(Uh);Gne=n(rwe,"STRONG",{});var LYr=s(Gne);ggo=r(LYr,"wav2vec2"),LYr.forEach(t),hgo=r(rwe," \u2014 "),mI=n(rwe,"A",{href:!0});var xYr=s(mI);pgo=r(xYr,"Wav2Vec2Processor"),xYr.forEach(t),ugo=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),_go=i(_e),Jh=n(_e,"LI",{});var twe=s(Jh);One=n(twe,"STRONG",{});var $Yr=s(One);bgo=r($Yr,"wav2vec2-conformer"),$Yr.forEach(t),vgo=r(twe," \u2014 "),gI=n(twe,"A",{href:!0});var kYr=s(gI);Fgo=r(kYr,"Wav2Vec2Processor"),kYr.forEach(t),Tgo=r(twe," (Wav2Vec2-Conformer model)"),twe.forEach(t),Mgo=i(_e),Yh=n(_e,"LI",{});var awe=s(Yh);Vne=n(awe,"STRONG",{});var SYr=s(Vne);Ego=r(SYr,"wavlm"),SYr.forEach(t),Cgo=r(awe," \u2014 "),hI=n(awe,"A",{href:!0});var RYr=s(hI);wgo=r(RYr,"Wav2Vec2Processor"),RYr.forEach(t),Ago=r(awe," (WavLM model)"),awe.forEach(t),_e.forEach(t),ygo=i(ea),T(Kh.$$.fragment,ea),Lgo=i(ea),T(Zh.$$.fragment,ea),ea.forEach(t),xgo=i(Ds),ep=n(Ds,"DIV",{class:!0});var Sje=s(ep);T(VA.$$.fragment,Sje),$go=i(Sje),Xne=n(Sje,"P",{});var PYr=s(Xne);kgo=r(PYr,"Register a new processor for this class."),PYr.forEach(t),Sje.forEach(t),Ds.forEach(t),xqe=i(f),wi=n(f,"H2",{class:!0});var Rje=s(wi);op=n(Rje,"A",{id:!0,class:!0,href:!0});var BYr=s(op);zne=n(BYr,"SPAN",{});var IYr=s(zne);T(XA.$$.fragment,IYr),IYr.forEach(t),BYr.forEach(t),Sgo=i(Rje),Wne=n(Rje,"SPAN",{});var qYr=s(Wne);Rgo=r(qYr,"AutoModel"),qYr.forEach(t),Rje.forEach(t),$qe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(zA.$$.fragment,Gs),Pgo=i(Gs),Ai=n(Gs,"P",{});var YK=s(Ai);Bgo=r(YK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pI=n(YK,"A",{href:!0});var NYr=s(pI);Igo=r(NYr,"from_pretrained()"),NYr.forEach(t),qgo=r(YK," class method or the "),uI=n(YK,"A",{href:!0});var jYr=s(uI);Ngo=r(jYr,"from_config()"),jYr.forEach(t),jgo=r(YK,` class
method.`),YK.forEach(t),Dgo=i(Gs),WA=n(Gs,"P",{});var Pje=s(WA);Ggo=r(Pje,"This class cannot be instantiated directly using "),Qne=n(Pje,"CODE",{});var DYr=s(Qne);Ogo=r(DYr,"__init__()"),DYr.forEach(t),Vgo=r(Pje," (throws an error)."),Pje.forEach(t),Xgo=i(Gs),tt=n(Gs,"DIV",{class:!0});var M3=s(tt);T(QA.$$.fragment,M3),zgo=i(M3),Hne=n(M3,"P",{});var GYr=s(Hne);Wgo=r(GYr,"Instantiates one of the base model classes of the library from a configuration."),GYr.forEach(t),Qgo=i(M3),yi=n(M3,"P",{});var KK=s(yi);Hgo=r(KK,`Note:
Loading a model from its configuration file does `),Une=n(KK,"STRONG",{});var OYr=s(Une);Ugo=r(OYr,"not"),OYr.forEach(t),Jgo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=n(KK,"A",{href:!0});var VYr=s(_I);Ygo=r(VYr,"from_pretrained()"),VYr.forEach(t),Kgo=r(KK," to load the model weights."),KK.forEach(t),Zgo=i(M3),T(rp.$$.fragment,M3),M3.forEach(t),eho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(HA.$$.fragment,oa),oho=i(oa),Jne=n(oa,"P",{});var XYr=s(Jne);rho=r(XYr,"Instantiate one of the base model classes of the library from a pretrained model."),XYr.forEach(t),tho=i(oa),La=n(oa,"P",{});var E3=s(La);aho=r(E3,"The model class to instantiate is selected based on the "),Yne=n(E3,"CODE",{});var zYr=s(Yne);nho=r(zYr,"model_type"),zYr.forEach(t),sho=r(E3,` property of the config object (either
passed as an argument or loaded from `),Kne=n(E3,"CODE",{});var WYr=s(Kne);lho=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),iho=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=n(E3,"CODE",{});var QYr=s(Zne);dho=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),cho=r(E3,":"),E3.forEach(t),fho=i(oa),x=n(oa,"UL",{});var $=s(x);tp=n($,"LI",{});var nwe=s(tp);ese=n(nwe,"STRONG",{});var HYr=s(ese);mho=r(HYr,"albert"),HYr.forEach(t),gho=r(nwe," \u2014 "),bI=n(nwe,"A",{href:!0});var UYr=s(bI);hho=r(UYr,"AlbertModel"),UYr.forEach(t),pho=r(nwe," (ALBERT model)"),nwe.forEach(t),uho=i($),ap=n($,"LI",{});var swe=s(ap);ose=n(swe,"STRONG",{});var JYr=s(ose);_ho=r(JYr,"bart"),JYr.forEach(t),bho=r(swe," \u2014 "),vI=n(swe,"A",{href:!0});var YYr=s(vI);vho=r(YYr,"BartModel"),YYr.forEach(t),Fho=r(swe," (BART model)"),swe.forEach(t),Tho=i($),np=n($,"LI",{});var lwe=s(np);rse=n(lwe,"STRONG",{});var KYr=s(rse);Mho=r(KYr,"beit"),KYr.forEach(t),Eho=r(lwe," \u2014 "),FI=n(lwe,"A",{href:!0});var ZYr=s(FI);Cho=r(ZYr,"BeitModel"),ZYr.forEach(t),who=r(lwe," (BEiT model)"),lwe.forEach(t),Aho=i($),sp=n($,"LI",{});var iwe=s(sp);tse=n(iwe,"STRONG",{});var eKr=s(tse);yho=r(eKr,"bert"),eKr.forEach(t),Lho=r(iwe," \u2014 "),TI=n(iwe,"A",{href:!0});var oKr=s(TI);xho=r(oKr,"BertModel"),oKr.forEach(t),$ho=r(iwe," (BERT model)"),iwe.forEach(t),kho=i($),lp=n($,"LI",{});var dwe=s(lp);ase=n(dwe,"STRONG",{});var rKr=s(ase);Sho=r(rKr,"bert-generation"),rKr.forEach(t),Rho=r(dwe," \u2014 "),MI=n(dwe,"A",{href:!0});var tKr=s(MI);Pho=r(tKr,"BertGenerationEncoder"),tKr.forEach(t),Bho=r(dwe," (Bert Generation model)"),dwe.forEach(t),Iho=i($),ip=n($,"LI",{});var cwe=s(ip);nse=n(cwe,"STRONG",{});var aKr=s(nse);qho=r(aKr,"big_bird"),aKr.forEach(t),Nho=r(cwe," \u2014 "),EI=n(cwe,"A",{href:!0});var nKr=s(EI);jho=r(nKr,"BigBirdModel"),nKr.forEach(t),Dho=r(cwe," (BigBird model)"),cwe.forEach(t),Gho=i($),dp=n($,"LI",{});var fwe=s(dp);sse=n(fwe,"STRONG",{});var sKr=s(sse);Oho=r(sKr,"bigbird_pegasus"),sKr.forEach(t),Vho=r(fwe," \u2014 "),CI=n(fwe,"A",{href:!0});var lKr=s(CI);Xho=r(lKr,"BigBirdPegasusModel"),lKr.forEach(t),zho=r(fwe," (BigBirdPegasus model)"),fwe.forEach(t),Who=i($),cp=n($,"LI",{});var mwe=s(cp);lse=n(mwe,"STRONG",{});var iKr=s(lse);Qho=r(iKr,"blenderbot"),iKr.forEach(t),Hho=r(mwe," \u2014 "),wI=n(mwe,"A",{href:!0});var dKr=s(wI);Uho=r(dKr,"BlenderbotModel"),dKr.forEach(t),Jho=r(mwe," (Blenderbot model)"),mwe.forEach(t),Yho=i($),fp=n($,"LI",{});var gwe=s(fp);ise=n(gwe,"STRONG",{});var cKr=s(ise);Kho=r(cKr,"blenderbot-small"),cKr.forEach(t),Zho=r(gwe," \u2014 "),AI=n(gwe,"A",{href:!0});var fKr=s(AI);epo=r(fKr,"BlenderbotSmallModel"),fKr.forEach(t),opo=r(gwe," (BlenderbotSmall model)"),gwe.forEach(t),rpo=i($),mp=n($,"LI",{});var hwe=s(mp);dse=n(hwe,"STRONG",{});var mKr=s(dse);tpo=r(mKr,"camembert"),mKr.forEach(t),apo=r(hwe," \u2014 "),yI=n(hwe,"A",{href:!0});var gKr=s(yI);npo=r(gKr,"CamembertModel"),gKr.forEach(t),spo=r(hwe," (CamemBERT model)"),hwe.forEach(t),lpo=i($),gp=n($,"LI",{});var pwe=s(gp);cse=n(pwe,"STRONG",{});var hKr=s(cse);ipo=r(hKr,"canine"),hKr.forEach(t),dpo=r(pwe," \u2014 "),LI=n(pwe,"A",{href:!0});var pKr=s(LI);cpo=r(pKr,"CanineModel"),pKr.forEach(t),fpo=r(pwe," (Canine model)"),pwe.forEach(t),mpo=i($),hp=n($,"LI",{});var uwe=s(hp);fse=n(uwe,"STRONG",{});var uKr=s(fse);gpo=r(uKr,"clip"),uKr.forEach(t),hpo=r(uwe," \u2014 "),xI=n(uwe,"A",{href:!0});var _Kr=s(xI);ppo=r(_Kr,"CLIPModel"),_Kr.forEach(t),upo=r(uwe," (CLIP model)"),uwe.forEach(t),_po=i($),pp=n($,"LI",{});var _we=s(pp);mse=n(_we,"STRONG",{});var bKr=s(mse);bpo=r(bKr,"convbert"),bKr.forEach(t),vpo=r(_we," \u2014 "),$I=n(_we,"A",{href:!0});var vKr=s($I);Fpo=r(vKr,"ConvBertModel"),vKr.forEach(t),Tpo=r(_we," (ConvBERT model)"),_we.forEach(t),Mpo=i($),up=n($,"LI",{});var bwe=s(up);gse=n(bwe,"STRONG",{});var FKr=s(gse);Epo=r(FKr,"convnext"),FKr.forEach(t),Cpo=r(bwe," \u2014 "),kI=n(bwe,"A",{href:!0});var TKr=s(kI);wpo=r(TKr,"ConvNextModel"),TKr.forEach(t),Apo=r(bwe," (ConvNext model)"),bwe.forEach(t),ypo=i($),_p=n($,"LI",{});var vwe=s(_p);hse=n(vwe,"STRONG",{});var MKr=s(hse);Lpo=r(MKr,"ctrl"),MKr.forEach(t),xpo=r(vwe," \u2014 "),SI=n(vwe,"A",{href:!0});var EKr=s(SI);$po=r(EKr,"CTRLModel"),EKr.forEach(t),kpo=r(vwe," (CTRL model)"),vwe.forEach(t),Spo=i($),bp=n($,"LI",{});var Fwe=s(bp);pse=n(Fwe,"STRONG",{});var CKr=s(pse);Rpo=r(CKr,"data2vec-audio"),CKr.forEach(t),Ppo=r(Fwe," \u2014 "),RI=n(Fwe,"A",{href:!0});var wKr=s(RI);Bpo=r(wKr,"Data2VecAudioModel"),wKr.forEach(t),Ipo=r(Fwe," (Data2VecAudio model)"),Fwe.forEach(t),qpo=i($),vp=n($,"LI",{});var Twe=s(vp);use=n(Twe,"STRONG",{});var AKr=s(use);Npo=r(AKr,"data2vec-text"),AKr.forEach(t),jpo=r(Twe," \u2014 "),PI=n(Twe,"A",{href:!0});var yKr=s(PI);Dpo=r(yKr,"Data2VecTextModel"),yKr.forEach(t),Gpo=r(Twe," (Data2VecText model)"),Twe.forEach(t),Opo=i($),Fp=n($,"LI",{});var Mwe=s(Fp);_se=n(Mwe,"STRONG",{});var LKr=s(_se);Vpo=r(LKr,"data2vec-vision"),LKr.forEach(t),Xpo=r(Mwe," \u2014 "),BI=n(Mwe,"A",{href:!0});var xKr=s(BI);zpo=r(xKr,"Data2VecVisionModel"),xKr.forEach(t),Wpo=r(Mwe," (Data2VecVision model)"),Mwe.forEach(t),Qpo=i($),Tp=n($,"LI",{});var Ewe=s(Tp);bse=n(Ewe,"STRONG",{});var $Kr=s(bse);Hpo=r($Kr,"deberta"),$Kr.forEach(t),Upo=r(Ewe," \u2014 "),II=n(Ewe,"A",{href:!0});var kKr=s(II);Jpo=r(kKr,"DebertaModel"),kKr.forEach(t),Ypo=r(Ewe," (DeBERTa model)"),Ewe.forEach(t),Kpo=i($),Mp=n($,"LI",{});var Cwe=s(Mp);vse=n(Cwe,"STRONG",{});var SKr=s(vse);Zpo=r(SKr,"deberta-v2"),SKr.forEach(t),euo=r(Cwe," \u2014 "),qI=n(Cwe,"A",{href:!0});var RKr=s(qI);ouo=r(RKr,"DebertaV2Model"),RKr.forEach(t),ruo=r(Cwe," (DeBERTa-v2 model)"),Cwe.forEach(t),tuo=i($),Ep=n($,"LI",{});var wwe=s(Ep);Fse=n(wwe,"STRONG",{});var PKr=s(Fse);auo=r(PKr,"decision_transformer"),PKr.forEach(t),nuo=r(wwe," \u2014 "),NI=n(wwe,"A",{href:!0});var BKr=s(NI);suo=r(BKr,"DecisionTransformerModel"),BKr.forEach(t),luo=r(wwe," (Decision Transformer model)"),wwe.forEach(t),iuo=i($),Cp=n($,"LI",{});var Awe=s(Cp);Tse=n(Awe,"STRONG",{});var IKr=s(Tse);duo=r(IKr,"deit"),IKr.forEach(t),cuo=r(Awe," \u2014 "),jI=n(Awe,"A",{href:!0});var qKr=s(jI);fuo=r(qKr,"DeiTModel"),qKr.forEach(t),muo=r(Awe," (DeiT model)"),Awe.forEach(t),guo=i($),wp=n($,"LI",{});var ywe=s(wp);Mse=n(ywe,"STRONG",{});var NKr=s(Mse);huo=r(NKr,"detr"),NKr.forEach(t),puo=r(ywe," \u2014 "),DI=n(ywe,"A",{href:!0});var jKr=s(DI);uuo=r(jKr,"DetrModel"),jKr.forEach(t),_uo=r(ywe," (DETR model)"),ywe.forEach(t),buo=i($),Ap=n($,"LI",{});var Lwe=s(Ap);Ese=n(Lwe,"STRONG",{});var DKr=s(Ese);vuo=r(DKr,"distilbert"),DKr.forEach(t),Fuo=r(Lwe," \u2014 "),GI=n(Lwe,"A",{href:!0});var GKr=s(GI);Tuo=r(GKr,"DistilBertModel"),GKr.forEach(t),Muo=r(Lwe," (DistilBERT model)"),Lwe.forEach(t),Euo=i($),yp=n($,"LI",{});var xwe=s(yp);Cse=n(xwe,"STRONG",{});var OKr=s(Cse);Cuo=r(OKr,"dpr"),OKr.forEach(t),wuo=r(xwe," \u2014 "),OI=n(xwe,"A",{href:!0});var VKr=s(OI);Auo=r(VKr,"DPRQuestionEncoder"),VKr.forEach(t),yuo=r(xwe," (DPR model)"),xwe.forEach(t),Luo=i($),Lp=n($,"LI",{});var $we=s(Lp);wse=n($we,"STRONG",{});var XKr=s(wse);xuo=r(XKr,"dpt"),XKr.forEach(t),$uo=r($we," \u2014 "),VI=n($we,"A",{href:!0});var zKr=s(VI);kuo=r(zKr,"DPTModel"),zKr.forEach(t),Suo=r($we," (DPT model)"),$we.forEach(t),Ruo=i($),xp=n($,"LI",{});var kwe=s(xp);Ase=n(kwe,"STRONG",{});var WKr=s(Ase);Puo=r(WKr,"electra"),WKr.forEach(t),Buo=r(kwe," \u2014 "),XI=n(kwe,"A",{href:!0});var QKr=s(XI);Iuo=r(QKr,"ElectraModel"),QKr.forEach(t),quo=r(kwe," (ELECTRA model)"),kwe.forEach(t),Nuo=i($),$p=n($,"LI",{});var Swe=s($p);yse=n(Swe,"STRONG",{});var HKr=s(yse);juo=r(HKr,"flaubert"),HKr.forEach(t),Duo=r(Swe," \u2014 "),zI=n(Swe,"A",{href:!0});var UKr=s(zI);Guo=r(UKr,"FlaubertModel"),UKr.forEach(t),Ouo=r(Swe," (FlauBERT model)"),Swe.forEach(t),Vuo=i($),kp=n($,"LI",{});var Rwe=s(kp);Lse=n(Rwe,"STRONG",{});var JKr=s(Lse);Xuo=r(JKr,"flava"),JKr.forEach(t),zuo=r(Rwe," \u2014 "),WI=n(Rwe,"A",{href:!0});var YKr=s(WI);Wuo=r(YKr,"FlavaModel"),YKr.forEach(t),Quo=r(Rwe," (Flava model)"),Rwe.forEach(t),Huo=i($),Sp=n($,"LI",{});var Pwe=s(Sp);xse=n(Pwe,"STRONG",{});var KKr=s(xse);Uuo=r(KKr,"fnet"),KKr.forEach(t),Juo=r(Pwe," \u2014 "),QI=n(Pwe,"A",{href:!0});var ZKr=s(QI);Yuo=r(ZKr,"FNetModel"),ZKr.forEach(t),Kuo=r(Pwe," (FNet model)"),Pwe.forEach(t),Zuo=i($),Rp=n($,"LI",{});var Bwe=s(Rp);$se=n(Bwe,"STRONG",{});var eZr=s($se);e_o=r(eZr,"fsmt"),eZr.forEach(t),o_o=r(Bwe," \u2014 "),HI=n(Bwe,"A",{href:!0});var oZr=s(HI);r_o=r(oZr,"FSMTModel"),oZr.forEach(t),t_o=r(Bwe," (FairSeq Machine-Translation model)"),Bwe.forEach(t),a_o=i($),Ps=n($,"LI",{});var R$=s(Ps);kse=n(R$,"STRONG",{});var rZr=s(kse);n_o=r(rZr,"funnel"),rZr.forEach(t),s_o=r(R$," \u2014 "),UI=n(R$,"A",{href:!0});var tZr=s(UI);l_o=r(tZr,"FunnelModel"),tZr.forEach(t),i_o=r(R$," or "),JI=n(R$,"A",{href:!0});var aZr=s(JI);d_o=r(aZr,"FunnelBaseModel"),aZr.forEach(t),c_o=r(R$," (Funnel Transformer model)"),R$.forEach(t),f_o=i($),Pp=n($,"LI",{});var Iwe=s(Pp);Sse=n(Iwe,"STRONG",{});var nZr=s(Sse);m_o=r(nZr,"glpn"),nZr.forEach(t),g_o=r(Iwe," \u2014 "),YI=n(Iwe,"A",{href:!0});var sZr=s(YI);h_o=r(sZr,"GLPNModel"),sZr.forEach(t),p_o=r(Iwe," (GLPN model)"),Iwe.forEach(t),u_o=i($),Bp=n($,"LI",{});var qwe=s(Bp);Rse=n(qwe,"STRONG",{});var lZr=s(Rse);__o=r(lZr,"gpt2"),lZr.forEach(t),b_o=r(qwe," \u2014 "),KI=n(qwe,"A",{href:!0});var iZr=s(KI);v_o=r(iZr,"GPT2Model"),iZr.forEach(t),F_o=r(qwe," (OpenAI GPT-2 model)"),qwe.forEach(t),T_o=i($),Ip=n($,"LI",{});var Nwe=s(Ip);Pse=n(Nwe,"STRONG",{});var dZr=s(Pse);M_o=r(dZr,"gpt_neo"),dZr.forEach(t),E_o=r(Nwe," \u2014 "),ZI=n(Nwe,"A",{href:!0});var cZr=s(ZI);C_o=r(cZr,"GPTNeoModel"),cZr.forEach(t),w_o=r(Nwe," (GPT Neo model)"),Nwe.forEach(t),A_o=i($),qp=n($,"LI",{});var jwe=s(qp);Bse=n(jwe,"STRONG",{});var fZr=s(Bse);y_o=r(fZr,"gptj"),fZr.forEach(t),L_o=r(jwe," \u2014 "),eq=n(jwe,"A",{href:!0});var mZr=s(eq);x_o=r(mZr,"GPTJModel"),mZr.forEach(t),$_o=r(jwe," (GPT-J model)"),jwe.forEach(t),k_o=i($),Np=n($,"LI",{});var Dwe=s(Np);Ise=n(Dwe,"STRONG",{});var gZr=s(Ise);S_o=r(gZr,"hubert"),gZr.forEach(t),R_o=r(Dwe," \u2014 "),oq=n(Dwe,"A",{href:!0});var hZr=s(oq);P_o=r(hZr,"HubertModel"),hZr.forEach(t),B_o=r(Dwe," (Hubert model)"),Dwe.forEach(t),I_o=i($),jp=n($,"LI",{});var Gwe=s(jp);qse=n(Gwe,"STRONG",{});var pZr=s(qse);q_o=r(pZr,"ibert"),pZr.forEach(t),N_o=r(Gwe," \u2014 "),rq=n(Gwe,"A",{href:!0});var uZr=s(rq);j_o=r(uZr,"IBertModel"),uZr.forEach(t),D_o=r(Gwe," (I-BERT model)"),Gwe.forEach(t),G_o=i($),Dp=n($,"LI",{});var Owe=s(Dp);Nse=n(Owe,"STRONG",{});var _Zr=s(Nse);O_o=r(_Zr,"imagegpt"),_Zr.forEach(t),V_o=r(Owe," \u2014 "),tq=n(Owe,"A",{href:!0});var bZr=s(tq);X_o=r(bZr,"ImageGPTModel"),bZr.forEach(t),z_o=r(Owe," (ImageGPT model)"),Owe.forEach(t),W_o=i($),Gp=n($,"LI",{});var Vwe=s(Gp);jse=n(Vwe,"STRONG",{});var vZr=s(jse);Q_o=r(vZr,"layoutlm"),vZr.forEach(t),H_o=r(Vwe," \u2014 "),aq=n(Vwe,"A",{href:!0});var FZr=s(aq);U_o=r(FZr,"LayoutLMModel"),FZr.forEach(t),J_o=r(Vwe," (LayoutLM model)"),Vwe.forEach(t),Y_o=i($),Op=n($,"LI",{});var Xwe=s(Op);Dse=n(Xwe,"STRONG",{});var TZr=s(Dse);K_o=r(TZr,"layoutlmv2"),TZr.forEach(t),Z_o=r(Xwe," \u2014 "),nq=n(Xwe,"A",{href:!0});var MZr=s(nq);e0o=r(MZr,"LayoutLMv2Model"),MZr.forEach(t),o0o=r(Xwe," (LayoutLMv2 model)"),Xwe.forEach(t),r0o=i($),Vp=n($,"LI",{});var zwe=s(Vp);Gse=n(zwe,"STRONG",{});var EZr=s(Gse);t0o=r(EZr,"layoutlmv3"),EZr.forEach(t),a0o=r(zwe," \u2014 "),sq=n(zwe,"A",{href:!0});var CZr=s(sq);n0o=r(CZr,"LayoutLMv3Model"),CZr.forEach(t),s0o=r(zwe," (LayoutLMv3 model)"),zwe.forEach(t),l0o=i($),Xp=n($,"LI",{});var Wwe=s(Xp);Ose=n(Wwe,"STRONG",{});var wZr=s(Ose);i0o=r(wZr,"led"),wZr.forEach(t),d0o=r(Wwe," \u2014 "),lq=n(Wwe,"A",{href:!0});var AZr=s(lq);c0o=r(AZr,"LEDModel"),AZr.forEach(t),f0o=r(Wwe," (LED model)"),Wwe.forEach(t),m0o=i($),zp=n($,"LI",{});var Qwe=s(zp);Vse=n(Qwe,"STRONG",{});var yZr=s(Vse);g0o=r(yZr,"longformer"),yZr.forEach(t),h0o=r(Qwe," \u2014 "),iq=n(Qwe,"A",{href:!0});var LZr=s(iq);p0o=r(LZr,"LongformerModel"),LZr.forEach(t),u0o=r(Qwe," (Longformer model)"),Qwe.forEach(t),_0o=i($),Wp=n($,"LI",{});var Hwe=s(Wp);Xse=n(Hwe,"STRONG",{});var xZr=s(Xse);b0o=r(xZr,"luke"),xZr.forEach(t),v0o=r(Hwe," \u2014 "),dq=n(Hwe,"A",{href:!0});var $Zr=s(dq);F0o=r($Zr,"LukeModel"),$Zr.forEach(t),T0o=r(Hwe," (LUKE model)"),Hwe.forEach(t),M0o=i($),Qp=n($,"LI",{});var Uwe=s(Qp);zse=n(Uwe,"STRONG",{});var kZr=s(zse);E0o=r(kZr,"lxmert"),kZr.forEach(t),C0o=r(Uwe," \u2014 "),cq=n(Uwe,"A",{href:!0});var SZr=s(cq);w0o=r(SZr,"LxmertModel"),SZr.forEach(t),A0o=r(Uwe," (LXMERT model)"),Uwe.forEach(t),y0o=i($),Hp=n($,"LI",{});var Jwe=s(Hp);Wse=n(Jwe,"STRONG",{});var RZr=s(Wse);L0o=r(RZr,"m2m_100"),RZr.forEach(t),x0o=r(Jwe," \u2014 "),fq=n(Jwe,"A",{href:!0});var PZr=s(fq);$0o=r(PZr,"M2M100Model"),PZr.forEach(t),k0o=r(Jwe," (M2M100 model)"),Jwe.forEach(t),S0o=i($),Up=n($,"LI",{});var Ywe=s(Up);Qse=n(Ywe,"STRONG",{});var BZr=s(Qse);R0o=r(BZr,"marian"),BZr.forEach(t),P0o=r(Ywe," \u2014 "),mq=n(Ywe,"A",{href:!0});var IZr=s(mq);B0o=r(IZr,"MarianModel"),IZr.forEach(t),I0o=r(Ywe," (Marian model)"),Ywe.forEach(t),q0o=i($),Jp=n($,"LI",{});var Kwe=s(Jp);Hse=n(Kwe,"STRONG",{});var qZr=s(Hse);N0o=r(qZr,"maskformer"),qZr.forEach(t),j0o=r(Kwe," \u2014 "),gq=n(Kwe,"A",{href:!0});var NZr=s(gq);D0o=r(NZr,"MaskFormerModel"),NZr.forEach(t),G0o=r(Kwe," (MaskFormer model)"),Kwe.forEach(t),O0o=i($),Yp=n($,"LI",{});var Zwe=s(Yp);Use=n(Zwe,"STRONG",{});var jZr=s(Use);V0o=r(jZr,"mbart"),jZr.forEach(t),X0o=r(Zwe," \u2014 "),hq=n(Zwe,"A",{href:!0});var DZr=s(hq);z0o=r(DZr,"MBartModel"),DZr.forEach(t),W0o=r(Zwe," (mBART model)"),Zwe.forEach(t),Q0o=i($),Kp=n($,"LI",{});var eAe=s(Kp);Jse=n(eAe,"STRONG",{});var GZr=s(Jse);H0o=r(GZr,"megatron-bert"),GZr.forEach(t),U0o=r(eAe," \u2014 "),pq=n(eAe,"A",{href:!0});var OZr=s(pq);J0o=r(OZr,"MegatronBertModel"),OZr.forEach(t),Y0o=r(eAe," (MegatronBert model)"),eAe.forEach(t),K0o=i($),Zp=n($,"LI",{});var oAe=s(Zp);Yse=n(oAe,"STRONG",{});var VZr=s(Yse);Z0o=r(VZr,"mobilebert"),VZr.forEach(t),e1o=r(oAe," \u2014 "),uq=n(oAe,"A",{href:!0});var XZr=s(uq);o1o=r(XZr,"MobileBertModel"),XZr.forEach(t),r1o=r(oAe," (MobileBERT model)"),oAe.forEach(t),t1o=i($),eu=n($,"LI",{});var rAe=s(eu);Kse=n(rAe,"STRONG",{});var zZr=s(Kse);a1o=r(zZr,"mpnet"),zZr.forEach(t),n1o=r(rAe," \u2014 "),_q=n(rAe,"A",{href:!0});var WZr=s(_q);s1o=r(WZr,"MPNetModel"),WZr.forEach(t),l1o=r(rAe," (MPNet model)"),rAe.forEach(t),i1o=i($),ou=n($,"LI",{});var tAe=s(ou);Zse=n(tAe,"STRONG",{});var QZr=s(Zse);d1o=r(QZr,"mt5"),QZr.forEach(t),c1o=r(tAe," \u2014 "),bq=n(tAe,"A",{href:!0});var HZr=s(bq);f1o=r(HZr,"MT5Model"),HZr.forEach(t),m1o=r(tAe," (mT5 model)"),tAe.forEach(t),g1o=i($),ru=n($,"LI",{});var aAe=s(ru);ele=n(aAe,"STRONG",{});var UZr=s(ele);h1o=r(UZr,"nystromformer"),UZr.forEach(t),p1o=r(aAe," \u2014 "),vq=n(aAe,"A",{href:!0});var JZr=s(vq);u1o=r(JZr,"NystromformerModel"),JZr.forEach(t),_1o=r(aAe," (Nystromformer model)"),aAe.forEach(t),b1o=i($),tu=n($,"LI",{});var nAe=s(tu);ole=n(nAe,"STRONG",{});var YZr=s(ole);v1o=r(YZr,"openai-gpt"),YZr.forEach(t),F1o=r(nAe," \u2014 "),Fq=n(nAe,"A",{href:!0});var KZr=s(Fq);T1o=r(KZr,"OpenAIGPTModel"),KZr.forEach(t),M1o=r(nAe," (OpenAI GPT model)"),nAe.forEach(t),E1o=i($),au=n($,"LI",{});var sAe=s(au);rle=n(sAe,"STRONG",{});var ZZr=s(rle);C1o=r(ZZr,"opt"),ZZr.forEach(t),w1o=r(sAe," \u2014 "),Tq=n(sAe,"A",{href:!0});var eet=s(Tq);A1o=r(eet,"OPTModel"),eet.forEach(t),y1o=r(sAe," (OPT model)"),sAe.forEach(t),L1o=i($),nu=n($,"LI",{});var lAe=s(nu);tle=n(lAe,"STRONG",{});var oet=s(tle);x1o=r(oet,"pegasus"),oet.forEach(t),$1o=r(lAe," \u2014 "),Mq=n(lAe,"A",{href:!0});var ret=s(Mq);k1o=r(ret,"PegasusModel"),ret.forEach(t),S1o=r(lAe," (Pegasus model)"),lAe.forEach(t),R1o=i($),su=n($,"LI",{});var iAe=s(su);ale=n(iAe,"STRONG",{});var tet=s(ale);P1o=r(tet,"perceiver"),tet.forEach(t),B1o=r(iAe," \u2014 "),Eq=n(iAe,"A",{href:!0});var aet=s(Eq);I1o=r(aet,"PerceiverModel"),aet.forEach(t),q1o=r(iAe," (Perceiver model)"),iAe.forEach(t),N1o=i($),lu=n($,"LI",{});var dAe=s(lu);nle=n(dAe,"STRONG",{});var net=s(nle);j1o=r(net,"plbart"),net.forEach(t),D1o=r(dAe," \u2014 "),Cq=n(dAe,"A",{href:!0});var set=s(Cq);G1o=r(set,"PLBartModel"),set.forEach(t),O1o=r(dAe," (PLBart model)"),dAe.forEach(t),V1o=i($),iu=n($,"LI",{});var cAe=s(iu);sle=n(cAe,"STRONG",{});var iet=s(sle);X1o=r(iet,"poolformer"),iet.forEach(t),z1o=r(cAe," \u2014 "),wq=n(cAe,"A",{href:!0});var det=s(wq);W1o=r(det,"PoolFormerModel"),det.forEach(t),Q1o=r(cAe," (PoolFormer model)"),cAe.forEach(t),H1o=i($),du=n($,"LI",{});var fAe=s(du);lle=n(fAe,"STRONG",{});var cet=s(lle);U1o=r(cet,"prophetnet"),cet.forEach(t),J1o=r(fAe," \u2014 "),Aq=n(fAe,"A",{href:!0});var fet=s(Aq);Y1o=r(fet,"ProphetNetModel"),fet.forEach(t),K1o=r(fAe," (ProphetNet model)"),fAe.forEach(t),Z1o=i($),cu=n($,"LI",{});var mAe=s(cu);ile=n(mAe,"STRONG",{});var met=s(ile);ebo=r(met,"qdqbert"),met.forEach(t),obo=r(mAe," \u2014 "),yq=n(mAe,"A",{href:!0});var get=s(yq);rbo=r(get,"QDQBertModel"),get.forEach(t),tbo=r(mAe," (QDQBert model)"),mAe.forEach(t),abo=i($),fu=n($,"LI",{});var gAe=s(fu);dle=n(gAe,"STRONG",{});var het=s(dle);nbo=r(het,"reformer"),het.forEach(t),sbo=r(gAe," \u2014 "),Lq=n(gAe,"A",{href:!0});var pet=s(Lq);lbo=r(pet,"ReformerModel"),pet.forEach(t),ibo=r(gAe," (Reformer model)"),gAe.forEach(t),dbo=i($),mu=n($,"LI",{});var hAe=s(mu);cle=n(hAe,"STRONG",{});var uet=s(cle);cbo=r(uet,"regnet"),uet.forEach(t),fbo=r(hAe," \u2014 "),xq=n(hAe,"A",{href:!0});var _et=s(xq);mbo=r(_et,"RegNetModel"),_et.forEach(t),gbo=r(hAe," (RegNet model)"),hAe.forEach(t),hbo=i($),gu=n($,"LI",{});var pAe=s(gu);fle=n(pAe,"STRONG",{});var bet=s(fle);pbo=r(bet,"rembert"),bet.forEach(t),ubo=r(pAe," \u2014 "),$q=n(pAe,"A",{href:!0});var vet=s($q);_bo=r(vet,"RemBertModel"),vet.forEach(t),bbo=r(pAe," (RemBERT model)"),pAe.forEach(t),vbo=i($),hu=n($,"LI",{});var uAe=s(hu);mle=n(uAe,"STRONG",{});var Fet=s(mle);Fbo=r(Fet,"resnet"),Fet.forEach(t),Tbo=r(uAe," \u2014 "),kq=n(uAe,"A",{href:!0});var Tet=s(kq);Mbo=r(Tet,"ResNetModel"),Tet.forEach(t),Ebo=r(uAe," (ResNet model)"),uAe.forEach(t),Cbo=i($),pu=n($,"LI",{});var _Ae=s(pu);gle=n(_Ae,"STRONG",{});var Met=s(gle);wbo=r(Met,"retribert"),Met.forEach(t),Abo=r(_Ae," \u2014 "),Sq=n(_Ae,"A",{href:!0});var Eet=s(Sq);ybo=r(Eet,"RetriBertModel"),Eet.forEach(t),Lbo=r(_Ae," (RetriBERT model)"),_Ae.forEach(t),xbo=i($),uu=n($,"LI",{});var bAe=s(uu);hle=n(bAe,"STRONG",{});var Cet=s(hle);$bo=r(Cet,"roberta"),Cet.forEach(t),kbo=r(bAe," \u2014 "),Rq=n(bAe,"A",{href:!0});var wet=s(Rq);Sbo=r(wet,"RobertaModel"),wet.forEach(t),Rbo=r(bAe," (RoBERTa model)"),bAe.forEach(t),Pbo=i($),_u=n($,"LI",{});var vAe=s(_u);ple=n(vAe,"STRONG",{});var Aet=s(ple);Bbo=r(Aet,"roformer"),Aet.forEach(t),Ibo=r(vAe," \u2014 "),Pq=n(vAe,"A",{href:!0});var yet=s(Pq);qbo=r(yet,"RoFormerModel"),yet.forEach(t),Nbo=r(vAe," (RoFormer model)"),vAe.forEach(t),jbo=i($),bu=n($,"LI",{});var FAe=s(bu);ule=n(FAe,"STRONG",{});var Let=s(ule);Dbo=r(Let,"segformer"),Let.forEach(t),Gbo=r(FAe," \u2014 "),Bq=n(FAe,"A",{href:!0});var xet=s(Bq);Obo=r(xet,"SegformerModel"),xet.forEach(t),Vbo=r(FAe," (SegFormer model)"),FAe.forEach(t),Xbo=i($),vu=n($,"LI",{});var TAe=s(vu);_le=n(TAe,"STRONG",{});var $et=s(_le);zbo=r($et,"sew"),$et.forEach(t),Wbo=r(TAe," \u2014 "),Iq=n(TAe,"A",{href:!0});var ket=s(Iq);Qbo=r(ket,"SEWModel"),ket.forEach(t),Hbo=r(TAe," (SEW model)"),TAe.forEach(t),Ubo=i($),Fu=n($,"LI",{});var MAe=s(Fu);ble=n(MAe,"STRONG",{});var Set=s(ble);Jbo=r(Set,"sew-d"),Set.forEach(t),Ybo=r(MAe," \u2014 "),qq=n(MAe,"A",{href:!0});var Ret=s(qq);Kbo=r(Ret,"SEWDModel"),Ret.forEach(t),Zbo=r(MAe," (SEW-D model)"),MAe.forEach(t),e2o=i($),Tu=n($,"LI",{});var EAe=s(Tu);vle=n(EAe,"STRONG",{});var Pet=s(vle);o2o=r(Pet,"speech_to_text"),Pet.forEach(t),r2o=r(EAe," \u2014 "),Nq=n(EAe,"A",{href:!0});var Bet=s(Nq);t2o=r(Bet,"Speech2TextModel"),Bet.forEach(t),a2o=r(EAe," (Speech2Text model)"),EAe.forEach(t),n2o=i($),Mu=n($,"LI",{});var CAe=s(Mu);Fle=n(CAe,"STRONG",{});var Iet=s(Fle);s2o=r(Iet,"splinter"),Iet.forEach(t),l2o=r(CAe," \u2014 "),jq=n(CAe,"A",{href:!0});var qet=s(jq);i2o=r(qet,"SplinterModel"),qet.forEach(t),d2o=r(CAe," (Splinter model)"),CAe.forEach(t),c2o=i($),Eu=n($,"LI",{});var wAe=s(Eu);Tle=n(wAe,"STRONG",{});var Net=s(Tle);f2o=r(Net,"squeezebert"),Net.forEach(t),m2o=r(wAe," \u2014 "),Dq=n(wAe,"A",{href:!0});var jet=s(Dq);g2o=r(jet,"SqueezeBertModel"),jet.forEach(t),h2o=r(wAe," (SqueezeBERT model)"),wAe.forEach(t),p2o=i($),Cu=n($,"LI",{});var AAe=s(Cu);Mle=n(AAe,"STRONG",{});var Det=s(Mle);u2o=r(Det,"swin"),Det.forEach(t),_2o=r(AAe," \u2014 "),Gq=n(AAe,"A",{href:!0});var Get=s(Gq);b2o=r(Get,"SwinModel"),Get.forEach(t),v2o=r(AAe," (Swin model)"),AAe.forEach(t),F2o=i($),wu=n($,"LI",{});var yAe=s(wu);Ele=n(yAe,"STRONG",{});var Oet=s(Ele);T2o=r(Oet,"t5"),Oet.forEach(t),M2o=r(yAe," \u2014 "),Oq=n(yAe,"A",{href:!0});var Vet=s(Oq);E2o=r(Vet,"T5Model"),Vet.forEach(t),C2o=r(yAe," (T5 model)"),yAe.forEach(t),w2o=i($),Au=n($,"LI",{});var LAe=s(Au);Cle=n(LAe,"STRONG",{});var Xet=s(Cle);A2o=r(Xet,"tapas"),Xet.forEach(t),y2o=r(LAe," \u2014 "),Vq=n(LAe,"A",{href:!0});var zet=s(Vq);L2o=r(zet,"TapasModel"),zet.forEach(t),x2o=r(LAe," (TAPAS model)"),LAe.forEach(t),$2o=i($),yu=n($,"LI",{});var xAe=s(yu);wle=n(xAe,"STRONG",{});var Wet=s(wle);k2o=r(Wet,"trajectory_transformer"),Wet.forEach(t),S2o=r(xAe," \u2014 "),Xq=n(xAe,"A",{href:!0});var Qet=s(Xq);R2o=r(Qet,"TrajectoryTransformerModel"),Qet.forEach(t),P2o=r(xAe," (Trajectory Transformer model)"),xAe.forEach(t),B2o=i($),Lu=n($,"LI",{});var $Ae=s(Lu);Ale=n($Ae,"STRONG",{});var Het=s(Ale);I2o=r(Het,"transfo-xl"),Het.forEach(t),q2o=r($Ae," \u2014 "),zq=n($Ae,"A",{href:!0});var Uet=s(zq);N2o=r(Uet,"TransfoXLModel"),Uet.forEach(t),j2o=r($Ae," (Transformer-XL model)"),$Ae.forEach(t),D2o=i($),xu=n($,"LI",{});var kAe=s(xu);yle=n(kAe,"STRONG",{});var Jet=s(yle);G2o=r(Jet,"unispeech"),Jet.forEach(t),O2o=r(kAe," \u2014 "),Wq=n(kAe,"A",{href:!0});var Yet=s(Wq);V2o=r(Yet,"UniSpeechModel"),Yet.forEach(t),X2o=r(kAe," (UniSpeech model)"),kAe.forEach(t),z2o=i($),$u=n($,"LI",{});var SAe=s($u);Lle=n(SAe,"STRONG",{});var Ket=s(Lle);W2o=r(Ket,"unispeech-sat"),Ket.forEach(t),Q2o=r(SAe," \u2014 "),Qq=n(SAe,"A",{href:!0});var Zet=s(Qq);H2o=r(Zet,"UniSpeechSatModel"),Zet.forEach(t),U2o=r(SAe," (UniSpeechSat model)"),SAe.forEach(t),J2o=i($),ku=n($,"LI",{});var RAe=s(ku);xle=n(RAe,"STRONG",{});var eot=s(xle);Y2o=r(eot,"van"),eot.forEach(t),K2o=r(RAe," \u2014 "),Hq=n(RAe,"A",{href:!0});var oot=s(Hq);Z2o=r(oot,"VanModel"),oot.forEach(t),evo=r(RAe," (VAN model)"),RAe.forEach(t),ovo=i($),Su=n($,"LI",{});var PAe=s(Su);$le=n(PAe,"STRONG",{});var rot=s($le);rvo=r(rot,"vilt"),rot.forEach(t),tvo=r(PAe," \u2014 "),Uq=n(PAe,"A",{href:!0});var tot=s(Uq);avo=r(tot,"ViltModel"),tot.forEach(t),nvo=r(PAe," (ViLT model)"),PAe.forEach(t),svo=i($),Ru=n($,"LI",{});var BAe=s(Ru);kle=n(BAe,"STRONG",{});var aot=s(kle);lvo=r(aot,"vision-text-dual-encoder"),aot.forEach(t),ivo=r(BAe," \u2014 "),Jq=n(BAe,"A",{href:!0});var not=s(Jq);dvo=r(not,"VisionTextDualEncoderModel"),not.forEach(t),cvo=r(BAe," (VisionTextDualEncoder model)"),BAe.forEach(t),fvo=i($),Pu=n($,"LI",{});var IAe=s(Pu);Sle=n(IAe,"STRONG",{});var sot=s(Sle);mvo=r(sot,"visual_bert"),sot.forEach(t),gvo=r(IAe," \u2014 "),Yq=n(IAe,"A",{href:!0});var lot=s(Yq);hvo=r(lot,"VisualBertModel"),lot.forEach(t),pvo=r(IAe," (VisualBert model)"),IAe.forEach(t),uvo=i($),Bu=n($,"LI",{});var qAe=s(Bu);Rle=n(qAe,"STRONG",{});var iot=s(Rle);_vo=r(iot,"vit"),iot.forEach(t),bvo=r(qAe," \u2014 "),Kq=n(qAe,"A",{href:!0});var dot=s(Kq);vvo=r(dot,"ViTModel"),dot.forEach(t),Fvo=r(qAe," (ViT model)"),qAe.forEach(t),Tvo=i($),Iu=n($,"LI",{});var NAe=s(Iu);Ple=n(NAe,"STRONG",{});var cot=s(Ple);Mvo=r(cot,"vit_mae"),cot.forEach(t),Evo=r(NAe," \u2014 "),Zq=n(NAe,"A",{href:!0});var fot=s(Zq);Cvo=r(fot,"ViTMAEModel"),fot.forEach(t),wvo=r(NAe," (ViTMAE model)"),NAe.forEach(t),Avo=i($),qu=n($,"LI",{});var jAe=s(qu);Ble=n(jAe,"STRONG",{});var mot=s(Ble);yvo=r(mot,"wav2vec2"),mot.forEach(t),Lvo=r(jAe," \u2014 "),eN=n(jAe,"A",{href:!0});var got=s(eN);xvo=r(got,"Wav2Vec2Model"),got.forEach(t),$vo=r(jAe," (Wav2Vec2 model)"),jAe.forEach(t),kvo=i($),Nu=n($,"LI",{});var DAe=s(Nu);Ile=n(DAe,"STRONG",{});var hot=s(Ile);Svo=r(hot,"wav2vec2-conformer"),hot.forEach(t),Rvo=r(DAe," \u2014 "),oN=n(DAe,"A",{href:!0});var pot=s(oN);Pvo=r(pot,"Wav2Vec2ConformerModel"),pot.forEach(t),Bvo=r(DAe," (Wav2Vec2-Conformer model)"),DAe.forEach(t),Ivo=i($),ju=n($,"LI",{});var GAe=s(ju);qle=n(GAe,"STRONG",{});var uot=s(qle);qvo=r(uot,"wavlm"),uot.forEach(t),Nvo=r(GAe," \u2014 "),rN=n(GAe,"A",{href:!0});var _ot=s(rN);jvo=r(_ot,"WavLMModel"),_ot.forEach(t),Dvo=r(GAe," (WavLM model)"),GAe.forEach(t),Gvo=i($),Du=n($,"LI",{});var OAe=s(Du);Nle=n(OAe,"STRONG",{});var bot=s(Nle);Ovo=r(bot,"xglm"),bot.forEach(t),Vvo=r(OAe," \u2014 "),tN=n(OAe,"A",{href:!0});var vot=s(tN);Xvo=r(vot,"XGLMModel"),vot.forEach(t),zvo=r(OAe," (XGLM model)"),OAe.forEach(t),Wvo=i($),Gu=n($,"LI",{});var VAe=s(Gu);jle=n(VAe,"STRONG",{});var Fot=s(jle);Qvo=r(Fot,"xlm"),Fot.forEach(t),Hvo=r(VAe," \u2014 "),aN=n(VAe,"A",{href:!0});var Tot=s(aN);Uvo=r(Tot,"XLMModel"),Tot.forEach(t),Jvo=r(VAe," (XLM model)"),VAe.forEach(t),Yvo=i($),Ou=n($,"LI",{});var XAe=s(Ou);Dle=n(XAe,"STRONG",{});var Mot=s(Dle);Kvo=r(Mot,"xlm-prophetnet"),Mot.forEach(t),Zvo=r(XAe," \u2014 "),nN=n(XAe,"A",{href:!0});var Eot=s(nN);eFo=r(Eot,"XLMProphetNetModel"),Eot.forEach(t),oFo=r(XAe," (XLMProphetNet model)"),XAe.forEach(t),rFo=i($),Vu=n($,"LI",{});var zAe=s(Vu);Gle=n(zAe,"STRONG",{});var Cot=s(Gle);tFo=r(Cot,"xlm-roberta"),Cot.forEach(t),aFo=r(zAe," \u2014 "),sN=n(zAe,"A",{href:!0});var wot=s(sN);nFo=r(wot,"XLMRobertaModel"),wot.forEach(t),sFo=r(zAe," (XLM-RoBERTa model)"),zAe.forEach(t),lFo=i($),Xu=n($,"LI",{});var WAe=s(Xu);Ole=n(WAe,"STRONG",{});var Aot=s(Ole);iFo=r(Aot,"xlm-roberta-xl"),Aot.forEach(t),dFo=r(WAe," \u2014 "),lN=n(WAe,"A",{href:!0});var yot=s(lN);cFo=r(yot,"XLMRobertaXLModel"),yot.forEach(t),fFo=r(WAe," (XLM-RoBERTa-XL model)"),WAe.forEach(t),mFo=i($),zu=n($,"LI",{});var QAe=s(zu);Vle=n(QAe,"STRONG",{});var Lot=s(Vle);gFo=r(Lot,"xlnet"),Lot.forEach(t),hFo=r(QAe," \u2014 "),iN=n(QAe,"A",{href:!0});var xot=s(iN);pFo=r(xot,"XLNetModel"),xot.forEach(t),uFo=r(QAe," (XLNet model)"),QAe.forEach(t),_Fo=i($),Wu=n($,"LI",{});var HAe=s(Wu);Xle=n(HAe,"STRONG",{});var $ot=s(Xle);bFo=r($ot,"yolos"),$ot.forEach(t),vFo=r(HAe," \u2014 "),dN=n(HAe,"A",{href:!0});var kot=s(dN);FFo=r(kot,"YolosModel"),kot.forEach(t),TFo=r(HAe," (YOLOS model)"),HAe.forEach(t),MFo=i($),Qu=n($,"LI",{});var UAe=s(Qu);zle=n(UAe,"STRONG",{});var Sot=s(zle);EFo=r(Sot,"yoso"),Sot.forEach(t),CFo=r(UAe," \u2014 "),cN=n(UAe,"A",{href:!0});var Rot=s(cN);wFo=r(Rot,"YosoModel"),Rot.forEach(t),AFo=r(UAe," (YOSO model)"),UAe.forEach(t),$.forEach(t),yFo=i(oa),Hu=n(oa,"P",{});var JAe=s(Hu);LFo=r(JAe,"The model is set in evaluation mode by default using "),Wle=n(JAe,"CODE",{});var Pot=s(Wle);xFo=r(Pot,"model.eval()"),Pot.forEach(t),$Fo=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=n(JAe,"CODE",{});var Bot=s(Qle);kFo=r(Bot,"model.train()"),Bot.forEach(t),JAe.forEach(t),SFo=i(oa),T(Uu.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),kqe=i(f),Li=n(f,"H2",{class:!0});var Bje=s(Li);Ju=n(Bje,"A",{id:!0,class:!0,href:!0});var Iot=s(Ju);Hle=n(Iot,"SPAN",{});var qot=s(Hle);T(UA.$$.fragment,qot),qot.forEach(t),Iot.forEach(t),RFo=i(Bje),Ule=n(Bje,"SPAN",{});var Not=s(Ule);PFo=r(Not,"AutoModelForPreTraining"),Not.forEach(t),Bje.forEach(t),Sqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(JA.$$.fragment,Os),BFo=i(Os),xi=n(Os,"P",{});var ZK=s(xi);IFo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fN=n(ZK,"A",{href:!0});var jot=s(fN);qFo=r(jot,"from_pretrained()"),jot.forEach(t),NFo=r(ZK," class method or the "),mN=n(ZK,"A",{href:!0});var Dot=s(mN);jFo=r(Dot,"from_config()"),Dot.forEach(t),DFo=r(ZK,` class
method.`),ZK.forEach(t),GFo=i(Os),YA=n(Os,"P",{});var Ije=s(YA);OFo=r(Ije,"This class cannot be instantiated directly using "),Jle=n(Ije,"CODE",{});var Got=s(Jle);VFo=r(Got,"__init__()"),Got.forEach(t),XFo=r(Ije," (throws an error)."),Ije.forEach(t),zFo=i(Os),at=n(Os,"DIV",{class:!0});var C3=s(at);T(KA.$$.fragment,C3),WFo=i(C3),Yle=n(C3,"P",{});var Oot=s(Yle);QFo=r(Oot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oot.forEach(t),HFo=i(C3),$i=n(C3,"P",{});var eZ=s($i);UFo=r(eZ,`Note:
Loading a model from its configuration file does `),Kle=n(eZ,"STRONG",{});var Vot=s(Kle);JFo=r(Vot,"not"),Vot.forEach(t),YFo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=n(eZ,"A",{href:!0});var Xot=s(gN);KFo=r(Xot,"from_pretrained()"),Xot.forEach(t),ZFo=r(eZ," to load the model weights."),eZ.forEach(t),e6o=i(C3),T(Yu.$$.fragment,C3),C3.forEach(t),o6o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(ZA.$$.fragment,ra),r6o=i(ra),Zle=n(ra,"P",{});var zot=s(Zle);t6o=r(zot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zot.forEach(t),a6o=i(ra),xa=n(ra,"P",{});var w3=s(xa);n6o=r(w3,"The model class to instantiate is selected based on the "),eie=n(w3,"CODE",{});var Wot=s(eie);s6o=r(Wot,"model_type"),Wot.forEach(t),l6o=r(w3,` property of the config object (either
passed as an argument or loaded from `),oie=n(w3,"CODE",{});var Qot=s(oie);i6o=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),d6o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=n(w3,"CODE",{});var Hot=s(rie);c6o=r(Hot,"pretrained_model_name_or_path"),Hot.forEach(t),f6o=r(w3,":"),w3.forEach(t),m6o=i(ra),G=n(ra,"UL",{});var O=s(G);Ku=n(O,"LI",{});var YAe=s(Ku);tie=n(YAe,"STRONG",{});var Uot=s(tie);g6o=r(Uot,"albert"),Uot.forEach(t),h6o=r(YAe," \u2014 "),hN=n(YAe,"A",{href:!0});var Jot=s(hN);p6o=r(Jot,"AlbertForPreTraining"),Jot.forEach(t),u6o=r(YAe," (ALBERT model)"),YAe.forEach(t),_6o=i(O),Zu=n(O,"LI",{});var KAe=s(Zu);aie=n(KAe,"STRONG",{});var Yot=s(aie);b6o=r(Yot,"bart"),Yot.forEach(t),v6o=r(KAe," \u2014 "),pN=n(KAe,"A",{href:!0});var Kot=s(pN);F6o=r(Kot,"BartForConditionalGeneration"),Kot.forEach(t),T6o=r(KAe," (BART model)"),KAe.forEach(t),M6o=i(O),e_=n(O,"LI",{});var ZAe=s(e_);nie=n(ZAe,"STRONG",{});var Zot=s(nie);E6o=r(Zot,"bert"),Zot.forEach(t),C6o=r(ZAe," \u2014 "),uN=n(ZAe,"A",{href:!0});var ert=s(uN);w6o=r(ert,"BertForPreTraining"),ert.forEach(t),A6o=r(ZAe," (BERT model)"),ZAe.forEach(t),y6o=i(O),o_=n(O,"LI",{});var eye=s(o_);sie=n(eye,"STRONG",{});var ort=s(sie);L6o=r(ort,"big_bird"),ort.forEach(t),x6o=r(eye," \u2014 "),_N=n(eye,"A",{href:!0});var rrt=s(_N);$6o=r(rrt,"BigBirdForPreTraining"),rrt.forEach(t),k6o=r(eye," (BigBird model)"),eye.forEach(t),S6o=i(O),r_=n(O,"LI",{});var oye=s(r_);lie=n(oye,"STRONG",{});var trt=s(lie);R6o=r(trt,"camembert"),trt.forEach(t),P6o=r(oye," \u2014 "),bN=n(oye,"A",{href:!0});var art=s(bN);B6o=r(art,"CamembertForMaskedLM"),art.forEach(t),I6o=r(oye," (CamemBERT model)"),oye.forEach(t),q6o=i(O),t_=n(O,"LI",{});var rye=s(t_);iie=n(rye,"STRONG",{});var nrt=s(iie);N6o=r(nrt,"ctrl"),nrt.forEach(t),j6o=r(rye," \u2014 "),vN=n(rye,"A",{href:!0});var srt=s(vN);D6o=r(srt,"CTRLLMHeadModel"),srt.forEach(t),G6o=r(rye," (CTRL model)"),rye.forEach(t),O6o=i(O),a_=n(O,"LI",{});var tye=s(a_);die=n(tye,"STRONG",{});var lrt=s(die);V6o=r(lrt,"data2vec-text"),lrt.forEach(t),X6o=r(tye," \u2014 "),FN=n(tye,"A",{href:!0});var irt=s(FN);z6o=r(irt,"Data2VecTextForMaskedLM"),irt.forEach(t),W6o=r(tye," (Data2VecText model)"),tye.forEach(t),Q6o=i(O),n_=n(O,"LI",{});var aye=s(n_);cie=n(aye,"STRONG",{});var drt=s(cie);H6o=r(drt,"deberta"),drt.forEach(t),U6o=r(aye," \u2014 "),TN=n(aye,"A",{href:!0});var crt=s(TN);J6o=r(crt,"DebertaForMaskedLM"),crt.forEach(t),Y6o=r(aye," (DeBERTa model)"),aye.forEach(t),K6o=i(O),s_=n(O,"LI",{});var nye=s(s_);fie=n(nye,"STRONG",{});var frt=s(fie);Z6o=r(frt,"deberta-v2"),frt.forEach(t),eTo=r(nye," \u2014 "),MN=n(nye,"A",{href:!0});var mrt=s(MN);oTo=r(mrt,"DebertaV2ForMaskedLM"),mrt.forEach(t),rTo=r(nye," (DeBERTa-v2 model)"),nye.forEach(t),tTo=i(O),l_=n(O,"LI",{});var sye=s(l_);mie=n(sye,"STRONG",{});var grt=s(mie);aTo=r(grt,"distilbert"),grt.forEach(t),nTo=r(sye," \u2014 "),EN=n(sye,"A",{href:!0});var hrt=s(EN);sTo=r(hrt,"DistilBertForMaskedLM"),hrt.forEach(t),lTo=r(sye," (DistilBERT model)"),sye.forEach(t),iTo=i(O),i_=n(O,"LI",{});var lye=s(i_);gie=n(lye,"STRONG",{});var prt=s(gie);dTo=r(prt,"electra"),prt.forEach(t),cTo=r(lye," \u2014 "),CN=n(lye,"A",{href:!0});var urt=s(CN);fTo=r(urt,"ElectraForPreTraining"),urt.forEach(t),mTo=r(lye," (ELECTRA model)"),lye.forEach(t),gTo=i(O),d_=n(O,"LI",{});var iye=s(d_);hie=n(iye,"STRONG",{});var _rt=s(hie);hTo=r(_rt,"flaubert"),_rt.forEach(t),pTo=r(iye," \u2014 "),wN=n(iye,"A",{href:!0});var brt=s(wN);uTo=r(brt,"FlaubertWithLMHeadModel"),brt.forEach(t),_To=r(iye," (FlauBERT model)"),iye.forEach(t),bTo=i(O),c_=n(O,"LI",{});var dye=s(c_);pie=n(dye,"STRONG",{});var vrt=s(pie);vTo=r(vrt,"flava"),vrt.forEach(t),FTo=r(dye," \u2014 "),AN=n(dye,"A",{href:!0});var Frt=s(AN);TTo=r(Frt,"FlavaForPreTraining"),Frt.forEach(t),MTo=r(dye," (Flava model)"),dye.forEach(t),ETo=i(O),f_=n(O,"LI",{});var cye=s(f_);uie=n(cye,"STRONG",{});var Trt=s(uie);CTo=r(Trt,"fnet"),Trt.forEach(t),wTo=r(cye," \u2014 "),yN=n(cye,"A",{href:!0});var Mrt=s(yN);ATo=r(Mrt,"FNetForPreTraining"),Mrt.forEach(t),yTo=r(cye," (FNet model)"),cye.forEach(t),LTo=i(O),m_=n(O,"LI",{});var fye=s(m_);_ie=n(fye,"STRONG",{});var Ert=s(_ie);xTo=r(Ert,"fsmt"),Ert.forEach(t),$To=r(fye," \u2014 "),LN=n(fye,"A",{href:!0});var Crt=s(LN);kTo=r(Crt,"FSMTForConditionalGeneration"),Crt.forEach(t),STo=r(fye," (FairSeq Machine-Translation model)"),fye.forEach(t),RTo=i(O),g_=n(O,"LI",{});var mye=s(g_);bie=n(mye,"STRONG",{});var wrt=s(bie);PTo=r(wrt,"funnel"),wrt.forEach(t),BTo=r(mye," \u2014 "),xN=n(mye,"A",{href:!0});var Art=s(xN);ITo=r(Art,"FunnelForPreTraining"),Art.forEach(t),qTo=r(mye," (Funnel Transformer model)"),mye.forEach(t),NTo=i(O),h_=n(O,"LI",{});var gye=s(h_);vie=n(gye,"STRONG",{});var yrt=s(vie);jTo=r(yrt,"gpt2"),yrt.forEach(t),DTo=r(gye," \u2014 "),$N=n(gye,"A",{href:!0});var Lrt=s($N);GTo=r(Lrt,"GPT2LMHeadModel"),Lrt.forEach(t),OTo=r(gye," (OpenAI GPT-2 model)"),gye.forEach(t),VTo=i(O),p_=n(O,"LI",{});var hye=s(p_);Fie=n(hye,"STRONG",{});var xrt=s(Fie);XTo=r(xrt,"ibert"),xrt.forEach(t),zTo=r(hye," \u2014 "),kN=n(hye,"A",{href:!0});var $rt=s(kN);WTo=r($rt,"IBertForMaskedLM"),$rt.forEach(t),QTo=r(hye," (I-BERT model)"),hye.forEach(t),HTo=i(O),u_=n(O,"LI",{});var pye=s(u_);Tie=n(pye,"STRONG",{});var krt=s(Tie);UTo=r(krt,"layoutlm"),krt.forEach(t),JTo=r(pye," \u2014 "),SN=n(pye,"A",{href:!0});var Srt=s(SN);YTo=r(Srt,"LayoutLMForMaskedLM"),Srt.forEach(t),KTo=r(pye," (LayoutLM model)"),pye.forEach(t),ZTo=i(O),__=n(O,"LI",{});var uye=s(__);Mie=n(uye,"STRONG",{});var Rrt=s(Mie);e7o=r(Rrt,"longformer"),Rrt.forEach(t),o7o=r(uye," \u2014 "),RN=n(uye,"A",{href:!0});var Prt=s(RN);r7o=r(Prt,"LongformerForMaskedLM"),Prt.forEach(t),t7o=r(uye," (Longformer model)"),uye.forEach(t),a7o=i(O),b_=n(O,"LI",{});var _ye=s(b_);Eie=n(_ye,"STRONG",{});var Brt=s(Eie);n7o=r(Brt,"lxmert"),Brt.forEach(t),s7o=r(_ye," \u2014 "),PN=n(_ye,"A",{href:!0});var Irt=s(PN);l7o=r(Irt,"LxmertForPreTraining"),Irt.forEach(t),i7o=r(_ye," (LXMERT model)"),_ye.forEach(t),d7o=i(O),v_=n(O,"LI",{});var bye=s(v_);Cie=n(bye,"STRONG",{});var qrt=s(Cie);c7o=r(qrt,"megatron-bert"),qrt.forEach(t),f7o=r(bye," \u2014 "),BN=n(bye,"A",{href:!0});var Nrt=s(BN);m7o=r(Nrt,"MegatronBertForPreTraining"),Nrt.forEach(t),g7o=r(bye," (MegatronBert model)"),bye.forEach(t),h7o=i(O),F_=n(O,"LI",{});var vye=s(F_);wie=n(vye,"STRONG",{});var jrt=s(wie);p7o=r(jrt,"mobilebert"),jrt.forEach(t),u7o=r(vye," \u2014 "),IN=n(vye,"A",{href:!0});var Drt=s(IN);_7o=r(Drt,"MobileBertForPreTraining"),Drt.forEach(t),b7o=r(vye," (MobileBERT model)"),vye.forEach(t),v7o=i(O),T_=n(O,"LI",{});var Fye=s(T_);Aie=n(Fye,"STRONG",{});var Grt=s(Aie);F7o=r(Grt,"mpnet"),Grt.forEach(t),T7o=r(Fye," \u2014 "),qN=n(Fye,"A",{href:!0});var Ort=s(qN);M7o=r(Ort,"MPNetForMaskedLM"),Ort.forEach(t),E7o=r(Fye," (MPNet model)"),Fye.forEach(t),C7o=i(O),M_=n(O,"LI",{});var Tye=s(M_);yie=n(Tye,"STRONG",{});var Vrt=s(yie);w7o=r(Vrt,"openai-gpt"),Vrt.forEach(t),A7o=r(Tye," \u2014 "),NN=n(Tye,"A",{href:!0});var Xrt=s(NN);y7o=r(Xrt,"OpenAIGPTLMHeadModel"),Xrt.forEach(t),L7o=r(Tye," (OpenAI GPT model)"),Tye.forEach(t),x7o=i(O),E_=n(O,"LI",{});var Mye=s(E_);Lie=n(Mye,"STRONG",{});var zrt=s(Lie);$7o=r(zrt,"retribert"),zrt.forEach(t),k7o=r(Mye," \u2014 "),jN=n(Mye,"A",{href:!0});var Wrt=s(jN);S7o=r(Wrt,"RetriBertModel"),Wrt.forEach(t),R7o=r(Mye," (RetriBERT model)"),Mye.forEach(t),P7o=i(O),C_=n(O,"LI",{});var Eye=s(C_);xie=n(Eye,"STRONG",{});var Qrt=s(xie);B7o=r(Qrt,"roberta"),Qrt.forEach(t),I7o=r(Eye," \u2014 "),DN=n(Eye,"A",{href:!0});var Hrt=s(DN);q7o=r(Hrt,"RobertaForMaskedLM"),Hrt.forEach(t),N7o=r(Eye," (RoBERTa model)"),Eye.forEach(t),j7o=i(O),w_=n(O,"LI",{});var Cye=s(w_);$ie=n(Cye,"STRONG",{});var Urt=s($ie);D7o=r(Urt,"splinter"),Urt.forEach(t),G7o=r(Cye," \u2014 "),GN=n(Cye,"A",{href:!0});var Jrt=s(GN);O7o=r(Jrt,"SplinterForPreTraining"),Jrt.forEach(t),V7o=r(Cye," (Splinter model)"),Cye.forEach(t),X7o=i(O),A_=n(O,"LI",{});var wye=s(A_);kie=n(wye,"STRONG",{});var Yrt=s(kie);z7o=r(Yrt,"squeezebert"),Yrt.forEach(t),W7o=r(wye," \u2014 "),ON=n(wye,"A",{href:!0});var Krt=s(ON);Q7o=r(Krt,"SqueezeBertForMaskedLM"),Krt.forEach(t),H7o=r(wye," (SqueezeBERT model)"),wye.forEach(t),U7o=i(O),y_=n(O,"LI",{});var Aye=s(y_);Sie=n(Aye,"STRONG",{});var Zrt=s(Sie);J7o=r(Zrt,"t5"),Zrt.forEach(t),Y7o=r(Aye," \u2014 "),VN=n(Aye,"A",{href:!0});var ett=s(VN);K7o=r(ett,"T5ForConditionalGeneration"),ett.forEach(t),Z7o=r(Aye," (T5 model)"),Aye.forEach(t),eMo=i(O),L_=n(O,"LI",{});var yye=s(L_);Rie=n(yye,"STRONG",{});var ott=s(Rie);oMo=r(ott,"tapas"),ott.forEach(t),rMo=r(yye," \u2014 "),XN=n(yye,"A",{href:!0});var rtt=s(XN);tMo=r(rtt,"TapasForMaskedLM"),rtt.forEach(t),aMo=r(yye," (TAPAS model)"),yye.forEach(t),nMo=i(O),x_=n(O,"LI",{});var Lye=s(x_);Pie=n(Lye,"STRONG",{});var ttt=s(Pie);sMo=r(ttt,"transfo-xl"),ttt.forEach(t),lMo=r(Lye," \u2014 "),zN=n(Lye,"A",{href:!0});var att=s(zN);iMo=r(att,"TransfoXLLMHeadModel"),att.forEach(t),dMo=r(Lye," (Transformer-XL model)"),Lye.forEach(t),cMo=i(O),$_=n(O,"LI",{});var xye=s($_);Bie=n(xye,"STRONG",{});var ntt=s(Bie);fMo=r(ntt,"unispeech"),ntt.forEach(t),mMo=r(xye," \u2014 "),WN=n(xye,"A",{href:!0});var stt=s(WN);gMo=r(stt,"UniSpeechForPreTraining"),stt.forEach(t),hMo=r(xye," (UniSpeech model)"),xye.forEach(t),pMo=i(O),k_=n(O,"LI",{});var $ye=s(k_);Iie=n($ye,"STRONG",{});var ltt=s(Iie);uMo=r(ltt,"unispeech-sat"),ltt.forEach(t),_Mo=r($ye," \u2014 "),QN=n($ye,"A",{href:!0});var itt=s(QN);bMo=r(itt,"UniSpeechSatForPreTraining"),itt.forEach(t),vMo=r($ye," (UniSpeechSat model)"),$ye.forEach(t),FMo=i(O),S_=n(O,"LI",{});var kye=s(S_);qie=n(kye,"STRONG",{});var dtt=s(qie);TMo=r(dtt,"visual_bert"),dtt.forEach(t),MMo=r(kye," \u2014 "),HN=n(kye,"A",{href:!0});var ctt=s(HN);EMo=r(ctt,"VisualBertForPreTraining"),ctt.forEach(t),CMo=r(kye," (VisualBert model)"),kye.forEach(t),wMo=i(O),R_=n(O,"LI",{});var Sye=s(R_);Nie=n(Sye,"STRONG",{});var ftt=s(Nie);AMo=r(ftt,"vit_mae"),ftt.forEach(t),yMo=r(Sye," \u2014 "),UN=n(Sye,"A",{href:!0});var mtt=s(UN);LMo=r(mtt,"ViTMAEForPreTraining"),mtt.forEach(t),xMo=r(Sye," (ViTMAE model)"),Sye.forEach(t),$Mo=i(O),P_=n(O,"LI",{});var Rye=s(P_);jie=n(Rye,"STRONG",{});var gtt=s(jie);kMo=r(gtt,"wav2vec2"),gtt.forEach(t),SMo=r(Rye," \u2014 "),JN=n(Rye,"A",{href:!0});var htt=s(JN);RMo=r(htt,"Wav2Vec2ForPreTraining"),htt.forEach(t),PMo=r(Rye," (Wav2Vec2 model)"),Rye.forEach(t),BMo=i(O),B_=n(O,"LI",{});var Pye=s(B_);Die=n(Pye,"STRONG",{});var ptt=s(Die);IMo=r(ptt,"wav2vec2-conformer"),ptt.forEach(t),qMo=r(Pye," \u2014 "),YN=n(Pye,"A",{href:!0});var utt=s(YN);NMo=r(utt,"Wav2Vec2ConformerForPreTraining"),utt.forEach(t),jMo=r(Pye," (Wav2Vec2-Conformer model)"),Pye.forEach(t),DMo=i(O),I_=n(O,"LI",{});var Bye=s(I_);Gie=n(Bye,"STRONG",{});var _tt=s(Gie);GMo=r(_tt,"xlm"),_tt.forEach(t),OMo=r(Bye," \u2014 "),KN=n(Bye,"A",{href:!0});var btt=s(KN);VMo=r(btt,"XLMWithLMHeadModel"),btt.forEach(t),XMo=r(Bye," (XLM model)"),Bye.forEach(t),zMo=i(O),q_=n(O,"LI",{});var Iye=s(q_);Oie=n(Iye,"STRONG",{});var vtt=s(Oie);WMo=r(vtt,"xlm-roberta"),vtt.forEach(t),QMo=r(Iye," \u2014 "),ZN=n(Iye,"A",{href:!0});var Ftt=s(ZN);HMo=r(Ftt,"XLMRobertaForMaskedLM"),Ftt.forEach(t),UMo=r(Iye," (XLM-RoBERTa model)"),Iye.forEach(t),JMo=i(O),N_=n(O,"LI",{});var qye=s(N_);Vie=n(qye,"STRONG",{});var Ttt=s(Vie);YMo=r(Ttt,"xlm-roberta-xl"),Ttt.forEach(t),KMo=r(qye," \u2014 "),ej=n(qye,"A",{href:!0});var Mtt=s(ej);ZMo=r(Mtt,"XLMRobertaXLForMaskedLM"),Mtt.forEach(t),e4o=r(qye," (XLM-RoBERTa-XL model)"),qye.forEach(t),o4o=i(O),j_=n(O,"LI",{});var Nye=s(j_);Xie=n(Nye,"STRONG",{});var Ett=s(Xie);r4o=r(Ett,"xlnet"),Ett.forEach(t),t4o=r(Nye," \u2014 "),oj=n(Nye,"A",{href:!0});var Ctt=s(oj);a4o=r(Ctt,"XLNetLMHeadModel"),Ctt.forEach(t),n4o=r(Nye," (XLNet model)"),Nye.forEach(t),O.forEach(t),s4o=i(ra),D_=n(ra,"P",{});var jye=s(D_);l4o=r(jye,"The model is set in evaluation mode by default using "),zie=n(jye,"CODE",{});var wtt=s(zie);i4o=r(wtt,"model.eval()"),wtt.forEach(t),d4o=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n(jye,"CODE",{});var Att=s(Wie);c4o=r(Att,"model.train()"),Att.forEach(t),jye.forEach(t),f4o=i(ra),T(G_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Rqe=i(f),ki=n(f,"H2",{class:!0});var qje=s(ki);O_=n(qje,"A",{id:!0,class:!0,href:!0});var ytt=s(O_);Qie=n(ytt,"SPAN",{});var Ltt=s(Qie);T(ey.$$.fragment,Ltt),Ltt.forEach(t),ytt.forEach(t),m4o=i(qje),Hie=n(qje,"SPAN",{});var xtt=s(Hie);g4o=r(xtt,"AutoModelForCausalLM"),xtt.forEach(t),qje.forEach(t),Pqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(oy.$$.fragment,Vs),h4o=i(Vs),Si=n(Vs,"P",{});var oZ=s(Si);p4o=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rj=n(oZ,"A",{href:!0});var $tt=s(rj);u4o=r($tt,"from_pretrained()"),$tt.forEach(t),_4o=r(oZ," class method or the "),tj=n(oZ,"A",{href:!0});var ktt=s(tj);b4o=r(ktt,"from_config()"),ktt.forEach(t),v4o=r(oZ,` class
method.`),oZ.forEach(t),F4o=i(Vs),ry=n(Vs,"P",{});var Nje=s(ry);T4o=r(Nje,"This class cannot be instantiated directly using "),Uie=n(Nje,"CODE",{});var Stt=s(Uie);M4o=r(Stt,"__init__()"),Stt.forEach(t),E4o=r(Nje," (throws an error)."),Nje.forEach(t),C4o=i(Vs),nt=n(Vs,"DIV",{class:!0});var A3=s(nt);T(ty.$$.fragment,A3),w4o=i(A3),Jie=n(A3,"P",{});var Rtt=s(Jie);A4o=r(Rtt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rtt.forEach(t),y4o=i(A3),Ri=n(A3,"P",{});var rZ=s(Ri);L4o=r(rZ,`Note:
Loading a model from its configuration file does `),Yie=n(rZ,"STRONG",{});var Ptt=s(Yie);x4o=r(Ptt,"not"),Ptt.forEach(t),$4o=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aj=n(rZ,"A",{href:!0});var Btt=s(aj);k4o=r(Btt,"from_pretrained()"),Btt.forEach(t),S4o=r(rZ," to load the model weights."),rZ.forEach(t),R4o=i(A3),T(V_.$$.fragment,A3),A3.forEach(t),P4o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(ay.$$.fragment,ta),B4o=i(ta),Kie=n(ta,"P",{});var Itt=s(Kie);I4o=r(Itt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Itt.forEach(t),q4o=i(ta),$a=n(ta,"P",{});var y3=s($a);N4o=r(y3,"The model class to instantiate is selected based on the "),Zie=n(y3,"CODE",{});var qtt=s(Zie);j4o=r(qtt,"model_type"),qtt.forEach(t),D4o=r(y3,` property of the config object (either
passed as an argument or loaded from `),ede=n(y3,"CODE",{});var Ntt=s(ede);G4o=r(Ntt,"pretrained_model_name_or_path"),Ntt.forEach(t),O4o=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=n(y3,"CODE",{});var jtt=s(ode);V4o=r(jtt,"pretrained_model_name_or_path"),jtt.forEach(t),X4o=r(y3,":"),y3.forEach(t),z4o=i(ta),z=n(ta,"UL",{});var Q=s(z);X_=n(Q,"LI",{});var Dye=s(X_);rde=n(Dye,"STRONG",{});var Dtt=s(rde);W4o=r(Dtt,"bart"),Dtt.forEach(t),Q4o=r(Dye," \u2014 "),nj=n(Dye,"A",{href:!0});var Gtt=s(nj);H4o=r(Gtt,"BartForCausalLM"),Gtt.forEach(t),U4o=r(Dye," (BART model)"),Dye.forEach(t),J4o=i(Q),z_=n(Q,"LI",{});var Gye=s(z_);tde=n(Gye,"STRONG",{});var Ott=s(tde);Y4o=r(Ott,"bert"),Ott.forEach(t),K4o=r(Gye," \u2014 "),sj=n(Gye,"A",{href:!0});var Vtt=s(sj);Z4o=r(Vtt,"BertLMHeadModel"),Vtt.forEach(t),eEo=r(Gye," (BERT model)"),Gye.forEach(t),oEo=i(Q),W_=n(Q,"LI",{});var Oye=s(W_);ade=n(Oye,"STRONG",{});var Xtt=s(ade);rEo=r(Xtt,"bert-generation"),Xtt.forEach(t),tEo=r(Oye," \u2014 "),lj=n(Oye,"A",{href:!0});var ztt=s(lj);aEo=r(ztt,"BertGenerationDecoder"),ztt.forEach(t),nEo=r(Oye," (Bert Generation model)"),Oye.forEach(t),sEo=i(Q),Q_=n(Q,"LI",{});var Vye=s(Q_);nde=n(Vye,"STRONG",{});var Wtt=s(nde);lEo=r(Wtt,"big_bird"),Wtt.forEach(t),iEo=r(Vye," \u2014 "),ij=n(Vye,"A",{href:!0});var Qtt=s(ij);dEo=r(Qtt,"BigBirdForCausalLM"),Qtt.forEach(t),cEo=r(Vye," (BigBird model)"),Vye.forEach(t),fEo=i(Q),H_=n(Q,"LI",{});var Xye=s(H_);sde=n(Xye,"STRONG",{});var Htt=s(sde);mEo=r(Htt,"bigbird_pegasus"),Htt.forEach(t),gEo=r(Xye," \u2014 "),dj=n(Xye,"A",{href:!0});var Utt=s(dj);hEo=r(Utt,"BigBirdPegasusForCausalLM"),Utt.forEach(t),pEo=r(Xye," (BigBirdPegasus model)"),Xye.forEach(t),uEo=i(Q),U_=n(Q,"LI",{});var zye=s(U_);lde=n(zye,"STRONG",{});var Jtt=s(lde);_Eo=r(Jtt,"blenderbot"),Jtt.forEach(t),bEo=r(zye," \u2014 "),cj=n(zye,"A",{href:!0});var Ytt=s(cj);vEo=r(Ytt,"BlenderbotForCausalLM"),Ytt.forEach(t),FEo=r(zye," (Blenderbot model)"),zye.forEach(t),TEo=i(Q),J_=n(Q,"LI",{});var Wye=s(J_);ide=n(Wye,"STRONG",{});var Ktt=s(ide);MEo=r(Ktt,"blenderbot-small"),Ktt.forEach(t),EEo=r(Wye," \u2014 "),fj=n(Wye,"A",{href:!0});var Ztt=s(fj);CEo=r(Ztt,"BlenderbotSmallForCausalLM"),Ztt.forEach(t),wEo=r(Wye," (BlenderbotSmall model)"),Wye.forEach(t),AEo=i(Q),Y_=n(Q,"LI",{});var Qye=s(Y_);dde=n(Qye,"STRONG",{});var eat=s(dde);yEo=r(eat,"camembert"),eat.forEach(t),LEo=r(Qye," \u2014 "),mj=n(Qye,"A",{href:!0});var oat=s(mj);xEo=r(oat,"CamembertForCausalLM"),oat.forEach(t),$Eo=r(Qye," (CamemBERT model)"),Qye.forEach(t),kEo=i(Q),K_=n(Q,"LI",{});var Hye=s(K_);cde=n(Hye,"STRONG",{});var rat=s(cde);SEo=r(rat,"ctrl"),rat.forEach(t),REo=r(Hye," \u2014 "),gj=n(Hye,"A",{href:!0});var tat=s(gj);PEo=r(tat,"CTRLLMHeadModel"),tat.forEach(t),BEo=r(Hye," (CTRL model)"),Hye.forEach(t),IEo=i(Q),Z_=n(Q,"LI",{});var Uye=s(Z_);fde=n(Uye,"STRONG",{});var aat=s(fde);qEo=r(aat,"data2vec-text"),aat.forEach(t),NEo=r(Uye," \u2014 "),hj=n(Uye,"A",{href:!0});var nat=s(hj);jEo=r(nat,"Data2VecTextForCausalLM"),nat.forEach(t),DEo=r(Uye," (Data2VecText model)"),Uye.forEach(t),GEo=i(Q),e0=n(Q,"LI",{});var Jye=s(e0);mde=n(Jye,"STRONG",{});var sat=s(mde);OEo=r(sat,"electra"),sat.forEach(t),VEo=r(Jye," \u2014 "),pj=n(Jye,"A",{href:!0});var lat=s(pj);XEo=r(lat,"ElectraForCausalLM"),lat.forEach(t),zEo=r(Jye," (ELECTRA model)"),Jye.forEach(t),WEo=i(Q),o0=n(Q,"LI",{});var Yye=s(o0);gde=n(Yye,"STRONG",{});var iat=s(gde);QEo=r(iat,"gpt2"),iat.forEach(t),HEo=r(Yye," \u2014 "),uj=n(Yye,"A",{href:!0});var dat=s(uj);UEo=r(dat,"GPT2LMHeadModel"),dat.forEach(t),JEo=r(Yye," (OpenAI GPT-2 model)"),Yye.forEach(t),YEo=i(Q),r0=n(Q,"LI",{});var Kye=s(r0);hde=n(Kye,"STRONG",{});var cat=s(hde);KEo=r(cat,"gpt_neo"),cat.forEach(t),ZEo=r(Kye," \u2014 "),_j=n(Kye,"A",{href:!0});var fat=s(_j);eCo=r(fat,"GPTNeoForCausalLM"),fat.forEach(t),oCo=r(Kye," (GPT Neo model)"),Kye.forEach(t),rCo=i(Q),t0=n(Q,"LI",{});var Zye=s(t0);pde=n(Zye,"STRONG",{});var mat=s(pde);tCo=r(mat,"gptj"),mat.forEach(t),aCo=r(Zye," \u2014 "),bj=n(Zye,"A",{href:!0});var gat=s(bj);nCo=r(gat,"GPTJForCausalLM"),gat.forEach(t),sCo=r(Zye," (GPT-J model)"),Zye.forEach(t),lCo=i(Q),a0=n(Q,"LI",{});var eLe=s(a0);ude=n(eLe,"STRONG",{});var hat=s(ude);iCo=r(hat,"marian"),hat.forEach(t),dCo=r(eLe," \u2014 "),vj=n(eLe,"A",{href:!0});var pat=s(vj);cCo=r(pat,"MarianForCausalLM"),pat.forEach(t),fCo=r(eLe," (Marian model)"),eLe.forEach(t),mCo=i(Q),n0=n(Q,"LI",{});var oLe=s(n0);_de=n(oLe,"STRONG",{});var uat=s(_de);gCo=r(uat,"mbart"),uat.forEach(t),hCo=r(oLe," \u2014 "),Fj=n(oLe,"A",{href:!0});var _at=s(Fj);pCo=r(_at,"MBartForCausalLM"),_at.forEach(t),uCo=r(oLe," (mBART model)"),oLe.forEach(t),_Co=i(Q),s0=n(Q,"LI",{});var rLe=s(s0);bde=n(rLe,"STRONG",{});var bat=s(bde);bCo=r(bat,"megatron-bert"),bat.forEach(t),vCo=r(rLe," \u2014 "),Tj=n(rLe,"A",{href:!0});var vat=s(Tj);FCo=r(vat,"MegatronBertForCausalLM"),vat.forEach(t),TCo=r(rLe," (MegatronBert model)"),rLe.forEach(t),MCo=i(Q),l0=n(Q,"LI",{});var tLe=s(l0);vde=n(tLe,"STRONG",{});var Fat=s(vde);ECo=r(Fat,"openai-gpt"),Fat.forEach(t),CCo=r(tLe," \u2014 "),Mj=n(tLe,"A",{href:!0});var Tat=s(Mj);wCo=r(Tat,"OpenAIGPTLMHeadModel"),Tat.forEach(t),ACo=r(tLe," (OpenAI GPT model)"),tLe.forEach(t),yCo=i(Q),i0=n(Q,"LI",{});var aLe=s(i0);Fde=n(aLe,"STRONG",{});var Mat=s(Fde);LCo=r(Mat,"opt"),Mat.forEach(t),xCo=r(aLe," \u2014 "),Ej=n(aLe,"A",{href:!0});var Eat=s(Ej);$Co=r(Eat,"OPTForCausalLM"),Eat.forEach(t),kCo=r(aLe," (OPT model)"),aLe.forEach(t),SCo=i(Q),d0=n(Q,"LI",{});var nLe=s(d0);Tde=n(nLe,"STRONG",{});var Cat=s(Tde);RCo=r(Cat,"pegasus"),Cat.forEach(t),PCo=r(nLe," \u2014 "),Cj=n(nLe,"A",{href:!0});var wat=s(Cj);BCo=r(wat,"PegasusForCausalLM"),wat.forEach(t),ICo=r(nLe," (Pegasus model)"),nLe.forEach(t),qCo=i(Q),c0=n(Q,"LI",{});var sLe=s(c0);Mde=n(sLe,"STRONG",{});var Aat=s(Mde);NCo=r(Aat,"plbart"),Aat.forEach(t),jCo=r(sLe," \u2014 "),wj=n(sLe,"A",{href:!0});var yat=s(wj);DCo=r(yat,"PLBartForCausalLM"),yat.forEach(t),GCo=r(sLe," (PLBart model)"),sLe.forEach(t),OCo=i(Q),f0=n(Q,"LI",{});var lLe=s(f0);Ede=n(lLe,"STRONG",{});var Lat=s(Ede);VCo=r(Lat,"prophetnet"),Lat.forEach(t),XCo=r(lLe," \u2014 "),Aj=n(lLe,"A",{href:!0});var xat=s(Aj);zCo=r(xat,"ProphetNetForCausalLM"),xat.forEach(t),WCo=r(lLe," (ProphetNet model)"),lLe.forEach(t),QCo=i(Q),m0=n(Q,"LI",{});var iLe=s(m0);Cde=n(iLe,"STRONG",{});var $at=s(Cde);HCo=r($at,"qdqbert"),$at.forEach(t),UCo=r(iLe," \u2014 "),yj=n(iLe,"A",{href:!0});var kat=s(yj);JCo=r(kat,"QDQBertLMHeadModel"),kat.forEach(t),YCo=r(iLe," (QDQBert model)"),iLe.forEach(t),KCo=i(Q),g0=n(Q,"LI",{});var dLe=s(g0);wde=n(dLe,"STRONG",{});var Sat=s(wde);ZCo=r(Sat,"reformer"),Sat.forEach(t),e5o=r(dLe," \u2014 "),Lj=n(dLe,"A",{href:!0});var Rat=s(Lj);o5o=r(Rat,"ReformerModelWithLMHead"),Rat.forEach(t),r5o=r(dLe," (Reformer model)"),dLe.forEach(t),t5o=i(Q),h0=n(Q,"LI",{});var cLe=s(h0);Ade=n(cLe,"STRONG",{});var Pat=s(Ade);a5o=r(Pat,"rembert"),Pat.forEach(t),n5o=r(cLe," \u2014 "),xj=n(cLe,"A",{href:!0});var Bat=s(xj);s5o=r(Bat,"RemBertForCausalLM"),Bat.forEach(t),l5o=r(cLe," (RemBERT model)"),cLe.forEach(t),i5o=i(Q),p0=n(Q,"LI",{});var fLe=s(p0);yde=n(fLe,"STRONG",{});var Iat=s(yde);d5o=r(Iat,"roberta"),Iat.forEach(t),c5o=r(fLe," \u2014 "),$j=n(fLe,"A",{href:!0});var qat=s($j);f5o=r(qat,"RobertaForCausalLM"),qat.forEach(t),m5o=r(fLe," (RoBERTa model)"),fLe.forEach(t),g5o=i(Q),u0=n(Q,"LI",{});var mLe=s(u0);Lde=n(mLe,"STRONG",{});var Nat=s(Lde);h5o=r(Nat,"roformer"),Nat.forEach(t),p5o=r(mLe," \u2014 "),kj=n(mLe,"A",{href:!0});var jat=s(kj);u5o=r(jat,"RoFormerForCausalLM"),jat.forEach(t),_5o=r(mLe," (RoFormer model)"),mLe.forEach(t),b5o=i(Q),_0=n(Q,"LI",{});var gLe=s(_0);xde=n(gLe,"STRONG",{});var Dat=s(xde);v5o=r(Dat,"speech_to_text_2"),Dat.forEach(t),F5o=r(gLe," \u2014 "),Sj=n(gLe,"A",{href:!0});var Gat=s(Sj);T5o=r(Gat,"Speech2Text2ForCausalLM"),Gat.forEach(t),M5o=r(gLe," (Speech2Text2 model)"),gLe.forEach(t),E5o=i(Q),b0=n(Q,"LI",{});var hLe=s(b0);$de=n(hLe,"STRONG",{});var Oat=s($de);C5o=r(Oat,"transfo-xl"),Oat.forEach(t),w5o=r(hLe," \u2014 "),Rj=n(hLe,"A",{href:!0});var Vat=s(Rj);A5o=r(Vat,"TransfoXLLMHeadModel"),Vat.forEach(t),y5o=r(hLe," (Transformer-XL model)"),hLe.forEach(t),L5o=i(Q),v0=n(Q,"LI",{});var pLe=s(v0);kde=n(pLe,"STRONG",{});var Xat=s(kde);x5o=r(Xat,"trocr"),Xat.forEach(t),$5o=r(pLe," \u2014 "),Pj=n(pLe,"A",{href:!0});var zat=s(Pj);k5o=r(zat,"TrOCRForCausalLM"),zat.forEach(t),S5o=r(pLe," (TrOCR model)"),pLe.forEach(t),R5o=i(Q),F0=n(Q,"LI",{});var uLe=s(F0);Sde=n(uLe,"STRONG",{});var Wat=s(Sde);P5o=r(Wat,"xglm"),Wat.forEach(t),B5o=r(uLe," \u2014 "),Bj=n(uLe,"A",{href:!0});var Qat=s(Bj);I5o=r(Qat,"XGLMForCausalLM"),Qat.forEach(t),q5o=r(uLe," (XGLM model)"),uLe.forEach(t),N5o=i(Q),T0=n(Q,"LI",{});var _Le=s(T0);Rde=n(_Le,"STRONG",{});var Hat=s(Rde);j5o=r(Hat,"xlm"),Hat.forEach(t),D5o=r(_Le," \u2014 "),Ij=n(_Le,"A",{href:!0});var Uat=s(Ij);G5o=r(Uat,"XLMWithLMHeadModel"),Uat.forEach(t),O5o=r(_Le," (XLM model)"),_Le.forEach(t),V5o=i(Q),M0=n(Q,"LI",{});var bLe=s(M0);Pde=n(bLe,"STRONG",{});var Jat=s(Pde);X5o=r(Jat,"xlm-prophetnet"),Jat.forEach(t),z5o=r(bLe," \u2014 "),qj=n(bLe,"A",{href:!0});var Yat=s(qj);W5o=r(Yat,"XLMProphetNetForCausalLM"),Yat.forEach(t),Q5o=r(bLe," (XLMProphetNet model)"),bLe.forEach(t),H5o=i(Q),E0=n(Q,"LI",{});var vLe=s(E0);Bde=n(vLe,"STRONG",{});var Kat=s(Bde);U5o=r(Kat,"xlm-roberta"),Kat.forEach(t),J5o=r(vLe," \u2014 "),Nj=n(vLe,"A",{href:!0});var Zat=s(Nj);Y5o=r(Zat,"XLMRobertaForCausalLM"),Zat.forEach(t),K5o=r(vLe," (XLM-RoBERTa model)"),vLe.forEach(t),Z5o=i(Q),C0=n(Q,"LI",{});var FLe=s(C0);Ide=n(FLe,"STRONG",{});var ent=s(Ide);e3o=r(ent,"xlm-roberta-xl"),ent.forEach(t),o3o=r(FLe," \u2014 "),jj=n(FLe,"A",{href:!0});var ont=s(jj);r3o=r(ont,"XLMRobertaXLForCausalLM"),ont.forEach(t),t3o=r(FLe," (XLM-RoBERTa-XL model)"),FLe.forEach(t),a3o=i(Q),w0=n(Q,"LI",{});var TLe=s(w0);qde=n(TLe,"STRONG",{});var rnt=s(qde);n3o=r(rnt,"xlnet"),rnt.forEach(t),s3o=r(TLe," \u2014 "),Dj=n(TLe,"A",{href:!0});var tnt=s(Dj);l3o=r(tnt,"XLNetLMHeadModel"),tnt.forEach(t),i3o=r(TLe," (XLNet model)"),TLe.forEach(t),Q.forEach(t),d3o=i(ta),A0=n(ta,"P",{});var MLe=s(A0);c3o=r(MLe,"The model is set in evaluation mode by default using "),Nde=n(MLe,"CODE",{});var ant=s(Nde);f3o=r(ant,"model.eval()"),ant.forEach(t),m3o=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jde=n(MLe,"CODE",{});var nnt=s(jde);g3o=r(nnt,"model.train()"),nnt.forEach(t),MLe.forEach(t),h3o=i(ta),T(y0.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Bqe=i(f),Pi=n(f,"H2",{class:!0});var jje=s(Pi);L0=n(jje,"A",{id:!0,class:!0,href:!0});var snt=s(L0);Dde=n(snt,"SPAN",{});var lnt=s(Dde);T(ny.$$.fragment,lnt),lnt.forEach(t),snt.forEach(t),p3o=i(jje),Gde=n(jje,"SPAN",{});var int=s(Gde);u3o=r(int,"AutoModelForMaskedLM"),int.forEach(t),jje.forEach(t),Iqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(sy.$$.fragment,Xs),_3o=i(Xs),Bi=n(Xs,"P",{});var tZ=s(Bi);b3o=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gj=n(tZ,"A",{href:!0});var dnt=s(Gj);v3o=r(dnt,"from_pretrained()"),dnt.forEach(t),F3o=r(tZ," class method or the "),Oj=n(tZ,"A",{href:!0});var cnt=s(Oj);T3o=r(cnt,"from_config()"),cnt.forEach(t),M3o=r(tZ,` class
method.`),tZ.forEach(t),E3o=i(Xs),ly=n(Xs,"P",{});var Dje=s(ly);C3o=r(Dje,"This class cannot be instantiated directly using "),Ode=n(Dje,"CODE",{});var fnt=s(Ode);w3o=r(fnt,"__init__()"),fnt.forEach(t),A3o=r(Dje," (throws an error)."),Dje.forEach(t),y3o=i(Xs),st=n(Xs,"DIV",{class:!0});var L3=s(st);T(iy.$$.fragment,L3),L3o=i(L3),Vde=n(L3,"P",{});var mnt=s(Vde);x3o=r(mnt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mnt.forEach(t),$3o=i(L3),Ii=n(L3,"P",{});var aZ=s(Ii);k3o=r(aZ,`Note:
Loading a model from its configuration file does `),Xde=n(aZ,"STRONG",{});var gnt=s(Xde);S3o=r(gnt,"not"),gnt.forEach(t),R3o=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(aZ,"A",{href:!0});var hnt=s(Vj);P3o=r(hnt,"from_pretrained()"),hnt.forEach(t),B3o=r(aZ," to load the model weights."),aZ.forEach(t),I3o=i(L3),T(x0.$$.fragment,L3),L3.forEach(t),q3o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(dy.$$.fragment,aa),N3o=i(aa),zde=n(aa,"P",{});var pnt=s(zde);j3o=r(pnt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pnt.forEach(t),D3o=i(aa),ka=n(aa,"P",{});var x3=s(ka);G3o=r(x3,"The model class to instantiate is selected based on the "),Wde=n(x3,"CODE",{});var unt=s(Wde);O3o=r(unt,"model_type"),unt.forEach(t),V3o=r(x3,` property of the config object (either
passed as an argument or loaded from `),Qde=n(x3,"CODE",{});var _nt=s(Qde);X3o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),z3o=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(x3,"CODE",{});var bnt=s(Hde);W3o=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),Q3o=r(x3,":"),x3.forEach(t),H3o=i(aa),W=n(aa,"UL",{});var U=s(W);$0=n(U,"LI",{});var ELe=s($0);Ude=n(ELe,"STRONG",{});var vnt=s(Ude);U3o=r(vnt,"albert"),vnt.forEach(t),J3o=r(ELe," \u2014 "),Xj=n(ELe,"A",{href:!0});var Fnt=s(Xj);Y3o=r(Fnt,"AlbertForMaskedLM"),Fnt.forEach(t),K3o=r(ELe," (ALBERT model)"),ELe.forEach(t),Z3o=i(U),k0=n(U,"LI",{});var CLe=s(k0);Jde=n(CLe,"STRONG",{});var Tnt=s(Jde);ewo=r(Tnt,"bart"),Tnt.forEach(t),owo=r(CLe," \u2014 "),zj=n(CLe,"A",{href:!0});var Mnt=s(zj);rwo=r(Mnt,"BartForConditionalGeneration"),Mnt.forEach(t),two=r(CLe," (BART model)"),CLe.forEach(t),awo=i(U),S0=n(U,"LI",{});var wLe=s(S0);Yde=n(wLe,"STRONG",{});var Ent=s(Yde);nwo=r(Ent,"bert"),Ent.forEach(t),swo=r(wLe," \u2014 "),Wj=n(wLe,"A",{href:!0});var Cnt=s(Wj);lwo=r(Cnt,"BertForMaskedLM"),Cnt.forEach(t),iwo=r(wLe," (BERT model)"),wLe.forEach(t),dwo=i(U),R0=n(U,"LI",{});var ALe=s(R0);Kde=n(ALe,"STRONG",{});var wnt=s(Kde);cwo=r(wnt,"big_bird"),wnt.forEach(t),fwo=r(ALe," \u2014 "),Qj=n(ALe,"A",{href:!0});var Ant=s(Qj);mwo=r(Ant,"BigBirdForMaskedLM"),Ant.forEach(t),gwo=r(ALe," (BigBird model)"),ALe.forEach(t),hwo=i(U),P0=n(U,"LI",{});var yLe=s(P0);Zde=n(yLe,"STRONG",{});var ynt=s(Zde);pwo=r(ynt,"camembert"),ynt.forEach(t),uwo=r(yLe," \u2014 "),Hj=n(yLe,"A",{href:!0});var Lnt=s(Hj);_wo=r(Lnt,"CamembertForMaskedLM"),Lnt.forEach(t),bwo=r(yLe," (CamemBERT model)"),yLe.forEach(t),vwo=i(U),B0=n(U,"LI",{});var LLe=s(B0);ece=n(LLe,"STRONG",{});var xnt=s(ece);Fwo=r(xnt,"convbert"),xnt.forEach(t),Two=r(LLe," \u2014 "),Uj=n(LLe,"A",{href:!0});var $nt=s(Uj);Mwo=r($nt,"ConvBertForMaskedLM"),$nt.forEach(t),Ewo=r(LLe," (ConvBERT model)"),LLe.forEach(t),Cwo=i(U),I0=n(U,"LI",{});var xLe=s(I0);oce=n(xLe,"STRONG",{});var knt=s(oce);wwo=r(knt,"data2vec-text"),knt.forEach(t),Awo=r(xLe," \u2014 "),Jj=n(xLe,"A",{href:!0});var Snt=s(Jj);ywo=r(Snt,"Data2VecTextForMaskedLM"),Snt.forEach(t),Lwo=r(xLe," (Data2VecText model)"),xLe.forEach(t),xwo=i(U),q0=n(U,"LI",{});var $Le=s(q0);rce=n($Le,"STRONG",{});var Rnt=s(rce);$wo=r(Rnt,"deberta"),Rnt.forEach(t),kwo=r($Le," \u2014 "),Yj=n($Le,"A",{href:!0});var Pnt=s(Yj);Swo=r(Pnt,"DebertaForMaskedLM"),Pnt.forEach(t),Rwo=r($Le," (DeBERTa model)"),$Le.forEach(t),Pwo=i(U),N0=n(U,"LI",{});var kLe=s(N0);tce=n(kLe,"STRONG",{});var Bnt=s(tce);Bwo=r(Bnt,"deberta-v2"),Bnt.forEach(t),Iwo=r(kLe," \u2014 "),Kj=n(kLe,"A",{href:!0});var Int=s(Kj);qwo=r(Int,"DebertaV2ForMaskedLM"),Int.forEach(t),Nwo=r(kLe," (DeBERTa-v2 model)"),kLe.forEach(t),jwo=i(U),j0=n(U,"LI",{});var SLe=s(j0);ace=n(SLe,"STRONG",{});var qnt=s(ace);Dwo=r(qnt,"distilbert"),qnt.forEach(t),Gwo=r(SLe," \u2014 "),Zj=n(SLe,"A",{href:!0});var Nnt=s(Zj);Owo=r(Nnt,"DistilBertForMaskedLM"),Nnt.forEach(t),Vwo=r(SLe," (DistilBERT model)"),SLe.forEach(t),Xwo=i(U),D0=n(U,"LI",{});var RLe=s(D0);nce=n(RLe,"STRONG",{});var jnt=s(nce);zwo=r(jnt,"electra"),jnt.forEach(t),Wwo=r(RLe," \u2014 "),eD=n(RLe,"A",{href:!0});var Dnt=s(eD);Qwo=r(Dnt,"ElectraForMaskedLM"),Dnt.forEach(t),Hwo=r(RLe," (ELECTRA model)"),RLe.forEach(t),Uwo=i(U),G0=n(U,"LI",{});var PLe=s(G0);sce=n(PLe,"STRONG",{});var Gnt=s(sce);Jwo=r(Gnt,"flaubert"),Gnt.forEach(t),Ywo=r(PLe," \u2014 "),oD=n(PLe,"A",{href:!0});var Ont=s(oD);Kwo=r(Ont,"FlaubertWithLMHeadModel"),Ont.forEach(t),Zwo=r(PLe," (FlauBERT model)"),PLe.forEach(t),eAo=i(U),O0=n(U,"LI",{});var BLe=s(O0);lce=n(BLe,"STRONG",{});var Vnt=s(lce);oAo=r(Vnt,"fnet"),Vnt.forEach(t),rAo=r(BLe," \u2014 "),rD=n(BLe,"A",{href:!0});var Xnt=s(rD);tAo=r(Xnt,"FNetForMaskedLM"),Xnt.forEach(t),aAo=r(BLe," (FNet model)"),BLe.forEach(t),nAo=i(U),V0=n(U,"LI",{});var ILe=s(V0);ice=n(ILe,"STRONG",{});var znt=s(ice);sAo=r(znt,"funnel"),znt.forEach(t),lAo=r(ILe," \u2014 "),tD=n(ILe,"A",{href:!0});var Wnt=s(tD);iAo=r(Wnt,"FunnelForMaskedLM"),Wnt.forEach(t),dAo=r(ILe," (Funnel Transformer model)"),ILe.forEach(t),cAo=i(U),X0=n(U,"LI",{});var qLe=s(X0);dce=n(qLe,"STRONG",{});var Qnt=s(dce);fAo=r(Qnt,"ibert"),Qnt.forEach(t),mAo=r(qLe," \u2014 "),aD=n(qLe,"A",{href:!0});var Hnt=s(aD);gAo=r(Hnt,"IBertForMaskedLM"),Hnt.forEach(t),hAo=r(qLe," (I-BERT model)"),qLe.forEach(t),pAo=i(U),z0=n(U,"LI",{});var NLe=s(z0);cce=n(NLe,"STRONG",{});var Unt=s(cce);uAo=r(Unt,"layoutlm"),Unt.forEach(t),_Ao=r(NLe," \u2014 "),nD=n(NLe,"A",{href:!0});var Jnt=s(nD);bAo=r(Jnt,"LayoutLMForMaskedLM"),Jnt.forEach(t),vAo=r(NLe," (LayoutLM model)"),NLe.forEach(t),FAo=i(U),W0=n(U,"LI",{});var jLe=s(W0);fce=n(jLe,"STRONG",{});var Ynt=s(fce);TAo=r(Ynt,"longformer"),Ynt.forEach(t),MAo=r(jLe," \u2014 "),sD=n(jLe,"A",{href:!0});var Knt=s(sD);EAo=r(Knt,"LongformerForMaskedLM"),Knt.forEach(t),CAo=r(jLe," (Longformer model)"),jLe.forEach(t),wAo=i(U),Q0=n(U,"LI",{});var DLe=s(Q0);mce=n(DLe,"STRONG",{});var Znt=s(mce);AAo=r(Znt,"mbart"),Znt.forEach(t),yAo=r(DLe," \u2014 "),lD=n(DLe,"A",{href:!0});var est=s(lD);LAo=r(est,"MBartForConditionalGeneration"),est.forEach(t),xAo=r(DLe," (mBART model)"),DLe.forEach(t),$Ao=i(U),H0=n(U,"LI",{});var GLe=s(H0);gce=n(GLe,"STRONG",{});var ost=s(gce);kAo=r(ost,"megatron-bert"),ost.forEach(t),SAo=r(GLe," \u2014 "),iD=n(GLe,"A",{href:!0});var rst=s(iD);RAo=r(rst,"MegatronBertForMaskedLM"),rst.forEach(t),PAo=r(GLe," (MegatronBert model)"),GLe.forEach(t),BAo=i(U),U0=n(U,"LI",{});var OLe=s(U0);hce=n(OLe,"STRONG",{});var tst=s(hce);IAo=r(tst,"mobilebert"),tst.forEach(t),qAo=r(OLe," \u2014 "),dD=n(OLe,"A",{href:!0});var ast=s(dD);NAo=r(ast,"MobileBertForMaskedLM"),ast.forEach(t),jAo=r(OLe," (MobileBERT model)"),OLe.forEach(t),DAo=i(U),J0=n(U,"LI",{});var VLe=s(J0);pce=n(VLe,"STRONG",{});var nst=s(pce);GAo=r(nst,"mpnet"),nst.forEach(t),OAo=r(VLe," \u2014 "),cD=n(VLe,"A",{href:!0});var sst=s(cD);VAo=r(sst,"MPNetForMaskedLM"),sst.forEach(t),XAo=r(VLe," (MPNet model)"),VLe.forEach(t),zAo=i(U),Y0=n(U,"LI",{});var XLe=s(Y0);uce=n(XLe,"STRONG",{});var lst=s(uce);WAo=r(lst,"nystromformer"),lst.forEach(t),QAo=r(XLe," \u2014 "),fD=n(XLe,"A",{href:!0});var ist=s(fD);HAo=r(ist,"NystromformerForMaskedLM"),ist.forEach(t),UAo=r(XLe," (Nystromformer model)"),XLe.forEach(t),JAo=i(U),K0=n(U,"LI",{});var zLe=s(K0);_ce=n(zLe,"STRONG",{});var dst=s(_ce);YAo=r(dst,"perceiver"),dst.forEach(t),KAo=r(zLe," \u2014 "),mD=n(zLe,"A",{href:!0});var cst=s(mD);ZAo=r(cst,"PerceiverForMaskedLM"),cst.forEach(t),eyo=r(zLe," (Perceiver model)"),zLe.forEach(t),oyo=i(U),Z0=n(U,"LI",{});var WLe=s(Z0);bce=n(WLe,"STRONG",{});var fst=s(bce);ryo=r(fst,"qdqbert"),fst.forEach(t),tyo=r(WLe," \u2014 "),gD=n(WLe,"A",{href:!0});var mst=s(gD);ayo=r(mst,"QDQBertForMaskedLM"),mst.forEach(t),nyo=r(WLe," (QDQBert model)"),WLe.forEach(t),syo=i(U),e1=n(U,"LI",{});var QLe=s(e1);vce=n(QLe,"STRONG",{});var gst=s(vce);lyo=r(gst,"reformer"),gst.forEach(t),iyo=r(QLe," \u2014 "),hD=n(QLe,"A",{href:!0});var hst=s(hD);dyo=r(hst,"ReformerForMaskedLM"),hst.forEach(t),cyo=r(QLe," (Reformer model)"),QLe.forEach(t),fyo=i(U),o1=n(U,"LI",{});var HLe=s(o1);Fce=n(HLe,"STRONG",{});var pst=s(Fce);myo=r(pst,"rembert"),pst.forEach(t),gyo=r(HLe," \u2014 "),pD=n(HLe,"A",{href:!0});var ust=s(pD);hyo=r(ust,"RemBertForMaskedLM"),ust.forEach(t),pyo=r(HLe," (RemBERT model)"),HLe.forEach(t),uyo=i(U),r1=n(U,"LI",{});var ULe=s(r1);Tce=n(ULe,"STRONG",{});var _st=s(Tce);_yo=r(_st,"roberta"),_st.forEach(t),byo=r(ULe," \u2014 "),uD=n(ULe,"A",{href:!0});var bst=s(uD);vyo=r(bst,"RobertaForMaskedLM"),bst.forEach(t),Fyo=r(ULe," (RoBERTa model)"),ULe.forEach(t),Tyo=i(U),t1=n(U,"LI",{});var JLe=s(t1);Mce=n(JLe,"STRONG",{});var vst=s(Mce);Myo=r(vst,"roformer"),vst.forEach(t),Eyo=r(JLe," \u2014 "),_D=n(JLe,"A",{href:!0});var Fst=s(_D);Cyo=r(Fst,"RoFormerForMaskedLM"),Fst.forEach(t),wyo=r(JLe," (RoFormer model)"),JLe.forEach(t),Ayo=i(U),a1=n(U,"LI",{});var YLe=s(a1);Ece=n(YLe,"STRONG",{});var Tst=s(Ece);yyo=r(Tst,"squeezebert"),Tst.forEach(t),Lyo=r(YLe," \u2014 "),bD=n(YLe,"A",{href:!0});var Mst=s(bD);xyo=r(Mst,"SqueezeBertForMaskedLM"),Mst.forEach(t),$yo=r(YLe," (SqueezeBERT model)"),YLe.forEach(t),kyo=i(U),n1=n(U,"LI",{});var KLe=s(n1);Cce=n(KLe,"STRONG",{});var Est=s(Cce);Syo=r(Est,"tapas"),Est.forEach(t),Ryo=r(KLe," \u2014 "),vD=n(KLe,"A",{href:!0});var Cst=s(vD);Pyo=r(Cst,"TapasForMaskedLM"),Cst.forEach(t),Byo=r(KLe," (TAPAS model)"),KLe.forEach(t),Iyo=i(U),s1=n(U,"LI",{});var ZLe=s(s1);wce=n(ZLe,"STRONG",{});var wst=s(wce);qyo=r(wst,"wav2vec2"),wst.forEach(t),Nyo=r(ZLe," \u2014 "),Ace=n(ZLe,"CODE",{});var Ast=s(Ace);jyo=r(Ast,"Wav2Vec2ForMaskedLM"),Ast.forEach(t),Dyo=r(ZLe," (Wav2Vec2 model)"),ZLe.forEach(t),Gyo=i(U),l1=n(U,"LI",{});var e8e=s(l1);yce=n(e8e,"STRONG",{});var yst=s(yce);Oyo=r(yst,"xlm"),yst.forEach(t),Vyo=r(e8e," \u2014 "),FD=n(e8e,"A",{href:!0});var Lst=s(FD);Xyo=r(Lst,"XLMWithLMHeadModel"),Lst.forEach(t),zyo=r(e8e," (XLM model)"),e8e.forEach(t),Wyo=i(U),i1=n(U,"LI",{});var o8e=s(i1);Lce=n(o8e,"STRONG",{});var xst=s(Lce);Qyo=r(xst,"xlm-roberta"),xst.forEach(t),Hyo=r(o8e," \u2014 "),TD=n(o8e,"A",{href:!0});var $st=s(TD);Uyo=r($st,"XLMRobertaForMaskedLM"),$st.forEach(t),Jyo=r(o8e," (XLM-RoBERTa model)"),o8e.forEach(t),Yyo=i(U),d1=n(U,"LI",{});var r8e=s(d1);xce=n(r8e,"STRONG",{});var kst=s(xce);Kyo=r(kst,"xlm-roberta-xl"),kst.forEach(t),Zyo=r(r8e," \u2014 "),MD=n(r8e,"A",{href:!0});var Sst=s(MD);eLo=r(Sst,"XLMRobertaXLForMaskedLM"),Sst.forEach(t),oLo=r(r8e," (XLM-RoBERTa-XL model)"),r8e.forEach(t),rLo=i(U),c1=n(U,"LI",{});var t8e=s(c1);$ce=n(t8e,"STRONG",{});var Rst=s($ce);tLo=r(Rst,"yoso"),Rst.forEach(t),aLo=r(t8e," \u2014 "),ED=n(t8e,"A",{href:!0});var Pst=s(ED);nLo=r(Pst,"YosoForMaskedLM"),Pst.forEach(t),sLo=r(t8e," (YOSO model)"),t8e.forEach(t),U.forEach(t),lLo=i(aa),f1=n(aa,"P",{});var a8e=s(f1);iLo=r(a8e,"The model is set in evaluation mode by default using "),kce=n(a8e,"CODE",{});var Bst=s(kce);dLo=r(Bst,"model.eval()"),Bst.forEach(t),cLo=r(a8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n(a8e,"CODE",{});var Ist=s(Sce);fLo=r(Ist,"model.train()"),Ist.forEach(t),a8e.forEach(t),mLo=i(aa),T(m1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),qqe=i(f),qi=n(f,"H2",{class:!0});var Gje=s(qi);g1=n(Gje,"A",{id:!0,class:!0,href:!0});var qst=s(g1);Rce=n(qst,"SPAN",{});var Nst=s(Rce);T(cy.$$.fragment,Nst),Nst.forEach(t),qst.forEach(t),gLo=i(Gje),Pce=n(Gje,"SPAN",{});var jst=s(Pce);hLo=r(jst,"AutoModelForSeq2SeqLM"),jst.forEach(t),Gje.forEach(t),Nqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(fy.$$.fragment,zs),pLo=i(zs),Ni=n(zs,"P",{});var nZ=s(Ni);uLo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CD=n(nZ,"A",{href:!0});var Dst=s(CD);_Lo=r(Dst,"from_pretrained()"),Dst.forEach(t),bLo=r(nZ," class method or the "),wD=n(nZ,"A",{href:!0});var Gst=s(wD);vLo=r(Gst,"from_config()"),Gst.forEach(t),FLo=r(nZ,` class
method.`),nZ.forEach(t),TLo=i(zs),my=n(zs,"P",{});var Oje=s(my);MLo=r(Oje,"This class cannot be instantiated directly using "),Bce=n(Oje,"CODE",{});var Ost=s(Bce);ELo=r(Ost,"__init__()"),Ost.forEach(t),CLo=r(Oje," (throws an error)."),Oje.forEach(t),wLo=i(zs),lt=n(zs,"DIV",{class:!0});var $3=s(lt);T(gy.$$.fragment,$3),ALo=i($3),Ice=n($3,"P",{});var Vst=s(Ice);yLo=r(Vst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vst.forEach(t),LLo=i($3),ji=n($3,"P",{});var sZ=s(ji);xLo=r(sZ,`Note:
Loading a model from its configuration file does `),qce=n(sZ,"STRONG",{});var Xst=s(qce);$Lo=r(Xst,"not"),Xst.forEach(t),kLo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(sZ,"A",{href:!0});var zst=s(AD);SLo=r(zst,"from_pretrained()"),zst.forEach(t),RLo=r(sZ," to load the model weights."),sZ.forEach(t),PLo=i($3),T(h1.$$.fragment,$3),$3.forEach(t),BLo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(hy.$$.fragment,na),ILo=i(na),Nce=n(na,"P",{});var Wst=s(Nce);qLo=r(Wst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wst.forEach(t),NLo=i(na),Sa=n(na,"P",{});var k3=s(Sa);jLo=r(k3,"The model class to instantiate is selected based on the "),jce=n(k3,"CODE",{});var Qst=s(jce);DLo=r(Qst,"model_type"),Qst.forEach(t),GLo=r(k3,` property of the config object (either
passed as an argument or loaded from `),Dce=n(k3,"CODE",{});var Hst=s(Dce);OLo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),VLo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gce=n(k3,"CODE",{});var Ust=s(Gce);XLo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),zLo=r(k3,":"),k3.forEach(t),WLo=i(na),ue=n(na,"UL",{});var ve=s(ue);p1=n(ve,"LI",{});var n8e=s(p1);Oce=n(n8e,"STRONG",{});var Jst=s(Oce);QLo=r(Jst,"bart"),Jst.forEach(t),HLo=r(n8e," \u2014 "),yD=n(n8e,"A",{href:!0});var Yst=s(yD);ULo=r(Yst,"BartForConditionalGeneration"),Yst.forEach(t),JLo=r(n8e," (BART model)"),n8e.forEach(t),YLo=i(ve),u1=n(ve,"LI",{});var s8e=s(u1);Vce=n(s8e,"STRONG",{});var Kst=s(Vce);KLo=r(Kst,"bigbird_pegasus"),Kst.forEach(t),ZLo=r(s8e," \u2014 "),LD=n(s8e,"A",{href:!0});var Zst=s(LD);e8o=r(Zst,"BigBirdPegasusForConditionalGeneration"),Zst.forEach(t),o8o=r(s8e," (BigBirdPegasus model)"),s8e.forEach(t),r8o=i(ve),_1=n(ve,"LI",{});var l8e=s(_1);Xce=n(l8e,"STRONG",{});var elt=s(Xce);t8o=r(elt,"blenderbot"),elt.forEach(t),a8o=r(l8e," \u2014 "),xD=n(l8e,"A",{href:!0});var olt=s(xD);n8o=r(olt,"BlenderbotForConditionalGeneration"),olt.forEach(t),s8o=r(l8e," (Blenderbot model)"),l8e.forEach(t),l8o=i(ve),b1=n(ve,"LI",{});var i8e=s(b1);zce=n(i8e,"STRONG",{});var rlt=s(zce);i8o=r(rlt,"blenderbot-small"),rlt.forEach(t),d8o=r(i8e," \u2014 "),$D=n(i8e,"A",{href:!0});var tlt=s($D);c8o=r(tlt,"BlenderbotSmallForConditionalGeneration"),tlt.forEach(t),f8o=r(i8e," (BlenderbotSmall model)"),i8e.forEach(t),m8o=i(ve),v1=n(ve,"LI",{});var d8e=s(v1);Wce=n(d8e,"STRONG",{});var alt=s(Wce);g8o=r(alt,"encoder-decoder"),alt.forEach(t),h8o=r(d8e," \u2014 "),kD=n(d8e,"A",{href:!0});var nlt=s(kD);p8o=r(nlt,"EncoderDecoderModel"),nlt.forEach(t),u8o=r(d8e," (Encoder decoder model)"),d8e.forEach(t),_8o=i(ve),F1=n(ve,"LI",{});var c8e=s(F1);Qce=n(c8e,"STRONG",{});var slt=s(Qce);b8o=r(slt,"fsmt"),slt.forEach(t),v8o=r(c8e," \u2014 "),SD=n(c8e,"A",{href:!0});var llt=s(SD);F8o=r(llt,"FSMTForConditionalGeneration"),llt.forEach(t),T8o=r(c8e," (FairSeq Machine-Translation model)"),c8e.forEach(t),M8o=i(ve),T1=n(ve,"LI",{});var f8e=s(T1);Hce=n(f8e,"STRONG",{});var ilt=s(Hce);E8o=r(ilt,"led"),ilt.forEach(t),C8o=r(f8e," \u2014 "),RD=n(f8e,"A",{href:!0});var dlt=s(RD);w8o=r(dlt,"LEDForConditionalGeneration"),dlt.forEach(t),A8o=r(f8e," (LED model)"),f8e.forEach(t),y8o=i(ve),M1=n(ve,"LI",{});var m8e=s(M1);Uce=n(m8e,"STRONG",{});var clt=s(Uce);L8o=r(clt,"m2m_100"),clt.forEach(t),x8o=r(m8e," \u2014 "),PD=n(m8e,"A",{href:!0});var flt=s(PD);$8o=r(flt,"M2M100ForConditionalGeneration"),flt.forEach(t),k8o=r(m8e," (M2M100 model)"),m8e.forEach(t),S8o=i(ve),E1=n(ve,"LI",{});var g8e=s(E1);Jce=n(g8e,"STRONG",{});var mlt=s(Jce);R8o=r(mlt,"marian"),mlt.forEach(t),P8o=r(g8e," \u2014 "),BD=n(g8e,"A",{href:!0});var glt=s(BD);B8o=r(glt,"MarianMTModel"),glt.forEach(t),I8o=r(g8e," (Marian model)"),g8e.forEach(t),q8o=i(ve),C1=n(ve,"LI",{});var h8e=s(C1);Yce=n(h8e,"STRONG",{});var hlt=s(Yce);N8o=r(hlt,"mbart"),hlt.forEach(t),j8o=r(h8e," \u2014 "),ID=n(h8e,"A",{href:!0});var plt=s(ID);D8o=r(plt,"MBartForConditionalGeneration"),plt.forEach(t),G8o=r(h8e," (mBART model)"),h8e.forEach(t),O8o=i(ve),w1=n(ve,"LI",{});var p8e=s(w1);Kce=n(p8e,"STRONG",{});var ult=s(Kce);V8o=r(ult,"mt5"),ult.forEach(t),X8o=r(p8e," \u2014 "),qD=n(p8e,"A",{href:!0});var _lt=s(qD);z8o=r(_lt,"MT5ForConditionalGeneration"),_lt.forEach(t),W8o=r(p8e," (mT5 model)"),p8e.forEach(t),Q8o=i(ve),A1=n(ve,"LI",{});var u8e=s(A1);Zce=n(u8e,"STRONG",{});var blt=s(Zce);H8o=r(blt,"pegasus"),blt.forEach(t),U8o=r(u8e," \u2014 "),ND=n(u8e,"A",{href:!0});var vlt=s(ND);J8o=r(vlt,"PegasusForConditionalGeneration"),vlt.forEach(t),Y8o=r(u8e," (Pegasus model)"),u8e.forEach(t),K8o=i(ve),y1=n(ve,"LI",{});var _8e=s(y1);efe=n(_8e,"STRONG",{});var Flt=s(efe);Z8o=r(Flt,"plbart"),Flt.forEach(t),e9o=r(_8e," \u2014 "),jD=n(_8e,"A",{href:!0});var Tlt=s(jD);o9o=r(Tlt,"PLBartForConditionalGeneration"),Tlt.forEach(t),r9o=r(_8e," (PLBart model)"),_8e.forEach(t),t9o=i(ve),L1=n(ve,"LI",{});var b8e=s(L1);ofe=n(b8e,"STRONG",{});var Mlt=s(ofe);a9o=r(Mlt,"prophetnet"),Mlt.forEach(t),n9o=r(b8e," \u2014 "),DD=n(b8e,"A",{href:!0});var Elt=s(DD);s9o=r(Elt,"ProphetNetForConditionalGeneration"),Elt.forEach(t),l9o=r(b8e," (ProphetNet model)"),b8e.forEach(t),i9o=i(ve),x1=n(ve,"LI",{});var v8e=s(x1);rfe=n(v8e,"STRONG",{});var Clt=s(rfe);d9o=r(Clt,"t5"),Clt.forEach(t),c9o=r(v8e," \u2014 "),GD=n(v8e,"A",{href:!0});var wlt=s(GD);f9o=r(wlt,"T5ForConditionalGeneration"),wlt.forEach(t),m9o=r(v8e," (T5 model)"),v8e.forEach(t),g9o=i(ve),$1=n(ve,"LI",{});var F8e=s($1);tfe=n(F8e,"STRONG",{});var Alt=s(tfe);h9o=r(Alt,"xlm-prophetnet"),Alt.forEach(t),p9o=r(F8e," \u2014 "),OD=n(F8e,"A",{href:!0});var ylt=s(OD);u9o=r(ylt,"XLMProphetNetForConditionalGeneration"),ylt.forEach(t),_9o=r(F8e," (XLMProphetNet model)"),F8e.forEach(t),ve.forEach(t),b9o=i(na),k1=n(na,"P",{});var T8e=s(k1);v9o=r(T8e,"The model is set in evaluation mode by default using "),afe=n(T8e,"CODE",{});var Llt=s(afe);F9o=r(Llt,"model.eval()"),Llt.forEach(t),T9o=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=n(T8e,"CODE",{});var xlt=s(nfe);M9o=r(xlt,"model.train()"),xlt.forEach(t),T8e.forEach(t),E9o=i(na),T(S1.$$.fragment,na),na.forEach(t),zs.forEach(t),jqe=i(f),Di=n(f,"H2",{class:!0});var Vje=s(Di);R1=n(Vje,"A",{id:!0,class:!0,href:!0});var $lt=s(R1);sfe=n($lt,"SPAN",{});var klt=s(sfe);T(py.$$.fragment,klt),klt.forEach(t),$lt.forEach(t),C9o=i(Vje),lfe=n(Vje,"SPAN",{});var Slt=s(lfe);w9o=r(Slt,"AutoModelForSequenceClassification"),Slt.forEach(t),Vje.forEach(t),Dqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(uy.$$.fragment,Ws),A9o=i(Ws),Gi=n(Ws,"P",{});var lZ=s(Gi);y9o=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VD=n(lZ,"A",{href:!0});var Rlt=s(VD);L9o=r(Rlt,"from_pretrained()"),Rlt.forEach(t),x9o=r(lZ," class method or the "),XD=n(lZ,"A",{href:!0});var Plt=s(XD);$9o=r(Plt,"from_config()"),Plt.forEach(t),k9o=r(lZ,` class
method.`),lZ.forEach(t),S9o=i(Ws),_y=n(Ws,"P",{});var Xje=s(_y);R9o=r(Xje,"This class cannot be instantiated directly using "),ife=n(Xje,"CODE",{});var Blt=s(ife);P9o=r(Blt,"__init__()"),Blt.forEach(t),B9o=r(Xje," (throws an error)."),Xje.forEach(t),I9o=i(Ws),it=n(Ws,"DIV",{class:!0});var S3=s(it);T(by.$$.fragment,S3),q9o=i(S3),dfe=n(S3,"P",{});var Ilt=s(dfe);N9o=r(Ilt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ilt.forEach(t),j9o=i(S3),Oi=n(S3,"P",{});var iZ=s(Oi);D9o=r(iZ,`Note:
Loading a model from its configuration file does `),cfe=n(iZ,"STRONG",{});var qlt=s(cfe);G9o=r(qlt,"not"),qlt.forEach(t),O9o=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(iZ,"A",{href:!0});var Nlt=s(zD);V9o=r(Nlt,"from_pretrained()"),Nlt.forEach(t),X9o=r(iZ," to load the model weights."),iZ.forEach(t),z9o=i(S3),T(P1.$$.fragment,S3),S3.forEach(t),W9o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(vy.$$.fragment,sa),Q9o=i(sa),ffe=n(sa,"P",{});var jlt=s(ffe);H9o=r(jlt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jlt.forEach(t),U9o=i(sa),Ra=n(sa,"P",{});var R3=s(Ra);J9o=r(R3,"The model class to instantiate is selected based on the "),mfe=n(R3,"CODE",{});var Dlt=s(mfe);Y9o=r(Dlt,"model_type"),Dlt.forEach(t),K9o=r(R3,` property of the config object (either
passed as an argument or loaded from `),gfe=n(R3,"CODE",{});var Glt=s(gfe);Z9o=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),exo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=n(R3,"CODE",{});var Olt=s(hfe);oxo=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),rxo=r(R3,":"),R3.forEach(t),txo=i(sa),q=n(sa,"UL",{});var j=s(q);B1=n(j,"LI",{});var M8e=s(B1);pfe=n(M8e,"STRONG",{});var Vlt=s(pfe);axo=r(Vlt,"albert"),Vlt.forEach(t),nxo=r(M8e," \u2014 "),WD=n(M8e,"A",{href:!0});var Xlt=s(WD);sxo=r(Xlt,"AlbertForSequenceClassification"),Xlt.forEach(t),lxo=r(M8e," (ALBERT model)"),M8e.forEach(t),ixo=i(j),I1=n(j,"LI",{});var E8e=s(I1);ufe=n(E8e,"STRONG",{});var zlt=s(ufe);dxo=r(zlt,"bart"),zlt.forEach(t),cxo=r(E8e," \u2014 "),QD=n(E8e,"A",{href:!0});var Wlt=s(QD);fxo=r(Wlt,"BartForSequenceClassification"),Wlt.forEach(t),mxo=r(E8e," (BART model)"),E8e.forEach(t),gxo=i(j),q1=n(j,"LI",{});var C8e=s(q1);_fe=n(C8e,"STRONG",{});var Qlt=s(_fe);hxo=r(Qlt,"bert"),Qlt.forEach(t),pxo=r(C8e," \u2014 "),HD=n(C8e,"A",{href:!0});var Hlt=s(HD);uxo=r(Hlt,"BertForSequenceClassification"),Hlt.forEach(t),_xo=r(C8e," (BERT model)"),C8e.forEach(t),bxo=i(j),N1=n(j,"LI",{});var w8e=s(N1);bfe=n(w8e,"STRONG",{});var Ult=s(bfe);vxo=r(Ult,"big_bird"),Ult.forEach(t),Fxo=r(w8e," \u2014 "),UD=n(w8e,"A",{href:!0});var Jlt=s(UD);Txo=r(Jlt,"BigBirdForSequenceClassification"),Jlt.forEach(t),Mxo=r(w8e," (BigBird model)"),w8e.forEach(t),Exo=i(j),j1=n(j,"LI",{});var A8e=s(j1);vfe=n(A8e,"STRONG",{});var Ylt=s(vfe);Cxo=r(Ylt,"bigbird_pegasus"),Ylt.forEach(t),wxo=r(A8e," \u2014 "),JD=n(A8e,"A",{href:!0});var Klt=s(JD);Axo=r(Klt,"BigBirdPegasusForSequenceClassification"),Klt.forEach(t),yxo=r(A8e," (BigBirdPegasus model)"),A8e.forEach(t),Lxo=i(j),D1=n(j,"LI",{});var y8e=s(D1);Ffe=n(y8e,"STRONG",{});var Zlt=s(Ffe);xxo=r(Zlt,"camembert"),Zlt.forEach(t),$xo=r(y8e," \u2014 "),YD=n(y8e,"A",{href:!0});var eit=s(YD);kxo=r(eit,"CamembertForSequenceClassification"),eit.forEach(t),Sxo=r(y8e," (CamemBERT model)"),y8e.forEach(t),Rxo=i(j),G1=n(j,"LI",{});var L8e=s(G1);Tfe=n(L8e,"STRONG",{});var oit=s(Tfe);Pxo=r(oit,"canine"),oit.forEach(t),Bxo=r(L8e," \u2014 "),KD=n(L8e,"A",{href:!0});var rit=s(KD);Ixo=r(rit,"CanineForSequenceClassification"),rit.forEach(t),qxo=r(L8e," (Canine model)"),L8e.forEach(t),Nxo=i(j),O1=n(j,"LI",{});var x8e=s(O1);Mfe=n(x8e,"STRONG",{});var tit=s(Mfe);jxo=r(tit,"convbert"),tit.forEach(t),Dxo=r(x8e," \u2014 "),ZD=n(x8e,"A",{href:!0});var ait=s(ZD);Gxo=r(ait,"ConvBertForSequenceClassification"),ait.forEach(t),Oxo=r(x8e," (ConvBERT model)"),x8e.forEach(t),Vxo=i(j),V1=n(j,"LI",{});var $8e=s(V1);Efe=n($8e,"STRONG",{});var nit=s(Efe);Xxo=r(nit,"ctrl"),nit.forEach(t),zxo=r($8e," \u2014 "),eG=n($8e,"A",{href:!0});var sit=s(eG);Wxo=r(sit,"CTRLForSequenceClassification"),sit.forEach(t),Qxo=r($8e," (CTRL model)"),$8e.forEach(t),Hxo=i(j),X1=n(j,"LI",{});var k8e=s(X1);Cfe=n(k8e,"STRONG",{});var lit=s(Cfe);Uxo=r(lit,"data2vec-text"),lit.forEach(t),Jxo=r(k8e," \u2014 "),oG=n(k8e,"A",{href:!0});var iit=s(oG);Yxo=r(iit,"Data2VecTextForSequenceClassification"),iit.forEach(t),Kxo=r(k8e," (Data2VecText model)"),k8e.forEach(t),Zxo=i(j),z1=n(j,"LI",{});var S8e=s(z1);wfe=n(S8e,"STRONG",{});var dit=s(wfe);e$o=r(dit,"deberta"),dit.forEach(t),o$o=r(S8e," \u2014 "),rG=n(S8e,"A",{href:!0});var cit=s(rG);r$o=r(cit,"DebertaForSequenceClassification"),cit.forEach(t),t$o=r(S8e," (DeBERTa model)"),S8e.forEach(t),a$o=i(j),W1=n(j,"LI",{});var R8e=s(W1);Afe=n(R8e,"STRONG",{});var fit=s(Afe);n$o=r(fit,"deberta-v2"),fit.forEach(t),s$o=r(R8e," \u2014 "),tG=n(R8e,"A",{href:!0});var mit=s(tG);l$o=r(mit,"DebertaV2ForSequenceClassification"),mit.forEach(t),i$o=r(R8e," (DeBERTa-v2 model)"),R8e.forEach(t),d$o=i(j),Q1=n(j,"LI",{});var P8e=s(Q1);yfe=n(P8e,"STRONG",{});var git=s(yfe);c$o=r(git,"distilbert"),git.forEach(t),f$o=r(P8e," \u2014 "),aG=n(P8e,"A",{href:!0});var hit=s(aG);m$o=r(hit,"DistilBertForSequenceClassification"),hit.forEach(t),g$o=r(P8e," (DistilBERT model)"),P8e.forEach(t),h$o=i(j),H1=n(j,"LI",{});var B8e=s(H1);Lfe=n(B8e,"STRONG",{});var pit=s(Lfe);p$o=r(pit,"electra"),pit.forEach(t),u$o=r(B8e," \u2014 "),nG=n(B8e,"A",{href:!0});var uit=s(nG);_$o=r(uit,"ElectraForSequenceClassification"),uit.forEach(t),b$o=r(B8e," (ELECTRA model)"),B8e.forEach(t),v$o=i(j),U1=n(j,"LI",{});var I8e=s(U1);xfe=n(I8e,"STRONG",{});var _it=s(xfe);F$o=r(_it,"flaubert"),_it.forEach(t),T$o=r(I8e," \u2014 "),sG=n(I8e,"A",{href:!0});var bit=s(sG);M$o=r(bit,"FlaubertForSequenceClassification"),bit.forEach(t),E$o=r(I8e," (FlauBERT model)"),I8e.forEach(t),C$o=i(j),J1=n(j,"LI",{});var q8e=s(J1);$fe=n(q8e,"STRONG",{});var vit=s($fe);w$o=r(vit,"fnet"),vit.forEach(t),A$o=r(q8e," \u2014 "),lG=n(q8e,"A",{href:!0});var Fit=s(lG);y$o=r(Fit,"FNetForSequenceClassification"),Fit.forEach(t),L$o=r(q8e," (FNet model)"),q8e.forEach(t),x$o=i(j),Y1=n(j,"LI",{});var N8e=s(Y1);kfe=n(N8e,"STRONG",{});var Tit=s(kfe);$$o=r(Tit,"funnel"),Tit.forEach(t),k$o=r(N8e," \u2014 "),iG=n(N8e,"A",{href:!0});var Mit=s(iG);S$o=r(Mit,"FunnelForSequenceClassification"),Mit.forEach(t),R$o=r(N8e," (Funnel Transformer model)"),N8e.forEach(t),P$o=i(j),K1=n(j,"LI",{});var j8e=s(K1);Sfe=n(j8e,"STRONG",{});var Eit=s(Sfe);B$o=r(Eit,"gpt2"),Eit.forEach(t),I$o=r(j8e," \u2014 "),dG=n(j8e,"A",{href:!0});var Cit=s(dG);q$o=r(Cit,"GPT2ForSequenceClassification"),Cit.forEach(t),N$o=r(j8e," (OpenAI GPT-2 model)"),j8e.forEach(t),j$o=i(j),Z1=n(j,"LI",{});var D8e=s(Z1);Rfe=n(D8e,"STRONG",{});var wit=s(Rfe);D$o=r(wit,"gpt_neo"),wit.forEach(t),G$o=r(D8e," \u2014 "),cG=n(D8e,"A",{href:!0});var Ait=s(cG);O$o=r(Ait,"GPTNeoForSequenceClassification"),Ait.forEach(t),V$o=r(D8e," (GPT Neo model)"),D8e.forEach(t),X$o=i(j),eb=n(j,"LI",{});var G8e=s(eb);Pfe=n(G8e,"STRONG",{});var yit=s(Pfe);z$o=r(yit,"gptj"),yit.forEach(t),W$o=r(G8e," \u2014 "),fG=n(G8e,"A",{href:!0});var Lit=s(fG);Q$o=r(Lit,"GPTJForSequenceClassification"),Lit.forEach(t),H$o=r(G8e," (GPT-J model)"),G8e.forEach(t),U$o=i(j),ob=n(j,"LI",{});var O8e=s(ob);Bfe=n(O8e,"STRONG",{});var xit=s(Bfe);J$o=r(xit,"ibert"),xit.forEach(t),Y$o=r(O8e," \u2014 "),mG=n(O8e,"A",{href:!0});var $it=s(mG);K$o=r($it,"IBertForSequenceClassification"),$it.forEach(t),Z$o=r(O8e," (I-BERT model)"),O8e.forEach(t),eko=i(j),rb=n(j,"LI",{});var V8e=s(rb);Ife=n(V8e,"STRONG",{});var kit=s(Ife);oko=r(kit,"layoutlm"),kit.forEach(t),rko=r(V8e," \u2014 "),gG=n(V8e,"A",{href:!0});var Sit=s(gG);tko=r(Sit,"LayoutLMForSequenceClassification"),Sit.forEach(t),ako=r(V8e," (LayoutLM model)"),V8e.forEach(t),nko=i(j),tb=n(j,"LI",{});var X8e=s(tb);qfe=n(X8e,"STRONG",{});var Rit=s(qfe);sko=r(Rit,"layoutlmv2"),Rit.forEach(t),lko=r(X8e," \u2014 "),hG=n(X8e,"A",{href:!0});var Pit=s(hG);iko=r(Pit,"LayoutLMv2ForSequenceClassification"),Pit.forEach(t),dko=r(X8e," (LayoutLMv2 model)"),X8e.forEach(t),cko=i(j),ab=n(j,"LI",{});var z8e=s(ab);Nfe=n(z8e,"STRONG",{});var Bit=s(Nfe);fko=r(Bit,"layoutlmv3"),Bit.forEach(t),mko=r(z8e," \u2014 "),pG=n(z8e,"A",{href:!0});var Iit=s(pG);gko=r(Iit,"LayoutLMv3ForSequenceClassification"),Iit.forEach(t),hko=r(z8e," (LayoutLMv3 model)"),z8e.forEach(t),pko=i(j),nb=n(j,"LI",{});var W8e=s(nb);jfe=n(W8e,"STRONG",{});var qit=s(jfe);uko=r(qit,"led"),qit.forEach(t),_ko=r(W8e," \u2014 "),uG=n(W8e,"A",{href:!0});var Nit=s(uG);bko=r(Nit,"LEDForSequenceClassification"),Nit.forEach(t),vko=r(W8e," (LED model)"),W8e.forEach(t),Fko=i(j),sb=n(j,"LI",{});var Q8e=s(sb);Dfe=n(Q8e,"STRONG",{});var jit=s(Dfe);Tko=r(jit,"longformer"),jit.forEach(t),Mko=r(Q8e," \u2014 "),_G=n(Q8e,"A",{href:!0});var Dit=s(_G);Eko=r(Dit,"LongformerForSequenceClassification"),Dit.forEach(t),Cko=r(Q8e," (Longformer model)"),Q8e.forEach(t),wko=i(j),lb=n(j,"LI",{});var H8e=s(lb);Gfe=n(H8e,"STRONG",{});var Git=s(Gfe);Ako=r(Git,"mbart"),Git.forEach(t),yko=r(H8e," \u2014 "),bG=n(H8e,"A",{href:!0});var Oit=s(bG);Lko=r(Oit,"MBartForSequenceClassification"),Oit.forEach(t),xko=r(H8e," (mBART model)"),H8e.forEach(t),$ko=i(j),ib=n(j,"LI",{});var U8e=s(ib);Ofe=n(U8e,"STRONG",{});var Vit=s(Ofe);kko=r(Vit,"megatron-bert"),Vit.forEach(t),Sko=r(U8e," \u2014 "),vG=n(U8e,"A",{href:!0});var Xit=s(vG);Rko=r(Xit,"MegatronBertForSequenceClassification"),Xit.forEach(t),Pko=r(U8e," (MegatronBert model)"),U8e.forEach(t),Bko=i(j),db=n(j,"LI",{});var J8e=s(db);Vfe=n(J8e,"STRONG",{});var zit=s(Vfe);Iko=r(zit,"mobilebert"),zit.forEach(t),qko=r(J8e," \u2014 "),FG=n(J8e,"A",{href:!0});var Wit=s(FG);Nko=r(Wit,"MobileBertForSequenceClassification"),Wit.forEach(t),jko=r(J8e," (MobileBERT model)"),J8e.forEach(t),Dko=i(j),cb=n(j,"LI",{});var Y8e=s(cb);Xfe=n(Y8e,"STRONG",{});var Qit=s(Xfe);Gko=r(Qit,"mpnet"),Qit.forEach(t),Oko=r(Y8e," \u2014 "),TG=n(Y8e,"A",{href:!0});var Hit=s(TG);Vko=r(Hit,"MPNetForSequenceClassification"),Hit.forEach(t),Xko=r(Y8e," (MPNet model)"),Y8e.forEach(t),zko=i(j),fb=n(j,"LI",{});var K8e=s(fb);zfe=n(K8e,"STRONG",{});var Uit=s(zfe);Wko=r(Uit,"nystromformer"),Uit.forEach(t),Qko=r(K8e," \u2014 "),MG=n(K8e,"A",{href:!0});var Jit=s(MG);Hko=r(Jit,"NystromformerForSequenceClassification"),Jit.forEach(t),Uko=r(K8e," (Nystromformer model)"),K8e.forEach(t),Jko=i(j),mb=n(j,"LI",{});var Z8e=s(mb);Wfe=n(Z8e,"STRONG",{});var Yit=s(Wfe);Yko=r(Yit,"openai-gpt"),Yit.forEach(t),Kko=r(Z8e," \u2014 "),EG=n(Z8e,"A",{href:!0});var Kit=s(EG);Zko=r(Kit,"OpenAIGPTForSequenceClassification"),Kit.forEach(t),eSo=r(Z8e," (OpenAI GPT model)"),Z8e.forEach(t),oSo=i(j),gb=n(j,"LI",{});var e9e=s(gb);Qfe=n(e9e,"STRONG",{});var Zit=s(Qfe);rSo=r(Zit,"perceiver"),Zit.forEach(t),tSo=r(e9e," \u2014 "),CG=n(e9e,"A",{href:!0});var edt=s(CG);aSo=r(edt,"PerceiverForSequenceClassification"),edt.forEach(t),nSo=r(e9e," (Perceiver model)"),e9e.forEach(t),sSo=i(j),hb=n(j,"LI",{});var o9e=s(hb);Hfe=n(o9e,"STRONG",{});var odt=s(Hfe);lSo=r(odt,"plbart"),odt.forEach(t),iSo=r(o9e," \u2014 "),wG=n(o9e,"A",{href:!0});var rdt=s(wG);dSo=r(rdt,"PLBartForSequenceClassification"),rdt.forEach(t),cSo=r(o9e," (PLBart model)"),o9e.forEach(t),fSo=i(j),pb=n(j,"LI",{});var r9e=s(pb);Ufe=n(r9e,"STRONG",{});var tdt=s(Ufe);mSo=r(tdt,"qdqbert"),tdt.forEach(t),gSo=r(r9e," \u2014 "),AG=n(r9e,"A",{href:!0});var adt=s(AG);hSo=r(adt,"QDQBertForSequenceClassification"),adt.forEach(t),pSo=r(r9e," (QDQBert model)"),r9e.forEach(t),uSo=i(j),ub=n(j,"LI",{});var t9e=s(ub);Jfe=n(t9e,"STRONG",{});var ndt=s(Jfe);_So=r(ndt,"reformer"),ndt.forEach(t),bSo=r(t9e," \u2014 "),yG=n(t9e,"A",{href:!0});var sdt=s(yG);vSo=r(sdt,"ReformerForSequenceClassification"),sdt.forEach(t),FSo=r(t9e," (Reformer model)"),t9e.forEach(t),TSo=i(j),_b=n(j,"LI",{});var a9e=s(_b);Yfe=n(a9e,"STRONG",{});var ldt=s(Yfe);MSo=r(ldt,"rembert"),ldt.forEach(t),ESo=r(a9e," \u2014 "),LG=n(a9e,"A",{href:!0});var idt=s(LG);CSo=r(idt,"RemBertForSequenceClassification"),idt.forEach(t),wSo=r(a9e," (RemBERT model)"),a9e.forEach(t),ASo=i(j),bb=n(j,"LI",{});var n9e=s(bb);Kfe=n(n9e,"STRONG",{});var ddt=s(Kfe);ySo=r(ddt,"roberta"),ddt.forEach(t),LSo=r(n9e," \u2014 "),xG=n(n9e,"A",{href:!0});var cdt=s(xG);xSo=r(cdt,"RobertaForSequenceClassification"),cdt.forEach(t),$So=r(n9e," (RoBERTa model)"),n9e.forEach(t),kSo=i(j),vb=n(j,"LI",{});var s9e=s(vb);Zfe=n(s9e,"STRONG",{});var fdt=s(Zfe);SSo=r(fdt,"roformer"),fdt.forEach(t),RSo=r(s9e," \u2014 "),$G=n(s9e,"A",{href:!0});var mdt=s($G);PSo=r(mdt,"RoFormerForSequenceClassification"),mdt.forEach(t),BSo=r(s9e," (RoFormer model)"),s9e.forEach(t),ISo=i(j),Fb=n(j,"LI",{});var l9e=s(Fb);eme=n(l9e,"STRONG",{});var gdt=s(eme);qSo=r(gdt,"squeezebert"),gdt.forEach(t),NSo=r(l9e," \u2014 "),kG=n(l9e,"A",{href:!0});var hdt=s(kG);jSo=r(hdt,"SqueezeBertForSequenceClassification"),hdt.forEach(t),DSo=r(l9e," (SqueezeBERT model)"),l9e.forEach(t),GSo=i(j),Tb=n(j,"LI",{});var i9e=s(Tb);ome=n(i9e,"STRONG",{});var pdt=s(ome);OSo=r(pdt,"tapas"),pdt.forEach(t),VSo=r(i9e," \u2014 "),SG=n(i9e,"A",{href:!0});var udt=s(SG);XSo=r(udt,"TapasForSequenceClassification"),udt.forEach(t),zSo=r(i9e," (TAPAS model)"),i9e.forEach(t),WSo=i(j),Mb=n(j,"LI",{});var d9e=s(Mb);rme=n(d9e,"STRONG",{});var _dt=s(rme);QSo=r(_dt,"transfo-xl"),_dt.forEach(t),HSo=r(d9e," \u2014 "),RG=n(d9e,"A",{href:!0});var bdt=s(RG);USo=r(bdt,"TransfoXLForSequenceClassification"),bdt.forEach(t),JSo=r(d9e," (Transformer-XL model)"),d9e.forEach(t),YSo=i(j),Eb=n(j,"LI",{});var c9e=s(Eb);tme=n(c9e,"STRONG",{});var vdt=s(tme);KSo=r(vdt,"xlm"),vdt.forEach(t),ZSo=r(c9e," \u2014 "),PG=n(c9e,"A",{href:!0});var Fdt=s(PG);eRo=r(Fdt,"XLMForSequenceClassification"),Fdt.forEach(t),oRo=r(c9e," (XLM model)"),c9e.forEach(t),rRo=i(j),Cb=n(j,"LI",{});var f9e=s(Cb);ame=n(f9e,"STRONG",{});var Tdt=s(ame);tRo=r(Tdt,"xlm-roberta"),Tdt.forEach(t),aRo=r(f9e," \u2014 "),BG=n(f9e,"A",{href:!0});var Mdt=s(BG);nRo=r(Mdt,"XLMRobertaForSequenceClassification"),Mdt.forEach(t),sRo=r(f9e," (XLM-RoBERTa model)"),f9e.forEach(t),lRo=i(j),wb=n(j,"LI",{});var m9e=s(wb);nme=n(m9e,"STRONG",{});var Edt=s(nme);iRo=r(Edt,"xlm-roberta-xl"),Edt.forEach(t),dRo=r(m9e," \u2014 "),IG=n(m9e,"A",{href:!0});var Cdt=s(IG);cRo=r(Cdt,"XLMRobertaXLForSequenceClassification"),Cdt.forEach(t),fRo=r(m9e," (XLM-RoBERTa-XL model)"),m9e.forEach(t),mRo=i(j),Ab=n(j,"LI",{});var g9e=s(Ab);sme=n(g9e,"STRONG",{});var wdt=s(sme);gRo=r(wdt,"xlnet"),wdt.forEach(t),hRo=r(g9e," \u2014 "),qG=n(g9e,"A",{href:!0});var Adt=s(qG);pRo=r(Adt,"XLNetForSequenceClassification"),Adt.forEach(t),uRo=r(g9e," (XLNet model)"),g9e.forEach(t),_Ro=i(j),yb=n(j,"LI",{});var h9e=s(yb);lme=n(h9e,"STRONG",{});var ydt=s(lme);bRo=r(ydt,"yoso"),ydt.forEach(t),vRo=r(h9e," \u2014 "),NG=n(h9e,"A",{href:!0});var Ldt=s(NG);FRo=r(Ldt,"YosoForSequenceClassification"),Ldt.forEach(t),TRo=r(h9e," (YOSO model)"),h9e.forEach(t),j.forEach(t),MRo=i(sa),Lb=n(sa,"P",{});var p9e=s(Lb);ERo=r(p9e,"The model is set in evaluation mode by default using "),ime=n(p9e,"CODE",{});var xdt=s(ime);CRo=r(xdt,"model.eval()"),xdt.forEach(t),wRo=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=n(p9e,"CODE",{});var $dt=s(dme);ARo=r($dt,"model.train()"),$dt.forEach(t),p9e.forEach(t),yRo=i(sa),T(xb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Gqe=i(f),Vi=n(f,"H2",{class:!0});var zje=s(Vi);$b=n(zje,"A",{id:!0,class:!0,href:!0});var kdt=s($b);cme=n(kdt,"SPAN",{});var Sdt=s(cme);T(Fy.$$.fragment,Sdt),Sdt.forEach(t),kdt.forEach(t),LRo=i(zje),fme=n(zje,"SPAN",{});var Rdt=s(fme);xRo=r(Rdt,"AutoModelForMultipleChoice"),Rdt.forEach(t),zje.forEach(t),Oqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Ty.$$.fragment,Qs),$Ro=i(Qs),Xi=n(Qs,"P",{});var dZ=s(Xi);kRo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jG=n(dZ,"A",{href:!0});var Pdt=s(jG);SRo=r(Pdt,"from_pretrained()"),Pdt.forEach(t),RRo=r(dZ," class method or the "),DG=n(dZ,"A",{href:!0});var Bdt=s(DG);PRo=r(Bdt,"from_config()"),Bdt.forEach(t),BRo=r(dZ,` class
method.`),dZ.forEach(t),IRo=i(Qs),My=n(Qs,"P",{});var Wje=s(My);qRo=r(Wje,"This class cannot be instantiated directly using "),mme=n(Wje,"CODE",{});var Idt=s(mme);NRo=r(Idt,"__init__()"),Idt.forEach(t),jRo=r(Wje," (throws an error)."),Wje.forEach(t),DRo=i(Qs),dt=n(Qs,"DIV",{class:!0});var P3=s(dt);T(Ey.$$.fragment,P3),GRo=i(P3),gme=n(P3,"P",{});var qdt=s(gme);ORo=r(qdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qdt.forEach(t),VRo=i(P3),zi=n(P3,"P",{});var cZ=s(zi);XRo=r(cZ,`Note:
Loading a model from its configuration file does `),hme=n(cZ,"STRONG",{});var Ndt=s(hme);zRo=r(Ndt,"not"),Ndt.forEach(t),WRo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(cZ,"A",{href:!0});var jdt=s(GG);QRo=r(jdt,"from_pretrained()"),jdt.forEach(t),HRo=r(cZ," to load the model weights."),cZ.forEach(t),URo=i(P3),T(kb.$$.fragment,P3),P3.forEach(t),JRo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(Cy.$$.fragment,la),YRo=i(la),pme=n(la,"P",{});var Ddt=s(pme);KRo=r(Ddt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ddt.forEach(t),ZRo=i(la),Pa=n(la,"P",{});var B3=s(Pa);ePo=r(B3,"The model class to instantiate is selected based on the "),ume=n(B3,"CODE",{});var Gdt=s(ume);oPo=r(Gdt,"model_type"),Gdt.forEach(t),rPo=r(B3,` property of the config object (either
passed as an argument or loaded from `),_me=n(B3,"CODE",{});var Odt=s(_me);tPo=r(Odt,"pretrained_model_name_or_path"),Odt.forEach(t),aPo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(B3,"CODE",{});var Vdt=s(bme);nPo=r(Vdt,"pretrained_model_name_or_path"),Vdt.forEach(t),sPo=r(B3,":"),B3.forEach(t),lPo=i(la),Y=n(la,"UL",{});var K=s(Y);Sb=n(K,"LI",{});var u9e=s(Sb);vme=n(u9e,"STRONG",{});var Xdt=s(vme);iPo=r(Xdt,"albert"),Xdt.forEach(t),dPo=r(u9e," \u2014 "),OG=n(u9e,"A",{href:!0});var zdt=s(OG);cPo=r(zdt,"AlbertForMultipleChoice"),zdt.forEach(t),fPo=r(u9e," (ALBERT model)"),u9e.forEach(t),mPo=i(K),Rb=n(K,"LI",{});var _9e=s(Rb);Fme=n(_9e,"STRONG",{});var Wdt=s(Fme);gPo=r(Wdt,"bert"),Wdt.forEach(t),hPo=r(_9e," \u2014 "),VG=n(_9e,"A",{href:!0});var Qdt=s(VG);pPo=r(Qdt,"BertForMultipleChoice"),Qdt.forEach(t),uPo=r(_9e," (BERT model)"),_9e.forEach(t),_Po=i(K),Pb=n(K,"LI",{});var b9e=s(Pb);Tme=n(b9e,"STRONG",{});var Hdt=s(Tme);bPo=r(Hdt,"big_bird"),Hdt.forEach(t),vPo=r(b9e," \u2014 "),XG=n(b9e,"A",{href:!0});var Udt=s(XG);FPo=r(Udt,"BigBirdForMultipleChoice"),Udt.forEach(t),TPo=r(b9e," (BigBird model)"),b9e.forEach(t),MPo=i(K),Bb=n(K,"LI",{});var v9e=s(Bb);Mme=n(v9e,"STRONG",{});var Jdt=s(Mme);EPo=r(Jdt,"camembert"),Jdt.forEach(t),CPo=r(v9e," \u2014 "),zG=n(v9e,"A",{href:!0});var Ydt=s(zG);wPo=r(Ydt,"CamembertForMultipleChoice"),Ydt.forEach(t),APo=r(v9e," (CamemBERT model)"),v9e.forEach(t),yPo=i(K),Ib=n(K,"LI",{});var F9e=s(Ib);Eme=n(F9e,"STRONG",{});var Kdt=s(Eme);LPo=r(Kdt,"canine"),Kdt.forEach(t),xPo=r(F9e," \u2014 "),WG=n(F9e,"A",{href:!0});var Zdt=s(WG);$Po=r(Zdt,"CanineForMultipleChoice"),Zdt.forEach(t),kPo=r(F9e," (Canine model)"),F9e.forEach(t),SPo=i(K),qb=n(K,"LI",{});var T9e=s(qb);Cme=n(T9e,"STRONG",{});var ect=s(Cme);RPo=r(ect,"convbert"),ect.forEach(t),PPo=r(T9e," \u2014 "),QG=n(T9e,"A",{href:!0});var oct=s(QG);BPo=r(oct,"ConvBertForMultipleChoice"),oct.forEach(t),IPo=r(T9e," (ConvBERT model)"),T9e.forEach(t),qPo=i(K),Nb=n(K,"LI",{});var M9e=s(Nb);wme=n(M9e,"STRONG",{});var rct=s(wme);NPo=r(rct,"data2vec-text"),rct.forEach(t),jPo=r(M9e," \u2014 "),HG=n(M9e,"A",{href:!0});var tct=s(HG);DPo=r(tct,"Data2VecTextForMultipleChoice"),tct.forEach(t),GPo=r(M9e," (Data2VecText model)"),M9e.forEach(t),OPo=i(K),jb=n(K,"LI",{});var E9e=s(jb);Ame=n(E9e,"STRONG",{});var act=s(Ame);VPo=r(act,"deberta-v2"),act.forEach(t),XPo=r(E9e," \u2014 "),UG=n(E9e,"A",{href:!0});var nct=s(UG);zPo=r(nct,"DebertaV2ForMultipleChoice"),nct.forEach(t),WPo=r(E9e," (DeBERTa-v2 model)"),E9e.forEach(t),QPo=i(K),Db=n(K,"LI",{});var C9e=s(Db);yme=n(C9e,"STRONG",{});var sct=s(yme);HPo=r(sct,"distilbert"),sct.forEach(t),UPo=r(C9e," \u2014 "),JG=n(C9e,"A",{href:!0});var lct=s(JG);JPo=r(lct,"DistilBertForMultipleChoice"),lct.forEach(t),YPo=r(C9e," (DistilBERT model)"),C9e.forEach(t),KPo=i(K),Gb=n(K,"LI",{});var w9e=s(Gb);Lme=n(w9e,"STRONG",{});var ict=s(Lme);ZPo=r(ict,"electra"),ict.forEach(t),eBo=r(w9e," \u2014 "),YG=n(w9e,"A",{href:!0});var dct=s(YG);oBo=r(dct,"ElectraForMultipleChoice"),dct.forEach(t),rBo=r(w9e," (ELECTRA model)"),w9e.forEach(t),tBo=i(K),Ob=n(K,"LI",{});var A9e=s(Ob);xme=n(A9e,"STRONG",{});var cct=s(xme);aBo=r(cct,"flaubert"),cct.forEach(t),nBo=r(A9e," \u2014 "),KG=n(A9e,"A",{href:!0});var fct=s(KG);sBo=r(fct,"FlaubertForMultipleChoice"),fct.forEach(t),lBo=r(A9e," (FlauBERT model)"),A9e.forEach(t),iBo=i(K),Vb=n(K,"LI",{});var y9e=s(Vb);$me=n(y9e,"STRONG",{});var mct=s($me);dBo=r(mct,"fnet"),mct.forEach(t),cBo=r(y9e," \u2014 "),ZG=n(y9e,"A",{href:!0});var gct=s(ZG);fBo=r(gct,"FNetForMultipleChoice"),gct.forEach(t),mBo=r(y9e," (FNet model)"),y9e.forEach(t),gBo=i(K),Xb=n(K,"LI",{});var L9e=s(Xb);kme=n(L9e,"STRONG",{});var hct=s(kme);hBo=r(hct,"funnel"),hct.forEach(t),pBo=r(L9e," \u2014 "),eO=n(L9e,"A",{href:!0});var pct=s(eO);uBo=r(pct,"FunnelForMultipleChoice"),pct.forEach(t),_Bo=r(L9e," (Funnel Transformer model)"),L9e.forEach(t),bBo=i(K),zb=n(K,"LI",{});var x9e=s(zb);Sme=n(x9e,"STRONG",{});var uct=s(Sme);vBo=r(uct,"ibert"),uct.forEach(t),FBo=r(x9e," \u2014 "),oO=n(x9e,"A",{href:!0});var _ct=s(oO);TBo=r(_ct,"IBertForMultipleChoice"),_ct.forEach(t),MBo=r(x9e," (I-BERT model)"),x9e.forEach(t),EBo=i(K),Wb=n(K,"LI",{});var $9e=s(Wb);Rme=n($9e,"STRONG",{});var bct=s(Rme);CBo=r(bct,"longformer"),bct.forEach(t),wBo=r($9e," \u2014 "),rO=n($9e,"A",{href:!0});var vct=s(rO);ABo=r(vct,"LongformerForMultipleChoice"),vct.forEach(t),yBo=r($9e," (Longformer model)"),$9e.forEach(t),LBo=i(K),Qb=n(K,"LI",{});var k9e=s(Qb);Pme=n(k9e,"STRONG",{});var Fct=s(Pme);xBo=r(Fct,"megatron-bert"),Fct.forEach(t),$Bo=r(k9e," \u2014 "),tO=n(k9e,"A",{href:!0});var Tct=s(tO);kBo=r(Tct,"MegatronBertForMultipleChoice"),Tct.forEach(t),SBo=r(k9e," (MegatronBert model)"),k9e.forEach(t),RBo=i(K),Hb=n(K,"LI",{});var S9e=s(Hb);Bme=n(S9e,"STRONG",{});var Mct=s(Bme);PBo=r(Mct,"mobilebert"),Mct.forEach(t),BBo=r(S9e," \u2014 "),aO=n(S9e,"A",{href:!0});var Ect=s(aO);IBo=r(Ect,"MobileBertForMultipleChoice"),Ect.forEach(t),qBo=r(S9e," (MobileBERT model)"),S9e.forEach(t),NBo=i(K),Ub=n(K,"LI",{});var R9e=s(Ub);Ime=n(R9e,"STRONG",{});var Cct=s(Ime);jBo=r(Cct,"mpnet"),Cct.forEach(t),DBo=r(R9e," \u2014 "),nO=n(R9e,"A",{href:!0});var wct=s(nO);GBo=r(wct,"MPNetForMultipleChoice"),wct.forEach(t),OBo=r(R9e," (MPNet model)"),R9e.forEach(t),VBo=i(K),Jb=n(K,"LI",{});var P9e=s(Jb);qme=n(P9e,"STRONG",{});var Act=s(qme);XBo=r(Act,"nystromformer"),Act.forEach(t),zBo=r(P9e," \u2014 "),sO=n(P9e,"A",{href:!0});var yct=s(sO);WBo=r(yct,"NystromformerForMultipleChoice"),yct.forEach(t),QBo=r(P9e," (Nystromformer model)"),P9e.forEach(t),HBo=i(K),Yb=n(K,"LI",{});var B9e=s(Yb);Nme=n(B9e,"STRONG",{});var Lct=s(Nme);UBo=r(Lct,"qdqbert"),Lct.forEach(t),JBo=r(B9e," \u2014 "),lO=n(B9e,"A",{href:!0});var xct=s(lO);YBo=r(xct,"QDQBertForMultipleChoice"),xct.forEach(t),KBo=r(B9e," (QDQBert model)"),B9e.forEach(t),ZBo=i(K),Kb=n(K,"LI",{});var I9e=s(Kb);jme=n(I9e,"STRONG",{});var $ct=s(jme);eIo=r($ct,"rembert"),$ct.forEach(t),oIo=r(I9e," \u2014 "),iO=n(I9e,"A",{href:!0});var kct=s(iO);rIo=r(kct,"RemBertForMultipleChoice"),kct.forEach(t),tIo=r(I9e," (RemBERT model)"),I9e.forEach(t),aIo=i(K),Zb=n(K,"LI",{});var q9e=s(Zb);Dme=n(q9e,"STRONG",{});var Sct=s(Dme);nIo=r(Sct,"roberta"),Sct.forEach(t),sIo=r(q9e," \u2014 "),dO=n(q9e,"A",{href:!0});var Rct=s(dO);lIo=r(Rct,"RobertaForMultipleChoice"),Rct.forEach(t),iIo=r(q9e," (RoBERTa model)"),q9e.forEach(t),dIo=i(K),e2=n(K,"LI",{});var N9e=s(e2);Gme=n(N9e,"STRONG",{});var Pct=s(Gme);cIo=r(Pct,"roformer"),Pct.forEach(t),fIo=r(N9e," \u2014 "),cO=n(N9e,"A",{href:!0});var Bct=s(cO);mIo=r(Bct,"RoFormerForMultipleChoice"),Bct.forEach(t),gIo=r(N9e," (RoFormer model)"),N9e.forEach(t),hIo=i(K),o2=n(K,"LI",{});var j9e=s(o2);Ome=n(j9e,"STRONG",{});var Ict=s(Ome);pIo=r(Ict,"squeezebert"),Ict.forEach(t),uIo=r(j9e," \u2014 "),fO=n(j9e,"A",{href:!0});var qct=s(fO);_Io=r(qct,"SqueezeBertForMultipleChoice"),qct.forEach(t),bIo=r(j9e," (SqueezeBERT model)"),j9e.forEach(t),vIo=i(K),r2=n(K,"LI",{});var D9e=s(r2);Vme=n(D9e,"STRONG",{});var Nct=s(Vme);FIo=r(Nct,"xlm"),Nct.forEach(t),TIo=r(D9e," \u2014 "),mO=n(D9e,"A",{href:!0});var jct=s(mO);MIo=r(jct,"XLMForMultipleChoice"),jct.forEach(t),EIo=r(D9e," (XLM model)"),D9e.forEach(t),CIo=i(K),t2=n(K,"LI",{});var G9e=s(t2);Xme=n(G9e,"STRONG",{});var Dct=s(Xme);wIo=r(Dct,"xlm-roberta"),Dct.forEach(t),AIo=r(G9e," \u2014 "),gO=n(G9e,"A",{href:!0});var Gct=s(gO);yIo=r(Gct,"XLMRobertaForMultipleChoice"),Gct.forEach(t),LIo=r(G9e," (XLM-RoBERTa model)"),G9e.forEach(t),xIo=i(K),a2=n(K,"LI",{});var O9e=s(a2);zme=n(O9e,"STRONG",{});var Oct=s(zme);$Io=r(Oct,"xlm-roberta-xl"),Oct.forEach(t),kIo=r(O9e," \u2014 "),hO=n(O9e,"A",{href:!0});var Vct=s(hO);SIo=r(Vct,"XLMRobertaXLForMultipleChoice"),Vct.forEach(t),RIo=r(O9e," (XLM-RoBERTa-XL model)"),O9e.forEach(t),PIo=i(K),n2=n(K,"LI",{});var V9e=s(n2);Wme=n(V9e,"STRONG",{});var Xct=s(Wme);BIo=r(Xct,"xlnet"),Xct.forEach(t),IIo=r(V9e," \u2014 "),pO=n(V9e,"A",{href:!0});var zct=s(pO);qIo=r(zct,"XLNetForMultipleChoice"),zct.forEach(t),NIo=r(V9e," (XLNet model)"),V9e.forEach(t),jIo=i(K),s2=n(K,"LI",{});var X9e=s(s2);Qme=n(X9e,"STRONG",{});var Wct=s(Qme);DIo=r(Wct,"yoso"),Wct.forEach(t),GIo=r(X9e," \u2014 "),uO=n(X9e,"A",{href:!0});var Qct=s(uO);OIo=r(Qct,"YosoForMultipleChoice"),Qct.forEach(t),VIo=r(X9e," (YOSO model)"),X9e.forEach(t),K.forEach(t),XIo=i(la),l2=n(la,"P",{});var z9e=s(l2);zIo=r(z9e,"The model is set in evaluation mode by default using "),Hme=n(z9e,"CODE",{});var Hct=s(Hme);WIo=r(Hct,"model.eval()"),Hct.forEach(t),QIo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(z9e,"CODE",{});var Uct=s(Ume);HIo=r(Uct,"model.train()"),Uct.forEach(t),z9e.forEach(t),UIo=i(la),T(i2.$$.fragment,la),la.forEach(t),Qs.forEach(t),Vqe=i(f),Wi=n(f,"H2",{class:!0});var Qje=s(Wi);d2=n(Qje,"A",{id:!0,class:!0,href:!0});var Jct=s(d2);Jme=n(Jct,"SPAN",{});var Yct=s(Jme);T(wy.$$.fragment,Yct),Yct.forEach(t),Jct.forEach(t),JIo=i(Qje),Yme=n(Qje,"SPAN",{});var Kct=s(Yme);YIo=r(Kct,"AutoModelForNextSentencePrediction"),Kct.forEach(t),Qje.forEach(t),Xqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Ay.$$.fragment,Hs),KIo=i(Hs),Qi=n(Hs,"P",{});var fZ=s(Qi);ZIo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_O=n(fZ,"A",{href:!0});var Zct=s(_O);eqo=r(Zct,"from_pretrained()"),Zct.forEach(t),oqo=r(fZ," class method or the "),bO=n(fZ,"A",{href:!0});var eft=s(bO);rqo=r(eft,"from_config()"),eft.forEach(t),tqo=r(fZ,` class
method.`),fZ.forEach(t),aqo=i(Hs),yy=n(Hs,"P",{});var Hje=s(yy);nqo=r(Hje,"This class cannot be instantiated directly using "),Kme=n(Hje,"CODE",{});var oft=s(Kme);sqo=r(oft,"__init__()"),oft.forEach(t),lqo=r(Hje," (throws an error)."),Hje.forEach(t),iqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var I3=s(ct);T(Ly.$$.fragment,I3),dqo=i(I3),Zme=n(I3,"P",{});var rft=s(Zme);cqo=r(rft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rft.forEach(t),fqo=i(I3),Hi=n(I3,"P",{});var mZ=s(Hi);mqo=r(mZ,`Note:
Loading a model from its configuration file does `),ege=n(mZ,"STRONG",{});var tft=s(ege);gqo=r(tft,"not"),tft.forEach(t),hqo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(mZ,"A",{href:!0});var aft=s(vO);pqo=r(aft,"from_pretrained()"),aft.forEach(t),uqo=r(mZ," to load the model weights."),mZ.forEach(t),_qo=i(I3),T(c2.$$.fragment,I3),I3.forEach(t),bqo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(xy.$$.fragment,ia),vqo=i(ia),oge=n(ia,"P",{});var nft=s(oge);Fqo=r(nft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nft.forEach(t),Tqo=i(ia),Ba=n(ia,"P",{});var q3=s(Ba);Mqo=r(q3,"The model class to instantiate is selected based on the "),rge=n(q3,"CODE",{});var sft=s(rge);Eqo=r(sft,"model_type"),sft.forEach(t),Cqo=r(q3,` property of the config object (either
passed as an argument or loaded from `),tge=n(q3,"CODE",{});var lft=s(tge);wqo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),Aqo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=n(q3,"CODE",{});var ift=s(age);yqo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),Lqo=r(q3,":"),q3.forEach(t),xqo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);f2=n(Us,"LI",{});var W9e=s(f2);nge=n(W9e,"STRONG",{});var dft=s(nge);$qo=r(dft,"bert"),dft.forEach(t),kqo=r(W9e," \u2014 "),FO=n(W9e,"A",{href:!0});var cft=s(FO);Sqo=r(cft,"BertForNextSentencePrediction"),cft.forEach(t),Rqo=r(W9e," (BERT model)"),W9e.forEach(t),Pqo=i(Us),m2=n(Us,"LI",{});var Q9e=s(m2);sge=n(Q9e,"STRONG",{});var fft=s(sge);Bqo=r(fft,"fnet"),fft.forEach(t),Iqo=r(Q9e," \u2014 "),TO=n(Q9e,"A",{href:!0});var mft=s(TO);qqo=r(mft,"FNetForNextSentencePrediction"),mft.forEach(t),Nqo=r(Q9e," (FNet model)"),Q9e.forEach(t),jqo=i(Us),g2=n(Us,"LI",{});var H9e=s(g2);lge=n(H9e,"STRONG",{});var gft=s(lge);Dqo=r(gft,"megatron-bert"),gft.forEach(t),Gqo=r(H9e," \u2014 "),MO=n(H9e,"A",{href:!0});var hft=s(MO);Oqo=r(hft,"MegatronBertForNextSentencePrediction"),hft.forEach(t),Vqo=r(H9e," (MegatronBert model)"),H9e.forEach(t),Xqo=i(Us),h2=n(Us,"LI",{});var U9e=s(h2);ige=n(U9e,"STRONG",{});var pft=s(ige);zqo=r(pft,"mobilebert"),pft.forEach(t),Wqo=r(U9e," \u2014 "),EO=n(U9e,"A",{href:!0});var uft=s(EO);Qqo=r(uft,"MobileBertForNextSentencePrediction"),uft.forEach(t),Hqo=r(U9e," (MobileBERT model)"),U9e.forEach(t),Uqo=i(Us),p2=n(Us,"LI",{});var J9e=s(p2);dge=n(J9e,"STRONG",{});var _ft=s(dge);Jqo=r(_ft,"qdqbert"),_ft.forEach(t),Yqo=r(J9e," \u2014 "),CO=n(J9e,"A",{href:!0});var bft=s(CO);Kqo=r(bft,"QDQBertForNextSentencePrediction"),bft.forEach(t),Zqo=r(J9e," (QDQBert model)"),J9e.forEach(t),Us.forEach(t),eNo=i(ia),u2=n(ia,"P",{});var Y9e=s(u2);oNo=r(Y9e,"The model is set in evaluation mode by default using "),cge=n(Y9e,"CODE",{});var vft=s(cge);rNo=r(vft,"model.eval()"),vft.forEach(t),tNo=r(Y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=n(Y9e,"CODE",{});var Fft=s(fge);aNo=r(Fft,"model.train()"),Fft.forEach(t),Y9e.forEach(t),nNo=i(ia),T(_2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),zqe=i(f),Ui=n(f,"H2",{class:!0});var Uje=s(Ui);b2=n(Uje,"A",{id:!0,class:!0,href:!0});var Tft=s(b2);mge=n(Tft,"SPAN",{});var Mft=s(mge);T($y.$$.fragment,Mft),Mft.forEach(t),Tft.forEach(t),sNo=i(Uje),gge=n(Uje,"SPAN",{});var Eft=s(gge);lNo=r(Eft,"AutoModelForTokenClassification"),Eft.forEach(t),Uje.forEach(t),Wqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(ky.$$.fragment,Js),iNo=i(Js),Ji=n(Js,"P",{});var gZ=s(Ji);dNo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wO=n(gZ,"A",{href:!0});var Cft=s(wO);cNo=r(Cft,"from_pretrained()"),Cft.forEach(t),fNo=r(gZ," class method or the "),AO=n(gZ,"A",{href:!0});var wft=s(AO);mNo=r(wft,"from_config()"),wft.forEach(t),gNo=r(gZ,` class
method.`),gZ.forEach(t),hNo=i(Js),Sy=n(Js,"P",{});var Jje=s(Sy);pNo=r(Jje,"This class cannot be instantiated directly using "),hge=n(Jje,"CODE",{});var Aft=s(hge);uNo=r(Aft,"__init__()"),Aft.forEach(t),_No=r(Jje," (throws an error)."),Jje.forEach(t),bNo=i(Js),ft=n(Js,"DIV",{class:!0});var N3=s(ft);T(Ry.$$.fragment,N3),vNo=i(N3),pge=n(N3,"P",{});var yft=s(pge);FNo=r(yft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yft.forEach(t),TNo=i(N3),Yi=n(N3,"P",{});var hZ=s(Yi);MNo=r(hZ,`Note:
Loading a model from its configuration file does `),uge=n(hZ,"STRONG",{});var Lft=s(uge);ENo=r(Lft,"not"),Lft.forEach(t),CNo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(hZ,"A",{href:!0});var xft=s(yO);wNo=r(xft,"from_pretrained()"),xft.forEach(t),ANo=r(hZ," to load the model weights."),hZ.forEach(t),yNo=i(N3),T(v2.$$.fragment,N3),N3.forEach(t),LNo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Py.$$.fragment,da),xNo=i(da),_ge=n(da,"P",{});var $ft=s(_ge);$No=r($ft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$ft.forEach(t),kNo=i(da),Ia=n(da,"P",{});var j3=s(Ia);SNo=r(j3,"The model class to instantiate is selected based on the "),bge=n(j3,"CODE",{});var kft=s(bge);RNo=r(kft,"model_type"),kft.forEach(t),PNo=r(j3,` property of the config object (either
passed as an argument or loaded from `),vge=n(j3,"CODE",{});var Sft=s(vge);BNo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),INo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(j3,"CODE",{});var Rft=s(Fge);qNo=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),NNo=r(j3,":"),j3.forEach(t),jNo=i(da),H=n(da,"UL",{});var J=s(H);F2=n(J,"LI",{});var K9e=s(F2);Tge=n(K9e,"STRONG",{});var Pft=s(Tge);DNo=r(Pft,"albert"),Pft.forEach(t),GNo=r(K9e," \u2014 "),LO=n(K9e,"A",{href:!0});var Bft=s(LO);ONo=r(Bft,"AlbertForTokenClassification"),Bft.forEach(t),VNo=r(K9e," (ALBERT model)"),K9e.forEach(t),XNo=i(J),T2=n(J,"LI",{});var Z9e=s(T2);Mge=n(Z9e,"STRONG",{});var Ift=s(Mge);zNo=r(Ift,"bert"),Ift.forEach(t),WNo=r(Z9e," \u2014 "),xO=n(Z9e,"A",{href:!0});var qft=s(xO);QNo=r(qft,"BertForTokenClassification"),qft.forEach(t),HNo=r(Z9e," (BERT model)"),Z9e.forEach(t),UNo=i(J),M2=n(J,"LI",{});var exe=s(M2);Ege=n(exe,"STRONG",{});var Nft=s(Ege);JNo=r(Nft,"big_bird"),Nft.forEach(t),YNo=r(exe," \u2014 "),$O=n(exe,"A",{href:!0});var jft=s($O);KNo=r(jft,"BigBirdForTokenClassification"),jft.forEach(t),ZNo=r(exe," (BigBird model)"),exe.forEach(t),ejo=i(J),E2=n(J,"LI",{});var oxe=s(E2);Cge=n(oxe,"STRONG",{});var Dft=s(Cge);ojo=r(Dft,"camembert"),Dft.forEach(t),rjo=r(oxe," \u2014 "),kO=n(oxe,"A",{href:!0});var Gft=s(kO);tjo=r(Gft,"CamembertForTokenClassification"),Gft.forEach(t),ajo=r(oxe," (CamemBERT model)"),oxe.forEach(t),njo=i(J),C2=n(J,"LI",{});var rxe=s(C2);wge=n(rxe,"STRONG",{});var Oft=s(wge);sjo=r(Oft,"canine"),Oft.forEach(t),ljo=r(rxe," \u2014 "),SO=n(rxe,"A",{href:!0});var Vft=s(SO);ijo=r(Vft,"CanineForTokenClassification"),Vft.forEach(t),djo=r(rxe," (Canine model)"),rxe.forEach(t),cjo=i(J),w2=n(J,"LI",{});var txe=s(w2);Age=n(txe,"STRONG",{});var Xft=s(Age);fjo=r(Xft,"convbert"),Xft.forEach(t),mjo=r(txe," \u2014 "),RO=n(txe,"A",{href:!0});var zft=s(RO);gjo=r(zft,"ConvBertForTokenClassification"),zft.forEach(t),hjo=r(txe," (ConvBERT model)"),txe.forEach(t),pjo=i(J),A2=n(J,"LI",{});var axe=s(A2);yge=n(axe,"STRONG",{});var Wft=s(yge);ujo=r(Wft,"data2vec-text"),Wft.forEach(t),_jo=r(axe," \u2014 "),PO=n(axe,"A",{href:!0});var Qft=s(PO);bjo=r(Qft,"Data2VecTextForTokenClassification"),Qft.forEach(t),vjo=r(axe," (Data2VecText model)"),axe.forEach(t),Fjo=i(J),y2=n(J,"LI",{});var nxe=s(y2);Lge=n(nxe,"STRONG",{});var Hft=s(Lge);Tjo=r(Hft,"deberta"),Hft.forEach(t),Mjo=r(nxe," \u2014 "),BO=n(nxe,"A",{href:!0});var Uft=s(BO);Ejo=r(Uft,"DebertaForTokenClassification"),Uft.forEach(t),Cjo=r(nxe," (DeBERTa model)"),nxe.forEach(t),wjo=i(J),L2=n(J,"LI",{});var sxe=s(L2);xge=n(sxe,"STRONG",{});var Jft=s(xge);Ajo=r(Jft,"deberta-v2"),Jft.forEach(t),yjo=r(sxe," \u2014 "),IO=n(sxe,"A",{href:!0});var Yft=s(IO);Ljo=r(Yft,"DebertaV2ForTokenClassification"),Yft.forEach(t),xjo=r(sxe," (DeBERTa-v2 model)"),sxe.forEach(t),$jo=i(J),x2=n(J,"LI",{});var lxe=s(x2);$ge=n(lxe,"STRONG",{});var Kft=s($ge);kjo=r(Kft,"distilbert"),Kft.forEach(t),Sjo=r(lxe," \u2014 "),qO=n(lxe,"A",{href:!0});var Zft=s(qO);Rjo=r(Zft,"DistilBertForTokenClassification"),Zft.forEach(t),Pjo=r(lxe," (DistilBERT model)"),lxe.forEach(t),Bjo=i(J),$2=n(J,"LI",{});var ixe=s($2);kge=n(ixe,"STRONG",{});var emt=s(kge);Ijo=r(emt,"electra"),emt.forEach(t),qjo=r(ixe," \u2014 "),NO=n(ixe,"A",{href:!0});var omt=s(NO);Njo=r(omt,"ElectraForTokenClassification"),omt.forEach(t),jjo=r(ixe," (ELECTRA model)"),ixe.forEach(t),Djo=i(J),k2=n(J,"LI",{});var dxe=s(k2);Sge=n(dxe,"STRONG",{});var rmt=s(Sge);Gjo=r(rmt,"flaubert"),rmt.forEach(t),Ojo=r(dxe," \u2014 "),jO=n(dxe,"A",{href:!0});var tmt=s(jO);Vjo=r(tmt,"FlaubertForTokenClassification"),tmt.forEach(t),Xjo=r(dxe," (FlauBERT model)"),dxe.forEach(t),zjo=i(J),S2=n(J,"LI",{});var cxe=s(S2);Rge=n(cxe,"STRONG",{});var amt=s(Rge);Wjo=r(amt,"fnet"),amt.forEach(t),Qjo=r(cxe," \u2014 "),DO=n(cxe,"A",{href:!0});var nmt=s(DO);Hjo=r(nmt,"FNetForTokenClassification"),nmt.forEach(t),Ujo=r(cxe," (FNet model)"),cxe.forEach(t),Jjo=i(J),R2=n(J,"LI",{});var fxe=s(R2);Pge=n(fxe,"STRONG",{});var smt=s(Pge);Yjo=r(smt,"funnel"),smt.forEach(t),Kjo=r(fxe," \u2014 "),GO=n(fxe,"A",{href:!0});var lmt=s(GO);Zjo=r(lmt,"FunnelForTokenClassification"),lmt.forEach(t),eDo=r(fxe," (Funnel Transformer model)"),fxe.forEach(t),oDo=i(J),P2=n(J,"LI",{});var mxe=s(P2);Bge=n(mxe,"STRONG",{});var imt=s(Bge);rDo=r(imt,"gpt2"),imt.forEach(t),tDo=r(mxe," \u2014 "),OO=n(mxe,"A",{href:!0});var dmt=s(OO);aDo=r(dmt,"GPT2ForTokenClassification"),dmt.forEach(t),nDo=r(mxe," (OpenAI GPT-2 model)"),mxe.forEach(t),sDo=i(J),B2=n(J,"LI",{});var gxe=s(B2);Ige=n(gxe,"STRONG",{});var cmt=s(Ige);lDo=r(cmt,"ibert"),cmt.forEach(t),iDo=r(gxe," \u2014 "),VO=n(gxe,"A",{href:!0});var fmt=s(VO);dDo=r(fmt,"IBertForTokenClassification"),fmt.forEach(t),cDo=r(gxe," (I-BERT model)"),gxe.forEach(t),fDo=i(J),I2=n(J,"LI",{});var hxe=s(I2);qge=n(hxe,"STRONG",{});var mmt=s(qge);mDo=r(mmt,"layoutlm"),mmt.forEach(t),gDo=r(hxe," \u2014 "),XO=n(hxe,"A",{href:!0});var gmt=s(XO);hDo=r(gmt,"LayoutLMForTokenClassification"),gmt.forEach(t),pDo=r(hxe," (LayoutLM model)"),hxe.forEach(t),uDo=i(J),q2=n(J,"LI",{});var pxe=s(q2);Nge=n(pxe,"STRONG",{});var hmt=s(Nge);_Do=r(hmt,"layoutlmv2"),hmt.forEach(t),bDo=r(pxe," \u2014 "),zO=n(pxe,"A",{href:!0});var pmt=s(zO);vDo=r(pmt,"LayoutLMv2ForTokenClassification"),pmt.forEach(t),FDo=r(pxe," (LayoutLMv2 model)"),pxe.forEach(t),TDo=i(J),N2=n(J,"LI",{});var uxe=s(N2);jge=n(uxe,"STRONG",{});var umt=s(jge);MDo=r(umt,"layoutlmv3"),umt.forEach(t),EDo=r(uxe," \u2014 "),WO=n(uxe,"A",{href:!0});var _mt=s(WO);CDo=r(_mt,"LayoutLMv3ForTokenClassification"),_mt.forEach(t),wDo=r(uxe," (LayoutLMv3 model)"),uxe.forEach(t),ADo=i(J),j2=n(J,"LI",{});var _xe=s(j2);Dge=n(_xe,"STRONG",{});var bmt=s(Dge);yDo=r(bmt,"longformer"),bmt.forEach(t),LDo=r(_xe," \u2014 "),QO=n(_xe,"A",{href:!0});var vmt=s(QO);xDo=r(vmt,"LongformerForTokenClassification"),vmt.forEach(t),$Do=r(_xe," (Longformer model)"),_xe.forEach(t),kDo=i(J),D2=n(J,"LI",{});var bxe=s(D2);Gge=n(bxe,"STRONG",{});var Fmt=s(Gge);SDo=r(Fmt,"megatron-bert"),Fmt.forEach(t),RDo=r(bxe," \u2014 "),HO=n(bxe,"A",{href:!0});var Tmt=s(HO);PDo=r(Tmt,"MegatronBertForTokenClassification"),Tmt.forEach(t),BDo=r(bxe," (MegatronBert model)"),bxe.forEach(t),IDo=i(J),G2=n(J,"LI",{});var vxe=s(G2);Oge=n(vxe,"STRONG",{});var Mmt=s(Oge);qDo=r(Mmt,"mobilebert"),Mmt.forEach(t),NDo=r(vxe," \u2014 "),UO=n(vxe,"A",{href:!0});var Emt=s(UO);jDo=r(Emt,"MobileBertForTokenClassification"),Emt.forEach(t),DDo=r(vxe," (MobileBERT model)"),vxe.forEach(t),GDo=i(J),O2=n(J,"LI",{});var Fxe=s(O2);Vge=n(Fxe,"STRONG",{});var Cmt=s(Vge);ODo=r(Cmt,"mpnet"),Cmt.forEach(t),VDo=r(Fxe," \u2014 "),JO=n(Fxe,"A",{href:!0});var wmt=s(JO);XDo=r(wmt,"MPNetForTokenClassification"),wmt.forEach(t),zDo=r(Fxe," (MPNet model)"),Fxe.forEach(t),WDo=i(J),V2=n(J,"LI",{});var Txe=s(V2);Xge=n(Txe,"STRONG",{});var Amt=s(Xge);QDo=r(Amt,"nystromformer"),Amt.forEach(t),HDo=r(Txe," \u2014 "),YO=n(Txe,"A",{href:!0});var ymt=s(YO);UDo=r(ymt,"NystromformerForTokenClassification"),ymt.forEach(t),JDo=r(Txe," (Nystromformer model)"),Txe.forEach(t),YDo=i(J),X2=n(J,"LI",{});var Mxe=s(X2);zge=n(Mxe,"STRONG",{});var Lmt=s(zge);KDo=r(Lmt,"qdqbert"),Lmt.forEach(t),ZDo=r(Mxe," \u2014 "),KO=n(Mxe,"A",{href:!0});var xmt=s(KO);eGo=r(xmt,"QDQBertForTokenClassification"),xmt.forEach(t),oGo=r(Mxe," (QDQBert model)"),Mxe.forEach(t),rGo=i(J),z2=n(J,"LI",{});var Exe=s(z2);Wge=n(Exe,"STRONG",{});var $mt=s(Wge);tGo=r($mt,"rembert"),$mt.forEach(t),aGo=r(Exe," \u2014 "),ZO=n(Exe,"A",{href:!0});var kmt=s(ZO);nGo=r(kmt,"RemBertForTokenClassification"),kmt.forEach(t),sGo=r(Exe," (RemBERT model)"),Exe.forEach(t),lGo=i(J),W2=n(J,"LI",{});var Cxe=s(W2);Qge=n(Cxe,"STRONG",{});var Smt=s(Qge);iGo=r(Smt,"roberta"),Smt.forEach(t),dGo=r(Cxe," \u2014 "),eV=n(Cxe,"A",{href:!0});var Rmt=s(eV);cGo=r(Rmt,"RobertaForTokenClassification"),Rmt.forEach(t),fGo=r(Cxe," (RoBERTa model)"),Cxe.forEach(t),mGo=i(J),Q2=n(J,"LI",{});var wxe=s(Q2);Hge=n(wxe,"STRONG",{});var Pmt=s(Hge);gGo=r(Pmt,"roformer"),Pmt.forEach(t),hGo=r(wxe," \u2014 "),oV=n(wxe,"A",{href:!0});var Bmt=s(oV);pGo=r(Bmt,"RoFormerForTokenClassification"),Bmt.forEach(t),uGo=r(wxe," (RoFormer model)"),wxe.forEach(t),_Go=i(J),H2=n(J,"LI",{});var Axe=s(H2);Uge=n(Axe,"STRONG",{});var Imt=s(Uge);bGo=r(Imt,"squeezebert"),Imt.forEach(t),vGo=r(Axe," \u2014 "),rV=n(Axe,"A",{href:!0});var qmt=s(rV);FGo=r(qmt,"SqueezeBertForTokenClassification"),qmt.forEach(t),TGo=r(Axe," (SqueezeBERT model)"),Axe.forEach(t),MGo=i(J),U2=n(J,"LI",{});var yxe=s(U2);Jge=n(yxe,"STRONG",{});var Nmt=s(Jge);EGo=r(Nmt,"xlm"),Nmt.forEach(t),CGo=r(yxe," \u2014 "),tV=n(yxe,"A",{href:!0});var jmt=s(tV);wGo=r(jmt,"XLMForTokenClassification"),jmt.forEach(t),AGo=r(yxe," (XLM model)"),yxe.forEach(t),yGo=i(J),J2=n(J,"LI",{});var Lxe=s(J2);Yge=n(Lxe,"STRONG",{});var Dmt=s(Yge);LGo=r(Dmt,"xlm-roberta"),Dmt.forEach(t),xGo=r(Lxe," \u2014 "),aV=n(Lxe,"A",{href:!0});var Gmt=s(aV);$Go=r(Gmt,"XLMRobertaForTokenClassification"),Gmt.forEach(t),kGo=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),SGo=i(J),Y2=n(J,"LI",{});var xxe=s(Y2);Kge=n(xxe,"STRONG",{});var Omt=s(Kge);RGo=r(Omt,"xlm-roberta-xl"),Omt.forEach(t),PGo=r(xxe," \u2014 "),nV=n(xxe,"A",{href:!0});var Vmt=s(nV);BGo=r(Vmt,"XLMRobertaXLForTokenClassification"),Vmt.forEach(t),IGo=r(xxe," (XLM-RoBERTa-XL model)"),xxe.forEach(t),qGo=i(J),K2=n(J,"LI",{});var $xe=s(K2);Zge=n($xe,"STRONG",{});var Xmt=s(Zge);NGo=r(Xmt,"xlnet"),Xmt.forEach(t),jGo=r($xe," \u2014 "),sV=n($xe,"A",{href:!0});var zmt=s(sV);DGo=r(zmt,"XLNetForTokenClassification"),zmt.forEach(t),GGo=r($xe," (XLNet model)"),$xe.forEach(t),OGo=i(J),Z2=n(J,"LI",{});var kxe=s(Z2);ehe=n(kxe,"STRONG",{});var Wmt=s(ehe);VGo=r(Wmt,"yoso"),Wmt.forEach(t),XGo=r(kxe," \u2014 "),lV=n(kxe,"A",{href:!0});var Qmt=s(lV);zGo=r(Qmt,"YosoForTokenClassification"),Qmt.forEach(t),WGo=r(kxe," (YOSO model)"),kxe.forEach(t),J.forEach(t),QGo=i(da),ev=n(da,"P",{});var Sxe=s(ev);HGo=r(Sxe,"The model is set in evaluation mode by default using "),ohe=n(Sxe,"CODE",{});var Hmt=s(ohe);UGo=r(Hmt,"model.eval()"),Hmt.forEach(t),JGo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=n(Sxe,"CODE",{});var Umt=s(rhe);YGo=r(Umt,"model.train()"),Umt.forEach(t),Sxe.forEach(t),KGo=i(da),T(ov.$$.fragment,da),da.forEach(t),Js.forEach(t),Qqe=i(f),Ki=n(f,"H2",{class:!0});var Yje=s(Ki);rv=n(Yje,"A",{id:!0,class:!0,href:!0});var Jmt=s(rv);the=n(Jmt,"SPAN",{});var Ymt=s(the);T(By.$$.fragment,Ymt),Ymt.forEach(t),Jmt.forEach(t),ZGo=i(Yje),ahe=n(Yje,"SPAN",{});var Kmt=s(ahe);eOo=r(Kmt,"AutoModelForQuestionAnswering"),Kmt.forEach(t),Yje.forEach(t),Hqe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(Iy.$$.fragment,Ys),oOo=i(Ys),Zi=n(Ys,"P",{});var pZ=s(Zi);rOo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iV=n(pZ,"A",{href:!0});var Zmt=s(iV);tOo=r(Zmt,"from_pretrained()"),Zmt.forEach(t),aOo=r(pZ," class method or the "),dV=n(pZ,"A",{href:!0});var egt=s(dV);nOo=r(egt,"from_config()"),egt.forEach(t),sOo=r(pZ,` class
method.`),pZ.forEach(t),lOo=i(Ys),qy=n(Ys,"P",{});var Kje=s(qy);iOo=r(Kje,"This class cannot be instantiated directly using "),nhe=n(Kje,"CODE",{});var ogt=s(nhe);dOo=r(ogt,"__init__()"),ogt.forEach(t),cOo=r(Kje," (throws an error)."),Kje.forEach(t),fOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var D3=s(mt);T(Ny.$$.fragment,D3),mOo=i(D3),she=n(D3,"P",{});var rgt=s(she);gOo=r(rgt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rgt.forEach(t),hOo=i(D3),ed=n(D3,"P",{});var uZ=s(ed);pOo=r(uZ,`Note:
Loading a model from its configuration file does `),lhe=n(uZ,"STRONG",{});var tgt=s(lhe);uOo=r(tgt,"not"),tgt.forEach(t),_Oo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(uZ,"A",{href:!0});var agt=s(cV);bOo=r(agt,"from_pretrained()"),agt.forEach(t),vOo=r(uZ," to load the model weights."),uZ.forEach(t),FOo=i(D3),T(tv.$$.fragment,D3),D3.forEach(t),TOo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(jy.$$.fragment,ca),MOo=i(ca),ihe=n(ca,"P",{});var ngt=s(ihe);EOo=r(ngt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ngt.forEach(t),COo=i(ca),qa=n(ca,"P",{});var G3=s(qa);wOo=r(G3,"The model class to instantiate is selected based on the "),dhe=n(G3,"CODE",{});var sgt=s(dhe);AOo=r(sgt,"model_type"),sgt.forEach(t),yOo=r(G3,` property of the config object (either
passed as an argument or loaded from `),che=n(G3,"CODE",{});var lgt=s(che);LOo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),xOo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(G3,"CODE",{});var igt=s(fhe);$Oo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),kOo=r(G3,":"),G3.forEach(t),SOo=i(ca),V=n(ca,"UL",{});var X=s(V);av=n(X,"LI",{});var Rxe=s(av);mhe=n(Rxe,"STRONG",{});var dgt=s(mhe);ROo=r(dgt,"albert"),dgt.forEach(t),POo=r(Rxe," \u2014 "),fV=n(Rxe,"A",{href:!0});var cgt=s(fV);BOo=r(cgt,"AlbertForQuestionAnswering"),cgt.forEach(t),IOo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),qOo=i(X),nv=n(X,"LI",{});var Pxe=s(nv);ghe=n(Pxe,"STRONG",{});var fgt=s(ghe);NOo=r(fgt,"bart"),fgt.forEach(t),jOo=r(Pxe," \u2014 "),mV=n(Pxe,"A",{href:!0});var mgt=s(mV);DOo=r(mgt,"BartForQuestionAnswering"),mgt.forEach(t),GOo=r(Pxe," (BART model)"),Pxe.forEach(t),OOo=i(X),sv=n(X,"LI",{});var Bxe=s(sv);hhe=n(Bxe,"STRONG",{});var ggt=s(hhe);VOo=r(ggt,"bert"),ggt.forEach(t),XOo=r(Bxe," \u2014 "),gV=n(Bxe,"A",{href:!0});var hgt=s(gV);zOo=r(hgt,"BertForQuestionAnswering"),hgt.forEach(t),WOo=r(Bxe," (BERT model)"),Bxe.forEach(t),QOo=i(X),lv=n(X,"LI",{});var Ixe=s(lv);phe=n(Ixe,"STRONG",{});var pgt=s(phe);HOo=r(pgt,"big_bird"),pgt.forEach(t),UOo=r(Ixe," \u2014 "),hV=n(Ixe,"A",{href:!0});var ugt=s(hV);JOo=r(ugt,"BigBirdForQuestionAnswering"),ugt.forEach(t),YOo=r(Ixe," (BigBird model)"),Ixe.forEach(t),KOo=i(X),iv=n(X,"LI",{});var qxe=s(iv);uhe=n(qxe,"STRONG",{});var _gt=s(uhe);ZOo=r(_gt,"bigbird_pegasus"),_gt.forEach(t),eVo=r(qxe," \u2014 "),pV=n(qxe,"A",{href:!0});var bgt=s(pV);oVo=r(bgt,"BigBirdPegasusForQuestionAnswering"),bgt.forEach(t),rVo=r(qxe," (BigBirdPegasus model)"),qxe.forEach(t),tVo=i(X),dv=n(X,"LI",{});var Nxe=s(dv);_he=n(Nxe,"STRONG",{});var vgt=s(_he);aVo=r(vgt,"camembert"),vgt.forEach(t),nVo=r(Nxe," \u2014 "),uV=n(Nxe,"A",{href:!0});var Fgt=s(uV);sVo=r(Fgt,"CamembertForQuestionAnswering"),Fgt.forEach(t),lVo=r(Nxe," (CamemBERT model)"),Nxe.forEach(t),iVo=i(X),cv=n(X,"LI",{});var jxe=s(cv);bhe=n(jxe,"STRONG",{});var Tgt=s(bhe);dVo=r(Tgt,"canine"),Tgt.forEach(t),cVo=r(jxe," \u2014 "),_V=n(jxe,"A",{href:!0});var Mgt=s(_V);fVo=r(Mgt,"CanineForQuestionAnswering"),Mgt.forEach(t),mVo=r(jxe," (Canine model)"),jxe.forEach(t),gVo=i(X),fv=n(X,"LI",{});var Dxe=s(fv);vhe=n(Dxe,"STRONG",{});var Egt=s(vhe);hVo=r(Egt,"convbert"),Egt.forEach(t),pVo=r(Dxe," \u2014 "),bV=n(Dxe,"A",{href:!0});var Cgt=s(bV);uVo=r(Cgt,"ConvBertForQuestionAnswering"),Cgt.forEach(t),_Vo=r(Dxe," (ConvBERT model)"),Dxe.forEach(t),bVo=i(X),mv=n(X,"LI",{});var Gxe=s(mv);Fhe=n(Gxe,"STRONG",{});var wgt=s(Fhe);vVo=r(wgt,"data2vec-text"),wgt.forEach(t),FVo=r(Gxe," \u2014 "),vV=n(Gxe,"A",{href:!0});var Agt=s(vV);TVo=r(Agt,"Data2VecTextForQuestionAnswering"),Agt.forEach(t),MVo=r(Gxe," (Data2VecText model)"),Gxe.forEach(t),EVo=i(X),gv=n(X,"LI",{});var Oxe=s(gv);The=n(Oxe,"STRONG",{});var ygt=s(The);CVo=r(ygt,"deberta"),ygt.forEach(t),wVo=r(Oxe," \u2014 "),FV=n(Oxe,"A",{href:!0});var Lgt=s(FV);AVo=r(Lgt,"DebertaForQuestionAnswering"),Lgt.forEach(t),yVo=r(Oxe," (DeBERTa model)"),Oxe.forEach(t),LVo=i(X),hv=n(X,"LI",{});var Vxe=s(hv);Mhe=n(Vxe,"STRONG",{});var xgt=s(Mhe);xVo=r(xgt,"deberta-v2"),xgt.forEach(t),$Vo=r(Vxe," \u2014 "),TV=n(Vxe,"A",{href:!0});var $gt=s(TV);kVo=r($gt,"DebertaV2ForQuestionAnswering"),$gt.forEach(t),SVo=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),RVo=i(X),pv=n(X,"LI",{});var Xxe=s(pv);Ehe=n(Xxe,"STRONG",{});var kgt=s(Ehe);PVo=r(kgt,"distilbert"),kgt.forEach(t),BVo=r(Xxe," \u2014 "),MV=n(Xxe,"A",{href:!0});var Sgt=s(MV);IVo=r(Sgt,"DistilBertForQuestionAnswering"),Sgt.forEach(t),qVo=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),NVo=i(X),uv=n(X,"LI",{});var zxe=s(uv);Che=n(zxe,"STRONG",{});var Rgt=s(Che);jVo=r(Rgt,"electra"),Rgt.forEach(t),DVo=r(zxe," \u2014 "),EV=n(zxe,"A",{href:!0});var Pgt=s(EV);GVo=r(Pgt,"ElectraForQuestionAnswering"),Pgt.forEach(t),OVo=r(zxe," (ELECTRA model)"),zxe.forEach(t),VVo=i(X),_v=n(X,"LI",{});var Wxe=s(_v);whe=n(Wxe,"STRONG",{});var Bgt=s(whe);XVo=r(Bgt,"flaubert"),Bgt.forEach(t),zVo=r(Wxe," \u2014 "),CV=n(Wxe,"A",{href:!0});var Igt=s(CV);WVo=r(Igt,"FlaubertForQuestionAnsweringSimple"),Igt.forEach(t),QVo=r(Wxe," (FlauBERT model)"),Wxe.forEach(t),HVo=i(X),bv=n(X,"LI",{});var Qxe=s(bv);Ahe=n(Qxe,"STRONG",{});var qgt=s(Ahe);UVo=r(qgt,"fnet"),qgt.forEach(t),JVo=r(Qxe," \u2014 "),wV=n(Qxe,"A",{href:!0});var Ngt=s(wV);YVo=r(Ngt,"FNetForQuestionAnswering"),Ngt.forEach(t),KVo=r(Qxe," (FNet model)"),Qxe.forEach(t),ZVo=i(X),vv=n(X,"LI",{});var Hxe=s(vv);yhe=n(Hxe,"STRONG",{});var jgt=s(yhe);eXo=r(jgt,"funnel"),jgt.forEach(t),oXo=r(Hxe," \u2014 "),AV=n(Hxe,"A",{href:!0});var Dgt=s(AV);rXo=r(Dgt,"FunnelForQuestionAnswering"),Dgt.forEach(t),tXo=r(Hxe," (Funnel Transformer model)"),Hxe.forEach(t),aXo=i(X),Fv=n(X,"LI",{});var Uxe=s(Fv);Lhe=n(Uxe,"STRONG",{});var Ggt=s(Lhe);nXo=r(Ggt,"gptj"),Ggt.forEach(t),sXo=r(Uxe," \u2014 "),yV=n(Uxe,"A",{href:!0});var Ogt=s(yV);lXo=r(Ogt,"GPTJForQuestionAnswering"),Ogt.forEach(t),iXo=r(Uxe," (GPT-J model)"),Uxe.forEach(t),dXo=i(X),Tv=n(X,"LI",{});var Jxe=s(Tv);xhe=n(Jxe,"STRONG",{});var Vgt=s(xhe);cXo=r(Vgt,"ibert"),Vgt.forEach(t),fXo=r(Jxe," \u2014 "),LV=n(Jxe,"A",{href:!0});var Xgt=s(LV);mXo=r(Xgt,"IBertForQuestionAnswering"),Xgt.forEach(t),gXo=r(Jxe," (I-BERT model)"),Jxe.forEach(t),hXo=i(X),Mv=n(X,"LI",{});var Yxe=s(Mv);$he=n(Yxe,"STRONG",{});var zgt=s($he);pXo=r(zgt,"layoutlmv2"),zgt.forEach(t),uXo=r(Yxe," \u2014 "),xV=n(Yxe,"A",{href:!0});var Wgt=s(xV);_Xo=r(Wgt,"LayoutLMv2ForQuestionAnswering"),Wgt.forEach(t),bXo=r(Yxe," (LayoutLMv2 model)"),Yxe.forEach(t),vXo=i(X),Ev=n(X,"LI",{});var Kxe=s(Ev);khe=n(Kxe,"STRONG",{});var Qgt=s(khe);FXo=r(Qgt,"layoutlmv3"),Qgt.forEach(t),TXo=r(Kxe," \u2014 "),$V=n(Kxe,"A",{href:!0});var Hgt=s($V);MXo=r(Hgt,"LayoutLMv3ForQuestionAnswering"),Hgt.forEach(t),EXo=r(Kxe," (LayoutLMv3 model)"),Kxe.forEach(t),CXo=i(X),Cv=n(X,"LI",{});var Zxe=s(Cv);She=n(Zxe,"STRONG",{});var Ugt=s(She);wXo=r(Ugt,"led"),Ugt.forEach(t),AXo=r(Zxe," \u2014 "),kV=n(Zxe,"A",{href:!0});var Jgt=s(kV);yXo=r(Jgt,"LEDForQuestionAnswering"),Jgt.forEach(t),LXo=r(Zxe," (LED model)"),Zxe.forEach(t),xXo=i(X),wv=n(X,"LI",{});var e$e=s(wv);Rhe=n(e$e,"STRONG",{});var Ygt=s(Rhe);$Xo=r(Ygt,"longformer"),Ygt.forEach(t),kXo=r(e$e," \u2014 "),SV=n(e$e,"A",{href:!0});var Kgt=s(SV);SXo=r(Kgt,"LongformerForQuestionAnswering"),Kgt.forEach(t),RXo=r(e$e," (Longformer model)"),e$e.forEach(t),PXo=i(X),Av=n(X,"LI",{});var o$e=s(Av);Phe=n(o$e,"STRONG",{});var Zgt=s(Phe);BXo=r(Zgt,"lxmert"),Zgt.forEach(t),IXo=r(o$e," \u2014 "),RV=n(o$e,"A",{href:!0});var eht=s(RV);qXo=r(eht,"LxmertForQuestionAnswering"),eht.forEach(t),NXo=r(o$e," (LXMERT model)"),o$e.forEach(t),jXo=i(X),yv=n(X,"LI",{});var r$e=s(yv);Bhe=n(r$e,"STRONG",{});var oht=s(Bhe);DXo=r(oht,"mbart"),oht.forEach(t),GXo=r(r$e," \u2014 "),PV=n(r$e,"A",{href:!0});var rht=s(PV);OXo=r(rht,"MBartForQuestionAnswering"),rht.forEach(t),VXo=r(r$e," (mBART model)"),r$e.forEach(t),XXo=i(X),Lv=n(X,"LI",{});var t$e=s(Lv);Ihe=n(t$e,"STRONG",{});var tht=s(Ihe);zXo=r(tht,"megatron-bert"),tht.forEach(t),WXo=r(t$e," \u2014 "),BV=n(t$e,"A",{href:!0});var aht=s(BV);QXo=r(aht,"MegatronBertForQuestionAnswering"),aht.forEach(t),HXo=r(t$e," (MegatronBert model)"),t$e.forEach(t),UXo=i(X),xv=n(X,"LI",{});var a$e=s(xv);qhe=n(a$e,"STRONG",{});var nht=s(qhe);JXo=r(nht,"mobilebert"),nht.forEach(t),YXo=r(a$e," \u2014 "),IV=n(a$e,"A",{href:!0});var sht=s(IV);KXo=r(sht,"MobileBertForQuestionAnswering"),sht.forEach(t),ZXo=r(a$e," (MobileBERT model)"),a$e.forEach(t),ezo=i(X),$v=n(X,"LI",{});var n$e=s($v);Nhe=n(n$e,"STRONG",{});var lht=s(Nhe);ozo=r(lht,"mpnet"),lht.forEach(t),rzo=r(n$e," \u2014 "),qV=n(n$e,"A",{href:!0});var iht=s(qV);tzo=r(iht,"MPNetForQuestionAnswering"),iht.forEach(t),azo=r(n$e," (MPNet model)"),n$e.forEach(t),nzo=i(X),kv=n(X,"LI",{});var s$e=s(kv);jhe=n(s$e,"STRONG",{});var dht=s(jhe);szo=r(dht,"nystromformer"),dht.forEach(t),lzo=r(s$e," \u2014 "),NV=n(s$e,"A",{href:!0});var cht=s(NV);izo=r(cht,"NystromformerForQuestionAnswering"),cht.forEach(t),dzo=r(s$e," (Nystromformer model)"),s$e.forEach(t),czo=i(X),Sv=n(X,"LI",{});var l$e=s(Sv);Dhe=n(l$e,"STRONG",{});var fht=s(Dhe);fzo=r(fht,"qdqbert"),fht.forEach(t),mzo=r(l$e," \u2014 "),jV=n(l$e,"A",{href:!0});var mht=s(jV);gzo=r(mht,"QDQBertForQuestionAnswering"),mht.forEach(t),hzo=r(l$e," (QDQBert model)"),l$e.forEach(t),pzo=i(X),Rv=n(X,"LI",{});var i$e=s(Rv);Ghe=n(i$e,"STRONG",{});var ght=s(Ghe);uzo=r(ght,"reformer"),ght.forEach(t),_zo=r(i$e," \u2014 "),DV=n(i$e,"A",{href:!0});var hht=s(DV);bzo=r(hht,"ReformerForQuestionAnswering"),hht.forEach(t),vzo=r(i$e," (Reformer model)"),i$e.forEach(t),Fzo=i(X),Pv=n(X,"LI",{});var d$e=s(Pv);Ohe=n(d$e,"STRONG",{});var pht=s(Ohe);Tzo=r(pht,"rembert"),pht.forEach(t),Mzo=r(d$e," \u2014 "),GV=n(d$e,"A",{href:!0});var uht=s(GV);Ezo=r(uht,"RemBertForQuestionAnswering"),uht.forEach(t),Czo=r(d$e," (RemBERT model)"),d$e.forEach(t),wzo=i(X),Bv=n(X,"LI",{});var c$e=s(Bv);Vhe=n(c$e,"STRONG",{});var _ht=s(Vhe);Azo=r(_ht,"roberta"),_ht.forEach(t),yzo=r(c$e," \u2014 "),OV=n(c$e,"A",{href:!0});var bht=s(OV);Lzo=r(bht,"RobertaForQuestionAnswering"),bht.forEach(t),xzo=r(c$e," (RoBERTa model)"),c$e.forEach(t),$zo=i(X),Iv=n(X,"LI",{});var f$e=s(Iv);Xhe=n(f$e,"STRONG",{});var vht=s(Xhe);kzo=r(vht,"roformer"),vht.forEach(t),Szo=r(f$e," \u2014 "),VV=n(f$e,"A",{href:!0});var Fht=s(VV);Rzo=r(Fht,"RoFormerForQuestionAnswering"),Fht.forEach(t),Pzo=r(f$e," (RoFormer model)"),f$e.forEach(t),Bzo=i(X),qv=n(X,"LI",{});var m$e=s(qv);zhe=n(m$e,"STRONG",{});var Tht=s(zhe);Izo=r(Tht,"splinter"),Tht.forEach(t),qzo=r(m$e," \u2014 "),XV=n(m$e,"A",{href:!0});var Mht=s(XV);Nzo=r(Mht,"SplinterForQuestionAnswering"),Mht.forEach(t),jzo=r(m$e," (Splinter model)"),m$e.forEach(t),Dzo=i(X),Nv=n(X,"LI",{});var g$e=s(Nv);Whe=n(g$e,"STRONG",{});var Eht=s(Whe);Gzo=r(Eht,"squeezebert"),Eht.forEach(t),Ozo=r(g$e," \u2014 "),zV=n(g$e,"A",{href:!0});var Cht=s(zV);Vzo=r(Cht,"SqueezeBertForQuestionAnswering"),Cht.forEach(t),Xzo=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),zzo=i(X),jv=n(X,"LI",{});var h$e=s(jv);Qhe=n(h$e,"STRONG",{});var wht=s(Qhe);Wzo=r(wht,"xlm"),wht.forEach(t),Qzo=r(h$e," \u2014 "),WV=n(h$e,"A",{href:!0});var Aht=s(WV);Hzo=r(Aht,"XLMForQuestionAnsweringSimple"),Aht.forEach(t),Uzo=r(h$e," (XLM model)"),h$e.forEach(t),Jzo=i(X),Dv=n(X,"LI",{});var p$e=s(Dv);Hhe=n(p$e,"STRONG",{});var yht=s(Hhe);Yzo=r(yht,"xlm-roberta"),yht.forEach(t),Kzo=r(p$e," \u2014 "),QV=n(p$e,"A",{href:!0});var Lht=s(QV);Zzo=r(Lht,"XLMRobertaForQuestionAnswering"),Lht.forEach(t),eWo=r(p$e," (XLM-RoBERTa model)"),p$e.forEach(t),oWo=i(X),Gv=n(X,"LI",{});var u$e=s(Gv);Uhe=n(u$e,"STRONG",{});var xht=s(Uhe);rWo=r(xht,"xlm-roberta-xl"),xht.forEach(t),tWo=r(u$e," \u2014 "),HV=n(u$e,"A",{href:!0});var $ht=s(HV);aWo=r($ht,"XLMRobertaXLForQuestionAnswering"),$ht.forEach(t),nWo=r(u$e," (XLM-RoBERTa-XL model)"),u$e.forEach(t),sWo=i(X),Ov=n(X,"LI",{});var _$e=s(Ov);Jhe=n(_$e,"STRONG",{});var kht=s(Jhe);lWo=r(kht,"xlnet"),kht.forEach(t),iWo=r(_$e," \u2014 "),UV=n(_$e,"A",{href:!0});var Sht=s(UV);dWo=r(Sht,"XLNetForQuestionAnsweringSimple"),Sht.forEach(t),cWo=r(_$e," (XLNet model)"),_$e.forEach(t),fWo=i(X),Vv=n(X,"LI",{});var b$e=s(Vv);Yhe=n(b$e,"STRONG",{});var Rht=s(Yhe);mWo=r(Rht,"yoso"),Rht.forEach(t),gWo=r(b$e," \u2014 "),JV=n(b$e,"A",{href:!0});var Pht=s(JV);hWo=r(Pht,"YosoForQuestionAnswering"),Pht.forEach(t),pWo=r(b$e," (YOSO model)"),b$e.forEach(t),X.forEach(t),uWo=i(ca),Xv=n(ca,"P",{});var v$e=s(Xv);_Wo=r(v$e,"The model is set in evaluation mode by default using "),Khe=n(v$e,"CODE",{});var Bht=s(Khe);bWo=r(Bht,"model.eval()"),Bht.forEach(t),vWo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(v$e,"CODE",{});var Iht=s(Zhe);FWo=r(Iht,"model.train()"),Iht.forEach(t),v$e.forEach(t),TWo=i(ca),T(zv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Uqe=i(f),od=n(f,"H2",{class:!0});var Zje=s(od);Wv=n(Zje,"A",{id:!0,class:!0,href:!0});var qht=s(Wv);epe=n(qht,"SPAN",{});var Nht=s(epe);T(Dy.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),MWo=i(Zje),ope=n(Zje,"SPAN",{});var jht=s(ope);EWo=r(jht,"AutoModelForTableQuestionAnswering"),jht.forEach(t),Zje.forEach(t),Jqe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(Gy.$$.fragment,Ks),CWo=i(Ks),rd=n(Ks,"P",{});var _Z=s(rd);wWo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YV=n(_Z,"A",{href:!0});var Dht=s(YV);AWo=r(Dht,"from_pretrained()"),Dht.forEach(t),yWo=r(_Z," class method or the "),KV=n(_Z,"A",{href:!0});var Ght=s(KV);LWo=r(Ght,"from_config()"),Ght.forEach(t),xWo=r(_Z,` class
method.`),_Z.forEach(t),$Wo=i(Ks),Oy=n(Ks,"P",{});var eDe=s(Oy);kWo=r(eDe,"This class cannot be instantiated directly using "),rpe=n(eDe,"CODE",{});var Oht=s(rpe);SWo=r(Oht,"__init__()"),Oht.forEach(t),RWo=r(eDe," (throws an error)."),eDe.forEach(t),PWo=i(Ks),gt=n(Ks,"DIV",{class:!0});var O3=s(gt);T(Vy.$$.fragment,O3),BWo=i(O3),tpe=n(O3,"P",{});var Vht=s(tpe);IWo=r(Vht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vht.forEach(t),qWo=i(O3),td=n(O3,"P",{});var bZ=s(td);NWo=r(bZ,`Note:
Loading a model from its configuration file does `),ape=n(bZ,"STRONG",{});var Xht=s(ape);jWo=r(Xht,"not"),Xht.forEach(t),DWo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(bZ,"A",{href:!0});var zht=s(ZV);GWo=r(zht,"from_pretrained()"),zht.forEach(t),OWo=r(bZ," to load the model weights."),bZ.forEach(t),VWo=i(O3),T(Qv.$$.fragment,O3),O3.forEach(t),XWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Xy.$$.fragment,fa),zWo=i(fa),npe=n(fa,"P",{});var Wht=s(npe);WWo=r(Wht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wht.forEach(t),QWo=i(fa),Na=n(fa,"P",{});var V3=s(Na);HWo=r(V3,"The model class to instantiate is selected based on the "),spe=n(V3,"CODE",{});var Qht=s(spe);UWo=r(Qht,"model_type"),Qht.forEach(t),JWo=r(V3,` property of the config object (either
passed as an argument or loaded from `),lpe=n(V3,"CODE",{});var Hht=s(lpe);YWo=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),KWo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(V3,"CODE",{});var Uht=s(ipe);ZWo=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),eQo=r(V3,":"),V3.forEach(t),oQo=i(fa),dpe=n(fa,"UL",{});var Jht=s(dpe);Hv=n(Jht,"LI",{});var F$e=s(Hv);cpe=n(F$e,"STRONG",{});var Yht=s(cpe);rQo=r(Yht,"tapas"),Yht.forEach(t),tQo=r(F$e," \u2014 "),eX=n(F$e,"A",{href:!0});var Kht=s(eX);aQo=r(Kht,"TapasForQuestionAnswering"),Kht.forEach(t),nQo=r(F$e," (TAPAS model)"),F$e.forEach(t),Jht.forEach(t),sQo=i(fa),Uv=n(fa,"P",{});var T$e=s(Uv);lQo=r(T$e,"The model is set in evaluation mode by default using "),fpe=n(T$e,"CODE",{});var Zht=s(fpe);iQo=r(Zht,"model.eval()"),Zht.forEach(t),dQo=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(T$e,"CODE",{});var ept=s(mpe);cQo=r(ept,"model.train()"),ept.forEach(t),T$e.forEach(t),fQo=i(fa),T(Jv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Yqe=i(f),ad=n(f,"H2",{class:!0});var oDe=s(ad);Yv=n(oDe,"A",{id:!0,class:!0,href:!0});var opt=s(Yv);gpe=n(opt,"SPAN",{});var rpt=s(gpe);T(zy.$$.fragment,rpt),rpt.forEach(t),opt.forEach(t),mQo=i(oDe),hpe=n(oDe,"SPAN",{});var tpt=s(hpe);gQo=r(tpt,"AutoModelForImageClassification"),tpt.forEach(t),oDe.forEach(t),Kqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(Wy.$$.fragment,Zs),hQo=i(Zs),nd=n(Zs,"P",{});var vZ=s(nd);pQo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oX=n(vZ,"A",{href:!0});var apt=s(oX);uQo=r(apt,"from_pretrained()"),apt.forEach(t),_Qo=r(vZ," class method or the "),rX=n(vZ,"A",{href:!0});var npt=s(rX);bQo=r(npt,"from_config()"),npt.forEach(t),vQo=r(vZ,` class
method.`),vZ.forEach(t),FQo=i(Zs),Qy=n(Zs,"P",{});var rDe=s(Qy);TQo=r(rDe,"This class cannot be instantiated directly using "),ppe=n(rDe,"CODE",{});var spt=s(ppe);MQo=r(spt,"__init__()"),spt.forEach(t),EQo=r(rDe," (throws an error)."),rDe.forEach(t),CQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var X3=s(ht);T(Hy.$$.fragment,X3),wQo=i(X3),upe=n(X3,"P",{});var lpt=s(upe);AQo=r(lpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lpt.forEach(t),yQo=i(X3),sd=n(X3,"P",{});var FZ=s(sd);LQo=r(FZ,`Note:
Loading a model from its configuration file does `),_pe=n(FZ,"STRONG",{});var ipt=s(_pe);xQo=r(ipt,"not"),ipt.forEach(t),$Qo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(FZ,"A",{href:!0});var dpt=s(tX);kQo=r(dpt,"from_pretrained()"),dpt.forEach(t),SQo=r(FZ," to load the model weights."),FZ.forEach(t),RQo=i(X3),T(Kv.$$.fragment,X3),X3.forEach(t),PQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Uy.$$.fragment,ma),BQo=i(ma),bpe=n(ma,"P",{});var cpt=s(bpe);IQo=r(cpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cpt.forEach(t),qQo=i(ma),ja=n(ma,"P",{});var z3=s(ja);NQo=r(z3,"The model class to instantiate is selected based on the "),vpe=n(z3,"CODE",{});var fpt=s(vpe);jQo=r(fpt,"model_type"),fpt.forEach(t),DQo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(z3,"CODE",{});var mpt=s(Fpe);GQo=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),OQo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(z3,"CODE",{});var gpt=s(Tpe);VQo=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),XQo=r(z3,":"),z3.forEach(t),zQo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);Zv=n(Ee,"LI",{});var M$e=s(Zv);Mpe=n(M$e,"STRONG",{});var hpt=s(Mpe);WQo=r(hpt,"beit"),hpt.forEach(t),QQo=r(M$e," \u2014 "),aX=n(M$e,"A",{href:!0});var ppt=s(aX);HQo=r(ppt,"BeitForImageClassification"),ppt.forEach(t),UQo=r(M$e," (BEiT model)"),M$e.forEach(t),JQo=i(Ee),eF=n(Ee,"LI",{});var E$e=s(eF);Epe=n(E$e,"STRONG",{});var upt=s(Epe);YQo=r(upt,"convnext"),upt.forEach(t),KQo=r(E$e," \u2014 "),nX=n(E$e,"A",{href:!0});var _pt=s(nX);ZQo=r(_pt,"ConvNextForImageClassification"),_pt.forEach(t),eHo=r(E$e," (ConvNext model)"),E$e.forEach(t),oHo=i(Ee),oF=n(Ee,"LI",{});var C$e=s(oF);Cpe=n(C$e,"STRONG",{});var bpt=s(Cpe);rHo=r(bpt,"data2vec-vision"),bpt.forEach(t),tHo=r(C$e," \u2014 "),sX=n(C$e,"A",{href:!0});var vpt=s(sX);aHo=r(vpt,"Data2VecVisionForImageClassification"),vpt.forEach(t),nHo=r(C$e," (Data2VecVision model)"),C$e.forEach(t),sHo=i(Ee),Bs=n(Ee,"LI",{});var P$=s(Bs);wpe=n(P$,"STRONG",{});var Fpt=s(wpe);lHo=r(Fpt,"deit"),Fpt.forEach(t),iHo=r(P$," \u2014 "),lX=n(P$,"A",{href:!0});var Tpt=s(lX);dHo=r(Tpt,"DeiTForImageClassification"),Tpt.forEach(t),cHo=r(P$," or "),iX=n(P$,"A",{href:!0});var Mpt=s(iX);fHo=r(Mpt,"DeiTForImageClassificationWithTeacher"),Mpt.forEach(t),mHo=r(P$," (DeiT model)"),P$.forEach(t),gHo=i(Ee),rF=n(Ee,"LI",{});var w$e=s(rF);Ape=n(w$e,"STRONG",{});var Ept=s(Ape);hHo=r(Ept,"imagegpt"),Ept.forEach(t),pHo=r(w$e," \u2014 "),dX=n(w$e,"A",{href:!0});var Cpt=s(dX);uHo=r(Cpt,"ImageGPTForImageClassification"),Cpt.forEach(t),_Ho=r(w$e," (ImageGPT model)"),w$e.forEach(t),bHo=i(Ee),pt=n(Ee,"LI",{});var hf=s(pt);ype=n(hf,"STRONG",{});var wpt=s(ype);vHo=r(wpt,"perceiver"),wpt.forEach(t),FHo=r(hf," \u2014 "),cX=n(hf,"A",{href:!0});var Apt=s(cX);THo=r(Apt,"PerceiverForImageClassificationLearned"),Apt.forEach(t),MHo=r(hf," or "),fX=n(hf,"A",{href:!0});var ypt=s(fX);EHo=r(ypt,"PerceiverForImageClassificationFourier"),ypt.forEach(t),CHo=r(hf," or "),mX=n(hf,"A",{href:!0});var Lpt=s(mX);wHo=r(Lpt,"PerceiverForImageClassificationConvProcessing"),Lpt.forEach(t),AHo=r(hf," (Perceiver model)"),hf.forEach(t),yHo=i(Ee),tF=n(Ee,"LI",{});var A$e=s(tF);Lpe=n(A$e,"STRONG",{});var xpt=s(Lpe);LHo=r(xpt,"poolformer"),xpt.forEach(t),xHo=r(A$e," \u2014 "),gX=n(A$e,"A",{href:!0});var $pt=s(gX);$Ho=r($pt,"PoolFormerForImageClassification"),$pt.forEach(t),kHo=r(A$e," (PoolFormer model)"),A$e.forEach(t),SHo=i(Ee),aF=n(Ee,"LI",{});var y$e=s(aF);xpe=n(y$e,"STRONG",{});var kpt=s(xpe);RHo=r(kpt,"regnet"),kpt.forEach(t),PHo=r(y$e," \u2014 "),hX=n(y$e,"A",{href:!0});var Spt=s(hX);BHo=r(Spt,"RegNetForImageClassification"),Spt.forEach(t),IHo=r(y$e," (RegNet model)"),y$e.forEach(t),qHo=i(Ee),nF=n(Ee,"LI",{});var L$e=s(nF);$pe=n(L$e,"STRONG",{});var Rpt=s($pe);NHo=r(Rpt,"resnet"),Rpt.forEach(t),jHo=r(L$e," \u2014 "),pX=n(L$e,"A",{href:!0});var Ppt=s(pX);DHo=r(Ppt,"ResNetForImageClassification"),Ppt.forEach(t),GHo=r(L$e," (ResNet model)"),L$e.forEach(t),OHo=i(Ee),sF=n(Ee,"LI",{});var x$e=s(sF);kpe=n(x$e,"STRONG",{});var Bpt=s(kpe);VHo=r(Bpt,"segformer"),Bpt.forEach(t),XHo=r(x$e," \u2014 "),uX=n(x$e,"A",{href:!0});var Ipt=s(uX);zHo=r(Ipt,"SegformerForImageClassification"),Ipt.forEach(t),WHo=r(x$e," (SegFormer model)"),x$e.forEach(t),QHo=i(Ee),lF=n(Ee,"LI",{});var $$e=s(lF);Spe=n($$e,"STRONG",{});var qpt=s(Spe);HHo=r(qpt,"swin"),qpt.forEach(t),UHo=r($$e," \u2014 "),_X=n($$e,"A",{href:!0});var Npt=s(_X);JHo=r(Npt,"SwinForImageClassification"),Npt.forEach(t),YHo=r($$e," (Swin model)"),$$e.forEach(t),KHo=i(Ee),iF=n(Ee,"LI",{});var k$e=s(iF);Rpe=n(k$e,"STRONG",{});var jpt=s(Rpe);ZHo=r(jpt,"van"),jpt.forEach(t),eUo=r(k$e," \u2014 "),bX=n(k$e,"A",{href:!0});var Dpt=s(bX);oUo=r(Dpt,"VanForImageClassification"),Dpt.forEach(t),rUo=r(k$e," (VAN model)"),k$e.forEach(t),tUo=i(Ee),dF=n(Ee,"LI",{});var S$e=s(dF);Ppe=n(S$e,"STRONG",{});var Gpt=s(Ppe);aUo=r(Gpt,"vit"),Gpt.forEach(t),nUo=r(S$e," \u2014 "),vX=n(S$e,"A",{href:!0});var Opt=s(vX);sUo=r(Opt,"ViTForImageClassification"),Opt.forEach(t),lUo=r(S$e," (ViT model)"),S$e.forEach(t),Ee.forEach(t),iUo=i(ma),cF=n(ma,"P",{});var R$e=s(cF);dUo=r(R$e,"The model is set in evaluation mode by default using "),Bpe=n(R$e,"CODE",{});var Vpt=s(Bpe);cUo=r(Vpt,"model.eval()"),Vpt.forEach(t),fUo=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(R$e,"CODE",{});var Xpt=s(Ipe);mUo=r(Xpt,"model.train()"),Xpt.forEach(t),R$e.forEach(t),gUo=i(ma),T(fF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Zqe=i(f),ld=n(f,"H2",{class:!0});var tDe=s(ld);mF=n(tDe,"A",{id:!0,class:!0,href:!0});var zpt=s(mF);qpe=n(zpt,"SPAN",{});var Wpt=s(qpe);T(Jy.$$.fragment,Wpt),Wpt.forEach(t),zpt.forEach(t),hUo=i(tDe),Npe=n(tDe,"SPAN",{});var Qpt=s(Npe);pUo=r(Qpt,"AutoModelForVision2Seq"),Qpt.forEach(t),tDe.forEach(t),eNe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(Yy.$$.fragment,el),uUo=i(el),id=n(el,"P",{});var TZ=s(id);_Uo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FX=n(TZ,"A",{href:!0});var Hpt=s(FX);bUo=r(Hpt,"from_pretrained()"),Hpt.forEach(t),vUo=r(TZ," class method or the "),TX=n(TZ,"A",{href:!0});var Upt=s(TX);FUo=r(Upt,"from_config()"),Upt.forEach(t),TUo=r(TZ,` class
method.`),TZ.forEach(t),MUo=i(el),Ky=n(el,"P",{});var aDe=s(Ky);EUo=r(aDe,"This class cannot be instantiated directly using "),jpe=n(aDe,"CODE",{});var Jpt=s(jpe);CUo=r(Jpt,"__init__()"),Jpt.forEach(t),wUo=r(aDe," (throws an error)."),aDe.forEach(t),AUo=i(el),ut=n(el,"DIV",{class:!0});var W3=s(ut);T(Zy.$$.fragment,W3),yUo=i(W3),Dpe=n(W3,"P",{});var Ypt=s(Dpe);LUo=r(Ypt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ypt.forEach(t),xUo=i(W3),dd=n(W3,"P",{});var MZ=s(dd);$Uo=r(MZ,`Note:
Loading a model from its configuration file does `),Gpe=n(MZ,"STRONG",{});var Kpt=s(Gpe);kUo=r(Kpt,"not"),Kpt.forEach(t),SUo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(MZ,"A",{href:!0});var Zpt=s(MX);RUo=r(Zpt,"from_pretrained()"),Zpt.forEach(t),PUo=r(MZ," to load the model weights."),MZ.forEach(t),BUo=i(W3),T(gF.$$.fragment,W3),W3.forEach(t),IUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(eL.$$.fragment,ga),qUo=i(ga),Ope=n(ga,"P",{});var eut=s(Ope);NUo=r(eut,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eut.forEach(t),jUo=i(ga),Da=n(ga,"P",{});var Q3=s(Da);DUo=r(Q3,"The model class to instantiate is selected based on the "),Vpe=n(Q3,"CODE",{});var out=s(Vpe);GUo=r(out,"model_type"),out.forEach(t),OUo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(Q3,"CODE",{});var rut=s(Xpe);VUo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),XUo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(Q3,"CODE",{});var tut=s(zpe);zUo=r(tut,"pretrained_model_name_or_path"),tut.forEach(t),WUo=r(Q3,":"),Q3.forEach(t),QUo=i(ga),Wpe=n(ga,"UL",{});var aut=s(Wpe);hF=n(aut,"LI",{});var P$e=s(hF);Qpe=n(P$e,"STRONG",{});var nut=s(Qpe);HUo=r(nut,"vision-encoder-decoder"),nut.forEach(t),UUo=r(P$e," \u2014 "),EX=n(P$e,"A",{href:!0});var sut=s(EX);JUo=r(sut,"VisionEncoderDecoderModel"),sut.forEach(t),YUo=r(P$e," (Vision Encoder decoder model)"),P$e.forEach(t),aut.forEach(t),KUo=i(ga),pF=n(ga,"P",{});var B$e=s(pF);ZUo=r(B$e,"The model is set in evaluation mode by default using "),Hpe=n(B$e,"CODE",{});var lut=s(Hpe);eJo=r(lut,"model.eval()"),lut.forEach(t),oJo=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(B$e,"CODE",{});var iut=s(Upe);rJo=r(iut,"model.train()"),iut.forEach(t),B$e.forEach(t),tJo=i(ga),T(uF.$$.fragment,ga),ga.forEach(t),el.forEach(t),oNe=i(f),cd=n(f,"H2",{class:!0});var nDe=s(cd);_F=n(nDe,"A",{id:!0,class:!0,href:!0});var dut=s(_F);Jpe=n(dut,"SPAN",{});var cut=s(Jpe);T(oL.$$.fragment,cut),cut.forEach(t),dut.forEach(t),aJo=i(nDe),Ype=n(nDe,"SPAN",{});var fut=s(Ype);nJo=r(fut,"AutoModelForAudioClassification"),fut.forEach(t),nDe.forEach(t),rNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(rL.$$.fragment,ol),sJo=i(ol),fd=n(ol,"P",{});var EZ=s(fd);lJo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CX=n(EZ,"A",{href:!0});var mut=s(CX);iJo=r(mut,"from_pretrained()"),mut.forEach(t),dJo=r(EZ," class method or the "),wX=n(EZ,"A",{href:!0});var gut=s(wX);cJo=r(gut,"from_config()"),gut.forEach(t),fJo=r(EZ,` class
method.`),EZ.forEach(t),mJo=i(ol),tL=n(ol,"P",{});var sDe=s(tL);gJo=r(sDe,"This class cannot be instantiated directly using "),Kpe=n(sDe,"CODE",{});var hut=s(Kpe);hJo=r(hut,"__init__()"),hut.forEach(t),pJo=r(sDe," (throws an error)."),sDe.forEach(t),uJo=i(ol),_t=n(ol,"DIV",{class:!0});var H3=s(_t);T(aL.$$.fragment,H3),_Jo=i(H3),Zpe=n(H3,"P",{});var put=s(Zpe);bJo=r(put,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),put.forEach(t),vJo=i(H3),md=n(H3,"P",{});var CZ=s(md);FJo=r(CZ,`Note:
Loading a model from its configuration file does `),eue=n(CZ,"STRONG",{});var uut=s(eue);TJo=r(uut,"not"),uut.forEach(t),MJo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(CZ,"A",{href:!0});var _ut=s(AX);EJo=r(_ut,"from_pretrained()"),_ut.forEach(t),CJo=r(CZ," to load the model weights."),CZ.forEach(t),wJo=i(H3),T(bF.$$.fragment,H3),H3.forEach(t),AJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(nL.$$.fragment,ha),yJo=i(ha),oue=n(ha,"P",{});var but=s(oue);LJo=r(but,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),but.forEach(t),xJo=i(ha),Ga=n(ha,"P",{});var U3=s(Ga);$Jo=r(U3,"The model class to instantiate is selected based on the "),rue=n(U3,"CODE",{});var vut=s(rue);kJo=r(vut,"model_type"),vut.forEach(t),SJo=r(U3,` property of the config object (either
passed as an argument or loaded from `),tue=n(U3,"CODE",{});var Fut=s(tue);RJo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),PJo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(U3,"CODE",{});var Tut=s(aue);BJo=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),IJo=r(U3,":"),U3.forEach(t),qJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);vF=n(Oe,"LI",{});var I$e=s(vF);nue=n(I$e,"STRONG",{});var Mut=s(nue);NJo=r(Mut,"data2vec-audio"),Mut.forEach(t),jJo=r(I$e," \u2014 "),yX=n(I$e,"A",{href:!0});var Eut=s(yX);DJo=r(Eut,"Data2VecAudioForSequenceClassification"),Eut.forEach(t),GJo=r(I$e," (Data2VecAudio model)"),I$e.forEach(t),OJo=i(Oe),FF=n(Oe,"LI",{});var q$e=s(FF);sue=n(q$e,"STRONG",{});var Cut=s(sue);VJo=r(Cut,"hubert"),Cut.forEach(t),XJo=r(q$e," \u2014 "),LX=n(q$e,"A",{href:!0});var wut=s(LX);zJo=r(wut,"HubertForSequenceClassification"),wut.forEach(t),WJo=r(q$e," (Hubert model)"),q$e.forEach(t),QJo=i(Oe),TF=n(Oe,"LI",{});var N$e=s(TF);lue=n(N$e,"STRONG",{});var Aut=s(lue);HJo=r(Aut,"sew"),Aut.forEach(t),UJo=r(N$e," \u2014 "),xX=n(N$e,"A",{href:!0});var yut=s(xX);JJo=r(yut,"SEWForSequenceClassification"),yut.forEach(t),YJo=r(N$e," (SEW model)"),N$e.forEach(t),KJo=i(Oe),MF=n(Oe,"LI",{});var j$e=s(MF);iue=n(j$e,"STRONG",{});var Lut=s(iue);ZJo=r(Lut,"sew-d"),Lut.forEach(t),eYo=r(j$e," \u2014 "),$X=n(j$e,"A",{href:!0});var xut=s($X);oYo=r(xut,"SEWDForSequenceClassification"),xut.forEach(t),rYo=r(j$e," (SEW-D model)"),j$e.forEach(t),tYo=i(Oe),EF=n(Oe,"LI",{});var D$e=s(EF);due=n(D$e,"STRONG",{});var $ut=s(due);aYo=r($ut,"unispeech"),$ut.forEach(t),nYo=r(D$e," \u2014 "),kX=n(D$e,"A",{href:!0});var kut=s(kX);sYo=r(kut,"UniSpeechForSequenceClassification"),kut.forEach(t),lYo=r(D$e," (UniSpeech model)"),D$e.forEach(t),iYo=i(Oe),CF=n(Oe,"LI",{});var G$e=s(CF);cue=n(G$e,"STRONG",{});var Sut=s(cue);dYo=r(Sut,"unispeech-sat"),Sut.forEach(t),cYo=r(G$e," \u2014 "),SX=n(G$e,"A",{href:!0});var Rut=s(SX);fYo=r(Rut,"UniSpeechSatForSequenceClassification"),Rut.forEach(t),mYo=r(G$e," (UniSpeechSat model)"),G$e.forEach(t),gYo=i(Oe),wF=n(Oe,"LI",{});var O$e=s(wF);fue=n(O$e,"STRONG",{});var Put=s(fue);hYo=r(Put,"wav2vec2"),Put.forEach(t),pYo=r(O$e," \u2014 "),RX=n(O$e,"A",{href:!0});var But=s(RX);uYo=r(But,"Wav2Vec2ForSequenceClassification"),But.forEach(t),_Yo=r(O$e," (Wav2Vec2 model)"),O$e.forEach(t),bYo=i(Oe),AF=n(Oe,"LI",{});var V$e=s(AF);mue=n(V$e,"STRONG",{});var Iut=s(mue);vYo=r(Iut,"wav2vec2-conformer"),Iut.forEach(t),FYo=r(V$e," \u2014 "),PX=n(V$e,"A",{href:!0});var qut=s(PX);TYo=r(qut,"Wav2Vec2ConformerForSequenceClassification"),qut.forEach(t),MYo=r(V$e," (Wav2Vec2-Conformer model)"),V$e.forEach(t),EYo=i(Oe),yF=n(Oe,"LI",{});var X$e=s(yF);gue=n(X$e,"STRONG",{});var Nut=s(gue);CYo=r(Nut,"wavlm"),Nut.forEach(t),wYo=r(X$e," \u2014 "),BX=n(X$e,"A",{href:!0});var jut=s(BX);AYo=r(jut,"WavLMForSequenceClassification"),jut.forEach(t),yYo=r(X$e," (WavLM model)"),X$e.forEach(t),Oe.forEach(t),LYo=i(ha),LF=n(ha,"P",{});var z$e=s(LF);xYo=r(z$e,"The model is set in evaluation mode by default using "),hue=n(z$e,"CODE",{});var Dut=s(hue);$Yo=r(Dut,"model.eval()"),Dut.forEach(t),kYo=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(z$e,"CODE",{});var Gut=s(pue);SYo=r(Gut,"model.train()"),Gut.forEach(t),z$e.forEach(t),RYo=i(ha),T(xF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),tNe=i(f),gd=n(f,"H2",{class:!0});var lDe=s(gd);$F=n(lDe,"A",{id:!0,class:!0,href:!0});var Out=s($F);uue=n(Out,"SPAN",{});var Vut=s(uue);T(sL.$$.fragment,Vut),Vut.forEach(t),Out.forEach(t),PYo=i(lDe),_ue=n(lDe,"SPAN",{});var Xut=s(_ue);BYo=r(Xut,"AutoModelForAudioFrameClassification"),Xut.forEach(t),lDe.forEach(t),aNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(lL.$$.fragment,rl),IYo=i(rl),hd=n(rl,"P",{});var wZ=s(hd);qYo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IX=n(wZ,"A",{href:!0});var zut=s(IX);NYo=r(zut,"from_pretrained()"),zut.forEach(t),jYo=r(wZ," class method or the "),qX=n(wZ,"A",{href:!0});var Wut=s(qX);DYo=r(Wut,"from_config()"),Wut.forEach(t),GYo=r(wZ,` class
method.`),wZ.forEach(t),OYo=i(rl),iL=n(rl,"P",{});var iDe=s(iL);VYo=r(iDe,"This class cannot be instantiated directly using "),bue=n(iDe,"CODE",{});var Qut=s(bue);XYo=r(Qut,"__init__()"),Qut.forEach(t),zYo=r(iDe," (throws an error)."),iDe.forEach(t),WYo=i(rl),bt=n(rl,"DIV",{class:!0});var J3=s(bt);T(dL.$$.fragment,J3),QYo=i(J3),vue=n(J3,"P",{});var Hut=s(vue);HYo=r(Hut,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hut.forEach(t),UYo=i(J3),pd=n(J3,"P",{});var AZ=s(pd);JYo=r(AZ,`Note:
Loading a model from its configuration file does `),Fue=n(AZ,"STRONG",{});var Uut=s(Fue);YYo=r(Uut,"not"),Uut.forEach(t),KYo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(AZ,"A",{href:!0});var Jut=s(NX);ZYo=r(Jut,"from_pretrained()"),Jut.forEach(t),eKo=r(AZ," to load the model weights."),AZ.forEach(t),oKo=i(J3),T(kF.$$.fragment,J3),J3.forEach(t),rKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(cL.$$.fragment,pa),tKo=i(pa),Tue=n(pa,"P",{});var Yut=s(Tue);aKo=r(Yut,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Yut.forEach(t),nKo=i(pa),Oa=n(pa,"P",{});var Y3=s(Oa);sKo=r(Y3,"The model class to instantiate is selected based on the "),Mue=n(Y3,"CODE",{});var Kut=s(Mue);lKo=r(Kut,"model_type"),Kut.forEach(t),iKo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Eue=n(Y3,"CODE",{});var Zut=s(Eue);dKo=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),cKo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(Y3,"CODE",{});var e_t=s(Cue);fKo=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),mKo=r(Y3,":"),Y3.forEach(t),gKo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);SF=n(tl,"LI",{});var W$e=s(SF);wue=n(W$e,"STRONG",{});var o_t=s(wue);hKo=r(o_t,"data2vec-audio"),o_t.forEach(t),pKo=r(W$e," \u2014 "),jX=n(W$e,"A",{href:!0});var r_t=s(jX);uKo=r(r_t,"Data2VecAudioForAudioFrameClassification"),r_t.forEach(t),_Ko=r(W$e," (Data2VecAudio model)"),W$e.forEach(t),bKo=i(tl),RF=n(tl,"LI",{});var Q$e=s(RF);Aue=n(Q$e,"STRONG",{});var t_t=s(Aue);vKo=r(t_t,"unispeech-sat"),t_t.forEach(t),FKo=r(Q$e," \u2014 "),DX=n(Q$e,"A",{href:!0});var a_t=s(DX);TKo=r(a_t,"UniSpeechSatForAudioFrameClassification"),a_t.forEach(t),MKo=r(Q$e," (UniSpeechSat model)"),Q$e.forEach(t),EKo=i(tl),PF=n(tl,"LI",{});var H$e=s(PF);yue=n(H$e,"STRONG",{});var n_t=s(yue);CKo=r(n_t,"wav2vec2"),n_t.forEach(t),wKo=r(H$e," \u2014 "),GX=n(H$e,"A",{href:!0});var s_t=s(GX);AKo=r(s_t,"Wav2Vec2ForAudioFrameClassification"),s_t.forEach(t),yKo=r(H$e," (Wav2Vec2 model)"),H$e.forEach(t),LKo=i(tl),BF=n(tl,"LI",{});var U$e=s(BF);Lue=n(U$e,"STRONG",{});var l_t=s(Lue);xKo=r(l_t,"wav2vec2-conformer"),l_t.forEach(t),$Ko=r(U$e," \u2014 "),OX=n(U$e,"A",{href:!0});var i_t=s(OX);kKo=r(i_t,"Wav2Vec2ConformerForAudioFrameClassification"),i_t.forEach(t),SKo=r(U$e," (Wav2Vec2-Conformer model)"),U$e.forEach(t),RKo=i(tl),IF=n(tl,"LI",{});var J$e=s(IF);xue=n(J$e,"STRONG",{});var d_t=s(xue);PKo=r(d_t,"wavlm"),d_t.forEach(t),BKo=r(J$e," \u2014 "),VX=n(J$e,"A",{href:!0});var c_t=s(VX);IKo=r(c_t,"WavLMForAudioFrameClassification"),c_t.forEach(t),qKo=r(J$e," (WavLM model)"),J$e.forEach(t),tl.forEach(t),NKo=i(pa),qF=n(pa,"P",{});var Y$e=s(qF);jKo=r(Y$e,"The model is set in evaluation mode by default using "),$ue=n(Y$e,"CODE",{});var f_t=s($ue);DKo=r(f_t,"model.eval()"),f_t.forEach(t),GKo=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=n(Y$e,"CODE",{});var m_t=s(kue);OKo=r(m_t,"model.train()"),m_t.forEach(t),Y$e.forEach(t),VKo=i(pa),T(NF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),nNe=i(f),ud=n(f,"H2",{class:!0});var dDe=s(ud);jF=n(dDe,"A",{id:!0,class:!0,href:!0});var g_t=s(jF);Sue=n(g_t,"SPAN",{});var h_t=s(Sue);T(fL.$$.fragment,h_t),h_t.forEach(t),g_t.forEach(t),XKo=i(dDe),Rue=n(dDe,"SPAN",{});var p_t=s(Rue);zKo=r(p_t,"AutoModelForCTC"),p_t.forEach(t),dDe.forEach(t),sNe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(mL.$$.fragment,al),WKo=i(al),_d=n(al,"P",{});var yZ=s(_d);QKo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XX=n(yZ,"A",{href:!0});var u_t=s(XX);HKo=r(u_t,"from_pretrained()"),u_t.forEach(t),UKo=r(yZ," class method or the "),zX=n(yZ,"A",{href:!0});var __t=s(zX);JKo=r(__t,"from_config()"),__t.forEach(t),YKo=r(yZ,` class
method.`),yZ.forEach(t),KKo=i(al),gL=n(al,"P",{});var cDe=s(gL);ZKo=r(cDe,"This class cannot be instantiated directly using "),Pue=n(cDe,"CODE",{});var b_t=s(Pue);eZo=r(b_t,"__init__()"),b_t.forEach(t),oZo=r(cDe," (throws an error)."),cDe.forEach(t),rZo=i(al),vt=n(al,"DIV",{class:!0});var K3=s(vt);T(hL.$$.fragment,K3),tZo=i(K3),Bue=n(K3,"P",{});var v_t=s(Bue);aZo=r(v_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),v_t.forEach(t),nZo=i(K3),bd=n(K3,"P",{});var LZ=s(bd);sZo=r(LZ,`Note:
Loading a model from its configuration file does `),Iue=n(LZ,"STRONG",{});var F_t=s(Iue);lZo=r(F_t,"not"),F_t.forEach(t),iZo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(LZ,"A",{href:!0});var T_t=s(WX);dZo=r(T_t,"from_pretrained()"),T_t.forEach(t),cZo=r(LZ," to load the model weights."),LZ.forEach(t),fZo=i(K3),T(DF.$$.fragment,K3),K3.forEach(t),mZo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(pL.$$.fragment,ua),gZo=i(ua),que=n(ua,"P",{});var M_t=s(que);hZo=r(M_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),M_t.forEach(t),pZo=i(ua),Va=n(ua,"P",{});var Z3=s(Va);uZo=r(Z3,"The model class to instantiate is selected based on the "),Nue=n(Z3,"CODE",{});var E_t=s(Nue);_Zo=r(E_t,"model_type"),E_t.forEach(t),bZo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),jue=n(Z3,"CODE",{});var C_t=s(jue);vZo=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),FZo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(Z3,"CODE",{});var w_t=s(Due);TZo=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),MZo=r(Z3,":"),Z3.forEach(t),EZo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);GF=n(Ve,"LI",{});var K$e=s(GF);Gue=n(K$e,"STRONG",{});var A_t=s(Gue);CZo=r(A_t,"data2vec-audio"),A_t.forEach(t),wZo=r(K$e," \u2014 "),QX=n(K$e,"A",{href:!0});var y_t=s(QX);AZo=r(y_t,"Data2VecAudioForCTC"),y_t.forEach(t),yZo=r(K$e," (Data2VecAudio model)"),K$e.forEach(t),LZo=i(Ve),OF=n(Ve,"LI",{});var Z$e=s(OF);Oue=n(Z$e,"STRONG",{});var L_t=s(Oue);xZo=r(L_t,"hubert"),L_t.forEach(t),$Zo=r(Z$e," \u2014 "),HX=n(Z$e,"A",{href:!0});var x_t=s(HX);kZo=r(x_t,"HubertForCTC"),x_t.forEach(t),SZo=r(Z$e," (Hubert model)"),Z$e.forEach(t),RZo=i(Ve),VF=n(Ve,"LI",{});var eke=s(VF);Vue=n(eke,"STRONG",{});var $_t=s(Vue);PZo=r($_t,"sew"),$_t.forEach(t),BZo=r(eke," \u2014 "),UX=n(eke,"A",{href:!0});var k_t=s(UX);IZo=r(k_t,"SEWForCTC"),k_t.forEach(t),qZo=r(eke," (SEW model)"),eke.forEach(t),NZo=i(Ve),XF=n(Ve,"LI",{});var oke=s(XF);Xue=n(oke,"STRONG",{});var S_t=s(Xue);jZo=r(S_t,"sew-d"),S_t.forEach(t),DZo=r(oke," \u2014 "),JX=n(oke,"A",{href:!0});var R_t=s(JX);GZo=r(R_t,"SEWDForCTC"),R_t.forEach(t),OZo=r(oke," (SEW-D model)"),oke.forEach(t),VZo=i(Ve),zF=n(Ve,"LI",{});var rke=s(zF);zue=n(rke,"STRONG",{});var P_t=s(zue);XZo=r(P_t,"unispeech"),P_t.forEach(t),zZo=r(rke," \u2014 "),YX=n(rke,"A",{href:!0});var B_t=s(YX);WZo=r(B_t,"UniSpeechForCTC"),B_t.forEach(t),QZo=r(rke," (UniSpeech model)"),rke.forEach(t),HZo=i(Ve),WF=n(Ve,"LI",{});var tke=s(WF);Wue=n(tke,"STRONG",{});var I_t=s(Wue);UZo=r(I_t,"unispeech-sat"),I_t.forEach(t),JZo=r(tke," \u2014 "),KX=n(tke,"A",{href:!0});var q_t=s(KX);YZo=r(q_t,"UniSpeechSatForCTC"),q_t.forEach(t),KZo=r(tke," (UniSpeechSat model)"),tke.forEach(t),ZZo=i(Ve),QF=n(Ve,"LI",{});var ake=s(QF);Que=n(ake,"STRONG",{});var N_t=s(Que);eer=r(N_t,"wav2vec2"),N_t.forEach(t),oer=r(ake," \u2014 "),ZX=n(ake,"A",{href:!0});var j_t=s(ZX);rer=r(j_t,"Wav2Vec2ForCTC"),j_t.forEach(t),ter=r(ake," (Wav2Vec2 model)"),ake.forEach(t),aer=i(Ve),HF=n(Ve,"LI",{});var nke=s(HF);Hue=n(nke,"STRONG",{});var D_t=s(Hue);ner=r(D_t,"wav2vec2-conformer"),D_t.forEach(t),ser=r(nke," \u2014 "),ez=n(nke,"A",{href:!0});var G_t=s(ez);ler=r(G_t,"Wav2Vec2ConformerForCTC"),G_t.forEach(t),ier=r(nke," (Wav2Vec2-Conformer model)"),nke.forEach(t),der=i(Ve),UF=n(Ve,"LI",{});var ske=s(UF);Uue=n(ske,"STRONG",{});var O_t=s(Uue);cer=r(O_t,"wavlm"),O_t.forEach(t),fer=r(ske," \u2014 "),oz=n(ske,"A",{href:!0});var V_t=s(oz);mer=r(V_t,"WavLMForCTC"),V_t.forEach(t),ger=r(ske," (WavLM model)"),ske.forEach(t),Ve.forEach(t),her=i(ua),JF=n(ua,"P",{});var lke=s(JF);per=r(lke,"The model is set in evaluation mode by default using "),Jue=n(lke,"CODE",{});var X_t=s(Jue);uer=r(X_t,"model.eval()"),X_t.forEach(t),_er=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(lke,"CODE",{});var z_t=s(Yue);ber=r(z_t,"model.train()"),z_t.forEach(t),lke.forEach(t),ver=i(ua),T(YF.$$.fragment,ua),ua.forEach(t),al.forEach(t),lNe=i(f),vd=n(f,"H2",{class:!0});var fDe=s(vd);KF=n(fDe,"A",{id:!0,class:!0,href:!0});var W_t=s(KF);Kue=n(W_t,"SPAN",{});var Q_t=s(Kue);T(uL.$$.fragment,Q_t),Q_t.forEach(t),W_t.forEach(t),Fer=i(fDe),Zue=n(fDe,"SPAN",{});var H_t=s(Zue);Ter=r(H_t,"AutoModelForSpeechSeq2Seq"),H_t.forEach(t),fDe.forEach(t),iNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(_L.$$.fragment,nl),Mer=i(nl),Fd=n(nl,"P",{});var xZ=s(Fd);Eer=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rz=n(xZ,"A",{href:!0});var U_t=s(rz);Cer=r(U_t,"from_pretrained()"),U_t.forEach(t),wer=r(xZ," class method or the "),tz=n(xZ,"A",{href:!0});var J_t=s(tz);Aer=r(J_t,"from_config()"),J_t.forEach(t),yer=r(xZ,` class
method.`),xZ.forEach(t),Ler=i(nl),bL=n(nl,"P",{});var mDe=s(bL);xer=r(mDe,"This class cannot be instantiated directly using "),e_e=n(mDe,"CODE",{});var Y_t=s(e_e);$er=r(Y_t,"__init__()"),Y_t.forEach(t),ker=r(mDe," (throws an error)."),mDe.forEach(t),Ser=i(nl),Ft=n(nl,"DIV",{class:!0});var ew=s(Ft);T(vL.$$.fragment,ew),Rer=i(ew),o_e=n(ew,"P",{});var K_t=s(o_e);Per=r(K_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),K_t.forEach(t),Ber=i(ew),Td=n(ew,"P",{});var $Z=s(Td);Ier=r($Z,`Note:
Loading a model from its configuration file does `),r_e=n($Z,"STRONG",{});var Z_t=s(r_e);qer=r(Z_t,"not"),Z_t.forEach(t),Ner=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n($Z,"A",{href:!0});var e0t=s(az);jer=r(e0t,"from_pretrained()"),e0t.forEach(t),Der=r($Z," to load the model weights."),$Z.forEach(t),Ger=i(ew),T(ZF.$$.fragment,ew),ew.forEach(t),Oer=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(FL.$$.fragment,_a),Ver=i(_a),t_e=n(_a,"P",{});var o0t=s(t_e);Xer=r(o0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),o0t.forEach(t),zer=i(_a),Xa=n(_a,"P",{});var ow=s(Xa);Wer=r(ow,"The model class to instantiate is selected based on the "),a_e=n(ow,"CODE",{});var r0t=s(a_e);Qer=r(r0t,"model_type"),r0t.forEach(t),Her=r(ow,` property of the config object (either
passed as an argument or loaded from `),n_e=n(ow,"CODE",{});var t0t=s(n_e);Uer=r(t0t,"pretrained_model_name_or_path"),t0t.forEach(t),Jer=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(ow,"CODE",{});var a0t=s(s_e);Yer=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),Ker=r(ow,":"),ow.forEach(t),Zer=i(_a),TL=n(_a,"UL",{});var gDe=s(TL);e6=n(gDe,"LI",{});var ike=s(e6);l_e=n(ike,"STRONG",{});var n0t=s(l_e);eor=r(n0t,"speech-encoder-decoder"),n0t.forEach(t),oor=r(ike," \u2014 "),nz=n(ike,"A",{href:!0});var s0t=s(nz);ror=r(s0t,"SpeechEncoderDecoderModel"),s0t.forEach(t),tor=r(ike," (Speech Encoder decoder model)"),ike.forEach(t),aor=i(gDe),o6=n(gDe,"LI",{});var dke=s(o6);i_e=n(dke,"STRONG",{});var l0t=s(i_e);nor=r(l0t,"speech_to_text"),l0t.forEach(t),sor=r(dke," \u2014 "),sz=n(dke,"A",{href:!0});var i0t=s(sz);lor=r(i0t,"Speech2TextForConditionalGeneration"),i0t.forEach(t),ior=r(dke," (Speech2Text model)"),dke.forEach(t),gDe.forEach(t),dor=i(_a),r6=n(_a,"P",{});var cke=s(r6);cor=r(cke,"The model is set in evaluation mode by default using "),d_e=n(cke,"CODE",{});var d0t=s(d_e);mor=r(d0t,"model.eval()"),d0t.forEach(t),gor=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=n(cke,"CODE",{});var c0t=s(c_e);hor=r(c0t,"model.train()"),c0t.forEach(t),cke.forEach(t),por=i(_a),T(t6.$$.fragment,_a),_a.forEach(t),nl.forEach(t),dNe=i(f),Md=n(f,"H2",{class:!0});var hDe=s(Md);a6=n(hDe,"A",{id:!0,class:!0,href:!0});var f0t=s(a6);f_e=n(f0t,"SPAN",{});var m0t=s(f_e);T(ML.$$.fragment,m0t),m0t.forEach(t),f0t.forEach(t),uor=i(hDe),m_e=n(hDe,"SPAN",{});var g0t=s(m_e);_or=r(g0t,"AutoModelForAudioXVector"),g0t.forEach(t),hDe.forEach(t),cNe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(EL.$$.fragment,sl),bor=i(sl),Ed=n(sl,"P",{});var kZ=s(Ed);vor=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lz=n(kZ,"A",{href:!0});var h0t=s(lz);For=r(h0t,"from_pretrained()"),h0t.forEach(t),Tor=r(kZ," class method or the "),iz=n(kZ,"A",{href:!0});var p0t=s(iz);Mor=r(p0t,"from_config()"),p0t.forEach(t),Eor=r(kZ,` class
method.`),kZ.forEach(t),Cor=i(sl),CL=n(sl,"P",{});var pDe=s(CL);wor=r(pDe,"This class cannot be instantiated directly using "),g_e=n(pDe,"CODE",{});var u0t=s(g_e);Aor=r(u0t,"__init__()"),u0t.forEach(t),yor=r(pDe," (throws an error)."),pDe.forEach(t),Lor=i(sl),Tt=n(sl,"DIV",{class:!0});var rw=s(Tt);T(wL.$$.fragment,rw),xor=i(rw),h_e=n(rw,"P",{});var _0t=s(h_e);$or=r(_0t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),_0t.forEach(t),kor=i(rw),Cd=n(rw,"P",{});var SZ=s(Cd);Sor=r(SZ,`Note:
Loading a model from its configuration file does `),p_e=n(SZ,"STRONG",{});var b0t=s(p_e);Ror=r(b0t,"not"),b0t.forEach(t),Por=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(SZ,"A",{href:!0});var v0t=s(dz);Bor=r(v0t,"from_pretrained()"),v0t.forEach(t),Ior=r(SZ," to load the model weights."),SZ.forEach(t),qor=i(rw),T(n6.$$.fragment,rw),rw.forEach(t),Nor=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(AL.$$.fragment,ba),jor=i(ba),u_e=n(ba,"P",{});var F0t=s(u_e);Dor=r(F0t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),F0t.forEach(t),Gor=i(ba),za=n(ba,"P",{});var tw=s(za);Oor=r(tw,"The model class to instantiate is selected based on the "),__e=n(tw,"CODE",{});var T0t=s(__e);Vor=r(T0t,"model_type"),T0t.forEach(t),Xor=r(tw,` property of the config object (either
passed as an argument or loaded from `),b_e=n(tw,"CODE",{});var M0t=s(b_e);zor=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),Wor=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(tw,"CODE",{});var E0t=s(v_e);Qor=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),Hor=r(tw,":"),tw.forEach(t),Uor=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);s6=n(ll,"LI",{});var fke=s(s6);F_e=n(fke,"STRONG",{});var C0t=s(F_e);Jor=r(C0t,"data2vec-audio"),C0t.forEach(t),Yor=r(fke," \u2014 "),cz=n(fke,"A",{href:!0});var w0t=s(cz);Kor=r(w0t,"Data2VecAudioForXVector"),w0t.forEach(t),Zor=r(fke," (Data2VecAudio model)"),fke.forEach(t),err=i(ll),l6=n(ll,"LI",{});var mke=s(l6);T_e=n(mke,"STRONG",{});var A0t=s(T_e);orr=r(A0t,"unispeech-sat"),A0t.forEach(t),rrr=r(mke," \u2014 "),fz=n(mke,"A",{href:!0});var y0t=s(fz);trr=r(y0t,"UniSpeechSatForXVector"),y0t.forEach(t),arr=r(mke," (UniSpeechSat model)"),mke.forEach(t),nrr=i(ll),i6=n(ll,"LI",{});var gke=s(i6);M_e=n(gke,"STRONG",{});var L0t=s(M_e);srr=r(L0t,"wav2vec2"),L0t.forEach(t),lrr=r(gke," \u2014 "),mz=n(gke,"A",{href:!0});var x0t=s(mz);irr=r(x0t,"Wav2Vec2ForXVector"),x0t.forEach(t),drr=r(gke," (Wav2Vec2 model)"),gke.forEach(t),crr=i(ll),d6=n(ll,"LI",{});var hke=s(d6);E_e=n(hke,"STRONG",{});var $0t=s(E_e);frr=r($0t,"wav2vec2-conformer"),$0t.forEach(t),mrr=r(hke," \u2014 "),gz=n(hke,"A",{href:!0});var k0t=s(gz);grr=r(k0t,"Wav2Vec2ConformerForXVector"),k0t.forEach(t),hrr=r(hke," (Wav2Vec2-Conformer model)"),hke.forEach(t),prr=i(ll),c6=n(ll,"LI",{});var pke=s(c6);C_e=n(pke,"STRONG",{});var S0t=s(C_e);urr=r(S0t,"wavlm"),S0t.forEach(t),_rr=r(pke," \u2014 "),hz=n(pke,"A",{href:!0});var R0t=s(hz);brr=r(R0t,"WavLMForXVector"),R0t.forEach(t),vrr=r(pke," (WavLM model)"),pke.forEach(t),ll.forEach(t),Frr=i(ba),f6=n(ba,"P",{});var uke=s(f6);Trr=r(uke,"The model is set in evaluation mode by default using "),w_e=n(uke,"CODE",{});var P0t=s(w_e);Mrr=r(P0t,"model.eval()"),P0t.forEach(t),Err=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(uke,"CODE",{});var B0t=s(A_e);Crr=r(B0t,"model.train()"),B0t.forEach(t),uke.forEach(t),wrr=i(ba),T(m6.$$.fragment,ba),ba.forEach(t),sl.forEach(t),fNe=i(f),wd=n(f,"H2",{class:!0});var uDe=s(wd);g6=n(uDe,"A",{id:!0,class:!0,href:!0});var I0t=s(g6);y_e=n(I0t,"SPAN",{});var q0t=s(y_e);T(yL.$$.fragment,q0t),q0t.forEach(t),I0t.forEach(t),Arr=i(uDe),L_e=n(uDe,"SPAN",{});var N0t=s(L_e);yrr=r(N0t,"AutoModelForMaskedImageModeling"),N0t.forEach(t),uDe.forEach(t),mNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(LL.$$.fragment,il),Lrr=i(il),Ad=n(il,"P",{});var RZ=s(Ad);xrr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pz=n(RZ,"A",{href:!0});var j0t=s(pz);$rr=r(j0t,"from_pretrained()"),j0t.forEach(t),krr=r(RZ," class method or the "),uz=n(RZ,"A",{href:!0});var D0t=s(uz);Srr=r(D0t,"from_config()"),D0t.forEach(t),Rrr=r(RZ,` class
method.`),RZ.forEach(t),Prr=i(il),xL=n(il,"P",{});var _De=s(xL);Brr=r(_De,"This class cannot be instantiated directly using "),x_e=n(_De,"CODE",{});var G0t=s(x_e);Irr=r(G0t,"__init__()"),G0t.forEach(t),qrr=r(_De," (throws an error)."),_De.forEach(t),Nrr=i(il),Mt=n(il,"DIV",{class:!0});var aw=s(Mt);T($L.$$.fragment,aw),jrr=i(aw),$_e=n(aw,"P",{});var O0t=s($_e);Drr=r(O0t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),O0t.forEach(t),Grr=i(aw),yd=n(aw,"P",{});var PZ=s(yd);Orr=r(PZ,`Note:
Loading a model from its configuration file does `),k_e=n(PZ,"STRONG",{});var V0t=s(k_e);Vrr=r(V0t,"not"),V0t.forEach(t),Xrr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(PZ,"A",{href:!0});var X0t=s(_z);zrr=r(X0t,"from_pretrained()"),X0t.forEach(t),Wrr=r(PZ," to load the model weights."),PZ.forEach(t),Qrr=i(aw),T(h6.$$.fragment,aw),aw.forEach(t),Hrr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(kL.$$.fragment,va),Urr=i(va),S_e=n(va,"P",{});var z0t=s(S_e);Jrr=r(z0t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),z0t.forEach(t),Yrr=i(va),Wa=n(va,"P",{});var nw=s(Wa);Krr=r(nw,"The model class to instantiate is selected based on the "),R_e=n(nw,"CODE",{});var W0t=s(R_e);Zrr=r(W0t,"model_type"),W0t.forEach(t),etr=r(nw,` property of the config object (either
passed as an argument or loaded from `),P_e=n(nw,"CODE",{});var Q0t=s(P_e);otr=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),rtr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(nw,"CODE",{});var H0t=s(B_e);ttr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),atr=r(nw,":"),nw.forEach(t),ntr=i(va),Ld=n(va,"UL",{});var BZ=s(Ld);p6=n(BZ,"LI",{});var _ke=s(p6);I_e=n(_ke,"STRONG",{});var U0t=s(I_e);str=r(U0t,"deit"),U0t.forEach(t),ltr=r(_ke," \u2014 "),bz=n(_ke,"A",{href:!0});var J0t=s(bz);itr=r(J0t,"DeiTForMaskedImageModeling"),J0t.forEach(t),dtr=r(_ke," (DeiT model)"),_ke.forEach(t),ctr=i(BZ),u6=n(BZ,"LI",{});var bke=s(u6);q_e=n(bke,"STRONG",{});var Y0t=s(q_e);ftr=r(Y0t,"swin"),Y0t.forEach(t),mtr=r(bke," \u2014 "),vz=n(bke,"A",{href:!0});var K0t=s(vz);gtr=r(K0t,"SwinForMaskedImageModeling"),K0t.forEach(t),htr=r(bke," (Swin model)"),bke.forEach(t),ptr=i(BZ),_6=n(BZ,"LI",{});var vke=s(_6);N_e=n(vke,"STRONG",{});var Z0t=s(N_e);utr=r(Z0t,"vit"),Z0t.forEach(t),_tr=r(vke," \u2014 "),Fz=n(vke,"A",{href:!0});var e1t=s(Fz);btr=r(e1t,"ViTForMaskedImageModeling"),e1t.forEach(t),vtr=r(vke," (ViT model)"),vke.forEach(t),BZ.forEach(t),Ftr=i(va),b6=n(va,"P",{});var Fke=s(b6);Ttr=r(Fke,"The model is set in evaluation mode by default using "),j_e=n(Fke,"CODE",{});var o1t=s(j_e);Mtr=r(o1t,"model.eval()"),o1t.forEach(t),Etr=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(Fke,"CODE",{});var r1t=s(D_e);Ctr=r(r1t,"model.train()"),r1t.forEach(t),Fke.forEach(t),wtr=i(va),T(v6.$$.fragment,va),va.forEach(t),il.forEach(t),gNe=i(f),xd=n(f,"H2",{class:!0});var bDe=s(xd);F6=n(bDe,"A",{id:!0,class:!0,href:!0});var t1t=s(F6);G_e=n(t1t,"SPAN",{});var a1t=s(G_e);T(SL.$$.fragment,a1t),a1t.forEach(t),t1t.forEach(t),Atr=i(bDe),O_e=n(bDe,"SPAN",{});var n1t=s(O_e);ytr=r(n1t,"AutoModelForObjectDetection"),n1t.forEach(t),bDe.forEach(t),hNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(RL.$$.fragment,dl),Ltr=i(dl),$d=n(dl,"P",{});var IZ=s($d);xtr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Tz=n(IZ,"A",{href:!0});var s1t=s(Tz);$tr=r(s1t,"from_pretrained()"),s1t.forEach(t),ktr=r(IZ," class method or the "),Mz=n(IZ,"A",{href:!0});var l1t=s(Mz);Str=r(l1t,"from_config()"),l1t.forEach(t),Rtr=r(IZ,` class
method.`),IZ.forEach(t),Ptr=i(dl),PL=n(dl,"P",{});var vDe=s(PL);Btr=r(vDe,"This class cannot be instantiated directly using "),V_e=n(vDe,"CODE",{});var i1t=s(V_e);Itr=r(i1t,"__init__()"),i1t.forEach(t),qtr=r(vDe," (throws an error)."),vDe.forEach(t),Ntr=i(dl),Et=n(dl,"DIV",{class:!0});var sw=s(Et);T(BL.$$.fragment,sw),jtr=i(sw),X_e=n(sw,"P",{});var d1t=s(X_e);Dtr=r(d1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),d1t.forEach(t),Gtr=i(sw),kd=n(sw,"P",{});var qZ=s(kd);Otr=r(qZ,`Note:
Loading a model from its configuration file does `),z_e=n(qZ,"STRONG",{});var c1t=s(z_e);Vtr=r(c1t,"not"),c1t.forEach(t),Xtr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(qZ,"A",{href:!0});var f1t=s(Ez);ztr=r(f1t,"from_pretrained()"),f1t.forEach(t),Wtr=r(qZ," to load the model weights."),qZ.forEach(t),Qtr=i(sw),T(T6.$$.fragment,sw),sw.forEach(t),Htr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(IL.$$.fragment,Fa),Utr=i(Fa),W_e=n(Fa,"P",{});var m1t=s(W_e);Jtr=r(m1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),m1t.forEach(t),Ytr=i(Fa),Qa=n(Fa,"P",{});var lw=s(Qa);Ktr=r(lw,"The model class to instantiate is selected based on the "),Q_e=n(lw,"CODE",{});var g1t=s(Q_e);Ztr=r(g1t,"model_type"),g1t.forEach(t),ear=r(lw,` property of the config object (either
passed as an argument or loaded from `),H_e=n(lw,"CODE",{});var h1t=s(H_e);oar=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),rar=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(lw,"CODE",{});var p1t=s(U_e);tar=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),aar=r(lw,":"),lw.forEach(t),nar=i(Fa),qL=n(Fa,"UL",{});var FDe=s(qL);M6=n(FDe,"LI",{});var Tke=s(M6);J_e=n(Tke,"STRONG",{});var u1t=s(J_e);sar=r(u1t,"detr"),u1t.forEach(t),lar=r(Tke," \u2014 "),Cz=n(Tke,"A",{href:!0});var _1t=s(Cz);iar=r(_1t,"DetrForObjectDetection"),_1t.forEach(t),dar=r(Tke," (DETR model)"),Tke.forEach(t),car=i(FDe),E6=n(FDe,"LI",{});var Mke=s(E6);Y_e=n(Mke,"STRONG",{});var b1t=s(Y_e);far=r(b1t,"yolos"),b1t.forEach(t),mar=r(Mke," \u2014 "),wz=n(Mke,"A",{href:!0});var v1t=s(wz);gar=r(v1t,"YolosForObjectDetection"),v1t.forEach(t),har=r(Mke," (YOLOS model)"),Mke.forEach(t),FDe.forEach(t),par=i(Fa),C6=n(Fa,"P",{});var Eke=s(C6);uar=r(Eke,"The model is set in evaluation mode by default using "),K_e=n(Eke,"CODE",{});var F1t=s(K_e);_ar=r(F1t,"model.eval()"),F1t.forEach(t),bar=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Eke,"CODE",{});var T1t=s(Z_e);Far=r(T1t,"model.train()"),T1t.forEach(t),Eke.forEach(t),Tar=i(Fa),T(w6.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),pNe=i(f),Sd=n(f,"H2",{class:!0});var TDe=s(Sd);A6=n(TDe,"A",{id:!0,class:!0,href:!0});var M1t=s(A6);e0e=n(M1t,"SPAN",{});var E1t=s(e0e);T(NL.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),Mar=i(TDe),o0e=n(TDe,"SPAN",{});var C1t=s(o0e);Ear=r(C1t,"AutoModelForImageSegmentation"),C1t.forEach(t),TDe.forEach(t),uNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(jL.$$.fragment,cl),Car=i(cl),Rd=n(cl,"P",{});var NZ=s(Rd);war=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Az=n(NZ,"A",{href:!0});var w1t=s(Az);Aar=r(w1t,"from_pretrained()"),w1t.forEach(t),yar=r(NZ," class method or the "),yz=n(NZ,"A",{href:!0});var A1t=s(yz);Lar=r(A1t,"from_config()"),A1t.forEach(t),xar=r(NZ,` class
method.`),NZ.forEach(t),$ar=i(cl),DL=n(cl,"P",{});var MDe=s(DL);kar=r(MDe,"This class cannot be instantiated directly using "),r0e=n(MDe,"CODE",{});var y1t=s(r0e);Sar=r(y1t,"__init__()"),y1t.forEach(t),Rar=r(MDe," (throws an error)."),MDe.forEach(t),Par=i(cl),Ct=n(cl,"DIV",{class:!0});var iw=s(Ct);T(GL.$$.fragment,iw),Bar=i(iw),t0e=n(iw,"P",{});var L1t=s(t0e);Iar=r(L1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),L1t.forEach(t),qar=i(iw),Pd=n(iw,"P",{});var jZ=s(Pd);Nar=r(jZ,`Note:
Loading a model from its configuration file does `),a0e=n(jZ,"STRONG",{});var x1t=s(a0e);jar=r(x1t,"not"),x1t.forEach(t),Dar=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(jZ,"A",{href:!0});var $1t=s(Lz);Gar=r($1t,"from_pretrained()"),$1t.forEach(t),Oar=r(jZ," to load the model weights."),jZ.forEach(t),Var=i(iw),T(y6.$$.fragment,iw),iw.forEach(t),Xar=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(OL.$$.fragment,Ta),zar=i(Ta),n0e=n(Ta,"P",{});var k1t=s(n0e);War=r(k1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),k1t.forEach(t),Qar=i(Ta),Ha=n(Ta,"P",{});var dw=s(Ha);Har=r(dw,"The model class to instantiate is selected based on the "),s0e=n(dw,"CODE",{});var S1t=s(s0e);Uar=r(S1t,"model_type"),S1t.forEach(t),Jar=r(dw,` property of the config object (either
passed as an argument or loaded from `),l0e=n(dw,"CODE",{});var R1t=s(l0e);Yar=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),Kar=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(dw,"CODE",{});var P1t=s(i0e);Zar=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),enr=r(dw,":"),dw.forEach(t),onr=i(Ta),d0e=n(Ta,"UL",{});var B1t=s(d0e);L6=n(B1t,"LI",{});var Cke=s(L6);c0e=n(Cke,"STRONG",{});var I1t=s(c0e);rnr=r(I1t,"detr"),I1t.forEach(t),tnr=r(Cke," \u2014 "),xz=n(Cke,"A",{href:!0});var q1t=s(xz);anr=r(q1t,"DetrForSegmentation"),q1t.forEach(t),nnr=r(Cke," (DETR model)"),Cke.forEach(t),B1t.forEach(t),snr=i(Ta),x6=n(Ta,"P",{});var wke=s(x6);lnr=r(wke,"The model is set in evaluation mode by default using "),f0e=n(wke,"CODE",{});var N1t=s(f0e);inr=r(N1t,"model.eval()"),N1t.forEach(t),dnr=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m0e=n(wke,"CODE",{});var j1t=s(m0e);cnr=r(j1t,"model.train()"),j1t.forEach(t),wke.forEach(t),fnr=i(Ta),T($6.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),_Ne=i(f),Bd=n(f,"H2",{class:!0});var EDe=s(Bd);k6=n(EDe,"A",{id:!0,class:!0,href:!0});var D1t=s(k6);g0e=n(D1t,"SPAN",{});var G1t=s(g0e);T(VL.$$.fragment,G1t),G1t.forEach(t),D1t.forEach(t),mnr=i(EDe),h0e=n(EDe,"SPAN",{});var O1t=s(h0e);gnr=r(O1t,"AutoModelForSemanticSegmentation"),O1t.forEach(t),EDe.forEach(t),bNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(XL.$$.fragment,fl),hnr=i(fl),Id=n(fl,"P",{});var DZ=s(Id);pnr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$z=n(DZ,"A",{href:!0});var V1t=s($z);unr=r(V1t,"from_pretrained()"),V1t.forEach(t),_nr=r(DZ," class method or the "),kz=n(DZ,"A",{href:!0});var X1t=s(kz);bnr=r(X1t,"from_config()"),X1t.forEach(t),vnr=r(DZ,` class
method.`),DZ.forEach(t),Fnr=i(fl),zL=n(fl,"P",{});var CDe=s(zL);Tnr=r(CDe,"This class cannot be instantiated directly using "),p0e=n(CDe,"CODE",{});var z1t=s(p0e);Mnr=r(z1t,"__init__()"),z1t.forEach(t),Enr=r(CDe," (throws an error)."),CDe.forEach(t),Cnr=i(fl),wt=n(fl,"DIV",{class:!0});var cw=s(wt);T(WL.$$.fragment,cw),wnr=i(cw),u0e=n(cw,"P",{});var W1t=s(u0e);Anr=r(W1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),W1t.forEach(t),ynr=i(cw),qd=n(cw,"P",{});var GZ=s(qd);Lnr=r(GZ,`Note:
Loading a model from its configuration file does `),_0e=n(GZ,"STRONG",{});var Q1t=s(_0e);xnr=r(Q1t,"not"),Q1t.forEach(t),$nr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(GZ,"A",{href:!0});var H1t=s(Sz);knr=r(H1t,"from_pretrained()"),H1t.forEach(t),Snr=r(GZ," to load the model weights."),GZ.forEach(t),Rnr=i(cw),T(S6.$$.fragment,cw),cw.forEach(t),Pnr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(QL.$$.fragment,Ma),Bnr=i(Ma),b0e=n(Ma,"P",{});var U1t=s(b0e);Inr=r(U1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),U1t.forEach(t),qnr=i(Ma),Ua=n(Ma,"P",{});var fw=s(Ua);Nnr=r(fw,"The model class to instantiate is selected based on the "),v0e=n(fw,"CODE",{});var J1t=s(v0e);jnr=r(J1t,"model_type"),J1t.forEach(t),Dnr=r(fw,` property of the config object (either
passed as an argument or loaded from `),F0e=n(fw,"CODE",{});var Y1t=s(F0e);Gnr=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),Onr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(fw,"CODE",{});var K1t=s(T0e);Vnr=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),Xnr=r(fw,":"),fw.forEach(t),znr=i(Ma),Ja=n(Ma,"UL",{});var mw=s(Ja);R6=n(mw,"LI",{});var Ake=s(R6);M0e=n(Ake,"STRONG",{});var Z1t=s(M0e);Wnr=r(Z1t,"beit"),Z1t.forEach(t),Qnr=r(Ake," \u2014 "),Rz=n(Ake,"A",{href:!0});var ebt=s(Rz);Hnr=r(ebt,"BeitForSemanticSegmentation"),ebt.forEach(t),Unr=r(Ake," (BEiT model)"),Ake.forEach(t),Jnr=i(mw),P6=n(mw,"LI",{});var yke=s(P6);E0e=n(yke,"STRONG",{});var obt=s(E0e);Ynr=r(obt,"data2vec-vision"),obt.forEach(t),Knr=r(yke," \u2014 "),Pz=n(yke,"A",{href:!0});var rbt=s(Pz);Znr=r(rbt,"Data2VecVisionForSemanticSegmentation"),rbt.forEach(t),esr=r(yke," (Data2VecVision model)"),yke.forEach(t),osr=i(mw),B6=n(mw,"LI",{});var Lke=s(B6);C0e=n(Lke,"STRONG",{});var tbt=s(C0e);rsr=r(tbt,"dpt"),tbt.forEach(t),tsr=r(Lke," \u2014 "),Bz=n(Lke,"A",{href:!0});var abt=s(Bz);asr=r(abt,"DPTForSemanticSegmentation"),abt.forEach(t),nsr=r(Lke," (DPT model)"),Lke.forEach(t),ssr=i(mw),I6=n(mw,"LI",{});var xke=s(I6);w0e=n(xke,"STRONG",{});var nbt=s(w0e);lsr=r(nbt,"segformer"),nbt.forEach(t),isr=r(xke," \u2014 "),Iz=n(xke,"A",{href:!0});var sbt=s(Iz);dsr=r(sbt,"SegformerForSemanticSegmentation"),sbt.forEach(t),csr=r(xke," (SegFormer model)"),xke.forEach(t),mw.forEach(t),fsr=i(Ma),q6=n(Ma,"P",{});var $ke=s(q6);msr=r($ke,"The model is set in evaluation mode by default using "),A0e=n($ke,"CODE",{});var lbt=s(A0e);gsr=r(lbt,"model.eval()"),lbt.forEach(t),hsr=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y0e=n($ke,"CODE",{});var ibt=s(y0e);psr=r(ibt,"model.train()"),ibt.forEach(t),$ke.forEach(t),usr=i(Ma),T(N6.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),vNe=i(f),Nd=n(f,"H2",{class:!0});var wDe=s(Nd);j6=n(wDe,"A",{id:!0,class:!0,href:!0});var dbt=s(j6);L0e=n(dbt,"SPAN",{});var cbt=s(L0e);T(HL.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),_sr=i(wDe),x0e=n(wDe,"SPAN",{});var fbt=s(x0e);bsr=r(fbt,"AutoModelForInstanceSegmentation"),fbt.forEach(t),wDe.forEach(t),FNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(UL.$$.fragment,ml),vsr=i(ml),jd=n(ml,"P",{});var OZ=s(jd);Fsr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qz=n(OZ,"A",{href:!0});var mbt=s(qz);Tsr=r(mbt,"from_pretrained()"),mbt.forEach(t),Msr=r(OZ," class method or the "),Nz=n(OZ,"A",{href:!0});var gbt=s(Nz);Esr=r(gbt,"from_config()"),gbt.forEach(t),Csr=r(OZ,` class
method.`),OZ.forEach(t),wsr=i(ml),JL=n(ml,"P",{});var ADe=s(JL);Asr=r(ADe,"This class cannot be instantiated directly using "),$0e=n(ADe,"CODE",{});var hbt=s($0e);ysr=r(hbt,"__init__()"),hbt.forEach(t),Lsr=r(ADe," (throws an error)."),ADe.forEach(t),xsr=i(ml),At=n(ml,"DIV",{class:!0});var gw=s(At);T(YL.$$.fragment,gw),$sr=i(gw),k0e=n(gw,"P",{});var pbt=s(k0e);ksr=r(pbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pbt.forEach(t),Ssr=i(gw),Dd=n(gw,"P",{});var VZ=s(Dd);Rsr=r(VZ,`Note:
Loading a model from its configuration file does `),S0e=n(VZ,"STRONG",{});var ubt=s(S0e);Psr=r(ubt,"not"),ubt.forEach(t),Bsr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(VZ,"A",{href:!0});var _bt=s(jz);Isr=r(_bt,"from_pretrained()"),_bt.forEach(t),qsr=r(VZ," to load the model weights."),VZ.forEach(t),Nsr=i(gw),T(D6.$$.fragment,gw),gw.forEach(t),jsr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(KL.$$.fragment,Ea),Dsr=i(Ea),R0e=n(Ea,"P",{});var bbt=s(R0e);Gsr=r(bbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bbt.forEach(t),Osr=i(Ea),Ya=n(Ea,"P",{});var hw=s(Ya);Vsr=r(hw,"The model class to instantiate is selected based on the "),P0e=n(hw,"CODE",{});var vbt=s(P0e);Xsr=r(vbt,"model_type"),vbt.forEach(t),zsr=r(hw,` property of the config object (either
passed as an argument or loaded from `),B0e=n(hw,"CODE",{});var Fbt=s(B0e);Wsr=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),Qsr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(hw,"CODE",{});var Tbt=s(I0e);Hsr=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),Usr=r(hw,":"),hw.forEach(t),Jsr=i(Ea),q0e=n(Ea,"UL",{});var Mbt=s(q0e);G6=n(Mbt,"LI",{});var kke=s(G6);N0e=n(kke,"STRONG",{});var Ebt=s(N0e);Ysr=r(Ebt,"maskformer"),Ebt.forEach(t),Ksr=r(kke," \u2014 "),Dz=n(kke,"A",{href:!0});var Cbt=s(Dz);Zsr=r(Cbt,"MaskFormerForInstanceSegmentation"),Cbt.forEach(t),elr=r(kke," (MaskFormer model)"),kke.forEach(t),Mbt.forEach(t),olr=i(Ea),O6=n(Ea,"P",{});var Ske=s(O6);rlr=r(Ske,"The model is set in evaluation mode by default using "),j0e=n(Ske,"CODE",{});var wbt=s(j0e);tlr=r(wbt,"model.eval()"),wbt.forEach(t),alr=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D0e=n(Ske,"CODE",{});var Abt=s(D0e);nlr=r(Abt,"model.train()"),Abt.forEach(t),Ske.forEach(t),slr=i(Ea),T(V6.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),TNe=i(f),Gd=n(f,"H2",{class:!0});var yDe=s(Gd);X6=n(yDe,"A",{id:!0,class:!0,href:!0});var ybt=s(X6);G0e=n(ybt,"SPAN",{});var Lbt=s(G0e);T(ZL.$$.fragment,Lbt),Lbt.forEach(t),ybt.forEach(t),llr=i(yDe),O0e=n(yDe,"SPAN",{});var xbt=s(O0e);ilr=r(xbt,"TFAutoModel"),xbt.forEach(t),yDe.forEach(t),MNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(e8.$$.fragment,gl),dlr=i(gl),Od=n(gl,"P",{});var XZ=s(Od);clr=r(XZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gz=n(XZ,"A",{href:!0});var $bt=s(Gz);flr=r($bt,"from_pretrained()"),$bt.forEach(t),mlr=r(XZ," class method or the "),Oz=n(XZ,"A",{href:!0});var kbt=s(Oz);glr=r(kbt,"from_config()"),kbt.forEach(t),hlr=r(XZ,` class
method.`),XZ.forEach(t),plr=i(gl),o8=n(gl,"P",{});var LDe=s(o8);ulr=r(LDe,"This class cannot be instantiated directly using "),V0e=n(LDe,"CODE",{});var Sbt=s(V0e);_lr=r(Sbt,"__init__()"),Sbt.forEach(t),blr=r(LDe," (throws an error)."),LDe.forEach(t),vlr=i(gl),yt=n(gl,"DIV",{class:!0});var pw=s(yt);T(r8.$$.fragment,pw),Flr=i(pw),X0e=n(pw,"P",{});var Rbt=s(X0e);Tlr=r(Rbt,"Instantiates one of the base model classes of the library from a configuration."),Rbt.forEach(t),Mlr=i(pw),Vd=n(pw,"P",{});var zZ=s(Vd);Elr=r(zZ,`Note:
Loading a model from its configuration file does `),z0e=n(zZ,"STRONG",{});var Pbt=s(z0e);Clr=r(Pbt,"not"),Pbt.forEach(t),wlr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(zZ,"A",{href:!0});var Bbt=s(Vz);Alr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),ylr=r(zZ," to load the model weights."),zZ.forEach(t),Llr=i(pw),T(z6.$$.fragment,pw),pw.forEach(t),xlr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(t8.$$.fragment,hl),$lr=i(hl),W0e=n(hl,"P",{});var Ibt=s(W0e);klr=r(Ibt,"Instantiate one of the base model classes of the library from a pretrained model."),Ibt.forEach(t),Slr=i(hl),Ka=n(hl,"P",{});var uw=s(Ka);Rlr=r(uw,"The model class to instantiate is selected based on the "),Q0e=n(uw,"CODE",{});var qbt=s(Q0e);Plr=r(qbt,"model_type"),qbt.forEach(t),Blr=r(uw,` property of the config object (either
passed as an argument or loaded from `),H0e=n(uw,"CODE",{});var Nbt=s(H0e);Ilr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),qlr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(uw,"CODE",{});var jbt=s(U0e);Nlr=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),jlr=r(uw,":"),uw.forEach(t),Dlr=i(hl),N=n(hl,"UL",{});var D=s(N);W6=n(D,"LI",{});var Rke=s(W6);J0e=n(Rke,"STRONG",{});var Dbt=s(J0e);Glr=r(Dbt,"albert"),Dbt.forEach(t),Olr=r(Rke," \u2014 "),Xz=n(Rke,"A",{href:!0});var Gbt=s(Xz);Vlr=r(Gbt,"TFAlbertModel"),Gbt.forEach(t),Xlr=r(Rke," (ALBERT model)"),Rke.forEach(t),zlr=i(D),Q6=n(D,"LI",{});var Pke=s(Q6);Y0e=n(Pke,"STRONG",{});var Obt=s(Y0e);Wlr=r(Obt,"bart"),Obt.forEach(t),Qlr=r(Pke," \u2014 "),zz=n(Pke,"A",{href:!0});var Vbt=s(zz);Hlr=r(Vbt,"TFBartModel"),Vbt.forEach(t),Ulr=r(Pke," (BART model)"),Pke.forEach(t),Jlr=i(D),H6=n(D,"LI",{});var Bke=s(H6);K0e=n(Bke,"STRONG",{});var Xbt=s(K0e);Ylr=r(Xbt,"bert"),Xbt.forEach(t),Klr=r(Bke," \u2014 "),Wz=n(Bke,"A",{href:!0});var zbt=s(Wz);Zlr=r(zbt,"TFBertModel"),zbt.forEach(t),eir=r(Bke," (BERT model)"),Bke.forEach(t),oir=i(D),U6=n(D,"LI",{});var Ike=s(U6);Z0e=n(Ike,"STRONG",{});var Wbt=s(Z0e);rir=r(Wbt,"blenderbot"),Wbt.forEach(t),tir=r(Ike," \u2014 "),Qz=n(Ike,"A",{href:!0});var Qbt=s(Qz);air=r(Qbt,"TFBlenderbotModel"),Qbt.forEach(t),nir=r(Ike," (Blenderbot model)"),Ike.forEach(t),sir=i(D),J6=n(D,"LI",{});var qke=s(J6);e1e=n(qke,"STRONG",{});var Hbt=s(e1e);lir=r(Hbt,"blenderbot-small"),Hbt.forEach(t),iir=r(qke," \u2014 "),Hz=n(qke,"A",{href:!0});var Ubt=s(Hz);dir=r(Ubt,"TFBlenderbotSmallModel"),Ubt.forEach(t),cir=r(qke," (BlenderbotSmall model)"),qke.forEach(t),fir=i(D),Y6=n(D,"LI",{});var Nke=s(Y6);o1e=n(Nke,"STRONG",{});var Jbt=s(o1e);mir=r(Jbt,"camembert"),Jbt.forEach(t),gir=r(Nke," \u2014 "),Uz=n(Nke,"A",{href:!0});var Ybt=s(Uz);hir=r(Ybt,"TFCamembertModel"),Ybt.forEach(t),pir=r(Nke," (CamemBERT model)"),Nke.forEach(t),uir=i(D),K6=n(D,"LI",{});var jke=s(K6);r1e=n(jke,"STRONG",{});var Kbt=s(r1e);_ir=r(Kbt,"clip"),Kbt.forEach(t),bir=r(jke," \u2014 "),Jz=n(jke,"A",{href:!0});var Zbt=s(Jz);vir=r(Zbt,"TFCLIPModel"),Zbt.forEach(t),Fir=r(jke," (CLIP model)"),jke.forEach(t),Tir=i(D),Z6=n(D,"LI",{});var Dke=s(Z6);t1e=n(Dke,"STRONG",{});var e2t=s(t1e);Mir=r(e2t,"convbert"),e2t.forEach(t),Eir=r(Dke," \u2014 "),Yz=n(Dke,"A",{href:!0});var o2t=s(Yz);Cir=r(o2t,"TFConvBertModel"),o2t.forEach(t),wir=r(Dke," (ConvBERT model)"),Dke.forEach(t),Air=i(D),eT=n(D,"LI",{});var Gke=s(eT);a1e=n(Gke,"STRONG",{});var r2t=s(a1e);yir=r(r2t,"convnext"),r2t.forEach(t),Lir=r(Gke," \u2014 "),Kz=n(Gke,"A",{href:!0});var t2t=s(Kz);xir=r(t2t,"TFConvNextModel"),t2t.forEach(t),$ir=r(Gke," (ConvNext model)"),Gke.forEach(t),kir=i(D),oT=n(D,"LI",{});var Oke=s(oT);n1e=n(Oke,"STRONG",{});var a2t=s(n1e);Sir=r(a2t,"ctrl"),a2t.forEach(t),Rir=r(Oke," \u2014 "),Zz=n(Oke,"A",{href:!0});var n2t=s(Zz);Pir=r(n2t,"TFCTRLModel"),n2t.forEach(t),Bir=r(Oke," (CTRL model)"),Oke.forEach(t),Iir=i(D),rT=n(D,"LI",{});var Vke=s(rT);s1e=n(Vke,"STRONG",{});var s2t=s(s1e);qir=r(s2t,"data2vec-vision"),s2t.forEach(t),Nir=r(Vke," \u2014 "),eW=n(Vke,"A",{href:!0});var l2t=s(eW);jir=r(l2t,"TFData2VecVisionModel"),l2t.forEach(t),Dir=r(Vke," (Data2VecVision model)"),Vke.forEach(t),Gir=i(D),tT=n(D,"LI",{});var Xke=s(tT);l1e=n(Xke,"STRONG",{});var i2t=s(l1e);Oir=r(i2t,"deberta"),i2t.forEach(t),Vir=r(Xke," \u2014 "),oW=n(Xke,"A",{href:!0});var d2t=s(oW);Xir=r(d2t,"TFDebertaModel"),d2t.forEach(t),zir=r(Xke," (DeBERTa model)"),Xke.forEach(t),Wir=i(D),aT=n(D,"LI",{});var zke=s(aT);i1e=n(zke,"STRONG",{});var c2t=s(i1e);Qir=r(c2t,"deberta-v2"),c2t.forEach(t),Hir=r(zke," \u2014 "),rW=n(zke,"A",{href:!0});var f2t=s(rW);Uir=r(f2t,"TFDebertaV2Model"),f2t.forEach(t),Jir=r(zke," (DeBERTa-v2 model)"),zke.forEach(t),Yir=i(D),nT=n(D,"LI",{});var Wke=s(nT);d1e=n(Wke,"STRONG",{});var m2t=s(d1e);Kir=r(m2t,"distilbert"),m2t.forEach(t),Zir=r(Wke," \u2014 "),tW=n(Wke,"A",{href:!0});var g2t=s(tW);edr=r(g2t,"TFDistilBertModel"),g2t.forEach(t),odr=r(Wke," (DistilBERT model)"),Wke.forEach(t),rdr=i(D),sT=n(D,"LI",{});var Qke=s(sT);c1e=n(Qke,"STRONG",{});var h2t=s(c1e);tdr=r(h2t,"dpr"),h2t.forEach(t),adr=r(Qke," \u2014 "),aW=n(Qke,"A",{href:!0});var p2t=s(aW);ndr=r(p2t,"TFDPRQuestionEncoder"),p2t.forEach(t),sdr=r(Qke," (DPR model)"),Qke.forEach(t),ldr=i(D),lT=n(D,"LI",{});var Hke=s(lT);f1e=n(Hke,"STRONG",{});var u2t=s(f1e);idr=r(u2t,"electra"),u2t.forEach(t),ddr=r(Hke," \u2014 "),nW=n(Hke,"A",{href:!0});var _2t=s(nW);cdr=r(_2t,"TFElectraModel"),_2t.forEach(t),fdr=r(Hke," (ELECTRA model)"),Hke.forEach(t),mdr=i(D),iT=n(D,"LI",{});var Uke=s(iT);m1e=n(Uke,"STRONG",{});var b2t=s(m1e);gdr=r(b2t,"flaubert"),b2t.forEach(t),hdr=r(Uke," \u2014 "),sW=n(Uke,"A",{href:!0});var v2t=s(sW);pdr=r(v2t,"TFFlaubertModel"),v2t.forEach(t),udr=r(Uke," (FlauBERT model)"),Uke.forEach(t),_dr=i(D),Is=n(D,"LI",{});var B$=s(Is);g1e=n(B$,"STRONG",{});var F2t=s(g1e);bdr=r(F2t,"funnel"),F2t.forEach(t),vdr=r(B$," \u2014 "),lW=n(B$,"A",{href:!0});var T2t=s(lW);Fdr=r(T2t,"TFFunnelModel"),T2t.forEach(t),Tdr=r(B$," or "),iW=n(B$,"A",{href:!0});var M2t=s(iW);Mdr=r(M2t,"TFFunnelBaseModel"),M2t.forEach(t),Edr=r(B$," (Funnel Transformer model)"),B$.forEach(t),Cdr=i(D),dT=n(D,"LI",{});var Jke=s(dT);h1e=n(Jke,"STRONG",{});var E2t=s(h1e);wdr=r(E2t,"gpt2"),E2t.forEach(t),Adr=r(Jke," \u2014 "),dW=n(Jke,"A",{href:!0});var C2t=s(dW);ydr=r(C2t,"TFGPT2Model"),C2t.forEach(t),Ldr=r(Jke," (OpenAI GPT-2 model)"),Jke.forEach(t),xdr=i(D),cT=n(D,"LI",{});var Yke=s(cT);p1e=n(Yke,"STRONG",{});var w2t=s(p1e);$dr=r(w2t,"gptj"),w2t.forEach(t),kdr=r(Yke," \u2014 "),cW=n(Yke,"A",{href:!0});var A2t=s(cW);Sdr=r(A2t,"TFGPTJModel"),A2t.forEach(t),Rdr=r(Yke," (GPT-J model)"),Yke.forEach(t),Pdr=i(D),fT=n(D,"LI",{});var Kke=s(fT);u1e=n(Kke,"STRONG",{});var y2t=s(u1e);Bdr=r(y2t,"hubert"),y2t.forEach(t),Idr=r(Kke," \u2014 "),fW=n(Kke,"A",{href:!0});var L2t=s(fW);qdr=r(L2t,"TFHubertModel"),L2t.forEach(t),Ndr=r(Kke," (Hubert model)"),Kke.forEach(t),jdr=i(D),mT=n(D,"LI",{});var Zke=s(mT);_1e=n(Zke,"STRONG",{});var x2t=s(_1e);Ddr=r(x2t,"layoutlm"),x2t.forEach(t),Gdr=r(Zke," \u2014 "),mW=n(Zke,"A",{href:!0});var $2t=s(mW);Odr=r($2t,"TFLayoutLMModel"),$2t.forEach(t),Vdr=r(Zke," (LayoutLM model)"),Zke.forEach(t),Xdr=i(D),gT=n(D,"LI",{});var eSe=s(gT);b1e=n(eSe,"STRONG",{});var k2t=s(b1e);zdr=r(k2t,"led"),k2t.forEach(t),Wdr=r(eSe," \u2014 "),gW=n(eSe,"A",{href:!0});var S2t=s(gW);Qdr=r(S2t,"TFLEDModel"),S2t.forEach(t),Hdr=r(eSe," (LED model)"),eSe.forEach(t),Udr=i(D),hT=n(D,"LI",{});var oSe=s(hT);v1e=n(oSe,"STRONG",{});var R2t=s(v1e);Jdr=r(R2t,"longformer"),R2t.forEach(t),Ydr=r(oSe," \u2014 "),hW=n(oSe,"A",{href:!0});var P2t=s(hW);Kdr=r(P2t,"TFLongformerModel"),P2t.forEach(t),Zdr=r(oSe," (Longformer model)"),oSe.forEach(t),ecr=i(D),pT=n(D,"LI",{});var rSe=s(pT);F1e=n(rSe,"STRONG",{});var B2t=s(F1e);ocr=r(B2t,"lxmert"),B2t.forEach(t),rcr=r(rSe," \u2014 "),pW=n(rSe,"A",{href:!0});var I2t=s(pW);tcr=r(I2t,"TFLxmertModel"),I2t.forEach(t),acr=r(rSe," (LXMERT model)"),rSe.forEach(t),ncr=i(D),uT=n(D,"LI",{});var tSe=s(uT);T1e=n(tSe,"STRONG",{});var q2t=s(T1e);scr=r(q2t,"marian"),q2t.forEach(t),lcr=r(tSe," \u2014 "),uW=n(tSe,"A",{href:!0});var N2t=s(uW);icr=r(N2t,"TFMarianModel"),N2t.forEach(t),dcr=r(tSe," (Marian model)"),tSe.forEach(t),ccr=i(D),_T=n(D,"LI",{});var aSe=s(_T);M1e=n(aSe,"STRONG",{});var j2t=s(M1e);fcr=r(j2t,"mbart"),j2t.forEach(t),mcr=r(aSe," \u2014 "),_W=n(aSe,"A",{href:!0});var D2t=s(_W);gcr=r(D2t,"TFMBartModel"),D2t.forEach(t),hcr=r(aSe," (mBART model)"),aSe.forEach(t),pcr=i(D),bT=n(D,"LI",{});var nSe=s(bT);E1e=n(nSe,"STRONG",{});var G2t=s(E1e);ucr=r(G2t,"mobilebert"),G2t.forEach(t),_cr=r(nSe," \u2014 "),bW=n(nSe,"A",{href:!0});var O2t=s(bW);bcr=r(O2t,"TFMobileBertModel"),O2t.forEach(t),vcr=r(nSe," (MobileBERT model)"),nSe.forEach(t),Fcr=i(D),vT=n(D,"LI",{});var sSe=s(vT);C1e=n(sSe,"STRONG",{});var V2t=s(C1e);Tcr=r(V2t,"mpnet"),V2t.forEach(t),Mcr=r(sSe," \u2014 "),vW=n(sSe,"A",{href:!0});var X2t=s(vW);Ecr=r(X2t,"TFMPNetModel"),X2t.forEach(t),Ccr=r(sSe," (MPNet model)"),sSe.forEach(t),wcr=i(D),FT=n(D,"LI",{});var lSe=s(FT);w1e=n(lSe,"STRONG",{});var z2t=s(w1e);Acr=r(z2t,"mt5"),z2t.forEach(t),ycr=r(lSe," \u2014 "),FW=n(lSe,"A",{href:!0});var W2t=s(FW);Lcr=r(W2t,"TFMT5Model"),W2t.forEach(t),xcr=r(lSe," (mT5 model)"),lSe.forEach(t),$cr=i(D),TT=n(D,"LI",{});var iSe=s(TT);A1e=n(iSe,"STRONG",{});var Q2t=s(A1e);kcr=r(Q2t,"openai-gpt"),Q2t.forEach(t),Scr=r(iSe," \u2014 "),TW=n(iSe,"A",{href:!0});var H2t=s(TW);Rcr=r(H2t,"TFOpenAIGPTModel"),H2t.forEach(t),Pcr=r(iSe," (OpenAI GPT model)"),iSe.forEach(t),Bcr=i(D),MT=n(D,"LI",{});var dSe=s(MT);y1e=n(dSe,"STRONG",{});var U2t=s(y1e);Icr=r(U2t,"pegasus"),U2t.forEach(t),qcr=r(dSe," \u2014 "),MW=n(dSe,"A",{href:!0});var J2t=s(MW);Ncr=r(J2t,"TFPegasusModel"),J2t.forEach(t),jcr=r(dSe," (Pegasus model)"),dSe.forEach(t),Dcr=i(D),ET=n(D,"LI",{});var cSe=s(ET);L1e=n(cSe,"STRONG",{});var Y2t=s(L1e);Gcr=r(Y2t,"rembert"),Y2t.forEach(t),Ocr=r(cSe," \u2014 "),EW=n(cSe,"A",{href:!0});var K2t=s(EW);Vcr=r(K2t,"TFRemBertModel"),K2t.forEach(t),Xcr=r(cSe," (RemBERT model)"),cSe.forEach(t),zcr=i(D),CT=n(D,"LI",{});var fSe=s(CT);x1e=n(fSe,"STRONG",{});var Z2t=s(x1e);Wcr=r(Z2t,"roberta"),Z2t.forEach(t),Qcr=r(fSe," \u2014 "),CW=n(fSe,"A",{href:!0});var evt=s(CW);Hcr=r(evt,"TFRobertaModel"),evt.forEach(t),Ucr=r(fSe," (RoBERTa model)"),fSe.forEach(t),Jcr=i(D),wT=n(D,"LI",{});var mSe=s(wT);$1e=n(mSe,"STRONG",{});var ovt=s($1e);Ycr=r(ovt,"roformer"),ovt.forEach(t),Kcr=r(mSe," \u2014 "),wW=n(mSe,"A",{href:!0});var rvt=s(wW);Zcr=r(rvt,"TFRoFormerModel"),rvt.forEach(t),efr=r(mSe," (RoFormer model)"),mSe.forEach(t),ofr=i(D),AT=n(D,"LI",{});var gSe=s(AT);k1e=n(gSe,"STRONG",{});var tvt=s(k1e);rfr=r(tvt,"speech_to_text"),tvt.forEach(t),tfr=r(gSe," \u2014 "),AW=n(gSe,"A",{href:!0});var avt=s(AW);afr=r(avt,"TFSpeech2TextModel"),avt.forEach(t),nfr=r(gSe," (Speech2Text model)"),gSe.forEach(t),sfr=i(D),yT=n(D,"LI",{});var hSe=s(yT);S1e=n(hSe,"STRONG",{});var nvt=s(S1e);lfr=r(nvt,"swin"),nvt.forEach(t),ifr=r(hSe," \u2014 "),yW=n(hSe,"A",{href:!0});var svt=s(yW);dfr=r(svt,"TFSwinModel"),svt.forEach(t),cfr=r(hSe," (Swin model)"),hSe.forEach(t),ffr=i(D),LT=n(D,"LI",{});var pSe=s(LT);R1e=n(pSe,"STRONG",{});var lvt=s(R1e);mfr=r(lvt,"t5"),lvt.forEach(t),gfr=r(pSe," \u2014 "),LW=n(pSe,"A",{href:!0});var ivt=s(LW);hfr=r(ivt,"TFT5Model"),ivt.forEach(t),pfr=r(pSe," (T5 model)"),pSe.forEach(t),ufr=i(D),xT=n(D,"LI",{});var uSe=s(xT);P1e=n(uSe,"STRONG",{});var dvt=s(P1e);_fr=r(dvt,"tapas"),dvt.forEach(t),bfr=r(uSe," \u2014 "),xW=n(uSe,"A",{href:!0});var cvt=s(xW);vfr=r(cvt,"TFTapasModel"),cvt.forEach(t),Ffr=r(uSe," (TAPAS model)"),uSe.forEach(t),Tfr=i(D),$T=n(D,"LI",{});var _Se=s($T);B1e=n(_Se,"STRONG",{});var fvt=s(B1e);Mfr=r(fvt,"transfo-xl"),fvt.forEach(t),Efr=r(_Se," \u2014 "),$W=n(_Se,"A",{href:!0});var mvt=s($W);Cfr=r(mvt,"TFTransfoXLModel"),mvt.forEach(t),wfr=r(_Se," (Transformer-XL model)"),_Se.forEach(t),Afr=i(D),kT=n(D,"LI",{});var bSe=s(kT);I1e=n(bSe,"STRONG",{});var gvt=s(I1e);yfr=r(gvt,"vit"),gvt.forEach(t),Lfr=r(bSe," \u2014 "),kW=n(bSe,"A",{href:!0});var hvt=s(kW);xfr=r(hvt,"TFViTModel"),hvt.forEach(t),$fr=r(bSe," (ViT model)"),bSe.forEach(t),kfr=i(D),ST=n(D,"LI",{});var vSe=s(ST);q1e=n(vSe,"STRONG",{});var pvt=s(q1e);Sfr=r(pvt,"vit_mae"),pvt.forEach(t),Rfr=r(vSe," \u2014 "),SW=n(vSe,"A",{href:!0});var uvt=s(SW);Pfr=r(uvt,"TFViTMAEModel"),uvt.forEach(t),Bfr=r(vSe," (ViTMAE model)"),vSe.forEach(t),Ifr=i(D),RT=n(D,"LI",{});var FSe=s(RT);N1e=n(FSe,"STRONG",{});var _vt=s(N1e);qfr=r(_vt,"wav2vec2"),_vt.forEach(t),Nfr=r(FSe," \u2014 "),RW=n(FSe,"A",{href:!0});var bvt=s(RW);jfr=r(bvt,"TFWav2Vec2Model"),bvt.forEach(t),Dfr=r(FSe," (Wav2Vec2 model)"),FSe.forEach(t),Gfr=i(D),PT=n(D,"LI",{});var TSe=s(PT);j1e=n(TSe,"STRONG",{});var vvt=s(j1e);Ofr=r(vvt,"xlm"),vvt.forEach(t),Vfr=r(TSe," \u2014 "),PW=n(TSe,"A",{href:!0});var Fvt=s(PW);Xfr=r(Fvt,"TFXLMModel"),Fvt.forEach(t),zfr=r(TSe," (XLM model)"),TSe.forEach(t),Wfr=i(D),BT=n(D,"LI",{});var MSe=s(BT);D1e=n(MSe,"STRONG",{});var Tvt=s(D1e);Qfr=r(Tvt,"xlm-roberta"),Tvt.forEach(t),Hfr=r(MSe," \u2014 "),BW=n(MSe,"A",{href:!0});var Mvt=s(BW);Ufr=r(Mvt,"TFXLMRobertaModel"),Mvt.forEach(t),Jfr=r(MSe," (XLM-RoBERTa model)"),MSe.forEach(t),Yfr=i(D),IT=n(D,"LI",{});var ESe=s(IT);G1e=n(ESe,"STRONG",{});var Evt=s(G1e);Kfr=r(Evt,"xlnet"),Evt.forEach(t),Zfr=r(ESe," \u2014 "),IW=n(ESe,"A",{href:!0});var Cvt=s(IW);emr=r(Cvt,"TFXLNetModel"),Cvt.forEach(t),omr=r(ESe," (XLNet model)"),ESe.forEach(t),D.forEach(t),rmr=i(hl),T(qT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),ENe=i(f),Xd=n(f,"H2",{class:!0});var xDe=s(Xd);NT=n(xDe,"A",{id:!0,class:!0,href:!0});var wvt=s(NT);O1e=n(wvt,"SPAN",{});var Avt=s(O1e);T(a8.$$.fragment,Avt),Avt.forEach(t),wvt.forEach(t),tmr=i(xDe),V1e=n(xDe,"SPAN",{});var yvt=s(V1e);amr=r(yvt,"TFAutoModelForPreTraining"),yvt.forEach(t),xDe.forEach(t),CNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(n8.$$.fragment,pl),nmr=i(pl),zd=n(pl,"P",{});var WZ=s(zd);smr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qW=n(WZ,"A",{href:!0});var Lvt=s(qW);lmr=r(Lvt,"from_pretrained()"),Lvt.forEach(t),imr=r(WZ," class method or the "),NW=n(WZ,"A",{href:!0});var xvt=s(NW);dmr=r(xvt,"from_config()"),xvt.forEach(t),cmr=r(WZ,` class
method.`),WZ.forEach(t),fmr=i(pl),s8=n(pl,"P",{});var $De=s(s8);mmr=r($De,"This class cannot be instantiated directly using "),X1e=n($De,"CODE",{});var $vt=s(X1e);gmr=r($vt,"__init__()"),$vt.forEach(t),hmr=r($De," (throws an error)."),$De.forEach(t),pmr=i(pl),Lt=n(pl,"DIV",{class:!0});var _w=s(Lt);T(l8.$$.fragment,_w),umr=i(_w),z1e=n(_w,"P",{});var kvt=s(z1e);_mr=r(kvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kvt.forEach(t),bmr=i(_w),Wd=n(_w,"P",{});var QZ=s(Wd);vmr=r(QZ,`Note:
Loading a model from its configuration file does `),W1e=n(QZ,"STRONG",{});var Svt=s(W1e);Fmr=r(Svt,"not"),Svt.forEach(t),Tmr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(QZ,"A",{href:!0});var Rvt=s(jW);Mmr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),Emr=r(QZ," to load the model weights."),QZ.forEach(t),Cmr=i(_w),T(jT.$$.fragment,_w),_w.forEach(t),wmr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(i8.$$.fragment,ul),Amr=i(ul),Q1e=n(ul,"P",{});var Pvt=s(Q1e);ymr=r(Pvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Pvt.forEach(t),Lmr=i(ul),Za=n(ul,"P",{});var bw=s(Za);xmr=r(bw,"The model class to instantiate is selected based on the "),H1e=n(bw,"CODE",{});var Bvt=s(H1e);$mr=r(Bvt,"model_type"),Bvt.forEach(t),kmr=r(bw,` property of the config object (either
passed as an argument or loaded from `),U1e=n(bw,"CODE",{});var Ivt=s(U1e);Smr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),Rmr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(bw,"CODE",{});var qvt=s(J1e);Pmr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),Bmr=r(bw,":"),bw.forEach(t),Imr=i(ul),se=n(ul,"UL",{});var le=s(se);DT=n(le,"LI",{});var CSe=s(DT);Y1e=n(CSe,"STRONG",{});var Nvt=s(Y1e);qmr=r(Nvt,"albert"),Nvt.forEach(t),Nmr=r(CSe," \u2014 "),DW=n(CSe,"A",{href:!0});var jvt=s(DW);jmr=r(jvt,"TFAlbertForPreTraining"),jvt.forEach(t),Dmr=r(CSe," (ALBERT model)"),CSe.forEach(t),Gmr=i(le),GT=n(le,"LI",{});var wSe=s(GT);K1e=n(wSe,"STRONG",{});var Dvt=s(K1e);Omr=r(Dvt,"bart"),Dvt.forEach(t),Vmr=r(wSe," \u2014 "),GW=n(wSe,"A",{href:!0});var Gvt=s(GW);Xmr=r(Gvt,"TFBartForConditionalGeneration"),Gvt.forEach(t),zmr=r(wSe," (BART model)"),wSe.forEach(t),Wmr=i(le),OT=n(le,"LI",{});var ASe=s(OT);Z1e=n(ASe,"STRONG",{});var Ovt=s(Z1e);Qmr=r(Ovt,"bert"),Ovt.forEach(t),Hmr=r(ASe," \u2014 "),OW=n(ASe,"A",{href:!0});var Vvt=s(OW);Umr=r(Vvt,"TFBertForPreTraining"),Vvt.forEach(t),Jmr=r(ASe," (BERT model)"),ASe.forEach(t),Ymr=i(le),VT=n(le,"LI",{});var ySe=s(VT);ebe=n(ySe,"STRONG",{});var Xvt=s(ebe);Kmr=r(Xvt,"camembert"),Xvt.forEach(t),Zmr=r(ySe," \u2014 "),VW=n(ySe,"A",{href:!0});var zvt=s(VW);egr=r(zvt,"TFCamembertForMaskedLM"),zvt.forEach(t),ogr=r(ySe," (CamemBERT model)"),ySe.forEach(t),rgr=i(le),XT=n(le,"LI",{});var LSe=s(XT);obe=n(LSe,"STRONG",{});var Wvt=s(obe);tgr=r(Wvt,"ctrl"),Wvt.forEach(t),agr=r(LSe," \u2014 "),XW=n(LSe,"A",{href:!0});var Qvt=s(XW);ngr=r(Qvt,"TFCTRLLMHeadModel"),Qvt.forEach(t),sgr=r(LSe," (CTRL model)"),LSe.forEach(t),lgr=i(le),zT=n(le,"LI",{});var xSe=s(zT);rbe=n(xSe,"STRONG",{});var Hvt=s(rbe);igr=r(Hvt,"distilbert"),Hvt.forEach(t),dgr=r(xSe," \u2014 "),zW=n(xSe,"A",{href:!0});var Uvt=s(zW);cgr=r(Uvt,"TFDistilBertForMaskedLM"),Uvt.forEach(t),fgr=r(xSe," (DistilBERT model)"),xSe.forEach(t),mgr=i(le),WT=n(le,"LI",{});var $Se=s(WT);tbe=n($Se,"STRONG",{});var Jvt=s(tbe);ggr=r(Jvt,"electra"),Jvt.forEach(t),hgr=r($Se," \u2014 "),WW=n($Se,"A",{href:!0});var Yvt=s(WW);pgr=r(Yvt,"TFElectraForPreTraining"),Yvt.forEach(t),ugr=r($Se," (ELECTRA model)"),$Se.forEach(t),_gr=i(le),QT=n(le,"LI",{});var kSe=s(QT);abe=n(kSe,"STRONG",{});var Kvt=s(abe);bgr=r(Kvt,"flaubert"),Kvt.forEach(t),vgr=r(kSe," \u2014 "),QW=n(kSe,"A",{href:!0});var Zvt=s(QW);Fgr=r(Zvt,"TFFlaubertWithLMHeadModel"),Zvt.forEach(t),Tgr=r(kSe," (FlauBERT model)"),kSe.forEach(t),Mgr=i(le),HT=n(le,"LI",{});var SSe=s(HT);nbe=n(SSe,"STRONG",{});var eFt=s(nbe);Egr=r(eFt,"funnel"),eFt.forEach(t),Cgr=r(SSe," \u2014 "),HW=n(SSe,"A",{href:!0});var oFt=s(HW);wgr=r(oFt,"TFFunnelForPreTraining"),oFt.forEach(t),Agr=r(SSe," (Funnel Transformer model)"),SSe.forEach(t),ygr=i(le),UT=n(le,"LI",{});var RSe=s(UT);sbe=n(RSe,"STRONG",{});var rFt=s(sbe);Lgr=r(rFt,"gpt2"),rFt.forEach(t),xgr=r(RSe," \u2014 "),UW=n(RSe,"A",{href:!0});var tFt=s(UW);$gr=r(tFt,"TFGPT2LMHeadModel"),tFt.forEach(t),kgr=r(RSe," (OpenAI GPT-2 model)"),RSe.forEach(t),Sgr=i(le),JT=n(le,"LI",{});var PSe=s(JT);lbe=n(PSe,"STRONG",{});var aFt=s(lbe);Rgr=r(aFt,"layoutlm"),aFt.forEach(t),Pgr=r(PSe," \u2014 "),JW=n(PSe,"A",{href:!0});var nFt=s(JW);Bgr=r(nFt,"TFLayoutLMForMaskedLM"),nFt.forEach(t),Igr=r(PSe," (LayoutLM model)"),PSe.forEach(t),qgr=i(le),YT=n(le,"LI",{});var BSe=s(YT);ibe=n(BSe,"STRONG",{});var sFt=s(ibe);Ngr=r(sFt,"lxmert"),sFt.forEach(t),jgr=r(BSe," \u2014 "),YW=n(BSe,"A",{href:!0});var lFt=s(YW);Dgr=r(lFt,"TFLxmertForPreTraining"),lFt.forEach(t),Ggr=r(BSe," (LXMERT model)"),BSe.forEach(t),Ogr=i(le),KT=n(le,"LI",{});var ISe=s(KT);dbe=n(ISe,"STRONG",{});var iFt=s(dbe);Vgr=r(iFt,"mobilebert"),iFt.forEach(t),Xgr=r(ISe," \u2014 "),KW=n(ISe,"A",{href:!0});var dFt=s(KW);zgr=r(dFt,"TFMobileBertForPreTraining"),dFt.forEach(t),Wgr=r(ISe," (MobileBERT model)"),ISe.forEach(t),Qgr=i(le),ZT=n(le,"LI",{});var qSe=s(ZT);cbe=n(qSe,"STRONG",{});var cFt=s(cbe);Hgr=r(cFt,"mpnet"),cFt.forEach(t),Ugr=r(qSe," \u2014 "),ZW=n(qSe,"A",{href:!0});var fFt=s(ZW);Jgr=r(fFt,"TFMPNetForMaskedLM"),fFt.forEach(t),Ygr=r(qSe," (MPNet model)"),qSe.forEach(t),Kgr=i(le),e7=n(le,"LI",{});var NSe=s(e7);fbe=n(NSe,"STRONG",{});var mFt=s(fbe);Zgr=r(mFt,"openai-gpt"),mFt.forEach(t),ehr=r(NSe," \u2014 "),eQ=n(NSe,"A",{href:!0});var gFt=s(eQ);ohr=r(gFt,"TFOpenAIGPTLMHeadModel"),gFt.forEach(t),rhr=r(NSe," (OpenAI GPT model)"),NSe.forEach(t),thr=i(le),o7=n(le,"LI",{});var jSe=s(o7);mbe=n(jSe,"STRONG",{});var hFt=s(mbe);ahr=r(hFt,"roberta"),hFt.forEach(t),nhr=r(jSe," \u2014 "),oQ=n(jSe,"A",{href:!0});var pFt=s(oQ);shr=r(pFt,"TFRobertaForMaskedLM"),pFt.forEach(t),lhr=r(jSe," (RoBERTa model)"),jSe.forEach(t),ihr=i(le),r7=n(le,"LI",{});var DSe=s(r7);gbe=n(DSe,"STRONG",{});var uFt=s(gbe);dhr=r(uFt,"t5"),uFt.forEach(t),chr=r(DSe," \u2014 "),rQ=n(DSe,"A",{href:!0});var _Ft=s(rQ);fhr=r(_Ft,"TFT5ForConditionalGeneration"),_Ft.forEach(t),mhr=r(DSe," (T5 model)"),DSe.forEach(t),ghr=i(le),t7=n(le,"LI",{});var GSe=s(t7);hbe=n(GSe,"STRONG",{});var bFt=s(hbe);hhr=r(bFt,"tapas"),bFt.forEach(t),phr=r(GSe," \u2014 "),tQ=n(GSe,"A",{href:!0});var vFt=s(tQ);uhr=r(vFt,"TFTapasForMaskedLM"),vFt.forEach(t),_hr=r(GSe," (TAPAS model)"),GSe.forEach(t),bhr=i(le),a7=n(le,"LI",{});var OSe=s(a7);pbe=n(OSe,"STRONG",{});var FFt=s(pbe);vhr=r(FFt,"transfo-xl"),FFt.forEach(t),Fhr=r(OSe," \u2014 "),aQ=n(OSe,"A",{href:!0});var TFt=s(aQ);Thr=r(TFt,"TFTransfoXLLMHeadModel"),TFt.forEach(t),Mhr=r(OSe," (Transformer-XL model)"),OSe.forEach(t),Ehr=i(le),n7=n(le,"LI",{});var VSe=s(n7);ube=n(VSe,"STRONG",{});var MFt=s(ube);Chr=r(MFt,"vit_mae"),MFt.forEach(t),whr=r(VSe," \u2014 "),nQ=n(VSe,"A",{href:!0});var EFt=s(nQ);Ahr=r(EFt,"TFViTMAEForPreTraining"),EFt.forEach(t),yhr=r(VSe," (ViTMAE model)"),VSe.forEach(t),Lhr=i(le),s7=n(le,"LI",{});var XSe=s(s7);_be=n(XSe,"STRONG",{});var CFt=s(_be);xhr=r(CFt,"xlm"),CFt.forEach(t),$hr=r(XSe," \u2014 "),sQ=n(XSe,"A",{href:!0});var wFt=s(sQ);khr=r(wFt,"TFXLMWithLMHeadModel"),wFt.forEach(t),Shr=r(XSe," (XLM model)"),XSe.forEach(t),Rhr=i(le),l7=n(le,"LI",{});var zSe=s(l7);bbe=n(zSe,"STRONG",{});var AFt=s(bbe);Phr=r(AFt,"xlm-roberta"),AFt.forEach(t),Bhr=r(zSe," \u2014 "),lQ=n(zSe,"A",{href:!0});var yFt=s(lQ);Ihr=r(yFt,"TFXLMRobertaForMaskedLM"),yFt.forEach(t),qhr=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),Nhr=i(le),i7=n(le,"LI",{});var WSe=s(i7);vbe=n(WSe,"STRONG",{});var LFt=s(vbe);jhr=r(LFt,"xlnet"),LFt.forEach(t),Dhr=r(WSe," \u2014 "),iQ=n(WSe,"A",{href:!0});var xFt=s(iQ);Ghr=r(xFt,"TFXLNetLMHeadModel"),xFt.forEach(t),Ohr=r(WSe," (XLNet model)"),WSe.forEach(t),le.forEach(t),Vhr=i(ul),T(d7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),wNe=i(f),Qd=n(f,"H2",{class:!0});var kDe=s(Qd);c7=n(kDe,"A",{id:!0,class:!0,href:!0});var $Ft=s(c7);Fbe=n($Ft,"SPAN",{});var kFt=s(Fbe);T(d8.$$.fragment,kFt),kFt.forEach(t),$Ft.forEach(t),Xhr=i(kDe),Tbe=n(kDe,"SPAN",{});var SFt=s(Tbe);zhr=r(SFt,"TFAutoModelForCausalLM"),SFt.forEach(t),kDe.forEach(t),ANe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(c8.$$.fragment,_l),Whr=i(_l),Hd=n(_l,"P",{});var HZ=s(Hd);Qhr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=n(HZ,"A",{href:!0});var RFt=s(dQ);Hhr=r(RFt,"from_pretrained()"),RFt.forEach(t),Uhr=r(HZ," class method or the "),cQ=n(HZ,"A",{href:!0});var PFt=s(cQ);Jhr=r(PFt,"from_config()"),PFt.forEach(t),Yhr=r(HZ,` class
method.`),HZ.forEach(t),Khr=i(_l),f8=n(_l,"P",{});var SDe=s(f8);Zhr=r(SDe,"This class cannot be instantiated directly using "),Mbe=n(SDe,"CODE",{});var BFt=s(Mbe);epr=r(BFt,"__init__()"),BFt.forEach(t),opr=r(SDe," (throws an error)."),SDe.forEach(t),rpr=i(_l),xt=n(_l,"DIV",{class:!0});var vw=s(xt);T(m8.$$.fragment,vw),tpr=i(vw),Ebe=n(vw,"P",{});var IFt=s(Ebe);apr=r(IFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IFt.forEach(t),npr=i(vw),Ud=n(vw,"P",{});var UZ=s(Ud);spr=r(UZ,`Note:
Loading a model from its configuration file does `),Cbe=n(UZ,"STRONG",{});var qFt=s(Cbe);lpr=r(qFt,"not"),qFt.forEach(t),ipr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(UZ,"A",{href:!0});var NFt=s(fQ);dpr=r(NFt,"from_pretrained()"),NFt.forEach(t),cpr=r(UZ," to load the model weights."),UZ.forEach(t),fpr=i(vw),T(f7.$$.fragment,vw),vw.forEach(t),mpr=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(g8.$$.fragment,bl),gpr=i(bl),wbe=n(bl,"P",{});var jFt=s(wbe);hpr=r(jFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jFt.forEach(t),ppr=i(bl),en=n(bl,"P",{});var Fw=s(en);upr=r(Fw,"The model class to instantiate is selected based on the "),Abe=n(Fw,"CODE",{});var DFt=s(Abe);_pr=r(DFt,"model_type"),DFt.forEach(t),bpr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),ybe=n(Fw,"CODE",{});var GFt=s(ybe);vpr=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),Fpr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(Fw,"CODE",{});var OFt=s(Lbe);Tpr=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),Mpr=r(Fw,":"),Fw.forEach(t),Epr=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);m7=n(Ce,"LI",{});var QSe=s(m7);xbe=n(QSe,"STRONG",{});var VFt=s(xbe);Cpr=r(VFt,"bert"),VFt.forEach(t),wpr=r(QSe," \u2014 "),mQ=n(QSe,"A",{href:!0});var XFt=s(mQ);Apr=r(XFt,"TFBertLMHeadModel"),XFt.forEach(t),ypr=r(QSe," (BERT model)"),QSe.forEach(t),Lpr=i(Ce),g7=n(Ce,"LI",{});var HSe=s(g7);$be=n(HSe,"STRONG",{});var zFt=s($be);xpr=r(zFt,"camembert"),zFt.forEach(t),$pr=r(HSe," \u2014 "),gQ=n(HSe,"A",{href:!0});var WFt=s(gQ);kpr=r(WFt,"TFCamembertForCausalLM"),WFt.forEach(t),Spr=r(HSe," (CamemBERT model)"),HSe.forEach(t),Rpr=i(Ce),h7=n(Ce,"LI",{});var USe=s(h7);kbe=n(USe,"STRONG",{});var QFt=s(kbe);Ppr=r(QFt,"ctrl"),QFt.forEach(t),Bpr=r(USe," \u2014 "),hQ=n(USe,"A",{href:!0});var HFt=s(hQ);Ipr=r(HFt,"TFCTRLLMHeadModel"),HFt.forEach(t),qpr=r(USe," (CTRL model)"),USe.forEach(t),Npr=i(Ce),p7=n(Ce,"LI",{});var JSe=s(p7);Sbe=n(JSe,"STRONG",{});var UFt=s(Sbe);jpr=r(UFt,"gpt2"),UFt.forEach(t),Dpr=r(JSe," \u2014 "),pQ=n(JSe,"A",{href:!0});var JFt=s(pQ);Gpr=r(JFt,"TFGPT2LMHeadModel"),JFt.forEach(t),Opr=r(JSe," (OpenAI GPT-2 model)"),JSe.forEach(t),Vpr=i(Ce),u7=n(Ce,"LI",{});var YSe=s(u7);Rbe=n(YSe,"STRONG",{});var YFt=s(Rbe);Xpr=r(YFt,"gptj"),YFt.forEach(t),zpr=r(YSe," \u2014 "),uQ=n(YSe,"A",{href:!0});var KFt=s(uQ);Wpr=r(KFt,"TFGPTJForCausalLM"),KFt.forEach(t),Qpr=r(YSe," (GPT-J model)"),YSe.forEach(t),Hpr=i(Ce),_7=n(Ce,"LI",{});var KSe=s(_7);Pbe=n(KSe,"STRONG",{});var ZFt=s(Pbe);Upr=r(ZFt,"openai-gpt"),ZFt.forEach(t),Jpr=r(KSe," \u2014 "),_Q=n(KSe,"A",{href:!0});var e6t=s(_Q);Ypr=r(e6t,"TFOpenAIGPTLMHeadModel"),e6t.forEach(t),Kpr=r(KSe," (OpenAI GPT model)"),KSe.forEach(t),Zpr=i(Ce),b7=n(Ce,"LI",{});var ZSe=s(b7);Bbe=n(ZSe,"STRONG",{});var o6t=s(Bbe);eur=r(o6t,"rembert"),o6t.forEach(t),our=r(ZSe," \u2014 "),bQ=n(ZSe,"A",{href:!0});var r6t=s(bQ);rur=r(r6t,"TFRemBertForCausalLM"),r6t.forEach(t),tur=r(ZSe," (RemBERT model)"),ZSe.forEach(t),aur=i(Ce),v7=n(Ce,"LI",{});var eRe=s(v7);Ibe=n(eRe,"STRONG",{});var t6t=s(Ibe);nur=r(t6t,"roberta"),t6t.forEach(t),sur=r(eRe," \u2014 "),vQ=n(eRe,"A",{href:!0});var a6t=s(vQ);lur=r(a6t,"TFRobertaForCausalLM"),a6t.forEach(t),iur=r(eRe," (RoBERTa model)"),eRe.forEach(t),dur=i(Ce),F7=n(Ce,"LI",{});var oRe=s(F7);qbe=n(oRe,"STRONG",{});var n6t=s(qbe);cur=r(n6t,"roformer"),n6t.forEach(t),fur=r(oRe," \u2014 "),FQ=n(oRe,"A",{href:!0});var s6t=s(FQ);mur=r(s6t,"TFRoFormerForCausalLM"),s6t.forEach(t),gur=r(oRe," (RoFormer model)"),oRe.forEach(t),hur=i(Ce),T7=n(Ce,"LI",{});var rRe=s(T7);Nbe=n(rRe,"STRONG",{});var l6t=s(Nbe);pur=r(l6t,"transfo-xl"),l6t.forEach(t),uur=r(rRe," \u2014 "),TQ=n(rRe,"A",{href:!0});var i6t=s(TQ);_ur=r(i6t,"TFTransfoXLLMHeadModel"),i6t.forEach(t),bur=r(rRe," (Transformer-XL model)"),rRe.forEach(t),vur=i(Ce),M7=n(Ce,"LI",{});var tRe=s(M7);jbe=n(tRe,"STRONG",{});var d6t=s(jbe);Fur=r(d6t,"xlm"),d6t.forEach(t),Tur=r(tRe," \u2014 "),MQ=n(tRe,"A",{href:!0});var c6t=s(MQ);Mur=r(c6t,"TFXLMWithLMHeadModel"),c6t.forEach(t),Eur=r(tRe," (XLM model)"),tRe.forEach(t),Cur=i(Ce),E7=n(Ce,"LI",{});var aRe=s(E7);Dbe=n(aRe,"STRONG",{});var f6t=s(Dbe);wur=r(f6t,"xlnet"),f6t.forEach(t),Aur=r(aRe," \u2014 "),EQ=n(aRe,"A",{href:!0});var m6t=s(EQ);yur=r(m6t,"TFXLNetLMHeadModel"),m6t.forEach(t),Lur=r(aRe," (XLNet model)"),aRe.forEach(t),Ce.forEach(t),xur=i(bl),T(C7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),yNe=i(f),Jd=n(f,"H2",{class:!0});var RDe=s(Jd);w7=n(RDe,"A",{id:!0,class:!0,href:!0});var g6t=s(w7);Gbe=n(g6t,"SPAN",{});var h6t=s(Gbe);T(h8.$$.fragment,h6t),h6t.forEach(t),g6t.forEach(t),$ur=i(RDe),Obe=n(RDe,"SPAN",{});var p6t=s(Obe);kur=r(p6t,"TFAutoModelForImageClassification"),p6t.forEach(t),RDe.forEach(t),LNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(p8.$$.fragment,vl),Sur=i(vl),Yd=n(vl,"P",{});var JZ=s(Yd);Rur=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CQ=n(JZ,"A",{href:!0});var u6t=s(CQ);Pur=r(u6t,"from_pretrained()"),u6t.forEach(t),Bur=r(JZ," class method or the "),wQ=n(JZ,"A",{href:!0});var _6t=s(wQ);Iur=r(_6t,"from_config()"),_6t.forEach(t),qur=r(JZ,` class
method.`),JZ.forEach(t),Nur=i(vl),u8=n(vl,"P",{});var PDe=s(u8);jur=r(PDe,"This class cannot be instantiated directly using "),Vbe=n(PDe,"CODE",{});var b6t=s(Vbe);Dur=r(b6t,"__init__()"),b6t.forEach(t),Gur=r(PDe," (throws an error)."),PDe.forEach(t),Our=i(vl),$t=n(vl,"DIV",{class:!0});var Tw=s($t);T(_8.$$.fragment,Tw),Vur=i(Tw),Xbe=n(Tw,"P",{});var v6t=s(Xbe);Xur=r(v6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),v6t.forEach(t),zur=i(Tw),Kd=n(Tw,"P",{});var YZ=s(Kd);Wur=r(YZ,`Note:
Loading a model from its configuration file does `),zbe=n(YZ,"STRONG",{});var F6t=s(zbe);Qur=r(F6t,"not"),F6t.forEach(t),Hur=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(YZ,"A",{href:!0});var T6t=s(AQ);Uur=r(T6t,"from_pretrained()"),T6t.forEach(t),Jur=r(YZ," to load the model weights."),YZ.forEach(t),Yur=i(Tw),T(A7.$$.fragment,Tw),Tw.forEach(t),Kur=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(b8.$$.fragment,Fl),Zur=i(Fl),Wbe=n(Fl,"P",{});var M6t=s(Wbe);e_r=r(M6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),M6t.forEach(t),o_r=i(Fl),on=n(Fl,"P",{});var Mw=s(on);r_r=r(Mw,"The model class to instantiate is selected based on the "),Qbe=n(Mw,"CODE",{});var E6t=s(Qbe);t_r=r(E6t,"model_type"),E6t.forEach(t),a_r=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(Mw,"CODE",{});var C6t=s(Hbe);n_r=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),s_r=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(Mw,"CODE",{});var w6t=s(Ube);l_r=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),i_r=r(Mw,":"),Mw.forEach(t),d_r=i(Fl),rn=n(Fl,"UL",{});var Ew=s(rn);y7=n(Ew,"LI",{});var nRe=s(y7);Jbe=n(nRe,"STRONG",{});var A6t=s(Jbe);c_r=r(A6t,"convnext"),A6t.forEach(t),f_r=r(nRe," \u2014 "),yQ=n(nRe,"A",{href:!0});var y6t=s(yQ);m_r=r(y6t,"TFConvNextForImageClassification"),y6t.forEach(t),g_r=r(nRe," (ConvNext model)"),nRe.forEach(t),h_r=i(Ew),L7=n(Ew,"LI",{});var sRe=s(L7);Ybe=n(sRe,"STRONG",{});var L6t=s(Ybe);p_r=r(L6t,"data2vec-vision"),L6t.forEach(t),u_r=r(sRe," \u2014 "),LQ=n(sRe,"A",{href:!0});var x6t=s(LQ);__r=r(x6t,"TFData2VecVisionForImageClassification"),x6t.forEach(t),b_r=r(sRe," (Data2VecVision model)"),sRe.forEach(t),v_r=i(Ew),x7=n(Ew,"LI",{});var lRe=s(x7);Kbe=n(lRe,"STRONG",{});var $6t=s(Kbe);F_r=r($6t,"swin"),$6t.forEach(t),T_r=r(lRe," \u2014 "),xQ=n(lRe,"A",{href:!0});var k6t=s(xQ);M_r=r(k6t,"TFSwinForImageClassification"),k6t.forEach(t),E_r=r(lRe," (Swin model)"),lRe.forEach(t),C_r=i(Ew),$7=n(Ew,"LI",{});var iRe=s($7);Zbe=n(iRe,"STRONG",{});var S6t=s(Zbe);w_r=r(S6t,"vit"),S6t.forEach(t),A_r=r(iRe," \u2014 "),$Q=n(iRe,"A",{href:!0});var R6t=s($Q);y_r=r(R6t,"TFViTForImageClassification"),R6t.forEach(t),L_r=r(iRe," (ViT model)"),iRe.forEach(t),Ew.forEach(t),x_r=i(Fl),T(k7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),xNe=i(f),Zd=n(f,"H2",{class:!0});var BDe=s(Zd);S7=n(BDe,"A",{id:!0,class:!0,href:!0});var P6t=s(S7);e2e=n(P6t,"SPAN",{});var B6t=s(e2e);T(v8.$$.fragment,B6t),B6t.forEach(t),P6t.forEach(t),$_r=i(BDe),o2e=n(BDe,"SPAN",{});var I6t=s(o2e);k_r=r(I6t,"TFAutoModelForMaskedLM"),I6t.forEach(t),BDe.forEach(t),$Ne=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(F8.$$.fragment,Tl),S_r=i(Tl),ec=n(Tl,"P",{});var KZ=s(ec);R_r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=n(KZ,"A",{href:!0});var q6t=s(kQ);P_r=r(q6t,"from_pretrained()"),q6t.forEach(t),B_r=r(KZ," class method or the "),SQ=n(KZ,"A",{href:!0});var N6t=s(SQ);I_r=r(N6t,"from_config()"),N6t.forEach(t),q_r=r(KZ,` class
method.`),KZ.forEach(t),N_r=i(Tl),T8=n(Tl,"P",{});var IDe=s(T8);j_r=r(IDe,"This class cannot be instantiated directly using "),r2e=n(IDe,"CODE",{});var j6t=s(r2e);D_r=r(j6t,"__init__()"),j6t.forEach(t),G_r=r(IDe," (throws an error)."),IDe.forEach(t),O_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var Cw=s(kt);T(M8.$$.fragment,Cw),V_r=i(Cw),t2e=n(Cw,"P",{});var D6t=s(t2e);X_r=r(D6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D6t.forEach(t),z_r=i(Cw),oc=n(Cw,"P",{});var ZZ=s(oc);W_r=r(ZZ,`Note:
Loading a model from its configuration file does `),a2e=n(ZZ,"STRONG",{});var G6t=s(a2e);Q_r=r(G6t,"not"),G6t.forEach(t),H_r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(ZZ,"A",{href:!0});var O6t=s(RQ);U_r=r(O6t,"from_pretrained()"),O6t.forEach(t),J_r=r(ZZ," to load the model weights."),ZZ.forEach(t),Y_r=i(Cw),T(R7.$$.fragment,Cw),Cw.forEach(t),K_r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(E8.$$.fragment,Ml),Z_r=i(Ml),n2e=n(Ml,"P",{});var V6t=s(n2e);e0r=r(V6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V6t.forEach(t),o0r=i(Ml),tn=n(Ml,"P",{});var ww=s(tn);r0r=r(ww,"The model class to instantiate is selected based on the "),s2e=n(ww,"CODE",{});var X6t=s(s2e);t0r=r(X6t,"model_type"),X6t.forEach(t),a0r=r(ww,` property of the config object (either
passed as an argument or loaded from `),l2e=n(ww,"CODE",{});var z6t=s(l2e);n0r=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),s0r=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(ww,"CODE",{});var W6t=s(i2e);l0r=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),i0r=r(ww,":"),ww.forEach(t),d0r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);P7=n(fe,"LI",{});var dRe=s(P7);d2e=n(dRe,"STRONG",{});var Q6t=s(d2e);c0r=r(Q6t,"albert"),Q6t.forEach(t),f0r=r(dRe," \u2014 "),PQ=n(dRe,"A",{href:!0});var H6t=s(PQ);m0r=r(H6t,"TFAlbertForMaskedLM"),H6t.forEach(t),g0r=r(dRe," (ALBERT model)"),dRe.forEach(t),h0r=i(fe),B7=n(fe,"LI",{});var cRe=s(B7);c2e=n(cRe,"STRONG",{});var U6t=s(c2e);p0r=r(U6t,"bert"),U6t.forEach(t),u0r=r(cRe," \u2014 "),BQ=n(cRe,"A",{href:!0});var J6t=s(BQ);_0r=r(J6t,"TFBertForMaskedLM"),J6t.forEach(t),b0r=r(cRe," (BERT model)"),cRe.forEach(t),v0r=i(fe),I7=n(fe,"LI",{});var fRe=s(I7);f2e=n(fRe,"STRONG",{});var Y6t=s(f2e);F0r=r(Y6t,"camembert"),Y6t.forEach(t),T0r=r(fRe," \u2014 "),IQ=n(fRe,"A",{href:!0});var K6t=s(IQ);M0r=r(K6t,"TFCamembertForMaskedLM"),K6t.forEach(t),E0r=r(fRe," (CamemBERT model)"),fRe.forEach(t),C0r=i(fe),q7=n(fe,"LI",{});var mRe=s(q7);m2e=n(mRe,"STRONG",{});var Z6t=s(m2e);w0r=r(Z6t,"convbert"),Z6t.forEach(t),A0r=r(mRe," \u2014 "),qQ=n(mRe,"A",{href:!0});var eTt=s(qQ);y0r=r(eTt,"TFConvBertForMaskedLM"),eTt.forEach(t),L0r=r(mRe," (ConvBERT model)"),mRe.forEach(t),x0r=i(fe),N7=n(fe,"LI",{});var gRe=s(N7);g2e=n(gRe,"STRONG",{});var oTt=s(g2e);$0r=r(oTt,"deberta"),oTt.forEach(t),k0r=r(gRe," \u2014 "),NQ=n(gRe,"A",{href:!0});var rTt=s(NQ);S0r=r(rTt,"TFDebertaForMaskedLM"),rTt.forEach(t),R0r=r(gRe," (DeBERTa model)"),gRe.forEach(t),P0r=i(fe),j7=n(fe,"LI",{});var hRe=s(j7);h2e=n(hRe,"STRONG",{});var tTt=s(h2e);B0r=r(tTt,"deberta-v2"),tTt.forEach(t),I0r=r(hRe," \u2014 "),jQ=n(hRe,"A",{href:!0});var aTt=s(jQ);q0r=r(aTt,"TFDebertaV2ForMaskedLM"),aTt.forEach(t),N0r=r(hRe," (DeBERTa-v2 model)"),hRe.forEach(t),j0r=i(fe),D7=n(fe,"LI",{});var pRe=s(D7);p2e=n(pRe,"STRONG",{});var nTt=s(p2e);D0r=r(nTt,"distilbert"),nTt.forEach(t),G0r=r(pRe," \u2014 "),DQ=n(pRe,"A",{href:!0});var sTt=s(DQ);O0r=r(sTt,"TFDistilBertForMaskedLM"),sTt.forEach(t),V0r=r(pRe," (DistilBERT model)"),pRe.forEach(t),X0r=i(fe),G7=n(fe,"LI",{});var uRe=s(G7);u2e=n(uRe,"STRONG",{});var lTt=s(u2e);z0r=r(lTt,"electra"),lTt.forEach(t),W0r=r(uRe," \u2014 "),GQ=n(uRe,"A",{href:!0});var iTt=s(GQ);Q0r=r(iTt,"TFElectraForMaskedLM"),iTt.forEach(t),H0r=r(uRe," (ELECTRA model)"),uRe.forEach(t),U0r=i(fe),O7=n(fe,"LI",{});var _Re=s(O7);_2e=n(_Re,"STRONG",{});var dTt=s(_2e);J0r=r(dTt,"flaubert"),dTt.forEach(t),Y0r=r(_Re," \u2014 "),OQ=n(_Re,"A",{href:!0});var cTt=s(OQ);K0r=r(cTt,"TFFlaubertWithLMHeadModel"),cTt.forEach(t),Z0r=r(_Re," (FlauBERT model)"),_Re.forEach(t),e1r=i(fe),V7=n(fe,"LI",{});var bRe=s(V7);b2e=n(bRe,"STRONG",{});var fTt=s(b2e);o1r=r(fTt,"funnel"),fTt.forEach(t),r1r=r(bRe," \u2014 "),VQ=n(bRe,"A",{href:!0});var mTt=s(VQ);t1r=r(mTt,"TFFunnelForMaskedLM"),mTt.forEach(t),a1r=r(bRe," (Funnel Transformer model)"),bRe.forEach(t),n1r=i(fe),X7=n(fe,"LI",{});var vRe=s(X7);v2e=n(vRe,"STRONG",{});var gTt=s(v2e);s1r=r(gTt,"layoutlm"),gTt.forEach(t),l1r=r(vRe," \u2014 "),XQ=n(vRe,"A",{href:!0});var hTt=s(XQ);i1r=r(hTt,"TFLayoutLMForMaskedLM"),hTt.forEach(t),d1r=r(vRe," (LayoutLM model)"),vRe.forEach(t),c1r=i(fe),z7=n(fe,"LI",{});var FRe=s(z7);F2e=n(FRe,"STRONG",{});var pTt=s(F2e);f1r=r(pTt,"longformer"),pTt.forEach(t),m1r=r(FRe," \u2014 "),zQ=n(FRe,"A",{href:!0});var uTt=s(zQ);g1r=r(uTt,"TFLongformerForMaskedLM"),uTt.forEach(t),h1r=r(FRe," (Longformer model)"),FRe.forEach(t),p1r=i(fe),W7=n(fe,"LI",{});var TRe=s(W7);T2e=n(TRe,"STRONG",{});var _Tt=s(T2e);u1r=r(_Tt,"mobilebert"),_Tt.forEach(t),_1r=r(TRe," \u2014 "),WQ=n(TRe,"A",{href:!0});var bTt=s(WQ);b1r=r(bTt,"TFMobileBertForMaskedLM"),bTt.forEach(t),v1r=r(TRe," (MobileBERT model)"),TRe.forEach(t),F1r=i(fe),Q7=n(fe,"LI",{});var MRe=s(Q7);M2e=n(MRe,"STRONG",{});var vTt=s(M2e);T1r=r(vTt,"mpnet"),vTt.forEach(t),M1r=r(MRe," \u2014 "),QQ=n(MRe,"A",{href:!0});var FTt=s(QQ);E1r=r(FTt,"TFMPNetForMaskedLM"),FTt.forEach(t),C1r=r(MRe," (MPNet model)"),MRe.forEach(t),w1r=i(fe),H7=n(fe,"LI",{});var ERe=s(H7);E2e=n(ERe,"STRONG",{});var TTt=s(E2e);A1r=r(TTt,"rembert"),TTt.forEach(t),y1r=r(ERe," \u2014 "),HQ=n(ERe,"A",{href:!0});var MTt=s(HQ);L1r=r(MTt,"TFRemBertForMaskedLM"),MTt.forEach(t),x1r=r(ERe," (RemBERT model)"),ERe.forEach(t),$1r=i(fe),U7=n(fe,"LI",{});var CRe=s(U7);C2e=n(CRe,"STRONG",{});var ETt=s(C2e);k1r=r(ETt,"roberta"),ETt.forEach(t),S1r=r(CRe," \u2014 "),UQ=n(CRe,"A",{href:!0});var CTt=s(UQ);R1r=r(CTt,"TFRobertaForMaskedLM"),CTt.forEach(t),P1r=r(CRe," (RoBERTa model)"),CRe.forEach(t),B1r=i(fe),J7=n(fe,"LI",{});var wRe=s(J7);w2e=n(wRe,"STRONG",{});var wTt=s(w2e);I1r=r(wTt,"roformer"),wTt.forEach(t),q1r=r(wRe," \u2014 "),JQ=n(wRe,"A",{href:!0});var ATt=s(JQ);N1r=r(ATt,"TFRoFormerForMaskedLM"),ATt.forEach(t),j1r=r(wRe," (RoFormer model)"),wRe.forEach(t),D1r=i(fe),Y7=n(fe,"LI",{});var ARe=s(Y7);A2e=n(ARe,"STRONG",{});var yTt=s(A2e);G1r=r(yTt,"tapas"),yTt.forEach(t),O1r=r(ARe," \u2014 "),YQ=n(ARe,"A",{href:!0});var LTt=s(YQ);V1r=r(LTt,"TFTapasForMaskedLM"),LTt.forEach(t),X1r=r(ARe," (TAPAS model)"),ARe.forEach(t),z1r=i(fe),K7=n(fe,"LI",{});var yRe=s(K7);y2e=n(yRe,"STRONG",{});var xTt=s(y2e);W1r=r(xTt,"xlm"),xTt.forEach(t),Q1r=r(yRe," \u2014 "),KQ=n(yRe,"A",{href:!0});var $Tt=s(KQ);H1r=r($Tt,"TFXLMWithLMHeadModel"),$Tt.forEach(t),U1r=r(yRe," (XLM model)"),yRe.forEach(t),J1r=i(fe),Z7=n(fe,"LI",{});var LRe=s(Z7);L2e=n(LRe,"STRONG",{});var kTt=s(L2e);Y1r=r(kTt,"xlm-roberta"),kTt.forEach(t),K1r=r(LRe," \u2014 "),ZQ=n(LRe,"A",{href:!0});var STt=s(ZQ);Z1r=r(STt,"TFXLMRobertaForMaskedLM"),STt.forEach(t),ebr=r(LRe," (XLM-RoBERTa model)"),LRe.forEach(t),fe.forEach(t),obr=i(Ml),T(eM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),kNe=i(f),rc=n(f,"H2",{class:!0});var qDe=s(rc);oM=n(qDe,"A",{id:!0,class:!0,href:!0});var RTt=s(oM);x2e=n(RTt,"SPAN",{});var PTt=s(x2e);T(C8.$$.fragment,PTt),PTt.forEach(t),RTt.forEach(t),rbr=i(qDe),$2e=n(qDe,"SPAN",{});var BTt=s($2e);tbr=r(BTt,"TFAutoModelForSeq2SeqLM"),BTt.forEach(t),qDe.forEach(t),SNe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(w8.$$.fragment,El),abr=i(El),tc=n(El,"P",{});var eee=s(tc);nbr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=n(eee,"A",{href:!0});var ITt=s(eH);sbr=r(ITt,"from_pretrained()"),ITt.forEach(t),lbr=r(eee," class method or the "),oH=n(eee,"A",{href:!0});var qTt=s(oH);ibr=r(qTt,"from_config()"),qTt.forEach(t),dbr=r(eee,` class
method.`),eee.forEach(t),cbr=i(El),A8=n(El,"P",{});var NDe=s(A8);fbr=r(NDe,"This class cannot be instantiated directly using "),k2e=n(NDe,"CODE",{});var NTt=s(k2e);mbr=r(NTt,"__init__()"),NTt.forEach(t),gbr=r(NDe," (throws an error)."),NDe.forEach(t),hbr=i(El),St=n(El,"DIV",{class:!0});var Aw=s(St);T(y8.$$.fragment,Aw),pbr=i(Aw),S2e=n(Aw,"P",{});var jTt=s(S2e);ubr=r(jTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jTt.forEach(t),_br=i(Aw),ac=n(Aw,"P",{});var oee=s(ac);bbr=r(oee,`Note:
Loading a model from its configuration file does `),R2e=n(oee,"STRONG",{});var DTt=s(R2e);vbr=r(DTt,"not"),DTt.forEach(t),Fbr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(oee,"A",{href:!0});var GTt=s(rH);Tbr=r(GTt,"from_pretrained()"),GTt.forEach(t),Mbr=r(oee," to load the model weights."),oee.forEach(t),Ebr=i(Aw),T(rM.$$.fragment,Aw),Aw.forEach(t),Cbr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(L8.$$.fragment,Cl),wbr=i(Cl),P2e=n(Cl,"P",{});var OTt=s(P2e);Abr=r(OTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OTt.forEach(t),ybr=i(Cl),an=n(Cl,"P",{});var yw=s(an);Lbr=r(yw,"The model class to instantiate is selected based on the "),B2e=n(yw,"CODE",{});var VTt=s(B2e);xbr=r(VTt,"model_type"),VTt.forEach(t),$br=r(yw,` property of the config object (either
passed as an argument or loaded from `),I2e=n(yw,"CODE",{});var XTt=s(I2e);kbr=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),Sbr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(yw,"CODE",{});var zTt=s(q2e);Rbr=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),Pbr=r(yw,":"),yw.forEach(t),Bbr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);tM=n(Be,"LI",{});var xRe=s(tM);N2e=n(xRe,"STRONG",{});var WTt=s(N2e);Ibr=r(WTt,"bart"),WTt.forEach(t),qbr=r(xRe," \u2014 "),tH=n(xRe,"A",{href:!0});var QTt=s(tH);Nbr=r(QTt,"TFBartForConditionalGeneration"),QTt.forEach(t),jbr=r(xRe," (BART model)"),xRe.forEach(t),Dbr=i(Be),aM=n(Be,"LI",{});var $Re=s(aM);j2e=n($Re,"STRONG",{});var HTt=s(j2e);Gbr=r(HTt,"blenderbot"),HTt.forEach(t),Obr=r($Re," \u2014 "),aH=n($Re,"A",{href:!0});var UTt=s(aH);Vbr=r(UTt,"TFBlenderbotForConditionalGeneration"),UTt.forEach(t),Xbr=r($Re," (Blenderbot model)"),$Re.forEach(t),zbr=i(Be),nM=n(Be,"LI",{});var kRe=s(nM);D2e=n(kRe,"STRONG",{});var JTt=s(D2e);Wbr=r(JTt,"blenderbot-small"),JTt.forEach(t),Qbr=r(kRe," \u2014 "),nH=n(kRe,"A",{href:!0});var YTt=s(nH);Hbr=r(YTt,"TFBlenderbotSmallForConditionalGeneration"),YTt.forEach(t),Ubr=r(kRe," (BlenderbotSmall model)"),kRe.forEach(t),Jbr=i(Be),sM=n(Be,"LI",{});var SRe=s(sM);G2e=n(SRe,"STRONG",{});var KTt=s(G2e);Ybr=r(KTt,"encoder-decoder"),KTt.forEach(t),Kbr=r(SRe," \u2014 "),sH=n(SRe,"A",{href:!0});var ZTt=s(sH);Zbr=r(ZTt,"TFEncoderDecoderModel"),ZTt.forEach(t),e2r=r(SRe," (Encoder decoder model)"),SRe.forEach(t),o2r=i(Be),lM=n(Be,"LI",{});var RRe=s(lM);O2e=n(RRe,"STRONG",{});var e7t=s(O2e);r2r=r(e7t,"led"),e7t.forEach(t),t2r=r(RRe," \u2014 "),lH=n(RRe,"A",{href:!0});var o7t=s(lH);a2r=r(o7t,"TFLEDForConditionalGeneration"),o7t.forEach(t),n2r=r(RRe," (LED model)"),RRe.forEach(t),s2r=i(Be),iM=n(Be,"LI",{});var PRe=s(iM);V2e=n(PRe,"STRONG",{});var r7t=s(V2e);l2r=r(r7t,"marian"),r7t.forEach(t),i2r=r(PRe," \u2014 "),iH=n(PRe,"A",{href:!0});var t7t=s(iH);d2r=r(t7t,"TFMarianMTModel"),t7t.forEach(t),c2r=r(PRe," (Marian model)"),PRe.forEach(t),f2r=i(Be),dM=n(Be,"LI",{});var BRe=s(dM);X2e=n(BRe,"STRONG",{});var a7t=s(X2e);m2r=r(a7t,"mbart"),a7t.forEach(t),g2r=r(BRe," \u2014 "),dH=n(BRe,"A",{href:!0});var n7t=s(dH);h2r=r(n7t,"TFMBartForConditionalGeneration"),n7t.forEach(t),p2r=r(BRe," (mBART model)"),BRe.forEach(t),u2r=i(Be),cM=n(Be,"LI",{});var IRe=s(cM);z2e=n(IRe,"STRONG",{});var s7t=s(z2e);_2r=r(s7t,"mt5"),s7t.forEach(t),b2r=r(IRe," \u2014 "),cH=n(IRe,"A",{href:!0});var l7t=s(cH);v2r=r(l7t,"TFMT5ForConditionalGeneration"),l7t.forEach(t),F2r=r(IRe," (mT5 model)"),IRe.forEach(t),T2r=i(Be),fM=n(Be,"LI",{});var qRe=s(fM);W2e=n(qRe,"STRONG",{});var i7t=s(W2e);M2r=r(i7t,"pegasus"),i7t.forEach(t),E2r=r(qRe," \u2014 "),fH=n(qRe,"A",{href:!0});var d7t=s(fH);C2r=r(d7t,"TFPegasusForConditionalGeneration"),d7t.forEach(t),w2r=r(qRe," (Pegasus model)"),qRe.forEach(t),A2r=i(Be),mM=n(Be,"LI",{});var NRe=s(mM);Q2e=n(NRe,"STRONG",{});var c7t=s(Q2e);y2r=r(c7t,"t5"),c7t.forEach(t),L2r=r(NRe," \u2014 "),mH=n(NRe,"A",{href:!0});var f7t=s(mH);x2r=r(f7t,"TFT5ForConditionalGeneration"),f7t.forEach(t),$2r=r(NRe," (T5 model)"),NRe.forEach(t),Be.forEach(t),k2r=i(Cl),T(gM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),RNe=i(f),nc=n(f,"H2",{class:!0});var jDe=s(nc);hM=n(jDe,"A",{id:!0,class:!0,href:!0});var m7t=s(hM);H2e=n(m7t,"SPAN",{});var g7t=s(H2e);T(x8.$$.fragment,g7t),g7t.forEach(t),m7t.forEach(t),S2r=i(jDe),U2e=n(jDe,"SPAN",{});var h7t=s(U2e);R2r=r(h7t,"TFAutoModelForSequenceClassification"),h7t.forEach(t),jDe.forEach(t),PNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T($8.$$.fragment,wl),P2r=i(wl),sc=n(wl,"P",{});var ree=s(sc);B2r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gH=n(ree,"A",{href:!0});var p7t=s(gH);I2r=r(p7t,"from_pretrained()"),p7t.forEach(t),q2r=r(ree," class method or the "),hH=n(ree,"A",{href:!0});var u7t=s(hH);N2r=r(u7t,"from_config()"),u7t.forEach(t),j2r=r(ree,` class
method.`),ree.forEach(t),D2r=i(wl),k8=n(wl,"P",{});var DDe=s(k8);G2r=r(DDe,"This class cannot be instantiated directly using "),J2e=n(DDe,"CODE",{});var _7t=s(J2e);O2r=r(_7t,"__init__()"),_7t.forEach(t),V2r=r(DDe," (throws an error)."),DDe.forEach(t),X2r=i(wl),Rt=n(wl,"DIV",{class:!0});var Lw=s(Rt);T(S8.$$.fragment,Lw),z2r=i(Lw),Y2e=n(Lw,"P",{});var b7t=s(Y2e);W2r=r(b7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b7t.forEach(t),Q2r=i(Lw),lc=n(Lw,"P",{});var tee=s(lc);H2r=r(tee,`Note:
Loading a model from its configuration file does `),K2e=n(tee,"STRONG",{});var v7t=s(K2e);U2r=r(v7t,"not"),v7t.forEach(t),J2r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(tee,"A",{href:!0});var F7t=s(pH);Y2r=r(F7t,"from_pretrained()"),F7t.forEach(t),K2r=r(tee," to load the model weights."),tee.forEach(t),Z2r=i(Lw),T(pM.$$.fragment,Lw),Lw.forEach(t),evr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(R8.$$.fragment,Al),ovr=i(Al),Z2e=n(Al,"P",{});var T7t=s(Z2e);rvr=r(T7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),T7t.forEach(t),tvr=i(Al),nn=n(Al,"P",{});var xw=s(nn);avr=r(xw,"The model class to instantiate is selected based on the "),eve=n(xw,"CODE",{});var M7t=s(eve);nvr=r(M7t,"model_type"),M7t.forEach(t),svr=r(xw,` property of the config object (either
passed as an argument or loaded from `),ove=n(xw,"CODE",{});var E7t=s(ove);lvr=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),ivr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(xw,"CODE",{});var C7t=s(rve);dvr=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),cvr=r(xw,":"),xw.forEach(t),fvr=i(Al),ee=n(Al,"UL",{});var ae=s(ee);uM=n(ae,"LI",{});var jRe=s(uM);tve=n(jRe,"STRONG",{});var w7t=s(tve);mvr=r(w7t,"albert"),w7t.forEach(t),gvr=r(jRe," \u2014 "),uH=n(jRe,"A",{href:!0});var A7t=s(uH);hvr=r(A7t,"TFAlbertForSequenceClassification"),A7t.forEach(t),pvr=r(jRe," (ALBERT model)"),jRe.forEach(t),uvr=i(ae),_M=n(ae,"LI",{});var DRe=s(_M);ave=n(DRe,"STRONG",{});var y7t=s(ave);_vr=r(y7t,"bert"),y7t.forEach(t),bvr=r(DRe," \u2014 "),_H=n(DRe,"A",{href:!0});var L7t=s(_H);vvr=r(L7t,"TFBertForSequenceClassification"),L7t.forEach(t),Fvr=r(DRe," (BERT model)"),DRe.forEach(t),Tvr=i(ae),bM=n(ae,"LI",{});var GRe=s(bM);nve=n(GRe,"STRONG",{});var x7t=s(nve);Mvr=r(x7t,"camembert"),x7t.forEach(t),Evr=r(GRe," \u2014 "),bH=n(GRe,"A",{href:!0});var $7t=s(bH);Cvr=r($7t,"TFCamembertForSequenceClassification"),$7t.forEach(t),wvr=r(GRe," (CamemBERT model)"),GRe.forEach(t),Avr=i(ae),vM=n(ae,"LI",{});var ORe=s(vM);sve=n(ORe,"STRONG",{});var k7t=s(sve);yvr=r(k7t,"convbert"),k7t.forEach(t),Lvr=r(ORe," \u2014 "),vH=n(ORe,"A",{href:!0});var S7t=s(vH);xvr=r(S7t,"TFConvBertForSequenceClassification"),S7t.forEach(t),$vr=r(ORe," (ConvBERT model)"),ORe.forEach(t),kvr=i(ae),FM=n(ae,"LI",{});var VRe=s(FM);lve=n(VRe,"STRONG",{});var R7t=s(lve);Svr=r(R7t,"ctrl"),R7t.forEach(t),Rvr=r(VRe," \u2014 "),FH=n(VRe,"A",{href:!0});var P7t=s(FH);Pvr=r(P7t,"TFCTRLForSequenceClassification"),P7t.forEach(t),Bvr=r(VRe," (CTRL model)"),VRe.forEach(t),Ivr=i(ae),TM=n(ae,"LI",{});var XRe=s(TM);ive=n(XRe,"STRONG",{});var B7t=s(ive);qvr=r(B7t,"deberta"),B7t.forEach(t),Nvr=r(XRe," \u2014 "),TH=n(XRe,"A",{href:!0});var I7t=s(TH);jvr=r(I7t,"TFDebertaForSequenceClassification"),I7t.forEach(t),Dvr=r(XRe," (DeBERTa model)"),XRe.forEach(t),Gvr=i(ae),MM=n(ae,"LI",{});var zRe=s(MM);dve=n(zRe,"STRONG",{});var q7t=s(dve);Ovr=r(q7t,"deberta-v2"),q7t.forEach(t),Vvr=r(zRe," \u2014 "),MH=n(zRe,"A",{href:!0});var N7t=s(MH);Xvr=r(N7t,"TFDebertaV2ForSequenceClassification"),N7t.forEach(t),zvr=r(zRe," (DeBERTa-v2 model)"),zRe.forEach(t),Wvr=i(ae),EM=n(ae,"LI",{});var WRe=s(EM);cve=n(WRe,"STRONG",{});var j7t=s(cve);Qvr=r(j7t,"distilbert"),j7t.forEach(t),Hvr=r(WRe," \u2014 "),EH=n(WRe,"A",{href:!0});var D7t=s(EH);Uvr=r(D7t,"TFDistilBertForSequenceClassification"),D7t.forEach(t),Jvr=r(WRe," (DistilBERT model)"),WRe.forEach(t),Yvr=i(ae),CM=n(ae,"LI",{});var QRe=s(CM);fve=n(QRe,"STRONG",{});var G7t=s(fve);Kvr=r(G7t,"electra"),G7t.forEach(t),Zvr=r(QRe," \u2014 "),CH=n(QRe,"A",{href:!0});var O7t=s(CH);eFr=r(O7t,"TFElectraForSequenceClassification"),O7t.forEach(t),oFr=r(QRe," (ELECTRA model)"),QRe.forEach(t),rFr=i(ae),wM=n(ae,"LI",{});var HRe=s(wM);mve=n(HRe,"STRONG",{});var V7t=s(mve);tFr=r(V7t,"flaubert"),V7t.forEach(t),aFr=r(HRe," \u2014 "),wH=n(HRe,"A",{href:!0});var X7t=s(wH);nFr=r(X7t,"TFFlaubertForSequenceClassification"),X7t.forEach(t),sFr=r(HRe," (FlauBERT model)"),HRe.forEach(t),lFr=i(ae),AM=n(ae,"LI",{});var URe=s(AM);gve=n(URe,"STRONG",{});var z7t=s(gve);iFr=r(z7t,"funnel"),z7t.forEach(t),dFr=r(URe," \u2014 "),AH=n(URe,"A",{href:!0});var W7t=s(AH);cFr=r(W7t,"TFFunnelForSequenceClassification"),W7t.forEach(t),fFr=r(URe," (Funnel Transformer model)"),URe.forEach(t),mFr=i(ae),yM=n(ae,"LI",{});var JRe=s(yM);hve=n(JRe,"STRONG",{});var Q7t=s(hve);gFr=r(Q7t,"gpt2"),Q7t.forEach(t),hFr=r(JRe," \u2014 "),yH=n(JRe,"A",{href:!0});var H7t=s(yH);pFr=r(H7t,"TFGPT2ForSequenceClassification"),H7t.forEach(t),uFr=r(JRe," (OpenAI GPT-2 model)"),JRe.forEach(t),_Fr=i(ae),LM=n(ae,"LI",{});var YRe=s(LM);pve=n(YRe,"STRONG",{});var U7t=s(pve);bFr=r(U7t,"gptj"),U7t.forEach(t),vFr=r(YRe," \u2014 "),LH=n(YRe,"A",{href:!0});var J7t=s(LH);FFr=r(J7t,"TFGPTJForSequenceClassification"),J7t.forEach(t),TFr=r(YRe," (GPT-J model)"),YRe.forEach(t),MFr=i(ae),xM=n(ae,"LI",{});var KRe=s(xM);uve=n(KRe,"STRONG",{});var Y7t=s(uve);EFr=r(Y7t,"layoutlm"),Y7t.forEach(t),CFr=r(KRe," \u2014 "),xH=n(KRe,"A",{href:!0});var K7t=s(xH);wFr=r(K7t,"TFLayoutLMForSequenceClassification"),K7t.forEach(t),AFr=r(KRe," (LayoutLM model)"),KRe.forEach(t),yFr=i(ae),$M=n(ae,"LI",{});var ZRe=s($M);_ve=n(ZRe,"STRONG",{});var Z7t=s(_ve);LFr=r(Z7t,"longformer"),Z7t.forEach(t),xFr=r(ZRe," \u2014 "),$H=n(ZRe,"A",{href:!0});var eMt=s($H);$Fr=r(eMt,"TFLongformerForSequenceClassification"),eMt.forEach(t),kFr=r(ZRe," (Longformer model)"),ZRe.forEach(t),SFr=i(ae),kM=n(ae,"LI",{});var ePe=s(kM);bve=n(ePe,"STRONG",{});var oMt=s(bve);RFr=r(oMt,"mobilebert"),oMt.forEach(t),PFr=r(ePe," \u2014 "),kH=n(ePe,"A",{href:!0});var rMt=s(kH);BFr=r(rMt,"TFMobileBertForSequenceClassification"),rMt.forEach(t),IFr=r(ePe," (MobileBERT model)"),ePe.forEach(t),qFr=i(ae),SM=n(ae,"LI",{});var oPe=s(SM);vve=n(oPe,"STRONG",{});var tMt=s(vve);NFr=r(tMt,"mpnet"),tMt.forEach(t),jFr=r(oPe," \u2014 "),SH=n(oPe,"A",{href:!0});var aMt=s(SH);DFr=r(aMt,"TFMPNetForSequenceClassification"),aMt.forEach(t),GFr=r(oPe," (MPNet model)"),oPe.forEach(t),OFr=i(ae),RM=n(ae,"LI",{});var rPe=s(RM);Fve=n(rPe,"STRONG",{});var nMt=s(Fve);VFr=r(nMt,"openai-gpt"),nMt.forEach(t),XFr=r(rPe," \u2014 "),RH=n(rPe,"A",{href:!0});var sMt=s(RH);zFr=r(sMt,"TFOpenAIGPTForSequenceClassification"),sMt.forEach(t),WFr=r(rPe," (OpenAI GPT model)"),rPe.forEach(t),QFr=i(ae),PM=n(ae,"LI",{});var tPe=s(PM);Tve=n(tPe,"STRONG",{});var lMt=s(Tve);HFr=r(lMt,"rembert"),lMt.forEach(t),UFr=r(tPe," \u2014 "),PH=n(tPe,"A",{href:!0});var iMt=s(PH);JFr=r(iMt,"TFRemBertForSequenceClassification"),iMt.forEach(t),YFr=r(tPe," (RemBERT model)"),tPe.forEach(t),KFr=i(ae),BM=n(ae,"LI",{});var aPe=s(BM);Mve=n(aPe,"STRONG",{});var dMt=s(Mve);ZFr=r(dMt,"roberta"),dMt.forEach(t),e6r=r(aPe," \u2014 "),BH=n(aPe,"A",{href:!0});var cMt=s(BH);o6r=r(cMt,"TFRobertaForSequenceClassification"),cMt.forEach(t),r6r=r(aPe," (RoBERTa model)"),aPe.forEach(t),t6r=i(ae),IM=n(ae,"LI",{});var nPe=s(IM);Eve=n(nPe,"STRONG",{});var fMt=s(Eve);a6r=r(fMt,"roformer"),fMt.forEach(t),n6r=r(nPe," \u2014 "),IH=n(nPe,"A",{href:!0});var mMt=s(IH);s6r=r(mMt,"TFRoFormerForSequenceClassification"),mMt.forEach(t),l6r=r(nPe," (RoFormer model)"),nPe.forEach(t),i6r=i(ae),qM=n(ae,"LI",{});var sPe=s(qM);Cve=n(sPe,"STRONG",{});var gMt=s(Cve);d6r=r(gMt,"tapas"),gMt.forEach(t),c6r=r(sPe," \u2014 "),qH=n(sPe,"A",{href:!0});var hMt=s(qH);f6r=r(hMt,"TFTapasForSequenceClassification"),hMt.forEach(t),m6r=r(sPe," (TAPAS model)"),sPe.forEach(t),g6r=i(ae),NM=n(ae,"LI",{});var lPe=s(NM);wve=n(lPe,"STRONG",{});var pMt=s(wve);h6r=r(pMt,"transfo-xl"),pMt.forEach(t),p6r=r(lPe," \u2014 "),NH=n(lPe,"A",{href:!0});var uMt=s(NH);u6r=r(uMt,"TFTransfoXLForSequenceClassification"),uMt.forEach(t),_6r=r(lPe," (Transformer-XL model)"),lPe.forEach(t),b6r=i(ae),jM=n(ae,"LI",{});var iPe=s(jM);Ave=n(iPe,"STRONG",{});var _Mt=s(Ave);v6r=r(_Mt,"xlm"),_Mt.forEach(t),F6r=r(iPe," \u2014 "),jH=n(iPe,"A",{href:!0});var bMt=s(jH);T6r=r(bMt,"TFXLMForSequenceClassification"),bMt.forEach(t),M6r=r(iPe," (XLM model)"),iPe.forEach(t),E6r=i(ae),DM=n(ae,"LI",{});var dPe=s(DM);yve=n(dPe,"STRONG",{});var vMt=s(yve);C6r=r(vMt,"xlm-roberta"),vMt.forEach(t),w6r=r(dPe," \u2014 "),DH=n(dPe,"A",{href:!0});var FMt=s(DH);A6r=r(FMt,"TFXLMRobertaForSequenceClassification"),FMt.forEach(t),y6r=r(dPe," (XLM-RoBERTa model)"),dPe.forEach(t),L6r=i(ae),GM=n(ae,"LI",{});var cPe=s(GM);Lve=n(cPe,"STRONG",{});var TMt=s(Lve);x6r=r(TMt,"xlnet"),TMt.forEach(t),$6r=r(cPe," \u2014 "),GH=n(cPe,"A",{href:!0});var MMt=s(GH);k6r=r(MMt,"TFXLNetForSequenceClassification"),MMt.forEach(t),S6r=r(cPe," (XLNet model)"),cPe.forEach(t),ae.forEach(t),R6r=i(Al),T(OM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),BNe=i(f),ic=n(f,"H2",{class:!0});var GDe=s(ic);VM=n(GDe,"A",{id:!0,class:!0,href:!0});var EMt=s(VM);xve=n(EMt,"SPAN",{});var CMt=s(xve);T(P8.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),P6r=i(GDe),$ve=n(GDe,"SPAN",{});var wMt=s($ve);B6r=r(wMt,"TFAutoModelForMultipleChoice"),wMt.forEach(t),GDe.forEach(t),INe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(B8.$$.fragment,yl),I6r=i(yl),dc=n(yl,"P",{});var aee=s(dc);q6r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=n(aee,"A",{href:!0});var AMt=s(OH);N6r=r(AMt,"from_pretrained()"),AMt.forEach(t),j6r=r(aee," class method or the "),VH=n(aee,"A",{href:!0});var yMt=s(VH);D6r=r(yMt,"from_config()"),yMt.forEach(t),G6r=r(aee,` class
method.`),aee.forEach(t),O6r=i(yl),I8=n(yl,"P",{});var ODe=s(I8);V6r=r(ODe,"This class cannot be instantiated directly using "),kve=n(ODe,"CODE",{});var LMt=s(kve);X6r=r(LMt,"__init__()"),LMt.forEach(t),z6r=r(ODe," (throws an error)."),ODe.forEach(t),W6r=i(yl),Pt=n(yl,"DIV",{class:!0});var $w=s(Pt);T(q8.$$.fragment,$w),Q6r=i($w),Sve=n($w,"P",{});var xMt=s(Sve);H6r=r(xMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xMt.forEach(t),U6r=i($w),cc=n($w,"P",{});var nee=s(cc);J6r=r(nee,`Note:
Loading a model from its configuration file does `),Rve=n(nee,"STRONG",{});var $Mt=s(Rve);Y6r=r($Mt,"not"),$Mt.forEach(t),K6r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(nee,"A",{href:!0});var kMt=s(XH);Z6r=r(kMt,"from_pretrained()"),kMt.forEach(t),eTr=r(nee," to load the model weights."),nee.forEach(t),oTr=i($w),T(XM.$$.fragment,$w),$w.forEach(t),rTr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(N8.$$.fragment,Ll),tTr=i(Ll),Pve=n(Ll,"P",{});var SMt=s(Pve);aTr=r(SMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SMt.forEach(t),nTr=i(Ll),sn=n(Ll,"P",{});var kw=s(sn);sTr=r(kw,"The model class to instantiate is selected based on the "),Bve=n(kw,"CODE",{});var RMt=s(Bve);lTr=r(RMt,"model_type"),RMt.forEach(t),iTr=r(kw,` property of the config object (either
passed as an argument or loaded from `),Ive=n(kw,"CODE",{});var PMt=s(Ive);dTr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),cTr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(kw,"CODE",{});var BMt=s(qve);fTr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),mTr=r(kw,":"),kw.forEach(t),gTr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);zM=n(be,"LI",{});var fPe=s(zM);Nve=n(fPe,"STRONG",{});var IMt=s(Nve);hTr=r(IMt,"albert"),IMt.forEach(t),pTr=r(fPe," \u2014 "),zH=n(fPe,"A",{href:!0});var qMt=s(zH);uTr=r(qMt,"TFAlbertForMultipleChoice"),qMt.forEach(t),_Tr=r(fPe," (ALBERT model)"),fPe.forEach(t),bTr=i(be),WM=n(be,"LI",{});var mPe=s(WM);jve=n(mPe,"STRONG",{});var NMt=s(jve);vTr=r(NMt,"bert"),NMt.forEach(t),FTr=r(mPe," \u2014 "),WH=n(mPe,"A",{href:!0});var jMt=s(WH);TTr=r(jMt,"TFBertForMultipleChoice"),jMt.forEach(t),MTr=r(mPe," (BERT model)"),mPe.forEach(t),ETr=i(be),QM=n(be,"LI",{});var gPe=s(QM);Dve=n(gPe,"STRONG",{});var DMt=s(Dve);CTr=r(DMt,"camembert"),DMt.forEach(t),wTr=r(gPe," \u2014 "),QH=n(gPe,"A",{href:!0});var GMt=s(QH);ATr=r(GMt,"TFCamembertForMultipleChoice"),GMt.forEach(t),yTr=r(gPe," (CamemBERT model)"),gPe.forEach(t),LTr=i(be),HM=n(be,"LI",{});var hPe=s(HM);Gve=n(hPe,"STRONG",{});var OMt=s(Gve);xTr=r(OMt,"convbert"),OMt.forEach(t),$Tr=r(hPe," \u2014 "),HH=n(hPe,"A",{href:!0});var VMt=s(HH);kTr=r(VMt,"TFConvBertForMultipleChoice"),VMt.forEach(t),STr=r(hPe," (ConvBERT model)"),hPe.forEach(t),RTr=i(be),UM=n(be,"LI",{});var pPe=s(UM);Ove=n(pPe,"STRONG",{});var XMt=s(Ove);PTr=r(XMt,"distilbert"),XMt.forEach(t),BTr=r(pPe," \u2014 "),UH=n(pPe,"A",{href:!0});var zMt=s(UH);ITr=r(zMt,"TFDistilBertForMultipleChoice"),zMt.forEach(t),qTr=r(pPe," (DistilBERT model)"),pPe.forEach(t),NTr=i(be),JM=n(be,"LI",{});var uPe=s(JM);Vve=n(uPe,"STRONG",{});var WMt=s(Vve);jTr=r(WMt,"electra"),WMt.forEach(t),DTr=r(uPe," \u2014 "),JH=n(uPe,"A",{href:!0});var QMt=s(JH);GTr=r(QMt,"TFElectraForMultipleChoice"),QMt.forEach(t),OTr=r(uPe," (ELECTRA model)"),uPe.forEach(t),VTr=i(be),YM=n(be,"LI",{});var _Pe=s(YM);Xve=n(_Pe,"STRONG",{});var HMt=s(Xve);XTr=r(HMt,"flaubert"),HMt.forEach(t),zTr=r(_Pe," \u2014 "),YH=n(_Pe,"A",{href:!0});var UMt=s(YH);WTr=r(UMt,"TFFlaubertForMultipleChoice"),UMt.forEach(t),QTr=r(_Pe," (FlauBERT model)"),_Pe.forEach(t),HTr=i(be),KM=n(be,"LI",{});var bPe=s(KM);zve=n(bPe,"STRONG",{});var JMt=s(zve);UTr=r(JMt,"funnel"),JMt.forEach(t),JTr=r(bPe," \u2014 "),KH=n(bPe,"A",{href:!0});var YMt=s(KH);YTr=r(YMt,"TFFunnelForMultipleChoice"),YMt.forEach(t),KTr=r(bPe," (Funnel Transformer model)"),bPe.forEach(t),ZTr=i(be),ZM=n(be,"LI",{});var vPe=s(ZM);Wve=n(vPe,"STRONG",{});var KMt=s(Wve);e7r=r(KMt,"longformer"),KMt.forEach(t),o7r=r(vPe," \u2014 "),ZH=n(vPe,"A",{href:!0});var ZMt=s(ZH);r7r=r(ZMt,"TFLongformerForMultipleChoice"),ZMt.forEach(t),t7r=r(vPe," (Longformer model)"),vPe.forEach(t),a7r=i(be),e4=n(be,"LI",{});var FPe=s(e4);Qve=n(FPe,"STRONG",{});var e4t=s(Qve);n7r=r(e4t,"mobilebert"),e4t.forEach(t),s7r=r(FPe," \u2014 "),eU=n(FPe,"A",{href:!0});var o4t=s(eU);l7r=r(o4t,"TFMobileBertForMultipleChoice"),o4t.forEach(t),i7r=r(FPe," (MobileBERT model)"),FPe.forEach(t),d7r=i(be),o4=n(be,"LI",{});var TPe=s(o4);Hve=n(TPe,"STRONG",{});var r4t=s(Hve);c7r=r(r4t,"mpnet"),r4t.forEach(t),f7r=r(TPe," \u2014 "),oU=n(TPe,"A",{href:!0});var t4t=s(oU);m7r=r(t4t,"TFMPNetForMultipleChoice"),t4t.forEach(t),g7r=r(TPe," (MPNet model)"),TPe.forEach(t),h7r=i(be),r4=n(be,"LI",{});var MPe=s(r4);Uve=n(MPe,"STRONG",{});var a4t=s(Uve);p7r=r(a4t,"rembert"),a4t.forEach(t),u7r=r(MPe," \u2014 "),rU=n(MPe,"A",{href:!0});var n4t=s(rU);_7r=r(n4t,"TFRemBertForMultipleChoice"),n4t.forEach(t),b7r=r(MPe," (RemBERT model)"),MPe.forEach(t),v7r=i(be),t4=n(be,"LI",{});var EPe=s(t4);Jve=n(EPe,"STRONG",{});var s4t=s(Jve);F7r=r(s4t,"roberta"),s4t.forEach(t),T7r=r(EPe," \u2014 "),tU=n(EPe,"A",{href:!0});var l4t=s(tU);M7r=r(l4t,"TFRobertaForMultipleChoice"),l4t.forEach(t),E7r=r(EPe," (RoBERTa model)"),EPe.forEach(t),C7r=i(be),a4=n(be,"LI",{});var CPe=s(a4);Yve=n(CPe,"STRONG",{});var i4t=s(Yve);w7r=r(i4t,"roformer"),i4t.forEach(t),A7r=r(CPe," \u2014 "),aU=n(CPe,"A",{href:!0});var d4t=s(aU);y7r=r(d4t,"TFRoFormerForMultipleChoice"),d4t.forEach(t),L7r=r(CPe," (RoFormer model)"),CPe.forEach(t),x7r=i(be),n4=n(be,"LI",{});var wPe=s(n4);Kve=n(wPe,"STRONG",{});var c4t=s(Kve);$7r=r(c4t,"xlm"),c4t.forEach(t),k7r=r(wPe," \u2014 "),nU=n(wPe,"A",{href:!0});var f4t=s(nU);S7r=r(f4t,"TFXLMForMultipleChoice"),f4t.forEach(t),R7r=r(wPe," (XLM model)"),wPe.forEach(t),P7r=i(be),s4=n(be,"LI",{});var APe=s(s4);Zve=n(APe,"STRONG",{});var m4t=s(Zve);B7r=r(m4t,"xlm-roberta"),m4t.forEach(t),I7r=r(APe," \u2014 "),sU=n(APe,"A",{href:!0});var g4t=s(sU);q7r=r(g4t,"TFXLMRobertaForMultipleChoice"),g4t.forEach(t),N7r=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),j7r=i(be),l4=n(be,"LI",{});var yPe=s(l4);eFe=n(yPe,"STRONG",{});var h4t=s(eFe);D7r=r(h4t,"xlnet"),h4t.forEach(t),G7r=r(yPe," \u2014 "),lU=n(yPe,"A",{href:!0});var p4t=s(lU);O7r=r(p4t,"TFXLNetForMultipleChoice"),p4t.forEach(t),V7r=r(yPe," (XLNet model)"),yPe.forEach(t),be.forEach(t),X7r=i(Ll),T(i4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),qNe=i(f),fc=n(f,"H2",{class:!0});var VDe=s(fc);d4=n(VDe,"A",{id:!0,class:!0,href:!0});var u4t=s(d4);oFe=n(u4t,"SPAN",{});var _4t=s(oFe);T(j8.$$.fragment,_4t),_4t.forEach(t),u4t.forEach(t),z7r=i(VDe),rFe=n(VDe,"SPAN",{});var b4t=s(rFe);W7r=r(b4t,"TFAutoModelForNextSentencePrediction"),b4t.forEach(t),VDe.forEach(t),NNe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(D8.$$.fragment,xl),Q7r=i(xl),mc=n(xl,"P",{});var see=s(mc);H7r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=n(see,"A",{href:!0});var v4t=s(iU);U7r=r(v4t,"from_pretrained()"),v4t.forEach(t),J7r=r(see," class method or the "),dU=n(see,"A",{href:!0});var F4t=s(dU);Y7r=r(F4t,"from_config()"),F4t.forEach(t),K7r=r(see,` class
method.`),see.forEach(t),Z7r=i(xl),G8=n(xl,"P",{});var XDe=s(G8);eMr=r(XDe,"This class cannot be instantiated directly using "),tFe=n(XDe,"CODE",{});var T4t=s(tFe);oMr=r(T4t,"__init__()"),T4t.forEach(t),rMr=r(XDe," (throws an error)."),XDe.forEach(t),tMr=i(xl),Bt=n(xl,"DIV",{class:!0});var Sw=s(Bt);T(O8.$$.fragment,Sw),aMr=i(Sw),aFe=n(Sw,"P",{});var M4t=s(aFe);nMr=r(M4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M4t.forEach(t),sMr=i(Sw),gc=n(Sw,"P",{});var lee=s(gc);lMr=r(lee,`Note:
Loading a model from its configuration file does `),nFe=n(lee,"STRONG",{});var E4t=s(nFe);iMr=r(E4t,"not"),E4t.forEach(t),dMr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(lee,"A",{href:!0});var C4t=s(cU);cMr=r(C4t,"from_pretrained()"),C4t.forEach(t),fMr=r(lee," to load the model weights."),lee.forEach(t),mMr=i(Sw),T(c4.$$.fragment,Sw),Sw.forEach(t),gMr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(V8.$$.fragment,$l),hMr=i($l),sFe=n($l,"P",{});var w4t=s(sFe);pMr=r(w4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w4t.forEach(t),uMr=i($l),ln=n($l,"P",{});var Rw=s(ln);_Mr=r(Rw,"The model class to instantiate is selected based on the "),lFe=n(Rw,"CODE",{});var A4t=s(lFe);bMr=r(A4t,"model_type"),A4t.forEach(t),vMr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),iFe=n(Rw,"CODE",{});var y4t=s(iFe);FMr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),TMr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(Rw,"CODE",{});var L4t=s(dFe);MMr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),EMr=r(Rw,":"),Rw.forEach(t),CMr=i($l),X8=n($l,"UL",{});var zDe=s(X8);f4=n(zDe,"LI",{});var LPe=s(f4);cFe=n(LPe,"STRONG",{});var x4t=s(cFe);wMr=r(x4t,"bert"),x4t.forEach(t),AMr=r(LPe," \u2014 "),fU=n(LPe,"A",{href:!0});var $4t=s(fU);yMr=r($4t,"TFBertForNextSentencePrediction"),$4t.forEach(t),LMr=r(LPe," (BERT model)"),LPe.forEach(t),xMr=i(zDe),m4=n(zDe,"LI",{});var xPe=s(m4);fFe=n(xPe,"STRONG",{});var k4t=s(fFe);$Mr=r(k4t,"mobilebert"),k4t.forEach(t),kMr=r(xPe," \u2014 "),mU=n(xPe,"A",{href:!0});var S4t=s(mU);SMr=r(S4t,"TFMobileBertForNextSentencePrediction"),S4t.forEach(t),RMr=r(xPe," (MobileBERT model)"),xPe.forEach(t),zDe.forEach(t),PMr=i($l),T(g4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),jNe=i(f),hc=n(f,"H2",{class:!0});var WDe=s(hc);h4=n(WDe,"A",{id:!0,class:!0,href:!0});var R4t=s(h4);mFe=n(R4t,"SPAN",{});var P4t=s(mFe);T(z8.$$.fragment,P4t),P4t.forEach(t),R4t.forEach(t),BMr=i(WDe),gFe=n(WDe,"SPAN",{});var B4t=s(gFe);IMr=r(B4t,"TFAutoModelForTableQuestionAnswering"),B4t.forEach(t),WDe.forEach(t),DNe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(W8.$$.fragment,kl),qMr=i(kl),pc=n(kl,"P",{});var iee=s(pc);NMr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gU=n(iee,"A",{href:!0});var I4t=s(gU);jMr=r(I4t,"from_pretrained()"),I4t.forEach(t),DMr=r(iee," class method or the "),hU=n(iee,"A",{href:!0});var q4t=s(hU);GMr=r(q4t,"from_config()"),q4t.forEach(t),OMr=r(iee,` class
method.`),iee.forEach(t),VMr=i(kl),Q8=n(kl,"P",{});var QDe=s(Q8);XMr=r(QDe,"This class cannot be instantiated directly using "),hFe=n(QDe,"CODE",{});var N4t=s(hFe);zMr=r(N4t,"__init__()"),N4t.forEach(t),WMr=r(QDe," (throws an error)."),QDe.forEach(t),QMr=i(kl),It=n(kl,"DIV",{class:!0});var Pw=s(It);T(H8.$$.fragment,Pw),HMr=i(Pw),pFe=n(Pw,"P",{});var j4t=s(pFe);UMr=r(j4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),j4t.forEach(t),JMr=i(Pw),uc=n(Pw,"P",{});var dee=s(uc);YMr=r(dee,`Note:
Loading a model from its configuration file does `),uFe=n(dee,"STRONG",{});var D4t=s(uFe);KMr=r(D4t,"not"),D4t.forEach(t),ZMr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(dee,"A",{href:!0});var G4t=s(pU);e4r=r(G4t,"from_pretrained()"),G4t.forEach(t),o4r=r(dee," to load the model weights."),dee.forEach(t),r4r=i(Pw),T(p4.$$.fragment,Pw),Pw.forEach(t),t4r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(U8.$$.fragment,Sl),a4r=i(Sl),_Fe=n(Sl,"P",{});var O4t=s(_Fe);n4r=r(O4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O4t.forEach(t),s4r=i(Sl),dn=n(Sl,"P",{});var Bw=s(dn);l4r=r(Bw,"The model class to instantiate is selected based on the "),bFe=n(Bw,"CODE",{});var V4t=s(bFe);i4r=r(V4t,"model_type"),V4t.forEach(t),d4r=r(Bw,` property of the config object (either
passed as an argument or loaded from `),vFe=n(Bw,"CODE",{});var X4t=s(vFe);c4r=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),f4r=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(Bw,"CODE",{});var z4t=s(FFe);m4r=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),g4r=r(Bw,":"),Bw.forEach(t),h4r=i(Sl),TFe=n(Sl,"UL",{});var W4t=s(TFe);u4=n(W4t,"LI",{});var $Pe=s(u4);MFe=n($Pe,"STRONG",{});var Q4t=s(MFe);p4r=r(Q4t,"tapas"),Q4t.forEach(t),u4r=r($Pe," \u2014 "),uU=n($Pe,"A",{href:!0});var H4t=s(uU);_4r=r(H4t,"TFTapasForQuestionAnswering"),H4t.forEach(t),b4r=r($Pe," (TAPAS model)"),$Pe.forEach(t),W4t.forEach(t),v4r=i(Sl),T(_4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),GNe=i(f),_c=n(f,"H2",{class:!0});var HDe=s(_c);b4=n(HDe,"A",{id:!0,class:!0,href:!0});var U4t=s(b4);EFe=n(U4t,"SPAN",{});var J4t=s(EFe);T(J8.$$.fragment,J4t),J4t.forEach(t),U4t.forEach(t),F4r=i(HDe),CFe=n(HDe,"SPAN",{});var Y4t=s(CFe);T4r=r(Y4t,"TFAutoModelForTokenClassification"),Y4t.forEach(t),HDe.forEach(t),ONe=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(Y8.$$.fragment,Rl),M4r=i(Rl),bc=n(Rl,"P",{});var cee=s(bc);E4r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_U=n(cee,"A",{href:!0});var K4t=s(_U);C4r=r(K4t,"from_pretrained()"),K4t.forEach(t),w4r=r(cee," class method or the "),bU=n(cee,"A",{href:!0});var Z4t=s(bU);A4r=r(Z4t,"from_config()"),Z4t.forEach(t),y4r=r(cee,` class
method.`),cee.forEach(t),L4r=i(Rl),K8=n(Rl,"P",{});var UDe=s(K8);x4r=r(UDe,"This class cannot be instantiated directly using "),wFe=n(UDe,"CODE",{});var eEt=s(wFe);$4r=r(eEt,"__init__()"),eEt.forEach(t),k4r=r(UDe," (throws an error)."),UDe.forEach(t),S4r=i(Rl),qt=n(Rl,"DIV",{class:!0});var Iw=s(qt);T(Z8.$$.fragment,Iw),R4r=i(Iw),AFe=n(Iw,"P",{});var oEt=s(AFe);P4r=r(oEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oEt.forEach(t),B4r=i(Iw),vc=n(Iw,"P",{});var fee=s(vc);I4r=r(fee,`Note:
Loading a model from its configuration file does `),yFe=n(fee,"STRONG",{});var rEt=s(yFe);q4r=r(rEt,"not"),rEt.forEach(t),N4r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(fee,"A",{href:!0});var tEt=s(vU);j4r=r(tEt,"from_pretrained()"),tEt.forEach(t),D4r=r(fee," to load the model weights."),fee.forEach(t),G4r=i(Iw),T(v4.$$.fragment,Iw),Iw.forEach(t),O4r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(e9.$$.fragment,Pl),V4r=i(Pl),LFe=n(Pl,"P",{});var aEt=s(LFe);X4r=r(aEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aEt.forEach(t),z4r=i(Pl),cn=n(Pl,"P",{});var qw=s(cn);W4r=r(qw,"The model class to instantiate is selected based on the "),xFe=n(qw,"CODE",{});var nEt=s(xFe);Q4r=r(nEt,"model_type"),nEt.forEach(t),H4r=r(qw,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(qw,"CODE",{});var sEt=s($Fe);U4r=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),J4r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(qw,"CODE",{});var lEt=s(kFe);Y4r=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),K4r=r(qw,":"),qw.forEach(t),Z4r=i(Pl),de=n(Pl,"UL",{});var me=s(de);F4=n(me,"LI",{});var kPe=s(F4);SFe=n(kPe,"STRONG",{});var iEt=s(SFe);eEr=r(iEt,"albert"),iEt.forEach(t),oEr=r(kPe," \u2014 "),FU=n(kPe,"A",{href:!0});var dEt=s(FU);rEr=r(dEt,"TFAlbertForTokenClassification"),dEt.forEach(t),tEr=r(kPe," (ALBERT model)"),kPe.forEach(t),aEr=i(me),T4=n(me,"LI",{});var SPe=s(T4);RFe=n(SPe,"STRONG",{});var cEt=s(RFe);nEr=r(cEt,"bert"),cEt.forEach(t),sEr=r(SPe," \u2014 "),TU=n(SPe,"A",{href:!0});var fEt=s(TU);lEr=r(fEt,"TFBertForTokenClassification"),fEt.forEach(t),iEr=r(SPe," (BERT model)"),SPe.forEach(t),dEr=i(me),M4=n(me,"LI",{});var RPe=s(M4);PFe=n(RPe,"STRONG",{});var mEt=s(PFe);cEr=r(mEt,"camembert"),mEt.forEach(t),fEr=r(RPe," \u2014 "),MU=n(RPe,"A",{href:!0});var gEt=s(MU);mEr=r(gEt,"TFCamembertForTokenClassification"),gEt.forEach(t),gEr=r(RPe," (CamemBERT model)"),RPe.forEach(t),hEr=i(me),E4=n(me,"LI",{});var PPe=s(E4);BFe=n(PPe,"STRONG",{});var hEt=s(BFe);pEr=r(hEt,"convbert"),hEt.forEach(t),uEr=r(PPe," \u2014 "),EU=n(PPe,"A",{href:!0});var pEt=s(EU);_Er=r(pEt,"TFConvBertForTokenClassification"),pEt.forEach(t),bEr=r(PPe," (ConvBERT model)"),PPe.forEach(t),vEr=i(me),C4=n(me,"LI",{});var BPe=s(C4);IFe=n(BPe,"STRONG",{});var uEt=s(IFe);FEr=r(uEt,"deberta"),uEt.forEach(t),TEr=r(BPe," \u2014 "),CU=n(BPe,"A",{href:!0});var _Et=s(CU);MEr=r(_Et,"TFDebertaForTokenClassification"),_Et.forEach(t),EEr=r(BPe," (DeBERTa model)"),BPe.forEach(t),CEr=i(me),w4=n(me,"LI",{});var IPe=s(w4);qFe=n(IPe,"STRONG",{});var bEt=s(qFe);wEr=r(bEt,"deberta-v2"),bEt.forEach(t),AEr=r(IPe," \u2014 "),wU=n(IPe,"A",{href:!0});var vEt=s(wU);yEr=r(vEt,"TFDebertaV2ForTokenClassification"),vEt.forEach(t),LEr=r(IPe," (DeBERTa-v2 model)"),IPe.forEach(t),xEr=i(me),A4=n(me,"LI",{});var qPe=s(A4);NFe=n(qPe,"STRONG",{});var FEt=s(NFe);$Er=r(FEt,"distilbert"),FEt.forEach(t),kEr=r(qPe," \u2014 "),AU=n(qPe,"A",{href:!0});var TEt=s(AU);SEr=r(TEt,"TFDistilBertForTokenClassification"),TEt.forEach(t),REr=r(qPe," (DistilBERT model)"),qPe.forEach(t),PEr=i(me),y4=n(me,"LI",{});var NPe=s(y4);jFe=n(NPe,"STRONG",{});var MEt=s(jFe);BEr=r(MEt,"electra"),MEt.forEach(t),IEr=r(NPe," \u2014 "),yU=n(NPe,"A",{href:!0});var EEt=s(yU);qEr=r(EEt,"TFElectraForTokenClassification"),EEt.forEach(t),NEr=r(NPe," (ELECTRA model)"),NPe.forEach(t),jEr=i(me),L4=n(me,"LI",{});var jPe=s(L4);DFe=n(jPe,"STRONG",{});var CEt=s(DFe);DEr=r(CEt,"flaubert"),CEt.forEach(t),GEr=r(jPe," \u2014 "),LU=n(jPe,"A",{href:!0});var wEt=s(LU);OEr=r(wEt,"TFFlaubertForTokenClassification"),wEt.forEach(t),VEr=r(jPe," (FlauBERT model)"),jPe.forEach(t),XEr=i(me),x4=n(me,"LI",{});var DPe=s(x4);GFe=n(DPe,"STRONG",{});var AEt=s(GFe);zEr=r(AEt,"funnel"),AEt.forEach(t),WEr=r(DPe," \u2014 "),xU=n(DPe,"A",{href:!0});var yEt=s(xU);QEr=r(yEt,"TFFunnelForTokenClassification"),yEt.forEach(t),HEr=r(DPe," (Funnel Transformer model)"),DPe.forEach(t),UEr=i(me),$4=n(me,"LI",{});var GPe=s($4);OFe=n(GPe,"STRONG",{});var LEt=s(OFe);JEr=r(LEt,"layoutlm"),LEt.forEach(t),YEr=r(GPe," \u2014 "),$U=n(GPe,"A",{href:!0});var xEt=s($U);KEr=r(xEt,"TFLayoutLMForTokenClassification"),xEt.forEach(t),ZEr=r(GPe," (LayoutLM model)"),GPe.forEach(t),eCr=i(me),k4=n(me,"LI",{});var OPe=s(k4);VFe=n(OPe,"STRONG",{});var $Et=s(VFe);oCr=r($Et,"longformer"),$Et.forEach(t),rCr=r(OPe," \u2014 "),kU=n(OPe,"A",{href:!0});var kEt=s(kU);tCr=r(kEt,"TFLongformerForTokenClassification"),kEt.forEach(t),aCr=r(OPe," (Longformer model)"),OPe.forEach(t),nCr=i(me),S4=n(me,"LI",{});var VPe=s(S4);XFe=n(VPe,"STRONG",{});var SEt=s(XFe);sCr=r(SEt,"mobilebert"),SEt.forEach(t),lCr=r(VPe," \u2014 "),SU=n(VPe,"A",{href:!0});var REt=s(SU);iCr=r(REt,"TFMobileBertForTokenClassification"),REt.forEach(t),dCr=r(VPe," (MobileBERT model)"),VPe.forEach(t),cCr=i(me),R4=n(me,"LI",{});var XPe=s(R4);zFe=n(XPe,"STRONG",{});var PEt=s(zFe);fCr=r(PEt,"mpnet"),PEt.forEach(t),mCr=r(XPe," \u2014 "),RU=n(XPe,"A",{href:!0});var BEt=s(RU);gCr=r(BEt,"TFMPNetForTokenClassification"),BEt.forEach(t),hCr=r(XPe," (MPNet model)"),XPe.forEach(t),pCr=i(me),P4=n(me,"LI",{});var zPe=s(P4);WFe=n(zPe,"STRONG",{});var IEt=s(WFe);uCr=r(IEt,"rembert"),IEt.forEach(t),_Cr=r(zPe," \u2014 "),PU=n(zPe,"A",{href:!0});var qEt=s(PU);bCr=r(qEt,"TFRemBertForTokenClassification"),qEt.forEach(t),vCr=r(zPe," (RemBERT model)"),zPe.forEach(t),FCr=i(me),B4=n(me,"LI",{});var WPe=s(B4);QFe=n(WPe,"STRONG",{});var NEt=s(QFe);TCr=r(NEt,"roberta"),NEt.forEach(t),MCr=r(WPe," \u2014 "),BU=n(WPe,"A",{href:!0});var jEt=s(BU);ECr=r(jEt,"TFRobertaForTokenClassification"),jEt.forEach(t),CCr=r(WPe," (RoBERTa model)"),WPe.forEach(t),wCr=i(me),I4=n(me,"LI",{});var QPe=s(I4);HFe=n(QPe,"STRONG",{});var DEt=s(HFe);ACr=r(DEt,"roformer"),DEt.forEach(t),yCr=r(QPe," \u2014 "),IU=n(QPe,"A",{href:!0});var GEt=s(IU);LCr=r(GEt,"TFRoFormerForTokenClassification"),GEt.forEach(t),xCr=r(QPe," (RoFormer model)"),QPe.forEach(t),$Cr=i(me),q4=n(me,"LI",{});var HPe=s(q4);UFe=n(HPe,"STRONG",{});var OEt=s(UFe);kCr=r(OEt,"xlm"),OEt.forEach(t),SCr=r(HPe," \u2014 "),qU=n(HPe,"A",{href:!0});var VEt=s(qU);RCr=r(VEt,"TFXLMForTokenClassification"),VEt.forEach(t),PCr=r(HPe," (XLM model)"),HPe.forEach(t),BCr=i(me),N4=n(me,"LI",{});var UPe=s(N4);JFe=n(UPe,"STRONG",{});var XEt=s(JFe);ICr=r(XEt,"xlm-roberta"),XEt.forEach(t),qCr=r(UPe," \u2014 "),NU=n(UPe,"A",{href:!0});var zEt=s(NU);NCr=r(zEt,"TFXLMRobertaForTokenClassification"),zEt.forEach(t),jCr=r(UPe," (XLM-RoBERTa model)"),UPe.forEach(t),DCr=i(me),j4=n(me,"LI",{});var JPe=s(j4);YFe=n(JPe,"STRONG",{});var WEt=s(YFe);GCr=r(WEt,"xlnet"),WEt.forEach(t),OCr=r(JPe," \u2014 "),jU=n(JPe,"A",{href:!0});var QEt=s(jU);VCr=r(QEt,"TFXLNetForTokenClassification"),QEt.forEach(t),XCr=r(JPe," (XLNet model)"),JPe.forEach(t),me.forEach(t),zCr=i(Pl),T(D4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),VNe=i(f),Fc=n(f,"H2",{class:!0});var JDe=s(Fc);G4=n(JDe,"A",{id:!0,class:!0,href:!0});var HEt=s(G4);KFe=n(HEt,"SPAN",{});var UEt=s(KFe);T(o9.$$.fragment,UEt),UEt.forEach(t),HEt.forEach(t),WCr=i(JDe),ZFe=n(JDe,"SPAN",{});var JEt=s(ZFe);QCr=r(JEt,"TFAutoModelForQuestionAnswering"),JEt.forEach(t),JDe.forEach(t),XNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(r9.$$.fragment,Bl),HCr=i(Bl),Tc=n(Bl,"P",{});var mee=s(Tc);UCr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DU=n(mee,"A",{href:!0});var YEt=s(DU);JCr=r(YEt,"from_pretrained()"),YEt.forEach(t),YCr=r(mee," class method or the "),GU=n(mee,"A",{href:!0});var KEt=s(GU);KCr=r(KEt,"from_config()"),KEt.forEach(t),ZCr=r(mee,` class
method.`),mee.forEach(t),e5r=i(Bl),t9=n(Bl,"P",{});var YDe=s(t9);o5r=r(YDe,"This class cannot be instantiated directly using "),e6e=n(YDe,"CODE",{});var ZEt=s(e6e);r5r=r(ZEt,"__init__()"),ZEt.forEach(t),t5r=r(YDe," (throws an error)."),YDe.forEach(t),a5r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Nw=s(Nt);T(a9.$$.fragment,Nw),n5r=i(Nw),o6e=n(Nw,"P",{});var eCt=s(o6e);s5r=r(eCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eCt.forEach(t),l5r=i(Nw),Mc=n(Nw,"P",{});var gee=s(Mc);i5r=r(gee,`Note:
Loading a model from its configuration file does `),r6e=n(gee,"STRONG",{});var oCt=s(r6e);d5r=r(oCt,"not"),oCt.forEach(t),c5r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=n(gee,"A",{href:!0});var rCt=s(OU);f5r=r(rCt,"from_pretrained()"),rCt.forEach(t),m5r=r(gee," to load the model weights."),gee.forEach(t),g5r=i(Nw),T(O4.$$.fragment,Nw),Nw.forEach(t),h5r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(n9.$$.fragment,Il),p5r=i(Il),t6e=n(Il,"P",{});var tCt=s(t6e);u5r=r(tCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tCt.forEach(t),_5r=i(Il),fn=n(Il,"P",{});var jw=s(fn);b5r=r(jw,"The model class to instantiate is selected based on the "),a6e=n(jw,"CODE",{});var aCt=s(a6e);v5r=r(aCt,"model_type"),aCt.forEach(t),F5r=r(jw,` property of the config object (either
passed as an argument or loaded from `),n6e=n(jw,"CODE",{});var nCt=s(n6e);T5r=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),M5r=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(jw,"CODE",{});var sCt=s(s6e);E5r=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),C5r=r(jw,":"),jw.forEach(t),w5r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);V4=n(ge,"LI",{});var YPe=s(V4);l6e=n(YPe,"STRONG",{});var lCt=s(l6e);A5r=r(lCt,"albert"),lCt.forEach(t),y5r=r(YPe," \u2014 "),VU=n(YPe,"A",{href:!0});var iCt=s(VU);L5r=r(iCt,"TFAlbertForQuestionAnswering"),iCt.forEach(t),x5r=r(YPe," (ALBERT model)"),YPe.forEach(t),$5r=i(ge),X4=n(ge,"LI",{});var KPe=s(X4);i6e=n(KPe,"STRONG",{});var dCt=s(i6e);k5r=r(dCt,"bert"),dCt.forEach(t),S5r=r(KPe," \u2014 "),XU=n(KPe,"A",{href:!0});var cCt=s(XU);R5r=r(cCt,"TFBertForQuestionAnswering"),cCt.forEach(t),P5r=r(KPe," (BERT model)"),KPe.forEach(t),B5r=i(ge),z4=n(ge,"LI",{});var ZPe=s(z4);d6e=n(ZPe,"STRONG",{});var fCt=s(d6e);I5r=r(fCt,"camembert"),fCt.forEach(t),q5r=r(ZPe," \u2014 "),zU=n(ZPe,"A",{href:!0});var mCt=s(zU);N5r=r(mCt,"TFCamembertForQuestionAnswering"),mCt.forEach(t),j5r=r(ZPe," (CamemBERT model)"),ZPe.forEach(t),D5r=i(ge),W4=n(ge,"LI",{});var eBe=s(W4);c6e=n(eBe,"STRONG",{});var gCt=s(c6e);G5r=r(gCt,"convbert"),gCt.forEach(t),O5r=r(eBe," \u2014 "),WU=n(eBe,"A",{href:!0});var hCt=s(WU);V5r=r(hCt,"TFConvBertForQuestionAnswering"),hCt.forEach(t),X5r=r(eBe," (ConvBERT model)"),eBe.forEach(t),z5r=i(ge),Q4=n(ge,"LI",{});var oBe=s(Q4);f6e=n(oBe,"STRONG",{});var pCt=s(f6e);W5r=r(pCt,"deberta"),pCt.forEach(t),Q5r=r(oBe," \u2014 "),QU=n(oBe,"A",{href:!0});var uCt=s(QU);H5r=r(uCt,"TFDebertaForQuestionAnswering"),uCt.forEach(t),U5r=r(oBe," (DeBERTa model)"),oBe.forEach(t),J5r=i(ge),H4=n(ge,"LI",{});var rBe=s(H4);m6e=n(rBe,"STRONG",{});var _Ct=s(m6e);Y5r=r(_Ct,"deberta-v2"),_Ct.forEach(t),K5r=r(rBe," \u2014 "),HU=n(rBe,"A",{href:!0});var bCt=s(HU);Z5r=r(bCt,"TFDebertaV2ForQuestionAnswering"),bCt.forEach(t),e3r=r(rBe," (DeBERTa-v2 model)"),rBe.forEach(t),o3r=i(ge),U4=n(ge,"LI",{});var tBe=s(U4);g6e=n(tBe,"STRONG",{});var vCt=s(g6e);r3r=r(vCt,"distilbert"),vCt.forEach(t),t3r=r(tBe," \u2014 "),UU=n(tBe,"A",{href:!0});var FCt=s(UU);a3r=r(FCt,"TFDistilBertForQuestionAnswering"),FCt.forEach(t),n3r=r(tBe," (DistilBERT model)"),tBe.forEach(t),s3r=i(ge),J4=n(ge,"LI",{});var aBe=s(J4);h6e=n(aBe,"STRONG",{});var TCt=s(h6e);l3r=r(TCt,"electra"),TCt.forEach(t),i3r=r(aBe," \u2014 "),JU=n(aBe,"A",{href:!0});var MCt=s(JU);d3r=r(MCt,"TFElectraForQuestionAnswering"),MCt.forEach(t),c3r=r(aBe," (ELECTRA model)"),aBe.forEach(t),f3r=i(ge),Y4=n(ge,"LI",{});var nBe=s(Y4);p6e=n(nBe,"STRONG",{});var ECt=s(p6e);m3r=r(ECt,"flaubert"),ECt.forEach(t),g3r=r(nBe," \u2014 "),YU=n(nBe,"A",{href:!0});var CCt=s(YU);h3r=r(CCt,"TFFlaubertForQuestionAnsweringSimple"),CCt.forEach(t),p3r=r(nBe," (FlauBERT model)"),nBe.forEach(t),u3r=i(ge),K4=n(ge,"LI",{});var sBe=s(K4);u6e=n(sBe,"STRONG",{});var wCt=s(u6e);_3r=r(wCt,"funnel"),wCt.forEach(t),b3r=r(sBe," \u2014 "),KU=n(sBe,"A",{href:!0});var ACt=s(KU);v3r=r(ACt,"TFFunnelForQuestionAnswering"),ACt.forEach(t),F3r=r(sBe," (Funnel Transformer model)"),sBe.forEach(t),T3r=i(ge),Z4=n(ge,"LI",{});var lBe=s(Z4);_6e=n(lBe,"STRONG",{});var yCt=s(_6e);M3r=r(yCt,"gptj"),yCt.forEach(t),E3r=r(lBe," \u2014 "),ZU=n(lBe,"A",{href:!0});var LCt=s(ZU);C3r=r(LCt,"TFGPTJForQuestionAnswering"),LCt.forEach(t),w3r=r(lBe," (GPT-J model)"),lBe.forEach(t),A3r=i(ge),eE=n(ge,"LI",{});var iBe=s(eE);b6e=n(iBe,"STRONG",{});var xCt=s(b6e);y3r=r(xCt,"longformer"),xCt.forEach(t),L3r=r(iBe," \u2014 "),eJ=n(iBe,"A",{href:!0});var $Ct=s(eJ);x3r=r($Ct,"TFLongformerForQuestionAnswering"),$Ct.forEach(t),$3r=r(iBe," (Longformer model)"),iBe.forEach(t),k3r=i(ge),oE=n(ge,"LI",{});var dBe=s(oE);v6e=n(dBe,"STRONG",{});var kCt=s(v6e);S3r=r(kCt,"mobilebert"),kCt.forEach(t),R3r=r(dBe," \u2014 "),oJ=n(dBe,"A",{href:!0});var SCt=s(oJ);P3r=r(SCt,"TFMobileBertForQuestionAnswering"),SCt.forEach(t),B3r=r(dBe," (MobileBERT model)"),dBe.forEach(t),I3r=i(ge),rE=n(ge,"LI",{});var cBe=s(rE);F6e=n(cBe,"STRONG",{});var RCt=s(F6e);q3r=r(RCt,"mpnet"),RCt.forEach(t),N3r=r(cBe," \u2014 "),rJ=n(cBe,"A",{href:!0});var PCt=s(rJ);j3r=r(PCt,"TFMPNetForQuestionAnswering"),PCt.forEach(t),D3r=r(cBe," (MPNet model)"),cBe.forEach(t),G3r=i(ge),tE=n(ge,"LI",{});var fBe=s(tE);T6e=n(fBe,"STRONG",{});var BCt=s(T6e);O3r=r(BCt,"rembert"),BCt.forEach(t),V3r=r(fBe," \u2014 "),tJ=n(fBe,"A",{href:!0});var ICt=s(tJ);X3r=r(ICt,"TFRemBertForQuestionAnswering"),ICt.forEach(t),z3r=r(fBe," (RemBERT model)"),fBe.forEach(t),W3r=i(ge),aE=n(ge,"LI",{});var mBe=s(aE);M6e=n(mBe,"STRONG",{});var qCt=s(M6e);Q3r=r(qCt,"roberta"),qCt.forEach(t),H3r=r(mBe," \u2014 "),aJ=n(mBe,"A",{href:!0});var NCt=s(aJ);U3r=r(NCt,"TFRobertaForQuestionAnswering"),NCt.forEach(t),J3r=r(mBe," (RoBERTa model)"),mBe.forEach(t),Y3r=i(ge),nE=n(ge,"LI",{});var gBe=s(nE);E6e=n(gBe,"STRONG",{});var jCt=s(E6e);K3r=r(jCt,"roformer"),jCt.forEach(t),Z3r=r(gBe," \u2014 "),nJ=n(gBe,"A",{href:!0});var DCt=s(nJ);ewr=r(DCt,"TFRoFormerForQuestionAnswering"),DCt.forEach(t),owr=r(gBe," (RoFormer model)"),gBe.forEach(t),rwr=i(ge),sE=n(ge,"LI",{});var hBe=s(sE);C6e=n(hBe,"STRONG",{});var GCt=s(C6e);twr=r(GCt,"xlm"),GCt.forEach(t),awr=r(hBe," \u2014 "),sJ=n(hBe,"A",{href:!0});var OCt=s(sJ);nwr=r(OCt,"TFXLMForQuestionAnsweringSimple"),OCt.forEach(t),swr=r(hBe," (XLM model)"),hBe.forEach(t),lwr=i(ge),lE=n(ge,"LI",{});var pBe=s(lE);w6e=n(pBe,"STRONG",{});var VCt=s(w6e);iwr=r(VCt,"xlm-roberta"),VCt.forEach(t),dwr=r(pBe," \u2014 "),lJ=n(pBe,"A",{href:!0});var XCt=s(lJ);cwr=r(XCt,"TFXLMRobertaForQuestionAnswering"),XCt.forEach(t),fwr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),mwr=i(ge),iE=n(ge,"LI",{});var uBe=s(iE);A6e=n(uBe,"STRONG",{});var zCt=s(A6e);gwr=r(zCt,"xlnet"),zCt.forEach(t),hwr=r(uBe," \u2014 "),iJ=n(uBe,"A",{href:!0});var WCt=s(iJ);pwr=r(WCt,"TFXLNetForQuestionAnsweringSimple"),WCt.forEach(t),uwr=r(uBe," (XLNet model)"),uBe.forEach(t),ge.forEach(t),_wr=i(Il),T(dE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),zNe=i(f),Ec=n(f,"H2",{class:!0});var KDe=s(Ec);cE=n(KDe,"A",{id:!0,class:!0,href:!0});var QCt=s(cE);y6e=n(QCt,"SPAN",{});var HCt=s(y6e);T(s9.$$.fragment,HCt),HCt.forEach(t),QCt.forEach(t),bwr=i(KDe),L6e=n(KDe,"SPAN",{});var UCt=s(L6e);vwr=r(UCt,"TFAutoModelForVision2Seq"),UCt.forEach(t),KDe.forEach(t),WNe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(l9.$$.fragment,ql),Fwr=i(ql),Cc=n(ql,"P",{});var hee=s(Cc);Twr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=n(hee,"A",{href:!0});var JCt=s(dJ);Mwr=r(JCt,"from_pretrained()"),JCt.forEach(t),Ewr=r(hee," class method or the "),cJ=n(hee,"A",{href:!0});var YCt=s(cJ);Cwr=r(YCt,"from_config()"),YCt.forEach(t),wwr=r(hee,` class
method.`),hee.forEach(t),Awr=i(ql),i9=n(ql,"P",{});var ZDe=s(i9);ywr=r(ZDe,"This class cannot be instantiated directly using "),x6e=n(ZDe,"CODE",{});var KCt=s(x6e);Lwr=r(KCt,"__init__()"),KCt.forEach(t),xwr=r(ZDe," (throws an error)."),ZDe.forEach(t),$wr=i(ql),jt=n(ql,"DIV",{class:!0});var Dw=s(jt);T(d9.$$.fragment,Dw),kwr=i(Dw),$6e=n(Dw,"P",{});var ZCt=s($6e);Swr=r(ZCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZCt.forEach(t),Rwr=i(Dw),wc=n(Dw,"P",{});var pee=s(wc);Pwr=r(pee,`Note:
Loading a model from its configuration file does `),k6e=n(pee,"STRONG",{});var e5t=s(k6e);Bwr=r(e5t,"not"),e5t.forEach(t),Iwr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(pee,"A",{href:!0});var o5t=s(fJ);qwr=r(o5t,"from_pretrained()"),o5t.forEach(t),Nwr=r(pee," to load the model weights."),pee.forEach(t),jwr=i(Dw),T(fE.$$.fragment,Dw),Dw.forEach(t),Dwr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(c9.$$.fragment,Nl),Gwr=i(Nl),S6e=n(Nl,"P",{});var r5t=s(S6e);Owr=r(r5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r5t.forEach(t),Vwr=i(Nl),mn=n(Nl,"P",{});var Gw=s(mn);Xwr=r(Gw,"The model class to instantiate is selected based on the "),R6e=n(Gw,"CODE",{});var t5t=s(R6e);zwr=r(t5t,"model_type"),t5t.forEach(t),Wwr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),P6e=n(Gw,"CODE",{});var a5t=s(P6e);Qwr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),Hwr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=n(Gw,"CODE",{});var n5t=s(B6e);Uwr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),Jwr=r(Gw,":"),Gw.forEach(t),Ywr=i(Nl),I6e=n(Nl,"UL",{});var s5t=s(I6e);mE=n(s5t,"LI",{});var _Be=s(mE);q6e=n(_Be,"STRONG",{});var l5t=s(q6e);Kwr=r(l5t,"vision-encoder-decoder"),l5t.forEach(t),Zwr=r(_Be," \u2014 "),mJ=n(_Be,"A",{href:!0});var i5t=s(mJ);eAr=r(i5t,"TFVisionEncoderDecoderModel"),i5t.forEach(t),oAr=r(_Be," (Vision Encoder decoder model)"),_Be.forEach(t),s5t.forEach(t),rAr=i(Nl),T(gE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),QNe=i(f),Ac=n(f,"H2",{class:!0});var eGe=s(Ac);hE=n(eGe,"A",{id:!0,class:!0,href:!0});var d5t=s(hE);N6e=n(d5t,"SPAN",{});var c5t=s(N6e);T(f9.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),tAr=i(eGe),j6e=n(eGe,"SPAN",{});var f5t=s(j6e);aAr=r(f5t,"TFAutoModelForSpeechSeq2Seq"),f5t.forEach(t),eGe.forEach(t),HNe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(m9.$$.fragment,jl),nAr=i(jl),yc=n(jl,"P",{});var uee=s(yc);sAr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gJ=n(uee,"A",{href:!0});var m5t=s(gJ);lAr=r(m5t,"from_pretrained()"),m5t.forEach(t),iAr=r(uee," class method or the "),hJ=n(uee,"A",{href:!0});var g5t=s(hJ);dAr=r(g5t,"from_config()"),g5t.forEach(t),cAr=r(uee,` class
method.`),uee.forEach(t),fAr=i(jl),g9=n(jl,"P",{});var oGe=s(g9);mAr=r(oGe,"This class cannot be instantiated directly using "),D6e=n(oGe,"CODE",{});var h5t=s(D6e);gAr=r(h5t,"__init__()"),h5t.forEach(t),hAr=r(oGe," (throws an error)."),oGe.forEach(t),pAr=i(jl),Dt=n(jl,"DIV",{class:!0});var Ow=s(Dt);T(h9.$$.fragment,Ow),uAr=i(Ow),G6e=n(Ow,"P",{});var p5t=s(G6e);_Ar=r(p5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),p5t.forEach(t),bAr=i(Ow),Lc=n(Ow,"P",{});var _ee=s(Lc);vAr=r(_ee,`Note:
Loading a model from its configuration file does `),O6e=n(_ee,"STRONG",{});var u5t=s(O6e);FAr=r(u5t,"not"),u5t.forEach(t),TAr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(_ee,"A",{href:!0});var _5t=s(pJ);MAr=r(_5t,"from_pretrained()"),_5t.forEach(t),EAr=r(_ee," to load the model weights."),_ee.forEach(t),CAr=i(Ow),T(pE.$$.fragment,Ow),Ow.forEach(t),wAr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(p9.$$.fragment,Dl),AAr=i(Dl),V6e=n(Dl,"P",{});var b5t=s(V6e);yAr=r(b5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),b5t.forEach(t),LAr=i(Dl),gn=n(Dl,"P",{});var Vw=s(gn);xAr=r(Vw,"The model class to instantiate is selected based on the "),X6e=n(Vw,"CODE",{});var v5t=s(X6e);$Ar=r(v5t,"model_type"),v5t.forEach(t),kAr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),z6e=n(Vw,"CODE",{});var F5t=s(z6e);SAr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),RAr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(Vw,"CODE",{});var T5t=s(W6e);PAr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),BAr=r(Vw,":"),Vw.forEach(t),IAr=i(Dl),Q6e=n(Dl,"UL",{});var M5t=s(Q6e);uE=n(M5t,"LI",{});var bBe=s(uE);H6e=n(bBe,"STRONG",{});var E5t=s(H6e);qAr=r(E5t,"speech_to_text"),E5t.forEach(t),NAr=r(bBe," \u2014 "),uJ=n(bBe,"A",{href:!0});var C5t=s(uJ);jAr=r(C5t,"TFSpeech2TextForConditionalGeneration"),C5t.forEach(t),DAr=r(bBe," (Speech2Text model)"),bBe.forEach(t),M5t.forEach(t),GAr=i(Dl),T(_E.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),UNe=i(f),xc=n(f,"H2",{class:!0});var rGe=s(xc);bE=n(rGe,"A",{id:!0,class:!0,href:!0});var w5t=s(bE);U6e=n(w5t,"SPAN",{});var A5t=s(U6e);T(u9.$$.fragment,A5t),A5t.forEach(t),w5t.forEach(t),OAr=i(rGe),J6e=n(rGe,"SPAN",{});var y5t=s(J6e);VAr=r(y5t,"FlaxAutoModel"),y5t.forEach(t),rGe.forEach(t),JNe=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(_9.$$.fragment,Gl),XAr=i(Gl),$c=n(Gl,"P",{});var bee=s($c);zAr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_J=n(bee,"A",{href:!0});var L5t=s(_J);WAr=r(L5t,"from_pretrained()"),L5t.forEach(t),QAr=r(bee," class method or the "),bJ=n(bee,"A",{href:!0});var x5t=s(bJ);HAr=r(x5t,"from_config()"),x5t.forEach(t),UAr=r(bee,` class
method.`),bee.forEach(t),JAr=i(Gl),b9=n(Gl,"P",{});var tGe=s(b9);YAr=r(tGe,"This class cannot be instantiated directly using "),Y6e=n(tGe,"CODE",{});var $5t=s(Y6e);KAr=r($5t,"__init__()"),$5t.forEach(t),ZAr=r(tGe," (throws an error)."),tGe.forEach(t),eyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Xw=s(Gt);T(v9.$$.fragment,Xw),oyr=i(Xw),K6e=n(Xw,"P",{});var k5t=s(K6e);ryr=r(k5t,"Instantiates one of the base model classes of the library from a configuration."),k5t.forEach(t),tyr=i(Xw),kc=n(Xw,"P",{});var vee=s(kc);ayr=r(vee,`Note:
Loading a model from its configuration file does `),Z6e=n(vee,"STRONG",{});var S5t=s(Z6e);nyr=r(S5t,"not"),S5t.forEach(t),syr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(vee,"A",{href:!0});var R5t=s(vJ);lyr=r(R5t,"from_pretrained()"),R5t.forEach(t),iyr=r(vee," to load the model weights."),vee.forEach(t),dyr=i(Xw),T(vE.$$.fragment,Xw),Xw.forEach(t),cyr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(F9.$$.fragment,Ol),fyr=i(Ol),eTe=n(Ol,"P",{});var P5t=s(eTe);myr=r(P5t,"Instantiate one of the base model classes of the library from a pretrained model."),P5t.forEach(t),gyr=i(Ol),hn=n(Ol,"P",{});var zw=s(hn);hyr=r(zw,"The model class to instantiate is selected based on the "),oTe=n(zw,"CODE",{});var B5t=s(oTe);pyr=r(B5t,"model_type"),B5t.forEach(t),uyr=r(zw,` property of the config object (either
passed as an argument or loaded from `),rTe=n(zw,"CODE",{});var I5t=s(rTe);_yr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),byr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(zw,"CODE",{});var q5t=s(tTe);vyr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),Fyr=r(zw,":"),zw.forEach(t),Tyr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);FE=n(ne,"LI",{});var vBe=s(FE);aTe=n(vBe,"STRONG",{});var N5t=s(aTe);Myr=r(N5t,"albert"),N5t.forEach(t),Eyr=r(vBe," \u2014 "),FJ=n(vBe,"A",{href:!0});var j5t=s(FJ);Cyr=r(j5t,"FlaxAlbertModel"),j5t.forEach(t),wyr=r(vBe," (ALBERT model)"),vBe.forEach(t),Ayr=i(ne),TE=n(ne,"LI",{});var FBe=s(TE);nTe=n(FBe,"STRONG",{});var D5t=s(nTe);yyr=r(D5t,"bart"),D5t.forEach(t),Lyr=r(FBe," \u2014 "),TJ=n(FBe,"A",{href:!0});var G5t=s(TJ);xyr=r(G5t,"FlaxBartModel"),G5t.forEach(t),$yr=r(FBe," (BART model)"),FBe.forEach(t),kyr=i(ne),ME=n(ne,"LI",{});var TBe=s(ME);sTe=n(TBe,"STRONG",{});var O5t=s(sTe);Syr=r(O5t,"beit"),O5t.forEach(t),Ryr=r(TBe," \u2014 "),MJ=n(TBe,"A",{href:!0});var V5t=s(MJ);Pyr=r(V5t,"FlaxBeitModel"),V5t.forEach(t),Byr=r(TBe," (BEiT model)"),TBe.forEach(t),Iyr=i(ne),EE=n(ne,"LI",{});var MBe=s(EE);lTe=n(MBe,"STRONG",{});var X5t=s(lTe);qyr=r(X5t,"bert"),X5t.forEach(t),Nyr=r(MBe," \u2014 "),EJ=n(MBe,"A",{href:!0});var z5t=s(EJ);jyr=r(z5t,"FlaxBertModel"),z5t.forEach(t),Dyr=r(MBe," (BERT model)"),MBe.forEach(t),Gyr=i(ne),CE=n(ne,"LI",{});var EBe=s(CE);iTe=n(EBe,"STRONG",{});var W5t=s(iTe);Oyr=r(W5t,"big_bird"),W5t.forEach(t),Vyr=r(EBe," \u2014 "),CJ=n(EBe,"A",{href:!0});var Q5t=s(CJ);Xyr=r(Q5t,"FlaxBigBirdModel"),Q5t.forEach(t),zyr=r(EBe," (BigBird model)"),EBe.forEach(t),Wyr=i(ne),wE=n(ne,"LI",{});var CBe=s(wE);dTe=n(CBe,"STRONG",{});var H5t=s(dTe);Qyr=r(H5t,"blenderbot"),H5t.forEach(t),Hyr=r(CBe," \u2014 "),wJ=n(CBe,"A",{href:!0});var U5t=s(wJ);Uyr=r(U5t,"FlaxBlenderbotModel"),U5t.forEach(t),Jyr=r(CBe," (Blenderbot model)"),CBe.forEach(t),Yyr=i(ne),AE=n(ne,"LI",{});var wBe=s(AE);cTe=n(wBe,"STRONG",{});var J5t=s(cTe);Kyr=r(J5t,"blenderbot-small"),J5t.forEach(t),Zyr=r(wBe," \u2014 "),AJ=n(wBe,"A",{href:!0});var Y5t=s(AJ);eLr=r(Y5t,"FlaxBlenderbotSmallModel"),Y5t.forEach(t),oLr=r(wBe," (BlenderbotSmall model)"),wBe.forEach(t),rLr=i(ne),yE=n(ne,"LI",{});var ABe=s(yE);fTe=n(ABe,"STRONG",{});var K5t=s(fTe);tLr=r(K5t,"clip"),K5t.forEach(t),aLr=r(ABe," \u2014 "),yJ=n(ABe,"A",{href:!0});var Z5t=s(yJ);nLr=r(Z5t,"FlaxCLIPModel"),Z5t.forEach(t),sLr=r(ABe," (CLIP model)"),ABe.forEach(t),lLr=i(ne),LE=n(ne,"LI",{});var yBe=s(LE);mTe=n(yBe,"STRONG",{});var e3t=s(mTe);iLr=r(e3t,"distilbert"),e3t.forEach(t),dLr=r(yBe," \u2014 "),LJ=n(yBe,"A",{href:!0});var o3t=s(LJ);cLr=r(o3t,"FlaxDistilBertModel"),o3t.forEach(t),fLr=r(yBe," (DistilBERT model)"),yBe.forEach(t),mLr=i(ne),xE=n(ne,"LI",{});var LBe=s(xE);gTe=n(LBe,"STRONG",{});var r3t=s(gTe);gLr=r(r3t,"electra"),r3t.forEach(t),hLr=r(LBe," \u2014 "),xJ=n(LBe,"A",{href:!0});var t3t=s(xJ);pLr=r(t3t,"FlaxElectraModel"),t3t.forEach(t),uLr=r(LBe," (ELECTRA model)"),LBe.forEach(t),_Lr=i(ne),$E=n(ne,"LI",{});var xBe=s($E);hTe=n(xBe,"STRONG",{});var a3t=s(hTe);bLr=r(a3t,"gpt2"),a3t.forEach(t),vLr=r(xBe," \u2014 "),$J=n(xBe,"A",{href:!0});var n3t=s($J);FLr=r(n3t,"FlaxGPT2Model"),n3t.forEach(t),TLr=r(xBe," (OpenAI GPT-2 model)"),xBe.forEach(t),MLr=i(ne),kE=n(ne,"LI",{});var $Be=s(kE);pTe=n($Be,"STRONG",{});var s3t=s(pTe);ELr=r(s3t,"gpt_neo"),s3t.forEach(t),CLr=r($Be," \u2014 "),kJ=n($Be,"A",{href:!0});var l3t=s(kJ);wLr=r(l3t,"FlaxGPTNeoModel"),l3t.forEach(t),ALr=r($Be," (GPT Neo model)"),$Be.forEach(t),yLr=i(ne),SE=n(ne,"LI",{});var kBe=s(SE);uTe=n(kBe,"STRONG",{});var i3t=s(uTe);LLr=r(i3t,"gptj"),i3t.forEach(t),xLr=r(kBe," \u2014 "),SJ=n(kBe,"A",{href:!0});var d3t=s(SJ);$Lr=r(d3t,"FlaxGPTJModel"),d3t.forEach(t),kLr=r(kBe," (GPT-J model)"),kBe.forEach(t),SLr=i(ne),RE=n(ne,"LI",{});var SBe=s(RE);_Te=n(SBe,"STRONG",{});var c3t=s(_Te);RLr=r(c3t,"marian"),c3t.forEach(t),PLr=r(SBe," \u2014 "),RJ=n(SBe,"A",{href:!0});var f3t=s(RJ);BLr=r(f3t,"FlaxMarianModel"),f3t.forEach(t),ILr=r(SBe," (Marian model)"),SBe.forEach(t),qLr=i(ne),PE=n(ne,"LI",{});var RBe=s(PE);bTe=n(RBe,"STRONG",{});var m3t=s(bTe);NLr=r(m3t,"mbart"),m3t.forEach(t),jLr=r(RBe," \u2014 "),PJ=n(RBe,"A",{href:!0});var g3t=s(PJ);DLr=r(g3t,"FlaxMBartModel"),g3t.forEach(t),GLr=r(RBe," (mBART model)"),RBe.forEach(t),OLr=i(ne),BE=n(ne,"LI",{});var PBe=s(BE);vTe=n(PBe,"STRONG",{});var h3t=s(vTe);VLr=r(h3t,"mt5"),h3t.forEach(t),XLr=r(PBe," \u2014 "),BJ=n(PBe,"A",{href:!0});var p3t=s(BJ);zLr=r(p3t,"FlaxMT5Model"),p3t.forEach(t),WLr=r(PBe," (mT5 model)"),PBe.forEach(t),QLr=i(ne),IE=n(ne,"LI",{});var BBe=s(IE);FTe=n(BBe,"STRONG",{});var u3t=s(FTe);HLr=r(u3t,"pegasus"),u3t.forEach(t),ULr=r(BBe," \u2014 "),IJ=n(BBe,"A",{href:!0});var _3t=s(IJ);JLr=r(_3t,"FlaxPegasusModel"),_3t.forEach(t),YLr=r(BBe," (Pegasus model)"),BBe.forEach(t),KLr=i(ne),qE=n(ne,"LI",{});var IBe=s(qE);TTe=n(IBe,"STRONG",{});var b3t=s(TTe);ZLr=r(b3t,"roberta"),b3t.forEach(t),e8r=r(IBe," \u2014 "),qJ=n(IBe,"A",{href:!0});var v3t=s(qJ);o8r=r(v3t,"FlaxRobertaModel"),v3t.forEach(t),r8r=r(IBe," (RoBERTa model)"),IBe.forEach(t),t8r=i(ne),NE=n(ne,"LI",{});var qBe=s(NE);MTe=n(qBe,"STRONG",{});var F3t=s(MTe);a8r=r(F3t,"roformer"),F3t.forEach(t),n8r=r(qBe," \u2014 "),NJ=n(qBe,"A",{href:!0});var T3t=s(NJ);s8r=r(T3t,"FlaxRoFormerModel"),T3t.forEach(t),l8r=r(qBe," (RoFormer model)"),qBe.forEach(t),i8r=i(ne),jE=n(ne,"LI",{});var NBe=s(jE);ETe=n(NBe,"STRONG",{});var M3t=s(ETe);d8r=r(M3t,"t5"),M3t.forEach(t),c8r=r(NBe," \u2014 "),jJ=n(NBe,"A",{href:!0});var E3t=s(jJ);f8r=r(E3t,"FlaxT5Model"),E3t.forEach(t),m8r=r(NBe," (T5 model)"),NBe.forEach(t),g8r=i(ne),DE=n(ne,"LI",{});var jBe=s(DE);CTe=n(jBe,"STRONG",{});var C3t=s(CTe);h8r=r(C3t,"vision-text-dual-encoder"),C3t.forEach(t),p8r=r(jBe," \u2014 "),DJ=n(jBe,"A",{href:!0});var w3t=s(DJ);u8r=r(w3t,"FlaxVisionTextDualEncoderModel"),w3t.forEach(t),_8r=r(jBe," (VisionTextDualEncoder model)"),jBe.forEach(t),b8r=i(ne),GE=n(ne,"LI",{});var DBe=s(GE);wTe=n(DBe,"STRONG",{});var A3t=s(wTe);v8r=r(A3t,"vit"),A3t.forEach(t),F8r=r(DBe," \u2014 "),GJ=n(DBe,"A",{href:!0});var y3t=s(GJ);T8r=r(y3t,"FlaxViTModel"),y3t.forEach(t),M8r=r(DBe," (ViT model)"),DBe.forEach(t),E8r=i(ne),OE=n(ne,"LI",{});var GBe=s(OE);ATe=n(GBe,"STRONG",{});var L3t=s(ATe);C8r=r(L3t,"wav2vec2"),L3t.forEach(t),w8r=r(GBe," \u2014 "),OJ=n(GBe,"A",{href:!0});var x3t=s(OJ);A8r=r(x3t,"FlaxWav2Vec2Model"),x3t.forEach(t),y8r=r(GBe," (Wav2Vec2 model)"),GBe.forEach(t),L8r=i(ne),VE=n(ne,"LI",{});var OBe=s(VE);yTe=n(OBe,"STRONG",{});var $3t=s(yTe);x8r=r($3t,"xglm"),$3t.forEach(t),$8r=r(OBe," \u2014 "),VJ=n(OBe,"A",{href:!0});var k3t=s(VJ);k8r=r(k3t,"FlaxXGLMModel"),k3t.forEach(t),S8r=r(OBe," (XGLM model)"),OBe.forEach(t),R8r=i(ne),XE=n(ne,"LI",{});var VBe=s(XE);LTe=n(VBe,"STRONG",{});var S3t=s(LTe);P8r=r(S3t,"xlm-roberta"),S3t.forEach(t),B8r=r(VBe," \u2014 "),XJ=n(VBe,"A",{href:!0});var R3t=s(XJ);I8r=r(R3t,"FlaxXLMRobertaModel"),R3t.forEach(t),q8r=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),ne.forEach(t),N8r=i(Ol),T(zE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),YNe=i(f),Sc=n(f,"H2",{class:!0});var aGe=s(Sc);WE=n(aGe,"A",{id:!0,class:!0,href:!0});var P3t=s(WE);xTe=n(P3t,"SPAN",{});var B3t=s(xTe);T(T9.$$.fragment,B3t),B3t.forEach(t),P3t.forEach(t),j8r=i(aGe),$Te=n(aGe,"SPAN",{});var I3t=s($Te);D8r=r(I3t,"FlaxAutoModelForCausalLM"),I3t.forEach(t),aGe.forEach(t),KNe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(M9.$$.fragment,Vl),G8r=i(Vl),Rc=n(Vl,"P",{});var Fee=s(Rc);O8r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=n(Fee,"A",{href:!0});var q3t=s(zJ);V8r=r(q3t,"from_pretrained()"),q3t.forEach(t),X8r=r(Fee," class method or the "),WJ=n(Fee,"A",{href:!0});var N3t=s(WJ);z8r=r(N3t,"from_config()"),N3t.forEach(t),W8r=r(Fee,` class
method.`),Fee.forEach(t),Q8r=i(Vl),E9=n(Vl,"P",{});var nGe=s(E9);H8r=r(nGe,"This class cannot be instantiated directly using "),kTe=n(nGe,"CODE",{});var j3t=s(kTe);U8r=r(j3t,"__init__()"),j3t.forEach(t),J8r=r(nGe," (throws an error)."),nGe.forEach(t),Y8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Ww=s(Ot);T(C9.$$.fragment,Ww),K8r=i(Ww),STe=n(Ww,"P",{});var D3t=s(STe);Z8r=r(D3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D3t.forEach(t),e9r=i(Ww),Pc=n(Ww,"P",{});var Tee=s(Pc);o9r=r(Tee,`Note:
Loading a model from its configuration file does `),RTe=n(Tee,"STRONG",{});var G3t=s(RTe);r9r=r(G3t,"not"),G3t.forEach(t),t9r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Tee,"A",{href:!0});var O3t=s(QJ);a9r=r(O3t,"from_pretrained()"),O3t.forEach(t),n9r=r(Tee," to load the model weights."),Tee.forEach(t),s9r=i(Ww),T(QE.$$.fragment,Ww),Ww.forEach(t),l9r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(w9.$$.fragment,Xl),i9r=i(Xl),PTe=n(Xl,"P",{});var V3t=s(PTe);d9r=r(V3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V3t.forEach(t),c9r=i(Xl),pn=n(Xl,"P",{});var Qw=s(pn);f9r=r(Qw,"The model class to instantiate is selected based on the "),BTe=n(Qw,"CODE",{});var X3t=s(BTe);m9r=r(X3t,"model_type"),X3t.forEach(t),g9r=r(Qw,` property of the config object (either
passed as an argument or loaded from `),ITe=n(Qw,"CODE",{});var z3t=s(ITe);h9r=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),p9r=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(Qw,"CODE",{});var W3t=s(qTe);u9r=r(W3t,"pretrained_model_name_or_path"),W3t.forEach(t),_9r=r(Qw,":"),Qw.forEach(t),b9r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);HE=n(Xe,"LI",{});var XBe=s(HE);NTe=n(XBe,"STRONG",{});var Q3t=s(NTe);v9r=r(Q3t,"bart"),Q3t.forEach(t),F9r=r(XBe," \u2014 "),HJ=n(XBe,"A",{href:!0});var H3t=s(HJ);T9r=r(H3t,"FlaxBartForCausalLM"),H3t.forEach(t),M9r=r(XBe," (BART model)"),XBe.forEach(t),E9r=i(Xe),UE=n(Xe,"LI",{});var zBe=s(UE);jTe=n(zBe,"STRONG",{});var U3t=s(jTe);C9r=r(U3t,"bert"),U3t.forEach(t),w9r=r(zBe," \u2014 "),UJ=n(zBe,"A",{href:!0});var J3t=s(UJ);A9r=r(J3t,"FlaxBertForCausalLM"),J3t.forEach(t),y9r=r(zBe," (BERT model)"),zBe.forEach(t),L9r=i(Xe),JE=n(Xe,"LI",{});var WBe=s(JE);DTe=n(WBe,"STRONG",{});var Y3t=s(DTe);x9r=r(Y3t,"big_bird"),Y3t.forEach(t),$9r=r(WBe," \u2014 "),JJ=n(WBe,"A",{href:!0});var K3t=s(JJ);k9r=r(K3t,"FlaxBigBirdForCausalLM"),K3t.forEach(t),S9r=r(WBe," (BigBird model)"),WBe.forEach(t),R9r=i(Xe),YE=n(Xe,"LI",{});var QBe=s(YE);GTe=n(QBe,"STRONG",{});var Z3t=s(GTe);P9r=r(Z3t,"electra"),Z3t.forEach(t),B9r=r(QBe," \u2014 "),YJ=n(QBe,"A",{href:!0});var ewt=s(YJ);I9r=r(ewt,"FlaxElectraForCausalLM"),ewt.forEach(t),q9r=r(QBe," (ELECTRA model)"),QBe.forEach(t),N9r=i(Xe),KE=n(Xe,"LI",{});var HBe=s(KE);OTe=n(HBe,"STRONG",{});var owt=s(OTe);j9r=r(owt,"gpt2"),owt.forEach(t),D9r=r(HBe," \u2014 "),KJ=n(HBe,"A",{href:!0});var rwt=s(KJ);G9r=r(rwt,"FlaxGPT2LMHeadModel"),rwt.forEach(t),O9r=r(HBe," (OpenAI GPT-2 model)"),HBe.forEach(t),V9r=i(Xe),ZE=n(Xe,"LI",{});var UBe=s(ZE);VTe=n(UBe,"STRONG",{});var twt=s(VTe);X9r=r(twt,"gpt_neo"),twt.forEach(t),z9r=r(UBe," \u2014 "),ZJ=n(UBe,"A",{href:!0});var awt=s(ZJ);W9r=r(awt,"FlaxGPTNeoForCausalLM"),awt.forEach(t),Q9r=r(UBe," (GPT Neo model)"),UBe.forEach(t),H9r=i(Xe),eC=n(Xe,"LI",{});var JBe=s(eC);XTe=n(JBe,"STRONG",{});var nwt=s(XTe);U9r=r(nwt,"gptj"),nwt.forEach(t),J9r=r(JBe," \u2014 "),eY=n(JBe,"A",{href:!0});var swt=s(eY);Y9r=r(swt,"FlaxGPTJForCausalLM"),swt.forEach(t),K9r=r(JBe," (GPT-J model)"),JBe.forEach(t),Z9r=i(Xe),oC=n(Xe,"LI",{});var YBe=s(oC);zTe=n(YBe,"STRONG",{});var lwt=s(zTe);exr=r(lwt,"roberta"),lwt.forEach(t),oxr=r(YBe," \u2014 "),oY=n(YBe,"A",{href:!0});var iwt=s(oY);rxr=r(iwt,"FlaxRobertaForCausalLM"),iwt.forEach(t),txr=r(YBe," (RoBERTa model)"),YBe.forEach(t),axr=i(Xe),rC=n(Xe,"LI",{});var KBe=s(rC);WTe=n(KBe,"STRONG",{});var dwt=s(WTe);nxr=r(dwt,"xglm"),dwt.forEach(t),sxr=r(KBe," \u2014 "),rY=n(KBe,"A",{href:!0});var cwt=s(rY);lxr=r(cwt,"FlaxXGLMForCausalLM"),cwt.forEach(t),ixr=r(KBe," (XGLM model)"),KBe.forEach(t),Xe.forEach(t),dxr=i(Xl),T(tC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),ZNe=i(f),Bc=n(f,"H2",{class:!0});var sGe=s(Bc);aC=n(sGe,"A",{id:!0,class:!0,href:!0});var fwt=s(aC);QTe=n(fwt,"SPAN",{});var mwt=s(QTe);T(A9.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),cxr=i(sGe),HTe=n(sGe,"SPAN",{});var gwt=s(HTe);fxr=r(gwt,"FlaxAutoModelForPreTraining"),gwt.forEach(t),sGe.forEach(t),eje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(y9.$$.fragment,zl),mxr=i(zl),Ic=n(zl,"P",{});var Mee=s(Ic);gxr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tY=n(Mee,"A",{href:!0});var hwt=s(tY);hxr=r(hwt,"from_pretrained()"),hwt.forEach(t),pxr=r(Mee," class method or the "),aY=n(Mee,"A",{href:!0});var pwt=s(aY);uxr=r(pwt,"from_config()"),pwt.forEach(t),_xr=r(Mee,` class
method.`),Mee.forEach(t),bxr=i(zl),L9=n(zl,"P",{});var lGe=s(L9);vxr=r(lGe,"This class cannot be instantiated directly using "),UTe=n(lGe,"CODE",{});var uwt=s(UTe);Fxr=r(uwt,"__init__()"),uwt.forEach(t),Txr=r(lGe," (throws an error)."),lGe.forEach(t),Mxr=i(zl),Vt=n(zl,"DIV",{class:!0});var Hw=s(Vt);T(x9.$$.fragment,Hw),Exr=i(Hw),JTe=n(Hw,"P",{});var _wt=s(JTe);Cxr=r(_wt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_wt.forEach(t),wxr=i(Hw),qc=n(Hw,"P",{});var Eee=s(qc);Axr=r(Eee,`Note:
Loading a model from its configuration file does `),YTe=n(Eee,"STRONG",{});var bwt=s(YTe);yxr=r(bwt,"not"),bwt.forEach(t),Lxr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(Eee,"A",{href:!0});var vwt=s(nY);xxr=r(vwt,"from_pretrained()"),vwt.forEach(t),$xr=r(Eee," to load the model weights."),Eee.forEach(t),kxr=i(Hw),T(nC.$$.fragment,Hw),Hw.forEach(t),Sxr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T($9.$$.fragment,Wl),Rxr=i(Wl),KTe=n(Wl,"P",{});var Fwt=s(KTe);Pxr=r(Fwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fwt.forEach(t),Bxr=i(Wl),un=n(Wl,"P",{});var Uw=s(un);Ixr=r(Uw,"The model class to instantiate is selected based on the "),ZTe=n(Uw,"CODE",{});var Twt=s(ZTe);qxr=r(Twt,"model_type"),Twt.forEach(t),Nxr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),e7e=n(Uw,"CODE",{});var Mwt=s(e7e);jxr=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),Dxr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(Uw,"CODE",{});var Ewt=s(o7e);Gxr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),Oxr=r(Uw,":"),Uw.forEach(t),Vxr=i(Wl),Me=n(Wl,"UL",{});var we=s(Me);sC=n(we,"LI",{});var ZBe=s(sC);r7e=n(ZBe,"STRONG",{});var Cwt=s(r7e);Xxr=r(Cwt,"albert"),Cwt.forEach(t),zxr=r(ZBe," \u2014 "),sY=n(ZBe,"A",{href:!0});var wwt=s(sY);Wxr=r(wwt,"FlaxAlbertForPreTraining"),wwt.forEach(t),Qxr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),Hxr=i(we),lC=n(we,"LI",{});var eIe=s(lC);t7e=n(eIe,"STRONG",{});var Awt=s(t7e);Uxr=r(Awt,"bart"),Awt.forEach(t),Jxr=r(eIe," \u2014 "),lY=n(eIe,"A",{href:!0});var ywt=s(lY);Yxr=r(ywt,"FlaxBartForConditionalGeneration"),ywt.forEach(t),Kxr=r(eIe," (BART model)"),eIe.forEach(t),Zxr=i(we),iC=n(we,"LI",{});var oIe=s(iC);a7e=n(oIe,"STRONG",{});var Lwt=s(a7e);e$r=r(Lwt,"bert"),Lwt.forEach(t),o$r=r(oIe," \u2014 "),iY=n(oIe,"A",{href:!0});var xwt=s(iY);r$r=r(xwt,"FlaxBertForPreTraining"),xwt.forEach(t),t$r=r(oIe," (BERT model)"),oIe.forEach(t),a$r=i(we),dC=n(we,"LI",{});var rIe=s(dC);n7e=n(rIe,"STRONG",{});var $wt=s(n7e);n$r=r($wt,"big_bird"),$wt.forEach(t),s$r=r(rIe," \u2014 "),dY=n(rIe,"A",{href:!0});var kwt=s(dY);l$r=r(kwt,"FlaxBigBirdForPreTraining"),kwt.forEach(t),i$r=r(rIe," (BigBird model)"),rIe.forEach(t),d$r=i(we),cC=n(we,"LI",{});var tIe=s(cC);s7e=n(tIe,"STRONG",{});var Swt=s(s7e);c$r=r(Swt,"electra"),Swt.forEach(t),f$r=r(tIe," \u2014 "),cY=n(tIe,"A",{href:!0});var Rwt=s(cY);m$r=r(Rwt,"FlaxElectraForPreTraining"),Rwt.forEach(t),g$r=r(tIe," (ELECTRA model)"),tIe.forEach(t),h$r=i(we),fC=n(we,"LI",{});var aIe=s(fC);l7e=n(aIe,"STRONG",{});var Pwt=s(l7e);p$r=r(Pwt,"mbart"),Pwt.forEach(t),u$r=r(aIe," \u2014 "),fY=n(aIe,"A",{href:!0});var Bwt=s(fY);_$r=r(Bwt,"FlaxMBartForConditionalGeneration"),Bwt.forEach(t),b$r=r(aIe," (mBART model)"),aIe.forEach(t),v$r=i(we),mC=n(we,"LI",{});var nIe=s(mC);i7e=n(nIe,"STRONG",{});var Iwt=s(i7e);F$r=r(Iwt,"mt5"),Iwt.forEach(t),T$r=r(nIe," \u2014 "),mY=n(nIe,"A",{href:!0});var qwt=s(mY);M$r=r(qwt,"FlaxMT5ForConditionalGeneration"),qwt.forEach(t),E$r=r(nIe," (mT5 model)"),nIe.forEach(t),C$r=i(we),gC=n(we,"LI",{});var sIe=s(gC);d7e=n(sIe,"STRONG",{});var Nwt=s(d7e);w$r=r(Nwt,"roberta"),Nwt.forEach(t),A$r=r(sIe," \u2014 "),gY=n(sIe,"A",{href:!0});var jwt=s(gY);y$r=r(jwt,"FlaxRobertaForMaskedLM"),jwt.forEach(t),L$r=r(sIe," (RoBERTa model)"),sIe.forEach(t),x$r=i(we),hC=n(we,"LI",{});var lIe=s(hC);c7e=n(lIe,"STRONG",{});var Dwt=s(c7e);$$r=r(Dwt,"roformer"),Dwt.forEach(t),k$r=r(lIe," \u2014 "),hY=n(lIe,"A",{href:!0});var Gwt=s(hY);S$r=r(Gwt,"FlaxRoFormerForMaskedLM"),Gwt.forEach(t),R$r=r(lIe," (RoFormer model)"),lIe.forEach(t),P$r=i(we),pC=n(we,"LI",{});var iIe=s(pC);f7e=n(iIe,"STRONG",{});var Owt=s(f7e);B$r=r(Owt,"t5"),Owt.forEach(t),I$r=r(iIe," \u2014 "),pY=n(iIe,"A",{href:!0});var Vwt=s(pY);q$r=r(Vwt,"FlaxT5ForConditionalGeneration"),Vwt.forEach(t),N$r=r(iIe," (T5 model)"),iIe.forEach(t),j$r=i(we),uC=n(we,"LI",{});var dIe=s(uC);m7e=n(dIe,"STRONG",{});var Xwt=s(m7e);D$r=r(Xwt,"wav2vec2"),Xwt.forEach(t),G$r=r(dIe," \u2014 "),uY=n(dIe,"A",{href:!0});var zwt=s(uY);O$r=r(zwt,"FlaxWav2Vec2ForPreTraining"),zwt.forEach(t),V$r=r(dIe," (Wav2Vec2 model)"),dIe.forEach(t),X$r=i(we),_C=n(we,"LI",{});var cIe=s(_C);g7e=n(cIe,"STRONG",{});var Wwt=s(g7e);z$r=r(Wwt,"xlm-roberta"),Wwt.forEach(t),W$r=r(cIe," \u2014 "),_Y=n(cIe,"A",{href:!0});var Qwt=s(_Y);Q$r=r(Qwt,"FlaxXLMRobertaForMaskedLM"),Qwt.forEach(t),H$r=r(cIe," (XLM-RoBERTa model)"),cIe.forEach(t),we.forEach(t),U$r=i(Wl),T(bC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),oje=i(f),Nc=n(f,"H2",{class:!0});var iGe=s(Nc);vC=n(iGe,"A",{id:!0,class:!0,href:!0});var Hwt=s(vC);h7e=n(Hwt,"SPAN",{});var Uwt=s(h7e);T(k9.$$.fragment,Uwt),Uwt.forEach(t),Hwt.forEach(t),J$r=i(iGe),p7e=n(iGe,"SPAN",{});var Jwt=s(p7e);Y$r=r(Jwt,"FlaxAutoModelForMaskedLM"),Jwt.forEach(t),iGe.forEach(t),rje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(S9.$$.fragment,Ql),K$r=i(Ql),jc=n(Ql,"P",{});var Cee=s(jc);Z$r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=n(Cee,"A",{href:!0});var Ywt=s(bY);ekr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),okr=r(Cee," class method or the "),vY=n(Cee,"A",{href:!0});var Kwt=s(vY);rkr=r(Kwt,"from_config()"),Kwt.forEach(t),tkr=r(Cee,` class
method.`),Cee.forEach(t),akr=i(Ql),R9=n(Ql,"P",{});var dGe=s(R9);nkr=r(dGe,"This class cannot be instantiated directly using "),u7e=n(dGe,"CODE",{});var Zwt=s(u7e);skr=r(Zwt,"__init__()"),Zwt.forEach(t),lkr=r(dGe," (throws an error)."),dGe.forEach(t),ikr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var Jw=s(Xt);T(P9.$$.fragment,Jw),dkr=i(Jw),_7e=n(Jw,"P",{});var eAt=s(_7e);ckr=r(eAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eAt.forEach(t),fkr=i(Jw),Dc=n(Jw,"P",{});var wee=s(Dc);mkr=r(wee,`Note:
Loading a model from its configuration file does `),b7e=n(wee,"STRONG",{});var oAt=s(b7e);gkr=r(oAt,"not"),oAt.forEach(t),hkr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(wee,"A",{href:!0});var rAt=s(FY);pkr=r(rAt,"from_pretrained()"),rAt.forEach(t),ukr=r(wee," to load the model weights."),wee.forEach(t),_kr=i(Jw),T(FC.$$.fragment,Jw),Jw.forEach(t),bkr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(B9.$$.fragment,Hl),vkr=i(Hl),v7e=n(Hl,"P",{});var tAt=s(v7e);Fkr=r(tAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tAt.forEach(t),Tkr=i(Hl),_n=n(Hl,"P",{});var Yw=s(_n);Mkr=r(Yw,"The model class to instantiate is selected based on the "),F7e=n(Yw,"CODE",{});var aAt=s(F7e);Ekr=r(aAt,"model_type"),aAt.forEach(t),Ckr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),T7e=n(Yw,"CODE",{});var nAt=s(T7e);wkr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),Akr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(Yw,"CODE",{});var sAt=s(M7e);ykr=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),Lkr=r(Yw,":"),Yw.forEach(t),xkr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);TC=n(Ie,"LI",{});var fIe=s(TC);E7e=n(fIe,"STRONG",{});var lAt=s(E7e);$kr=r(lAt,"albert"),lAt.forEach(t),kkr=r(fIe," \u2014 "),TY=n(fIe,"A",{href:!0});var iAt=s(TY);Skr=r(iAt,"FlaxAlbertForMaskedLM"),iAt.forEach(t),Rkr=r(fIe," (ALBERT model)"),fIe.forEach(t),Pkr=i(Ie),MC=n(Ie,"LI",{});var mIe=s(MC);C7e=n(mIe,"STRONG",{});var dAt=s(C7e);Bkr=r(dAt,"bart"),dAt.forEach(t),Ikr=r(mIe," \u2014 "),MY=n(mIe,"A",{href:!0});var cAt=s(MY);qkr=r(cAt,"FlaxBartForConditionalGeneration"),cAt.forEach(t),Nkr=r(mIe," (BART model)"),mIe.forEach(t),jkr=i(Ie),EC=n(Ie,"LI",{});var gIe=s(EC);w7e=n(gIe,"STRONG",{});var fAt=s(w7e);Dkr=r(fAt,"bert"),fAt.forEach(t),Gkr=r(gIe," \u2014 "),EY=n(gIe,"A",{href:!0});var mAt=s(EY);Okr=r(mAt,"FlaxBertForMaskedLM"),mAt.forEach(t),Vkr=r(gIe," (BERT model)"),gIe.forEach(t),Xkr=i(Ie),CC=n(Ie,"LI",{});var hIe=s(CC);A7e=n(hIe,"STRONG",{});var gAt=s(A7e);zkr=r(gAt,"big_bird"),gAt.forEach(t),Wkr=r(hIe," \u2014 "),CY=n(hIe,"A",{href:!0});var hAt=s(CY);Qkr=r(hAt,"FlaxBigBirdForMaskedLM"),hAt.forEach(t),Hkr=r(hIe," (BigBird model)"),hIe.forEach(t),Ukr=i(Ie),wC=n(Ie,"LI",{});var pIe=s(wC);y7e=n(pIe,"STRONG",{});var pAt=s(y7e);Jkr=r(pAt,"distilbert"),pAt.forEach(t),Ykr=r(pIe," \u2014 "),wY=n(pIe,"A",{href:!0});var uAt=s(wY);Kkr=r(uAt,"FlaxDistilBertForMaskedLM"),uAt.forEach(t),Zkr=r(pIe," (DistilBERT model)"),pIe.forEach(t),eSr=i(Ie),AC=n(Ie,"LI",{});var uIe=s(AC);L7e=n(uIe,"STRONG",{});var _At=s(L7e);oSr=r(_At,"electra"),_At.forEach(t),rSr=r(uIe," \u2014 "),AY=n(uIe,"A",{href:!0});var bAt=s(AY);tSr=r(bAt,"FlaxElectraForMaskedLM"),bAt.forEach(t),aSr=r(uIe," (ELECTRA model)"),uIe.forEach(t),nSr=i(Ie),yC=n(Ie,"LI",{});var _Ie=s(yC);x7e=n(_Ie,"STRONG",{});var vAt=s(x7e);sSr=r(vAt,"mbart"),vAt.forEach(t),lSr=r(_Ie," \u2014 "),yY=n(_Ie,"A",{href:!0});var FAt=s(yY);iSr=r(FAt,"FlaxMBartForConditionalGeneration"),FAt.forEach(t),dSr=r(_Ie," (mBART model)"),_Ie.forEach(t),cSr=i(Ie),LC=n(Ie,"LI",{});var bIe=s(LC);$7e=n(bIe,"STRONG",{});var TAt=s($7e);fSr=r(TAt,"roberta"),TAt.forEach(t),mSr=r(bIe," \u2014 "),LY=n(bIe,"A",{href:!0});var MAt=s(LY);gSr=r(MAt,"FlaxRobertaForMaskedLM"),MAt.forEach(t),hSr=r(bIe," (RoBERTa model)"),bIe.forEach(t),pSr=i(Ie),xC=n(Ie,"LI",{});var vIe=s(xC);k7e=n(vIe,"STRONG",{});var EAt=s(k7e);uSr=r(EAt,"roformer"),EAt.forEach(t),_Sr=r(vIe," \u2014 "),xY=n(vIe,"A",{href:!0});var CAt=s(xY);bSr=r(CAt,"FlaxRoFormerForMaskedLM"),CAt.forEach(t),vSr=r(vIe," (RoFormer model)"),vIe.forEach(t),FSr=i(Ie),$C=n(Ie,"LI",{});var FIe=s($C);S7e=n(FIe,"STRONG",{});var wAt=s(S7e);TSr=r(wAt,"xlm-roberta"),wAt.forEach(t),MSr=r(FIe," \u2014 "),$Y=n(FIe,"A",{href:!0});var AAt=s($Y);ESr=r(AAt,"FlaxXLMRobertaForMaskedLM"),AAt.forEach(t),CSr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),Ie.forEach(t),wSr=i(Hl),T(kC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),tje=i(f),Gc=n(f,"H2",{class:!0});var cGe=s(Gc);SC=n(cGe,"A",{id:!0,class:!0,href:!0});var yAt=s(SC);R7e=n(yAt,"SPAN",{});var LAt=s(R7e);T(I9.$$.fragment,LAt),LAt.forEach(t),yAt.forEach(t),ASr=i(cGe),P7e=n(cGe,"SPAN",{});var xAt=s(P7e);ySr=r(xAt,"FlaxAutoModelForSeq2SeqLM"),xAt.forEach(t),cGe.forEach(t),aje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(q9.$$.fragment,Ul),LSr=i(Ul),Oc=n(Ul,"P",{});var Aee=s(Oc);xSr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=n(Aee,"A",{href:!0});var $At=s(kY);$Sr=r($At,"from_pretrained()"),$At.forEach(t),kSr=r(Aee," class method or the "),SY=n(Aee,"A",{href:!0});var kAt=s(SY);SSr=r(kAt,"from_config()"),kAt.forEach(t),RSr=r(Aee,` class
method.`),Aee.forEach(t),PSr=i(Ul),N9=n(Ul,"P",{});var fGe=s(N9);BSr=r(fGe,"This class cannot be instantiated directly using "),B7e=n(fGe,"CODE",{});var SAt=s(B7e);ISr=r(SAt,"__init__()"),SAt.forEach(t),qSr=r(fGe," (throws an error)."),fGe.forEach(t),NSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var Kw=s(zt);T(j9.$$.fragment,Kw),jSr=i(Kw),I7e=n(Kw,"P",{});var RAt=s(I7e);DSr=r(RAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RAt.forEach(t),GSr=i(Kw),Vc=n(Kw,"P",{});var yee=s(Vc);OSr=r(yee,`Note:
Loading a model from its configuration file does `),q7e=n(yee,"STRONG",{});var PAt=s(q7e);VSr=r(PAt,"not"),PAt.forEach(t),XSr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(yee,"A",{href:!0});var BAt=s(RY);zSr=r(BAt,"from_pretrained()"),BAt.forEach(t),WSr=r(yee," to load the model weights."),yee.forEach(t),QSr=i(Kw),T(RC.$$.fragment,Kw),Kw.forEach(t),HSr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(D9.$$.fragment,Jl),USr=i(Jl),N7e=n(Jl,"P",{});var IAt=s(N7e);JSr=r(IAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),IAt.forEach(t),YSr=i(Jl),bn=n(Jl,"P",{});var Zw=s(bn);KSr=r(Zw,"The model class to instantiate is selected based on the "),j7e=n(Zw,"CODE",{});var qAt=s(j7e);ZSr=r(qAt,"model_type"),qAt.forEach(t),eRr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),D7e=n(Zw,"CODE",{});var NAt=s(D7e);oRr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),rRr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=n(Zw,"CODE",{});var jAt=s(G7e);tRr=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),aRr=r(Zw,":"),Zw.forEach(t),nRr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);PC=n(ze,"LI",{});var TIe=s(PC);O7e=n(TIe,"STRONG",{});var DAt=s(O7e);sRr=r(DAt,"bart"),DAt.forEach(t),lRr=r(TIe," \u2014 "),PY=n(TIe,"A",{href:!0});var GAt=s(PY);iRr=r(GAt,"FlaxBartForConditionalGeneration"),GAt.forEach(t),dRr=r(TIe," (BART model)"),TIe.forEach(t),cRr=i(ze),BC=n(ze,"LI",{});var MIe=s(BC);V7e=n(MIe,"STRONG",{});var OAt=s(V7e);fRr=r(OAt,"blenderbot"),OAt.forEach(t),mRr=r(MIe," \u2014 "),BY=n(MIe,"A",{href:!0});var VAt=s(BY);gRr=r(VAt,"FlaxBlenderbotForConditionalGeneration"),VAt.forEach(t),hRr=r(MIe," (Blenderbot model)"),MIe.forEach(t),pRr=i(ze),IC=n(ze,"LI",{});var EIe=s(IC);X7e=n(EIe,"STRONG",{});var XAt=s(X7e);uRr=r(XAt,"blenderbot-small"),XAt.forEach(t),_Rr=r(EIe," \u2014 "),IY=n(EIe,"A",{href:!0});var zAt=s(IY);bRr=r(zAt,"FlaxBlenderbotSmallForConditionalGeneration"),zAt.forEach(t),vRr=r(EIe," (BlenderbotSmall model)"),EIe.forEach(t),FRr=i(ze),qC=n(ze,"LI",{});var CIe=s(qC);z7e=n(CIe,"STRONG",{});var WAt=s(z7e);TRr=r(WAt,"encoder-decoder"),WAt.forEach(t),MRr=r(CIe," \u2014 "),qY=n(CIe,"A",{href:!0});var QAt=s(qY);ERr=r(QAt,"FlaxEncoderDecoderModel"),QAt.forEach(t),CRr=r(CIe," (Encoder decoder model)"),CIe.forEach(t),wRr=i(ze),NC=n(ze,"LI",{});var wIe=s(NC);W7e=n(wIe,"STRONG",{});var HAt=s(W7e);ARr=r(HAt,"marian"),HAt.forEach(t),yRr=r(wIe," \u2014 "),NY=n(wIe,"A",{href:!0});var UAt=s(NY);LRr=r(UAt,"FlaxMarianMTModel"),UAt.forEach(t),xRr=r(wIe," (Marian model)"),wIe.forEach(t),$Rr=i(ze),jC=n(ze,"LI",{});var AIe=s(jC);Q7e=n(AIe,"STRONG",{});var JAt=s(Q7e);kRr=r(JAt,"mbart"),JAt.forEach(t),SRr=r(AIe," \u2014 "),jY=n(AIe,"A",{href:!0});var YAt=s(jY);RRr=r(YAt,"FlaxMBartForConditionalGeneration"),YAt.forEach(t),PRr=r(AIe," (mBART model)"),AIe.forEach(t),BRr=i(ze),DC=n(ze,"LI",{});var yIe=s(DC);H7e=n(yIe,"STRONG",{});var KAt=s(H7e);IRr=r(KAt,"mt5"),KAt.forEach(t),qRr=r(yIe," \u2014 "),DY=n(yIe,"A",{href:!0});var ZAt=s(DY);NRr=r(ZAt,"FlaxMT5ForConditionalGeneration"),ZAt.forEach(t),jRr=r(yIe," (mT5 model)"),yIe.forEach(t),DRr=i(ze),GC=n(ze,"LI",{});var LIe=s(GC);U7e=n(LIe,"STRONG",{});var eyt=s(U7e);GRr=r(eyt,"pegasus"),eyt.forEach(t),ORr=r(LIe," \u2014 "),GY=n(LIe,"A",{href:!0});var oyt=s(GY);VRr=r(oyt,"FlaxPegasusForConditionalGeneration"),oyt.forEach(t),XRr=r(LIe," (Pegasus model)"),LIe.forEach(t),zRr=i(ze),OC=n(ze,"LI",{});var xIe=s(OC);J7e=n(xIe,"STRONG",{});var ryt=s(J7e);WRr=r(ryt,"t5"),ryt.forEach(t),QRr=r(xIe," \u2014 "),OY=n(xIe,"A",{href:!0});var tyt=s(OY);HRr=r(tyt,"FlaxT5ForConditionalGeneration"),tyt.forEach(t),URr=r(xIe," (T5 model)"),xIe.forEach(t),ze.forEach(t),JRr=i(Jl),T(VC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),nje=i(f),Xc=n(f,"H2",{class:!0});var mGe=s(Xc);XC=n(mGe,"A",{id:!0,class:!0,href:!0});var ayt=s(XC);Y7e=n(ayt,"SPAN",{});var nyt=s(Y7e);T(G9.$$.fragment,nyt),nyt.forEach(t),ayt.forEach(t),YRr=i(mGe),K7e=n(mGe,"SPAN",{});var syt=s(K7e);KRr=r(syt,"FlaxAutoModelForSequenceClassification"),syt.forEach(t),mGe.forEach(t),sje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(O9.$$.fragment,Yl),ZRr=i(Yl),zc=n(Yl,"P",{});var Lee=s(zc);ePr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VY=n(Lee,"A",{href:!0});var lyt=s(VY);oPr=r(lyt,"from_pretrained()"),lyt.forEach(t),rPr=r(Lee," class method or the "),XY=n(Lee,"A",{href:!0});var iyt=s(XY);tPr=r(iyt,"from_config()"),iyt.forEach(t),aPr=r(Lee,` class
method.`),Lee.forEach(t),nPr=i(Yl),V9=n(Yl,"P",{});var gGe=s(V9);sPr=r(gGe,"This class cannot be instantiated directly using "),Z7e=n(gGe,"CODE",{});var dyt=s(Z7e);lPr=r(dyt,"__init__()"),dyt.forEach(t),iPr=r(gGe," (throws an error)."),gGe.forEach(t),dPr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var eA=s(Wt);T(X9.$$.fragment,eA),cPr=i(eA),eMe=n(eA,"P",{});var cyt=s(eMe);fPr=r(cyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cyt.forEach(t),mPr=i(eA),Wc=n(eA,"P",{});var xee=s(Wc);gPr=r(xee,`Note:
Loading a model from its configuration file does `),oMe=n(xee,"STRONG",{});var fyt=s(oMe);hPr=r(fyt,"not"),fyt.forEach(t),pPr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(xee,"A",{href:!0});var myt=s(zY);uPr=r(myt,"from_pretrained()"),myt.forEach(t),_Pr=r(xee," to load the model weights."),xee.forEach(t),bPr=i(eA),T(zC.$$.fragment,eA),eA.forEach(t),vPr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(z9.$$.fragment,Kl),FPr=i(Kl),rMe=n(Kl,"P",{});var gyt=s(rMe);TPr=r(gyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gyt.forEach(t),MPr=i(Kl),vn=n(Kl,"P",{});var oA=s(vn);EPr=r(oA,"The model class to instantiate is selected based on the "),tMe=n(oA,"CODE",{});var hyt=s(tMe);CPr=r(hyt,"model_type"),hyt.forEach(t),wPr=r(oA,` property of the config object (either
passed as an argument or loaded from `),aMe=n(oA,"CODE",{});var pyt=s(aMe);APr=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),yPr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(oA,"CODE",{});var uyt=s(nMe);LPr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),xPr=r(oA,":"),oA.forEach(t),$Pr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);WC=n(qe,"LI",{});var $Ie=s(WC);sMe=n($Ie,"STRONG",{});var _yt=s(sMe);kPr=r(_yt,"albert"),_yt.forEach(t),SPr=r($Ie," \u2014 "),WY=n($Ie,"A",{href:!0});var byt=s(WY);RPr=r(byt,"FlaxAlbertForSequenceClassification"),byt.forEach(t),PPr=r($Ie," (ALBERT model)"),$Ie.forEach(t),BPr=i(qe),QC=n(qe,"LI",{});var kIe=s(QC);lMe=n(kIe,"STRONG",{});var vyt=s(lMe);IPr=r(vyt,"bart"),vyt.forEach(t),qPr=r(kIe," \u2014 "),QY=n(kIe,"A",{href:!0});var Fyt=s(QY);NPr=r(Fyt,"FlaxBartForSequenceClassification"),Fyt.forEach(t),jPr=r(kIe," (BART model)"),kIe.forEach(t),DPr=i(qe),HC=n(qe,"LI",{});var SIe=s(HC);iMe=n(SIe,"STRONG",{});var Tyt=s(iMe);GPr=r(Tyt,"bert"),Tyt.forEach(t),OPr=r(SIe," \u2014 "),HY=n(SIe,"A",{href:!0});var Myt=s(HY);VPr=r(Myt,"FlaxBertForSequenceClassification"),Myt.forEach(t),XPr=r(SIe," (BERT model)"),SIe.forEach(t),zPr=i(qe),UC=n(qe,"LI",{});var RIe=s(UC);dMe=n(RIe,"STRONG",{});var Eyt=s(dMe);WPr=r(Eyt,"big_bird"),Eyt.forEach(t),QPr=r(RIe," \u2014 "),UY=n(RIe,"A",{href:!0});var Cyt=s(UY);HPr=r(Cyt,"FlaxBigBirdForSequenceClassification"),Cyt.forEach(t),UPr=r(RIe," (BigBird model)"),RIe.forEach(t),JPr=i(qe),JC=n(qe,"LI",{});var PIe=s(JC);cMe=n(PIe,"STRONG",{});var wyt=s(cMe);YPr=r(wyt,"distilbert"),wyt.forEach(t),KPr=r(PIe," \u2014 "),JY=n(PIe,"A",{href:!0});var Ayt=s(JY);ZPr=r(Ayt,"FlaxDistilBertForSequenceClassification"),Ayt.forEach(t),eBr=r(PIe," (DistilBERT model)"),PIe.forEach(t),oBr=i(qe),YC=n(qe,"LI",{});var BIe=s(YC);fMe=n(BIe,"STRONG",{});var yyt=s(fMe);rBr=r(yyt,"electra"),yyt.forEach(t),tBr=r(BIe," \u2014 "),YY=n(BIe,"A",{href:!0});var Lyt=s(YY);aBr=r(Lyt,"FlaxElectraForSequenceClassification"),Lyt.forEach(t),nBr=r(BIe," (ELECTRA model)"),BIe.forEach(t),sBr=i(qe),KC=n(qe,"LI",{});var IIe=s(KC);mMe=n(IIe,"STRONG",{});var xyt=s(mMe);lBr=r(xyt,"mbart"),xyt.forEach(t),iBr=r(IIe," \u2014 "),KY=n(IIe,"A",{href:!0});var $yt=s(KY);dBr=r($yt,"FlaxMBartForSequenceClassification"),$yt.forEach(t),cBr=r(IIe," (mBART model)"),IIe.forEach(t),fBr=i(qe),ZC=n(qe,"LI",{});var qIe=s(ZC);gMe=n(qIe,"STRONG",{});var kyt=s(gMe);mBr=r(kyt,"roberta"),kyt.forEach(t),gBr=r(qIe," \u2014 "),ZY=n(qIe,"A",{href:!0});var Syt=s(ZY);hBr=r(Syt,"FlaxRobertaForSequenceClassification"),Syt.forEach(t),pBr=r(qIe," (RoBERTa model)"),qIe.forEach(t),uBr=i(qe),e5=n(qe,"LI",{});var NIe=s(e5);hMe=n(NIe,"STRONG",{});var Ryt=s(hMe);_Br=r(Ryt,"roformer"),Ryt.forEach(t),bBr=r(NIe," \u2014 "),eK=n(NIe,"A",{href:!0});var Pyt=s(eK);vBr=r(Pyt,"FlaxRoFormerForSequenceClassification"),Pyt.forEach(t),FBr=r(NIe," (RoFormer model)"),NIe.forEach(t),TBr=i(qe),o5=n(qe,"LI",{});var jIe=s(o5);pMe=n(jIe,"STRONG",{});var Byt=s(pMe);MBr=r(Byt,"xlm-roberta"),Byt.forEach(t),EBr=r(jIe," \u2014 "),oK=n(jIe,"A",{href:!0});var Iyt=s(oK);CBr=r(Iyt,"FlaxXLMRobertaForSequenceClassification"),Iyt.forEach(t),wBr=r(jIe," (XLM-RoBERTa model)"),jIe.forEach(t),qe.forEach(t),ABr=i(Kl),T(r5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),lje=i(f),Qc=n(f,"H2",{class:!0});var hGe=s(Qc);t5=n(hGe,"A",{id:!0,class:!0,href:!0});var qyt=s(t5);uMe=n(qyt,"SPAN",{});var Nyt=s(uMe);T(W9.$$.fragment,Nyt),Nyt.forEach(t),qyt.forEach(t),yBr=i(hGe),_Me=n(hGe,"SPAN",{});var jyt=s(_Me);LBr=r(jyt,"FlaxAutoModelForQuestionAnswering"),jyt.forEach(t),hGe.forEach(t),ije=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(Q9.$$.fragment,Zl),xBr=i(Zl),Hc=n(Zl,"P",{});var $ee=s(Hc);$Br=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rK=n($ee,"A",{href:!0});var Dyt=s(rK);kBr=r(Dyt,"from_pretrained()"),Dyt.forEach(t),SBr=r($ee," class method or the "),tK=n($ee,"A",{href:!0});var Gyt=s(tK);RBr=r(Gyt,"from_config()"),Gyt.forEach(t),PBr=r($ee,` class
method.`),$ee.forEach(t),BBr=i(Zl),H9=n(Zl,"P",{});var pGe=s(H9);IBr=r(pGe,"This class cannot be instantiated directly using "),bMe=n(pGe,"CODE",{});var Oyt=s(bMe);qBr=r(Oyt,"__init__()"),Oyt.forEach(t),NBr=r(pGe," (throws an error)."),pGe.forEach(t),jBr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var rA=s(Qt);T(U9.$$.fragment,rA),DBr=i(rA),vMe=n(rA,"P",{});var Vyt=s(vMe);GBr=r(Vyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vyt.forEach(t),OBr=i(rA),Uc=n(rA,"P",{});var kee=s(Uc);VBr=r(kee,`Note:
Loading a model from its configuration file does `),FMe=n(kee,"STRONG",{});var Xyt=s(FMe);XBr=r(Xyt,"not"),Xyt.forEach(t),zBr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(kee,"A",{href:!0});var zyt=s(aK);WBr=r(zyt,"from_pretrained()"),zyt.forEach(t),QBr=r(kee," to load the model weights."),kee.forEach(t),HBr=i(rA),T(a5.$$.fragment,rA),rA.forEach(t),UBr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(J9.$$.fragment,ei),JBr=i(ei),TMe=n(ei,"P",{});var Wyt=s(TMe);YBr=r(Wyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wyt.forEach(t),KBr=i(ei),Fn=n(ei,"P",{});var tA=s(Fn);ZBr=r(tA,"The model class to instantiate is selected based on the "),MMe=n(tA,"CODE",{});var Qyt=s(MMe);eIr=r(Qyt,"model_type"),Qyt.forEach(t),oIr=r(tA,` property of the config object (either
passed as an argument or loaded from `),EMe=n(tA,"CODE",{});var Hyt=s(EMe);rIr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),tIr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(tA,"CODE",{});var Uyt=s(CMe);aIr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),nIr=r(tA,":"),tA.forEach(t),sIr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);n5=n(Ne,"LI",{});var DIe=s(n5);wMe=n(DIe,"STRONG",{});var Jyt=s(wMe);lIr=r(Jyt,"albert"),Jyt.forEach(t),iIr=r(DIe," \u2014 "),nK=n(DIe,"A",{href:!0});var Yyt=s(nK);dIr=r(Yyt,"FlaxAlbertForQuestionAnswering"),Yyt.forEach(t),cIr=r(DIe," (ALBERT model)"),DIe.forEach(t),fIr=i(Ne),s5=n(Ne,"LI",{});var GIe=s(s5);AMe=n(GIe,"STRONG",{});var Kyt=s(AMe);mIr=r(Kyt,"bart"),Kyt.forEach(t),gIr=r(GIe," \u2014 "),sK=n(GIe,"A",{href:!0});var Zyt=s(sK);hIr=r(Zyt,"FlaxBartForQuestionAnswering"),Zyt.forEach(t),pIr=r(GIe," (BART model)"),GIe.forEach(t),uIr=i(Ne),l5=n(Ne,"LI",{});var OIe=s(l5);yMe=n(OIe,"STRONG",{});var eLt=s(yMe);_Ir=r(eLt,"bert"),eLt.forEach(t),bIr=r(OIe," \u2014 "),lK=n(OIe,"A",{href:!0});var oLt=s(lK);vIr=r(oLt,"FlaxBertForQuestionAnswering"),oLt.forEach(t),FIr=r(OIe," (BERT model)"),OIe.forEach(t),TIr=i(Ne),i5=n(Ne,"LI",{});var VIe=s(i5);LMe=n(VIe,"STRONG",{});var rLt=s(LMe);MIr=r(rLt,"big_bird"),rLt.forEach(t),EIr=r(VIe," \u2014 "),iK=n(VIe,"A",{href:!0});var tLt=s(iK);CIr=r(tLt,"FlaxBigBirdForQuestionAnswering"),tLt.forEach(t),wIr=r(VIe," (BigBird model)"),VIe.forEach(t),AIr=i(Ne),d5=n(Ne,"LI",{});var XIe=s(d5);xMe=n(XIe,"STRONG",{});var aLt=s(xMe);yIr=r(aLt,"distilbert"),aLt.forEach(t),LIr=r(XIe," \u2014 "),dK=n(XIe,"A",{href:!0});var nLt=s(dK);xIr=r(nLt,"FlaxDistilBertForQuestionAnswering"),nLt.forEach(t),$Ir=r(XIe," (DistilBERT model)"),XIe.forEach(t),kIr=i(Ne),c5=n(Ne,"LI",{});var zIe=s(c5);$Me=n(zIe,"STRONG",{});var sLt=s($Me);SIr=r(sLt,"electra"),sLt.forEach(t),RIr=r(zIe," \u2014 "),cK=n(zIe,"A",{href:!0});var lLt=s(cK);PIr=r(lLt,"FlaxElectraForQuestionAnswering"),lLt.forEach(t),BIr=r(zIe," (ELECTRA model)"),zIe.forEach(t),IIr=i(Ne),f5=n(Ne,"LI",{});var WIe=s(f5);kMe=n(WIe,"STRONG",{});var iLt=s(kMe);qIr=r(iLt,"mbart"),iLt.forEach(t),NIr=r(WIe," \u2014 "),fK=n(WIe,"A",{href:!0});var dLt=s(fK);jIr=r(dLt,"FlaxMBartForQuestionAnswering"),dLt.forEach(t),DIr=r(WIe," (mBART model)"),WIe.forEach(t),GIr=i(Ne),m5=n(Ne,"LI",{});var QIe=s(m5);SMe=n(QIe,"STRONG",{});var cLt=s(SMe);OIr=r(cLt,"roberta"),cLt.forEach(t),VIr=r(QIe," \u2014 "),mK=n(QIe,"A",{href:!0});var fLt=s(mK);XIr=r(fLt,"FlaxRobertaForQuestionAnswering"),fLt.forEach(t),zIr=r(QIe," (RoBERTa model)"),QIe.forEach(t),WIr=i(Ne),g5=n(Ne,"LI",{});var HIe=s(g5);RMe=n(HIe,"STRONG",{});var mLt=s(RMe);QIr=r(mLt,"roformer"),mLt.forEach(t),HIr=r(HIe," \u2014 "),gK=n(HIe,"A",{href:!0});var gLt=s(gK);UIr=r(gLt,"FlaxRoFormerForQuestionAnswering"),gLt.forEach(t),JIr=r(HIe," (RoFormer model)"),HIe.forEach(t),YIr=i(Ne),h5=n(Ne,"LI",{});var UIe=s(h5);PMe=n(UIe,"STRONG",{});var hLt=s(PMe);KIr=r(hLt,"xlm-roberta"),hLt.forEach(t),ZIr=r(UIe," \u2014 "),hK=n(UIe,"A",{href:!0});var pLt=s(hK);eqr=r(pLt,"FlaxXLMRobertaForQuestionAnswering"),pLt.forEach(t),oqr=r(UIe," (XLM-RoBERTa model)"),UIe.forEach(t),Ne.forEach(t),rqr=i(ei),T(p5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),dje=i(f),Jc=n(f,"H2",{class:!0});var uGe=s(Jc);u5=n(uGe,"A",{id:!0,class:!0,href:!0});var uLt=s(u5);BMe=n(uLt,"SPAN",{});var _Lt=s(BMe);T(Y9.$$.fragment,_Lt),_Lt.forEach(t),uLt.forEach(t),tqr=i(uGe),IMe=n(uGe,"SPAN",{});var bLt=s(IMe);aqr=r(bLt,"FlaxAutoModelForTokenClassification"),bLt.forEach(t),uGe.forEach(t),cje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(K9.$$.fragment,oi),nqr=i(oi),Yc=n(oi,"P",{});var See=s(Yc);sqr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pK=n(See,"A",{href:!0});var vLt=s(pK);lqr=r(vLt,"from_pretrained()"),vLt.forEach(t),iqr=r(See," class method or the "),uK=n(See,"A",{href:!0});var FLt=s(uK);dqr=r(FLt,"from_config()"),FLt.forEach(t),cqr=r(See,` class
method.`),See.forEach(t),fqr=i(oi),Z9=n(oi,"P",{});var _Ge=s(Z9);mqr=r(_Ge,"This class cannot be instantiated directly using "),qMe=n(_Ge,"CODE",{});var TLt=s(qMe);gqr=r(TLt,"__init__()"),TLt.forEach(t),hqr=r(_Ge," (throws an error)."),_Ge.forEach(t),pqr=i(oi),Ht=n(oi,"DIV",{class:!0});var aA=s(Ht);T(ex.$$.fragment,aA),uqr=i(aA),NMe=n(aA,"P",{});var MLt=s(NMe);_qr=r(MLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MLt.forEach(t),bqr=i(aA),Kc=n(aA,"P",{});var Ree=s(Kc);vqr=r(Ree,`Note:
Loading a model from its configuration file does `),jMe=n(Ree,"STRONG",{});var ELt=s(jMe);Fqr=r(ELt,"not"),ELt.forEach(t),Tqr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(Ree,"A",{href:!0});var CLt=s(_K);Mqr=r(CLt,"from_pretrained()"),CLt.forEach(t),Eqr=r(Ree," to load the model weights."),Ree.forEach(t),Cqr=i(aA),T(_5.$$.fragment,aA),aA.forEach(t),wqr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(ox.$$.fragment,ri),Aqr=i(ri),DMe=n(ri,"P",{});var wLt=s(DMe);yqr=r(wLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wLt.forEach(t),Lqr=i(ri),Tn=n(ri,"P",{});var nA=s(Tn);xqr=r(nA,"The model class to instantiate is selected based on the "),GMe=n(nA,"CODE",{});var ALt=s(GMe);$qr=r(ALt,"model_type"),ALt.forEach(t),kqr=r(nA,` property of the config object (either
passed as an argument or loaded from `),OMe=n(nA,"CODE",{});var yLt=s(OMe);Sqr=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),Rqr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(nA,"CODE",{});var LLt=s(VMe);Pqr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),Bqr=r(nA,":"),nA.forEach(t),Iqr=i(ri),De=n(ri,"UL",{});var Fo=s(De);b5=n(Fo,"LI",{});var JIe=s(b5);XMe=n(JIe,"STRONG",{});var xLt=s(XMe);qqr=r(xLt,"albert"),xLt.forEach(t),Nqr=r(JIe," \u2014 "),bK=n(JIe,"A",{href:!0});var $Lt=s(bK);jqr=r($Lt,"FlaxAlbertForTokenClassification"),$Lt.forEach(t),Dqr=r(JIe," (ALBERT model)"),JIe.forEach(t),Gqr=i(Fo),v5=n(Fo,"LI",{});var YIe=s(v5);zMe=n(YIe,"STRONG",{});var kLt=s(zMe);Oqr=r(kLt,"bert"),kLt.forEach(t),Vqr=r(YIe," \u2014 "),vK=n(YIe,"A",{href:!0});var SLt=s(vK);Xqr=r(SLt,"FlaxBertForTokenClassification"),SLt.forEach(t),zqr=r(YIe," (BERT model)"),YIe.forEach(t),Wqr=i(Fo),F5=n(Fo,"LI",{});var KIe=s(F5);WMe=n(KIe,"STRONG",{});var RLt=s(WMe);Qqr=r(RLt,"big_bird"),RLt.forEach(t),Hqr=r(KIe," \u2014 "),FK=n(KIe,"A",{href:!0});var PLt=s(FK);Uqr=r(PLt,"FlaxBigBirdForTokenClassification"),PLt.forEach(t),Jqr=r(KIe," (BigBird model)"),KIe.forEach(t),Yqr=i(Fo),T5=n(Fo,"LI",{});var ZIe=s(T5);QMe=n(ZIe,"STRONG",{});var BLt=s(QMe);Kqr=r(BLt,"distilbert"),BLt.forEach(t),Zqr=r(ZIe," \u2014 "),TK=n(ZIe,"A",{href:!0});var ILt=s(TK);eNr=r(ILt,"FlaxDistilBertForTokenClassification"),ILt.forEach(t),oNr=r(ZIe," (DistilBERT model)"),ZIe.forEach(t),rNr=i(Fo),M5=n(Fo,"LI",{});var eqe=s(M5);HMe=n(eqe,"STRONG",{});var qLt=s(HMe);tNr=r(qLt,"electra"),qLt.forEach(t),aNr=r(eqe," \u2014 "),MK=n(eqe,"A",{href:!0});var NLt=s(MK);nNr=r(NLt,"FlaxElectraForTokenClassification"),NLt.forEach(t),sNr=r(eqe," (ELECTRA model)"),eqe.forEach(t),lNr=i(Fo),E5=n(Fo,"LI",{});var oqe=s(E5);UMe=n(oqe,"STRONG",{});var jLt=s(UMe);iNr=r(jLt,"roberta"),jLt.forEach(t),dNr=r(oqe," \u2014 "),EK=n(oqe,"A",{href:!0});var DLt=s(EK);cNr=r(DLt,"FlaxRobertaForTokenClassification"),DLt.forEach(t),fNr=r(oqe," (RoBERTa model)"),oqe.forEach(t),mNr=i(Fo),C5=n(Fo,"LI",{});var rqe=s(C5);JMe=n(rqe,"STRONG",{});var GLt=s(JMe);gNr=r(GLt,"roformer"),GLt.forEach(t),hNr=r(rqe," \u2014 "),CK=n(rqe,"A",{href:!0});var OLt=s(CK);pNr=r(OLt,"FlaxRoFormerForTokenClassification"),OLt.forEach(t),uNr=r(rqe," (RoFormer model)"),rqe.forEach(t),_Nr=i(Fo),w5=n(Fo,"LI",{});var tqe=s(w5);YMe=n(tqe,"STRONG",{});var VLt=s(YMe);bNr=r(VLt,"xlm-roberta"),VLt.forEach(t),vNr=r(tqe," \u2014 "),wK=n(tqe,"A",{href:!0});var XLt=s(wK);FNr=r(XLt,"FlaxXLMRobertaForTokenClassification"),XLt.forEach(t),TNr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),Fo.forEach(t),MNr=i(ri),T(A5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),fje=i(f),Zc=n(f,"H2",{class:!0});var bGe=s(Zc);y5=n(bGe,"A",{id:!0,class:!0,href:!0});var zLt=s(y5);KMe=n(zLt,"SPAN",{});var WLt=s(KMe);T(rx.$$.fragment,WLt),WLt.forEach(t),zLt.forEach(t),ENr=i(bGe),ZMe=n(bGe,"SPAN",{});var QLt=s(ZMe);CNr=r(QLt,"FlaxAutoModelForMultipleChoice"),QLt.forEach(t),bGe.forEach(t),mje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(tx.$$.fragment,ti),wNr=i(ti),ef=n(ti,"P",{});var Pee=s(ef);ANr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=n(Pee,"A",{href:!0});var HLt=s(AK);yNr=r(HLt,"from_pretrained()"),HLt.forEach(t),LNr=r(Pee," class method or the "),yK=n(Pee,"A",{href:!0});var ULt=s(yK);xNr=r(ULt,"from_config()"),ULt.forEach(t),$Nr=r(Pee,` class
method.`),Pee.forEach(t),kNr=i(ti),ax=n(ti,"P",{});var vGe=s(ax);SNr=r(vGe,"This class cannot be instantiated directly using "),e4e=n(vGe,"CODE",{});var JLt=s(e4e);RNr=r(JLt,"__init__()"),JLt.forEach(t),PNr=r(vGe," (throws an error)."),vGe.forEach(t),BNr=i(ti),Ut=n(ti,"DIV",{class:!0});var sA=s(Ut);T(nx.$$.fragment,sA),INr=i(sA),o4e=n(sA,"P",{});var YLt=s(o4e);qNr=r(YLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YLt.forEach(t),NNr=i(sA),of=n(sA,"P",{});var Bee=s(of);jNr=r(Bee,`Note:
Loading a model from its configuration file does `),r4e=n(Bee,"STRONG",{});var KLt=s(r4e);DNr=r(KLt,"not"),KLt.forEach(t),GNr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Bee,"A",{href:!0});var ZLt=s(LK);ONr=r(ZLt,"from_pretrained()"),ZLt.forEach(t),VNr=r(Bee," to load the model weights."),Bee.forEach(t),XNr=i(sA),T(L5.$$.fragment,sA),sA.forEach(t),zNr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(sx.$$.fragment,ai),WNr=i(ai),t4e=n(ai,"P",{});var e8t=s(t4e);QNr=r(e8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),e8t.forEach(t),HNr=i(ai),Mn=n(ai,"P",{});var lA=s(Mn);UNr=r(lA,"The model class to instantiate is selected based on the "),a4e=n(lA,"CODE",{});var o8t=s(a4e);JNr=r(o8t,"model_type"),o8t.forEach(t),YNr=r(lA,` property of the config object (either
passed as an argument or loaded from `),n4e=n(lA,"CODE",{});var r8t=s(n4e);KNr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),ZNr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(lA,"CODE",{});var t8t=s(s4e);ejr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),ojr=r(lA,":"),lA.forEach(t),rjr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);x5=n(To,"LI",{});var aqe=s(x5);l4e=n(aqe,"STRONG",{});var a8t=s(l4e);tjr=r(a8t,"albert"),a8t.forEach(t),ajr=r(aqe," \u2014 "),xK=n(aqe,"A",{href:!0});var n8t=s(xK);njr=r(n8t,"FlaxAlbertForMultipleChoice"),n8t.forEach(t),sjr=r(aqe," (ALBERT model)"),aqe.forEach(t),ljr=i(To),$5=n(To,"LI",{});var nqe=s($5);i4e=n(nqe,"STRONG",{});var s8t=s(i4e);ijr=r(s8t,"bert"),s8t.forEach(t),djr=r(nqe," \u2014 "),$K=n(nqe,"A",{href:!0});var l8t=s($K);cjr=r(l8t,"FlaxBertForMultipleChoice"),l8t.forEach(t),fjr=r(nqe," (BERT model)"),nqe.forEach(t),mjr=i(To),k5=n(To,"LI",{});var sqe=s(k5);d4e=n(sqe,"STRONG",{});var i8t=s(d4e);gjr=r(i8t,"big_bird"),i8t.forEach(t),hjr=r(sqe," \u2014 "),kK=n(sqe,"A",{href:!0});var d8t=s(kK);pjr=r(d8t,"FlaxBigBirdForMultipleChoice"),d8t.forEach(t),ujr=r(sqe," (BigBird model)"),sqe.forEach(t),_jr=i(To),S5=n(To,"LI",{});var lqe=s(S5);c4e=n(lqe,"STRONG",{});var c8t=s(c4e);bjr=r(c8t,"distilbert"),c8t.forEach(t),vjr=r(lqe," \u2014 "),SK=n(lqe,"A",{href:!0});var f8t=s(SK);Fjr=r(f8t,"FlaxDistilBertForMultipleChoice"),f8t.forEach(t),Tjr=r(lqe," (DistilBERT model)"),lqe.forEach(t),Mjr=i(To),R5=n(To,"LI",{});var iqe=s(R5);f4e=n(iqe,"STRONG",{});var m8t=s(f4e);Ejr=r(m8t,"electra"),m8t.forEach(t),Cjr=r(iqe," \u2014 "),RK=n(iqe,"A",{href:!0});var g8t=s(RK);wjr=r(g8t,"FlaxElectraForMultipleChoice"),g8t.forEach(t),Ajr=r(iqe," (ELECTRA model)"),iqe.forEach(t),yjr=i(To),P5=n(To,"LI",{});var dqe=s(P5);m4e=n(dqe,"STRONG",{});var h8t=s(m4e);Ljr=r(h8t,"roberta"),h8t.forEach(t),xjr=r(dqe," \u2014 "),PK=n(dqe,"A",{href:!0});var p8t=s(PK);$jr=r(p8t,"FlaxRobertaForMultipleChoice"),p8t.forEach(t),kjr=r(dqe," (RoBERTa model)"),dqe.forEach(t),Sjr=i(To),B5=n(To,"LI",{});var cqe=s(B5);g4e=n(cqe,"STRONG",{});var u8t=s(g4e);Rjr=r(u8t,"roformer"),u8t.forEach(t),Pjr=r(cqe," \u2014 "),BK=n(cqe,"A",{href:!0});var _8t=s(BK);Bjr=r(_8t,"FlaxRoFormerForMultipleChoice"),_8t.forEach(t),Ijr=r(cqe," (RoFormer model)"),cqe.forEach(t),qjr=i(To),I5=n(To,"LI",{});var fqe=s(I5);h4e=n(fqe,"STRONG",{});var b8t=s(h4e);Njr=r(b8t,"xlm-roberta"),b8t.forEach(t),jjr=r(fqe," \u2014 "),IK=n(fqe,"A",{href:!0});var v8t=s(IK);Djr=r(v8t,"FlaxXLMRobertaForMultipleChoice"),v8t.forEach(t),Gjr=r(fqe," (XLM-RoBERTa model)"),fqe.forEach(t),To.forEach(t),Ojr=i(ai),T(q5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),gje=i(f),rf=n(f,"H2",{class:!0});var FGe=s(rf);N5=n(FGe,"A",{id:!0,class:!0,href:!0});var F8t=s(N5);p4e=n(F8t,"SPAN",{});var T8t=s(p4e);T(lx.$$.fragment,T8t),T8t.forEach(t),F8t.forEach(t),Vjr=i(FGe),u4e=n(FGe,"SPAN",{});var M8t=s(u4e);Xjr=r(M8t,"FlaxAutoModelForNextSentencePrediction"),M8t.forEach(t),FGe.forEach(t),hje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(ix.$$.fragment,ni),zjr=i(ni),tf=n(ni,"P",{});var Iee=s(tf);Wjr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qK=n(Iee,"A",{href:!0});var E8t=s(qK);Qjr=r(E8t,"from_pretrained()"),E8t.forEach(t),Hjr=r(Iee," class method or the "),NK=n(Iee,"A",{href:!0});var C8t=s(NK);Ujr=r(C8t,"from_config()"),C8t.forEach(t),Jjr=r(Iee,` class
method.`),Iee.forEach(t),Yjr=i(ni),dx=n(ni,"P",{});var TGe=s(dx);Kjr=r(TGe,"This class cannot be instantiated directly using "),_4e=n(TGe,"CODE",{});var w8t=s(_4e);Zjr=r(w8t,"__init__()"),w8t.forEach(t),eDr=r(TGe," (throws an error)."),TGe.forEach(t),oDr=i(ni),Jt=n(ni,"DIV",{class:!0});var iA=s(Jt);T(cx.$$.fragment,iA),rDr=i(iA),b4e=n(iA,"P",{});var A8t=s(b4e);tDr=r(A8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),A8t.forEach(t),aDr=i(iA),af=n(iA,"P",{});var qee=s(af);nDr=r(qee,`Note:
Loading a model from its configuration file does `),v4e=n(qee,"STRONG",{});var y8t=s(v4e);sDr=r(y8t,"not"),y8t.forEach(t),lDr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(qee,"A",{href:!0});var L8t=s(jK);iDr=r(L8t,"from_pretrained()"),L8t.forEach(t),dDr=r(qee," to load the model weights."),qee.forEach(t),cDr=i(iA),T(j5.$$.fragment,iA),iA.forEach(t),fDr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(fx.$$.fragment,si),mDr=i(si),F4e=n(si,"P",{});var x8t=s(F4e);gDr=r(x8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),x8t.forEach(t),hDr=i(si),En=n(si,"P",{});var dA=s(En);pDr=r(dA,"The model class to instantiate is selected based on the "),T4e=n(dA,"CODE",{});var $8t=s(T4e);uDr=r($8t,"model_type"),$8t.forEach(t),_Dr=r(dA,` property of the config object (either
passed as an argument or loaded from `),M4e=n(dA,"CODE",{});var k8t=s(M4e);bDr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),vDr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(dA,"CODE",{});var S8t=s(E4e);FDr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),TDr=r(dA,":"),dA.forEach(t),MDr=i(si),C4e=n(si,"UL",{});var R8t=s(C4e);D5=n(R8t,"LI",{});var mqe=s(D5);w4e=n(mqe,"STRONG",{});var P8t=s(w4e);EDr=r(P8t,"bert"),P8t.forEach(t),CDr=r(mqe," \u2014 "),DK=n(mqe,"A",{href:!0});var B8t=s(DK);wDr=r(B8t,"FlaxBertForNextSentencePrediction"),B8t.forEach(t),ADr=r(mqe," (BERT model)"),mqe.forEach(t),R8t.forEach(t),yDr=i(si),T(G5.$$.fragment,si),si.forEach(t),ni.forEach(t),pje=i(f),nf=n(f,"H2",{class:!0});var MGe=s(nf);O5=n(MGe,"A",{id:!0,class:!0,href:!0});var I8t=s(O5);A4e=n(I8t,"SPAN",{});var q8t=s(A4e);T(mx.$$.fragment,q8t),q8t.forEach(t),I8t.forEach(t),LDr=i(MGe),y4e=n(MGe,"SPAN",{});var N8t=s(y4e);xDr=r(N8t,"FlaxAutoModelForImageClassification"),N8t.forEach(t),MGe.forEach(t),uje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(gx.$$.fragment,li),$Dr=i(li),sf=n(li,"P",{});var Nee=s(sf);kDr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GK=n(Nee,"A",{href:!0});var j8t=s(GK);SDr=r(j8t,"from_pretrained()"),j8t.forEach(t),RDr=r(Nee," class method or the "),OK=n(Nee,"A",{href:!0});var D8t=s(OK);PDr=r(D8t,"from_config()"),D8t.forEach(t),BDr=r(Nee,` class
method.`),Nee.forEach(t),IDr=i(li),hx=n(li,"P",{});var EGe=s(hx);qDr=r(EGe,"This class cannot be instantiated directly using "),L4e=n(EGe,"CODE",{});var G8t=s(L4e);NDr=r(G8t,"__init__()"),G8t.forEach(t),jDr=r(EGe," (throws an error)."),EGe.forEach(t),DDr=i(li),Yt=n(li,"DIV",{class:!0});var cA=s(Yt);T(px.$$.fragment,cA),GDr=i(cA),x4e=n(cA,"P",{});var O8t=s(x4e);ODr=r(O8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),O8t.forEach(t),VDr=i(cA),lf=n(cA,"P",{});var jee=s(lf);XDr=r(jee,`Note:
Loading a model from its configuration file does `),$4e=n(jee,"STRONG",{});var V8t=s($4e);zDr=r(V8t,"not"),V8t.forEach(t),WDr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(jee,"A",{href:!0});var X8t=s(VK);QDr=r(X8t,"from_pretrained()"),X8t.forEach(t),HDr=r(jee," to load the model weights."),jee.forEach(t),UDr=i(cA),T(V5.$$.fragment,cA),cA.forEach(t),JDr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(ux.$$.fragment,ii),YDr=i(ii),k4e=n(ii,"P",{});var z8t=s(k4e);KDr=r(z8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),z8t.forEach(t),ZDr=i(ii),Cn=n(ii,"P",{});var fA=s(Cn);eGr=r(fA,"The model class to instantiate is selected based on the "),S4e=n(fA,"CODE",{});var W8t=s(S4e);oGr=r(W8t,"model_type"),W8t.forEach(t),rGr=r(fA,` property of the config object (either
passed as an argument or loaded from `),R4e=n(fA,"CODE",{});var Q8t=s(R4e);tGr=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),aGr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(fA,"CODE",{});var H8t=s(P4e);nGr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),sGr=r(fA,":"),fA.forEach(t),lGr=i(ii),_x=n(ii,"UL",{});var CGe=s(_x);X5=n(CGe,"LI",{});var gqe=s(X5);B4e=n(gqe,"STRONG",{});var U8t=s(B4e);iGr=r(U8t,"beit"),U8t.forEach(t),dGr=r(gqe," \u2014 "),XK=n(gqe,"A",{href:!0});var J8t=s(XK);cGr=r(J8t,"FlaxBeitForImageClassification"),J8t.forEach(t),fGr=r(gqe," (BEiT model)"),gqe.forEach(t),mGr=i(CGe),z5=n(CGe,"LI",{});var hqe=s(z5);I4e=n(hqe,"STRONG",{});var Y8t=s(I4e);gGr=r(Y8t,"vit"),Y8t.forEach(t),hGr=r(hqe," \u2014 "),zK=n(hqe,"A",{href:!0});var K8t=s(zK);pGr=r(K8t,"FlaxViTForImageClassification"),K8t.forEach(t),uGr=r(hqe," (ViT model)"),hqe.forEach(t),CGe.forEach(t),_Gr=i(ii),T(W5.$$.fragment,ii),ii.forEach(t),li.forEach(t),_je=i(f),df=n(f,"H2",{class:!0});var wGe=s(df);Q5=n(wGe,"A",{id:!0,class:!0,href:!0});var Z8t=s(Q5);q4e=n(Z8t,"SPAN",{});var e9t=s(q4e);T(bx.$$.fragment,e9t),e9t.forEach(t),Z8t.forEach(t),bGr=i(wGe),N4e=n(wGe,"SPAN",{});var o9t=s(N4e);vGr=r(o9t,"FlaxAutoModelForVision2Seq"),o9t.forEach(t),wGe.forEach(t),bje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(vx.$$.fragment,di),FGr=i(di),cf=n(di,"P",{});var Dee=s(cf);TGr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WK=n(Dee,"A",{href:!0});var r9t=s(WK);MGr=r(r9t,"from_pretrained()"),r9t.forEach(t),EGr=r(Dee," class method or the "),QK=n(Dee,"A",{href:!0});var t9t=s(QK);CGr=r(t9t,"from_config()"),t9t.forEach(t),wGr=r(Dee,` class
method.`),Dee.forEach(t),AGr=i(di),Fx=n(di,"P",{});var AGe=s(Fx);yGr=r(AGe,"This class cannot be instantiated directly using "),j4e=n(AGe,"CODE",{});var a9t=s(j4e);LGr=r(a9t,"__init__()"),a9t.forEach(t),xGr=r(AGe," (throws an error)."),AGe.forEach(t),$Gr=i(di),Kt=n(di,"DIV",{class:!0});var mA=s(Kt);T(Tx.$$.fragment,mA),kGr=i(mA),D4e=n(mA,"P",{});var n9t=s(D4e);SGr=r(n9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),n9t.forEach(t),RGr=i(mA),ff=n(mA,"P",{});var Gee=s(ff);PGr=r(Gee,`Note:
Loading a model from its configuration file does `),G4e=n(Gee,"STRONG",{});var s9t=s(G4e);BGr=r(s9t,"not"),s9t.forEach(t),IGr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Gee,"A",{href:!0});var l9t=s(HK);qGr=r(l9t,"from_pretrained()"),l9t.forEach(t),NGr=r(Gee," to load the model weights."),Gee.forEach(t),jGr=i(mA),T(H5.$$.fragment,mA),mA.forEach(t),DGr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Mx.$$.fragment,ci),GGr=i(ci),O4e=n(ci,"P",{});var i9t=s(O4e);OGr=r(i9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),i9t.forEach(t),VGr=i(ci),wn=n(ci,"P",{});var gA=s(wn);XGr=r(gA,"The model class to instantiate is selected based on the "),V4e=n(gA,"CODE",{});var d9t=s(V4e);zGr=r(d9t,"model_type"),d9t.forEach(t),WGr=r(gA,` property of the config object (either
passed as an argument or loaded from `),X4e=n(gA,"CODE",{});var c9t=s(X4e);QGr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),HGr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(gA,"CODE",{});var f9t=s(z4e);UGr=r(f9t,"pretrained_model_name_or_path"),f9t.forEach(t),JGr=r(gA,":"),gA.forEach(t),YGr=i(ci),W4e=n(ci,"UL",{});var m9t=s(W4e);U5=n(m9t,"LI",{});var pqe=s(U5);Q4e=n(pqe,"STRONG",{});var g9t=s(Q4e);KGr=r(g9t,"vision-encoder-decoder"),g9t.forEach(t),ZGr=r(pqe," \u2014 "),UK=n(pqe,"A",{href:!0});var h9t=s(UK);eOr=r(h9t,"FlaxVisionEncoderDecoderModel"),h9t.forEach(t),oOr=r(pqe," (Vision Encoder decoder model)"),pqe.forEach(t),m9t.forEach(t),rOr=i(ci),T(J5.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(b$t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(O$,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(V$,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig"),c(X$,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(z$,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig"),c(W$,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig"),c(Q$,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(H$,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig"),c(U$,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(J$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Y$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(K$,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig"),c(Z$,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig"),c(ek,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig"),c(ok,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig"),c(rk,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig"),c(tk,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig"),c(ak,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(nk,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(sk,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(lk,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig"),c(ik,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(dk,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ck,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig"),c(fk,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig"),c(mk,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig"),c(gk,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig"),c(hk,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig"),c(pk,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig"),c(uk,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(_k,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig"),c(bk,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig"),c(vk,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig"),c(Fk,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig"),c(Tk,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig"),c(Mk,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig"),c(Ek,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config"),c(Ck,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(wk,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig"),c(Ak,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig"),c(yk,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig"),c(Lk,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(xk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c($k,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(kk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Sk,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig"),c(Rk,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig"),c(Pk,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig"),c(Bk,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ik,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config"),c(qk,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig"),c(Nk,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(jk,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig"),c(Dk,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Gk,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Ok,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig"),c(Vk,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config"),c(Xk,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(zk,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Wk,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig"),c(Qk,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig"),c(Hk,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Uk,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig"),c(Jk,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Yk,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Kk,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Zk,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagConfig"),c(eS,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmConfig"),c(oS,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig"),c(rS,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig"),c(tS,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig"),c(aS,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig"),c(nS,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig"),c(sS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig"),c(lS,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig"),c(iS,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig"),c(dS,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig"),c(cS,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig"),c(fS,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(mS,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(gS,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(hS,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig"),c(pS,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(uS,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig"),c(_S,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config"),c(bS,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig"),c(vS,"href","/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(FS,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(TS,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig"),c(MS,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ES,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(CS,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig"),c(wS,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig"),c(AS,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(yS,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(LS,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(xS,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig"),c($S,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(kS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(SS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(RS,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig"),c(PS,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig"),c(BS,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig"),c(IS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(qS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(NS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(jS,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig"),c(DS,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig"),c(GS,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"id","transformers.AutoTokenizer"),c(Eg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(OS,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(VS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(XS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizer"),c(WS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizerFast"),c(QS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizer"),c(HS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(US,"href","/docs/transformers/pr_17060/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(JS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(YS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(KS,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(ZS,"href","/docs/transformers/pr_17060/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(eR,"href","/docs/transformers/pr_17060/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(oR,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(rR,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(tR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(sR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(lR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(iR,"href","/docs/transformers/pr_17060/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(dR,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizer"),c(cR,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineTokenizer"),c(mR,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizer"),c(gR,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hR,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(pR,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizer"),c(_R,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(bR,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(vR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TR,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizer"),c(MR,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(CR,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(wR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(AR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(LR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(xR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizer"),c($R,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(kR,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(SR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizer"),c(RR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(PR,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(BR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizer"),c(IR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(qR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizer"),c(XR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(UR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(JR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(YR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(ZR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(eP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(oP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(rP,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizer"),c(tP,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizerFast"),c(aP,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizer"),c(nP,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(sP,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeTokenizer"),c(lP,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(iP,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(cP,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianTokenizer"),c(fP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizer"),c(mP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(gP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(hP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(pP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(uP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17060/en/model_doc/mluke#transformers.MLukeTokenizer"),c(bP,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(vP,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(FP,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(TP,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(MP,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(EP,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(CP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(wP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(yP,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(LP,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xP,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($P,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kP,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(SP,"href","/docs/transformers/pr_17060/en/model_doc/phobert#transformers.PhobertTokenizer"),c(RP,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartTokenizer"),c(PP,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(BP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(IP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagTokenizer"),c(NP,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizer"),c(jP,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizerFast"),c(DP,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizer"),c(GP,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(OP,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizer"),c(VP,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(XP,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(zP,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(WP,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QP,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HP,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(UP,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(JP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(YP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(KP,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizer"),c(ZP,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(eB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(oB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(tB,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(aB,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasTokenizer"),c(nB,"href","/docs/transformers/pr_17060/en/model_doc/tapex#transformers.TapexTokenizer"),c(sB,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(lB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(iB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(mB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizer"),c(gB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(hB,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMTokenizer"),c(pB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(uB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(bB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(TB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(MB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(EB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"id","transformers.AutoFeatureExtractor"),c(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(th,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(CB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(wB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c($B,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(qB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(NB,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoProcessor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(KB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ZB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPProcessor"),c(eI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(oI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(rI,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(tI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nI,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(sI,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(lI,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRProcessor"),c(iI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cI,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltProcessor"),c(fI,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(mI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ep,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(op,"id","transformers.AutoModel"),c(op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(op,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(pI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_I,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bI,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel"),c(vI,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel"),c(FI,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel"),c(TI,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(MI,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(EI,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel"),c(CI,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(wI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(AI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(yI,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel"),c(LI,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel"),c(xI,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel"),c($I,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel"),c(kI,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel"),c(SI,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel"),c(RI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(PI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(BI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(II,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel"),c(qI,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NI,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(jI,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel"),c(DI,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel"),c(GI,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel"),c(OI,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(VI,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel"),c(XI,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel"),c(zI,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel"),c(WI,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel"),c(QI,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel"),c(HI,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel"),c(UI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel"),c(JI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel"),c(YI,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel"),c(KI,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model"),c(ZI,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(eq,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel"),c(oq,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel"),c(rq,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel"),c(tq,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(aq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(nq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(sq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(lq,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel"),c(iq,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel"),c(dq,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel"),c(cq,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel"),c(fq,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model"),c(mq,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel"),c(gq,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel"),c(hq,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel"),c(pq,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(uq,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel"),c(_q,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel"),c(bq,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model"),c(vq,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Fq,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Tq,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTModel"),c(Mq,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel"),c(Eq,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel"),c(Cq,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel"),c(wq,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Aq,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(yq,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Lq,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel"),c(xq,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel"),c($q,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel"),c(kq,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel"),c(Sq,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(Rq,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel"),c(Pq,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel"),c(Bq,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel"),c(Iq,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel"),c(qq,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel"),c(Nq,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(jq,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel"),c(Dq,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Gq,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel"),c(Oq,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model"),c(Vq,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel"),c(Xq,"href","/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zq,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Wq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Qq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Hq,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel"),c(Uq,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel"),c(Jq,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Yq,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Kq,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel"),c(Zq,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rN,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel"),c(tN,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel"),c(aN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel"),c(nN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iN,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel"),c(dN,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel"),c(cN,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ju,"id","transformers.AutoModelForPreTraining"),c(Ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ju,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(fN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hN,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining"),c(pN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uN,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining"),c(_N,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(vN,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(FN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(TN,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(MN,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(EN,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining"),c(wN,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(AN,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining"),c(yN,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining"),c(LN,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xN,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining"),c($N,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(kN,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(RN,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(PN,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(BN,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(IN,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(qN,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(NN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(jN,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(DN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GN,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ON,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VN,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XN,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(WN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(QN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(HN,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(UN,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(JN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(YN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(KN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ej,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(oj,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O_,"id","transformers.AutoModelForCausalLM"),c(O_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(rj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM"),c(sj,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel"),c(lj,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ij,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(dj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(cj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(fj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(mj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(gj,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM"),c(uj,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_j,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(bj,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(vj,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM"),c(Fj,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Tj,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Mj,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTForCausalLM"),c(Cj,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wj,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Aj,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yj,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xj,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($j,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Sj,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Rj,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Bj,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Ij,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Nj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Dj,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.AutoModelForMaskedLM"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Gj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xj,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oD,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tD,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aD,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(mD,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(gD,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pD,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_D,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(bD,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(FD,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(MD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ED,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForSeq2SeqLM"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(CD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(SD,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel"),c(ID,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R1,"id","transformers.AutoModelForSequenceClassification"),c(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(VD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c($G,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($b,"id","transformers.AutoModelForMultipleChoice"),c($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($b,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(jG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d2,"id","transformers.AutoModelForNextSentencePrediction"),c(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(TO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(MO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(EO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(CO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForTokenClassification"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(wO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification"),c($O,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(kO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification"),c(RO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(BO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(IO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(qO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(NO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(jO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(GO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(OO,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(VO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(zO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(WO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(QO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(HO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(YO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(KO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(eV,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(rV,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(aV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(nV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(sV,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(lV,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rv,"id","transformers.AutoModelForQuestionAnswering"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(iV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fV,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(QV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(JV,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(YV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForImageClassification"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(oX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification"),c(nX,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(sX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(lX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification"),c(iX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(dX,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(cX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gX,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hX,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(pX,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(uX,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_X,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification"),c(bX,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification"),c(vX,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForVision2Seq"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(FX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForAudioClassification"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(CX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification"),c($X,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForAudioFrameClassification"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(IX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(DX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(GX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(OX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(VX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForCTC"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(XX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(HX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC"),c(UX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC"),c(JX,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC"),c(YX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(KX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(ZX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(ez,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(oz,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(sz,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForAudioXVector"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(lz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(fz,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(mz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(gz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(hz,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.AutoModelForMaskedImageModeling"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(vz,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Fz,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.AutoModelForObjectDetection"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection"),c(wz,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A6,"id","transformers.AutoModelForImageSegmentation"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k6,"id","transformers.AutoModelForSemanticSegmentation"),c(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c($z,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Pz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Bz,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Iz,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j6,"id","transformers.AutoModelForInstanceSegmentation"),c(j6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X6,"id","transformers.TFAutoModel"),c(X6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X6,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel"),c(zz,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel"),c(Wz,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel"),c(Qz,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Hz,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Uz,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel"),c(Jz,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel"),c(Yz,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel"),c(Kz,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel"),c(Zz,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel"),c(eW,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(oW,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel"),c(rW,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(tW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(aW,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(nW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel"),c(sW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(lW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel"),c(iW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(dW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model"),c(cW,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel"),c(fW,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel"),c(mW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(gW,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel"),c(hW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel"),c(pW,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel"),c(uW,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel"),c(_W,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel"),c(bW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(vW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel"),c(FW,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model"),c(TW,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(MW,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel"),c(EW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel"),c(CW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel"),c(wW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel"),c(AW,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(yW,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinModel"),c(LW,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model"),c(xW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel"),c($W,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(kW,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel"),c(SW,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(RW,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(PW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel"),c(BW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(IW,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModelForPreTraining"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(qW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(GW,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining"),c(VW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(QW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(UW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(YW,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(KW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ZW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(tQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(sQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.TFAutoModelForCausalLM"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(hQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uQ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(_Q,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(vQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(FQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(TQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.TFAutoModelForImageClassification"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(CQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(LQ,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(xQ,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinForImageClassification"),c($Q,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForMaskedLM"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(eH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(nH,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(lH,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(iH,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel"),c(dH,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(cH,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(fH,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(mH,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForSequenceClassification"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(gH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c($H,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForMultipleChoice"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(OH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(iU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(mU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForTokenClassification"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(_U,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(TU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(MU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(CU,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(wU,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(AU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($U,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(kU,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(SU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(RU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(PU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(BU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(IU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(qU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(jU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForQuestionAnswering"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(DU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(KU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForVision2Seq"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.FlaxAutoModel"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(_J,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel"),c(MJ,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel"),c(EJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel"),c(CJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(yJ,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel"),c($J,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SJ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RJ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel"),c(PJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel"),c(BJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IJ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(NJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(jJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model"),c(DJ,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(GJ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel"),c(OJ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(VJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(XJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.FlaxAutoModelForCausalLM"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(UJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(JJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(YJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(KJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ZJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(eY,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(oY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(rY,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForPreTraining"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(lY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(dY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(cY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(fY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(hY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(pY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(_Y,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForMaskedLM"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(wY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(yY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(xY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c($Y,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NY,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForTokenClassification"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(FK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(TK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(MK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(EK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(CK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(AK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(qK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForImageClassification"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(GK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zK,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.FlaxAutoModelForVision2Seq"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(WK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,hA),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,pA),e(We,Ln),e(We,xn),e(xn,uA),e(We,pi),e(We,$n),e($n,_A),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,I$),e(Ae,_i),e(_i,q$),e(Ae,N$),b(f,Eo,_),b(f,wa,_),e(wa,j$),e(wa,bf),e(bf,D$),e(wa,yGe),b(f,uqe,_),b(f,bi,_),e(bi,vf),e(vf,Oee),M(bA,Oee,null),e(bi,LGe),e(bi,Vee),e(Vee,xGe),b(f,_qe,_),b(f,kn,_),e(kn,$Ge),e(kn,Xee),e(Xee,kGe),e(kn,SGe),e(kn,zee),e(zee,RGe),e(kn,PGe),b(f,bqe,_),M(vA,f,_),b(f,vqe,_),b(f,G$,_),e(G$,BGe),b(f,Fqe,_),M(Ff,f,_),b(f,Tqe,_),b(f,vi,_),e(vi,Tf),e(Tf,Wee),M(FA,Wee,null),e(vi,IGe),e(vi,Qee),e(Qee,qGe),b(f,Mqe,_),b(f,Co,_),M(TA,Co,null),e(Co,NGe),e(Co,MA),e(MA,jGe),e(MA,O$),e(O$,DGe),e(MA,GGe),e(Co,OGe),e(Co,EA),e(EA,VGe),e(EA,Hee),e(Hee,XGe),e(EA,zGe),e(Co,WGe),e(Co,Er),M(CA,Er,null),e(Er,QGe),e(Er,Uee),e(Uee,HGe),e(Er,UGe),e(Er,Fi),e(Fi,JGe),e(Fi,Jee),e(Jee,YGe),e(Fi,KGe),e(Fi,Yee),e(Yee,ZGe),e(Fi,eOe),e(Er,oOe),e(Er,A),e(A,Mf),e(Mf,Kee),e(Kee,rOe),e(Mf,tOe),e(Mf,V$),e(V$,aOe),e(Mf,nOe),e(A,sOe),e(A,Ef),e(Ef,Zee),e(Zee,lOe),e(Ef,iOe),e(Ef,X$),e(X$,dOe),e(Ef,cOe),e(A,fOe),e(A,Cf),e(Cf,eoe),e(eoe,mOe),e(Cf,gOe),e(Cf,z$),e(z$,hOe),e(Cf,pOe),e(A,uOe),e(A,wf),e(wf,ooe),e(ooe,_Oe),e(wf,bOe),e(wf,W$),e(W$,vOe),e(wf,FOe),e(A,TOe),e(A,Af),e(Af,roe),e(roe,MOe),e(Af,EOe),e(Af,Q$),e(Q$,COe),e(Af,wOe),e(A,AOe),e(A,yf),e(yf,toe),e(toe,yOe),e(yf,LOe),e(yf,H$),e(H$,xOe),e(yf,$Oe),e(A,kOe),e(A,Lf),e(Lf,aoe),e(aoe,SOe),e(Lf,ROe),e(Lf,U$),e(U$,POe),e(Lf,BOe),e(A,IOe),e(A,xf),e(xf,noe),e(noe,qOe),e(xf,NOe),e(xf,J$),e(J$,jOe),e(xf,DOe),e(A,GOe),e(A,$f),e($f,soe),e(soe,OOe),e($f,VOe),e($f,Y$),e(Y$,XOe),e($f,zOe),e(A,WOe),e(A,kf),e(kf,loe),e(loe,QOe),e(kf,HOe),e(kf,K$),e(K$,UOe),e(kf,JOe),e(A,YOe),e(A,Sf),e(Sf,ioe),e(ioe,KOe),e(Sf,ZOe),e(Sf,Z$),e(Z$,eVe),e(Sf,oVe),e(A,rVe),e(A,Rf),e(Rf,doe),e(doe,tVe),e(Rf,aVe),e(Rf,ek),e(ek,nVe),e(Rf,sVe),e(A,lVe),e(A,Pf),e(Pf,coe),e(coe,iVe),e(Pf,dVe),e(Pf,ok),e(ok,cVe),e(Pf,fVe),e(A,mVe),e(A,Bf),e(Bf,foe),e(foe,gVe),e(Bf,hVe),e(Bf,rk),e(rk,pVe),e(Bf,uVe),e(A,_Ve),e(A,If),e(If,moe),e(moe,bVe),e(If,vVe),e(If,tk),e(tk,FVe),e(If,TVe),e(A,MVe),e(A,qf),e(qf,goe),e(goe,EVe),e(qf,CVe),e(qf,ak),e(ak,wVe),e(qf,AVe),e(A,yVe),e(A,Nf),e(Nf,hoe),e(hoe,LVe),e(Nf,xVe),e(Nf,nk),e(nk,$Ve),e(Nf,kVe),e(A,SVe),e(A,jf),e(jf,poe),e(poe,RVe),e(jf,PVe),e(jf,sk),e(sk,BVe),e(jf,IVe),e(A,qVe),e(A,Df),e(Df,uoe),e(uoe,NVe),e(Df,jVe),e(Df,lk),e(lk,DVe),e(Df,GVe),e(A,OVe),e(A,Gf),e(Gf,_oe),e(_oe,VVe),e(Gf,XVe),e(Gf,ik),e(ik,zVe),e(Gf,WVe),e(A,QVe),e(A,Of),e(Of,boe),e(boe,HVe),e(Of,UVe),e(Of,dk),e(dk,JVe),e(Of,YVe),e(A,KVe),e(A,Vf),e(Vf,voe),e(voe,ZVe),e(Vf,eXe),e(Vf,ck),e(ck,oXe),e(Vf,rXe),e(A,tXe),e(A,Xf),e(Xf,Foe),e(Foe,aXe),e(Xf,nXe),e(Xf,fk),e(fk,sXe),e(Xf,lXe),e(A,iXe),e(A,zf),e(zf,Toe),e(Toe,dXe),e(zf,cXe),e(zf,mk),e(mk,fXe),e(zf,mXe),e(A,gXe),e(A,Wf),e(Wf,Moe),e(Moe,hXe),e(Wf,pXe),e(Wf,gk),e(gk,uXe),e(Wf,_Xe),e(A,bXe),e(A,Qf),e(Qf,Eoe),e(Eoe,vXe),e(Qf,FXe),e(Qf,hk),e(hk,TXe),e(Qf,MXe),e(A,EXe),e(A,Hf),e(Hf,Coe),e(Coe,CXe),e(Hf,wXe),e(Hf,pk),e(pk,AXe),e(Hf,yXe),e(A,LXe),e(A,Uf),e(Uf,woe),e(woe,xXe),e(Uf,$Xe),e(Uf,uk),e(uk,kXe),e(Uf,SXe),e(A,RXe),e(A,Jf),e(Jf,Aoe),e(Aoe,PXe),e(Jf,BXe),e(Jf,_k),e(_k,IXe),e(Jf,qXe),e(A,NXe),e(A,Yf),e(Yf,yoe),e(yoe,jXe),e(Yf,DXe),e(Yf,bk),e(bk,GXe),e(Yf,OXe),e(A,VXe),e(A,Kf),e(Kf,Loe),e(Loe,XXe),e(Kf,zXe),e(Kf,vk),e(vk,WXe),e(Kf,QXe),e(A,HXe),e(A,Zf),e(Zf,xoe),e(xoe,UXe),e(Zf,JXe),e(Zf,Fk),e(Fk,YXe),e(Zf,KXe),e(A,ZXe),e(A,em),e(em,$oe),e($oe,eze),e(em,oze),e(em,Tk),e(Tk,rze),e(em,tze),e(A,aze),e(A,om),e(om,koe),e(koe,nze),e(om,sze),e(om,Mk),e(Mk,lze),e(om,ize),e(A,dze),e(A,rm),e(rm,Soe),e(Soe,cze),e(rm,fze),e(rm,Ek),e(Ek,mze),e(rm,gze),e(A,hze),e(A,tm),e(tm,Roe),e(Roe,pze),e(tm,uze),e(tm,Ck),e(Ck,_ze),e(tm,bze),e(A,vze),e(A,am),e(am,Poe),e(Poe,Fze),e(am,Tze),e(am,wk),e(wk,Mze),e(am,Eze),e(A,Cze),e(A,nm),e(nm,Boe),e(Boe,wze),e(nm,Aze),e(nm,Ak),e(Ak,yze),e(nm,Lze),e(A,xze),e(A,sm),e(sm,Ioe),e(Ioe,$ze),e(sm,kze),e(sm,yk),e(yk,Sze),e(sm,Rze),e(A,Pze),e(A,lm),e(lm,qoe),e(qoe,Bze),e(lm,Ize),e(lm,Lk),e(Lk,qze),e(lm,Nze),e(A,jze),e(A,im),e(im,Noe),e(Noe,Dze),e(im,Gze),e(im,xk),e(xk,Oze),e(im,Vze),e(A,Xze),e(A,dm),e(dm,joe),e(joe,zze),e(dm,Wze),e(dm,$k),e($k,Qze),e(dm,Hze),e(A,Uze),e(A,cm),e(cm,Doe),e(Doe,Jze),e(cm,Yze),e(cm,kk),e(kk,Kze),e(cm,Zze),e(A,eWe),e(A,fm),e(fm,Goe),e(Goe,oWe),e(fm,rWe),e(fm,Sk),e(Sk,tWe),e(fm,aWe),e(A,nWe),e(A,mm),e(mm,Ooe),e(Ooe,sWe),e(mm,lWe),e(mm,Rk),e(Rk,iWe),e(mm,dWe),e(A,cWe),e(A,gm),e(gm,Voe),e(Voe,fWe),e(gm,mWe),e(gm,Pk),e(Pk,gWe),e(gm,hWe),e(A,pWe),e(A,hm),e(hm,Xoe),e(Xoe,uWe),e(hm,_We),e(hm,Bk),e(Bk,bWe),e(hm,vWe),e(A,FWe),e(A,pm),e(pm,zoe),e(zoe,TWe),e(pm,MWe),e(pm,Ik),e(Ik,EWe),e(pm,CWe),e(A,wWe),e(A,um),e(um,Woe),e(Woe,AWe),e(um,yWe),e(um,qk),e(qk,LWe),e(um,xWe),e(A,$We),e(A,_m),e(_m,Qoe),e(Qoe,kWe),e(_m,SWe),e(_m,Nk),e(Nk,RWe),e(_m,PWe),e(A,BWe),e(A,bm),e(bm,Hoe),e(Hoe,IWe),e(bm,qWe),e(bm,jk),e(jk,NWe),e(bm,jWe),e(A,DWe),e(A,vm),e(vm,Uoe),e(Uoe,GWe),e(vm,OWe),e(vm,Dk),e(Dk,VWe),e(vm,XWe),e(A,zWe),e(A,Fm),e(Fm,Joe),e(Joe,WWe),e(Fm,QWe),e(Fm,Gk),e(Gk,HWe),e(Fm,UWe),e(A,JWe),e(A,Tm),e(Tm,Yoe),e(Yoe,YWe),e(Tm,KWe),e(Tm,Ok),e(Ok,ZWe),e(Tm,eQe),e(A,oQe),e(A,Mm),e(Mm,Koe),e(Koe,rQe),e(Mm,tQe),e(Mm,Vk),e(Vk,aQe),e(Mm,nQe),e(A,sQe),e(A,Em),e(Em,Zoe),e(Zoe,lQe),e(Em,iQe),e(Em,Xk),e(Xk,dQe),e(Em,cQe),e(A,fQe),e(A,Cm),e(Cm,ere),e(ere,mQe),e(Cm,gQe),e(Cm,zk),e(zk,hQe),e(Cm,pQe),e(A,uQe),e(A,wm),e(wm,ore),e(ore,_Qe),e(wm,bQe),e(wm,Wk),e(Wk,vQe),e(wm,FQe),e(A,TQe),e(A,Am),e(Am,rre),e(rre,MQe),e(Am,EQe),e(Am,Qk),e(Qk,CQe),e(Am,wQe),e(A,AQe),e(A,ym),e(ym,tre),e(tre,yQe),e(ym,LQe),e(ym,Hk),e(Hk,xQe),e(ym,$Qe),e(A,kQe),e(A,Lm),e(Lm,are),e(are,SQe),e(Lm,RQe),e(Lm,Uk),e(Uk,PQe),e(Lm,BQe),e(A,IQe),e(A,xm),e(xm,nre),e(nre,qQe),e(xm,NQe),e(xm,Jk),e(Jk,jQe),e(xm,DQe),e(A,GQe),e(A,$m),e($m,sre),e(sre,OQe),e($m,VQe),e($m,Yk),e(Yk,XQe),e($m,zQe),e(A,WQe),e(A,km),e(km,lre),e(lre,QQe),e(km,HQe),e(km,Kk),e(Kk,UQe),e(km,JQe),e(A,YQe),e(A,Sm),e(Sm,ire),e(ire,KQe),e(Sm,ZQe),e(Sm,Zk),e(Zk,eHe),e(Sm,oHe),e(A,rHe),e(A,Rm),e(Rm,dre),e(dre,tHe),e(Rm,aHe),e(Rm,eS),e(eS,nHe),e(Rm,sHe),e(A,lHe),e(A,Pm),e(Pm,cre),e(cre,iHe),e(Pm,dHe),e(Pm,oS),e(oS,cHe),e(Pm,fHe),e(A,mHe),e(A,Bm),e(Bm,fre),e(fre,gHe),e(Bm,hHe),e(Bm,rS),e(rS,pHe),e(Bm,uHe),e(A,_He),e(A,Im),e(Im,mre),e(mre,bHe),e(Im,vHe),e(Im,tS),e(tS,FHe),e(Im,THe),e(A,MHe),e(A,qm),e(qm,gre),e(gre,EHe),e(qm,CHe),e(qm,aS),e(aS,wHe),e(qm,AHe),e(A,yHe),e(A,Nm),e(Nm,hre),e(hre,LHe),e(Nm,xHe),e(Nm,nS),e(nS,$He),e(Nm,kHe),e(A,SHe),e(A,jm),e(jm,pre),e(pre,RHe),e(jm,PHe),e(jm,sS),e(sS,BHe),e(jm,IHe),e(A,qHe),e(A,Dm),e(Dm,ure),e(ure,NHe),e(Dm,jHe),e(Dm,lS),e(lS,DHe),e(Dm,GHe),e(A,OHe),e(A,Gm),e(Gm,_re),e(_re,VHe),e(Gm,XHe),e(Gm,iS),e(iS,zHe),e(Gm,WHe),e(A,QHe),e(A,Om),e(Om,bre),e(bre,HHe),e(Om,UHe),e(Om,dS),e(dS,JHe),e(Om,YHe),e(A,KHe),e(A,Vm),e(Vm,vre),e(vre,ZHe),e(Vm,eUe),e(Vm,cS),e(cS,oUe),e(Vm,rUe),e(A,tUe),e(A,Xm),e(Xm,Fre),e(Fre,aUe),e(Xm,nUe),e(Xm,fS),e(fS,sUe),e(Xm,lUe),e(A,iUe),e(A,zm),e(zm,Tre),e(Tre,dUe),e(zm,cUe),e(zm,mS),e(mS,fUe),e(zm,mUe),e(A,gUe),e(A,Wm),e(Wm,Mre),e(Mre,hUe),e(Wm,pUe),e(Wm,gS),e(gS,uUe),e(Wm,_Ue),e(A,bUe),e(A,Qm),e(Qm,Ere),e(Ere,vUe),e(Qm,FUe),e(Qm,hS),e(hS,TUe),e(Qm,MUe),e(A,EUe),e(A,Hm),e(Hm,Cre),e(Cre,CUe),e(Hm,wUe),e(Hm,pS),e(pS,AUe),e(Hm,yUe),e(A,LUe),e(A,Um),e(Um,wre),e(wre,xUe),e(Um,$Ue),e(Um,uS),e(uS,kUe),e(Um,SUe),e(A,RUe),e(A,Jm),e(Jm,Are),e(Are,PUe),e(Jm,BUe),e(Jm,_S),e(_S,IUe),e(Jm,qUe),e(A,NUe),e(A,Ym),e(Ym,yre),e(yre,jUe),e(Ym,DUe),e(Ym,bS),e(bS,GUe),e(Ym,OUe),e(A,VUe),e(A,Km),e(Km,Lre),e(Lre,XUe),e(Km,zUe),e(Km,vS),e(vS,WUe),e(Km,QUe),e(A,HUe),e(A,Zm),e(Zm,xre),e(xre,UUe),e(Zm,JUe),e(Zm,FS),e(FS,YUe),e(Zm,KUe),e(A,ZUe),e(A,eg),e(eg,$re),e($re,eJe),e(eg,oJe),e(eg,TS),e(TS,rJe),e(eg,tJe),e(A,aJe),e(A,og),e(og,kre),e(kre,nJe),e(og,sJe),e(og,MS),e(MS,lJe),e(og,iJe),e(A,dJe),e(A,rg),e(rg,Sre),e(Sre,cJe),e(rg,fJe),e(rg,ES),e(ES,mJe),e(rg,gJe),e(A,hJe),e(A,tg),e(tg,Rre),e(Rre,pJe),e(tg,uJe),e(tg,CS),e(CS,_Je),e(tg,bJe),e(A,vJe),e(A,ag),e(ag,Pre),e(Pre,FJe),e(ag,TJe),e(ag,wS),e(wS,MJe),e(ag,EJe),e(A,CJe),e(A,ng),e(ng,Bre),e(Bre,wJe),e(ng,AJe),e(ng,AS),e(AS,yJe),e(ng,LJe),e(A,xJe),e(A,sg),e(sg,Ire),e(Ire,$Je),e(sg,kJe),e(sg,yS),e(yS,SJe),e(sg,RJe),e(A,PJe),e(A,lg),e(lg,qre),e(qre,BJe),e(lg,IJe),e(lg,LS),e(LS,qJe),e(lg,NJe),e(A,jJe),e(A,ig),e(ig,Nre),e(Nre,DJe),e(ig,GJe),e(ig,xS),e(xS,OJe),e(ig,VJe),e(A,XJe),e(A,dg),e(dg,jre),e(jre,zJe),e(dg,WJe),e(dg,$S),e($S,QJe),e(dg,HJe),e(A,UJe),e(A,cg),e(cg,Dre),e(Dre,JJe),e(cg,YJe),e(cg,kS),e(kS,KJe),e(cg,ZJe),e(A,eYe),e(A,fg),e(fg,Gre),e(Gre,oYe),e(fg,rYe),e(fg,SS),e(SS,tYe),e(fg,aYe),e(A,nYe),e(A,mg),e(mg,Ore),e(Ore,sYe),e(mg,lYe),e(mg,RS),e(RS,iYe),e(mg,dYe),e(A,cYe),e(A,gg),e(gg,Vre),e(Vre,fYe),e(gg,mYe),e(gg,PS),e(PS,gYe),e(gg,hYe),e(A,pYe),e(A,hg),e(hg,Xre),e(Xre,uYe),e(hg,_Ye),e(hg,BS),e(BS,bYe),e(hg,vYe),e(A,FYe),e(A,pg),e(pg,zre),e(zre,TYe),e(pg,MYe),e(pg,IS),e(IS,EYe),e(pg,CYe),e(A,wYe),e(A,ug),e(ug,Wre),e(Wre,AYe),e(ug,yYe),e(ug,qS),e(qS,LYe),e(ug,xYe),e(A,$Ye),e(A,_g),e(_g,Qre),e(Qre,kYe),e(_g,SYe),e(_g,NS),e(NS,RYe),e(_g,PYe),e(A,BYe),e(A,bg),e(bg,Hre),e(Hre,IYe),e(bg,qYe),e(bg,jS),e(jS,NYe),e(bg,jYe),e(A,DYe),e(A,vg),e(vg,Ure),e(Ure,GYe),e(vg,OYe),e(vg,DS),e(DS,VYe),e(vg,XYe),e(A,zYe),e(A,Fg),e(Fg,Jre),e(Jre,WYe),e(Fg,QYe),e(Fg,GS),e(GS,HYe),e(Fg,UYe),e(Er,JYe),M(Tg,Er,null),e(Co,YYe),e(Co,Mg),M(wA,Mg,null),e(Mg,KYe),e(Mg,Yre),e(Yre,ZYe),b(f,Eqe,_),b(f,Ti,_),e(Ti,Eg),e(Eg,Kre),M(AA,Kre,null),e(Ti,eKe),e(Ti,Zre),e(Zre,oKe),b(f,Cqe,_),b(f,wo,_),M(yA,wo,null),e(wo,rKe),e(wo,LA),e(LA,tKe),e(LA,OS),e(OS,aKe),e(LA,nKe),e(wo,sKe),e(wo,xA),e(xA,lKe),e(xA,ete),e(ete,iKe),e(xA,dKe),e(wo,cKe),e(wo,Cr),M($A,Cr,null),e(Cr,fKe),e(Cr,ote),e(ote,mKe),e(Cr,gKe),e(Cr,Aa),e(Aa,hKe),e(Aa,rte),e(rte,pKe),e(Aa,uKe),e(Aa,tte),e(tte,_Ke),e(Aa,bKe),e(Aa,ate),e(ate,vKe),e(Aa,FKe),e(Cr,TKe),e(Cr,k),e(k,Sn),e(Sn,nte),e(nte,MKe),e(Sn,EKe),e(Sn,VS),e(VS,CKe),e(Sn,wKe),e(Sn,XS),e(XS,AKe),e(Sn,yKe),e(k,LKe),e(k,Rn),e(Rn,ste),e(ste,xKe),e(Rn,$Ke),e(Rn,zS),e(zS,kKe),e(Rn,SKe),e(Rn,WS),e(WS,RKe),e(Rn,PKe),e(k,BKe),e(k,Pn),e(Pn,lte),e(lte,IKe),e(Pn,qKe),e(Pn,QS),e(QS,NKe),e(Pn,jKe),e(Pn,HS),e(HS,DKe),e(Pn,GKe),e(k,OKe),e(k,Cg),e(Cg,ite),e(ite,VKe),e(Cg,XKe),e(Cg,US),e(US,zKe),e(Cg,WKe),e(k,QKe),e(k,Bn),e(Bn,dte),e(dte,HKe),e(Bn,UKe),e(Bn,JS),e(JS,JKe),e(Bn,YKe),e(Bn,YS),e(YS,KKe),e(Bn,ZKe),e(k,eZe),e(k,wg),e(wg,cte),e(cte,oZe),e(wg,rZe),e(wg,KS),e(KS,tZe),e(wg,aZe),e(k,nZe),e(k,Ag),e(Ag,fte),e(fte,sZe),e(Ag,lZe),e(Ag,ZS),e(ZS,iZe),e(Ag,dZe),e(k,cZe),e(k,yg),e(yg,mte),e(mte,fZe),e(yg,mZe),e(yg,eR),e(eR,gZe),e(yg,hZe),e(k,pZe),e(k,In),e(In,gte),e(gte,uZe),e(In,_Ze),e(In,oR),e(oR,bZe),e(In,vZe),e(In,rR),e(rR,FZe),e(In,TZe),e(k,MZe),e(k,qn),e(qn,hte),e(hte,EZe),e(qn,CZe),e(qn,tR),e(tR,wZe),e(qn,AZe),e(qn,aR),e(aR,yZe),e(qn,LZe),e(k,xZe),e(k,Nn),e(Nn,pte),e(pte,$Ze),e(Nn,kZe),e(Nn,nR),e(nR,SZe),e(Nn,RZe),e(Nn,sR),e(sR,PZe),e(Nn,BZe),e(k,IZe),e(k,Lg),e(Lg,ute),e(ute,qZe),e(Lg,NZe),e(Lg,lR),e(lR,jZe),e(Lg,DZe),e(k,GZe),e(k,xg),e(xg,_te),e(_te,OZe),e(xg,VZe),e(xg,iR),e(iR,XZe),e(xg,zZe),e(k,WZe),e(k,jn),e(jn,bte),e(bte,QZe),e(jn,HZe),e(jn,dR),e(dR,UZe),e(jn,JZe),e(jn,cR),e(cR,YZe),e(jn,KZe),e(k,ZZe),e(k,$g),e($g,vte),e(vte,eeo),e($g,oeo),e($g,fR),e(fR,reo),e($g,teo),e(k,aeo),e(k,Dn),e(Dn,Fte),e(Fte,neo),e(Dn,seo),e(Dn,mR),e(mR,leo),e(Dn,ieo),e(Dn,gR),e(gR,deo),e(Dn,ceo),e(k,feo),e(k,Gn),e(Gn,Tte),e(Tte,meo),e(Gn,geo),e(Gn,hR),e(hR,heo),e(Gn,peo),e(Gn,pR),e(pR,ueo),e(Gn,_eo),e(k,beo),e(k,On),e(On,Mte),e(Mte,veo),e(On,Feo),e(On,uR),e(uR,Teo),e(On,Meo),e(On,_R),e(_R,Eeo),e(On,Ceo),e(k,weo),e(k,kg),e(kg,Ete),e(Ete,Aeo),e(kg,yeo),e(kg,bR),e(bR,Leo),e(kg,xeo),e(k,$eo),e(k,Vn),e(Vn,Cte),e(Cte,keo),e(Vn,Seo),e(Vn,vR),e(vR,Reo),e(Vn,Peo),e(Vn,FR),e(FR,Beo),e(Vn,Ieo),e(k,qeo),e(k,Xn),e(Xn,wte),e(wte,Neo),e(Xn,jeo),e(Xn,TR),e(TR,Deo),e(Xn,Geo),e(Xn,MR),e(MR,Oeo),e(Xn,Veo),e(k,Xeo),e(k,zn),e(zn,Ate),e(Ate,zeo),e(zn,Weo),e(zn,ER),e(ER,Qeo),e(zn,Heo),e(zn,CR),e(CR,Ueo),e(zn,Jeo),e(k,Yeo),e(k,Wn),e(Wn,yte),e(yte,Keo),e(Wn,Zeo),e(Wn,wR),e(wR,eoo),e(Wn,ooo),e(Wn,AR),e(AR,roo),e(Wn,too),e(k,aoo),e(k,Qn),e(Qn,Lte),e(Lte,noo),e(Qn,soo),e(Qn,yR),e(yR,loo),e(Qn,ioo),e(Qn,LR),e(LR,doo),e(Qn,coo),e(k,foo),e(k,Hn),e(Hn,xte),e(xte,moo),e(Hn,goo),e(Hn,xR),e(xR,hoo),e(Hn,poo),e(Hn,$R),e($R,uoo),e(Hn,_oo),e(k,boo),e(k,Sg),e(Sg,$te),e($te,voo),e(Sg,Foo),e(Sg,kR),e(kR,Too),e(Sg,Moo),e(k,Eoo),e(k,Un),e(Un,kte),e(kte,Coo),e(Un,woo),e(Un,SR),e(SR,Aoo),e(Un,yoo),e(Un,RR),e(RR,Loo),e(Un,xoo),e(k,$oo),e(k,Rg),e(Rg,Ste),e(Ste,koo),e(Rg,Soo),e(Rg,PR),e(PR,Roo),e(Rg,Poo),e(k,Boo),e(k,Jn),e(Jn,Rte),e(Rte,Ioo),e(Jn,qoo),e(Jn,BR),e(BR,Noo),e(Jn,joo),e(Jn,IR),e(IR,Doo),e(Jn,Goo),e(k,Ooo),e(k,Yn),e(Yn,Pte),e(Pte,Voo),e(Yn,Xoo),e(Yn,qR),e(qR,zoo),e(Yn,Woo),e(Yn,NR),e(NR,Qoo),e(Yn,Hoo),e(k,Uoo),e(k,Kn),e(Kn,Bte),e(Bte,Joo),e(Kn,Yoo),e(Kn,jR),e(jR,Koo),e(Kn,Zoo),e(Kn,DR),e(DR,ero),e(Kn,oro),e(k,rro),e(k,Zn),e(Zn,Ite),e(Ite,tro),e(Zn,aro),e(Zn,GR),e(GR,nro),e(Zn,sro),e(Zn,OR),e(OR,lro),e(Zn,iro),e(k,dro),e(k,es),e(es,qte),e(qte,cro),e(es,fro),e(es,VR),e(VR,mro),e(es,gro),e(es,XR),e(XR,hro),e(es,pro),e(k,uro),e(k,Pg),e(Pg,Nte),e(Nte,_ro),e(Pg,bro),e(Pg,zR),e(zR,vro),e(Pg,Fro),e(k,Tro),e(k,os),e(os,jte),e(jte,Mro),e(os,Ero),e(os,WR),e(WR,Cro),e(os,wro),e(os,QR),e(QR,Aro),e(os,yro),e(k,Lro),e(k,rs),e(rs,Dte),e(Dte,xro),e(rs,$ro),e(rs,HR),e(HR,kro),e(rs,Sro),e(rs,UR),e(UR,Rro),e(rs,Pro),e(k,Bro),e(k,ts),e(ts,Gte),e(Gte,Iro),e(ts,qro),e(ts,JR),e(JR,Nro),e(ts,jro),e(ts,YR),e(YR,Dro),e(ts,Gro),e(k,Oro),e(k,as),e(as,Ote),e(Ote,Vro),e(as,Xro),e(as,KR),e(KR,zro),e(as,Wro),e(as,ZR),e(ZR,Qro),e(as,Hro),e(k,Uro),e(k,ns),e(ns,Vte),e(Vte,Jro),e(ns,Yro),e(ns,eP),e(eP,Kro),e(ns,Zro),e(ns,oP),e(oP,eto),e(ns,oto),e(k,rto),e(k,ss),e(ss,Xte),e(Xte,tto),e(ss,ato),e(ss,rP),e(rP,nto),e(ss,sto),e(ss,tP),e(tP,lto),e(ss,ito),e(k,dto),e(k,ls),e(ls,zte),e(zte,cto),e(ls,fto),e(ls,aP),e(aP,mto),e(ls,gto),e(ls,nP),e(nP,hto),e(ls,pto),e(k,uto),e(k,Bg),e(Bg,Wte),e(Wte,_to),e(Bg,bto),e(Bg,sP),e(sP,vto),e(Bg,Fto),e(k,Tto),e(k,is),e(is,Qte),e(Qte,Mto),e(is,Eto),e(is,lP),e(lP,Cto),e(is,wto),e(is,iP),e(iP,Ato),e(is,yto),e(k,Lto),e(k,Ig),e(Ig,Hte),e(Hte,xto),e(Ig,$to),e(Ig,dP),e(dP,kto),e(Ig,Sto),e(k,Rto),e(k,qg),e(qg,Ute),e(Ute,Pto),e(qg,Bto),e(qg,cP),e(cP,Ito),e(qg,qto),e(k,Nto),e(k,ds),e(ds,Jte),e(Jte,jto),e(ds,Dto),e(ds,fP),e(fP,Gto),e(ds,Oto),e(ds,mP),e(mP,Vto),e(ds,Xto),e(k,zto),e(k,cs),e(cs,Yte),e(Yte,Wto),e(cs,Qto),e(cs,gP),e(gP,Hto),e(cs,Uto),e(cs,hP),e(hP,Jto),e(cs,Yto),e(k,Kto),e(k,fs),e(fs,Kte),e(Kte,Zto),e(fs,eao),e(fs,pP),e(pP,oao),e(fs,rao),e(fs,uP),e(uP,tao),e(fs,aao),e(k,nao),e(k,Ng),e(Ng,Zte),e(Zte,sao),e(Ng,lao),e(Ng,_P),e(_P,iao),e(Ng,dao),e(k,cao),e(k,ms),e(ms,eae),e(eae,fao),e(ms,mao),e(ms,bP),e(bP,gao),e(ms,hao),e(ms,vP),e(vP,pao),e(ms,uao),e(k,_ao),e(k,gs),e(gs,oae),e(oae,bao),e(gs,vao),e(gs,FP),e(FP,Fao),e(gs,Tao),e(gs,TP),e(TP,Mao),e(gs,Eao),e(k,Cao),e(k,hs),e(hs,rae),e(rae,wao),e(hs,Aao),e(hs,MP),e(MP,yao),e(hs,Lao),e(hs,EP),e(EP,xao),e(hs,$ao),e(k,kao),e(k,ps),e(ps,tae),e(tae,Sao),e(ps,Rao),e(ps,CP),e(CP,Pao),e(ps,Bao),e(ps,wP),e(wP,Iao),e(ps,qao),e(k,Nao),e(k,us),e(us,aae),e(aae,jao),e(us,Dao),e(us,AP),e(AP,Gao),e(us,Oao),e(us,yP),e(yP,Vao),e(us,Xao),e(k,zao),e(k,jg),e(jg,nae),e(nae,Wao),e(jg,Qao),e(jg,LP),e(LP,Hao),e(jg,Uao),e(k,Jao),e(k,_s),e(_s,sae),e(sae,Yao),e(_s,Kao),e(_s,xP),e(xP,Zao),e(_s,eno),e(_s,$P),e($P,ono),e(_s,rno),e(k,tno),e(k,Dg),e(Dg,lae),e(lae,ano),e(Dg,nno),e(Dg,kP),e(kP,sno),e(Dg,lno),e(k,ino),e(k,Gg),e(Gg,iae),e(iae,dno),e(Gg,cno),e(Gg,SP),e(SP,fno),e(Gg,mno),e(k,gno),e(k,Og),e(Og,dae),e(dae,hno),e(Og,pno),e(Og,RP),e(RP,uno),e(Og,_no),e(k,bno),e(k,Vg),e(Vg,cae),e(cae,vno),e(Vg,Fno),e(Vg,PP),e(PP,Tno),e(Vg,Mno),e(k,Eno),e(k,bs),e(bs,fae),e(fae,Cno),e(bs,wno),e(bs,BP),e(BP,Ano),e(bs,yno),e(bs,IP),e(IP,Lno),e(bs,xno),e(k,$no),e(k,Xg),e(Xg,mae),e(mae,kno),e(Xg,Sno),e(Xg,qP),e(qP,Rno),e(Xg,Pno),e(k,Bno),e(k,vs),e(vs,gae),e(gae,Ino),e(vs,qno),e(vs,NP),e(NP,Nno),e(vs,jno),e(vs,jP),e(jP,Dno),e(vs,Gno),e(k,Ono),e(k,Fs),e(Fs,hae),e(hae,Vno),e(Fs,Xno),e(Fs,DP),e(DP,zno),e(Fs,Wno),e(Fs,GP),e(GP,Qno),e(Fs,Hno),e(k,Uno),e(k,Ts),e(Ts,pae),e(pae,Jno),e(Ts,Yno),e(Ts,OP),e(OP,Kno),e(Ts,Zno),e(Ts,VP),e(VP,eso),e(Ts,oso),e(k,rso),e(k,Ms),e(Ms,uae),e(uae,tso),e(Ms,aso),e(Ms,XP),e(XP,nso),e(Ms,sso),e(Ms,zP),e(zP,lso),e(Ms,iso),e(k,dso),e(k,Es),e(Es,_ae),e(_ae,cso),e(Es,fso),e(Es,WP),e(WP,mso),e(Es,gso),e(Es,QP),e(QP,hso),e(Es,pso),e(k,uso),e(k,Cs),e(Cs,bae),e(bae,_so),e(Cs,bso),e(Cs,HP),e(HP,vso),e(Cs,Fso),e(Cs,UP),e(UP,Tso),e(Cs,Mso),e(k,Eso),e(k,zg),e(zg,vae),e(vae,Cso),e(zg,wso),e(zg,JP),e(JP,Aso),e(zg,yso),e(k,Lso),e(k,Wg),e(Wg,Fae),e(Fae,xso),e(Wg,$so),e(Wg,YP),e(YP,kso),e(Wg,Sso),e(k,Rso),e(k,ws),e(ws,Tae),e(Tae,Pso),e(ws,Bso),e(ws,KP),e(KP,Iso),e(ws,qso),e(ws,ZP),e(ZP,Nso),e(ws,jso),e(k,Dso),e(k,As),e(As,Mae),e(Mae,Gso),e(As,Oso),e(As,eB),e(eB,Vso),e(As,Xso),e(As,oB),e(oB,zso),e(As,Wso),e(k,Qso),e(k,ys),e(ys,Eae),e(Eae,Hso),e(ys,Uso),e(ys,rB),e(rB,Jso),e(ys,Yso),e(ys,tB),e(tB,Kso),e(ys,Zso),e(k,elo),e(k,Qg),e(Qg,Cae),e(Cae,olo),e(Qg,rlo),e(Qg,aB),e(aB,tlo),e(Qg,alo),e(k,nlo),e(k,Hg),e(Hg,wae),e(wae,slo),e(Hg,llo),e(Hg,nB),e(nB,ilo),e(Hg,dlo),e(k,clo),e(k,Ug),e(Ug,Aae),e(Aae,flo),e(Ug,mlo),e(Ug,sB),e(sB,glo),e(Ug,hlo),e(k,plo),e(k,Ls),e(Ls,yae),e(yae,ulo),e(Ls,_lo),e(Ls,lB),e(lB,blo),e(Ls,vlo),e(Ls,iB),e(iB,Flo),e(Ls,Tlo),e(k,Mlo),e(k,Jg),e(Jg,Lae),e(Lae,Elo),e(Jg,Clo),e(Jg,dB),e(dB,wlo),e(Jg,Alo),e(k,ylo),e(k,Yg),e(Yg,xae),e(xae,Llo),e(Yg,xlo),e(Yg,cB),e(cB,$lo),e(Yg,klo),e(k,Slo),e(k,Kg),e(Kg,$ae),e($ae,Rlo),e(Kg,Plo),e(Kg,fB),e(fB,Blo),e(Kg,Ilo),e(k,qlo),e(k,xs),e(xs,kae),e(kae,Nlo),e(xs,jlo),e(xs,mB),e(mB,Dlo),e(xs,Glo),e(xs,gB),e(gB,Olo),e(xs,Vlo),e(k,Xlo),e(k,Zg),e(Zg,Sae),e(Sae,zlo),e(Zg,Wlo),e(Zg,hB),e(hB,Qlo),e(Zg,Hlo),e(k,Ulo),e(k,eh),e(eh,Rae),e(Rae,Jlo),e(eh,Ylo),e(eh,pB),e(pB,Klo),e(eh,Zlo),e(k,eio),e(k,$s),e($s,Pae),e(Pae,oio),e($s,rio),e($s,uB),e(uB,tio),e($s,aio),e($s,_B),e(_B,nio),e($s,sio),e(k,lio),e(k,ks),e(ks,Bae),e(Bae,iio),e(ks,dio),e(ks,bB),e(bB,cio),e(ks,fio),e(ks,vB),e(vB,mio),e(ks,gio),e(k,hio),e(k,Ss),e(Ss,Iae),e(Iae,pio),e(Ss,uio),e(Ss,FB),e(FB,_io),e(Ss,bio),e(Ss,TB),e(TB,vio),e(Ss,Fio),e(k,Tio),e(k,Rs),e(Rs,qae),e(qae,Mio),e(Rs,Eio),e(Rs,MB),e(MB,Cio),e(Rs,wio),e(Rs,EB),e(EB,Aio),e(Rs,yio),e(Cr,Lio),M(oh,Cr,null),e(wo,xio),e(wo,rh),M(kA,rh,null),e(rh,$io),e(rh,Nae),e(Nae,kio),b(f,wqe,_),b(f,Mi,_),e(Mi,th),e(th,jae),M(SA,jae,null),e(Mi,Sio),e(Mi,Dae),e(Dae,Rio),b(f,Aqe,_),b(f,Ao,_),M(RA,Ao,null),e(Ao,Pio),e(Ao,PA),e(PA,Bio),e(PA,CB),e(CB,Iio),e(PA,qio),e(Ao,Nio),e(Ao,BA),e(BA,jio),e(BA,Gae),e(Gae,Dio),e(BA,Gio),e(Ao,Oio),e(Ao,He),M(IA,He,null),e(He,Vio),e(He,Oae),e(Oae,Xio),e(He,zio),e(He,ya),e(ya,Wio),e(ya,Vae),e(Vae,Qio),e(ya,Hio),e(ya,Xae),e(Xae,Uio),e(ya,Jio),e(ya,zae),e(zae,Yio),e(ya,Kio),e(He,Zio),e(He,Z),e(Z,ah),e(ah,Wae),e(Wae,edo),e(ah,odo),e(ah,wB),e(wB,rdo),e(ah,tdo),e(Z,ado),e(Z,nh),e(nh,Qae),e(Qae,ndo),e(nh,sdo),e(nh,AB),e(AB,ldo),e(nh,ido),e(Z,ddo),e(Z,sh),e(sh,Hae),e(Hae,cdo),e(sh,fdo),e(sh,yB),e(yB,mdo),e(sh,gdo),e(Z,hdo),e(Z,lh),e(lh,Uae),e(Uae,pdo),e(lh,udo),e(lh,LB),e(LB,_do),e(lh,bdo),e(Z,vdo),e(Z,ih),e(ih,Jae),e(Jae,Fdo),e(ih,Tdo),e(ih,xB),e(xB,Mdo),e(ih,Edo),e(Z,Cdo),e(Z,dh),e(dh,Yae),e(Yae,wdo),e(dh,Ado),e(dh,$B),e($B,ydo),e(dh,Ldo),e(Z,xdo),e(Z,ch),e(ch,Kae),e(Kae,$do),e(ch,kdo),e(ch,kB),e(kB,Sdo),e(ch,Rdo),e(Z,Pdo),e(Z,fh),e(fh,Zae),e(Zae,Bdo),e(fh,Ido),e(fh,SB),e(SB,qdo),e(fh,Ndo),e(Z,jdo),e(Z,mh),e(mh,ene),e(ene,Ddo),e(mh,Gdo),e(mh,RB),e(RB,Odo),e(mh,Vdo),e(Z,Xdo),e(Z,gh),e(gh,one),e(one,zdo),e(gh,Wdo),e(gh,PB),e(PB,Qdo),e(gh,Hdo),e(Z,Udo),e(Z,hh),e(hh,rne),e(rne,Jdo),e(hh,Ydo),e(hh,BB),e(BB,Kdo),e(hh,Zdo),e(Z,eco),e(Z,ph),e(ph,tne),e(tne,oco),e(ph,rco),e(ph,IB),e(IB,tco),e(ph,aco),e(Z,nco),e(Z,uh),e(uh,ane),e(ane,sco),e(uh,lco),e(uh,qB),e(qB,ico),e(uh,dco),e(Z,cco),e(Z,_h),e(_h,nne),e(nne,fco),e(_h,mco),e(_h,NB),e(NB,gco),e(_h,hco),e(Z,pco),e(Z,bh),e(bh,sne),e(sne,uco),e(bh,_co),e(bh,jB),e(jB,bco),e(bh,vco),e(Z,Fco),e(Z,vh),e(vh,lne),e(lne,Tco),e(vh,Mco),e(vh,DB),e(DB,Eco),e(vh,Cco),e(Z,wco),e(Z,Fh),e(Fh,ine),e(ine,Aco),e(Fh,yco),e(Fh,GB),e(GB,Lco),e(Fh,xco),e(Z,$co),e(Z,Th),e(Th,dne),e(dne,kco),e(Th,Sco),e(Th,OB),e(OB,Rco),e(Th,Pco),e(Z,Bco),e(Z,Mh),e(Mh,cne),e(cne,Ico),e(Mh,qco),e(Mh,VB),e(VB,Nco),e(Mh,jco),e(Z,Dco),e(Z,Eh),e(Eh,fne),e(fne,Gco),e(Eh,Oco),e(Eh,XB),e(XB,Vco),e(Eh,Xco),e(Z,zco),e(Z,Ch),e(Ch,mne),e(mne,Wco),e(Ch,Qco),e(Ch,zB),e(zB,Hco),e(Ch,Uco),e(Z,Jco),e(Z,wh),e(wh,gne),e(gne,Yco),e(wh,Kco),e(wh,WB),e(WB,Zco),e(wh,efo),e(Z,ofo),e(Z,Ah),e(Ah,hne),e(hne,rfo),e(Ah,tfo),e(Ah,QB),e(QB,afo),e(Ah,nfo),e(Z,sfo),e(Z,yh),e(yh,pne),e(pne,lfo),e(yh,ifo),e(yh,HB),e(HB,dfo),e(yh,cfo),e(Z,ffo),e(Z,Lh),e(Lh,une),e(une,mfo),e(Lh,gfo),e(Lh,UB),e(UB,hfo),e(Lh,pfo),e(Z,ufo),e(Z,xh),e(xh,_ne),e(_ne,_fo),e(xh,bfo),e(xh,JB),e(JB,vfo),e(xh,Ffo),e(Z,Tfo),e(Z,$h),e($h,bne),e(bne,Mfo),e($h,Efo),e($h,YB),e(YB,Cfo),e($h,wfo),e(He,Afo),M(kh,He,null),e(He,yfo),M(Sh,He,null),e(Ao,Lfo),e(Ao,Rh),M(qA,Rh,null),e(Rh,xfo),e(Rh,vne),e(vne,$fo),b(f,yqe,_),b(f,Ei,_),e(Ei,Ph),e(Ph,Fne),M(NA,Fne,null),e(Ei,kfo),e(Ei,Tne),e(Tne,Sfo),b(f,Lqe,_),b(f,yo,_),M(jA,yo,null),e(yo,Rfo),e(yo,DA),e(DA,Pfo),e(DA,KB),e(KB,Bfo),e(DA,Ifo),e(yo,qfo),e(yo,GA),e(GA,Nfo),e(GA,Mne),e(Mne,jfo),e(GA,Dfo),e(yo,Gfo),e(yo,Ue),M(OA,Ue,null),e(Ue,Ofo),e(Ue,Ene),e(Ene,Vfo),e(Ue,Xfo),e(Ue,Ci),e(Ci,zfo),e(Ci,Cne),e(Cne,Wfo),e(Ci,Qfo),e(Ci,wne),e(wne,Hfo),e(Ci,Ufo),e(Ue,Jfo),e(Ue,he),e(he,Bh),e(Bh,Ane),e(Ane,Yfo),e(Bh,Kfo),e(Bh,ZB),e(ZB,Zfo),e(Bh,emo),e(he,omo),e(he,Ih),e(Ih,yne),e(yne,rmo),e(Ih,tmo),e(Ih,Lne),e(Lne,amo),e(Ih,nmo),e(he,smo),e(he,qh),e(qh,xne),e(xne,lmo),e(qh,imo),e(qh,eI),e(eI,dmo),e(qh,cmo),e(he,fmo),e(he,Nh),e(Nh,$ne),e($ne,mmo),e(Nh,gmo),e(Nh,oI),e(oI,hmo),e(Nh,pmo),e(he,umo),e(he,jh),e(jh,kne),e(kne,_mo),e(jh,bmo),e(jh,rI),e(rI,vmo),e(jh,Fmo),e(he,Tmo),e(he,Dh),e(Dh,Sne),e(Sne,Mmo),e(Dh,Emo),e(Dh,tI),e(tI,Cmo),e(Dh,wmo),e(he,Amo),e(he,Gh),e(Gh,Rne),e(Rne,ymo),e(Gh,Lmo),e(Gh,aI),e(aI,xmo),e(Gh,$mo),e(he,kmo),e(he,Oh),e(Oh,Pne),e(Pne,Smo),e(Oh,Rmo),e(Oh,nI),e(nI,Pmo),e(Oh,Bmo),e(he,Imo),e(he,Vh),e(Vh,Bne),e(Bne,qmo),e(Vh,Nmo),e(Vh,sI),e(sI,jmo),e(Vh,Dmo),e(he,Gmo),e(he,Xh),e(Xh,Ine),e(Ine,Omo),e(Xh,Vmo),e(Xh,lI),e(lI,Xmo),e(Xh,zmo),e(he,Wmo),e(he,zh),e(zh,qne),e(qne,Qmo),e(zh,Hmo),e(zh,iI),e(iI,Umo),e(zh,Jmo),e(he,Ymo),e(he,Wh),e(Wh,Nne),e(Nne,Kmo),e(Wh,Zmo),e(Wh,dI),e(dI,ego),e(Wh,ogo),e(he,rgo),e(he,Qh),e(Qh,jne),e(jne,tgo),e(Qh,ago),e(Qh,cI),e(cI,ngo),e(Qh,sgo),e(he,lgo),e(he,Hh),e(Hh,Dne),e(Dne,igo),e(Hh,dgo),e(Hh,fI),e(fI,cgo),e(Hh,fgo),e(he,mgo),e(he,Uh),e(Uh,Gne),e(Gne,ggo),e(Uh,hgo),e(Uh,mI),e(mI,pgo),e(Uh,ugo),e(he,_go),e(he,Jh),e(Jh,One),e(One,bgo),e(Jh,vgo),e(Jh,gI),e(gI,Fgo),e(Jh,Tgo),e(he,Mgo),e(he,Yh),e(Yh,Vne),e(Vne,Ego),e(Yh,Cgo),e(Yh,hI),e(hI,wgo),e(Yh,Ago),e(Ue,ygo),M(Kh,Ue,null),e(Ue,Lgo),M(Zh,Ue,null),e(yo,xgo),e(yo,ep),M(VA,ep,null),e(ep,$go),e(ep,Xne),e(Xne,kgo),b(f,xqe,_),b(f,wi,_),e(wi,op),e(op,zne),M(XA,zne,null),e(wi,Sgo),e(wi,Wne),e(Wne,Rgo),b(f,$qe,_),b(f,Lo,_),M(zA,Lo,null),e(Lo,Pgo),e(Lo,Ai),e(Ai,Bgo),e(Ai,pI),e(pI,Igo),e(Ai,qgo),e(Ai,uI),e(uI,Ngo),e(Ai,jgo),e(Lo,Dgo),e(Lo,WA),e(WA,Ggo),e(WA,Qne),e(Qne,Ogo),e(WA,Vgo),e(Lo,Xgo),e(Lo,tt),M(QA,tt,null),e(tt,zgo),e(tt,Hne),e(Hne,Wgo),e(tt,Qgo),e(tt,yi),e(yi,Hgo),e(yi,Une),e(Une,Ugo),e(yi,Jgo),e(yi,_I),e(_I,Ygo),e(yi,Kgo),e(tt,Zgo),M(rp,tt,null),e(Lo,eho),e(Lo,Je),M(HA,Je,null),e(Je,oho),e(Je,Jne),e(Jne,rho),e(Je,tho),e(Je,La),e(La,aho),e(La,Yne),e(Yne,nho),e(La,sho),e(La,Kne),e(Kne,lho),e(La,iho),e(La,Zne),e(Zne,dho),e(La,cho),e(Je,fho),e(Je,x),e(x,tp),e(tp,ese),e(ese,mho),e(tp,gho),e(tp,bI),e(bI,hho),e(tp,pho),e(x,uho),e(x,ap),e(ap,ose),e(ose,_ho),e(ap,bho),e(ap,vI),e(vI,vho),e(ap,Fho),e(x,Tho),e(x,np),e(np,rse),e(rse,Mho),e(np,Eho),e(np,FI),e(FI,Cho),e(np,who),e(x,Aho),e(x,sp),e(sp,tse),e(tse,yho),e(sp,Lho),e(sp,TI),e(TI,xho),e(sp,$ho),e(x,kho),e(x,lp),e(lp,ase),e(ase,Sho),e(lp,Rho),e(lp,MI),e(MI,Pho),e(lp,Bho),e(x,Iho),e(x,ip),e(ip,nse),e(nse,qho),e(ip,Nho),e(ip,EI),e(EI,jho),e(ip,Dho),e(x,Gho),e(x,dp),e(dp,sse),e(sse,Oho),e(dp,Vho),e(dp,CI),e(CI,Xho),e(dp,zho),e(x,Who),e(x,cp),e(cp,lse),e(lse,Qho),e(cp,Hho),e(cp,wI),e(wI,Uho),e(cp,Jho),e(x,Yho),e(x,fp),e(fp,ise),e(ise,Kho),e(fp,Zho),e(fp,AI),e(AI,epo),e(fp,opo),e(x,rpo),e(x,mp),e(mp,dse),e(dse,tpo),e(mp,apo),e(mp,yI),e(yI,npo),e(mp,spo),e(x,lpo),e(x,gp),e(gp,cse),e(cse,ipo),e(gp,dpo),e(gp,LI),e(LI,cpo),e(gp,fpo),e(x,mpo),e(x,hp),e(hp,fse),e(fse,gpo),e(hp,hpo),e(hp,xI),e(xI,ppo),e(hp,upo),e(x,_po),e(x,pp),e(pp,mse),e(mse,bpo),e(pp,vpo),e(pp,$I),e($I,Fpo),e(pp,Tpo),e(x,Mpo),e(x,up),e(up,gse),e(gse,Epo),e(up,Cpo),e(up,kI),e(kI,wpo),e(up,Apo),e(x,ypo),e(x,_p),e(_p,hse),e(hse,Lpo),e(_p,xpo),e(_p,SI),e(SI,$po),e(_p,kpo),e(x,Spo),e(x,bp),e(bp,pse),e(pse,Rpo),e(bp,Ppo),e(bp,RI),e(RI,Bpo),e(bp,Ipo),e(x,qpo),e(x,vp),e(vp,use),e(use,Npo),e(vp,jpo),e(vp,PI),e(PI,Dpo),e(vp,Gpo),e(x,Opo),e(x,Fp),e(Fp,_se),e(_se,Vpo),e(Fp,Xpo),e(Fp,BI),e(BI,zpo),e(Fp,Wpo),e(x,Qpo),e(x,Tp),e(Tp,bse),e(bse,Hpo),e(Tp,Upo),e(Tp,II),e(II,Jpo),e(Tp,Ypo),e(x,Kpo),e(x,Mp),e(Mp,vse),e(vse,Zpo),e(Mp,euo),e(Mp,qI),e(qI,ouo),e(Mp,ruo),e(x,tuo),e(x,Ep),e(Ep,Fse),e(Fse,auo),e(Ep,nuo),e(Ep,NI),e(NI,suo),e(Ep,luo),e(x,iuo),e(x,Cp),e(Cp,Tse),e(Tse,duo),e(Cp,cuo),e(Cp,jI),e(jI,fuo),e(Cp,muo),e(x,guo),e(x,wp),e(wp,Mse),e(Mse,huo),e(wp,puo),e(wp,DI),e(DI,uuo),e(wp,_uo),e(x,buo),e(x,Ap),e(Ap,Ese),e(Ese,vuo),e(Ap,Fuo),e(Ap,GI),e(GI,Tuo),e(Ap,Muo),e(x,Euo),e(x,yp),e(yp,Cse),e(Cse,Cuo),e(yp,wuo),e(yp,OI),e(OI,Auo),e(yp,yuo),e(x,Luo),e(x,Lp),e(Lp,wse),e(wse,xuo),e(Lp,$uo),e(Lp,VI),e(VI,kuo),e(Lp,Suo),e(x,Ruo),e(x,xp),e(xp,Ase),e(Ase,Puo),e(xp,Buo),e(xp,XI),e(XI,Iuo),e(xp,quo),e(x,Nuo),e(x,$p),e($p,yse),e(yse,juo),e($p,Duo),e($p,zI),e(zI,Guo),e($p,Ouo),e(x,Vuo),e(x,kp),e(kp,Lse),e(Lse,Xuo),e(kp,zuo),e(kp,WI),e(WI,Wuo),e(kp,Quo),e(x,Huo),e(x,Sp),e(Sp,xse),e(xse,Uuo),e(Sp,Juo),e(Sp,QI),e(QI,Yuo),e(Sp,Kuo),e(x,Zuo),e(x,Rp),e(Rp,$se),e($se,e_o),e(Rp,o_o),e(Rp,HI),e(HI,r_o),e(Rp,t_o),e(x,a_o),e(x,Ps),e(Ps,kse),e(kse,n_o),e(Ps,s_o),e(Ps,UI),e(UI,l_o),e(Ps,i_o),e(Ps,JI),e(JI,d_o),e(Ps,c_o),e(x,f_o),e(x,Pp),e(Pp,Sse),e(Sse,m_o),e(Pp,g_o),e(Pp,YI),e(YI,h_o),e(Pp,p_o),e(x,u_o),e(x,Bp),e(Bp,Rse),e(Rse,__o),e(Bp,b_o),e(Bp,KI),e(KI,v_o),e(Bp,F_o),e(x,T_o),e(x,Ip),e(Ip,Pse),e(Pse,M_o),e(Ip,E_o),e(Ip,ZI),e(ZI,C_o),e(Ip,w_o),e(x,A_o),e(x,qp),e(qp,Bse),e(Bse,y_o),e(qp,L_o),e(qp,eq),e(eq,x_o),e(qp,$_o),e(x,k_o),e(x,Np),e(Np,Ise),e(Ise,S_o),e(Np,R_o),e(Np,oq),e(oq,P_o),e(Np,B_o),e(x,I_o),e(x,jp),e(jp,qse),e(qse,q_o),e(jp,N_o),e(jp,rq),e(rq,j_o),e(jp,D_o),e(x,G_o),e(x,Dp),e(Dp,Nse),e(Nse,O_o),e(Dp,V_o),e(Dp,tq),e(tq,X_o),e(Dp,z_o),e(x,W_o),e(x,Gp),e(Gp,jse),e(jse,Q_o),e(Gp,H_o),e(Gp,aq),e(aq,U_o),e(Gp,J_o),e(x,Y_o),e(x,Op),e(Op,Dse),e(Dse,K_o),e(Op,Z_o),e(Op,nq),e(nq,e0o),e(Op,o0o),e(x,r0o),e(x,Vp),e(Vp,Gse),e(Gse,t0o),e(Vp,a0o),e(Vp,sq),e(sq,n0o),e(Vp,s0o),e(x,l0o),e(x,Xp),e(Xp,Ose),e(Ose,i0o),e(Xp,d0o),e(Xp,lq),e(lq,c0o),e(Xp,f0o),e(x,m0o),e(x,zp),e(zp,Vse),e(Vse,g0o),e(zp,h0o),e(zp,iq),e(iq,p0o),e(zp,u0o),e(x,_0o),e(x,Wp),e(Wp,Xse),e(Xse,b0o),e(Wp,v0o),e(Wp,dq),e(dq,F0o),e(Wp,T0o),e(x,M0o),e(x,Qp),e(Qp,zse),e(zse,E0o),e(Qp,C0o),e(Qp,cq),e(cq,w0o),e(Qp,A0o),e(x,y0o),e(x,Hp),e(Hp,Wse),e(Wse,L0o),e(Hp,x0o),e(Hp,fq),e(fq,$0o),e(Hp,k0o),e(x,S0o),e(x,Up),e(Up,Qse),e(Qse,R0o),e(Up,P0o),e(Up,mq),e(mq,B0o),e(Up,I0o),e(x,q0o),e(x,Jp),e(Jp,Hse),e(Hse,N0o),e(Jp,j0o),e(Jp,gq),e(gq,D0o),e(Jp,G0o),e(x,O0o),e(x,Yp),e(Yp,Use),e(Use,V0o),e(Yp,X0o),e(Yp,hq),e(hq,z0o),e(Yp,W0o),e(x,Q0o),e(x,Kp),e(Kp,Jse),e(Jse,H0o),e(Kp,U0o),e(Kp,pq),e(pq,J0o),e(Kp,Y0o),e(x,K0o),e(x,Zp),e(Zp,Yse),e(Yse,Z0o),e(Zp,e1o),e(Zp,uq),e(uq,o1o),e(Zp,r1o),e(x,t1o),e(x,eu),e(eu,Kse),e(Kse,a1o),e(eu,n1o),e(eu,_q),e(_q,s1o),e(eu,l1o),e(x,i1o),e(x,ou),e(ou,Zse),e(Zse,d1o),e(ou,c1o),e(ou,bq),e(bq,f1o),e(ou,m1o),e(x,g1o),e(x,ru),e(ru,ele),e(ele,h1o),e(ru,p1o),e(ru,vq),e(vq,u1o),e(ru,_1o),e(x,b1o),e(x,tu),e(tu,ole),e(ole,v1o),e(tu,F1o),e(tu,Fq),e(Fq,T1o),e(tu,M1o),e(x,E1o),e(x,au),e(au,rle),e(rle,C1o),e(au,w1o),e(au,Tq),e(Tq,A1o),e(au,y1o),e(x,L1o),e(x,nu),e(nu,tle),e(tle,x1o),e(nu,$1o),e(nu,Mq),e(Mq,k1o),e(nu,S1o),e(x,R1o),e(x,su),e(su,ale),e(ale,P1o),e(su,B1o),e(su,Eq),e(Eq,I1o),e(su,q1o),e(x,N1o),e(x,lu),e(lu,nle),e(nle,j1o),e(lu,D1o),e(lu,Cq),e(Cq,G1o),e(lu,O1o),e(x,V1o),e(x,iu),e(iu,sle),e(sle,X1o),e(iu,z1o),e(iu,wq),e(wq,W1o),e(iu,Q1o),e(x,H1o),e(x,du),e(du,lle),e(lle,U1o),e(du,J1o),e(du,Aq),e(Aq,Y1o),e(du,K1o),e(x,Z1o),e(x,cu),e(cu,ile),e(ile,ebo),e(cu,obo),e(cu,yq),e(yq,rbo),e(cu,tbo),e(x,abo),e(x,fu),e(fu,dle),e(dle,nbo),e(fu,sbo),e(fu,Lq),e(Lq,lbo),e(fu,ibo),e(x,dbo),e(x,mu),e(mu,cle),e(cle,cbo),e(mu,fbo),e(mu,xq),e(xq,mbo),e(mu,gbo),e(x,hbo),e(x,gu),e(gu,fle),e(fle,pbo),e(gu,ubo),e(gu,$q),e($q,_bo),e(gu,bbo),e(x,vbo),e(x,hu),e(hu,mle),e(mle,Fbo),e(hu,Tbo),e(hu,kq),e(kq,Mbo),e(hu,Ebo),e(x,Cbo),e(x,pu),e(pu,gle),e(gle,wbo),e(pu,Abo),e(pu,Sq),e(Sq,ybo),e(pu,Lbo),e(x,xbo),e(x,uu),e(uu,hle),e(hle,$bo),e(uu,kbo),e(uu,Rq),e(Rq,Sbo),e(uu,Rbo),e(x,Pbo),e(x,_u),e(_u,ple),e(ple,Bbo),e(_u,Ibo),e(_u,Pq),e(Pq,qbo),e(_u,Nbo),e(x,jbo),e(x,bu),e(bu,ule),e(ule,Dbo),e(bu,Gbo),e(bu,Bq),e(Bq,Obo),e(bu,Vbo),e(x,Xbo),e(x,vu),e(vu,_le),e(_le,zbo),e(vu,Wbo),e(vu,Iq),e(Iq,Qbo),e(vu,Hbo),e(x,Ubo),e(x,Fu),e(Fu,ble),e(ble,Jbo),e(Fu,Ybo),e(Fu,qq),e(qq,Kbo),e(Fu,Zbo),e(x,e2o),e(x,Tu),e(Tu,vle),e(vle,o2o),e(Tu,r2o),e(Tu,Nq),e(Nq,t2o),e(Tu,a2o),e(x,n2o),e(x,Mu),e(Mu,Fle),e(Fle,s2o),e(Mu,l2o),e(Mu,jq),e(jq,i2o),e(Mu,d2o),e(x,c2o),e(x,Eu),e(Eu,Tle),e(Tle,f2o),e(Eu,m2o),e(Eu,Dq),e(Dq,g2o),e(Eu,h2o),e(x,p2o),e(x,Cu),e(Cu,Mle),e(Mle,u2o),e(Cu,_2o),e(Cu,Gq),e(Gq,b2o),e(Cu,v2o),e(x,F2o),e(x,wu),e(wu,Ele),e(Ele,T2o),e(wu,M2o),e(wu,Oq),e(Oq,E2o),e(wu,C2o),e(x,w2o),e(x,Au),e(Au,Cle),e(Cle,A2o),e(Au,y2o),e(Au,Vq),e(Vq,L2o),e(Au,x2o),e(x,$2o),e(x,yu),e(yu,wle),e(wle,k2o),e(yu,S2o),e(yu,Xq),e(Xq,R2o),e(yu,P2o),e(x,B2o),e(x,Lu),e(Lu,Ale),e(Ale,I2o),e(Lu,q2o),e(Lu,zq),e(zq,N2o),e(Lu,j2o),e(x,D2o),e(x,xu),e(xu,yle),e(yle,G2o),e(xu,O2o),e(xu,Wq),e(Wq,V2o),e(xu,X2o),e(x,z2o),e(x,$u),e($u,Lle),e(Lle,W2o),e($u,Q2o),e($u,Qq),e(Qq,H2o),e($u,U2o),e(x,J2o),e(x,ku),e(ku,xle),e(xle,Y2o),e(ku,K2o),e(ku,Hq),e(Hq,Z2o),e(ku,evo),e(x,ovo),e(x,Su),e(Su,$le),e($le,rvo),e(Su,tvo),e(Su,Uq),e(Uq,avo),e(Su,nvo),e(x,svo),e(x,Ru),e(Ru,kle),e(kle,lvo),e(Ru,ivo),e(Ru,Jq),e(Jq,dvo),e(Ru,cvo),e(x,fvo),e(x,Pu),e(Pu,Sle),e(Sle,mvo),e(Pu,gvo),e(Pu,Yq),e(Yq,hvo),e(Pu,pvo),e(x,uvo),e(x,Bu),e(Bu,Rle),e(Rle,_vo),e(Bu,bvo),e(Bu,Kq),e(Kq,vvo),e(Bu,Fvo),e(x,Tvo),e(x,Iu),e(Iu,Ple),e(Ple,Mvo),e(Iu,Evo),e(Iu,Zq),e(Zq,Cvo),e(Iu,wvo),e(x,Avo),e(x,qu),e(qu,Ble),e(Ble,yvo),e(qu,Lvo),e(qu,eN),e(eN,xvo),e(qu,$vo),e(x,kvo),e(x,Nu),e(Nu,Ile),e(Ile,Svo),e(Nu,Rvo),e(Nu,oN),e(oN,Pvo),e(Nu,Bvo),e(x,Ivo),e(x,ju),e(ju,qle),e(qle,qvo),e(ju,Nvo),e(ju,rN),e(rN,jvo),e(ju,Dvo),e(x,Gvo),e(x,Du),e(Du,Nle),e(Nle,Ovo),e(Du,Vvo),e(Du,tN),e(tN,Xvo),e(Du,zvo),e(x,Wvo),e(x,Gu),e(Gu,jle),e(jle,Qvo),e(Gu,Hvo),e(Gu,aN),e(aN,Uvo),e(Gu,Jvo),e(x,Yvo),e(x,Ou),e(Ou,Dle),e(Dle,Kvo),e(Ou,Zvo),e(Ou,nN),e(nN,eFo),e(Ou,oFo),e(x,rFo),e(x,Vu),e(Vu,Gle),e(Gle,tFo),e(Vu,aFo),e(Vu,sN),e(sN,nFo),e(Vu,sFo),e(x,lFo),e(x,Xu),e(Xu,Ole),e(Ole,iFo),e(Xu,dFo),e(Xu,lN),e(lN,cFo),e(Xu,fFo),e(x,mFo),e(x,zu),e(zu,Vle),e(Vle,gFo),e(zu,hFo),e(zu,iN),e(iN,pFo),e(zu,uFo),e(x,_Fo),e(x,Wu),e(Wu,Xle),e(Xle,bFo),e(Wu,vFo),e(Wu,dN),e(dN,FFo),e(Wu,TFo),e(x,MFo),e(x,Qu),e(Qu,zle),e(zle,EFo),e(Qu,CFo),e(Qu,cN),e(cN,wFo),e(Qu,AFo),e(Je,yFo),e(Je,Hu),e(Hu,LFo),e(Hu,Wle),e(Wle,xFo),e(Hu,$Fo),e(Hu,Qle),e(Qle,kFo),e(Je,SFo),M(Uu,Je,null),b(f,kqe,_),b(f,Li,_),e(Li,Ju),e(Ju,Hle),M(UA,Hle,null),e(Li,RFo),e(Li,Ule),e(Ule,PFo),b(f,Sqe,_),b(f,xo,_),M(JA,xo,null),e(xo,BFo),e(xo,xi),e(xi,IFo),e(xi,fN),e(fN,qFo),e(xi,NFo),e(xi,mN),e(mN,jFo),e(xi,DFo),e(xo,GFo),e(xo,YA),e(YA,OFo),e(YA,Jle),e(Jle,VFo),e(YA,XFo),e(xo,zFo),e(xo,at),M(KA,at,null),e(at,WFo),e(at,Yle),e(Yle,QFo),e(at,HFo),e(at,$i),e($i,UFo),e($i,Kle),e(Kle,JFo),e($i,YFo),e($i,gN),e(gN,KFo),e($i,ZFo),e(at,e6o),M(Yu,at,null),e(xo,o6o),e(xo,Ye),M(ZA,Ye,null),e(Ye,r6o),e(Ye,Zle),e(Zle,t6o),e(Ye,a6o),e(Ye,xa),e(xa,n6o),e(xa,eie),e(eie,s6o),e(xa,l6o),e(xa,oie),e(oie,i6o),e(xa,d6o),e(xa,rie),e(rie,c6o),e(xa,f6o),e(Ye,m6o),e(Ye,G),e(G,Ku),e(Ku,tie),e(tie,g6o),e(Ku,h6o),e(Ku,hN),e(hN,p6o),e(Ku,u6o),e(G,_6o),e(G,Zu),e(Zu,aie),e(aie,b6o),e(Zu,v6o),e(Zu,pN),e(pN,F6o),e(Zu,T6o),e(G,M6o),e(G,e_),e(e_,nie),e(nie,E6o),e(e_,C6o),e(e_,uN),e(uN,w6o),e(e_,A6o),e(G,y6o),e(G,o_),e(o_,sie),e(sie,L6o),e(o_,x6o),e(o_,_N),e(_N,$6o),e(o_,k6o),e(G,S6o),e(G,r_),e(r_,lie),e(lie,R6o),e(r_,P6o),e(r_,bN),e(bN,B6o),e(r_,I6o),e(G,q6o),e(G,t_),e(t_,iie),e(iie,N6o),e(t_,j6o),e(t_,vN),e(vN,D6o),e(t_,G6o),e(G,O6o),e(G,a_),e(a_,die),e(die,V6o),e(a_,X6o),e(a_,FN),e(FN,z6o),e(a_,W6o),e(G,Q6o),e(G,n_),e(n_,cie),e(cie,H6o),e(n_,U6o),e(n_,TN),e(TN,J6o),e(n_,Y6o),e(G,K6o),e(G,s_),e(s_,fie),e(fie,Z6o),e(s_,eTo),e(s_,MN),e(MN,oTo),e(s_,rTo),e(G,tTo),e(G,l_),e(l_,mie),e(mie,aTo),e(l_,nTo),e(l_,EN),e(EN,sTo),e(l_,lTo),e(G,iTo),e(G,i_),e(i_,gie),e(gie,dTo),e(i_,cTo),e(i_,CN),e(CN,fTo),e(i_,mTo),e(G,gTo),e(G,d_),e(d_,hie),e(hie,hTo),e(d_,pTo),e(d_,wN),e(wN,uTo),e(d_,_To),e(G,bTo),e(G,c_),e(c_,pie),e(pie,vTo),e(c_,FTo),e(c_,AN),e(AN,TTo),e(c_,MTo),e(G,ETo),e(G,f_),e(f_,uie),e(uie,CTo),e(f_,wTo),e(f_,yN),e(yN,ATo),e(f_,yTo),e(G,LTo),e(G,m_),e(m_,_ie),e(_ie,xTo),e(m_,$To),e(m_,LN),e(LN,kTo),e(m_,STo),e(G,RTo),e(G,g_),e(g_,bie),e(bie,PTo),e(g_,BTo),e(g_,xN),e(xN,ITo),e(g_,qTo),e(G,NTo),e(G,h_),e(h_,vie),e(vie,jTo),e(h_,DTo),e(h_,$N),e($N,GTo),e(h_,OTo),e(G,VTo),e(G,p_),e(p_,Fie),e(Fie,XTo),e(p_,zTo),e(p_,kN),e(kN,WTo),e(p_,QTo),e(G,HTo),e(G,u_),e(u_,Tie),e(Tie,UTo),e(u_,JTo),e(u_,SN),e(SN,YTo),e(u_,KTo),e(G,ZTo),e(G,__),e(__,Mie),e(Mie,e7o),e(__,o7o),e(__,RN),e(RN,r7o),e(__,t7o),e(G,a7o),e(G,b_),e(b_,Eie),e(Eie,n7o),e(b_,s7o),e(b_,PN),e(PN,l7o),e(b_,i7o),e(G,d7o),e(G,v_),e(v_,Cie),e(Cie,c7o),e(v_,f7o),e(v_,BN),e(BN,m7o),e(v_,g7o),e(G,h7o),e(G,F_),e(F_,wie),e(wie,p7o),e(F_,u7o),e(F_,IN),e(IN,_7o),e(F_,b7o),e(G,v7o),e(G,T_),e(T_,Aie),e(Aie,F7o),e(T_,T7o),e(T_,qN),e(qN,M7o),e(T_,E7o),e(G,C7o),e(G,M_),e(M_,yie),e(yie,w7o),e(M_,A7o),e(M_,NN),e(NN,y7o),e(M_,L7o),e(G,x7o),e(G,E_),e(E_,Lie),e(Lie,$7o),e(E_,k7o),e(E_,jN),e(jN,S7o),e(E_,R7o),e(G,P7o),e(G,C_),e(C_,xie),e(xie,B7o),e(C_,I7o),e(C_,DN),e(DN,q7o),e(C_,N7o),e(G,j7o),e(G,w_),e(w_,$ie),e($ie,D7o),e(w_,G7o),e(w_,GN),e(GN,O7o),e(w_,V7o),e(G,X7o),e(G,A_),e(A_,kie),e(kie,z7o),e(A_,W7o),e(A_,ON),e(ON,Q7o),e(A_,H7o),e(G,U7o),e(G,y_),e(y_,Sie),e(Sie,J7o),e(y_,Y7o),e(y_,VN),e(VN,K7o),e(y_,Z7o),e(G,eMo),e(G,L_),e(L_,Rie),e(Rie,oMo),e(L_,rMo),e(L_,XN),e(XN,tMo),e(L_,aMo),e(G,nMo),e(G,x_),e(x_,Pie),e(Pie,sMo),e(x_,lMo),e(x_,zN),e(zN,iMo),e(x_,dMo),e(G,cMo),e(G,$_),e($_,Bie),e(Bie,fMo),e($_,mMo),e($_,WN),e(WN,gMo),e($_,hMo),e(G,pMo),e(G,k_),e(k_,Iie),e(Iie,uMo),e(k_,_Mo),e(k_,QN),e(QN,bMo),e(k_,vMo),e(G,FMo),e(G,S_),e(S_,qie),e(qie,TMo),e(S_,MMo),e(S_,HN),e(HN,EMo),e(S_,CMo),e(G,wMo),e(G,R_),e(R_,Nie),e(Nie,AMo),e(R_,yMo),e(R_,UN),e(UN,LMo),e(R_,xMo),e(G,$Mo),e(G,P_),e(P_,jie),e(jie,kMo),e(P_,SMo),e(P_,JN),e(JN,RMo),e(P_,PMo),e(G,BMo),e(G,B_),e(B_,Die),e(Die,IMo),e(B_,qMo),e(B_,YN),e(YN,NMo),e(B_,jMo),e(G,DMo),e(G,I_),e(I_,Gie),e(Gie,GMo),e(I_,OMo),e(I_,KN),e(KN,VMo),e(I_,XMo),e(G,zMo),e(G,q_),e(q_,Oie),e(Oie,WMo),e(q_,QMo),e(q_,ZN),e(ZN,HMo),e(q_,UMo),e(G,JMo),e(G,N_),e(N_,Vie),e(Vie,YMo),e(N_,KMo),e(N_,ej),e(ej,ZMo),e(N_,e4o),e(G,o4o),e(G,j_),e(j_,Xie),e(Xie,r4o),e(j_,t4o),e(j_,oj),e(oj,a4o),e(j_,n4o),e(Ye,s4o),e(Ye,D_),e(D_,l4o),e(D_,zie),e(zie,i4o),e(D_,d4o),e(D_,Wie),e(Wie,c4o),e(Ye,f4o),M(G_,Ye,null),b(f,Rqe,_),b(f,ki,_),e(ki,O_),e(O_,Qie),M(ey,Qie,null),e(ki,m4o),e(ki,Hie),e(Hie,g4o),b(f,Pqe,_),b(f,$o,_),M(oy,$o,null),e($o,h4o),e($o,Si),e(Si,p4o),e(Si,rj),e(rj,u4o),e(Si,_4o),e(Si,tj),e(tj,b4o),e(Si,v4o),e($o,F4o),e($o,ry),e(ry,T4o),e(ry,Uie),e(Uie,M4o),e(ry,E4o),e($o,C4o),e($o,nt),M(ty,nt,null),e(nt,w4o),e(nt,Jie),e(Jie,A4o),e(nt,y4o),e(nt,Ri),e(Ri,L4o),e(Ri,Yie),e(Yie,x4o),e(Ri,$4o),e(Ri,aj),e(aj,k4o),e(Ri,S4o),e(nt,R4o),M(V_,nt,null),e($o,P4o),e($o,Ke),M(ay,Ke,null),e(Ke,B4o),e(Ke,Kie),e(Kie,I4o),e(Ke,q4o),e(Ke,$a),e($a,N4o),e($a,Zie),e(Zie,j4o),e($a,D4o),e($a,ede),e(ede,G4o),e($a,O4o),e($a,ode),e(ode,V4o),e($a,X4o),e(Ke,z4o),e(Ke,z),e(z,X_),e(X_,rde),e(rde,W4o),e(X_,Q4o),e(X_,nj),e(nj,H4o),e(X_,U4o),e(z,J4o),e(z,z_),e(z_,tde),e(tde,Y4o),e(z_,K4o),e(z_,sj),e(sj,Z4o),e(z_,eEo),e(z,oEo),e(z,W_),e(W_,ade),e(ade,rEo),e(W_,tEo),e(W_,lj),e(lj,aEo),e(W_,nEo),e(z,sEo),e(z,Q_),e(Q_,nde),e(nde,lEo),e(Q_,iEo),e(Q_,ij),e(ij,dEo),e(Q_,cEo),e(z,fEo),e(z,H_),e(H_,sde),e(sde,mEo),e(H_,gEo),e(H_,dj),e(dj,hEo),e(H_,pEo),e(z,uEo),e(z,U_),e(U_,lde),e(lde,_Eo),e(U_,bEo),e(U_,cj),e(cj,vEo),e(U_,FEo),e(z,TEo),e(z,J_),e(J_,ide),e(ide,MEo),e(J_,EEo),e(J_,fj),e(fj,CEo),e(J_,wEo),e(z,AEo),e(z,Y_),e(Y_,dde),e(dde,yEo),e(Y_,LEo),e(Y_,mj),e(mj,xEo),e(Y_,$Eo),e(z,kEo),e(z,K_),e(K_,cde),e(cde,SEo),e(K_,REo),e(K_,gj),e(gj,PEo),e(K_,BEo),e(z,IEo),e(z,Z_),e(Z_,fde),e(fde,qEo),e(Z_,NEo),e(Z_,hj),e(hj,jEo),e(Z_,DEo),e(z,GEo),e(z,e0),e(e0,mde),e(mde,OEo),e(e0,VEo),e(e0,pj),e(pj,XEo),e(e0,zEo),e(z,WEo),e(z,o0),e(o0,gde),e(gde,QEo),e(o0,HEo),e(o0,uj),e(uj,UEo),e(o0,JEo),e(z,YEo),e(z,r0),e(r0,hde),e(hde,KEo),e(r0,ZEo),e(r0,_j),e(_j,eCo),e(r0,oCo),e(z,rCo),e(z,t0),e(t0,pde),e(pde,tCo),e(t0,aCo),e(t0,bj),e(bj,nCo),e(t0,sCo),e(z,lCo),e(z,a0),e(a0,ude),e(ude,iCo),e(a0,dCo),e(a0,vj),e(vj,cCo),e(a0,fCo),e(z,mCo),e(z,n0),e(n0,_de),e(_de,gCo),e(n0,hCo),e(n0,Fj),e(Fj,pCo),e(n0,uCo),e(z,_Co),e(z,s0),e(s0,bde),e(bde,bCo),e(s0,vCo),e(s0,Tj),e(Tj,FCo),e(s0,TCo),e(z,MCo),e(z,l0),e(l0,vde),e(vde,ECo),e(l0,CCo),e(l0,Mj),e(Mj,wCo),e(l0,ACo),e(z,yCo),e(z,i0),e(i0,Fde),e(Fde,LCo),e(i0,xCo),e(i0,Ej),e(Ej,$Co),e(i0,kCo),e(z,SCo),e(z,d0),e(d0,Tde),e(Tde,RCo),e(d0,PCo),e(d0,Cj),e(Cj,BCo),e(d0,ICo),e(z,qCo),e(z,c0),e(c0,Mde),e(Mde,NCo),e(c0,jCo),e(c0,wj),e(wj,DCo),e(c0,GCo),e(z,OCo),e(z,f0),e(f0,Ede),e(Ede,VCo),e(f0,XCo),e(f0,Aj),e(Aj,zCo),e(f0,WCo),e(z,QCo),e(z,m0),e(m0,Cde),e(Cde,HCo),e(m0,UCo),e(m0,yj),e(yj,JCo),e(m0,YCo),e(z,KCo),e(z,g0),e(g0,wde),e(wde,ZCo),e(g0,e5o),e(g0,Lj),e(Lj,o5o),e(g0,r5o),e(z,t5o),e(z,h0),e(h0,Ade),e(Ade,a5o),e(h0,n5o),e(h0,xj),e(xj,s5o),e(h0,l5o),e(z,i5o),e(z,p0),e(p0,yde),e(yde,d5o),e(p0,c5o),e(p0,$j),e($j,f5o),e(p0,m5o),e(z,g5o),e(z,u0),e(u0,Lde),e(Lde,h5o),e(u0,p5o),e(u0,kj),e(kj,u5o),e(u0,_5o),e(z,b5o),e(z,_0),e(_0,xde),e(xde,v5o),e(_0,F5o),e(_0,Sj),e(Sj,T5o),e(_0,M5o),e(z,E5o),e(z,b0),e(b0,$de),e($de,C5o),e(b0,w5o),e(b0,Rj),e(Rj,A5o),e(b0,y5o),e(z,L5o),e(z,v0),e(v0,kde),e(kde,x5o),e(v0,$5o),e(v0,Pj),e(Pj,k5o),e(v0,S5o),e(z,R5o),e(z,F0),e(F0,Sde),e(Sde,P5o),e(F0,B5o),e(F0,Bj),e(Bj,I5o),e(F0,q5o),e(z,N5o),e(z,T0),e(T0,Rde),e(Rde,j5o),e(T0,D5o),e(T0,Ij),e(Ij,G5o),e(T0,O5o),e(z,V5o),e(z,M0),e(M0,Pde),e(Pde,X5o),e(M0,z5o),e(M0,qj),e(qj,W5o),e(M0,Q5o),e(z,H5o),e(z,E0),e(E0,Bde),e(Bde,U5o),e(E0,J5o),e(E0,Nj),e(Nj,Y5o),e(E0,K5o),e(z,Z5o),e(z,C0),e(C0,Ide),e(Ide,e3o),e(C0,o3o),e(C0,jj),e(jj,r3o),e(C0,t3o),e(z,a3o),e(z,w0),e(w0,qde),e(qde,n3o),e(w0,s3o),e(w0,Dj),e(Dj,l3o),e(w0,i3o),e(Ke,d3o),e(Ke,A0),e(A0,c3o),e(A0,Nde),e(Nde,f3o),e(A0,m3o),e(A0,jde),e(jde,g3o),e(Ke,h3o),M(y0,Ke,null),b(f,Bqe,_),b(f,Pi,_),e(Pi,L0),e(L0,Dde),M(ny,Dde,null),e(Pi,p3o),e(Pi,Gde),e(Gde,u3o),b(f,Iqe,_),b(f,ko,_),M(sy,ko,null),e(ko,_3o),e(ko,Bi),e(Bi,b3o),e(Bi,Gj),e(Gj,v3o),e(Bi,F3o),e(Bi,Oj),e(Oj,T3o),e(Bi,M3o),e(ko,E3o),e(ko,ly),e(ly,C3o),e(ly,Ode),e(Ode,w3o),e(ly,A3o),e(ko,y3o),e(ko,st),M(iy,st,null),e(st,L3o),e(st,Vde),e(Vde,x3o),e(st,$3o),e(st,Ii),e(Ii,k3o),e(Ii,Xde),e(Xde,S3o),e(Ii,R3o),e(Ii,Vj),e(Vj,P3o),e(Ii,B3o),e(st,I3o),M(x0,st,null),e(ko,q3o),e(ko,Ze),M(dy,Ze,null),e(Ze,N3o),e(Ze,zde),e(zde,j3o),e(Ze,D3o),e(Ze,ka),e(ka,G3o),e(ka,Wde),e(Wde,O3o),e(ka,V3o),e(ka,Qde),e(Qde,X3o),e(ka,z3o),e(ka,Hde),e(Hde,W3o),e(ka,Q3o),e(Ze,H3o),e(Ze,W),e(W,$0),e($0,Ude),e(Ude,U3o),e($0,J3o),e($0,Xj),e(Xj,Y3o),e($0,K3o),e(W,Z3o),e(W,k0),e(k0,Jde),e(Jde,ewo),e(k0,owo),e(k0,zj),e(zj,rwo),e(k0,two),e(W,awo),e(W,S0),e(S0,Yde),e(Yde,nwo),e(S0,swo),e(S0,Wj),e(Wj,lwo),e(S0,iwo),e(W,dwo),e(W,R0),e(R0,Kde),e(Kde,cwo),e(R0,fwo),e(R0,Qj),e(Qj,mwo),e(R0,gwo),e(W,hwo),e(W,P0),e(P0,Zde),e(Zde,pwo),e(P0,uwo),e(P0,Hj),e(Hj,_wo),e(P0,bwo),e(W,vwo),e(W,B0),e(B0,ece),e(ece,Fwo),e(B0,Two),e(B0,Uj),e(Uj,Mwo),e(B0,Ewo),e(W,Cwo),e(W,I0),e(I0,oce),e(oce,wwo),e(I0,Awo),e(I0,Jj),e(Jj,ywo),e(I0,Lwo),e(W,xwo),e(W,q0),e(q0,rce),e(rce,$wo),e(q0,kwo),e(q0,Yj),e(Yj,Swo),e(q0,Rwo),e(W,Pwo),e(W,N0),e(N0,tce),e(tce,Bwo),e(N0,Iwo),e(N0,Kj),e(Kj,qwo),e(N0,Nwo),e(W,jwo),e(W,j0),e(j0,ace),e(ace,Dwo),e(j0,Gwo),e(j0,Zj),e(Zj,Owo),e(j0,Vwo),e(W,Xwo),e(W,D0),e(D0,nce),e(nce,zwo),e(D0,Wwo),e(D0,eD),e(eD,Qwo),e(D0,Hwo),e(W,Uwo),e(W,G0),e(G0,sce),e(sce,Jwo),e(G0,Ywo),e(G0,oD),e(oD,Kwo),e(G0,Zwo),e(W,eAo),e(W,O0),e(O0,lce),e(lce,oAo),e(O0,rAo),e(O0,rD),e(rD,tAo),e(O0,aAo),e(W,nAo),e(W,V0),e(V0,ice),e(ice,sAo),e(V0,lAo),e(V0,tD),e(tD,iAo),e(V0,dAo),e(W,cAo),e(W,X0),e(X0,dce),e(dce,fAo),e(X0,mAo),e(X0,aD),e(aD,gAo),e(X0,hAo),e(W,pAo),e(W,z0),e(z0,cce),e(cce,uAo),e(z0,_Ao),e(z0,nD),e(nD,bAo),e(z0,vAo),e(W,FAo),e(W,W0),e(W0,fce),e(fce,TAo),e(W0,MAo),e(W0,sD),e(sD,EAo),e(W0,CAo),e(W,wAo),e(W,Q0),e(Q0,mce),e(mce,AAo),e(Q0,yAo),e(Q0,lD),e(lD,LAo),e(Q0,xAo),e(W,$Ao),e(W,H0),e(H0,gce),e(gce,kAo),e(H0,SAo),e(H0,iD),e(iD,RAo),e(H0,PAo),e(W,BAo),e(W,U0),e(U0,hce),e(hce,IAo),e(U0,qAo),e(U0,dD),e(dD,NAo),e(U0,jAo),e(W,DAo),e(W,J0),e(J0,pce),e(pce,GAo),e(J0,OAo),e(J0,cD),e(cD,VAo),e(J0,XAo),e(W,zAo),e(W,Y0),e(Y0,uce),e(uce,WAo),e(Y0,QAo),e(Y0,fD),e(fD,HAo),e(Y0,UAo),e(W,JAo),e(W,K0),e(K0,_ce),e(_ce,YAo),e(K0,KAo),e(K0,mD),e(mD,ZAo),e(K0,eyo),e(W,oyo),e(W,Z0),e(Z0,bce),e(bce,ryo),e(Z0,tyo),e(Z0,gD),e(gD,ayo),e(Z0,nyo),e(W,syo),e(W,e1),e(e1,vce),e(vce,lyo),e(e1,iyo),e(e1,hD),e(hD,dyo),e(e1,cyo),e(W,fyo),e(W,o1),e(o1,Fce),e(Fce,myo),e(o1,gyo),e(o1,pD),e(pD,hyo),e(o1,pyo),e(W,uyo),e(W,r1),e(r1,Tce),e(Tce,_yo),e(r1,byo),e(r1,uD),e(uD,vyo),e(r1,Fyo),e(W,Tyo),e(W,t1),e(t1,Mce),e(Mce,Myo),e(t1,Eyo),e(t1,_D),e(_D,Cyo),e(t1,wyo),e(W,Ayo),e(W,a1),e(a1,Ece),e(Ece,yyo),e(a1,Lyo),e(a1,bD),e(bD,xyo),e(a1,$yo),e(W,kyo),e(W,n1),e(n1,Cce),e(Cce,Syo),e(n1,Ryo),e(n1,vD),e(vD,Pyo),e(n1,Byo),e(W,Iyo),e(W,s1),e(s1,wce),e(wce,qyo),e(s1,Nyo),e(s1,Ace),e(Ace,jyo),e(s1,Dyo),e(W,Gyo),e(W,l1),e(l1,yce),e(yce,Oyo),e(l1,Vyo),e(l1,FD),e(FD,Xyo),e(l1,zyo),e(W,Wyo),e(W,i1),e(i1,Lce),e(Lce,Qyo),e(i1,Hyo),e(i1,TD),e(TD,Uyo),e(i1,Jyo),e(W,Yyo),e(W,d1),e(d1,xce),e(xce,Kyo),e(d1,Zyo),e(d1,MD),e(MD,eLo),e(d1,oLo),e(W,rLo),e(W,c1),e(c1,$ce),e($ce,tLo),e(c1,aLo),e(c1,ED),e(ED,nLo),e(c1,sLo),e(Ze,lLo),e(Ze,f1),e(f1,iLo),e(f1,kce),e(kce,dLo),e(f1,cLo),e(f1,Sce),e(Sce,fLo),e(Ze,mLo),M(m1,Ze,null),b(f,qqe,_),b(f,qi,_),e(qi,g1),e(g1,Rce),M(cy,Rce,null),e(qi,gLo),e(qi,Pce),e(Pce,hLo),b(f,Nqe,_),b(f,So,_),M(fy,So,null),e(So,pLo),e(So,Ni),e(Ni,uLo),e(Ni,CD),e(CD,_Lo),e(Ni,bLo),e(Ni,wD),e(wD,vLo),e(Ni,FLo),e(So,TLo),e(So,my),e(my,MLo),e(my,Bce),e(Bce,ELo),e(my,CLo),e(So,wLo),e(So,lt),M(gy,lt,null),e(lt,ALo),e(lt,Ice),e(Ice,yLo),e(lt,LLo),e(lt,ji),e(ji,xLo),e(ji,qce),e(qce,$Lo),e(ji,kLo),e(ji,AD),e(AD,SLo),e(ji,RLo),e(lt,PLo),M(h1,lt,null),e(So,BLo),e(So,eo),M(hy,eo,null),e(eo,ILo),e(eo,Nce),e(Nce,qLo),e(eo,NLo),e(eo,Sa),e(Sa,jLo),e(Sa,jce),e(jce,DLo),e(Sa,GLo),e(Sa,Dce),e(Dce,OLo),e(Sa,VLo),e(Sa,Gce),e(Gce,XLo),e(Sa,zLo),e(eo,WLo),e(eo,ue),e(ue,p1),e(p1,Oce),e(Oce,QLo),e(p1,HLo),e(p1,yD),e(yD,ULo),e(p1,JLo),e(ue,YLo),e(ue,u1),e(u1,Vce),e(Vce,KLo),e(u1,ZLo),e(u1,LD),e(LD,e8o),e(u1,o8o),e(ue,r8o),e(ue,_1),e(_1,Xce),e(Xce,t8o),e(_1,a8o),e(_1,xD),e(xD,n8o),e(_1,s8o),e(ue,l8o),e(ue,b1),e(b1,zce),e(zce,i8o),e(b1,d8o),e(b1,$D),e($D,c8o),e(b1,f8o),e(ue,m8o),e(ue,v1),e(v1,Wce),e(Wce,g8o),e(v1,h8o),e(v1,kD),e(kD,p8o),e(v1,u8o),e(ue,_8o),e(ue,F1),e(F1,Qce),e(Qce,b8o),e(F1,v8o),e(F1,SD),e(SD,F8o),e(F1,T8o),e(ue,M8o),e(ue,T1),e(T1,Hce),e(Hce,E8o),e(T1,C8o),e(T1,RD),e(RD,w8o),e(T1,A8o),e(ue,y8o),e(ue,M1),e(M1,Uce),e(Uce,L8o),e(M1,x8o),e(M1,PD),e(PD,$8o),e(M1,k8o),e(ue,S8o),e(ue,E1),e(E1,Jce),e(Jce,R8o),e(E1,P8o),e(E1,BD),e(BD,B8o),e(E1,I8o),e(ue,q8o),e(ue,C1),e(C1,Yce),e(Yce,N8o),e(C1,j8o),e(C1,ID),e(ID,D8o),e(C1,G8o),e(ue,O8o),e(ue,w1),e(w1,Kce),e(Kce,V8o),e(w1,X8o),e(w1,qD),e(qD,z8o),e(w1,W8o),e(ue,Q8o),e(ue,A1),e(A1,Zce),e(Zce,H8o),e(A1,U8o),e(A1,ND),e(ND,J8o),e(A1,Y8o),e(ue,K8o),e(ue,y1),e(y1,efe),e(efe,Z8o),e(y1,e9o),e(y1,jD),e(jD,o9o),e(y1,r9o),e(ue,t9o),e(ue,L1),e(L1,ofe),e(ofe,a9o),e(L1,n9o),e(L1,DD),e(DD,s9o),e(L1,l9o),e(ue,i9o),e(ue,x1),e(x1,rfe),e(rfe,d9o),e(x1,c9o),e(x1,GD),e(GD,f9o),e(x1,m9o),e(ue,g9o),e(ue,$1),e($1,tfe),e(tfe,h9o),e($1,p9o),e($1,OD),e(OD,u9o),e($1,_9o),e(eo,b9o),e(eo,k1),e(k1,v9o),e(k1,afe),e(afe,F9o),e(k1,T9o),e(k1,nfe),e(nfe,M9o),e(eo,E9o),M(S1,eo,null),b(f,jqe,_),b(f,Di,_),e(Di,R1),e(R1,sfe),M(py,sfe,null),e(Di,C9o),e(Di,lfe),e(lfe,w9o),b(f,Dqe,_),b(f,Ro,_),M(uy,Ro,null),e(Ro,A9o),e(Ro,Gi),e(Gi,y9o),e(Gi,VD),e(VD,L9o),e(Gi,x9o),e(Gi,XD),e(XD,$9o),e(Gi,k9o),e(Ro,S9o),e(Ro,_y),e(_y,R9o),e(_y,ife),e(ife,P9o),e(_y,B9o),e(Ro,I9o),e(Ro,it),M(by,it,null),e(it,q9o),e(it,dfe),e(dfe,N9o),e(it,j9o),e(it,Oi),e(Oi,D9o),e(Oi,cfe),e(cfe,G9o),e(Oi,O9o),e(Oi,zD),e(zD,V9o),e(Oi,X9o),e(it,z9o),M(P1,it,null),e(Ro,W9o),e(Ro,oo),M(vy,oo,null),e(oo,Q9o),e(oo,ffe),e(ffe,H9o),e(oo,U9o),e(oo,Ra),e(Ra,J9o),e(Ra,mfe),e(mfe,Y9o),e(Ra,K9o),e(Ra,gfe),e(gfe,Z9o),e(Ra,exo),e(Ra,hfe),e(hfe,oxo),e(Ra,rxo),e(oo,txo),e(oo,q),e(q,B1),e(B1,pfe),e(pfe,axo),e(B1,nxo),e(B1,WD),e(WD,sxo),e(B1,lxo),e(q,ixo),e(q,I1),e(I1,ufe),e(ufe,dxo),e(I1,cxo),e(I1,QD),e(QD,fxo),e(I1,mxo),e(q,gxo),e(q,q1),e(q1,_fe),e(_fe,hxo),e(q1,pxo),e(q1,HD),e(HD,uxo),e(q1,_xo),e(q,bxo),e(q,N1),e(N1,bfe),e(bfe,vxo),e(N1,Fxo),e(N1,UD),e(UD,Txo),e(N1,Mxo),e(q,Exo),e(q,j1),e(j1,vfe),e(vfe,Cxo),e(j1,wxo),e(j1,JD),e(JD,Axo),e(j1,yxo),e(q,Lxo),e(q,D1),e(D1,Ffe),e(Ffe,xxo),e(D1,$xo),e(D1,YD),e(YD,kxo),e(D1,Sxo),e(q,Rxo),e(q,G1),e(G1,Tfe),e(Tfe,Pxo),e(G1,Bxo),e(G1,KD),e(KD,Ixo),e(G1,qxo),e(q,Nxo),e(q,O1),e(O1,Mfe),e(Mfe,jxo),e(O1,Dxo),e(O1,ZD),e(ZD,Gxo),e(O1,Oxo),e(q,Vxo),e(q,V1),e(V1,Efe),e(Efe,Xxo),e(V1,zxo),e(V1,eG),e(eG,Wxo),e(V1,Qxo),e(q,Hxo),e(q,X1),e(X1,Cfe),e(Cfe,Uxo),e(X1,Jxo),e(X1,oG),e(oG,Yxo),e(X1,Kxo),e(q,Zxo),e(q,z1),e(z1,wfe),e(wfe,e$o),e(z1,o$o),e(z1,rG),e(rG,r$o),e(z1,t$o),e(q,a$o),e(q,W1),e(W1,Afe),e(Afe,n$o),e(W1,s$o),e(W1,tG),e(tG,l$o),e(W1,i$o),e(q,d$o),e(q,Q1),e(Q1,yfe),e(yfe,c$o),e(Q1,f$o),e(Q1,aG),e(aG,m$o),e(Q1,g$o),e(q,h$o),e(q,H1),e(H1,Lfe),e(Lfe,p$o),e(H1,u$o),e(H1,nG),e(nG,_$o),e(H1,b$o),e(q,v$o),e(q,U1),e(U1,xfe),e(xfe,F$o),e(U1,T$o),e(U1,sG),e(sG,M$o),e(U1,E$o),e(q,C$o),e(q,J1),e(J1,$fe),e($fe,w$o),e(J1,A$o),e(J1,lG),e(lG,y$o),e(J1,L$o),e(q,x$o),e(q,Y1),e(Y1,kfe),e(kfe,$$o),e(Y1,k$o),e(Y1,iG),e(iG,S$o),e(Y1,R$o),e(q,P$o),e(q,K1),e(K1,Sfe),e(Sfe,B$o),e(K1,I$o),e(K1,dG),e(dG,q$o),e(K1,N$o),e(q,j$o),e(q,Z1),e(Z1,Rfe),e(Rfe,D$o),e(Z1,G$o),e(Z1,cG),e(cG,O$o),e(Z1,V$o),e(q,X$o),e(q,eb),e(eb,Pfe),e(Pfe,z$o),e(eb,W$o),e(eb,fG),e(fG,Q$o),e(eb,H$o),e(q,U$o),e(q,ob),e(ob,Bfe),e(Bfe,J$o),e(ob,Y$o),e(ob,mG),e(mG,K$o),e(ob,Z$o),e(q,eko),e(q,rb),e(rb,Ife),e(Ife,oko),e(rb,rko),e(rb,gG),e(gG,tko),e(rb,ako),e(q,nko),e(q,tb),e(tb,qfe),e(qfe,sko),e(tb,lko),e(tb,hG),e(hG,iko),e(tb,dko),e(q,cko),e(q,ab),e(ab,Nfe),e(Nfe,fko),e(ab,mko),e(ab,pG),e(pG,gko),e(ab,hko),e(q,pko),e(q,nb),e(nb,jfe),e(jfe,uko),e(nb,_ko),e(nb,uG),e(uG,bko),e(nb,vko),e(q,Fko),e(q,sb),e(sb,Dfe),e(Dfe,Tko),e(sb,Mko),e(sb,_G),e(_G,Eko),e(sb,Cko),e(q,wko),e(q,lb),e(lb,Gfe),e(Gfe,Ako),e(lb,yko),e(lb,bG),e(bG,Lko),e(lb,xko),e(q,$ko),e(q,ib),e(ib,Ofe),e(Ofe,kko),e(ib,Sko),e(ib,vG),e(vG,Rko),e(ib,Pko),e(q,Bko),e(q,db),e(db,Vfe),e(Vfe,Iko),e(db,qko),e(db,FG),e(FG,Nko),e(db,jko),e(q,Dko),e(q,cb),e(cb,Xfe),e(Xfe,Gko),e(cb,Oko),e(cb,TG),e(TG,Vko),e(cb,Xko),e(q,zko),e(q,fb),e(fb,zfe),e(zfe,Wko),e(fb,Qko),e(fb,MG),e(MG,Hko),e(fb,Uko),e(q,Jko),e(q,mb),e(mb,Wfe),e(Wfe,Yko),e(mb,Kko),e(mb,EG),e(EG,Zko),e(mb,eSo),e(q,oSo),e(q,gb),e(gb,Qfe),e(Qfe,rSo),e(gb,tSo),e(gb,CG),e(CG,aSo),e(gb,nSo),e(q,sSo),e(q,hb),e(hb,Hfe),e(Hfe,lSo),e(hb,iSo),e(hb,wG),e(wG,dSo),e(hb,cSo),e(q,fSo),e(q,pb),e(pb,Ufe),e(Ufe,mSo),e(pb,gSo),e(pb,AG),e(AG,hSo),e(pb,pSo),e(q,uSo),e(q,ub),e(ub,Jfe),e(Jfe,_So),e(ub,bSo),e(ub,yG),e(yG,vSo),e(ub,FSo),e(q,TSo),e(q,_b),e(_b,Yfe),e(Yfe,MSo),e(_b,ESo),e(_b,LG),e(LG,CSo),e(_b,wSo),e(q,ASo),e(q,bb),e(bb,Kfe),e(Kfe,ySo),e(bb,LSo),e(bb,xG),e(xG,xSo),e(bb,$So),e(q,kSo),e(q,vb),e(vb,Zfe),e(Zfe,SSo),e(vb,RSo),e(vb,$G),e($G,PSo),e(vb,BSo),e(q,ISo),e(q,Fb),e(Fb,eme),e(eme,qSo),e(Fb,NSo),e(Fb,kG),e(kG,jSo),e(Fb,DSo),e(q,GSo),e(q,Tb),e(Tb,ome),e(ome,OSo),e(Tb,VSo),e(Tb,SG),e(SG,XSo),e(Tb,zSo),e(q,WSo),e(q,Mb),e(Mb,rme),e(rme,QSo),e(Mb,HSo),e(Mb,RG),e(RG,USo),e(Mb,JSo),e(q,YSo),e(q,Eb),e(Eb,tme),e(tme,KSo),e(Eb,ZSo),e(Eb,PG),e(PG,eRo),e(Eb,oRo),e(q,rRo),e(q,Cb),e(Cb,ame),e(ame,tRo),e(Cb,aRo),e(Cb,BG),e(BG,nRo),e(Cb,sRo),e(q,lRo),e(q,wb),e(wb,nme),e(nme,iRo),e(wb,dRo),e(wb,IG),e(IG,cRo),e(wb,fRo),e(q,mRo),e(q,Ab),e(Ab,sme),e(sme,gRo),e(Ab,hRo),e(Ab,qG),e(qG,pRo),e(Ab,uRo),e(q,_Ro),e(q,yb),e(yb,lme),e(lme,bRo),e(yb,vRo),e(yb,NG),e(NG,FRo),e(yb,TRo),e(oo,MRo),e(oo,Lb),e(Lb,ERo),e(Lb,ime),e(ime,CRo),e(Lb,wRo),e(Lb,dme),e(dme,ARo),e(oo,yRo),M(xb,oo,null),b(f,Gqe,_),b(f,Vi,_),e(Vi,$b),e($b,cme),M(Fy,cme,null),e(Vi,LRo),e(Vi,fme),e(fme,xRo),b(f,Oqe,_),b(f,Po,_),M(Ty,Po,null),e(Po,$Ro),e(Po,Xi),e(Xi,kRo),e(Xi,jG),e(jG,SRo),e(Xi,RRo),e(Xi,DG),e(DG,PRo),e(Xi,BRo),e(Po,IRo),e(Po,My),e(My,qRo),e(My,mme),e(mme,NRo),e(My,jRo),e(Po,DRo),e(Po,dt),M(Ey,dt,null),e(dt,GRo),e(dt,gme),e(gme,ORo),e(dt,VRo),e(dt,zi),e(zi,XRo),e(zi,hme),e(hme,zRo),e(zi,WRo),e(zi,GG),e(GG,QRo),e(zi,HRo),e(dt,URo),M(kb,dt,null),e(Po,JRo),e(Po,ro),M(Cy,ro,null),e(ro,YRo),e(ro,pme),e(pme,KRo),e(ro,ZRo),e(ro,Pa),e(Pa,ePo),e(Pa,ume),e(ume,oPo),e(Pa,rPo),e(Pa,_me),e(_me,tPo),e(Pa,aPo),e(Pa,bme),e(bme,nPo),e(Pa,sPo),e(ro,lPo),e(ro,Y),e(Y,Sb),e(Sb,vme),e(vme,iPo),e(Sb,dPo),e(Sb,OG),e(OG,cPo),e(Sb,fPo),e(Y,mPo),e(Y,Rb),e(Rb,Fme),e(Fme,gPo),e(Rb,hPo),e(Rb,VG),e(VG,pPo),e(Rb,uPo),e(Y,_Po),e(Y,Pb),e(Pb,Tme),e(Tme,bPo),e(Pb,vPo),e(Pb,XG),e(XG,FPo),e(Pb,TPo),e(Y,MPo),e(Y,Bb),e(Bb,Mme),e(Mme,EPo),e(Bb,CPo),e(Bb,zG),e(zG,wPo),e(Bb,APo),e(Y,yPo),e(Y,Ib),e(Ib,Eme),e(Eme,LPo),e(Ib,xPo),e(Ib,WG),e(WG,$Po),e(Ib,kPo),e(Y,SPo),e(Y,qb),e(qb,Cme),e(Cme,RPo),e(qb,PPo),e(qb,QG),e(QG,BPo),e(qb,IPo),e(Y,qPo),e(Y,Nb),e(Nb,wme),e(wme,NPo),e(Nb,jPo),e(Nb,HG),e(HG,DPo),e(Nb,GPo),e(Y,OPo),e(Y,jb),e(jb,Ame),e(Ame,VPo),e(jb,XPo),e(jb,UG),e(UG,zPo),e(jb,WPo),e(Y,QPo),e(Y,Db),e(Db,yme),e(yme,HPo),e(Db,UPo),e(Db,JG),e(JG,JPo),e(Db,YPo),e(Y,KPo),e(Y,Gb),e(Gb,Lme),e(Lme,ZPo),e(Gb,eBo),e(Gb,YG),e(YG,oBo),e(Gb,rBo),e(Y,tBo),e(Y,Ob),e(Ob,xme),e(xme,aBo),e(Ob,nBo),e(Ob,KG),e(KG,sBo),e(Ob,lBo),e(Y,iBo),e(Y,Vb),e(Vb,$me),e($me,dBo),e(Vb,cBo),e(Vb,ZG),e(ZG,fBo),e(Vb,mBo),e(Y,gBo),e(Y,Xb),e(Xb,kme),e(kme,hBo),e(Xb,pBo),e(Xb,eO),e(eO,uBo),e(Xb,_Bo),e(Y,bBo),e(Y,zb),e(zb,Sme),e(Sme,vBo),e(zb,FBo),e(zb,oO),e(oO,TBo),e(zb,MBo),e(Y,EBo),e(Y,Wb),e(Wb,Rme),e(Rme,CBo),e(Wb,wBo),e(Wb,rO),e(rO,ABo),e(Wb,yBo),e(Y,LBo),e(Y,Qb),e(Qb,Pme),e(Pme,xBo),e(Qb,$Bo),e(Qb,tO),e(tO,kBo),e(Qb,SBo),e(Y,RBo),e(Y,Hb),e(Hb,Bme),e(Bme,PBo),e(Hb,BBo),e(Hb,aO),e(aO,IBo),e(Hb,qBo),e(Y,NBo),e(Y,Ub),e(Ub,Ime),e(Ime,jBo),e(Ub,DBo),e(Ub,nO),e(nO,GBo),e(Ub,OBo),e(Y,VBo),e(Y,Jb),e(Jb,qme),e(qme,XBo),e(Jb,zBo),e(Jb,sO),e(sO,WBo),e(Jb,QBo),e(Y,HBo),e(Y,Yb),e(Yb,Nme),e(Nme,UBo),e(Yb,JBo),e(Yb,lO),e(lO,YBo),e(Yb,KBo),e(Y,ZBo),e(Y,Kb),e(Kb,jme),e(jme,eIo),e(Kb,oIo),e(Kb,iO),e(iO,rIo),e(Kb,tIo),e(Y,aIo),e(Y,Zb),e(Zb,Dme),e(Dme,nIo),e(Zb,sIo),e(Zb,dO),e(dO,lIo),e(Zb,iIo),e(Y,dIo),e(Y,e2),e(e2,Gme),e(Gme,cIo),e(e2,fIo),e(e2,cO),e(cO,mIo),e(e2,gIo),e(Y,hIo),e(Y,o2),e(o2,Ome),e(Ome,pIo),e(o2,uIo),e(o2,fO),e(fO,_Io),e(o2,bIo),e(Y,vIo),e(Y,r2),e(r2,Vme),e(Vme,FIo),e(r2,TIo),e(r2,mO),e(mO,MIo),e(r2,EIo),e(Y,CIo),e(Y,t2),e(t2,Xme),e(Xme,wIo),e(t2,AIo),e(t2,gO),e(gO,yIo),e(t2,LIo),e(Y,xIo),e(Y,a2),e(a2,zme),e(zme,$Io),e(a2,kIo),e(a2,hO),e(hO,SIo),e(a2,RIo),e(Y,PIo),e(Y,n2),e(n2,Wme),e(Wme,BIo),e(n2,IIo),e(n2,pO),e(pO,qIo),e(n2,NIo),e(Y,jIo),e(Y,s2),e(s2,Qme),e(Qme,DIo),e(s2,GIo),e(s2,uO),e(uO,OIo),e(s2,VIo),e(ro,XIo),e(ro,l2),e(l2,zIo),e(l2,Hme),e(Hme,WIo),e(l2,QIo),e(l2,Ume),e(Ume,HIo),e(ro,UIo),M(i2,ro,null),b(f,Vqe,_),b(f,Wi,_),e(Wi,d2),e(d2,Jme),M(wy,Jme,null),e(Wi,JIo),e(Wi,Yme),e(Yme,YIo),b(f,Xqe,_),b(f,Bo,_),M(Ay,Bo,null),e(Bo,KIo),e(Bo,Qi),e(Qi,ZIo),e(Qi,_O),e(_O,eqo),e(Qi,oqo),e(Qi,bO),e(bO,rqo),e(Qi,tqo),e(Bo,aqo),e(Bo,yy),e(yy,nqo),e(yy,Kme),e(Kme,sqo),e(yy,lqo),e(Bo,iqo),e(Bo,ct),M(Ly,ct,null),e(ct,dqo),e(ct,Zme),e(Zme,cqo),e(ct,fqo),e(ct,Hi),e(Hi,mqo),e(Hi,ege),e(ege,gqo),e(Hi,hqo),e(Hi,vO),e(vO,pqo),e(Hi,uqo),e(ct,_qo),M(c2,ct,null),e(Bo,bqo),e(Bo,to),M(xy,to,null),e(to,vqo),e(to,oge),e(oge,Fqo),e(to,Tqo),e(to,Ba),e(Ba,Mqo),e(Ba,rge),e(rge,Eqo),e(Ba,Cqo),e(Ba,tge),e(tge,wqo),e(Ba,Aqo),e(Ba,age),e(age,yqo),e(Ba,Lqo),e(to,xqo),e(to,Yr),e(Yr,f2),e(f2,nge),e(nge,$qo),e(f2,kqo),e(f2,FO),e(FO,Sqo),e(f2,Rqo),e(Yr,Pqo),e(Yr,m2),e(m2,sge),e(sge,Bqo),e(m2,Iqo),e(m2,TO),e(TO,qqo),e(m2,Nqo),e(Yr,jqo),e(Yr,g2),e(g2,lge),e(lge,Dqo),e(g2,Gqo),e(g2,MO),e(MO,Oqo),e(g2,Vqo),e(Yr,Xqo),e(Yr,h2),e(h2,ige),e(ige,zqo),e(h2,Wqo),e(h2,EO),e(EO,Qqo),e(h2,Hqo),e(Yr,Uqo),e(Yr,p2),e(p2,dge),e(dge,Jqo),e(p2,Yqo),e(p2,CO),e(CO,Kqo),e(p2,Zqo),e(to,eNo),e(to,u2),e(u2,oNo),e(u2,cge),e(cge,rNo),e(u2,tNo),e(u2,fge),e(fge,aNo),e(to,nNo),M(_2,to,null),b(f,zqe,_),b(f,Ui,_),e(Ui,b2),e(b2,mge),M($y,mge,null),e(Ui,sNo),e(Ui,gge),e(gge,lNo),b(f,Wqe,_),b(f,Io,_),M(ky,Io,null),e(Io,iNo),e(Io,Ji),e(Ji,dNo),e(Ji,wO),e(wO,cNo),e(Ji,fNo),e(Ji,AO),e(AO,mNo),e(Ji,gNo),e(Io,hNo),e(Io,Sy),e(Sy,pNo),e(Sy,hge),e(hge,uNo),e(Sy,_No),e(Io,bNo),e(Io,ft),M(Ry,ft,null),e(ft,vNo),e(ft,pge),e(pge,FNo),e(ft,TNo),e(ft,Yi),e(Yi,MNo),e(Yi,uge),e(uge,ENo),e(Yi,CNo),e(Yi,yO),e(yO,wNo),e(Yi,ANo),e(ft,yNo),M(v2,ft,null),e(Io,LNo),e(Io,ao),M(Py,ao,null),e(ao,xNo),e(ao,_ge),e(_ge,$No),e(ao,kNo),e(ao,Ia),e(Ia,SNo),e(Ia,bge),e(bge,RNo),e(Ia,PNo),e(Ia,vge),e(vge,BNo),e(Ia,INo),e(Ia,Fge),e(Fge,qNo),e(Ia,NNo),e(ao,jNo),e(ao,H),e(H,F2),e(F2,Tge),e(Tge,DNo),e(F2,GNo),e(F2,LO),e(LO,ONo),e(F2,VNo),e(H,XNo),e(H,T2),e(T2,Mge),e(Mge,zNo),e(T2,WNo),e(T2,xO),e(xO,QNo),e(T2,HNo),e(H,UNo),e(H,M2),e(M2,Ege),e(Ege,JNo),e(M2,YNo),e(M2,$O),e($O,KNo),e(M2,ZNo),e(H,ejo),e(H,E2),e(E2,Cge),e(Cge,ojo),e(E2,rjo),e(E2,kO),e(kO,tjo),e(E2,ajo),e(H,njo),e(H,C2),e(C2,wge),e(wge,sjo),e(C2,ljo),e(C2,SO),e(SO,ijo),e(C2,djo),e(H,cjo),e(H,w2),e(w2,Age),e(Age,fjo),e(w2,mjo),e(w2,RO),e(RO,gjo),e(w2,hjo),e(H,pjo),e(H,A2),e(A2,yge),e(yge,ujo),e(A2,_jo),e(A2,PO),e(PO,bjo),e(A2,vjo),e(H,Fjo),e(H,y2),e(y2,Lge),e(Lge,Tjo),e(y2,Mjo),e(y2,BO),e(BO,Ejo),e(y2,Cjo),e(H,wjo),e(H,L2),e(L2,xge),e(xge,Ajo),e(L2,yjo),e(L2,IO),e(IO,Ljo),e(L2,xjo),e(H,$jo),e(H,x2),e(x2,$ge),e($ge,kjo),e(x2,Sjo),e(x2,qO),e(qO,Rjo),e(x2,Pjo),e(H,Bjo),e(H,$2),e($2,kge),e(kge,Ijo),e($2,qjo),e($2,NO),e(NO,Njo),e($2,jjo),e(H,Djo),e(H,k2),e(k2,Sge),e(Sge,Gjo),e(k2,Ojo),e(k2,jO),e(jO,Vjo),e(k2,Xjo),e(H,zjo),e(H,S2),e(S2,Rge),e(Rge,Wjo),e(S2,Qjo),e(S2,DO),e(DO,Hjo),e(S2,Ujo),e(H,Jjo),e(H,R2),e(R2,Pge),e(Pge,Yjo),e(R2,Kjo),e(R2,GO),e(GO,Zjo),e(R2,eDo),e(H,oDo),e(H,P2),e(P2,Bge),e(Bge,rDo),e(P2,tDo),e(P2,OO),e(OO,aDo),e(P2,nDo),e(H,sDo),e(H,B2),e(B2,Ige),e(Ige,lDo),e(B2,iDo),e(B2,VO),e(VO,dDo),e(B2,cDo),e(H,fDo),e(H,I2),e(I2,qge),e(qge,mDo),e(I2,gDo),e(I2,XO),e(XO,hDo),e(I2,pDo),e(H,uDo),e(H,q2),e(q2,Nge),e(Nge,_Do),e(q2,bDo),e(q2,zO),e(zO,vDo),e(q2,FDo),e(H,TDo),e(H,N2),e(N2,jge),e(jge,MDo),e(N2,EDo),e(N2,WO),e(WO,CDo),e(N2,wDo),e(H,ADo),e(H,j2),e(j2,Dge),e(Dge,yDo),e(j2,LDo),e(j2,QO),e(QO,xDo),e(j2,$Do),e(H,kDo),e(H,D2),e(D2,Gge),e(Gge,SDo),e(D2,RDo),e(D2,HO),e(HO,PDo),e(D2,BDo),e(H,IDo),e(H,G2),e(G2,Oge),e(Oge,qDo),e(G2,NDo),e(G2,UO),e(UO,jDo),e(G2,DDo),e(H,GDo),e(H,O2),e(O2,Vge),e(Vge,ODo),e(O2,VDo),e(O2,JO),e(JO,XDo),e(O2,zDo),e(H,WDo),e(H,V2),e(V2,Xge),e(Xge,QDo),e(V2,HDo),e(V2,YO),e(YO,UDo),e(V2,JDo),e(H,YDo),e(H,X2),e(X2,zge),e(zge,KDo),e(X2,ZDo),e(X2,KO),e(KO,eGo),e(X2,oGo),e(H,rGo),e(H,z2),e(z2,Wge),e(Wge,tGo),e(z2,aGo),e(z2,ZO),e(ZO,nGo),e(z2,sGo),e(H,lGo),e(H,W2),e(W2,Qge),e(Qge,iGo),e(W2,dGo),e(W2,eV),e(eV,cGo),e(W2,fGo),e(H,mGo),e(H,Q2),e(Q2,Hge),e(Hge,gGo),e(Q2,hGo),e(Q2,oV),e(oV,pGo),e(Q2,uGo),e(H,_Go),e(H,H2),e(H2,Uge),e(Uge,bGo),e(H2,vGo),e(H2,rV),e(rV,FGo),e(H2,TGo),e(H,MGo),e(H,U2),e(U2,Jge),e(Jge,EGo),e(U2,CGo),e(U2,tV),e(tV,wGo),e(U2,AGo),e(H,yGo),e(H,J2),e(J2,Yge),e(Yge,LGo),e(J2,xGo),e(J2,aV),e(aV,$Go),e(J2,kGo),e(H,SGo),e(H,Y2),e(Y2,Kge),e(Kge,RGo),e(Y2,PGo),e(Y2,nV),e(nV,BGo),e(Y2,IGo),e(H,qGo),e(H,K2),e(K2,Zge),e(Zge,NGo),e(K2,jGo),e(K2,sV),e(sV,DGo),e(K2,GGo),e(H,OGo),e(H,Z2),e(Z2,ehe),e(ehe,VGo),e(Z2,XGo),e(Z2,lV),e(lV,zGo),e(Z2,WGo),e(ao,QGo),e(ao,ev),e(ev,HGo),e(ev,ohe),e(ohe,UGo),e(ev,JGo),e(ev,rhe),e(rhe,YGo),e(ao,KGo),M(ov,ao,null),b(f,Qqe,_),b(f,Ki,_),e(Ki,rv),e(rv,the),M(By,the,null),e(Ki,ZGo),e(Ki,ahe),e(ahe,eOo),b(f,Hqe,_),b(f,qo,_),M(Iy,qo,null),e(qo,oOo),e(qo,Zi),e(Zi,rOo),e(Zi,iV),e(iV,tOo),e(Zi,aOo),e(Zi,dV),e(dV,nOo),e(Zi,sOo),e(qo,lOo),e(qo,qy),e(qy,iOo),e(qy,nhe),e(nhe,dOo),e(qy,cOo),e(qo,fOo),e(qo,mt),M(Ny,mt,null),e(mt,mOo),e(mt,she),e(she,gOo),e(mt,hOo),e(mt,ed),e(ed,pOo),e(ed,lhe),e(lhe,uOo),e(ed,_Oo),e(ed,cV),e(cV,bOo),e(ed,vOo),e(mt,FOo),M(tv,mt,null),e(qo,TOo),e(qo,no),M(jy,no,null),e(no,MOo),e(no,ihe),e(ihe,EOo),e(no,COo),e(no,qa),e(qa,wOo),e(qa,dhe),e(dhe,AOo),e(qa,yOo),e(qa,che),e(che,LOo),e(qa,xOo),e(qa,fhe),e(fhe,$Oo),e(qa,kOo),e(no,SOo),e(no,V),e(V,av),e(av,mhe),e(mhe,ROo),e(av,POo),e(av,fV),e(fV,BOo),e(av,IOo),e(V,qOo),e(V,nv),e(nv,ghe),e(ghe,NOo),e(nv,jOo),e(nv,mV),e(mV,DOo),e(nv,GOo),e(V,OOo),e(V,sv),e(sv,hhe),e(hhe,VOo),e(sv,XOo),e(sv,gV),e(gV,zOo),e(sv,WOo),e(V,QOo),e(V,lv),e(lv,phe),e(phe,HOo),e(lv,UOo),e(lv,hV),e(hV,JOo),e(lv,YOo),e(V,KOo),e(V,iv),e(iv,uhe),e(uhe,ZOo),e(iv,eVo),e(iv,pV),e(pV,oVo),e(iv,rVo),e(V,tVo),e(V,dv),e(dv,_he),e(_he,aVo),e(dv,nVo),e(dv,uV),e(uV,sVo),e(dv,lVo),e(V,iVo),e(V,cv),e(cv,bhe),e(bhe,dVo),e(cv,cVo),e(cv,_V),e(_V,fVo),e(cv,mVo),e(V,gVo),e(V,fv),e(fv,vhe),e(vhe,hVo),e(fv,pVo),e(fv,bV),e(bV,uVo),e(fv,_Vo),e(V,bVo),e(V,mv),e(mv,Fhe),e(Fhe,vVo),e(mv,FVo),e(mv,vV),e(vV,TVo),e(mv,MVo),e(V,EVo),e(V,gv),e(gv,The),e(The,CVo),e(gv,wVo),e(gv,FV),e(FV,AVo),e(gv,yVo),e(V,LVo),e(V,hv),e(hv,Mhe),e(Mhe,xVo),e(hv,$Vo),e(hv,TV),e(TV,kVo),e(hv,SVo),e(V,RVo),e(V,pv),e(pv,Ehe),e(Ehe,PVo),e(pv,BVo),e(pv,MV),e(MV,IVo),e(pv,qVo),e(V,NVo),e(V,uv),e(uv,Che),e(Che,jVo),e(uv,DVo),e(uv,EV),e(EV,GVo),e(uv,OVo),e(V,VVo),e(V,_v),e(_v,whe),e(whe,XVo),e(_v,zVo),e(_v,CV),e(CV,WVo),e(_v,QVo),e(V,HVo),e(V,bv),e(bv,Ahe),e(Ahe,UVo),e(bv,JVo),e(bv,wV),e(wV,YVo),e(bv,KVo),e(V,ZVo),e(V,vv),e(vv,yhe),e(yhe,eXo),e(vv,oXo),e(vv,AV),e(AV,rXo),e(vv,tXo),e(V,aXo),e(V,Fv),e(Fv,Lhe),e(Lhe,nXo),e(Fv,sXo),e(Fv,yV),e(yV,lXo),e(Fv,iXo),e(V,dXo),e(V,Tv),e(Tv,xhe),e(xhe,cXo),e(Tv,fXo),e(Tv,LV),e(LV,mXo),e(Tv,gXo),e(V,hXo),e(V,Mv),e(Mv,$he),e($he,pXo),e(Mv,uXo),e(Mv,xV),e(xV,_Xo),e(Mv,bXo),e(V,vXo),e(V,Ev),e(Ev,khe),e(khe,FXo),e(Ev,TXo),e(Ev,$V),e($V,MXo),e(Ev,EXo),e(V,CXo),e(V,Cv),e(Cv,She),e(She,wXo),e(Cv,AXo),e(Cv,kV),e(kV,yXo),e(Cv,LXo),e(V,xXo),e(V,wv),e(wv,Rhe),e(Rhe,$Xo),e(wv,kXo),e(wv,SV),e(SV,SXo),e(wv,RXo),e(V,PXo),e(V,Av),e(Av,Phe),e(Phe,BXo),e(Av,IXo),e(Av,RV),e(RV,qXo),e(Av,NXo),e(V,jXo),e(V,yv),e(yv,Bhe),e(Bhe,DXo),e(yv,GXo),e(yv,PV),e(PV,OXo),e(yv,VXo),e(V,XXo),e(V,Lv),e(Lv,Ihe),e(Ihe,zXo),e(Lv,WXo),e(Lv,BV),e(BV,QXo),e(Lv,HXo),e(V,UXo),e(V,xv),e(xv,qhe),e(qhe,JXo),e(xv,YXo),e(xv,IV),e(IV,KXo),e(xv,ZXo),e(V,ezo),e(V,$v),e($v,Nhe),e(Nhe,ozo),e($v,rzo),e($v,qV),e(qV,tzo),e($v,azo),e(V,nzo),e(V,kv),e(kv,jhe),e(jhe,szo),e(kv,lzo),e(kv,NV),e(NV,izo),e(kv,dzo),e(V,czo),e(V,Sv),e(Sv,Dhe),e(Dhe,fzo),e(Sv,mzo),e(Sv,jV),e(jV,gzo),e(Sv,hzo),e(V,pzo),e(V,Rv),e(Rv,Ghe),e(Ghe,uzo),e(Rv,_zo),e(Rv,DV),e(DV,bzo),e(Rv,vzo),e(V,Fzo),e(V,Pv),e(Pv,Ohe),e(Ohe,Tzo),e(Pv,Mzo),e(Pv,GV),e(GV,Ezo),e(Pv,Czo),e(V,wzo),e(V,Bv),e(Bv,Vhe),e(Vhe,Azo),e(Bv,yzo),e(Bv,OV),e(OV,Lzo),e(Bv,xzo),e(V,$zo),e(V,Iv),e(Iv,Xhe),e(Xhe,kzo),e(Iv,Szo),e(Iv,VV),e(VV,Rzo),e(Iv,Pzo),e(V,Bzo),e(V,qv),e(qv,zhe),e(zhe,Izo),e(qv,qzo),e(qv,XV),e(XV,Nzo),e(qv,jzo),e(V,Dzo),e(V,Nv),e(Nv,Whe),e(Whe,Gzo),e(Nv,Ozo),e(Nv,zV),e(zV,Vzo),e(Nv,Xzo),e(V,zzo),e(V,jv),e(jv,Qhe),e(Qhe,Wzo),e(jv,Qzo),e(jv,WV),e(WV,Hzo),e(jv,Uzo),e(V,Jzo),e(V,Dv),e(Dv,Hhe),e(Hhe,Yzo),e(Dv,Kzo),e(Dv,QV),e(QV,Zzo),e(Dv,eWo),e(V,oWo),e(V,Gv),e(Gv,Uhe),e(Uhe,rWo),e(Gv,tWo),e(Gv,HV),e(HV,aWo),e(Gv,nWo),e(V,sWo),e(V,Ov),e(Ov,Jhe),e(Jhe,lWo),e(Ov,iWo),e(Ov,UV),e(UV,dWo),e(Ov,cWo),e(V,fWo),e(V,Vv),e(Vv,Yhe),e(Yhe,mWo),e(Vv,gWo),e(Vv,JV),e(JV,hWo),e(Vv,pWo),e(no,uWo),e(no,Xv),e(Xv,_Wo),e(Xv,Khe),e(Khe,bWo),e(Xv,vWo),e(Xv,Zhe),e(Zhe,FWo),e(no,TWo),M(zv,no,null),b(f,Uqe,_),b(f,od,_),e(od,Wv),e(Wv,epe),M(Dy,epe,null),e(od,MWo),e(od,ope),e(ope,EWo),b(f,Jqe,_),b(f,No,_),M(Gy,No,null),e(No,CWo),e(No,rd),e(rd,wWo),e(rd,YV),e(YV,AWo),e(rd,yWo),e(rd,KV),e(KV,LWo),e(rd,xWo),e(No,$Wo),e(No,Oy),e(Oy,kWo),e(Oy,rpe),e(rpe,SWo),e(Oy,RWo),e(No,PWo),e(No,gt),M(Vy,gt,null),e(gt,BWo),e(gt,tpe),e(tpe,IWo),e(gt,qWo),e(gt,td),e(td,NWo),e(td,ape),e(ape,jWo),e(td,DWo),e(td,ZV),e(ZV,GWo),e(td,OWo),e(gt,VWo),M(Qv,gt,null),e(No,XWo),e(No,so),M(Xy,so,null),e(so,zWo),e(so,npe),e(npe,WWo),e(so,QWo),e(so,Na),e(Na,HWo),e(Na,spe),e(spe,UWo),e(Na,JWo),e(Na,lpe),e(lpe,YWo),e(Na,KWo),e(Na,ipe),e(ipe,ZWo),e(Na,eQo),e(so,oQo),e(so,dpe),e(dpe,Hv),e(Hv,cpe),e(cpe,rQo),e(Hv,tQo),e(Hv,eX),e(eX,aQo),e(Hv,nQo),e(so,sQo),e(so,Uv),e(Uv,lQo),e(Uv,fpe),e(fpe,iQo),e(Uv,dQo),e(Uv,mpe),e(mpe,cQo),e(so,fQo),M(Jv,so,null),b(f,Yqe,_),b(f,ad,_),e(ad,Yv),e(Yv,gpe),M(zy,gpe,null),e(ad,mQo),e(ad,hpe),e(hpe,gQo),b(f,Kqe,_),b(f,jo,_),M(Wy,jo,null),e(jo,hQo),e(jo,nd),e(nd,pQo),e(nd,oX),e(oX,uQo),e(nd,_Qo),e(nd,rX),e(rX,bQo),e(nd,vQo),e(jo,FQo),e(jo,Qy),e(Qy,TQo),e(Qy,ppe),e(ppe,MQo),e(Qy,EQo),e(jo,CQo),e(jo,ht),M(Hy,ht,null),e(ht,wQo),e(ht,upe),e(upe,AQo),e(ht,yQo),e(ht,sd),e(sd,LQo),e(sd,_pe),e(_pe,xQo),e(sd,$Qo),e(sd,tX),e(tX,kQo),e(sd,SQo),e(ht,RQo),M(Kv,ht,null),e(jo,PQo),e(jo,lo),M(Uy,lo,null),e(lo,BQo),e(lo,bpe),e(bpe,IQo),e(lo,qQo),e(lo,ja),e(ja,NQo),e(ja,vpe),e(vpe,jQo),e(ja,DQo),e(ja,Fpe),e(Fpe,GQo),e(ja,OQo),e(ja,Tpe),e(Tpe,VQo),e(ja,XQo),e(lo,zQo),e(lo,Fe),e(Fe,Zv),e(Zv,Mpe),e(Mpe,WQo),e(Zv,QQo),e(Zv,aX),e(aX,HQo),e(Zv,UQo),e(Fe,JQo),e(Fe,eF),e(eF,Epe),e(Epe,YQo),e(eF,KQo),e(eF,nX),e(nX,ZQo),e(eF,eHo),e(Fe,oHo),e(Fe,oF),e(oF,Cpe),e(Cpe,rHo),e(oF,tHo),e(oF,sX),e(sX,aHo),e(oF,nHo),e(Fe,sHo),e(Fe,Bs),e(Bs,wpe),e(wpe,lHo),e(Bs,iHo),e(Bs,lX),e(lX,dHo),e(Bs,cHo),e(Bs,iX),e(iX,fHo),e(Bs,mHo),e(Fe,gHo),e(Fe,rF),e(rF,Ape),e(Ape,hHo),e(rF,pHo),e(rF,dX),e(dX,uHo),e(rF,_Ho),e(Fe,bHo),e(Fe,pt),e(pt,ype),e(ype,vHo),e(pt,FHo),e(pt,cX),e(cX,THo),e(pt,MHo),e(pt,fX),e(fX,EHo),e(pt,CHo),e(pt,mX),e(mX,wHo),e(pt,AHo),e(Fe,yHo),e(Fe,tF),e(tF,Lpe),e(Lpe,LHo),e(tF,xHo),e(tF,gX),e(gX,$Ho),e(tF,kHo),e(Fe,SHo),e(Fe,aF),e(aF,xpe),e(xpe,RHo),e(aF,PHo),e(aF,hX),e(hX,BHo),e(aF,IHo),e(Fe,qHo),e(Fe,nF),e(nF,$pe),e($pe,NHo),e(nF,jHo),e(nF,pX),e(pX,DHo),e(nF,GHo),e(Fe,OHo),e(Fe,sF),e(sF,kpe),e(kpe,VHo),e(sF,XHo),e(sF,uX),e(uX,zHo),e(sF,WHo),e(Fe,QHo),e(Fe,lF),e(lF,Spe),e(Spe,HHo),e(lF,UHo),e(lF,_X),e(_X,JHo),e(lF,YHo),e(Fe,KHo),e(Fe,iF),e(iF,Rpe),e(Rpe,ZHo),e(iF,eUo),e(iF,bX),e(bX,oUo),e(iF,rUo),e(Fe,tUo),e(Fe,dF),e(dF,Ppe),e(Ppe,aUo),e(dF,nUo),e(dF,vX),e(vX,sUo),e(dF,lUo),e(lo,iUo),e(lo,cF),e(cF,dUo),e(cF,Bpe),e(Bpe,cUo),e(cF,fUo),e(cF,Ipe),e(Ipe,mUo),e(lo,gUo),M(fF,lo,null),b(f,Zqe,_),b(f,ld,_),e(ld,mF),e(mF,qpe),M(Jy,qpe,null),e(ld,hUo),e(ld,Npe),e(Npe,pUo),b(f,eNe,_),b(f,Do,_),M(Yy,Do,null),e(Do,uUo),e(Do,id),e(id,_Uo),e(id,FX),e(FX,bUo),e(id,vUo),e(id,TX),e(TX,FUo),e(id,TUo),e(Do,MUo),e(Do,Ky),e(Ky,EUo),e(Ky,jpe),e(jpe,CUo),e(Ky,wUo),e(Do,AUo),e(Do,ut),M(Zy,ut,null),e(ut,yUo),e(ut,Dpe),e(Dpe,LUo),e(ut,xUo),e(ut,dd),e(dd,$Uo),e(dd,Gpe),e(Gpe,kUo),e(dd,SUo),e(dd,MX),e(MX,RUo),e(dd,PUo),e(ut,BUo),M(gF,ut,null),e(Do,IUo),e(Do,io),M(eL,io,null),e(io,qUo),e(io,Ope),e(Ope,NUo),e(io,jUo),e(io,Da),e(Da,DUo),e(Da,Vpe),e(Vpe,GUo),e(Da,OUo),e(Da,Xpe),e(Xpe,VUo),e(Da,XUo),e(Da,zpe),e(zpe,zUo),e(Da,WUo),e(io,QUo),e(io,Wpe),e(Wpe,hF),e(hF,Qpe),e(Qpe,HUo),e(hF,UUo),e(hF,EX),e(EX,JUo),e(hF,YUo),e(io,KUo),e(io,pF),e(pF,ZUo),e(pF,Hpe),e(Hpe,eJo),e(pF,oJo),e(pF,Upe),e(Upe,rJo),e(io,tJo),M(uF,io,null),b(f,oNe,_),b(f,cd,_),e(cd,_F),e(_F,Jpe),M(oL,Jpe,null),e(cd,aJo),e(cd,Ype),e(Ype,nJo),b(f,rNe,_),b(f,Go,_),M(rL,Go,null),e(Go,sJo),e(Go,fd),e(fd,lJo),e(fd,CX),e(CX,iJo),e(fd,dJo),e(fd,wX),e(wX,cJo),e(fd,fJo),e(Go,mJo),e(Go,tL),e(tL,gJo),e(tL,Kpe),e(Kpe,hJo),e(tL,pJo),e(Go,uJo),e(Go,_t),M(aL,_t,null),e(_t,_Jo),e(_t,Zpe),e(Zpe,bJo),e(_t,vJo),e(_t,md),e(md,FJo),e(md,eue),e(eue,TJo),e(md,MJo),e(md,AX),e(AX,EJo),e(md,CJo),e(_t,wJo),M(bF,_t,null),e(Go,AJo),e(Go,co),M(nL,co,null),e(co,yJo),e(co,oue),e(oue,LJo),e(co,xJo),e(co,Ga),e(Ga,$Jo),e(Ga,rue),e(rue,kJo),e(Ga,SJo),e(Ga,tue),e(tue,RJo),e(Ga,PJo),e(Ga,aue),e(aue,BJo),e(Ga,IJo),e(co,qJo),e(co,ke),e(ke,vF),e(vF,nue),e(nue,NJo),e(vF,jJo),e(vF,yX),e(yX,DJo),e(vF,GJo),e(ke,OJo),e(ke,FF),e(FF,sue),e(sue,VJo),e(FF,XJo),e(FF,LX),e(LX,zJo),e(FF,WJo),e(ke,QJo),e(ke,TF),e(TF,lue),e(lue,HJo),e(TF,UJo),e(TF,xX),e(xX,JJo),e(TF,YJo),e(ke,KJo),e(ke,MF),e(MF,iue),e(iue,ZJo),e(MF,eYo),e(MF,$X),e($X,oYo),e(MF,rYo),e(ke,tYo),e(ke,EF),e(EF,due),e(due,aYo),e(EF,nYo),e(EF,kX),e(kX,sYo),e(EF,lYo),e(ke,iYo),e(ke,CF),e(CF,cue),e(cue,dYo),e(CF,cYo),e(CF,SX),e(SX,fYo),e(CF,mYo),e(ke,gYo),e(ke,wF),e(wF,fue),e(fue,hYo),e(wF,pYo),e(wF,RX),e(RX,uYo),e(wF,_Yo),e(ke,bYo),e(ke,AF),e(AF,mue),e(mue,vYo),e(AF,FYo),e(AF,PX),e(PX,TYo),e(AF,MYo),e(ke,EYo),e(ke,yF),e(yF,gue),e(gue,CYo),e(yF,wYo),e(yF,BX),e(BX,AYo),e(yF,yYo),e(co,LYo),e(co,LF),e(LF,xYo),e(LF,hue),e(hue,$Yo),e(LF,kYo),e(LF,pue),e(pue,SYo),e(co,RYo),M(xF,co,null),b(f,tNe,_),b(f,gd,_),e(gd,$F),e($F,uue),M(sL,uue,null),e(gd,PYo),e(gd,_ue),e(_ue,BYo),b(f,aNe,_),b(f,Oo,_),M(lL,Oo,null),e(Oo,IYo),e(Oo,hd),e(hd,qYo),e(hd,IX),e(IX,NYo),e(hd,jYo),e(hd,qX),e(qX,DYo),e(hd,GYo),e(Oo,OYo),e(Oo,iL),e(iL,VYo),e(iL,bue),e(bue,XYo),e(iL,zYo),e(Oo,WYo),e(Oo,bt),M(dL,bt,null),e(bt,QYo),e(bt,vue),e(vue,HYo),e(bt,UYo),e(bt,pd),e(pd,JYo),e(pd,Fue),e(Fue,YYo),e(pd,KYo),e(pd,NX),e(NX,ZYo),e(pd,eKo),e(bt,oKo),M(kF,bt,null),e(Oo,rKo),e(Oo,fo),M(cL,fo,null),e(fo,tKo),e(fo,Tue),e(Tue,aKo),e(fo,nKo),e(fo,Oa),e(Oa,sKo),e(Oa,Mue),e(Mue,lKo),e(Oa,iKo),e(Oa,Eue),e(Eue,dKo),e(Oa,cKo),e(Oa,Cue),e(Cue,fKo),e(Oa,mKo),e(fo,gKo),e(fo,Kr),e(Kr,SF),e(SF,wue),e(wue,hKo),e(SF,pKo),e(SF,jX),e(jX,uKo),e(SF,_Ko),e(Kr,bKo),e(Kr,RF),e(RF,Aue),e(Aue,vKo),e(RF,FKo),e(RF,DX),e(DX,TKo),e(RF,MKo),e(Kr,EKo),e(Kr,PF),e(PF,yue),e(yue,CKo),e(PF,wKo),e(PF,GX),e(GX,AKo),e(PF,yKo),e(Kr,LKo),e(Kr,BF),e(BF,Lue),e(Lue,xKo),e(BF,$Ko),e(BF,OX),e(OX,kKo),e(BF,SKo),e(Kr,RKo),e(Kr,IF),e(IF,xue),e(xue,PKo),e(IF,BKo),e(IF,VX),e(VX,IKo),e(IF,qKo),e(fo,NKo),e(fo,qF),e(qF,jKo),e(qF,$ue),e($ue,DKo),e(qF,GKo),e(qF,kue),e(kue,OKo),e(fo,VKo),M(NF,fo,null),b(f,nNe,_),b(f,ud,_),e(ud,jF),e(jF,Sue),M(fL,Sue,null),e(ud,XKo),e(ud,Rue),e(Rue,zKo),b(f,sNe,_),b(f,Vo,_),M(mL,Vo,null),e(Vo,WKo),e(Vo,_d),e(_d,QKo),e(_d,XX),e(XX,HKo),e(_d,UKo),e(_d,zX),e(zX,JKo),e(_d,YKo),e(Vo,KKo),e(Vo,gL),e(gL,ZKo),e(gL,Pue),e(Pue,eZo),e(gL,oZo),e(Vo,rZo),e(Vo,vt),M(hL,vt,null),e(vt,tZo),e(vt,Bue),e(Bue,aZo),e(vt,nZo),e(vt,bd),e(bd,sZo),e(bd,Iue),e(Iue,lZo),e(bd,iZo),e(bd,WX),e(WX,dZo),e(bd,cZo),e(vt,fZo),M(DF,vt,null),e(Vo,mZo),e(Vo,mo),M(pL,mo,null),e(mo,gZo),e(mo,que),e(que,hZo),e(mo,pZo),e(mo,Va),e(Va,uZo),e(Va,Nue),e(Nue,_Zo),e(Va,bZo),e(Va,jue),e(jue,vZo),e(Va,FZo),e(Va,Due),e(Due,TZo),e(Va,MZo),e(mo,EZo),e(mo,Se),e(Se,GF),e(GF,Gue),e(Gue,CZo),e(GF,wZo),e(GF,QX),e(QX,AZo),e(GF,yZo),e(Se,LZo),e(Se,OF),e(OF,Oue),e(Oue,xZo),e(OF,$Zo),e(OF,HX),e(HX,kZo),e(OF,SZo),e(Se,RZo),e(Se,VF),e(VF,Vue),e(Vue,PZo),e(VF,BZo),e(VF,UX),e(UX,IZo),e(VF,qZo),e(Se,NZo),e(Se,XF),e(XF,Xue),e(Xue,jZo),e(XF,DZo),e(XF,JX),e(JX,GZo),e(XF,OZo),e(Se,VZo),e(Se,zF),e(zF,zue),e(zue,XZo),e(zF,zZo),e(zF,YX),e(YX,WZo),e(zF,QZo),e(Se,HZo),e(Se,WF),e(WF,Wue),e(Wue,UZo),e(WF,JZo),e(WF,KX),e(KX,YZo),e(WF,KZo),e(Se,ZZo),e(Se,QF),e(QF,Que),e(Que,eer),e(QF,oer),e(QF,ZX),e(ZX,rer),e(QF,ter),e(Se,aer),e(Se,HF),e(HF,Hue),e(Hue,ner),e(HF,ser),e(HF,ez),e(ez,ler),e(HF,ier),e(Se,der),e(Se,UF),e(UF,Uue),e(Uue,cer),e(UF,fer),e(UF,oz),e(oz,mer),e(UF,ger),e(mo,her),e(mo,JF),e(JF,per),e(JF,Jue),e(Jue,uer),e(JF,_er),e(JF,Yue),e(Yue,ber),e(mo,ver),M(YF,mo,null),b(f,lNe,_),b(f,vd,_),e(vd,KF),e(KF,Kue),M(uL,Kue,null),e(vd,Fer),e(vd,Zue),e(Zue,Ter),b(f,iNe,_),b(f,Xo,_),M(_L,Xo,null),e(Xo,Mer),e(Xo,Fd),e(Fd,Eer),e(Fd,rz),e(rz,Cer),e(Fd,wer),e(Fd,tz),e(tz,Aer),e(Fd,yer),e(Xo,Ler),e(Xo,bL),e(bL,xer),e(bL,e_e),e(e_e,$er),e(bL,ker),e(Xo,Ser),e(Xo,Ft),M(vL,Ft,null),e(Ft,Rer),e(Ft,o_e),e(o_e,Per),e(Ft,Ber),e(Ft,Td),e(Td,Ier),e(Td,r_e),e(r_e,qer),e(Td,Ner),e(Td,az),e(az,jer),e(Td,Der),e(Ft,Ger),M(ZF,Ft,null),e(Xo,Oer),e(Xo,go),M(FL,go,null),e(go,Ver),e(go,t_e),e(t_e,Xer),e(go,zer),e(go,Xa),e(Xa,Wer),e(Xa,a_e),e(a_e,Qer),e(Xa,Her),e(Xa,n_e),e(n_e,Uer),e(Xa,Jer),e(Xa,s_e),e(s_e,Yer),e(Xa,Ker),e(go,Zer),e(go,TL),e(TL,e6),e(e6,l_e),e(l_e,eor),e(e6,oor),e(e6,nz),e(nz,ror),e(e6,tor),e(TL,aor),e(TL,o6),e(o6,i_e),e(i_e,nor),e(o6,sor),e(o6,sz),e(sz,lor),e(o6,ior),e(go,dor),e(go,r6),e(r6,cor),e(r6,d_e),e(d_e,mor),e(r6,gor),e(r6,c_e),e(c_e,hor),e(go,por),M(t6,go,null),b(f,dNe,_),b(f,Md,_),e(Md,a6),e(a6,f_e),M(ML,f_e,null),e(Md,uor),e(Md,m_e),e(m_e,_or),b(f,cNe,_),b(f,zo,_),M(EL,zo,null),e(zo,bor),e(zo,Ed),e(Ed,vor),e(Ed,lz),e(lz,For),e(Ed,Tor),e(Ed,iz),e(iz,Mor),e(Ed,Eor),e(zo,Cor),e(zo,CL),e(CL,wor),e(CL,g_e),e(g_e,Aor),e(CL,yor),e(zo,Lor),e(zo,Tt),M(wL,Tt,null),e(Tt,xor),e(Tt,h_e),e(h_e,$or),e(Tt,kor),e(Tt,Cd),e(Cd,Sor),e(Cd,p_e),e(p_e,Ror),e(Cd,Por),e(Cd,dz),e(dz,Bor),e(Cd,Ior),e(Tt,qor),M(n6,Tt,null),e(zo,Nor),e(zo,ho),M(AL,ho,null),e(ho,jor),e(ho,u_e),e(u_e,Dor),e(ho,Gor),e(ho,za),e(za,Oor),e(za,__e),e(__e,Vor),e(za,Xor),e(za,b_e),e(b_e,zor),e(za,Wor),e(za,v_e),e(v_e,Qor),e(za,Hor),e(ho,Uor),e(ho,Zr),e(Zr,s6),e(s6,F_e),e(F_e,Jor),e(s6,Yor),e(s6,cz),e(cz,Kor),e(s6,Zor),e(Zr,err),e(Zr,l6),e(l6,T_e),e(T_e,orr),e(l6,rrr),e(l6,fz),e(fz,trr),e(l6,arr),e(Zr,nrr),e(Zr,i6),e(i6,M_e),e(M_e,srr),e(i6,lrr),e(i6,mz),e(mz,irr),e(i6,drr),e(Zr,crr),e(Zr,d6),e(d6,E_e),e(E_e,frr),e(d6,mrr),e(d6,gz),e(gz,grr),e(d6,hrr),e(Zr,prr),e(Zr,c6),e(c6,C_e),e(C_e,urr),e(c6,_rr),e(c6,hz),e(hz,brr),e(c6,vrr),e(ho,Frr),e(ho,f6),e(f6,Trr),e(f6,w_e),e(w_e,Mrr),e(f6,Err),e(f6,A_e),e(A_e,Crr),e(ho,wrr),M(m6,ho,null),b(f,fNe,_),b(f,wd,_),e(wd,g6),e(g6,y_e),M(yL,y_e,null),e(wd,Arr),e(wd,L_e),e(L_e,yrr),b(f,mNe,_),b(f,Wo,_),M(LL,Wo,null),e(Wo,Lrr),e(Wo,Ad),e(Ad,xrr),e(Ad,pz),e(pz,$rr),e(Ad,krr),e(Ad,uz),e(uz,Srr),e(Ad,Rrr),e(Wo,Prr),e(Wo,xL),e(xL,Brr),e(xL,x_e),e(x_e,Irr),e(xL,qrr),e(Wo,Nrr),e(Wo,Mt),M($L,Mt,null),e(Mt,jrr),e(Mt,$_e),e($_e,Drr),e(Mt,Grr),e(Mt,yd),e(yd,Orr),e(yd,k_e),e(k_e,Vrr),e(yd,Xrr),e(yd,_z),e(_z,zrr),e(yd,Wrr),e(Mt,Qrr),M(h6,Mt,null),e(Wo,Hrr),e(Wo,po),M(kL,po,null),e(po,Urr),e(po,S_e),e(S_e,Jrr),e(po,Yrr),e(po,Wa),e(Wa,Krr),e(Wa,R_e),e(R_e,Zrr),e(Wa,etr),e(Wa,P_e),e(P_e,otr),e(Wa,rtr),e(Wa,B_e),e(B_e,ttr),e(Wa,atr),e(po,ntr),e(po,Ld),e(Ld,p6),e(p6,I_e),e(I_e,str),e(p6,ltr),e(p6,bz),e(bz,itr),e(p6,dtr),e(Ld,ctr),e(Ld,u6),e(u6,q_e),e(q_e,ftr),e(u6,mtr),e(u6,vz),e(vz,gtr),e(u6,htr),e(Ld,ptr),e(Ld,_6),e(_6,N_e),e(N_e,utr),e(_6,_tr),e(_6,Fz),e(Fz,btr),e(_6,vtr),e(po,Ftr),e(po,b6),e(b6,Ttr),e(b6,j_e),e(j_e,Mtr),e(b6,Etr),e(b6,D_e),e(D_e,Ctr),e(po,wtr),M(v6,po,null),b(f,gNe,_),b(f,xd,_),e(xd,F6),e(F6,G_e),M(SL,G_e,null),e(xd,Atr),e(xd,O_e),e(O_e,ytr),b(f,hNe,_),b(f,Qo,_),M(RL,Qo,null),e(Qo,Ltr),e(Qo,$d),e($d,xtr),e($d,Tz),e(Tz,$tr),e($d,ktr),e($d,Mz),e(Mz,Str),e($d,Rtr),e(Qo,Ptr),e(Qo,PL),e(PL,Btr),e(PL,V_e),e(V_e,Itr),e(PL,qtr),e(Qo,Ntr),e(Qo,Et),M(BL,Et,null),e(Et,jtr),e(Et,X_e),e(X_e,Dtr),e(Et,Gtr),e(Et,kd),e(kd,Otr),e(kd,z_e),e(z_e,Vtr),e(kd,Xtr),e(kd,Ez),e(Ez,ztr),e(kd,Wtr),e(Et,Qtr),M(T6,Et,null),e(Qo,Htr),e(Qo,uo),M(IL,uo,null),e(uo,Utr),e(uo,W_e),e(W_e,Jtr),e(uo,Ytr),e(uo,Qa),e(Qa,Ktr),e(Qa,Q_e),e(Q_e,Ztr),e(Qa,ear),e(Qa,H_e),e(H_e,oar),e(Qa,rar),e(Qa,U_e),e(U_e,tar),e(Qa,aar),e(uo,nar),e(uo,qL),e(qL,M6),e(M6,J_e),e(J_e,sar),e(M6,lar),e(M6,Cz),e(Cz,iar),e(M6,dar),e(qL,car),e(qL,E6),e(E6,Y_e),e(Y_e,far),e(E6,mar),e(E6,wz),e(wz,gar),e(E6,har),e(uo,par),e(uo,C6),e(C6,uar),e(C6,K_e),e(K_e,_ar),e(C6,bar),e(C6,Z_e),e(Z_e,Far),e(uo,Tar),M(w6,uo,null),b(f,pNe,_),b(f,Sd,_),e(Sd,A6),e(A6,e0e),M(NL,e0e,null),e(Sd,Mar),e(Sd,o0e),e(o0e,Ear),b(f,uNe,_),b(f,Ho,_),M(jL,Ho,null),e(Ho,Car),e(Ho,Rd),e(Rd,war),e(Rd,Az),e(Az,Aar),e(Rd,yar),e(Rd,yz),e(yz,Lar),e(Rd,xar),e(Ho,$ar),e(Ho,DL),e(DL,kar),e(DL,r0e),e(r0e,Sar),e(DL,Rar),e(Ho,Par),e(Ho,Ct),M(GL,Ct,null),e(Ct,Bar),e(Ct,t0e),e(t0e,Iar),e(Ct,qar),e(Ct,Pd),e(Pd,Nar),e(Pd,a0e),e(a0e,jar),e(Pd,Dar),e(Pd,Lz),e(Lz,Gar),e(Pd,Oar),e(Ct,Var),M(y6,Ct,null),e(Ho,Xar),e(Ho,_o),M(OL,_o,null),e(_o,zar),e(_o,n0e),e(n0e,War),e(_o,Qar),e(_o,Ha),e(Ha,Har),e(Ha,s0e),e(s0e,Uar),e(Ha,Jar),e(Ha,l0e),e(l0e,Yar),e(Ha,Kar),e(Ha,i0e),e(i0e,Zar),e(Ha,enr),e(_o,onr),e(_o,d0e),e(d0e,L6),e(L6,c0e),e(c0e,rnr),e(L6,tnr),e(L6,xz),e(xz,anr),e(L6,nnr),e(_o,snr),e(_o,x6),e(x6,lnr),e(x6,f0e),e(f0e,inr),e(x6,dnr),e(x6,m0e),e(m0e,cnr),e(_o,fnr),M($6,_o,null),b(f,_Ne,_),b(f,Bd,_),e(Bd,k6),e(k6,g0e),M(VL,g0e,null),e(Bd,mnr),e(Bd,h0e),e(h0e,gnr),b(f,bNe,_),b(f,Uo,_),M(XL,Uo,null),e(Uo,hnr),e(Uo,Id),e(Id,pnr),e(Id,$z),e($z,unr),e(Id,_nr),e(Id,kz),e(kz,bnr),e(Id,vnr),e(Uo,Fnr),e(Uo,zL),e(zL,Tnr),e(zL,p0e),e(p0e,Mnr),e(zL,Enr),e(Uo,Cnr),e(Uo,wt),M(WL,wt,null),e(wt,wnr),e(wt,u0e),e(u0e,Anr),e(wt,ynr),e(wt,qd),e(qd,Lnr),e(qd,_0e),e(_0e,xnr),e(qd,$nr),e(qd,Sz),e(Sz,knr),e(qd,Snr),e(wt,Rnr),M(S6,wt,null),e(Uo,Pnr),e(Uo,bo),M(QL,bo,null),e(bo,Bnr),e(bo,b0e),e(b0e,Inr),e(bo,qnr),e(bo,Ua),e(Ua,Nnr),e(Ua,v0e),e(v0e,jnr),e(Ua,Dnr),e(Ua,F0e),e(F0e,Gnr),e(Ua,Onr),e(Ua,T0e),e(T0e,Vnr),e(Ua,Xnr),e(bo,znr),e(bo,Ja),e(Ja,R6),e(R6,M0e),e(M0e,Wnr),e(R6,Qnr),e(R6,Rz),e(Rz,Hnr),e(R6,Unr),e(Ja,Jnr),e(Ja,P6),e(P6,E0e),e(E0e,Ynr),e(P6,Knr),e(P6,Pz),e(Pz,Znr),e(P6,esr),e(Ja,osr),e(Ja,B6),e(B6,C0e),e(C0e,rsr),e(B6,tsr),e(B6,Bz),e(Bz,asr),e(B6,nsr),e(Ja,ssr),e(Ja,I6),e(I6,w0e),e(w0e,lsr),e(I6,isr),e(I6,Iz),e(Iz,dsr),e(I6,csr),e(bo,fsr),e(bo,q6),e(q6,msr),e(q6,A0e),e(A0e,gsr),e(q6,hsr),e(q6,y0e),e(y0e,psr),e(bo,usr),M(N6,bo,null),b(f,vNe,_),b(f,Nd,_),e(Nd,j6),e(j6,L0e),M(HL,L0e,null),e(Nd,_sr),e(Nd,x0e),e(x0e,bsr),b(f,FNe,_),b(f,Jo,_),M(UL,Jo,null),e(Jo,vsr),e(Jo,jd),e(jd,Fsr),e(jd,qz),e(qz,Tsr),e(jd,Msr),e(jd,Nz),e(Nz,Esr),e(jd,Csr),e(Jo,wsr),e(Jo,JL),e(JL,Asr),e(JL,$0e),e($0e,ysr),e(JL,Lsr),e(Jo,xsr),e(Jo,At),M(YL,At,null),e(At,$sr),e(At,k0e),e(k0e,ksr),e(At,Ssr),e(At,Dd),e(Dd,Rsr),e(Dd,S0e),e(S0e,Psr),e(Dd,Bsr),e(Dd,jz),e(jz,Isr),e(Dd,qsr),e(At,Nsr),M(D6,At,null),e(Jo,jsr),e(Jo,vo),M(KL,vo,null),e(vo,Dsr),e(vo,R0e),e(R0e,Gsr),e(vo,Osr),e(vo,Ya),e(Ya,Vsr),e(Ya,P0e),e(P0e,Xsr),e(Ya,zsr),e(Ya,B0e),e(B0e,Wsr),e(Ya,Qsr),e(Ya,I0e),e(I0e,Hsr),e(Ya,Usr),e(vo,Jsr),e(vo,q0e),e(q0e,G6),e(G6,N0e),e(N0e,Ysr),e(G6,Ksr),e(G6,Dz),e(Dz,Zsr),e(G6,elr),e(vo,olr),e(vo,O6),e(O6,rlr),e(O6,j0e),e(j0e,tlr),e(O6,alr),e(O6,D0e),e(D0e,nlr),e(vo,slr),M(V6,vo,null),b(f,TNe,_),b(f,Gd,_),e(Gd,X6),e(X6,G0e),M(ZL,G0e,null),e(Gd,llr),e(Gd,O0e),e(O0e,ilr),b(f,MNe,_),b(f,Yo,_),M(e8,Yo,null),e(Yo,dlr),e(Yo,Od),e(Od,clr),e(Od,Gz),e(Gz,flr),e(Od,mlr),e(Od,Oz),e(Oz,glr),e(Od,hlr),e(Yo,plr),e(Yo,o8),e(o8,ulr),e(o8,V0e),e(V0e,_lr),e(o8,blr),e(Yo,vlr),e(Yo,yt),M(r8,yt,null),e(yt,Flr),e(yt,X0e),e(X0e,Tlr),e(yt,Mlr),e(yt,Vd),e(Vd,Elr),e(Vd,z0e),e(z0e,Clr),e(Vd,wlr),e(Vd,Vz),e(Vz,Alr),e(Vd,ylr),e(yt,Llr),M(z6,yt,null),e(Yo,xlr),e(Yo,wr),M(t8,wr,null),e(wr,$lr),e(wr,W0e),e(W0e,klr),e(wr,Slr),e(wr,Ka),e(Ka,Rlr),e(Ka,Q0e),e(Q0e,Plr),e(Ka,Blr),e(Ka,H0e),e(H0e,Ilr),e(Ka,qlr),e(Ka,U0e),e(U0e,Nlr),e(Ka,jlr),e(wr,Dlr),e(wr,N),e(N,W6),e(W6,J0e),e(J0e,Glr),e(W6,Olr),e(W6,Xz),e(Xz,Vlr),e(W6,Xlr),e(N,zlr),e(N,Q6),e(Q6,Y0e),e(Y0e,Wlr),e(Q6,Qlr),e(Q6,zz),e(zz,Hlr),e(Q6,Ulr),e(N,Jlr),e(N,H6),e(H6,K0e),e(K0e,Ylr),e(H6,Klr),e(H6,Wz),e(Wz,Zlr),e(H6,eir),e(N,oir),e(N,U6),e(U6,Z0e),e(Z0e,rir),e(U6,tir),e(U6,Qz),e(Qz,air),e(U6,nir),e(N,sir),e(N,J6),e(J6,e1e),e(e1e,lir),e(J6,iir),e(J6,Hz),e(Hz,dir),e(J6,cir),e(N,fir),e(N,Y6),e(Y6,o1e),e(o1e,mir),e(Y6,gir),e(Y6,Uz),e(Uz,hir),e(Y6,pir),e(N,uir),e(N,K6),e(K6,r1e),e(r1e,_ir),e(K6,bir),e(K6,Jz),e(Jz,vir),e(K6,Fir),e(N,Tir),e(N,Z6),e(Z6,t1e),e(t1e,Mir),e(Z6,Eir),e(Z6,Yz),e(Yz,Cir),e(Z6,wir),e(N,Air),e(N,eT),e(eT,a1e),e(a1e,yir),e(eT,Lir),e(eT,Kz),e(Kz,xir),e(eT,$ir),e(N,kir),e(N,oT),e(oT,n1e),e(n1e,Sir),e(oT,Rir),e(oT,Zz),e(Zz,Pir),e(oT,Bir),e(N,Iir),e(N,rT),e(rT,s1e),e(s1e,qir),e(rT,Nir),e(rT,eW),e(eW,jir),e(rT,Dir),e(N,Gir),e(N,tT),e(tT,l1e),e(l1e,Oir),e(tT,Vir),e(tT,oW),e(oW,Xir),e(tT,zir),e(N,Wir),e(N,aT),e(aT,i1e),e(i1e,Qir),e(aT,Hir),e(aT,rW),e(rW,Uir),e(aT,Jir),e(N,Yir),e(N,nT),e(nT,d1e),e(d1e,Kir),e(nT,Zir),e(nT,tW),e(tW,edr),e(nT,odr),e(N,rdr),e(N,sT),e(sT,c1e),e(c1e,tdr),e(sT,adr),e(sT,aW),e(aW,ndr),e(sT,sdr),e(N,ldr),e(N,lT),e(lT,f1e),e(f1e,idr),e(lT,ddr),e(lT,nW),e(nW,cdr),e(lT,fdr),e(N,mdr),e(N,iT),e(iT,m1e),e(m1e,gdr),e(iT,hdr),e(iT,sW),e(sW,pdr),e(iT,udr),e(N,_dr),e(N,Is),e(Is,g1e),e(g1e,bdr),e(Is,vdr),e(Is,lW),e(lW,Fdr),e(Is,Tdr),e(Is,iW),e(iW,Mdr),e(Is,Edr),e(N,Cdr),e(N,dT),e(dT,h1e),e(h1e,wdr),e(dT,Adr),e(dT,dW),e(dW,ydr),e(dT,Ldr),e(N,xdr),e(N,cT),e(cT,p1e),e(p1e,$dr),e(cT,kdr),e(cT,cW),e(cW,Sdr),e(cT,Rdr),e(N,Pdr),e(N,fT),e(fT,u1e),e(u1e,Bdr),e(fT,Idr),e(fT,fW),e(fW,qdr),e(fT,Ndr),e(N,jdr),e(N,mT),e(mT,_1e),e(_1e,Ddr),e(mT,Gdr),e(mT,mW),e(mW,Odr),e(mT,Vdr),e(N,Xdr),e(N,gT),e(gT,b1e),e(b1e,zdr),e(gT,Wdr),e(gT,gW),e(gW,Qdr),e(gT,Hdr),e(N,Udr),e(N,hT),e(hT,v1e),e(v1e,Jdr),e(hT,Ydr),e(hT,hW),e(hW,Kdr),e(hT,Zdr),e(N,ecr),e(N,pT),e(pT,F1e),e(F1e,ocr),e(pT,rcr),e(pT,pW),e(pW,tcr),e(pT,acr),e(N,ncr),e(N,uT),e(uT,T1e),e(T1e,scr),e(uT,lcr),e(uT,uW),e(uW,icr),e(uT,dcr),e(N,ccr),e(N,_T),e(_T,M1e),e(M1e,fcr),e(_T,mcr),e(_T,_W),e(_W,gcr),e(_T,hcr),e(N,pcr),e(N,bT),e(bT,E1e),e(E1e,ucr),e(bT,_cr),e(bT,bW),e(bW,bcr),e(bT,vcr),e(N,Fcr),e(N,vT),e(vT,C1e),e(C1e,Tcr),e(vT,Mcr),e(vT,vW),e(vW,Ecr),e(vT,Ccr),e(N,wcr),e(N,FT),e(FT,w1e),e(w1e,Acr),e(FT,ycr),e(FT,FW),e(FW,Lcr),e(FT,xcr),e(N,$cr),e(N,TT),e(TT,A1e),e(A1e,kcr),e(TT,Scr),e(TT,TW),e(TW,Rcr),e(TT,Pcr),e(N,Bcr),e(N,MT),e(MT,y1e),e(y1e,Icr),e(MT,qcr),e(MT,MW),e(MW,Ncr),e(MT,jcr),e(N,Dcr),e(N,ET),e(ET,L1e),e(L1e,Gcr),e(ET,Ocr),e(ET,EW),e(EW,Vcr),e(ET,Xcr),e(N,zcr),e(N,CT),e(CT,x1e),e(x1e,Wcr),e(CT,Qcr),e(CT,CW),e(CW,Hcr),e(CT,Ucr),e(N,Jcr),e(N,wT),e(wT,$1e),e($1e,Ycr),e(wT,Kcr),e(wT,wW),e(wW,Zcr),e(wT,efr),e(N,ofr),e(N,AT),e(AT,k1e),e(k1e,rfr),e(AT,tfr),e(AT,AW),e(AW,afr),e(AT,nfr),e(N,sfr),e(N,yT),e(yT,S1e),e(S1e,lfr),e(yT,ifr),e(yT,yW),e(yW,dfr),e(yT,cfr),e(N,ffr),e(N,LT),e(LT,R1e),e(R1e,mfr),e(LT,gfr),e(LT,LW),e(LW,hfr),e(LT,pfr),e(N,ufr),e(N,xT),e(xT,P1e),e(P1e,_fr),e(xT,bfr),e(xT,xW),e(xW,vfr),e(xT,Ffr),e(N,Tfr),e(N,$T),e($T,B1e),e(B1e,Mfr),e($T,Efr),e($T,$W),e($W,Cfr),e($T,wfr),e(N,Afr),e(N,kT),e(kT,I1e),e(I1e,yfr),e(kT,Lfr),e(kT,kW),e(kW,xfr),e(kT,$fr),e(N,kfr),e(N,ST),e(ST,q1e),e(q1e,Sfr),e(ST,Rfr),e(ST,SW),e(SW,Pfr),e(ST,Bfr),e(N,Ifr),e(N,RT),e(RT,N1e),e(N1e,qfr),e(RT,Nfr),e(RT,RW),e(RW,jfr),e(RT,Dfr),e(N,Gfr),e(N,PT),e(PT,j1e),e(j1e,Ofr),e(PT,Vfr),e(PT,PW),e(PW,Xfr),e(PT,zfr),e(N,Wfr),e(N,BT),e(BT,D1e),e(D1e,Qfr),e(BT,Hfr),e(BT,BW),e(BW,Ufr),e(BT,Jfr),e(N,Yfr),e(N,IT),e(IT,G1e),e(G1e,Kfr),e(IT,Zfr),e(IT,IW),e(IW,emr),e(IT,omr),e(wr,rmr),M(qT,wr,null),b(f,ENe,_),b(f,Xd,_),e(Xd,NT),e(NT,O1e),M(a8,O1e,null),e(Xd,tmr),e(Xd,V1e),e(V1e,amr),b(f,CNe,_),b(f,Ko,_),M(n8,Ko,null),e(Ko,nmr),e(Ko,zd),e(zd,smr),e(zd,qW),e(qW,lmr),e(zd,imr),e(zd,NW),e(NW,dmr),e(zd,cmr),e(Ko,fmr),e(Ko,s8),e(s8,mmr),e(s8,X1e),e(X1e,gmr),e(s8,hmr),e(Ko,pmr),e(Ko,Lt),M(l8,Lt,null),e(Lt,umr),e(Lt,z1e),e(z1e,_mr),e(Lt,bmr),e(Lt,Wd),e(Wd,vmr),e(Wd,W1e),e(W1e,Fmr),e(Wd,Tmr),e(Wd,jW),e(jW,Mmr),e(Wd,Emr),e(Lt,Cmr),M(jT,Lt,null),e(Ko,wmr),e(Ko,Ar),M(i8,Ar,null),e(Ar,Amr),e(Ar,Q1e),e(Q1e,ymr),e(Ar,Lmr),e(Ar,Za),e(Za,xmr),e(Za,H1e),e(H1e,$mr),e(Za,kmr),e(Za,U1e),e(U1e,Smr),e(Za,Rmr),e(Za,J1e),e(J1e,Pmr),e(Za,Bmr),e(Ar,Imr),e(Ar,se),e(se,DT),e(DT,Y1e),e(Y1e,qmr),e(DT,Nmr),e(DT,DW),e(DW,jmr),e(DT,Dmr),e(se,Gmr),e(se,GT),e(GT,K1e),e(K1e,Omr),e(GT,Vmr),e(GT,GW),e(GW,Xmr),e(GT,zmr),e(se,Wmr),e(se,OT),e(OT,Z1e),e(Z1e,Qmr),e(OT,Hmr),e(OT,OW),e(OW,Umr),e(OT,Jmr),e(se,Ymr),e(se,VT),e(VT,ebe),e(ebe,Kmr),e(VT,Zmr),e(VT,VW),e(VW,egr),e(VT,ogr),e(se,rgr),e(se,XT),e(XT,obe),e(obe,tgr),e(XT,agr),e(XT,XW),e(XW,ngr),e(XT,sgr),e(se,lgr),e(se,zT),e(zT,rbe),e(rbe,igr),e(zT,dgr),e(zT,zW),e(zW,cgr),e(zT,fgr),e(se,mgr),e(se,WT),e(WT,tbe),e(tbe,ggr),e(WT,hgr),e(WT,WW),e(WW,pgr),e(WT,ugr),e(se,_gr),e(se,QT),e(QT,abe),e(abe,bgr),e(QT,vgr),e(QT,QW),e(QW,Fgr),e(QT,Tgr),e(se,Mgr),e(se,HT),e(HT,nbe),e(nbe,Egr),e(HT,Cgr),e(HT,HW),e(HW,wgr),e(HT,Agr),e(se,ygr),e(se,UT),e(UT,sbe),e(sbe,Lgr),e(UT,xgr),e(UT,UW),e(UW,$gr),e(UT,kgr),e(se,Sgr),e(se,JT),e(JT,lbe),e(lbe,Rgr),e(JT,Pgr),e(JT,JW),e(JW,Bgr),e(JT,Igr),e(se,qgr),e(se,YT),e(YT,ibe),e(ibe,Ngr),e(YT,jgr),e(YT,YW),e(YW,Dgr),e(YT,Ggr),e(se,Ogr),e(se,KT),e(KT,dbe),e(dbe,Vgr),e(KT,Xgr),e(KT,KW),e(KW,zgr),e(KT,Wgr),e(se,Qgr),e(se,ZT),e(ZT,cbe),e(cbe,Hgr),e(ZT,Ugr),e(ZT,ZW),e(ZW,Jgr),e(ZT,Ygr),e(se,Kgr),e(se,e7),e(e7,fbe),e(fbe,Zgr),e(e7,ehr),e(e7,eQ),e(eQ,ohr),e(e7,rhr),e(se,thr),e(se,o7),e(o7,mbe),e(mbe,ahr),e(o7,nhr),e(o7,oQ),e(oQ,shr),e(o7,lhr),e(se,ihr),e(se,r7),e(r7,gbe),e(gbe,dhr),e(r7,chr),e(r7,rQ),e(rQ,fhr),e(r7,mhr),e(se,ghr),e(se,t7),e(t7,hbe),e(hbe,hhr),e(t7,phr),e(t7,tQ),e(tQ,uhr),e(t7,_hr),e(se,bhr),e(se,a7),e(a7,pbe),e(pbe,vhr),e(a7,Fhr),e(a7,aQ),e(aQ,Thr),e(a7,Mhr),e(se,Ehr),e(se,n7),e(n7,ube),e(ube,Chr),e(n7,whr),e(n7,nQ),e(nQ,Ahr),e(n7,yhr),e(se,Lhr),e(se,s7),e(s7,_be),e(_be,xhr),e(s7,$hr),e(s7,sQ),e(sQ,khr),e(s7,Shr),e(se,Rhr),e(se,l7),e(l7,bbe),e(bbe,Phr),e(l7,Bhr),e(l7,lQ),e(lQ,Ihr),e(l7,qhr),e(se,Nhr),e(se,i7),e(i7,vbe),e(vbe,jhr),e(i7,Dhr),e(i7,iQ),e(iQ,Ghr),e(i7,Ohr),e(Ar,Vhr),M(d7,Ar,null),b(f,wNe,_),b(f,Qd,_),e(Qd,c7),e(c7,Fbe),M(d8,Fbe,null),e(Qd,Xhr),e(Qd,Tbe),e(Tbe,zhr),b(f,ANe,_),b(f,Zo,_),M(c8,Zo,null),e(Zo,Whr),e(Zo,Hd),e(Hd,Qhr),e(Hd,dQ),e(dQ,Hhr),e(Hd,Uhr),e(Hd,cQ),e(cQ,Jhr),e(Hd,Yhr),e(Zo,Khr),e(Zo,f8),e(f8,Zhr),e(f8,Mbe),e(Mbe,epr),e(f8,opr),e(Zo,rpr),e(Zo,xt),M(m8,xt,null),e(xt,tpr),e(xt,Ebe),e(Ebe,apr),e(xt,npr),e(xt,Ud),e(Ud,spr),e(Ud,Cbe),e(Cbe,lpr),e(Ud,ipr),e(Ud,fQ),e(fQ,dpr),e(Ud,cpr),e(xt,fpr),M(f7,xt,null),e(Zo,mpr),e(Zo,yr),M(g8,yr,null),e(yr,gpr),e(yr,wbe),e(wbe,hpr),e(yr,ppr),e(yr,en),e(en,upr),e(en,Abe),e(Abe,_pr),e(en,bpr),e(en,ybe),e(ybe,vpr),e(en,Fpr),e(en,Lbe),e(Lbe,Tpr),e(en,Mpr),e(yr,Epr),e(yr,Te),e(Te,m7),e(m7,xbe),e(xbe,Cpr),e(m7,wpr),e(m7,mQ),e(mQ,Apr),e(m7,ypr),e(Te,Lpr),e(Te,g7),e(g7,$be),e($be,xpr),e(g7,$pr),e(g7,gQ),e(gQ,kpr),e(g7,Spr),e(Te,Rpr),e(Te,h7),e(h7,kbe),e(kbe,Ppr),e(h7,Bpr),e(h7,hQ),e(hQ,Ipr),e(h7,qpr),e(Te,Npr),e(Te,p7),e(p7,Sbe),e(Sbe,jpr),e(p7,Dpr),e(p7,pQ),e(pQ,Gpr),e(p7,Opr),e(Te,Vpr),e(Te,u7),e(u7,Rbe),e(Rbe,Xpr),e(u7,zpr),e(u7,uQ),e(uQ,Wpr),e(u7,Qpr),e(Te,Hpr),e(Te,_7),e(_7,Pbe),e(Pbe,Upr),e(_7,Jpr),e(_7,_Q),e(_Q,Ypr),e(_7,Kpr),e(Te,Zpr),e(Te,b7),e(b7,Bbe),e(Bbe,eur),e(b7,our),e(b7,bQ),e(bQ,rur),e(b7,tur),e(Te,aur),e(Te,v7),e(v7,Ibe),e(Ibe,nur),e(v7,sur),e(v7,vQ),e(vQ,lur),e(v7,iur),e(Te,dur),e(Te,F7),e(F7,qbe),e(qbe,cur),e(F7,fur),e(F7,FQ),e(FQ,mur),e(F7,gur),e(Te,hur),e(Te,T7),e(T7,Nbe),e(Nbe,pur),e(T7,uur),e(T7,TQ),e(TQ,_ur),e(T7,bur),e(Te,vur),e(Te,M7),e(M7,jbe),e(jbe,Fur),e(M7,Tur),e(M7,MQ),e(MQ,Mur),e(M7,Eur),e(Te,Cur),e(Te,E7),e(E7,Dbe),e(Dbe,wur),e(E7,Aur),e(E7,EQ),e(EQ,yur),e(E7,Lur),e(yr,xur),M(C7,yr,null),b(f,yNe,_),b(f,Jd,_),e(Jd,w7),e(w7,Gbe),M(h8,Gbe,null),e(Jd,$ur),e(Jd,Obe),e(Obe,kur),b(f,LNe,_),b(f,er,_),M(p8,er,null),e(er,Sur),e(er,Yd),e(Yd,Rur),e(Yd,CQ),e(CQ,Pur),e(Yd,Bur),e(Yd,wQ),e(wQ,Iur),e(Yd,qur),e(er,Nur),e(er,u8),e(u8,jur),e(u8,Vbe),e(Vbe,Dur),e(u8,Gur),e(er,Our),e(er,$t),M(_8,$t,null),e($t,Vur),e($t,Xbe),e(Xbe,Xur),e($t,zur),e($t,Kd),e(Kd,Wur),e(Kd,zbe),e(zbe,Qur),e(Kd,Hur),e(Kd,AQ),e(AQ,Uur),e(Kd,Jur),e($t,Yur),M(A7,$t,null),e(er,Kur),e(er,Lr),M(b8,Lr,null),e(Lr,Zur),e(Lr,Wbe),e(Wbe,e_r),e(Lr,o_r),e(Lr,on),e(on,r_r),e(on,Qbe),e(Qbe,t_r),e(on,a_r),e(on,Hbe),e(Hbe,n_r),e(on,s_r),e(on,Ube),e(Ube,l_r),e(on,i_r),e(Lr,d_r),e(Lr,rn),e(rn,y7),e(y7,Jbe),e(Jbe,c_r),e(y7,f_r),e(y7,yQ),e(yQ,m_r),e(y7,g_r),e(rn,h_r),e(rn,L7),e(L7,Ybe),e(Ybe,p_r),e(L7,u_r),e(L7,LQ),e(LQ,__r),e(L7,b_r),e(rn,v_r),e(rn,x7),e(x7,Kbe),e(Kbe,F_r),e(x7,T_r),e(x7,xQ),e(xQ,M_r),e(x7,E_r),e(rn,C_r),e(rn,$7),e($7,Zbe),e(Zbe,w_r),e($7,A_r),e($7,$Q),e($Q,y_r),e($7,L_r),e(Lr,x_r),M(k7,Lr,null),b(f,xNe,_),b(f,Zd,_),e(Zd,S7),e(S7,e2e),M(v8,e2e,null),e(Zd,$_r),e(Zd,o2e),e(o2e,k_r),b(f,$Ne,_),b(f,or,_),M(F8,or,null),e(or,S_r),e(or,ec),e(ec,R_r),e(ec,kQ),e(kQ,P_r),e(ec,B_r),e(ec,SQ),e(SQ,I_r),e(ec,q_r),e(or,N_r),e(or,T8),e(T8,j_r),e(T8,r2e),e(r2e,D_r),e(T8,G_r),e(or,O_r),e(or,kt),M(M8,kt,null),e(kt,V_r),e(kt,t2e),e(t2e,X_r),e(kt,z_r),e(kt,oc),e(oc,W_r),e(oc,a2e),e(a2e,Q_r),e(oc,H_r),e(oc,RQ),e(RQ,U_r),e(oc,J_r),e(kt,Y_r),M(R7,kt,null),e(or,K_r),e(or,xr),M(E8,xr,null),e(xr,Z_r),e(xr,n2e),e(n2e,e0r),e(xr,o0r),e(xr,tn),e(tn,r0r),e(tn,s2e),e(s2e,t0r),e(tn,a0r),e(tn,l2e),e(l2e,n0r),e(tn,s0r),e(tn,i2e),e(i2e,l0r),e(tn,i0r),e(xr,d0r),e(xr,ie),e(ie,P7),e(P7,d2e),e(d2e,c0r),e(P7,f0r),e(P7,PQ),e(PQ,m0r),e(P7,g0r),e(ie,h0r),e(ie,B7),e(B7,c2e),e(c2e,p0r),e(B7,u0r),e(B7,BQ),e(BQ,_0r),e(B7,b0r),e(ie,v0r),e(ie,I7),e(I7,f2e),e(f2e,F0r),e(I7,T0r),e(I7,IQ),e(IQ,M0r),e(I7,E0r),e(ie,C0r),e(ie,q7),e(q7,m2e),e(m2e,w0r),e(q7,A0r),e(q7,qQ),e(qQ,y0r),e(q7,L0r),e(ie,x0r),e(ie,N7),e(N7,g2e),e(g2e,$0r),e(N7,k0r),e(N7,NQ),e(NQ,S0r),e(N7,R0r),e(ie,P0r),e(ie,j7),e(j7,h2e),e(h2e,B0r),e(j7,I0r),e(j7,jQ),e(jQ,q0r),e(j7,N0r),e(ie,j0r),e(ie,D7),e(D7,p2e),e(p2e,D0r),e(D7,G0r),e(D7,DQ),e(DQ,O0r),e(D7,V0r),e(ie,X0r),e(ie,G7),e(G7,u2e),e(u2e,z0r),e(G7,W0r),e(G7,GQ),e(GQ,Q0r),e(G7,H0r),e(ie,U0r),e(ie,O7),e(O7,_2e),e(_2e,J0r),e(O7,Y0r),e(O7,OQ),e(OQ,K0r),e(O7,Z0r),e(ie,e1r),e(ie,V7),e(V7,b2e),e(b2e,o1r),e(V7,r1r),e(V7,VQ),e(VQ,t1r),e(V7,a1r),e(ie,n1r),e(ie,X7),e(X7,v2e),e(v2e,s1r),e(X7,l1r),e(X7,XQ),e(XQ,i1r),e(X7,d1r),e(ie,c1r),e(ie,z7),e(z7,F2e),e(F2e,f1r),e(z7,m1r),e(z7,zQ),e(zQ,g1r),e(z7,h1r),e(ie,p1r),e(ie,W7),e(W7,T2e),e(T2e,u1r),e(W7,_1r),e(W7,WQ),e(WQ,b1r),e(W7,v1r),e(ie,F1r),e(ie,Q7),e(Q7,M2e),e(M2e,T1r),e(Q7,M1r),e(Q7,QQ),e(QQ,E1r),e(Q7,C1r),e(ie,w1r),e(ie,H7),e(H7,E2e),e(E2e,A1r),e(H7,y1r),e(H7,HQ),e(HQ,L1r),e(H7,x1r),e(ie,$1r),e(ie,U7),e(U7,C2e),e(C2e,k1r),e(U7,S1r),e(U7,UQ),e(UQ,R1r),e(U7,P1r),e(ie,B1r),e(ie,J7),e(J7,w2e),e(w2e,I1r),e(J7,q1r),e(J7,JQ),e(JQ,N1r),e(J7,j1r),e(ie,D1r),e(ie,Y7),e(Y7,A2e),e(A2e,G1r),e(Y7,O1r),e(Y7,YQ),e(YQ,V1r),e(Y7,X1r),e(ie,z1r),e(ie,K7),e(K7,y2e),e(y2e,W1r),e(K7,Q1r),e(K7,KQ),e(KQ,H1r),e(K7,U1r),e(ie,J1r),e(ie,Z7),e(Z7,L2e),e(L2e,Y1r),e(Z7,K1r),e(Z7,ZQ),e(ZQ,Z1r),e(Z7,ebr),e(xr,obr),M(eM,xr,null),b(f,kNe,_),b(f,rc,_),e(rc,oM),e(oM,x2e),M(C8,x2e,null),e(rc,rbr),e(rc,$2e),e($2e,tbr),b(f,SNe,_),b(f,rr,_),M(w8,rr,null),e(rr,abr),e(rr,tc),e(tc,nbr),e(tc,eH),e(eH,sbr),e(tc,lbr),e(tc,oH),e(oH,ibr),e(tc,dbr),e(rr,cbr),e(rr,A8),e(A8,fbr),e(A8,k2e),e(k2e,mbr),e(A8,gbr),e(rr,hbr),e(rr,St),M(y8,St,null),e(St,pbr),e(St,S2e),e(S2e,ubr),e(St,_br),e(St,ac),e(ac,bbr),e(ac,R2e),e(R2e,vbr),e(ac,Fbr),e(ac,rH),e(rH,Tbr),e(ac,Mbr),e(St,Ebr),M(rM,St,null),e(rr,Cbr),e(rr,$r),M(L8,$r,null),e($r,wbr),e($r,P2e),e(P2e,Abr),e($r,ybr),e($r,an),e(an,Lbr),e(an,B2e),e(B2e,xbr),e(an,$br),e(an,I2e),e(I2e,kbr),e(an,Sbr),e(an,q2e),e(q2e,Rbr),e(an,Pbr),e($r,Bbr),e($r,ye),e(ye,tM),e(tM,N2e),e(N2e,Ibr),e(tM,qbr),e(tM,tH),e(tH,Nbr),e(tM,jbr),e(ye,Dbr),e(ye,aM),e(aM,j2e),e(j2e,Gbr),e(aM,Obr),e(aM,aH),e(aH,Vbr),e(aM,Xbr),e(ye,zbr),e(ye,nM),e(nM,D2e),e(D2e,Wbr),e(nM,Qbr),e(nM,nH),e(nH,Hbr),e(nM,Ubr),e(ye,Jbr),e(ye,sM),e(sM,G2e),e(G2e,Ybr),e(sM,Kbr),e(sM,sH),e(sH,Zbr),e(sM,e2r),e(ye,o2r),e(ye,lM),e(lM,O2e),e(O2e,r2r),e(lM,t2r),e(lM,lH),e(lH,a2r),e(lM,n2r),e(ye,s2r),e(ye,iM),e(iM,V2e),e(V2e,l2r),e(iM,i2r),e(iM,iH),e(iH,d2r),e(iM,c2r),e(ye,f2r),e(ye,dM),e(dM,X2e),e(X2e,m2r),e(dM,g2r),e(dM,dH),e(dH,h2r),e(dM,p2r),e(ye,u2r),e(ye,cM),e(cM,z2e),e(z2e,_2r),e(cM,b2r),e(cM,cH),e(cH,v2r),e(cM,F2r),e(ye,T2r),e(ye,fM),e(fM,W2e),e(W2e,M2r),e(fM,E2r),e(fM,fH),e(fH,C2r),e(fM,w2r),e(ye,A2r),e(ye,mM),e(mM,Q2e),e(Q2e,y2r),e(mM,L2r),e(mM,mH),e(mH,x2r),e(mM,$2r),e($r,k2r),M(gM,$r,null),b(f,RNe,_),b(f,nc,_),e(nc,hM),e(hM,H2e),M(x8,H2e,null),e(nc,S2r),e(nc,U2e),e(U2e,R2r),b(f,PNe,_),b(f,tr,_),M($8,tr,null),e(tr,P2r),e(tr,sc),e(sc,B2r),e(sc,gH),e(gH,I2r),e(sc,q2r),e(sc,hH),e(hH,N2r),e(sc,j2r),e(tr,D2r),e(tr,k8),e(k8,G2r),e(k8,J2e),e(J2e,O2r),e(k8,V2r),e(tr,X2r),e(tr,Rt),M(S8,Rt,null),e(Rt,z2r),e(Rt,Y2e),e(Y2e,W2r),e(Rt,Q2r),e(Rt,lc),e(lc,H2r),e(lc,K2e),e(K2e,U2r),e(lc,J2r),e(lc,pH),e(pH,Y2r),e(lc,K2r),e(Rt,Z2r),M(pM,Rt,null),e(tr,evr),e(tr,kr),M(R8,kr,null),e(kr,ovr),e(kr,Z2e),e(Z2e,rvr),e(kr,tvr),e(kr,nn),e(nn,avr),e(nn,eve),e(eve,nvr),e(nn,svr),e(nn,ove),e(ove,lvr),e(nn,ivr),e(nn,rve),e(rve,dvr),e(nn,cvr),e(kr,fvr),e(kr,ee),e(ee,uM),e(uM,tve),e(tve,mvr),e(uM,gvr),e(uM,uH),e(uH,hvr),e(uM,pvr),e(ee,uvr),e(ee,_M),e(_M,ave),e(ave,_vr),e(_M,bvr),e(_M,_H),e(_H,vvr),e(_M,Fvr),e(ee,Tvr),e(ee,bM),e(bM,nve),e(nve,Mvr),e(bM,Evr),e(bM,bH),e(bH,Cvr),e(bM,wvr),e(ee,Avr),e(ee,vM),e(vM,sve),e(sve,yvr),e(vM,Lvr),e(vM,vH),e(vH,xvr),e(vM,$vr),e(ee,kvr),e(ee,FM),e(FM,lve),e(lve,Svr),e(FM,Rvr),e(FM,FH),e(FH,Pvr),e(FM,Bvr),e(ee,Ivr),e(ee,TM),e(TM,ive),e(ive,qvr),e(TM,Nvr),e(TM,TH),e(TH,jvr),e(TM,Dvr),e(ee,Gvr),e(ee,MM),e(MM,dve),e(dve,Ovr),e(MM,Vvr),e(MM,MH),e(MH,Xvr),e(MM,zvr),e(ee,Wvr),e(ee,EM),e(EM,cve),e(cve,Qvr),e(EM,Hvr),e(EM,EH),e(EH,Uvr),e(EM,Jvr),e(ee,Yvr),e(ee,CM),e(CM,fve),e(fve,Kvr),e(CM,Zvr),e(CM,CH),e(CH,eFr),e(CM,oFr),e(ee,rFr),e(ee,wM),e(wM,mve),e(mve,tFr),e(wM,aFr),e(wM,wH),e(wH,nFr),e(wM,sFr),e(ee,lFr),e(ee,AM),e(AM,gve),e(gve,iFr),e(AM,dFr),e(AM,AH),e(AH,cFr),e(AM,fFr),e(ee,mFr),e(ee,yM),e(yM,hve),e(hve,gFr),e(yM,hFr),e(yM,yH),e(yH,pFr),e(yM,uFr),e(ee,_Fr),e(ee,LM),e(LM,pve),e(pve,bFr),e(LM,vFr),e(LM,LH),e(LH,FFr),e(LM,TFr),e(ee,MFr),e(ee,xM),e(xM,uve),e(uve,EFr),e(xM,CFr),e(xM,xH),e(xH,wFr),e(xM,AFr),e(ee,yFr),e(ee,$M),e($M,_ve),e(_ve,LFr),e($M,xFr),e($M,$H),e($H,$Fr),e($M,kFr),e(ee,SFr),e(ee,kM),e(kM,bve),e(bve,RFr),e(kM,PFr),e(kM,kH),e(kH,BFr),e(kM,IFr),e(ee,qFr),e(ee,SM),e(SM,vve),e(vve,NFr),e(SM,jFr),e(SM,SH),e(SH,DFr),e(SM,GFr),e(ee,OFr),e(ee,RM),e(RM,Fve),e(Fve,VFr),e(RM,XFr),e(RM,RH),e(RH,zFr),e(RM,WFr),e(ee,QFr),e(ee,PM),e(PM,Tve),e(Tve,HFr),e(PM,UFr),e(PM,PH),e(PH,JFr),e(PM,YFr),e(ee,KFr),e(ee,BM),e(BM,Mve),e(Mve,ZFr),e(BM,e6r),e(BM,BH),e(BH,o6r),e(BM,r6r),e(ee,t6r),e(ee,IM),e(IM,Eve),e(Eve,a6r),e(IM,n6r),e(IM,IH),e(IH,s6r),e(IM,l6r),e(ee,i6r),e(ee,qM),e(qM,Cve),e(Cve,d6r),e(qM,c6r),e(qM,qH),e(qH,f6r),e(qM,m6r),e(ee,g6r),e(ee,NM),e(NM,wve),e(wve,h6r),e(NM,p6r),e(NM,NH),e(NH,u6r),e(NM,_6r),e(ee,b6r),e(ee,jM),e(jM,Ave),e(Ave,v6r),e(jM,F6r),e(jM,jH),e(jH,T6r),e(jM,M6r),e(ee,E6r),e(ee,DM),e(DM,yve),e(yve,C6r),e(DM,w6r),e(DM,DH),e(DH,A6r),e(DM,y6r),e(ee,L6r),e(ee,GM),e(GM,Lve),e(Lve,x6r),e(GM,$6r),e(GM,GH),e(GH,k6r),e(GM,S6r),e(kr,R6r),M(OM,kr,null),b(f,BNe,_),b(f,ic,_),e(ic,VM),e(VM,xve),M(P8,xve,null),e(ic,P6r),e(ic,$ve),e($ve,B6r),b(f,INe,_),b(f,ar,_),M(B8,ar,null),e(ar,I6r),e(ar,dc),e(dc,q6r),e(dc,OH),e(OH,N6r),e(dc,j6r),e(dc,VH),e(VH,D6r),e(dc,G6r),e(ar,O6r),e(ar,I8),e(I8,V6r),e(I8,kve),e(kve,X6r),e(I8,z6r),e(ar,W6r),e(ar,Pt),M(q8,Pt,null),e(Pt,Q6r),e(Pt,Sve),e(Sve,H6r),e(Pt,U6r),e(Pt,cc),e(cc,J6r),e(cc,Rve),e(Rve,Y6r),e(cc,K6r),e(cc,XH),e(XH,Z6r),e(cc,eTr),e(Pt,oTr),M(XM,Pt,null),e(ar,rTr),e(ar,Sr),M(N8,Sr,null),e(Sr,tTr),e(Sr,Pve),e(Pve,aTr),e(Sr,nTr),e(Sr,sn),e(sn,sTr),e(sn,Bve),e(Bve,lTr),e(sn,iTr),e(sn,Ive),e(Ive,dTr),e(sn,cTr),e(sn,qve),e(qve,fTr),e(sn,mTr),e(Sr,gTr),e(Sr,pe),e(pe,zM),e(zM,Nve),e(Nve,hTr),e(zM,pTr),e(zM,zH),e(zH,uTr),e(zM,_Tr),e(pe,bTr),e(pe,WM),e(WM,jve),e(jve,vTr),e(WM,FTr),e(WM,WH),e(WH,TTr),e(WM,MTr),e(pe,ETr),e(pe,QM),e(QM,Dve),e(Dve,CTr),e(QM,wTr),e(QM,QH),e(QH,ATr),e(QM,yTr),e(pe,LTr),e(pe,HM),e(HM,Gve),e(Gve,xTr),e(HM,$Tr),e(HM,HH),e(HH,kTr),e(HM,STr),e(pe,RTr),e(pe,UM),e(UM,Ove),e(Ove,PTr),e(UM,BTr),e(UM,UH),e(UH,ITr),e(UM,qTr),e(pe,NTr),e(pe,JM),e(JM,Vve),e(Vve,jTr),e(JM,DTr),e(JM,JH),e(JH,GTr),e(JM,OTr),e(pe,VTr),e(pe,YM),e(YM,Xve),e(Xve,XTr),e(YM,zTr),e(YM,YH),e(YH,WTr),e(YM,QTr),e(pe,HTr),e(pe,KM),e(KM,zve),e(zve,UTr),e(KM,JTr),e(KM,KH),e(KH,YTr),e(KM,KTr),e(pe,ZTr),e(pe,ZM),e(ZM,Wve),e(Wve,e7r),e(ZM,o7r),e(ZM,ZH),e(ZH,r7r),e(ZM,t7r),e(pe,a7r),e(pe,e4),e(e4,Qve),e(Qve,n7r),e(e4,s7r),e(e4,eU),e(eU,l7r),e(e4,i7r),e(pe,d7r),e(pe,o4),e(o4,Hve),e(Hve,c7r),e(o4,f7r),e(o4,oU),e(oU,m7r),e(o4,g7r),e(pe,h7r),e(pe,r4),e(r4,Uve),e(Uve,p7r),e(r4,u7r),e(r4,rU),e(rU,_7r),e(r4,b7r),e(pe,v7r),e(pe,t4),e(t4,Jve),e(Jve,F7r),e(t4,T7r),e(t4,tU),e(tU,M7r),e(t4,E7r),e(pe,C7r),e(pe,a4),e(a4,Yve),e(Yve,w7r),e(a4,A7r),e(a4,aU),e(aU,y7r),e(a4,L7r),e(pe,x7r),e(pe,n4),e(n4,Kve),e(Kve,$7r),e(n4,k7r),e(n4,nU),e(nU,S7r),e(n4,R7r),e(pe,P7r),e(pe,s4),e(s4,Zve),e(Zve,B7r),e(s4,I7r),e(s4,sU),e(sU,q7r),e(s4,N7r),e(pe,j7r),e(pe,l4),e(l4,eFe),e(eFe,D7r),e(l4,G7r),e(l4,lU),e(lU,O7r),e(l4,V7r),e(Sr,X7r),M(i4,Sr,null),b(f,qNe,_),b(f,fc,_),e(fc,d4),e(d4,oFe),M(j8,oFe,null),e(fc,z7r),e(fc,rFe),e(rFe,W7r),b(f,NNe,_),b(f,nr,_),M(D8,nr,null),e(nr,Q7r),e(nr,mc),e(mc,H7r),e(mc,iU),e(iU,U7r),e(mc,J7r),e(mc,dU),e(dU,Y7r),e(mc,K7r),e(nr,Z7r),e(nr,G8),e(G8,eMr),e(G8,tFe),e(tFe,oMr),e(G8,rMr),e(nr,tMr),e(nr,Bt),M(O8,Bt,null),e(Bt,aMr),e(Bt,aFe),e(aFe,nMr),e(Bt,sMr),e(Bt,gc),e(gc,lMr),e(gc,nFe),e(nFe,iMr),e(gc,dMr),e(gc,cU),e(cU,cMr),e(gc,fMr),e(Bt,mMr),M(c4,Bt,null),e(nr,gMr),e(nr,Rr),M(V8,Rr,null),e(Rr,hMr),e(Rr,sFe),e(sFe,pMr),e(Rr,uMr),e(Rr,ln),e(ln,_Mr),e(ln,lFe),e(lFe,bMr),e(ln,vMr),e(ln,iFe),e(iFe,FMr),e(ln,TMr),e(ln,dFe),e(dFe,MMr),e(ln,EMr),e(Rr,CMr),e(Rr,X8),e(X8,f4),e(f4,cFe),e(cFe,wMr),e(f4,AMr),e(f4,fU),e(fU,yMr),e(f4,LMr),e(X8,xMr),e(X8,m4),e(m4,fFe),e(fFe,$Mr),e(m4,kMr),e(m4,mU),e(mU,SMr),e(m4,RMr),e(Rr,PMr),M(g4,Rr,null),b(f,jNe,_),b(f,hc,_),e(hc,h4),e(h4,mFe),M(z8,mFe,null),e(hc,BMr),e(hc,gFe),e(gFe,IMr),b(f,DNe,_),b(f,sr,_),M(W8,sr,null),e(sr,qMr),e(sr,pc),e(pc,NMr),e(pc,gU),e(gU,jMr),e(pc,DMr),e(pc,hU),e(hU,GMr),e(pc,OMr),e(sr,VMr),e(sr,Q8),e(Q8,XMr),e(Q8,hFe),e(hFe,zMr),e(Q8,WMr),e(sr,QMr),e(sr,It),M(H8,It,null),e(It,HMr),e(It,pFe),e(pFe,UMr),e(It,JMr),e(It,uc),e(uc,YMr),e(uc,uFe),e(uFe,KMr),e(uc,ZMr),e(uc,pU),e(pU,e4r),e(uc,o4r),e(It,r4r),M(p4,It,null),e(sr,t4r),e(sr,Pr),M(U8,Pr,null),e(Pr,a4r),e(Pr,_Fe),e(_Fe,n4r),e(Pr,s4r),e(Pr,dn),e(dn,l4r),e(dn,bFe),e(bFe,i4r),e(dn,d4r),e(dn,vFe),e(vFe,c4r),e(dn,f4r),e(dn,FFe),e(FFe,m4r),e(dn,g4r),e(Pr,h4r),e(Pr,TFe),e(TFe,u4),e(u4,MFe),e(MFe,p4r),e(u4,u4r),e(u4,uU),e(uU,_4r),e(u4,b4r),e(Pr,v4r),M(_4,Pr,null),b(f,GNe,_),b(f,_c,_),e(_c,b4),e(b4,EFe),M(J8,EFe,null),e(_c,F4r),e(_c,CFe),e(CFe,T4r),b(f,ONe,_),b(f,lr,_),M(Y8,lr,null),e(lr,M4r),e(lr,bc),e(bc,E4r),e(bc,_U),e(_U,C4r),e(bc,w4r),e(bc,bU),e(bU,A4r),e(bc,y4r),e(lr,L4r),e(lr,K8),e(K8,x4r),e(K8,wFe),e(wFe,$4r),e(K8,k4r),e(lr,S4r),e(lr,qt),M(Z8,qt,null),e(qt,R4r),e(qt,AFe),e(AFe,P4r),e(qt,B4r),e(qt,vc),e(vc,I4r),e(vc,yFe),e(yFe,q4r),e(vc,N4r),e(vc,vU),e(vU,j4r),e(vc,D4r),e(qt,G4r),M(v4,qt,null),e(lr,O4r),e(lr,Br),M(e9,Br,null),e(Br,V4r),e(Br,LFe),e(LFe,X4r),e(Br,z4r),e(Br,cn),e(cn,W4r),e(cn,xFe),e(xFe,Q4r),e(cn,H4r),e(cn,$Fe),e($Fe,U4r),e(cn,J4r),e(cn,kFe),e(kFe,Y4r),e(cn,K4r),e(Br,Z4r),e(Br,de),e(de,F4),e(F4,SFe),e(SFe,eEr),e(F4,oEr),e(F4,FU),e(FU,rEr),e(F4,tEr),e(de,aEr),e(de,T4),e(T4,RFe),e(RFe,nEr),e(T4,sEr),e(T4,TU),e(TU,lEr),e(T4,iEr),e(de,dEr),e(de,M4),e(M4,PFe),e(PFe,cEr),e(M4,fEr),e(M4,MU),e(MU,mEr),e(M4,gEr),e(de,hEr),e(de,E4),e(E4,BFe),e(BFe,pEr),e(E4,uEr),e(E4,EU),e(EU,_Er),e(E4,bEr),e(de,vEr),e(de,C4),e(C4,IFe),e(IFe,FEr),e(C4,TEr),e(C4,CU),e(CU,MEr),e(C4,EEr),e(de,CEr),e(de,w4),e(w4,qFe),e(qFe,wEr),e(w4,AEr),e(w4,wU),e(wU,yEr),e(w4,LEr),e(de,xEr),e(de,A4),e(A4,NFe),e(NFe,$Er),e(A4,kEr),e(A4,AU),e(AU,SEr),e(A4,REr),e(de,PEr),e(de,y4),e(y4,jFe),e(jFe,BEr),e(y4,IEr),e(y4,yU),e(yU,qEr),e(y4,NEr),e(de,jEr),e(de,L4),e(L4,DFe),e(DFe,DEr),e(L4,GEr),e(L4,LU),e(LU,OEr),e(L4,VEr),e(de,XEr),e(de,x4),e(x4,GFe),e(GFe,zEr),e(x4,WEr),e(x4,xU),e(xU,QEr),e(x4,HEr),e(de,UEr),e(de,$4),e($4,OFe),e(OFe,JEr),e($4,YEr),e($4,$U),e($U,KEr),e($4,ZEr),e(de,eCr),e(de,k4),e(k4,VFe),e(VFe,oCr),e(k4,rCr),e(k4,kU),e(kU,tCr),e(k4,aCr),e(de,nCr),e(de,S4),e(S4,XFe),e(XFe,sCr),e(S4,lCr),e(S4,SU),e(SU,iCr),e(S4,dCr),e(de,cCr),e(de,R4),e(R4,zFe),e(zFe,fCr),e(R4,mCr),e(R4,RU),e(RU,gCr),e(R4,hCr),e(de,pCr),e(de,P4),e(P4,WFe),e(WFe,uCr),e(P4,_Cr),e(P4,PU),e(PU,bCr),e(P4,vCr),e(de,FCr),e(de,B4),e(B4,QFe),e(QFe,TCr),e(B4,MCr),e(B4,BU),e(BU,ECr),e(B4,CCr),e(de,wCr),e(de,I4),e(I4,HFe),e(HFe,ACr),e(I4,yCr),e(I4,IU),e(IU,LCr),e(I4,xCr),e(de,$Cr),e(de,q4),e(q4,UFe),e(UFe,kCr),e(q4,SCr),e(q4,qU),e(qU,RCr),e(q4,PCr),e(de,BCr),e(de,N4),e(N4,JFe),e(JFe,ICr),e(N4,qCr),e(N4,NU),e(NU,NCr),e(N4,jCr),e(de,DCr),e(de,j4),e(j4,YFe),e(YFe,GCr),e(j4,OCr),e(j4,jU),e(jU,VCr),e(j4,XCr),e(Br,zCr),M(D4,Br,null),b(f,VNe,_),b(f,Fc,_),e(Fc,G4),e(G4,KFe),M(o9,KFe,null),e(Fc,WCr),e(Fc,ZFe),e(ZFe,QCr),b(f,XNe,_),b(f,ir,_),M(r9,ir,null),e(ir,HCr),e(ir,Tc),e(Tc,UCr),e(Tc,DU),e(DU,JCr),e(Tc,YCr),e(Tc,GU),e(GU,KCr),e(Tc,ZCr),e(ir,e5r),e(ir,t9),e(t9,o5r),e(t9,e6e),e(e6e,r5r),e(t9,t5r),e(ir,a5r),e(ir,Nt),M(a9,Nt,null),e(Nt,n5r),e(Nt,o6e),e(o6e,s5r),e(Nt,l5r),e(Nt,Mc),e(Mc,i5r),e(Mc,r6e),e(r6e,d5r),e(Mc,c5r),e(Mc,OU),e(OU,f5r),e(Mc,m5r),e(Nt,g5r),M(O4,Nt,null),e(ir,h5r),e(ir,Ir),M(n9,Ir,null),e(Ir,p5r),e(Ir,t6e),e(t6e,u5r),e(Ir,_5r),e(Ir,fn),e(fn,b5r),e(fn,a6e),e(a6e,v5r),e(fn,F5r),e(fn,n6e),e(n6e,T5r),e(fn,M5r),e(fn,s6e),e(s6e,E5r),e(fn,C5r),e(Ir,w5r),e(Ir,ce),e(ce,V4),e(V4,l6e),e(l6e,A5r),e(V4,y5r),e(V4,VU),e(VU,L5r),e(V4,x5r),e(ce,$5r),e(ce,X4),e(X4,i6e),e(i6e,k5r),e(X4,S5r),e(X4,XU),e(XU,R5r),e(X4,P5r),e(ce,B5r),e(ce,z4),e(z4,d6e),e(d6e,I5r),e(z4,q5r),e(z4,zU),e(zU,N5r),e(z4,j5r),e(ce,D5r),e(ce,W4),e(W4,c6e),e(c6e,G5r),e(W4,O5r),e(W4,WU),e(WU,V5r),e(W4,X5r),e(ce,z5r),e(ce,Q4),e(Q4,f6e),e(f6e,W5r),e(Q4,Q5r),e(Q4,QU),e(QU,H5r),e(Q4,U5r),e(ce,J5r),e(ce,H4),e(H4,m6e),e(m6e,Y5r),e(H4,K5r),e(H4,HU),e(HU,Z5r),e(H4,e3r),e(ce,o3r),e(ce,U4),e(U4,g6e),e(g6e,r3r),e(U4,t3r),e(U4,UU),e(UU,a3r),e(U4,n3r),e(ce,s3r),e(ce,J4),e(J4,h6e),e(h6e,l3r),e(J4,i3r),e(J4,JU),e(JU,d3r),e(J4,c3r),e(ce,f3r),e(ce,Y4),e(Y4,p6e),e(p6e,m3r),e(Y4,g3r),e(Y4,YU),e(YU,h3r),e(Y4,p3r),e(ce,u3r),e(ce,K4),e(K4,u6e),e(u6e,_3r),e(K4,b3r),e(K4,KU),e(KU,v3r),e(K4,F3r),e(ce,T3r),e(ce,Z4),e(Z4,_6e),e(_6e,M3r),e(Z4,E3r),e(Z4,ZU),e(ZU,C3r),e(Z4,w3r),e(ce,A3r),e(ce,eE),e(eE,b6e),e(b6e,y3r),e(eE,L3r),e(eE,eJ),e(eJ,x3r),e(eE,$3r),e(ce,k3r),e(ce,oE),e(oE,v6e),e(v6e,S3r),e(oE,R3r),e(oE,oJ),e(oJ,P3r),e(oE,B3r),e(ce,I3r),e(ce,rE),e(rE,F6e),e(F6e,q3r),e(rE,N3r),e(rE,rJ),e(rJ,j3r),e(rE,D3r),e(ce,G3r),e(ce,tE),e(tE,T6e),e(T6e,O3r),e(tE,V3r),e(tE,tJ),e(tJ,X3r),e(tE,z3r),e(ce,W3r),e(ce,aE),e(aE,M6e),e(M6e,Q3r),e(aE,H3r),e(aE,aJ),e(aJ,U3r),e(aE,J3r),e(ce,Y3r),e(ce,nE),e(nE,E6e),e(E6e,K3r),e(nE,Z3r),e(nE,nJ),e(nJ,ewr),e(nE,owr),e(ce,rwr),e(ce,sE),e(sE,C6e),e(C6e,twr),e(sE,awr),e(sE,sJ),e(sJ,nwr),e(sE,swr),e(ce,lwr),e(ce,lE),e(lE,w6e),e(w6e,iwr),e(lE,dwr),e(lE,lJ),e(lJ,cwr),e(lE,fwr),e(ce,mwr),e(ce,iE),e(iE,A6e),e(A6e,gwr),e(iE,hwr),e(iE,iJ),e(iJ,pwr),e(iE,uwr),e(Ir,_wr),M(dE,Ir,null),b(f,zNe,_),b(f,Ec,_),e(Ec,cE),e(cE,y6e),M(s9,y6e,null),e(Ec,bwr),e(Ec,L6e),e(L6e,vwr),b(f,WNe,_),b(f,dr,_),M(l9,dr,null),e(dr,Fwr),e(dr,Cc),e(Cc,Twr),e(Cc,dJ),e(dJ,Mwr),e(Cc,Ewr),e(Cc,cJ),e(cJ,Cwr),e(Cc,wwr),e(dr,Awr),e(dr,i9),e(i9,ywr),e(i9,x6e),e(x6e,Lwr),e(i9,xwr),e(dr,$wr),e(dr,jt),M(d9,jt,null),e(jt,kwr),e(jt,$6e),e($6e,Swr),e(jt,Rwr),e(jt,wc),e(wc,Pwr),e(wc,k6e),e(k6e,Bwr),e(wc,Iwr),e(wc,fJ),e(fJ,qwr),e(wc,Nwr),e(jt,jwr),M(fE,jt,null),e(dr,Dwr),e(dr,qr),M(c9,qr,null),e(qr,Gwr),e(qr,S6e),e(S6e,Owr),e(qr,Vwr),e(qr,mn),e(mn,Xwr),e(mn,R6e),e(R6e,zwr),e(mn,Wwr),e(mn,P6e),e(P6e,Qwr),e(mn,Hwr),e(mn,B6e),e(B6e,Uwr),e(mn,Jwr),e(qr,Ywr),e(qr,I6e),e(I6e,mE),e(mE,q6e),e(q6e,Kwr),e(mE,Zwr),e(mE,mJ),e(mJ,eAr),e(mE,oAr),e(qr,rAr),M(gE,qr,null),b(f,QNe,_),b(f,Ac,_),e(Ac,hE),e(hE,N6e),M(f9,N6e,null),e(Ac,tAr),e(Ac,j6e),e(j6e,aAr),b(f,HNe,_),b(f,cr,_),M(m9,cr,null),e(cr,nAr),e(cr,yc),e(yc,sAr),e(yc,gJ),e(gJ,lAr),e(yc,iAr),e(yc,hJ),e(hJ,dAr),e(yc,cAr),e(cr,fAr),e(cr,g9),e(g9,mAr),e(g9,D6e),e(D6e,gAr),e(g9,hAr),e(cr,pAr),e(cr,Dt),M(h9,Dt,null),e(Dt,uAr),e(Dt,G6e),e(G6e,_Ar),e(Dt,bAr),e(Dt,Lc),e(Lc,vAr),e(Lc,O6e),e(O6e,FAr),e(Lc,TAr),e(Lc,pJ),e(pJ,MAr),e(Lc,EAr),e(Dt,CAr),M(pE,Dt,null),e(cr,wAr),e(cr,Nr),M(p9,Nr,null),e(Nr,AAr),e(Nr,V6e),e(V6e,yAr),e(Nr,LAr),e(Nr,gn),e(gn,xAr),e(gn,X6e),e(X6e,$Ar),e(gn,kAr),e(gn,z6e),e(z6e,SAr),e(gn,RAr),e(gn,W6e),e(W6e,PAr),e(gn,BAr),e(Nr,IAr),e(Nr,Q6e),e(Q6e,uE),e(uE,H6e),e(H6e,qAr),e(uE,NAr),e(uE,uJ),e(uJ,jAr),e(uE,DAr),e(Nr,GAr),M(_E,Nr,null),b(f,UNe,_),b(f,xc,_),e(xc,bE),e(bE,U6e),M(u9,U6e,null),e(xc,OAr),e(xc,J6e),e(J6e,VAr),b(f,JNe,_),b(f,fr,_),M(_9,fr,null),e(fr,XAr),e(fr,$c),e($c,zAr),e($c,_J),e(_J,WAr),e($c,QAr),e($c,bJ),e(bJ,HAr),e($c,UAr),e(fr,JAr),e(fr,b9),e(b9,YAr),e(b9,Y6e),e(Y6e,KAr),e(b9,ZAr),e(fr,eyr),e(fr,Gt),M(v9,Gt,null),e(Gt,oyr),e(Gt,K6e),e(K6e,ryr),e(Gt,tyr),e(Gt,kc),e(kc,ayr),e(kc,Z6e),e(Z6e,nyr),e(kc,syr),e(kc,vJ),e(vJ,lyr),e(kc,iyr),e(Gt,dyr),M(vE,Gt,null),e(fr,cyr),e(fr,jr),M(F9,jr,null),e(jr,fyr),e(jr,eTe),e(eTe,myr),e(jr,gyr),e(jr,hn),e(hn,hyr),e(hn,oTe),e(oTe,pyr),e(hn,uyr),e(hn,rTe),e(rTe,_yr),e(hn,byr),e(hn,tTe),e(tTe,vyr),e(hn,Fyr),e(jr,Tyr),e(jr,te),e(te,FE),e(FE,aTe),e(aTe,Myr),e(FE,Eyr),e(FE,FJ),e(FJ,Cyr),e(FE,wyr),e(te,Ayr),e(te,TE),e(TE,nTe),e(nTe,yyr),e(TE,Lyr),e(TE,TJ),e(TJ,xyr),e(TE,$yr),e(te,kyr),e(te,ME),e(ME,sTe),e(sTe,Syr),e(ME,Ryr),e(ME,MJ),e(MJ,Pyr),e(ME,Byr),e(te,Iyr),e(te,EE),e(EE,lTe),e(lTe,qyr),e(EE,Nyr),e(EE,EJ),e(EJ,jyr),e(EE,Dyr),e(te,Gyr),e(te,CE),e(CE,iTe),e(iTe,Oyr),e(CE,Vyr),e(CE,CJ),e(CJ,Xyr),e(CE,zyr),e(te,Wyr),e(te,wE),e(wE,dTe),e(dTe,Qyr),e(wE,Hyr),e(wE,wJ),e(wJ,Uyr),e(wE,Jyr),e(te,Yyr),e(te,AE),e(AE,cTe),e(cTe,Kyr),e(AE,Zyr),e(AE,AJ),e(AJ,eLr),e(AE,oLr),e(te,rLr),e(te,yE),e(yE,fTe),e(fTe,tLr),e(yE,aLr),e(yE,yJ),e(yJ,nLr),e(yE,sLr),e(te,lLr),e(te,LE),e(LE,mTe),e(mTe,iLr),e(LE,dLr),e(LE,LJ),e(LJ,cLr),e(LE,fLr),e(te,mLr),e(te,xE),e(xE,gTe),e(gTe,gLr),e(xE,hLr),e(xE,xJ),e(xJ,pLr),e(xE,uLr),e(te,_Lr),e(te,$E),e($E,hTe),e(hTe,bLr),e($E,vLr),e($E,$J),e($J,FLr),e($E,TLr),e(te,MLr),e(te,kE),e(kE,pTe),e(pTe,ELr),e(kE,CLr),e(kE,kJ),e(kJ,wLr),e(kE,ALr),e(te,yLr),e(te,SE),e(SE,uTe),e(uTe,LLr),e(SE,xLr),e(SE,SJ),e(SJ,$Lr),e(SE,kLr),e(te,SLr),e(te,RE),e(RE,_Te),e(_Te,RLr),e(RE,PLr),e(RE,RJ),e(RJ,BLr),e(RE,ILr),e(te,qLr),e(te,PE),e(PE,bTe),e(bTe,NLr),e(PE,jLr),e(PE,PJ),e(PJ,DLr),e(PE,GLr),e(te,OLr),e(te,BE),e(BE,vTe),e(vTe,VLr),e(BE,XLr),e(BE,BJ),e(BJ,zLr),e(BE,WLr),e(te,QLr),e(te,IE),e(IE,FTe),e(FTe,HLr),e(IE,ULr),e(IE,IJ),e(IJ,JLr),e(IE,YLr),e(te,KLr),e(te,qE),e(qE,TTe),e(TTe,ZLr),e(qE,e8r),e(qE,qJ),e(qJ,o8r),e(qE,r8r),e(te,t8r),e(te,NE),e(NE,MTe),e(MTe,a8r),e(NE,n8r),e(NE,NJ),e(NJ,s8r),e(NE,l8r),e(te,i8r),e(te,jE),e(jE,ETe),e(ETe,d8r),e(jE,c8r),e(jE,jJ),e(jJ,f8r),e(jE,m8r),e(te,g8r),e(te,DE),e(DE,CTe),e(CTe,h8r),e(DE,p8r),e(DE,DJ),e(DJ,u8r),e(DE,_8r),e(te,b8r),e(te,GE),e(GE,wTe),e(wTe,v8r),e(GE,F8r),e(GE,GJ),e(GJ,T8r),e(GE,M8r),e(te,E8r),e(te,OE),e(OE,ATe),e(ATe,C8r),e(OE,w8r),e(OE,OJ),e(OJ,A8r),e(OE,y8r),e(te,L8r),e(te,VE),e(VE,yTe),e(yTe,x8r),e(VE,$8r),e(VE,VJ),e(VJ,k8r),e(VE,S8r),e(te,R8r),e(te,XE),e(XE,LTe),e(LTe,P8r),e(XE,B8r),e(XE,XJ),e(XJ,I8r),e(XE,q8r),e(jr,N8r),M(zE,jr,null),b(f,YNe,_),b(f,Sc,_),e(Sc,WE),e(WE,xTe),M(T9,xTe,null),e(Sc,j8r),e(Sc,$Te),e($Te,D8r),b(f,KNe,_),b(f,mr,_),M(M9,mr,null),e(mr,G8r),e(mr,Rc),e(Rc,O8r),e(Rc,zJ),e(zJ,V8r),e(Rc,X8r),e(Rc,WJ),e(WJ,z8r),e(Rc,W8r),e(mr,Q8r),e(mr,E9),e(E9,H8r),e(E9,kTe),e(kTe,U8r),e(E9,J8r),e(mr,Y8r),e(mr,Ot),M(C9,Ot,null),e(Ot,K8r),e(Ot,STe),e(STe,Z8r),e(Ot,e9r),e(Ot,Pc),e(Pc,o9r),e(Pc,RTe),e(RTe,r9r),e(Pc,t9r),e(Pc,QJ),e(QJ,a9r),e(Pc,n9r),e(Ot,s9r),M(QE,Ot,null),e(mr,l9r),e(mr,Dr),M(w9,Dr,null),e(Dr,i9r),e(Dr,PTe),e(PTe,d9r),e(Dr,c9r),e(Dr,pn),e(pn,f9r),e(pn,BTe),e(BTe,m9r),e(pn,g9r),e(pn,ITe),e(ITe,h9r),e(pn,p9r),e(pn,qTe),e(qTe,u9r),e(pn,_9r),e(Dr,b9r),e(Dr,Re),e(Re,HE),e(HE,NTe),e(NTe,v9r),e(HE,F9r),e(HE,HJ),e(HJ,T9r),e(HE,M9r),e(Re,E9r),e(Re,UE),e(UE,jTe),e(jTe,C9r),e(UE,w9r),e(UE,UJ),e(UJ,A9r),e(UE,y9r),e(Re,L9r),e(Re,JE),e(JE,DTe),e(DTe,x9r),e(JE,$9r),e(JE,JJ),e(JJ,k9r),e(JE,S9r),e(Re,R9r),e(Re,YE),e(YE,GTe),e(GTe,P9r),e(YE,B9r),e(YE,YJ),e(YJ,I9r),e(YE,q9r),e(Re,N9r),e(Re,KE),e(KE,OTe),e(OTe,j9r),e(KE,D9r),e(KE,KJ),e(KJ,G9r),e(KE,O9r),e(Re,V9r),e(Re,ZE),e(ZE,VTe),e(VTe,X9r),e(ZE,z9r),e(ZE,ZJ),e(ZJ,W9r),e(ZE,Q9r),e(Re,H9r),e(Re,eC),e(eC,XTe),e(XTe,U9r),e(eC,J9r),e(eC,eY),e(eY,Y9r),e(eC,K9r),e(Re,Z9r),e(Re,oC),e(oC,zTe),e(zTe,exr),e(oC,oxr),e(oC,oY),e(oY,rxr),e(oC,txr),e(Re,axr),e(Re,rC),e(rC,WTe),e(WTe,nxr),e(rC,sxr),e(rC,rY),e(rY,lxr),e(rC,ixr),e(Dr,dxr),M(tC,Dr,null),b(f,ZNe,_),b(f,Bc,_),e(Bc,aC),e(aC,QTe),M(A9,QTe,null),e(Bc,cxr),e(Bc,HTe),e(HTe,fxr),b(f,eje,_),b(f,gr,_),M(y9,gr,null),e(gr,mxr),e(gr,Ic),e(Ic,gxr),e(Ic,tY),e(tY,hxr),e(Ic,pxr),e(Ic,aY),e(aY,uxr),e(Ic,_xr),e(gr,bxr),e(gr,L9),e(L9,vxr),e(L9,UTe),e(UTe,Fxr),e(L9,Txr),e(gr,Mxr),e(gr,Vt),M(x9,Vt,null),e(Vt,Exr),e(Vt,JTe),e(JTe,Cxr),e(Vt,wxr),e(Vt,qc),e(qc,Axr),e(qc,YTe),e(YTe,yxr),e(qc,Lxr),e(qc,nY),e(nY,xxr),e(qc,$xr),e(Vt,kxr),M(nC,Vt,null),e(gr,Sxr),e(gr,Gr),M($9,Gr,null),e(Gr,Rxr),e(Gr,KTe),e(KTe,Pxr),e(Gr,Bxr),e(Gr,un),e(un,Ixr),e(un,ZTe),e(ZTe,qxr),e(un,Nxr),e(un,e7e),e(e7e,jxr),e(un,Dxr),e(un,o7e),e(o7e,Gxr),e(un,Oxr),e(Gr,Vxr),e(Gr,Me),e(Me,sC),e(sC,r7e),e(r7e,Xxr),e(sC,zxr),e(sC,sY),e(sY,Wxr),e(sC,Qxr),e(Me,Hxr),e(Me,lC),e(lC,t7e),e(t7e,Uxr),e(lC,Jxr),e(lC,lY),e(lY,Yxr),e(lC,Kxr),e(Me,Zxr),e(Me,iC),e(iC,a7e),e(a7e,e$r),e(iC,o$r),e(iC,iY),e(iY,r$r),e(iC,t$r),e(Me,a$r),e(Me,dC),e(dC,n7e),e(n7e,n$r),e(dC,s$r),e(dC,dY),e(dY,l$r),e(dC,i$r),e(Me,d$r),e(Me,cC),e(cC,s7e),e(s7e,c$r),e(cC,f$r),e(cC,cY),e(cY,m$r),e(cC,g$r),e(Me,h$r),e(Me,fC),e(fC,l7e),e(l7e,p$r),e(fC,u$r),e(fC,fY),e(fY,_$r),e(fC,b$r),e(Me,v$r),e(Me,mC),e(mC,i7e),e(i7e,F$r),e(mC,T$r),e(mC,mY),e(mY,M$r),e(mC,E$r),e(Me,C$r),e(Me,gC),e(gC,d7e),e(d7e,w$r),e(gC,A$r),e(gC,gY),e(gY,y$r),e(gC,L$r),e(Me,x$r),e(Me,hC),e(hC,c7e),e(c7e,$$r),e(hC,k$r),e(hC,hY),e(hY,S$r),e(hC,R$r),e(Me,P$r),e(Me,pC),e(pC,f7e),e(f7e,B$r),e(pC,I$r),e(pC,pY),e(pY,q$r),e(pC,N$r),e(Me,j$r),e(Me,uC),e(uC,m7e),e(m7e,D$r),e(uC,G$r),e(uC,uY),e(uY,O$r),e(uC,V$r),e(Me,X$r),e(Me,_C),e(_C,g7e),e(g7e,z$r),e(_C,W$r),e(_C,_Y),e(_Y,Q$r),e(_C,H$r),e(Gr,U$r),M(bC,Gr,null),b(f,oje,_),b(f,Nc,_),e(Nc,vC),e(vC,h7e),M(k9,h7e,null),e(Nc,J$r),e(Nc,p7e),e(p7e,Y$r),b(f,rje,_),b(f,hr,_),M(S9,hr,null),e(hr,K$r),e(hr,jc),e(jc,Z$r),e(jc,bY),e(bY,ekr),e(jc,okr),e(jc,vY),e(vY,rkr),e(jc,tkr),e(hr,akr),e(hr,R9),e(R9,nkr),e(R9,u7e),e(u7e,skr),e(R9,lkr),e(hr,ikr),e(hr,Xt),M(P9,Xt,null),e(Xt,dkr),e(Xt,_7e),e(_7e,ckr),e(Xt,fkr),e(Xt,Dc),e(Dc,mkr),e(Dc,b7e),e(b7e,gkr),e(Dc,hkr),e(Dc,FY),e(FY,pkr),e(Dc,ukr),e(Xt,_kr),M(FC,Xt,null),e(hr,bkr),e(hr,Or),M(B9,Or,null),e(Or,vkr),e(Or,v7e),e(v7e,Fkr),e(Or,Tkr),e(Or,_n),e(_n,Mkr),e(_n,F7e),e(F7e,Ekr),e(_n,Ckr),e(_n,T7e),e(T7e,wkr),e(_n,Akr),e(_n,M7e),e(M7e,ykr),e(_n,Lkr),e(Or,xkr),e(Or,Le),e(Le,TC),e(TC,E7e),e(E7e,$kr),e(TC,kkr),e(TC,TY),e(TY,Skr),e(TC,Rkr),e(Le,Pkr),e(Le,MC),e(MC,C7e),e(C7e,Bkr),e(MC,Ikr),e(MC,MY),e(MY,qkr),e(MC,Nkr),e(Le,jkr),e(Le,EC),e(EC,w7e),e(w7e,Dkr),e(EC,Gkr),e(EC,EY),e(EY,Okr),e(EC,Vkr),e(Le,Xkr),e(Le,CC),e(CC,A7e),e(A7e,zkr),e(CC,Wkr),e(CC,CY),e(CY,Qkr),e(CC,Hkr),e(Le,Ukr),e(Le,wC),e(wC,y7e),e(y7e,Jkr),e(wC,Ykr),e(wC,wY),e(wY,Kkr),e(wC,Zkr),e(Le,eSr),e(Le,AC),e(AC,L7e),e(L7e,oSr),e(AC,rSr),e(AC,AY),e(AY,tSr),e(AC,aSr),e(Le,nSr),e(Le,yC),e(yC,x7e),e(x7e,sSr),e(yC,lSr),e(yC,yY),e(yY,iSr),e(yC,dSr),e(Le,cSr),e(Le,LC),e(LC,$7e),e($7e,fSr),e(LC,mSr),e(LC,LY),e(LY,gSr),e(LC,hSr),e(Le,pSr),e(Le,xC),e(xC,k7e),e(k7e,uSr),e(xC,_Sr),e(xC,xY),e(xY,bSr),e(xC,vSr),e(Le,FSr),e(Le,$C),e($C,S7e),e(S7e,TSr),e($C,MSr),e($C,$Y),e($Y,ESr),e($C,CSr),e(Or,wSr),M(kC,Or,null),b(f,tje,_),b(f,Gc,_),e(Gc,SC),e(SC,R7e),M(I9,R7e,null),e(Gc,ASr),e(Gc,P7e),e(P7e,ySr),b(f,aje,_),b(f,pr,_),M(q9,pr,null),e(pr,LSr),e(pr,Oc),e(Oc,xSr),e(Oc,kY),e(kY,$Sr),e(Oc,kSr),e(Oc,SY),e(SY,SSr),e(Oc,RSr),e(pr,PSr),e(pr,N9),e(N9,BSr),e(N9,B7e),e(B7e,ISr),e(N9,qSr),e(pr,NSr),e(pr,zt),M(j9,zt,null),e(zt,jSr),e(zt,I7e),e(I7e,DSr),e(zt,GSr),e(zt,Vc),e(Vc,OSr),e(Vc,q7e),e(q7e,VSr),e(Vc,XSr),e(Vc,RY),e(RY,zSr),e(Vc,WSr),e(zt,QSr),M(RC,zt,null),e(pr,HSr),e(pr,Vr),M(D9,Vr,null),e(Vr,USr),e(Vr,N7e),e(N7e,JSr),e(Vr,YSr),e(Vr,bn),e(bn,KSr),e(bn,j7e),e(j7e,ZSr),e(bn,eRr),e(bn,D7e),e(D7e,oRr),e(bn,rRr),e(bn,G7e),e(G7e,tRr),e(bn,aRr),e(Vr,nRr),e(Vr,Pe),e(Pe,PC),e(PC,O7e),e(O7e,sRr),e(PC,lRr),e(PC,PY),e(PY,iRr),e(PC,dRr),e(Pe,cRr),e(Pe,BC),e(BC,V7e),e(V7e,fRr),e(BC,mRr),e(BC,BY),e(BY,gRr),e(BC,hRr),e(Pe,pRr),e(Pe,IC),e(IC,X7e),e(X7e,uRr),e(IC,_Rr),e(IC,IY),e(IY,bRr),e(IC,vRr),e(Pe,FRr),e(Pe,qC),e(qC,z7e),e(z7e,TRr),e(qC,MRr),e(qC,qY),e(qY,ERr),e(qC,CRr),e(Pe,wRr),e(Pe,NC),e(NC,W7e),e(W7e,ARr),e(NC,yRr),e(NC,NY),e(NY,LRr),e(NC,xRr),e(Pe,$Rr),e(Pe,jC),e(jC,Q7e),e(Q7e,kRr),e(jC,SRr),e(jC,jY),e(jY,RRr),e(jC,PRr),e(Pe,BRr),e(Pe,DC),e(DC,H7e),e(H7e,IRr),e(DC,qRr),e(DC,DY),e(DY,NRr),e(DC,jRr),e(Pe,DRr),e(Pe,GC),e(GC,U7e),e(U7e,GRr),e(GC,ORr),e(GC,GY),e(GY,VRr),e(GC,XRr),e(Pe,zRr),e(Pe,OC),e(OC,J7e),e(J7e,WRr),e(OC,QRr),e(OC,OY),e(OY,HRr),e(OC,URr),e(Vr,JRr),M(VC,Vr,null),b(f,nje,_),b(f,Xc,_),e(Xc,XC),e(XC,Y7e),M(G9,Y7e,null),e(Xc,YRr),e(Xc,K7e),e(K7e,KRr),b(f,sje,_),b(f,ur,_),M(O9,ur,null),e(ur,ZRr),e(ur,zc),e(zc,ePr),e(zc,VY),e(VY,oPr),e(zc,rPr),e(zc,XY),e(XY,tPr),e(zc,aPr),e(ur,nPr),e(ur,V9),e(V9,sPr),e(V9,Z7e),e(Z7e,lPr),e(V9,iPr),e(ur,dPr),e(ur,Wt),M(X9,Wt,null),e(Wt,cPr),e(Wt,eMe),e(eMe,fPr),e(Wt,mPr),e(Wt,Wc),e(Wc,gPr),e(Wc,oMe),e(oMe,hPr),e(Wc,pPr),e(Wc,zY),e(zY,uPr),e(Wc,_Pr),e(Wt,bPr),M(zC,Wt,null),e(ur,vPr),e(ur,Xr),M(z9,Xr,null),e(Xr,FPr),e(Xr,rMe),e(rMe,TPr),e(Xr,MPr),e(Xr,vn),e(vn,EPr),e(vn,tMe),e(tMe,CPr),e(vn,wPr),e(vn,aMe),e(aMe,APr),e(vn,yPr),e(vn,nMe),e(nMe,LPr),e(vn,xPr),e(Xr,$Pr),e(Xr,xe),e(xe,WC),e(WC,sMe),e(sMe,kPr),e(WC,SPr),e(WC,WY),e(WY,RPr),e(WC,PPr),e(xe,BPr),e(xe,QC),e(QC,lMe),e(lMe,IPr),e(QC,qPr),e(QC,QY),e(QY,NPr),e(QC,jPr),e(xe,DPr),e(xe,HC),e(HC,iMe),e(iMe,GPr),e(HC,OPr),e(HC,HY),e(HY,VPr),e(HC,XPr),e(xe,zPr),e(xe,UC),e(UC,dMe),e(dMe,WPr),e(UC,QPr),e(UC,UY),e(UY,HPr),e(UC,UPr),e(xe,JPr),e(xe,JC),e(JC,cMe),e(cMe,YPr),e(JC,KPr),e(JC,JY),e(JY,ZPr),e(JC,eBr),e(xe,oBr),e(xe,YC),e(YC,fMe),e(fMe,rBr),e(YC,tBr),e(YC,YY),e(YY,aBr),e(YC,nBr),e(xe,sBr),e(xe,KC),e(KC,mMe),e(mMe,lBr),e(KC,iBr),e(KC,KY),e(KY,dBr),e(KC,cBr),e(xe,fBr),e(xe,ZC),e(ZC,gMe),e(gMe,mBr),e(ZC,gBr),e(ZC,ZY),e(ZY,hBr),e(ZC,pBr),e(xe,uBr),e(xe,e5),e(e5,hMe),e(hMe,_Br),e(e5,bBr),e(e5,eK),e(eK,vBr),e(e5,FBr),e(xe,TBr),e(xe,o5),e(o5,pMe),e(pMe,MBr),e(o5,EBr),e(o5,oK),e(oK,CBr),e(o5,wBr),e(Xr,ABr),M(r5,Xr,null),b(f,lje,_),b(f,Qc,_),e(Qc,t5),e(t5,uMe),M(W9,uMe,null),e(Qc,yBr),e(Qc,_Me),e(_Me,LBr),b(f,ije,_),b(f,_r,_),M(Q9,_r,null),e(_r,xBr),e(_r,Hc),e(Hc,$Br),e(Hc,rK),e(rK,kBr),e(Hc,SBr),e(Hc,tK),e(tK,RBr),e(Hc,PBr),e(_r,BBr),e(_r,H9),e(H9,IBr),e(H9,bMe),e(bMe,qBr),e(H9,NBr),e(_r,jBr),e(_r,Qt),M(U9,Qt,null),e(Qt,DBr),e(Qt,vMe),e(vMe,GBr),e(Qt,OBr),e(Qt,Uc),e(Uc,VBr),e(Uc,FMe),e(FMe,XBr),e(Uc,zBr),e(Uc,aK),e(aK,WBr),e(Uc,QBr),e(Qt,HBr),M(a5,Qt,null),e(_r,UBr),e(_r,zr),M(J9,zr,null),e(zr,JBr),e(zr,TMe),e(TMe,YBr),e(zr,KBr),e(zr,Fn),e(Fn,ZBr),e(Fn,MMe),e(MMe,eIr),e(Fn,oIr),e(Fn,EMe),e(EMe,rIr),e(Fn,tIr),e(Fn,CMe),e(CMe,aIr),e(Fn,nIr),e(zr,sIr),e(zr,$e),e($e,n5),e(n5,wMe),e(wMe,lIr),e(n5,iIr),e(n5,nK),e(nK,dIr),e(n5,cIr),e($e,fIr),e($e,s5),e(s5,AMe),e(AMe,mIr),e(s5,gIr),e(s5,sK),e(sK,hIr),e(s5,pIr),e($e,uIr),e($e,l5),e(l5,yMe),e(yMe,_Ir),e(l5,bIr),e(l5,lK),e(lK,vIr),e(l5,FIr),e($e,TIr),e($e,i5),e(i5,LMe),e(LMe,MIr),e(i5,EIr),e(i5,iK),e(iK,CIr),e(i5,wIr),e($e,AIr),e($e,d5),e(d5,xMe),e(xMe,yIr),e(d5,LIr),e(d5,dK),e(dK,xIr),e(d5,$Ir),e($e,kIr),e($e,c5),e(c5,$Me),e($Me,SIr),e(c5,RIr),e(c5,cK),e(cK,PIr),e(c5,BIr),e($e,IIr),e($e,f5),e(f5,kMe),e(kMe,qIr),e(f5,NIr),e(f5,fK),e(fK,jIr),e(f5,DIr),e($e,GIr),e($e,m5),e(m5,SMe),e(SMe,OIr),e(m5,VIr),e(m5,mK),e(mK,XIr),e(m5,zIr),e($e,WIr),e($e,g5),e(g5,RMe),e(RMe,QIr),e(g5,HIr),e(g5,gK),e(gK,UIr),e(g5,JIr),e($e,YIr),e($e,h5),e(h5,PMe),e(PMe,KIr),e(h5,ZIr),e(h5,hK),e(hK,eqr),e(h5,oqr),e(zr,rqr),M(p5,zr,null),b(f,dje,_),b(f,Jc,_),e(Jc,u5),e(u5,BMe),M(Y9,BMe,null),e(Jc,tqr),e(Jc,IMe),e(IMe,aqr),b(f,cje,_),b(f,br,_),M(K9,br,null),e(br,nqr),e(br,Yc),e(Yc,sqr),e(Yc,pK),e(pK,lqr),e(Yc,iqr),e(Yc,uK),e(uK,dqr),e(Yc,cqr),e(br,fqr),e(br,Z9),e(Z9,mqr),e(Z9,qMe),e(qMe,gqr),e(Z9,hqr),e(br,pqr),e(br,Ht),M(ex,Ht,null),e(Ht,uqr),e(Ht,NMe),e(NMe,_qr),e(Ht,bqr),e(Ht,Kc),e(Kc,vqr),e(Kc,jMe),e(jMe,Fqr),e(Kc,Tqr),e(Kc,_K),e(_K,Mqr),e(Kc,Eqr),e(Ht,Cqr),M(_5,Ht,null),e(br,wqr),e(br,Wr),M(ox,Wr,null),e(Wr,Aqr),e(Wr,DMe),e(DMe,yqr),e(Wr,Lqr),e(Wr,Tn),e(Tn,xqr),e(Tn,GMe),e(GMe,$qr),e(Tn,kqr),e(Tn,OMe),e(OMe,Sqr),e(Tn,Rqr),e(Tn,VMe),e(VMe,Pqr),e(Tn,Bqr),e(Wr,Iqr),e(Wr,De),e(De,b5),e(b5,XMe),e(XMe,qqr),e(b5,Nqr),e(b5,bK),e(bK,jqr),e(b5,Dqr),e(De,Gqr),e(De,v5),e(v5,zMe),e(zMe,Oqr),e(v5,Vqr),e(v5,vK),e(vK,Xqr),e(v5,zqr),e(De,Wqr),e(De,F5),e(F5,WMe),e(WMe,Qqr),e(F5,Hqr),e(F5,FK),e(FK,Uqr),e(F5,Jqr),e(De,Yqr),e(De,T5),e(T5,QMe),e(QMe,Kqr),e(T5,Zqr),e(T5,TK),e(TK,eNr),e(T5,oNr),e(De,rNr),e(De,M5),e(M5,HMe),e(HMe,tNr),e(M5,aNr),e(M5,MK),e(MK,nNr),e(M5,sNr),e(De,lNr),e(De,E5),e(E5,UMe),e(UMe,iNr),e(E5,dNr),e(E5,EK),e(EK,cNr),e(E5,fNr),e(De,mNr),e(De,C5),e(C5,JMe),e(JMe,gNr),e(C5,hNr),e(C5,CK),e(CK,pNr),e(C5,uNr),e(De,_Nr),e(De,w5),e(w5,YMe),e(YMe,bNr),e(w5,vNr),e(w5,wK),e(wK,FNr),e(w5,TNr),e(Wr,MNr),M(A5,Wr,null),b(f,fje,_),b(f,Zc,_),e(Zc,y5),e(y5,KMe),M(rx,KMe,null),e(Zc,ENr),e(Zc,ZMe),e(ZMe,CNr),b(f,mje,_),b(f,vr,_),M(tx,vr,null),e(vr,wNr),e(vr,ef),e(ef,ANr),e(ef,AK),e(AK,yNr),e(ef,LNr),e(ef,yK),e(yK,xNr),e(ef,$Nr),e(vr,kNr),e(vr,ax),e(ax,SNr),e(ax,e4e),e(e4e,RNr),e(ax,PNr),e(vr,BNr),e(vr,Ut),M(nx,Ut,null),e(Ut,INr),e(Ut,o4e),e(o4e,qNr),e(Ut,NNr),e(Ut,of),e(of,jNr),e(of,r4e),e(r4e,DNr),e(of,GNr),e(of,LK),e(LK,ONr),e(of,VNr),e(Ut,XNr),M(L5,Ut,null),e(vr,zNr),e(vr,Qr),M(sx,Qr,null),e(Qr,WNr),e(Qr,t4e),e(t4e,QNr),e(Qr,HNr),e(Qr,Mn),e(Mn,UNr),e(Mn,a4e),e(a4e,JNr),e(Mn,YNr),e(Mn,n4e),e(n4e,KNr),e(Mn,ZNr),e(Mn,s4e),e(s4e,ejr),e(Mn,ojr),e(Qr,rjr),e(Qr,Ge),e(Ge,x5),e(x5,l4e),e(l4e,tjr),e(x5,ajr),e(x5,xK),e(xK,njr),e(x5,sjr),e(Ge,ljr),e(Ge,$5),e($5,i4e),e(i4e,ijr),e($5,djr),e($5,$K),e($K,cjr),e($5,fjr),e(Ge,mjr),e(Ge,k5),e(k5,d4e),e(d4e,gjr),e(k5,hjr),e(k5,kK),e(kK,pjr),e(k5,ujr),e(Ge,_jr),e(Ge,S5),e(S5,c4e),e(c4e,bjr),e(S5,vjr),e(S5,SK),e(SK,Fjr),e(S5,Tjr),e(Ge,Mjr),e(Ge,R5),e(R5,f4e),e(f4e,Ejr),e(R5,Cjr),e(R5,RK),e(RK,wjr),e(R5,Ajr),e(Ge,yjr),e(Ge,P5),e(P5,m4e),e(m4e,Ljr),e(P5,xjr),e(P5,PK),e(PK,$jr),e(P5,kjr),e(Ge,Sjr),e(Ge,B5),e(B5,g4e),e(g4e,Rjr),e(B5,Pjr),e(B5,BK),e(BK,Bjr),e(B5,Ijr),e(Ge,qjr),e(Ge,I5),e(I5,h4e),e(h4e,Njr),e(I5,jjr),e(I5,IK),e(IK,Djr),e(I5,Gjr),e(Qr,Ojr),M(q5,Qr,null),b(f,gje,_),b(f,rf,_),e(rf,N5),e(N5,p4e),M(lx,p4e,null),e(rf,Vjr),e(rf,u4e),e(u4e,Xjr),b(f,hje,_),b(f,Fr,_),M(ix,Fr,null),e(Fr,zjr),e(Fr,tf),e(tf,Wjr),e(tf,qK),e(qK,Qjr),e(tf,Hjr),e(tf,NK),e(NK,Ujr),e(tf,Jjr),e(Fr,Yjr),e(Fr,dx),e(dx,Kjr),e(dx,_4e),e(_4e,Zjr),e(dx,eDr),e(Fr,oDr),e(Fr,Jt),M(cx,Jt,null),e(Jt,rDr),e(Jt,b4e),e(b4e,tDr),e(Jt,aDr),e(Jt,af),e(af,nDr),e(af,v4e),e(v4e,sDr),e(af,lDr),e(af,jK),e(jK,iDr),e(af,dDr),e(Jt,cDr),M(j5,Jt,null),e(Fr,fDr),e(Fr,Hr),M(fx,Hr,null),e(Hr,mDr),e(Hr,F4e),e(F4e,gDr),e(Hr,hDr),e(Hr,En),e(En,pDr),e(En,T4e),e(T4e,uDr),e(En,_Dr),e(En,M4e),e(M4e,bDr),e(En,vDr),e(En,E4e),e(E4e,FDr),e(En,TDr),e(Hr,MDr),e(Hr,C4e),e(C4e,D5),e(D5,w4e),e(w4e,EDr),e(D5,CDr),e(D5,DK),e(DK,wDr),e(D5,ADr),e(Hr,yDr),M(G5,Hr,null),b(f,pje,_),b(f,nf,_),e(nf,O5),e(O5,A4e),M(mx,A4e,null),e(nf,LDr),e(nf,y4e),e(y4e,xDr),b(f,uje,_),b(f,Tr,_),M(gx,Tr,null),e(Tr,$Dr),e(Tr,sf),e(sf,kDr),e(sf,GK),e(GK,SDr),e(sf,RDr),e(sf,OK),e(OK,PDr),e(sf,BDr),e(Tr,IDr),e(Tr,hx),e(hx,qDr),e(hx,L4e),e(L4e,NDr),e(hx,jDr),e(Tr,DDr),e(Tr,Yt),M(px,Yt,null),e(Yt,GDr),e(Yt,x4e),e(x4e,ODr),e(Yt,VDr),e(Yt,lf),e(lf,XDr),e(lf,$4e),e($4e,zDr),e(lf,WDr),e(lf,VK),e(VK,QDr),e(lf,HDr),e(Yt,UDr),M(V5,Yt,null),e(Tr,JDr),e(Tr,Ur),M(ux,Ur,null),e(Ur,YDr),e(Ur,k4e),e(k4e,KDr),e(Ur,ZDr),e(Ur,Cn),e(Cn,eGr),e(Cn,S4e),e(S4e,oGr),e(Cn,rGr),e(Cn,R4e),e(R4e,tGr),e(Cn,aGr),e(Cn,P4e),e(P4e,nGr),e(Cn,sGr),e(Ur,lGr),e(Ur,_x),e(_x,X5),e(X5,B4e),e(B4e,iGr),e(X5,dGr),e(X5,XK),e(XK,cGr),e(X5,fGr),e(_x,mGr),e(_x,z5),e(z5,I4e),e(I4e,gGr),e(z5,hGr),e(z5,zK),e(zK,pGr),e(z5,uGr),e(Ur,_Gr),M(W5,Ur,null),b(f,_je,_),b(f,df,_),e(df,Q5),e(Q5,q4e),M(bx,q4e,null),e(df,bGr),e(df,N4e),e(N4e,vGr),b(f,bje,_),b(f,Mr,_),M(vx,Mr,null),e(Mr,FGr),e(Mr,cf),e(cf,TGr),e(cf,WK),e(WK,MGr),e(cf,EGr),e(cf,QK),e(QK,CGr),e(cf,wGr),e(Mr,AGr),e(Mr,Fx),e(Fx,yGr),e(Fx,j4e),e(j4e,LGr),e(Fx,xGr),e(Mr,$Gr),e(Mr,Kt),M(Tx,Kt,null),e(Kt,kGr),e(Kt,D4e),e(D4e,SGr),e(Kt,RGr),e(Kt,ff),e(ff,PGr),e(ff,G4e),e(G4e,BGr),e(ff,IGr),e(ff,HK),e(HK,qGr),e(ff,NGr),e(Kt,jGr),M(H5,Kt,null),e(Mr,DGr),e(Mr,Jr),M(Mx,Jr,null),e(Jr,GGr),e(Jr,O4e),e(O4e,OGr),e(Jr,VGr),e(Jr,wn),e(wn,XGr),e(wn,V4e),e(V4e,zGr),e(wn,WGr),e(wn,X4e),e(X4e,QGr),e(wn,HGr),e(wn,z4e),e(z4e,UGr),e(wn,JGr),e(Jr,YGr),e(Jr,W4e),e(W4e,U5),e(U5,Q4e),e(Q4e,KGr),e(U5,ZGr),e(U5,UK),e(UK,eOr),e(U5,oOr),e(Jr,rOr),M(J5,Jr,null),vje=!0},p(f,[_]){const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),Ff.$set(Ex);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),Tg.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),oh.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),kh.$set(J4e);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:f}),Sh.$set(Cx);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),Kh.$set(Y4e);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Zh.$set(An);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),rp.$set(K4e);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),Uu.$set(Z4e);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),Yu.$set(eEe);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:f}),G_.$set(wx);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),V_.$set(oEe);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:f}),y0.$set(Ax);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),x0.$set(rEe);const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),m1.$set(yx);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),h1.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),S1.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),P1.$set(nEe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),xb.$set(mf);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),kb.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),i2.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),c2.$set(iEe);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),_2.$set(Lx);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),v2.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),ov.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),tv.$set(fEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),zv.$set(et);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),Qv.$set(xx);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),Jv.$set(mEe);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),Kv.$set($x);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),fF.$set(gEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),gF.$set(ot);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),uF.$set(hEe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),bF.$set(gf);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),xF.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),kF.$set(uEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),NF.$set(y);const Y5={};_&2&&(Y5.$$scope={dirty:_,ctx:f}),DF.$set(Y5);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),YF.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),ZF.$set(bEe);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),t6.$set(K5);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),n6.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),m6.$set(FEe);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),h6.$set(Z5);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),v6.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),T6.$set(MEe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),w6.$set(e3);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),y6.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),$6.$set(CEe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),S6.$set(o3);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),N6.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),D6.$set(AEe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),V6.$set(r3);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),z6.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),qT.$set(LEe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),jT.$set(t3);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),d7.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),f7.$set($Ee);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),C7.$set(a3);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),A7.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),k7.$set(SEe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),R7.$set(n3);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),eM.$set(REe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),rM.$set(PEe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),gM.$set(s3);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),pM.$set(BEe);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),OM.$set(IEe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),XM.$set(l3);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),i4.$set(qEe);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),c4.$set(NEe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),g4.$set(i3);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),p4.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),_4.$set(DEe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),v4.$set(d3);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),D4.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),O4.$set(OEe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),dE.$set(c3);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),fE.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),gE.$set(XEe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),pE.$set(f3);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),_E.$set(zEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),vE.$set(WEe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),zE.$set(m3);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),QE.$set(QEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),tC.$set(HEe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),nC.$set(g3);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),bC.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),FC.$set(JEe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),kC.$set(h3);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),RC.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),VC.$set(KEe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),zC.$set(p3);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),r5.$set(ZEe);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),a5.$set(eCe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),p5.$set(u3);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),_5.$set(oCe);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),A5.$set(rCe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),L5.$set(_3);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),q5.$set(tCe);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),j5.$set(aCe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),G5.$set(b3);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),V5.$set(nCe);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),W5.$set(sCe);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),H5.$set(v3);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),J5.$set(lCe)},i(f){vje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(Ff.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(CA.$$.fragment,f),E(Tg.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E($A.$$.fragment,f),E(oh.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(IA.$$.fragment,f),E(kh.$$.fragment,f),E(Sh.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(OA.$$.fragment,f),E(Kh.$$.fragment,f),E(Zh.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(rp.$$.fragment,f),E(HA.$$.fragment,f),E(Uu.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(Yu.$$.fragment,f),E(ZA.$$.fragment,f),E(G_.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(V_.$$.fragment,f),E(ay.$$.fragment,f),E(y0.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(x0.$$.fragment,f),E(dy.$$.fragment,f),E(m1.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(h1.$$.fragment,f),E(hy.$$.fragment,f),E(S1.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(P1.$$.fragment,f),E(vy.$$.fragment,f),E(xb.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(kb.$$.fragment,f),E(Cy.$$.fragment,f),E(i2.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(c2.$$.fragment,f),E(xy.$$.fragment,f),E(_2.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(v2.$$.fragment,f),E(Py.$$.fragment,f),E(ov.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(tv.$$.fragment,f),E(jy.$$.fragment,f),E(zv.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(Qv.$$.fragment,f),E(Xy.$$.fragment,f),E(Jv.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Kv.$$.fragment,f),E(Uy.$$.fragment,f),E(fF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(gF.$$.fragment,f),E(eL.$$.fragment,f),E(uF.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(bF.$$.fragment,f),E(nL.$$.fragment,f),E(xF.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(kF.$$.fragment,f),E(cL.$$.fragment,f),E(NF.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(DF.$$.fragment,f),E(pL.$$.fragment,f),E(YF.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(ZF.$$.fragment,f),E(FL.$$.fragment,f),E(t6.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(n6.$$.fragment,f),E(AL.$$.fragment,f),E(m6.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(h6.$$.fragment,f),E(kL.$$.fragment,f),E(v6.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(T6.$$.fragment,f),E(IL.$$.fragment,f),E(w6.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(y6.$$.fragment,f),E(OL.$$.fragment,f),E($6.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(S6.$$.fragment,f),E(QL.$$.fragment,f),E(N6.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(D6.$$.fragment,f),E(KL.$$.fragment,f),E(V6.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(z6.$$.fragment,f),E(t8.$$.fragment,f),E(qT.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(jT.$$.fragment,f),E(i8.$$.fragment,f),E(d7.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(f7.$$.fragment,f),E(g8.$$.fragment,f),E(C7.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(A7.$$.fragment,f),E(b8.$$.fragment,f),E(k7.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(R7.$$.fragment,f),E(E8.$$.fragment,f),E(eM.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(rM.$$.fragment,f),E(L8.$$.fragment,f),E(gM.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(pM.$$.fragment,f),E(R8.$$.fragment,f),E(OM.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(q8.$$.fragment,f),E(XM.$$.fragment,f),E(N8.$$.fragment,f),E(i4.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(c4.$$.fragment,f),E(V8.$$.fragment,f),E(g4.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(p4.$$.fragment,f),E(U8.$$.fragment,f),E(_4.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(v4.$$.fragment,f),E(e9.$$.fragment,f),E(D4.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(O4.$$.fragment,f),E(n9.$$.fragment,f),E(dE.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(fE.$$.fragment,f),E(c9.$$.fragment,f),E(gE.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(pE.$$.fragment,f),E(p9.$$.fragment,f),E(_E.$$.fragment,f),E(u9.$$.fragment,f),E(_9.$$.fragment,f),E(v9.$$.fragment,f),E(vE.$$.fragment,f),E(F9.$$.fragment,f),E(zE.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(QE.$$.fragment,f),E(w9.$$.fragment,f),E(tC.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(nC.$$.fragment,f),E($9.$$.fragment,f),E(bC.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(FC.$$.fragment,f),E(B9.$$.fragment,f),E(kC.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(RC.$$.fragment,f),E(D9.$$.fragment,f),E(VC.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(zC.$$.fragment,f),E(z9.$$.fragment,f),E(r5.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(a5.$$.fragment,f),E(J9.$$.fragment,f),E(p5.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(_5.$$.fragment,f),E(ox.$$.fragment,f),E(A5.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(L5.$$.fragment,f),E(sx.$$.fragment,f),E(q5.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(j5.$$.fragment,f),E(fx.$$.fragment,f),E(G5.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(V5.$$.fragment,f),E(ux.$$.fragment,f),E(W5.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(H5.$$.fragment,f),E(Mx.$$.fragment,f),E(J5.$$.fragment,f),vje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(Ff.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(CA.$$.fragment,f),C(Tg.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C($A.$$.fragment,f),C(oh.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(IA.$$.fragment,f),C(kh.$$.fragment,f),C(Sh.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(OA.$$.fragment,f),C(Kh.$$.fragment,f),C(Zh.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(rp.$$.fragment,f),C(HA.$$.fragment,f),C(Uu.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(Yu.$$.fragment,f),C(ZA.$$.fragment,f),C(G_.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(V_.$$.fragment,f),C(ay.$$.fragment,f),C(y0.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(x0.$$.fragment,f),C(dy.$$.fragment,f),C(m1.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(h1.$$.fragment,f),C(hy.$$.fragment,f),C(S1.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(P1.$$.fragment,f),C(vy.$$.fragment,f),C(xb.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(kb.$$.fragment,f),C(Cy.$$.fragment,f),C(i2.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(c2.$$.fragment,f),C(xy.$$.fragment,f),C(_2.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(v2.$$.fragment,f),C(Py.$$.fragment,f),C(ov.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(tv.$$.fragment,f),C(jy.$$.fragment,f),C(zv.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(Qv.$$.fragment,f),C(Xy.$$.fragment,f),C(Jv.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Kv.$$.fragment,f),C(Uy.$$.fragment,f),C(fF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(gF.$$.fragment,f),C(eL.$$.fragment,f),C(uF.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(bF.$$.fragment,f),C(nL.$$.fragment,f),C(xF.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(kF.$$.fragment,f),C(cL.$$.fragment,f),C(NF.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(DF.$$.fragment,f),C(pL.$$.fragment,f),C(YF.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(ZF.$$.fragment,f),C(FL.$$.fragment,f),C(t6.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(n6.$$.fragment,f),C(AL.$$.fragment,f),C(m6.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(h6.$$.fragment,f),C(kL.$$.fragment,f),C(v6.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(T6.$$.fragment,f),C(IL.$$.fragment,f),C(w6.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(y6.$$.fragment,f),C(OL.$$.fragment,f),C($6.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(S6.$$.fragment,f),C(QL.$$.fragment,f),C(N6.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(D6.$$.fragment,f),C(KL.$$.fragment,f),C(V6.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(z6.$$.fragment,f),C(t8.$$.fragment,f),C(qT.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(jT.$$.fragment,f),C(i8.$$.fragment,f),C(d7.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(f7.$$.fragment,f),C(g8.$$.fragment,f),C(C7.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(A7.$$.fragment,f),C(b8.$$.fragment,f),C(k7.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(R7.$$.fragment,f),C(E8.$$.fragment,f),C(eM.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(rM.$$.fragment,f),C(L8.$$.fragment,f),C(gM.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(pM.$$.fragment,f),C(R8.$$.fragment,f),C(OM.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(q8.$$.fragment,f),C(XM.$$.fragment,f),C(N8.$$.fragment,f),C(i4.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(c4.$$.fragment,f),C(V8.$$.fragment,f),C(g4.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(p4.$$.fragment,f),C(U8.$$.fragment,f),C(_4.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(v4.$$.fragment,f),C(e9.$$.fragment,f),C(D4.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(O4.$$.fragment,f),C(n9.$$.fragment,f),C(dE.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(fE.$$.fragment,f),C(c9.$$.fragment,f),C(gE.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(pE.$$.fragment,f),C(p9.$$.fragment,f),C(_E.$$.fragment,f),C(u9.$$.fragment,f),C(_9.$$.fragment,f),C(v9.$$.fragment,f),C(vE.$$.fragment,f),C(F9.$$.fragment,f),C(zE.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(QE.$$.fragment,f),C(w9.$$.fragment,f),C(tC.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(nC.$$.fragment,f),C($9.$$.fragment,f),C(bC.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(FC.$$.fragment,f),C(B9.$$.fragment,f),C(kC.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(RC.$$.fragment,f),C(D9.$$.fragment,f),C(VC.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(zC.$$.fragment,f),C(z9.$$.fragment,f),C(r5.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(a5.$$.fragment,f),C(J9.$$.fragment,f),C(p5.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(_5.$$.fragment,f),C(ox.$$.fragment,f),C(A5.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(L5.$$.fragment,f),C(sx.$$.fragment,f),C(q5.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(j5.$$.fragment,f),C(fx.$$.fragment,f),C(G5.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(V5.$$.fragment,f),C(ux.$$.fragment,f),C(W5.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(H5.$$.fragment,f),C(Mx.$$.fragment,f),C(J5.$$.fragment,f),vje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(uqe),f&&t(bi),w(bA),f&&t(_qe),f&&t(kn),f&&t(bqe),w(vA,f),f&&t(vqe),f&&t(G$),f&&t(Fqe),w(Ff,f),f&&t(Tqe),f&&t(vi),w(FA),f&&t(Mqe),f&&t(Co),w(TA),w(CA),w(Tg),w(wA),f&&t(Eqe),f&&t(Ti),w(AA),f&&t(Cqe),f&&t(wo),w(yA),w($A),w(oh),w(kA),f&&t(wqe),f&&t(Mi),w(SA),f&&t(Aqe),f&&t(Ao),w(RA),w(IA),w(kh),w(Sh),w(qA),f&&t(yqe),f&&t(Ei),w(NA),f&&t(Lqe),f&&t(yo),w(jA),w(OA),w(Kh),w(Zh),w(VA),f&&t(xqe),f&&t(wi),w(XA),f&&t($qe),f&&t(Lo),w(zA),w(QA),w(rp),w(HA),w(Uu),f&&t(kqe),f&&t(Li),w(UA),f&&t(Sqe),f&&t(xo),w(JA),w(KA),w(Yu),w(ZA),w(G_),f&&t(Rqe),f&&t(ki),w(ey),f&&t(Pqe),f&&t($o),w(oy),w(ty),w(V_),w(ay),w(y0),f&&t(Bqe),f&&t(Pi),w(ny),f&&t(Iqe),f&&t(ko),w(sy),w(iy),w(x0),w(dy),w(m1),f&&t(qqe),f&&t(qi),w(cy),f&&t(Nqe),f&&t(So),w(fy),w(gy),w(h1),w(hy),w(S1),f&&t(jqe),f&&t(Di),w(py),f&&t(Dqe),f&&t(Ro),w(uy),w(by),w(P1),w(vy),w(xb),f&&t(Gqe),f&&t(Vi),w(Fy),f&&t(Oqe),f&&t(Po),w(Ty),w(Ey),w(kb),w(Cy),w(i2),f&&t(Vqe),f&&t(Wi),w(wy),f&&t(Xqe),f&&t(Bo),w(Ay),w(Ly),w(c2),w(xy),w(_2),f&&t(zqe),f&&t(Ui),w($y),f&&t(Wqe),f&&t(Io),w(ky),w(Ry),w(v2),w(Py),w(ov),f&&t(Qqe),f&&t(Ki),w(By),f&&t(Hqe),f&&t(qo),w(Iy),w(Ny),w(tv),w(jy),w(zv),f&&t(Uqe),f&&t(od),w(Dy),f&&t(Jqe),f&&t(No),w(Gy),w(Vy),w(Qv),w(Xy),w(Jv),f&&t(Yqe),f&&t(ad),w(zy),f&&t(Kqe),f&&t(jo),w(Wy),w(Hy),w(Kv),w(Uy),w(fF),f&&t(Zqe),f&&t(ld),w(Jy),f&&t(eNe),f&&t(Do),w(Yy),w(Zy),w(gF),w(eL),w(uF),f&&t(oNe),f&&t(cd),w(oL),f&&t(rNe),f&&t(Go),w(rL),w(aL),w(bF),w(nL),w(xF),f&&t(tNe),f&&t(gd),w(sL),f&&t(aNe),f&&t(Oo),w(lL),w(dL),w(kF),w(cL),w(NF),f&&t(nNe),f&&t(ud),w(fL),f&&t(sNe),f&&t(Vo),w(mL),w(hL),w(DF),w(pL),w(YF),f&&t(lNe),f&&t(vd),w(uL),f&&t(iNe),f&&t(Xo),w(_L),w(vL),w(ZF),w(FL),w(t6),f&&t(dNe),f&&t(Md),w(ML),f&&t(cNe),f&&t(zo),w(EL),w(wL),w(n6),w(AL),w(m6),f&&t(fNe),f&&t(wd),w(yL),f&&t(mNe),f&&t(Wo),w(LL),w($L),w(h6),w(kL),w(v6),f&&t(gNe),f&&t(xd),w(SL),f&&t(hNe),f&&t(Qo),w(RL),w(BL),w(T6),w(IL),w(w6),f&&t(pNe),f&&t(Sd),w(NL),f&&t(uNe),f&&t(Ho),w(jL),w(GL),w(y6),w(OL),w($6),f&&t(_Ne),f&&t(Bd),w(VL),f&&t(bNe),f&&t(Uo),w(XL),w(WL),w(S6),w(QL),w(N6),f&&t(vNe),f&&t(Nd),w(HL),f&&t(FNe),f&&t(Jo),w(UL),w(YL),w(D6),w(KL),w(V6),f&&t(TNe),f&&t(Gd),w(ZL),f&&t(MNe),f&&t(Yo),w(e8),w(r8),w(z6),w(t8),w(qT),f&&t(ENe),f&&t(Xd),w(a8),f&&t(CNe),f&&t(Ko),w(n8),w(l8),w(jT),w(i8),w(d7),f&&t(wNe),f&&t(Qd),w(d8),f&&t(ANe),f&&t(Zo),w(c8),w(m8),w(f7),w(g8),w(C7),f&&t(yNe),f&&t(Jd),w(h8),f&&t(LNe),f&&t(er),w(p8),w(_8),w(A7),w(b8),w(k7),f&&t(xNe),f&&t(Zd),w(v8),f&&t($Ne),f&&t(or),w(F8),w(M8),w(R7),w(E8),w(eM),f&&t(kNe),f&&t(rc),w(C8),f&&t(SNe),f&&t(rr),w(w8),w(y8),w(rM),w(L8),w(gM),f&&t(RNe),f&&t(nc),w(x8),f&&t(PNe),f&&t(tr),w($8),w(S8),w(pM),w(R8),w(OM),f&&t(BNe),f&&t(ic),w(P8),f&&t(INe),f&&t(ar),w(B8),w(q8),w(XM),w(N8),w(i4),f&&t(qNe),f&&t(fc),w(j8),f&&t(NNe),f&&t(nr),w(D8),w(O8),w(c4),w(V8),w(g4),f&&t(jNe),f&&t(hc),w(z8),f&&t(DNe),f&&t(sr),w(W8),w(H8),w(p4),w(U8),w(_4),f&&t(GNe),f&&t(_c),w(J8),f&&t(ONe),f&&t(lr),w(Y8),w(Z8),w(v4),w(e9),w(D4),f&&t(VNe),f&&t(Fc),w(o9),f&&t(XNe),f&&t(ir),w(r9),w(a9),w(O4),w(n9),w(dE),f&&t(zNe),f&&t(Ec),w(s9),f&&t(WNe),f&&t(dr),w(l9),w(d9),w(fE),w(c9),w(gE),f&&t(QNe),f&&t(Ac),w(f9),f&&t(HNe),f&&t(cr),w(m9),w(h9),w(pE),w(p9),w(_E),f&&t(UNe),f&&t(xc),w(u9),f&&t(JNe),f&&t(fr),w(_9),w(v9),w(vE),w(F9),w(zE),f&&t(YNe),f&&t(Sc),w(T9),f&&t(KNe),f&&t(mr),w(M9),w(C9),w(QE),w(w9),w(tC),f&&t(ZNe),f&&t(Bc),w(A9),f&&t(eje),f&&t(gr),w(y9),w(x9),w(nC),w($9),w(bC),f&&t(oje),f&&t(Nc),w(k9),f&&t(rje),f&&t(hr),w(S9),w(P9),w(FC),w(B9),w(kC),f&&t(tje),f&&t(Gc),w(I9),f&&t(aje),f&&t(pr),w(q9),w(j9),w(RC),w(D9),w(VC),f&&t(nje),f&&t(Xc),w(G9),f&&t(sje),f&&t(ur),w(O9),w(X9),w(zC),w(z9),w(r5),f&&t(lje),f&&t(Qc),w(W9),f&&t(ije),f&&t(_r),w(Q9),w(U9),w(a5),w(J9),w(p5),f&&t(dje),f&&t(Jc),w(Y9),f&&t(cje),f&&t(br),w(K9),w(ex),w(_5),w(ox),w(A5),f&&t(fje),f&&t(Zc),w(rx),f&&t(mje),f&&t(vr),w(tx),w(nx),w(L5),w(sx),w(q5),f&&t(gje),f&&t(rf),w(lx),f&&t(hje),f&&t(Fr),w(ix),w(cx),w(j5),w(fx),w(G5),f&&t(pje),f&&t(nf),w(mx),f&&t(uje),f&&t(Tr),w(gx),w(px),w(V5),w(ux),w(W5),f&&t(_je),f&&t(df),w(bx),f&&t(bje),f&&t(Mr),w(vx),w(Tx),w(H5),w(Mx),w(J5)}}}const b$t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function v$t(L){return v9t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class A$t extends p9t{constructor(g){super();u9t(this,g,v$t,_$t,_9t,{})}}export{A$t as default,b$t as metadata};
