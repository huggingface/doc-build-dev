import{S as I8t,i as q8t,s as N8t,e as a,k as l,w as F,t as o,M as j8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as D8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as $Gr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function G8t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,fA,uf,je,We,hi,yn,mA,Ln,xn,gA,pi,$n,hA,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),fA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),mA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),gA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),hA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var R$=s(p);m=r(R$,"NewModelConfig"),R$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var P$=s(fi);pf=r(P$,"model_type"),P$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var B$=s(mi);gi=r(B$,'"new-model"'),B$.forEach(t),fA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),mA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var I$=s(Ln);xn=r(I$,"PreTrainedModel"),I$.forEach(t),gA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),hA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var q$=s(ui);_f=r(q$,"NewModelConfig"),q$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,fA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,mA),e(je,Ln),e(Ln,xn),e(je,gA),e(je,pi),e(pi,$n),e(je,hA),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function O8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,fA,uf,je,We,hi,yn,mA,Ln,xn,gA,pi,$n,hA,ui,_f,Ca,Qe,Ae,R$,_i,P$,B$,Eo,wa,I$,bf,q$,pGe,aqe,bi,vf,Iee,pA,uGe,qee,_Ge,nqe,kn,bGe,Nee,vGe,FGe,jee,TGe,MGe,sqe,uA,lqe,N$,EGe,iqe,Ff,dqe,vi,Tf,Dee,_A,CGe,Gee,wGe,cqe,Co,bA,AGe,vA,yGe,j$,LGe,xGe,$Ge,FA,kGe,Oee,SGe,RGe,PGe,Er,TA,BGe,Vee,IGe,qGe,Fi,NGe,Xee,jGe,DGe,zee,GGe,OGe,VGe,A,Mf,Wee,XGe,zGe,D$,WGe,QGe,HGe,Ef,Qee,UGe,JGe,G$,YGe,KGe,ZGe,Cf,Hee,eOe,oOe,O$,rOe,tOe,aOe,wf,Uee,nOe,sOe,V$,lOe,iOe,dOe,Af,Jee,cOe,fOe,X$,mOe,gOe,hOe,yf,Yee,pOe,uOe,z$,_Oe,bOe,vOe,Lf,Kee,FOe,TOe,W$,MOe,EOe,COe,xf,Zee,wOe,AOe,Q$,yOe,LOe,xOe,$f,eoe,$Oe,kOe,H$,SOe,ROe,POe,kf,ooe,BOe,IOe,U$,qOe,NOe,jOe,Sf,roe,DOe,GOe,J$,OOe,VOe,XOe,Rf,toe,zOe,WOe,Y$,QOe,HOe,UOe,Pf,aoe,JOe,YOe,K$,KOe,ZOe,eVe,Bf,noe,oVe,rVe,Z$,tVe,aVe,nVe,If,soe,sVe,lVe,ek,iVe,dVe,cVe,qf,loe,fVe,mVe,ok,gVe,hVe,pVe,Nf,ioe,uVe,_Ve,rk,bVe,vVe,FVe,jf,doe,TVe,MVe,tk,EVe,CVe,wVe,Df,coe,AVe,yVe,ak,LVe,xVe,$Ve,Gf,foe,kVe,SVe,nk,RVe,PVe,BVe,Of,moe,IVe,qVe,sk,NVe,jVe,DVe,Vf,goe,GVe,OVe,lk,VVe,XVe,zVe,Xf,hoe,WVe,QVe,ik,HVe,UVe,JVe,zf,poe,YVe,KVe,dk,ZVe,eXe,oXe,Wf,uoe,rXe,tXe,ck,aXe,nXe,sXe,Qf,_oe,lXe,iXe,fk,dXe,cXe,fXe,Hf,boe,mXe,gXe,mk,hXe,pXe,uXe,Uf,voe,_Xe,bXe,gk,vXe,FXe,TXe,Jf,Foe,MXe,EXe,hk,CXe,wXe,AXe,Yf,Toe,yXe,LXe,pk,xXe,$Xe,kXe,Kf,Moe,SXe,RXe,uk,PXe,BXe,IXe,Zf,Eoe,qXe,NXe,_k,jXe,DXe,GXe,em,Coe,OXe,VXe,bk,XXe,zXe,WXe,om,woe,QXe,HXe,vk,UXe,JXe,YXe,rm,Aoe,KXe,ZXe,Fk,eze,oze,rze,tm,yoe,tze,aze,Tk,nze,sze,lze,am,Loe,ize,dze,Mk,cze,fze,mze,nm,xoe,gze,hze,Ek,pze,uze,_ze,sm,$oe,bze,vze,Ck,Fze,Tze,Mze,lm,koe,Eze,Cze,wk,wze,Aze,yze,im,Soe,Lze,xze,Ak,$ze,kze,Sze,dm,Roe,Rze,Pze,yk,Bze,Ize,qze,cm,Poe,Nze,jze,Lk,Dze,Gze,Oze,fm,Boe,Vze,Xze,xk,zze,Wze,Qze,mm,Ioe,Hze,Uze,$k,Jze,Yze,Kze,gm,qoe,Zze,eWe,kk,oWe,rWe,tWe,hm,Noe,aWe,nWe,Sk,sWe,lWe,iWe,pm,joe,dWe,cWe,Rk,fWe,mWe,gWe,um,Doe,hWe,pWe,Pk,uWe,_We,bWe,_m,Goe,vWe,FWe,Bk,TWe,MWe,EWe,bm,Ooe,CWe,wWe,Ik,AWe,yWe,LWe,vm,Voe,xWe,$We,qk,kWe,SWe,RWe,Fm,Xoe,PWe,BWe,Nk,IWe,qWe,NWe,Tm,zoe,jWe,DWe,jk,GWe,OWe,VWe,Mm,Woe,XWe,zWe,Dk,WWe,QWe,HWe,Em,Qoe,UWe,JWe,Gk,YWe,KWe,ZWe,Cm,Hoe,eQe,oQe,Ok,rQe,tQe,aQe,wm,Uoe,nQe,sQe,Vk,lQe,iQe,dQe,Am,Joe,cQe,fQe,Xk,mQe,gQe,hQe,ym,Yoe,pQe,uQe,zk,_Qe,bQe,vQe,Lm,Koe,FQe,TQe,Wk,MQe,EQe,CQe,xm,Zoe,wQe,AQe,Qk,yQe,LQe,xQe,$m,ere,$Qe,kQe,Hk,SQe,RQe,PQe,km,ore,BQe,IQe,Uk,qQe,NQe,jQe,Sm,rre,DQe,GQe,Jk,OQe,VQe,XQe,Rm,tre,zQe,WQe,Yk,QQe,HQe,UQe,Pm,are,JQe,YQe,Kk,KQe,ZQe,eHe,Bm,nre,oHe,rHe,Zk,tHe,aHe,nHe,Im,sre,sHe,lHe,eS,iHe,dHe,cHe,qm,lre,fHe,mHe,oS,gHe,hHe,pHe,Nm,ire,uHe,_He,rS,bHe,vHe,FHe,jm,dre,THe,MHe,tS,EHe,CHe,wHe,Dm,cre,AHe,yHe,aS,LHe,xHe,$He,Gm,fre,kHe,SHe,nS,RHe,PHe,BHe,Om,mre,IHe,qHe,sS,NHe,jHe,DHe,Vm,gre,GHe,OHe,lS,VHe,XHe,zHe,Xm,hre,WHe,QHe,iS,HHe,UHe,JHe,zm,pre,YHe,KHe,dS,ZHe,eUe,oUe,Wm,ure,rUe,tUe,cS,aUe,nUe,sUe,Qm,_re,lUe,iUe,fS,dUe,cUe,fUe,Hm,bre,mUe,gUe,mS,hUe,pUe,uUe,Um,vre,_Ue,bUe,gS,vUe,FUe,TUe,Jm,Fre,MUe,EUe,hS,CUe,wUe,AUe,Ym,Tre,yUe,LUe,pS,xUe,$Ue,kUe,Km,Mre,SUe,RUe,uS,PUe,BUe,IUe,Zm,Ere,qUe,NUe,_S,jUe,DUe,GUe,eg,Cre,OUe,VUe,bS,XUe,zUe,WUe,og,wre,QUe,HUe,vS,UUe,JUe,YUe,rg,Are,KUe,ZUe,FS,eJe,oJe,rJe,tg,yre,tJe,aJe,TS,nJe,sJe,lJe,ag,Lre,iJe,dJe,MS,cJe,fJe,mJe,ng,xre,gJe,hJe,ES,pJe,uJe,_Je,sg,$re,bJe,vJe,CS,FJe,TJe,MJe,lg,kre,EJe,CJe,wS,wJe,AJe,yJe,ig,Sre,LJe,xJe,AS,$Je,kJe,SJe,dg,Rre,RJe,PJe,yS,BJe,IJe,qJe,cg,Pre,NJe,jJe,LS,DJe,GJe,OJe,fg,Bre,VJe,XJe,xS,zJe,WJe,QJe,mg,Ire,HJe,UJe,$S,JJe,YJe,KJe,gg,qre,ZJe,eYe,kS,oYe,rYe,tYe,hg,Nre,aYe,nYe,SS,sYe,lYe,iYe,pg,jre,dYe,cYe,RS,fYe,mYe,gYe,ug,Dre,hYe,pYe,PS,uYe,_Ye,bYe,_g,Gre,vYe,FYe,BS,TYe,MYe,EYe,bg,Ore,CYe,wYe,IS,AYe,yYe,LYe,vg,Vre,xYe,$Ye,qS,kYe,SYe,RYe,Fg,PYe,Tg,MA,BYe,Xre,IYe,fqe,Ti,Mg,zre,EA,qYe,Wre,NYe,mqe,wo,CA,jYe,wA,DYe,NS,GYe,OYe,VYe,AA,XYe,Qre,zYe,WYe,QYe,Cr,yA,HYe,Hre,UYe,JYe,Aa,YYe,Ure,KYe,ZYe,Jre,eKe,oKe,Yre,rKe,tKe,aKe,k,Sn,Kre,nKe,sKe,jS,lKe,iKe,DS,dKe,cKe,fKe,Rn,Zre,mKe,gKe,GS,hKe,pKe,OS,uKe,_Ke,bKe,Pn,ete,vKe,FKe,VS,TKe,MKe,XS,EKe,CKe,wKe,Eg,ote,AKe,yKe,zS,LKe,xKe,$Ke,Bn,rte,kKe,SKe,WS,RKe,PKe,QS,BKe,IKe,qKe,Cg,tte,NKe,jKe,HS,DKe,GKe,OKe,wg,ate,VKe,XKe,US,zKe,WKe,QKe,Ag,nte,HKe,UKe,JS,JKe,YKe,KKe,In,ste,ZKe,eZe,YS,oZe,rZe,KS,tZe,aZe,nZe,qn,lte,sZe,lZe,ZS,iZe,dZe,eR,cZe,fZe,mZe,Nn,ite,gZe,hZe,oR,pZe,uZe,rR,_Ze,bZe,vZe,yg,dte,FZe,TZe,tR,MZe,EZe,CZe,Lg,cte,wZe,AZe,aR,yZe,LZe,xZe,jn,fte,$Ze,kZe,nR,SZe,RZe,sR,PZe,BZe,IZe,xg,mte,qZe,NZe,lR,jZe,DZe,GZe,Dn,gte,OZe,VZe,iR,XZe,zZe,dR,WZe,QZe,HZe,Gn,hte,UZe,JZe,cR,YZe,KZe,fR,ZZe,eeo,oeo,On,pte,reo,teo,mR,aeo,neo,gR,seo,leo,ieo,$g,ute,deo,ceo,hR,feo,meo,geo,Vn,_te,heo,peo,pR,ueo,_eo,uR,beo,veo,Feo,Xn,bte,Teo,Meo,_R,Eeo,Ceo,bR,weo,Aeo,yeo,zn,vte,Leo,xeo,vR,$eo,keo,FR,Seo,Reo,Peo,Wn,Fte,Beo,Ieo,TR,qeo,Neo,MR,jeo,Deo,Geo,Qn,Tte,Oeo,Veo,ER,Xeo,zeo,CR,Weo,Qeo,Heo,Hn,Mte,Ueo,Jeo,wR,Yeo,Keo,AR,Zeo,eoo,ooo,kg,Ete,roo,too,yR,aoo,noo,soo,Un,Cte,loo,ioo,LR,doo,coo,xR,foo,moo,goo,Sg,wte,hoo,poo,$R,uoo,_oo,boo,Jn,Ate,voo,Foo,kR,Too,Moo,SR,Eoo,Coo,woo,Yn,yte,Aoo,yoo,RR,Loo,xoo,PR,$oo,koo,Soo,Kn,Lte,Roo,Poo,BR,Boo,Ioo,IR,qoo,Noo,joo,Zn,xte,Doo,Goo,qR,Ooo,Voo,NR,Xoo,zoo,Woo,es,$te,Qoo,Hoo,jR,Uoo,Joo,DR,Yoo,Koo,Zoo,Rg,kte,ero,oro,GR,rro,tro,aro,os,Ste,nro,sro,OR,lro,iro,VR,dro,cro,fro,rs,Rte,mro,gro,XR,hro,pro,zR,uro,_ro,bro,ts,Pte,vro,Fro,WR,Tro,Mro,QR,Ero,Cro,wro,as,Bte,Aro,yro,HR,Lro,xro,UR,$ro,kro,Sro,ns,Ite,Rro,Pro,JR,Bro,Iro,YR,qro,Nro,jro,ss,qte,Dro,Gro,KR,Oro,Vro,ZR,Xro,zro,Wro,ls,Nte,Qro,Hro,eP,Uro,Jro,oP,Yro,Kro,Zro,Pg,jte,eto,oto,rP,rto,tto,ato,is,Dte,nto,sto,tP,lto,ito,aP,dto,cto,fto,Bg,Gte,mto,gto,nP,hto,pto,uto,Ig,Ote,_to,bto,sP,vto,Fto,Tto,ds,Vte,Mto,Eto,lP,Cto,wto,iP,Ato,yto,Lto,cs,Xte,xto,$to,dP,kto,Sto,cP,Rto,Pto,Bto,fs,zte,Ito,qto,fP,Nto,jto,mP,Dto,Gto,Oto,qg,Wte,Vto,Xto,gP,zto,Wto,Qto,ms,Qte,Hto,Uto,hP,Jto,Yto,pP,Kto,Zto,eao,gs,Hte,oao,rao,uP,tao,aao,_P,nao,sao,lao,hs,Ute,iao,dao,bP,cao,fao,vP,mao,gao,hao,ps,Jte,pao,uao,FP,_ao,bao,TP,vao,Fao,Tao,us,Yte,Mao,Eao,MP,Cao,wao,EP,Aao,yao,Lao,Ng,Kte,xao,$ao,CP,kao,Sao,Rao,_s,Zte,Pao,Bao,wP,Iao,qao,AP,Nao,jao,Dao,jg,eae,Gao,Oao,yP,Vao,Xao,zao,Dg,oae,Wao,Qao,LP,Hao,Uao,Jao,Gg,rae,Yao,Kao,xP,Zao,eno,ono,Og,tae,rno,tno,$P,ano,nno,sno,bs,aae,lno,ino,kP,dno,cno,SP,fno,mno,gno,Vg,nae,hno,pno,RP,uno,_no,bno,vs,sae,vno,Fno,PP,Tno,Mno,BP,Eno,Cno,wno,Fs,lae,Ano,yno,IP,Lno,xno,qP,$no,kno,Sno,Ts,iae,Rno,Pno,NP,Bno,Ino,jP,qno,Nno,jno,Ms,dae,Dno,Gno,DP,Ono,Vno,GP,Xno,zno,Wno,Es,cae,Qno,Hno,OP,Uno,Jno,VP,Yno,Kno,Zno,Cs,fae,eso,oso,XP,rso,tso,zP,aso,nso,sso,Xg,mae,lso,iso,WP,dso,cso,fso,zg,gae,mso,gso,QP,hso,pso,uso,ws,hae,_so,bso,HP,vso,Fso,UP,Tso,Mso,Eso,As,pae,Cso,wso,JP,Aso,yso,YP,Lso,xso,$so,ys,uae,kso,Sso,KP,Rso,Pso,ZP,Bso,Iso,qso,Wg,_ae,Nso,jso,eB,Dso,Gso,Oso,Qg,bae,Vso,Xso,oB,zso,Wso,Qso,Hg,vae,Hso,Uso,rB,Jso,Yso,Kso,Ls,Fae,Zso,elo,tB,olo,rlo,aB,tlo,alo,nlo,Ug,Tae,slo,llo,nB,ilo,dlo,clo,Jg,Mae,flo,mlo,sB,glo,hlo,plo,Yg,Eae,ulo,_lo,lB,blo,vlo,Flo,xs,Cae,Tlo,Mlo,iB,Elo,Clo,dB,wlo,Alo,ylo,Kg,wae,Llo,xlo,cB,$lo,klo,Slo,Zg,Aae,Rlo,Plo,fB,Blo,Ilo,qlo,$s,yae,Nlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,ks,Lae,zlo,Wlo,hB,Qlo,Hlo,pB,Ulo,Jlo,Ylo,Ss,xae,Klo,Zlo,uB,eio,oio,_B,rio,tio,aio,Rs,$ae,nio,sio,bB,lio,iio,vB,dio,cio,fio,eh,mio,oh,LA,gio,kae,hio,gqe,Mi,rh,Sae,xA,pio,Rae,uio,hqe,Ao,$A,_io,kA,bio,FB,vio,Fio,Tio,SA,Mio,Pae,Eio,Cio,wio,He,RA,Aio,Bae,yio,Lio,ya,xio,Iae,$io,kio,qae,Sio,Rio,Nae,Pio,Bio,Iio,Z,th,jae,qio,Nio,TB,jio,Dio,Gio,ah,Dae,Oio,Vio,MB,Xio,zio,Wio,nh,Gae,Qio,Hio,EB,Uio,Jio,Yio,sh,Oae,Kio,Zio,CB,edo,odo,rdo,lh,Vae,tdo,ado,wB,ndo,sdo,ldo,ih,Xae,ido,ddo,AB,cdo,fdo,mdo,dh,zae,gdo,hdo,yB,pdo,udo,_do,ch,Wae,bdo,vdo,LB,Fdo,Tdo,Mdo,fh,Qae,Edo,Cdo,xB,wdo,Ado,ydo,mh,Hae,Ldo,xdo,$B,$do,kdo,Sdo,gh,Uae,Rdo,Pdo,kB,Bdo,Ido,qdo,hh,Jae,Ndo,jdo,SB,Ddo,Gdo,Odo,ph,Yae,Vdo,Xdo,RB,zdo,Wdo,Qdo,uh,Kae,Hdo,Udo,PB,Jdo,Ydo,Kdo,_h,Zae,Zdo,eco,BB,oco,rco,tco,bh,ene,aco,nco,IB,sco,lco,ico,vh,one,dco,cco,qB,fco,mco,gco,Fh,rne,hco,pco,NB,uco,_co,bco,Th,tne,vco,Fco,jB,Tco,Mco,Eco,Mh,ane,Cco,wco,DB,Aco,yco,Lco,Eh,nne,xco,$co,GB,kco,Sco,Rco,Ch,sne,Pco,Bco,OB,Ico,qco,Nco,wh,lne,jco,Dco,VB,Gco,Oco,Vco,Ah,ine,Xco,zco,XB,Wco,Qco,Hco,yh,dne,Uco,Jco,zB,Yco,Kco,Zco,Lh,cne,efo,ofo,WB,rfo,tfo,afo,xh,fne,nfo,sfo,QB,lfo,ifo,dfo,$h,cfo,kh,ffo,Sh,PA,mfo,mne,gfo,pqe,Ei,Rh,gne,BA,hfo,hne,pfo,uqe,yo,IA,ufo,qA,_fo,HB,bfo,vfo,Ffo,NA,Tfo,pne,Mfo,Efo,Cfo,Ue,jA,wfo,une,Afo,yfo,Ci,Lfo,_ne,xfo,$fo,bne,kfo,Sfo,Rfo,he,Ph,vne,Pfo,Bfo,UB,Ifo,qfo,Nfo,Bh,Fne,jfo,Dfo,Tne,Gfo,Ofo,Vfo,Ih,Mne,Xfo,zfo,JB,Wfo,Qfo,Hfo,qh,Ene,Ufo,Jfo,YB,Yfo,Kfo,Zfo,Nh,Cne,emo,omo,KB,rmo,tmo,amo,jh,wne,nmo,smo,ZB,lmo,imo,dmo,Dh,Ane,cmo,fmo,eI,mmo,gmo,hmo,Gh,yne,pmo,umo,oI,_mo,bmo,vmo,Oh,Lne,Fmo,Tmo,rI,Mmo,Emo,Cmo,Vh,xne,wmo,Amo,tI,ymo,Lmo,xmo,Xh,$ne,$mo,kmo,aI,Smo,Rmo,Pmo,zh,kne,Bmo,Imo,nI,qmo,Nmo,jmo,Wh,Sne,Dmo,Gmo,sI,Omo,Vmo,Xmo,Qh,Rne,zmo,Wmo,lI,Qmo,Hmo,Umo,Hh,Pne,Jmo,Ymo,iI,Kmo,Zmo,ego,Uh,Bne,ogo,rgo,dI,tgo,ago,ngo,Jh,Ine,sgo,lgo,cI,igo,dgo,cgo,Yh,fgo,Kh,mgo,Zh,DA,ggo,qne,hgo,_qe,wi,ep,Nne,GA,pgo,jne,ugo,bqe,Lo,OA,_go,Ai,bgo,fI,vgo,Fgo,mI,Tgo,Mgo,Ego,VA,Cgo,Dne,wgo,Ago,ygo,tt,XA,Lgo,Gne,xgo,$go,yi,kgo,One,Sgo,Rgo,gI,Pgo,Bgo,Igo,op,qgo,Je,zA,Ngo,Vne,jgo,Dgo,La,Ggo,Xne,Ogo,Vgo,zne,Xgo,zgo,Wne,Wgo,Qgo,Hgo,x,rp,Qne,Ugo,Jgo,hI,Ygo,Kgo,Zgo,tp,Hne,eho,oho,pI,rho,tho,aho,ap,Une,nho,sho,uI,lho,iho,dho,np,Jne,cho,fho,_I,mho,gho,hho,sp,Yne,pho,uho,bI,_ho,bho,vho,lp,Kne,Fho,Tho,vI,Mho,Eho,Cho,ip,Zne,who,Aho,FI,yho,Lho,xho,dp,ese,$ho,kho,TI,Sho,Rho,Pho,cp,ose,Bho,Iho,MI,qho,Nho,jho,fp,rse,Dho,Gho,EI,Oho,Vho,Xho,mp,tse,zho,Who,CI,Qho,Hho,Uho,gp,ase,Jho,Yho,wI,Kho,Zho,epo,hp,nse,opo,rpo,AI,tpo,apo,npo,pp,sse,spo,lpo,yI,ipo,dpo,cpo,up,lse,fpo,mpo,LI,gpo,hpo,ppo,_p,ise,upo,_po,xI,bpo,vpo,Fpo,bp,dse,Tpo,Mpo,$I,Epo,Cpo,wpo,vp,cse,Apo,ypo,kI,Lpo,xpo,$po,Fp,fse,kpo,Spo,SI,Rpo,Ppo,Bpo,Tp,mse,Ipo,qpo,RI,Npo,jpo,Dpo,Mp,gse,Gpo,Opo,PI,Vpo,Xpo,zpo,Ep,hse,Wpo,Qpo,BI,Hpo,Upo,Jpo,Cp,pse,Ypo,Kpo,II,Zpo,euo,ouo,wp,use,ruo,tuo,qI,auo,nuo,suo,Ap,_se,luo,iuo,NI,duo,cuo,fuo,yp,bse,muo,guo,jI,huo,puo,uuo,Lp,vse,_uo,buo,DI,vuo,Fuo,Tuo,xp,Fse,Muo,Euo,GI,Cuo,wuo,Auo,$p,Tse,yuo,Luo,OI,xuo,$uo,kuo,kp,Mse,Suo,Ruo,VI,Puo,Buo,Iuo,Sp,Ese,quo,Nuo,XI,juo,Duo,Guo,Ps,Cse,Ouo,Vuo,zI,Xuo,zuo,WI,Wuo,Quo,Huo,Rp,wse,Uuo,Juo,QI,Yuo,Kuo,Zuo,Pp,Ase,e_o,o_o,HI,r_o,t_o,a_o,Bp,yse,n_o,s_o,UI,l_o,i_o,d_o,Ip,Lse,c_o,f_o,JI,m_o,g_o,h_o,qp,xse,p_o,u_o,YI,__o,b_o,v_o,Np,$se,F_o,T_o,KI,M_o,E_o,C_o,jp,kse,w_o,A_o,ZI,y_o,L_o,x_o,Dp,Sse,$_o,k_o,eq,S_o,R_o,P_o,Gp,Rse,B_o,I_o,oq,q_o,N_o,j_o,Op,Pse,D_o,G_o,rq,O_o,V_o,X_o,Vp,Bse,z_o,W_o,tq,Q_o,H_o,U_o,Xp,Ise,J_o,Y_o,aq,K_o,Z_o,e0o,zp,qse,o0o,r0o,nq,t0o,a0o,n0o,Wp,Nse,s0o,l0o,sq,i0o,d0o,c0o,Qp,jse,f0o,m0o,lq,g0o,h0o,p0o,Hp,Dse,u0o,_0o,iq,b0o,v0o,F0o,Up,Gse,T0o,M0o,dq,E0o,C0o,w0o,Jp,Ose,A0o,y0o,cq,L0o,x0o,$0o,Yp,Vse,k0o,S0o,fq,R0o,P0o,B0o,Kp,Xse,I0o,q0o,mq,N0o,j0o,D0o,Zp,zse,G0o,O0o,gq,V0o,X0o,z0o,eu,Wse,W0o,Q0o,hq,H0o,U0o,J0o,ou,Qse,Y0o,K0o,pq,Z0o,e1o,o1o,ru,Hse,r1o,t1o,uq,a1o,n1o,s1o,tu,Use,l1o,i1o,_q,d1o,c1o,f1o,au,Jse,m1o,g1o,bq,h1o,p1o,u1o,nu,Yse,_1o,b1o,vq,v1o,F1o,T1o,su,Kse,M1o,E1o,Fq,C1o,w1o,A1o,lu,Zse,y1o,L1o,Tq,x1o,$1o,k1o,iu,ele,S1o,R1o,Mq,P1o,B1o,I1o,du,ole,q1o,N1o,Eq,j1o,D1o,G1o,cu,rle,O1o,V1o,Cq,X1o,z1o,W1o,fu,tle,Q1o,H1o,wq,U1o,J1o,Y1o,mu,ale,K1o,Z1o,Aq,ebo,obo,rbo,gu,nle,tbo,abo,yq,nbo,sbo,lbo,hu,sle,ibo,dbo,Lq,cbo,fbo,mbo,pu,lle,gbo,hbo,xq,pbo,ubo,_bo,uu,ile,bbo,vbo,$q,Fbo,Tbo,Mbo,_u,dle,Ebo,Cbo,kq,wbo,Abo,ybo,bu,cle,Lbo,xbo,Sq,$bo,kbo,Sbo,vu,fle,Rbo,Pbo,Rq,Bbo,Ibo,qbo,Fu,mle,Nbo,jbo,Pq,Dbo,Gbo,Obo,Tu,gle,Vbo,Xbo,Bq,zbo,Wbo,Qbo,Mu,hle,Hbo,Ubo,Iq,Jbo,Ybo,Kbo,Eu,ple,Zbo,e2o,qq,o2o,r2o,t2o,Cu,ule,a2o,n2o,Nq,s2o,l2o,i2o,wu,_le,d2o,c2o,jq,f2o,m2o,g2o,Au,ble,h2o,p2o,Dq,u2o,_2o,b2o,yu,vle,v2o,F2o,Gq,T2o,M2o,E2o,Lu,Fle,C2o,w2o,Oq,A2o,y2o,L2o,xu,Tle,x2o,$2o,Vq,k2o,S2o,R2o,$u,Mle,P2o,B2o,Xq,I2o,q2o,N2o,ku,Ele,j2o,D2o,zq,G2o,O2o,V2o,Su,Cle,X2o,z2o,Wq,W2o,Q2o,H2o,Ru,wle,U2o,J2o,Qq,Y2o,K2o,Z2o,Pu,Ale,evo,ovo,Hq,rvo,tvo,avo,Bu,yle,nvo,svo,Uq,lvo,ivo,dvo,Iu,Lle,cvo,fvo,Jq,mvo,gvo,hvo,qu,xle,pvo,uvo,Yq,_vo,bvo,vvo,Nu,$le,Fvo,Tvo,Kq,Mvo,Evo,Cvo,ju,kle,wvo,Avo,Zq,yvo,Lvo,xvo,Du,Sle,$vo,kvo,eN,Svo,Rvo,Pvo,Gu,Rle,Bvo,Ivo,oN,qvo,Nvo,jvo,Ou,Ple,Dvo,Gvo,rN,Ovo,Vvo,Xvo,Vu,Ble,zvo,Wvo,tN,Qvo,Hvo,Uvo,Xu,Ile,Jvo,Yvo,aN,Kvo,Zvo,eFo,zu,qle,oFo,rFo,nN,tFo,aFo,nFo,Wu,sFo,Nle,lFo,iFo,jle,dFo,cFo,Qu,vqe,Li,Hu,Dle,WA,fFo,Gle,mFo,Fqe,xo,QA,gFo,xi,hFo,sN,pFo,uFo,lN,_Fo,bFo,vFo,HA,FFo,Ole,TFo,MFo,EFo,at,UA,CFo,Vle,wFo,AFo,$i,yFo,Xle,LFo,xFo,iN,$Fo,kFo,SFo,Uu,RFo,Ye,JA,PFo,zle,BFo,IFo,xa,qFo,Wle,NFo,jFo,Qle,DFo,GFo,Hle,OFo,VFo,XFo,G,Ju,Ule,zFo,WFo,dN,QFo,HFo,UFo,Yu,Jle,JFo,YFo,cN,KFo,ZFo,e6o,Ku,Yle,o6o,r6o,fN,t6o,a6o,n6o,Zu,Kle,s6o,l6o,mN,i6o,d6o,c6o,e_,Zle,f6o,m6o,gN,g6o,h6o,p6o,o_,eie,u6o,_6o,hN,b6o,v6o,F6o,r_,oie,T6o,M6o,pN,E6o,C6o,w6o,t_,rie,A6o,y6o,uN,L6o,x6o,$6o,a_,tie,k6o,S6o,_N,R6o,P6o,B6o,n_,aie,I6o,q6o,bN,N6o,j6o,D6o,s_,nie,G6o,O6o,vN,V6o,X6o,z6o,l_,sie,W6o,Q6o,FN,H6o,U6o,J6o,i_,lie,Y6o,K6o,TN,Z6o,eTo,oTo,d_,iie,rTo,tTo,MN,aTo,nTo,sTo,c_,die,lTo,iTo,EN,dTo,cTo,fTo,f_,cie,mTo,gTo,CN,hTo,pTo,uTo,m_,fie,_To,bTo,wN,vTo,FTo,TTo,g_,mie,MTo,ETo,AN,CTo,wTo,ATo,h_,gie,yTo,LTo,yN,xTo,$To,kTo,p_,hie,STo,RTo,LN,PTo,BTo,ITo,u_,pie,qTo,NTo,xN,jTo,DTo,GTo,__,uie,OTo,VTo,$N,XTo,zTo,WTo,b_,_ie,QTo,HTo,kN,UTo,JTo,YTo,v_,bie,KTo,ZTo,SN,e7o,o7o,r7o,F_,vie,t7o,a7o,RN,n7o,s7o,l7o,T_,Fie,i7o,d7o,PN,c7o,f7o,m7o,M_,Tie,g7o,h7o,BN,p7o,u7o,_7o,E_,Mie,b7o,v7o,IN,F7o,T7o,M7o,C_,Eie,E7o,C7o,qN,w7o,A7o,y7o,w_,Cie,L7o,x7o,NN,$7o,k7o,S7o,A_,wie,R7o,P7o,jN,B7o,I7o,q7o,y_,Aie,N7o,j7o,DN,D7o,G7o,O7o,L_,yie,V7o,X7o,GN,z7o,W7o,Q7o,x_,Lie,H7o,U7o,ON,J7o,Y7o,K7o,$_,xie,Z7o,eMo,VN,oMo,rMo,tMo,k_,$ie,aMo,nMo,XN,sMo,lMo,iMo,S_,kie,dMo,cMo,zN,fMo,mMo,gMo,R_,Sie,hMo,pMo,WN,uMo,_Mo,bMo,P_,Rie,vMo,FMo,QN,TMo,MMo,EMo,B_,Pie,CMo,wMo,HN,AMo,yMo,LMo,I_,Bie,xMo,$Mo,UN,kMo,SMo,RMo,q_,PMo,Iie,BMo,IMo,qie,qMo,NMo,N_,Tqe,ki,j_,Nie,YA,jMo,jie,DMo,Mqe,$o,KA,GMo,Si,OMo,JN,VMo,XMo,YN,zMo,WMo,QMo,ZA,HMo,Die,UMo,JMo,YMo,nt,ey,KMo,Gie,ZMo,e4o,Ri,o4o,Oie,r4o,t4o,KN,a4o,n4o,s4o,D_,l4o,Ke,oy,i4o,Vie,d4o,c4o,$a,f4o,Xie,m4o,g4o,zie,h4o,p4o,Wie,u4o,_4o,b4o,z,G_,Qie,v4o,F4o,ZN,T4o,M4o,E4o,O_,Hie,C4o,w4o,ej,A4o,y4o,L4o,V_,Uie,x4o,$4o,oj,k4o,S4o,R4o,X_,Jie,P4o,B4o,rj,I4o,q4o,N4o,z_,Yie,j4o,D4o,tj,G4o,O4o,V4o,W_,Kie,X4o,z4o,aj,W4o,Q4o,H4o,Q_,Zie,U4o,J4o,nj,Y4o,K4o,Z4o,H_,ede,eEo,oEo,sj,rEo,tEo,aEo,U_,ode,nEo,sEo,lj,lEo,iEo,dEo,J_,rde,cEo,fEo,ij,mEo,gEo,hEo,Y_,tde,pEo,uEo,dj,_Eo,bEo,vEo,K_,ade,FEo,TEo,cj,MEo,EEo,CEo,Z_,nde,wEo,AEo,fj,yEo,LEo,xEo,e0,sde,$Eo,kEo,mj,SEo,REo,PEo,o0,lde,BEo,IEo,gj,qEo,NEo,jEo,r0,ide,DEo,GEo,hj,OEo,VEo,XEo,t0,dde,zEo,WEo,pj,QEo,HEo,UEo,a0,cde,JEo,YEo,uj,KEo,ZEo,eCo,n0,fde,oCo,rCo,_j,tCo,aCo,nCo,s0,mde,sCo,lCo,bj,iCo,dCo,cCo,l0,gde,fCo,mCo,vj,gCo,hCo,pCo,i0,hde,uCo,_Co,Fj,bCo,vCo,FCo,d0,pde,TCo,MCo,Tj,ECo,CCo,wCo,c0,ude,ACo,yCo,Mj,LCo,xCo,$Co,f0,_de,kCo,SCo,Ej,RCo,PCo,BCo,m0,bde,ICo,qCo,Cj,NCo,jCo,DCo,g0,vde,GCo,OCo,wj,VCo,XCo,zCo,h0,Fde,WCo,QCo,Aj,HCo,UCo,JCo,p0,Tde,YCo,KCo,yj,ZCo,e5o,o5o,u0,Mde,r5o,t5o,Lj,a5o,n5o,s5o,_0,Ede,l5o,i5o,xj,d5o,c5o,f5o,b0,Cde,m5o,g5o,$j,h5o,p5o,u5o,v0,wde,_5o,b5o,kj,v5o,F5o,T5o,F0,Ade,M5o,E5o,Sj,C5o,w5o,A5o,T0,yde,y5o,L5o,Rj,x5o,$5o,k5o,M0,Lde,S5o,R5o,Pj,P5o,B5o,I5o,E0,q5o,xde,N5o,j5o,$de,D5o,G5o,C0,Eqe,Pi,w0,kde,ry,O5o,Sde,V5o,Cqe,ko,ty,X5o,Bi,z5o,Bj,W5o,Q5o,Ij,H5o,U5o,J5o,ay,Y5o,Rde,K5o,Z5o,e3o,st,ny,o3o,Pde,r3o,t3o,Ii,a3o,Bde,n3o,s3o,qj,l3o,i3o,d3o,A0,c3o,Ze,sy,f3o,Ide,m3o,g3o,ka,h3o,qde,p3o,u3o,Nde,_3o,b3o,jde,v3o,F3o,T3o,W,y0,Dde,M3o,E3o,Nj,C3o,w3o,A3o,L0,Gde,y3o,L3o,jj,x3o,$3o,k3o,x0,Ode,S3o,R3o,Dj,P3o,B3o,I3o,$0,Vde,q3o,N3o,Gj,j3o,D3o,G3o,k0,Xde,O3o,V3o,Oj,X3o,z3o,W3o,S0,zde,Q3o,H3o,Vj,U3o,J3o,Y3o,R0,Wde,K3o,Z3o,Xj,ewo,owo,rwo,P0,Qde,two,awo,zj,nwo,swo,lwo,B0,Hde,iwo,dwo,Wj,cwo,fwo,mwo,I0,Ude,gwo,hwo,Qj,pwo,uwo,_wo,q0,Jde,bwo,vwo,Hj,Fwo,Two,Mwo,N0,Yde,Ewo,Cwo,Uj,wwo,Awo,ywo,j0,Kde,Lwo,xwo,Jj,$wo,kwo,Swo,D0,Zde,Rwo,Pwo,Yj,Bwo,Iwo,qwo,G0,ece,Nwo,jwo,Kj,Dwo,Gwo,Owo,O0,oce,Vwo,Xwo,Zj,zwo,Wwo,Qwo,V0,rce,Hwo,Uwo,eD,Jwo,Ywo,Kwo,X0,tce,Zwo,eAo,oD,oAo,rAo,tAo,z0,ace,aAo,nAo,rD,sAo,lAo,iAo,W0,nce,dAo,cAo,tD,fAo,mAo,gAo,Q0,sce,hAo,pAo,aD,uAo,_Ao,bAo,H0,lce,vAo,FAo,nD,TAo,MAo,EAo,U0,ice,CAo,wAo,sD,AAo,yAo,LAo,J0,dce,xAo,$Ao,lD,kAo,SAo,RAo,Y0,cce,PAo,BAo,iD,IAo,qAo,NAo,K0,fce,jAo,DAo,dD,GAo,OAo,VAo,Z0,mce,XAo,zAo,cD,WAo,QAo,HAo,e1,gce,UAo,JAo,fD,YAo,KAo,ZAo,o1,hce,eyo,oyo,mD,ryo,tyo,ayo,r1,pce,nyo,syo,gD,lyo,iyo,dyo,t1,uce,cyo,fyo,_ce,myo,gyo,hyo,a1,bce,pyo,uyo,hD,_yo,byo,vyo,n1,vce,Fyo,Tyo,pD,Myo,Eyo,Cyo,s1,Fce,wyo,Ayo,uD,yyo,Lyo,xyo,l1,Tce,$yo,kyo,_D,Syo,Ryo,Pyo,i1,Byo,Mce,Iyo,qyo,Ece,Nyo,jyo,d1,wqe,qi,c1,Cce,ly,Dyo,wce,Gyo,Aqe,So,iy,Oyo,Ni,Vyo,bD,Xyo,zyo,vD,Wyo,Qyo,Hyo,dy,Uyo,Ace,Jyo,Yyo,Kyo,lt,cy,Zyo,yce,eLo,oLo,ji,rLo,Lce,tLo,aLo,FD,nLo,sLo,lLo,f1,iLo,eo,fy,dLo,xce,cLo,fLo,Sa,mLo,$ce,gLo,hLo,kce,pLo,uLo,Sce,_Lo,bLo,vLo,ue,m1,Rce,FLo,TLo,TD,MLo,ELo,CLo,g1,Pce,wLo,ALo,MD,yLo,LLo,xLo,h1,Bce,$Lo,kLo,ED,SLo,RLo,PLo,p1,Ice,BLo,ILo,CD,qLo,NLo,jLo,u1,qce,DLo,GLo,wD,OLo,VLo,XLo,_1,Nce,zLo,WLo,AD,QLo,HLo,ULo,b1,jce,JLo,YLo,yD,KLo,ZLo,e8o,v1,Dce,o8o,r8o,LD,t8o,a8o,n8o,F1,Gce,s8o,l8o,xD,i8o,d8o,c8o,T1,Oce,f8o,m8o,$D,g8o,h8o,p8o,M1,Vce,u8o,_8o,kD,b8o,v8o,F8o,E1,Xce,T8o,M8o,SD,E8o,C8o,w8o,C1,zce,A8o,y8o,RD,L8o,x8o,$8o,w1,Wce,k8o,S8o,PD,R8o,P8o,B8o,A1,Qce,I8o,q8o,BD,N8o,j8o,D8o,y1,Hce,G8o,O8o,ID,V8o,X8o,z8o,L1,W8o,Uce,Q8o,H8o,Jce,U8o,J8o,x1,yqe,Di,$1,Yce,my,Y8o,Kce,K8o,Lqe,Ro,gy,Z8o,Gi,e9o,qD,o9o,r9o,ND,t9o,a9o,n9o,hy,s9o,Zce,l9o,i9o,d9o,it,py,c9o,efe,f9o,m9o,Oi,g9o,ofe,h9o,p9o,jD,u9o,_9o,b9o,k1,v9o,oo,uy,F9o,rfe,T9o,M9o,Ra,E9o,tfe,C9o,w9o,afe,A9o,y9o,nfe,L9o,x9o,$9o,q,S1,sfe,k9o,S9o,DD,R9o,P9o,B9o,R1,lfe,I9o,q9o,GD,N9o,j9o,D9o,P1,ife,G9o,O9o,OD,V9o,X9o,z9o,B1,dfe,W9o,Q9o,VD,H9o,U9o,J9o,I1,cfe,Y9o,K9o,XD,Z9o,exo,oxo,q1,ffe,rxo,txo,zD,axo,nxo,sxo,N1,mfe,lxo,ixo,WD,dxo,cxo,fxo,j1,gfe,mxo,gxo,QD,hxo,pxo,uxo,D1,hfe,_xo,bxo,HD,vxo,Fxo,Txo,G1,pfe,Mxo,Exo,UD,Cxo,wxo,Axo,O1,ufe,yxo,Lxo,JD,xxo,$xo,kxo,V1,_fe,Sxo,Rxo,YD,Pxo,Bxo,Ixo,X1,bfe,qxo,Nxo,KD,jxo,Dxo,Gxo,z1,vfe,Oxo,Vxo,ZD,Xxo,zxo,Wxo,W1,Ffe,Qxo,Hxo,eG,Uxo,Jxo,Yxo,Q1,Tfe,Kxo,Zxo,oG,e$o,o$o,r$o,H1,Mfe,t$o,a$o,rG,n$o,s$o,l$o,U1,Efe,i$o,d$o,tG,c$o,f$o,m$o,J1,Cfe,g$o,h$o,aG,p$o,u$o,_$o,Y1,wfe,b$o,v$o,nG,F$o,T$o,M$o,K1,Afe,E$o,C$o,sG,w$o,A$o,y$o,Z1,yfe,L$o,x$o,lG,$$o,k$o,S$o,eb,Lfe,R$o,P$o,iG,B$o,I$o,q$o,ob,xfe,N$o,j$o,dG,D$o,G$o,O$o,rb,$fe,V$o,X$o,cG,z$o,W$o,Q$o,tb,kfe,H$o,U$o,fG,J$o,Y$o,K$o,ab,Sfe,Z$o,eko,mG,oko,rko,tko,nb,Rfe,ako,nko,gG,sko,lko,iko,sb,Pfe,dko,cko,hG,fko,mko,gko,lb,Bfe,hko,pko,pG,uko,_ko,bko,ib,Ife,vko,Fko,uG,Tko,Mko,Eko,db,qfe,Cko,wko,_G,Ako,yko,Lko,cb,Nfe,xko,$ko,bG,kko,Sko,Rko,fb,jfe,Pko,Bko,vG,Iko,qko,Nko,mb,Dfe,jko,Dko,FG,Gko,Oko,Vko,gb,Gfe,Xko,zko,TG,Wko,Qko,Hko,hb,Ofe,Uko,Jko,MG,Yko,Kko,Zko,pb,Vfe,eSo,oSo,EG,rSo,tSo,aSo,ub,Xfe,nSo,sSo,CG,lSo,iSo,dSo,_b,zfe,cSo,fSo,wG,mSo,gSo,hSo,bb,Wfe,pSo,uSo,AG,_So,bSo,vSo,vb,Qfe,FSo,TSo,yG,MSo,ESo,CSo,Fb,Hfe,wSo,ASo,LG,ySo,LSo,xSo,Tb,Ufe,$So,kSo,xG,SSo,RSo,PSo,Mb,Jfe,BSo,ISo,$G,qSo,NSo,jSo,Eb,Yfe,DSo,GSo,kG,OSo,VSo,XSo,Cb,Kfe,zSo,WSo,SG,QSo,HSo,USo,wb,JSo,Zfe,YSo,KSo,eme,ZSo,eRo,Ab,xqe,Vi,yb,ome,_y,oRo,rme,rRo,$qe,Po,by,tRo,Xi,aRo,RG,nRo,sRo,PG,lRo,iRo,dRo,vy,cRo,tme,fRo,mRo,gRo,dt,Fy,hRo,ame,pRo,uRo,zi,_Ro,nme,bRo,vRo,BG,FRo,TRo,MRo,Lb,ERo,ro,Ty,CRo,sme,wRo,ARo,Pa,yRo,lme,LRo,xRo,ime,$Ro,kRo,dme,SRo,RRo,PRo,Y,xb,cme,BRo,IRo,IG,qRo,NRo,jRo,$b,fme,DRo,GRo,qG,ORo,VRo,XRo,kb,mme,zRo,WRo,NG,QRo,HRo,URo,Sb,gme,JRo,YRo,jG,KRo,ZRo,ePo,Rb,hme,oPo,rPo,DG,tPo,aPo,nPo,Pb,pme,sPo,lPo,GG,iPo,dPo,cPo,Bb,ume,fPo,mPo,OG,gPo,hPo,pPo,Ib,_me,uPo,_Po,VG,bPo,vPo,FPo,qb,bme,TPo,MPo,XG,EPo,CPo,wPo,Nb,vme,APo,yPo,zG,LPo,xPo,$Po,jb,Fme,kPo,SPo,WG,RPo,PPo,BPo,Db,Tme,IPo,qPo,QG,NPo,jPo,DPo,Gb,Mme,GPo,OPo,HG,VPo,XPo,zPo,Ob,Eme,WPo,QPo,UG,HPo,UPo,JPo,Vb,Cme,YPo,KPo,JG,ZPo,eBo,oBo,Xb,wme,rBo,tBo,YG,aBo,nBo,sBo,zb,Ame,lBo,iBo,KG,dBo,cBo,fBo,Wb,yme,mBo,gBo,ZG,hBo,pBo,uBo,Qb,Lme,_Bo,bBo,eO,vBo,FBo,TBo,Hb,xme,MBo,EBo,oO,CBo,wBo,ABo,Ub,$me,yBo,LBo,rO,xBo,$Bo,kBo,Jb,kme,SBo,RBo,tO,PBo,BBo,IBo,Yb,Sme,qBo,NBo,aO,jBo,DBo,GBo,Kb,Rme,OBo,VBo,nO,XBo,zBo,WBo,Zb,Pme,QBo,HBo,sO,UBo,JBo,YBo,e2,Bme,KBo,ZBo,lO,eIo,oIo,rIo,o2,Ime,tIo,aIo,iO,nIo,sIo,lIo,r2,qme,iIo,dIo,dO,cIo,fIo,mIo,t2,Nme,gIo,hIo,cO,pIo,uIo,_Io,a2,bIo,jme,vIo,FIo,Dme,TIo,MIo,n2,kqe,Wi,s2,Gme,My,EIo,Ome,CIo,Sqe,Bo,Ey,wIo,Qi,AIo,fO,yIo,LIo,mO,xIo,$Io,kIo,Cy,SIo,Vme,RIo,PIo,BIo,ct,wy,IIo,Xme,qIo,NIo,Hi,jIo,zme,DIo,GIo,gO,OIo,VIo,XIo,l2,zIo,to,Ay,WIo,Wme,QIo,HIo,Ba,UIo,Qme,JIo,YIo,Hme,KIo,ZIo,Ume,eqo,oqo,rqo,Yr,i2,Jme,tqo,aqo,hO,nqo,sqo,lqo,d2,Yme,iqo,dqo,pO,cqo,fqo,mqo,c2,Kme,gqo,hqo,uO,pqo,uqo,_qo,f2,Zme,bqo,vqo,_O,Fqo,Tqo,Mqo,m2,ege,Eqo,Cqo,bO,wqo,Aqo,yqo,g2,Lqo,oge,xqo,$qo,rge,kqo,Sqo,h2,Rqe,Ui,p2,tge,yy,Rqo,age,Pqo,Pqe,Io,Ly,Bqo,Ji,Iqo,vO,qqo,Nqo,FO,jqo,Dqo,Gqo,xy,Oqo,nge,Vqo,Xqo,zqo,ft,$y,Wqo,sge,Qqo,Hqo,Yi,Uqo,lge,Jqo,Yqo,TO,Kqo,Zqo,eNo,u2,oNo,ao,ky,rNo,ige,tNo,aNo,Ia,nNo,dge,sNo,lNo,cge,iNo,dNo,fge,cNo,fNo,mNo,H,_2,mge,gNo,hNo,MO,pNo,uNo,_No,b2,gge,bNo,vNo,EO,FNo,TNo,MNo,v2,hge,ENo,CNo,CO,wNo,ANo,yNo,F2,pge,LNo,xNo,wO,$No,kNo,SNo,T2,uge,RNo,PNo,AO,BNo,INo,qNo,M2,_ge,NNo,jNo,yO,DNo,GNo,ONo,E2,bge,VNo,XNo,LO,zNo,WNo,QNo,C2,vge,HNo,UNo,xO,JNo,YNo,KNo,w2,Fge,ZNo,ejo,$O,ojo,rjo,tjo,A2,Tge,ajo,njo,kO,sjo,ljo,ijo,y2,Mge,djo,cjo,SO,fjo,mjo,gjo,L2,Ege,hjo,pjo,RO,ujo,_jo,bjo,x2,Cge,vjo,Fjo,PO,Tjo,Mjo,Ejo,$2,wge,Cjo,wjo,BO,Ajo,yjo,Ljo,k2,Age,xjo,$jo,IO,kjo,Sjo,Rjo,S2,yge,Pjo,Bjo,qO,Ijo,qjo,Njo,R2,Lge,jjo,Djo,NO,Gjo,Ojo,Vjo,P2,xge,Xjo,zjo,jO,Wjo,Qjo,Hjo,B2,$ge,Ujo,Jjo,DO,Yjo,Kjo,Zjo,I2,kge,eDo,oDo,GO,rDo,tDo,aDo,q2,Sge,nDo,sDo,OO,lDo,iDo,dDo,N2,Rge,cDo,fDo,VO,mDo,gDo,hDo,j2,Pge,pDo,uDo,XO,_Do,bDo,vDo,D2,Bge,FDo,TDo,zO,MDo,EDo,CDo,G2,Ige,wDo,ADo,WO,yDo,LDo,xDo,O2,qge,$Do,kDo,QO,SDo,RDo,PDo,V2,Nge,BDo,IDo,HO,qDo,NDo,jDo,X2,jge,DDo,GDo,UO,ODo,VDo,XDo,z2,Dge,zDo,WDo,JO,QDo,HDo,UDo,W2,Gge,JDo,YDo,YO,KDo,ZDo,eGo,Q2,Oge,oGo,rGo,KO,tGo,aGo,nGo,H2,Vge,sGo,lGo,ZO,iGo,dGo,cGo,U2,Xge,fGo,mGo,eV,gGo,hGo,pGo,J2,zge,uGo,_Go,oV,bGo,vGo,FGo,Y2,TGo,Wge,MGo,EGo,Qge,CGo,wGo,K2,Bqe,Ki,Z2,Hge,Sy,AGo,Uge,yGo,Iqe,qo,Ry,LGo,Zi,xGo,rV,$Go,kGo,tV,SGo,RGo,PGo,Py,BGo,Jge,IGo,qGo,NGo,mt,By,jGo,Yge,DGo,GGo,ed,OGo,Kge,VGo,XGo,aV,zGo,WGo,QGo,ev,HGo,no,Iy,UGo,Zge,JGo,YGo,qa,KGo,ehe,ZGo,eOo,ohe,oOo,rOo,rhe,tOo,aOo,nOo,O,ov,the,sOo,lOo,nV,iOo,dOo,cOo,rv,ahe,fOo,mOo,sV,gOo,hOo,pOo,tv,nhe,uOo,_Oo,lV,bOo,vOo,FOo,av,she,TOo,MOo,iV,EOo,COo,wOo,nv,lhe,AOo,yOo,dV,LOo,xOo,$Oo,sv,ihe,kOo,SOo,cV,ROo,POo,BOo,lv,dhe,IOo,qOo,fV,NOo,jOo,DOo,iv,che,GOo,OOo,mV,VOo,XOo,zOo,dv,fhe,WOo,QOo,gV,HOo,UOo,JOo,cv,mhe,YOo,KOo,hV,ZOo,eVo,oVo,fv,ghe,rVo,tVo,pV,aVo,nVo,sVo,mv,hhe,lVo,iVo,uV,dVo,cVo,fVo,gv,phe,mVo,gVo,_V,hVo,pVo,uVo,hv,uhe,_Vo,bVo,bV,vVo,FVo,TVo,pv,_he,MVo,EVo,vV,CVo,wVo,AVo,uv,bhe,yVo,LVo,FV,xVo,$Vo,kVo,_v,vhe,SVo,RVo,TV,PVo,BVo,IVo,bv,Fhe,qVo,NVo,MV,jVo,DVo,GVo,vv,The,OVo,VVo,EV,XVo,zVo,WVo,Fv,Mhe,QVo,HVo,CV,UVo,JVo,YVo,Tv,Ehe,KVo,ZVo,wV,eXo,oXo,rXo,Mv,Che,tXo,aXo,AV,nXo,sXo,lXo,Ev,whe,iXo,dXo,yV,cXo,fXo,mXo,Cv,Ahe,gXo,hXo,LV,pXo,uXo,_Xo,wv,yhe,bXo,vXo,xV,FXo,TXo,MXo,Av,Lhe,EXo,CXo,$V,wXo,AXo,yXo,yv,xhe,LXo,xXo,kV,$Xo,kXo,SXo,Lv,$he,RXo,PXo,SV,BXo,IXo,qXo,xv,khe,NXo,jXo,RV,DXo,GXo,OXo,$v,She,VXo,XXo,PV,zXo,WXo,QXo,kv,Rhe,HXo,UXo,BV,JXo,YXo,KXo,Sv,Phe,ZXo,ezo,IV,ozo,rzo,tzo,Rv,Bhe,azo,nzo,qV,szo,lzo,izo,Pv,Ihe,dzo,czo,NV,fzo,mzo,gzo,Bv,qhe,hzo,pzo,jV,uzo,_zo,bzo,Iv,Nhe,vzo,Fzo,DV,Tzo,Mzo,Ezo,qv,jhe,Czo,wzo,GV,Azo,yzo,Lzo,Nv,Dhe,xzo,$zo,OV,kzo,Szo,Rzo,jv,Ghe,Pzo,Bzo,VV,Izo,qzo,Nzo,Dv,Ohe,jzo,Dzo,XV,Gzo,Ozo,Vzo,Gv,Xzo,Vhe,zzo,Wzo,Xhe,Qzo,Hzo,Ov,qqe,od,Vv,zhe,qy,Uzo,Whe,Jzo,Nqe,No,Ny,Yzo,rd,Kzo,zV,Zzo,eWo,WV,oWo,rWo,tWo,jy,aWo,Qhe,nWo,sWo,lWo,gt,Dy,iWo,Hhe,dWo,cWo,td,fWo,Uhe,mWo,gWo,QV,hWo,pWo,uWo,Xv,_Wo,so,Gy,bWo,Jhe,vWo,FWo,Na,TWo,Yhe,MWo,EWo,Khe,CWo,wWo,Zhe,AWo,yWo,LWo,epe,zv,ope,xWo,$Wo,HV,kWo,SWo,RWo,Wv,PWo,rpe,BWo,IWo,tpe,qWo,NWo,Qv,jqe,ad,Hv,ape,Oy,jWo,npe,DWo,Dqe,jo,Vy,GWo,nd,OWo,UV,VWo,XWo,JV,zWo,WWo,QWo,Xy,HWo,spe,UWo,JWo,YWo,ht,zy,KWo,lpe,ZWo,eQo,sd,oQo,ipe,rQo,tQo,YV,aQo,nQo,sQo,Uv,lQo,lo,Wy,iQo,dpe,dQo,cQo,ja,fQo,cpe,mQo,gQo,fpe,hQo,pQo,mpe,uQo,_Qo,bQo,Fe,Jv,gpe,vQo,FQo,KV,TQo,MQo,EQo,Yv,hpe,CQo,wQo,ZV,AQo,yQo,LQo,Kv,ppe,xQo,$Qo,eX,kQo,SQo,RQo,Bs,upe,PQo,BQo,oX,IQo,qQo,rX,NQo,jQo,DQo,Zv,_pe,GQo,OQo,tX,VQo,XQo,zQo,pt,bpe,WQo,QQo,aX,HQo,UQo,nX,JQo,YQo,sX,KQo,ZQo,eHo,eF,vpe,oHo,rHo,lX,tHo,aHo,nHo,oF,Fpe,sHo,lHo,iX,iHo,dHo,cHo,rF,Tpe,fHo,mHo,dX,gHo,hHo,pHo,tF,Mpe,uHo,_Ho,cX,bHo,vHo,FHo,aF,Epe,THo,MHo,fX,EHo,CHo,wHo,nF,Cpe,AHo,yHo,mX,LHo,xHo,$Ho,sF,wpe,kHo,SHo,gX,RHo,PHo,BHo,lF,IHo,Ape,qHo,NHo,ype,jHo,DHo,iF,Gqe,ld,dF,Lpe,Qy,GHo,xpe,OHo,Oqe,Do,Hy,VHo,id,XHo,hX,zHo,WHo,pX,QHo,HHo,UHo,Uy,JHo,$pe,YHo,KHo,ZHo,ut,Jy,eUo,kpe,oUo,rUo,dd,tUo,Spe,aUo,nUo,uX,sUo,lUo,iUo,cF,dUo,io,Yy,cUo,Rpe,fUo,mUo,Da,gUo,Ppe,hUo,pUo,Bpe,uUo,_Uo,Ipe,bUo,vUo,FUo,qpe,fF,Npe,TUo,MUo,_X,EUo,CUo,wUo,mF,AUo,jpe,yUo,LUo,Dpe,xUo,$Uo,gF,Vqe,cd,hF,Gpe,Ky,kUo,Ope,SUo,Xqe,Go,Zy,RUo,fd,PUo,bX,BUo,IUo,vX,qUo,NUo,jUo,eL,DUo,Vpe,GUo,OUo,VUo,_t,oL,XUo,Xpe,zUo,WUo,md,QUo,zpe,HUo,UUo,FX,JUo,YUo,KUo,pF,ZUo,co,rL,eJo,Wpe,oJo,rJo,Ga,tJo,Qpe,aJo,nJo,Hpe,sJo,lJo,Upe,iJo,dJo,cJo,ke,uF,Jpe,fJo,mJo,TX,gJo,hJo,pJo,_F,Ype,uJo,_Jo,MX,bJo,vJo,FJo,bF,Kpe,TJo,MJo,EX,EJo,CJo,wJo,vF,Zpe,AJo,yJo,CX,LJo,xJo,$Jo,FF,eue,kJo,SJo,wX,RJo,PJo,BJo,TF,oue,IJo,qJo,AX,NJo,jJo,DJo,MF,rue,GJo,OJo,yX,VJo,XJo,zJo,EF,tue,WJo,QJo,LX,HJo,UJo,JJo,CF,aue,YJo,KJo,xX,ZJo,eYo,oYo,wF,rYo,nue,tYo,aYo,sue,nYo,sYo,AF,zqe,gd,yF,lue,tL,lYo,iue,iYo,Wqe,Oo,aL,dYo,hd,cYo,$X,fYo,mYo,kX,gYo,hYo,pYo,nL,uYo,due,_Yo,bYo,vYo,bt,sL,FYo,cue,TYo,MYo,pd,EYo,fue,CYo,wYo,SX,AYo,yYo,LYo,LF,xYo,fo,lL,$Yo,mue,kYo,SYo,Oa,RYo,gue,PYo,BYo,hue,IYo,qYo,pue,NYo,jYo,DYo,Kr,xF,uue,GYo,OYo,RX,VYo,XYo,zYo,$F,_ue,WYo,QYo,PX,HYo,UYo,JYo,kF,bue,YYo,KYo,BX,ZYo,eKo,oKo,SF,vue,rKo,tKo,IX,aKo,nKo,sKo,RF,Fue,lKo,iKo,qX,dKo,cKo,fKo,PF,mKo,Tue,gKo,hKo,Mue,pKo,uKo,BF,Qqe,ud,IF,Eue,iL,_Ko,Cue,bKo,Hqe,Vo,dL,vKo,_d,FKo,NX,TKo,MKo,jX,EKo,CKo,wKo,cL,AKo,wue,yKo,LKo,xKo,vt,fL,$Ko,Aue,kKo,SKo,bd,RKo,yue,PKo,BKo,DX,IKo,qKo,NKo,qF,jKo,mo,mL,DKo,Lue,GKo,OKo,Va,VKo,xue,XKo,zKo,$ue,WKo,QKo,kue,HKo,UKo,JKo,Se,NF,Sue,YKo,KKo,GX,ZKo,eZo,oZo,jF,Rue,rZo,tZo,OX,aZo,nZo,sZo,DF,Pue,lZo,iZo,VX,dZo,cZo,fZo,GF,Bue,mZo,gZo,XX,hZo,pZo,uZo,OF,Iue,_Zo,bZo,zX,vZo,FZo,TZo,VF,que,MZo,EZo,WX,CZo,wZo,AZo,XF,Nue,yZo,LZo,QX,xZo,$Zo,kZo,zF,jue,SZo,RZo,HX,PZo,BZo,IZo,WF,Due,qZo,NZo,UX,jZo,DZo,GZo,QF,OZo,Gue,VZo,XZo,Oue,zZo,WZo,HF,Uqe,vd,UF,Vue,gL,QZo,Xue,HZo,Jqe,Xo,hL,UZo,Fd,JZo,JX,YZo,KZo,YX,ZZo,eer,oer,pL,rer,zue,ter,aer,ner,Ft,uL,ser,Wue,ler,ier,Td,der,Que,cer,fer,KX,mer,ger,her,JF,per,go,_L,uer,Hue,_er,ber,Xa,ver,Uue,Fer,Ter,Jue,Mer,Eer,Yue,Cer,wer,Aer,bL,YF,Kue,yer,Ler,ZX,xer,$er,ker,KF,Zue,Ser,Rer,ez,Per,Ber,Ier,ZF,qer,e_e,Ner,jer,o_e,Der,Ger,e6,Yqe,Md,o6,r_e,vL,Oer,t_e,Ver,Kqe,zo,FL,Xer,Ed,zer,oz,Wer,Qer,rz,Her,Uer,Jer,TL,Yer,a_e,Ker,Zer,eor,Tt,ML,oor,n_e,ror,tor,Cd,aor,s_e,nor,sor,tz,lor,ior,dor,r6,cor,ho,EL,mor,l_e,gor,hor,za,por,i_e,uor,_or,d_e,bor,vor,c_e,For,Tor,Mor,Zr,t6,f_e,Eor,Cor,az,wor,Aor,yor,a6,m_e,Lor,xor,nz,$or,kor,Sor,n6,g_e,Ror,Por,sz,Bor,Ior,qor,s6,h_e,Nor,jor,lz,Dor,Gor,Oor,l6,p_e,Vor,Xor,iz,zor,Wor,Qor,i6,Hor,u_e,Uor,Jor,__e,Yor,Kor,d6,Zqe,wd,c6,b_e,CL,Zor,v_e,err,eNe,Wo,wL,orr,Ad,rrr,dz,trr,arr,cz,nrr,srr,lrr,AL,irr,F_e,drr,crr,frr,Mt,yL,mrr,T_e,grr,hrr,yd,prr,M_e,urr,_rr,fz,brr,vrr,Frr,f6,Trr,po,LL,Mrr,E_e,Err,Crr,Wa,wrr,C_e,Arr,yrr,w_e,Lrr,xrr,A_e,$rr,krr,Srr,Ld,m6,y_e,Rrr,Prr,mz,Brr,Irr,qrr,g6,L_e,Nrr,jrr,gz,Drr,Grr,Orr,h6,x_e,Vrr,Xrr,hz,zrr,Wrr,Qrr,p6,Hrr,$_e,Urr,Jrr,k_e,Yrr,Krr,u6,oNe,xd,_6,S_e,xL,Zrr,R_e,etr,rNe,Qo,$L,otr,$d,rtr,pz,ttr,atr,uz,ntr,str,ltr,kL,itr,P_e,dtr,ctr,ftr,Et,SL,mtr,B_e,gtr,htr,kd,ptr,I_e,utr,_tr,_z,btr,vtr,Ftr,b6,Ttr,uo,RL,Mtr,q_e,Etr,Ctr,Qa,wtr,N_e,Atr,ytr,j_e,Ltr,xtr,D_e,$tr,ktr,Str,PL,v6,G_e,Rtr,Ptr,bz,Btr,Itr,qtr,F6,O_e,Ntr,jtr,vz,Dtr,Gtr,Otr,T6,Vtr,V_e,Xtr,ztr,X_e,Wtr,Qtr,M6,tNe,Sd,E6,z_e,BL,Htr,W_e,Utr,aNe,Ho,IL,Jtr,Rd,Ytr,Fz,Ktr,Ztr,Tz,ear,oar,rar,qL,tar,Q_e,aar,nar,sar,Ct,NL,lar,H_e,iar,dar,Pd,car,U_e,far,mar,Mz,gar,har,par,C6,uar,_o,jL,_ar,J_e,bar,Far,Ha,Tar,Y_e,Mar,Ear,K_e,Car,war,Z_e,Aar,yar,Lar,e0e,w6,o0e,xar,$ar,Ez,kar,Sar,Rar,A6,Par,r0e,Bar,Iar,t0e,qar,Nar,y6,nNe,Bd,L6,a0e,DL,jar,n0e,Dar,sNe,Uo,GL,Gar,Id,Oar,Cz,Var,Xar,wz,zar,War,Qar,OL,Har,s0e,Uar,Jar,Yar,wt,VL,Kar,l0e,Zar,enr,qd,onr,i0e,rnr,tnr,Az,anr,nnr,snr,x6,lnr,bo,XL,inr,d0e,dnr,cnr,Ua,fnr,c0e,mnr,gnr,f0e,hnr,pnr,m0e,unr,_nr,bnr,Ja,$6,g0e,vnr,Fnr,yz,Tnr,Mnr,Enr,k6,h0e,Cnr,wnr,Lz,Anr,ynr,Lnr,S6,p0e,xnr,$nr,xz,knr,Snr,Rnr,R6,u0e,Pnr,Bnr,$z,Inr,qnr,Nnr,P6,jnr,_0e,Dnr,Gnr,b0e,Onr,Vnr,B6,lNe,Nd,I6,v0e,zL,Xnr,F0e,znr,iNe,Jo,WL,Wnr,jd,Qnr,kz,Hnr,Unr,Sz,Jnr,Ynr,Knr,QL,Znr,T0e,esr,osr,rsr,At,HL,tsr,M0e,asr,nsr,Dd,ssr,E0e,lsr,isr,Rz,dsr,csr,fsr,q6,msr,vo,UL,gsr,C0e,hsr,psr,Ya,usr,w0e,_sr,bsr,A0e,vsr,Fsr,y0e,Tsr,Msr,Esr,L0e,N6,x0e,Csr,wsr,Pz,Asr,ysr,Lsr,j6,xsr,$0e,$sr,ksr,k0e,Ssr,Rsr,D6,dNe,Gd,G6,S0e,JL,Psr,R0e,Bsr,cNe,Yo,YL,Isr,Od,qsr,Bz,Nsr,jsr,Iz,Dsr,Gsr,Osr,KL,Vsr,P0e,Xsr,zsr,Wsr,yt,ZL,Qsr,B0e,Hsr,Usr,Vd,Jsr,I0e,Ysr,Ksr,qz,Zsr,elr,olr,O6,rlr,wr,e8,tlr,q0e,alr,nlr,Ka,slr,N0e,llr,ilr,j0e,dlr,clr,D0e,flr,mlr,glr,N,V6,G0e,hlr,plr,Nz,ulr,_lr,blr,X6,O0e,vlr,Flr,jz,Tlr,Mlr,Elr,z6,V0e,Clr,wlr,Dz,Alr,ylr,Llr,W6,X0e,xlr,$lr,Gz,klr,Slr,Rlr,Q6,z0e,Plr,Blr,Oz,Ilr,qlr,Nlr,H6,W0e,jlr,Dlr,Vz,Glr,Olr,Vlr,U6,Q0e,Xlr,zlr,Xz,Wlr,Qlr,Hlr,J6,H0e,Ulr,Jlr,zz,Ylr,Klr,Zlr,Y6,U0e,eir,oir,Wz,rir,tir,air,K6,J0e,nir,sir,Qz,lir,iir,dir,Z6,Y0e,cir,fir,Hz,mir,gir,hir,eT,K0e,pir,uir,Uz,_ir,bir,vir,oT,Z0e,Fir,Tir,Jz,Mir,Eir,Cir,rT,e1e,wir,Air,Yz,yir,Lir,xir,tT,o1e,$ir,kir,Kz,Sir,Rir,Pir,aT,r1e,Bir,Iir,Zz,qir,Nir,jir,nT,t1e,Dir,Gir,eW,Oir,Vir,Xir,Is,a1e,zir,Wir,oW,Qir,Hir,rW,Uir,Jir,Yir,sT,n1e,Kir,Zir,tW,edr,odr,rdr,lT,s1e,tdr,adr,aW,ndr,sdr,ldr,iT,l1e,idr,ddr,nW,cdr,fdr,mdr,dT,i1e,gdr,hdr,sW,pdr,udr,_dr,cT,d1e,bdr,vdr,lW,Fdr,Tdr,Mdr,fT,c1e,Edr,Cdr,iW,wdr,Adr,ydr,mT,f1e,Ldr,xdr,dW,$dr,kdr,Sdr,gT,m1e,Rdr,Pdr,cW,Bdr,Idr,qdr,hT,g1e,Ndr,jdr,fW,Ddr,Gdr,Odr,pT,h1e,Vdr,Xdr,mW,zdr,Wdr,Qdr,uT,p1e,Hdr,Udr,gW,Jdr,Ydr,Kdr,_T,u1e,Zdr,ecr,hW,ocr,rcr,tcr,bT,_1e,acr,ncr,pW,scr,lcr,icr,vT,b1e,dcr,ccr,uW,fcr,mcr,gcr,FT,v1e,hcr,pcr,_W,ucr,_cr,bcr,TT,F1e,vcr,Fcr,bW,Tcr,Mcr,Ecr,MT,T1e,Ccr,wcr,vW,Acr,ycr,Lcr,ET,M1e,xcr,$cr,FW,kcr,Scr,Rcr,CT,E1e,Pcr,Bcr,TW,Icr,qcr,Ncr,wT,C1e,jcr,Dcr,MW,Gcr,Ocr,Vcr,AT,w1e,Xcr,zcr,EW,Wcr,Qcr,Hcr,yT,A1e,Ucr,Jcr,CW,Ycr,Kcr,Zcr,LT,y1e,efr,ofr,wW,rfr,tfr,afr,xT,L1e,nfr,sfr,AW,lfr,ifr,dfr,$T,x1e,cfr,ffr,yW,mfr,gfr,hfr,kT,$1e,pfr,ufr,LW,_fr,bfr,vfr,ST,k1e,Ffr,Tfr,xW,Mfr,Efr,Cfr,RT,S1e,wfr,Afr,$W,yfr,Lfr,xfr,PT,fNe,Xd,BT,R1e,o8,$fr,P1e,kfr,mNe,Ko,r8,Sfr,zd,Rfr,kW,Pfr,Bfr,SW,Ifr,qfr,Nfr,t8,jfr,B1e,Dfr,Gfr,Ofr,Lt,a8,Vfr,I1e,Xfr,zfr,Wd,Wfr,q1e,Qfr,Hfr,RW,Ufr,Jfr,Yfr,IT,Kfr,Ar,n8,Zfr,N1e,emr,omr,Za,rmr,j1e,tmr,amr,D1e,nmr,smr,G1e,lmr,imr,dmr,se,qT,O1e,cmr,fmr,PW,mmr,gmr,hmr,NT,V1e,pmr,umr,BW,_mr,bmr,vmr,jT,X1e,Fmr,Tmr,IW,Mmr,Emr,Cmr,DT,z1e,wmr,Amr,qW,ymr,Lmr,xmr,GT,W1e,$mr,kmr,NW,Smr,Rmr,Pmr,OT,Q1e,Bmr,Imr,jW,qmr,Nmr,jmr,VT,H1e,Dmr,Gmr,DW,Omr,Vmr,Xmr,XT,U1e,zmr,Wmr,GW,Qmr,Hmr,Umr,zT,J1e,Jmr,Ymr,OW,Kmr,Zmr,egr,WT,Y1e,ogr,rgr,VW,tgr,agr,ngr,QT,K1e,sgr,lgr,XW,igr,dgr,cgr,HT,Z1e,fgr,mgr,zW,ggr,hgr,pgr,UT,ebe,ugr,_gr,WW,bgr,vgr,Fgr,JT,obe,Tgr,Mgr,QW,Egr,Cgr,wgr,YT,rbe,Agr,ygr,HW,Lgr,xgr,$gr,KT,tbe,kgr,Sgr,UW,Rgr,Pgr,Bgr,ZT,abe,Igr,qgr,JW,Ngr,jgr,Dgr,e7,nbe,Ggr,Ogr,YW,Vgr,Xgr,zgr,o7,sbe,Wgr,Qgr,KW,Hgr,Ugr,Jgr,r7,lbe,Ygr,Kgr,ZW,Zgr,ehr,ohr,t7,ibe,rhr,thr,eQ,ahr,nhr,shr,a7,dbe,lhr,ihr,oQ,dhr,chr,fhr,n7,cbe,mhr,ghr,rQ,hhr,phr,uhr,s7,gNe,Qd,l7,fbe,s8,_hr,mbe,bhr,hNe,Zo,l8,vhr,Hd,Fhr,tQ,Thr,Mhr,aQ,Ehr,Chr,whr,i8,Ahr,gbe,yhr,Lhr,xhr,xt,d8,$hr,hbe,khr,Shr,Ud,Rhr,pbe,Phr,Bhr,nQ,Ihr,qhr,Nhr,i7,jhr,yr,c8,Dhr,ube,Ghr,Ohr,en,Vhr,_be,Xhr,zhr,bbe,Whr,Qhr,vbe,Hhr,Uhr,Jhr,Te,d7,Fbe,Yhr,Khr,sQ,Zhr,epr,opr,c7,Tbe,rpr,tpr,lQ,apr,npr,spr,f7,Mbe,lpr,ipr,iQ,dpr,cpr,fpr,m7,Ebe,mpr,gpr,dQ,hpr,ppr,upr,g7,Cbe,_pr,bpr,cQ,vpr,Fpr,Tpr,h7,wbe,Mpr,Epr,fQ,Cpr,wpr,Apr,p7,Abe,ypr,Lpr,mQ,xpr,$pr,kpr,u7,ybe,Spr,Rpr,gQ,Ppr,Bpr,Ipr,_7,Lbe,qpr,Npr,hQ,jpr,Dpr,Gpr,b7,xbe,Opr,Vpr,pQ,Xpr,zpr,Wpr,v7,$be,Qpr,Hpr,uQ,Upr,Jpr,Ypr,F7,kbe,Kpr,Zpr,_Q,eur,our,rur,T7,pNe,Jd,M7,Sbe,f8,tur,Rbe,aur,uNe,er,m8,nur,Yd,sur,bQ,lur,iur,vQ,dur,cur,fur,g8,mur,Pbe,gur,hur,pur,$t,h8,uur,Bbe,_ur,bur,Kd,vur,Ibe,Fur,Tur,FQ,Mur,Eur,Cur,E7,wur,Lr,p8,Aur,qbe,yur,Lur,on,xur,Nbe,$ur,kur,jbe,Sur,Rur,Dbe,Pur,Bur,Iur,rn,C7,Gbe,qur,Nur,TQ,jur,Dur,Gur,w7,Obe,Our,Vur,MQ,Xur,zur,Wur,A7,Vbe,Qur,Hur,EQ,Uur,Jur,Yur,y7,Xbe,Kur,Zur,CQ,e_r,o_r,r_r,L7,_Ne,Zd,x7,zbe,u8,t_r,Wbe,a_r,bNe,or,_8,n_r,ec,s_r,wQ,l_r,i_r,AQ,d_r,c_r,f_r,b8,m_r,Qbe,g_r,h_r,p_r,kt,v8,u_r,Hbe,__r,b_r,oc,v_r,Ube,F_r,T_r,yQ,M_r,E_r,C_r,$7,w_r,xr,F8,A_r,Jbe,y_r,L_r,tn,x_r,Ybe,$_r,k_r,Kbe,S_r,R_r,Zbe,P_r,B_r,I_r,ie,k7,e2e,q_r,N_r,LQ,j_r,D_r,G_r,S7,o2e,O_r,V_r,xQ,X_r,z_r,W_r,R7,r2e,Q_r,H_r,$Q,U_r,J_r,Y_r,P7,t2e,K_r,Z_r,kQ,e0r,o0r,r0r,B7,a2e,t0r,a0r,SQ,n0r,s0r,l0r,I7,n2e,i0r,d0r,RQ,c0r,f0r,m0r,q7,s2e,g0r,h0r,PQ,p0r,u0r,_0r,N7,l2e,b0r,v0r,BQ,F0r,T0r,M0r,j7,i2e,E0r,C0r,IQ,w0r,A0r,y0r,D7,d2e,L0r,x0r,qQ,$0r,k0r,S0r,G7,c2e,R0r,P0r,NQ,B0r,I0r,q0r,O7,f2e,N0r,j0r,jQ,D0r,G0r,O0r,V7,m2e,V0r,X0r,DQ,z0r,W0r,Q0r,X7,g2e,H0r,U0r,GQ,J0r,Y0r,K0r,z7,h2e,Z0r,e1r,OQ,o1r,r1r,t1r,W7,p2e,a1r,n1r,VQ,s1r,l1r,i1r,Q7,u2e,d1r,c1r,XQ,f1r,m1r,g1r,H7,_2e,h1r,p1r,zQ,u1r,_1r,b1r,U7,b2e,v1r,F1r,WQ,T1r,M1r,E1r,J7,v2e,C1r,w1r,QQ,A1r,y1r,L1r,Y7,vNe,rc,K7,F2e,T8,x1r,T2e,$1r,FNe,rr,M8,k1r,tc,S1r,HQ,R1r,P1r,UQ,B1r,I1r,q1r,E8,N1r,M2e,j1r,D1r,G1r,St,C8,O1r,E2e,V1r,X1r,ac,z1r,C2e,W1r,Q1r,JQ,H1r,U1r,J1r,Z7,Y1r,$r,w8,K1r,w2e,Z1r,ebr,an,obr,A2e,rbr,tbr,y2e,abr,nbr,L2e,sbr,lbr,ibr,ye,eM,x2e,dbr,cbr,YQ,fbr,mbr,gbr,oM,$2e,hbr,pbr,KQ,ubr,_br,bbr,rM,k2e,vbr,Fbr,ZQ,Tbr,Mbr,Ebr,tM,S2e,Cbr,wbr,eH,Abr,ybr,Lbr,aM,R2e,xbr,$br,oH,kbr,Sbr,Rbr,nM,P2e,Pbr,Bbr,rH,Ibr,qbr,Nbr,sM,B2e,jbr,Dbr,tH,Gbr,Obr,Vbr,lM,I2e,Xbr,zbr,aH,Wbr,Qbr,Hbr,iM,q2e,Ubr,Jbr,nH,Ybr,Kbr,Zbr,dM,N2e,e2r,o2r,sH,r2r,t2r,a2r,cM,TNe,nc,fM,j2e,A8,n2r,D2e,s2r,MNe,tr,y8,l2r,sc,i2r,lH,d2r,c2r,iH,f2r,m2r,g2r,L8,h2r,G2e,p2r,u2r,_2r,Rt,x8,b2r,O2e,v2r,F2r,lc,T2r,V2e,M2r,E2r,dH,C2r,w2r,A2r,mM,y2r,kr,$8,L2r,X2e,x2r,$2r,nn,k2r,z2e,S2r,R2r,W2e,P2r,B2r,Q2e,I2r,q2r,N2r,ee,gM,H2e,j2r,D2r,cH,G2r,O2r,V2r,hM,U2e,X2r,z2r,fH,W2r,Q2r,H2r,pM,J2e,U2r,J2r,mH,Y2r,K2r,Z2r,uM,Y2e,evr,ovr,gH,rvr,tvr,avr,_M,K2e,nvr,svr,hH,lvr,ivr,dvr,bM,Z2e,cvr,fvr,pH,mvr,gvr,hvr,vM,eve,pvr,uvr,uH,_vr,bvr,vvr,FM,ove,Fvr,Tvr,_H,Mvr,Evr,Cvr,TM,rve,wvr,Avr,bH,yvr,Lvr,xvr,MM,tve,$vr,kvr,vH,Svr,Rvr,Pvr,EM,ave,Bvr,Ivr,FH,qvr,Nvr,jvr,CM,nve,Dvr,Gvr,TH,Ovr,Vvr,Xvr,wM,sve,zvr,Wvr,MH,Qvr,Hvr,Uvr,AM,lve,Jvr,Yvr,EH,Kvr,Zvr,eFr,yM,ive,oFr,rFr,CH,tFr,aFr,nFr,LM,dve,sFr,lFr,wH,iFr,dFr,cFr,xM,cve,fFr,mFr,AH,gFr,hFr,pFr,$M,fve,uFr,_Fr,yH,bFr,vFr,FFr,kM,mve,TFr,MFr,LH,EFr,CFr,wFr,SM,gve,AFr,yFr,xH,LFr,xFr,$Fr,RM,hve,kFr,SFr,$H,RFr,PFr,BFr,PM,pve,IFr,qFr,kH,NFr,jFr,DFr,BM,uve,GFr,OFr,SH,VFr,XFr,zFr,IM,_ve,WFr,QFr,RH,HFr,UFr,JFr,qM,bve,YFr,KFr,PH,ZFr,e6r,o6r,NM,vve,r6r,t6r,BH,a6r,n6r,s6r,jM,ENe,ic,DM,Fve,k8,l6r,Tve,i6r,CNe,ar,S8,d6r,dc,c6r,IH,f6r,m6r,qH,g6r,h6r,p6r,R8,u6r,Mve,_6r,b6r,v6r,Pt,P8,F6r,Eve,T6r,M6r,cc,E6r,Cve,C6r,w6r,NH,A6r,y6r,L6r,GM,x6r,Sr,B8,$6r,wve,k6r,S6r,sn,R6r,Ave,P6r,B6r,yve,I6r,q6r,Lve,N6r,j6r,D6r,pe,OM,xve,G6r,O6r,jH,V6r,X6r,z6r,VM,$ve,W6r,Q6r,DH,H6r,U6r,J6r,XM,kve,Y6r,K6r,GH,Z6r,eTr,oTr,zM,Sve,rTr,tTr,OH,aTr,nTr,sTr,WM,Rve,lTr,iTr,VH,dTr,cTr,fTr,QM,Pve,mTr,gTr,XH,hTr,pTr,uTr,HM,Bve,_Tr,bTr,zH,vTr,FTr,TTr,UM,Ive,MTr,ETr,WH,CTr,wTr,ATr,JM,qve,yTr,LTr,QH,xTr,$Tr,kTr,YM,Nve,STr,RTr,HH,PTr,BTr,ITr,KM,jve,qTr,NTr,UH,jTr,DTr,GTr,ZM,Dve,OTr,VTr,JH,XTr,zTr,WTr,e4,Gve,QTr,HTr,YH,UTr,JTr,YTr,o4,Ove,KTr,ZTr,KH,e7r,o7r,r7r,r4,Vve,t7r,a7r,ZH,n7r,s7r,l7r,t4,Xve,i7r,d7r,eU,c7r,f7r,m7r,a4,zve,g7r,h7r,oU,p7r,u7r,_7r,n4,wNe,fc,s4,Wve,I8,b7r,Qve,v7r,ANe,nr,q8,F7r,mc,T7r,rU,M7r,E7r,tU,C7r,w7r,A7r,N8,y7r,Hve,L7r,x7r,$7r,Bt,j8,k7r,Uve,S7r,R7r,gc,P7r,Jve,B7r,I7r,aU,q7r,N7r,j7r,l4,D7r,Rr,D8,G7r,Yve,O7r,V7r,ln,X7r,Kve,z7r,W7r,Zve,Q7r,H7r,eFe,U7r,J7r,Y7r,G8,i4,oFe,K7r,Z7r,nU,eMr,oMr,rMr,d4,rFe,tMr,aMr,sU,nMr,sMr,lMr,c4,yNe,hc,f4,tFe,O8,iMr,aFe,dMr,LNe,sr,V8,cMr,pc,fMr,lU,mMr,gMr,iU,hMr,pMr,uMr,X8,_Mr,nFe,bMr,vMr,FMr,It,z8,TMr,sFe,MMr,EMr,uc,CMr,lFe,wMr,AMr,dU,yMr,LMr,xMr,m4,$Mr,Pr,W8,kMr,iFe,SMr,RMr,dn,PMr,dFe,BMr,IMr,cFe,qMr,NMr,fFe,jMr,DMr,GMr,mFe,g4,gFe,OMr,VMr,cU,XMr,zMr,WMr,h4,xNe,_c,p4,hFe,Q8,QMr,pFe,HMr,$Ne,lr,H8,UMr,bc,JMr,fU,YMr,KMr,mU,ZMr,e4r,o4r,U8,r4r,uFe,t4r,a4r,n4r,qt,J8,s4r,_Fe,l4r,i4r,vc,d4r,bFe,c4r,f4r,gU,m4r,g4r,h4r,u4,p4r,Br,Y8,u4r,vFe,_4r,b4r,cn,v4r,FFe,F4r,T4r,TFe,M4r,E4r,MFe,C4r,w4r,A4r,de,_4,EFe,y4r,L4r,hU,x4r,$4r,k4r,b4,CFe,S4r,R4r,pU,P4r,B4r,I4r,v4,wFe,q4r,N4r,uU,j4r,D4r,G4r,F4,AFe,O4r,V4r,_U,X4r,z4r,W4r,T4,yFe,Q4r,H4r,bU,U4r,J4r,Y4r,M4,LFe,K4r,Z4r,vU,eEr,oEr,rEr,E4,xFe,tEr,aEr,FU,nEr,sEr,lEr,C4,$Fe,iEr,dEr,TU,cEr,fEr,mEr,w4,kFe,gEr,hEr,MU,pEr,uEr,_Er,A4,SFe,bEr,vEr,EU,FEr,TEr,MEr,y4,RFe,EEr,CEr,CU,wEr,AEr,yEr,L4,PFe,LEr,xEr,wU,$Er,kEr,SEr,x4,BFe,REr,PEr,AU,BEr,IEr,qEr,$4,IFe,NEr,jEr,yU,DEr,GEr,OEr,k4,qFe,VEr,XEr,LU,zEr,WEr,QEr,S4,NFe,HEr,UEr,xU,JEr,YEr,KEr,R4,jFe,ZEr,eCr,$U,oCr,rCr,tCr,P4,DFe,aCr,nCr,kU,sCr,lCr,iCr,B4,GFe,dCr,cCr,SU,fCr,mCr,gCr,I4,OFe,hCr,pCr,RU,uCr,_Cr,bCr,q4,kNe,Fc,N4,VFe,K8,vCr,XFe,FCr,SNe,ir,Z8,TCr,Tc,MCr,PU,ECr,CCr,BU,wCr,ACr,yCr,e9,LCr,zFe,xCr,$Cr,kCr,Nt,o9,SCr,WFe,RCr,PCr,Mc,BCr,QFe,ICr,qCr,IU,NCr,jCr,DCr,j4,GCr,Ir,r9,OCr,HFe,VCr,XCr,fn,zCr,UFe,WCr,QCr,JFe,HCr,UCr,YFe,JCr,YCr,KCr,ce,D4,KFe,ZCr,e5r,qU,o5r,r5r,t5r,G4,ZFe,a5r,n5r,NU,s5r,l5r,i5r,O4,e6e,d5r,c5r,jU,f5r,m5r,g5r,V4,o6e,h5r,p5r,DU,u5r,_5r,b5r,X4,r6e,v5r,F5r,GU,T5r,M5r,E5r,z4,t6e,C5r,w5r,OU,A5r,y5r,L5r,W4,a6e,x5r,$5r,VU,k5r,S5r,R5r,Q4,n6e,P5r,B5r,XU,I5r,q5r,N5r,H4,s6e,j5r,D5r,zU,G5r,O5r,V5r,U4,l6e,X5r,z5r,WU,W5r,Q5r,H5r,J4,i6e,U5r,J5r,QU,Y5r,K5r,Z5r,Y4,d6e,e3r,o3r,HU,r3r,t3r,a3r,K4,c6e,n3r,s3r,UU,l3r,i3r,d3r,Z4,f6e,c3r,f3r,JU,m3r,g3r,h3r,eE,m6e,p3r,u3r,YU,_3r,b3r,v3r,oE,g6e,F3r,T3r,KU,M3r,E3r,C3r,rE,h6e,w3r,A3r,ZU,y3r,L3r,x3r,tE,p6e,$3r,k3r,eJ,S3r,R3r,P3r,aE,u6e,B3r,I3r,oJ,q3r,N3r,j3r,nE,_6e,D3r,G3r,rJ,O3r,V3r,X3r,sE,RNe,Ec,lE,b6e,t9,z3r,v6e,W3r,PNe,dr,a9,Q3r,Cc,H3r,tJ,U3r,J3r,aJ,Y3r,K3r,Z3r,n9,ewr,F6e,owr,rwr,twr,jt,s9,awr,T6e,nwr,swr,wc,lwr,M6e,iwr,dwr,nJ,cwr,fwr,mwr,iE,gwr,qr,l9,hwr,E6e,pwr,uwr,mn,_wr,C6e,bwr,vwr,w6e,Fwr,Twr,A6e,Mwr,Ewr,Cwr,y6e,dE,L6e,wwr,Awr,sJ,ywr,Lwr,xwr,cE,BNe,Ac,fE,x6e,i9,$wr,$6e,kwr,INe,cr,d9,Swr,yc,Rwr,lJ,Pwr,Bwr,iJ,Iwr,qwr,Nwr,c9,jwr,k6e,Dwr,Gwr,Owr,Dt,f9,Vwr,S6e,Xwr,zwr,Lc,Wwr,R6e,Qwr,Hwr,dJ,Uwr,Jwr,Ywr,mE,Kwr,Nr,m9,Zwr,P6e,eAr,oAr,gn,rAr,B6e,tAr,aAr,I6e,nAr,sAr,q6e,lAr,iAr,dAr,N6e,gE,j6e,cAr,fAr,cJ,mAr,gAr,hAr,hE,qNe,xc,pE,D6e,g9,pAr,G6e,uAr,NNe,fr,h9,_Ar,$c,bAr,fJ,vAr,FAr,mJ,TAr,MAr,EAr,p9,CAr,O6e,wAr,AAr,yAr,Gt,u9,LAr,V6e,xAr,$Ar,kc,kAr,X6e,SAr,RAr,gJ,PAr,BAr,IAr,uE,qAr,jr,_9,NAr,z6e,jAr,DAr,hn,GAr,W6e,OAr,VAr,Q6e,XAr,zAr,H6e,WAr,QAr,HAr,te,_E,U6e,UAr,JAr,hJ,YAr,KAr,ZAr,bE,J6e,eyr,oyr,pJ,ryr,tyr,ayr,vE,Y6e,nyr,syr,uJ,lyr,iyr,dyr,FE,K6e,cyr,fyr,_J,myr,gyr,hyr,TE,Z6e,pyr,uyr,bJ,_yr,byr,vyr,ME,eTe,Fyr,Tyr,vJ,Myr,Eyr,Cyr,EE,oTe,wyr,Ayr,FJ,yyr,Lyr,xyr,CE,rTe,$yr,kyr,TJ,Syr,Ryr,Pyr,wE,tTe,Byr,Iyr,MJ,qyr,Nyr,jyr,AE,aTe,Dyr,Gyr,EJ,Oyr,Vyr,Xyr,yE,nTe,zyr,Wyr,CJ,Qyr,Hyr,Uyr,LE,sTe,Jyr,Yyr,wJ,Kyr,Zyr,eLr,xE,lTe,oLr,rLr,AJ,tLr,aLr,nLr,$E,iTe,sLr,lLr,yJ,iLr,dLr,cLr,kE,dTe,fLr,mLr,LJ,gLr,hLr,pLr,SE,cTe,uLr,_Lr,xJ,bLr,vLr,FLr,RE,fTe,TLr,MLr,$J,ELr,CLr,wLr,PE,mTe,ALr,yLr,kJ,LLr,xLr,$Lr,BE,gTe,kLr,SLr,SJ,RLr,PLr,BLr,IE,hTe,ILr,qLr,RJ,NLr,jLr,DLr,qE,pTe,GLr,OLr,PJ,VLr,XLr,zLr,NE,uTe,WLr,QLr,BJ,HLr,ULr,JLr,jE,_Te,YLr,KLr,IJ,ZLr,e8r,o8r,DE,bTe,r8r,t8r,qJ,a8r,n8r,s8r,GE,vTe,l8r,i8r,NJ,d8r,c8r,f8r,OE,jNe,Sc,VE,FTe,b9,m8r,TTe,g8r,DNe,mr,v9,h8r,Rc,p8r,jJ,u8r,_8r,DJ,b8r,v8r,F8r,F9,T8r,MTe,M8r,E8r,C8r,Ot,T9,w8r,ETe,A8r,y8r,Pc,L8r,CTe,x8r,$8r,GJ,k8r,S8r,R8r,XE,P8r,Dr,M9,B8r,wTe,I8r,q8r,pn,N8r,ATe,j8r,D8r,yTe,G8r,O8r,LTe,V8r,X8r,z8r,Re,zE,xTe,W8r,Q8r,OJ,H8r,U8r,J8r,WE,$Te,Y8r,K8r,VJ,Z8r,e9r,o9r,QE,kTe,r9r,t9r,XJ,a9r,n9r,s9r,HE,STe,l9r,i9r,zJ,d9r,c9r,f9r,UE,RTe,m9r,g9r,WJ,h9r,p9r,u9r,JE,PTe,_9r,b9r,QJ,v9r,F9r,T9r,YE,BTe,M9r,E9r,HJ,C9r,w9r,A9r,KE,ITe,y9r,L9r,UJ,x9r,$9r,k9r,ZE,qTe,S9r,R9r,JJ,P9r,B9r,I9r,eC,GNe,Bc,oC,NTe,E9,q9r,jTe,N9r,ONe,gr,C9,j9r,Ic,D9r,YJ,G9r,O9r,KJ,V9r,X9r,z9r,w9,W9r,DTe,Q9r,H9r,U9r,Vt,A9,J9r,GTe,Y9r,K9r,qc,Z9r,OTe,exr,oxr,ZJ,rxr,txr,axr,rC,nxr,Gr,y9,sxr,VTe,lxr,ixr,un,dxr,XTe,cxr,fxr,zTe,mxr,gxr,WTe,hxr,pxr,uxr,Me,tC,QTe,_xr,bxr,eY,vxr,Fxr,Txr,aC,HTe,Mxr,Exr,oY,Cxr,wxr,Axr,nC,UTe,yxr,Lxr,rY,xxr,$xr,kxr,sC,JTe,Sxr,Rxr,tY,Pxr,Bxr,Ixr,lC,YTe,qxr,Nxr,aY,jxr,Dxr,Gxr,iC,KTe,Oxr,Vxr,nY,Xxr,zxr,Wxr,dC,ZTe,Qxr,Hxr,sY,Uxr,Jxr,Yxr,cC,e7e,Kxr,Zxr,lY,e$r,o$r,r$r,fC,o7e,t$r,a$r,iY,n$r,s$r,l$r,mC,r7e,i$r,d$r,dY,c$r,f$r,m$r,gC,t7e,g$r,h$r,cY,p$r,u$r,_$r,hC,a7e,b$r,v$r,fY,F$r,T$r,M$r,pC,VNe,Nc,uC,n7e,L9,E$r,s7e,C$r,XNe,hr,x9,w$r,jc,A$r,mY,y$r,L$r,gY,x$r,$$r,k$r,$9,S$r,l7e,R$r,P$r,B$r,Xt,k9,I$r,i7e,q$r,N$r,Dc,j$r,d7e,D$r,G$r,hY,O$r,V$r,X$r,_C,z$r,Or,S9,W$r,c7e,Q$r,H$r,_n,U$r,f7e,J$r,Y$r,m7e,K$r,Z$r,g7e,ekr,okr,rkr,Le,bC,h7e,tkr,akr,pY,nkr,skr,lkr,vC,p7e,ikr,dkr,uY,ckr,fkr,mkr,FC,u7e,gkr,hkr,_Y,pkr,ukr,_kr,TC,_7e,bkr,vkr,bY,Fkr,Tkr,Mkr,MC,b7e,Ekr,Ckr,vY,wkr,Akr,ykr,EC,v7e,Lkr,xkr,FY,$kr,kkr,Skr,CC,F7e,Rkr,Pkr,TY,Bkr,Ikr,qkr,wC,T7e,Nkr,jkr,MY,Dkr,Gkr,Okr,AC,M7e,Vkr,Xkr,EY,zkr,Wkr,Qkr,yC,E7e,Hkr,Ukr,CY,Jkr,Ykr,Kkr,LC,zNe,Gc,xC,C7e,R9,Zkr,w7e,eSr,WNe,pr,P9,oSr,Oc,rSr,wY,tSr,aSr,AY,nSr,sSr,lSr,B9,iSr,A7e,dSr,cSr,fSr,zt,I9,mSr,y7e,gSr,hSr,Vc,pSr,L7e,uSr,_Sr,yY,bSr,vSr,FSr,$C,TSr,Vr,q9,MSr,x7e,ESr,CSr,bn,wSr,$7e,ASr,ySr,k7e,LSr,xSr,S7e,$Sr,kSr,SSr,Pe,kC,R7e,RSr,PSr,LY,BSr,ISr,qSr,SC,P7e,NSr,jSr,xY,DSr,GSr,OSr,RC,B7e,VSr,XSr,$Y,zSr,WSr,QSr,PC,I7e,HSr,USr,kY,JSr,YSr,KSr,BC,q7e,ZSr,eRr,SY,oRr,rRr,tRr,IC,N7e,aRr,nRr,RY,sRr,lRr,iRr,qC,j7e,dRr,cRr,PY,fRr,mRr,gRr,NC,D7e,hRr,pRr,BY,uRr,_Rr,bRr,jC,G7e,vRr,FRr,IY,TRr,MRr,ERr,DC,QNe,Xc,GC,O7e,N9,CRr,V7e,wRr,HNe,ur,j9,ARr,zc,yRr,qY,LRr,xRr,NY,$Rr,kRr,SRr,D9,RRr,X7e,PRr,BRr,IRr,Wt,G9,qRr,z7e,NRr,jRr,Wc,DRr,W7e,GRr,ORr,jY,VRr,XRr,zRr,OC,WRr,Xr,O9,QRr,Q7e,HRr,URr,vn,JRr,H7e,YRr,KRr,U7e,ZRr,ePr,J7e,oPr,rPr,tPr,xe,VC,Y7e,aPr,nPr,DY,sPr,lPr,iPr,XC,K7e,dPr,cPr,GY,fPr,mPr,gPr,zC,Z7e,hPr,pPr,OY,uPr,_Pr,bPr,WC,eMe,vPr,FPr,VY,TPr,MPr,EPr,QC,oMe,CPr,wPr,XY,APr,yPr,LPr,HC,rMe,xPr,$Pr,zY,kPr,SPr,RPr,UC,tMe,PPr,BPr,WY,IPr,qPr,NPr,JC,aMe,jPr,DPr,QY,GPr,OPr,VPr,YC,nMe,XPr,zPr,HY,WPr,QPr,HPr,KC,sMe,UPr,JPr,UY,YPr,KPr,ZPr,ZC,UNe,Qc,e5,lMe,V9,eBr,iMe,oBr,JNe,_r,X9,rBr,Hc,tBr,JY,aBr,nBr,YY,sBr,lBr,iBr,z9,dBr,dMe,cBr,fBr,mBr,Qt,W9,gBr,cMe,hBr,pBr,Uc,uBr,fMe,_Br,bBr,KY,vBr,FBr,TBr,o5,MBr,zr,Q9,EBr,mMe,CBr,wBr,Fn,ABr,gMe,yBr,LBr,hMe,xBr,$Br,pMe,kBr,SBr,RBr,$e,r5,uMe,PBr,BBr,ZY,IBr,qBr,NBr,t5,_Me,jBr,DBr,eK,GBr,OBr,VBr,a5,bMe,XBr,zBr,oK,WBr,QBr,HBr,n5,vMe,UBr,JBr,rK,YBr,KBr,ZBr,s5,FMe,eIr,oIr,tK,rIr,tIr,aIr,l5,TMe,nIr,sIr,aK,lIr,iIr,dIr,i5,MMe,cIr,fIr,nK,mIr,gIr,hIr,d5,EMe,pIr,uIr,sK,_Ir,bIr,vIr,c5,CMe,FIr,TIr,lK,MIr,EIr,CIr,f5,wMe,wIr,AIr,iK,yIr,LIr,xIr,m5,YNe,Jc,g5,AMe,H9,$Ir,yMe,kIr,KNe,br,U9,SIr,Yc,RIr,dK,PIr,BIr,cK,IIr,qIr,NIr,J9,jIr,LMe,DIr,GIr,OIr,Ht,Y9,VIr,xMe,XIr,zIr,Kc,WIr,$Me,QIr,HIr,fK,UIr,JIr,YIr,h5,KIr,Wr,K9,ZIr,kMe,eqr,oqr,Tn,rqr,SMe,tqr,aqr,RMe,nqr,sqr,PMe,lqr,iqr,dqr,De,p5,BMe,cqr,fqr,mK,mqr,gqr,hqr,u5,IMe,pqr,uqr,gK,_qr,bqr,vqr,_5,qMe,Fqr,Tqr,hK,Mqr,Eqr,Cqr,b5,NMe,wqr,Aqr,pK,yqr,Lqr,xqr,v5,jMe,$qr,kqr,uK,Sqr,Rqr,Pqr,F5,DMe,Bqr,Iqr,_K,qqr,Nqr,jqr,T5,GMe,Dqr,Gqr,bK,Oqr,Vqr,Xqr,M5,OMe,zqr,Wqr,vK,Qqr,Hqr,Uqr,E5,ZNe,Zc,C5,VMe,Z9,Jqr,XMe,Yqr,eje,vr,ex,Kqr,ef,Zqr,FK,eNr,oNr,TK,rNr,tNr,aNr,ox,nNr,zMe,sNr,lNr,iNr,Ut,rx,dNr,WMe,cNr,fNr,of,mNr,QMe,gNr,hNr,MK,pNr,uNr,_Nr,w5,bNr,Qr,tx,vNr,HMe,FNr,TNr,Mn,MNr,UMe,ENr,CNr,JMe,wNr,ANr,YMe,yNr,LNr,xNr,Ge,A5,KMe,$Nr,kNr,EK,SNr,RNr,PNr,y5,ZMe,BNr,INr,CK,qNr,NNr,jNr,L5,e4e,DNr,GNr,wK,ONr,VNr,XNr,x5,o4e,zNr,WNr,AK,QNr,HNr,UNr,$5,r4e,JNr,YNr,yK,KNr,ZNr,ejr,k5,t4e,ojr,rjr,LK,tjr,ajr,njr,S5,a4e,sjr,ljr,xK,ijr,djr,cjr,R5,n4e,fjr,mjr,$K,gjr,hjr,pjr,P5,oje,rf,B5,s4e,ax,ujr,l4e,_jr,rje,Fr,nx,bjr,tf,vjr,kK,Fjr,Tjr,SK,Mjr,Ejr,Cjr,sx,wjr,i4e,Ajr,yjr,Ljr,Jt,lx,xjr,d4e,$jr,kjr,af,Sjr,c4e,Rjr,Pjr,RK,Bjr,Ijr,qjr,I5,Njr,Hr,ix,jjr,f4e,Djr,Gjr,En,Ojr,m4e,Vjr,Xjr,g4e,zjr,Wjr,h4e,Qjr,Hjr,Ujr,p4e,q5,u4e,Jjr,Yjr,PK,Kjr,Zjr,eDr,N5,tje,nf,j5,_4e,dx,oDr,b4e,rDr,aje,Tr,cx,tDr,sf,aDr,BK,nDr,sDr,IK,lDr,iDr,dDr,fx,cDr,v4e,fDr,mDr,gDr,Yt,mx,hDr,F4e,pDr,uDr,lf,_Dr,T4e,bDr,vDr,qK,FDr,TDr,MDr,D5,EDr,Ur,gx,CDr,M4e,wDr,ADr,Cn,yDr,E4e,LDr,xDr,C4e,$Dr,kDr,w4e,SDr,RDr,PDr,hx,G5,A4e,BDr,IDr,NK,qDr,NDr,jDr,O5,y4e,DDr,GDr,jK,ODr,VDr,XDr,V5,nje,df,X5,L4e,px,zDr,x4e,WDr,sje,Mr,ux,QDr,cf,HDr,DK,UDr,JDr,GK,YDr,KDr,ZDr,_x,eGr,$4e,oGr,rGr,tGr,Kt,bx,aGr,k4e,nGr,sGr,ff,lGr,S4e,iGr,dGr,OK,cGr,fGr,mGr,z5,gGr,Jr,vx,hGr,R4e,pGr,uGr,wn,_Gr,P4e,bGr,vGr,B4e,FGr,TGr,I4e,MGr,EGr,CGr,q4e,W5,N4e,wGr,AGr,VK,yGr,LGr,xGr,Q5,lje;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),pA=new oe({}),uA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new $Gr({props:{warning:!0,$$slots:{default:[G8t]},$$scope:{ctx:L}}}),_A=new oe({}),bA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L576"}}),TA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L599"}}),Fg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),MA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L722"}}),EA=new oe({}),CA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L389"}}),yA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17060/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L403"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),LA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L599"}}),xA=new oe({}),$A=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),$h=new $Gr({props:{$$slots:{default:[X8t]},$$scope:{ctx:L}}}),kh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),PA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),BA=new oe({}),IA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L88"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L102"}}),Yh=new $Gr({props:{$$slots:{default:[W8t]},$$scope:{ctx:L}}}),Kh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L255"}}),GA=new oe({}),OA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L729"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),op=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Qu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),WA=new oe({}),QA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L736"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Uu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),N_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),YA=new oe({}),KA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L751"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),D_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),ry=new oe({}),ty=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L758"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),ly=new oe({}),iy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L765"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),f1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),my=new oe({}),gy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L774"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),_y=new oe({}),by=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L808"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),n2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),My=new oe({}),Ey=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L815"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),l2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),yy=new oe({}),Ly=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L801"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),K2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),Sy=new oe({}),Ry=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L783"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),ev=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),qy=new oe({}),Ny=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L790"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),Oy=new oe({}),Vy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L824"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),Qy=new oe({}),Hy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L863"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),Ky=new oe({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L870"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),tL=new oe({}),aL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L893"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),iL=new oe({}),dL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L877"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),gL=new oe({}),hL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L884"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L902"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L909"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L856"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),BL=new oe({}),IL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L831"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),DL=new oe({}),GL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L838"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),x6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),zL=new oe({}),WL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L847"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),JL=new oe({}),YL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),o8=new oe({}),r8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),s8=new oe({}),l8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),f8=new oe({}),m8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),u8=new oe({}),_8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),T8=new oe({}),M8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),C8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),A8=new oe({}),y8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),k8=new oe({}),S8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),I8=new oe({}),q8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),O8=new oe({}),V8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),Q8=new oe({}),H8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),K8=new oe({}),Z8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),t9=new oe({}),a9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),g9=new oe({}),h9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),u9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),b9=new oe({}),v9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),T9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),E9=new oe({}),C9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),A9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),L9=new oe({}),x9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),k9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),R9=new oe({}),P9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),I9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),N9=new oe({}),j9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),G9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),H9=new oe({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),Z9=new oe({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),px=new oe({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),fA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),mA=o("AutoConfig"),Ln=o(", "),xn=a("a"),gA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),hA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),R$=o("will create a model that is an instance of "),_i=a("a"),P$=o("BertModel"),B$=o("."),Eo=l(),wa=a("p"),I$=o("There is one class of "),bf=a("code"),q$=o("AutoModel"),pGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),aqe=l(),bi=a("h2"),vf=a("a"),Iee=a("span"),F(pA.$$.fragment),uGe=l(),qee=a("span"),_Ge=o("Extending the Auto Classes"),nqe=l(),kn=a("p"),bGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nee=a("code"),vGe=o("NewModel"),FGe=o(", make sure you have a "),jee=a("code"),TGe=o("NewModelConfig"),MGe=o(` then you can add those to the auto
classes like this:`),sqe=l(),F(uA.$$.fragment),lqe=l(),N$=a("p"),EGe=o("You will then be able to use the auto classes like you would usually do!"),iqe=l(),F(Ff.$$.fragment),dqe=l(),vi=a("h2"),Tf=a("a"),Dee=a("span"),F(_A.$$.fragment),CGe=l(),Gee=a("span"),wGe=o("AutoConfig"),cqe=l(),Co=a("div"),F(bA.$$.fragment),AGe=l(),vA=a("p"),yGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j$=a("a"),LGe=o("from_pretrained()"),xGe=o(" class method."),$Ge=l(),FA=a("p"),kGe=o("This class cannot be instantiated directly using "),Oee=a("code"),SGe=o("__init__()"),RGe=o(" (throws an error)."),PGe=l(),Er=a("div"),F(TA.$$.fragment),BGe=l(),Vee=a("p"),IGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),qGe=l(),Fi=a("p"),NGe=o("The configuration class to instantiate is selected based on the "),Xee=a("code"),jGe=o("model_type"),DGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zee=a("code"),GGe=o("pretrained_model_name_or_path"),OGe=o(":"),VGe=l(),A=a("ul"),Mf=a("li"),Wee=a("strong"),XGe=o("albert"),zGe=o(" \u2014 "),D$=a("a"),WGe=o("AlbertConfig"),QGe=o(" (ALBERT model)"),HGe=l(),Ef=a("li"),Qee=a("strong"),UGe=o("bart"),JGe=o(" \u2014 "),G$=a("a"),YGe=o("BartConfig"),KGe=o(" (BART model)"),ZGe=l(),Cf=a("li"),Hee=a("strong"),eOe=o("beit"),oOe=o(" \u2014 "),O$=a("a"),rOe=o("BeitConfig"),tOe=o(" (BEiT model)"),aOe=l(),wf=a("li"),Uee=a("strong"),nOe=o("bert"),sOe=o(" \u2014 "),V$=a("a"),lOe=o("BertConfig"),iOe=o(" (BERT model)"),dOe=l(),Af=a("li"),Jee=a("strong"),cOe=o("bert-generation"),fOe=o(" \u2014 "),X$=a("a"),mOe=o("BertGenerationConfig"),gOe=o(" (Bert Generation model)"),hOe=l(),yf=a("li"),Yee=a("strong"),pOe=o("big_bird"),uOe=o(" \u2014 "),z$=a("a"),_Oe=o("BigBirdConfig"),bOe=o(" (BigBird model)"),vOe=l(),Lf=a("li"),Kee=a("strong"),FOe=o("bigbird_pegasus"),TOe=o(" \u2014 "),W$=a("a"),MOe=o("BigBirdPegasusConfig"),EOe=o(" (BigBirdPegasus model)"),COe=l(),xf=a("li"),Zee=a("strong"),wOe=o("blenderbot"),AOe=o(" \u2014 "),Q$=a("a"),yOe=o("BlenderbotConfig"),LOe=o(" (Blenderbot model)"),xOe=l(),$f=a("li"),eoe=a("strong"),$Oe=o("blenderbot-small"),kOe=o(" \u2014 "),H$=a("a"),SOe=o("BlenderbotSmallConfig"),ROe=o(" (BlenderbotSmall model)"),POe=l(),kf=a("li"),ooe=a("strong"),BOe=o("camembert"),IOe=o(" \u2014 "),U$=a("a"),qOe=o("CamembertConfig"),NOe=o(" (CamemBERT model)"),jOe=l(),Sf=a("li"),roe=a("strong"),DOe=o("canine"),GOe=o(" \u2014 "),J$=a("a"),OOe=o("CanineConfig"),VOe=o(" (Canine model)"),XOe=l(),Rf=a("li"),toe=a("strong"),zOe=o("clip"),WOe=o(" \u2014 "),Y$=a("a"),QOe=o("CLIPConfig"),HOe=o(" (CLIP model)"),UOe=l(),Pf=a("li"),aoe=a("strong"),JOe=o("convbert"),YOe=o(" \u2014 "),K$=a("a"),KOe=o("ConvBertConfig"),ZOe=o(" (ConvBERT model)"),eVe=l(),Bf=a("li"),noe=a("strong"),oVe=o("convnext"),rVe=o(" \u2014 "),Z$=a("a"),tVe=o("ConvNextConfig"),aVe=o(" (ConvNext model)"),nVe=l(),If=a("li"),soe=a("strong"),sVe=o("ctrl"),lVe=o(" \u2014 "),ek=a("a"),iVe=o("CTRLConfig"),dVe=o(" (CTRL model)"),cVe=l(),qf=a("li"),loe=a("strong"),fVe=o("data2vec-audio"),mVe=o(" \u2014 "),ok=a("a"),gVe=o("Data2VecAudioConfig"),hVe=o(" (Data2VecAudio model)"),pVe=l(),Nf=a("li"),ioe=a("strong"),uVe=o("data2vec-text"),_Ve=o(" \u2014 "),rk=a("a"),bVe=o("Data2VecTextConfig"),vVe=o(" (Data2VecText model)"),FVe=l(),jf=a("li"),doe=a("strong"),TVe=o("data2vec-vision"),MVe=o(" \u2014 "),tk=a("a"),EVe=o("Data2VecVisionConfig"),CVe=o(" (Data2VecVision model)"),wVe=l(),Df=a("li"),coe=a("strong"),AVe=o("deberta"),yVe=o(" \u2014 "),ak=a("a"),LVe=o("DebertaConfig"),xVe=o(" (DeBERTa model)"),$Ve=l(),Gf=a("li"),foe=a("strong"),kVe=o("deberta-v2"),SVe=o(" \u2014 "),nk=a("a"),RVe=o("DebertaV2Config"),PVe=o(" (DeBERTa-v2 model)"),BVe=l(),Of=a("li"),moe=a("strong"),IVe=o("decision_transformer"),qVe=o(" \u2014 "),sk=a("a"),NVe=o("DecisionTransformerConfig"),jVe=o(" (Decision Transformer model)"),DVe=l(),Vf=a("li"),goe=a("strong"),GVe=o("deit"),OVe=o(" \u2014 "),lk=a("a"),VVe=o("DeiTConfig"),XVe=o(" (DeiT model)"),zVe=l(),Xf=a("li"),hoe=a("strong"),WVe=o("detr"),QVe=o(" \u2014 "),ik=a("a"),HVe=o("DetrConfig"),UVe=o(" (DETR model)"),JVe=l(),zf=a("li"),poe=a("strong"),YVe=o("distilbert"),KVe=o(" \u2014 "),dk=a("a"),ZVe=o("DistilBertConfig"),eXe=o(" (DistilBERT model)"),oXe=l(),Wf=a("li"),uoe=a("strong"),rXe=o("dpr"),tXe=o(" \u2014 "),ck=a("a"),aXe=o("DPRConfig"),nXe=o(" (DPR model)"),sXe=l(),Qf=a("li"),_oe=a("strong"),lXe=o("dpt"),iXe=o(" \u2014 "),fk=a("a"),dXe=o("DPTConfig"),cXe=o(" (DPT model)"),fXe=l(),Hf=a("li"),boe=a("strong"),mXe=o("electra"),gXe=o(" \u2014 "),mk=a("a"),hXe=o("ElectraConfig"),pXe=o(" (ELECTRA model)"),uXe=l(),Uf=a("li"),voe=a("strong"),_Xe=o("encoder-decoder"),bXe=o(" \u2014 "),gk=a("a"),vXe=o("EncoderDecoderConfig"),FXe=o(" (Encoder decoder model)"),TXe=l(),Jf=a("li"),Foe=a("strong"),MXe=o("flaubert"),EXe=o(" \u2014 "),hk=a("a"),CXe=o("FlaubertConfig"),wXe=o(" (FlauBERT model)"),AXe=l(),Yf=a("li"),Toe=a("strong"),yXe=o("flava"),LXe=o(" \u2014 "),pk=a("a"),xXe=o("FlavaConfig"),$Xe=o(" (Flava model)"),kXe=l(),Kf=a("li"),Moe=a("strong"),SXe=o("fnet"),RXe=o(" \u2014 "),uk=a("a"),PXe=o("FNetConfig"),BXe=o(" (FNet model)"),IXe=l(),Zf=a("li"),Eoe=a("strong"),qXe=o("fsmt"),NXe=o(" \u2014 "),_k=a("a"),jXe=o("FSMTConfig"),DXe=o(" (FairSeq Machine-Translation model)"),GXe=l(),em=a("li"),Coe=a("strong"),OXe=o("funnel"),VXe=o(" \u2014 "),bk=a("a"),XXe=o("FunnelConfig"),zXe=o(" (Funnel Transformer model)"),WXe=l(),om=a("li"),woe=a("strong"),QXe=o("glpn"),HXe=o(" \u2014 "),vk=a("a"),UXe=o("GLPNConfig"),JXe=o(" (GLPN model)"),YXe=l(),rm=a("li"),Aoe=a("strong"),KXe=o("gpt2"),ZXe=o(" \u2014 "),Fk=a("a"),eze=o("GPT2Config"),oze=o(" (OpenAI GPT-2 model)"),rze=l(),tm=a("li"),yoe=a("strong"),tze=o("gpt_neo"),aze=o(" \u2014 "),Tk=a("a"),nze=o("GPTNeoConfig"),sze=o(" (GPT Neo model)"),lze=l(),am=a("li"),Loe=a("strong"),ize=o("gptj"),dze=o(" \u2014 "),Mk=a("a"),cze=o("GPTJConfig"),fze=o(" (GPT-J model)"),mze=l(),nm=a("li"),xoe=a("strong"),gze=o("hubert"),hze=o(" \u2014 "),Ek=a("a"),pze=o("HubertConfig"),uze=o(" (Hubert model)"),_ze=l(),sm=a("li"),$oe=a("strong"),bze=o("ibert"),vze=o(" \u2014 "),Ck=a("a"),Fze=o("IBertConfig"),Tze=o(" (I-BERT model)"),Mze=l(),lm=a("li"),koe=a("strong"),Eze=o("imagegpt"),Cze=o(" \u2014 "),wk=a("a"),wze=o("ImageGPTConfig"),Aze=o(" (ImageGPT model)"),yze=l(),im=a("li"),Soe=a("strong"),Lze=o("layoutlm"),xze=o(" \u2014 "),Ak=a("a"),$ze=o("LayoutLMConfig"),kze=o(" (LayoutLM model)"),Sze=l(),dm=a("li"),Roe=a("strong"),Rze=o("layoutlmv2"),Pze=o(" \u2014 "),yk=a("a"),Bze=o("LayoutLMv2Config"),Ize=o(" (LayoutLMv2 model)"),qze=l(),cm=a("li"),Poe=a("strong"),Nze=o("layoutlmv3"),jze=o(" \u2014 "),Lk=a("a"),Dze=o("LayoutLMv3Config"),Gze=o(" (LayoutLMv3 model)"),Oze=l(),fm=a("li"),Boe=a("strong"),Vze=o("led"),Xze=o(" \u2014 "),xk=a("a"),zze=o("LEDConfig"),Wze=o(" (LED model)"),Qze=l(),mm=a("li"),Ioe=a("strong"),Hze=o("longformer"),Uze=o(" \u2014 "),$k=a("a"),Jze=o("LongformerConfig"),Yze=o(" (Longformer model)"),Kze=l(),gm=a("li"),qoe=a("strong"),Zze=o("luke"),eWe=o(" \u2014 "),kk=a("a"),oWe=o("LukeConfig"),rWe=o(" (LUKE model)"),tWe=l(),hm=a("li"),Noe=a("strong"),aWe=o("lxmert"),nWe=o(" \u2014 "),Sk=a("a"),sWe=o("LxmertConfig"),lWe=o(" (LXMERT model)"),iWe=l(),pm=a("li"),joe=a("strong"),dWe=o("m2m_100"),cWe=o(" \u2014 "),Rk=a("a"),fWe=o("M2M100Config"),mWe=o(" (M2M100 model)"),gWe=l(),um=a("li"),Doe=a("strong"),hWe=o("marian"),pWe=o(" \u2014 "),Pk=a("a"),uWe=o("MarianConfig"),_We=o(" (Marian model)"),bWe=l(),_m=a("li"),Goe=a("strong"),vWe=o("maskformer"),FWe=o(" \u2014 "),Bk=a("a"),TWe=o("MaskFormerConfig"),MWe=o(" (MaskFormer model)"),EWe=l(),bm=a("li"),Ooe=a("strong"),CWe=o("mbart"),wWe=o(" \u2014 "),Ik=a("a"),AWe=o("MBartConfig"),yWe=o(" (mBART model)"),LWe=l(),vm=a("li"),Voe=a("strong"),xWe=o("megatron-bert"),$We=o(" \u2014 "),qk=a("a"),kWe=o("MegatronBertConfig"),SWe=o(" (MegatronBert model)"),RWe=l(),Fm=a("li"),Xoe=a("strong"),PWe=o("mobilebert"),BWe=o(" \u2014 "),Nk=a("a"),IWe=o("MobileBertConfig"),qWe=o(" (MobileBERT model)"),NWe=l(),Tm=a("li"),zoe=a("strong"),jWe=o("mpnet"),DWe=o(" \u2014 "),jk=a("a"),GWe=o("MPNetConfig"),OWe=o(" (MPNet model)"),VWe=l(),Mm=a("li"),Woe=a("strong"),XWe=o("mt5"),zWe=o(" \u2014 "),Dk=a("a"),WWe=o("MT5Config"),QWe=o(" (mT5 model)"),HWe=l(),Em=a("li"),Qoe=a("strong"),UWe=o("nystromformer"),JWe=o(" \u2014 "),Gk=a("a"),YWe=o("NystromformerConfig"),KWe=o(" (Nystromformer model)"),ZWe=l(),Cm=a("li"),Hoe=a("strong"),eQe=o("openai-gpt"),oQe=o(" \u2014 "),Ok=a("a"),rQe=o("OpenAIGPTConfig"),tQe=o(" (OpenAI GPT model)"),aQe=l(),wm=a("li"),Uoe=a("strong"),nQe=o("opt"),sQe=o(" \u2014 "),Vk=a("a"),lQe=o("OPTConfig"),iQe=o(" (OPT model)"),dQe=l(),Am=a("li"),Joe=a("strong"),cQe=o("pegasus"),fQe=o(" \u2014 "),Xk=a("a"),mQe=o("PegasusConfig"),gQe=o(" (Pegasus model)"),hQe=l(),ym=a("li"),Yoe=a("strong"),pQe=o("perceiver"),uQe=o(" \u2014 "),zk=a("a"),_Qe=o("PerceiverConfig"),bQe=o(" (Perceiver model)"),vQe=l(),Lm=a("li"),Koe=a("strong"),FQe=o("plbart"),TQe=o(" \u2014 "),Wk=a("a"),MQe=o("PLBartConfig"),EQe=o(" (PLBart model)"),CQe=l(),xm=a("li"),Zoe=a("strong"),wQe=o("poolformer"),AQe=o(" \u2014 "),Qk=a("a"),yQe=o("PoolFormerConfig"),LQe=o(" (PoolFormer model)"),xQe=l(),$m=a("li"),ere=a("strong"),$Qe=o("prophetnet"),kQe=o(" \u2014 "),Hk=a("a"),SQe=o("ProphetNetConfig"),RQe=o(" (ProphetNet model)"),PQe=l(),km=a("li"),ore=a("strong"),BQe=o("qdqbert"),IQe=o(" \u2014 "),Uk=a("a"),qQe=o("QDQBertConfig"),NQe=o(" (QDQBert model)"),jQe=l(),Sm=a("li"),rre=a("strong"),DQe=o("rag"),GQe=o(" \u2014 "),Jk=a("a"),OQe=o("RagConfig"),VQe=o(" (RAG model)"),XQe=l(),Rm=a("li"),tre=a("strong"),zQe=o("realm"),WQe=o(" \u2014 "),Yk=a("a"),QQe=o("RealmConfig"),HQe=o(" (Realm model)"),UQe=l(),Pm=a("li"),are=a("strong"),JQe=o("reformer"),YQe=o(" \u2014 "),Kk=a("a"),KQe=o("ReformerConfig"),ZQe=o(" (Reformer model)"),eHe=l(),Bm=a("li"),nre=a("strong"),oHe=o("regnet"),rHe=o(" \u2014 "),Zk=a("a"),tHe=o("RegNetConfig"),aHe=o(" (RegNet model)"),nHe=l(),Im=a("li"),sre=a("strong"),sHe=o("rembert"),lHe=o(" \u2014 "),eS=a("a"),iHe=o("RemBertConfig"),dHe=o(" (RemBERT model)"),cHe=l(),qm=a("li"),lre=a("strong"),fHe=o("resnet"),mHe=o(" \u2014 "),oS=a("a"),gHe=o("ResNetConfig"),hHe=o(" (ResNet model)"),pHe=l(),Nm=a("li"),ire=a("strong"),uHe=o("retribert"),_He=o(" \u2014 "),rS=a("a"),bHe=o("RetriBertConfig"),vHe=o(" (RetriBERT model)"),FHe=l(),jm=a("li"),dre=a("strong"),THe=o("roberta"),MHe=o(" \u2014 "),tS=a("a"),EHe=o("RobertaConfig"),CHe=o(" (RoBERTa model)"),wHe=l(),Dm=a("li"),cre=a("strong"),AHe=o("roformer"),yHe=o(" \u2014 "),aS=a("a"),LHe=o("RoFormerConfig"),xHe=o(" (RoFormer model)"),$He=l(),Gm=a("li"),fre=a("strong"),kHe=o("segformer"),SHe=o(" \u2014 "),nS=a("a"),RHe=o("SegformerConfig"),PHe=o(" (SegFormer model)"),BHe=l(),Om=a("li"),mre=a("strong"),IHe=o("sew"),qHe=o(" \u2014 "),sS=a("a"),NHe=o("SEWConfig"),jHe=o(" (SEW model)"),DHe=l(),Vm=a("li"),gre=a("strong"),GHe=o("sew-d"),OHe=o(" \u2014 "),lS=a("a"),VHe=o("SEWDConfig"),XHe=o(" (SEW-D model)"),zHe=l(),Xm=a("li"),hre=a("strong"),WHe=o("speech-encoder-decoder"),QHe=o(" \u2014 "),iS=a("a"),HHe=o("SpeechEncoderDecoderConfig"),UHe=o(" (Speech Encoder decoder model)"),JHe=l(),zm=a("li"),pre=a("strong"),YHe=o("speech_to_text"),KHe=o(" \u2014 "),dS=a("a"),ZHe=o("Speech2TextConfig"),eUe=o(" (Speech2Text model)"),oUe=l(),Wm=a("li"),ure=a("strong"),rUe=o("speech_to_text_2"),tUe=o(" \u2014 "),cS=a("a"),aUe=o("Speech2Text2Config"),nUe=o(" (Speech2Text2 model)"),sUe=l(),Qm=a("li"),_re=a("strong"),lUe=o("splinter"),iUe=o(" \u2014 "),fS=a("a"),dUe=o("SplinterConfig"),cUe=o(" (Splinter model)"),fUe=l(),Hm=a("li"),bre=a("strong"),mUe=o("squeezebert"),gUe=o(" \u2014 "),mS=a("a"),hUe=o("SqueezeBertConfig"),pUe=o(" (SqueezeBERT model)"),uUe=l(),Um=a("li"),vre=a("strong"),_Ue=o("swin"),bUe=o(" \u2014 "),gS=a("a"),vUe=o("SwinConfig"),FUe=o(" (Swin model)"),TUe=l(),Jm=a("li"),Fre=a("strong"),MUe=o("t5"),EUe=o(" \u2014 "),hS=a("a"),CUe=o("T5Config"),wUe=o(" (T5 model)"),AUe=l(),Ym=a("li"),Tre=a("strong"),yUe=o("tapas"),LUe=o(" \u2014 "),pS=a("a"),xUe=o("TapasConfig"),$Ue=o(" (TAPAS model)"),kUe=l(),Km=a("li"),Mre=a("strong"),SUe=o("transfo-xl"),RUe=o(" \u2014 "),uS=a("a"),PUe=o("TransfoXLConfig"),BUe=o(" (Transformer-XL model)"),IUe=l(),Zm=a("li"),Ere=a("strong"),qUe=o("trocr"),NUe=o(" \u2014 "),_S=a("a"),jUe=o("TrOCRConfig"),DUe=o(" (TrOCR model)"),GUe=l(),eg=a("li"),Cre=a("strong"),OUe=o("unispeech"),VUe=o(" \u2014 "),bS=a("a"),XUe=o("UniSpeechConfig"),zUe=o(" (UniSpeech model)"),WUe=l(),og=a("li"),wre=a("strong"),QUe=o("unispeech-sat"),HUe=o(" \u2014 "),vS=a("a"),UUe=o("UniSpeechSatConfig"),JUe=o(" (UniSpeechSat model)"),YUe=l(),rg=a("li"),Are=a("strong"),KUe=o("van"),ZUe=o(" \u2014 "),FS=a("a"),eJe=o("VanConfig"),oJe=o(" (VAN model)"),rJe=l(),tg=a("li"),yre=a("strong"),tJe=o("vilt"),aJe=o(" \u2014 "),TS=a("a"),nJe=o("ViltConfig"),sJe=o(" (ViLT model)"),lJe=l(),ag=a("li"),Lre=a("strong"),iJe=o("vision-encoder-decoder"),dJe=o(" \u2014 "),MS=a("a"),cJe=o("VisionEncoderDecoderConfig"),fJe=o(" (Vision Encoder decoder model)"),mJe=l(),ng=a("li"),xre=a("strong"),gJe=o("vision-text-dual-encoder"),hJe=o(" \u2014 "),ES=a("a"),pJe=o("VisionTextDualEncoderConfig"),uJe=o(" (VisionTextDualEncoder model)"),_Je=l(),sg=a("li"),$re=a("strong"),bJe=o("visual_bert"),vJe=o(" \u2014 "),CS=a("a"),FJe=o("VisualBertConfig"),TJe=o(" (VisualBert model)"),MJe=l(),lg=a("li"),kre=a("strong"),EJe=o("vit"),CJe=o(" \u2014 "),wS=a("a"),wJe=o("ViTConfig"),AJe=o(" (ViT model)"),yJe=l(),ig=a("li"),Sre=a("strong"),LJe=o("vit_mae"),xJe=o(" \u2014 "),AS=a("a"),$Je=o("ViTMAEConfig"),kJe=o(" (ViTMAE model)"),SJe=l(),dg=a("li"),Rre=a("strong"),RJe=o("wav2vec2"),PJe=o(" \u2014 "),yS=a("a"),BJe=o("Wav2Vec2Config"),IJe=o(" (Wav2Vec2 model)"),qJe=l(),cg=a("li"),Pre=a("strong"),NJe=o("wav2vec2-conformer"),jJe=o(" \u2014 "),LS=a("a"),DJe=o("Wav2Vec2ConformerConfig"),GJe=o(" (Wav2Vec2-Conformer model)"),OJe=l(),fg=a("li"),Bre=a("strong"),VJe=o("wavlm"),XJe=o(" \u2014 "),xS=a("a"),zJe=o("WavLMConfig"),WJe=o(" (WavLM model)"),QJe=l(),mg=a("li"),Ire=a("strong"),HJe=o("xglm"),UJe=o(" \u2014 "),$S=a("a"),JJe=o("XGLMConfig"),YJe=o(" (XGLM model)"),KJe=l(),gg=a("li"),qre=a("strong"),ZJe=o("xlm"),eYe=o(" \u2014 "),kS=a("a"),oYe=o("XLMConfig"),rYe=o(" (XLM model)"),tYe=l(),hg=a("li"),Nre=a("strong"),aYe=o("xlm-prophetnet"),nYe=o(" \u2014 "),SS=a("a"),sYe=o("XLMProphetNetConfig"),lYe=o(" (XLMProphetNet model)"),iYe=l(),pg=a("li"),jre=a("strong"),dYe=o("xlm-roberta"),cYe=o(" \u2014 "),RS=a("a"),fYe=o("XLMRobertaConfig"),mYe=o(" (XLM-RoBERTa model)"),gYe=l(),ug=a("li"),Dre=a("strong"),hYe=o("xlm-roberta-xl"),pYe=o(" \u2014 "),PS=a("a"),uYe=o("XLMRobertaXLConfig"),_Ye=o(" (XLM-RoBERTa-XL model)"),bYe=l(),_g=a("li"),Gre=a("strong"),vYe=o("xlnet"),FYe=o(" \u2014 "),BS=a("a"),TYe=o("XLNetConfig"),MYe=o(" (XLNet model)"),EYe=l(),bg=a("li"),Ore=a("strong"),CYe=o("yolos"),wYe=o(" \u2014 "),IS=a("a"),AYe=o("YolosConfig"),yYe=o(" (YOLOS model)"),LYe=l(),vg=a("li"),Vre=a("strong"),xYe=o("yoso"),$Ye=o(" \u2014 "),qS=a("a"),kYe=o("YosoConfig"),SYe=o(" (YOSO model)"),RYe=l(),F(Fg.$$.fragment),PYe=l(),Tg=a("div"),F(MA.$$.fragment),BYe=l(),Xre=a("p"),IYe=o("Register a new configuration for this class."),fqe=l(),Ti=a("h2"),Mg=a("a"),zre=a("span"),F(EA.$$.fragment),qYe=l(),Wre=a("span"),NYe=o("AutoTokenizer"),mqe=l(),wo=a("div"),F(CA.$$.fragment),jYe=l(),wA=a("p"),DYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=a("a"),GYe=o("AutoTokenizer.from_pretrained()"),OYe=o(" class method."),VYe=l(),AA=a("p"),XYe=o("This class cannot be instantiated directly using "),Qre=a("code"),zYe=o("__init__()"),WYe=o(" (throws an error)."),QYe=l(),Cr=a("div"),F(yA.$$.fragment),HYe=l(),Hre=a("p"),UYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JYe=l(),Aa=a("p"),YYe=o("The tokenizer class to instantiate is selected based on the "),Ure=a("code"),KYe=o("model_type"),ZYe=o(` property of the config object (either
passed as an argument or loaded from `),Jre=a("code"),eKe=o("pretrained_model_name_or_path"),oKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yre=a("code"),rKe=o("pretrained_model_name_or_path"),tKe=o(":"),aKe=l(),k=a("ul"),Sn=a("li"),Kre=a("strong"),nKe=o("albert"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("AlbertTokenizer"),iKe=o(" or "),DS=a("a"),dKe=o("AlbertTokenizerFast"),cKe=o(" (ALBERT model)"),fKe=l(),Rn=a("li"),Zre=a("strong"),mKe=o("bart"),gKe=o(" \u2014 "),GS=a("a"),hKe=o("BartTokenizer"),pKe=o(" or "),OS=a("a"),uKe=o("BartTokenizerFast"),_Ke=o(" (BART model)"),bKe=l(),Pn=a("li"),ete=a("strong"),vKe=o("barthez"),FKe=o(" \u2014 "),VS=a("a"),TKe=o("BarthezTokenizer"),MKe=o(" or "),XS=a("a"),EKe=o("BarthezTokenizerFast"),CKe=o(" (BARThez model)"),wKe=l(),Eg=a("li"),ote=a("strong"),AKe=o("bartpho"),yKe=o(" \u2014 "),zS=a("a"),LKe=o("BartphoTokenizer"),xKe=o(" (BARTpho model)"),$Ke=l(),Bn=a("li"),rte=a("strong"),kKe=o("bert"),SKe=o(" \u2014 "),WS=a("a"),RKe=o("BertTokenizer"),PKe=o(" or "),QS=a("a"),BKe=o("BertTokenizerFast"),IKe=o(" (BERT model)"),qKe=l(),Cg=a("li"),tte=a("strong"),NKe=o("bert-generation"),jKe=o(" \u2014 "),HS=a("a"),DKe=o("BertGenerationTokenizer"),GKe=o(" (Bert Generation model)"),OKe=l(),wg=a("li"),ate=a("strong"),VKe=o("bert-japanese"),XKe=o(" \u2014 "),US=a("a"),zKe=o("BertJapaneseTokenizer"),WKe=o(" (BertJapanese model)"),QKe=l(),Ag=a("li"),nte=a("strong"),HKe=o("bertweet"),UKe=o(" \u2014 "),JS=a("a"),JKe=o("BertweetTokenizer"),YKe=o(" (Bertweet model)"),KKe=l(),In=a("li"),ste=a("strong"),ZKe=o("big_bird"),eZe=o(" \u2014 "),YS=a("a"),oZe=o("BigBirdTokenizer"),rZe=o(" or "),KS=a("a"),tZe=o("BigBirdTokenizerFast"),aZe=o(" (BigBird model)"),nZe=l(),qn=a("li"),lte=a("strong"),sZe=o("bigbird_pegasus"),lZe=o(" \u2014 "),ZS=a("a"),iZe=o("PegasusTokenizer"),dZe=o(" or "),eR=a("a"),cZe=o("PegasusTokenizerFast"),fZe=o(" (BigBirdPegasus model)"),mZe=l(),Nn=a("li"),ite=a("strong"),gZe=o("blenderbot"),hZe=o(" \u2014 "),oR=a("a"),pZe=o("BlenderbotTokenizer"),uZe=o(" or "),rR=a("a"),_Ze=o("BlenderbotTokenizerFast"),bZe=o(" (Blenderbot model)"),vZe=l(),yg=a("li"),dte=a("strong"),FZe=o("blenderbot-small"),TZe=o(" \u2014 "),tR=a("a"),MZe=o("BlenderbotSmallTokenizer"),EZe=o(" (BlenderbotSmall model)"),CZe=l(),Lg=a("li"),cte=a("strong"),wZe=o("byt5"),AZe=o(" \u2014 "),aR=a("a"),yZe=o("ByT5Tokenizer"),LZe=o(" (ByT5 model)"),xZe=l(),jn=a("li"),fte=a("strong"),$Ze=o("camembert"),kZe=o(" \u2014 "),nR=a("a"),SZe=o("CamembertTokenizer"),RZe=o(" or "),sR=a("a"),PZe=o("CamembertTokenizerFast"),BZe=o(" (CamemBERT model)"),IZe=l(),xg=a("li"),mte=a("strong"),qZe=o("canine"),NZe=o(" \u2014 "),lR=a("a"),jZe=o("CanineTokenizer"),DZe=o(" (Canine model)"),GZe=l(),Dn=a("li"),gte=a("strong"),OZe=o("clip"),VZe=o(" \u2014 "),iR=a("a"),XZe=o("CLIPTokenizer"),zZe=o(" or "),dR=a("a"),WZe=o("CLIPTokenizerFast"),QZe=o(" (CLIP model)"),HZe=l(),Gn=a("li"),hte=a("strong"),UZe=o("convbert"),JZe=o(" \u2014 "),cR=a("a"),YZe=o("ConvBertTokenizer"),KZe=o(" or "),fR=a("a"),ZZe=o("ConvBertTokenizerFast"),eeo=o(" (ConvBERT model)"),oeo=l(),On=a("li"),pte=a("strong"),reo=o("cpm"),teo=o(" \u2014 "),mR=a("a"),aeo=o("CpmTokenizer"),neo=o(" or "),gR=a("a"),seo=o("CpmTokenizerFast"),leo=o(" (CPM model)"),ieo=l(),$g=a("li"),ute=a("strong"),deo=o("ctrl"),ceo=o(" \u2014 "),hR=a("a"),feo=o("CTRLTokenizer"),meo=o(" (CTRL model)"),geo=l(),Vn=a("li"),_te=a("strong"),heo=o("data2vec-text"),peo=o(" \u2014 "),pR=a("a"),ueo=o("RobertaTokenizer"),_eo=o(" or "),uR=a("a"),beo=o("RobertaTokenizerFast"),veo=o(" (Data2VecText model)"),Feo=l(),Xn=a("li"),bte=a("strong"),Teo=o("deberta"),Meo=o(" \u2014 "),_R=a("a"),Eeo=o("DebertaTokenizer"),Ceo=o(" or "),bR=a("a"),weo=o("DebertaTokenizerFast"),Aeo=o(" (DeBERTa model)"),yeo=l(),zn=a("li"),vte=a("strong"),Leo=o("deberta-v2"),xeo=o(" \u2014 "),vR=a("a"),$eo=o("DebertaV2Tokenizer"),keo=o(" or "),FR=a("a"),Seo=o("DebertaV2TokenizerFast"),Reo=o(" (DeBERTa-v2 model)"),Peo=l(),Wn=a("li"),Fte=a("strong"),Beo=o("distilbert"),Ieo=o(" \u2014 "),TR=a("a"),qeo=o("DistilBertTokenizer"),Neo=o(" or "),MR=a("a"),jeo=o("DistilBertTokenizerFast"),Deo=o(" (DistilBERT model)"),Geo=l(),Qn=a("li"),Tte=a("strong"),Oeo=o("dpr"),Veo=o(" \u2014 "),ER=a("a"),Xeo=o("DPRQuestionEncoderTokenizer"),zeo=o(" or "),CR=a("a"),Weo=o("DPRQuestionEncoderTokenizerFast"),Qeo=o(" (DPR model)"),Heo=l(),Hn=a("li"),Mte=a("strong"),Ueo=o("electra"),Jeo=o(" \u2014 "),wR=a("a"),Yeo=o("ElectraTokenizer"),Keo=o(" or "),AR=a("a"),Zeo=o("ElectraTokenizerFast"),eoo=o(" (ELECTRA model)"),ooo=l(),kg=a("li"),Ete=a("strong"),roo=o("flaubert"),too=o(" \u2014 "),yR=a("a"),aoo=o("FlaubertTokenizer"),noo=o(" (FlauBERT model)"),soo=l(),Un=a("li"),Cte=a("strong"),loo=o("fnet"),ioo=o(" \u2014 "),LR=a("a"),doo=o("FNetTokenizer"),coo=o(" or "),xR=a("a"),foo=o("FNetTokenizerFast"),moo=o(" (FNet model)"),goo=l(),Sg=a("li"),wte=a("strong"),hoo=o("fsmt"),poo=o(" \u2014 "),$R=a("a"),uoo=o("FSMTTokenizer"),_oo=o(" (FairSeq Machine-Translation model)"),boo=l(),Jn=a("li"),Ate=a("strong"),voo=o("funnel"),Foo=o(" \u2014 "),kR=a("a"),Too=o("FunnelTokenizer"),Moo=o(" or "),SR=a("a"),Eoo=o("FunnelTokenizerFast"),Coo=o(" (Funnel Transformer model)"),woo=l(),Yn=a("li"),yte=a("strong"),Aoo=o("gpt2"),yoo=o(" \u2014 "),RR=a("a"),Loo=o("GPT2Tokenizer"),xoo=o(" or "),PR=a("a"),$oo=o("GPT2TokenizerFast"),koo=o(" (OpenAI GPT-2 model)"),Soo=l(),Kn=a("li"),Lte=a("strong"),Roo=o("gpt_neo"),Poo=o(" \u2014 "),BR=a("a"),Boo=o("GPT2Tokenizer"),Ioo=o(" or "),IR=a("a"),qoo=o("GPT2TokenizerFast"),Noo=o(" (GPT Neo model)"),joo=l(),Zn=a("li"),xte=a("strong"),Doo=o("gptj"),Goo=o(" \u2014 "),qR=a("a"),Ooo=o("GPT2Tokenizer"),Voo=o(" or "),NR=a("a"),Xoo=o("GPT2TokenizerFast"),zoo=o(" (GPT-J model)"),Woo=l(),es=a("li"),$te=a("strong"),Qoo=o("herbert"),Hoo=o(" \u2014 "),jR=a("a"),Uoo=o("HerbertTokenizer"),Joo=o(" or "),DR=a("a"),Yoo=o("HerbertTokenizerFast"),Koo=o(" (HerBERT model)"),Zoo=l(),Rg=a("li"),kte=a("strong"),ero=o("hubert"),oro=o(" \u2014 "),GR=a("a"),rro=o("Wav2Vec2CTCTokenizer"),tro=o(" (Hubert model)"),aro=l(),os=a("li"),Ste=a("strong"),nro=o("ibert"),sro=o(" \u2014 "),OR=a("a"),lro=o("RobertaTokenizer"),iro=o(" or "),VR=a("a"),dro=o("RobertaTokenizerFast"),cro=o(" (I-BERT model)"),fro=l(),rs=a("li"),Rte=a("strong"),mro=o("layoutlm"),gro=o(" \u2014 "),XR=a("a"),hro=o("LayoutLMTokenizer"),pro=o(" or "),zR=a("a"),uro=o("LayoutLMTokenizerFast"),_ro=o(" (LayoutLM model)"),bro=l(),ts=a("li"),Pte=a("strong"),vro=o("layoutlmv2"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("LayoutLMv2Tokenizer"),Mro=o(" or "),QR=a("a"),Ero=o("LayoutLMv2TokenizerFast"),Cro=o(" (LayoutLMv2 model)"),wro=l(),as=a("li"),Bte=a("strong"),Aro=o("layoutlmv3"),yro=o(" \u2014 "),HR=a("a"),Lro=o("LayoutLMv3Tokenizer"),xro=o(" or "),UR=a("a"),$ro=o("LayoutLMv3TokenizerFast"),kro=o(" (LayoutLMv3 model)"),Sro=l(),ns=a("li"),Ite=a("strong"),Rro=o("layoutxlm"),Pro=o(" \u2014 "),JR=a("a"),Bro=o("LayoutXLMTokenizer"),Iro=o(" or "),YR=a("a"),qro=o("LayoutXLMTokenizerFast"),Nro=o(" (LayoutXLM model)"),jro=l(),ss=a("li"),qte=a("strong"),Dro=o("led"),Gro=o(" \u2014 "),KR=a("a"),Oro=o("LEDTokenizer"),Vro=o(" or "),ZR=a("a"),Xro=o("LEDTokenizerFast"),zro=o(" (LED model)"),Wro=l(),ls=a("li"),Nte=a("strong"),Qro=o("longformer"),Hro=o(" \u2014 "),eP=a("a"),Uro=o("LongformerTokenizer"),Jro=o(" or "),oP=a("a"),Yro=o("LongformerTokenizerFast"),Kro=o(" (Longformer model)"),Zro=l(),Pg=a("li"),jte=a("strong"),eto=o("luke"),oto=o(" \u2014 "),rP=a("a"),rto=o("LukeTokenizer"),tto=o(" (LUKE model)"),ato=l(),is=a("li"),Dte=a("strong"),nto=o("lxmert"),sto=o(" \u2014 "),tP=a("a"),lto=o("LxmertTokenizer"),ito=o(" or "),aP=a("a"),dto=o("LxmertTokenizerFast"),cto=o(" (LXMERT model)"),fto=l(),Bg=a("li"),Gte=a("strong"),mto=o("m2m_100"),gto=o(" \u2014 "),nP=a("a"),hto=o("M2M100Tokenizer"),pto=o(" (M2M100 model)"),uto=l(),Ig=a("li"),Ote=a("strong"),_to=o("marian"),bto=o(" \u2014 "),sP=a("a"),vto=o("MarianTokenizer"),Fto=o(" (Marian model)"),Tto=l(),ds=a("li"),Vte=a("strong"),Mto=o("mbart"),Eto=o(" \u2014 "),lP=a("a"),Cto=o("MBartTokenizer"),wto=o(" or "),iP=a("a"),Ato=o("MBartTokenizerFast"),yto=o(" (mBART model)"),Lto=l(),cs=a("li"),Xte=a("strong"),xto=o("mbart50"),$to=o(" \u2014 "),dP=a("a"),kto=o("MBart50Tokenizer"),Sto=o(" or "),cP=a("a"),Rto=o("MBart50TokenizerFast"),Pto=o(" (mBART-50 model)"),Bto=l(),fs=a("li"),zte=a("strong"),Ito=o("megatron-bert"),qto=o(" \u2014 "),fP=a("a"),Nto=o("BertTokenizer"),jto=o(" or "),mP=a("a"),Dto=o("BertTokenizerFast"),Gto=o(" (MegatronBert model)"),Oto=l(),qg=a("li"),Wte=a("strong"),Vto=o("mluke"),Xto=o(" \u2014 "),gP=a("a"),zto=o("MLukeTokenizer"),Wto=o(" (mLUKE model)"),Qto=l(),ms=a("li"),Qte=a("strong"),Hto=o("mobilebert"),Uto=o(" \u2014 "),hP=a("a"),Jto=o("MobileBertTokenizer"),Yto=o(" or "),pP=a("a"),Kto=o("MobileBertTokenizerFast"),Zto=o(" (MobileBERT model)"),eao=l(),gs=a("li"),Hte=a("strong"),oao=o("mpnet"),rao=o(" \u2014 "),uP=a("a"),tao=o("MPNetTokenizer"),aao=o(" or "),_P=a("a"),nao=o("MPNetTokenizerFast"),sao=o(" (MPNet model)"),lao=l(),hs=a("li"),Ute=a("strong"),iao=o("mt5"),dao=o(" \u2014 "),bP=a("a"),cao=o("MT5Tokenizer"),fao=o(" or "),vP=a("a"),mao=o("MT5TokenizerFast"),gao=o(" (mT5 model)"),hao=l(),ps=a("li"),Jte=a("strong"),pao=o("nystromformer"),uao=o(" \u2014 "),FP=a("a"),_ao=o("AlbertTokenizer"),bao=o(" or "),TP=a("a"),vao=o("AlbertTokenizerFast"),Fao=o(" (Nystromformer model)"),Tao=l(),us=a("li"),Yte=a("strong"),Mao=o("openai-gpt"),Eao=o(" \u2014 "),MP=a("a"),Cao=o("OpenAIGPTTokenizer"),wao=o(" or "),EP=a("a"),Aao=o("OpenAIGPTTokenizerFast"),yao=o(" (OpenAI GPT model)"),Lao=l(),Ng=a("li"),Kte=a("strong"),xao=o("opt"),$ao=o(" \u2014 "),CP=a("a"),kao=o("GPT2Tokenizer"),Sao=o(" (OPT model)"),Rao=l(),_s=a("li"),Zte=a("strong"),Pao=o("pegasus"),Bao=o(" \u2014 "),wP=a("a"),Iao=o("PegasusTokenizer"),qao=o(" or "),AP=a("a"),Nao=o("PegasusTokenizerFast"),jao=o(" (Pegasus model)"),Dao=l(),jg=a("li"),eae=a("strong"),Gao=o("perceiver"),Oao=o(" \u2014 "),yP=a("a"),Vao=o("PerceiverTokenizer"),Xao=o(" (Perceiver model)"),zao=l(),Dg=a("li"),oae=a("strong"),Wao=o("phobert"),Qao=o(" \u2014 "),LP=a("a"),Hao=o("PhobertTokenizer"),Uao=o(" (PhoBERT model)"),Jao=l(),Gg=a("li"),rae=a("strong"),Yao=o("plbart"),Kao=o(" \u2014 "),xP=a("a"),Zao=o("PLBartTokenizer"),eno=o(" (PLBart model)"),ono=l(),Og=a("li"),tae=a("strong"),rno=o("prophetnet"),tno=o(" \u2014 "),$P=a("a"),ano=o("ProphetNetTokenizer"),nno=o(" (ProphetNet model)"),sno=l(),bs=a("li"),aae=a("strong"),lno=o("qdqbert"),ino=o(" \u2014 "),kP=a("a"),dno=o("BertTokenizer"),cno=o(" or "),SP=a("a"),fno=o("BertTokenizerFast"),mno=o(" (QDQBert model)"),gno=l(),Vg=a("li"),nae=a("strong"),hno=o("rag"),pno=o(" \u2014 "),RP=a("a"),uno=o("RagTokenizer"),_no=o(" (RAG model)"),bno=l(),vs=a("li"),sae=a("strong"),vno=o("realm"),Fno=o(" \u2014 "),PP=a("a"),Tno=o("RealmTokenizer"),Mno=o(" or "),BP=a("a"),Eno=o("RealmTokenizerFast"),Cno=o(" (Realm model)"),wno=l(),Fs=a("li"),lae=a("strong"),Ano=o("reformer"),yno=o(" \u2014 "),IP=a("a"),Lno=o("ReformerTokenizer"),xno=o(" or "),qP=a("a"),$no=o("ReformerTokenizerFast"),kno=o(" (Reformer model)"),Sno=l(),Ts=a("li"),iae=a("strong"),Rno=o("rembert"),Pno=o(" \u2014 "),NP=a("a"),Bno=o("RemBertTokenizer"),Ino=o(" or "),jP=a("a"),qno=o("RemBertTokenizerFast"),Nno=o(" (RemBERT model)"),jno=l(),Ms=a("li"),dae=a("strong"),Dno=o("retribert"),Gno=o(" \u2014 "),DP=a("a"),Ono=o("RetriBertTokenizer"),Vno=o(" or "),GP=a("a"),Xno=o("RetriBertTokenizerFast"),zno=o(" (RetriBERT model)"),Wno=l(),Es=a("li"),cae=a("strong"),Qno=o("roberta"),Hno=o(" \u2014 "),OP=a("a"),Uno=o("RobertaTokenizer"),Jno=o(" or "),VP=a("a"),Yno=o("RobertaTokenizerFast"),Kno=o(" (RoBERTa model)"),Zno=l(),Cs=a("li"),fae=a("strong"),eso=o("roformer"),oso=o(" \u2014 "),XP=a("a"),rso=o("RoFormerTokenizer"),tso=o(" or "),zP=a("a"),aso=o("RoFormerTokenizerFast"),nso=o(" (RoFormer model)"),sso=l(),Xg=a("li"),mae=a("strong"),lso=o("speech_to_text"),iso=o(" \u2014 "),WP=a("a"),dso=o("Speech2TextTokenizer"),cso=o(" (Speech2Text model)"),fso=l(),zg=a("li"),gae=a("strong"),mso=o("speech_to_text_2"),gso=o(" \u2014 "),QP=a("a"),hso=o("Speech2Text2Tokenizer"),pso=o(" (Speech2Text2 model)"),uso=l(),ws=a("li"),hae=a("strong"),_so=o("splinter"),bso=o(" \u2014 "),HP=a("a"),vso=o("SplinterTokenizer"),Fso=o(" or "),UP=a("a"),Tso=o("SplinterTokenizerFast"),Mso=o(" (Splinter model)"),Eso=l(),As=a("li"),pae=a("strong"),Cso=o("squeezebert"),wso=o(" \u2014 "),JP=a("a"),Aso=o("SqueezeBertTokenizer"),yso=o(" or "),YP=a("a"),Lso=o("SqueezeBertTokenizerFast"),xso=o(" (SqueezeBERT model)"),$so=l(),ys=a("li"),uae=a("strong"),kso=o("t5"),Sso=o(" \u2014 "),KP=a("a"),Rso=o("T5Tokenizer"),Pso=o(" or "),ZP=a("a"),Bso=o("T5TokenizerFast"),Iso=o(" (T5 model)"),qso=l(),Wg=a("li"),_ae=a("strong"),Nso=o("tapas"),jso=o(" \u2014 "),eB=a("a"),Dso=o("TapasTokenizer"),Gso=o(" (TAPAS model)"),Oso=l(),Qg=a("li"),bae=a("strong"),Vso=o("tapex"),Xso=o(" \u2014 "),oB=a("a"),zso=o("TapexTokenizer"),Wso=o(" (TAPEX model)"),Qso=l(),Hg=a("li"),vae=a("strong"),Hso=o("transfo-xl"),Uso=o(" \u2014 "),rB=a("a"),Jso=o("TransfoXLTokenizer"),Yso=o(" (Transformer-XL model)"),Kso=l(),Ls=a("li"),Fae=a("strong"),Zso=o("visual_bert"),elo=o(" \u2014 "),tB=a("a"),olo=o("BertTokenizer"),rlo=o(" or "),aB=a("a"),tlo=o("BertTokenizerFast"),alo=o(" (VisualBert model)"),nlo=l(),Ug=a("li"),Tae=a("strong"),slo=o("wav2vec2"),llo=o(" \u2014 "),nB=a("a"),ilo=o("Wav2Vec2CTCTokenizer"),dlo=o(" (Wav2Vec2 model)"),clo=l(),Jg=a("li"),Mae=a("strong"),flo=o("wav2vec2-conformer"),mlo=o(" \u2014 "),sB=a("a"),glo=o("Wav2Vec2CTCTokenizer"),hlo=o(" (Wav2Vec2-Conformer model)"),plo=l(),Yg=a("li"),Eae=a("strong"),ulo=o("wav2vec2_phoneme"),_lo=o(" \u2014 "),lB=a("a"),blo=o("Wav2Vec2PhonemeCTCTokenizer"),vlo=o(" (Wav2Vec2Phoneme model)"),Flo=l(),xs=a("li"),Cae=a("strong"),Tlo=o("xglm"),Mlo=o(" \u2014 "),iB=a("a"),Elo=o("XGLMTokenizer"),Clo=o(" or "),dB=a("a"),wlo=o("XGLMTokenizerFast"),Alo=o(" (XGLM model)"),ylo=l(),Kg=a("li"),wae=a("strong"),Llo=o("xlm"),xlo=o(" \u2014 "),cB=a("a"),$lo=o("XLMTokenizer"),klo=o(" (XLM model)"),Slo=l(),Zg=a("li"),Aae=a("strong"),Rlo=o("xlm-prophetnet"),Plo=o(" \u2014 "),fB=a("a"),Blo=o("XLMProphetNetTokenizer"),Ilo=o(" (XLMProphetNet model)"),qlo=l(),$s=a("li"),yae=a("strong"),Nlo=o("xlm-roberta"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("XLMRobertaTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("XLMRobertaTokenizerFast"),Vlo=o(" (XLM-RoBERTa model)"),Xlo=l(),ks=a("li"),Lae=a("strong"),zlo=o("xlm-roberta-xl"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("RobertaTokenizer"),Hlo=o(" or "),pB=a("a"),Ulo=o("RobertaTokenizerFast"),Jlo=o(" (XLM-RoBERTa-XL model)"),Ylo=l(),Ss=a("li"),xae=a("strong"),Klo=o("xlnet"),Zlo=o(" \u2014 "),uB=a("a"),eio=o("XLNetTokenizer"),oio=o(" or "),_B=a("a"),rio=o("XLNetTokenizerFast"),tio=o(" (XLNet model)"),aio=l(),Rs=a("li"),$ae=a("strong"),nio=o("yoso"),sio=o(" \u2014 "),bB=a("a"),lio=o("AlbertTokenizer"),iio=o(" or "),vB=a("a"),dio=o("AlbertTokenizerFast"),cio=o(" (YOSO model)"),fio=l(),F(eh.$$.fragment),mio=l(),oh=a("div"),F(LA.$$.fragment),gio=l(),kae=a("p"),hio=o("Register a new tokenizer in this mapping."),gqe=l(),Mi=a("h2"),rh=a("a"),Sae=a("span"),F(xA.$$.fragment),pio=l(),Rae=a("span"),uio=o("AutoFeatureExtractor"),hqe=l(),Ao=a("div"),F($A.$$.fragment),_io=l(),kA=a("p"),bio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FB=a("a"),vio=o("AutoFeatureExtractor.from_pretrained()"),Fio=o(" class method."),Tio=l(),SA=a("p"),Mio=o("This class cannot be instantiated directly using "),Pae=a("code"),Eio=o("__init__()"),Cio=o(" (throws an error)."),wio=l(),He=a("div"),F(RA.$$.fragment),Aio=l(),Bae=a("p"),yio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lio=l(),ya=a("p"),xio=o("The feature extractor class to instantiate is selected based on the "),Iae=a("code"),$io=o("model_type"),kio=o(` property of the config object
(either passed as an argument or loaded from `),qae=a("code"),Sio=o("pretrained_model_name_or_path"),Rio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Nae=a("code"),Pio=o("pretrained_model_name_or_path"),Bio=o(":"),Iio=l(),Z=a("ul"),th=a("li"),jae=a("strong"),qio=o("beit"),Nio=o(" \u2014 "),TB=a("a"),jio=o("BeitFeatureExtractor"),Dio=o(" (BEiT model)"),Gio=l(),ah=a("li"),Dae=a("strong"),Oio=o("clip"),Vio=o(" \u2014 "),MB=a("a"),Xio=o("CLIPFeatureExtractor"),zio=o(" (CLIP model)"),Wio=l(),nh=a("li"),Gae=a("strong"),Qio=o("convnext"),Hio=o(" \u2014 "),EB=a("a"),Uio=o("ConvNextFeatureExtractor"),Jio=o(" (ConvNext model)"),Yio=l(),sh=a("li"),Oae=a("strong"),Kio=o("data2vec-audio"),Zio=o(" \u2014 "),CB=a("a"),edo=o("Wav2Vec2FeatureExtractor"),odo=o(" (Data2VecAudio model)"),rdo=l(),lh=a("li"),Vae=a("strong"),tdo=o("data2vec-vision"),ado=o(" \u2014 "),wB=a("a"),ndo=o("BeitFeatureExtractor"),sdo=o(" (Data2VecVision model)"),ldo=l(),ih=a("li"),Xae=a("strong"),ido=o("deit"),ddo=o(" \u2014 "),AB=a("a"),cdo=o("DeiTFeatureExtractor"),fdo=o(" (DeiT model)"),mdo=l(),dh=a("li"),zae=a("strong"),gdo=o("detr"),hdo=o(" \u2014 "),yB=a("a"),pdo=o("DetrFeatureExtractor"),udo=o(" (DETR model)"),_do=l(),ch=a("li"),Wae=a("strong"),bdo=o("dpt"),vdo=o(" \u2014 "),LB=a("a"),Fdo=o("DPTFeatureExtractor"),Tdo=o(" (DPT model)"),Mdo=l(),fh=a("li"),Qae=a("strong"),Edo=o("flava"),Cdo=o(" \u2014 "),xB=a("a"),wdo=o("FlavaFeatureExtractor"),Ado=o(" (Flava model)"),ydo=l(),mh=a("li"),Hae=a("strong"),Ldo=o("glpn"),xdo=o(" \u2014 "),$B=a("a"),$do=o("GLPNFeatureExtractor"),kdo=o(" (GLPN model)"),Sdo=l(),gh=a("li"),Uae=a("strong"),Rdo=o("hubert"),Pdo=o(" \u2014 "),kB=a("a"),Bdo=o("Wav2Vec2FeatureExtractor"),Ido=o(" (Hubert model)"),qdo=l(),hh=a("li"),Jae=a("strong"),Ndo=o("layoutlmv2"),jdo=o(" \u2014 "),SB=a("a"),Ddo=o("LayoutLMv2FeatureExtractor"),Gdo=o(" (LayoutLMv2 model)"),Odo=l(),ph=a("li"),Yae=a("strong"),Vdo=o("layoutlmv3"),Xdo=o(" \u2014 "),RB=a("a"),zdo=o("LayoutLMv3FeatureExtractor"),Wdo=o(" (LayoutLMv3 model)"),Qdo=l(),uh=a("li"),Kae=a("strong"),Hdo=o("maskformer"),Udo=o(" \u2014 "),PB=a("a"),Jdo=o("MaskFormerFeatureExtractor"),Ydo=o(" (MaskFormer model)"),Kdo=l(),_h=a("li"),Zae=a("strong"),Zdo=o("perceiver"),eco=o(" \u2014 "),BB=a("a"),oco=o("PerceiverFeatureExtractor"),rco=o(" (Perceiver model)"),tco=l(),bh=a("li"),ene=a("strong"),aco=o("poolformer"),nco=o(" \u2014 "),IB=a("a"),sco=o("PoolFormerFeatureExtractor"),lco=o(" (PoolFormer model)"),ico=l(),vh=a("li"),one=a("strong"),dco=o("regnet"),cco=o(" \u2014 "),qB=a("a"),fco=o("ConvNextFeatureExtractor"),mco=o(" (RegNet model)"),gco=l(),Fh=a("li"),rne=a("strong"),hco=o("resnet"),pco=o(" \u2014 "),NB=a("a"),uco=o("ConvNextFeatureExtractor"),_co=o(" (ResNet model)"),bco=l(),Th=a("li"),tne=a("strong"),vco=o("segformer"),Fco=o(" \u2014 "),jB=a("a"),Tco=o("SegformerFeatureExtractor"),Mco=o(" (SegFormer model)"),Eco=l(),Mh=a("li"),ane=a("strong"),Cco=o("speech_to_text"),wco=o(" \u2014 "),DB=a("a"),Aco=o("Speech2TextFeatureExtractor"),yco=o(" (Speech2Text model)"),Lco=l(),Eh=a("li"),nne=a("strong"),xco=o("swin"),$co=o(" \u2014 "),GB=a("a"),kco=o("ViTFeatureExtractor"),Sco=o(" (Swin model)"),Rco=l(),Ch=a("li"),sne=a("strong"),Pco=o("van"),Bco=o(" \u2014 "),OB=a("a"),Ico=o("ConvNextFeatureExtractor"),qco=o(" (VAN model)"),Nco=l(),wh=a("li"),lne=a("strong"),jco=o("vit"),Dco=o(" \u2014 "),VB=a("a"),Gco=o("ViTFeatureExtractor"),Oco=o(" (ViT model)"),Vco=l(),Ah=a("li"),ine=a("strong"),Xco=o("vit_mae"),zco=o(" \u2014 "),XB=a("a"),Wco=o("ViTFeatureExtractor"),Qco=o(" (ViTMAE model)"),Hco=l(),yh=a("li"),dne=a("strong"),Uco=o("wav2vec2"),Jco=o(" \u2014 "),zB=a("a"),Yco=o("Wav2Vec2FeatureExtractor"),Kco=o(" (Wav2Vec2 model)"),Zco=l(),Lh=a("li"),cne=a("strong"),efo=o("wav2vec2-conformer"),ofo=o(" \u2014 "),WB=a("a"),rfo=o("Wav2Vec2FeatureExtractor"),tfo=o(" (Wav2Vec2-Conformer model)"),afo=l(),xh=a("li"),fne=a("strong"),nfo=o("yolos"),sfo=o(" \u2014 "),QB=a("a"),lfo=o("YolosFeatureExtractor"),ifo=o(" (YOLOS model)"),dfo=l(),F($h.$$.fragment),cfo=l(),F(kh.$$.fragment),ffo=l(),Sh=a("div"),F(PA.$$.fragment),mfo=l(),mne=a("p"),gfo=o("Register a new feature extractor for this class."),pqe=l(),Ei=a("h2"),Rh=a("a"),gne=a("span"),F(BA.$$.fragment),hfo=l(),hne=a("span"),pfo=o("AutoProcessor"),uqe=l(),yo=a("div"),F(IA.$$.fragment),ufo=l(),qA=a("p"),_fo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HB=a("a"),bfo=o("AutoProcessor.from_pretrained()"),vfo=o(" class method."),Ffo=l(),NA=a("p"),Tfo=o("This class cannot be instantiated directly using "),pne=a("code"),Mfo=o("__init__()"),Efo=o(" (throws an error)."),Cfo=l(),Ue=a("div"),F(jA.$$.fragment),wfo=l(),une=a("p"),Afo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yfo=l(),Ci=a("p"),Lfo=o("The processor class to instantiate is selected based on the "),_ne=a("code"),xfo=o("model_type"),$fo=o(` property of the config object (either
passed as an argument or loaded from `),bne=a("code"),kfo=o("pretrained_model_name_or_path"),Sfo=o(" if possible):"),Rfo=l(),he=a("ul"),Ph=a("li"),vne=a("strong"),Pfo=o("clip"),Bfo=o(" \u2014 "),UB=a("a"),Ifo=o("CLIPProcessor"),qfo=o(" (CLIP model)"),Nfo=l(),Bh=a("li"),Fne=a("strong"),jfo=o("flava"),Dfo=o(" \u2014 "),Tne=a("code"),Gfo=o("FLAVAProcessor"),Ofo=o(" (Flava model)"),Vfo=l(),Ih=a("li"),Mne=a("strong"),Xfo=o("layoutlmv2"),zfo=o(" \u2014 "),JB=a("a"),Wfo=o("LayoutLMv2Processor"),Qfo=o(" (LayoutLMv2 model)"),Hfo=l(),qh=a("li"),Ene=a("strong"),Ufo=o("layoutlmv3"),Jfo=o(" \u2014 "),YB=a("a"),Yfo=o("LayoutLMv3Processor"),Kfo=o(" (LayoutLMv3 model)"),Zfo=l(),Nh=a("li"),Cne=a("strong"),emo=o("layoutxlm"),omo=o(" \u2014 "),KB=a("a"),rmo=o("LayoutXLMProcessor"),tmo=o(" (LayoutXLM model)"),amo=l(),jh=a("li"),wne=a("strong"),nmo=o("sew"),smo=o(" \u2014 "),ZB=a("a"),lmo=o("Wav2Vec2Processor"),imo=o(" (SEW model)"),dmo=l(),Dh=a("li"),Ane=a("strong"),cmo=o("sew-d"),fmo=o(" \u2014 "),eI=a("a"),mmo=o("Wav2Vec2Processor"),gmo=o(" (SEW-D model)"),hmo=l(),Gh=a("li"),yne=a("strong"),pmo=o("speech_to_text"),umo=o(" \u2014 "),oI=a("a"),_mo=o("Speech2TextProcessor"),bmo=o(" (Speech2Text model)"),vmo=l(),Oh=a("li"),Lne=a("strong"),Fmo=o("speech_to_text_2"),Tmo=o(" \u2014 "),rI=a("a"),Mmo=o("Speech2Text2Processor"),Emo=o(" (Speech2Text2 model)"),Cmo=l(),Vh=a("li"),xne=a("strong"),wmo=o("trocr"),Amo=o(" \u2014 "),tI=a("a"),ymo=o("TrOCRProcessor"),Lmo=o(" (TrOCR model)"),xmo=l(),Xh=a("li"),$ne=a("strong"),$mo=o("unispeech"),kmo=o(" \u2014 "),aI=a("a"),Smo=o("Wav2Vec2Processor"),Rmo=o(" (UniSpeech model)"),Pmo=l(),zh=a("li"),kne=a("strong"),Bmo=o("unispeech-sat"),Imo=o(" \u2014 "),nI=a("a"),qmo=o("Wav2Vec2Processor"),Nmo=o(" (UniSpeechSat model)"),jmo=l(),Wh=a("li"),Sne=a("strong"),Dmo=o("vilt"),Gmo=o(" \u2014 "),sI=a("a"),Omo=o("ViltProcessor"),Vmo=o(" (ViLT model)"),Xmo=l(),Qh=a("li"),Rne=a("strong"),zmo=o("vision-text-dual-encoder"),Wmo=o(" \u2014 "),lI=a("a"),Qmo=o("VisionTextDualEncoderProcessor"),Hmo=o(" (VisionTextDualEncoder model)"),Umo=l(),Hh=a("li"),Pne=a("strong"),Jmo=o("wav2vec2"),Ymo=o(" \u2014 "),iI=a("a"),Kmo=o("Wav2Vec2Processor"),Zmo=o(" (Wav2Vec2 model)"),ego=l(),Uh=a("li"),Bne=a("strong"),ogo=o("wav2vec2-conformer"),rgo=o(" \u2014 "),dI=a("a"),tgo=o("Wav2Vec2Processor"),ago=o(" (Wav2Vec2-Conformer model)"),ngo=l(),Jh=a("li"),Ine=a("strong"),sgo=o("wavlm"),lgo=o(" \u2014 "),cI=a("a"),igo=o("Wav2Vec2Processor"),dgo=o(" (WavLM model)"),cgo=l(),F(Yh.$$.fragment),fgo=l(),F(Kh.$$.fragment),mgo=l(),Zh=a("div"),F(DA.$$.fragment),ggo=l(),qne=a("p"),hgo=o("Register a new processor for this class."),_qe=l(),wi=a("h2"),ep=a("a"),Nne=a("span"),F(GA.$$.fragment),pgo=l(),jne=a("span"),ugo=o("AutoModel"),bqe=l(),Lo=a("div"),F(OA.$$.fragment),_go=l(),Ai=a("p"),bgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fI=a("a"),vgo=o("from_pretrained()"),Fgo=o(" class method or the "),mI=a("a"),Tgo=o("from_config()"),Mgo=o(` class
method.`),Ego=l(),VA=a("p"),Cgo=o("This class cannot be instantiated directly using "),Dne=a("code"),wgo=o("__init__()"),Ago=o(" (throws an error)."),ygo=l(),tt=a("div"),F(XA.$$.fragment),Lgo=l(),Gne=a("p"),xgo=o("Instantiates one of the base model classes of the library from a configuration."),$go=l(),yi=a("p"),kgo=o(`Note:
Loading a model from its configuration file does `),One=a("strong"),Sgo=o("not"),Rgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=a("a"),Pgo=o("from_pretrained()"),Bgo=o(" to load the model weights."),Igo=l(),F(op.$$.fragment),qgo=l(),Je=a("div"),F(zA.$$.fragment),Ngo=l(),Vne=a("p"),jgo=o("Instantiate one of the base model classes of the library from a pretrained model."),Dgo=l(),La=a("p"),Ggo=o("The model class to instantiate is selected based on the "),Xne=a("code"),Ogo=o("model_type"),Vgo=o(` property of the config object (either
passed as an argument or loaded from `),zne=a("code"),Xgo=o("pretrained_model_name_or_path"),zgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wne=a("code"),Wgo=o("pretrained_model_name_or_path"),Qgo=o(":"),Hgo=l(),x=a("ul"),rp=a("li"),Qne=a("strong"),Ugo=o("albert"),Jgo=o(" \u2014 "),hI=a("a"),Ygo=o("AlbertModel"),Kgo=o(" (ALBERT model)"),Zgo=l(),tp=a("li"),Hne=a("strong"),eho=o("bart"),oho=o(" \u2014 "),pI=a("a"),rho=o("BartModel"),tho=o(" (BART model)"),aho=l(),ap=a("li"),Une=a("strong"),nho=o("beit"),sho=o(" \u2014 "),uI=a("a"),lho=o("BeitModel"),iho=o(" (BEiT model)"),dho=l(),np=a("li"),Jne=a("strong"),cho=o("bert"),fho=o(" \u2014 "),_I=a("a"),mho=o("BertModel"),gho=o(" (BERT model)"),hho=l(),sp=a("li"),Yne=a("strong"),pho=o("bert-generation"),uho=o(" \u2014 "),bI=a("a"),_ho=o("BertGenerationEncoder"),bho=o(" (Bert Generation model)"),vho=l(),lp=a("li"),Kne=a("strong"),Fho=o("big_bird"),Tho=o(" \u2014 "),vI=a("a"),Mho=o("BigBirdModel"),Eho=o(" (BigBird model)"),Cho=l(),ip=a("li"),Zne=a("strong"),who=o("bigbird_pegasus"),Aho=o(" \u2014 "),FI=a("a"),yho=o("BigBirdPegasusModel"),Lho=o(" (BigBirdPegasus model)"),xho=l(),dp=a("li"),ese=a("strong"),$ho=o("blenderbot"),kho=o(" \u2014 "),TI=a("a"),Sho=o("BlenderbotModel"),Rho=o(" (Blenderbot model)"),Pho=l(),cp=a("li"),ose=a("strong"),Bho=o("blenderbot-small"),Iho=o(" \u2014 "),MI=a("a"),qho=o("BlenderbotSmallModel"),Nho=o(" (BlenderbotSmall model)"),jho=l(),fp=a("li"),rse=a("strong"),Dho=o("camembert"),Gho=o(" \u2014 "),EI=a("a"),Oho=o("CamembertModel"),Vho=o(" (CamemBERT model)"),Xho=l(),mp=a("li"),tse=a("strong"),zho=o("canine"),Who=o(" \u2014 "),CI=a("a"),Qho=o("CanineModel"),Hho=o(" (Canine model)"),Uho=l(),gp=a("li"),ase=a("strong"),Jho=o("clip"),Yho=o(" \u2014 "),wI=a("a"),Kho=o("CLIPModel"),Zho=o(" (CLIP model)"),epo=l(),hp=a("li"),nse=a("strong"),opo=o("convbert"),rpo=o(" \u2014 "),AI=a("a"),tpo=o("ConvBertModel"),apo=o(" (ConvBERT model)"),npo=l(),pp=a("li"),sse=a("strong"),spo=o("convnext"),lpo=o(" \u2014 "),yI=a("a"),ipo=o("ConvNextModel"),dpo=o(" (ConvNext model)"),cpo=l(),up=a("li"),lse=a("strong"),fpo=o("ctrl"),mpo=o(" \u2014 "),LI=a("a"),gpo=o("CTRLModel"),hpo=o(" (CTRL model)"),ppo=l(),_p=a("li"),ise=a("strong"),upo=o("data2vec-audio"),_po=o(" \u2014 "),xI=a("a"),bpo=o("Data2VecAudioModel"),vpo=o(" (Data2VecAudio model)"),Fpo=l(),bp=a("li"),dse=a("strong"),Tpo=o("data2vec-text"),Mpo=o(" \u2014 "),$I=a("a"),Epo=o("Data2VecTextModel"),Cpo=o(" (Data2VecText model)"),wpo=l(),vp=a("li"),cse=a("strong"),Apo=o("data2vec-vision"),ypo=o(" \u2014 "),kI=a("a"),Lpo=o("Data2VecVisionModel"),xpo=o(" (Data2VecVision model)"),$po=l(),Fp=a("li"),fse=a("strong"),kpo=o("deberta"),Spo=o(" \u2014 "),SI=a("a"),Rpo=o("DebertaModel"),Ppo=o(" (DeBERTa model)"),Bpo=l(),Tp=a("li"),mse=a("strong"),Ipo=o("deberta-v2"),qpo=o(" \u2014 "),RI=a("a"),Npo=o("DebertaV2Model"),jpo=o(" (DeBERTa-v2 model)"),Dpo=l(),Mp=a("li"),gse=a("strong"),Gpo=o("decision_transformer"),Opo=o(" \u2014 "),PI=a("a"),Vpo=o("DecisionTransformerModel"),Xpo=o(" (Decision Transformer model)"),zpo=l(),Ep=a("li"),hse=a("strong"),Wpo=o("deit"),Qpo=o(" \u2014 "),BI=a("a"),Hpo=o("DeiTModel"),Upo=o(" (DeiT model)"),Jpo=l(),Cp=a("li"),pse=a("strong"),Ypo=o("detr"),Kpo=o(" \u2014 "),II=a("a"),Zpo=o("DetrModel"),euo=o(" (DETR model)"),ouo=l(),wp=a("li"),use=a("strong"),ruo=o("distilbert"),tuo=o(" \u2014 "),qI=a("a"),auo=o("DistilBertModel"),nuo=o(" (DistilBERT model)"),suo=l(),Ap=a("li"),_se=a("strong"),luo=o("dpr"),iuo=o(" \u2014 "),NI=a("a"),duo=o("DPRQuestionEncoder"),cuo=o(" (DPR model)"),fuo=l(),yp=a("li"),bse=a("strong"),muo=o("dpt"),guo=o(" \u2014 "),jI=a("a"),huo=o("DPTModel"),puo=o(" (DPT model)"),uuo=l(),Lp=a("li"),vse=a("strong"),_uo=o("electra"),buo=o(" \u2014 "),DI=a("a"),vuo=o("ElectraModel"),Fuo=o(" (ELECTRA model)"),Tuo=l(),xp=a("li"),Fse=a("strong"),Muo=o("flaubert"),Euo=o(" \u2014 "),GI=a("a"),Cuo=o("FlaubertModel"),wuo=o(" (FlauBERT model)"),Auo=l(),$p=a("li"),Tse=a("strong"),yuo=o("flava"),Luo=o(" \u2014 "),OI=a("a"),xuo=o("FlavaModel"),$uo=o(" (Flava model)"),kuo=l(),kp=a("li"),Mse=a("strong"),Suo=o("fnet"),Ruo=o(" \u2014 "),VI=a("a"),Puo=o("FNetModel"),Buo=o(" (FNet model)"),Iuo=l(),Sp=a("li"),Ese=a("strong"),quo=o("fsmt"),Nuo=o(" \u2014 "),XI=a("a"),juo=o("FSMTModel"),Duo=o(" (FairSeq Machine-Translation model)"),Guo=l(),Ps=a("li"),Cse=a("strong"),Ouo=o("funnel"),Vuo=o(" \u2014 "),zI=a("a"),Xuo=o("FunnelModel"),zuo=o(" or "),WI=a("a"),Wuo=o("FunnelBaseModel"),Quo=o(" (Funnel Transformer model)"),Huo=l(),Rp=a("li"),wse=a("strong"),Uuo=o("glpn"),Juo=o(" \u2014 "),QI=a("a"),Yuo=o("GLPNModel"),Kuo=o(" (GLPN model)"),Zuo=l(),Pp=a("li"),Ase=a("strong"),e_o=o("gpt2"),o_o=o(" \u2014 "),HI=a("a"),r_o=o("GPT2Model"),t_o=o(" (OpenAI GPT-2 model)"),a_o=l(),Bp=a("li"),yse=a("strong"),n_o=o("gpt_neo"),s_o=o(" \u2014 "),UI=a("a"),l_o=o("GPTNeoModel"),i_o=o(" (GPT Neo model)"),d_o=l(),Ip=a("li"),Lse=a("strong"),c_o=o("gptj"),f_o=o(" \u2014 "),JI=a("a"),m_o=o("GPTJModel"),g_o=o(" (GPT-J model)"),h_o=l(),qp=a("li"),xse=a("strong"),p_o=o("hubert"),u_o=o(" \u2014 "),YI=a("a"),__o=o("HubertModel"),b_o=o(" (Hubert model)"),v_o=l(),Np=a("li"),$se=a("strong"),F_o=o("ibert"),T_o=o(" \u2014 "),KI=a("a"),M_o=o("IBertModel"),E_o=o(" (I-BERT model)"),C_o=l(),jp=a("li"),kse=a("strong"),w_o=o("imagegpt"),A_o=o(" \u2014 "),ZI=a("a"),y_o=o("ImageGPTModel"),L_o=o(" (ImageGPT model)"),x_o=l(),Dp=a("li"),Sse=a("strong"),$_o=o("layoutlm"),k_o=o(" \u2014 "),eq=a("a"),S_o=o("LayoutLMModel"),R_o=o(" (LayoutLM model)"),P_o=l(),Gp=a("li"),Rse=a("strong"),B_o=o("layoutlmv2"),I_o=o(" \u2014 "),oq=a("a"),q_o=o("LayoutLMv2Model"),N_o=o(" (LayoutLMv2 model)"),j_o=l(),Op=a("li"),Pse=a("strong"),D_o=o("layoutlmv3"),G_o=o(" \u2014 "),rq=a("a"),O_o=o("LayoutLMv3Model"),V_o=o(" (LayoutLMv3 model)"),X_o=l(),Vp=a("li"),Bse=a("strong"),z_o=o("led"),W_o=o(" \u2014 "),tq=a("a"),Q_o=o("LEDModel"),H_o=o(" (LED model)"),U_o=l(),Xp=a("li"),Ise=a("strong"),J_o=o("longformer"),Y_o=o(" \u2014 "),aq=a("a"),K_o=o("LongformerModel"),Z_o=o(" (Longformer model)"),e0o=l(),zp=a("li"),qse=a("strong"),o0o=o("luke"),r0o=o(" \u2014 "),nq=a("a"),t0o=o("LukeModel"),a0o=o(" (LUKE model)"),n0o=l(),Wp=a("li"),Nse=a("strong"),s0o=o("lxmert"),l0o=o(" \u2014 "),sq=a("a"),i0o=o("LxmertModel"),d0o=o(" (LXMERT model)"),c0o=l(),Qp=a("li"),jse=a("strong"),f0o=o("m2m_100"),m0o=o(" \u2014 "),lq=a("a"),g0o=o("M2M100Model"),h0o=o(" (M2M100 model)"),p0o=l(),Hp=a("li"),Dse=a("strong"),u0o=o("marian"),_0o=o(" \u2014 "),iq=a("a"),b0o=o("MarianModel"),v0o=o(" (Marian model)"),F0o=l(),Up=a("li"),Gse=a("strong"),T0o=o("maskformer"),M0o=o(" \u2014 "),dq=a("a"),E0o=o("MaskFormerModel"),C0o=o(" (MaskFormer model)"),w0o=l(),Jp=a("li"),Ose=a("strong"),A0o=o("mbart"),y0o=o(" \u2014 "),cq=a("a"),L0o=o("MBartModel"),x0o=o(" (mBART model)"),$0o=l(),Yp=a("li"),Vse=a("strong"),k0o=o("megatron-bert"),S0o=o(" \u2014 "),fq=a("a"),R0o=o("MegatronBertModel"),P0o=o(" (MegatronBert model)"),B0o=l(),Kp=a("li"),Xse=a("strong"),I0o=o("mobilebert"),q0o=o(" \u2014 "),mq=a("a"),N0o=o("MobileBertModel"),j0o=o(" (MobileBERT model)"),D0o=l(),Zp=a("li"),zse=a("strong"),G0o=o("mpnet"),O0o=o(" \u2014 "),gq=a("a"),V0o=o("MPNetModel"),X0o=o(" (MPNet model)"),z0o=l(),eu=a("li"),Wse=a("strong"),W0o=o("mt5"),Q0o=o(" \u2014 "),hq=a("a"),H0o=o("MT5Model"),U0o=o(" (mT5 model)"),J0o=l(),ou=a("li"),Qse=a("strong"),Y0o=o("nystromformer"),K0o=o(" \u2014 "),pq=a("a"),Z0o=o("NystromformerModel"),e1o=o(" (Nystromformer model)"),o1o=l(),ru=a("li"),Hse=a("strong"),r1o=o("openai-gpt"),t1o=o(" \u2014 "),uq=a("a"),a1o=o("OpenAIGPTModel"),n1o=o(" (OpenAI GPT model)"),s1o=l(),tu=a("li"),Use=a("strong"),l1o=o("opt"),i1o=o(" \u2014 "),_q=a("a"),d1o=o("OPTModel"),c1o=o(" (OPT model)"),f1o=l(),au=a("li"),Jse=a("strong"),m1o=o("pegasus"),g1o=o(" \u2014 "),bq=a("a"),h1o=o("PegasusModel"),p1o=o(" (Pegasus model)"),u1o=l(),nu=a("li"),Yse=a("strong"),_1o=o("perceiver"),b1o=o(" \u2014 "),vq=a("a"),v1o=o("PerceiverModel"),F1o=o(" (Perceiver model)"),T1o=l(),su=a("li"),Kse=a("strong"),M1o=o("plbart"),E1o=o(" \u2014 "),Fq=a("a"),C1o=o("PLBartModel"),w1o=o(" (PLBart model)"),A1o=l(),lu=a("li"),Zse=a("strong"),y1o=o("poolformer"),L1o=o(" \u2014 "),Tq=a("a"),x1o=o("PoolFormerModel"),$1o=o(" (PoolFormer model)"),k1o=l(),iu=a("li"),ele=a("strong"),S1o=o("prophetnet"),R1o=o(" \u2014 "),Mq=a("a"),P1o=o("ProphetNetModel"),B1o=o(" (ProphetNet model)"),I1o=l(),du=a("li"),ole=a("strong"),q1o=o("qdqbert"),N1o=o(" \u2014 "),Eq=a("a"),j1o=o("QDQBertModel"),D1o=o(" (QDQBert model)"),G1o=l(),cu=a("li"),rle=a("strong"),O1o=o("reformer"),V1o=o(" \u2014 "),Cq=a("a"),X1o=o("ReformerModel"),z1o=o(" (Reformer model)"),W1o=l(),fu=a("li"),tle=a("strong"),Q1o=o("regnet"),H1o=o(" \u2014 "),wq=a("a"),U1o=o("RegNetModel"),J1o=o(" (RegNet model)"),Y1o=l(),mu=a("li"),ale=a("strong"),K1o=o("rembert"),Z1o=o(" \u2014 "),Aq=a("a"),ebo=o("RemBertModel"),obo=o(" (RemBERT model)"),rbo=l(),gu=a("li"),nle=a("strong"),tbo=o("resnet"),abo=o(" \u2014 "),yq=a("a"),nbo=o("ResNetModel"),sbo=o(" (ResNet model)"),lbo=l(),hu=a("li"),sle=a("strong"),ibo=o("retribert"),dbo=o(" \u2014 "),Lq=a("a"),cbo=o("RetriBertModel"),fbo=o(" (RetriBERT model)"),mbo=l(),pu=a("li"),lle=a("strong"),gbo=o("roberta"),hbo=o(" \u2014 "),xq=a("a"),pbo=o("RobertaModel"),ubo=o(" (RoBERTa model)"),_bo=l(),uu=a("li"),ile=a("strong"),bbo=o("roformer"),vbo=o(" \u2014 "),$q=a("a"),Fbo=o("RoFormerModel"),Tbo=o(" (RoFormer model)"),Mbo=l(),_u=a("li"),dle=a("strong"),Ebo=o("segformer"),Cbo=o(" \u2014 "),kq=a("a"),wbo=o("SegformerModel"),Abo=o(" (SegFormer model)"),ybo=l(),bu=a("li"),cle=a("strong"),Lbo=o("sew"),xbo=o(" \u2014 "),Sq=a("a"),$bo=o("SEWModel"),kbo=o(" (SEW model)"),Sbo=l(),vu=a("li"),fle=a("strong"),Rbo=o("sew-d"),Pbo=o(" \u2014 "),Rq=a("a"),Bbo=o("SEWDModel"),Ibo=o(" (SEW-D model)"),qbo=l(),Fu=a("li"),mle=a("strong"),Nbo=o("speech_to_text"),jbo=o(" \u2014 "),Pq=a("a"),Dbo=o("Speech2TextModel"),Gbo=o(" (Speech2Text model)"),Obo=l(),Tu=a("li"),gle=a("strong"),Vbo=o("splinter"),Xbo=o(" \u2014 "),Bq=a("a"),zbo=o("SplinterModel"),Wbo=o(" (Splinter model)"),Qbo=l(),Mu=a("li"),hle=a("strong"),Hbo=o("squeezebert"),Ubo=o(" \u2014 "),Iq=a("a"),Jbo=o("SqueezeBertModel"),Ybo=o(" (SqueezeBERT model)"),Kbo=l(),Eu=a("li"),ple=a("strong"),Zbo=o("swin"),e2o=o(" \u2014 "),qq=a("a"),o2o=o("SwinModel"),r2o=o(" (Swin model)"),t2o=l(),Cu=a("li"),ule=a("strong"),a2o=o("t5"),n2o=o(" \u2014 "),Nq=a("a"),s2o=o("T5Model"),l2o=o(" (T5 model)"),i2o=l(),wu=a("li"),_le=a("strong"),d2o=o("tapas"),c2o=o(" \u2014 "),jq=a("a"),f2o=o("TapasModel"),m2o=o(" (TAPAS model)"),g2o=l(),Au=a("li"),ble=a("strong"),h2o=o("transfo-xl"),p2o=o(" \u2014 "),Dq=a("a"),u2o=o("TransfoXLModel"),_2o=o(" (Transformer-XL model)"),b2o=l(),yu=a("li"),vle=a("strong"),v2o=o("unispeech"),F2o=o(" \u2014 "),Gq=a("a"),T2o=o("UniSpeechModel"),M2o=o(" (UniSpeech model)"),E2o=l(),Lu=a("li"),Fle=a("strong"),C2o=o("unispeech-sat"),w2o=o(" \u2014 "),Oq=a("a"),A2o=o("UniSpeechSatModel"),y2o=o(" (UniSpeechSat model)"),L2o=l(),xu=a("li"),Tle=a("strong"),x2o=o("van"),$2o=o(" \u2014 "),Vq=a("a"),k2o=o("VanModel"),S2o=o(" (VAN model)"),R2o=l(),$u=a("li"),Mle=a("strong"),P2o=o("vilt"),B2o=o(" \u2014 "),Xq=a("a"),I2o=o("ViltModel"),q2o=o(" (ViLT model)"),N2o=l(),ku=a("li"),Ele=a("strong"),j2o=o("vision-text-dual-encoder"),D2o=o(" \u2014 "),zq=a("a"),G2o=o("VisionTextDualEncoderModel"),O2o=o(" (VisionTextDualEncoder model)"),V2o=l(),Su=a("li"),Cle=a("strong"),X2o=o("visual_bert"),z2o=o(" \u2014 "),Wq=a("a"),W2o=o("VisualBertModel"),Q2o=o(" (VisualBert model)"),H2o=l(),Ru=a("li"),wle=a("strong"),U2o=o("vit"),J2o=o(" \u2014 "),Qq=a("a"),Y2o=o("ViTModel"),K2o=o(" (ViT model)"),Z2o=l(),Pu=a("li"),Ale=a("strong"),evo=o("vit_mae"),ovo=o(" \u2014 "),Hq=a("a"),rvo=o("ViTMAEModel"),tvo=o(" (ViTMAE model)"),avo=l(),Bu=a("li"),yle=a("strong"),nvo=o("wav2vec2"),svo=o(" \u2014 "),Uq=a("a"),lvo=o("Wav2Vec2Model"),ivo=o(" (Wav2Vec2 model)"),dvo=l(),Iu=a("li"),Lle=a("strong"),cvo=o("wav2vec2-conformer"),fvo=o(" \u2014 "),Jq=a("a"),mvo=o("Wav2Vec2ConformerModel"),gvo=o(" (Wav2Vec2-Conformer model)"),hvo=l(),qu=a("li"),xle=a("strong"),pvo=o("wavlm"),uvo=o(" \u2014 "),Yq=a("a"),_vo=o("WavLMModel"),bvo=o(" (WavLM model)"),vvo=l(),Nu=a("li"),$le=a("strong"),Fvo=o("xglm"),Tvo=o(" \u2014 "),Kq=a("a"),Mvo=o("XGLMModel"),Evo=o(" (XGLM model)"),Cvo=l(),ju=a("li"),kle=a("strong"),wvo=o("xlm"),Avo=o(" \u2014 "),Zq=a("a"),yvo=o("XLMModel"),Lvo=o(" (XLM model)"),xvo=l(),Du=a("li"),Sle=a("strong"),$vo=o("xlm-prophetnet"),kvo=o(" \u2014 "),eN=a("a"),Svo=o("XLMProphetNetModel"),Rvo=o(" (XLMProphetNet model)"),Pvo=l(),Gu=a("li"),Rle=a("strong"),Bvo=o("xlm-roberta"),Ivo=o(" \u2014 "),oN=a("a"),qvo=o("XLMRobertaModel"),Nvo=o(" (XLM-RoBERTa model)"),jvo=l(),Ou=a("li"),Ple=a("strong"),Dvo=o("xlm-roberta-xl"),Gvo=o(" \u2014 "),rN=a("a"),Ovo=o("XLMRobertaXLModel"),Vvo=o(" (XLM-RoBERTa-XL model)"),Xvo=l(),Vu=a("li"),Ble=a("strong"),zvo=o("xlnet"),Wvo=o(" \u2014 "),tN=a("a"),Qvo=o("XLNetModel"),Hvo=o(" (XLNet model)"),Uvo=l(),Xu=a("li"),Ile=a("strong"),Jvo=o("yolos"),Yvo=o(" \u2014 "),aN=a("a"),Kvo=o("YolosModel"),Zvo=o(" (YOLOS model)"),eFo=l(),zu=a("li"),qle=a("strong"),oFo=o("yoso"),rFo=o(" \u2014 "),nN=a("a"),tFo=o("YosoModel"),aFo=o(" (YOSO model)"),nFo=l(),Wu=a("p"),sFo=o("The model is set in evaluation mode by default using "),Nle=a("code"),lFo=o("model.eval()"),iFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=a("code"),dFo=o("model.train()"),cFo=l(),F(Qu.$$.fragment),vqe=l(),Li=a("h2"),Hu=a("a"),Dle=a("span"),F(WA.$$.fragment),fFo=l(),Gle=a("span"),mFo=o("AutoModelForPreTraining"),Fqe=l(),xo=a("div"),F(QA.$$.fragment),gFo=l(),xi=a("p"),hFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sN=a("a"),pFo=o("from_pretrained()"),uFo=o(" class method or the "),lN=a("a"),_Fo=o("from_config()"),bFo=o(` class
method.`),vFo=l(),HA=a("p"),FFo=o("This class cannot be instantiated directly using "),Ole=a("code"),TFo=o("__init__()"),MFo=o(" (throws an error)."),EFo=l(),at=a("div"),F(UA.$$.fragment),CFo=l(),Vle=a("p"),wFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),AFo=l(),$i=a("p"),yFo=o(`Note:
Loading a model from its configuration file does `),Xle=a("strong"),LFo=o("not"),xFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=a("a"),$Fo=o("from_pretrained()"),kFo=o(" to load the model weights."),SFo=l(),F(Uu.$$.fragment),RFo=l(),Ye=a("div"),F(JA.$$.fragment),PFo=l(),zle=a("p"),BFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IFo=l(),xa=a("p"),qFo=o("The model class to instantiate is selected based on the "),Wle=a("code"),NFo=o("model_type"),jFo=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),DFo=o("pretrained_model_name_or_path"),GFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=a("code"),OFo=o("pretrained_model_name_or_path"),VFo=o(":"),XFo=l(),G=a("ul"),Ju=a("li"),Ule=a("strong"),zFo=o("albert"),WFo=o(" \u2014 "),dN=a("a"),QFo=o("AlbertForPreTraining"),HFo=o(" (ALBERT model)"),UFo=l(),Yu=a("li"),Jle=a("strong"),JFo=o("bart"),YFo=o(" \u2014 "),cN=a("a"),KFo=o("BartForConditionalGeneration"),ZFo=o(" (BART model)"),e6o=l(),Ku=a("li"),Yle=a("strong"),o6o=o("bert"),r6o=o(" \u2014 "),fN=a("a"),t6o=o("BertForPreTraining"),a6o=o(" (BERT model)"),n6o=l(),Zu=a("li"),Kle=a("strong"),s6o=o("big_bird"),l6o=o(" \u2014 "),mN=a("a"),i6o=o("BigBirdForPreTraining"),d6o=o(" (BigBird model)"),c6o=l(),e_=a("li"),Zle=a("strong"),f6o=o("camembert"),m6o=o(" \u2014 "),gN=a("a"),g6o=o("CamembertForMaskedLM"),h6o=o(" (CamemBERT model)"),p6o=l(),o_=a("li"),eie=a("strong"),u6o=o("ctrl"),_6o=o(" \u2014 "),hN=a("a"),b6o=o("CTRLLMHeadModel"),v6o=o(" (CTRL model)"),F6o=l(),r_=a("li"),oie=a("strong"),T6o=o("data2vec-text"),M6o=o(" \u2014 "),pN=a("a"),E6o=o("Data2VecTextForMaskedLM"),C6o=o(" (Data2VecText model)"),w6o=l(),t_=a("li"),rie=a("strong"),A6o=o("deberta"),y6o=o(" \u2014 "),uN=a("a"),L6o=o("DebertaForMaskedLM"),x6o=o(" (DeBERTa model)"),$6o=l(),a_=a("li"),tie=a("strong"),k6o=o("deberta-v2"),S6o=o(" \u2014 "),_N=a("a"),R6o=o("DebertaV2ForMaskedLM"),P6o=o(" (DeBERTa-v2 model)"),B6o=l(),n_=a("li"),aie=a("strong"),I6o=o("distilbert"),q6o=o(" \u2014 "),bN=a("a"),N6o=o("DistilBertForMaskedLM"),j6o=o(" (DistilBERT model)"),D6o=l(),s_=a("li"),nie=a("strong"),G6o=o("electra"),O6o=o(" \u2014 "),vN=a("a"),V6o=o("ElectraForPreTraining"),X6o=o(" (ELECTRA model)"),z6o=l(),l_=a("li"),sie=a("strong"),W6o=o("flaubert"),Q6o=o(" \u2014 "),FN=a("a"),H6o=o("FlaubertWithLMHeadModel"),U6o=o(" (FlauBERT model)"),J6o=l(),i_=a("li"),lie=a("strong"),Y6o=o("flava"),K6o=o(" \u2014 "),TN=a("a"),Z6o=o("FlavaForPreTraining"),eTo=o(" (Flava model)"),oTo=l(),d_=a("li"),iie=a("strong"),rTo=o("fnet"),tTo=o(" \u2014 "),MN=a("a"),aTo=o("FNetForPreTraining"),nTo=o(" (FNet model)"),sTo=l(),c_=a("li"),die=a("strong"),lTo=o("fsmt"),iTo=o(" \u2014 "),EN=a("a"),dTo=o("FSMTForConditionalGeneration"),cTo=o(" (FairSeq Machine-Translation model)"),fTo=l(),f_=a("li"),cie=a("strong"),mTo=o("funnel"),gTo=o(" \u2014 "),CN=a("a"),hTo=o("FunnelForPreTraining"),pTo=o(" (Funnel Transformer model)"),uTo=l(),m_=a("li"),fie=a("strong"),_To=o("gpt2"),bTo=o(" \u2014 "),wN=a("a"),vTo=o("GPT2LMHeadModel"),FTo=o(" (OpenAI GPT-2 model)"),TTo=l(),g_=a("li"),mie=a("strong"),MTo=o("ibert"),ETo=o(" \u2014 "),AN=a("a"),CTo=o("IBertForMaskedLM"),wTo=o(" (I-BERT model)"),ATo=l(),h_=a("li"),gie=a("strong"),yTo=o("layoutlm"),LTo=o(" \u2014 "),yN=a("a"),xTo=o("LayoutLMForMaskedLM"),$To=o(" (LayoutLM model)"),kTo=l(),p_=a("li"),hie=a("strong"),STo=o("longformer"),RTo=o(" \u2014 "),LN=a("a"),PTo=o("LongformerForMaskedLM"),BTo=o(" (Longformer model)"),ITo=l(),u_=a("li"),pie=a("strong"),qTo=o("lxmert"),NTo=o(" \u2014 "),xN=a("a"),jTo=o("LxmertForPreTraining"),DTo=o(" (LXMERT model)"),GTo=l(),__=a("li"),uie=a("strong"),OTo=o("megatron-bert"),VTo=o(" \u2014 "),$N=a("a"),XTo=o("MegatronBertForPreTraining"),zTo=o(" (MegatronBert model)"),WTo=l(),b_=a("li"),_ie=a("strong"),QTo=o("mobilebert"),HTo=o(" \u2014 "),kN=a("a"),UTo=o("MobileBertForPreTraining"),JTo=o(" (MobileBERT model)"),YTo=l(),v_=a("li"),bie=a("strong"),KTo=o("mpnet"),ZTo=o(" \u2014 "),SN=a("a"),e7o=o("MPNetForMaskedLM"),o7o=o(" (MPNet model)"),r7o=l(),F_=a("li"),vie=a("strong"),t7o=o("openai-gpt"),a7o=o(" \u2014 "),RN=a("a"),n7o=o("OpenAIGPTLMHeadModel"),s7o=o(" (OpenAI GPT model)"),l7o=l(),T_=a("li"),Fie=a("strong"),i7o=o("retribert"),d7o=o(" \u2014 "),PN=a("a"),c7o=o("RetriBertModel"),f7o=o(" (RetriBERT model)"),m7o=l(),M_=a("li"),Tie=a("strong"),g7o=o("roberta"),h7o=o(" \u2014 "),BN=a("a"),p7o=o("RobertaForMaskedLM"),u7o=o(" (RoBERTa model)"),_7o=l(),E_=a("li"),Mie=a("strong"),b7o=o("squeezebert"),v7o=o(" \u2014 "),IN=a("a"),F7o=o("SqueezeBertForMaskedLM"),T7o=o(" (SqueezeBERT model)"),M7o=l(),C_=a("li"),Eie=a("strong"),E7o=o("t5"),C7o=o(" \u2014 "),qN=a("a"),w7o=o("T5ForConditionalGeneration"),A7o=o(" (T5 model)"),y7o=l(),w_=a("li"),Cie=a("strong"),L7o=o("tapas"),x7o=o(" \u2014 "),NN=a("a"),$7o=o("TapasForMaskedLM"),k7o=o(" (TAPAS model)"),S7o=l(),A_=a("li"),wie=a("strong"),R7o=o("transfo-xl"),P7o=o(" \u2014 "),jN=a("a"),B7o=o("TransfoXLLMHeadModel"),I7o=o(" (Transformer-XL model)"),q7o=l(),y_=a("li"),Aie=a("strong"),N7o=o("unispeech"),j7o=o(" \u2014 "),DN=a("a"),D7o=o("UniSpeechForPreTraining"),G7o=o(" (UniSpeech model)"),O7o=l(),L_=a("li"),yie=a("strong"),V7o=o("unispeech-sat"),X7o=o(" \u2014 "),GN=a("a"),z7o=o("UniSpeechSatForPreTraining"),W7o=o(" (UniSpeechSat model)"),Q7o=l(),x_=a("li"),Lie=a("strong"),H7o=o("visual_bert"),U7o=o(" \u2014 "),ON=a("a"),J7o=o("VisualBertForPreTraining"),Y7o=o(" (VisualBert model)"),K7o=l(),$_=a("li"),xie=a("strong"),Z7o=o("vit_mae"),eMo=o(" \u2014 "),VN=a("a"),oMo=o("ViTMAEForPreTraining"),rMo=o(" (ViTMAE model)"),tMo=l(),k_=a("li"),$ie=a("strong"),aMo=o("wav2vec2"),nMo=o(" \u2014 "),XN=a("a"),sMo=o("Wav2Vec2ForPreTraining"),lMo=o(" (Wav2Vec2 model)"),iMo=l(),S_=a("li"),kie=a("strong"),dMo=o("wav2vec2-conformer"),cMo=o(" \u2014 "),zN=a("a"),fMo=o("Wav2Vec2ConformerForPreTraining"),mMo=o(" (Wav2Vec2-Conformer model)"),gMo=l(),R_=a("li"),Sie=a("strong"),hMo=o("xlm"),pMo=o(" \u2014 "),WN=a("a"),uMo=o("XLMWithLMHeadModel"),_Mo=o(" (XLM model)"),bMo=l(),P_=a("li"),Rie=a("strong"),vMo=o("xlm-roberta"),FMo=o(" \u2014 "),QN=a("a"),TMo=o("XLMRobertaForMaskedLM"),MMo=o(" (XLM-RoBERTa model)"),EMo=l(),B_=a("li"),Pie=a("strong"),CMo=o("xlm-roberta-xl"),wMo=o(" \u2014 "),HN=a("a"),AMo=o("XLMRobertaXLForMaskedLM"),yMo=o(" (XLM-RoBERTa-XL model)"),LMo=l(),I_=a("li"),Bie=a("strong"),xMo=o("xlnet"),$Mo=o(" \u2014 "),UN=a("a"),kMo=o("XLNetLMHeadModel"),SMo=o(" (XLNet model)"),RMo=l(),q_=a("p"),PMo=o("The model is set in evaluation mode by default using "),Iie=a("code"),BMo=o("model.eval()"),IMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),qMo=o("model.train()"),NMo=l(),F(N_.$$.fragment),Tqe=l(),ki=a("h2"),j_=a("a"),Nie=a("span"),F(YA.$$.fragment),jMo=l(),jie=a("span"),DMo=o("AutoModelForCausalLM"),Mqe=l(),$o=a("div"),F(KA.$$.fragment),GMo=l(),Si=a("p"),OMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=a("a"),VMo=o("from_pretrained()"),XMo=o(" class method or the "),YN=a("a"),zMo=o("from_config()"),WMo=o(` class
method.`),QMo=l(),ZA=a("p"),HMo=o("This class cannot be instantiated directly using "),Die=a("code"),UMo=o("__init__()"),JMo=o(" (throws an error)."),YMo=l(),nt=a("div"),F(ey.$$.fragment),KMo=l(),Gie=a("p"),ZMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e4o=l(),Ri=a("p"),o4o=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),r4o=o("not"),t4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),a4o=o("from_pretrained()"),n4o=o(" to load the model weights."),s4o=l(),F(D_.$$.fragment),l4o=l(),Ke=a("div"),F(oy.$$.fragment),i4o=l(),Vie=a("p"),d4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c4o=l(),$a=a("p"),f4o=o("The model class to instantiate is selected based on the "),Xie=a("code"),m4o=o("model_type"),g4o=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),h4o=o("pretrained_model_name_or_path"),p4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),u4o=o("pretrained_model_name_or_path"),_4o=o(":"),b4o=l(),z=a("ul"),G_=a("li"),Qie=a("strong"),v4o=o("bart"),F4o=o(" \u2014 "),ZN=a("a"),T4o=o("BartForCausalLM"),M4o=o(" (BART model)"),E4o=l(),O_=a("li"),Hie=a("strong"),C4o=o("bert"),w4o=o(" \u2014 "),ej=a("a"),A4o=o("BertLMHeadModel"),y4o=o(" (BERT model)"),L4o=l(),V_=a("li"),Uie=a("strong"),x4o=o("bert-generation"),$4o=o(" \u2014 "),oj=a("a"),k4o=o("BertGenerationDecoder"),S4o=o(" (Bert Generation model)"),R4o=l(),X_=a("li"),Jie=a("strong"),P4o=o("big_bird"),B4o=o(" \u2014 "),rj=a("a"),I4o=o("BigBirdForCausalLM"),q4o=o(" (BigBird model)"),N4o=l(),z_=a("li"),Yie=a("strong"),j4o=o("bigbird_pegasus"),D4o=o(" \u2014 "),tj=a("a"),G4o=o("BigBirdPegasusForCausalLM"),O4o=o(" (BigBirdPegasus model)"),V4o=l(),W_=a("li"),Kie=a("strong"),X4o=o("blenderbot"),z4o=o(" \u2014 "),aj=a("a"),W4o=o("BlenderbotForCausalLM"),Q4o=o(" (Blenderbot model)"),H4o=l(),Q_=a("li"),Zie=a("strong"),U4o=o("blenderbot-small"),J4o=o(" \u2014 "),nj=a("a"),Y4o=o("BlenderbotSmallForCausalLM"),K4o=o(" (BlenderbotSmall model)"),Z4o=l(),H_=a("li"),ede=a("strong"),eEo=o("camembert"),oEo=o(" \u2014 "),sj=a("a"),rEo=o("CamembertForCausalLM"),tEo=o(" (CamemBERT model)"),aEo=l(),U_=a("li"),ode=a("strong"),nEo=o("ctrl"),sEo=o(" \u2014 "),lj=a("a"),lEo=o("CTRLLMHeadModel"),iEo=o(" (CTRL model)"),dEo=l(),J_=a("li"),rde=a("strong"),cEo=o("data2vec-text"),fEo=o(" \u2014 "),ij=a("a"),mEo=o("Data2VecTextForCausalLM"),gEo=o(" (Data2VecText model)"),hEo=l(),Y_=a("li"),tde=a("strong"),pEo=o("electra"),uEo=o(" \u2014 "),dj=a("a"),_Eo=o("ElectraForCausalLM"),bEo=o(" (ELECTRA model)"),vEo=l(),K_=a("li"),ade=a("strong"),FEo=o("gpt2"),TEo=o(" \u2014 "),cj=a("a"),MEo=o("GPT2LMHeadModel"),EEo=o(" (OpenAI GPT-2 model)"),CEo=l(),Z_=a("li"),nde=a("strong"),wEo=o("gpt_neo"),AEo=o(" \u2014 "),fj=a("a"),yEo=o("GPTNeoForCausalLM"),LEo=o(" (GPT Neo model)"),xEo=l(),e0=a("li"),sde=a("strong"),$Eo=o("gptj"),kEo=o(" \u2014 "),mj=a("a"),SEo=o("GPTJForCausalLM"),REo=o(" (GPT-J model)"),PEo=l(),o0=a("li"),lde=a("strong"),BEo=o("marian"),IEo=o(" \u2014 "),gj=a("a"),qEo=o("MarianForCausalLM"),NEo=o(" (Marian model)"),jEo=l(),r0=a("li"),ide=a("strong"),DEo=o("mbart"),GEo=o(" \u2014 "),hj=a("a"),OEo=o("MBartForCausalLM"),VEo=o(" (mBART model)"),XEo=l(),t0=a("li"),dde=a("strong"),zEo=o("megatron-bert"),WEo=o(" \u2014 "),pj=a("a"),QEo=o("MegatronBertForCausalLM"),HEo=o(" (MegatronBert model)"),UEo=l(),a0=a("li"),cde=a("strong"),JEo=o("openai-gpt"),YEo=o(" \u2014 "),uj=a("a"),KEo=o("OpenAIGPTLMHeadModel"),ZEo=o(" (OpenAI GPT model)"),eCo=l(),n0=a("li"),fde=a("strong"),oCo=o("opt"),rCo=o(" \u2014 "),_j=a("a"),tCo=o("OPTForCausalLM"),aCo=o(" (OPT model)"),nCo=l(),s0=a("li"),mde=a("strong"),sCo=o("pegasus"),lCo=o(" \u2014 "),bj=a("a"),iCo=o("PegasusForCausalLM"),dCo=o(" (Pegasus model)"),cCo=l(),l0=a("li"),gde=a("strong"),fCo=o("plbart"),mCo=o(" \u2014 "),vj=a("a"),gCo=o("PLBartForCausalLM"),hCo=o(" (PLBart model)"),pCo=l(),i0=a("li"),hde=a("strong"),uCo=o("prophetnet"),_Co=o(" \u2014 "),Fj=a("a"),bCo=o("ProphetNetForCausalLM"),vCo=o(" (ProphetNet model)"),FCo=l(),d0=a("li"),pde=a("strong"),TCo=o("qdqbert"),MCo=o(" \u2014 "),Tj=a("a"),ECo=o("QDQBertLMHeadModel"),CCo=o(" (QDQBert model)"),wCo=l(),c0=a("li"),ude=a("strong"),ACo=o("reformer"),yCo=o(" \u2014 "),Mj=a("a"),LCo=o("ReformerModelWithLMHead"),xCo=o(" (Reformer model)"),$Co=l(),f0=a("li"),_de=a("strong"),kCo=o("rembert"),SCo=o(" \u2014 "),Ej=a("a"),RCo=o("RemBertForCausalLM"),PCo=o(" (RemBERT model)"),BCo=l(),m0=a("li"),bde=a("strong"),ICo=o("roberta"),qCo=o(" \u2014 "),Cj=a("a"),NCo=o("RobertaForCausalLM"),jCo=o(" (RoBERTa model)"),DCo=l(),g0=a("li"),vde=a("strong"),GCo=o("roformer"),OCo=o(" \u2014 "),wj=a("a"),VCo=o("RoFormerForCausalLM"),XCo=o(" (RoFormer model)"),zCo=l(),h0=a("li"),Fde=a("strong"),WCo=o("speech_to_text_2"),QCo=o(" \u2014 "),Aj=a("a"),HCo=o("Speech2Text2ForCausalLM"),UCo=o(" (Speech2Text2 model)"),JCo=l(),p0=a("li"),Tde=a("strong"),YCo=o("transfo-xl"),KCo=o(" \u2014 "),yj=a("a"),ZCo=o("TransfoXLLMHeadModel"),e5o=o(" (Transformer-XL model)"),o5o=l(),u0=a("li"),Mde=a("strong"),r5o=o("trocr"),t5o=o(" \u2014 "),Lj=a("a"),a5o=o("TrOCRForCausalLM"),n5o=o(" (TrOCR model)"),s5o=l(),_0=a("li"),Ede=a("strong"),l5o=o("xglm"),i5o=o(" \u2014 "),xj=a("a"),d5o=o("XGLMForCausalLM"),c5o=o(" (XGLM model)"),f5o=l(),b0=a("li"),Cde=a("strong"),m5o=o("xlm"),g5o=o(" \u2014 "),$j=a("a"),h5o=o("XLMWithLMHeadModel"),p5o=o(" (XLM model)"),u5o=l(),v0=a("li"),wde=a("strong"),_5o=o("xlm-prophetnet"),b5o=o(" \u2014 "),kj=a("a"),v5o=o("XLMProphetNetForCausalLM"),F5o=o(" (XLMProphetNet model)"),T5o=l(),F0=a("li"),Ade=a("strong"),M5o=o("xlm-roberta"),E5o=o(" \u2014 "),Sj=a("a"),C5o=o("XLMRobertaForCausalLM"),w5o=o(" (XLM-RoBERTa model)"),A5o=l(),T0=a("li"),yde=a("strong"),y5o=o("xlm-roberta-xl"),L5o=o(" \u2014 "),Rj=a("a"),x5o=o("XLMRobertaXLForCausalLM"),$5o=o(" (XLM-RoBERTa-XL model)"),k5o=l(),M0=a("li"),Lde=a("strong"),S5o=o("xlnet"),R5o=o(" \u2014 "),Pj=a("a"),P5o=o("XLNetLMHeadModel"),B5o=o(" (XLNet model)"),I5o=l(),E0=a("p"),q5o=o("The model is set in evaluation mode by default using "),xde=a("code"),N5o=o("model.eval()"),j5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),D5o=o("model.train()"),G5o=l(),F(C0.$$.fragment),Eqe=l(),Pi=a("h2"),w0=a("a"),kde=a("span"),F(ry.$$.fragment),O5o=l(),Sde=a("span"),V5o=o("AutoModelForMaskedLM"),Cqe=l(),ko=a("div"),F(ty.$$.fragment),X5o=l(),Bi=a("p"),z5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bj=a("a"),W5o=o("from_pretrained()"),Q5o=o(" class method or the "),Ij=a("a"),H5o=o("from_config()"),U5o=o(` class
method.`),J5o=l(),ay=a("p"),Y5o=o("This class cannot be instantiated directly using "),Rde=a("code"),K5o=o("__init__()"),Z5o=o(" (throws an error)."),e3o=l(),st=a("div"),F(ny.$$.fragment),o3o=l(),Pde=a("p"),r3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),t3o=l(),Ii=a("p"),a3o=o(`Note:
Loading a model from its configuration file does `),Bde=a("strong"),n3o=o("not"),s3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=a("a"),l3o=o("from_pretrained()"),i3o=o(" to load the model weights."),d3o=l(),F(A0.$$.fragment),c3o=l(),Ze=a("div"),F(sy.$$.fragment),f3o=l(),Ide=a("p"),m3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g3o=l(),ka=a("p"),h3o=o("The model class to instantiate is selected based on the "),qde=a("code"),p3o=o("model_type"),u3o=o(` property of the config object (either
passed as an argument or loaded from `),Nde=a("code"),_3o=o("pretrained_model_name_or_path"),b3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),v3o=o("pretrained_model_name_or_path"),F3o=o(":"),T3o=l(),W=a("ul"),y0=a("li"),Dde=a("strong"),M3o=o("albert"),E3o=o(" \u2014 "),Nj=a("a"),C3o=o("AlbertForMaskedLM"),w3o=o(" (ALBERT model)"),A3o=l(),L0=a("li"),Gde=a("strong"),y3o=o("bart"),L3o=o(" \u2014 "),jj=a("a"),x3o=o("BartForConditionalGeneration"),$3o=o(" (BART model)"),k3o=l(),x0=a("li"),Ode=a("strong"),S3o=o("bert"),R3o=o(" \u2014 "),Dj=a("a"),P3o=o("BertForMaskedLM"),B3o=o(" (BERT model)"),I3o=l(),$0=a("li"),Vde=a("strong"),q3o=o("big_bird"),N3o=o(" \u2014 "),Gj=a("a"),j3o=o("BigBirdForMaskedLM"),D3o=o(" (BigBird model)"),G3o=l(),k0=a("li"),Xde=a("strong"),O3o=o("camembert"),V3o=o(" \u2014 "),Oj=a("a"),X3o=o("CamembertForMaskedLM"),z3o=o(" (CamemBERT model)"),W3o=l(),S0=a("li"),zde=a("strong"),Q3o=o("convbert"),H3o=o(" \u2014 "),Vj=a("a"),U3o=o("ConvBertForMaskedLM"),J3o=o(" (ConvBERT model)"),Y3o=l(),R0=a("li"),Wde=a("strong"),K3o=o("data2vec-text"),Z3o=o(" \u2014 "),Xj=a("a"),ewo=o("Data2VecTextForMaskedLM"),owo=o(" (Data2VecText model)"),rwo=l(),P0=a("li"),Qde=a("strong"),two=o("deberta"),awo=o(" \u2014 "),zj=a("a"),nwo=o("DebertaForMaskedLM"),swo=o(" (DeBERTa model)"),lwo=l(),B0=a("li"),Hde=a("strong"),iwo=o("deberta-v2"),dwo=o(" \u2014 "),Wj=a("a"),cwo=o("DebertaV2ForMaskedLM"),fwo=o(" (DeBERTa-v2 model)"),mwo=l(),I0=a("li"),Ude=a("strong"),gwo=o("distilbert"),hwo=o(" \u2014 "),Qj=a("a"),pwo=o("DistilBertForMaskedLM"),uwo=o(" (DistilBERT model)"),_wo=l(),q0=a("li"),Jde=a("strong"),bwo=o("electra"),vwo=o(" \u2014 "),Hj=a("a"),Fwo=o("ElectraForMaskedLM"),Two=o(" (ELECTRA model)"),Mwo=l(),N0=a("li"),Yde=a("strong"),Ewo=o("flaubert"),Cwo=o(" \u2014 "),Uj=a("a"),wwo=o("FlaubertWithLMHeadModel"),Awo=o(" (FlauBERT model)"),ywo=l(),j0=a("li"),Kde=a("strong"),Lwo=o("fnet"),xwo=o(" \u2014 "),Jj=a("a"),$wo=o("FNetForMaskedLM"),kwo=o(" (FNet model)"),Swo=l(),D0=a("li"),Zde=a("strong"),Rwo=o("funnel"),Pwo=o(" \u2014 "),Yj=a("a"),Bwo=o("FunnelForMaskedLM"),Iwo=o(" (Funnel Transformer model)"),qwo=l(),G0=a("li"),ece=a("strong"),Nwo=o("ibert"),jwo=o(" \u2014 "),Kj=a("a"),Dwo=o("IBertForMaskedLM"),Gwo=o(" (I-BERT model)"),Owo=l(),O0=a("li"),oce=a("strong"),Vwo=o("layoutlm"),Xwo=o(" \u2014 "),Zj=a("a"),zwo=o("LayoutLMForMaskedLM"),Wwo=o(" (LayoutLM model)"),Qwo=l(),V0=a("li"),rce=a("strong"),Hwo=o("longformer"),Uwo=o(" \u2014 "),eD=a("a"),Jwo=o("LongformerForMaskedLM"),Ywo=o(" (Longformer model)"),Kwo=l(),X0=a("li"),tce=a("strong"),Zwo=o("mbart"),eAo=o(" \u2014 "),oD=a("a"),oAo=o("MBartForConditionalGeneration"),rAo=o(" (mBART model)"),tAo=l(),z0=a("li"),ace=a("strong"),aAo=o("megatron-bert"),nAo=o(" \u2014 "),rD=a("a"),sAo=o("MegatronBertForMaskedLM"),lAo=o(" (MegatronBert model)"),iAo=l(),W0=a("li"),nce=a("strong"),dAo=o("mobilebert"),cAo=o(" \u2014 "),tD=a("a"),fAo=o("MobileBertForMaskedLM"),mAo=o(" (MobileBERT model)"),gAo=l(),Q0=a("li"),sce=a("strong"),hAo=o("mpnet"),pAo=o(" \u2014 "),aD=a("a"),uAo=o("MPNetForMaskedLM"),_Ao=o(" (MPNet model)"),bAo=l(),H0=a("li"),lce=a("strong"),vAo=o("nystromformer"),FAo=o(" \u2014 "),nD=a("a"),TAo=o("NystromformerForMaskedLM"),MAo=o(" (Nystromformer model)"),EAo=l(),U0=a("li"),ice=a("strong"),CAo=o("perceiver"),wAo=o(" \u2014 "),sD=a("a"),AAo=o("PerceiverForMaskedLM"),yAo=o(" (Perceiver model)"),LAo=l(),J0=a("li"),dce=a("strong"),xAo=o("qdqbert"),$Ao=o(" \u2014 "),lD=a("a"),kAo=o("QDQBertForMaskedLM"),SAo=o(" (QDQBert model)"),RAo=l(),Y0=a("li"),cce=a("strong"),PAo=o("reformer"),BAo=o(" \u2014 "),iD=a("a"),IAo=o("ReformerForMaskedLM"),qAo=o(" (Reformer model)"),NAo=l(),K0=a("li"),fce=a("strong"),jAo=o("rembert"),DAo=o(" \u2014 "),dD=a("a"),GAo=o("RemBertForMaskedLM"),OAo=o(" (RemBERT model)"),VAo=l(),Z0=a("li"),mce=a("strong"),XAo=o("roberta"),zAo=o(" \u2014 "),cD=a("a"),WAo=o("RobertaForMaskedLM"),QAo=o(" (RoBERTa model)"),HAo=l(),e1=a("li"),gce=a("strong"),UAo=o("roformer"),JAo=o(" \u2014 "),fD=a("a"),YAo=o("RoFormerForMaskedLM"),KAo=o(" (RoFormer model)"),ZAo=l(),o1=a("li"),hce=a("strong"),eyo=o("squeezebert"),oyo=o(" \u2014 "),mD=a("a"),ryo=o("SqueezeBertForMaskedLM"),tyo=o(" (SqueezeBERT model)"),ayo=l(),r1=a("li"),pce=a("strong"),nyo=o("tapas"),syo=o(" \u2014 "),gD=a("a"),lyo=o("TapasForMaskedLM"),iyo=o(" (TAPAS model)"),dyo=l(),t1=a("li"),uce=a("strong"),cyo=o("wav2vec2"),fyo=o(" \u2014 "),_ce=a("code"),myo=o("Wav2Vec2ForMaskedLM"),gyo=o(" (Wav2Vec2 model)"),hyo=l(),a1=a("li"),bce=a("strong"),pyo=o("xlm"),uyo=o(" \u2014 "),hD=a("a"),_yo=o("XLMWithLMHeadModel"),byo=o(" (XLM model)"),vyo=l(),n1=a("li"),vce=a("strong"),Fyo=o("xlm-roberta"),Tyo=o(" \u2014 "),pD=a("a"),Myo=o("XLMRobertaForMaskedLM"),Eyo=o(" (XLM-RoBERTa model)"),Cyo=l(),s1=a("li"),Fce=a("strong"),wyo=o("xlm-roberta-xl"),Ayo=o(" \u2014 "),uD=a("a"),yyo=o("XLMRobertaXLForMaskedLM"),Lyo=o(" (XLM-RoBERTa-XL model)"),xyo=l(),l1=a("li"),Tce=a("strong"),$yo=o("yoso"),kyo=o(" \u2014 "),_D=a("a"),Syo=o("YosoForMaskedLM"),Ryo=o(" (YOSO model)"),Pyo=l(),i1=a("p"),Byo=o("The model is set in evaluation mode by default using "),Mce=a("code"),Iyo=o("model.eval()"),qyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),Nyo=o("model.train()"),jyo=l(),F(d1.$$.fragment),wqe=l(),qi=a("h2"),c1=a("a"),Cce=a("span"),F(ly.$$.fragment),Dyo=l(),wce=a("span"),Gyo=o("AutoModelForSeq2SeqLM"),Aqe=l(),So=a("div"),F(iy.$$.fragment),Oyo=l(),Ni=a("p"),Vyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bD=a("a"),Xyo=o("from_pretrained()"),zyo=o(" class method or the "),vD=a("a"),Wyo=o("from_config()"),Qyo=o(` class
method.`),Hyo=l(),dy=a("p"),Uyo=o("This class cannot be instantiated directly using "),Ace=a("code"),Jyo=o("__init__()"),Yyo=o(" (throws an error)."),Kyo=l(),lt=a("div"),F(cy.$$.fragment),Zyo=l(),yce=a("p"),eLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oLo=l(),ji=a("p"),rLo=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),tLo=o("not"),aLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),nLo=o("from_pretrained()"),sLo=o(" to load the model weights."),lLo=l(),F(f1.$$.fragment),iLo=l(),eo=a("div"),F(fy.$$.fragment),dLo=l(),xce=a("p"),cLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fLo=l(),Sa=a("p"),mLo=o("The model class to instantiate is selected based on the "),$ce=a("code"),gLo=o("model_type"),hLo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),pLo=o("pretrained_model_name_or_path"),uLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),_Lo=o("pretrained_model_name_or_path"),bLo=o(":"),vLo=l(),ue=a("ul"),m1=a("li"),Rce=a("strong"),FLo=o("bart"),TLo=o(" \u2014 "),TD=a("a"),MLo=o("BartForConditionalGeneration"),ELo=o(" (BART model)"),CLo=l(),g1=a("li"),Pce=a("strong"),wLo=o("bigbird_pegasus"),ALo=o(" \u2014 "),MD=a("a"),yLo=o("BigBirdPegasusForConditionalGeneration"),LLo=o(" (BigBirdPegasus model)"),xLo=l(),h1=a("li"),Bce=a("strong"),$Lo=o("blenderbot"),kLo=o(" \u2014 "),ED=a("a"),SLo=o("BlenderbotForConditionalGeneration"),RLo=o(" (Blenderbot model)"),PLo=l(),p1=a("li"),Ice=a("strong"),BLo=o("blenderbot-small"),ILo=o(" \u2014 "),CD=a("a"),qLo=o("BlenderbotSmallForConditionalGeneration"),NLo=o(" (BlenderbotSmall model)"),jLo=l(),u1=a("li"),qce=a("strong"),DLo=o("encoder-decoder"),GLo=o(" \u2014 "),wD=a("a"),OLo=o("EncoderDecoderModel"),VLo=o(" (Encoder decoder model)"),XLo=l(),_1=a("li"),Nce=a("strong"),zLo=o("fsmt"),WLo=o(" \u2014 "),AD=a("a"),QLo=o("FSMTForConditionalGeneration"),HLo=o(" (FairSeq Machine-Translation model)"),ULo=l(),b1=a("li"),jce=a("strong"),JLo=o("led"),YLo=o(" \u2014 "),yD=a("a"),KLo=o("LEDForConditionalGeneration"),ZLo=o(" (LED model)"),e8o=l(),v1=a("li"),Dce=a("strong"),o8o=o("m2m_100"),r8o=o(" \u2014 "),LD=a("a"),t8o=o("M2M100ForConditionalGeneration"),a8o=o(" (M2M100 model)"),n8o=l(),F1=a("li"),Gce=a("strong"),s8o=o("marian"),l8o=o(" \u2014 "),xD=a("a"),i8o=o("MarianMTModel"),d8o=o(" (Marian model)"),c8o=l(),T1=a("li"),Oce=a("strong"),f8o=o("mbart"),m8o=o(" \u2014 "),$D=a("a"),g8o=o("MBartForConditionalGeneration"),h8o=o(" (mBART model)"),p8o=l(),M1=a("li"),Vce=a("strong"),u8o=o("mt5"),_8o=o(" \u2014 "),kD=a("a"),b8o=o("MT5ForConditionalGeneration"),v8o=o(" (mT5 model)"),F8o=l(),E1=a("li"),Xce=a("strong"),T8o=o("pegasus"),M8o=o(" \u2014 "),SD=a("a"),E8o=o("PegasusForConditionalGeneration"),C8o=o(" (Pegasus model)"),w8o=l(),C1=a("li"),zce=a("strong"),A8o=o("plbart"),y8o=o(" \u2014 "),RD=a("a"),L8o=o("PLBartForConditionalGeneration"),x8o=o(" (PLBart model)"),$8o=l(),w1=a("li"),Wce=a("strong"),k8o=o("prophetnet"),S8o=o(" \u2014 "),PD=a("a"),R8o=o("ProphetNetForConditionalGeneration"),P8o=o(" (ProphetNet model)"),B8o=l(),A1=a("li"),Qce=a("strong"),I8o=o("t5"),q8o=o(" \u2014 "),BD=a("a"),N8o=o("T5ForConditionalGeneration"),j8o=o(" (T5 model)"),D8o=l(),y1=a("li"),Hce=a("strong"),G8o=o("xlm-prophetnet"),O8o=o(" \u2014 "),ID=a("a"),V8o=o("XLMProphetNetForConditionalGeneration"),X8o=o(" (XLMProphetNet model)"),z8o=l(),L1=a("p"),W8o=o("The model is set in evaluation mode by default using "),Uce=a("code"),Q8o=o("model.eval()"),H8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=a("code"),U8o=o("model.train()"),J8o=l(),F(x1.$$.fragment),yqe=l(),Di=a("h2"),$1=a("a"),Yce=a("span"),F(my.$$.fragment),Y8o=l(),Kce=a("span"),K8o=o("AutoModelForSequenceClassification"),Lqe=l(),Ro=a("div"),F(gy.$$.fragment),Z8o=l(),Gi=a("p"),e9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=a("a"),o9o=o("from_pretrained()"),r9o=o(" class method or the "),ND=a("a"),t9o=o("from_config()"),a9o=o(` class
method.`),n9o=l(),hy=a("p"),s9o=o("This class cannot be instantiated directly using "),Zce=a("code"),l9o=o("__init__()"),i9o=o(" (throws an error)."),d9o=l(),it=a("div"),F(py.$$.fragment),c9o=l(),efe=a("p"),f9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m9o=l(),Oi=a("p"),g9o=o(`Note:
Loading a model from its configuration file does `),ofe=a("strong"),h9o=o("not"),p9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),u9o=o("from_pretrained()"),_9o=o(" to load the model weights."),b9o=l(),F(k1.$$.fragment),v9o=l(),oo=a("div"),F(uy.$$.fragment),F9o=l(),rfe=a("p"),T9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M9o=l(),Ra=a("p"),E9o=o("The model class to instantiate is selected based on the "),tfe=a("code"),C9o=o("model_type"),w9o=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),A9o=o("pretrained_model_name_or_path"),y9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),L9o=o("pretrained_model_name_or_path"),x9o=o(":"),$9o=l(),q=a("ul"),S1=a("li"),sfe=a("strong"),k9o=o("albert"),S9o=o(" \u2014 "),DD=a("a"),R9o=o("AlbertForSequenceClassification"),P9o=o(" (ALBERT model)"),B9o=l(),R1=a("li"),lfe=a("strong"),I9o=o("bart"),q9o=o(" \u2014 "),GD=a("a"),N9o=o("BartForSequenceClassification"),j9o=o(" (BART model)"),D9o=l(),P1=a("li"),ife=a("strong"),G9o=o("bert"),O9o=o(" \u2014 "),OD=a("a"),V9o=o("BertForSequenceClassification"),X9o=o(" (BERT model)"),z9o=l(),B1=a("li"),dfe=a("strong"),W9o=o("big_bird"),Q9o=o(" \u2014 "),VD=a("a"),H9o=o("BigBirdForSequenceClassification"),U9o=o(" (BigBird model)"),J9o=l(),I1=a("li"),cfe=a("strong"),Y9o=o("bigbird_pegasus"),K9o=o(" \u2014 "),XD=a("a"),Z9o=o("BigBirdPegasusForSequenceClassification"),exo=o(" (BigBirdPegasus model)"),oxo=l(),q1=a("li"),ffe=a("strong"),rxo=o("camembert"),txo=o(" \u2014 "),zD=a("a"),axo=o("CamembertForSequenceClassification"),nxo=o(" (CamemBERT model)"),sxo=l(),N1=a("li"),mfe=a("strong"),lxo=o("canine"),ixo=o(" \u2014 "),WD=a("a"),dxo=o("CanineForSequenceClassification"),cxo=o(" (Canine model)"),fxo=l(),j1=a("li"),gfe=a("strong"),mxo=o("convbert"),gxo=o(" \u2014 "),QD=a("a"),hxo=o("ConvBertForSequenceClassification"),pxo=o(" (ConvBERT model)"),uxo=l(),D1=a("li"),hfe=a("strong"),_xo=o("ctrl"),bxo=o(" \u2014 "),HD=a("a"),vxo=o("CTRLForSequenceClassification"),Fxo=o(" (CTRL model)"),Txo=l(),G1=a("li"),pfe=a("strong"),Mxo=o("data2vec-text"),Exo=o(" \u2014 "),UD=a("a"),Cxo=o("Data2VecTextForSequenceClassification"),wxo=o(" (Data2VecText model)"),Axo=l(),O1=a("li"),ufe=a("strong"),yxo=o("deberta"),Lxo=o(" \u2014 "),JD=a("a"),xxo=o("DebertaForSequenceClassification"),$xo=o(" (DeBERTa model)"),kxo=l(),V1=a("li"),_fe=a("strong"),Sxo=o("deberta-v2"),Rxo=o(" \u2014 "),YD=a("a"),Pxo=o("DebertaV2ForSequenceClassification"),Bxo=o(" (DeBERTa-v2 model)"),Ixo=l(),X1=a("li"),bfe=a("strong"),qxo=o("distilbert"),Nxo=o(" \u2014 "),KD=a("a"),jxo=o("DistilBertForSequenceClassification"),Dxo=o(" (DistilBERT model)"),Gxo=l(),z1=a("li"),vfe=a("strong"),Oxo=o("electra"),Vxo=o(" \u2014 "),ZD=a("a"),Xxo=o("ElectraForSequenceClassification"),zxo=o(" (ELECTRA model)"),Wxo=l(),W1=a("li"),Ffe=a("strong"),Qxo=o("flaubert"),Hxo=o(" \u2014 "),eG=a("a"),Uxo=o("FlaubertForSequenceClassification"),Jxo=o(" (FlauBERT model)"),Yxo=l(),Q1=a("li"),Tfe=a("strong"),Kxo=o("fnet"),Zxo=o(" \u2014 "),oG=a("a"),e$o=o("FNetForSequenceClassification"),o$o=o(" (FNet model)"),r$o=l(),H1=a("li"),Mfe=a("strong"),t$o=o("funnel"),a$o=o(" \u2014 "),rG=a("a"),n$o=o("FunnelForSequenceClassification"),s$o=o(" (Funnel Transformer model)"),l$o=l(),U1=a("li"),Efe=a("strong"),i$o=o("gpt2"),d$o=o(" \u2014 "),tG=a("a"),c$o=o("GPT2ForSequenceClassification"),f$o=o(" (OpenAI GPT-2 model)"),m$o=l(),J1=a("li"),Cfe=a("strong"),g$o=o("gpt_neo"),h$o=o(" \u2014 "),aG=a("a"),p$o=o("GPTNeoForSequenceClassification"),u$o=o(" (GPT Neo model)"),_$o=l(),Y1=a("li"),wfe=a("strong"),b$o=o("gptj"),v$o=o(" \u2014 "),nG=a("a"),F$o=o("GPTJForSequenceClassification"),T$o=o(" (GPT-J model)"),M$o=l(),K1=a("li"),Afe=a("strong"),E$o=o("ibert"),C$o=o(" \u2014 "),sG=a("a"),w$o=o("IBertForSequenceClassification"),A$o=o(" (I-BERT model)"),y$o=l(),Z1=a("li"),yfe=a("strong"),L$o=o("layoutlm"),x$o=o(" \u2014 "),lG=a("a"),$$o=o("LayoutLMForSequenceClassification"),k$o=o(" (LayoutLM model)"),S$o=l(),eb=a("li"),Lfe=a("strong"),R$o=o("layoutlmv2"),P$o=o(" \u2014 "),iG=a("a"),B$o=o("LayoutLMv2ForSequenceClassification"),I$o=o(" (LayoutLMv2 model)"),q$o=l(),ob=a("li"),xfe=a("strong"),N$o=o("layoutlmv3"),j$o=o(" \u2014 "),dG=a("a"),D$o=o("LayoutLMv3ForSequenceClassification"),G$o=o(" (LayoutLMv3 model)"),O$o=l(),rb=a("li"),$fe=a("strong"),V$o=o("led"),X$o=o(" \u2014 "),cG=a("a"),z$o=o("LEDForSequenceClassification"),W$o=o(" (LED model)"),Q$o=l(),tb=a("li"),kfe=a("strong"),H$o=o("longformer"),U$o=o(" \u2014 "),fG=a("a"),J$o=o("LongformerForSequenceClassification"),Y$o=o(" (Longformer model)"),K$o=l(),ab=a("li"),Sfe=a("strong"),Z$o=o("mbart"),eko=o(" \u2014 "),mG=a("a"),oko=o("MBartForSequenceClassification"),rko=o(" (mBART model)"),tko=l(),nb=a("li"),Rfe=a("strong"),ako=o("megatron-bert"),nko=o(" \u2014 "),gG=a("a"),sko=o("MegatronBertForSequenceClassification"),lko=o(" (MegatronBert model)"),iko=l(),sb=a("li"),Pfe=a("strong"),dko=o("mobilebert"),cko=o(" \u2014 "),hG=a("a"),fko=o("MobileBertForSequenceClassification"),mko=o(" (MobileBERT model)"),gko=l(),lb=a("li"),Bfe=a("strong"),hko=o("mpnet"),pko=o(" \u2014 "),pG=a("a"),uko=o("MPNetForSequenceClassification"),_ko=o(" (MPNet model)"),bko=l(),ib=a("li"),Ife=a("strong"),vko=o("nystromformer"),Fko=o(" \u2014 "),uG=a("a"),Tko=o("NystromformerForSequenceClassification"),Mko=o(" (Nystromformer model)"),Eko=l(),db=a("li"),qfe=a("strong"),Cko=o("openai-gpt"),wko=o(" \u2014 "),_G=a("a"),Ako=o("OpenAIGPTForSequenceClassification"),yko=o(" (OpenAI GPT model)"),Lko=l(),cb=a("li"),Nfe=a("strong"),xko=o("perceiver"),$ko=o(" \u2014 "),bG=a("a"),kko=o("PerceiverForSequenceClassification"),Sko=o(" (Perceiver model)"),Rko=l(),fb=a("li"),jfe=a("strong"),Pko=o("plbart"),Bko=o(" \u2014 "),vG=a("a"),Iko=o("PLBartForSequenceClassification"),qko=o(" (PLBart model)"),Nko=l(),mb=a("li"),Dfe=a("strong"),jko=o("qdqbert"),Dko=o(" \u2014 "),FG=a("a"),Gko=o("QDQBertForSequenceClassification"),Oko=o(" (QDQBert model)"),Vko=l(),gb=a("li"),Gfe=a("strong"),Xko=o("reformer"),zko=o(" \u2014 "),TG=a("a"),Wko=o("ReformerForSequenceClassification"),Qko=o(" (Reformer model)"),Hko=l(),hb=a("li"),Ofe=a("strong"),Uko=o("rembert"),Jko=o(" \u2014 "),MG=a("a"),Yko=o("RemBertForSequenceClassification"),Kko=o(" (RemBERT model)"),Zko=l(),pb=a("li"),Vfe=a("strong"),eSo=o("roberta"),oSo=o(" \u2014 "),EG=a("a"),rSo=o("RobertaForSequenceClassification"),tSo=o(" (RoBERTa model)"),aSo=l(),ub=a("li"),Xfe=a("strong"),nSo=o("roformer"),sSo=o(" \u2014 "),CG=a("a"),lSo=o("RoFormerForSequenceClassification"),iSo=o(" (RoFormer model)"),dSo=l(),_b=a("li"),zfe=a("strong"),cSo=o("squeezebert"),fSo=o(" \u2014 "),wG=a("a"),mSo=o("SqueezeBertForSequenceClassification"),gSo=o(" (SqueezeBERT model)"),hSo=l(),bb=a("li"),Wfe=a("strong"),pSo=o("tapas"),uSo=o(" \u2014 "),AG=a("a"),_So=o("TapasForSequenceClassification"),bSo=o(" (TAPAS model)"),vSo=l(),vb=a("li"),Qfe=a("strong"),FSo=o("transfo-xl"),TSo=o(" \u2014 "),yG=a("a"),MSo=o("TransfoXLForSequenceClassification"),ESo=o(" (Transformer-XL model)"),CSo=l(),Fb=a("li"),Hfe=a("strong"),wSo=o("xlm"),ASo=o(" \u2014 "),LG=a("a"),ySo=o("XLMForSequenceClassification"),LSo=o(" (XLM model)"),xSo=l(),Tb=a("li"),Ufe=a("strong"),$So=o("xlm-roberta"),kSo=o(" \u2014 "),xG=a("a"),SSo=o("XLMRobertaForSequenceClassification"),RSo=o(" (XLM-RoBERTa model)"),PSo=l(),Mb=a("li"),Jfe=a("strong"),BSo=o("xlm-roberta-xl"),ISo=o(" \u2014 "),$G=a("a"),qSo=o("XLMRobertaXLForSequenceClassification"),NSo=o(" (XLM-RoBERTa-XL model)"),jSo=l(),Eb=a("li"),Yfe=a("strong"),DSo=o("xlnet"),GSo=o(" \u2014 "),kG=a("a"),OSo=o("XLNetForSequenceClassification"),VSo=o(" (XLNet model)"),XSo=l(),Cb=a("li"),Kfe=a("strong"),zSo=o("yoso"),WSo=o(" \u2014 "),SG=a("a"),QSo=o("YosoForSequenceClassification"),HSo=o(" (YOSO model)"),USo=l(),wb=a("p"),JSo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),YSo=o("model.eval()"),KSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),ZSo=o("model.train()"),eRo=l(),F(Ab.$$.fragment),xqe=l(),Vi=a("h2"),yb=a("a"),ome=a("span"),F(_y.$$.fragment),oRo=l(),rme=a("span"),rRo=o("AutoModelForMultipleChoice"),$qe=l(),Po=a("div"),F(by.$$.fragment),tRo=l(),Xi=a("p"),aRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RG=a("a"),nRo=o("from_pretrained()"),sRo=o(" class method or the "),PG=a("a"),lRo=o("from_config()"),iRo=o(` class
method.`),dRo=l(),vy=a("p"),cRo=o("This class cannot be instantiated directly using "),tme=a("code"),fRo=o("__init__()"),mRo=o(" (throws an error)."),gRo=l(),dt=a("div"),F(Fy.$$.fragment),hRo=l(),ame=a("p"),pRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uRo=l(),zi=a("p"),_Ro=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),bRo=o("not"),vRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),FRo=o("from_pretrained()"),TRo=o(" to load the model weights."),MRo=l(),F(Lb.$$.fragment),ERo=l(),ro=a("div"),F(Ty.$$.fragment),CRo=l(),sme=a("p"),wRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ARo=l(),Pa=a("p"),yRo=o("The model class to instantiate is selected based on the "),lme=a("code"),LRo=o("model_type"),xRo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),$Ro=o("pretrained_model_name_or_path"),kRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),SRo=o("pretrained_model_name_or_path"),RRo=o(":"),PRo=l(),Y=a("ul"),xb=a("li"),cme=a("strong"),BRo=o("albert"),IRo=o(" \u2014 "),IG=a("a"),qRo=o("AlbertForMultipleChoice"),NRo=o(" (ALBERT model)"),jRo=l(),$b=a("li"),fme=a("strong"),DRo=o("bert"),GRo=o(" \u2014 "),qG=a("a"),ORo=o("BertForMultipleChoice"),VRo=o(" (BERT model)"),XRo=l(),kb=a("li"),mme=a("strong"),zRo=o("big_bird"),WRo=o(" \u2014 "),NG=a("a"),QRo=o("BigBirdForMultipleChoice"),HRo=o(" (BigBird model)"),URo=l(),Sb=a("li"),gme=a("strong"),JRo=o("camembert"),YRo=o(" \u2014 "),jG=a("a"),KRo=o("CamembertForMultipleChoice"),ZRo=o(" (CamemBERT model)"),ePo=l(),Rb=a("li"),hme=a("strong"),oPo=o("canine"),rPo=o(" \u2014 "),DG=a("a"),tPo=o("CanineForMultipleChoice"),aPo=o(" (Canine model)"),nPo=l(),Pb=a("li"),pme=a("strong"),sPo=o("convbert"),lPo=o(" \u2014 "),GG=a("a"),iPo=o("ConvBertForMultipleChoice"),dPo=o(" (ConvBERT model)"),cPo=l(),Bb=a("li"),ume=a("strong"),fPo=o("data2vec-text"),mPo=o(" \u2014 "),OG=a("a"),gPo=o("Data2VecTextForMultipleChoice"),hPo=o(" (Data2VecText model)"),pPo=l(),Ib=a("li"),_me=a("strong"),uPo=o("deberta-v2"),_Po=o(" \u2014 "),VG=a("a"),bPo=o("DebertaV2ForMultipleChoice"),vPo=o(" (DeBERTa-v2 model)"),FPo=l(),qb=a("li"),bme=a("strong"),TPo=o("distilbert"),MPo=o(" \u2014 "),XG=a("a"),EPo=o("DistilBertForMultipleChoice"),CPo=o(" (DistilBERT model)"),wPo=l(),Nb=a("li"),vme=a("strong"),APo=o("electra"),yPo=o(" \u2014 "),zG=a("a"),LPo=o("ElectraForMultipleChoice"),xPo=o(" (ELECTRA model)"),$Po=l(),jb=a("li"),Fme=a("strong"),kPo=o("flaubert"),SPo=o(" \u2014 "),WG=a("a"),RPo=o("FlaubertForMultipleChoice"),PPo=o(" (FlauBERT model)"),BPo=l(),Db=a("li"),Tme=a("strong"),IPo=o("fnet"),qPo=o(" \u2014 "),QG=a("a"),NPo=o("FNetForMultipleChoice"),jPo=o(" (FNet model)"),DPo=l(),Gb=a("li"),Mme=a("strong"),GPo=o("funnel"),OPo=o(" \u2014 "),HG=a("a"),VPo=o("FunnelForMultipleChoice"),XPo=o(" (Funnel Transformer model)"),zPo=l(),Ob=a("li"),Eme=a("strong"),WPo=o("ibert"),QPo=o(" \u2014 "),UG=a("a"),HPo=o("IBertForMultipleChoice"),UPo=o(" (I-BERT model)"),JPo=l(),Vb=a("li"),Cme=a("strong"),YPo=o("longformer"),KPo=o(" \u2014 "),JG=a("a"),ZPo=o("LongformerForMultipleChoice"),eBo=o(" (Longformer model)"),oBo=l(),Xb=a("li"),wme=a("strong"),rBo=o("megatron-bert"),tBo=o(" \u2014 "),YG=a("a"),aBo=o("MegatronBertForMultipleChoice"),nBo=o(" (MegatronBert model)"),sBo=l(),zb=a("li"),Ame=a("strong"),lBo=o("mobilebert"),iBo=o(" \u2014 "),KG=a("a"),dBo=o("MobileBertForMultipleChoice"),cBo=o(" (MobileBERT model)"),fBo=l(),Wb=a("li"),yme=a("strong"),mBo=o("mpnet"),gBo=o(" \u2014 "),ZG=a("a"),hBo=o("MPNetForMultipleChoice"),pBo=o(" (MPNet model)"),uBo=l(),Qb=a("li"),Lme=a("strong"),_Bo=o("nystromformer"),bBo=o(" \u2014 "),eO=a("a"),vBo=o("NystromformerForMultipleChoice"),FBo=o(" (Nystromformer model)"),TBo=l(),Hb=a("li"),xme=a("strong"),MBo=o("qdqbert"),EBo=o(" \u2014 "),oO=a("a"),CBo=o("QDQBertForMultipleChoice"),wBo=o(" (QDQBert model)"),ABo=l(),Ub=a("li"),$me=a("strong"),yBo=o("rembert"),LBo=o(" \u2014 "),rO=a("a"),xBo=o("RemBertForMultipleChoice"),$Bo=o(" (RemBERT model)"),kBo=l(),Jb=a("li"),kme=a("strong"),SBo=o("roberta"),RBo=o(" \u2014 "),tO=a("a"),PBo=o("RobertaForMultipleChoice"),BBo=o(" (RoBERTa model)"),IBo=l(),Yb=a("li"),Sme=a("strong"),qBo=o("roformer"),NBo=o(" \u2014 "),aO=a("a"),jBo=o("RoFormerForMultipleChoice"),DBo=o(" (RoFormer model)"),GBo=l(),Kb=a("li"),Rme=a("strong"),OBo=o("squeezebert"),VBo=o(" \u2014 "),nO=a("a"),XBo=o("SqueezeBertForMultipleChoice"),zBo=o(" (SqueezeBERT model)"),WBo=l(),Zb=a("li"),Pme=a("strong"),QBo=o("xlm"),HBo=o(" \u2014 "),sO=a("a"),UBo=o("XLMForMultipleChoice"),JBo=o(" (XLM model)"),YBo=l(),e2=a("li"),Bme=a("strong"),KBo=o("xlm-roberta"),ZBo=o(" \u2014 "),lO=a("a"),eIo=o("XLMRobertaForMultipleChoice"),oIo=o(" (XLM-RoBERTa model)"),rIo=l(),o2=a("li"),Ime=a("strong"),tIo=o("xlm-roberta-xl"),aIo=o(" \u2014 "),iO=a("a"),nIo=o("XLMRobertaXLForMultipleChoice"),sIo=o(" (XLM-RoBERTa-XL model)"),lIo=l(),r2=a("li"),qme=a("strong"),iIo=o("xlnet"),dIo=o(" \u2014 "),dO=a("a"),cIo=o("XLNetForMultipleChoice"),fIo=o(" (XLNet model)"),mIo=l(),t2=a("li"),Nme=a("strong"),gIo=o("yoso"),hIo=o(" \u2014 "),cO=a("a"),pIo=o("YosoForMultipleChoice"),uIo=o(" (YOSO model)"),_Io=l(),a2=a("p"),bIo=o("The model is set in evaluation mode by default using "),jme=a("code"),vIo=o("model.eval()"),FIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),TIo=o("model.train()"),MIo=l(),F(n2.$$.fragment),kqe=l(),Wi=a("h2"),s2=a("a"),Gme=a("span"),F(My.$$.fragment),EIo=l(),Ome=a("span"),CIo=o("AutoModelForNextSentencePrediction"),Sqe=l(),Bo=a("div"),F(Ey.$$.fragment),wIo=l(),Qi=a("p"),AIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fO=a("a"),yIo=o("from_pretrained()"),LIo=o(" class method or the "),mO=a("a"),xIo=o("from_config()"),$Io=o(` class
method.`),kIo=l(),Cy=a("p"),SIo=o("This class cannot be instantiated directly using "),Vme=a("code"),RIo=o("__init__()"),PIo=o(" (throws an error)."),BIo=l(),ct=a("div"),F(wy.$$.fragment),IIo=l(),Xme=a("p"),qIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NIo=l(),Hi=a("p"),jIo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),DIo=o("not"),GIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),OIo=o("from_pretrained()"),VIo=o(" to load the model weights."),XIo=l(),F(l2.$$.fragment),zIo=l(),to=a("div"),F(Ay.$$.fragment),WIo=l(),Wme=a("p"),QIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HIo=l(),Ba=a("p"),UIo=o("The model class to instantiate is selected based on the "),Qme=a("code"),JIo=o("model_type"),YIo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),KIo=o("pretrained_model_name_or_path"),ZIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),eqo=o("pretrained_model_name_or_path"),oqo=o(":"),rqo=l(),Yr=a("ul"),i2=a("li"),Jme=a("strong"),tqo=o("bert"),aqo=o(" \u2014 "),hO=a("a"),nqo=o("BertForNextSentencePrediction"),sqo=o(" (BERT model)"),lqo=l(),d2=a("li"),Yme=a("strong"),iqo=o("fnet"),dqo=o(" \u2014 "),pO=a("a"),cqo=o("FNetForNextSentencePrediction"),fqo=o(" (FNet model)"),mqo=l(),c2=a("li"),Kme=a("strong"),gqo=o("megatron-bert"),hqo=o(" \u2014 "),uO=a("a"),pqo=o("MegatronBertForNextSentencePrediction"),uqo=o(" (MegatronBert model)"),_qo=l(),f2=a("li"),Zme=a("strong"),bqo=o("mobilebert"),vqo=o(" \u2014 "),_O=a("a"),Fqo=o("MobileBertForNextSentencePrediction"),Tqo=o(" (MobileBERT model)"),Mqo=l(),m2=a("li"),ege=a("strong"),Eqo=o("qdqbert"),Cqo=o(" \u2014 "),bO=a("a"),wqo=o("QDQBertForNextSentencePrediction"),Aqo=o(" (QDQBert model)"),yqo=l(),g2=a("p"),Lqo=o("The model is set in evaluation mode by default using "),oge=a("code"),xqo=o("model.eval()"),$qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=a("code"),kqo=o("model.train()"),Sqo=l(),F(h2.$$.fragment),Rqe=l(),Ui=a("h2"),p2=a("a"),tge=a("span"),F(yy.$$.fragment),Rqo=l(),age=a("span"),Pqo=o("AutoModelForTokenClassification"),Pqe=l(),Io=a("div"),F(Ly.$$.fragment),Bqo=l(),Ji=a("p"),Iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vO=a("a"),qqo=o("from_pretrained()"),Nqo=o(" class method or the "),FO=a("a"),jqo=o("from_config()"),Dqo=o(` class
method.`),Gqo=l(),xy=a("p"),Oqo=o("This class cannot be instantiated directly using "),nge=a("code"),Vqo=o("__init__()"),Xqo=o(" (throws an error)."),zqo=l(),ft=a("div"),F($y.$$.fragment),Wqo=l(),sge=a("p"),Qqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hqo=l(),Yi=a("p"),Uqo=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),Jqo=o("not"),Yqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),Kqo=o("from_pretrained()"),Zqo=o(" to load the model weights."),eNo=l(),F(u2.$$.fragment),oNo=l(),ao=a("div"),F(ky.$$.fragment),rNo=l(),ige=a("p"),tNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aNo=l(),Ia=a("p"),nNo=o("The model class to instantiate is selected based on the "),dge=a("code"),sNo=o("model_type"),lNo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),iNo=o("pretrained_model_name_or_path"),dNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),cNo=o("pretrained_model_name_or_path"),fNo=o(":"),mNo=l(),H=a("ul"),_2=a("li"),mge=a("strong"),gNo=o("albert"),hNo=o(" \u2014 "),MO=a("a"),pNo=o("AlbertForTokenClassification"),uNo=o(" (ALBERT model)"),_No=l(),b2=a("li"),gge=a("strong"),bNo=o("bert"),vNo=o(" \u2014 "),EO=a("a"),FNo=o("BertForTokenClassification"),TNo=o(" (BERT model)"),MNo=l(),v2=a("li"),hge=a("strong"),ENo=o("big_bird"),CNo=o(" \u2014 "),CO=a("a"),wNo=o("BigBirdForTokenClassification"),ANo=o(" (BigBird model)"),yNo=l(),F2=a("li"),pge=a("strong"),LNo=o("camembert"),xNo=o(" \u2014 "),wO=a("a"),$No=o("CamembertForTokenClassification"),kNo=o(" (CamemBERT model)"),SNo=l(),T2=a("li"),uge=a("strong"),RNo=o("canine"),PNo=o(" \u2014 "),AO=a("a"),BNo=o("CanineForTokenClassification"),INo=o(" (Canine model)"),qNo=l(),M2=a("li"),_ge=a("strong"),NNo=o("convbert"),jNo=o(" \u2014 "),yO=a("a"),DNo=o("ConvBertForTokenClassification"),GNo=o(" (ConvBERT model)"),ONo=l(),E2=a("li"),bge=a("strong"),VNo=o("data2vec-text"),XNo=o(" \u2014 "),LO=a("a"),zNo=o("Data2VecTextForTokenClassification"),WNo=o(" (Data2VecText model)"),QNo=l(),C2=a("li"),vge=a("strong"),HNo=o("deberta"),UNo=o(" \u2014 "),xO=a("a"),JNo=o("DebertaForTokenClassification"),YNo=o(" (DeBERTa model)"),KNo=l(),w2=a("li"),Fge=a("strong"),ZNo=o("deberta-v2"),ejo=o(" \u2014 "),$O=a("a"),ojo=o("DebertaV2ForTokenClassification"),rjo=o(" (DeBERTa-v2 model)"),tjo=l(),A2=a("li"),Tge=a("strong"),ajo=o("distilbert"),njo=o(" \u2014 "),kO=a("a"),sjo=o("DistilBertForTokenClassification"),ljo=o(" (DistilBERT model)"),ijo=l(),y2=a("li"),Mge=a("strong"),djo=o("electra"),cjo=o(" \u2014 "),SO=a("a"),fjo=o("ElectraForTokenClassification"),mjo=o(" (ELECTRA model)"),gjo=l(),L2=a("li"),Ege=a("strong"),hjo=o("flaubert"),pjo=o(" \u2014 "),RO=a("a"),ujo=o("FlaubertForTokenClassification"),_jo=o(" (FlauBERT model)"),bjo=l(),x2=a("li"),Cge=a("strong"),vjo=o("fnet"),Fjo=o(" \u2014 "),PO=a("a"),Tjo=o("FNetForTokenClassification"),Mjo=o(" (FNet model)"),Ejo=l(),$2=a("li"),wge=a("strong"),Cjo=o("funnel"),wjo=o(" \u2014 "),BO=a("a"),Ajo=o("FunnelForTokenClassification"),yjo=o(" (Funnel Transformer model)"),Ljo=l(),k2=a("li"),Age=a("strong"),xjo=o("gpt2"),$jo=o(" \u2014 "),IO=a("a"),kjo=o("GPT2ForTokenClassification"),Sjo=o(" (OpenAI GPT-2 model)"),Rjo=l(),S2=a("li"),yge=a("strong"),Pjo=o("ibert"),Bjo=o(" \u2014 "),qO=a("a"),Ijo=o("IBertForTokenClassification"),qjo=o(" (I-BERT model)"),Njo=l(),R2=a("li"),Lge=a("strong"),jjo=o("layoutlm"),Djo=o(" \u2014 "),NO=a("a"),Gjo=o("LayoutLMForTokenClassification"),Ojo=o(" (LayoutLM model)"),Vjo=l(),P2=a("li"),xge=a("strong"),Xjo=o("layoutlmv2"),zjo=o(" \u2014 "),jO=a("a"),Wjo=o("LayoutLMv2ForTokenClassification"),Qjo=o(" (LayoutLMv2 model)"),Hjo=l(),B2=a("li"),$ge=a("strong"),Ujo=o("layoutlmv3"),Jjo=o(" \u2014 "),DO=a("a"),Yjo=o("LayoutLMv3ForTokenClassification"),Kjo=o(" (LayoutLMv3 model)"),Zjo=l(),I2=a("li"),kge=a("strong"),eDo=o("longformer"),oDo=o(" \u2014 "),GO=a("a"),rDo=o("LongformerForTokenClassification"),tDo=o(" (Longformer model)"),aDo=l(),q2=a("li"),Sge=a("strong"),nDo=o("megatron-bert"),sDo=o(" \u2014 "),OO=a("a"),lDo=o("MegatronBertForTokenClassification"),iDo=o(" (MegatronBert model)"),dDo=l(),N2=a("li"),Rge=a("strong"),cDo=o("mobilebert"),fDo=o(" \u2014 "),VO=a("a"),mDo=o("MobileBertForTokenClassification"),gDo=o(" (MobileBERT model)"),hDo=l(),j2=a("li"),Pge=a("strong"),pDo=o("mpnet"),uDo=o(" \u2014 "),XO=a("a"),_Do=o("MPNetForTokenClassification"),bDo=o(" (MPNet model)"),vDo=l(),D2=a("li"),Bge=a("strong"),FDo=o("nystromformer"),TDo=o(" \u2014 "),zO=a("a"),MDo=o("NystromformerForTokenClassification"),EDo=o(" (Nystromformer model)"),CDo=l(),G2=a("li"),Ige=a("strong"),wDo=o("qdqbert"),ADo=o(" \u2014 "),WO=a("a"),yDo=o("QDQBertForTokenClassification"),LDo=o(" (QDQBert model)"),xDo=l(),O2=a("li"),qge=a("strong"),$Do=o("rembert"),kDo=o(" \u2014 "),QO=a("a"),SDo=o("RemBertForTokenClassification"),RDo=o(" (RemBERT model)"),PDo=l(),V2=a("li"),Nge=a("strong"),BDo=o("roberta"),IDo=o(" \u2014 "),HO=a("a"),qDo=o("RobertaForTokenClassification"),NDo=o(" (RoBERTa model)"),jDo=l(),X2=a("li"),jge=a("strong"),DDo=o("roformer"),GDo=o(" \u2014 "),UO=a("a"),ODo=o("RoFormerForTokenClassification"),VDo=o(" (RoFormer model)"),XDo=l(),z2=a("li"),Dge=a("strong"),zDo=o("squeezebert"),WDo=o(" \u2014 "),JO=a("a"),QDo=o("SqueezeBertForTokenClassification"),HDo=o(" (SqueezeBERT model)"),UDo=l(),W2=a("li"),Gge=a("strong"),JDo=o("xlm"),YDo=o(" \u2014 "),YO=a("a"),KDo=o("XLMForTokenClassification"),ZDo=o(" (XLM model)"),eGo=l(),Q2=a("li"),Oge=a("strong"),oGo=o("xlm-roberta"),rGo=o(" \u2014 "),KO=a("a"),tGo=o("XLMRobertaForTokenClassification"),aGo=o(" (XLM-RoBERTa model)"),nGo=l(),H2=a("li"),Vge=a("strong"),sGo=o("xlm-roberta-xl"),lGo=o(" \u2014 "),ZO=a("a"),iGo=o("XLMRobertaXLForTokenClassification"),dGo=o(" (XLM-RoBERTa-XL model)"),cGo=l(),U2=a("li"),Xge=a("strong"),fGo=o("xlnet"),mGo=o(" \u2014 "),eV=a("a"),gGo=o("XLNetForTokenClassification"),hGo=o(" (XLNet model)"),pGo=l(),J2=a("li"),zge=a("strong"),uGo=o("yoso"),_Go=o(" \u2014 "),oV=a("a"),bGo=o("YosoForTokenClassification"),vGo=o(" (YOSO model)"),FGo=l(),Y2=a("p"),TGo=o("The model is set in evaluation mode by default using "),Wge=a("code"),MGo=o("model.eval()"),EGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),CGo=o("model.train()"),wGo=l(),F(K2.$$.fragment),Bqe=l(),Ki=a("h2"),Z2=a("a"),Hge=a("span"),F(Sy.$$.fragment),AGo=l(),Uge=a("span"),yGo=o("AutoModelForQuestionAnswering"),Iqe=l(),qo=a("div"),F(Ry.$$.fragment),LGo=l(),Zi=a("p"),xGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rV=a("a"),$Go=o("from_pretrained()"),kGo=o(" class method or the "),tV=a("a"),SGo=o("from_config()"),RGo=o(` class
method.`),PGo=l(),Py=a("p"),BGo=o("This class cannot be instantiated directly using "),Jge=a("code"),IGo=o("__init__()"),qGo=o(" (throws an error)."),NGo=l(),mt=a("div"),F(By.$$.fragment),jGo=l(),Yge=a("p"),DGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GGo=l(),ed=a("p"),OGo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),VGo=o("not"),XGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),zGo=o("from_pretrained()"),WGo=o(" to load the model weights."),QGo=l(),F(ev.$$.fragment),HGo=l(),no=a("div"),F(Iy.$$.fragment),UGo=l(),Zge=a("p"),JGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YGo=l(),qa=a("p"),KGo=o("The model class to instantiate is selected based on the "),ehe=a("code"),ZGo=o("model_type"),eOo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),oOo=o("pretrained_model_name_or_path"),rOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(":"),nOo=l(),O=a("ul"),ov=a("li"),the=a("strong"),sOo=o("albert"),lOo=o(" \u2014 "),nV=a("a"),iOo=o("AlbertForQuestionAnswering"),dOo=o(" (ALBERT model)"),cOo=l(),rv=a("li"),ahe=a("strong"),fOo=o("bart"),mOo=o(" \u2014 "),sV=a("a"),gOo=o("BartForQuestionAnswering"),hOo=o(" (BART model)"),pOo=l(),tv=a("li"),nhe=a("strong"),uOo=o("bert"),_Oo=o(" \u2014 "),lV=a("a"),bOo=o("BertForQuestionAnswering"),vOo=o(" (BERT model)"),FOo=l(),av=a("li"),she=a("strong"),TOo=o("big_bird"),MOo=o(" \u2014 "),iV=a("a"),EOo=o("BigBirdForQuestionAnswering"),COo=o(" (BigBird model)"),wOo=l(),nv=a("li"),lhe=a("strong"),AOo=o("bigbird_pegasus"),yOo=o(" \u2014 "),dV=a("a"),LOo=o("BigBirdPegasusForQuestionAnswering"),xOo=o(" (BigBirdPegasus model)"),$Oo=l(),sv=a("li"),ihe=a("strong"),kOo=o("camembert"),SOo=o(" \u2014 "),cV=a("a"),ROo=o("CamembertForQuestionAnswering"),POo=o(" (CamemBERT model)"),BOo=l(),lv=a("li"),dhe=a("strong"),IOo=o("canine"),qOo=o(" \u2014 "),fV=a("a"),NOo=o("CanineForQuestionAnswering"),jOo=o(" (Canine model)"),DOo=l(),iv=a("li"),che=a("strong"),GOo=o("convbert"),OOo=o(" \u2014 "),mV=a("a"),VOo=o("ConvBertForQuestionAnswering"),XOo=o(" (ConvBERT model)"),zOo=l(),dv=a("li"),fhe=a("strong"),WOo=o("data2vec-text"),QOo=o(" \u2014 "),gV=a("a"),HOo=o("Data2VecTextForQuestionAnswering"),UOo=o(" (Data2VecText model)"),JOo=l(),cv=a("li"),mhe=a("strong"),YOo=o("deberta"),KOo=o(" \u2014 "),hV=a("a"),ZOo=o("DebertaForQuestionAnswering"),eVo=o(" (DeBERTa model)"),oVo=l(),fv=a("li"),ghe=a("strong"),rVo=o("deberta-v2"),tVo=o(" \u2014 "),pV=a("a"),aVo=o("DebertaV2ForQuestionAnswering"),nVo=o(" (DeBERTa-v2 model)"),sVo=l(),mv=a("li"),hhe=a("strong"),lVo=o("distilbert"),iVo=o(" \u2014 "),uV=a("a"),dVo=o("DistilBertForQuestionAnswering"),cVo=o(" (DistilBERT model)"),fVo=l(),gv=a("li"),phe=a("strong"),mVo=o("electra"),gVo=o(" \u2014 "),_V=a("a"),hVo=o("ElectraForQuestionAnswering"),pVo=o(" (ELECTRA model)"),uVo=l(),hv=a("li"),uhe=a("strong"),_Vo=o("flaubert"),bVo=o(" \u2014 "),bV=a("a"),vVo=o("FlaubertForQuestionAnsweringSimple"),FVo=o(" (FlauBERT model)"),TVo=l(),pv=a("li"),_he=a("strong"),MVo=o("fnet"),EVo=o(" \u2014 "),vV=a("a"),CVo=o("FNetForQuestionAnswering"),wVo=o(" (FNet model)"),AVo=l(),uv=a("li"),bhe=a("strong"),yVo=o("funnel"),LVo=o(" \u2014 "),FV=a("a"),xVo=o("FunnelForQuestionAnswering"),$Vo=o(" (Funnel Transformer model)"),kVo=l(),_v=a("li"),vhe=a("strong"),SVo=o("gptj"),RVo=o(" \u2014 "),TV=a("a"),PVo=o("GPTJForQuestionAnswering"),BVo=o(" (GPT-J model)"),IVo=l(),bv=a("li"),Fhe=a("strong"),qVo=o("ibert"),NVo=o(" \u2014 "),MV=a("a"),jVo=o("IBertForQuestionAnswering"),DVo=o(" (I-BERT model)"),GVo=l(),vv=a("li"),The=a("strong"),OVo=o("layoutlmv2"),VVo=o(" \u2014 "),EV=a("a"),XVo=o("LayoutLMv2ForQuestionAnswering"),zVo=o(" (LayoutLMv2 model)"),WVo=l(),Fv=a("li"),Mhe=a("strong"),QVo=o("layoutlmv3"),HVo=o(" \u2014 "),CV=a("a"),UVo=o("LayoutLMv3ForQuestionAnswering"),JVo=o(" (LayoutLMv3 model)"),YVo=l(),Tv=a("li"),Ehe=a("strong"),KVo=o("led"),ZVo=o(" \u2014 "),wV=a("a"),eXo=o("LEDForQuestionAnswering"),oXo=o(" (LED model)"),rXo=l(),Mv=a("li"),Che=a("strong"),tXo=o("longformer"),aXo=o(" \u2014 "),AV=a("a"),nXo=o("LongformerForQuestionAnswering"),sXo=o(" (Longformer model)"),lXo=l(),Ev=a("li"),whe=a("strong"),iXo=o("lxmert"),dXo=o(" \u2014 "),yV=a("a"),cXo=o("LxmertForQuestionAnswering"),fXo=o(" (LXMERT model)"),mXo=l(),Cv=a("li"),Ahe=a("strong"),gXo=o("mbart"),hXo=o(" \u2014 "),LV=a("a"),pXo=o("MBartForQuestionAnswering"),uXo=o(" (mBART model)"),_Xo=l(),wv=a("li"),yhe=a("strong"),bXo=o("megatron-bert"),vXo=o(" \u2014 "),xV=a("a"),FXo=o("MegatronBertForQuestionAnswering"),TXo=o(" (MegatronBert model)"),MXo=l(),Av=a("li"),Lhe=a("strong"),EXo=o("mobilebert"),CXo=o(" \u2014 "),$V=a("a"),wXo=o("MobileBertForQuestionAnswering"),AXo=o(" (MobileBERT model)"),yXo=l(),yv=a("li"),xhe=a("strong"),LXo=o("mpnet"),xXo=o(" \u2014 "),kV=a("a"),$Xo=o("MPNetForQuestionAnswering"),kXo=o(" (MPNet model)"),SXo=l(),Lv=a("li"),$he=a("strong"),RXo=o("nystromformer"),PXo=o(" \u2014 "),SV=a("a"),BXo=o("NystromformerForQuestionAnswering"),IXo=o(" (Nystromformer model)"),qXo=l(),xv=a("li"),khe=a("strong"),NXo=o("qdqbert"),jXo=o(" \u2014 "),RV=a("a"),DXo=o("QDQBertForQuestionAnswering"),GXo=o(" (QDQBert model)"),OXo=l(),$v=a("li"),She=a("strong"),VXo=o("reformer"),XXo=o(" \u2014 "),PV=a("a"),zXo=o("ReformerForQuestionAnswering"),WXo=o(" (Reformer model)"),QXo=l(),kv=a("li"),Rhe=a("strong"),HXo=o("rembert"),UXo=o(" \u2014 "),BV=a("a"),JXo=o("RemBertForQuestionAnswering"),YXo=o(" (RemBERT model)"),KXo=l(),Sv=a("li"),Phe=a("strong"),ZXo=o("roberta"),ezo=o(" \u2014 "),IV=a("a"),ozo=o("RobertaForQuestionAnswering"),rzo=o(" (RoBERTa model)"),tzo=l(),Rv=a("li"),Bhe=a("strong"),azo=o("roformer"),nzo=o(" \u2014 "),qV=a("a"),szo=o("RoFormerForQuestionAnswering"),lzo=o(" (RoFormer model)"),izo=l(),Pv=a("li"),Ihe=a("strong"),dzo=o("splinter"),czo=o(" \u2014 "),NV=a("a"),fzo=o("SplinterForQuestionAnswering"),mzo=o(" (Splinter model)"),gzo=l(),Bv=a("li"),qhe=a("strong"),hzo=o("squeezebert"),pzo=o(" \u2014 "),jV=a("a"),uzo=o("SqueezeBertForQuestionAnswering"),_zo=o(" (SqueezeBERT model)"),bzo=l(),Iv=a("li"),Nhe=a("strong"),vzo=o("xlm"),Fzo=o(" \u2014 "),DV=a("a"),Tzo=o("XLMForQuestionAnsweringSimple"),Mzo=o(" (XLM model)"),Ezo=l(),qv=a("li"),jhe=a("strong"),Czo=o("xlm-roberta"),wzo=o(" \u2014 "),GV=a("a"),Azo=o("XLMRobertaForQuestionAnswering"),yzo=o(" (XLM-RoBERTa model)"),Lzo=l(),Nv=a("li"),Dhe=a("strong"),xzo=o("xlm-roberta-xl"),$zo=o(" \u2014 "),OV=a("a"),kzo=o("XLMRobertaXLForQuestionAnswering"),Szo=o(" (XLM-RoBERTa-XL model)"),Rzo=l(),jv=a("li"),Ghe=a("strong"),Pzo=o("xlnet"),Bzo=o(" \u2014 "),VV=a("a"),Izo=o("XLNetForQuestionAnsweringSimple"),qzo=o(" (XLNet model)"),Nzo=l(),Dv=a("li"),Ohe=a("strong"),jzo=o("yoso"),Dzo=o(" \u2014 "),XV=a("a"),Gzo=o("YosoForQuestionAnswering"),Ozo=o(" (YOSO model)"),Vzo=l(),Gv=a("p"),Xzo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),zzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),Qzo=o("model.train()"),Hzo=l(),F(Ov.$$.fragment),qqe=l(),od=a("h2"),Vv=a("a"),zhe=a("span"),F(qy.$$.fragment),Uzo=l(),Whe=a("span"),Jzo=o("AutoModelForTableQuestionAnswering"),Nqe=l(),No=a("div"),F(Ny.$$.fragment),Yzo=l(),rd=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zV=a("a"),Zzo=o("from_pretrained()"),eWo=o(" class method or the "),WV=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),jy=a("p"),aWo=o("This class cannot be instantiated directly using "),Qhe=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),gt=a("div"),F(Dy.$$.fragment),iWo=l(),Hhe=a("p"),dWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cWo=l(),td=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),uWo=l(),F(Xv.$$.fragment),_Wo=l(),so=a("div"),F(Gy.$$.fragment),bWo=l(),Jhe=a("p"),vWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FWo=l(),Na=a("p"),TWo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(":"),LWo=l(),epe=a("ul"),zv=a("li"),ope=a("strong"),xWo=o("tapas"),$Wo=o(" \u2014 "),HV=a("a"),kWo=o("TapasForQuestionAnswering"),SWo=o(" (TAPAS model)"),RWo=l(),Wv=a("p"),PWo=o("The model is set in evaluation mode by default using "),rpe=a("code"),BWo=o("model.eval()"),IWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),qWo=o("model.train()"),NWo=l(),F(Qv.$$.fragment),jqe=l(),ad=a("h2"),Hv=a("a"),ape=a("span"),F(Oy.$$.fragment),jWo=l(),npe=a("span"),DWo=o("AutoModelForImageClassification"),Dqe=l(),jo=a("div"),F(Vy.$$.fragment),GWo=l(),nd=a("p"),OWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UV=a("a"),VWo=o("from_pretrained()"),XWo=o(" class method or the "),JV=a("a"),zWo=o("from_config()"),WWo=o(` class
method.`),QWo=l(),Xy=a("p"),HWo=o("This class cannot be instantiated directly using "),spe=a("code"),UWo=o("__init__()"),JWo=o(" (throws an error)."),YWo=l(),ht=a("div"),F(zy.$$.fragment),KWo=l(),lpe=a("p"),ZWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eQo=l(),sd=a("p"),oQo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),rQo=o("not"),tQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),aQo=o("from_pretrained()"),nQo=o(" to load the model weights."),sQo=l(),F(Uv.$$.fragment),lQo=l(),lo=a("div"),F(Wy.$$.fragment),iQo=l(),dpe=a("p"),dQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cQo=l(),ja=a("p"),fQo=o("The model class to instantiate is selected based on the "),cpe=a("code"),mQo=o("model_type"),gQo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),hQo=o("pretrained_model_name_or_path"),pQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),uQo=o("pretrained_model_name_or_path"),_Qo=o(":"),bQo=l(),Fe=a("ul"),Jv=a("li"),gpe=a("strong"),vQo=o("beit"),FQo=o(" \u2014 "),KV=a("a"),TQo=o("BeitForImageClassification"),MQo=o(" (BEiT model)"),EQo=l(),Yv=a("li"),hpe=a("strong"),CQo=o("convnext"),wQo=o(" \u2014 "),ZV=a("a"),AQo=o("ConvNextForImageClassification"),yQo=o(" (ConvNext model)"),LQo=l(),Kv=a("li"),ppe=a("strong"),xQo=o("data2vec-vision"),$Qo=o(" \u2014 "),eX=a("a"),kQo=o("Data2VecVisionForImageClassification"),SQo=o(" (Data2VecVision model)"),RQo=l(),Bs=a("li"),upe=a("strong"),PQo=o("deit"),BQo=o(" \u2014 "),oX=a("a"),IQo=o("DeiTForImageClassification"),qQo=o(" or "),rX=a("a"),NQo=o("DeiTForImageClassificationWithTeacher"),jQo=o(" (DeiT model)"),DQo=l(),Zv=a("li"),_pe=a("strong"),GQo=o("imagegpt"),OQo=o(" \u2014 "),tX=a("a"),VQo=o("ImageGPTForImageClassification"),XQo=o(" (ImageGPT model)"),zQo=l(),pt=a("li"),bpe=a("strong"),WQo=o("perceiver"),QQo=o(" \u2014 "),aX=a("a"),HQo=o("PerceiverForImageClassificationLearned"),UQo=o(" or "),nX=a("a"),JQo=o("PerceiverForImageClassificationFourier"),YQo=o(" or "),sX=a("a"),KQo=o("PerceiverForImageClassificationConvProcessing"),ZQo=o(" (Perceiver model)"),eHo=l(),eF=a("li"),vpe=a("strong"),oHo=o("poolformer"),rHo=o(" \u2014 "),lX=a("a"),tHo=o("PoolFormerForImageClassification"),aHo=o(" (PoolFormer model)"),nHo=l(),oF=a("li"),Fpe=a("strong"),sHo=o("regnet"),lHo=o(" \u2014 "),iX=a("a"),iHo=o("RegNetForImageClassification"),dHo=o(" (RegNet model)"),cHo=l(),rF=a("li"),Tpe=a("strong"),fHo=o("resnet"),mHo=o(" \u2014 "),dX=a("a"),gHo=o("ResNetForImageClassification"),hHo=o(" (ResNet model)"),pHo=l(),tF=a("li"),Mpe=a("strong"),uHo=o("segformer"),_Ho=o(" \u2014 "),cX=a("a"),bHo=o("SegformerForImageClassification"),vHo=o(" (SegFormer model)"),FHo=l(),aF=a("li"),Epe=a("strong"),THo=o("swin"),MHo=o(" \u2014 "),fX=a("a"),EHo=o("SwinForImageClassification"),CHo=o(" (Swin model)"),wHo=l(),nF=a("li"),Cpe=a("strong"),AHo=o("van"),yHo=o(" \u2014 "),mX=a("a"),LHo=o("VanForImageClassification"),xHo=o(" (VAN model)"),$Ho=l(),sF=a("li"),wpe=a("strong"),kHo=o("vit"),SHo=o(" \u2014 "),gX=a("a"),RHo=o("ViTForImageClassification"),PHo=o(" (ViT model)"),BHo=l(),lF=a("p"),IHo=o("The model is set in evaluation mode by default using "),Ape=a("code"),qHo=o("model.eval()"),NHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),jHo=o("model.train()"),DHo=l(),F(iF.$$.fragment),Gqe=l(),ld=a("h2"),dF=a("a"),Lpe=a("span"),F(Qy.$$.fragment),GHo=l(),xpe=a("span"),OHo=o("AutoModelForVision2Seq"),Oqe=l(),Do=a("div"),F(Hy.$$.fragment),VHo=l(),id=a("p"),XHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hX=a("a"),zHo=o("from_pretrained()"),WHo=o(" class method or the "),pX=a("a"),QHo=o("from_config()"),HHo=o(` class
method.`),UHo=l(),Uy=a("p"),JHo=o("This class cannot be instantiated directly using "),$pe=a("code"),YHo=o("__init__()"),KHo=o(" (throws an error)."),ZHo=l(),ut=a("div"),F(Jy.$$.fragment),eUo=l(),kpe=a("p"),oUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rUo=l(),dd=a("p"),tUo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),aUo=o("not"),nUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),sUo=o("from_pretrained()"),lUo=o(" to load the model weights."),iUo=l(),F(cF.$$.fragment),dUo=l(),io=a("div"),F(Yy.$$.fragment),cUo=l(),Rpe=a("p"),fUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mUo=l(),Da=a("p"),gUo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),hUo=o("model_type"),pUo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),uUo=o("pretrained_model_name_or_path"),_Uo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(":"),FUo=l(),qpe=a("ul"),fF=a("li"),Npe=a("strong"),TUo=o("vision-encoder-decoder"),MUo=o(" \u2014 "),_X=a("a"),EUo=o("VisionEncoderDecoderModel"),CUo=o(" (Vision Encoder decoder model)"),wUo=l(),mF=a("p"),AUo=o("The model is set in evaluation mode by default using "),jpe=a("code"),yUo=o("model.eval()"),LUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),xUo=o("model.train()"),$Uo=l(),F(gF.$$.fragment),Vqe=l(),cd=a("h2"),hF=a("a"),Gpe=a("span"),F(Ky.$$.fragment),kUo=l(),Ope=a("span"),SUo=o("AutoModelForAudioClassification"),Xqe=l(),Go=a("div"),F(Zy.$$.fragment),RUo=l(),fd=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bX=a("a"),BUo=o("from_pretrained()"),IUo=o(" class method or the "),vX=a("a"),qUo=o("from_config()"),NUo=o(` class
method.`),jUo=l(),eL=a("p"),DUo=o("This class cannot be instantiated directly using "),Vpe=a("code"),GUo=o("__init__()"),OUo=o(" (throws an error)."),VUo=l(),_t=a("div"),F(oL.$$.fragment),XUo=l(),Xpe=a("p"),zUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),WUo=l(),md=a("p"),QUo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),HUo=o("not"),UUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),JUo=o("from_pretrained()"),YUo=o(" to load the model weights."),KUo=l(),F(pF.$$.fragment),ZUo=l(),co=a("div"),F(rL.$$.fragment),eJo=l(),Wpe=a("p"),oJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rJo=l(),Ga=a("p"),tJo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),aJo=o("model_type"),nJo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),sJo=o("pretrained_model_name_or_path"),lJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),iJo=o("pretrained_model_name_or_path"),dJo=o(":"),cJo=l(),ke=a("ul"),uF=a("li"),Jpe=a("strong"),fJo=o("data2vec-audio"),mJo=o(" \u2014 "),TX=a("a"),gJo=o("Data2VecAudioForSequenceClassification"),hJo=o(" (Data2VecAudio model)"),pJo=l(),_F=a("li"),Ype=a("strong"),uJo=o("hubert"),_Jo=o(" \u2014 "),MX=a("a"),bJo=o("HubertForSequenceClassification"),vJo=o(" (Hubert model)"),FJo=l(),bF=a("li"),Kpe=a("strong"),TJo=o("sew"),MJo=o(" \u2014 "),EX=a("a"),EJo=o("SEWForSequenceClassification"),CJo=o(" (SEW model)"),wJo=l(),vF=a("li"),Zpe=a("strong"),AJo=o("sew-d"),yJo=o(" \u2014 "),CX=a("a"),LJo=o("SEWDForSequenceClassification"),xJo=o(" (SEW-D model)"),$Jo=l(),FF=a("li"),eue=a("strong"),kJo=o("unispeech"),SJo=o(" \u2014 "),wX=a("a"),RJo=o("UniSpeechForSequenceClassification"),PJo=o(" (UniSpeech model)"),BJo=l(),TF=a("li"),oue=a("strong"),IJo=o("unispeech-sat"),qJo=o(" \u2014 "),AX=a("a"),NJo=o("UniSpeechSatForSequenceClassification"),jJo=o(" (UniSpeechSat model)"),DJo=l(),MF=a("li"),rue=a("strong"),GJo=o("wav2vec2"),OJo=o(" \u2014 "),yX=a("a"),VJo=o("Wav2Vec2ForSequenceClassification"),XJo=o(" (Wav2Vec2 model)"),zJo=l(),EF=a("li"),tue=a("strong"),WJo=o("wav2vec2-conformer"),QJo=o(" \u2014 "),LX=a("a"),HJo=o("Wav2Vec2ConformerForSequenceClassification"),UJo=o(" (Wav2Vec2-Conformer model)"),JJo=l(),CF=a("li"),aue=a("strong"),YJo=o("wavlm"),KJo=o(" \u2014 "),xX=a("a"),ZJo=o("WavLMForSequenceClassification"),eYo=o(" (WavLM model)"),oYo=l(),wF=a("p"),rYo=o("The model is set in evaluation mode by default using "),nue=a("code"),tYo=o("model.eval()"),aYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),nYo=o("model.train()"),sYo=l(),F(AF.$$.fragment),zqe=l(),gd=a("h2"),yF=a("a"),lue=a("span"),F(tL.$$.fragment),lYo=l(),iue=a("span"),iYo=o("AutoModelForAudioFrameClassification"),Wqe=l(),Oo=a("div"),F(aL.$$.fragment),dYo=l(),hd=a("p"),cYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$X=a("a"),fYo=o("from_pretrained()"),mYo=o(" class method or the "),kX=a("a"),gYo=o("from_config()"),hYo=o(` class
method.`),pYo=l(),nL=a("p"),uYo=o("This class cannot be instantiated directly using "),due=a("code"),_Yo=o("__init__()"),bYo=o(" (throws an error)."),vYo=l(),bt=a("div"),F(sL.$$.fragment),FYo=l(),cue=a("p"),TYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MYo=l(),pd=a("p"),EYo=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),CYo=o("not"),wYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),AYo=o("from_pretrained()"),yYo=o(" to load the model weights."),LYo=l(),F(LF.$$.fragment),xYo=l(),fo=a("div"),F(lL.$$.fragment),$Yo=l(),mue=a("p"),kYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SYo=l(),Oa=a("p"),RYo=o("The model class to instantiate is selected based on the "),gue=a("code"),PYo=o("model_type"),BYo=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),IYo=o("pretrained_model_name_or_path"),qYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),NYo=o("pretrained_model_name_or_path"),jYo=o(":"),DYo=l(),Kr=a("ul"),xF=a("li"),uue=a("strong"),GYo=o("data2vec-audio"),OYo=o(" \u2014 "),RX=a("a"),VYo=o("Data2VecAudioForAudioFrameClassification"),XYo=o(" (Data2VecAudio model)"),zYo=l(),$F=a("li"),_ue=a("strong"),WYo=o("unispeech-sat"),QYo=o(" \u2014 "),PX=a("a"),HYo=o("UniSpeechSatForAudioFrameClassification"),UYo=o(" (UniSpeechSat model)"),JYo=l(),kF=a("li"),bue=a("strong"),YYo=o("wav2vec2"),KYo=o(" \u2014 "),BX=a("a"),ZYo=o("Wav2Vec2ForAudioFrameClassification"),eKo=o(" (Wav2Vec2 model)"),oKo=l(),SF=a("li"),vue=a("strong"),rKo=o("wav2vec2-conformer"),tKo=o(" \u2014 "),IX=a("a"),aKo=o("Wav2Vec2ConformerForAudioFrameClassification"),nKo=o(" (Wav2Vec2-Conformer model)"),sKo=l(),RF=a("li"),Fue=a("strong"),lKo=o("wavlm"),iKo=o(" \u2014 "),qX=a("a"),dKo=o("WavLMForAudioFrameClassification"),cKo=o(" (WavLM model)"),fKo=l(),PF=a("p"),mKo=o("The model is set in evaluation mode by default using "),Tue=a("code"),gKo=o("model.eval()"),hKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),pKo=o("model.train()"),uKo=l(),F(BF.$$.fragment),Qqe=l(),ud=a("h2"),IF=a("a"),Eue=a("span"),F(iL.$$.fragment),_Ko=l(),Cue=a("span"),bKo=o("AutoModelForCTC"),Hqe=l(),Vo=a("div"),F(dL.$$.fragment),vKo=l(),_d=a("p"),FKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NX=a("a"),TKo=o("from_pretrained()"),MKo=o(" class method or the "),jX=a("a"),EKo=o("from_config()"),CKo=o(` class
method.`),wKo=l(),cL=a("p"),AKo=o("This class cannot be instantiated directly using "),wue=a("code"),yKo=o("__init__()"),LKo=o(" (throws an error)."),xKo=l(),vt=a("div"),F(fL.$$.fragment),$Ko=l(),Aue=a("p"),kKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),SKo=l(),bd=a("p"),RKo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),PKo=o("not"),BKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),IKo=o("from_pretrained()"),qKo=o(" to load the model weights."),NKo=l(),F(qF.$$.fragment),jKo=l(),mo=a("div"),F(mL.$$.fragment),DKo=l(),Lue=a("p"),GKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),OKo=l(),Va=a("p"),VKo=o("The model class to instantiate is selected based on the "),xue=a("code"),XKo=o("model_type"),zKo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),WKo=o("pretrained_model_name_or_path"),QKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),HKo=o("pretrained_model_name_or_path"),UKo=o(":"),JKo=l(),Se=a("ul"),NF=a("li"),Sue=a("strong"),YKo=o("data2vec-audio"),KKo=o(" \u2014 "),GX=a("a"),ZKo=o("Data2VecAudioForCTC"),eZo=o(" (Data2VecAudio model)"),oZo=l(),jF=a("li"),Rue=a("strong"),rZo=o("hubert"),tZo=o(" \u2014 "),OX=a("a"),aZo=o("HubertForCTC"),nZo=o(" (Hubert model)"),sZo=l(),DF=a("li"),Pue=a("strong"),lZo=o("sew"),iZo=o(" \u2014 "),VX=a("a"),dZo=o("SEWForCTC"),cZo=o(" (SEW model)"),fZo=l(),GF=a("li"),Bue=a("strong"),mZo=o("sew-d"),gZo=o(" \u2014 "),XX=a("a"),hZo=o("SEWDForCTC"),pZo=o(" (SEW-D model)"),uZo=l(),OF=a("li"),Iue=a("strong"),_Zo=o("unispeech"),bZo=o(" \u2014 "),zX=a("a"),vZo=o("UniSpeechForCTC"),FZo=o(" (UniSpeech model)"),TZo=l(),VF=a("li"),que=a("strong"),MZo=o("unispeech-sat"),EZo=o(" \u2014 "),WX=a("a"),CZo=o("UniSpeechSatForCTC"),wZo=o(" (UniSpeechSat model)"),AZo=l(),XF=a("li"),Nue=a("strong"),yZo=o("wav2vec2"),LZo=o(" \u2014 "),QX=a("a"),xZo=o("Wav2Vec2ForCTC"),$Zo=o(" (Wav2Vec2 model)"),kZo=l(),zF=a("li"),jue=a("strong"),SZo=o("wav2vec2-conformer"),RZo=o(" \u2014 "),HX=a("a"),PZo=o("Wav2Vec2ConformerForCTC"),BZo=o(" (Wav2Vec2-Conformer model)"),IZo=l(),WF=a("li"),Due=a("strong"),qZo=o("wavlm"),NZo=o(" \u2014 "),UX=a("a"),jZo=o("WavLMForCTC"),DZo=o(" (WavLM model)"),GZo=l(),QF=a("p"),OZo=o("The model is set in evaluation mode by default using "),Gue=a("code"),VZo=o("model.eval()"),XZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),zZo=o("model.train()"),WZo=l(),F(HF.$$.fragment),Uqe=l(),vd=a("h2"),UF=a("a"),Vue=a("span"),F(gL.$$.fragment),QZo=l(),Xue=a("span"),HZo=o("AutoModelForSpeechSeq2Seq"),Jqe=l(),Xo=a("div"),F(hL.$$.fragment),UZo=l(),Fd=a("p"),JZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JX=a("a"),YZo=o("from_pretrained()"),KZo=o(" class method or the "),YX=a("a"),ZZo=o("from_config()"),eer=o(` class
method.`),oer=l(),pL=a("p"),rer=o("This class cannot be instantiated directly using "),zue=a("code"),ter=o("__init__()"),aer=o(" (throws an error)."),ner=l(),Ft=a("div"),F(uL.$$.fragment),ser=l(),Wue=a("p"),ler=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ier=l(),Td=a("p"),der=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),cer=o("not"),fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=a("a"),mer=o("from_pretrained()"),ger=o(" to load the model weights."),her=l(),F(JF.$$.fragment),per=l(),go=a("div"),F(_L.$$.fragment),uer=l(),Hue=a("p"),_er=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ber=l(),Xa=a("p"),ver=o("The model class to instantiate is selected based on the "),Uue=a("code"),Fer=o("model_type"),Ter=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),Mer=o("pretrained_model_name_or_path"),Eer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(":"),Aer=l(),bL=a("ul"),YF=a("li"),Kue=a("strong"),yer=o("speech-encoder-decoder"),Ler=o(" \u2014 "),ZX=a("a"),xer=o("SpeechEncoderDecoderModel"),$er=o(" (Speech Encoder decoder model)"),ker=l(),KF=a("li"),Zue=a("strong"),Ser=o("speech_to_text"),Rer=o(" \u2014 "),ez=a("a"),Per=o("Speech2TextForConditionalGeneration"),Ber=o(" (Speech2Text model)"),Ier=l(),ZF=a("p"),qer=o("The model is set in evaluation mode by default using "),e_e=a("code"),Ner=o("model.eval()"),jer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),Der=o("model.train()"),Ger=l(),F(e6.$$.fragment),Yqe=l(),Md=a("h2"),o6=a("a"),r_e=a("span"),F(vL.$$.fragment),Oer=l(),t_e=a("span"),Ver=o("AutoModelForAudioXVector"),Kqe=l(),zo=a("div"),F(FL.$$.fragment),Xer=l(),Ed=a("p"),zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oz=a("a"),Wer=o("from_pretrained()"),Qer=o(" class method or the "),rz=a("a"),Her=o("from_config()"),Uer=o(` class
method.`),Jer=l(),TL=a("p"),Yer=o("This class cannot be instantiated directly using "),a_e=a("code"),Ker=o("__init__()"),Zer=o(" (throws an error)."),eor=l(),Tt=a("div"),F(ML.$$.fragment),oor=l(),n_e=a("p"),ror=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tor=l(),Cd=a("p"),aor=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),nor=o("not"),sor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),lor=o("from_pretrained()"),ior=o(" to load the model weights."),dor=l(),F(r6.$$.fragment),cor=l(),ho=a("div"),F(EL.$$.fragment),mor=l(),l_e=a("p"),gor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hor=l(),za=a("p"),por=o("The model class to instantiate is selected based on the "),i_e=a("code"),uor=o("model_type"),_or=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),bor=o("pretrained_model_name_or_path"),vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),For=o("pretrained_model_name_or_path"),Tor=o(":"),Mor=l(),Zr=a("ul"),t6=a("li"),f_e=a("strong"),Eor=o("data2vec-audio"),Cor=o(" \u2014 "),az=a("a"),wor=o("Data2VecAudioForXVector"),Aor=o(" (Data2VecAudio model)"),yor=l(),a6=a("li"),m_e=a("strong"),Lor=o("unispeech-sat"),xor=o(" \u2014 "),nz=a("a"),$or=o("UniSpeechSatForXVector"),kor=o(" (UniSpeechSat model)"),Sor=l(),n6=a("li"),g_e=a("strong"),Ror=o("wav2vec2"),Por=o(" \u2014 "),sz=a("a"),Bor=o("Wav2Vec2ForXVector"),Ior=o(" (Wav2Vec2 model)"),qor=l(),s6=a("li"),h_e=a("strong"),Nor=o("wav2vec2-conformer"),jor=o(" \u2014 "),lz=a("a"),Dor=o("Wav2Vec2ConformerForXVector"),Gor=o(" (Wav2Vec2-Conformer model)"),Oor=l(),l6=a("li"),p_e=a("strong"),Vor=o("wavlm"),Xor=o(" \u2014 "),iz=a("a"),zor=o("WavLMForXVector"),Wor=o(" (WavLM model)"),Qor=l(),i6=a("p"),Hor=o("The model is set in evaluation mode by default using "),u_e=a("code"),Uor=o("model.eval()"),Jor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=a("code"),Yor=o("model.train()"),Kor=l(),F(d6.$$.fragment),Zqe=l(),wd=a("h2"),c6=a("a"),b_e=a("span"),F(CL.$$.fragment),Zor=l(),v_e=a("span"),err=o("AutoModelForMaskedImageModeling"),eNe=l(),Wo=a("div"),F(wL.$$.fragment),orr=l(),Ad=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dz=a("a"),trr=o("from_pretrained()"),arr=o(" class method or the "),cz=a("a"),nrr=o("from_config()"),srr=o(` class
method.`),lrr=l(),AL=a("p"),irr=o("This class cannot be instantiated directly using "),F_e=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),frr=l(),Mt=a("div"),F(yL.$$.fragment),mrr=l(),T_e=a("p"),grr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hrr=l(),yd=a("p"),prr=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),urr=o("not"),_rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),brr=o("from_pretrained()"),vrr=o(" to load the model weights."),Frr=l(),F(f6.$$.fragment),Trr=l(),po=a("div"),F(LL.$$.fragment),Mrr=l(),E_e=a("p"),Err=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Crr=l(),Wa=a("p"),wrr=o("The model class to instantiate is selected based on the "),C_e=a("code"),Arr=o("model_type"),yrr=o(` property of the config object (either
passed as an argument or loaded from `),w_e=a("code"),Lrr=o("pretrained_model_name_or_path"),xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=a("code"),$rr=o("pretrained_model_name_or_path"),krr=o(":"),Srr=l(),Ld=a("ul"),m6=a("li"),y_e=a("strong"),Rrr=o("deit"),Prr=o(" \u2014 "),mz=a("a"),Brr=o("DeiTForMaskedImageModeling"),Irr=o(" (DeiT model)"),qrr=l(),g6=a("li"),L_e=a("strong"),Nrr=o("swin"),jrr=o(" \u2014 "),gz=a("a"),Drr=o("SwinForMaskedImageModeling"),Grr=o(" (Swin model)"),Orr=l(),h6=a("li"),x_e=a("strong"),Vrr=o("vit"),Xrr=o(" \u2014 "),hz=a("a"),zrr=o("ViTForMaskedImageModeling"),Wrr=o(" (ViT model)"),Qrr=l(),p6=a("p"),Hrr=o("The model is set in evaluation mode by default using "),$_e=a("code"),Urr=o("model.eval()"),Jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),Yrr=o("model.train()"),Krr=l(),F(u6.$$.fragment),oNe=l(),xd=a("h2"),_6=a("a"),S_e=a("span"),F(xL.$$.fragment),Zrr=l(),R_e=a("span"),etr=o("AutoModelForObjectDetection"),rNe=l(),Qo=a("div"),F($L.$$.fragment),otr=l(),$d=a("p"),rtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pz=a("a"),ttr=o("from_pretrained()"),atr=o(" class method or the "),uz=a("a"),ntr=o("from_config()"),str=o(` class
method.`),ltr=l(),kL=a("p"),itr=o("This class cannot be instantiated directly using "),P_e=a("code"),dtr=o("__init__()"),ctr=o(" (throws an error)."),ftr=l(),Et=a("div"),F(SL.$$.fragment),mtr=l(),B_e=a("p"),gtr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),htr=l(),kd=a("p"),ptr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),utr=o("not"),_tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),btr=o("from_pretrained()"),vtr=o(" to load the model weights."),Ftr=l(),F(b6.$$.fragment),Ttr=l(),uo=a("div"),F(RL.$$.fragment),Mtr=l(),q_e=a("p"),Etr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ctr=l(),Qa=a("p"),wtr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Atr=o("model_type"),ytr=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),Ltr=o("pretrained_model_name_or_path"),xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),$tr=o("pretrained_model_name_or_path"),ktr=o(":"),Str=l(),PL=a("ul"),v6=a("li"),G_e=a("strong"),Rtr=o("detr"),Ptr=o(" \u2014 "),bz=a("a"),Btr=o("DetrForObjectDetection"),Itr=o(" (DETR model)"),qtr=l(),F6=a("li"),O_e=a("strong"),Ntr=o("yolos"),jtr=o(" \u2014 "),vz=a("a"),Dtr=o("YolosForObjectDetection"),Gtr=o(" (YOLOS model)"),Otr=l(),T6=a("p"),Vtr=o("The model is set in evaluation mode by default using "),V_e=a("code"),Xtr=o("model.eval()"),ztr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),Wtr=o("model.train()"),Qtr=l(),F(M6.$$.fragment),tNe=l(),Sd=a("h2"),E6=a("a"),z_e=a("span"),F(BL.$$.fragment),Htr=l(),W_e=a("span"),Utr=o("AutoModelForImageSegmentation"),aNe=l(),Ho=a("div"),F(IL.$$.fragment),Jtr=l(),Rd=a("p"),Ytr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Fz=a("a"),Ktr=o("from_pretrained()"),Ztr=o(" class method or the "),Tz=a("a"),ear=o("from_config()"),oar=o(` class
method.`),rar=l(),qL=a("p"),tar=o("This class cannot be instantiated directly using "),Q_e=a("code"),aar=o("__init__()"),nar=o(" (throws an error)."),sar=l(),Ct=a("div"),F(NL.$$.fragment),lar=l(),H_e=a("p"),iar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dar=l(),Pd=a("p"),car=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),far=o("not"),mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),gar=o("from_pretrained()"),har=o(" to load the model weights."),par=l(),F(C6.$$.fragment),uar=l(),_o=a("div"),F(jL.$$.fragment),_ar=l(),J_e=a("p"),bar=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Far=l(),Ha=a("p"),Tar=o("The model class to instantiate is selected based on the "),Y_e=a("code"),Mar=o("model_type"),Ear=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),Car=o("pretrained_model_name_or_path"),war=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),Aar=o("pretrained_model_name_or_path"),yar=o(":"),Lar=l(),e0e=a("ul"),w6=a("li"),o0e=a("strong"),xar=o("detr"),$ar=o(" \u2014 "),Ez=a("a"),kar=o("DetrForSegmentation"),Sar=o(" (DETR model)"),Rar=l(),A6=a("p"),Par=o("The model is set in evaluation mode by default using "),r0e=a("code"),Bar=o("model.eval()"),Iar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t0e=a("code"),qar=o("model.train()"),Nar=l(),F(y6.$$.fragment),nNe=l(),Bd=a("h2"),L6=a("a"),a0e=a("span"),F(DL.$$.fragment),jar=l(),n0e=a("span"),Dar=o("AutoModelForSemanticSegmentation"),sNe=l(),Uo=a("div"),F(GL.$$.fragment),Gar=l(),Id=a("p"),Oar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cz=a("a"),Var=o("from_pretrained()"),Xar=o(" class method or the "),wz=a("a"),zar=o("from_config()"),War=o(` class
method.`),Qar=l(),OL=a("p"),Har=o("This class cannot be instantiated directly using "),s0e=a("code"),Uar=o("__init__()"),Jar=o(" (throws an error)."),Yar=l(),wt=a("div"),F(VL.$$.fragment),Kar=l(),l0e=a("p"),Zar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),enr=l(),qd=a("p"),onr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),rnr=o("not"),tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),anr=o("from_pretrained()"),nnr=o(" to load the model weights."),snr=l(),F(x6.$$.fragment),lnr=l(),bo=a("div"),F(XL.$$.fragment),inr=l(),d0e=a("p"),dnr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),cnr=l(),Ua=a("p"),fnr=o("The model class to instantiate is selected based on the "),c0e=a("code"),mnr=o("model_type"),gnr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),hnr=o("pretrained_model_name_or_path"),pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),unr=o("pretrained_model_name_or_path"),_nr=o(":"),bnr=l(),Ja=a("ul"),$6=a("li"),g0e=a("strong"),vnr=o("beit"),Fnr=o(" \u2014 "),yz=a("a"),Tnr=o("BeitForSemanticSegmentation"),Mnr=o(" (BEiT model)"),Enr=l(),k6=a("li"),h0e=a("strong"),Cnr=o("data2vec-vision"),wnr=o(" \u2014 "),Lz=a("a"),Anr=o("Data2VecVisionForSemanticSegmentation"),ynr=o(" (Data2VecVision model)"),Lnr=l(),S6=a("li"),p0e=a("strong"),xnr=o("dpt"),$nr=o(" \u2014 "),xz=a("a"),knr=o("DPTForSemanticSegmentation"),Snr=o(" (DPT model)"),Rnr=l(),R6=a("li"),u0e=a("strong"),Pnr=o("segformer"),Bnr=o(" \u2014 "),$z=a("a"),Inr=o("SegformerForSemanticSegmentation"),qnr=o(" (SegFormer model)"),Nnr=l(),P6=a("p"),jnr=o("The model is set in evaluation mode by default using "),_0e=a("code"),Dnr=o("model.eval()"),Gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=a("code"),Onr=o("model.train()"),Vnr=l(),F(B6.$$.fragment),lNe=l(),Nd=a("h2"),I6=a("a"),v0e=a("span"),F(zL.$$.fragment),Xnr=l(),F0e=a("span"),znr=o("AutoModelForInstanceSegmentation"),iNe=l(),Jo=a("div"),F(WL.$$.fragment),Wnr=l(),jd=a("p"),Qnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kz=a("a"),Hnr=o("from_pretrained()"),Unr=o(" class method or the "),Sz=a("a"),Jnr=o("from_config()"),Ynr=o(` class
method.`),Knr=l(),QL=a("p"),Znr=o("This class cannot be instantiated directly using "),T0e=a("code"),esr=o("__init__()"),osr=o(" (throws an error)."),rsr=l(),At=a("div"),F(HL.$$.fragment),tsr=l(),M0e=a("p"),asr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nsr=l(),Dd=a("p"),ssr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),lsr=o("not"),isr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),dsr=o("from_pretrained()"),csr=o(" to load the model weights."),fsr=l(),F(q6.$$.fragment),msr=l(),vo=a("div"),F(UL.$$.fragment),gsr=l(),C0e=a("p"),hsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),psr=l(),Ya=a("p"),usr=o("The model class to instantiate is selected based on the "),w0e=a("code"),_sr=o("model_type"),bsr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),vsr=o("pretrained_model_name_or_path"),Fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),Tsr=o("pretrained_model_name_or_path"),Msr=o(":"),Esr=l(),L0e=a("ul"),N6=a("li"),x0e=a("strong"),Csr=o("maskformer"),wsr=o(" \u2014 "),Pz=a("a"),Asr=o("MaskFormerForInstanceSegmentation"),ysr=o(" (MaskFormer model)"),Lsr=l(),j6=a("p"),xsr=o("The model is set in evaluation mode by default using "),$0e=a("code"),$sr=o("model.eval()"),ksr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k0e=a("code"),Ssr=o("model.train()"),Rsr=l(),F(D6.$$.fragment),dNe=l(),Gd=a("h2"),G6=a("a"),S0e=a("span"),F(JL.$$.fragment),Psr=l(),R0e=a("span"),Bsr=o("TFAutoModel"),cNe=l(),Yo=a("div"),F(YL.$$.fragment),Isr=l(),Od=a("p"),qsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bz=a("a"),Nsr=o("from_pretrained()"),jsr=o(" class method or the "),Iz=a("a"),Dsr=o("from_config()"),Gsr=o(` class
method.`),Osr=l(),KL=a("p"),Vsr=o("This class cannot be instantiated directly using "),P0e=a("code"),Xsr=o("__init__()"),zsr=o(" (throws an error)."),Wsr=l(),yt=a("div"),F(ZL.$$.fragment),Qsr=l(),B0e=a("p"),Hsr=o("Instantiates one of the base model classes of the library from a configuration."),Usr=l(),Vd=a("p"),Jsr=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),Ysr=o("not"),Ksr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Zsr=o("from_pretrained()"),elr=o(" to load the model weights."),olr=l(),F(O6.$$.fragment),rlr=l(),wr=a("div"),F(e8.$$.fragment),tlr=l(),q0e=a("p"),alr=o("Instantiate one of the base model classes of the library from a pretrained model."),nlr=l(),Ka=a("p"),slr=o("The model class to instantiate is selected based on the "),N0e=a("code"),llr=o("model_type"),ilr=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),dlr=o("pretrained_model_name_or_path"),clr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(":"),glr=l(),N=a("ul"),V6=a("li"),G0e=a("strong"),hlr=o("albert"),plr=o(" \u2014 "),Nz=a("a"),ulr=o("TFAlbertModel"),_lr=o(" (ALBERT model)"),blr=l(),X6=a("li"),O0e=a("strong"),vlr=o("bart"),Flr=o(" \u2014 "),jz=a("a"),Tlr=o("TFBartModel"),Mlr=o(" (BART model)"),Elr=l(),z6=a("li"),V0e=a("strong"),Clr=o("bert"),wlr=o(" \u2014 "),Dz=a("a"),Alr=o("TFBertModel"),ylr=o(" (BERT model)"),Llr=l(),W6=a("li"),X0e=a("strong"),xlr=o("blenderbot"),$lr=o(" \u2014 "),Gz=a("a"),klr=o("TFBlenderbotModel"),Slr=o(" (Blenderbot model)"),Rlr=l(),Q6=a("li"),z0e=a("strong"),Plr=o("blenderbot-small"),Blr=o(" \u2014 "),Oz=a("a"),Ilr=o("TFBlenderbotSmallModel"),qlr=o(" (BlenderbotSmall model)"),Nlr=l(),H6=a("li"),W0e=a("strong"),jlr=o("camembert"),Dlr=o(" \u2014 "),Vz=a("a"),Glr=o("TFCamembertModel"),Olr=o(" (CamemBERT model)"),Vlr=l(),U6=a("li"),Q0e=a("strong"),Xlr=o("clip"),zlr=o(" \u2014 "),Xz=a("a"),Wlr=o("TFCLIPModel"),Qlr=o(" (CLIP model)"),Hlr=l(),J6=a("li"),H0e=a("strong"),Ulr=o("convbert"),Jlr=o(" \u2014 "),zz=a("a"),Ylr=o("TFConvBertModel"),Klr=o(" (ConvBERT model)"),Zlr=l(),Y6=a("li"),U0e=a("strong"),eir=o("convnext"),oir=o(" \u2014 "),Wz=a("a"),rir=o("TFConvNextModel"),tir=o(" (ConvNext model)"),air=l(),K6=a("li"),J0e=a("strong"),nir=o("ctrl"),sir=o(" \u2014 "),Qz=a("a"),lir=o("TFCTRLModel"),iir=o(" (CTRL model)"),dir=l(),Z6=a("li"),Y0e=a("strong"),cir=o("data2vec-vision"),fir=o(" \u2014 "),Hz=a("a"),mir=o("TFData2VecVisionModel"),gir=o(" (Data2VecVision model)"),hir=l(),eT=a("li"),K0e=a("strong"),pir=o("deberta"),uir=o(" \u2014 "),Uz=a("a"),_ir=o("TFDebertaModel"),bir=o(" (DeBERTa model)"),vir=l(),oT=a("li"),Z0e=a("strong"),Fir=o("deberta-v2"),Tir=o(" \u2014 "),Jz=a("a"),Mir=o("TFDebertaV2Model"),Eir=o(" (DeBERTa-v2 model)"),Cir=l(),rT=a("li"),e1e=a("strong"),wir=o("distilbert"),Air=o(" \u2014 "),Yz=a("a"),yir=o("TFDistilBertModel"),Lir=o(" (DistilBERT model)"),xir=l(),tT=a("li"),o1e=a("strong"),$ir=o("dpr"),kir=o(" \u2014 "),Kz=a("a"),Sir=o("TFDPRQuestionEncoder"),Rir=o(" (DPR model)"),Pir=l(),aT=a("li"),r1e=a("strong"),Bir=o("electra"),Iir=o(" \u2014 "),Zz=a("a"),qir=o("TFElectraModel"),Nir=o(" (ELECTRA model)"),jir=l(),nT=a("li"),t1e=a("strong"),Dir=o("flaubert"),Gir=o(" \u2014 "),eW=a("a"),Oir=o("TFFlaubertModel"),Vir=o(" (FlauBERT model)"),Xir=l(),Is=a("li"),a1e=a("strong"),zir=o("funnel"),Wir=o(" \u2014 "),oW=a("a"),Qir=o("TFFunnelModel"),Hir=o(" or "),rW=a("a"),Uir=o("TFFunnelBaseModel"),Jir=o(" (Funnel Transformer model)"),Yir=l(),sT=a("li"),n1e=a("strong"),Kir=o("gpt2"),Zir=o(" \u2014 "),tW=a("a"),edr=o("TFGPT2Model"),odr=o(" (OpenAI GPT-2 model)"),rdr=l(),lT=a("li"),s1e=a("strong"),tdr=o("gptj"),adr=o(" \u2014 "),aW=a("a"),ndr=o("TFGPTJModel"),sdr=o(" (GPT-J model)"),ldr=l(),iT=a("li"),l1e=a("strong"),idr=o("hubert"),ddr=o(" \u2014 "),nW=a("a"),cdr=o("TFHubertModel"),fdr=o(" (Hubert model)"),mdr=l(),dT=a("li"),i1e=a("strong"),gdr=o("layoutlm"),hdr=o(" \u2014 "),sW=a("a"),pdr=o("TFLayoutLMModel"),udr=o(" (LayoutLM model)"),_dr=l(),cT=a("li"),d1e=a("strong"),bdr=o("led"),vdr=o(" \u2014 "),lW=a("a"),Fdr=o("TFLEDModel"),Tdr=o(" (LED model)"),Mdr=l(),fT=a("li"),c1e=a("strong"),Edr=o("longformer"),Cdr=o(" \u2014 "),iW=a("a"),wdr=o("TFLongformerModel"),Adr=o(" (Longformer model)"),ydr=l(),mT=a("li"),f1e=a("strong"),Ldr=o("lxmert"),xdr=o(" \u2014 "),dW=a("a"),$dr=o("TFLxmertModel"),kdr=o(" (LXMERT model)"),Sdr=l(),gT=a("li"),m1e=a("strong"),Rdr=o("marian"),Pdr=o(" \u2014 "),cW=a("a"),Bdr=o("TFMarianModel"),Idr=o(" (Marian model)"),qdr=l(),hT=a("li"),g1e=a("strong"),Ndr=o("mbart"),jdr=o(" \u2014 "),fW=a("a"),Ddr=o("TFMBartModel"),Gdr=o(" (mBART model)"),Odr=l(),pT=a("li"),h1e=a("strong"),Vdr=o("mobilebert"),Xdr=o(" \u2014 "),mW=a("a"),zdr=o("TFMobileBertModel"),Wdr=o(" (MobileBERT model)"),Qdr=l(),uT=a("li"),p1e=a("strong"),Hdr=o("mpnet"),Udr=o(" \u2014 "),gW=a("a"),Jdr=o("TFMPNetModel"),Ydr=o(" (MPNet model)"),Kdr=l(),_T=a("li"),u1e=a("strong"),Zdr=o("mt5"),ecr=o(" \u2014 "),hW=a("a"),ocr=o("TFMT5Model"),rcr=o(" (mT5 model)"),tcr=l(),bT=a("li"),_1e=a("strong"),acr=o("openai-gpt"),ncr=o(" \u2014 "),pW=a("a"),scr=o("TFOpenAIGPTModel"),lcr=o(" (OpenAI GPT model)"),icr=l(),vT=a("li"),b1e=a("strong"),dcr=o("pegasus"),ccr=o(" \u2014 "),uW=a("a"),fcr=o("TFPegasusModel"),mcr=o(" (Pegasus model)"),gcr=l(),FT=a("li"),v1e=a("strong"),hcr=o("rembert"),pcr=o(" \u2014 "),_W=a("a"),ucr=o("TFRemBertModel"),_cr=o(" (RemBERT model)"),bcr=l(),TT=a("li"),F1e=a("strong"),vcr=o("roberta"),Fcr=o(" \u2014 "),bW=a("a"),Tcr=o("TFRobertaModel"),Mcr=o(" (RoBERTa model)"),Ecr=l(),MT=a("li"),T1e=a("strong"),Ccr=o("roformer"),wcr=o(" \u2014 "),vW=a("a"),Acr=o("TFRoFormerModel"),ycr=o(" (RoFormer model)"),Lcr=l(),ET=a("li"),M1e=a("strong"),xcr=o("speech_to_text"),$cr=o(" \u2014 "),FW=a("a"),kcr=o("TFSpeech2TextModel"),Scr=o(" (Speech2Text model)"),Rcr=l(),CT=a("li"),E1e=a("strong"),Pcr=o("swin"),Bcr=o(" \u2014 "),TW=a("a"),Icr=o("TFSwinModel"),qcr=o(" (Swin model)"),Ncr=l(),wT=a("li"),C1e=a("strong"),jcr=o("t5"),Dcr=o(" \u2014 "),MW=a("a"),Gcr=o("TFT5Model"),Ocr=o(" (T5 model)"),Vcr=l(),AT=a("li"),w1e=a("strong"),Xcr=o("tapas"),zcr=o(" \u2014 "),EW=a("a"),Wcr=o("TFTapasModel"),Qcr=o(" (TAPAS model)"),Hcr=l(),yT=a("li"),A1e=a("strong"),Ucr=o("transfo-xl"),Jcr=o(" \u2014 "),CW=a("a"),Ycr=o("TFTransfoXLModel"),Kcr=o(" (Transformer-XL model)"),Zcr=l(),LT=a("li"),y1e=a("strong"),efr=o("vit"),ofr=o(" \u2014 "),wW=a("a"),rfr=o("TFViTModel"),tfr=o(" (ViT model)"),afr=l(),xT=a("li"),L1e=a("strong"),nfr=o("vit_mae"),sfr=o(" \u2014 "),AW=a("a"),lfr=o("TFViTMAEModel"),ifr=o(" (ViTMAE model)"),dfr=l(),$T=a("li"),x1e=a("strong"),cfr=o("wav2vec2"),ffr=o(" \u2014 "),yW=a("a"),mfr=o("TFWav2Vec2Model"),gfr=o(" (Wav2Vec2 model)"),hfr=l(),kT=a("li"),$1e=a("strong"),pfr=o("xlm"),ufr=o(" \u2014 "),LW=a("a"),_fr=o("TFXLMModel"),bfr=o(" (XLM model)"),vfr=l(),ST=a("li"),k1e=a("strong"),Ffr=o("xlm-roberta"),Tfr=o(" \u2014 "),xW=a("a"),Mfr=o("TFXLMRobertaModel"),Efr=o(" (XLM-RoBERTa model)"),Cfr=l(),RT=a("li"),S1e=a("strong"),wfr=o("xlnet"),Afr=o(" \u2014 "),$W=a("a"),yfr=o("TFXLNetModel"),Lfr=o(" (XLNet model)"),xfr=l(),F(PT.$$.fragment),fNe=l(),Xd=a("h2"),BT=a("a"),R1e=a("span"),F(o8.$$.fragment),$fr=l(),P1e=a("span"),kfr=o("TFAutoModelForPreTraining"),mNe=l(),Ko=a("div"),F(r8.$$.fragment),Sfr=l(),zd=a("p"),Rfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=a("a"),Pfr=o("from_pretrained()"),Bfr=o(" class method or the "),SW=a("a"),Ifr=o("from_config()"),qfr=o(` class
method.`),Nfr=l(),t8=a("p"),jfr=o("This class cannot be instantiated directly using "),B1e=a("code"),Dfr=o("__init__()"),Gfr=o(" (throws an error)."),Ofr=l(),Lt=a("div"),F(a8.$$.fragment),Vfr=l(),I1e=a("p"),Xfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zfr=l(),Wd=a("p"),Wfr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),Qfr=o("not"),Hfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),Ufr=o("from_pretrained()"),Jfr=o(" to load the model weights."),Yfr=l(),F(IT.$$.fragment),Kfr=l(),Ar=a("div"),F(n8.$$.fragment),Zfr=l(),N1e=a("p"),emr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),omr=l(),Za=a("p"),rmr=o("The model class to instantiate is selected based on the "),j1e=a("code"),tmr=o("model_type"),amr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),nmr=o("pretrained_model_name_or_path"),smr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),lmr=o("pretrained_model_name_or_path"),imr=o(":"),dmr=l(),se=a("ul"),qT=a("li"),O1e=a("strong"),cmr=o("albert"),fmr=o(" \u2014 "),PW=a("a"),mmr=o("TFAlbertForPreTraining"),gmr=o(" (ALBERT model)"),hmr=l(),NT=a("li"),V1e=a("strong"),pmr=o("bart"),umr=o(" \u2014 "),BW=a("a"),_mr=o("TFBartForConditionalGeneration"),bmr=o(" (BART model)"),vmr=l(),jT=a("li"),X1e=a("strong"),Fmr=o("bert"),Tmr=o(" \u2014 "),IW=a("a"),Mmr=o("TFBertForPreTraining"),Emr=o(" (BERT model)"),Cmr=l(),DT=a("li"),z1e=a("strong"),wmr=o("camembert"),Amr=o(" \u2014 "),qW=a("a"),ymr=o("TFCamembertForMaskedLM"),Lmr=o(" (CamemBERT model)"),xmr=l(),GT=a("li"),W1e=a("strong"),$mr=o("ctrl"),kmr=o(" \u2014 "),NW=a("a"),Smr=o("TFCTRLLMHeadModel"),Rmr=o(" (CTRL model)"),Pmr=l(),OT=a("li"),Q1e=a("strong"),Bmr=o("distilbert"),Imr=o(" \u2014 "),jW=a("a"),qmr=o("TFDistilBertForMaskedLM"),Nmr=o(" (DistilBERT model)"),jmr=l(),VT=a("li"),H1e=a("strong"),Dmr=o("electra"),Gmr=o(" \u2014 "),DW=a("a"),Omr=o("TFElectraForPreTraining"),Vmr=o(" (ELECTRA model)"),Xmr=l(),XT=a("li"),U1e=a("strong"),zmr=o("flaubert"),Wmr=o(" \u2014 "),GW=a("a"),Qmr=o("TFFlaubertWithLMHeadModel"),Hmr=o(" (FlauBERT model)"),Umr=l(),zT=a("li"),J1e=a("strong"),Jmr=o("funnel"),Ymr=o(" \u2014 "),OW=a("a"),Kmr=o("TFFunnelForPreTraining"),Zmr=o(" (Funnel Transformer model)"),egr=l(),WT=a("li"),Y1e=a("strong"),ogr=o("gpt2"),rgr=o(" \u2014 "),VW=a("a"),tgr=o("TFGPT2LMHeadModel"),agr=o(" (OpenAI GPT-2 model)"),ngr=l(),QT=a("li"),K1e=a("strong"),sgr=o("layoutlm"),lgr=o(" \u2014 "),XW=a("a"),igr=o("TFLayoutLMForMaskedLM"),dgr=o(" (LayoutLM model)"),cgr=l(),HT=a("li"),Z1e=a("strong"),fgr=o("lxmert"),mgr=o(" \u2014 "),zW=a("a"),ggr=o("TFLxmertForPreTraining"),hgr=o(" (LXMERT model)"),pgr=l(),UT=a("li"),ebe=a("strong"),ugr=o("mobilebert"),_gr=o(" \u2014 "),WW=a("a"),bgr=o("TFMobileBertForPreTraining"),vgr=o(" (MobileBERT model)"),Fgr=l(),JT=a("li"),obe=a("strong"),Tgr=o("mpnet"),Mgr=o(" \u2014 "),QW=a("a"),Egr=o("TFMPNetForMaskedLM"),Cgr=o(" (MPNet model)"),wgr=l(),YT=a("li"),rbe=a("strong"),Agr=o("openai-gpt"),ygr=o(" \u2014 "),HW=a("a"),Lgr=o("TFOpenAIGPTLMHeadModel"),xgr=o(" (OpenAI GPT model)"),$gr=l(),KT=a("li"),tbe=a("strong"),kgr=o("roberta"),Sgr=o(" \u2014 "),UW=a("a"),Rgr=o("TFRobertaForMaskedLM"),Pgr=o(" (RoBERTa model)"),Bgr=l(),ZT=a("li"),abe=a("strong"),Igr=o("t5"),qgr=o(" \u2014 "),JW=a("a"),Ngr=o("TFT5ForConditionalGeneration"),jgr=o(" (T5 model)"),Dgr=l(),e7=a("li"),nbe=a("strong"),Ggr=o("tapas"),Ogr=o(" \u2014 "),YW=a("a"),Vgr=o("TFTapasForMaskedLM"),Xgr=o(" (TAPAS model)"),zgr=l(),o7=a("li"),sbe=a("strong"),Wgr=o("transfo-xl"),Qgr=o(" \u2014 "),KW=a("a"),Hgr=o("TFTransfoXLLMHeadModel"),Ugr=o(" (Transformer-XL model)"),Jgr=l(),r7=a("li"),lbe=a("strong"),Ygr=o("vit_mae"),Kgr=o(" \u2014 "),ZW=a("a"),Zgr=o("TFViTMAEForPreTraining"),ehr=o(" (ViTMAE model)"),ohr=l(),t7=a("li"),ibe=a("strong"),rhr=o("xlm"),thr=o(" \u2014 "),eQ=a("a"),ahr=o("TFXLMWithLMHeadModel"),nhr=o(" (XLM model)"),shr=l(),a7=a("li"),dbe=a("strong"),lhr=o("xlm-roberta"),ihr=o(" \u2014 "),oQ=a("a"),dhr=o("TFXLMRobertaForMaskedLM"),chr=o(" (XLM-RoBERTa model)"),fhr=l(),n7=a("li"),cbe=a("strong"),mhr=o("xlnet"),ghr=o(" \u2014 "),rQ=a("a"),hhr=o("TFXLNetLMHeadModel"),phr=o(" (XLNet model)"),uhr=l(),F(s7.$$.fragment),gNe=l(),Qd=a("h2"),l7=a("a"),fbe=a("span"),F(s8.$$.fragment),_hr=l(),mbe=a("span"),bhr=o("TFAutoModelForCausalLM"),hNe=l(),Zo=a("div"),F(l8.$$.fragment),vhr=l(),Hd=a("p"),Fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tQ=a("a"),Thr=o("from_pretrained()"),Mhr=o(" class method or the "),aQ=a("a"),Ehr=o("from_config()"),Chr=o(` class
method.`),whr=l(),i8=a("p"),Ahr=o("This class cannot be instantiated directly using "),gbe=a("code"),yhr=o("__init__()"),Lhr=o(" (throws an error)."),xhr=l(),xt=a("div"),F(d8.$$.fragment),$hr=l(),hbe=a("p"),khr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Shr=l(),Ud=a("p"),Rhr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),Phr=o("not"),Bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),Ihr=o("from_pretrained()"),qhr=o(" to load the model weights."),Nhr=l(),F(i7.$$.fragment),jhr=l(),yr=a("div"),F(c8.$$.fragment),Dhr=l(),ube=a("p"),Ghr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ohr=l(),en=a("p"),Vhr=o("The model class to instantiate is selected based on the "),_be=a("code"),Xhr=o("model_type"),zhr=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),Whr=o("pretrained_model_name_or_path"),Qhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),Hhr=o("pretrained_model_name_or_path"),Uhr=o(":"),Jhr=l(),Te=a("ul"),d7=a("li"),Fbe=a("strong"),Yhr=o("bert"),Khr=o(" \u2014 "),sQ=a("a"),Zhr=o("TFBertLMHeadModel"),epr=o(" (BERT model)"),opr=l(),c7=a("li"),Tbe=a("strong"),rpr=o("camembert"),tpr=o(" \u2014 "),lQ=a("a"),apr=o("TFCamembertForCausalLM"),npr=o(" (CamemBERT model)"),spr=l(),f7=a("li"),Mbe=a("strong"),lpr=o("ctrl"),ipr=o(" \u2014 "),iQ=a("a"),dpr=o("TFCTRLLMHeadModel"),cpr=o(" (CTRL model)"),fpr=l(),m7=a("li"),Ebe=a("strong"),mpr=o("gpt2"),gpr=o(" \u2014 "),dQ=a("a"),hpr=o("TFGPT2LMHeadModel"),ppr=o(" (OpenAI GPT-2 model)"),upr=l(),g7=a("li"),Cbe=a("strong"),_pr=o("gptj"),bpr=o(" \u2014 "),cQ=a("a"),vpr=o("TFGPTJForCausalLM"),Fpr=o(" (GPT-J model)"),Tpr=l(),h7=a("li"),wbe=a("strong"),Mpr=o("openai-gpt"),Epr=o(" \u2014 "),fQ=a("a"),Cpr=o("TFOpenAIGPTLMHeadModel"),wpr=o(" (OpenAI GPT model)"),Apr=l(),p7=a("li"),Abe=a("strong"),ypr=o("rembert"),Lpr=o(" \u2014 "),mQ=a("a"),xpr=o("TFRemBertForCausalLM"),$pr=o(" (RemBERT model)"),kpr=l(),u7=a("li"),ybe=a("strong"),Spr=o("roberta"),Rpr=o(" \u2014 "),gQ=a("a"),Ppr=o("TFRobertaForCausalLM"),Bpr=o(" (RoBERTa model)"),Ipr=l(),_7=a("li"),Lbe=a("strong"),qpr=o("roformer"),Npr=o(" \u2014 "),hQ=a("a"),jpr=o("TFRoFormerForCausalLM"),Dpr=o(" (RoFormer model)"),Gpr=l(),b7=a("li"),xbe=a("strong"),Opr=o("transfo-xl"),Vpr=o(" \u2014 "),pQ=a("a"),Xpr=o("TFTransfoXLLMHeadModel"),zpr=o(" (Transformer-XL model)"),Wpr=l(),v7=a("li"),$be=a("strong"),Qpr=o("xlm"),Hpr=o(" \u2014 "),uQ=a("a"),Upr=o("TFXLMWithLMHeadModel"),Jpr=o(" (XLM model)"),Ypr=l(),F7=a("li"),kbe=a("strong"),Kpr=o("xlnet"),Zpr=o(" \u2014 "),_Q=a("a"),eur=o("TFXLNetLMHeadModel"),our=o(" (XLNet model)"),rur=l(),F(T7.$$.fragment),pNe=l(),Jd=a("h2"),M7=a("a"),Sbe=a("span"),F(f8.$$.fragment),tur=l(),Rbe=a("span"),aur=o("TFAutoModelForImageClassification"),uNe=l(),er=a("div"),F(m8.$$.fragment),nur=l(),Yd=a("p"),sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bQ=a("a"),lur=o("from_pretrained()"),iur=o(" class method or the "),vQ=a("a"),dur=o("from_config()"),cur=o(` class
method.`),fur=l(),g8=a("p"),mur=o("This class cannot be instantiated directly using "),Pbe=a("code"),gur=o("__init__()"),hur=o(" (throws an error)."),pur=l(),$t=a("div"),F(h8.$$.fragment),uur=l(),Bbe=a("p"),_ur=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bur=l(),Kd=a("p"),vur=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),Fur=o("not"),Tur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Mur=o("from_pretrained()"),Eur=o(" to load the model weights."),Cur=l(),F(E7.$$.fragment),wur=l(),Lr=a("div"),F(p8.$$.fragment),Aur=l(),qbe=a("p"),yur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lur=l(),on=a("p"),xur=o("The model class to instantiate is selected based on the "),Nbe=a("code"),$ur=o("model_type"),kur=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),Sur=o("pretrained_model_name_or_path"),Rur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),Pur=o("pretrained_model_name_or_path"),Bur=o(":"),Iur=l(),rn=a("ul"),C7=a("li"),Gbe=a("strong"),qur=o("convnext"),Nur=o(" \u2014 "),TQ=a("a"),jur=o("TFConvNextForImageClassification"),Dur=o(" (ConvNext model)"),Gur=l(),w7=a("li"),Obe=a("strong"),Our=o("data2vec-vision"),Vur=o(" \u2014 "),MQ=a("a"),Xur=o("TFData2VecVisionForImageClassification"),zur=o(" (Data2VecVision model)"),Wur=l(),A7=a("li"),Vbe=a("strong"),Qur=o("swin"),Hur=o(" \u2014 "),EQ=a("a"),Uur=o("TFSwinForImageClassification"),Jur=o(" (Swin model)"),Yur=l(),y7=a("li"),Xbe=a("strong"),Kur=o("vit"),Zur=o(" \u2014 "),CQ=a("a"),e_r=o("TFViTForImageClassification"),o_r=o(" (ViT model)"),r_r=l(),F(L7.$$.fragment),_Ne=l(),Zd=a("h2"),x7=a("a"),zbe=a("span"),F(u8.$$.fragment),t_r=l(),Wbe=a("span"),a_r=o("TFAutoModelForMaskedLM"),bNe=l(),or=a("div"),F(_8.$$.fragment),n_r=l(),ec=a("p"),s_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=a("a"),l_r=o("from_pretrained()"),i_r=o(" class method or the "),AQ=a("a"),d_r=o("from_config()"),c_r=o(` class
method.`),f_r=l(),b8=a("p"),m_r=o("This class cannot be instantiated directly using "),Qbe=a("code"),g_r=o("__init__()"),h_r=o(" (throws an error)."),p_r=l(),kt=a("div"),F(v8.$$.fragment),u_r=l(),Hbe=a("p"),__r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b_r=l(),oc=a("p"),v_r=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),F_r=o("not"),T_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),M_r=o("from_pretrained()"),E_r=o(" to load the model weights."),C_r=l(),F($7.$$.fragment),w_r=l(),xr=a("div"),F(F8.$$.fragment),A_r=l(),Jbe=a("p"),y_r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L_r=l(),tn=a("p"),x_r=o("The model class to instantiate is selected based on the "),Ybe=a("code"),$_r=o("model_type"),k_r=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),S_r=o("pretrained_model_name_or_path"),R_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),P_r=o("pretrained_model_name_or_path"),B_r=o(":"),I_r=l(),ie=a("ul"),k7=a("li"),e2e=a("strong"),q_r=o("albert"),N_r=o(" \u2014 "),LQ=a("a"),j_r=o("TFAlbertForMaskedLM"),D_r=o(" (ALBERT model)"),G_r=l(),S7=a("li"),o2e=a("strong"),O_r=o("bert"),V_r=o(" \u2014 "),xQ=a("a"),X_r=o("TFBertForMaskedLM"),z_r=o(" (BERT model)"),W_r=l(),R7=a("li"),r2e=a("strong"),Q_r=o("camembert"),H_r=o(" \u2014 "),$Q=a("a"),U_r=o("TFCamembertForMaskedLM"),J_r=o(" (CamemBERT model)"),Y_r=l(),P7=a("li"),t2e=a("strong"),K_r=o("convbert"),Z_r=o(" \u2014 "),kQ=a("a"),e0r=o("TFConvBertForMaskedLM"),o0r=o(" (ConvBERT model)"),r0r=l(),B7=a("li"),a2e=a("strong"),t0r=o("deberta"),a0r=o(" \u2014 "),SQ=a("a"),n0r=o("TFDebertaForMaskedLM"),s0r=o(" (DeBERTa model)"),l0r=l(),I7=a("li"),n2e=a("strong"),i0r=o("deberta-v2"),d0r=o(" \u2014 "),RQ=a("a"),c0r=o("TFDebertaV2ForMaskedLM"),f0r=o(" (DeBERTa-v2 model)"),m0r=l(),q7=a("li"),s2e=a("strong"),g0r=o("distilbert"),h0r=o(" \u2014 "),PQ=a("a"),p0r=o("TFDistilBertForMaskedLM"),u0r=o(" (DistilBERT model)"),_0r=l(),N7=a("li"),l2e=a("strong"),b0r=o("electra"),v0r=o(" \u2014 "),BQ=a("a"),F0r=o("TFElectraForMaskedLM"),T0r=o(" (ELECTRA model)"),M0r=l(),j7=a("li"),i2e=a("strong"),E0r=o("flaubert"),C0r=o(" \u2014 "),IQ=a("a"),w0r=o("TFFlaubertWithLMHeadModel"),A0r=o(" (FlauBERT model)"),y0r=l(),D7=a("li"),d2e=a("strong"),L0r=o("funnel"),x0r=o(" \u2014 "),qQ=a("a"),$0r=o("TFFunnelForMaskedLM"),k0r=o(" (Funnel Transformer model)"),S0r=l(),G7=a("li"),c2e=a("strong"),R0r=o("layoutlm"),P0r=o(" \u2014 "),NQ=a("a"),B0r=o("TFLayoutLMForMaskedLM"),I0r=o(" (LayoutLM model)"),q0r=l(),O7=a("li"),f2e=a("strong"),N0r=o("longformer"),j0r=o(" \u2014 "),jQ=a("a"),D0r=o("TFLongformerForMaskedLM"),G0r=o(" (Longformer model)"),O0r=l(),V7=a("li"),m2e=a("strong"),V0r=o("mobilebert"),X0r=o(" \u2014 "),DQ=a("a"),z0r=o("TFMobileBertForMaskedLM"),W0r=o(" (MobileBERT model)"),Q0r=l(),X7=a("li"),g2e=a("strong"),H0r=o("mpnet"),U0r=o(" \u2014 "),GQ=a("a"),J0r=o("TFMPNetForMaskedLM"),Y0r=o(" (MPNet model)"),K0r=l(),z7=a("li"),h2e=a("strong"),Z0r=o("rembert"),e1r=o(" \u2014 "),OQ=a("a"),o1r=o("TFRemBertForMaskedLM"),r1r=o(" (RemBERT model)"),t1r=l(),W7=a("li"),p2e=a("strong"),a1r=o("roberta"),n1r=o(" \u2014 "),VQ=a("a"),s1r=o("TFRobertaForMaskedLM"),l1r=o(" (RoBERTa model)"),i1r=l(),Q7=a("li"),u2e=a("strong"),d1r=o("roformer"),c1r=o(" \u2014 "),XQ=a("a"),f1r=o("TFRoFormerForMaskedLM"),m1r=o(" (RoFormer model)"),g1r=l(),H7=a("li"),_2e=a("strong"),h1r=o("tapas"),p1r=o(" \u2014 "),zQ=a("a"),u1r=o("TFTapasForMaskedLM"),_1r=o(" (TAPAS model)"),b1r=l(),U7=a("li"),b2e=a("strong"),v1r=o("xlm"),F1r=o(" \u2014 "),WQ=a("a"),T1r=o("TFXLMWithLMHeadModel"),M1r=o(" (XLM model)"),E1r=l(),J7=a("li"),v2e=a("strong"),C1r=o("xlm-roberta"),w1r=o(" \u2014 "),QQ=a("a"),A1r=o("TFXLMRobertaForMaskedLM"),y1r=o(" (XLM-RoBERTa model)"),L1r=l(),F(Y7.$$.fragment),vNe=l(),rc=a("h2"),K7=a("a"),F2e=a("span"),F(T8.$$.fragment),x1r=l(),T2e=a("span"),$1r=o("TFAutoModelForSeq2SeqLM"),FNe=l(),rr=a("div"),F(M8.$$.fragment),k1r=l(),tc=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=a("a"),R1r=o("from_pretrained()"),P1r=o(" class method or the "),UQ=a("a"),B1r=o("from_config()"),I1r=o(` class
method.`),q1r=l(),E8=a("p"),N1r=o("This class cannot be instantiated directly using "),M2e=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),St=a("div"),F(C8.$$.fragment),O1r=l(),E2e=a("p"),V1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X1r=l(),ac=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),W1r=o("not"),Q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),H1r=o("from_pretrained()"),U1r=o(" to load the model weights."),J1r=l(),F(Z7.$$.fragment),Y1r=l(),$r=a("div"),F(w8.$$.fragment),K1r=l(),w2e=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ebr=l(),an=a("p"),obr=o("The model class to instantiate is selected based on the "),A2e=a("code"),rbr=o("model_type"),tbr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),abr=o("pretrained_model_name_or_path"),nbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),sbr=o("pretrained_model_name_or_path"),lbr=o(":"),ibr=l(),ye=a("ul"),eM=a("li"),x2e=a("strong"),dbr=o("bart"),cbr=o(" \u2014 "),YQ=a("a"),fbr=o("TFBartForConditionalGeneration"),mbr=o(" (BART model)"),gbr=l(),oM=a("li"),$2e=a("strong"),hbr=o("blenderbot"),pbr=o(" \u2014 "),KQ=a("a"),ubr=o("TFBlenderbotForConditionalGeneration"),_br=o(" (Blenderbot model)"),bbr=l(),rM=a("li"),k2e=a("strong"),vbr=o("blenderbot-small"),Fbr=o(" \u2014 "),ZQ=a("a"),Tbr=o("TFBlenderbotSmallForConditionalGeneration"),Mbr=o(" (BlenderbotSmall model)"),Ebr=l(),tM=a("li"),S2e=a("strong"),Cbr=o("encoder-decoder"),wbr=o(" \u2014 "),eH=a("a"),Abr=o("TFEncoderDecoderModel"),ybr=o(" (Encoder decoder model)"),Lbr=l(),aM=a("li"),R2e=a("strong"),xbr=o("led"),$br=o(" \u2014 "),oH=a("a"),kbr=o("TFLEDForConditionalGeneration"),Sbr=o(" (LED model)"),Rbr=l(),nM=a("li"),P2e=a("strong"),Pbr=o("marian"),Bbr=o(" \u2014 "),rH=a("a"),Ibr=o("TFMarianMTModel"),qbr=o(" (Marian model)"),Nbr=l(),sM=a("li"),B2e=a("strong"),jbr=o("mbart"),Dbr=o(" \u2014 "),tH=a("a"),Gbr=o("TFMBartForConditionalGeneration"),Obr=o(" (mBART model)"),Vbr=l(),lM=a("li"),I2e=a("strong"),Xbr=o("mt5"),zbr=o(" \u2014 "),aH=a("a"),Wbr=o("TFMT5ForConditionalGeneration"),Qbr=o(" (mT5 model)"),Hbr=l(),iM=a("li"),q2e=a("strong"),Ubr=o("pegasus"),Jbr=o(" \u2014 "),nH=a("a"),Ybr=o("TFPegasusForConditionalGeneration"),Kbr=o(" (Pegasus model)"),Zbr=l(),dM=a("li"),N2e=a("strong"),e2r=o("t5"),o2r=o(" \u2014 "),sH=a("a"),r2r=o("TFT5ForConditionalGeneration"),t2r=o(" (T5 model)"),a2r=l(),F(cM.$$.fragment),TNe=l(),nc=a("h2"),fM=a("a"),j2e=a("span"),F(A8.$$.fragment),n2r=l(),D2e=a("span"),s2r=o("TFAutoModelForSequenceClassification"),MNe=l(),tr=a("div"),F(y8.$$.fragment),l2r=l(),sc=a("p"),i2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lH=a("a"),d2r=o("from_pretrained()"),c2r=o(" class method or the "),iH=a("a"),f2r=o("from_config()"),m2r=o(` class
method.`),g2r=l(),L8=a("p"),h2r=o("This class cannot be instantiated directly using "),G2e=a("code"),p2r=o("__init__()"),u2r=o(" (throws an error)."),_2r=l(),Rt=a("div"),F(x8.$$.fragment),b2r=l(),O2e=a("p"),v2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F2r=l(),lc=a("p"),T2r=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),M2r=o("not"),E2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),C2r=o("from_pretrained()"),w2r=o(" to load the model weights."),A2r=l(),F(mM.$$.fragment),y2r=l(),kr=a("div"),F($8.$$.fragment),L2r=l(),X2e=a("p"),x2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$2r=l(),nn=a("p"),k2r=o("The model class to instantiate is selected based on the "),z2e=a("code"),S2r=o("model_type"),R2r=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),P2r=o("pretrained_model_name_or_path"),B2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),I2r=o("pretrained_model_name_or_path"),q2r=o(":"),N2r=l(),ee=a("ul"),gM=a("li"),H2e=a("strong"),j2r=o("albert"),D2r=o(" \u2014 "),cH=a("a"),G2r=o("TFAlbertForSequenceClassification"),O2r=o(" (ALBERT model)"),V2r=l(),hM=a("li"),U2e=a("strong"),X2r=o("bert"),z2r=o(" \u2014 "),fH=a("a"),W2r=o("TFBertForSequenceClassification"),Q2r=o(" (BERT model)"),H2r=l(),pM=a("li"),J2e=a("strong"),U2r=o("camembert"),J2r=o(" \u2014 "),mH=a("a"),Y2r=o("TFCamembertForSequenceClassification"),K2r=o(" (CamemBERT model)"),Z2r=l(),uM=a("li"),Y2e=a("strong"),evr=o("convbert"),ovr=o(" \u2014 "),gH=a("a"),rvr=o("TFConvBertForSequenceClassification"),tvr=o(" (ConvBERT model)"),avr=l(),_M=a("li"),K2e=a("strong"),nvr=o("ctrl"),svr=o(" \u2014 "),hH=a("a"),lvr=o("TFCTRLForSequenceClassification"),ivr=o(" (CTRL model)"),dvr=l(),bM=a("li"),Z2e=a("strong"),cvr=o("deberta"),fvr=o(" \u2014 "),pH=a("a"),mvr=o("TFDebertaForSequenceClassification"),gvr=o(" (DeBERTa model)"),hvr=l(),vM=a("li"),eve=a("strong"),pvr=o("deberta-v2"),uvr=o(" \u2014 "),uH=a("a"),_vr=o("TFDebertaV2ForSequenceClassification"),bvr=o(" (DeBERTa-v2 model)"),vvr=l(),FM=a("li"),ove=a("strong"),Fvr=o("distilbert"),Tvr=o(" \u2014 "),_H=a("a"),Mvr=o("TFDistilBertForSequenceClassification"),Evr=o(" (DistilBERT model)"),Cvr=l(),TM=a("li"),rve=a("strong"),wvr=o("electra"),Avr=o(" \u2014 "),bH=a("a"),yvr=o("TFElectraForSequenceClassification"),Lvr=o(" (ELECTRA model)"),xvr=l(),MM=a("li"),tve=a("strong"),$vr=o("flaubert"),kvr=o(" \u2014 "),vH=a("a"),Svr=o("TFFlaubertForSequenceClassification"),Rvr=o(" (FlauBERT model)"),Pvr=l(),EM=a("li"),ave=a("strong"),Bvr=o("funnel"),Ivr=o(" \u2014 "),FH=a("a"),qvr=o("TFFunnelForSequenceClassification"),Nvr=o(" (Funnel Transformer model)"),jvr=l(),CM=a("li"),nve=a("strong"),Dvr=o("gpt2"),Gvr=o(" \u2014 "),TH=a("a"),Ovr=o("TFGPT2ForSequenceClassification"),Vvr=o(" (OpenAI GPT-2 model)"),Xvr=l(),wM=a("li"),sve=a("strong"),zvr=o("gptj"),Wvr=o(" \u2014 "),MH=a("a"),Qvr=o("TFGPTJForSequenceClassification"),Hvr=o(" (GPT-J model)"),Uvr=l(),AM=a("li"),lve=a("strong"),Jvr=o("layoutlm"),Yvr=o(" \u2014 "),EH=a("a"),Kvr=o("TFLayoutLMForSequenceClassification"),Zvr=o(" (LayoutLM model)"),eFr=l(),yM=a("li"),ive=a("strong"),oFr=o("longformer"),rFr=o(" \u2014 "),CH=a("a"),tFr=o("TFLongformerForSequenceClassification"),aFr=o(" (Longformer model)"),nFr=l(),LM=a("li"),dve=a("strong"),sFr=o("mobilebert"),lFr=o(" \u2014 "),wH=a("a"),iFr=o("TFMobileBertForSequenceClassification"),dFr=o(" (MobileBERT model)"),cFr=l(),xM=a("li"),cve=a("strong"),fFr=o("mpnet"),mFr=o(" \u2014 "),AH=a("a"),gFr=o("TFMPNetForSequenceClassification"),hFr=o(" (MPNet model)"),pFr=l(),$M=a("li"),fve=a("strong"),uFr=o("openai-gpt"),_Fr=o(" \u2014 "),yH=a("a"),bFr=o("TFOpenAIGPTForSequenceClassification"),vFr=o(" (OpenAI GPT model)"),FFr=l(),kM=a("li"),mve=a("strong"),TFr=o("rembert"),MFr=o(" \u2014 "),LH=a("a"),EFr=o("TFRemBertForSequenceClassification"),CFr=o(" (RemBERT model)"),wFr=l(),SM=a("li"),gve=a("strong"),AFr=o("roberta"),yFr=o(" \u2014 "),xH=a("a"),LFr=o("TFRobertaForSequenceClassification"),xFr=o(" (RoBERTa model)"),$Fr=l(),RM=a("li"),hve=a("strong"),kFr=o("roformer"),SFr=o(" \u2014 "),$H=a("a"),RFr=o("TFRoFormerForSequenceClassification"),PFr=o(" (RoFormer model)"),BFr=l(),PM=a("li"),pve=a("strong"),IFr=o("tapas"),qFr=o(" \u2014 "),kH=a("a"),NFr=o("TFTapasForSequenceClassification"),jFr=o(" (TAPAS model)"),DFr=l(),BM=a("li"),uve=a("strong"),GFr=o("transfo-xl"),OFr=o(" \u2014 "),SH=a("a"),VFr=o("TFTransfoXLForSequenceClassification"),XFr=o(" (Transformer-XL model)"),zFr=l(),IM=a("li"),_ve=a("strong"),WFr=o("xlm"),QFr=o(" \u2014 "),RH=a("a"),HFr=o("TFXLMForSequenceClassification"),UFr=o(" (XLM model)"),JFr=l(),qM=a("li"),bve=a("strong"),YFr=o("xlm-roberta"),KFr=o(" \u2014 "),PH=a("a"),ZFr=o("TFXLMRobertaForSequenceClassification"),e6r=o(" (XLM-RoBERTa model)"),o6r=l(),NM=a("li"),vve=a("strong"),r6r=o("xlnet"),t6r=o(" \u2014 "),BH=a("a"),a6r=o("TFXLNetForSequenceClassification"),n6r=o(" (XLNet model)"),s6r=l(),F(jM.$$.fragment),ENe=l(),ic=a("h2"),DM=a("a"),Fve=a("span"),F(k8.$$.fragment),l6r=l(),Tve=a("span"),i6r=o("TFAutoModelForMultipleChoice"),CNe=l(),ar=a("div"),F(S8.$$.fragment),d6r=l(),dc=a("p"),c6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IH=a("a"),f6r=o("from_pretrained()"),m6r=o(" class method or the "),qH=a("a"),g6r=o("from_config()"),h6r=o(` class
method.`),p6r=l(),R8=a("p"),u6r=o("This class cannot be instantiated directly using "),Mve=a("code"),_6r=o("__init__()"),b6r=o(" (throws an error)."),v6r=l(),Pt=a("div"),F(P8.$$.fragment),F6r=l(),Eve=a("p"),T6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M6r=l(),cc=a("p"),E6r=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),C6r=o("not"),w6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),A6r=o("from_pretrained()"),y6r=o(" to load the model weights."),L6r=l(),F(GM.$$.fragment),x6r=l(),Sr=a("div"),F(B8.$$.fragment),$6r=l(),wve=a("p"),k6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S6r=l(),sn=a("p"),R6r=o("The model class to instantiate is selected based on the "),Ave=a("code"),P6r=o("model_type"),B6r=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),I6r=o("pretrained_model_name_or_path"),q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),N6r=o("pretrained_model_name_or_path"),j6r=o(":"),D6r=l(),pe=a("ul"),OM=a("li"),xve=a("strong"),G6r=o("albert"),O6r=o(" \u2014 "),jH=a("a"),V6r=o("TFAlbertForMultipleChoice"),X6r=o(" (ALBERT model)"),z6r=l(),VM=a("li"),$ve=a("strong"),W6r=o("bert"),Q6r=o(" \u2014 "),DH=a("a"),H6r=o("TFBertForMultipleChoice"),U6r=o(" (BERT model)"),J6r=l(),XM=a("li"),kve=a("strong"),Y6r=o("camembert"),K6r=o(" \u2014 "),GH=a("a"),Z6r=o("TFCamembertForMultipleChoice"),eTr=o(" (CamemBERT model)"),oTr=l(),zM=a("li"),Sve=a("strong"),rTr=o("convbert"),tTr=o(" \u2014 "),OH=a("a"),aTr=o("TFConvBertForMultipleChoice"),nTr=o(" (ConvBERT model)"),sTr=l(),WM=a("li"),Rve=a("strong"),lTr=o("distilbert"),iTr=o(" \u2014 "),VH=a("a"),dTr=o("TFDistilBertForMultipleChoice"),cTr=o(" (DistilBERT model)"),fTr=l(),QM=a("li"),Pve=a("strong"),mTr=o("electra"),gTr=o(" \u2014 "),XH=a("a"),hTr=o("TFElectraForMultipleChoice"),pTr=o(" (ELECTRA model)"),uTr=l(),HM=a("li"),Bve=a("strong"),_Tr=o("flaubert"),bTr=o(" \u2014 "),zH=a("a"),vTr=o("TFFlaubertForMultipleChoice"),FTr=o(" (FlauBERT model)"),TTr=l(),UM=a("li"),Ive=a("strong"),MTr=o("funnel"),ETr=o(" \u2014 "),WH=a("a"),CTr=o("TFFunnelForMultipleChoice"),wTr=o(" (Funnel Transformer model)"),ATr=l(),JM=a("li"),qve=a("strong"),yTr=o("longformer"),LTr=o(" \u2014 "),QH=a("a"),xTr=o("TFLongformerForMultipleChoice"),$Tr=o(" (Longformer model)"),kTr=l(),YM=a("li"),Nve=a("strong"),STr=o("mobilebert"),RTr=o(" \u2014 "),HH=a("a"),PTr=o("TFMobileBertForMultipleChoice"),BTr=o(" (MobileBERT model)"),ITr=l(),KM=a("li"),jve=a("strong"),qTr=o("mpnet"),NTr=o(" \u2014 "),UH=a("a"),jTr=o("TFMPNetForMultipleChoice"),DTr=o(" (MPNet model)"),GTr=l(),ZM=a("li"),Dve=a("strong"),OTr=o("rembert"),VTr=o(" \u2014 "),JH=a("a"),XTr=o("TFRemBertForMultipleChoice"),zTr=o(" (RemBERT model)"),WTr=l(),e4=a("li"),Gve=a("strong"),QTr=o("roberta"),HTr=o(" \u2014 "),YH=a("a"),UTr=o("TFRobertaForMultipleChoice"),JTr=o(" (RoBERTa model)"),YTr=l(),o4=a("li"),Ove=a("strong"),KTr=o("roformer"),ZTr=o(" \u2014 "),KH=a("a"),e7r=o("TFRoFormerForMultipleChoice"),o7r=o(" (RoFormer model)"),r7r=l(),r4=a("li"),Vve=a("strong"),t7r=o("xlm"),a7r=o(" \u2014 "),ZH=a("a"),n7r=o("TFXLMForMultipleChoice"),s7r=o(" (XLM model)"),l7r=l(),t4=a("li"),Xve=a("strong"),i7r=o("xlm-roberta"),d7r=o(" \u2014 "),eU=a("a"),c7r=o("TFXLMRobertaForMultipleChoice"),f7r=o(" (XLM-RoBERTa model)"),m7r=l(),a4=a("li"),zve=a("strong"),g7r=o("xlnet"),h7r=o(" \u2014 "),oU=a("a"),p7r=o("TFXLNetForMultipleChoice"),u7r=o(" (XLNet model)"),_7r=l(),F(n4.$$.fragment),wNe=l(),fc=a("h2"),s4=a("a"),Wve=a("span"),F(I8.$$.fragment),b7r=l(),Qve=a("span"),v7r=o("TFAutoModelForNextSentencePrediction"),ANe=l(),nr=a("div"),F(q8.$$.fragment),F7r=l(),mc=a("p"),T7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rU=a("a"),M7r=o("from_pretrained()"),E7r=o(" class method or the "),tU=a("a"),C7r=o("from_config()"),w7r=o(` class
method.`),A7r=l(),N8=a("p"),y7r=o("This class cannot be instantiated directly using "),Hve=a("code"),L7r=o("__init__()"),x7r=o(" (throws an error)."),$7r=l(),Bt=a("div"),F(j8.$$.fragment),k7r=l(),Uve=a("p"),S7r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),R7r=l(),gc=a("p"),P7r=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),B7r=o("not"),I7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),q7r=o("from_pretrained()"),N7r=o(" to load the model weights."),j7r=l(),F(l4.$$.fragment),D7r=l(),Rr=a("div"),F(D8.$$.fragment),G7r=l(),Yve=a("p"),O7r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),V7r=l(),ln=a("p"),X7r=o("The model class to instantiate is selected based on the "),Kve=a("code"),z7r=o("model_type"),W7r=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),Q7r=o("pretrained_model_name_or_path"),H7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),U7r=o("pretrained_model_name_or_path"),J7r=o(":"),Y7r=l(),G8=a("ul"),i4=a("li"),oFe=a("strong"),K7r=o("bert"),Z7r=o(" \u2014 "),nU=a("a"),eMr=o("TFBertForNextSentencePrediction"),oMr=o(" (BERT model)"),rMr=l(),d4=a("li"),rFe=a("strong"),tMr=o("mobilebert"),aMr=o(" \u2014 "),sU=a("a"),nMr=o("TFMobileBertForNextSentencePrediction"),sMr=o(" (MobileBERT model)"),lMr=l(),F(c4.$$.fragment),yNe=l(),hc=a("h2"),f4=a("a"),tFe=a("span"),F(O8.$$.fragment),iMr=l(),aFe=a("span"),dMr=o("TFAutoModelForTableQuestionAnswering"),LNe=l(),sr=a("div"),F(V8.$$.fragment),cMr=l(),pc=a("p"),fMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lU=a("a"),mMr=o("from_pretrained()"),gMr=o(" class method or the "),iU=a("a"),hMr=o("from_config()"),pMr=o(` class
method.`),uMr=l(),X8=a("p"),_Mr=o("This class cannot be instantiated directly using "),nFe=a("code"),bMr=o("__init__()"),vMr=o(" (throws an error)."),FMr=l(),It=a("div"),F(z8.$$.fragment),TMr=l(),sFe=a("p"),MMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EMr=l(),uc=a("p"),CMr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),wMr=o("not"),AMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),yMr=o("from_pretrained()"),LMr=o(" to load the model weights."),xMr=l(),F(m4.$$.fragment),$Mr=l(),Pr=a("div"),F(W8.$$.fragment),kMr=l(),iFe=a("p"),SMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RMr=l(),dn=a("p"),PMr=o("The model class to instantiate is selected based on the "),dFe=a("code"),BMr=o("model_type"),IMr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),qMr=o("pretrained_model_name_or_path"),NMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),jMr=o("pretrained_model_name_or_path"),DMr=o(":"),GMr=l(),mFe=a("ul"),g4=a("li"),gFe=a("strong"),OMr=o("tapas"),VMr=o(" \u2014 "),cU=a("a"),XMr=o("TFTapasForQuestionAnswering"),zMr=o(" (TAPAS model)"),WMr=l(),F(h4.$$.fragment),xNe=l(),_c=a("h2"),p4=a("a"),hFe=a("span"),F(Q8.$$.fragment),QMr=l(),pFe=a("span"),HMr=o("TFAutoModelForTokenClassification"),$Ne=l(),lr=a("div"),F(H8.$$.fragment),UMr=l(),bc=a("p"),JMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fU=a("a"),YMr=o("from_pretrained()"),KMr=o(" class method or the "),mU=a("a"),ZMr=o("from_config()"),e4r=o(` class
method.`),o4r=l(),U8=a("p"),r4r=o("This class cannot be instantiated directly using "),uFe=a("code"),t4r=o("__init__()"),a4r=o(" (throws an error)."),n4r=l(),qt=a("div"),F(J8.$$.fragment),s4r=l(),_Fe=a("p"),l4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),i4r=l(),vc=a("p"),d4r=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),c4r=o("not"),f4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),m4r=o("from_pretrained()"),g4r=o(" to load the model weights."),h4r=l(),F(u4.$$.fragment),p4r=l(),Br=a("div"),F(Y8.$$.fragment),u4r=l(),vFe=a("p"),_4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b4r=l(),cn=a("p"),v4r=o("The model class to instantiate is selected based on the "),FFe=a("code"),F4r=o("model_type"),T4r=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),C4r=o("pretrained_model_name_or_path"),w4r=o(":"),A4r=l(),de=a("ul"),_4=a("li"),EFe=a("strong"),y4r=o("albert"),L4r=o(" \u2014 "),hU=a("a"),x4r=o("TFAlbertForTokenClassification"),$4r=o(" (ALBERT model)"),k4r=l(),b4=a("li"),CFe=a("strong"),S4r=o("bert"),R4r=o(" \u2014 "),pU=a("a"),P4r=o("TFBertForTokenClassification"),B4r=o(" (BERT model)"),I4r=l(),v4=a("li"),wFe=a("strong"),q4r=o("camembert"),N4r=o(" \u2014 "),uU=a("a"),j4r=o("TFCamembertForTokenClassification"),D4r=o(" (CamemBERT model)"),G4r=l(),F4=a("li"),AFe=a("strong"),O4r=o("convbert"),V4r=o(" \u2014 "),_U=a("a"),X4r=o("TFConvBertForTokenClassification"),z4r=o(" (ConvBERT model)"),W4r=l(),T4=a("li"),yFe=a("strong"),Q4r=o("deberta"),H4r=o(" \u2014 "),bU=a("a"),U4r=o("TFDebertaForTokenClassification"),J4r=o(" (DeBERTa model)"),Y4r=l(),M4=a("li"),LFe=a("strong"),K4r=o("deberta-v2"),Z4r=o(" \u2014 "),vU=a("a"),eEr=o("TFDebertaV2ForTokenClassification"),oEr=o(" (DeBERTa-v2 model)"),rEr=l(),E4=a("li"),xFe=a("strong"),tEr=o("distilbert"),aEr=o(" \u2014 "),FU=a("a"),nEr=o("TFDistilBertForTokenClassification"),sEr=o(" (DistilBERT model)"),lEr=l(),C4=a("li"),$Fe=a("strong"),iEr=o("electra"),dEr=o(" \u2014 "),TU=a("a"),cEr=o("TFElectraForTokenClassification"),fEr=o(" (ELECTRA model)"),mEr=l(),w4=a("li"),kFe=a("strong"),gEr=o("flaubert"),hEr=o(" \u2014 "),MU=a("a"),pEr=o("TFFlaubertForTokenClassification"),uEr=o(" (FlauBERT model)"),_Er=l(),A4=a("li"),SFe=a("strong"),bEr=o("funnel"),vEr=o(" \u2014 "),EU=a("a"),FEr=o("TFFunnelForTokenClassification"),TEr=o(" (Funnel Transformer model)"),MEr=l(),y4=a("li"),RFe=a("strong"),EEr=o("layoutlm"),CEr=o(" \u2014 "),CU=a("a"),wEr=o("TFLayoutLMForTokenClassification"),AEr=o(" (LayoutLM model)"),yEr=l(),L4=a("li"),PFe=a("strong"),LEr=o("longformer"),xEr=o(" \u2014 "),wU=a("a"),$Er=o("TFLongformerForTokenClassification"),kEr=o(" (Longformer model)"),SEr=l(),x4=a("li"),BFe=a("strong"),REr=o("mobilebert"),PEr=o(" \u2014 "),AU=a("a"),BEr=o("TFMobileBertForTokenClassification"),IEr=o(" (MobileBERT model)"),qEr=l(),$4=a("li"),IFe=a("strong"),NEr=o("mpnet"),jEr=o(" \u2014 "),yU=a("a"),DEr=o("TFMPNetForTokenClassification"),GEr=o(" (MPNet model)"),OEr=l(),k4=a("li"),qFe=a("strong"),VEr=o("rembert"),XEr=o(" \u2014 "),LU=a("a"),zEr=o("TFRemBertForTokenClassification"),WEr=o(" (RemBERT model)"),QEr=l(),S4=a("li"),NFe=a("strong"),HEr=o("roberta"),UEr=o(" \u2014 "),xU=a("a"),JEr=o("TFRobertaForTokenClassification"),YEr=o(" (RoBERTa model)"),KEr=l(),R4=a("li"),jFe=a("strong"),ZEr=o("roformer"),eCr=o(" \u2014 "),$U=a("a"),oCr=o("TFRoFormerForTokenClassification"),rCr=o(" (RoFormer model)"),tCr=l(),P4=a("li"),DFe=a("strong"),aCr=o("xlm"),nCr=o(" \u2014 "),kU=a("a"),sCr=o("TFXLMForTokenClassification"),lCr=o(" (XLM model)"),iCr=l(),B4=a("li"),GFe=a("strong"),dCr=o("xlm-roberta"),cCr=o(" \u2014 "),SU=a("a"),fCr=o("TFXLMRobertaForTokenClassification"),mCr=o(" (XLM-RoBERTa model)"),gCr=l(),I4=a("li"),OFe=a("strong"),hCr=o("xlnet"),pCr=o(" \u2014 "),RU=a("a"),uCr=o("TFXLNetForTokenClassification"),_Cr=o(" (XLNet model)"),bCr=l(),F(q4.$$.fragment),kNe=l(),Fc=a("h2"),N4=a("a"),VFe=a("span"),F(K8.$$.fragment),vCr=l(),XFe=a("span"),FCr=o("TFAutoModelForQuestionAnswering"),SNe=l(),ir=a("div"),F(Z8.$$.fragment),TCr=l(),Tc=a("p"),MCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PU=a("a"),ECr=o("from_pretrained()"),CCr=o(" class method or the "),BU=a("a"),wCr=o("from_config()"),ACr=o(` class
method.`),yCr=l(),e9=a("p"),LCr=o("This class cannot be instantiated directly using "),zFe=a("code"),xCr=o("__init__()"),$Cr=o(" (throws an error)."),kCr=l(),Nt=a("div"),F(o9.$$.fragment),SCr=l(),WFe=a("p"),RCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PCr=l(),Mc=a("p"),BCr=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),ICr=o("not"),qCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),NCr=o("from_pretrained()"),jCr=o(" to load the model weights."),DCr=l(),F(j4.$$.fragment),GCr=l(),Ir=a("div"),F(r9.$$.fragment),OCr=l(),HFe=a("p"),VCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XCr=l(),fn=a("p"),zCr=o("The model class to instantiate is selected based on the "),UFe=a("code"),WCr=o("model_type"),QCr=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),HCr=o("pretrained_model_name_or_path"),UCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),JCr=o("pretrained_model_name_or_path"),YCr=o(":"),KCr=l(),ce=a("ul"),D4=a("li"),KFe=a("strong"),ZCr=o("albert"),e5r=o(" \u2014 "),qU=a("a"),o5r=o("TFAlbertForQuestionAnswering"),r5r=o(" (ALBERT model)"),t5r=l(),G4=a("li"),ZFe=a("strong"),a5r=o("bert"),n5r=o(" \u2014 "),NU=a("a"),s5r=o("TFBertForQuestionAnswering"),l5r=o(" (BERT model)"),i5r=l(),O4=a("li"),e6e=a("strong"),d5r=o("camembert"),c5r=o(" \u2014 "),jU=a("a"),f5r=o("TFCamembertForQuestionAnswering"),m5r=o(" (CamemBERT model)"),g5r=l(),V4=a("li"),o6e=a("strong"),h5r=o("convbert"),p5r=o(" \u2014 "),DU=a("a"),u5r=o("TFConvBertForQuestionAnswering"),_5r=o(" (ConvBERT model)"),b5r=l(),X4=a("li"),r6e=a("strong"),v5r=o("deberta"),F5r=o(" \u2014 "),GU=a("a"),T5r=o("TFDebertaForQuestionAnswering"),M5r=o(" (DeBERTa model)"),E5r=l(),z4=a("li"),t6e=a("strong"),C5r=o("deberta-v2"),w5r=o(" \u2014 "),OU=a("a"),A5r=o("TFDebertaV2ForQuestionAnswering"),y5r=o(" (DeBERTa-v2 model)"),L5r=l(),W4=a("li"),a6e=a("strong"),x5r=o("distilbert"),$5r=o(" \u2014 "),VU=a("a"),k5r=o("TFDistilBertForQuestionAnswering"),S5r=o(" (DistilBERT model)"),R5r=l(),Q4=a("li"),n6e=a("strong"),P5r=o("electra"),B5r=o(" \u2014 "),XU=a("a"),I5r=o("TFElectraForQuestionAnswering"),q5r=o(" (ELECTRA model)"),N5r=l(),H4=a("li"),s6e=a("strong"),j5r=o("flaubert"),D5r=o(" \u2014 "),zU=a("a"),G5r=o("TFFlaubertForQuestionAnsweringSimple"),O5r=o(" (FlauBERT model)"),V5r=l(),U4=a("li"),l6e=a("strong"),X5r=o("funnel"),z5r=o(" \u2014 "),WU=a("a"),W5r=o("TFFunnelForQuestionAnswering"),Q5r=o(" (Funnel Transformer model)"),H5r=l(),J4=a("li"),i6e=a("strong"),U5r=o("gptj"),J5r=o(" \u2014 "),QU=a("a"),Y5r=o("TFGPTJForQuestionAnswering"),K5r=o(" (GPT-J model)"),Z5r=l(),Y4=a("li"),d6e=a("strong"),e3r=o("longformer"),o3r=o(" \u2014 "),HU=a("a"),r3r=o("TFLongformerForQuestionAnswering"),t3r=o(" (Longformer model)"),a3r=l(),K4=a("li"),c6e=a("strong"),n3r=o("mobilebert"),s3r=o(" \u2014 "),UU=a("a"),l3r=o("TFMobileBertForQuestionAnswering"),i3r=o(" (MobileBERT model)"),d3r=l(),Z4=a("li"),f6e=a("strong"),c3r=o("mpnet"),f3r=o(" \u2014 "),JU=a("a"),m3r=o("TFMPNetForQuestionAnswering"),g3r=o(" (MPNet model)"),h3r=l(),eE=a("li"),m6e=a("strong"),p3r=o("rembert"),u3r=o(" \u2014 "),YU=a("a"),_3r=o("TFRemBertForQuestionAnswering"),b3r=o(" (RemBERT model)"),v3r=l(),oE=a("li"),g6e=a("strong"),F3r=o("roberta"),T3r=o(" \u2014 "),KU=a("a"),M3r=o("TFRobertaForQuestionAnswering"),E3r=o(" (RoBERTa model)"),C3r=l(),rE=a("li"),h6e=a("strong"),w3r=o("roformer"),A3r=o(" \u2014 "),ZU=a("a"),y3r=o("TFRoFormerForQuestionAnswering"),L3r=o(" (RoFormer model)"),x3r=l(),tE=a("li"),p6e=a("strong"),$3r=o("xlm"),k3r=o(" \u2014 "),eJ=a("a"),S3r=o("TFXLMForQuestionAnsweringSimple"),R3r=o(" (XLM model)"),P3r=l(),aE=a("li"),u6e=a("strong"),B3r=o("xlm-roberta"),I3r=o(" \u2014 "),oJ=a("a"),q3r=o("TFXLMRobertaForQuestionAnswering"),N3r=o(" (XLM-RoBERTa model)"),j3r=l(),nE=a("li"),_6e=a("strong"),D3r=o("xlnet"),G3r=o(" \u2014 "),rJ=a("a"),O3r=o("TFXLNetForQuestionAnsweringSimple"),V3r=o(" (XLNet model)"),X3r=l(),F(sE.$$.fragment),RNe=l(),Ec=a("h2"),lE=a("a"),b6e=a("span"),F(t9.$$.fragment),z3r=l(),v6e=a("span"),W3r=o("TFAutoModelForVision2Seq"),PNe=l(),dr=a("div"),F(a9.$$.fragment),Q3r=l(),Cc=a("p"),H3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tJ=a("a"),U3r=o("from_pretrained()"),J3r=o(" class method or the "),aJ=a("a"),Y3r=o("from_config()"),K3r=o(` class
method.`),Z3r=l(),n9=a("p"),ewr=o("This class cannot be instantiated directly using "),F6e=a("code"),owr=o("__init__()"),rwr=o(" (throws an error)."),twr=l(),jt=a("div"),F(s9.$$.fragment),awr=l(),T6e=a("p"),nwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),swr=l(),wc=a("p"),lwr=o(`Note:
Loading a model from its configuration file does `),M6e=a("strong"),iwr=o("not"),dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),cwr=o("from_pretrained()"),fwr=o(" to load the model weights."),mwr=l(),F(iE.$$.fragment),gwr=l(),qr=a("div"),F(l9.$$.fragment),hwr=l(),E6e=a("p"),pwr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uwr=l(),mn=a("p"),_wr=o("The model class to instantiate is selected based on the "),C6e=a("code"),bwr=o("model_type"),vwr=o(` property of the config object (either
passed as an argument or loaded from `),w6e=a("code"),Fwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),Cwr=l(),y6e=a("ul"),dE=a("li"),L6e=a("strong"),wwr=o("vision-encoder-decoder"),Awr=o(" \u2014 "),sJ=a("a"),ywr=o("TFVisionEncoderDecoderModel"),Lwr=o(" (Vision Encoder decoder model)"),xwr=l(),F(cE.$$.fragment),BNe=l(),Ac=a("h2"),fE=a("a"),x6e=a("span"),F(i9.$$.fragment),$wr=l(),$6e=a("span"),kwr=o("TFAutoModelForSpeechSeq2Seq"),INe=l(),cr=a("div"),F(d9.$$.fragment),Swr=l(),yc=a("p"),Rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lJ=a("a"),Pwr=o("from_pretrained()"),Bwr=o(" class method or the "),iJ=a("a"),Iwr=o("from_config()"),qwr=o(` class
method.`),Nwr=l(),c9=a("p"),jwr=o("This class cannot be instantiated directly using "),k6e=a("code"),Dwr=o("__init__()"),Gwr=o(" (throws an error)."),Owr=l(),Dt=a("div"),F(f9.$$.fragment),Vwr=l(),S6e=a("p"),Xwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zwr=l(),Lc=a("p"),Wwr=o(`Note:
Loading a model from its configuration file does `),R6e=a("strong"),Qwr=o("not"),Hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),Uwr=o("from_pretrained()"),Jwr=o(" to load the model weights."),Ywr=l(),F(mE.$$.fragment),Kwr=l(),Nr=a("div"),F(m9.$$.fragment),Zwr=l(),P6e=a("p"),eAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oAr=l(),gn=a("p"),rAr=o("The model class to instantiate is selected based on the "),B6e=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),I6e=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q6e=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),N6e=a("ul"),gE=a("li"),j6e=a("strong"),cAr=o("speech_to_text"),fAr=o(" \u2014 "),cJ=a("a"),mAr=o("TFSpeech2TextForConditionalGeneration"),gAr=o(" (Speech2Text model)"),hAr=l(),F(hE.$$.fragment),qNe=l(),xc=a("h2"),pE=a("a"),D6e=a("span"),F(g9.$$.fragment),pAr=l(),G6e=a("span"),uAr=o("FlaxAutoModel"),NNe=l(),fr=a("div"),F(h9.$$.fragment),_Ar=l(),$c=a("p"),bAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fJ=a("a"),vAr=o("from_pretrained()"),FAr=o(" class method or the "),mJ=a("a"),TAr=o("from_config()"),MAr=o(` class
method.`),EAr=l(),p9=a("p"),CAr=o("This class cannot be instantiated directly using "),O6e=a("code"),wAr=o("__init__()"),AAr=o(" (throws an error)."),yAr=l(),Gt=a("div"),F(u9.$$.fragment),LAr=l(),V6e=a("p"),xAr=o("Instantiates one of the base model classes of the library from a configuration."),$Ar=l(),kc=a("p"),kAr=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),SAr=o("not"),RAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),PAr=o("from_pretrained()"),BAr=o(" to load the model weights."),IAr=l(),F(uE.$$.fragment),qAr=l(),jr=a("div"),F(_9.$$.fragment),NAr=l(),z6e=a("p"),jAr=o("Instantiate one of the base model classes of the library from a pretrained model."),DAr=l(),hn=a("p"),GAr=o("The model class to instantiate is selected based on the "),W6e=a("code"),OAr=o("model_type"),VAr=o(` property of the config object (either
passed as an argument or loaded from `),Q6e=a("code"),XAr=o("pretrained_model_name_or_path"),zAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),WAr=o("pretrained_model_name_or_path"),QAr=o(":"),HAr=l(),te=a("ul"),_E=a("li"),U6e=a("strong"),UAr=o("albert"),JAr=o(" \u2014 "),hJ=a("a"),YAr=o("FlaxAlbertModel"),KAr=o(" (ALBERT model)"),ZAr=l(),bE=a("li"),J6e=a("strong"),eyr=o("bart"),oyr=o(" \u2014 "),pJ=a("a"),ryr=o("FlaxBartModel"),tyr=o(" (BART model)"),ayr=l(),vE=a("li"),Y6e=a("strong"),nyr=o("beit"),syr=o(" \u2014 "),uJ=a("a"),lyr=o("FlaxBeitModel"),iyr=o(" (BEiT model)"),dyr=l(),FE=a("li"),K6e=a("strong"),cyr=o("bert"),fyr=o(" \u2014 "),_J=a("a"),myr=o("FlaxBertModel"),gyr=o(" (BERT model)"),hyr=l(),TE=a("li"),Z6e=a("strong"),pyr=o("big_bird"),uyr=o(" \u2014 "),bJ=a("a"),_yr=o("FlaxBigBirdModel"),byr=o(" (BigBird model)"),vyr=l(),ME=a("li"),eTe=a("strong"),Fyr=o("blenderbot"),Tyr=o(" \u2014 "),vJ=a("a"),Myr=o("FlaxBlenderbotModel"),Eyr=o(" (Blenderbot model)"),Cyr=l(),EE=a("li"),oTe=a("strong"),wyr=o("blenderbot-small"),Ayr=o(" \u2014 "),FJ=a("a"),yyr=o("FlaxBlenderbotSmallModel"),Lyr=o(" (BlenderbotSmall model)"),xyr=l(),CE=a("li"),rTe=a("strong"),$yr=o("clip"),kyr=o(" \u2014 "),TJ=a("a"),Syr=o("FlaxCLIPModel"),Ryr=o(" (CLIP model)"),Pyr=l(),wE=a("li"),tTe=a("strong"),Byr=o("distilbert"),Iyr=o(" \u2014 "),MJ=a("a"),qyr=o("FlaxDistilBertModel"),Nyr=o(" (DistilBERT model)"),jyr=l(),AE=a("li"),aTe=a("strong"),Dyr=o("electra"),Gyr=o(" \u2014 "),EJ=a("a"),Oyr=o("FlaxElectraModel"),Vyr=o(" (ELECTRA model)"),Xyr=l(),yE=a("li"),nTe=a("strong"),zyr=o("gpt2"),Wyr=o(" \u2014 "),CJ=a("a"),Qyr=o("FlaxGPT2Model"),Hyr=o(" (OpenAI GPT-2 model)"),Uyr=l(),LE=a("li"),sTe=a("strong"),Jyr=o("gpt_neo"),Yyr=o(" \u2014 "),wJ=a("a"),Kyr=o("FlaxGPTNeoModel"),Zyr=o(" (GPT Neo model)"),eLr=l(),xE=a("li"),lTe=a("strong"),oLr=o("gptj"),rLr=o(" \u2014 "),AJ=a("a"),tLr=o("FlaxGPTJModel"),aLr=o(" (GPT-J model)"),nLr=l(),$E=a("li"),iTe=a("strong"),sLr=o("marian"),lLr=o(" \u2014 "),yJ=a("a"),iLr=o("FlaxMarianModel"),dLr=o(" (Marian model)"),cLr=l(),kE=a("li"),dTe=a("strong"),fLr=o("mbart"),mLr=o(" \u2014 "),LJ=a("a"),gLr=o("FlaxMBartModel"),hLr=o(" (mBART model)"),pLr=l(),SE=a("li"),cTe=a("strong"),uLr=o("mt5"),_Lr=o(" \u2014 "),xJ=a("a"),bLr=o("FlaxMT5Model"),vLr=o(" (mT5 model)"),FLr=l(),RE=a("li"),fTe=a("strong"),TLr=o("pegasus"),MLr=o(" \u2014 "),$J=a("a"),ELr=o("FlaxPegasusModel"),CLr=o(" (Pegasus model)"),wLr=l(),PE=a("li"),mTe=a("strong"),ALr=o("roberta"),yLr=o(" \u2014 "),kJ=a("a"),LLr=o("FlaxRobertaModel"),xLr=o(" (RoBERTa model)"),$Lr=l(),BE=a("li"),gTe=a("strong"),kLr=o("roformer"),SLr=o(" \u2014 "),SJ=a("a"),RLr=o("FlaxRoFormerModel"),PLr=o(" (RoFormer model)"),BLr=l(),IE=a("li"),hTe=a("strong"),ILr=o("t5"),qLr=o(" \u2014 "),RJ=a("a"),NLr=o("FlaxT5Model"),jLr=o(" (T5 model)"),DLr=l(),qE=a("li"),pTe=a("strong"),GLr=o("vision-text-dual-encoder"),OLr=o(" \u2014 "),PJ=a("a"),VLr=o("FlaxVisionTextDualEncoderModel"),XLr=o(" (VisionTextDualEncoder model)"),zLr=l(),NE=a("li"),uTe=a("strong"),WLr=o("vit"),QLr=o(" \u2014 "),BJ=a("a"),HLr=o("FlaxViTModel"),ULr=o(" (ViT model)"),JLr=l(),jE=a("li"),_Te=a("strong"),YLr=o("wav2vec2"),KLr=o(" \u2014 "),IJ=a("a"),ZLr=o("FlaxWav2Vec2Model"),e8r=o(" (Wav2Vec2 model)"),o8r=l(),DE=a("li"),bTe=a("strong"),r8r=o("xglm"),t8r=o(" \u2014 "),qJ=a("a"),a8r=o("FlaxXGLMModel"),n8r=o(" (XGLM model)"),s8r=l(),GE=a("li"),vTe=a("strong"),l8r=o("xlm-roberta"),i8r=o(" \u2014 "),NJ=a("a"),d8r=o("FlaxXLMRobertaModel"),c8r=o(" (XLM-RoBERTa model)"),f8r=l(),F(OE.$$.fragment),jNe=l(),Sc=a("h2"),VE=a("a"),FTe=a("span"),F(b9.$$.fragment),m8r=l(),TTe=a("span"),g8r=o("FlaxAutoModelForCausalLM"),DNe=l(),mr=a("div"),F(v9.$$.fragment),h8r=l(),Rc=a("p"),p8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jJ=a("a"),u8r=o("from_pretrained()"),_8r=o(" class method or the "),DJ=a("a"),b8r=o("from_config()"),v8r=o(` class
method.`),F8r=l(),F9=a("p"),T8r=o("This class cannot be instantiated directly using "),MTe=a("code"),M8r=o("__init__()"),E8r=o(" (throws an error)."),C8r=l(),Ot=a("div"),F(T9.$$.fragment),w8r=l(),ETe=a("p"),A8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y8r=l(),Pc=a("p"),L8r=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),x8r=o("not"),$8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),k8r=o("from_pretrained()"),S8r=o(" to load the model weights."),R8r=l(),F(XE.$$.fragment),P8r=l(),Dr=a("div"),F(M9.$$.fragment),B8r=l(),wTe=a("p"),I8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q8r=l(),pn=a("p"),N8r=o("The model class to instantiate is selected based on the "),ATe=a("code"),j8r=o("model_type"),D8r=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),G8r=o("pretrained_model_name_or_path"),O8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),V8r=o("pretrained_model_name_or_path"),X8r=o(":"),z8r=l(),Re=a("ul"),zE=a("li"),xTe=a("strong"),W8r=o("bart"),Q8r=o(" \u2014 "),OJ=a("a"),H8r=o("FlaxBartForCausalLM"),U8r=o(" (BART model)"),J8r=l(),WE=a("li"),$Te=a("strong"),Y8r=o("bert"),K8r=o(" \u2014 "),VJ=a("a"),Z8r=o("FlaxBertForCausalLM"),e9r=o(" (BERT model)"),o9r=l(),QE=a("li"),kTe=a("strong"),r9r=o("big_bird"),t9r=o(" \u2014 "),XJ=a("a"),a9r=o("FlaxBigBirdForCausalLM"),n9r=o(" (BigBird model)"),s9r=l(),HE=a("li"),STe=a("strong"),l9r=o("electra"),i9r=o(" \u2014 "),zJ=a("a"),d9r=o("FlaxElectraForCausalLM"),c9r=o(" (ELECTRA model)"),f9r=l(),UE=a("li"),RTe=a("strong"),m9r=o("gpt2"),g9r=o(" \u2014 "),WJ=a("a"),h9r=o("FlaxGPT2LMHeadModel"),p9r=o(" (OpenAI GPT-2 model)"),u9r=l(),JE=a("li"),PTe=a("strong"),_9r=o("gpt_neo"),b9r=o(" \u2014 "),QJ=a("a"),v9r=o("FlaxGPTNeoForCausalLM"),F9r=o(" (GPT Neo model)"),T9r=l(),YE=a("li"),BTe=a("strong"),M9r=o("gptj"),E9r=o(" \u2014 "),HJ=a("a"),C9r=o("FlaxGPTJForCausalLM"),w9r=o(" (GPT-J model)"),A9r=l(),KE=a("li"),ITe=a("strong"),y9r=o("roberta"),L9r=o(" \u2014 "),UJ=a("a"),x9r=o("FlaxRobertaForCausalLM"),$9r=o(" (RoBERTa model)"),k9r=l(),ZE=a("li"),qTe=a("strong"),S9r=o("xglm"),R9r=o(" \u2014 "),JJ=a("a"),P9r=o("FlaxXGLMForCausalLM"),B9r=o(" (XGLM model)"),I9r=l(),F(eC.$$.fragment),GNe=l(),Bc=a("h2"),oC=a("a"),NTe=a("span"),F(E9.$$.fragment),q9r=l(),jTe=a("span"),N9r=o("FlaxAutoModelForPreTraining"),ONe=l(),gr=a("div"),F(C9.$$.fragment),j9r=l(),Ic=a("p"),D9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YJ=a("a"),G9r=o("from_pretrained()"),O9r=o(" class method or the "),KJ=a("a"),V9r=o("from_config()"),X9r=o(` class
method.`),z9r=l(),w9=a("p"),W9r=o("This class cannot be instantiated directly using "),DTe=a("code"),Q9r=o("__init__()"),H9r=o(" (throws an error)."),U9r=l(),Vt=a("div"),F(A9.$$.fragment),J9r=l(),GTe=a("p"),Y9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K9r=l(),qc=a("p"),Z9r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),exr=o("not"),oxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),rxr=o("from_pretrained()"),txr=o(" to load the model weights."),axr=l(),F(rC.$$.fragment),nxr=l(),Gr=a("div"),F(y9.$$.fragment),sxr=l(),VTe=a("p"),lxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ixr=l(),un=a("p"),dxr=o("The model class to instantiate is selected based on the "),XTe=a("code"),cxr=o("model_type"),fxr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),hxr=o("pretrained_model_name_or_path"),pxr=o(":"),uxr=l(),Me=a("ul"),tC=a("li"),QTe=a("strong"),_xr=o("albert"),bxr=o(" \u2014 "),eY=a("a"),vxr=o("FlaxAlbertForPreTraining"),Fxr=o(" (ALBERT model)"),Txr=l(),aC=a("li"),HTe=a("strong"),Mxr=o("bart"),Exr=o(" \u2014 "),oY=a("a"),Cxr=o("FlaxBartForConditionalGeneration"),wxr=o(" (BART model)"),Axr=l(),nC=a("li"),UTe=a("strong"),yxr=o("bert"),Lxr=o(" \u2014 "),rY=a("a"),xxr=o("FlaxBertForPreTraining"),$xr=o(" (BERT model)"),kxr=l(),sC=a("li"),JTe=a("strong"),Sxr=o("big_bird"),Rxr=o(" \u2014 "),tY=a("a"),Pxr=o("FlaxBigBirdForPreTraining"),Bxr=o(" (BigBird model)"),Ixr=l(),lC=a("li"),YTe=a("strong"),qxr=o("electra"),Nxr=o(" \u2014 "),aY=a("a"),jxr=o("FlaxElectraForPreTraining"),Dxr=o(" (ELECTRA model)"),Gxr=l(),iC=a("li"),KTe=a("strong"),Oxr=o("mbart"),Vxr=o(" \u2014 "),nY=a("a"),Xxr=o("FlaxMBartForConditionalGeneration"),zxr=o(" (mBART model)"),Wxr=l(),dC=a("li"),ZTe=a("strong"),Qxr=o("mt5"),Hxr=o(" \u2014 "),sY=a("a"),Uxr=o("FlaxMT5ForConditionalGeneration"),Jxr=o(" (mT5 model)"),Yxr=l(),cC=a("li"),e7e=a("strong"),Kxr=o("roberta"),Zxr=o(" \u2014 "),lY=a("a"),e$r=o("FlaxRobertaForMaskedLM"),o$r=o(" (RoBERTa model)"),r$r=l(),fC=a("li"),o7e=a("strong"),t$r=o("roformer"),a$r=o(" \u2014 "),iY=a("a"),n$r=o("FlaxRoFormerForMaskedLM"),s$r=o(" (RoFormer model)"),l$r=l(),mC=a("li"),r7e=a("strong"),i$r=o("t5"),d$r=o(" \u2014 "),dY=a("a"),c$r=o("FlaxT5ForConditionalGeneration"),f$r=o(" (T5 model)"),m$r=l(),gC=a("li"),t7e=a("strong"),g$r=o("wav2vec2"),h$r=o(" \u2014 "),cY=a("a"),p$r=o("FlaxWav2Vec2ForPreTraining"),u$r=o(" (Wav2Vec2 model)"),_$r=l(),hC=a("li"),a7e=a("strong"),b$r=o("xlm-roberta"),v$r=o(" \u2014 "),fY=a("a"),F$r=o("FlaxXLMRobertaForMaskedLM"),T$r=o(" (XLM-RoBERTa model)"),M$r=l(),F(pC.$$.fragment),VNe=l(),Nc=a("h2"),uC=a("a"),n7e=a("span"),F(L9.$$.fragment),E$r=l(),s7e=a("span"),C$r=o("FlaxAutoModelForMaskedLM"),XNe=l(),hr=a("div"),F(x9.$$.fragment),w$r=l(),jc=a("p"),A$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mY=a("a"),y$r=o("from_pretrained()"),L$r=o(" class method or the "),gY=a("a"),x$r=o("from_config()"),$$r=o(` class
method.`),k$r=l(),$9=a("p"),S$r=o("This class cannot be instantiated directly using "),l7e=a("code"),R$r=o("__init__()"),P$r=o(" (throws an error)."),B$r=l(),Xt=a("div"),F(k9.$$.fragment),I$r=l(),i7e=a("p"),q$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N$r=l(),Dc=a("p"),j$r=o(`Note:
Loading a model from its configuration file does `),d7e=a("strong"),D$r=o("not"),G$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),O$r=o("from_pretrained()"),V$r=o(" to load the model weights."),X$r=l(),F(_C.$$.fragment),z$r=l(),Or=a("div"),F(S9.$$.fragment),W$r=l(),c7e=a("p"),Q$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H$r=l(),_n=a("p"),U$r=o("The model class to instantiate is selected based on the "),f7e=a("code"),J$r=o("model_type"),Y$r=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),K$r=o("pretrained_model_name_or_path"),Z$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=a("code"),ekr=o("pretrained_model_name_or_path"),okr=o(":"),rkr=l(),Le=a("ul"),bC=a("li"),h7e=a("strong"),tkr=o("albert"),akr=o(" \u2014 "),pY=a("a"),nkr=o("FlaxAlbertForMaskedLM"),skr=o(" (ALBERT model)"),lkr=l(),vC=a("li"),p7e=a("strong"),ikr=o("bart"),dkr=o(" \u2014 "),uY=a("a"),ckr=o("FlaxBartForConditionalGeneration"),fkr=o(" (BART model)"),mkr=l(),FC=a("li"),u7e=a("strong"),gkr=o("bert"),hkr=o(" \u2014 "),_Y=a("a"),pkr=o("FlaxBertForMaskedLM"),ukr=o(" (BERT model)"),_kr=l(),TC=a("li"),_7e=a("strong"),bkr=o("big_bird"),vkr=o(" \u2014 "),bY=a("a"),Fkr=o("FlaxBigBirdForMaskedLM"),Tkr=o(" (BigBird model)"),Mkr=l(),MC=a("li"),b7e=a("strong"),Ekr=o("distilbert"),Ckr=o(" \u2014 "),vY=a("a"),wkr=o("FlaxDistilBertForMaskedLM"),Akr=o(" (DistilBERT model)"),ykr=l(),EC=a("li"),v7e=a("strong"),Lkr=o("electra"),xkr=o(" \u2014 "),FY=a("a"),$kr=o("FlaxElectraForMaskedLM"),kkr=o(" (ELECTRA model)"),Skr=l(),CC=a("li"),F7e=a("strong"),Rkr=o("mbart"),Pkr=o(" \u2014 "),TY=a("a"),Bkr=o("FlaxMBartForConditionalGeneration"),Ikr=o(" (mBART model)"),qkr=l(),wC=a("li"),T7e=a("strong"),Nkr=o("roberta"),jkr=o(" \u2014 "),MY=a("a"),Dkr=o("FlaxRobertaForMaskedLM"),Gkr=o(" (RoBERTa model)"),Okr=l(),AC=a("li"),M7e=a("strong"),Vkr=o("roformer"),Xkr=o(" \u2014 "),EY=a("a"),zkr=o("FlaxRoFormerForMaskedLM"),Wkr=o(" (RoFormer model)"),Qkr=l(),yC=a("li"),E7e=a("strong"),Hkr=o("xlm-roberta"),Ukr=o(" \u2014 "),CY=a("a"),Jkr=o("FlaxXLMRobertaForMaskedLM"),Ykr=o(" (XLM-RoBERTa model)"),Kkr=l(),F(LC.$$.fragment),zNe=l(),Gc=a("h2"),xC=a("a"),C7e=a("span"),F(R9.$$.fragment),Zkr=l(),w7e=a("span"),eSr=o("FlaxAutoModelForSeq2SeqLM"),WNe=l(),pr=a("div"),F(P9.$$.fragment),oSr=l(),Oc=a("p"),rSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wY=a("a"),tSr=o("from_pretrained()"),aSr=o(" class method or the "),AY=a("a"),nSr=o("from_config()"),sSr=o(` class
method.`),lSr=l(),B9=a("p"),iSr=o("This class cannot be instantiated directly using "),A7e=a("code"),dSr=o("__init__()"),cSr=o(" (throws an error)."),fSr=l(),zt=a("div"),F(I9.$$.fragment),mSr=l(),y7e=a("p"),gSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hSr=l(),Vc=a("p"),pSr=o(`Note:
Loading a model from its configuration file does `),L7e=a("strong"),uSr=o("not"),_Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),bSr=o("from_pretrained()"),vSr=o(" to load the model weights."),FSr=l(),F($C.$$.fragment),TSr=l(),Vr=a("div"),F(q9.$$.fragment),MSr=l(),x7e=a("p"),ESr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CSr=l(),bn=a("p"),wSr=o("The model class to instantiate is selected based on the "),$7e=a("code"),ASr=o("model_type"),ySr=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),LSr=o("pretrained_model_name_or_path"),xSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),$Sr=o("pretrained_model_name_or_path"),kSr=o(":"),SSr=l(),Pe=a("ul"),kC=a("li"),R7e=a("strong"),RSr=o("bart"),PSr=o(" \u2014 "),LY=a("a"),BSr=o("FlaxBartForConditionalGeneration"),ISr=o(" (BART model)"),qSr=l(),SC=a("li"),P7e=a("strong"),NSr=o("blenderbot"),jSr=o(" \u2014 "),xY=a("a"),DSr=o("FlaxBlenderbotForConditionalGeneration"),GSr=o(" (Blenderbot model)"),OSr=l(),RC=a("li"),B7e=a("strong"),VSr=o("blenderbot-small"),XSr=o(" \u2014 "),$Y=a("a"),zSr=o("FlaxBlenderbotSmallForConditionalGeneration"),WSr=o(" (BlenderbotSmall model)"),QSr=l(),PC=a("li"),I7e=a("strong"),HSr=o("encoder-decoder"),USr=o(" \u2014 "),kY=a("a"),JSr=o("FlaxEncoderDecoderModel"),YSr=o(" (Encoder decoder model)"),KSr=l(),BC=a("li"),q7e=a("strong"),ZSr=o("marian"),eRr=o(" \u2014 "),SY=a("a"),oRr=o("FlaxMarianMTModel"),rRr=o(" (Marian model)"),tRr=l(),IC=a("li"),N7e=a("strong"),aRr=o("mbart"),nRr=o(" \u2014 "),RY=a("a"),sRr=o("FlaxMBartForConditionalGeneration"),lRr=o(" (mBART model)"),iRr=l(),qC=a("li"),j7e=a("strong"),dRr=o("mt5"),cRr=o(" \u2014 "),PY=a("a"),fRr=o("FlaxMT5ForConditionalGeneration"),mRr=o(" (mT5 model)"),gRr=l(),NC=a("li"),D7e=a("strong"),hRr=o("pegasus"),pRr=o(" \u2014 "),BY=a("a"),uRr=o("FlaxPegasusForConditionalGeneration"),_Rr=o(" (Pegasus model)"),bRr=l(),jC=a("li"),G7e=a("strong"),vRr=o("t5"),FRr=o(" \u2014 "),IY=a("a"),TRr=o("FlaxT5ForConditionalGeneration"),MRr=o(" (T5 model)"),ERr=l(),F(DC.$$.fragment),QNe=l(),Xc=a("h2"),GC=a("a"),O7e=a("span"),F(N9.$$.fragment),CRr=l(),V7e=a("span"),wRr=o("FlaxAutoModelForSequenceClassification"),HNe=l(),ur=a("div"),F(j9.$$.fragment),ARr=l(),zc=a("p"),yRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qY=a("a"),LRr=o("from_pretrained()"),xRr=o(" class method or the "),NY=a("a"),$Rr=o("from_config()"),kRr=o(` class
method.`),SRr=l(),D9=a("p"),RRr=o("This class cannot be instantiated directly using "),X7e=a("code"),PRr=o("__init__()"),BRr=o(" (throws an error)."),IRr=l(),Wt=a("div"),F(G9.$$.fragment),qRr=l(),z7e=a("p"),NRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jRr=l(),Wc=a("p"),DRr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),GRr=o("not"),ORr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),VRr=o("from_pretrained()"),XRr=o(" to load the model weights."),zRr=l(),F(OC.$$.fragment),WRr=l(),Xr=a("div"),F(O9.$$.fragment),QRr=l(),Q7e=a("p"),HRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),URr=l(),vn=a("p"),JRr=o("The model class to instantiate is selected based on the "),H7e=a("code"),YRr=o("model_type"),KRr=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),ZRr=o("pretrained_model_name_or_path"),ePr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),oPr=o("pretrained_model_name_or_path"),rPr=o(":"),tPr=l(),xe=a("ul"),VC=a("li"),Y7e=a("strong"),aPr=o("albert"),nPr=o(" \u2014 "),DY=a("a"),sPr=o("FlaxAlbertForSequenceClassification"),lPr=o(" (ALBERT model)"),iPr=l(),XC=a("li"),K7e=a("strong"),dPr=o("bart"),cPr=o(" \u2014 "),GY=a("a"),fPr=o("FlaxBartForSequenceClassification"),mPr=o(" (BART model)"),gPr=l(),zC=a("li"),Z7e=a("strong"),hPr=o("bert"),pPr=o(" \u2014 "),OY=a("a"),uPr=o("FlaxBertForSequenceClassification"),_Pr=o(" (BERT model)"),bPr=l(),WC=a("li"),eMe=a("strong"),vPr=o("big_bird"),FPr=o(" \u2014 "),VY=a("a"),TPr=o("FlaxBigBirdForSequenceClassification"),MPr=o(" (BigBird model)"),EPr=l(),QC=a("li"),oMe=a("strong"),CPr=o("distilbert"),wPr=o(" \u2014 "),XY=a("a"),APr=o("FlaxDistilBertForSequenceClassification"),yPr=o(" (DistilBERT model)"),LPr=l(),HC=a("li"),rMe=a("strong"),xPr=o("electra"),$Pr=o(" \u2014 "),zY=a("a"),kPr=o("FlaxElectraForSequenceClassification"),SPr=o(" (ELECTRA model)"),RPr=l(),UC=a("li"),tMe=a("strong"),PPr=o("mbart"),BPr=o(" \u2014 "),WY=a("a"),IPr=o("FlaxMBartForSequenceClassification"),qPr=o(" (mBART model)"),NPr=l(),JC=a("li"),aMe=a("strong"),jPr=o("roberta"),DPr=o(" \u2014 "),QY=a("a"),GPr=o("FlaxRobertaForSequenceClassification"),OPr=o(" (RoBERTa model)"),VPr=l(),YC=a("li"),nMe=a("strong"),XPr=o("roformer"),zPr=o(" \u2014 "),HY=a("a"),WPr=o("FlaxRoFormerForSequenceClassification"),QPr=o(" (RoFormer model)"),HPr=l(),KC=a("li"),sMe=a("strong"),UPr=o("xlm-roberta"),JPr=o(" \u2014 "),UY=a("a"),YPr=o("FlaxXLMRobertaForSequenceClassification"),KPr=o(" (XLM-RoBERTa model)"),ZPr=l(),F(ZC.$$.fragment),UNe=l(),Qc=a("h2"),e5=a("a"),lMe=a("span"),F(V9.$$.fragment),eBr=l(),iMe=a("span"),oBr=o("FlaxAutoModelForQuestionAnswering"),JNe=l(),_r=a("div"),F(X9.$$.fragment),rBr=l(),Hc=a("p"),tBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JY=a("a"),aBr=o("from_pretrained()"),nBr=o(" class method or the "),YY=a("a"),sBr=o("from_config()"),lBr=o(` class
method.`),iBr=l(),z9=a("p"),dBr=o("This class cannot be instantiated directly using "),dMe=a("code"),cBr=o("__init__()"),fBr=o(" (throws an error)."),mBr=l(),Qt=a("div"),F(W9.$$.fragment),gBr=l(),cMe=a("p"),hBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pBr=l(),Uc=a("p"),uBr=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),_Br=o("not"),bBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),vBr=o("from_pretrained()"),FBr=o(" to load the model weights."),TBr=l(),F(o5.$$.fragment),MBr=l(),zr=a("div"),F(Q9.$$.fragment),EBr=l(),mMe=a("p"),CBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wBr=l(),Fn=a("p"),ABr=o("The model class to instantiate is selected based on the "),gMe=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),kBr=o("pretrained_model_name_or_path"),SBr=o(":"),RBr=l(),$e=a("ul"),r5=a("li"),uMe=a("strong"),PBr=o("albert"),BBr=o(" \u2014 "),ZY=a("a"),IBr=o("FlaxAlbertForQuestionAnswering"),qBr=o(" (ALBERT model)"),NBr=l(),t5=a("li"),_Me=a("strong"),jBr=o("bart"),DBr=o(" \u2014 "),eK=a("a"),GBr=o("FlaxBartForQuestionAnswering"),OBr=o(" (BART model)"),VBr=l(),a5=a("li"),bMe=a("strong"),XBr=o("bert"),zBr=o(" \u2014 "),oK=a("a"),WBr=o("FlaxBertForQuestionAnswering"),QBr=o(" (BERT model)"),HBr=l(),n5=a("li"),vMe=a("strong"),UBr=o("big_bird"),JBr=o(" \u2014 "),rK=a("a"),YBr=o("FlaxBigBirdForQuestionAnswering"),KBr=o(" (BigBird model)"),ZBr=l(),s5=a("li"),FMe=a("strong"),eIr=o("distilbert"),oIr=o(" \u2014 "),tK=a("a"),rIr=o("FlaxDistilBertForQuestionAnswering"),tIr=o(" (DistilBERT model)"),aIr=l(),l5=a("li"),TMe=a("strong"),nIr=o("electra"),sIr=o(" \u2014 "),aK=a("a"),lIr=o("FlaxElectraForQuestionAnswering"),iIr=o(" (ELECTRA model)"),dIr=l(),i5=a("li"),MMe=a("strong"),cIr=o("mbart"),fIr=o(" \u2014 "),nK=a("a"),mIr=o("FlaxMBartForQuestionAnswering"),gIr=o(" (mBART model)"),hIr=l(),d5=a("li"),EMe=a("strong"),pIr=o("roberta"),uIr=o(" \u2014 "),sK=a("a"),_Ir=o("FlaxRobertaForQuestionAnswering"),bIr=o(" (RoBERTa model)"),vIr=l(),c5=a("li"),CMe=a("strong"),FIr=o("roformer"),TIr=o(" \u2014 "),lK=a("a"),MIr=o("FlaxRoFormerForQuestionAnswering"),EIr=o(" (RoFormer model)"),CIr=l(),f5=a("li"),wMe=a("strong"),wIr=o("xlm-roberta"),AIr=o(" \u2014 "),iK=a("a"),yIr=o("FlaxXLMRobertaForQuestionAnswering"),LIr=o(" (XLM-RoBERTa model)"),xIr=l(),F(m5.$$.fragment),YNe=l(),Jc=a("h2"),g5=a("a"),AMe=a("span"),F(H9.$$.fragment),$Ir=l(),yMe=a("span"),kIr=o("FlaxAutoModelForTokenClassification"),KNe=l(),br=a("div"),F(U9.$$.fragment),SIr=l(),Yc=a("p"),RIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dK=a("a"),PIr=o("from_pretrained()"),BIr=o(" class method or the "),cK=a("a"),IIr=o("from_config()"),qIr=o(` class
method.`),NIr=l(),J9=a("p"),jIr=o("This class cannot be instantiated directly using "),LMe=a("code"),DIr=o("__init__()"),GIr=o(" (throws an error)."),OIr=l(),Ht=a("div"),F(Y9.$$.fragment),VIr=l(),xMe=a("p"),XIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zIr=l(),Kc=a("p"),WIr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),QIr=o("not"),HIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),UIr=o("from_pretrained()"),JIr=o(" to load the model weights."),YIr=l(),F(h5.$$.fragment),KIr=l(),Wr=a("div"),F(K9.$$.fragment),ZIr=l(),kMe=a("p"),eqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oqr=l(),Tn=a("p"),rqr=o("The model class to instantiate is selected based on the "),SMe=a("code"),tqr=o("model_type"),aqr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),nqr=o("pretrained_model_name_or_path"),sqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),lqr=o("pretrained_model_name_or_path"),iqr=o(":"),dqr=l(),De=a("ul"),p5=a("li"),BMe=a("strong"),cqr=o("albert"),fqr=o(" \u2014 "),mK=a("a"),mqr=o("FlaxAlbertForTokenClassification"),gqr=o(" (ALBERT model)"),hqr=l(),u5=a("li"),IMe=a("strong"),pqr=o("bert"),uqr=o(" \u2014 "),gK=a("a"),_qr=o("FlaxBertForTokenClassification"),bqr=o(" (BERT model)"),vqr=l(),_5=a("li"),qMe=a("strong"),Fqr=o("big_bird"),Tqr=o(" \u2014 "),hK=a("a"),Mqr=o("FlaxBigBirdForTokenClassification"),Eqr=o(" (BigBird model)"),Cqr=l(),b5=a("li"),NMe=a("strong"),wqr=o("distilbert"),Aqr=o(" \u2014 "),pK=a("a"),yqr=o("FlaxDistilBertForTokenClassification"),Lqr=o(" (DistilBERT model)"),xqr=l(),v5=a("li"),jMe=a("strong"),$qr=o("electra"),kqr=o(" \u2014 "),uK=a("a"),Sqr=o("FlaxElectraForTokenClassification"),Rqr=o(" (ELECTRA model)"),Pqr=l(),F5=a("li"),DMe=a("strong"),Bqr=o("roberta"),Iqr=o(" \u2014 "),_K=a("a"),qqr=o("FlaxRobertaForTokenClassification"),Nqr=o(" (RoBERTa model)"),jqr=l(),T5=a("li"),GMe=a("strong"),Dqr=o("roformer"),Gqr=o(" \u2014 "),bK=a("a"),Oqr=o("FlaxRoFormerForTokenClassification"),Vqr=o(" (RoFormer model)"),Xqr=l(),M5=a("li"),OMe=a("strong"),zqr=o("xlm-roberta"),Wqr=o(" \u2014 "),vK=a("a"),Qqr=o("FlaxXLMRobertaForTokenClassification"),Hqr=o(" (XLM-RoBERTa model)"),Uqr=l(),F(E5.$$.fragment),ZNe=l(),Zc=a("h2"),C5=a("a"),VMe=a("span"),F(Z9.$$.fragment),Jqr=l(),XMe=a("span"),Yqr=o("FlaxAutoModelForMultipleChoice"),eje=l(),vr=a("div"),F(ex.$$.fragment),Kqr=l(),ef=a("p"),Zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FK=a("a"),eNr=o("from_pretrained()"),oNr=o(" class method or the "),TK=a("a"),rNr=o("from_config()"),tNr=o(` class
method.`),aNr=l(),ox=a("p"),nNr=o("This class cannot be instantiated directly using "),zMe=a("code"),sNr=o("__init__()"),lNr=o(" (throws an error)."),iNr=l(),Ut=a("div"),F(rx.$$.fragment),dNr=l(),WMe=a("p"),cNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fNr=l(),of=a("p"),mNr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),gNr=o("not"),hNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),pNr=o("from_pretrained()"),uNr=o(" to load the model weights."),_Nr=l(),F(w5.$$.fragment),bNr=l(),Qr=a("div"),F(tx.$$.fragment),vNr=l(),HMe=a("p"),FNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TNr=l(),Mn=a("p"),MNr=o("The model class to instantiate is selected based on the "),UMe=a("code"),ENr=o("model_type"),CNr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),wNr=o("pretrained_model_name_or_path"),ANr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),yNr=o("pretrained_model_name_or_path"),LNr=o(":"),xNr=l(),Ge=a("ul"),A5=a("li"),KMe=a("strong"),$Nr=o("albert"),kNr=o(" \u2014 "),EK=a("a"),SNr=o("FlaxAlbertForMultipleChoice"),RNr=o(" (ALBERT model)"),PNr=l(),y5=a("li"),ZMe=a("strong"),BNr=o("bert"),INr=o(" \u2014 "),CK=a("a"),qNr=o("FlaxBertForMultipleChoice"),NNr=o(" (BERT model)"),jNr=l(),L5=a("li"),e4e=a("strong"),DNr=o("big_bird"),GNr=o(" \u2014 "),wK=a("a"),ONr=o("FlaxBigBirdForMultipleChoice"),VNr=o(" (BigBird model)"),XNr=l(),x5=a("li"),o4e=a("strong"),zNr=o("distilbert"),WNr=o(" \u2014 "),AK=a("a"),QNr=o("FlaxDistilBertForMultipleChoice"),HNr=o(" (DistilBERT model)"),UNr=l(),$5=a("li"),r4e=a("strong"),JNr=o("electra"),YNr=o(" \u2014 "),yK=a("a"),KNr=o("FlaxElectraForMultipleChoice"),ZNr=o(" (ELECTRA model)"),ejr=l(),k5=a("li"),t4e=a("strong"),ojr=o("roberta"),rjr=o(" \u2014 "),LK=a("a"),tjr=o("FlaxRobertaForMultipleChoice"),ajr=o(" (RoBERTa model)"),njr=l(),S5=a("li"),a4e=a("strong"),sjr=o("roformer"),ljr=o(" \u2014 "),xK=a("a"),ijr=o("FlaxRoFormerForMultipleChoice"),djr=o(" (RoFormer model)"),cjr=l(),R5=a("li"),n4e=a("strong"),fjr=o("xlm-roberta"),mjr=o(" \u2014 "),$K=a("a"),gjr=o("FlaxXLMRobertaForMultipleChoice"),hjr=o(" (XLM-RoBERTa model)"),pjr=l(),F(P5.$$.fragment),oje=l(),rf=a("h2"),B5=a("a"),s4e=a("span"),F(ax.$$.fragment),ujr=l(),l4e=a("span"),_jr=o("FlaxAutoModelForNextSentencePrediction"),rje=l(),Fr=a("div"),F(nx.$$.fragment),bjr=l(),tf=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),SK=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),sx=a("p"),wjr=o("This class cannot be instantiated directly using "),i4e=a("code"),Ajr=o("__init__()"),yjr=o(" (throws an error)."),Ljr=l(),Jt=a("div"),F(lx.$$.fragment),xjr=l(),d4e=a("p"),$jr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kjr=l(),af=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),qjr=l(),F(I5.$$.fragment),Njr=l(),Hr=a("div"),F(ix.$$.fragment),jjr=l(),f4e=a("p"),Djr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Gjr=l(),En=a("p"),Ojr=o("The model class to instantiate is selected based on the "),m4e=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),Qjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),p4e=a("ul"),q5=a("li"),u4e=a("strong"),Jjr=o("bert"),Yjr=o(" \u2014 "),PK=a("a"),Kjr=o("FlaxBertForNextSentencePrediction"),Zjr=o(" (BERT model)"),eDr=l(),F(N5.$$.fragment),tje=l(),nf=a("h2"),j5=a("a"),_4e=a("span"),F(dx.$$.fragment),oDr=l(),b4e=a("span"),rDr=o("FlaxAutoModelForImageClassification"),aje=l(),Tr=a("div"),F(cx.$$.fragment),tDr=l(),sf=a("p"),aDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BK=a("a"),nDr=o("from_pretrained()"),sDr=o(" class method or the "),IK=a("a"),lDr=o("from_config()"),iDr=o(` class
method.`),dDr=l(),fx=a("p"),cDr=o("This class cannot be instantiated directly using "),v4e=a("code"),fDr=o("__init__()"),mDr=o(" (throws an error)."),gDr=l(),Yt=a("div"),F(mx.$$.fragment),hDr=l(),F4e=a("p"),pDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uDr=l(),lf=a("p"),_Dr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),bDr=o("not"),vDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),FDr=o("from_pretrained()"),TDr=o(" to load the model weights."),MDr=l(),F(D5.$$.fragment),EDr=l(),Ur=a("div"),F(gx.$$.fragment),CDr=l(),M4e=a("p"),wDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ADr=l(),Cn=a("p"),yDr=o("The model class to instantiate is selected based on the "),E4e=a("code"),LDr=o("model_type"),xDr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(":"),PDr=l(),hx=a("ul"),G5=a("li"),A4e=a("strong"),BDr=o("beit"),IDr=o(" \u2014 "),NK=a("a"),qDr=o("FlaxBeitForImageClassification"),NDr=o(" (BEiT model)"),jDr=l(),O5=a("li"),y4e=a("strong"),DDr=o("vit"),GDr=o(" \u2014 "),jK=a("a"),ODr=o("FlaxViTForImageClassification"),VDr=o(" (ViT model)"),XDr=l(),F(V5.$$.fragment),nje=l(),df=a("h2"),X5=a("a"),L4e=a("span"),F(px.$$.fragment),zDr=l(),x4e=a("span"),WDr=o("FlaxAutoModelForVision2Seq"),sje=l(),Mr=a("div"),F(ux.$$.fragment),QDr=l(),cf=a("p"),HDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=a("a"),UDr=o("from_pretrained()"),JDr=o(" class method or the "),GK=a("a"),YDr=o("from_config()"),KDr=o(` class
method.`),ZDr=l(),_x=a("p"),eGr=o("This class cannot be instantiated directly using "),$4e=a("code"),oGr=o("__init__()"),rGr=o(" (throws an error)."),tGr=l(),Kt=a("div"),F(bx.$$.fragment),aGr=l(),k4e=a("p"),nGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sGr=l(),ff=a("p"),lGr=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),iGr=o("not"),dGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),cGr=o("from_pretrained()"),fGr=o(" to load the model weights."),mGr=l(),F(z5.$$.fragment),gGr=l(),Jr=a("div"),F(vx.$$.fragment),hGr=l(),R4e=a("p"),pGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uGr=l(),wn=a("p"),_Gr=o("The model class to instantiate is selected based on the "),P4e=a("code"),bGr=o("model_type"),vGr=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),MGr=o("pretrained_model_name_or_path"),EGr=o(":"),CGr=l(),q4e=a("ul"),W5=a("li"),N4e=a("strong"),wGr=o("vision-encoder-decoder"),AGr=o(" \u2014 "),VK=a("a"),yGr=o("FlaxVisionEncoderDecoderModel"),LGr=o(" (Vision Encoder decoder model)"),xGr=l(),F(Q5.$$.fragment),this.h()},l(f){const _=j8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Fx=s(p);m=n(Fx,"A",{id:!0,class:!0,href:!0});var j4e=s(m);u=n(j4e,"SPAN",{});var D4e=s(u);T(d.$$.fragment,D4e),D4e.forEach(t),j4e.forEach(t),h=i(Fx),Mo=n(Fx,"SPAN",{});var G4e=s(Mo);fi=r(G4e,"Auto Classes"),G4e.forEach(t),Fx.forEach(t),pf=i(f),rt=n(f,"P",{});var Tx=s(rt);mi=r(Tx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Tx,"CODE",{});var O4e=s(gi);fA=r(O4e,"from_pretrained()"),O4e.forEach(t),uf=r(Tx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var V4e=s(yn);mA=r(V4e,"AutoConfig"),V4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var X4e=s(xn);gA=r(X4e,"AutoModel"),X4e.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var z4e=s($n);hA=r(z4e,"AutoTokenizer"),z4e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Mx=s(Ae);R$=r(Mx,"will create a model that is an instance of "),_i=n(Mx,"A",{href:!0});var W4e=s(_i);P$=r(W4e,"BertModel"),W4e.forEach(t),B$=r(Mx,"."),Mx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ex=s(wa);I$=r(Ex,"There is one class of "),bf=n(Ex,"CODE",{});var Q4e=s(bf);q$=r(Q4e,"AutoModel"),Q4e.forEach(t),pGe=r(Ex," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ex.forEach(t),aqe=i(f),bi=n(f,"H2",{class:!0});var Cx=s(bi);vf=n(Cx,"A",{id:!0,class:!0,href:!0});var H4e=s(vf);Iee=n(H4e,"SPAN",{});var U4e=s(Iee);T(pA.$$.fragment,U4e),U4e.forEach(t),H4e.forEach(t),uGe=i(Cx),qee=n(Cx,"SPAN",{});var J4e=s(qee);_Ge=r(J4e,"Extending the Auto Classes"),J4e.forEach(t),Cx.forEach(t),nqe=i(f),kn=n(f,"P",{});var mf=s(kn);bGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Nee=n(mf,"CODE",{});var Y4e=s(Nee);vGe=r(Y4e,"NewModel"),Y4e.forEach(t),FGe=r(mf,", make sure you have a "),jee=n(mf,"CODE",{});var K4e=s(jee);TGe=r(K4e,"NewModelConfig"),K4e.forEach(t),MGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),sqe=i(f),T(uA.$$.fragment,f),lqe=i(f),N$=n(f,"P",{});var Z4e=s(N$);EGe=r(Z4e,"You will then be able to use the auto classes like you would usually do!"),Z4e.forEach(t),iqe=i(f),T(Ff.$$.fragment,f),dqe=i(f),vi=n(f,"H2",{class:!0});var wx=s(vi);Tf=n(wx,"A",{id:!0,class:!0,href:!0});var eEe=s(Tf);Dee=n(eEe,"SPAN",{});var oEe=s(Dee);T(_A.$$.fragment,oEe),oEe.forEach(t),eEe.forEach(t),CGe=i(wx),Gee=n(wx,"SPAN",{});var rEe=s(Gee);wGe=r(rEe,"AutoConfig"),rEe.forEach(t),wx.forEach(t),cqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(bA.$$.fragment,et),AGe=i(et),vA=n(et,"P",{});var Ax=s(vA);yGe=r(Ax,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j$=n(Ax,"A",{href:!0});var tEe=s(j$);LGe=r(tEe,"from_pretrained()"),tEe.forEach(t),xGe=r(Ax," class method."),Ax.forEach(t),$Ge=i(et),FA=n(et,"P",{});var yx=s(FA);kGe=r(yx,"This class cannot be instantiated directly using "),Oee=n(yx,"CODE",{});var aEe=s(Oee);SGe=r(aEe,"__init__()"),aEe.forEach(t),RGe=r(yx," (throws an error)."),yx.forEach(t),PGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(TA.$$.fragment,ot),BGe=i(ot),Vee=n(ot,"P",{});var nEe=s(Vee);IGe=r(nEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),nEe.forEach(t),qGe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);NGe=r(gf,"The configuration class to instantiate is selected based on the "),Xee=n(gf,"CODE",{});var sEe=s(Xee);jGe=r(sEe,"model_type"),sEe.forEach(t),DGe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zee=n(gf,"CODE",{});var lEe=s(zee);GGe=r(lEe,"pretrained_model_name_or_path"),lEe.forEach(t),OGe=r(gf,":"),gf.forEach(t),VGe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var H5=s(Mf);Wee=n(H5,"STRONG",{});var iEe=s(Wee);XGe=r(iEe,"albert"),iEe.forEach(t),zGe=r(H5," \u2014 "),D$=n(H5,"A",{href:!0});var dEe=s(D$);WGe=r(dEe,"AlbertConfig"),dEe.forEach(t),QGe=r(H5," (ALBERT model)"),H5.forEach(t),HGe=i(y),Ef=n(y,"LI",{});var U5=s(Ef);Qee=n(U5,"STRONG",{});var cEe=s(Qee);UGe=r(cEe,"bart"),cEe.forEach(t),JGe=r(U5," \u2014 "),G$=n(U5,"A",{href:!0});var fEe=s(G$);YGe=r(fEe,"BartConfig"),fEe.forEach(t),KGe=r(U5," (BART model)"),U5.forEach(t),ZGe=i(y),Cf=n(y,"LI",{});var J5=s(Cf);Hee=n(J5,"STRONG",{});var mEe=s(Hee);eOe=r(mEe,"beit"),mEe.forEach(t),oOe=r(J5," \u2014 "),O$=n(J5,"A",{href:!0});var gEe=s(O$);rOe=r(gEe,"BeitConfig"),gEe.forEach(t),tOe=r(J5," (BEiT model)"),J5.forEach(t),aOe=i(y),wf=n(y,"LI",{});var Y5=s(wf);Uee=n(Y5,"STRONG",{});var hEe=s(Uee);nOe=r(hEe,"bert"),hEe.forEach(t),sOe=r(Y5," \u2014 "),V$=n(Y5,"A",{href:!0});var pEe=s(V$);lOe=r(pEe,"BertConfig"),pEe.forEach(t),iOe=r(Y5," (BERT model)"),Y5.forEach(t),dOe=i(y),Af=n(y,"LI",{});var K5=s(Af);Jee=n(K5,"STRONG",{});var uEe=s(Jee);cOe=r(uEe,"bert-generation"),uEe.forEach(t),fOe=r(K5," \u2014 "),X$=n(K5,"A",{href:!0});var _Ee=s(X$);mOe=r(_Ee,"BertGenerationConfig"),_Ee.forEach(t),gOe=r(K5," (Bert Generation model)"),K5.forEach(t),hOe=i(y),yf=n(y,"LI",{});var Z5=s(yf);Yee=n(Z5,"STRONG",{});var bEe=s(Yee);pOe=r(bEe,"big_bird"),bEe.forEach(t),uOe=r(Z5," \u2014 "),z$=n(Z5,"A",{href:!0});var vEe=s(z$);_Oe=r(vEe,"BigBirdConfig"),vEe.forEach(t),bOe=r(Z5," (BigBird model)"),Z5.forEach(t),vOe=i(y),Lf=n(y,"LI",{});var e3=s(Lf);Kee=n(e3,"STRONG",{});var FEe=s(Kee);FOe=r(FEe,"bigbird_pegasus"),FEe.forEach(t),TOe=r(e3," \u2014 "),W$=n(e3,"A",{href:!0});var TEe=s(W$);MOe=r(TEe,"BigBirdPegasusConfig"),TEe.forEach(t),EOe=r(e3," (BigBirdPegasus model)"),e3.forEach(t),COe=i(y),xf=n(y,"LI",{});var o3=s(xf);Zee=n(o3,"STRONG",{});var MEe=s(Zee);wOe=r(MEe,"blenderbot"),MEe.forEach(t),AOe=r(o3," \u2014 "),Q$=n(o3,"A",{href:!0});var EEe=s(Q$);yOe=r(EEe,"BlenderbotConfig"),EEe.forEach(t),LOe=r(o3," (Blenderbot model)"),o3.forEach(t),xOe=i(y),$f=n(y,"LI",{});var r3=s($f);eoe=n(r3,"STRONG",{});var CEe=s(eoe);$Oe=r(CEe,"blenderbot-small"),CEe.forEach(t),kOe=r(r3," \u2014 "),H$=n(r3,"A",{href:!0});var wEe=s(H$);SOe=r(wEe,"BlenderbotSmallConfig"),wEe.forEach(t),ROe=r(r3," (BlenderbotSmall model)"),r3.forEach(t),POe=i(y),kf=n(y,"LI",{});var t3=s(kf);ooe=n(t3,"STRONG",{});var AEe=s(ooe);BOe=r(AEe,"camembert"),AEe.forEach(t),IOe=r(t3," \u2014 "),U$=n(t3,"A",{href:!0});var yEe=s(U$);qOe=r(yEe,"CamembertConfig"),yEe.forEach(t),NOe=r(t3," (CamemBERT model)"),t3.forEach(t),jOe=i(y),Sf=n(y,"LI",{});var a3=s(Sf);roe=n(a3,"STRONG",{});var LEe=s(roe);DOe=r(LEe,"canine"),LEe.forEach(t),GOe=r(a3," \u2014 "),J$=n(a3,"A",{href:!0});var xEe=s(J$);OOe=r(xEe,"CanineConfig"),xEe.forEach(t),VOe=r(a3," (Canine model)"),a3.forEach(t),XOe=i(y),Rf=n(y,"LI",{});var n3=s(Rf);toe=n(n3,"STRONG",{});var $Ee=s(toe);zOe=r($Ee,"clip"),$Ee.forEach(t),WOe=r(n3," \u2014 "),Y$=n(n3,"A",{href:!0});var kEe=s(Y$);QOe=r(kEe,"CLIPConfig"),kEe.forEach(t),HOe=r(n3," (CLIP model)"),n3.forEach(t),UOe=i(y),Pf=n(y,"LI",{});var s3=s(Pf);aoe=n(s3,"STRONG",{});var SEe=s(aoe);JOe=r(SEe,"convbert"),SEe.forEach(t),YOe=r(s3," \u2014 "),K$=n(s3,"A",{href:!0});var REe=s(K$);KOe=r(REe,"ConvBertConfig"),REe.forEach(t),ZOe=r(s3," (ConvBERT model)"),s3.forEach(t),eVe=i(y),Bf=n(y,"LI",{});var l3=s(Bf);noe=n(l3,"STRONG",{});var PEe=s(noe);oVe=r(PEe,"convnext"),PEe.forEach(t),rVe=r(l3," \u2014 "),Z$=n(l3,"A",{href:!0});var BEe=s(Z$);tVe=r(BEe,"ConvNextConfig"),BEe.forEach(t),aVe=r(l3," (ConvNext model)"),l3.forEach(t),nVe=i(y),If=n(y,"LI",{});var i3=s(If);soe=n(i3,"STRONG",{});var IEe=s(soe);sVe=r(IEe,"ctrl"),IEe.forEach(t),lVe=r(i3," \u2014 "),ek=n(i3,"A",{href:!0});var qEe=s(ek);iVe=r(qEe,"CTRLConfig"),qEe.forEach(t),dVe=r(i3," (CTRL model)"),i3.forEach(t),cVe=i(y),qf=n(y,"LI",{});var d3=s(qf);loe=n(d3,"STRONG",{});var NEe=s(loe);fVe=r(NEe,"data2vec-audio"),NEe.forEach(t),mVe=r(d3," \u2014 "),ok=n(d3,"A",{href:!0});var jEe=s(ok);gVe=r(jEe,"Data2VecAudioConfig"),jEe.forEach(t),hVe=r(d3," (Data2VecAudio model)"),d3.forEach(t),pVe=i(y),Nf=n(y,"LI",{});var c3=s(Nf);ioe=n(c3,"STRONG",{});var DEe=s(ioe);uVe=r(DEe,"data2vec-text"),DEe.forEach(t),_Ve=r(c3," \u2014 "),rk=n(c3,"A",{href:!0});var GEe=s(rk);bVe=r(GEe,"Data2VecTextConfig"),GEe.forEach(t),vVe=r(c3," (Data2VecText model)"),c3.forEach(t),FVe=i(y),jf=n(y,"LI",{});var f3=s(jf);doe=n(f3,"STRONG",{});var OEe=s(doe);TVe=r(OEe,"data2vec-vision"),OEe.forEach(t),MVe=r(f3," \u2014 "),tk=n(f3,"A",{href:!0});var VEe=s(tk);EVe=r(VEe,"Data2VecVisionConfig"),VEe.forEach(t),CVe=r(f3," (Data2VecVision model)"),f3.forEach(t),wVe=i(y),Df=n(y,"LI",{});var m3=s(Df);coe=n(m3,"STRONG",{});var XEe=s(coe);AVe=r(XEe,"deberta"),XEe.forEach(t),yVe=r(m3," \u2014 "),ak=n(m3,"A",{href:!0});var zEe=s(ak);LVe=r(zEe,"DebertaConfig"),zEe.forEach(t),xVe=r(m3," (DeBERTa model)"),m3.forEach(t),$Ve=i(y),Gf=n(y,"LI",{});var g3=s(Gf);foe=n(g3,"STRONG",{});var WEe=s(foe);kVe=r(WEe,"deberta-v2"),WEe.forEach(t),SVe=r(g3," \u2014 "),nk=n(g3,"A",{href:!0});var QEe=s(nk);RVe=r(QEe,"DebertaV2Config"),QEe.forEach(t),PVe=r(g3," (DeBERTa-v2 model)"),g3.forEach(t),BVe=i(y),Of=n(y,"LI",{});var h3=s(Of);moe=n(h3,"STRONG",{});var HEe=s(moe);IVe=r(HEe,"decision_transformer"),HEe.forEach(t),qVe=r(h3," \u2014 "),sk=n(h3,"A",{href:!0});var UEe=s(sk);NVe=r(UEe,"DecisionTransformerConfig"),UEe.forEach(t),jVe=r(h3," (Decision Transformer model)"),h3.forEach(t),DVe=i(y),Vf=n(y,"LI",{});var p3=s(Vf);goe=n(p3,"STRONG",{});var JEe=s(goe);GVe=r(JEe,"deit"),JEe.forEach(t),OVe=r(p3," \u2014 "),lk=n(p3,"A",{href:!0});var YEe=s(lk);VVe=r(YEe,"DeiTConfig"),YEe.forEach(t),XVe=r(p3," (DeiT model)"),p3.forEach(t),zVe=i(y),Xf=n(y,"LI",{});var u3=s(Xf);hoe=n(u3,"STRONG",{});var KEe=s(hoe);WVe=r(KEe,"detr"),KEe.forEach(t),QVe=r(u3," \u2014 "),ik=n(u3,"A",{href:!0});var kGr=s(ik);HVe=r(kGr,"DetrConfig"),kGr.forEach(t),UVe=r(u3," (DETR model)"),u3.forEach(t),JVe=i(y),zf=n(y,"LI",{});var ZEe=s(zf);poe=n(ZEe,"STRONG",{});var SGr=s(poe);YVe=r(SGr,"distilbert"),SGr.forEach(t),KVe=r(ZEe," \u2014 "),dk=n(ZEe,"A",{href:!0});var RGr=s(dk);ZVe=r(RGr,"DistilBertConfig"),RGr.forEach(t),eXe=r(ZEe," (DistilBERT model)"),ZEe.forEach(t),oXe=i(y),Wf=n(y,"LI",{});var eCe=s(Wf);uoe=n(eCe,"STRONG",{});var PGr=s(uoe);rXe=r(PGr,"dpr"),PGr.forEach(t),tXe=r(eCe," \u2014 "),ck=n(eCe,"A",{href:!0});var BGr=s(ck);aXe=r(BGr,"DPRConfig"),BGr.forEach(t),nXe=r(eCe," (DPR model)"),eCe.forEach(t),sXe=i(y),Qf=n(y,"LI",{});var oCe=s(Qf);_oe=n(oCe,"STRONG",{});var IGr=s(_oe);lXe=r(IGr,"dpt"),IGr.forEach(t),iXe=r(oCe," \u2014 "),fk=n(oCe,"A",{href:!0});var qGr=s(fk);dXe=r(qGr,"DPTConfig"),qGr.forEach(t),cXe=r(oCe," (DPT model)"),oCe.forEach(t),fXe=i(y),Hf=n(y,"LI",{});var rCe=s(Hf);boe=n(rCe,"STRONG",{});var NGr=s(boe);mXe=r(NGr,"electra"),NGr.forEach(t),gXe=r(rCe," \u2014 "),mk=n(rCe,"A",{href:!0});var jGr=s(mk);hXe=r(jGr,"ElectraConfig"),jGr.forEach(t),pXe=r(rCe," (ELECTRA model)"),rCe.forEach(t),uXe=i(y),Uf=n(y,"LI",{});var tCe=s(Uf);voe=n(tCe,"STRONG",{});var DGr=s(voe);_Xe=r(DGr,"encoder-decoder"),DGr.forEach(t),bXe=r(tCe," \u2014 "),gk=n(tCe,"A",{href:!0});var GGr=s(gk);vXe=r(GGr,"EncoderDecoderConfig"),GGr.forEach(t),FXe=r(tCe," (Encoder decoder model)"),tCe.forEach(t),TXe=i(y),Jf=n(y,"LI",{});var aCe=s(Jf);Foe=n(aCe,"STRONG",{});var OGr=s(Foe);MXe=r(OGr,"flaubert"),OGr.forEach(t),EXe=r(aCe," \u2014 "),hk=n(aCe,"A",{href:!0});var VGr=s(hk);CXe=r(VGr,"FlaubertConfig"),VGr.forEach(t),wXe=r(aCe," (FlauBERT model)"),aCe.forEach(t),AXe=i(y),Yf=n(y,"LI",{});var nCe=s(Yf);Toe=n(nCe,"STRONG",{});var XGr=s(Toe);yXe=r(XGr,"flava"),XGr.forEach(t),LXe=r(nCe," \u2014 "),pk=n(nCe,"A",{href:!0});var zGr=s(pk);xXe=r(zGr,"FlavaConfig"),zGr.forEach(t),$Xe=r(nCe," (Flava model)"),nCe.forEach(t),kXe=i(y),Kf=n(y,"LI",{});var sCe=s(Kf);Moe=n(sCe,"STRONG",{});var WGr=s(Moe);SXe=r(WGr,"fnet"),WGr.forEach(t),RXe=r(sCe," \u2014 "),uk=n(sCe,"A",{href:!0});var QGr=s(uk);PXe=r(QGr,"FNetConfig"),QGr.forEach(t),BXe=r(sCe," (FNet model)"),sCe.forEach(t),IXe=i(y),Zf=n(y,"LI",{});var lCe=s(Zf);Eoe=n(lCe,"STRONG",{});var HGr=s(Eoe);qXe=r(HGr,"fsmt"),HGr.forEach(t),NXe=r(lCe," \u2014 "),_k=n(lCe,"A",{href:!0});var UGr=s(_k);jXe=r(UGr,"FSMTConfig"),UGr.forEach(t),DXe=r(lCe," (FairSeq Machine-Translation model)"),lCe.forEach(t),GXe=i(y),em=n(y,"LI",{});var iCe=s(em);Coe=n(iCe,"STRONG",{});var JGr=s(Coe);OXe=r(JGr,"funnel"),JGr.forEach(t),VXe=r(iCe," \u2014 "),bk=n(iCe,"A",{href:!0});var YGr=s(bk);XXe=r(YGr,"FunnelConfig"),YGr.forEach(t),zXe=r(iCe," (Funnel Transformer model)"),iCe.forEach(t),WXe=i(y),om=n(y,"LI",{});var dCe=s(om);woe=n(dCe,"STRONG",{});var KGr=s(woe);QXe=r(KGr,"glpn"),KGr.forEach(t),HXe=r(dCe," \u2014 "),vk=n(dCe,"A",{href:!0});var ZGr=s(vk);UXe=r(ZGr,"GLPNConfig"),ZGr.forEach(t),JXe=r(dCe," (GLPN model)"),dCe.forEach(t),YXe=i(y),rm=n(y,"LI",{});var cCe=s(rm);Aoe=n(cCe,"STRONG",{});var eOr=s(Aoe);KXe=r(eOr,"gpt2"),eOr.forEach(t),ZXe=r(cCe," \u2014 "),Fk=n(cCe,"A",{href:!0});var oOr=s(Fk);eze=r(oOr,"GPT2Config"),oOr.forEach(t),oze=r(cCe," (OpenAI GPT-2 model)"),cCe.forEach(t),rze=i(y),tm=n(y,"LI",{});var fCe=s(tm);yoe=n(fCe,"STRONG",{});var rOr=s(yoe);tze=r(rOr,"gpt_neo"),rOr.forEach(t),aze=r(fCe," \u2014 "),Tk=n(fCe,"A",{href:!0});var tOr=s(Tk);nze=r(tOr,"GPTNeoConfig"),tOr.forEach(t),sze=r(fCe," (GPT Neo model)"),fCe.forEach(t),lze=i(y),am=n(y,"LI",{});var mCe=s(am);Loe=n(mCe,"STRONG",{});var aOr=s(Loe);ize=r(aOr,"gptj"),aOr.forEach(t),dze=r(mCe," \u2014 "),Mk=n(mCe,"A",{href:!0});var nOr=s(Mk);cze=r(nOr,"GPTJConfig"),nOr.forEach(t),fze=r(mCe," (GPT-J model)"),mCe.forEach(t),mze=i(y),nm=n(y,"LI",{});var gCe=s(nm);xoe=n(gCe,"STRONG",{});var sOr=s(xoe);gze=r(sOr,"hubert"),sOr.forEach(t),hze=r(gCe," \u2014 "),Ek=n(gCe,"A",{href:!0});var lOr=s(Ek);pze=r(lOr,"HubertConfig"),lOr.forEach(t),uze=r(gCe," (Hubert model)"),gCe.forEach(t),_ze=i(y),sm=n(y,"LI",{});var hCe=s(sm);$oe=n(hCe,"STRONG",{});var iOr=s($oe);bze=r(iOr,"ibert"),iOr.forEach(t),vze=r(hCe," \u2014 "),Ck=n(hCe,"A",{href:!0});var dOr=s(Ck);Fze=r(dOr,"IBertConfig"),dOr.forEach(t),Tze=r(hCe," (I-BERT model)"),hCe.forEach(t),Mze=i(y),lm=n(y,"LI",{});var pCe=s(lm);koe=n(pCe,"STRONG",{});var cOr=s(koe);Eze=r(cOr,"imagegpt"),cOr.forEach(t),Cze=r(pCe," \u2014 "),wk=n(pCe,"A",{href:!0});var fOr=s(wk);wze=r(fOr,"ImageGPTConfig"),fOr.forEach(t),Aze=r(pCe," (ImageGPT model)"),pCe.forEach(t),yze=i(y),im=n(y,"LI",{});var uCe=s(im);Soe=n(uCe,"STRONG",{});var mOr=s(Soe);Lze=r(mOr,"layoutlm"),mOr.forEach(t),xze=r(uCe," \u2014 "),Ak=n(uCe,"A",{href:!0});var gOr=s(Ak);$ze=r(gOr,"LayoutLMConfig"),gOr.forEach(t),kze=r(uCe," (LayoutLM model)"),uCe.forEach(t),Sze=i(y),dm=n(y,"LI",{});var _Ce=s(dm);Roe=n(_Ce,"STRONG",{});var hOr=s(Roe);Rze=r(hOr,"layoutlmv2"),hOr.forEach(t),Pze=r(_Ce," \u2014 "),yk=n(_Ce,"A",{href:!0});var pOr=s(yk);Bze=r(pOr,"LayoutLMv2Config"),pOr.forEach(t),Ize=r(_Ce," (LayoutLMv2 model)"),_Ce.forEach(t),qze=i(y),cm=n(y,"LI",{});var bCe=s(cm);Poe=n(bCe,"STRONG",{});var uOr=s(Poe);Nze=r(uOr,"layoutlmv3"),uOr.forEach(t),jze=r(bCe," \u2014 "),Lk=n(bCe,"A",{href:!0});var _Or=s(Lk);Dze=r(_Or,"LayoutLMv3Config"),_Or.forEach(t),Gze=r(bCe," (LayoutLMv3 model)"),bCe.forEach(t),Oze=i(y),fm=n(y,"LI",{});var vCe=s(fm);Boe=n(vCe,"STRONG",{});var bOr=s(Boe);Vze=r(bOr,"led"),bOr.forEach(t),Xze=r(vCe," \u2014 "),xk=n(vCe,"A",{href:!0});var vOr=s(xk);zze=r(vOr,"LEDConfig"),vOr.forEach(t),Wze=r(vCe," (LED model)"),vCe.forEach(t),Qze=i(y),mm=n(y,"LI",{});var FCe=s(mm);Ioe=n(FCe,"STRONG",{});var FOr=s(Ioe);Hze=r(FOr,"longformer"),FOr.forEach(t),Uze=r(FCe," \u2014 "),$k=n(FCe,"A",{href:!0});var TOr=s($k);Jze=r(TOr,"LongformerConfig"),TOr.forEach(t),Yze=r(FCe," (Longformer model)"),FCe.forEach(t),Kze=i(y),gm=n(y,"LI",{});var TCe=s(gm);qoe=n(TCe,"STRONG",{});var MOr=s(qoe);Zze=r(MOr,"luke"),MOr.forEach(t),eWe=r(TCe," \u2014 "),kk=n(TCe,"A",{href:!0});var EOr=s(kk);oWe=r(EOr,"LukeConfig"),EOr.forEach(t),rWe=r(TCe," (LUKE model)"),TCe.forEach(t),tWe=i(y),hm=n(y,"LI",{});var MCe=s(hm);Noe=n(MCe,"STRONG",{});var COr=s(Noe);aWe=r(COr,"lxmert"),COr.forEach(t),nWe=r(MCe," \u2014 "),Sk=n(MCe,"A",{href:!0});var wOr=s(Sk);sWe=r(wOr,"LxmertConfig"),wOr.forEach(t),lWe=r(MCe," (LXMERT model)"),MCe.forEach(t),iWe=i(y),pm=n(y,"LI",{});var ECe=s(pm);joe=n(ECe,"STRONG",{});var AOr=s(joe);dWe=r(AOr,"m2m_100"),AOr.forEach(t),cWe=r(ECe," \u2014 "),Rk=n(ECe,"A",{href:!0});var yOr=s(Rk);fWe=r(yOr,"M2M100Config"),yOr.forEach(t),mWe=r(ECe," (M2M100 model)"),ECe.forEach(t),gWe=i(y),um=n(y,"LI",{});var CCe=s(um);Doe=n(CCe,"STRONG",{});var LOr=s(Doe);hWe=r(LOr,"marian"),LOr.forEach(t),pWe=r(CCe," \u2014 "),Pk=n(CCe,"A",{href:!0});var xOr=s(Pk);uWe=r(xOr,"MarianConfig"),xOr.forEach(t),_We=r(CCe," (Marian model)"),CCe.forEach(t),bWe=i(y),_m=n(y,"LI",{});var wCe=s(_m);Goe=n(wCe,"STRONG",{});var $Or=s(Goe);vWe=r($Or,"maskformer"),$Or.forEach(t),FWe=r(wCe," \u2014 "),Bk=n(wCe,"A",{href:!0});var kOr=s(Bk);TWe=r(kOr,"MaskFormerConfig"),kOr.forEach(t),MWe=r(wCe," (MaskFormer model)"),wCe.forEach(t),EWe=i(y),bm=n(y,"LI",{});var ACe=s(bm);Ooe=n(ACe,"STRONG",{});var SOr=s(Ooe);CWe=r(SOr,"mbart"),SOr.forEach(t),wWe=r(ACe," \u2014 "),Ik=n(ACe,"A",{href:!0});var ROr=s(Ik);AWe=r(ROr,"MBartConfig"),ROr.forEach(t),yWe=r(ACe," (mBART model)"),ACe.forEach(t),LWe=i(y),vm=n(y,"LI",{});var yCe=s(vm);Voe=n(yCe,"STRONG",{});var POr=s(Voe);xWe=r(POr,"megatron-bert"),POr.forEach(t),$We=r(yCe," \u2014 "),qk=n(yCe,"A",{href:!0});var BOr=s(qk);kWe=r(BOr,"MegatronBertConfig"),BOr.forEach(t),SWe=r(yCe," (MegatronBert model)"),yCe.forEach(t),RWe=i(y),Fm=n(y,"LI",{});var LCe=s(Fm);Xoe=n(LCe,"STRONG",{});var IOr=s(Xoe);PWe=r(IOr,"mobilebert"),IOr.forEach(t),BWe=r(LCe," \u2014 "),Nk=n(LCe,"A",{href:!0});var qOr=s(Nk);IWe=r(qOr,"MobileBertConfig"),qOr.forEach(t),qWe=r(LCe," (MobileBERT model)"),LCe.forEach(t),NWe=i(y),Tm=n(y,"LI",{});var xCe=s(Tm);zoe=n(xCe,"STRONG",{});var NOr=s(zoe);jWe=r(NOr,"mpnet"),NOr.forEach(t),DWe=r(xCe," \u2014 "),jk=n(xCe,"A",{href:!0});var jOr=s(jk);GWe=r(jOr,"MPNetConfig"),jOr.forEach(t),OWe=r(xCe," (MPNet model)"),xCe.forEach(t),VWe=i(y),Mm=n(y,"LI",{});var $Ce=s(Mm);Woe=n($Ce,"STRONG",{});var DOr=s(Woe);XWe=r(DOr,"mt5"),DOr.forEach(t),zWe=r($Ce," \u2014 "),Dk=n($Ce,"A",{href:!0});var GOr=s(Dk);WWe=r(GOr,"MT5Config"),GOr.forEach(t),QWe=r($Ce," (mT5 model)"),$Ce.forEach(t),HWe=i(y),Em=n(y,"LI",{});var kCe=s(Em);Qoe=n(kCe,"STRONG",{});var OOr=s(Qoe);UWe=r(OOr,"nystromformer"),OOr.forEach(t),JWe=r(kCe," \u2014 "),Gk=n(kCe,"A",{href:!0});var VOr=s(Gk);YWe=r(VOr,"NystromformerConfig"),VOr.forEach(t),KWe=r(kCe," (Nystromformer model)"),kCe.forEach(t),ZWe=i(y),Cm=n(y,"LI",{});var SCe=s(Cm);Hoe=n(SCe,"STRONG",{});var XOr=s(Hoe);eQe=r(XOr,"openai-gpt"),XOr.forEach(t),oQe=r(SCe," \u2014 "),Ok=n(SCe,"A",{href:!0});var zOr=s(Ok);rQe=r(zOr,"OpenAIGPTConfig"),zOr.forEach(t),tQe=r(SCe," (OpenAI GPT model)"),SCe.forEach(t),aQe=i(y),wm=n(y,"LI",{});var RCe=s(wm);Uoe=n(RCe,"STRONG",{});var WOr=s(Uoe);nQe=r(WOr,"opt"),WOr.forEach(t),sQe=r(RCe," \u2014 "),Vk=n(RCe,"A",{href:!0});var QOr=s(Vk);lQe=r(QOr,"OPTConfig"),QOr.forEach(t),iQe=r(RCe," (OPT model)"),RCe.forEach(t),dQe=i(y),Am=n(y,"LI",{});var PCe=s(Am);Joe=n(PCe,"STRONG",{});var HOr=s(Joe);cQe=r(HOr,"pegasus"),HOr.forEach(t),fQe=r(PCe," \u2014 "),Xk=n(PCe,"A",{href:!0});var UOr=s(Xk);mQe=r(UOr,"PegasusConfig"),UOr.forEach(t),gQe=r(PCe," (Pegasus model)"),PCe.forEach(t),hQe=i(y),ym=n(y,"LI",{});var BCe=s(ym);Yoe=n(BCe,"STRONG",{});var JOr=s(Yoe);pQe=r(JOr,"perceiver"),JOr.forEach(t),uQe=r(BCe," \u2014 "),zk=n(BCe,"A",{href:!0});var YOr=s(zk);_Qe=r(YOr,"PerceiverConfig"),YOr.forEach(t),bQe=r(BCe," (Perceiver model)"),BCe.forEach(t),vQe=i(y),Lm=n(y,"LI",{});var ICe=s(Lm);Koe=n(ICe,"STRONG",{});var KOr=s(Koe);FQe=r(KOr,"plbart"),KOr.forEach(t),TQe=r(ICe," \u2014 "),Wk=n(ICe,"A",{href:!0});var ZOr=s(Wk);MQe=r(ZOr,"PLBartConfig"),ZOr.forEach(t),EQe=r(ICe," (PLBart model)"),ICe.forEach(t),CQe=i(y),xm=n(y,"LI",{});var qCe=s(xm);Zoe=n(qCe,"STRONG",{});var eVr=s(Zoe);wQe=r(eVr,"poolformer"),eVr.forEach(t),AQe=r(qCe," \u2014 "),Qk=n(qCe,"A",{href:!0});var oVr=s(Qk);yQe=r(oVr,"PoolFormerConfig"),oVr.forEach(t),LQe=r(qCe," (PoolFormer model)"),qCe.forEach(t),xQe=i(y),$m=n(y,"LI",{});var NCe=s($m);ere=n(NCe,"STRONG",{});var rVr=s(ere);$Qe=r(rVr,"prophetnet"),rVr.forEach(t),kQe=r(NCe," \u2014 "),Hk=n(NCe,"A",{href:!0});var tVr=s(Hk);SQe=r(tVr,"ProphetNetConfig"),tVr.forEach(t),RQe=r(NCe," (ProphetNet model)"),NCe.forEach(t),PQe=i(y),km=n(y,"LI",{});var jCe=s(km);ore=n(jCe,"STRONG",{});var aVr=s(ore);BQe=r(aVr,"qdqbert"),aVr.forEach(t),IQe=r(jCe," \u2014 "),Uk=n(jCe,"A",{href:!0});var nVr=s(Uk);qQe=r(nVr,"QDQBertConfig"),nVr.forEach(t),NQe=r(jCe," (QDQBert model)"),jCe.forEach(t),jQe=i(y),Sm=n(y,"LI",{});var DCe=s(Sm);rre=n(DCe,"STRONG",{});var sVr=s(rre);DQe=r(sVr,"rag"),sVr.forEach(t),GQe=r(DCe," \u2014 "),Jk=n(DCe,"A",{href:!0});var lVr=s(Jk);OQe=r(lVr,"RagConfig"),lVr.forEach(t),VQe=r(DCe," (RAG model)"),DCe.forEach(t),XQe=i(y),Rm=n(y,"LI",{});var GCe=s(Rm);tre=n(GCe,"STRONG",{});var iVr=s(tre);zQe=r(iVr,"realm"),iVr.forEach(t),WQe=r(GCe," \u2014 "),Yk=n(GCe,"A",{href:!0});var dVr=s(Yk);QQe=r(dVr,"RealmConfig"),dVr.forEach(t),HQe=r(GCe," (Realm model)"),GCe.forEach(t),UQe=i(y),Pm=n(y,"LI",{});var OCe=s(Pm);are=n(OCe,"STRONG",{});var cVr=s(are);JQe=r(cVr,"reformer"),cVr.forEach(t),YQe=r(OCe," \u2014 "),Kk=n(OCe,"A",{href:!0});var fVr=s(Kk);KQe=r(fVr,"ReformerConfig"),fVr.forEach(t),ZQe=r(OCe," (Reformer model)"),OCe.forEach(t),eHe=i(y),Bm=n(y,"LI",{});var VCe=s(Bm);nre=n(VCe,"STRONG",{});var mVr=s(nre);oHe=r(mVr,"regnet"),mVr.forEach(t),rHe=r(VCe," \u2014 "),Zk=n(VCe,"A",{href:!0});var gVr=s(Zk);tHe=r(gVr,"RegNetConfig"),gVr.forEach(t),aHe=r(VCe," (RegNet model)"),VCe.forEach(t),nHe=i(y),Im=n(y,"LI",{});var XCe=s(Im);sre=n(XCe,"STRONG",{});var hVr=s(sre);sHe=r(hVr,"rembert"),hVr.forEach(t),lHe=r(XCe," \u2014 "),eS=n(XCe,"A",{href:!0});var pVr=s(eS);iHe=r(pVr,"RemBertConfig"),pVr.forEach(t),dHe=r(XCe," (RemBERT model)"),XCe.forEach(t),cHe=i(y),qm=n(y,"LI",{});var zCe=s(qm);lre=n(zCe,"STRONG",{});var uVr=s(lre);fHe=r(uVr,"resnet"),uVr.forEach(t),mHe=r(zCe," \u2014 "),oS=n(zCe,"A",{href:!0});var _Vr=s(oS);gHe=r(_Vr,"ResNetConfig"),_Vr.forEach(t),hHe=r(zCe," (ResNet model)"),zCe.forEach(t),pHe=i(y),Nm=n(y,"LI",{});var WCe=s(Nm);ire=n(WCe,"STRONG",{});var bVr=s(ire);uHe=r(bVr,"retribert"),bVr.forEach(t),_He=r(WCe," \u2014 "),rS=n(WCe,"A",{href:!0});var vVr=s(rS);bHe=r(vVr,"RetriBertConfig"),vVr.forEach(t),vHe=r(WCe," (RetriBERT model)"),WCe.forEach(t),FHe=i(y),jm=n(y,"LI",{});var QCe=s(jm);dre=n(QCe,"STRONG",{});var FVr=s(dre);THe=r(FVr,"roberta"),FVr.forEach(t),MHe=r(QCe," \u2014 "),tS=n(QCe,"A",{href:!0});var TVr=s(tS);EHe=r(TVr,"RobertaConfig"),TVr.forEach(t),CHe=r(QCe," (RoBERTa model)"),QCe.forEach(t),wHe=i(y),Dm=n(y,"LI",{});var HCe=s(Dm);cre=n(HCe,"STRONG",{});var MVr=s(cre);AHe=r(MVr,"roformer"),MVr.forEach(t),yHe=r(HCe," \u2014 "),aS=n(HCe,"A",{href:!0});var EVr=s(aS);LHe=r(EVr,"RoFormerConfig"),EVr.forEach(t),xHe=r(HCe," (RoFormer model)"),HCe.forEach(t),$He=i(y),Gm=n(y,"LI",{});var UCe=s(Gm);fre=n(UCe,"STRONG",{});var CVr=s(fre);kHe=r(CVr,"segformer"),CVr.forEach(t),SHe=r(UCe," \u2014 "),nS=n(UCe,"A",{href:!0});var wVr=s(nS);RHe=r(wVr,"SegformerConfig"),wVr.forEach(t),PHe=r(UCe," (SegFormer model)"),UCe.forEach(t),BHe=i(y),Om=n(y,"LI",{});var JCe=s(Om);mre=n(JCe,"STRONG",{});var AVr=s(mre);IHe=r(AVr,"sew"),AVr.forEach(t),qHe=r(JCe," \u2014 "),sS=n(JCe,"A",{href:!0});var yVr=s(sS);NHe=r(yVr,"SEWConfig"),yVr.forEach(t),jHe=r(JCe," (SEW model)"),JCe.forEach(t),DHe=i(y),Vm=n(y,"LI",{});var YCe=s(Vm);gre=n(YCe,"STRONG",{});var LVr=s(gre);GHe=r(LVr,"sew-d"),LVr.forEach(t),OHe=r(YCe," \u2014 "),lS=n(YCe,"A",{href:!0});var xVr=s(lS);VHe=r(xVr,"SEWDConfig"),xVr.forEach(t),XHe=r(YCe," (SEW-D model)"),YCe.forEach(t),zHe=i(y),Xm=n(y,"LI",{});var KCe=s(Xm);hre=n(KCe,"STRONG",{});var $Vr=s(hre);WHe=r($Vr,"speech-encoder-decoder"),$Vr.forEach(t),QHe=r(KCe," \u2014 "),iS=n(KCe,"A",{href:!0});var kVr=s(iS);HHe=r(kVr,"SpeechEncoderDecoderConfig"),kVr.forEach(t),UHe=r(KCe," (Speech Encoder decoder model)"),KCe.forEach(t),JHe=i(y),zm=n(y,"LI",{});var ZCe=s(zm);pre=n(ZCe,"STRONG",{});var SVr=s(pre);YHe=r(SVr,"speech_to_text"),SVr.forEach(t),KHe=r(ZCe," \u2014 "),dS=n(ZCe,"A",{href:!0});var RVr=s(dS);ZHe=r(RVr,"Speech2TextConfig"),RVr.forEach(t),eUe=r(ZCe," (Speech2Text model)"),ZCe.forEach(t),oUe=i(y),Wm=n(y,"LI",{});var e5e=s(Wm);ure=n(e5e,"STRONG",{});var PVr=s(ure);rUe=r(PVr,"speech_to_text_2"),PVr.forEach(t),tUe=r(e5e," \u2014 "),cS=n(e5e,"A",{href:!0});var BVr=s(cS);aUe=r(BVr,"Speech2Text2Config"),BVr.forEach(t),nUe=r(e5e," (Speech2Text2 model)"),e5e.forEach(t),sUe=i(y),Qm=n(y,"LI",{});var o5e=s(Qm);_re=n(o5e,"STRONG",{});var IVr=s(_re);lUe=r(IVr,"splinter"),IVr.forEach(t),iUe=r(o5e," \u2014 "),fS=n(o5e,"A",{href:!0});var qVr=s(fS);dUe=r(qVr,"SplinterConfig"),qVr.forEach(t),cUe=r(o5e," (Splinter model)"),o5e.forEach(t),fUe=i(y),Hm=n(y,"LI",{});var r5e=s(Hm);bre=n(r5e,"STRONG",{});var NVr=s(bre);mUe=r(NVr,"squeezebert"),NVr.forEach(t),gUe=r(r5e," \u2014 "),mS=n(r5e,"A",{href:!0});var jVr=s(mS);hUe=r(jVr,"SqueezeBertConfig"),jVr.forEach(t),pUe=r(r5e," (SqueezeBERT model)"),r5e.forEach(t),uUe=i(y),Um=n(y,"LI",{});var t5e=s(Um);vre=n(t5e,"STRONG",{});var DVr=s(vre);_Ue=r(DVr,"swin"),DVr.forEach(t),bUe=r(t5e," \u2014 "),gS=n(t5e,"A",{href:!0});var GVr=s(gS);vUe=r(GVr,"SwinConfig"),GVr.forEach(t),FUe=r(t5e," (Swin model)"),t5e.forEach(t),TUe=i(y),Jm=n(y,"LI",{});var a5e=s(Jm);Fre=n(a5e,"STRONG",{});var OVr=s(Fre);MUe=r(OVr,"t5"),OVr.forEach(t),EUe=r(a5e," \u2014 "),hS=n(a5e,"A",{href:!0});var VVr=s(hS);CUe=r(VVr,"T5Config"),VVr.forEach(t),wUe=r(a5e," (T5 model)"),a5e.forEach(t),AUe=i(y),Ym=n(y,"LI",{});var n5e=s(Ym);Tre=n(n5e,"STRONG",{});var XVr=s(Tre);yUe=r(XVr,"tapas"),XVr.forEach(t),LUe=r(n5e," \u2014 "),pS=n(n5e,"A",{href:!0});var zVr=s(pS);xUe=r(zVr,"TapasConfig"),zVr.forEach(t),$Ue=r(n5e," (TAPAS model)"),n5e.forEach(t),kUe=i(y),Km=n(y,"LI",{});var s5e=s(Km);Mre=n(s5e,"STRONG",{});var WVr=s(Mre);SUe=r(WVr,"transfo-xl"),WVr.forEach(t),RUe=r(s5e," \u2014 "),uS=n(s5e,"A",{href:!0});var QVr=s(uS);PUe=r(QVr,"TransfoXLConfig"),QVr.forEach(t),BUe=r(s5e," (Transformer-XL model)"),s5e.forEach(t),IUe=i(y),Zm=n(y,"LI",{});var l5e=s(Zm);Ere=n(l5e,"STRONG",{});var HVr=s(Ere);qUe=r(HVr,"trocr"),HVr.forEach(t),NUe=r(l5e," \u2014 "),_S=n(l5e,"A",{href:!0});var UVr=s(_S);jUe=r(UVr,"TrOCRConfig"),UVr.forEach(t),DUe=r(l5e," (TrOCR model)"),l5e.forEach(t),GUe=i(y),eg=n(y,"LI",{});var i5e=s(eg);Cre=n(i5e,"STRONG",{});var JVr=s(Cre);OUe=r(JVr,"unispeech"),JVr.forEach(t),VUe=r(i5e," \u2014 "),bS=n(i5e,"A",{href:!0});var YVr=s(bS);XUe=r(YVr,"UniSpeechConfig"),YVr.forEach(t),zUe=r(i5e," (UniSpeech model)"),i5e.forEach(t),WUe=i(y),og=n(y,"LI",{});var d5e=s(og);wre=n(d5e,"STRONG",{});var KVr=s(wre);QUe=r(KVr,"unispeech-sat"),KVr.forEach(t),HUe=r(d5e," \u2014 "),vS=n(d5e,"A",{href:!0});var ZVr=s(vS);UUe=r(ZVr,"UniSpeechSatConfig"),ZVr.forEach(t),JUe=r(d5e," (UniSpeechSat model)"),d5e.forEach(t),YUe=i(y),rg=n(y,"LI",{});var c5e=s(rg);Are=n(c5e,"STRONG",{});var eXr=s(Are);KUe=r(eXr,"van"),eXr.forEach(t),ZUe=r(c5e," \u2014 "),FS=n(c5e,"A",{href:!0});var oXr=s(FS);eJe=r(oXr,"VanConfig"),oXr.forEach(t),oJe=r(c5e," (VAN model)"),c5e.forEach(t),rJe=i(y),tg=n(y,"LI",{});var f5e=s(tg);yre=n(f5e,"STRONG",{});var rXr=s(yre);tJe=r(rXr,"vilt"),rXr.forEach(t),aJe=r(f5e," \u2014 "),TS=n(f5e,"A",{href:!0});var tXr=s(TS);nJe=r(tXr,"ViltConfig"),tXr.forEach(t),sJe=r(f5e," (ViLT model)"),f5e.forEach(t),lJe=i(y),ag=n(y,"LI",{});var m5e=s(ag);Lre=n(m5e,"STRONG",{});var aXr=s(Lre);iJe=r(aXr,"vision-encoder-decoder"),aXr.forEach(t),dJe=r(m5e," \u2014 "),MS=n(m5e,"A",{href:!0});var nXr=s(MS);cJe=r(nXr,"VisionEncoderDecoderConfig"),nXr.forEach(t),fJe=r(m5e," (Vision Encoder decoder model)"),m5e.forEach(t),mJe=i(y),ng=n(y,"LI",{});var g5e=s(ng);xre=n(g5e,"STRONG",{});var sXr=s(xre);gJe=r(sXr,"vision-text-dual-encoder"),sXr.forEach(t),hJe=r(g5e," \u2014 "),ES=n(g5e,"A",{href:!0});var lXr=s(ES);pJe=r(lXr,"VisionTextDualEncoderConfig"),lXr.forEach(t),uJe=r(g5e," (VisionTextDualEncoder model)"),g5e.forEach(t),_Je=i(y),sg=n(y,"LI",{});var h5e=s(sg);$re=n(h5e,"STRONG",{});var iXr=s($re);bJe=r(iXr,"visual_bert"),iXr.forEach(t),vJe=r(h5e," \u2014 "),CS=n(h5e,"A",{href:!0});var dXr=s(CS);FJe=r(dXr,"VisualBertConfig"),dXr.forEach(t),TJe=r(h5e," (VisualBert model)"),h5e.forEach(t),MJe=i(y),lg=n(y,"LI",{});var p5e=s(lg);kre=n(p5e,"STRONG",{});var cXr=s(kre);EJe=r(cXr,"vit"),cXr.forEach(t),CJe=r(p5e," \u2014 "),wS=n(p5e,"A",{href:!0});var fXr=s(wS);wJe=r(fXr,"ViTConfig"),fXr.forEach(t),AJe=r(p5e," (ViT model)"),p5e.forEach(t),yJe=i(y),ig=n(y,"LI",{});var u5e=s(ig);Sre=n(u5e,"STRONG",{});var mXr=s(Sre);LJe=r(mXr,"vit_mae"),mXr.forEach(t),xJe=r(u5e," \u2014 "),AS=n(u5e,"A",{href:!0});var gXr=s(AS);$Je=r(gXr,"ViTMAEConfig"),gXr.forEach(t),kJe=r(u5e," (ViTMAE model)"),u5e.forEach(t),SJe=i(y),dg=n(y,"LI",{});var _5e=s(dg);Rre=n(_5e,"STRONG",{});var hXr=s(Rre);RJe=r(hXr,"wav2vec2"),hXr.forEach(t),PJe=r(_5e," \u2014 "),yS=n(_5e,"A",{href:!0});var pXr=s(yS);BJe=r(pXr,"Wav2Vec2Config"),pXr.forEach(t),IJe=r(_5e," (Wav2Vec2 model)"),_5e.forEach(t),qJe=i(y),cg=n(y,"LI",{});var b5e=s(cg);Pre=n(b5e,"STRONG",{});var uXr=s(Pre);NJe=r(uXr,"wav2vec2-conformer"),uXr.forEach(t),jJe=r(b5e," \u2014 "),LS=n(b5e,"A",{href:!0});var _Xr=s(LS);DJe=r(_Xr,"Wav2Vec2ConformerConfig"),_Xr.forEach(t),GJe=r(b5e," (Wav2Vec2-Conformer model)"),b5e.forEach(t),OJe=i(y),fg=n(y,"LI",{});var v5e=s(fg);Bre=n(v5e,"STRONG",{});var bXr=s(Bre);VJe=r(bXr,"wavlm"),bXr.forEach(t),XJe=r(v5e," \u2014 "),xS=n(v5e,"A",{href:!0});var vXr=s(xS);zJe=r(vXr,"WavLMConfig"),vXr.forEach(t),WJe=r(v5e," (WavLM model)"),v5e.forEach(t),QJe=i(y),mg=n(y,"LI",{});var F5e=s(mg);Ire=n(F5e,"STRONG",{});var FXr=s(Ire);HJe=r(FXr,"xglm"),FXr.forEach(t),UJe=r(F5e," \u2014 "),$S=n(F5e,"A",{href:!0});var TXr=s($S);JJe=r(TXr,"XGLMConfig"),TXr.forEach(t),YJe=r(F5e," (XGLM model)"),F5e.forEach(t),KJe=i(y),gg=n(y,"LI",{});var T5e=s(gg);qre=n(T5e,"STRONG",{});var MXr=s(qre);ZJe=r(MXr,"xlm"),MXr.forEach(t),eYe=r(T5e," \u2014 "),kS=n(T5e,"A",{href:!0});var EXr=s(kS);oYe=r(EXr,"XLMConfig"),EXr.forEach(t),rYe=r(T5e," (XLM model)"),T5e.forEach(t),tYe=i(y),hg=n(y,"LI",{});var M5e=s(hg);Nre=n(M5e,"STRONG",{});var CXr=s(Nre);aYe=r(CXr,"xlm-prophetnet"),CXr.forEach(t),nYe=r(M5e," \u2014 "),SS=n(M5e,"A",{href:!0});var wXr=s(SS);sYe=r(wXr,"XLMProphetNetConfig"),wXr.forEach(t),lYe=r(M5e," (XLMProphetNet model)"),M5e.forEach(t),iYe=i(y),pg=n(y,"LI",{});var E5e=s(pg);jre=n(E5e,"STRONG",{});var AXr=s(jre);dYe=r(AXr,"xlm-roberta"),AXr.forEach(t),cYe=r(E5e," \u2014 "),RS=n(E5e,"A",{href:!0});var yXr=s(RS);fYe=r(yXr,"XLMRobertaConfig"),yXr.forEach(t),mYe=r(E5e," (XLM-RoBERTa model)"),E5e.forEach(t),gYe=i(y),ug=n(y,"LI",{});var C5e=s(ug);Dre=n(C5e,"STRONG",{});var LXr=s(Dre);hYe=r(LXr,"xlm-roberta-xl"),LXr.forEach(t),pYe=r(C5e," \u2014 "),PS=n(C5e,"A",{href:!0});var xXr=s(PS);uYe=r(xXr,"XLMRobertaXLConfig"),xXr.forEach(t),_Ye=r(C5e," (XLM-RoBERTa-XL model)"),C5e.forEach(t),bYe=i(y),_g=n(y,"LI",{});var w5e=s(_g);Gre=n(w5e,"STRONG",{});var $Xr=s(Gre);vYe=r($Xr,"xlnet"),$Xr.forEach(t),FYe=r(w5e," \u2014 "),BS=n(w5e,"A",{href:!0});var kXr=s(BS);TYe=r(kXr,"XLNetConfig"),kXr.forEach(t),MYe=r(w5e," (XLNet model)"),w5e.forEach(t),EYe=i(y),bg=n(y,"LI",{});var A5e=s(bg);Ore=n(A5e,"STRONG",{});var SXr=s(Ore);CYe=r(SXr,"yolos"),SXr.forEach(t),wYe=r(A5e," \u2014 "),IS=n(A5e,"A",{href:!0});var RXr=s(IS);AYe=r(RXr,"YolosConfig"),RXr.forEach(t),yYe=r(A5e," (YOLOS model)"),A5e.forEach(t),LYe=i(y),vg=n(y,"LI",{});var y5e=s(vg);Vre=n(y5e,"STRONG",{});var PXr=s(Vre);xYe=r(PXr,"yoso"),PXr.forEach(t),$Ye=r(y5e," \u2014 "),qS=n(y5e,"A",{href:!0});var BXr=s(qS);kYe=r(BXr,"YosoConfig"),BXr.forEach(t),SYe=r(y5e," (YOSO model)"),y5e.forEach(t),y.forEach(t),RYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),PYe=i(et),Tg=n(et,"DIV",{class:!0});var ije=s(Tg);T(MA.$$.fragment,ije),BYe=i(ije),Xre=n(ije,"P",{});var IXr=s(Xre);IYe=r(IXr,"Register a new configuration for this class."),IXr.forEach(t),ije.forEach(t),et.forEach(t),fqe=i(f),Ti=n(f,"H2",{class:!0});var dje=s(Ti);Mg=n(dje,"A",{id:!0,class:!0,href:!0});var qXr=s(Mg);zre=n(qXr,"SPAN",{});var NXr=s(zre);T(EA.$$.fragment,NXr),NXr.forEach(t),qXr.forEach(t),qYe=i(dje),Wre=n(dje,"SPAN",{});var jXr=s(Wre);NYe=r(jXr,"AutoTokenizer"),jXr.forEach(t),dje.forEach(t),mqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(CA.$$.fragment,qs),jYe=i(qs),wA=n(qs,"P",{});var cje=s(wA);DYe=r(cje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),NS=n(cje,"A",{href:!0});var DXr=s(NS);GYe=r(DXr,"AutoTokenizer.from_pretrained()"),DXr.forEach(t),OYe=r(cje," class method."),cje.forEach(t),VYe=i(qs),AA=n(qs,"P",{});var fje=s(AA);XYe=r(fje,"This class cannot be instantiated directly using "),Qre=n(fje,"CODE",{});var GXr=s(Qre);zYe=r(GXr,"__init__()"),GXr.forEach(t),WYe=r(fje," (throws an error)."),fje.forEach(t),QYe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(yA.$$.fragment,Ns),HYe=i(Ns),Hre=n(Ns,"P",{});var OXr=s(Hre);UYe=r(OXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),OXr.forEach(t),JYe=i(Ns),Aa=n(Ns,"P",{});var _3=s(Aa);YYe=r(_3,"The tokenizer class to instantiate is selected based on the "),Ure=n(_3,"CODE",{});var VXr=s(Ure);KYe=r(VXr,"model_type"),VXr.forEach(t),ZYe=r(_3,` property of the config object (either
passed as an argument or loaded from `),Jre=n(_3,"CODE",{});var XXr=s(Jre);eKe=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),oKe=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yre=n(_3,"CODE",{});var zXr=s(Yre);rKe=r(zXr,"pretrained_model_name_or_path"),zXr.forEach(t),tKe=r(_3,":"),_3.forEach(t),aKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Lx=s(Sn);Kre=n(Lx,"STRONG",{});var WXr=s(Kre);nKe=r(WXr,"albert"),WXr.forEach(t),sKe=r(Lx," \u2014 "),jS=n(Lx,"A",{href:!0});var QXr=s(jS);lKe=r(QXr,"AlbertTokenizer"),QXr.forEach(t),iKe=r(Lx," or "),DS=n(Lx,"A",{href:!0});var HXr=s(DS);dKe=r(HXr,"AlbertTokenizerFast"),HXr.forEach(t),cKe=r(Lx," (ALBERT model)"),Lx.forEach(t),fKe=i(S),Rn=n(S,"LI",{});var xx=s(Rn);Zre=n(xx,"STRONG",{});var UXr=s(Zre);mKe=r(UXr,"bart"),UXr.forEach(t),gKe=r(xx," \u2014 "),GS=n(xx,"A",{href:!0});var JXr=s(GS);hKe=r(JXr,"BartTokenizer"),JXr.forEach(t),pKe=r(xx," or "),OS=n(xx,"A",{href:!0});var YXr=s(OS);uKe=r(YXr,"BartTokenizerFast"),YXr.forEach(t),_Ke=r(xx," (BART model)"),xx.forEach(t),bKe=i(S),Pn=n(S,"LI",{});var $x=s(Pn);ete=n($x,"STRONG",{});var KXr=s(ete);vKe=r(KXr,"barthez"),KXr.forEach(t),FKe=r($x," \u2014 "),VS=n($x,"A",{href:!0});var ZXr=s(VS);TKe=r(ZXr,"BarthezTokenizer"),ZXr.forEach(t),MKe=r($x," or "),XS=n($x,"A",{href:!0});var ezr=s(XS);EKe=r(ezr,"BarthezTokenizerFast"),ezr.forEach(t),CKe=r($x," (BARThez model)"),$x.forEach(t),wKe=i(S),Eg=n(S,"LI",{});var L5e=s(Eg);ote=n(L5e,"STRONG",{});var ozr=s(ote);AKe=r(ozr,"bartpho"),ozr.forEach(t),yKe=r(L5e," \u2014 "),zS=n(L5e,"A",{href:!0});var rzr=s(zS);LKe=r(rzr,"BartphoTokenizer"),rzr.forEach(t),xKe=r(L5e," (BARTpho model)"),L5e.forEach(t),$Ke=i(S),Bn=n(S,"LI",{});var kx=s(Bn);rte=n(kx,"STRONG",{});var tzr=s(rte);kKe=r(tzr,"bert"),tzr.forEach(t),SKe=r(kx," \u2014 "),WS=n(kx,"A",{href:!0});var azr=s(WS);RKe=r(azr,"BertTokenizer"),azr.forEach(t),PKe=r(kx," or "),QS=n(kx,"A",{href:!0});var nzr=s(QS);BKe=r(nzr,"BertTokenizerFast"),nzr.forEach(t),IKe=r(kx," (BERT model)"),kx.forEach(t),qKe=i(S),Cg=n(S,"LI",{});var x5e=s(Cg);tte=n(x5e,"STRONG",{});var szr=s(tte);NKe=r(szr,"bert-generation"),szr.forEach(t),jKe=r(x5e," \u2014 "),HS=n(x5e,"A",{href:!0});var lzr=s(HS);DKe=r(lzr,"BertGenerationTokenizer"),lzr.forEach(t),GKe=r(x5e," (Bert Generation model)"),x5e.forEach(t),OKe=i(S),wg=n(S,"LI",{});var $5e=s(wg);ate=n($5e,"STRONG",{});var izr=s(ate);VKe=r(izr,"bert-japanese"),izr.forEach(t),XKe=r($5e," \u2014 "),US=n($5e,"A",{href:!0});var dzr=s(US);zKe=r(dzr,"BertJapaneseTokenizer"),dzr.forEach(t),WKe=r($5e," (BertJapanese model)"),$5e.forEach(t),QKe=i(S),Ag=n(S,"LI",{});var k5e=s(Ag);nte=n(k5e,"STRONG",{});var czr=s(nte);HKe=r(czr,"bertweet"),czr.forEach(t),UKe=r(k5e," \u2014 "),JS=n(k5e,"A",{href:!0});var fzr=s(JS);JKe=r(fzr,"BertweetTokenizer"),fzr.forEach(t),YKe=r(k5e," (Bertweet model)"),k5e.forEach(t),KKe=i(S),In=n(S,"LI",{});var Sx=s(In);ste=n(Sx,"STRONG",{});var mzr=s(ste);ZKe=r(mzr,"big_bird"),mzr.forEach(t),eZe=r(Sx," \u2014 "),YS=n(Sx,"A",{href:!0});var gzr=s(YS);oZe=r(gzr,"BigBirdTokenizer"),gzr.forEach(t),rZe=r(Sx," or "),KS=n(Sx,"A",{href:!0});var hzr=s(KS);tZe=r(hzr,"BigBirdTokenizerFast"),hzr.forEach(t),aZe=r(Sx," (BigBird model)"),Sx.forEach(t),nZe=i(S),qn=n(S,"LI",{});var Rx=s(qn);lte=n(Rx,"STRONG",{});var pzr=s(lte);sZe=r(pzr,"bigbird_pegasus"),pzr.forEach(t),lZe=r(Rx," \u2014 "),ZS=n(Rx,"A",{href:!0});var uzr=s(ZS);iZe=r(uzr,"PegasusTokenizer"),uzr.forEach(t),dZe=r(Rx," or "),eR=n(Rx,"A",{href:!0});var _zr=s(eR);cZe=r(_zr,"PegasusTokenizerFast"),_zr.forEach(t),fZe=r(Rx," (BigBirdPegasus model)"),Rx.forEach(t),mZe=i(S),Nn=n(S,"LI",{});var Px=s(Nn);ite=n(Px,"STRONG",{});var bzr=s(ite);gZe=r(bzr,"blenderbot"),bzr.forEach(t),hZe=r(Px," \u2014 "),oR=n(Px,"A",{href:!0});var vzr=s(oR);pZe=r(vzr,"BlenderbotTokenizer"),vzr.forEach(t),uZe=r(Px," or "),rR=n(Px,"A",{href:!0});var Fzr=s(rR);_Ze=r(Fzr,"BlenderbotTokenizerFast"),Fzr.forEach(t),bZe=r(Px," (Blenderbot model)"),Px.forEach(t),vZe=i(S),yg=n(S,"LI",{});var S5e=s(yg);dte=n(S5e,"STRONG",{});var Tzr=s(dte);FZe=r(Tzr,"blenderbot-small"),Tzr.forEach(t),TZe=r(S5e," \u2014 "),tR=n(S5e,"A",{href:!0});var Mzr=s(tR);MZe=r(Mzr,"BlenderbotSmallTokenizer"),Mzr.forEach(t),EZe=r(S5e," (BlenderbotSmall model)"),S5e.forEach(t),CZe=i(S),Lg=n(S,"LI",{});var R5e=s(Lg);cte=n(R5e,"STRONG",{});var Ezr=s(cte);wZe=r(Ezr,"byt5"),Ezr.forEach(t),AZe=r(R5e," \u2014 "),aR=n(R5e,"A",{href:!0});var Czr=s(aR);yZe=r(Czr,"ByT5Tokenizer"),Czr.forEach(t),LZe=r(R5e," (ByT5 model)"),R5e.forEach(t),xZe=i(S),jn=n(S,"LI",{});var Bx=s(jn);fte=n(Bx,"STRONG",{});var wzr=s(fte);$Ze=r(wzr,"camembert"),wzr.forEach(t),kZe=r(Bx," \u2014 "),nR=n(Bx,"A",{href:!0});var Azr=s(nR);SZe=r(Azr,"CamembertTokenizer"),Azr.forEach(t),RZe=r(Bx," or "),sR=n(Bx,"A",{href:!0});var yzr=s(sR);PZe=r(yzr,"CamembertTokenizerFast"),yzr.forEach(t),BZe=r(Bx," (CamemBERT model)"),Bx.forEach(t),IZe=i(S),xg=n(S,"LI",{});var P5e=s(xg);mte=n(P5e,"STRONG",{});var Lzr=s(mte);qZe=r(Lzr,"canine"),Lzr.forEach(t),NZe=r(P5e," \u2014 "),lR=n(P5e,"A",{href:!0});var xzr=s(lR);jZe=r(xzr,"CanineTokenizer"),xzr.forEach(t),DZe=r(P5e," (Canine model)"),P5e.forEach(t),GZe=i(S),Dn=n(S,"LI",{});var Ix=s(Dn);gte=n(Ix,"STRONG",{});var $zr=s(gte);OZe=r($zr,"clip"),$zr.forEach(t),VZe=r(Ix," \u2014 "),iR=n(Ix,"A",{href:!0});var kzr=s(iR);XZe=r(kzr,"CLIPTokenizer"),kzr.forEach(t),zZe=r(Ix," or "),dR=n(Ix,"A",{href:!0});var Szr=s(dR);WZe=r(Szr,"CLIPTokenizerFast"),Szr.forEach(t),QZe=r(Ix," (CLIP model)"),Ix.forEach(t),HZe=i(S),Gn=n(S,"LI",{});var qx=s(Gn);hte=n(qx,"STRONG",{});var Rzr=s(hte);UZe=r(Rzr,"convbert"),Rzr.forEach(t),JZe=r(qx," \u2014 "),cR=n(qx,"A",{href:!0});var Pzr=s(cR);YZe=r(Pzr,"ConvBertTokenizer"),Pzr.forEach(t),KZe=r(qx," or "),fR=n(qx,"A",{href:!0});var Bzr=s(fR);ZZe=r(Bzr,"ConvBertTokenizerFast"),Bzr.forEach(t),eeo=r(qx," (ConvBERT model)"),qx.forEach(t),oeo=i(S),On=n(S,"LI",{});var Nx=s(On);pte=n(Nx,"STRONG",{});var Izr=s(pte);reo=r(Izr,"cpm"),Izr.forEach(t),teo=r(Nx," \u2014 "),mR=n(Nx,"A",{href:!0});var qzr=s(mR);aeo=r(qzr,"CpmTokenizer"),qzr.forEach(t),neo=r(Nx," or "),gR=n(Nx,"A",{href:!0});var Nzr=s(gR);seo=r(Nzr,"CpmTokenizerFast"),Nzr.forEach(t),leo=r(Nx," (CPM model)"),Nx.forEach(t),ieo=i(S),$g=n(S,"LI",{});var B5e=s($g);ute=n(B5e,"STRONG",{});var jzr=s(ute);deo=r(jzr,"ctrl"),jzr.forEach(t),ceo=r(B5e," \u2014 "),hR=n(B5e,"A",{href:!0});var Dzr=s(hR);feo=r(Dzr,"CTRLTokenizer"),Dzr.forEach(t),meo=r(B5e," (CTRL model)"),B5e.forEach(t),geo=i(S),Vn=n(S,"LI",{});var jx=s(Vn);_te=n(jx,"STRONG",{});var Gzr=s(_te);heo=r(Gzr,"data2vec-text"),Gzr.forEach(t),peo=r(jx," \u2014 "),pR=n(jx,"A",{href:!0});var Ozr=s(pR);ueo=r(Ozr,"RobertaTokenizer"),Ozr.forEach(t),_eo=r(jx," or "),uR=n(jx,"A",{href:!0});var Vzr=s(uR);beo=r(Vzr,"RobertaTokenizerFast"),Vzr.forEach(t),veo=r(jx," (Data2VecText model)"),jx.forEach(t),Feo=i(S),Xn=n(S,"LI",{});var Dx=s(Xn);bte=n(Dx,"STRONG",{});var Xzr=s(bte);Teo=r(Xzr,"deberta"),Xzr.forEach(t),Meo=r(Dx," \u2014 "),_R=n(Dx,"A",{href:!0});var zzr=s(_R);Eeo=r(zzr,"DebertaTokenizer"),zzr.forEach(t),Ceo=r(Dx," or "),bR=n(Dx,"A",{href:!0});var Wzr=s(bR);weo=r(Wzr,"DebertaTokenizerFast"),Wzr.forEach(t),Aeo=r(Dx," (DeBERTa model)"),Dx.forEach(t),yeo=i(S),zn=n(S,"LI",{});var Gx=s(zn);vte=n(Gx,"STRONG",{});var Qzr=s(vte);Leo=r(Qzr,"deberta-v2"),Qzr.forEach(t),xeo=r(Gx," \u2014 "),vR=n(Gx,"A",{href:!0});var Hzr=s(vR);$eo=r(Hzr,"DebertaV2Tokenizer"),Hzr.forEach(t),keo=r(Gx," or "),FR=n(Gx,"A",{href:!0});var Uzr=s(FR);Seo=r(Uzr,"DebertaV2TokenizerFast"),Uzr.forEach(t),Reo=r(Gx," (DeBERTa-v2 model)"),Gx.forEach(t),Peo=i(S),Wn=n(S,"LI",{});var Ox=s(Wn);Fte=n(Ox,"STRONG",{});var Jzr=s(Fte);Beo=r(Jzr,"distilbert"),Jzr.forEach(t),Ieo=r(Ox," \u2014 "),TR=n(Ox,"A",{href:!0});var Yzr=s(TR);qeo=r(Yzr,"DistilBertTokenizer"),Yzr.forEach(t),Neo=r(Ox," or "),MR=n(Ox,"A",{href:!0});var Kzr=s(MR);jeo=r(Kzr,"DistilBertTokenizerFast"),Kzr.forEach(t),Deo=r(Ox," (DistilBERT model)"),Ox.forEach(t),Geo=i(S),Qn=n(S,"LI",{});var Vx=s(Qn);Tte=n(Vx,"STRONG",{});var Zzr=s(Tte);Oeo=r(Zzr,"dpr"),Zzr.forEach(t),Veo=r(Vx," \u2014 "),ER=n(Vx,"A",{href:!0});var eWr=s(ER);Xeo=r(eWr,"DPRQuestionEncoderTokenizer"),eWr.forEach(t),zeo=r(Vx," or "),CR=n(Vx,"A",{href:!0});var oWr=s(CR);Weo=r(oWr,"DPRQuestionEncoderTokenizerFast"),oWr.forEach(t),Qeo=r(Vx," (DPR model)"),Vx.forEach(t),Heo=i(S),Hn=n(S,"LI",{});var Xx=s(Hn);Mte=n(Xx,"STRONG",{});var rWr=s(Mte);Ueo=r(rWr,"electra"),rWr.forEach(t),Jeo=r(Xx," \u2014 "),wR=n(Xx,"A",{href:!0});var tWr=s(wR);Yeo=r(tWr,"ElectraTokenizer"),tWr.forEach(t),Keo=r(Xx," or "),AR=n(Xx,"A",{href:!0});var aWr=s(AR);Zeo=r(aWr,"ElectraTokenizerFast"),aWr.forEach(t),eoo=r(Xx," (ELECTRA model)"),Xx.forEach(t),ooo=i(S),kg=n(S,"LI",{});var I5e=s(kg);Ete=n(I5e,"STRONG",{});var nWr=s(Ete);roo=r(nWr,"flaubert"),nWr.forEach(t),too=r(I5e," \u2014 "),yR=n(I5e,"A",{href:!0});var sWr=s(yR);aoo=r(sWr,"FlaubertTokenizer"),sWr.forEach(t),noo=r(I5e," (FlauBERT model)"),I5e.forEach(t),soo=i(S),Un=n(S,"LI",{});var zx=s(Un);Cte=n(zx,"STRONG",{});var lWr=s(Cte);loo=r(lWr,"fnet"),lWr.forEach(t),ioo=r(zx," \u2014 "),LR=n(zx,"A",{href:!0});var iWr=s(LR);doo=r(iWr,"FNetTokenizer"),iWr.forEach(t),coo=r(zx," or "),xR=n(zx,"A",{href:!0});var dWr=s(xR);foo=r(dWr,"FNetTokenizerFast"),dWr.forEach(t),moo=r(zx," (FNet model)"),zx.forEach(t),goo=i(S),Sg=n(S,"LI",{});var q5e=s(Sg);wte=n(q5e,"STRONG",{});var cWr=s(wte);hoo=r(cWr,"fsmt"),cWr.forEach(t),poo=r(q5e," \u2014 "),$R=n(q5e,"A",{href:!0});var fWr=s($R);uoo=r(fWr,"FSMTTokenizer"),fWr.forEach(t),_oo=r(q5e," (FairSeq Machine-Translation model)"),q5e.forEach(t),boo=i(S),Jn=n(S,"LI",{});var Wx=s(Jn);Ate=n(Wx,"STRONG",{});var mWr=s(Ate);voo=r(mWr,"funnel"),mWr.forEach(t),Foo=r(Wx," \u2014 "),kR=n(Wx,"A",{href:!0});var gWr=s(kR);Too=r(gWr,"FunnelTokenizer"),gWr.forEach(t),Moo=r(Wx," or "),SR=n(Wx,"A",{href:!0});var hWr=s(SR);Eoo=r(hWr,"FunnelTokenizerFast"),hWr.forEach(t),Coo=r(Wx," (Funnel Transformer model)"),Wx.forEach(t),woo=i(S),Yn=n(S,"LI",{});var Qx=s(Yn);yte=n(Qx,"STRONG",{});var pWr=s(yte);Aoo=r(pWr,"gpt2"),pWr.forEach(t),yoo=r(Qx," \u2014 "),RR=n(Qx,"A",{href:!0});var uWr=s(RR);Loo=r(uWr,"GPT2Tokenizer"),uWr.forEach(t),xoo=r(Qx," or "),PR=n(Qx,"A",{href:!0});var _Wr=s(PR);$oo=r(_Wr,"GPT2TokenizerFast"),_Wr.forEach(t),koo=r(Qx," (OpenAI GPT-2 model)"),Qx.forEach(t),Soo=i(S),Kn=n(S,"LI",{});var Hx=s(Kn);Lte=n(Hx,"STRONG",{});var bWr=s(Lte);Roo=r(bWr,"gpt_neo"),bWr.forEach(t),Poo=r(Hx," \u2014 "),BR=n(Hx,"A",{href:!0});var vWr=s(BR);Boo=r(vWr,"GPT2Tokenizer"),vWr.forEach(t),Ioo=r(Hx," or "),IR=n(Hx,"A",{href:!0});var FWr=s(IR);qoo=r(FWr,"GPT2TokenizerFast"),FWr.forEach(t),Noo=r(Hx," (GPT Neo model)"),Hx.forEach(t),joo=i(S),Zn=n(S,"LI",{});var Ux=s(Zn);xte=n(Ux,"STRONG",{});var TWr=s(xte);Doo=r(TWr,"gptj"),TWr.forEach(t),Goo=r(Ux," \u2014 "),qR=n(Ux,"A",{href:!0});var MWr=s(qR);Ooo=r(MWr,"GPT2Tokenizer"),MWr.forEach(t),Voo=r(Ux," or "),NR=n(Ux,"A",{href:!0});var EWr=s(NR);Xoo=r(EWr,"GPT2TokenizerFast"),EWr.forEach(t),zoo=r(Ux," (GPT-J model)"),Ux.forEach(t),Woo=i(S),es=n(S,"LI",{});var Jx=s(es);$te=n(Jx,"STRONG",{});var CWr=s($te);Qoo=r(CWr,"herbert"),CWr.forEach(t),Hoo=r(Jx," \u2014 "),jR=n(Jx,"A",{href:!0});var wWr=s(jR);Uoo=r(wWr,"HerbertTokenizer"),wWr.forEach(t),Joo=r(Jx," or "),DR=n(Jx,"A",{href:!0});var AWr=s(DR);Yoo=r(AWr,"HerbertTokenizerFast"),AWr.forEach(t),Koo=r(Jx," (HerBERT model)"),Jx.forEach(t),Zoo=i(S),Rg=n(S,"LI",{});var N5e=s(Rg);kte=n(N5e,"STRONG",{});var yWr=s(kte);ero=r(yWr,"hubert"),yWr.forEach(t),oro=r(N5e," \u2014 "),GR=n(N5e,"A",{href:!0});var LWr=s(GR);rro=r(LWr,"Wav2Vec2CTCTokenizer"),LWr.forEach(t),tro=r(N5e," (Hubert model)"),N5e.forEach(t),aro=i(S),os=n(S,"LI",{});var Yx=s(os);Ste=n(Yx,"STRONG",{});var xWr=s(Ste);nro=r(xWr,"ibert"),xWr.forEach(t),sro=r(Yx," \u2014 "),OR=n(Yx,"A",{href:!0});var $Wr=s(OR);lro=r($Wr,"RobertaTokenizer"),$Wr.forEach(t),iro=r(Yx," or "),VR=n(Yx,"A",{href:!0});var kWr=s(VR);dro=r(kWr,"RobertaTokenizerFast"),kWr.forEach(t),cro=r(Yx," (I-BERT model)"),Yx.forEach(t),fro=i(S),rs=n(S,"LI",{});var Kx=s(rs);Rte=n(Kx,"STRONG",{});var SWr=s(Rte);mro=r(SWr,"layoutlm"),SWr.forEach(t),gro=r(Kx," \u2014 "),XR=n(Kx,"A",{href:!0});var RWr=s(XR);hro=r(RWr,"LayoutLMTokenizer"),RWr.forEach(t),pro=r(Kx," or "),zR=n(Kx,"A",{href:!0});var PWr=s(zR);uro=r(PWr,"LayoutLMTokenizerFast"),PWr.forEach(t),_ro=r(Kx," (LayoutLM model)"),Kx.forEach(t),bro=i(S),ts=n(S,"LI",{});var Zx=s(ts);Pte=n(Zx,"STRONG",{});var BWr=s(Pte);vro=r(BWr,"layoutlmv2"),BWr.forEach(t),Fro=r(Zx," \u2014 "),WR=n(Zx,"A",{href:!0});var IWr=s(WR);Tro=r(IWr,"LayoutLMv2Tokenizer"),IWr.forEach(t),Mro=r(Zx," or "),QR=n(Zx,"A",{href:!0});var qWr=s(QR);Ero=r(qWr,"LayoutLMv2TokenizerFast"),qWr.forEach(t),Cro=r(Zx," (LayoutLMv2 model)"),Zx.forEach(t),wro=i(S),as=n(S,"LI",{});var e$=s(as);Bte=n(e$,"STRONG",{});var NWr=s(Bte);Aro=r(NWr,"layoutlmv3"),NWr.forEach(t),yro=r(e$," \u2014 "),HR=n(e$,"A",{href:!0});var jWr=s(HR);Lro=r(jWr,"LayoutLMv3Tokenizer"),jWr.forEach(t),xro=r(e$," or "),UR=n(e$,"A",{href:!0});var DWr=s(UR);$ro=r(DWr,"LayoutLMv3TokenizerFast"),DWr.forEach(t),kro=r(e$," (LayoutLMv3 model)"),e$.forEach(t),Sro=i(S),ns=n(S,"LI",{});var o$=s(ns);Ite=n(o$,"STRONG",{});var GWr=s(Ite);Rro=r(GWr,"layoutxlm"),GWr.forEach(t),Pro=r(o$," \u2014 "),JR=n(o$,"A",{href:!0});var OWr=s(JR);Bro=r(OWr,"LayoutXLMTokenizer"),OWr.forEach(t),Iro=r(o$," or "),YR=n(o$,"A",{href:!0});var VWr=s(YR);qro=r(VWr,"LayoutXLMTokenizerFast"),VWr.forEach(t),Nro=r(o$," (LayoutXLM model)"),o$.forEach(t),jro=i(S),ss=n(S,"LI",{});var r$=s(ss);qte=n(r$,"STRONG",{});var XWr=s(qte);Dro=r(XWr,"led"),XWr.forEach(t),Gro=r(r$," \u2014 "),KR=n(r$,"A",{href:!0});var zWr=s(KR);Oro=r(zWr,"LEDTokenizer"),zWr.forEach(t),Vro=r(r$," or "),ZR=n(r$,"A",{href:!0});var WWr=s(ZR);Xro=r(WWr,"LEDTokenizerFast"),WWr.forEach(t),zro=r(r$," (LED model)"),r$.forEach(t),Wro=i(S),ls=n(S,"LI",{});var t$=s(ls);Nte=n(t$,"STRONG",{});var QWr=s(Nte);Qro=r(QWr,"longformer"),QWr.forEach(t),Hro=r(t$," \u2014 "),eP=n(t$,"A",{href:!0});var HWr=s(eP);Uro=r(HWr,"LongformerTokenizer"),HWr.forEach(t),Jro=r(t$," or "),oP=n(t$,"A",{href:!0});var UWr=s(oP);Yro=r(UWr,"LongformerTokenizerFast"),UWr.forEach(t),Kro=r(t$," (Longformer model)"),t$.forEach(t),Zro=i(S),Pg=n(S,"LI",{});var j5e=s(Pg);jte=n(j5e,"STRONG",{});var JWr=s(jte);eto=r(JWr,"luke"),JWr.forEach(t),oto=r(j5e," \u2014 "),rP=n(j5e,"A",{href:!0});var YWr=s(rP);rto=r(YWr,"LukeTokenizer"),YWr.forEach(t),tto=r(j5e," (LUKE model)"),j5e.forEach(t),ato=i(S),is=n(S,"LI",{});var a$=s(is);Dte=n(a$,"STRONG",{});var KWr=s(Dte);nto=r(KWr,"lxmert"),KWr.forEach(t),sto=r(a$," \u2014 "),tP=n(a$,"A",{href:!0});var ZWr=s(tP);lto=r(ZWr,"LxmertTokenizer"),ZWr.forEach(t),ito=r(a$," or "),aP=n(a$,"A",{href:!0});var eQr=s(aP);dto=r(eQr,"LxmertTokenizerFast"),eQr.forEach(t),cto=r(a$," (LXMERT model)"),a$.forEach(t),fto=i(S),Bg=n(S,"LI",{});var D5e=s(Bg);Gte=n(D5e,"STRONG",{});var oQr=s(Gte);mto=r(oQr,"m2m_100"),oQr.forEach(t),gto=r(D5e," \u2014 "),nP=n(D5e,"A",{href:!0});var rQr=s(nP);hto=r(rQr,"M2M100Tokenizer"),rQr.forEach(t),pto=r(D5e," (M2M100 model)"),D5e.forEach(t),uto=i(S),Ig=n(S,"LI",{});var G5e=s(Ig);Ote=n(G5e,"STRONG",{});var tQr=s(Ote);_to=r(tQr,"marian"),tQr.forEach(t),bto=r(G5e," \u2014 "),sP=n(G5e,"A",{href:!0});var aQr=s(sP);vto=r(aQr,"MarianTokenizer"),aQr.forEach(t),Fto=r(G5e," (Marian model)"),G5e.forEach(t),Tto=i(S),ds=n(S,"LI",{});var n$=s(ds);Vte=n(n$,"STRONG",{});var nQr=s(Vte);Mto=r(nQr,"mbart"),nQr.forEach(t),Eto=r(n$," \u2014 "),lP=n(n$,"A",{href:!0});var sQr=s(lP);Cto=r(sQr,"MBartTokenizer"),sQr.forEach(t),wto=r(n$," or "),iP=n(n$,"A",{href:!0});var lQr=s(iP);Ato=r(lQr,"MBartTokenizerFast"),lQr.forEach(t),yto=r(n$," (mBART model)"),n$.forEach(t),Lto=i(S),cs=n(S,"LI",{});var s$=s(cs);Xte=n(s$,"STRONG",{});var iQr=s(Xte);xto=r(iQr,"mbart50"),iQr.forEach(t),$to=r(s$," \u2014 "),dP=n(s$,"A",{href:!0});var dQr=s(dP);kto=r(dQr,"MBart50Tokenizer"),dQr.forEach(t),Sto=r(s$," or "),cP=n(s$,"A",{href:!0});var cQr=s(cP);Rto=r(cQr,"MBart50TokenizerFast"),cQr.forEach(t),Pto=r(s$," (mBART-50 model)"),s$.forEach(t),Bto=i(S),fs=n(S,"LI",{});var l$=s(fs);zte=n(l$,"STRONG",{});var fQr=s(zte);Ito=r(fQr,"megatron-bert"),fQr.forEach(t),qto=r(l$," \u2014 "),fP=n(l$,"A",{href:!0});var mQr=s(fP);Nto=r(mQr,"BertTokenizer"),mQr.forEach(t),jto=r(l$," or "),mP=n(l$,"A",{href:!0});var gQr=s(mP);Dto=r(gQr,"BertTokenizerFast"),gQr.forEach(t),Gto=r(l$," (MegatronBert model)"),l$.forEach(t),Oto=i(S),qg=n(S,"LI",{});var O5e=s(qg);Wte=n(O5e,"STRONG",{});var hQr=s(Wte);Vto=r(hQr,"mluke"),hQr.forEach(t),Xto=r(O5e," \u2014 "),gP=n(O5e,"A",{href:!0});var pQr=s(gP);zto=r(pQr,"MLukeTokenizer"),pQr.forEach(t),Wto=r(O5e," (mLUKE model)"),O5e.forEach(t),Qto=i(S),ms=n(S,"LI",{});var i$=s(ms);Qte=n(i$,"STRONG",{});var uQr=s(Qte);Hto=r(uQr,"mobilebert"),uQr.forEach(t),Uto=r(i$," \u2014 "),hP=n(i$,"A",{href:!0});var _Qr=s(hP);Jto=r(_Qr,"MobileBertTokenizer"),_Qr.forEach(t),Yto=r(i$," or "),pP=n(i$,"A",{href:!0});var bQr=s(pP);Kto=r(bQr,"MobileBertTokenizerFast"),bQr.forEach(t),Zto=r(i$," (MobileBERT model)"),i$.forEach(t),eao=i(S),gs=n(S,"LI",{});var d$=s(gs);Hte=n(d$,"STRONG",{});var vQr=s(Hte);oao=r(vQr,"mpnet"),vQr.forEach(t),rao=r(d$," \u2014 "),uP=n(d$,"A",{href:!0});var FQr=s(uP);tao=r(FQr,"MPNetTokenizer"),FQr.forEach(t),aao=r(d$," or "),_P=n(d$,"A",{href:!0});var TQr=s(_P);nao=r(TQr,"MPNetTokenizerFast"),TQr.forEach(t),sao=r(d$," (MPNet model)"),d$.forEach(t),lao=i(S),hs=n(S,"LI",{});var c$=s(hs);Ute=n(c$,"STRONG",{});var MQr=s(Ute);iao=r(MQr,"mt5"),MQr.forEach(t),dao=r(c$," \u2014 "),bP=n(c$,"A",{href:!0});var EQr=s(bP);cao=r(EQr,"MT5Tokenizer"),EQr.forEach(t),fao=r(c$," or "),vP=n(c$,"A",{href:!0});var CQr=s(vP);mao=r(CQr,"MT5TokenizerFast"),CQr.forEach(t),gao=r(c$," (mT5 model)"),c$.forEach(t),hao=i(S),ps=n(S,"LI",{});var f$=s(ps);Jte=n(f$,"STRONG",{});var wQr=s(Jte);pao=r(wQr,"nystromformer"),wQr.forEach(t),uao=r(f$," \u2014 "),FP=n(f$,"A",{href:!0});var AQr=s(FP);_ao=r(AQr,"AlbertTokenizer"),AQr.forEach(t),bao=r(f$," or "),TP=n(f$,"A",{href:!0});var yQr=s(TP);vao=r(yQr,"AlbertTokenizerFast"),yQr.forEach(t),Fao=r(f$," (Nystromformer model)"),f$.forEach(t),Tao=i(S),us=n(S,"LI",{});var m$=s(us);Yte=n(m$,"STRONG",{});var LQr=s(Yte);Mao=r(LQr,"openai-gpt"),LQr.forEach(t),Eao=r(m$," \u2014 "),MP=n(m$,"A",{href:!0});var xQr=s(MP);Cao=r(xQr,"OpenAIGPTTokenizer"),xQr.forEach(t),wao=r(m$," or "),EP=n(m$,"A",{href:!0});var $Qr=s(EP);Aao=r($Qr,"OpenAIGPTTokenizerFast"),$Qr.forEach(t),yao=r(m$," (OpenAI GPT model)"),m$.forEach(t),Lao=i(S),Ng=n(S,"LI",{});var V5e=s(Ng);Kte=n(V5e,"STRONG",{});var kQr=s(Kte);xao=r(kQr,"opt"),kQr.forEach(t),$ao=r(V5e," \u2014 "),CP=n(V5e,"A",{href:!0});var SQr=s(CP);kao=r(SQr,"GPT2Tokenizer"),SQr.forEach(t),Sao=r(V5e," (OPT model)"),V5e.forEach(t),Rao=i(S),_s=n(S,"LI",{});var g$=s(_s);Zte=n(g$,"STRONG",{});var RQr=s(Zte);Pao=r(RQr,"pegasus"),RQr.forEach(t),Bao=r(g$," \u2014 "),wP=n(g$,"A",{href:!0});var PQr=s(wP);Iao=r(PQr,"PegasusTokenizer"),PQr.forEach(t),qao=r(g$," or "),AP=n(g$,"A",{href:!0});var BQr=s(AP);Nao=r(BQr,"PegasusTokenizerFast"),BQr.forEach(t),jao=r(g$," (Pegasus model)"),g$.forEach(t),Dao=i(S),jg=n(S,"LI",{});var X5e=s(jg);eae=n(X5e,"STRONG",{});var IQr=s(eae);Gao=r(IQr,"perceiver"),IQr.forEach(t),Oao=r(X5e," \u2014 "),yP=n(X5e,"A",{href:!0});var qQr=s(yP);Vao=r(qQr,"PerceiverTokenizer"),qQr.forEach(t),Xao=r(X5e," (Perceiver model)"),X5e.forEach(t),zao=i(S),Dg=n(S,"LI",{});var z5e=s(Dg);oae=n(z5e,"STRONG",{});var NQr=s(oae);Wao=r(NQr,"phobert"),NQr.forEach(t),Qao=r(z5e," \u2014 "),LP=n(z5e,"A",{href:!0});var jQr=s(LP);Hao=r(jQr,"PhobertTokenizer"),jQr.forEach(t),Uao=r(z5e," (PhoBERT model)"),z5e.forEach(t),Jao=i(S),Gg=n(S,"LI",{});var W5e=s(Gg);rae=n(W5e,"STRONG",{});var DQr=s(rae);Yao=r(DQr,"plbart"),DQr.forEach(t),Kao=r(W5e," \u2014 "),xP=n(W5e,"A",{href:!0});var GQr=s(xP);Zao=r(GQr,"PLBartTokenizer"),GQr.forEach(t),eno=r(W5e," (PLBart model)"),W5e.forEach(t),ono=i(S),Og=n(S,"LI",{});var Q5e=s(Og);tae=n(Q5e,"STRONG",{});var OQr=s(tae);rno=r(OQr,"prophetnet"),OQr.forEach(t),tno=r(Q5e," \u2014 "),$P=n(Q5e,"A",{href:!0});var VQr=s($P);ano=r(VQr,"ProphetNetTokenizer"),VQr.forEach(t),nno=r(Q5e," (ProphetNet model)"),Q5e.forEach(t),sno=i(S),bs=n(S,"LI",{});var h$=s(bs);aae=n(h$,"STRONG",{});var XQr=s(aae);lno=r(XQr,"qdqbert"),XQr.forEach(t),ino=r(h$," \u2014 "),kP=n(h$,"A",{href:!0});var zQr=s(kP);dno=r(zQr,"BertTokenizer"),zQr.forEach(t),cno=r(h$," or "),SP=n(h$,"A",{href:!0});var WQr=s(SP);fno=r(WQr,"BertTokenizerFast"),WQr.forEach(t),mno=r(h$," (QDQBert model)"),h$.forEach(t),gno=i(S),Vg=n(S,"LI",{});var H5e=s(Vg);nae=n(H5e,"STRONG",{});var QQr=s(nae);hno=r(QQr,"rag"),QQr.forEach(t),pno=r(H5e," \u2014 "),RP=n(H5e,"A",{href:!0});var HQr=s(RP);uno=r(HQr,"RagTokenizer"),HQr.forEach(t),_no=r(H5e," (RAG model)"),H5e.forEach(t),bno=i(S),vs=n(S,"LI",{});var p$=s(vs);sae=n(p$,"STRONG",{});var UQr=s(sae);vno=r(UQr,"realm"),UQr.forEach(t),Fno=r(p$," \u2014 "),PP=n(p$,"A",{href:!0});var JQr=s(PP);Tno=r(JQr,"RealmTokenizer"),JQr.forEach(t),Mno=r(p$," or "),BP=n(p$,"A",{href:!0});var YQr=s(BP);Eno=r(YQr,"RealmTokenizerFast"),YQr.forEach(t),Cno=r(p$," (Realm model)"),p$.forEach(t),wno=i(S),Fs=n(S,"LI",{});var u$=s(Fs);lae=n(u$,"STRONG",{});var KQr=s(lae);Ano=r(KQr,"reformer"),KQr.forEach(t),yno=r(u$," \u2014 "),IP=n(u$,"A",{href:!0});var ZQr=s(IP);Lno=r(ZQr,"ReformerTokenizer"),ZQr.forEach(t),xno=r(u$," or "),qP=n(u$,"A",{href:!0});var eHr=s(qP);$no=r(eHr,"ReformerTokenizerFast"),eHr.forEach(t),kno=r(u$," (Reformer model)"),u$.forEach(t),Sno=i(S),Ts=n(S,"LI",{});var _$=s(Ts);iae=n(_$,"STRONG",{});var oHr=s(iae);Rno=r(oHr,"rembert"),oHr.forEach(t),Pno=r(_$," \u2014 "),NP=n(_$,"A",{href:!0});var rHr=s(NP);Bno=r(rHr,"RemBertTokenizer"),rHr.forEach(t),Ino=r(_$," or "),jP=n(_$,"A",{href:!0});var tHr=s(jP);qno=r(tHr,"RemBertTokenizerFast"),tHr.forEach(t),Nno=r(_$," (RemBERT model)"),_$.forEach(t),jno=i(S),Ms=n(S,"LI",{});var b$=s(Ms);dae=n(b$,"STRONG",{});var aHr=s(dae);Dno=r(aHr,"retribert"),aHr.forEach(t),Gno=r(b$," \u2014 "),DP=n(b$,"A",{href:!0});var nHr=s(DP);Ono=r(nHr,"RetriBertTokenizer"),nHr.forEach(t),Vno=r(b$," or "),GP=n(b$,"A",{href:!0});var sHr=s(GP);Xno=r(sHr,"RetriBertTokenizerFast"),sHr.forEach(t),zno=r(b$," (RetriBERT model)"),b$.forEach(t),Wno=i(S),Es=n(S,"LI",{});var v$=s(Es);cae=n(v$,"STRONG",{});var lHr=s(cae);Qno=r(lHr,"roberta"),lHr.forEach(t),Hno=r(v$," \u2014 "),OP=n(v$,"A",{href:!0});var iHr=s(OP);Uno=r(iHr,"RobertaTokenizer"),iHr.forEach(t),Jno=r(v$," or "),VP=n(v$,"A",{href:!0});var dHr=s(VP);Yno=r(dHr,"RobertaTokenizerFast"),dHr.forEach(t),Kno=r(v$," (RoBERTa model)"),v$.forEach(t),Zno=i(S),Cs=n(S,"LI",{});var F$=s(Cs);fae=n(F$,"STRONG",{});var cHr=s(fae);eso=r(cHr,"roformer"),cHr.forEach(t),oso=r(F$," \u2014 "),XP=n(F$,"A",{href:!0});var fHr=s(XP);rso=r(fHr,"RoFormerTokenizer"),fHr.forEach(t),tso=r(F$," or "),zP=n(F$,"A",{href:!0});var mHr=s(zP);aso=r(mHr,"RoFormerTokenizerFast"),mHr.forEach(t),nso=r(F$," (RoFormer model)"),F$.forEach(t),sso=i(S),Xg=n(S,"LI",{});var U5e=s(Xg);mae=n(U5e,"STRONG",{});var gHr=s(mae);lso=r(gHr,"speech_to_text"),gHr.forEach(t),iso=r(U5e," \u2014 "),WP=n(U5e,"A",{href:!0});var hHr=s(WP);dso=r(hHr,"Speech2TextTokenizer"),hHr.forEach(t),cso=r(U5e," (Speech2Text model)"),U5e.forEach(t),fso=i(S),zg=n(S,"LI",{});var J5e=s(zg);gae=n(J5e,"STRONG",{});var pHr=s(gae);mso=r(pHr,"speech_to_text_2"),pHr.forEach(t),gso=r(J5e," \u2014 "),QP=n(J5e,"A",{href:!0});var uHr=s(QP);hso=r(uHr,"Speech2Text2Tokenizer"),uHr.forEach(t),pso=r(J5e," (Speech2Text2 model)"),J5e.forEach(t),uso=i(S),ws=n(S,"LI",{});var T$=s(ws);hae=n(T$,"STRONG",{});var _Hr=s(hae);_so=r(_Hr,"splinter"),_Hr.forEach(t),bso=r(T$," \u2014 "),HP=n(T$,"A",{href:!0});var bHr=s(HP);vso=r(bHr,"SplinterTokenizer"),bHr.forEach(t),Fso=r(T$," or "),UP=n(T$,"A",{href:!0});var vHr=s(UP);Tso=r(vHr,"SplinterTokenizerFast"),vHr.forEach(t),Mso=r(T$," (Splinter model)"),T$.forEach(t),Eso=i(S),As=n(S,"LI",{});var M$=s(As);pae=n(M$,"STRONG",{});var FHr=s(pae);Cso=r(FHr,"squeezebert"),FHr.forEach(t),wso=r(M$," \u2014 "),JP=n(M$,"A",{href:!0});var THr=s(JP);Aso=r(THr,"SqueezeBertTokenizer"),THr.forEach(t),yso=r(M$," or "),YP=n(M$,"A",{href:!0});var MHr=s(YP);Lso=r(MHr,"SqueezeBertTokenizerFast"),MHr.forEach(t),xso=r(M$," (SqueezeBERT model)"),M$.forEach(t),$so=i(S),ys=n(S,"LI",{});var E$=s(ys);uae=n(E$,"STRONG",{});var EHr=s(uae);kso=r(EHr,"t5"),EHr.forEach(t),Sso=r(E$," \u2014 "),KP=n(E$,"A",{href:!0});var CHr=s(KP);Rso=r(CHr,"T5Tokenizer"),CHr.forEach(t),Pso=r(E$," or "),ZP=n(E$,"A",{href:!0});var wHr=s(ZP);Bso=r(wHr,"T5TokenizerFast"),wHr.forEach(t),Iso=r(E$," (T5 model)"),E$.forEach(t),qso=i(S),Wg=n(S,"LI",{});var Y5e=s(Wg);_ae=n(Y5e,"STRONG",{});var AHr=s(_ae);Nso=r(AHr,"tapas"),AHr.forEach(t),jso=r(Y5e," \u2014 "),eB=n(Y5e,"A",{href:!0});var yHr=s(eB);Dso=r(yHr,"TapasTokenizer"),yHr.forEach(t),Gso=r(Y5e," (TAPAS model)"),Y5e.forEach(t),Oso=i(S),Qg=n(S,"LI",{});var K5e=s(Qg);bae=n(K5e,"STRONG",{});var LHr=s(bae);Vso=r(LHr,"tapex"),LHr.forEach(t),Xso=r(K5e," \u2014 "),oB=n(K5e,"A",{href:!0});var xHr=s(oB);zso=r(xHr,"TapexTokenizer"),xHr.forEach(t),Wso=r(K5e," (TAPEX model)"),K5e.forEach(t),Qso=i(S),Hg=n(S,"LI",{});var Z5e=s(Hg);vae=n(Z5e,"STRONG",{});var $Hr=s(vae);Hso=r($Hr,"transfo-xl"),$Hr.forEach(t),Uso=r(Z5e," \u2014 "),rB=n(Z5e,"A",{href:!0});var kHr=s(rB);Jso=r(kHr,"TransfoXLTokenizer"),kHr.forEach(t),Yso=r(Z5e," (Transformer-XL model)"),Z5e.forEach(t),Kso=i(S),Ls=n(S,"LI",{});var C$=s(Ls);Fae=n(C$,"STRONG",{});var SHr=s(Fae);Zso=r(SHr,"visual_bert"),SHr.forEach(t),elo=r(C$," \u2014 "),tB=n(C$,"A",{href:!0});var RHr=s(tB);olo=r(RHr,"BertTokenizer"),RHr.forEach(t),rlo=r(C$," or "),aB=n(C$,"A",{href:!0});var PHr=s(aB);tlo=r(PHr,"BertTokenizerFast"),PHr.forEach(t),alo=r(C$," (VisualBert model)"),C$.forEach(t),nlo=i(S),Ug=n(S,"LI",{});var e3e=s(Ug);Tae=n(e3e,"STRONG",{});var BHr=s(Tae);slo=r(BHr,"wav2vec2"),BHr.forEach(t),llo=r(e3e," \u2014 "),nB=n(e3e,"A",{href:!0});var IHr=s(nB);ilo=r(IHr,"Wav2Vec2CTCTokenizer"),IHr.forEach(t),dlo=r(e3e," (Wav2Vec2 model)"),e3e.forEach(t),clo=i(S),Jg=n(S,"LI",{});var o3e=s(Jg);Mae=n(o3e,"STRONG",{});var qHr=s(Mae);flo=r(qHr,"wav2vec2-conformer"),qHr.forEach(t),mlo=r(o3e," \u2014 "),sB=n(o3e,"A",{href:!0});var NHr=s(sB);glo=r(NHr,"Wav2Vec2CTCTokenizer"),NHr.forEach(t),hlo=r(o3e," (Wav2Vec2-Conformer model)"),o3e.forEach(t),plo=i(S),Yg=n(S,"LI",{});var r3e=s(Yg);Eae=n(r3e,"STRONG",{});var jHr=s(Eae);ulo=r(jHr,"wav2vec2_phoneme"),jHr.forEach(t),_lo=r(r3e," \u2014 "),lB=n(r3e,"A",{href:!0});var DHr=s(lB);blo=r(DHr,"Wav2Vec2PhonemeCTCTokenizer"),DHr.forEach(t),vlo=r(r3e," (Wav2Vec2Phoneme model)"),r3e.forEach(t),Flo=i(S),xs=n(S,"LI",{});var w$=s(xs);Cae=n(w$,"STRONG",{});var GHr=s(Cae);Tlo=r(GHr,"xglm"),GHr.forEach(t),Mlo=r(w$," \u2014 "),iB=n(w$,"A",{href:!0});var OHr=s(iB);Elo=r(OHr,"XGLMTokenizer"),OHr.forEach(t),Clo=r(w$," or "),dB=n(w$,"A",{href:!0});var VHr=s(dB);wlo=r(VHr,"XGLMTokenizerFast"),VHr.forEach(t),Alo=r(w$," (XGLM model)"),w$.forEach(t),ylo=i(S),Kg=n(S,"LI",{});var t3e=s(Kg);wae=n(t3e,"STRONG",{});var XHr=s(wae);Llo=r(XHr,"xlm"),XHr.forEach(t),xlo=r(t3e," \u2014 "),cB=n(t3e,"A",{href:!0});var zHr=s(cB);$lo=r(zHr,"XLMTokenizer"),zHr.forEach(t),klo=r(t3e," (XLM model)"),t3e.forEach(t),Slo=i(S),Zg=n(S,"LI",{});var a3e=s(Zg);Aae=n(a3e,"STRONG",{});var WHr=s(Aae);Rlo=r(WHr,"xlm-prophetnet"),WHr.forEach(t),Plo=r(a3e," \u2014 "),fB=n(a3e,"A",{href:!0});var QHr=s(fB);Blo=r(QHr,"XLMProphetNetTokenizer"),QHr.forEach(t),Ilo=r(a3e," (XLMProphetNet model)"),a3e.forEach(t),qlo=i(S),$s=n(S,"LI",{});var A$=s($s);yae=n(A$,"STRONG",{});var HHr=s(yae);Nlo=r(HHr,"xlm-roberta"),HHr.forEach(t),jlo=r(A$," \u2014 "),mB=n(A$,"A",{href:!0});var UHr=s(mB);Dlo=r(UHr,"XLMRobertaTokenizer"),UHr.forEach(t),Glo=r(A$," or "),gB=n(A$,"A",{href:!0});var JHr=s(gB);Olo=r(JHr,"XLMRobertaTokenizerFast"),JHr.forEach(t),Vlo=r(A$," (XLM-RoBERTa model)"),A$.forEach(t),Xlo=i(S),ks=n(S,"LI",{});var y$=s(ks);Lae=n(y$,"STRONG",{});var YHr=s(Lae);zlo=r(YHr,"xlm-roberta-xl"),YHr.forEach(t),Wlo=r(y$," \u2014 "),hB=n(y$,"A",{href:!0});var KHr=s(hB);Qlo=r(KHr,"RobertaTokenizer"),KHr.forEach(t),Hlo=r(y$," or "),pB=n(y$,"A",{href:!0});var ZHr=s(pB);Ulo=r(ZHr,"RobertaTokenizerFast"),ZHr.forEach(t),Jlo=r(y$," (XLM-RoBERTa-XL model)"),y$.forEach(t),Ylo=i(S),Ss=n(S,"LI",{});var L$=s(Ss);xae=n(L$,"STRONG",{});var eUr=s(xae);Klo=r(eUr,"xlnet"),eUr.forEach(t),Zlo=r(L$," \u2014 "),uB=n(L$,"A",{href:!0});var oUr=s(uB);eio=r(oUr,"XLNetTokenizer"),oUr.forEach(t),oio=r(L$," or "),_B=n(L$,"A",{href:!0});var rUr=s(_B);rio=r(rUr,"XLNetTokenizerFast"),rUr.forEach(t),tio=r(L$," (XLNet model)"),L$.forEach(t),aio=i(S),Rs=n(S,"LI",{});var x$=s(Rs);$ae=n(x$,"STRONG",{});var tUr=s($ae);nio=r(tUr,"yoso"),tUr.forEach(t),sio=r(x$," \u2014 "),bB=n(x$,"A",{href:!0});var aUr=s(bB);lio=r(aUr,"AlbertTokenizer"),aUr.forEach(t),iio=r(x$," or "),vB=n(x$,"A",{href:!0});var nUr=s(vB);dio=r(nUr,"AlbertTokenizerFast"),nUr.forEach(t),cio=r(x$," (YOSO model)"),x$.forEach(t),S.forEach(t),fio=i(Ns),T(eh.$$.fragment,Ns),Ns.forEach(t),mio=i(qs),oh=n(qs,"DIV",{class:!0});var mje=s(oh);T(LA.$$.fragment,mje),gio=i(mje),kae=n(mje,"P",{});var sUr=s(kae);hio=r(sUr,"Register a new tokenizer in this mapping."),sUr.forEach(t),mje.forEach(t),qs.forEach(t),gqe=i(f),Mi=n(f,"H2",{class:!0});var gje=s(Mi);rh=n(gje,"A",{id:!0,class:!0,href:!0});var lUr=s(rh);Sae=n(lUr,"SPAN",{});var iUr=s(Sae);T(xA.$$.fragment,iUr),iUr.forEach(t),lUr.forEach(t),pio=i(gje),Rae=n(gje,"SPAN",{});var dUr=s(Rae);uio=r(dUr,"AutoFeatureExtractor"),dUr.forEach(t),gje.forEach(t),hqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T($A.$$.fragment,js),_io=i(js),kA=n(js,"P",{});var hje=s(kA);bio=r(hje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FB=n(hje,"A",{href:!0});var cUr=s(FB);vio=r(cUr,"AutoFeatureExtractor.from_pretrained()"),cUr.forEach(t),Fio=r(hje," class method."),hje.forEach(t),Tio=i(js),SA=n(js,"P",{});var pje=s(SA);Mio=r(pje,"This class cannot be instantiated directly using "),Pae=n(pje,"CODE",{});var fUr=s(Pae);Eio=r(fUr,"__init__()"),fUr.forEach(t),Cio=r(pje," (throws an error)."),pje.forEach(t),wio=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(RA.$$.fragment,Zt),Aio=i(Zt),Bae=n(Zt,"P",{});var mUr=s(Bae);yio=r(mUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mUr.forEach(t),Lio=i(Zt),ya=n(Zt,"P",{});var b3=s(ya);xio=r(b3,"The feature extractor class to instantiate is selected based on the "),Iae=n(b3,"CODE",{});var gUr=s(Iae);$io=r(gUr,"model_type"),gUr.forEach(t),kio=r(b3,` property of the config object
(either passed as an argument or loaded from `),qae=n(b3,"CODE",{});var hUr=s(qae);Sio=r(hUr,"pretrained_model_name_or_path"),hUr.forEach(t),Rio=r(b3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Nae=n(b3,"CODE",{});var pUr=s(Nae);Pio=r(pUr,"pretrained_model_name_or_path"),pUr.forEach(t),Bio=r(b3,":"),b3.forEach(t),Iio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);th=n(re,"LI",{});var n3e=s(th);jae=n(n3e,"STRONG",{});var uUr=s(jae);qio=r(uUr,"beit"),uUr.forEach(t),Nio=r(n3e," \u2014 "),TB=n(n3e,"A",{href:!0});var _Ur=s(TB);jio=r(_Ur,"BeitFeatureExtractor"),_Ur.forEach(t),Dio=r(n3e," (BEiT model)"),n3e.forEach(t),Gio=i(re),ah=n(re,"LI",{});var s3e=s(ah);Dae=n(s3e,"STRONG",{});var bUr=s(Dae);Oio=r(bUr,"clip"),bUr.forEach(t),Vio=r(s3e," \u2014 "),MB=n(s3e,"A",{href:!0});var vUr=s(MB);Xio=r(vUr,"CLIPFeatureExtractor"),vUr.forEach(t),zio=r(s3e," (CLIP model)"),s3e.forEach(t),Wio=i(re),nh=n(re,"LI",{});var l3e=s(nh);Gae=n(l3e,"STRONG",{});var FUr=s(Gae);Qio=r(FUr,"convnext"),FUr.forEach(t),Hio=r(l3e," \u2014 "),EB=n(l3e,"A",{href:!0});var TUr=s(EB);Uio=r(TUr,"ConvNextFeatureExtractor"),TUr.forEach(t),Jio=r(l3e," (ConvNext model)"),l3e.forEach(t),Yio=i(re),sh=n(re,"LI",{});var i3e=s(sh);Oae=n(i3e,"STRONG",{});var MUr=s(Oae);Kio=r(MUr,"data2vec-audio"),MUr.forEach(t),Zio=r(i3e," \u2014 "),CB=n(i3e,"A",{href:!0});var EUr=s(CB);edo=r(EUr,"Wav2Vec2FeatureExtractor"),EUr.forEach(t),odo=r(i3e," (Data2VecAudio model)"),i3e.forEach(t),rdo=i(re),lh=n(re,"LI",{});var d3e=s(lh);Vae=n(d3e,"STRONG",{});var CUr=s(Vae);tdo=r(CUr,"data2vec-vision"),CUr.forEach(t),ado=r(d3e," \u2014 "),wB=n(d3e,"A",{href:!0});var wUr=s(wB);ndo=r(wUr,"BeitFeatureExtractor"),wUr.forEach(t),sdo=r(d3e," (Data2VecVision model)"),d3e.forEach(t),ldo=i(re),ih=n(re,"LI",{});var c3e=s(ih);Xae=n(c3e,"STRONG",{});var AUr=s(Xae);ido=r(AUr,"deit"),AUr.forEach(t),ddo=r(c3e," \u2014 "),AB=n(c3e,"A",{href:!0});var yUr=s(AB);cdo=r(yUr,"DeiTFeatureExtractor"),yUr.forEach(t),fdo=r(c3e," (DeiT model)"),c3e.forEach(t),mdo=i(re),dh=n(re,"LI",{});var f3e=s(dh);zae=n(f3e,"STRONG",{});var LUr=s(zae);gdo=r(LUr,"detr"),LUr.forEach(t),hdo=r(f3e," \u2014 "),yB=n(f3e,"A",{href:!0});var xUr=s(yB);pdo=r(xUr,"DetrFeatureExtractor"),xUr.forEach(t),udo=r(f3e," (DETR model)"),f3e.forEach(t),_do=i(re),ch=n(re,"LI",{});var m3e=s(ch);Wae=n(m3e,"STRONG",{});var $Ur=s(Wae);bdo=r($Ur,"dpt"),$Ur.forEach(t),vdo=r(m3e," \u2014 "),LB=n(m3e,"A",{href:!0});var kUr=s(LB);Fdo=r(kUr,"DPTFeatureExtractor"),kUr.forEach(t),Tdo=r(m3e," (DPT model)"),m3e.forEach(t),Mdo=i(re),fh=n(re,"LI",{});var g3e=s(fh);Qae=n(g3e,"STRONG",{});var SUr=s(Qae);Edo=r(SUr,"flava"),SUr.forEach(t),Cdo=r(g3e," \u2014 "),xB=n(g3e,"A",{href:!0});var RUr=s(xB);wdo=r(RUr,"FlavaFeatureExtractor"),RUr.forEach(t),Ado=r(g3e," (Flava model)"),g3e.forEach(t),ydo=i(re),mh=n(re,"LI",{});var h3e=s(mh);Hae=n(h3e,"STRONG",{});var PUr=s(Hae);Ldo=r(PUr,"glpn"),PUr.forEach(t),xdo=r(h3e," \u2014 "),$B=n(h3e,"A",{href:!0});var BUr=s($B);$do=r(BUr,"GLPNFeatureExtractor"),BUr.forEach(t),kdo=r(h3e," (GLPN model)"),h3e.forEach(t),Sdo=i(re),gh=n(re,"LI",{});var p3e=s(gh);Uae=n(p3e,"STRONG",{});var IUr=s(Uae);Rdo=r(IUr,"hubert"),IUr.forEach(t),Pdo=r(p3e," \u2014 "),kB=n(p3e,"A",{href:!0});var qUr=s(kB);Bdo=r(qUr,"Wav2Vec2FeatureExtractor"),qUr.forEach(t),Ido=r(p3e," (Hubert model)"),p3e.forEach(t),qdo=i(re),hh=n(re,"LI",{});var u3e=s(hh);Jae=n(u3e,"STRONG",{});var NUr=s(Jae);Ndo=r(NUr,"layoutlmv2"),NUr.forEach(t),jdo=r(u3e," \u2014 "),SB=n(u3e,"A",{href:!0});var jUr=s(SB);Ddo=r(jUr,"LayoutLMv2FeatureExtractor"),jUr.forEach(t),Gdo=r(u3e," (LayoutLMv2 model)"),u3e.forEach(t),Odo=i(re),ph=n(re,"LI",{});var _3e=s(ph);Yae=n(_3e,"STRONG",{});var DUr=s(Yae);Vdo=r(DUr,"layoutlmv3"),DUr.forEach(t),Xdo=r(_3e," \u2014 "),RB=n(_3e,"A",{href:!0});var GUr=s(RB);zdo=r(GUr,"LayoutLMv3FeatureExtractor"),GUr.forEach(t),Wdo=r(_3e," (LayoutLMv3 model)"),_3e.forEach(t),Qdo=i(re),uh=n(re,"LI",{});var b3e=s(uh);Kae=n(b3e,"STRONG",{});var OUr=s(Kae);Hdo=r(OUr,"maskformer"),OUr.forEach(t),Udo=r(b3e," \u2014 "),PB=n(b3e,"A",{href:!0});var VUr=s(PB);Jdo=r(VUr,"MaskFormerFeatureExtractor"),VUr.forEach(t),Ydo=r(b3e," (MaskFormer model)"),b3e.forEach(t),Kdo=i(re),_h=n(re,"LI",{});var v3e=s(_h);Zae=n(v3e,"STRONG",{});var XUr=s(Zae);Zdo=r(XUr,"perceiver"),XUr.forEach(t),eco=r(v3e," \u2014 "),BB=n(v3e,"A",{href:!0});var zUr=s(BB);oco=r(zUr,"PerceiverFeatureExtractor"),zUr.forEach(t),rco=r(v3e," (Perceiver model)"),v3e.forEach(t),tco=i(re),bh=n(re,"LI",{});var F3e=s(bh);ene=n(F3e,"STRONG",{});var WUr=s(ene);aco=r(WUr,"poolformer"),WUr.forEach(t),nco=r(F3e," \u2014 "),IB=n(F3e,"A",{href:!0});var QUr=s(IB);sco=r(QUr,"PoolFormerFeatureExtractor"),QUr.forEach(t),lco=r(F3e," (PoolFormer model)"),F3e.forEach(t),ico=i(re),vh=n(re,"LI",{});var T3e=s(vh);one=n(T3e,"STRONG",{});var HUr=s(one);dco=r(HUr,"regnet"),HUr.forEach(t),cco=r(T3e," \u2014 "),qB=n(T3e,"A",{href:!0});var UUr=s(qB);fco=r(UUr,"ConvNextFeatureExtractor"),UUr.forEach(t),mco=r(T3e," (RegNet model)"),T3e.forEach(t),gco=i(re),Fh=n(re,"LI",{});var M3e=s(Fh);rne=n(M3e,"STRONG",{});var JUr=s(rne);hco=r(JUr,"resnet"),JUr.forEach(t),pco=r(M3e," \u2014 "),NB=n(M3e,"A",{href:!0});var YUr=s(NB);uco=r(YUr,"ConvNextFeatureExtractor"),YUr.forEach(t),_co=r(M3e," (ResNet model)"),M3e.forEach(t),bco=i(re),Th=n(re,"LI",{});var E3e=s(Th);tne=n(E3e,"STRONG",{});var KUr=s(tne);vco=r(KUr,"segformer"),KUr.forEach(t),Fco=r(E3e," \u2014 "),jB=n(E3e,"A",{href:!0});var ZUr=s(jB);Tco=r(ZUr,"SegformerFeatureExtractor"),ZUr.forEach(t),Mco=r(E3e," (SegFormer model)"),E3e.forEach(t),Eco=i(re),Mh=n(re,"LI",{});var C3e=s(Mh);ane=n(C3e,"STRONG",{});var eJr=s(ane);Cco=r(eJr,"speech_to_text"),eJr.forEach(t),wco=r(C3e," \u2014 "),DB=n(C3e,"A",{href:!0});var oJr=s(DB);Aco=r(oJr,"Speech2TextFeatureExtractor"),oJr.forEach(t),yco=r(C3e," (Speech2Text model)"),C3e.forEach(t),Lco=i(re),Eh=n(re,"LI",{});var w3e=s(Eh);nne=n(w3e,"STRONG",{});var rJr=s(nne);xco=r(rJr,"swin"),rJr.forEach(t),$co=r(w3e," \u2014 "),GB=n(w3e,"A",{href:!0});var tJr=s(GB);kco=r(tJr,"ViTFeatureExtractor"),tJr.forEach(t),Sco=r(w3e," (Swin model)"),w3e.forEach(t),Rco=i(re),Ch=n(re,"LI",{});var A3e=s(Ch);sne=n(A3e,"STRONG",{});var aJr=s(sne);Pco=r(aJr,"van"),aJr.forEach(t),Bco=r(A3e," \u2014 "),OB=n(A3e,"A",{href:!0});var nJr=s(OB);Ico=r(nJr,"ConvNextFeatureExtractor"),nJr.forEach(t),qco=r(A3e," (VAN model)"),A3e.forEach(t),Nco=i(re),wh=n(re,"LI",{});var y3e=s(wh);lne=n(y3e,"STRONG",{});var sJr=s(lne);jco=r(sJr,"vit"),sJr.forEach(t),Dco=r(y3e," \u2014 "),VB=n(y3e,"A",{href:!0});var lJr=s(VB);Gco=r(lJr,"ViTFeatureExtractor"),lJr.forEach(t),Oco=r(y3e," (ViT model)"),y3e.forEach(t),Vco=i(re),Ah=n(re,"LI",{});var L3e=s(Ah);ine=n(L3e,"STRONG",{});var iJr=s(ine);Xco=r(iJr,"vit_mae"),iJr.forEach(t),zco=r(L3e," \u2014 "),XB=n(L3e,"A",{href:!0});var dJr=s(XB);Wco=r(dJr,"ViTFeatureExtractor"),dJr.forEach(t),Qco=r(L3e," (ViTMAE model)"),L3e.forEach(t),Hco=i(re),yh=n(re,"LI",{});var x3e=s(yh);dne=n(x3e,"STRONG",{});var cJr=s(dne);Uco=r(cJr,"wav2vec2"),cJr.forEach(t),Jco=r(x3e," \u2014 "),zB=n(x3e,"A",{href:!0});var fJr=s(zB);Yco=r(fJr,"Wav2Vec2FeatureExtractor"),fJr.forEach(t),Kco=r(x3e," (Wav2Vec2 model)"),x3e.forEach(t),Zco=i(re),Lh=n(re,"LI",{});var $3e=s(Lh);cne=n($3e,"STRONG",{});var mJr=s(cne);efo=r(mJr,"wav2vec2-conformer"),mJr.forEach(t),ofo=r($3e," \u2014 "),WB=n($3e,"A",{href:!0});var gJr=s(WB);rfo=r(gJr,"Wav2Vec2FeatureExtractor"),gJr.forEach(t),tfo=r($3e," (Wav2Vec2-Conformer model)"),$3e.forEach(t),afo=i(re),xh=n(re,"LI",{});var k3e=s(xh);fne=n(k3e,"STRONG",{});var hJr=s(fne);nfo=r(hJr,"yolos"),hJr.forEach(t),sfo=r(k3e," \u2014 "),QB=n(k3e,"A",{href:!0});var pJr=s(QB);lfo=r(pJr,"YolosFeatureExtractor"),pJr.forEach(t),ifo=r(k3e," (YOLOS model)"),k3e.forEach(t),re.forEach(t),dfo=i(Zt),T($h.$$.fragment,Zt),cfo=i(Zt),T(kh.$$.fragment,Zt),Zt.forEach(t),ffo=i(js),Sh=n(js,"DIV",{class:!0});var uje=s(Sh);T(PA.$$.fragment,uje),mfo=i(uje),mne=n(uje,"P",{});var uJr=s(mne);gfo=r(uJr,"Register a new feature extractor for this class."),uJr.forEach(t),uje.forEach(t),js.forEach(t),pqe=i(f),Ei=n(f,"H2",{class:!0});var _je=s(Ei);Rh=n(_je,"A",{id:!0,class:!0,href:!0});var _Jr=s(Rh);gne=n(_Jr,"SPAN",{});var bJr=s(gne);T(BA.$$.fragment,bJr),bJr.forEach(t),_Jr.forEach(t),hfo=i(_je),hne=n(_je,"SPAN",{});var vJr=s(hne);pfo=r(vJr,"AutoProcessor"),vJr.forEach(t),_je.forEach(t),uqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(IA.$$.fragment,Ds),ufo=i(Ds),qA=n(Ds,"P",{});var bje=s(qA);_fo=r(bje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),HB=n(bje,"A",{href:!0});var FJr=s(HB);bfo=r(FJr,"AutoProcessor.from_pretrained()"),FJr.forEach(t),vfo=r(bje," class method."),bje.forEach(t),Ffo=i(Ds),NA=n(Ds,"P",{});var vje=s(NA);Tfo=r(vje,"This class cannot be instantiated directly using "),pne=n(vje,"CODE",{});var TJr=s(pne);Mfo=r(TJr,"__init__()"),TJr.forEach(t),Efo=r(vje," (throws an error)."),vje.forEach(t),Cfo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(jA.$$.fragment,ea),wfo=i(ea),une=n(ea,"P",{});var MJr=s(une);Afo=r(MJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),MJr.forEach(t),yfo=i(ea),Ci=n(ea,"P",{});var XK=s(Ci);Lfo=r(XK,"The processor class to instantiate is selected based on the "),_ne=n(XK,"CODE",{});var EJr=s(_ne);xfo=r(EJr,"model_type"),EJr.forEach(t),$fo=r(XK,` property of the config object (either
passed as an argument or loaded from `),bne=n(XK,"CODE",{});var CJr=s(bne);kfo=r(CJr,"pretrained_model_name_or_path"),CJr.forEach(t),Sfo=r(XK," if possible):"),XK.forEach(t),Rfo=i(ea),he=n(ea,"UL",{});var _e=s(he);Ph=n(_e,"LI",{});var S3e=s(Ph);vne=n(S3e,"STRONG",{});var wJr=s(vne);Pfo=r(wJr,"clip"),wJr.forEach(t),Bfo=r(S3e," \u2014 "),UB=n(S3e,"A",{href:!0});var AJr=s(UB);Ifo=r(AJr,"CLIPProcessor"),AJr.forEach(t),qfo=r(S3e," (CLIP model)"),S3e.forEach(t),Nfo=i(_e),Bh=n(_e,"LI",{});var R3e=s(Bh);Fne=n(R3e,"STRONG",{});var yJr=s(Fne);jfo=r(yJr,"flava"),yJr.forEach(t),Dfo=r(R3e," \u2014 "),Tne=n(R3e,"CODE",{});var LJr=s(Tne);Gfo=r(LJr,"FLAVAProcessor"),LJr.forEach(t),Ofo=r(R3e," (Flava model)"),R3e.forEach(t),Vfo=i(_e),Ih=n(_e,"LI",{});var P3e=s(Ih);Mne=n(P3e,"STRONG",{});var xJr=s(Mne);Xfo=r(xJr,"layoutlmv2"),xJr.forEach(t),zfo=r(P3e," \u2014 "),JB=n(P3e,"A",{href:!0});var $Jr=s(JB);Wfo=r($Jr,"LayoutLMv2Processor"),$Jr.forEach(t),Qfo=r(P3e," (LayoutLMv2 model)"),P3e.forEach(t),Hfo=i(_e),qh=n(_e,"LI",{});var B3e=s(qh);Ene=n(B3e,"STRONG",{});var kJr=s(Ene);Ufo=r(kJr,"layoutlmv3"),kJr.forEach(t),Jfo=r(B3e," \u2014 "),YB=n(B3e,"A",{href:!0});var SJr=s(YB);Yfo=r(SJr,"LayoutLMv3Processor"),SJr.forEach(t),Kfo=r(B3e," (LayoutLMv3 model)"),B3e.forEach(t),Zfo=i(_e),Nh=n(_e,"LI",{});var I3e=s(Nh);Cne=n(I3e,"STRONG",{});var RJr=s(Cne);emo=r(RJr,"layoutxlm"),RJr.forEach(t),omo=r(I3e," \u2014 "),KB=n(I3e,"A",{href:!0});var PJr=s(KB);rmo=r(PJr,"LayoutXLMProcessor"),PJr.forEach(t),tmo=r(I3e," (LayoutXLM model)"),I3e.forEach(t),amo=i(_e),jh=n(_e,"LI",{});var q3e=s(jh);wne=n(q3e,"STRONG",{});var BJr=s(wne);nmo=r(BJr,"sew"),BJr.forEach(t),smo=r(q3e," \u2014 "),ZB=n(q3e,"A",{href:!0});var IJr=s(ZB);lmo=r(IJr,"Wav2Vec2Processor"),IJr.forEach(t),imo=r(q3e," (SEW model)"),q3e.forEach(t),dmo=i(_e),Dh=n(_e,"LI",{});var N3e=s(Dh);Ane=n(N3e,"STRONG",{});var qJr=s(Ane);cmo=r(qJr,"sew-d"),qJr.forEach(t),fmo=r(N3e," \u2014 "),eI=n(N3e,"A",{href:!0});var NJr=s(eI);mmo=r(NJr,"Wav2Vec2Processor"),NJr.forEach(t),gmo=r(N3e," (SEW-D model)"),N3e.forEach(t),hmo=i(_e),Gh=n(_e,"LI",{});var j3e=s(Gh);yne=n(j3e,"STRONG",{});var jJr=s(yne);pmo=r(jJr,"speech_to_text"),jJr.forEach(t),umo=r(j3e," \u2014 "),oI=n(j3e,"A",{href:!0});var DJr=s(oI);_mo=r(DJr,"Speech2TextProcessor"),DJr.forEach(t),bmo=r(j3e," (Speech2Text model)"),j3e.forEach(t),vmo=i(_e),Oh=n(_e,"LI",{});var D3e=s(Oh);Lne=n(D3e,"STRONG",{});var GJr=s(Lne);Fmo=r(GJr,"speech_to_text_2"),GJr.forEach(t),Tmo=r(D3e," \u2014 "),rI=n(D3e,"A",{href:!0});var OJr=s(rI);Mmo=r(OJr,"Speech2Text2Processor"),OJr.forEach(t),Emo=r(D3e," (Speech2Text2 model)"),D3e.forEach(t),Cmo=i(_e),Vh=n(_e,"LI",{});var G3e=s(Vh);xne=n(G3e,"STRONG",{});var VJr=s(xne);wmo=r(VJr,"trocr"),VJr.forEach(t),Amo=r(G3e," \u2014 "),tI=n(G3e,"A",{href:!0});var XJr=s(tI);ymo=r(XJr,"TrOCRProcessor"),XJr.forEach(t),Lmo=r(G3e," (TrOCR model)"),G3e.forEach(t),xmo=i(_e),Xh=n(_e,"LI",{});var O3e=s(Xh);$ne=n(O3e,"STRONG",{});var zJr=s($ne);$mo=r(zJr,"unispeech"),zJr.forEach(t),kmo=r(O3e," \u2014 "),aI=n(O3e,"A",{href:!0});var WJr=s(aI);Smo=r(WJr,"Wav2Vec2Processor"),WJr.forEach(t),Rmo=r(O3e," (UniSpeech model)"),O3e.forEach(t),Pmo=i(_e),zh=n(_e,"LI",{});var V3e=s(zh);kne=n(V3e,"STRONG",{});var QJr=s(kne);Bmo=r(QJr,"unispeech-sat"),QJr.forEach(t),Imo=r(V3e," \u2014 "),nI=n(V3e,"A",{href:!0});var HJr=s(nI);qmo=r(HJr,"Wav2Vec2Processor"),HJr.forEach(t),Nmo=r(V3e," (UniSpeechSat model)"),V3e.forEach(t),jmo=i(_e),Wh=n(_e,"LI",{});var X3e=s(Wh);Sne=n(X3e,"STRONG",{});var UJr=s(Sne);Dmo=r(UJr,"vilt"),UJr.forEach(t),Gmo=r(X3e," \u2014 "),sI=n(X3e,"A",{href:!0});var JJr=s(sI);Omo=r(JJr,"ViltProcessor"),JJr.forEach(t),Vmo=r(X3e," (ViLT model)"),X3e.forEach(t),Xmo=i(_e),Qh=n(_e,"LI",{});var z3e=s(Qh);Rne=n(z3e,"STRONG",{});var YJr=s(Rne);zmo=r(YJr,"vision-text-dual-encoder"),YJr.forEach(t),Wmo=r(z3e," \u2014 "),lI=n(z3e,"A",{href:!0});var KJr=s(lI);Qmo=r(KJr,"VisionTextDualEncoderProcessor"),KJr.forEach(t),Hmo=r(z3e," (VisionTextDualEncoder model)"),z3e.forEach(t),Umo=i(_e),Hh=n(_e,"LI",{});var W3e=s(Hh);Pne=n(W3e,"STRONG",{});var ZJr=s(Pne);Jmo=r(ZJr,"wav2vec2"),ZJr.forEach(t),Ymo=r(W3e," \u2014 "),iI=n(W3e,"A",{href:!0});var eYr=s(iI);Kmo=r(eYr,"Wav2Vec2Processor"),eYr.forEach(t),Zmo=r(W3e," (Wav2Vec2 model)"),W3e.forEach(t),ego=i(_e),Uh=n(_e,"LI",{});var Q3e=s(Uh);Bne=n(Q3e,"STRONG",{});var oYr=s(Bne);ogo=r(oYr,"wav2vec2-conformer"),oYr.forEach(t),rgo=r(Q3e," \u2014 "),dI=n(Q3e,"A",{href:!0});var rYr=s(dI);tgo=r(rYr,"Wav2Vec2Processor"),rYr.forEach(t),ago=r(Q3e," (Wav2Vec2-Conformer model)"),Q3e.forEach(t),ngo=i(_e),Jh=n(_e,"LI",{});var H3e=s(Jh);Ine=n(H3e,"STRONG",{});var tYr=s(Ine);sgo=r(tYr,"wavlm"),tYr.forEach(t),lgo=r(H3e," \u2014 "),cI=n(H3e,"A",{href:!0});var aYr=s(cI);igo=r(aYr,"Wav2Vec2Processor"),aYr.forEach(t),dgo=r(H3e," (WavLM model)"),H3e.forEach(t),_e.forEach(t),cgo=i(ea),T(Yh.$$.fragment,ea),fgo=i(ea),T(Kh.$$.fragment,ea),ea.forEach(t),mgo=i(Ds),Zh=n(Ds,"DIV",{class:!0});var Fje=s(Zh);T(DA.$$.fragment,Fje),ggo=i(Fje),qne=n(Fje,"P",{});var nYr=s(qne);hgo=r(nYr,"Register a new processor for this class."),nYr.forEach(t),Fje.forEach(t),Ds.forEach(t),_qe=i(f),wi=n(f,"H2",{class:!0});var Tje=s(wi);ep=n(Tje,"A",{id:!0,class:!0,href:!0});var sYr=s(ep);Nne=n(sYr,"SPAN",{});var lYr=s(Nne);T(GA.$$.fragment,lYr),lYr.forEach(t),sYr.forEach(t),pgo=i(Tje),jne=n(Tje,"SPAN",{});var iYr=s(jne);ugo=r(iYr,"AutoModel"),iYr.forEach(t),Tje.forEach(t),bqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(OA.$$.fragment,Gs),_go=i(Gs),Ai=n(Gs,"P",{});var zK=s(Ai);bgo=r(zK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fI=n(zK,"A",{href:!0});var dYr=s(fI);vgo=r(dYr,"from_pretrained()"),dYr.forEach(t),Fgo=r(zK," class method or the "),mI=n(zK,"A",{href:!0});var cYr=s(mI);Tgo=r(cYr,"from_config()"),cYr.forEach(t),Mgo=r(zK,` class
method.`),zK.forEach(t),Ego=i(Gs),VA=n(Gs,"P",{});var Mje=s(VA);Cgo=r(Mje,"This class cannot be instantiated directly using "),Dne=n(Mje,"CODE",{});var fYr=s(Dne);wgo=r(fYr,"__init__()"),fYr.forEach(t),Ago=r(Mje," (throws an error)."),Mje.forEach(t),ygo=i(Gs),tt=n(Gs,"DIV",{class:!0});var v3=s(tt);T(XA.$$.fragment,v3),Lgo=i(v3),Gne=n(v3,"P",{});var mYr=s(Gne);xgo=r(mYr,"Instantiates one of the base model classes of the library from a configuration."),mYr.forEach(t),$go=i(v3),yi=n(v3,"P",{});var WK=s(yi);kgo=r(WK,`Note:
Loading a model from its configuration file does `),One=n(WK,"STRONG",{});var gYr=s(One);Sgo=r(gYr,"not"),gYr.forEach(t),Rgo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gI=n(WK,"A",{href:!0});var hYr=s(gI);Pgo=r(hYr,"from_pretrained()"),hYr.forEach(t),Bgo=r(WK," to load the model weights."),WK.forEach(t),Igo=i(v3),T(op.$$.fragment,v3),v3.forEach(t),qgo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(zA.$$.fragment,oa),Ngo=i(oa),Vne=n(oa,"P",{});var pYr=s(Vne);jgo=r(pYr,"Instantiate one of the base model classes of the library from a pretrained model."),pYr.forEach(t),Dgo=i(oa),La=n(oa,"P",{});var F3=s(La);Ggo=r(F3,"The model class to instantiate is selected based on the "),Xne=n(F3,"CODE",{});var uYr=s(Xne);Ogo=r(uYr,"model_type"),uYr.forEach(t),Vgo=r(F3,` property of the config object (either
passed as an argument or loaded from `),zne=n(F3,"CODE",{});var _Yr=s(zne);Xgo=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),zgo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wne=n(F3,"CODE",{});var bYr=s(Wne);Wgo=r(bYr,"pretrained_model_name_or_path"),bYr.forEach(t),Qgo=r(F3,":"),F3.forEach(t),Hgo=i(oa),x=n(oa,"UL",{});var $=s(x);rp=n($,"LI",{});var U3e=s(rp);Qne=n(U3e,"STRONG",{});var vYr=s(Qne);Ugo=r(vYr,"albert"),vYr.forEach(t),Jgo=r(U3e," \u2014 "),hI=n(U3e,"A",{href:!0});var FYr=s(hI);Ygo=r(FYr,"AlbertModel"),FYr.forEach(t),Kgo=r(U3e," (ALBERT model)"),U3e.forEach(t),Zgo=i($),tp=n($,"LI",{});var J3e=s(tp);Hne=n(J3e,"STRONG",{});var TYr=s(Hne);eho=r(TYr,"bart"),TYr.forEach(t),oho=r(J3e," \u2014 "),pI=n(J3e,"A",{href:!0});var MYr=s(pI);rho=r(MYr,"BartModel"),MYr.forEach(t),tho=r(J3e," (BART model)"),J3e.forEach(t),aho=i($),ap=n($,"LI",{});var Y3e=s(ap);Une=n(Y3e,"STRONG",{});var EYr=s(Une);nho=r(EYr,"beit"),EYr.forEach(t),sho=r(Y3e," \u2014 "),uI=n(Y3e,"A",{href:!0});var CYr=s(uI);lho=r(CYr,"BeitModel"),CYr.forEach(t),iho=r(Y3e," (BEiT model)"),Y3e.forEach(t),dho=i($),np=n($,"LI",{});var K3e=s(np);Jne=n(K3e,"STRONG",{});var wYr=s(Jne);cho=r(wYr,"bert"),wYr.forEach(t),fho=r(K3e," \u2014 "),_I=n(K3e,"A",{href:!0});var AYr=s(_I);mho=r(AYr,"BertModel"),AYr.forEach(t),gho=r(K3e," (BERT model)"),K3e.forEach(t),hho=i($),sp=n($,"LI",{});var Z3e=s(sp);Yne=n(Z3e,"STRONG",{});var yYr=s(Yne);pho=r(yYr,"bert-generation"),yYr.forEach(t),uho=r(Z3e," \u2014 "),bI=n(Z3e,"A",{href:!0});var LYr=s(bI);_ho=r(LYr,"BertGenerationEncoder"),LYr.forEach(t),bho=r(Z3e," (Bert Generation model)"),Z3e.forEach(t),vho=i($),lp=n($,"LI",{});var ewe=s(lp);Kne=n(ewe,"STRONG",{});var xYr=s(Kne);Fho=r(xYr,"big_bird"),xYr.forEach(t),Tho=r(ewe," \u2014 "),vI=n(ewe,"A",{href:!0});var $Yr=s(vI);Mho=r($Yr,"BigBirdModel"),$Yr.forEach(t),Eho=r(ewe," (BigBird model)"),ewe.forEach(t),Cho=i($),ip=n($,"LI",{});var owe=s(ip);Zne=n(owe,"STRONG",{});var kYr=s(Zne);who=r(kYr,"bigbird_pegasus"),kYr.forEach(t),Aho=r(owe," \u2014 "),FI=n(owe,"A",{href:!0});var SYr=s(FI);yho=r(SYr,"BigBirdPegasusModel"),SYr.forEach(t),Lho=r(owe," (BigBirdPegasus model)"),owe.forEach(t),xho=i($),dp=n($,"LI",{});var rwe=s(dp);ese=n(rwe,"STRONG",{});var RYr=s(ese);$ho=r(RYr,"blenderbot"),RYr.forEach(t),kho=r(rwe," \u2014 "),TI=n(rwe,"A",{href:!0});var PYr=s(TI);Sho=r(PYr,"BlenderbotModel"),PYr.forEach(t),Rho=r(rwe," (Blenderbot model)"),rwe.forEach(t),Pho=i($),cp=n($,"LI",{});var twe=s(cp);ose=n(twe,"STRONG",{});var BYr=s(ose);Bho=r(BYr,"blenderbot-small"),BYr.forEach(t),Iho=r(twe," \u2014 "),MI=n(twe,"A",{href:!0});var IYr=s(MI);qho=r(IYr,"BlenderbotSmallModel"),IYr.forEach(t),Nho=r(twe," (BlenderbotSmall model)"),twe.forEach(t),jho=i($),fp=n($,"LI",{});var awe=s(fp);rse=n(awe,"STRONG",{});var qYr=s(rse);Dho=r(qYr,"camembert"),qYr.forEach(t),Gho=r(awe," \u2014 "),EI=n(awe,"A",{href:!0});var NYr=s(EI);Oho=r(NYr,"CamembertModel"),NYr.forEach(t),Vho=r(awe," (CamemBERT model)"),awe.forEach(t),Xho=i($),mp=n($,"LI",{});var nwe=s(mp);tse=n(nwe,"STRONG",{});var jYr=s(tse);zho=r(jYr,"canine"),jYr.forEach(t),Who=r(nwe," \u2014 "),CI=n(nwe,"A",{href:!0});var DYr=s(CI);Qho=r(DYr,"CanineModel"),DYr.forEach(t),Hho=r(nwe," (Canine model)"),nwe.forEach(t),Uho=i($),gp=n($,"LI",{});var swe=s(gp);ase=n(swe,"STRONG",{});var GYr=s(ase);Jho=r(GYr,"clip"),GYr.forEach(t),Yho=r(swe," \u2014 "),wI=n(swe,"A",{href:!0});var OYr=s(wI);Kho=r(OYr,"CLIPModel"),OYr.forEach(t),Zho=r(swe," (CLIP model)"),swe.forEach(t),epo=i($),hp=n($,"LI",{});var lwe=s(hp);nse=n(lwe,"STRONG",{});var VYr=s(nse);opo=r(VYr,"convbert"),VYr.forEach(t),rpo=r(lwe," \u2014 "),AI=n(lwe,"A",{href:!0});var XYr=s(AI);tpo=r(XYr,"ConvBertModel"),XYr.forEach(t),apo=r(lwe," (ConvBERT model)"),lwe.forEach(t),npo=i($),pp=n($,"LI",{});var iwe=s(pp);sse=n(iwe,"STRONG",{});var zYr=s(sse);spo=r(zYr,"convnext"),zYr.forEach(t),lpo=r(iwe," \u2014 "),yI=n(iwe,"A",{href:!0});var WYr=s(yI);ipo=r(WYr,"ConvNextModel"),WYr.forEach(t),dpo=r(iwe," (ConvNext model)"),iwe.forEach(t),cpo=i($),up=n($,"LI",{});var dwe=s(up);lse=n(dwe,"STRONG",{});var QYr=s(lse);fpo=r(QYr,"ctrl"),QYr.forEach(t),mpo=r(dwe," \u2014 "),LI=n(dwe,"A",{href:!0});var HYr=s(LI);gpo=r(HYr,"CTRLModel"),HYr.forEach(t),hpo=r(dwe," (CTRL model)"),dwe.forEach(t),ppo=i($),_p=n($,"LI",{});var cwe=s(_p);ise=n(cwe,"STRONG",{});var UYr=s(ise);upo=r(UYr,"data2vec-audio"),UYr.forEach(t),_po=r(cwe," \u2014 "),xI=n(cwe,"A",{href:!0});var JYr=s(xI);bpo=r(JYr,"Data2VecAudioModel"),JYr.forEach(t),vpo=r(cwe," (Data2VecAudio model)"),cwe.forEach(t),Fpo=i($),bp=n($,"LI",{});var fwe=s(bp);dse=n(fwe,"STRONG",{});var YYr=s(dse);Tpo=r(YYr,"data2vec-text"),YYr.forEach(t),Mpo=r(fwe," \u2014 "),$I=n(fwe,"A",{href:!0});var KYr=s($I);Epo=r(KYr,"Data2VecTextModel"),KYr.forEach(t),Cpo=r(fwe," (Data2VecText model)"),fwe.forEach(t),wpo=i($),vp=n($,"LI",{});var mwe=s(vp);cse=n(mwe,"STRONG",{});var ZYr=s(cse);Apo=r(ZYr,"data2vec-vision"),ZYr.forEach(t),ypo=r(mwe," \u2014 "),kI=n(mwe,"A",{href:!0});var eKr=s(kI);Lpo=r(eKr,"Data2VecVisionModel"),eKr.forEach(t),xpo=r(mwe," (Data2VecVision model)"),mwe.forEach(t),$po=i($),Fp=n($,"LI",{});var gwe=s(Fp);fse=n(gwe,"STRONG",{});var oKr=s(fse);kpo=r(oKr,"deberta"),oKr.forEach(t),Spo=r(gwe," \u2014 "),SI=n(gwe,"A",{href:!0});var rKr=s(SI);Rpo=r(rKr,"DebertaModel"),rKr.forEach(t),Ppo=r(gwe," (DeBERTa model)"),gwe.forEach(t),Bpo=i($),Tp=n($,"LI",{});var hwe=s(Tp);mse=n(hwe,"STRONG",{});var tKr=s(mse);Ipo=r(tKr,"deberta-v2"),tKr.forEach(t),qpo=r(hwe," \u2014 "),RI=n(hwe,"A",{href:!0});var aKr=s(RI);Npo=r(aKr,"DebertaV2Model"),aKr.forEach(t),jpo=r(hwe," (DeBERTa-v2 model)"),hwe.forEach(t),Dpo=i($),Mp=n($,"LI",{});var pwe=s(Mp);gse=n(pwe,"STRONG",{});var nKr=s(gse);Gpo=r(nKr,"decision_transformer"),nKr.forEach(t),Opo=r(pwe," \u2014 "),PI=n(pwe,"A",{href:!0});var sKr=s(PI);Vpo=r(sKr,"DecisionTransformerModel"),sKr.forEach(t),Xpo=r(pwe," (Decision Transformer model)"),pwe.forEach(t),zpo=i($),Ep=n($,"LI",{});var uwe=s(Ep);hse=n(uwe,"STRONG",{});var lKr=s(hse);Wpo=r(lKr,"deit"),lKr.forEach(t),Qpo=r(uwe," \u2014 "),BI=n(uwe,"A",{href:!0});var iKr=s(BI);Hpo=r(iKr,"DeiTModel"),iKr.forEach(t),Upo=r(uwe," (DeiT model)"),uwe.forEach(t),Jpo=i($),Cp=n($,"LI",{});var _we=s(Cp);pse=n(_we,"STRONG",{});var dKr=s(pse);Ypo=r(dKr,"detr"),dKr.forEach(t),Kpo=r(_we," \u2014 "),II=n(_we,"A",{href:!0});var cKr=s(II);Zpo=r(cKr,"DetrModel"),cKr.forEach(t),euo=r(_we," (DETR model)"),_we.forEach(t),ouo=i($),wp=n($,"LI",{});var bwe=s(wp);use=n(bwe,"STRONG",{});var fKr=s(use);ruo=r(fKr,"distilbert"),fKr.forEach(t),tuo=r(bwe," \u2014 "),qI=n(bwe,"A",{href:!0});var mKr=s(qI);auo=r(mKr,"DistilBertModel"),mKr.forEach(t),nuo=r(bwe," (DistilBERT model)"),bwe.forEach(t),suo=i($),Ap=n($,"LI",{});var vwe=s(Ap);_se=n(vwe,"STRONG",{});var gKr=s(_se);luo=r(gKr,"dpr"),gKr.forEach(t),iuo=r(vwe," \u2014 "),NI=n(vwe,"A",{href:!0});var hKr=s(NI);duo=r(hKr,"DPRQuestionEncoder"),hKr.forEach(t),cuo=r(vwe," (DPR model)"),vwe.forEach(t),fuo=i($),yp=n($,"LI",{});var Fwe=s(yp);bse=n(Fwe,"STRONG",{});var pKr=s(bse);muo=r(pKr,"dpt"),pKr.forEach(t),guo=r(Fwe," \u2014 "),jI=n(Fwe,"A",{href:!0});var uKr=s(jI);huo=r(uKr,"DPTModel"),uKr.forEach(t),puo=r(Fwe," (DPT model)"),Fwe.forEach(t),uuo=i($),Lp=n($,"LI",{});var Twe=s(Lp);vse=n(Twe,"STRONG",{});var _Kr=s(vse);_uo=r(_Kr,"electra"),_Kr.forEach(t),buo=r(Twe," \u2014 "),DI=n(Twe,"A",{href:!0});var bKr=s(DI);vuo=r(bKr,"ElectraModel"),bKr.forEach(t),Fuo=r(Twe," (ELECTRA model)"),Twe.forEach(t),Tuo=i($),xp=n($,"LI",{});var Mwe=s(xp);Fse=n(Mwe,"STRONG",{});var vKr=s(Fse);Muo=r(vKr,"flaubert"),vKr.forEach(t),Euo=r(Mwe," \u2014 "),GI=n(Mwe,"A",{href:!0});var FKr=s(GI);Cuo=r(FKr,"FlaubertModel"),FKr.forEach(t),wuo=r(Mwe," (FlauBERT model)"),Mwe.forEach(t),Auo=i($),$p=n($,"LI",{});var Ewe=s($p);Tse=n(Ewe,"STRONG",{});var TKr=s(Tse);yuo=r(TKr,"flava"),TKr.forEach(t),Luo=r(Ewe," \u2014 "),OI=n(Ewe,"A",{href:!0});var MKr=s(OI);xuo=r(MKr,"FlavaModel"),MKr.forEach(t),$uo=r(Ewe," (Flava model)"),Ewe.forEach(t),kuo=i($),kp=n($,"LI",{});var Cwe=s(kp);Mse=n(Cwe,"STRONG",{});var EKr=s(Mse);Suo=r(EKr,"fnet"),EKr.forEach(t),Ruo=r(Cwe," \u2014 "),VI=n(Cwe,"A",{href:!0});var CKr=s(VI);Puo=r(CKr,"FNetModel"),CKr.forEach(t),Buo=r(Cwe," (FNet model)"),Cwe.forEach(t),Iuo=i($),Sp=n($,"LI",{});var wwe=s(Sp);Ese=n(wwe,"STRONG",{});var wKr=s(Ese);quo=r(wKr,"fsmt"),wKr.forEach(t),Nuo=r(wwe," \u2014 "),XI=n(wwe,"A",{href:!0});var AKr=s(XI);juo=r(AKr,"FSMTModel"),AKr.forEach(t),Duo=r(wwe," (FairSeq Machine-Translation model)"),wwe.forEach(t),Guo=i($),Ps=n($,"LI",{});var $$=s(Ps);Cse=n($$,"STRONG",{});var yKr=s(Cse);Ouo=r(yKr,"funnel"),yKr.forEach(t),Vuo=r($$," \u2014 "),zI=n($$,"A",{href:!0});var LKr=s(zI);Xuo=r(LKr,"FunnelModel"),LKr.forEach(t),zuo=r($$," or "),WI=n($$,"A",{href:!0});var xKr=s(WI);Wuo=r(xKr,"FunnelBaseModel"),xKr.forEach(t),Quo=r($$," (Funnel Transformer model)"),$$.forEach(t),Huo=i($),Rp=n($,"LI",{});var Awe=s(Rp);wse=n(Awe,"STRONG",{});var $Kr=s(wse);Uuo=r($Kr,"glpn"),$Kr.forEach(t),Juo=r(Awe," \u2014 "),QI=n(Awe,"A",{href:!0});var kKr=s(QI);Yuo=r(kKr,"GLPNModel"),kKr.forEach(t),Kuo=r(Awe," (GLPN model)"),Awe.forEach(t),Zuo=i($),Pp=n($,"LI",{});var ywe=s(Pp);Ase=n(ywe,"STRONG",{});var SKr=s(Ase);e_o=r(SKr,"gpt2"),SKr.forEach(t),o_o=r(ywe," \u2014 "),HI=n(ywe,"A",{href:!0});var RKr=s(HI);r_o=r(RKr,"GPT2Model"),RKr.forEach(t),t_o=r(ywe," (OpenAI GPT-2 model)"),ywe.forEach(t),a_o=i($),Bp=n($,"LI",{});var Lwe=s(Bp);yse=n(Lwe,"STRONG",{});var PKr=s(yse);n_o=r(PKr,"gpt_neo"),PKr.forEach(t),s_o=r(Lwe," \u2014 "),UI=n(Lwe,"A",{href:!0});var BKr=s(UI);l_o=r(BKr,"GPTNeoModel"),BKr.forEach(t),i_o=r(Lwe," (GPT Neo model)"),Lwe.forEach(t),d_o=i($),Ip=n($,"LI",{});var xwe=s(Ip);Lse=n(xwe,"STRONG",{});var IKr=s(Lse);c_o=r(IKr,"gptj"),IKr.forEach(t),f_o=r(xwe," \u2014 "),JI=n(xwe,"A",{href:!0});var qKr=s(JI);m_o=r(qKr,"GPTJModel"),qKr.forEach(t),g_o=r(xwe," (GPT-J model)"),xwe.forEach(t),h_o=i($),qp=n($,"LI",{});var $we=s(qp);xse=n($we,"STRONG",{});var NKr=s(xse);p_o=r(NKr,"hubert"),NKr.forEach(t),u_o=r($we," \u2014 "),YI=n($we,"A",{href:!0});var jKr=s(YI);__o=r(jKr,"HubertModel"),jKr.forEach(t),b_o=r($we," (Hubert model)"),$we.forEach(t),v_o=i($),Np=n($,"LI",{});var kwe=s(Np);$se=n(kwe,"STRONG",{});var DKr=s($se);F_o=r(DKr,"ibert"),DKr.forEach(t),T_o=r(kwe," \u2014 "),KI=n(kwe,"A",{href:!0});var GKr=s(KI);M_o=r(GKr,"IBertModel"),GKr.forEach(t),E_o=r(kwe," (I-BERT model)"),kwe.forEach(t),C_o=i($),jp=n($,"LI",{});var Swe=s(jp);kse=n(Swe,"STRONG",{});var OKr=s(kse);w_o=r(OKr,"imagegpt"),OKr.forEach(t),A_o=r(Swe," \u2014 "),ZI=n(Swe,"A",{href:!0});var VKr=s(ZI);y_o=r(VKr,"ImageGPTModel"),VKr.forEach(t),L_o=r(Swe," (ImageGPT model)"),Swe.forEach(t),x_o=i($),Dp=n($,"LI",{});var Rwe=s(Dp);Sse=n(Rwe,"STRONG",{});var XKr=s(Sse);$_o=r(XKr,"layoutlm"),XKr.forEach(t),k_o=r(Rwe," \u2014 "),eq=n(Rwe,"A",{href:!0});var zKr=s(eq);S_o=r(zKr,"LayoutLMModel"),zKr.forEach(t),R_o=r(Rwe," (LayoutLM model)"),Rwe.forEach(t),P_o=i($),Gp=n($,"LI",{});var Pwe=s(Gp);Rse=n(Pwe,"STRONG",{});var WKr=s(Rse);B_o=r(WKr,"layoutlmv2"),WKr.forEach(t),I_o=r(Pwe," \u2014 "),oq=n(Pwe,"A",{href:!0});var QKr=s(oq);q_o=r(QKr,"LayoutLMv2Model"),QKr.forEach(t),N_o=r(Pwe," (LayoutLMv2 model)"),Pwe.forEach(t),j_o=i($),Op=n($,"LI",{});var Bwe=s(Op);Pse=n(Bwe,"STRONG",{});var HKr=s(Pse);D_o=r(HKr,"layoutlmv3"),HKr.forEach(t),G_o=r(Bwe," \u2014 "),rq=n(Bwe,"A",{href:!0});var UKr=s(rq);O_o=r(UKr,"LayoutLMv3Model"),UKr.forEach(t),V_o=r(Bwe," (LayoutLMv3 model)"),Bwe.forEach(t),X_o=i($),Vp=n($,"LI",{});var Iwe=s(Vp);Bse=n(Iwe,"STRONG",{});var JKr=s(Bse);z_o=r(JKr,"led"),JKr.forEach(t),W_o=r(Iwe," \u2014 "),tq=n(Iwe,"A",{href:!0});var YKr=s(tq);Q_o=r(YKr,"LEDModel"),YKr.forEach(t),H_o=r(Iwe," (LED model)"),Iwe.forEach(t),U_o=i($),Xp=n($,"LI",{});var qwe=s(Xp);Ise=n(qwe,"STRONG",{});var KKr=s(Ise);J_o=r(KKr,"longformer"),KKr.forEach(t),Y_o=r(qwe," \u2014 "),aq=n(qwe,"A",{href:!0});var ZKr=s(aq);K_o=r(ZKr,"LongformerModel"),ZKr.forEach(t),Z_o=r(qwe," (Longformer model)"),qwe.forEach(t),e0o=i($),zp=n($,"LI",{});var Nwe=s(zp);qse=n(Nwe,"STRONG",{});var eZr=s(qse);o0o=r(eZr,"luke"),eZr.forEach(t),r0o=r(Nwe," \u2014 "),nq=n(Nwe,"A",{href:!0});var oZr=s(nq);t0o=r(oZr,"LukeModel"),oZr.forEach(t),a0o=r(Nwe," (LUKE model)"),Nwe.forEach(t),n0o=i($),Wp=n($,"LI",{});var jwe=s(Wp);Nse=n(jwe,"STRONG",{});var rZr=s(Nse);s0o=r(rZr,"lxmert"),rZr.forEach(t),l0o=r(jwe," \u2014 "),sq=n(jwe,"A",{href:!0});var tZr=s(sq);i0o=r(tZr,"LxmertModel"),tZr.forEach(t),d0o=r(jwe," (LXMERT model)"),jwe.forEach(t),c0o=i($),Qp=n($,"LI",{});var Dwe=s(Qp);jse=n(Dwe,"STRONG",{});var aZr=s(jse);f0o=r(aZr,"m2m_100"),aZr.forEach(t),m0o=r(Dwe," \u2014 "),lq=n(Dwe,"A",{href:!0});var nZr=s(lq);g0o=r(nZr,"M2M100Model"),nZr.forEach(t),h0o=r(Dwe," (M2M100 model)"),Dwe.forEach(t),p0o=i($),Hp=n($,"LI",{});var Gwe=s(Hp);Dse=n(Gwe,"STRONG",{});var sZr=s(Dse);u0o=r(sZr,"marian"),sZr.forEach(t),_0o=r(Gwe," \u2014 "),iq=n(Gwe,"A",{href:!0});var lZr=s(iq);b0o=r(lZr,"MarianModel"),lZr.forEach(t),v0o=r(Gwe," (Marian model)"),Gwe.forEach(t),F0o=i($),Up=n($,"LI",{});var Owe=s(Up);Gse=n(Owe,"STRONG",{});var iZr=s(Gse);T0o=r(iZr,"maskformer"),iZr.forEach(t),M0o=r(Owe," \u2014 "),dq=n(Owe,"A",{href:!0});var dZr=s(dq);E0o=r(dZr,"MaskFormerModel"),dZr.forEach(t),C0o=r(Owe," (MaskFormer model)"),Owe.forEach(t),w0o=i($),Jp=n($,"LI",{});var Vwe=s(Jp);Ose=n(Vwe,"STRONG",{});var cZr=s(Ose);A0o=r(cZr,"mbart"),cZr.forEach(t),y0o=r(Vwe," \u2014 "),cq=n(Vwe,"A",{href:!0});var fZr=s(cq);L0o=r(fZr,"MBartModel"),fZr.forEach(t),x0o=r(Vwe," (mBART model)"),Vwe.forEach(t),$0o=i($),Yp=n($,"LI",{});var Xwe=s(Yp);Vse=n(Xwe,"STRONG",{});var mZr=s(Vse);k0o=r(mZr,"megatron-bert"),mZr.forEach(t),S0o=r(Xwe," \u2014 "),fq=n(Xwe,"A",{href:!0});var gZr=s(fq);R0o=r(gZr,"MegatronBertModel"),gZr.forEach(t),P0o=r(Xwe," (MegatronBert model)"),Xwe.forEach(t),B0o=i($),Kp=n($,"LI",{});var zwe=s(Kp);Xse=n(zwe,"STRONG",{});var hZr=s(Xse);I0o=r(hZr,"mobilebert"),hZr.forEach(t),q0o=r(zwe," \u2014 "),mq=n(zwe,"A",{href:!0});var pZr=s(mq);N0o=r(pZr,"MobileBertModel"),pZr.forEach(t),j0o=r(zwe," (MobileBERT model)"),zwe.forEach(t),D0o=i($),Zp=n($,"LI",{});var Wwe=s(Zp);zse=n(Wwe,"STRONG",{});var uZr=s(zse);G0o=r(uZr,"mpnet"),uZr.forEach(t),O0o=r(Wwe," \u2014 "),gq=n(Wwe,"A",{href:!0});var _Zr=s(gq);V0o=r(_Zr,"MPNetModel"),_Zr.forEach(t),X0o=r(Wwe," (MPNet model)"),Wwe.forEach(t),z0o=i($),eu=n($,"LI",{});var Qwe=s(eu);Wse=n(Qwe,"STRONG",{});var bZr=s(Wse);W0o=r(bZr,"mt5"),bZr.forEach(t),Q0o=r(Qwe," \u2014 "),hq=n(Qwe,"A",{href:!0});var vZr=s(hq);H0o=r(vZr,"MT5Model"),vZr.forEach(t),U0o=r(Qwe," (mT5 model)"),Qwe.forEach(t),J0o=i($),ou=n($,"LI",{});var Hwe=s(ou);Qse=n(Hwe,"STRONG",{});var FZr=s(Qse);Y0o=r(FZr,"nystromformer"),FZr.forEach(t),K0o=r(Hwe," \u2014 "),pq=n(Hwe,"A",{href:!0});var TZr=s(pq);Z0o=r(TZr,"NystromformerModel"),TZr.forEach(t),e1o=r(Hwe," (Nystromformer model)"),Hwe.forEach(t),o1o=i($),ru=n($,"LI",{});var Uwe=s(ru);Hse=n(Uwe,"STRONG",{});var MZr=s(Hse);r1o=r(MZr,"openai-gpt"),MZr.forEach(t),t1o=r(Uwe," \u2014 "),uq=n(Uwe,"A",{href:!0});var EZr=s(uq);a1o=r(EZr,"OpenAIGPTModel"),EZr.forEach(t),n1o=r(Uwe," (OpenAI GPT model)"),Uwe.forEach(t),s1o=i($),tu=n($,"LI",{});var Jwe=s(tu);Use=n(Jwe,"STRONG",{});var CZr=s(Use);l1o=r(CZr,"opt"),CZr.forEach(t),i1o=r(Jwe," \u2014 "),_q=n(Jwe,"A",{href:!0});var wZr=s(_q);d1o=r(wZr,"OPTModel"),wZr.forEach(t),c1o=r(Jwe," (OPT model)"),Jwe.forEach(t),f1o=i($),au=n($,"LI",{});var Ywe=s(au);Jse=n(Ywe,"STRONG",{});var AZr=s(Jse);m1o=r(AZr,"pegasus"),AZr.forEach(t),g1o=r(Ywe," \u2014 "),bq=n(Ywe,"A",{href:!0});var yZr=s(bq);h1o=r(yZr,"PegasusModel"),yZr.forEach(t),p1o=r(Ywe," (Pegasus model)"),Ywe.forEach(t),u1o=i($),nu=n($,"LI",{});var Kwe=s(nu);Yse=n(Kwe,"STRONG",{});var LZr=s(Yse);_1o=r(LZr,"perceiver"),LZr.forEach(t),b1o=r(Kwe," \u2014 "),vq=n(Kwe,"A",{href:!0});var xZr=s(vq);v1o=r(xZr,"PerceiverModel"),xZr.forEach(t),F1o=r(Kwe," (Perceiver model)"),Kwe.forEach(t),T1o=i($),su=n($,"LI",{});var Zwe=s(su);Kse=n(Zwe,"STRONG",{});var $Zr=s(Kse);M1o=r($Zr,"plbart"),$Zr.forEach(t),E1o=r(Zwe," \u2014 "),Fq=n(Zwe,"A",{href:!0});var kZr=s(Fq);C1o=r(kZr,"PLBartModel"),kZr.forEach(t),w1o=r(Zwe," (PLBart model)"),Zwe.forEach(t),A1o=i($),lu=n($,"LI",{});var eAe=s(lu);Zse=n(eAe,"STRONG",{});var SZr=s(Zse);y1o=r(SZr,"poolformer"),SZr.forEach(t),L1o=r(eAe," \u2014 "),Tq=n(eAe,"A",{href:!0});var RZr=s(Tq);x1o=r(RZr,"PoolFormerModel"),RZr.forEach(t),$1o=r(eAe," (PoolFormer model)"),eAe.forEach(t),k1o=i($),iu=n($,"LI",{});var oAe=s(iu);ele=n(oAe,"STRONG",{});var PZr=s(ele);S1o=r(PZr,"prophetnet"),PZr.forEach(t),R1o=r(oAe," \u2014 "),Mq=n(oAe,"A",{href:!0});var BZr=s(Mq);P1o=r(BZr,"ProphetNetModel"),BZr.forEach(t),B1o=r(oAe," (ProphetNet model)"),oAe.forEach(t),I1o=i($),du=n($,"LI",{});var rAe=s(du);ole=n(rAe,"STRONG",{});var IZr=s(ole);q1o=r(IZr,"qdqbert"),IZr.forEach(t),N1o=r(rAe," \u2014 "),Eq=n(rAe,"A",{href:!0});var qZr=s(Eq);j1o=r(qZr,"QDQBertModel"),qZr.forEach(t),D1o=r(rAe," (QDQBert model)"),rAe.forEach(t),G1o=i($),cu=n($,"LI",{});var tAe=s(cu);rle=n(tAe,"STRONG",{});var NZr=s(rle);O1o=r(NZr,"reformer"),NZr.forEach(t),V1o=r(tAe," \u2014 "),Cq=n(tAe,"A",{href:!0});var jZr=s(Cq);X1o=r(jZr,"ReformerModel"),jZr.forEach(t),z1o=r(tAe," (Reformer model)"),tAe.forEach(t),W1o=i($),fu=n($,"LI",{});var aAe=s(fu);tle=n(aAe,"STRONG",{});var DZr=s(tle);Q1o=r(DZr,"regnet"),DZr.forEach(t),H1o=r(aAe," \u2014 "),wq=n(aAe,"A",{href:!0});var GZr=s(wq);U1o=r(GZr,"RegNetModel"),GZr.forEach(t),J1o=r(aAe," (RegNet model)"),aAe.forEach(t),Y1o=i($),mu=n($,"LI",{});var nAe=s(mu);ale=n(nAe,"STRONG",{});var OZr=s(ale);K1o=r(OZr,"rembert"),OZr.forEach(t),Z1o=r(nAe," \u2014 "),Aq=n(nAe,"A",{href:!0});var VZr=s(Aq);ebo=r(VZr,"RemBertModel"),VZr.forEach(t),obo=r(nAe," (RemBERT model)"),nAe.forEach(t),rbo=i($),gu=n($,"LI",{});var sAe=s(gu);nle=n(sAe,"STRONG",{});var XZr=s(nle);tbo=r(XZr,"resnet"),XZr.forEach(t),abo=r(sAe," \u2014 "),yq=n(sAe,"A",{href:!0});var zZr=s(yq);nbo=r(zZr,"ResNetModel"),zZr.forEach(t),sbo=r(sAe," (ResNet model)"),sAe.forEach(t),lbo=i($),hu=n($,"LI",{});var lAe=s(hu);sle=n(lAe,"STRONG",{});var WZr=s(sle);ibo=r(WZr,"retribert"),WZr.forEach(t),dbo=r(lAe," \u2014 "),Lq=n(lAe,"A",{href:!0});var QZr=s(Lq);cbo=r(QZr,"RetriBertModel"),QZr.forEach(t),fbo=r(lAe," (RetriBERT model)"),lAe.forEach(t),mbo=i($),pu=n($,"LI",{});var iAe=s(pu);lle=n(iAe,"STRONG",{});var HZr=s(lle);gbo=r(HZr,"roberta"),HZr.forEach(t),hbo=r(iAe," \u2014 "),xq=n(iAe,"A",{href:!0});var UZr=s(xq);pbo=r(UZr,"RobertaModel"),UZr.forEach(t),ubo=r(iAe," (RoBERTa model)"),iAe.forEach(t),_bo=i($),uu=n($,"LI",{});var dAe=s(uu);ile=n(dAe,"STRONG",{});var JZr=s(ile);bbo=r(JZr,"roformer"),JZr.forEach(t),vbo=r(dAe," \u2014 "),$q=n(dAe,"A",{href:!0});var YZr=s($q);Fbo=r(YZr,"RoFormerModel"),YZr.forEach(t),Tbo=r(dAe," (RoFormer model)"),dAe.forEach(t),Mbo=i($),_u=n($,"LI",{});var cAe=s(_u);dle=n(cAe,"STRONG",{});var KZr=s(dle);Ebo=r(KZr,"segformer"),KZr.forEach(t),Cbo=r(cAe," \u2014 "),kq=n(cAe,"A",{href:!0});var ZZr=s(kq);wbo=r(ZZr,"SegformerModel"),ZZr.forEach(t),Abo=r(cAe," (SegFormer model)"),cAe.forEach(t),ybo=i($),bu=n($,"LI",{});var fAe=s(bu);cle=n(fAe,"STRONG",{});var eet=s(cle);Lbo=r(eet,"sew"),eet.forEach(t),xbo=r(fAe," \u2014 "),Sq=n(fAe,"A",{href:!0});var oet=s(Sq);$bo=r(oet,"SEWModel"),oet.forEach(t),kbo=r(fAe," (SEW model)"),fAe.forEach(t),Sbo=i($),vu=n($,"LI",{});var mAe=s(vu);fle=n(mAe,"STRONG",{});var ret=s(fle);Rbo=r(ret,"sew-d"),ret.forEach(t),Pbo=r(mAe," \u2014 "),Rq=n(mAe,"A",{href:!0});var tet=s(Rq);Bbo=r(tet,"SEWDModel"),tet.forEach(t),Ibo=r(mAe," (SEW-D model)"),mAe.forEach(t),qbo=i($),Fu=n($,"LI",{});var gAe=s(Fu);mle=n(gAe,"STRONG",{});var aet=s(mle);Nbo=r(aet,"speech_to_text"),aet.forEach(t),jbo=r(gAe," \u2014 "),Pq=n(gAe,"A",{href:!0});var net=s(Pq);Dbo=r(net,"Speech2TextModel"),net.forEach(t),Gbo=r(gAe," (Speech2Text model)"),gAe.forEach(t),Obo=i($),Tu=n($,"LI",{});var hAe=s(Tu);gle=n(hAe,"STRONG",{});var set=s(gle);Vbo=r(set,"splinter"),set.forEach(t),Xbo=r(hAe," \u2014 "),Bq=n(hAe,"A",{href:!0});var iet=s(Bq);zbo=r(iet,"SplinterModel"),iet.forEach(t),Wbo=r(hAe," (Splinter model)"),hAe.forEach(t),Qbo=i($),Mu=n($,"LI",{});var pAe=s(Mu);hle=n(pAe,"STRONG",{});var det=s(hle);Hbo=r(det,"squeezebert"),det.forEach(t),Ubo=r(pAe," \u2014 "),Iq=n(pAe,"A",{href:!0});var cet=s(Iq);Jbo=r(cet,"SqueezeBertModel"),cet.forEach(t),Ybo=r(pAe," (SqueezeBERT model)"),pAe.forEach(t),Kbo=i($),Eu=n($,"LI",{});var uAe=s(Eu);ple=n(uAe,"STRONG",{});var fet=s(ple);Zbo=r(fet,"swin"),fet.forEach(t),e2o=r(uAe," \u2014 "),qq=n(uAe,"A",{href:!0});var met=s(qq);o2o=r(met,"SwinModel"),met.forEach(t),r2o=r(uAe," (Swin model)"),uAe.forEach(t),t2o=i($),Cu=n($,"LI",{});var _Ae=s(Cu);ule=n(_Ae,"STRONG",{});var get=s(ule);a2o=r(get,"t5"),get.forEach(t),n2o=r(_Ae," \u2014 "),Nq=n(_Ae,"A",{href:!0});var het=s(Nq);s2o=r(het,"T5Model"),het.forEach(t),l2o=r(_Ae," (T5 model)"),_Ae.forEach(t),i2o=i($),wu=n($,"LI",{});var bAe=s(wu);_le=n(bAe,"STRONG",{});var pet=s(_le);d2o=r(pet,"tapas"),pet.forEach(t),c2o=r(bAe," \u2014 "),jq=n(bAe,"A",{href:!0});var uet=s(jq);f2o=r(uet,"TapasModel"),uet.forEach(t),m2o=r(bAe," (TAPAS model)"),bAe.forEach(t),g2o=i($),Au=n($,"LI",{});var vAe=s(Au);ble=n(vAe,"STRONG",{});var _et=s(ble);h2o=r(_et,"transfo-xl"),_et.forEach(t),p2o=r(vAe," \u2014 "),Dq=n(vAe,"A",{href:!0});var bet=s(Dq);u2o=r(bet,"TransfoXLModel"),bet.forEach(t),_2o=r(vAe," (Transformer-XL model)"),vAe.forEach(t),b2o=i($),yu=n($,"LI",{});var FAe=s(yu);vle=n(FAe,"STRONG",{});var vet=s(vle);v2o=r(vet,"unispeech"),vet.forEach(t),F2o=r(FAe," \u2014 "),Gq=n(FAe,"A",{href:!0});var Fet=s(Gq);T2o=r(Fet,"UniSpeechModel"),Fet.forEach(t),M2o=r(FAe," (UniSpeech model)"),FAe.forEach(t),E2o=i($),Lu=n($,"LI",{});var TAe=s(Lu);Fle=n(TAe,"STRONG",{});var Tet=s(Fle);C2o=r(Tet,"unispeech-sat"),Tet.forEach(t),w2o=r(TAe," \u2014 "),Oq=n(TAe,"A",{href:!0});var Met=s(Oq);A2o=r(Met,"UniSpeechSatModel"),Met.forEach(t),y2o=r(TAe," (UniSpeechSat model)"),TAe.forEach(t),L2o=i($),xu=n($,"LI",{});var MAe=s(xu);Tle=n(MAe,"STRONG",{});var Eet=s(Tle);x2o=r(Eet,"van"),Eet.forEach(t),$2o=r(MAe," \u2014 "),Vq=n(MAe,"A",{href:!0});var Cet=s(Vq);k2o=r(Cet,"VanModel"),Cet.forEach(t),S2o=r(MAe," (VAN model)"),MAe.forEach(t),R2o=i($),$u=n($,"LI",{});var EAe=s($u);Mle=n(EAe,"STRONG",{});var wet=s(Mle);P2o=r(wet,"vilt"),wet.forEach(t),B2o=r(EAe," \u2014 "),Xq=n(EAe,"A",{href:!0});var Aet=s(Xq);I2o=r(Aet,"ViltModel"),Aet.forEach(t),q2o=r(EAe," (ViLT model)"),EAe.forEach(t),N2o=i($),ku=n($,"LI",{});var CAe=s(ku);Ele=n(CAe,"STRONG",{});var yet=s(Ele);j2o=r(yet,"vision-text-dual-encoder"),yet.forEach(t),D2o=r(CAe," \u2014 "),zq=n(CAe,"A",{href:!0});var Let=s(zq);G2o=r(Let,"VisionTextDualEncoderModel"),Let.forEach(t),O2o=r(CAe," (VisionTextDualEncoder model)"),CAe.forEach(t),V2o=i($),Su=n($,"LI",{});var wAe=s(Su);Cle=n(wAe,"STRONG",{});var xet=s(Cle);X2o=r(xet,"visual_bert"),xet.forEach(t),z2o=r(wAe," \u2014 "),Wq=n(wAe,"A",{href:!0});var $et=s(Wq);W2o=r($et,"VisualBertModel"),$et.forEach(t),Q2o=r(wAe," (VisualBert model)"),wAe.forEach(t),H2o=i($),Ru=n($,"LI",{});var AAe=s(Ru);wle=n(AAe,"STRONG",{});var ket=s(wle);U2o=r(ket,"vit"),ket.forEach(t),J2o=r(AAe," \u2014 "),Qq=n(AAe,"A",{href:!0});var Set=s(Qq);Y2o=r(Set,"ViTModel"),Set.forEach(t),K2o=r(AAe," (ViT model)"),AAe.forEach(t),Z2o=i($),Pu=n($,"LI",{});var yAe=s(Pu);Ale=n(yAe,"STRONG",{});var Ret=s(Ale);evo=r(Ret,"vit_mae"),Ret.forEach(t),ovo=r(yAe," \u2014 "),Hq=n(yAe,"A",{href:!0});var Pet=s(Hq);rvo=r(Pet,"ViTMAEModel"),Pet.forEach(t),tvo=r(yAe," (ViTMAE model)"),yAe.forEach(t),avo=i($),Bu=n($,"LI",{});var LAe=s(Bu);yle=n(LAe,"STRONG",{});var Bet=s(yle);nvo=r(Bet,"wav2vec2"),Bet.forEach(t),svo=r(LAe," \u2014 "),Uq=n(LAe,"A",{href:!0});var Iet=s(Uq);lvo=r(Iet,"Wav2Vec2Model"),Iet.forEach(t),ivo=r(LAe," (Wav2Vec2 model)"),LAe.forEach(t),dvo=i($),Iu=n($,"LI",{});var xAe=s(Iu);Lle=n(xAe,"STRONG",{});var qet=s(Lle);cvo=r(qet,"wav2vec2-conformer"),qet.forEach(t),fvo=r(xAe," \u2014 "),Jq=n(xAe,"A",{href:!0});var Net=s(Jq);mvo=r(Net,"Wav2Vec2ConformerModel"),Net.forEach(t),gvo=r(xAe," (Wav2Vec2-Conformer model)"),xAe.forEach(t),hvo=i($),qu=n($,"LI",{});var $Ae=s(qu);xle=n($Ae,"STRONG",{});var jet=s(xle);pvo=r(jet,"wavlm"),jet.forEach(t),uvo=r($Ae," \u2014 "),Yq=n($Ae,"A",{href:!0});var Det=s(Yq);_vo=r(Det,"WavLMModel"),Det.forEach(t),bvo=r($Ae," (WavLM model)"),$Ae.forEach(t),vvo=i($),Nu=n($,"LI",{});var kAe=s(Nu);$le=n(kAe,"STRONG",{});var Get=s($le);Fvo=r(Get,"xglm"),Get.forEach(t),Tvo=r(kAe," \u2014 "),Kq=n(kAe,"A",{href:!0});var Oet=s(Kq);Mvo=r(Oet,"XGLMModel"),Oet.forEach(t),Evo=r(kAe," (XGLM model)"),kAe.forEach(t),Cvo=i($),ju=n($,"LI",{});var SAe=s(ju);kle=n(SAe,"STRONG",{});var Vet=s(kle);wvo=r(Vet,"xlm"),Vet.forEach(t),Avo=r(SAe," \u2014 "),Zq=n(SAe,"A",{href:!0});var Xet=s(Zq);yvo=r(Xet,"XLMModel"),Xet.forEach(t),Lvo=r(SAe," (XLM model)"),SAe.forEach(t),xvo=i($),Du=n($,"LI",{});var RAe=s(Du);Sle=n(RAe,"STRONG",{});var zet=s(Sle);$vo=r(zet,"xlm-prophetnet"),zet.forEach(t),kvo=r(RAe," \u2014 "),eN=n(RAe,"A",{href:!0});var Wet=s(eN);Svo=r(Wet,"XLMProphetNetModel"),Wet.forEach(t),Rvo=r(RAe," (XLMProphetNet model)"),RAe.forEach(t),Pvo=i($),Gu=n($,"LI",{});var PAe=s(Gu);Rle=n(PAe,"STRONG",{});var Qet=s(Rle);Bvo=r(Qet,"xlm-roberta"),Qet.forEach(t),Ivo=r(PAe," \u2014 "),oN=n(PAe,"A",{href:!0});var Het=s(oN);qvo=r(Het,"XLMRobertaModel"),Het.forEach(t),Nvo=r(PAe," (XLM-RoBERTa model)"),PAe.forEach(t),jvo=i($),Ou=n($,"LI",{});var BAe=s(Ou);Ple=n(BAe,"STRONG",{});var Uet=s(Ple);Dvo=r(Uet,"xlm-roberta-xl"),Uet.forEach(t),Gvo=r(BAe," \u2014 "),rN=n(BAe,"A",{href:!0});var Jet=s(rN);Ovo=r(Jet,"XLMRobertaXLModel"),Jet.forEach(t),Vvo=r(BAe," (XLM-RoBERTa-XL model)"),BAe.forEach(t),Xvo=i($),Vu=n($,"LI",{});var IAe=s(Vu);Ble=n(IAe,"STRONG",{});var Yet=s(Ble);zvo=r(Yet,"xlnet"),Yet.forEach(t),Wvo=r(IAe," \u2014 "),tN=n(IAe,"A",{href:!0});var Ket=s(tN);Qvo=r(Ket,"XLNetModel"),Ket.forEach(t),Hvo=r(IAe," (XLNet model)"),IAe.forEach(t),Uvo=i($),Xu=n($,"LI",{});var qAe=s(Xu);Ile=n(qAe,"STRONG",{});var Zet=s(Ile);Jvo=r(Zet,"yolos"),Zet.forEach(t),Yvo=r(qAe," \u2014 "),aN=n(qAe,"A",{href:!0});var eot=s(aN);Kvo=r(eot,"YolosModel"),eot.forEach(t),Zvo=r(qAe," (YOLOS model)"),qAe.forEach(t),eFo=i($),zu=n($,"LI",{});var NAe=s(zu);qle=n(NAe,"STRONG",{});var oot=s(qle);oFo=r(oot,"yoso"),oot.forEach(t),rFo=r(NAe," \u2014 "),nN=n(NAe,"A",{href:!0});var rot=s(nN);tFo=r(rot,"YosoModel"),rot.forEach(t),aFo=r(NAe," (YOSO model)"),NAe.forEach(t),$.forEach(t),nFo=i(oa),Wu=n(oa,"P",{});var jAe=s(Wu);sFo=r(jAe,"The model is set in evaluation mode by default using "),Nle=n(jAe,"CODE",{});var tot=s(Nle);lFo=r(tot,"model.eval()"),tot.forEach(t),iFo=r(jAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=n(jAe,"CODE",{});var aot=s(jle);dFo=r(aot,"model.train()"),aot.forEach(t),jAe.forEach(t),cFo=i(oa),T(Qu.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),vqe=i(f),Li=n(f,"H2",{class:!0});var Eje=s(Li);Hu=n(Eje,"A",{id:!0,class:!0,href:!0});var not=s(Hu);Dle=n(not,"SPAN",{});var sot=s(Dle);T(WA.$$.fragment,sot),sot.forEach(t),not.forEach(t),fFo=i(Eje),Gle=n(Eje,"SPAN",{});var lot=s(Gle);mFo=r(lot,"AutoModelForPreTraining"),lot.forEach(t),Eje.forEach(t),Fqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(QA.$$.fragment,Os),gFo=i(Os),xi=n(Os,"P",{});var QK=s(xi);hFo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sN=n(QK,"A",{href:!0});var iot=s(sN);pFo=r(iot,"from_pretrained()"),iot.forEach(t),uFo=r(QK," class method or the "),lN=n(QK,"A",{href:!0});var dot=s(lN);_Fo=r(dot,"from_config()"),dot.forEach(t),bFo=r(QK,` class
method.`),QK.forEach(t),vFo=i(Os),HA=n(Os,"P",{});var Cje=s(HA);FFo=r(Cje,"This class cannot be instantiated directly using "),Ole=n(Cje,"CODE",{});var cot=s(Ole);TFo=r(cot,"__init__()"),cot.forEach(t),MFo=r(Cje," (throws an error)."),Cje.forEach(t),EFo=i(Os),at=n(Os,"DIV",{class:!0});var T3=s(at);T(UA.$$.fragment,T3),CFo=i(T3),Vle=n(T3,"P",{});var fot=s(Vle);wFo=r(fot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fot.forEach(t),AFo=i(T3),$i=n(T3,"P",{});var HK=s($i);yFo=r(HK,`Note:
Loading a model from its configuration file does `),Xle=n(HK,"STRONG",{});var mot=s(Xle);LFo=r(mot,"not"),mot.forEach(t),xFo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=n(HK,"A",{href:!0});var got=s(iN);$Fo=r(got,"from_pretrained()"),got.forEach(t),kFo=r(HK," to load the model weights."),HK.forEach(t),SFo=i(T3),T(Uu.$$.fragment,T3),T3.forEach(t),RFo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(JA.$$.fragment,ra),PFo=i(ra),zle=n(ra,"P",{});var hot=s(zle);BFo=r(hot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hot.forEach(t),IFo=i(ra),xa=n(ra,"P",{});var M3=s(xa);qFo=r(M3,"The model class to instantiate is selected based on the "),Wle=n(M3,"CODE",{});var pot=s(Wle);NFo=r(pot,"model_type"),pot.forEach(t),jFo=r(M3,` property of the config object (either
passed as an argument or loaded from `),Qle=n(M3,"CODE",{});var uot=s(Qle);DFo=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),GFo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=n(M3,"CODE",{});var _ot=s(Hle);OFo=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),VFo=r(M3,":"),M3.forEach(t),XFo=i(ra),G=n(ra,"UL",{});var V=s(G);Ju=n(V,"LI",{});var DAe=s(Ju);Ule=n(DAe,"STRONG",{});var bot=s(Ule);zFo=r(bot,"albert"),bot.forEach(t),WFo=r(DAe," \u2014 "),dN=n(DAe,"A",{href:!0});var vot=s(dN);QFo=r(vot,"AlbertForPreTraining"),vot.forEach(t),HFo=r(DAe," (ALBERT model)"),DAe.forEach(t),UFo=i(V),Yu=n(V,"LI",{});var GAe=s(Yu);Jle=n(GAe,"STRONG",{});var Fot=s(Jle);JFo=r(Fot,"bart"),Fot.forEach(t),YFo=r(GAe," \u2014 "),cN=n(GAe,"A",{href:!0});var Tot=s(cN);KFo=r(Tot,"BartForConditionalGeneration"),Tot.forEach(t),ZFo=r(GAe," (BART model)"),GAe.forEach(t),e6o=i(V),Ku=n(V,"LI",{});var OAe=s(Ku);Yle=n(OAe,"STRONG",{});var Mot=s(Yle);o6o=r(Mot,"bert"),Mot.forEach(t),r6o=r(OAe," \u2014 "),fN=n(OAe,"A",{href:!0});var Eot=s(fN);t6o=r(Eot,"BertForPreTraining"),Eot.forEach(t),a6o=r(OAe," (BERT model)"),OAe.forEach(t),n6o=i(V),Zu=n(V,"LI",{});var VAe=s(Zu);Kle=n(VAe,"STRONG",{});var Cot=s(Kle);s6o=r(Cot,"big_bird"),Cot.forEach(t),l6o=r(VAe," \u2014 "),mN=n(VAe,"A",{href:!0});var wot=s(mN);i6o=r(wot,"BigBirdForPreTraining"),wot.forEach(t),d6o=r(VAe," (BigBird model)"),VAe.forEach(t),c6o=i(V),e_=n(V,"LI",{});var XAe=s(e_);Zle=n(XAe,"STRONG",{});var Aot=s(Zle);f6o=r(Aot,"camembert"),Aot.forEach(t),m6o=r(XAe," \u2014 "),gN=n(XAe,"A",{href:!0});var yot=s(gN);g6o=r(yot,"CamembertForMaskedLM"),yot.forEach(t),h6o=r(XAe," (CamemBERT model)"),XAe.forEach(t),p6o=i(V),o_=n(V,"LI",{});var zAe=s(o_);eie=n(zAe,"STRONG",{});var Lot=s(eie);u6o=r(Lot,"ctrl"),Lot.forEach(t),_6o=r(zAe," \u2014 "),hN=n(zAe,"A",{href:!0});var xot=s(hN);b6o=r(xot,"CTRLLMHeadModel"),xot.forEach(t),v6o=r(zAe," (CTRL model)"),zAe.forEach(t),F6o=i(V),r_=n(V,"LI",{});var WAe=s(r_);oie=n(WAe,"STRONG",{});var $ot=s(oie);T6o=r($ot,"data2vec-text"),$ot.forEach(t),M6o=r(WAe," \u2014 "),pN=n(WAe,"A",{href:!0});var kot=s(pN);E6o=r(kot,"Data2VecTextForMaskedLM"),kot.forEach(t),C6o=r(WAe," (Data2VecText model)"),WAe.forEach(t),w6o=i(V),t_=n(V,"LI",{});var QAe=s(t_);rie=n(QAe,"STRONG",{});var Sot=s(rie);A6o=r(Sot,"deberta"),Sot.forEach(t),y6o=r(QAe," \u2014 "),uN=n(QAe,"A",{href:!0});var Rot=s(uN);L6o=r(Rot,"DebertaForMaskedLM"),Rot.forEach(t),x6o=r(QAe," (DeBERTa model)"),QAe.forEach(t),$6o=i(V),a_=n(V,"LI",{});var HAe=s(a_);tie=n(HAe,"STRONG",{});var Pot=s(tie);k6o=r(Pot,"deberta-v2"),Pot.forEach(t),S6o=r(HAe," \u2014 "),_N=n(HAe,"A",{href:!0});var Bot=s(_N);R6o=r(Bot,"DebertaV2ForMaskedLM"),Bot.forEach(t),P6o=r(HAe," (DeBERTa-v2 model)"),HAe.forEach(t),B6o=i(V),n_=n(V,"LI",{});var UAe=s(n_);aie=n(UAe,"STRONG",{});var Iot=s(aie);I6o=r(Iot,"distilbert"),Iot.forEach(t),q6o=r(UAe," \u2014 "),bN=n(UAe,"A",{href:!0});var qot=s(bN);N6o=r(qot,"DistilBertForMaskedLM"),qot.forEach(t),j6o=r(UAe," (DistilBERT model)"),UAe.forEach(t),D6o=i(V),s_=n(V,"LI",{});var JAe=s(s_);nie=n(JAe,"STRONG",{});var Not=s(nie);G6o=r(Not,"electra"),Not.forEach(t),O6o=r(JAe," \u2014 "),vN=n(JAe,"A",{href:!0});var jot=s(vN);V6o=r(jot,"ElectraForPreTraining"),jot.forEach(t),X6o=r(JAe," (ELECTRA model)"),JAe.forEach(t),z6o=i(V),l_=n(V,"LI",{});var YAe=s(l_);sie=n(YAe,"STRONG",{});var Dot=s(sie);W6o=r(Dot,"flaubert"),Dot.forEach(t),Q6o=r(YAe," \u2014 "),FN=n(YAe,"A",{href:!0});var Got=s(FN);H6o=r(Got,"FlaubertWithLMHeadModel"),Got.forEach(t),U6o=r(YAe," (FlauBERT model)"),YAe.forEach(t),J6o=i(V),i_=n(V,"LI",{});var KAe=s(i_);lie=n(KAe,"STRONG",{});var Oot=s(lie);Y6o=r(Oot,"flava"),Oot.forEach(t),K6o=r(KAe," \u2014 "),TN=n(KAe,"A",{href:!0});var Vot=s(TN);Z6o=r(Vot,"FlavaForPreTraining"),Vot.forEach(t),eTo=r(KAe," (Flava model)"),KAe.forEach(t),oTo=i(V),d_=n(V,"LI",{});var ZAe=s(d_);iie=n(ZAe,"STRONG",{});var Xot=s(iie);rTo=r(Xot,"fnet"),Xot.forEach(t),tTo=r(ZAe," \u2014 "),MN=n(ZAe,"A",{href:!0});var zot=s(MN);aTo=r(zot,"FNetForPreTraining"),zot.forEach(t),nTo=r(ZAe," (FNet model)"),ZAe.forEach(t),sTo=i(V),c_=n(V,"LI",{});var eye=s(c_);die=n(eye,"STRONG",{});var Wot=s(die);lTo=r(Wot,"fsmt"),Wot.forEach(t),iTo=r(eye," \u2014 "),EN=n(eye,"A",{href:!0});var Qot=s(EN);dTo=r(Qot,"FSMTForConditionalGeneration"),Qot.forEach(t),cTo=r(eye," (FairSeq Machine-Translation model)"),eye.forEach(t),fTo=i(V),f_=n(V,"LI",{});var oye=s(f_);cie=n(oye,"STRONG",{});var Hot=s(cie);mTo=r(Hot,"funnel"),Hot.forEach(t),gTo=r(oye," \u2014 "),CN=n(oye,"A",{href:!0});var Uot=s(CN);hTo=r(Uot,"FunnelForPreTraining"),Uot.forEach(t),pTo=r(oye," (Funnel Transformer model)"),oye.forEach(t),uTo=i(V),m_=n(V,"LI",{});var rye=s(m_);fie=n(rye,"STRONG",{});var Jot=s(fie);_To=r(Jot,"gpt2"),Jot.forEach(t),bTo=r(rye," \u2014 "),wN=n(rye,"A",{href:!0});var Yot=s(wN);vTo=r(Yot,"GPT2LMHeadModel"),Yot.forEach(t),FTo=r(rye," (OpenAI GPT-2 model)"),rye.forEach(t),TTo=i(V),g_=n(V,"LI",{});var tye=s(g_);mie=n(tye,"STRONG",{});var Kot=s(mie);MTo=r(Kot,"ibert"),Kot.forEach(t),ETo=r(tye," \u2014 "),AN=n(tye,"A",{href:!0});var Zot=s(AN);CTo=r(Zot,"IBertForMaskedLM"),Zot.forEach(t),wTo=r(tye," (I-BERT model)"),tye.forEach(t),ATo=i(V),h_=n(V,"LI",{});var aye=s(h_);gie=n(aye,"STRONG",{});var ert=s(gie);yTo=r(ert,"layoutlm"),ert.forEach(t),LTo=r(aye," \u2014 "),yN=n(aye,"A",{href:!0});var ort=s(yN);xTo=r(ort,"LayoutLMForMaskedLM"),ort.forEach(t),$To=r(aye," (LayoutLM model)"),aye.forEach(t),kTo=i(V),p_=n(V,"LI",{});var nye=s(p_);hie=n(nye,"STRONG",{});var rrt=s(hie);STo=r(rrt,"longformer"),rrt.forEach(t),RTo=r(nye," \u2014 "),LN=n(nye,"A",{href:!0});var trt=s(LN);PTo=r(trt,"LongformerForMaskedLM"),trt.forEach(t),BTo=r(nye," (Longformer model)"),nye.forEach(t),ITo=i(V),u_=n(V,"LI",{});var sye=s(u_);pie=n(sye,"STRONG",{});var art=s(pie);qTo=r(art,"lxmert"),art.forEach(t),NTo=r(sye," \u2014 "),xN=n(sye,"A",{href:!0});var nrt=s(xN);jTo=r(nrt,"LxmertForPreTraining"),nrt.forEach(t),DTo=r(sye," (LXMERT model)"),sye.forEach(t),GTo=i(V),__=n(V,"LI",{});var lye=s(__);uie=n(lye,"STRONG",{});var srt=s(uie);OTo=r(srt,"megatron-bert"),srt.forEach(t),VTo=r(lye," \u2014 "),$N=n(lye,"A",{href:!0});var lrt=s($N);XTo=r(lrt,"MegatronBertForPreTraining"),lrt.forEach(t),zTo=r(lye," (MegatronBert model)"),lye.forEach(t),WTo=i(V),b_=n(V,"LI",{});var iye=s(b_);_ie=n(iye,"STRONG",{});var irt=s(_ie);QTo=r(irt,"mobilebert"),irt.forEach(t),HTo=r(iye," \u2014 "),kN=n(iye,"A",{href:!0});var drt=s(kN);UTo=r(drt,"MobileBertForPreTraining"),drt.forEach(t),JTo=r(iye," (MobileBERT model)"),iye.forEach(t),YTo=i(V),v_=n(V,"LI",{});var dye=s(v_);bie=n(dye,"STRONG",{});var crt=s(bie);KTo=r(crt,"mpnet"),crt.forEach(t),ZTo=r(dye," \u2014 "),SN=n(dye,"A",{href:!0});var frt=s(SN);e7o=r(frt,"MPNetForMaskedLM"),frt.forEach(t),o7o=r(dye," (MPNet model)"),dye.forEach(t),r7o=i(V),F_=n(V,"LI",{});var cye=s(F_);vie=n(cye,"STRONG",{});var mrt=s(vie);t7o=r(mrt,"openai-gpt"),mrt.forEach(t),a7o=r(cye," \u2014 "),RN=n(cye,"A",{href:!0});var grt=s(RN);n7o=r(grt,"OpenAIGPTLMHeadModel"),grt.forEach(t),s7o=r(cye," (OpenAI GPT model)"),cye.forEach(t),l7o=i(V),T_=n(V,"LI",{});var fye=s(T_);Fie=n(fye,"STRONG",{});var hrt=s(Fie);i7o=r(hrt,"retribert"),hrt.forEach(t),d7o=r(fye," \u2014 "),PN=n(fye,"A",{href:!0});var prt=s(PN);c7o=r(prt,"RetriBertModel"),prt.forEach(t),f7o=r(fye," (RetriBERT model)"),fye.forEach(t),m7o=i(V),M_=n(V,"LI",{});var mye=s(M_);Tie=n(mye,"STRONG",{});var urt=s(Tie);g7o=r(urt,"roberta"),urt.forEach(t),h7o=r(mye," \u2014 "),BN=n(mye,"A",{href:!0});var _rt=s(BN);p7o=r(_rt,"RobertaForMaskedLM"),_rt.forEach(t),u7o=r(mye," (RoBERTa model)"),mye.forEach(t),_7o=i(V),E_=n(V,"LI",{});var gye=s(E_);Mie=n(gye,"STRONG",{});var brt=s(Mie);b7o=r(brt,"squeezebert"),brt.forEach(t),v7o=r(gye," \u2014 "),IN=n(gye,"A",{href:!0});var vrt=s(IN);F7o=r(vrt,"SqueezeBertForMaskedLM"),vrt.forEach(t),T7o=r(gye," (SqueezeBERT model)"),gye.forEach(t),M7o=i(V),C_=n(V,"LI",{});var hye=s(C_);Eie=n(hye,"STRONG",{});var Frt=s(Eie);E7o=r(Frt,"t5"),Frt.forEach(t),C7o=r(hye," \u2014 "),qN=n(hye,"A",{href:!0});var Trt=s(qN);w7o=r(Trt,"T5ForConditionalGeneration"),Trt.forEach(t),A7o=r(hye," (T5 model)"),hye.forEach(t),y7o=i(V),w_=n(V,"LI",{});var pye=s(w_);Cie=n(pye,"STRONG",{});var Mrt=s(Cie);L7o=r(Mrt,"tapas"),Mrt.forEach(t),x7o=r(pye," \u2014 "),NN=n(pye,"A",{href:!0});var Ert=s(NN);$7o=r(Ert,"TapasForMaskedLM"),Ert.forEach(t),k7o=r(pye," (TAPAS model)"),pye.forEach(t),S7o=i(V),A_=n(V,"LI",{});var uye=s(A_);wie=n(uye,"STRONG",{});var Crt=s(wie);R7o=r(Crt,"transfo-xl"),Crt.forEach(t),P7o=r(uye," \u2014 "),jN=n(uye,"A",{href:!0});var wrt=s(jN);B7o=r(wrt,"TransfoXLLMHeadModel"),wrt.forEach(t),I7o=r(uye," (Transformer-XL model)"),uye.forEach(t),q7o=i(V),y_=n(V,"LI",{});var _ye=s(y_);Aie=n(_ye,"STRONG",{});var Art=s(Aie);N7o=r(Art,"unispeech"),Art.forEach(t),j7o=r(_ye," \u2014 "),DN=n(_ye,"A",{href:!0});var yrt=s(DN);D7o=r(yrt,"UniSpeechForPreTraining"),yrt.forEach(t),G7o=r(_ye," (UniSpeech model)"),_ye.forEach(t),O7o=i(V),L_=n(V,"LI",{});var bye=s(L_);yie=n(bye,"STRONG",{});var Lrt=s(yie);V7o=r(Lrt,"unispeech-sat"),Lrt.forEach(t),X7o=r(bye," \u2014 "),GN=n(bye,"A",{href:!0});var xrt=s(GN);z7o=r(xrt,"UniSpeechSatForPreTraining"),xrt.forEach(t),W7o=r(bye," (UniSpeechSat model)"),bye.forEach(t),Q7o=i(V),x_=n(V,"LI",{});var vye=s(x_);Lie=n(vye,"STRONG",{});var $rt=s(Lie);H7o=r($rt,"visual_bert"),$rt.forEach(t),U7o=r(vye," \u2014 "),ON=n(vye,"A",{href:!0});var krt=s(ON);J7o=r(krt,"VisualBertForPreTraining"),krt.forEach(t),Y7o=r(vye," (VisualBert model)"),vye.forEach(t),K7o=i(V),$_=n(V,"LI",{});var Fye=s($_);xie=n(Fye,"STRONG",{});var Srt=s(xie);Z7o=r(Srt,"vit_mae"),Srt.forEach(t),eMo=r(Fye," \u2014 "),VN=n(Fye,"A",{href:!0});var Rrt=s(VN);oMo=r(Rrt,"ViTMAEForPreTraining"),Rrt.forEach(t),rMo=r(Fye," (ViTMAE model)"),Fye.forEach(t),tMo=i(V),k_=n(V,"LI",{});var Tye=s(k_);$ie=n(Tye,"STRONG",{});var Prt=s($ie);aMo=r(Prt,"wav2vec2"),Prt.forEach(t),nMo=r(Tye," \u2014 "),XN=n(Tye,"A",{href:!0});var Brt=s(XN);sMo=r(Brt,"Wav2Vec2ForPreTraining"),Brt.forEach(t),lMo=r(Tye," (Wav2Vec2 model)"),Tye.forEach(t),iMo=i(V),S_=n(V,"LI",{});var Mye=s(S_);kie=n(Mye,"STRONG",{});var Irt=s(kie);dMo=r(Irt,"wav2vec2-conformer"),Irt.forEach(t),cMo=r(Mye," \u2014 "),zN=n(Mye,"A",{href:!0});var qrt=s(zN);fMo=r(qrt,"Wav2Vec2ConformerForPreTraining"),qrt.forEach(t),mMo=r(Mye," (Wav2Vec2-Conformer model)"),Mye.forEach(t),gMo=i(V),R_=n(V,"LI",{});var Eye=s(R_);Sie=n(Eye,"STRONG",{});var Nrt=s(Sie);hMo=r(Nrt,"xlm"),Nrt.forEach(t),pMo=r(Eye," \u2014 "),WN=n(Eye,"A",{href:!0});var jrt=s(WN);uMo=r(jrt,"XLMWithLMHeadModel"),jrt.forEach(t),_Mo=r(Eye," (XLM model)"),Eye.forEach(t),bMo=i(V),P_=n(V,"LI",{});var Cye=s(P_);Rie=n(Cye,"STRONG",{});var Drt=s(Rie);vMo=r(Drt,"xlm-roberta"),Drt.forEach(t),FMo=r(Cye," \u2014 "),QN=n(Cye,"A",{href:!0});var Grt=s(QN);TMo=r(Grt,"XLMRobertaForMaskedLM"),Grt.forEach(t),MMo=r(Cye," (XLM-RoBERTa model)"),Cye.forEach(t),EMo=i(V),B_=n(V,"LI",{});var wye=s(B_);Pie=n(wye,"STRONG",{});var Ort=s(Pie);CMo=r(Ort,"xlm-roberta-xl"),Ort.forEach(t),wMo=r(wye," \u2014 "),HN=n(wye,"A",{href:!0});var Vrt=s(HN);AMo=r(Vrt,"XLMRobertaXLForMaskedLM"),Vrt.forEach(t),yMo=r(wye," (XLM-RoBERTa-XL model)"),wye.forEach(t),LMo=i(V),I_=n(V,"LI",{});var Aye=s(I_);Bie=n(Aye,"STRONG",{});var Xrt=s(Bie);xMo=r(Xrt,"xlnet"),Xrt.forEach(t),$Mo=r(Aye," \u2014 "),UN=n(Aye,"A",{href:!0});var zrt=s(UN);kMo=r(zrt,"XLNetLMHeadModel"),zrt.forEach(t),SMo=r(Aye," (XLNet model)"),Aye.forEach(t),V.forEach(t),RMo=i(ra),q_=n(ra,"P",{});var yye=s(q_);PMo=r(yye,"The model is set in evaluation mode by default using "),Iie=n(yye,"CODE",{});var Wrt=s(Iie);BMo=r(Wrt,"model.eval()"),Wrt.forEach(t),IMo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(yye,"CODE",{});var Qrt=s(qie);qMo=r(Qrt,"model.train()"),Qrt.forEach(t),yye.forEach(t),NMo=i(ra),T(N_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Tqe=i(f),ki=n(f,"H2",{class:!0});var wje=s(ki);j_=n(wje,"A",{id:!0,class:!0,href:!0});var Hrt=s(j_);Nie=n(Hrt,"SPAN",{});var Urt=s(Nie);T(YA.$$.fragment,Urt),Urt.forEach(t),Hrt.forEach(t),jMo=i(wje),jie=n(wje,"SPAN",{});var Jrt=s(jie);DMo=r(Jrt,"AutoModelForCausalLM"),Jrt.forEach(t),wje.forEach(t),Mqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(KA.$$.fragment,Vs),GMo=i(Vs),Si=n(Vs,"P",{});var UK=s(Si);OMo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JN=n(UK,"A",{href:!0});var Yrt=s(JN);VMo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),XMo=r(UK," class method or the "),YN=n(UK,"A",{href:!0});var Krt=s(YN);zMo=r(Krt,"from_config()"),Krt.forEach(t),WMo=r(UK,` class
method.`),UK.forEach(t),QMo=i(Vs),ZA=n(Vs,"P",{});var Aje=s(ZA);HMo=r(Aje,"This class cannot be instantiated directly using "),Die=n(Aje,"CODE",{});var Zrt=s(Die);UMo=r(Zrt,"__init__()"),Zrt.forEach(t),JMo=r(Aje," (throws an error)."),Aje.forEach(t),YMo=i(Vs),nt=n(Vs,"DIV",{class:!0});var E3=s(nt);T(ey.$$.fragment,E3),KMo=i(E3),Gie=n(E3,"P",{});var ett=s(Gie);ZMo=r(ett,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ett.forEach(t),e4o=i(E3),Ri=n(E3,"P",{});var JK=s(Ri);o4o=r(JK,`Note:
Loading a model from its configuration file does `),Oie=n(JK,"STRONG",{});var ott=s(Oie);r4o=r(ott,"not"),ott.forEach(t),t4o=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(JK,"A",{href:!0});var rtt=s(KN);a4o=r(rtt,"from_pretrained()"),rtt.forEach(t),n4o=r(JK," to load the model weights."),JK.forEach(t),s4o=i(E3),T(D_.$$.fragment,E3),E3.forEach(t),l4o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(oy.$$.fragment,ta),i4o=i(ta),Vie=n(ta,"P",{});var ttt=s(Vie);d4o=r(ttt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ttt.forEach(t),c4o=i(ta),$a=n(ta,"P",{});var C3=s($a);f4o=r(C3,"The model class to instantiate is selected based on the "),Xie=n(C3,"CODE",{});var att=s(Xie);m4o=r(att,"model_type"),att.forEach(t),g4o=r(C3,` property of the config object (either
passed as an argument or loaded from `),zie=n(C3,"CODE",{});var ntt=s(zie);h4o=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),p4o=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(C3,"CODE",{});var stt=s(Wie);u4o=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),_4o=r(C3,":"),C3.forEach(t),b4o=i(ta),z=n(ta,"UL",{});var Q=s(z);G_=n(Q,"LI",{});var Lye=s(G_);Qie=n(Lye,"STRONG",{});var ltt=s(Qie);v4o=r(ltt,"bart"),ltt.forEach(t),F4o=r(Lye," \u2014 "),ZN=n(Lye,"A",{href:!0});var itt=s(ZN);T4o=r(itt,"BartForCausalLM"),itt.forEach(t),M4o=r(Lye," (BART model)"),Lye.forEach(t),E4o=i(Q),O_=n(Q,"LI",{});var xye=s(O_);Hie=n(xye,"STRONG",{});var dtt=s(Hie);C4o=r(dtt,"bert"),dtt.forEach(t),w4o=r(xye," \u2014 "),ej=n(xye,"A",{href:!0});var ctt=s(ej);A4o=r(ctt,"BertLMHeadModel"),ctt.forEach(t),y4o=r(xye," (BERT model)"),xye.forEach(t),L4o=i(Q),V_=n(Q,"LI",{});var $ye=s(V_);Uie=n($ye,"STRONG",{});var ftt=s(Uie);x4o=r(ftt,"bert-generation"),ftt.forEach(t),$4o=r($ye," \u2014 "),oj=n($ye,"A",{href:!0});var mtt=s(oj);k4o=r(mtt,"BertGenerationDecoder"),mtt.forEach(t),S4o=r($ye," (Bert Generation model)"),$ye.forEach(t),R4o=i(Q),X_=n(Q,"LI",{});var kye=s(X_);Jie=n(kye,"STRONG",{});var gtt=s(Jie);P4o=r(gtt,"big_bird"),gtt.forEach(t),B4o=r(kye," \u2014 "),rj=n(kye,"A",{href:!0});var htt=s(rj);I4o=r(htt,"BigBirdForCausalLM"),htt.forEach(t),q4o=r(kye," (BigBird model)"),kye.forEach(t),N4o=i(Q),z_=n(Q,"LI",{});var Sye=s(z_);Yie=n(Sye,"STRONG",{});var ptt=s(Yie);j4o=r(ptt,"bigbird_pegasus"),ptt.forEach(t),D4o=r(Sye," \u2014 "),tj=n(Sye,"A",{href:!0});var utt=s(tj);G4o=r(utt,"BigBirdPegasusForCausalLM"),utt.forEach(t),O4o=r(Sye," (BigBirdPegasus model)"),Sye.forEach(t),V4o=i(Q),W_=n(Q,"LI",{});var Rye=s(W_);Kie=n(Rye,"STRONG",{});var _tt=s(Kie);X4o=r(_tt,"blenderbot"),_tt.forEach(t),z4o=r(Rye," \u2014 "),aj=n(Rye,"A",{href:!0});var btt=s(aj);W4o=r(btt,"BlenderbotForCausalLM"),btt.forEach(t),Q4o=r(Rye," (Blenderbot model)"),Rye.forEach(t),H4o=i(Q),Q_=n(Q,"LI",{});var Pye=s(Q_);Zie=n(Pye,"STRONG",{});var vtt=s(Zie);U4o=r(vtt,"blenderbot-small"),vtt.forEach(t),J4o=r(Pye," \u2014 "),nj=n(Pye,"A",{href:!0});var Ftt=s(nj);Y4o=r(Ftt,"BlenderbotSmallForCausalLM"),Ftt.forEach(t),K4o=r(Pye," (BlenderbotSmall model)"),Pye.forEach(t),Z4o=i(Q),H_=n(Q,"LI",{});var Bye=s(H_);ede=n(Bye,"STRONG",{});var Ttt=s(ede);eEo=r(Ttt,"camembert"),Ttt.forEach(t),oEo=r(Bye," \u2014 "),sj=n(Bye,"A",{href:!0});var Mtt=s(sj);rEo=r(Mtt,"CamembertForCausalLM"),Mtt.forEach(t),tEo=r(Bye," (CamemBERT model)"),Bye.forEach(t),aEo=i(Q),U_=n(Q,"LI",{});var Iye=s(U_);ode=n(Iye,"STRONG",{});var Ett=s(ode);nEo=r(Ett,"ctrl"),Ett.forEach(t),sEo=r(Iye," \u2014 "),lj=n(Iye,"A",{href:!0});var Ctt=s(lj);lEo=r(Ctt,"CTRLLMHeadModel"),Ctt.forEach(t),iEo=r(Iye," (CTRL model)"),Iye.forEach(t),dEo=i(Q),J_=n(Q,"LI",{});var qye=s(J_);rde=n(qye,"STRONG",{});var wtt=s(rde);cEo=r(wtt,"data2vec-text"),wtt.forEach(t),fEo=r(qye," \u2014 "),ij=n(qye,"A",{href:!0});var Att=s(ij);mEo=r(Att,"Data2VecTextForCausalLM"),Att.forEach(t),gEo=r(qye," (Data2VecText model)"),qye.forEach(t),hEo=i(Q),Y_=n(Q,"LI",{});var Nye=s(Y_);tde=n(Nye,"STRONG",{});var ytt=s(tde);pEo=r(ytt,"electra"),ytt.forEach(t),uEo=r(Nye," \u2014 "),dj=n(Nye,"A",{href:!0});var Ltt=s(dj);_Eo=r(Ltt,"ElectraForCausalLM"),Ltt.forEach(t),bEo=r(Nye," (ELECTRA model)"),Nye.forEach(t),vEo=i(Q),K_=n(Q,"LI",{});var jye=s(K_);ade=n(jye,"STRONG",{});var xtt=s(ade);FEo=r(xtt,"gpt2"),xtt.forEach(t),TEo=r(jye," \u2014 "),cj=n(jye,"A",{href:!0});var $tt=s(cj);MEo=r($tt,"GPT2LMHeadModel"),$tt.forEach(t),EEo=r(jye," (OpenAI GPT-2 model)"),jye.forEach(t),CEo=i(Q),Z_=n(Q,"LI",{});var Dye=s(Z_);nde=n(Dye,"STRONG",{});var ktt=s(nde);wEo=r(ktt,"gpt_neo"),ktt.forEach(t),AEo=r(Dye," \u2014 "),fj=n(Dye,"A",{href:!0});var Stt=s(fj);yEo=r(Stt,"GPTNeoForCausalLM"),Stt.forEach(t),LEo=r(Dye," (GPT Neo model)"),Dye.forEach(t),xEo=i(Q),e0=n(Q,"LI",{});var Gye=s(e0);sde=n(Gye,"STRONG",{});var Rtt=s(sde);$Eo=r(Rtt,"gptj"),Rtt.forEach(t),kEo=r(Gye," \u2014 "),mj=n(Gye,"A",{href:!0});var Ptt=s(mj);SEo=r(Ptt,"GPTJForCausalLM"),Ptt.forEach(t),REo=r(Gye," (GPT-J model)"),Gye.forEach(t),PEo=i(Q),o0=n(Q,"LI",{});var Oye=s(o0);lde=n(Oye,"STRONG",{});var Btt=s(lde);BEo=r(Btt,"marian"),Btt.forEach(t),IEo=r(Oye," \u2014 "),gj=n(Oye,"A",{href:!0});var Itt=s(gj);qEo=r(Itt,"MarianForCausalLM"),Itt.forEach(t),NEo=r(Oye," (Marian model)"),Oye.forEach(t),jEo=i(Q),r0=n(Q,"LI",{});var Vye=s(r0);ide=n(Vye,"STRONG",{});var qtt=s(ide);DEo=r(qtt,"mbart"),qtt.forEach(t),GEo=r(Vye," \u2014 "),hj=n(Vye,"A",{href:!0});var Ntt=s(hj);OEo=r(Ntt,"MBartForCausalLM"),Ntt.forEach(t),VEo=r(Vye," (mBART model)"),Vye.forEach(t),XEo=i(Q),t0=n(Q,"LI",{});var Xye=s(t0);dde=n(Xye,"STRONG",{});var jtt=s(dde);zEo=r(jtt,"megatron-bert"),jtt.forEach(t),WEo=r(Xye," \u2014 "),pj=n(Xye,"A",{href:!0});var Dtt=s(pj);QEo=r(Dtt,"MegatronBertForCausalLM"),Dtt.forEach(t),HEo=r(Xye," (MegatronBert model)"),Xye.forEach(t),UEo=i(Q),a0=n(Q,"LI",{});var zye=s(a0);cde=n(zye,"STRONG",{});var Gtt=s(cde);JEo=r(Gtt,"openai-gpt"),Gtt.forEach(t),YEo=r(zye," \u2014 "),uj=n(zye,"A",{href:!0});var Ott=s(uj);KEo=r(Ott,"OpenAIGPTLMHeadModel"),Ott.forEach(t),ZEo=r(zye," (OpenAI GPT model)"),zye.forEach(t),eCo=i(Q),n0=n(Q,"LI",{});var Wye=s(n0);fde=n(Wye,"STRONG",{});var Vtt=s(fde);oCo=r(Vtt,"opt"),Vtt.forEach(t),rCo=r(Wye," \u2014 "),_j=n(Wye,"A",{href:!0});var Xtt=s(_j);tCo=r(Xtt,"OPTForCausalLM"),Xtt.forEach(t),aCo=r(Wye," (OPT model)"),Wye.forEach(t),nCo=i(Q),s0=n(Q,"LI",{});var Qye=s(s0);mde=n(Qye,"STRONG",{});var ztt=s(mde);sCo=r(ztt,"pegasus"),ztt.forEach(t),lCo=r(Qye," \u2014 "),bj=n(Qye,"A",{href:!0});var Wtt=s(bj);iCo=r(Wtt,"PegasusForCausalLM"),Wtt.forEach(t),dCo=r(Qye," (Pegasus model)"),Qye.forEach(t),cCo=i(Q),l0=n(Q,"LI",{});var Hye=s(l0);gde=n(Hye,"STRONG",{});var Qtt=s(gde);fCo=r(Qtt,"plbart"),Qtt.forEach(t),mCo=r(Hye," \u2014 "),vj=n(Hye,"A",{href:!0});var Htt=s(vj);gCo=r(Htt,"PLBartForCausalLM"),Htt.forEach(t),hCo=r(Hye," (PLBart model)"),Hye.forEach(t),pCo=i(Q),i0=n(Q,"LI",{});var Uye=s(i0);hde=n(Uye,"STRONG",{});var Utt=s(hde);uCo=r(Utt,"prophetnet"),Utt.forEach(t),_Co=r(Uye," \u2014 "),Fj=n(Uye,"A",{href:!0});var Jtt=s(Fj);bCo=r(Jtt,"ProphetNetForCausalLM"),Jtt.forEach(t),vCo=r(Uye," (ProphetNet model)"),Uye.forEach(t),FCo=i(Q),d0=n(Q,"LI",{});var Jye=s(d0);pde=n(Jye,"STRONG",{});var Ytt=s(pde);TCo=r(Ytt,"qdqbert"),Ytt.forEach(t),MCo=r(Jye," \u2014 "),Tj=n(Jye,"A",{href:!0});var Ktt=s(Tj);ECo=r(Ktt,"QDQBertLMHeadModel"),Ktt.forEach(t),CCo=r(Jye," (QDQBert model)"),Jye.forEach(t),wCo=i(Q),c0=n(Q,"LI",{});var Yye=s(c0);ude=n(Yye,"STRONG",{});var Ztt=s(ude);ACo=r(Ztt,"reformer"),Ztt.forEach(t),yCo=r(Yye," \u2014 "),Mj=n(Yye,"A",{href:!0});var eat=s(Mj);LCo=r(eat,"ReformerModelWithLMHead"),eat.forEach(t),xCo=r(Yye," (Reformer model)"),Yye.forEach(t),$Co=i(Q),f0=n(Q,"LI",{});var Kye=s(f0);_de=n(Kye,"STRONG",{});var oat=s(_de);kCo=r(oat,"rembert"),oat.forEach(t),SCo=r(Kye," \u2014 "),Ej=n(Kye,"A",{href:!0});var rat=s(Ej);RCo=r(rat,"RemBertForCausalLM"),rat.forEach(t),PCo=r(Kye," (RemBERT model)"),Kye.forEach(t),BCo=i(Q),m0=n(Q,"LI",{});var Zye=s(m0);bde=n(Zye,"STRONG",{});var tat=s(bde);ICo=r(tat,"roberta"),tat.forEach(t),qCo=r(Zye," \u2014 "),Cj=n(Zye,"A",{href:!0});var aat=s(Cj);NCo=r(aat,"RobertaForCausalLM"),aat.forEach(t),jCo=r(Zye," (RoBERTa model)"),Zye.forEach(t),DCo=i(Q),g0=n(Q,"LI",{});var eLe=s(g0);vde=n(eLe,"STRONG",{});var nat=s(vde);GCo=r(nat,"roformer"),nat.forEach(t),OCo=r(eLe," \u2014 "),wj=n(eLe,"A",{href:!0});var sat=s(wj);VCo=r(sat,"RoFormerForCausalLM"),sat.forEach(t),XCo=r(eLe," (RoFormer model)"),eLe.forEach(t),zCo=i(Q),h0=n(Q,"LI",{});var oLe=s(h0);Fde=n(oLe,"STRONG",{});var lat=s(Fde);WCo=r(lat,"speech_to_text_2"),lat.forEach(t),QCo=r(oLe," \u2014 "),Aj=n(oLe,"A",{href:!0});var iat=s(Aj);HCo=r(iat,"Speech2Text2ForCausalLM"),iat.forEach(t),UCo=r(oLe," (Speech2Text2 model)"),oLe.forEach(t),JCo=i(Q),p0=n(Q,"LI",{});var rLe=s(p0);Tde=n(rLe,"STRONG",{});var dat=s(Tde);YCo=r(dat,"transfo-xl"),dat.forEach(t),KCo=r(rLe," \u2014 "),yj=n(rLe,"A",{href:!0});var cat=s(yj);ZCo=r(cat,"TransfoXLLMHeadModel"),cat.forEach(t),e5o=r(rLe," (Transformer-XL model)"),rLe.forEach(t),o5o=i(Q),u0=n(Q,"LI",{});var tLe=s(u0);Mde=n(tLe,"STRONG",{});var fat=s(Mde);r5o=r(fat,"trocr"),fat.forEach(t),t5o=r(tLe," \u2014 "),Lj=n(tLe,"A",{href:!0});var mat=s(Lj);a5o=r(mat,"TrOCRForCausalLM"),mat.forEach(t),n5o=r(tLe," (TrOCR model)"),tLe.forEach(t),s5o=i(Q),_0=n(Q,"LI",{});var aLe=s(_0);Ede=n(aLe,"STRONG",{});var gat=s(Ede);l5o=r(gat,"xglm"),gat.forEach(t),i5o=r(aLe," \u2014 "),xj=n(aLe,"A",{href:!0});var hat=s(xj);d5o=r(hat,"XGLMForCausalLM"),hat.forEach(t),c5o=r(aLe," (XGLM model)"),aLe.forEach(t),f5o=i(Q),b0=n(Q,"LI",{});var nLe=s(b0);Cde=n(nLe,"STRONG",{});var pat=s(Cde);m5o=r(pat,"xlm"),pat.forEach(t),g5o=r(nLe," \u2014 "),$j=n(nLe,"A",{href:!0});var uat=s($j);h5o=r(uat,"XLMWithLMHeadModel"),uat.forEach(t),p5o=r(nLe," (XLM model)"),nLe.forEach(t),u5o=i(Q),v0=n(Q,"LI",{});var sLe=s(v0);wde=n(sLe,"STRONG",{});var _at=s(wde);_5o=r(_at,"xlm-prophetnet"),_at.forEach(t),b5o=r(sLe," \u2014 "),kj=n(sLe,"A",{href:!0});var bat=s(kj);v5o=r(bat,"XLMProphetNetForCausalLM"),bat.forEach(t),F5o=r(sLe," (XLMProphetNet model)"),sLe.forEach(t),T5o=i(Q),F0=n(Q,"LI",{});var lLe=s(F0);Ade=n(lLe,"STRONG",{});var vat=s(Ade);M5o=r(vat,"xlm-roberta"),vat.forEach(t),E5o=r(lLe," \u2014 "),Sj=n(lLe,"A",{href:!0});var Fat=s(Sj);C5o=r(Fat,"XLMRobertaForCausalLM"),Fat.forEach(t),w5o=r(lLe," (XLM-RoBERTa model)"),lLe.forEach(t),A5o=i(Q),T0=n(Q,"LI",{});var iLe=s(T0);yde=n(iLe,"STRONG",{});var Tat=s(yde);y5o=r(Tat,"xlm-roberta-xl"),Tat.forEach(t),L5o=r(iLe," \u2014 "),Rj=n(iLe,"A",{href:!0});var Mat=s(Rj);x5o=r(Mat,"XLMRobertaXLForCausalLM"),Mat.forEach(t),$5o=r(iLe," (XLM-RoBERTa-XL model)"),iLe.forEach(t),k5o=i(Q),M0=n(Q,"LI",{});var dLe=s(M0);Lde=n(dLe,"STRONG",{});var Eat=s(Lde);S5o=r(Eat,"xlnet"),Eat.forEach(t),R5o=r(dLe," \u2014 "),Pj=n(dLe,"A",{href:!0});var Cat=s(Pj);P5o=r(Cat,"XLNetLMHeadModel"),Cat.forEach(t),B5o=r(dLe," (XLNet model)"),dLe.forEach(t),Q.forEach(t),I5o=i(ta),E0=n(ta,"P",{});var cLe=s(E0);q5o=r(cLe,"The model is set in evaluation mode by default using "),xde=n(cLe,"CODE",{});var wat=s(xde);N5o=r(wat,"model.eval()"),wat.forEach(t),j5o=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(cLe,"CODE",{});var Aat=s($de);D5o=r(Aat,"model.train()"),Aat.forEach(t),cLe.forEach(t),G5o=i(ta),T(C0.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Eqe=i(f),Pi=n(f,"H2",{class:!0});var yje=s(Pi);w0=n(yje,"A",{id:!0,class:!0,href:!0});var yat=s(w0);kde=n(yat,"SPAN",{});var Lat=s(kde);T(ry.$$.fragment,Lat),Lat.forEach(t),yat.forEach(t),O5o=i(yje),Sde=n(yje,"SPAN",{});var xat=s(Sde);V5o=r(xat,"AutoModelForMaskedLM"),xat.forEach(t),yje.forEach(t),Cqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(ty.$$.fragment,Xs),X5o=i(Xs),Bi=n(Xs,"P",{});var YK=s(Bi);z5o=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Bj=n(YK,"A",{href:!0});var $at=s(Bj);W5o=r($at,"from_pretrained()"),$at.forEach(t),Q5o=r(YK," class method or the "),Ij=n(YK,"A",{href:!0});var kat=s(Ij);H5o=r(kat,"from_config()"),kat.forEach(t),U5o=r(YK,` class
method.`),YK.forEach(t),J5o=i(Xs),ay=n(Xs,"P",{});var Lje=s(ay);Y5o=r(Lje,"This class cannot be instantiated directly using "),Rde=n(Lje,"CODE",{});var Sat=s(Rde);K5o=r(Sat,"__init__()"),Sat.forEach(t),Z5o=r(Lje," (throws an error)."),Lje.forEach(t),e3o=i(Xs),st=n(Xs,"DIV",{class:!0});var w3=s(st);T(ny.$$.fragment,w3),o3o=i(w3),Pde=n(w3,"P",{});var Rat=s(Pde);r3o=r(Rat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rat.forEach(t),t3o=i(w3),Ii=n(w3,"P",{});var KK=s(Ii);a3o=r(KK,`Note:
Loading a model from its configuration file does `),Bde=n(KK,"STRONG",{});var Pat=s(Bde);n3o=r(Pat,"not"),Pat.forEach(t),s3o=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qj=n(KK,"A",{href:!0});var Bat=s(qj);l3o=r(Bat,"from_pretrained()"),Bat.forEach(t),i3o=r(KK," to load the model weights."),KK.forEach(t),d3o=i(w3),T(A0.$$.fragment,w3),w3.forEach(t),c3o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(sy.$$.fragment,aa),f3o=i(aa),Ide=n(aa,"P",{});var Iat=s(Ide);m3o=r(Iat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Iat.forEach(t),g3o=i(aa),ka=n(aa,"P",{});var A3=s(ka);h3o=r(A3,"The model class to instantiate is selected based on the "),qde=n(A3,"CODE",{});var qat=s(qde);p3o=r(qat,"model_type"),qat.forEach(t),u3o=r(A3,` property of the config object (either
passed as an argument or loaded from `),Nde=n(A3,"CODE",{});var Nat=s(Nde);_3o=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),b3o=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(A3,"CODE",{});var jat=s(jde);v3o=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),F3o=r(A3,":"),A3.forEach(t),T3o=i(aa),W=n(aa,"UL",{});var U=s(W);y0=n(U,"LI",{});var fLe=s(y0);Dde=n(fLe,"STRONG",{});var Dat=s(Dde);M3o=r(Dat,"albert"),Dat.forEach(t),E3o=r(fLe," \u2014 "),Nj=n(fLe,"A",{href:!0});var Gat=s(Nj);C3o=r(Gat,"AlbertForMaskedLM"),Gat.forEach(t),w3o=r(fLe," (ALBERT model)"),fLe.forEach(t),A3o=i(U),L0=n(U,"LI",{});var mLe=s(L0);Gde=n(mLe,"STRONG",{});var Oat=s(Gde);y3o=r(Oat,"bart"),Oat.forEach(t),L3o=r(mLe," \u2014 "),jj=n(mLe,"A",{href:!0});var Vat=s(jj);x3o=r(Vat,"BartForConditionalGeneration"),Vat.forEach(t),$3o=r(mLe," (BART model)"),mLe.forEach(t),k3o=i(U),x0=n(U,"LI",{});var gLe=s(x0);Ode=n(gLe,"STRONG",{});var Xat=s(Ode);S3o=r(Xat,"bert"),Xat.forEach(t),R3o=r(gLe," \u2014 "),Dj=n(gLe,"A",{href:!0});var zat=s(Dj);P3o=r(zat,"BertForMaskedLM"),zat.forEach(t),B3o=r(gLe," (BERT model)"),gLe.forEach(t),I3o=i(U),$0=n(U,"LI",{});var hLe=s($0);Vde=n(hLe,"STRONG",{});var Wat=s(Vde);q3o=r(Wat,"big_bird"),Wat.forEach(t),N3o=r(hLe," \u2014 "),Gj=n(hLe,"A",{href:!0});var Qat=s(Gj);j3o=r(Qat,"BigBirdForMaskedLM"),Qat.forEach(t),D3o=r(hLe," (BigBird model)"),hLe.forEach(t),G3o=i(U),k0=n(U,"LI",{});var pLe=s(k0);Xde=n(pLe,"STRONG",{});var Hat=s(Xde);O3o=r(Hat,"camembert"),Hat.forEach(t),V3o=r(pLe," \u2014 "),Oj=n(pLe,"A",{href:!0});var Uat=s(Oj);X3o=r(Uat,"CamembertForMaskedLM"),Uat.forEach(t),z3o=r(pLe," (CamemBERT model)"),pLe.forEach(t),W3o=i(U),S0=n(U,"LI",{});var uLe=s(S0);zde=n(uLe,"STRONG",{});var Jat=s(zde);Q3o=r(Jat,"convbert"),Jat.forEach(t),H3o=r(uLe," \u2014 "),Vj=n(uLe,"A",{href:!0});var Yat=s(Vj);U3o=r(Yat,"ConvBertForMaskedLM"),Yat.forEach(t),J3o=r(uLe," (ConvBERT model)"),uLe.forEach(t),Y3o=i(U),R0=n(U,"LI",{});var _Le=s(R0);Wde=n(_Le,"STRONG",{});var Kat=s(Wde);K3o=r(Kat,"data2vec-text"),Kat.forEach(t),Z3o=r(_Le," \u2014 "),Xj=n(_Le,"A",{href:!0});var Zat=s(Xj);ewo=r(Zat,"Data2VecTextForMaskedLM"),Zat.forEach(t),owo=r(_Le," (Data2VecText model)"),_Le.forEach(t),rwo=i(U),P0=n(U,"LI",{});var bLe=s(P0);Qde=n(bLe,"STRONG",{});var ent=s(Qde);two=r(ent,"deberta"),ent.forEach(t),awo=r(bLe," \u2014 "),zj=n(bLe,"A",{href:!0});var ont=s(zj);nwo=r(ont,"DebertaForMaskedLM"),ont.forEach(t),swo=r(bLe," (DeBERTa model)"),bLe.forEach(t),lwo=i(U),B0=n(U,"LI",{});var vLe=s(B0);Hde=n(vLe,"STRONG",{});var rnt=s(Hde);iwo=r(rnt,"deberta-v2"),rnt.forEach(t),dwo=r(vLe," \u2014 "),Wj=n(vLe,"A",{href:!0});var tnt=s(Wj);cwo=r(tnt,"DebertaV2ForMaskedLM"),tnt.forEach(t),fwo=r(vLe," (DeBERTa-v2 model)"),vLe.forEach(t),mwo=i(U),I0=n(U,"LI",{});var FLe=s(I0);Ude=n(FLe,"STRONG",{});var ant=s(Ude);gwo=r(ant,"distilbert"),ant.forEach(t),hwo=r(FLe," \u2014 "),Qj=n(FLe,"A",{href:!0});var nnt=s(Qj);pwo=r(nnt,"DistilBertForMaskedLM"),nnt.forEach(t),uwo=r(FLe," (DistilBERT model)"),FLe.forEach(t),_wo=i(U),q0=n(U,"LI",{});var TLe=s(q0);Jde=n(TLe,"STRONG",{});var snt=s(Jde);bwo=r(snt,"electra"),snt.forEach(t),vwo=r(TLe," \u2014 "),Hj=n(TLe,"A",{href:!0});var lnt=s(Hj);Fwo=r(lnt,"ElectraForMaskedLM"),lnt.forEach(t),Two=r(TLe," (ELECTRA model)"),TLe.forEach(t),Mwo=i(U),N0=n(U,"LI",{});var MLe=s(N0);Yde=n(MLe,"STRONG",{});var int=s(Yde);Ewo=r(int,"flaubert"),int.forEach(t),Cwo=r(MLe," \u2014 "),Uj=n(MLe,"A",{href:!0});var dnt=s(Uj);wwo=r(dnt,"FlaubertWithLMHeadModel"),dnt.forEach(t),Awo=r(MLe," (FlauBERT model)"),MLe.forEach(t),ywo=i(U),j0=n(U,"LI",{});var ELe=s(j0);Kde=n(ELe,"STRONG",{});var cnt=s(Kde);Lwo=r(cnt,"fnet"),cnt.forEach(t),xwo=r(ELe," \u2014 "),Jj=n(ELe,"A",{href:!0});var fnt=s(Jj);$wo=r(fnt,"FNetForMaskedLM"),fnt.forEach(t),kwo=r(ELe," (FNet model)"),ELe.forEach(t),Swo=i(U),D0=n(U,"LI",{});var CLe=s(D0);Zde=n(CLe,"STRONG",{});var mnt=s(Zde);Rwo=r(mnt,"funnel"),mnt.forEach(t),Pwo=r(CLe," \u2014 "),Yj=n(CLe,"A",{href:!0});var gnt=s(Yj);Bwo=r(gnt,"FunnelForMaskedLM"),gnt.forEach(t),Iwo=r(CLe," (Funnel Transformer model)"),CLe.forEach(t),qwo=i(U),G0=n(U,"LI",{});var wLe=s(G0);ece=n(wLe,"STRONG",{});var hnt=s(ece);Nwo=r(hnt,"ibert"),hnt.forEach(t),jwo=r(wLe," \u2014 "),Kj=n(wLe,"A",{href:!0});var pnt=s(Kj);Dwo=r(pnt,"IBertForMaskedLM"),pnt.forEach(t),Gwo=r(wLe," (I-BERT model)"),wLe.forEach(t),Owo=i(U),O0=n(U,"LI",{});var ALe=s(O0);oce=n(ALe,"STRONG",{});var unt=s(oce);Vwo=r(unt,"layoutlm"),unt.forEach(t),Xwo=r(ALe," \u2014 "),Zj=n(ALe,"A",{href:!0});var _nt=s(Zj);zwo=r(_nt,"LayoutLMForMaskedLM"),_nt.forEach(t),Wwo=r(ALe," (LayoutLM model)"),ALe.forEach(t),Qwo=i(U),V0=n(U,"LI",{});var yLe=s(V0);rce=n(yLe,"STRONG",{});var bnt=s(rce);Hwo=r(bnt,"longformer"),bnt.forEach(t),Uwo=r(yLe," \u2014 "),eD=n(yLe,"A",{href:!0});var vnt=s(eD);Jwo=r(vnt,"LongformerForMaskedLM"),vnt.forEach(t),Ywo=r(yLe," (Longformer model)"),yLe.forEach(t),Kwo=i(U),X0=n(U,"LI",{});var LLe=s(X0);tce=n(LLe,"STRONG",{});var Fnt=s(tce);Zwo=r(Fnt,"mbart"),Fnt.forEach(t),eAo=r(LLe," \u2014 "),oD=n(LLe,"A",{href:!0});var Tnt=s(oD);oAo=r(Tnt,"MBartForConditionalGeneration"),Tnt.forEach(t),rAo=r(LLe," (mBART model)"),LLe.forEach(t),tAo=i(U),z0=n(U,"LI",{});var xLe=s(z0);ace=n(xLe,"STRONG",{});var Mnt=s(ace);aAo=r(Mnt,"megatron-bert"),Mnt.forEach(t),nAo=r(xLe," \u2014 "),rD=n(xLe,"A",{href:!0});var Ent=s(rD);sAo=r(Ent,"MegatronBertForMaskedLM"),Ent.forEach(t),lAo=r(xLe," (MegatronBert model)"),xLe.forEach(t),iAo=i(U),W0=n(U,"LI",{});var $Le=s(W0);nce=n($Le,"STRONG",{});var Cnt=s(nce);dAo=r(Cnt,"mobilebert"),Cnt.forEach(t),cAo=r($Le," \u2014 "),tD=n($Le,"A",{href:!0});var wnt=s(tD);fAo=r(wnt,"MobileBertForMaskedLM"),wnt.forEach(t),mAo=r($Le," (MobileBERT model)"),$Le.forEach(t),gAo=i(U),Q0=n(U,"LI",{});var kLe=s(Q0);sce=n(kLe,"STRONG",{});var Ant=s(sce);hAo=r(Ant,"mpnet"),Ant.forEach(t),pAo=r(kLe," \u2014 "),aD=n(kLe,"A",{href:!0});var ynt=s(aD);uAo=r(ynt,"MPNetForMaskedLM"),ynt.forEach(t),_Ao=r(kLe," (MPNet model)"),kLe.forEach(t),bAo=i(U),H0=n(U,"LI",{});var SLe=s(H0);lce=n(SLe,"STRONG",{});var Lnt=s(lce);vAo=r(Lnt,"nystromformer"),Lnt.forEach(t),FAo=r(SLe," \u2014 "),nD=n(SLe,"A",{href:!0});var xnt=s(nD);TAo=r(xnt,"NystromformerForMaskedLM"),xnt.forEach(t),MAo=r(SLe," (Nystromformer model)"),SLe.forEach(t),EAo=i(U),U0=n(U,"LI",{});var RLe=s(U0);ice=n(RLe,"STRONG",{});var $nt=s(ice);CAo=r($nt,"perceiver"),$nt.forEach(t),wAo=r(RLe," \u2014 "),sD=n(RLe,"A",{href:!0});var knt=s(sD);AAo=r(knt,"PerceiverForMaskedLM"),knt.forEach(t),yAo=r(RLe," (Perceiver model)"),RLe.forEach(t),LAo=i(U),J0=n(U,"LI",{});var PLe=s(J0);dce=n(PLe,"STRONG",{});var Snt=s(dce);xAo=r(Snt,"qdqbert"),Snt.forEach(t),$Ao=r(PLe," \u2014 "),lD=n(PLe,"A",{href:!0});var Rnt=s(lD);kAo=r(Rnt,"QDQBertForMaskedLM"),Rnt.forEach(t),SAo=r(PLe," (QDQBert model)"),PLe.forEach(t),RAo=i(U),Y0=n(U,"LI",{});var BLe=s(Y0);cce=n(BLe,"STRONG",{});var Pnt=s(cce);PAo=r(Pnt,"reformer"),Pnt.forEach(t),BAo=r(BLe," \u2014 "),iD=n(BLe,"A",{href:!0});var Bnt=s(iD);IAo=r(Bnt,"ReformerForMaskedLM"),Bnt.forEach(t),qAo=r(BLe," (Reformer model)"),BLe.forEach(t),NAo=i(U),K0=n(U,"LI",{});var ILe=s(K0);fce=n(ILe,"STRONG",{});var Int=s(fce);jAo=r(Int,"rembert"),Int.forEach(t),DAo=r(ILe," \u2014 "),dD=n(ILe,"A",{href:!0});var qnt=s(dD);GAo=r(qnt,"RemBertForMaskedLM"),qnt.forEach(t),OAo=r(ILe," (RemBERT model)"),ILe.forEach(t),VAo=i(U),Z0=n(U,"LI",{});var qLe=s(Z0);mce=n(qLe,"STRONG",{});var Nnt=s(mce);XAo=r(Nnt,"roberta"),Nnt.forEach(t),zAo=r(qLe," \u2014 "),cD=n(qLe,"A",{href:!0});var jnt=s(cD);WAo=r(jnt,"RobertaForMaskedLM"),jnt.forEach(t),QAo=r(qLe," (RoBERTa model)"),qLe.forEach(t),HAo=i(U),e1=n(U,"LI",{});var NLe=s(e1);gce=n(NLe,"STRONG",{});var Dnt=s(gce);UAo=r(Dnt,"roformer"),Dnt.forEach(t),JAo=r(NLe," \u2014 "),fD=n(NLe,"A",{href:!0});var Gnt=s(fD);YAo=r(Gnt,"RoFormerForMaskedLM"),Gnt.forEach(t),KAo=r(NLe," (RoFormer model)"),NLe.forEach(t),ZAo=i(U),o1=n(U,"LI",{});var jLe=s(o1);hce=n(jLe,"STRONG",{});var Ont=s(hce);eyo=r(Ont,"squeezebert"),Ont.forEach(t),oyo=r(jLe," \u2014 "),mD=n(jLe,"A",{href:!0});var Vnt=s(mD);ryo=r(Vnt,"SqueezeBertForMaskedLM"),Vnt.forEach(t),tyo=r(jLe," (SqueezeBERT model)"),jLe.forEach(t),ayo=i(U),r1=n(U,"LI",{});var DLe=s(r1);pce=n(DLe,"STRONG",{});var Xnt=s(pce);nyo=r(Xnt,"tapas"),Xnt.forEach(t),syo=r(DLe," \u2014 "),gD=n(DLe,"A",{href:!0});var znt=s(gD);lyo=r(znt,"TapasForMaskedLM"),znt.forEach(t),iyo=r(DLe," (TAPAS model)"),DLe.forEach(t),dyo=i(U),t1=n(U,"LI",{});var GLe=s(t1);uce=n(GLe,"STRONG",{});var Wnt=s(uce);cyo=r(Wnt,"wav2vec2"),Wnt.forEach(t),fyo=r(GLe," \u2014 "),_ce=n(GLe,"CODE",{});var Qnt=s(_ce);myo=r(Qnt,"Wav2Vec2ForMaskedLM"),Qnt.forEach(t),gyo=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),hyo=i(U),a1=n(U,"LI",{});var OLe=s(a1);bce=n(OLe,"STRONG",{});var Hnt=s(bce);pyo=r(Hnt,"xlm"),Hnt.forEach(t),uyo=r(OLe," \u2014 "),hD=n(OLe,"A",{href:!0});var Unt=s(hD);_yo=r(Unt,"XLMWithLMHeadModel"),Unt.forEach(t),byo=r(OLe," (XLM model)"),OLe.forEach(t),vyo=i(U),n1=n(U,"LI",{});var VLe=s(n1);vce=n(VLe,"STRONG",{});var Jnt=s(vce);Fyo=r(Jnt,"xlm-roberta"),Jnt.forEach(t),Tyo=r(VLe," \u2014 "),pD=n(VLe,"A",{href:!0});var Ynt=s(pD);Myo=r(Ynt,"XLMRobertaForMaskedLM"),Ynt.forEach(t),Eyo=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),Cyo=i(U),s1=n(U,"LI",{});var XLe=s(s1);Fce=n(XLe,"STRONG",{});var Knt=s(Fce);wyo=r(Knt,"xlm-roberta-xl"),Knt.forEach(t),Ayo=r(XLe," \u2014 "),uD=n(XLe,"A",{href:!0});var Znt=s(uD);yyo=r(Znt,"XLMRobertaXLForMaskedLM"),Znt.forEach(t),Lyo=r(XLe," (XLM-RoBERTa-XL model)"),XLe.forEach(t),xyo=i(U),l1=n(U,"LI",{});var zLe=s(l1);Tce=n(zLe,"STRONG",{});var est=s(Tce);$yo=r(est,"yoso"),est.forEach(t),kyo=r(zLe," \u2014 "),_D=n(zLe,"A",{href:!0});var ost=s(_D);Syo=r(ost,"YosoForMaskedLM"),ost.forEach(t),Ryo=r(zLe," (YOSO model)"),zLe.forEach(t),U.forEach(t),Pyo=i(aa),i1=n(aa,"P",{});var WLe=s(i1);Byo=r(WLe,"The model is set in evaluation mode by default using "),Mce=n(WLe,"CODE",{});var rst=s(Mce);Iyo=r(rst,"model.eval()"),rst.forEach(t),qyo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(WLe,"CODE",{});var tst=s(Ece);Nyo=r(tst,"model.train()"),tst.forEach(t),WLe.forEach(t),jyo=i(aa),T(d1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),wqe=i(f),qi=n(f,"H2",{class:!0});var xje=s(qi);c1=n(xje,"A",{id:!0,class:!0,href:!0});var ast=s(c1);Cce=n(ast,"SPAN",{});var nst=s(Cce);T(ly.$$.fragment,nst),nst.forEach(t),ast.forEach(t),Dyo=i(xje),wce=n(xje,"SPAN",{});var sst=s(wce);Gyo=r(sst,"AutoModelForSeq2SeqLM"),sst.forEach(t),xje.forEach(t),Aqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(iy.$$.fragment,zs),Oyo=i(zs),Ni=n(zs,"P",{});var ZK=s(Ni);Vyo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bD=n(ZK,"A",{href:!0});var lst=s(bD);Xyo=r(lst,"from_pretrained()"),lst.forEach(t),zyo=r(ZK," class method or the "),vD=n(ZK,"A",{href:!0});var ist=s(vD);Wyo=r(ist,"from_config()"),ist.forEach(t),Qyo=r(ZK,` class
method.`),ZK.forEach(t),Hyo=i(zs),dy=n(zs,"P",{});var $je=s(dy);Uyo=r($je,"This class cannot be instantiated directly using "),Ace=n($je,"CODE",{});var dst=s(Ace);Jyo=r(dst,"__init__()"),dst.forEach(t),Yyo=r($je," (throws an error)."),$je.forEach(t),Kyo=i(zs),lt=n(zs,"DIV",{class:!0});var y3=s(lt);T(cy.$$.fragment,y3),Zyo=i(y3),yce=n(y3,"P",{});var cst=s(yce);eLo=r(cst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cst.forEach(t),oLo=i(y3),ji=n(y3,"P",{});var eZ=s(ji);rLo=r(eZ,`Note:
Loading a model from its configuration file does `),Lce=n(eZ,"STRONG",{});var fst=s(Lce);tLo=r(fst,"not"),fst.forEach(t),aLo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(eZ,"A",{href:!0});var mst=s(FD);nLo=r(mst,"from_pretrained()"),mst.forEach(t),sLo=r(eZ," to load the model weights."),eZ.forEach(t),lLo=i(y3),T(f1.$$.fragment,y3),y3.forEach(t),iLo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(fy.$$.fragment,na),dLo=i(na),xce=n(na,"P",{});var gst=s(xce);cLo=r(gst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gst.forEach(t),fLo=i(na),Sa=n(na,"P",{});var L3=s(Sa);mLo=r(L3,"The model class to instantiate is selected based on the "),$ce=n(L3,"CODE",{});var hst=s($ce);gLo=r(hst,"model_type"),hst.forEach(t),hLo=r(L3,` property of the config object (either
passed as an argument or loaded from `),kce=n(L3,"CODE",{});var pst=s(kce);pLo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),uLo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(L3,"CODE",{});var ust=s(Sce);_Lo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),bLo=r(L3,":"),L3.forEach(t),vLo=i(na),ue=n(na,"UL",{});var ve=s(ue);m1=n(ve,"LI",{});var QLe=s(m1);Rce=n(QLe,"STRONG",{});var _st=s(Rce);FLo=r(_st,"bart"),_st.forEach(t),TLo=r(QLe," \u2014 "),TD=n(QLe,"A",{href:!0});var bst=s(TD);MLo=r(bst,"BartForConditionalGeneration"),bst.forEach(t),ELo=r(QLe," (BART model)"),QLe.forEach(t),CLo=i(ve),g1=n(ve,"LI",{});var HLe=s(g1);Pce=n(HLe,"STRONG",{});var vst=s(Pce);wLo=r(vst,"bigbird_pegasus"),vst.forEach(t),ALo=r(HLe," \u2014 "),MD=n(HLe,"A",{href:!0});var Fst=s(MD);yLo=r(Fst,"BigBirdPegasusForConditionalGeneration"),Fst.forEach(t),LLo=r(HLe," (BigBirdPegasus model)"),HLe.forEach(t),xLo=i(ve),h1=n(ve,"LI",{});var ULe=s(h1);Bce=n(ULe,"STRONG",{});var Tst=s(Bce);$Lo=r(Tst,"blenderbot"),Tst.forEach(t),kLo=r(ULe," \u2014 "),ED=n(ULe,"A",{href:!0});var Mst=s(ED);SLo=r(Mst,"BlenderbotForConditionalGeneration"),Mst.forEach(t),RLo=r(ULe," (Blenderbot model)"),ULe.forEach(t),PLo=i(ve),p1=n(ve,"LI",{});var JLe=s(p1);Ice=n(JLe,"STRONG",{});var Est=s(Ice);BLo=r(Est,"blenderbot-small"),Est.forEach(t),ILo=r(JLe," \u2014 "),CD=n(JLe,"A",{href:!0});var Cst=s(CD);qLo=r(Cst,"BlenderbotSmallForConditionalGeneration"),Cst.forEach(t),NLo=r(JLe," (BlenderbotSmall model)"),JLe.forEach(t),jLo=i(ve),u1=n(ve,"LI",{});var YLe=s(u1);qce=n(YLe,"STRONG",{});var wst=s(qce);DLo=r(wst,"encoder-decoder"),wst.forEach(t),GLo=r(YLe," \u2014 "),wD=n(YLe,"A",{href:!0});var Ast=s(wD);OLo=r(Ast,"EncoderDecoderModel"),Ast.forEach(t),VLo=r(YLe," (Encoder decoder model)"),YLe.forEach(t),XLo=i(ve),_1=n(ve,"LI",{});var KLe=s(_1);Nce=n(KLe,"STRONG",{});var yst=s(Nce);zLo=r(yst,"fsmt"),yst.forEach(t),WLo=r(KLe," \u2014 "),AD=n(KLe,"A",{href:!0});var Lst=s(AD);QLo=r(Lst,"FSMTForConditionalGeneration"),Lst.forEach(t),HLo=r(KLe," (FairSeq Machine-Translation model)"),KLe.forEach(t),ULo=i(ve),b1=n(ve,"LI",{});var ZLe=s(b1);jce=n(ZLe,"STRONG",{});var xst=s(jce);JLo=r(xst,"led"),xst.forEach(t),YLo=r(ZLe," \u2014 "),yD=n(ZLe,"A",{href:!0});var $st=s(yD);KLo=r($st,"LEDForConditionalGeneration"),$st.forEach(t),ZLo=r(ZLe," (LED model)"),ZLe.forEach(t),e8o=i(ve),v1=n(ve,"LI",{});var e8e=s(v1);Dce=n(e8e,"STRONG",{});var kst=s(Dce);o8o=r(kst,"m2m_100"),kst.forEach(t),r8o=r(e8e," \u2014 "),LD=n(e8e,"A",{href:!0});var Sst=s(LD);t8o=r(Sst,"M2M100ForConditionalGeneration"),Sst.forEach(t),a8o=r(e8e," (M2M100 model)"),e8e.forEach(t),n8o=i(ve),F1=n(ve,"LI",{});var o8e=s(F1);Gce=n(o8e,"STRONG",{});var Rst=s(Gce);s8o=r(Rst,"marian"),Rst.forEach(t),l8o=r(o8e," \u2014 "),xD=n(o8e,"A",{href:!0});var Pst=s(xD);i8o=r(Pst,"MarianMTModel"),Pst.forEach(t),d8o=r(o8e," (Marian model)"),o8e.forEach(t),c8o=i(ve),T1=n(ve,"LI",{});var r8e=s(T1);Oce=n(r8e,"STRONG",{});var Bst=s(Oce);f8o=r(Bst,"mbart"),Bst.forEach(t),m8o=r(r8e," \u2014 "),$D=n(r8e,"A",{href:!0});var Ist=s($D);g8o=r(Ist,"MBartForConditionalGeneration"),Ist.forEach(t),h8o=r(r8e," (mBART model)"),r8e.forEach(t),p8o=i(ve),M1=n(ve,"LI",{});var t8e=s(M1);Vce=n(t8e,"STRONG",{});var qst=s(Vce);u8o=r(qst,"mt5"),qst.forEach(t),_8o=r(t8e," \u2014 "),kD=n(t8e,"A",{href:!0});var Nst=s(kD);b8o=r(Nst,"MT5ForConditionalGeneration"),Nst.forEach(t),v8o=r(t8e," (mT5 model)"),t8e.forEach(t),F8o=i(ve),E1=n(ve,"LI",{});var a8e=s(E1);Xce=n(a8e,"STRONG",{});var jst=s(Xce);T8o=r(jst,"pegasus"),jst.forEach(t),M8o=r(a8e," \u2014 "),SD=n(a8e,"A",{href:!0});var Dst=s(SD);E8o=r(Dst,"PegasusForConditionalGeneration"),Dst.forEach(t),C8o=r(a8e," (Pegasus model)"),a8e.forEach(t),w8o=i(ve),C1=n(ve,"LI",{});var n8e=s(C1);zce=n(n8e,"STRONG",{});var Gst=s(zce);A8o=r(Gst,"plbart"),Gst.forEach(t),y8o=r(n8e," \u2014 "),RD=n(n8e,"A",{href:!0});var Ost=s(RD);L8o=r(Ost,"PLBartForConditionalGeneration"),Ost.forEach(t),x8o=r(n8e," (PLBart model)"),n8e.forEach(t),$8o=i(ve),w1=n(ve,"LI",{});var s8e=s(w1);Wce=n(s8e,"STRONG",{});var Vst=s(Wce);k8o=r(Vst,"prophetnet"),Vst.forEach(t),S8o=r(s8e," \u2014 "),PD=n(s8e,"A",{href:!0});var Xst=s(PD);R8o=r(Xst,"ProphetNetForConditionalGeneration"),Xst.forEach(t),P8o=r(s8e," (ProphetNet model)"),s8e.forEach(t),B8o=i(ve),A1=n(ve,"LI",{});var l8e=s(A1);Qce=n(l8e,"STRONG",{});var zst=s(Qce);I8o=r(zst,"t5"),zst.forEach(t),q8o=r(l8e," \u2014 "),BD=n(l8e,"A",{href:!0});var Wst=s(BD);N8o=r(Wst,"T5ForConditionalGeneration"),Wst.forEach(t),j8o=r(l8e," (T5 model)"),l8e.forEach(t),D8o=i(ve),y1=n(ve,"LI",{});var i8e=s(y1);Hce=n(i8e,"STRONG",{});var Qst=s(Hce);G8o=r(Qst,"xlm-prophetnet"),Qst.forEach(t),O8o=r(i8e," \u2014 "),ID=n(i8e,"A",{href:!0});var Hst=s(ID);V8o=r(Hst,"XLMProphetNetForConditionalGeneration"),Hst.forEach(t),X8o=r(i8e," (XLMProphetNet model)"),i8e.forEach(t),ve.forEach(t),z8o=i(na),L1=n(na,"P",{});var d8e=s(L1);W8o=r(d8e,"The model is set in evaluation mode by default using "),Uce=n(d8e,"CODE",{});var Ust=s(Uce);Q8o=r(Ust,"model.eval()"),Ust.forEach(t),H8o=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jce=n(d8e,"CODE",{});var Jst=s(Jce);U8o=r(Jst,"model.train()"),Jst.forEach(t),d8e.forEach(t),J8o=i(na),T(x1.$$.fragment,na),na.forEach(t),zs.forEach(t),yqe=i(f),Di=n(f,"H2",{class:!0});var kje=s(Di);$1=n(kje,"A",{id:!0,class:!0,href:!0});var Yst=s($1);Yce=n(Yst,"SPAN",{});var Kst=s(Yce);T(my.$$.fragment,Kst),Kst.forEach(t),Yst.forEach(t),Y8o=i(kje),Kce=n(kje,"SPAN",{});var Zst=s(Kce);K8o=r(Zst,"AutoModelForSequenceClassification"),Zst.forEach(t),kje.forEach(t),Lqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(gy.$$.fragment,Ws),Z8o=i(Ws),Gi=n(Ws,"P",{});var oZ=s(Gi);e9o=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qD=n(oZ,"A",{href:!0});var elt=s(qD);o9o=r(elt,"from_pretrained()"),elt.forEach(t),r9o=r(oZ," class method or the "),ND=n(oZ,"A",{href:!0});var olt=s(ND);t9o=r(olt,"from_config()"),olt.forEach(t),a9o=r(oZ,` class
method.`),oZ.forEach(t),n9o=i(Ws),hy=n(Ws,"P",{});var Sje=s(hy);s9o=r(Sje,"This class cannot be instantiated directly using "),Zce=n(Sje,"CODE",{});var rlt=s(Zce);l9o=r(rlt,"__init__()"),rlt.forEach(t),i9o=r(Sje," (throws an error)."),Sje.forEach(t),d9o=i(Ws),it=n(Ws,"DIV",{class:!0});var x3=s(it);T(py.$$.fragment,x3),c9o=i(x3),efe=n(x3,"P",{});var tlt=s(efe);f9o=r(tlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tlt.forEach(t),m9o=i(x3),Oi=n(x3,"P",{});var rZ=s(Oi);g9o=r(rZ,`Note:
Loading a model from its configuration file does `),ofe=n(rZ,"STRONG",{});var alt=s(ofe);h9o=r(alt,"not"),alt.forEach(t),p9o=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(rZ,"A",{href:!0});var nlt=s(jD);u9o=r(nlt,"from_pretrained()"),nlt.forEach(t),_9o=r(rZ," to load the model weights."),rZ.forEach(t),b9o=i(x3),T(k1.$$.fragment,x3),x3.forEach(t),v9o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(uy.$$.fragment,sa),F9o=i(sa),rfe=n(sa,"P",{});var slt=s(rfe);T9o=r(slt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),slt.forEach(t),M9o=i(sa),Ra=n(sa,"P",{});var $3=s(Ra);E9o=r($3,"The model class to instantiate is selected based on the "),tfe=n($3,"CODE",{});var llt=s(tfe);C9o=r(llt,"model_type"),llt.forEach(t),w9o=r($3,` property of the config object (either
passed as an argument or loaded from `),afe=n($3,"CODE",{});var ilt=s(afe);A9o=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),y9o=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n($3,"CODE",{});var dlt=s(nfe);L9o=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),x9o=r($3,":"),$3.forEach(t),$9o=i(sa),q=n(sa,"UL",{});var j=s(q);S1=n(j,"LI",{});var c8e=s(S1);sfe=n(c8e,"STRONG",{});var clt=s(sfe);k9o=r(clt,"albert"),clt.forEach(t),S9o=r(c8e," \u2014 "),DD=n(c8e,"A",{href:!0});var flt=s(DD);R9o=r(flt,"AlbertForSequenceClassification"),flt.forEach(t),P9o=r(c8e," (ALBERT model)"),c8e.forEach(t),B9o=i(j),R1=n(j,"LI",{});var f8e=s(R1);lfe=n(f8e,"STRONG",{});var mlt=s(lfe);I9o=r(mlt,"bart"),mlt.forEach(t),q9o=r(f8e," \u2014 "),GD=n(f8e,"A",{href:!0});var glt=s(GD);N9o=r(glt,"BartForSequenceClassification"),glt.forEach(t),j9o=r(f8e," (BART model)"),f8e.forEach(t),D9o=i(j),P1=n(j,"LI",{});var m8e=s(P1);ife=n(m8e,"STRONG",{});var hlt=s(ife);G9o=r(hlt,"bert"),hlt.forEach(t),O9o=r(m8e," \u2014 "),OD=n(m8e,"A",{href:!0});var plt=s(OD);V9o=r(plt,"BertForSequenceClassification"),plt.forEach(t),X9o=r(m8e," (BERT model)"),m8e.forEach(t),z9o=i(j),B1=n(j,"LI",{});var g8e=s(B1);dfe=n(g8e,"STRONG",{});var ult=s(dfe);W9o=r(ult,"big_bird"),ult.forEach(t),Q9o=r(g8e," \u2014 "),VD=n(g8e,"A",{href:!0});var _lt=s(VD);H9o=r(_lt,"BigBirdForSequenceClassification"),_lt.forEach(t),U9o=r(g8e," (BigBird model)"),g8e.forEach(t),J9o=i(j),I1=n(j,"LI",{});var h8e=s(I1);cfe=n(h8e,"STRONG",{});var blt=s(cfe);Y9o=r(blt,"bigbird_pegasus"),blt.forEach(t),K9o=r(h8e," \u2014 "),XD=n(h8e,"A",{href:!0});var vlt=s(XD);Z9o=r(vlt,"BigBirdPegasusForSequenceClassification"),vlt.forEach(t),exo=r(h8e," (BigBirdPegasus model)"),h8e.forEach(t),oxo=i(j),q1=n(j,"LI",{});var p8e=s(q1);ffe=n(p8e,"STRONG",{});var Flt=s(ffe);rxo=r(Flt,"camembert"),Flt.forEach(t),txo=r(p8e," \u2014 "),zD=n(p8e,"A",{href:!0});var Tlt=s(zD);axo=r(Tlt,"CamembertForSequenceClassification"),Tlt.forEach(t),nxo=r(p8e," (CamemBERT model)"),p8e.forEach(t),sxo=i(j),N1=n(j,"LI",{});var u8e=s(N1);mfe=n(u8e,"STRONG",{});var Mlt=s(mfe);lxo=r(Mlt,"canine"),Mlt.forEach(t),ixo=r(u8e," \u2014 "),WD=n(u8e,"A",{href:!0});var Elt=s(WD);dxo=r(Elt,"CanineForSequenceClassification"),Elt.forEach(t),cxo=r(u8e," (Canine model)"),u8e.forEach(t),fxo=i(j),j1=n(j,"LI",{});var _8e=s(j1);gfe=n(_8e,"STRONG",{});var Clt=s(gfe);mxo=r(Clt,"convbert"),Clt.forEach(t),gxo=r(_8e," \u2014 "),QD=n(_8e,"A",{href:!0});var wlt=s(QD);hxo=r(wlt,"ConvBertForSequenceClassification"),wlt.forEach(t),pxo=r(_8e," (ConvBERT model)"),_8e.forEach(t),uxo=i(j),D1=n(j,"LI",{});var b8e=s(D1);hfe=n(b8e,"STRONG",{});var Alt=s(hfe);_xo=r(Alt,"ctrl"),Alt.forEach(t),bxo=r(b8e," \u2014 "),HD=n(b8e,"A",{href:!0});var ylt=s(HD);vxo=r(ylt,"CTRLForSequenceClassification"),ylt.forEach(t),Fxo=r(b8e," (CTRL model)"),b8e.forEach(t),Txo=i(j),G1=n(j,"LI",{});var v8e=s(G1);pfe=n(v8e,"STRONG",{});var Llt=s(pfe);Mxo=r(Llt,"data2vec-text"),Llt.forEach(t),Exo=r(v8e," \u2014 "),UD=n(v8e,"A",{href:!0});var xlt=s(UD);Cxo=r(xlt,"Data2VecTextForSequenceClassification"),xlt.forEach(t),wxo=r(v8e," (Data2VecText model)"),v8e.forEach(t),Axo=i(j),O1=n(j,"LI",{});var F8e=s(O1);ufe=n(F8e,"STRONG",{});var $lt=s(ufe);yxo=r($lt,"deberta"),$lt.forEach(t),Lxo=r(F8e," \u2014 "),JD=n(F8e,"A",{href:!0});var klt=s(JD);xxo=r(klt,"DebertaForSequenceClassification"),klt.forEach(t),$xo=r(F8e," (DeBERTa model)"),F8e.forEach(t),kxo=i(j),V1=n(j,"LI",{});var T8e=s(V1);_fe=n(T8e,"STRONG",{});var Slt=s(_fe);Sxo=r(Slt,"deberta-v2"),Slt.forEach(t),Rxo=r(T8e," \u2014 "),YD=n(T8e,"A",{href:!0});var Rlt=s(YD);Pxo=r(Rlt,"DebertaV2ForSequenceClassification"),Rlt.forEach(t),Bxo=r(T8e," (DeBERTa-v2 model)"),T8e.forEach(t),Ixo=i(j),X1=n(j,"LI",{});var M8e=s(X1);bfe=n(M8e,"STRONG",{});var Plt=s(bfe);qxo=r(Plt,"distilbert"),Plt.forEach(t),Nxo=r(M8e," \u2014 "),KD=n(M8e,"A",{href:!0});var Blt=s(KD);jxo=r(Blt,"DistilBertForSequenceClassification"),Blt.forEach(t),Dxo=r(M8e," (DistilBERT model)"),M8e.forEach(t),Gxo=i(j),z1=n(j,"LI",{});var E8e=s(z1);vfe=n(E8e,"STRONG",{});var Ilt=s(vfe);Oxo=r(Ilt,"electra"),Ilt.forEach(t),Vxo=r(E8e," \u2014 "),ZD=n(E8e,"A",{href:!0});var qlt=s(ZD);Xxo=r(qlt,"ElectraForSequenceClassification"),qlt.forEach(t),zxo=r(E8e," (ELECTRA model)"),E8e.forEach(t),Wxo=i(j),W1=n(j,"LI",{});var C8e=s(W1);Ffe=n(C8e,"STRONG",{});var Nlt=s(Ffe);Qxo=r(Nlt,"flaubert"),Nlt.forEach(t),Hxo=r(C8e," \u2014 "),eG=n(C8e,"A",{href:!0});var jlt=s(eG);Uxo=r(jlt,"FlaubertForSequenceClassification"),jlt.forEach(t),Jxo=r(C8e," (FlauBERT model)"),C8e.forEach(t),Yxo=i(j),Q1=n(j,"LI",{});var w8e=s(Q1);Tfe=n(w8e,"STRONG",{});var Dlt=s(Tfe);Kxo=r(Dlt,"fnet"),Dlt.forEach(t),Zxo=r(w8e," \u2014 "),oG=n(w8e,"A",{href:!0});var Glt=s(oG);e$o=r(Glt,"FNetForSequenceClassification"),Glt.forEach(t),o$o=r(w8e," (FNet model)"),w8e.forEach(t),r$o=i(j),H1=n(j,"LI",{});var A8e=s(H1);Mfe=n(A8e,"STRONG",{});var Olt=s(Mfe);t$o=r(Olt,"funnel"),Olt.forEach(t),a$o=r(A8e," \u2014 "),rG=n(A8e,"A",{href:!0});var Vlt=s(rG);n$o=r(Vlt,"FunnelForSequenceClassification"),Vlt.forEach(t),s$o=r(A8e," (Funnel Transformer model)"),A8e.forEach(t),l$o=i(j),U1=n(j,"LI",{});var y8e=s(U1);Efe=n(y8e,"STRONG",{});var Xlt=s(Efe);i$o=r(Xlt,"gpt2"),Xlt.forEach(t),d$o=r(y8e," \u2014 "),tG=n(y8e,"A",{href:!0});var zlt=s(tG);c$o=r(zlt,"GPT2ForSequenceClassification"),zlt.forEach(t),f$o=r(y8e," (OpenAI GPT-2 model)"),y8e.forEach(t),m$o=i(j),J1=n(j,"LI",{});var L8e=s(J1);Cfe=n(L8e,"STRONG",{});var Wlt=s(Cfe);g$o=r(Wlt,"gpt_neo"),Wlt.forEach(t),h$o=r(L8e," \u2014 "),aG=n(L8e,"A",{href:!0});var Qlt=s(aG);p$o=r(Qlt,"GPTNeoForSequenceClassification"),Qlt.forEach(t),u$o=r(L8e," (GPT Neo model)"),L8e.forEach(t),_$o=i(j),Y1=n(j,"LI",{});var x8e=s(Y1);wfe=n(x8e,"STRONG",{});var Hlt=s(wfe);b$o=r(Hlt,"gptj"),Hlt.forEach(t),v$o=r(x8e," \u2014 "),nG=n(x8e,"A",{href:!0});var Ult=s(nG);F$o=r(Ult,"GPTJForSequenceClassification"),Ult.forEach(t),T$o=r(x8e," (GPT-J model)"),x8e.forEach(t),M$o=i(j),K1=n(j,"LI",{});var $8e=s(K1);Afe=n($8e,"STRONG",{});var Jlt=s(Afe);E$o=r(Jlt,"ibert"),Jlt.forEach(t),C$o=r($8e," \u2014 "),sG=n($8e,"A",{href:!0});var Ylt=s(sG);w$o=r(Ylt,"IBertForSequenceClassification"),Ylt.forEach(t),A$o=r($8e," (I-BERT model)"),$8e.forEach(t),y$o=i(j),Z1=n(j,"LI",{});var k8e=s(Z1);yfe=n(k8e,"STRONG",{});var Klt=s(yfe);L$o=r(Klt,"layoutlm"),Klt.forEach(t),x$o=r(k8e," \u2014 "),lG=n(k8e,"A",{href:!0});var Zlt=s(lG);$$o=r(Zlt,"LayoutLMForSequenceClassification"),Zlt.forEach(t),k$o=r(k8e," (LayoutLM model)"),k8e.forEach(t),S$o=i(j),eb=n(j,"LI",{});var S8e=s(eb);Lfe=n(S8e,"STRONG",{});var eit=s(Lfe);R$o=r(eit,"layoutlmv2"),eit.forEach(t),P$o=r(S8e," \u2014 "),iG=n(S8e,"A",{href:!0});var oit=s(iG);B$o=r(oit,"LayoutLMv2ForSequenceClassification"),oit.forEach(t),I$o=r(S8e," (LayoutLMv2 model)"),S8e.forEach(t),q$o=i(j),ob=n(j,"LI",{});var R8e=s(ob);xfe=n(R8e,"STRONG",{});var rit=s(xfe);N$o=r(rit,"layoutlmv3"),rit.forEach(t),j$o=r(R8e," \u2014 "),dG=n(R8e,"A",{href:!0});var tit=s(dG);D$o=r(tit,"LayoutLMv3ForSequenceClassification"),tit.forEach(t),G$o=r(R8e," (LayoutLMv3 model)"),R8e.forEach(t),O$o=i(j),rb=n(j,"LI",{});var P8e=s(rb);$fe=n(P8e,"STRONG",{});var ait=s($fe);V$o=r(ait,"led"),ait.forEach(t),X$o=r(P8e," \u2014 "),cG=n(P8e,"A",{href:!0});var nit=s(cG);z$o=r(nit,"LEDForSequenceClassification"),nit.forEach(t),W$o=r(P8e," (LED model)"),P8e.forEach(t),Q$o=i(j),tb=n(j,"LI",{});var B8e=s(tb);kfe=n(B8e,"STRONG",{});var sit=s(kfe);H$o=r(sit,"longformer"),sit.forEach(t),U$o=r(B8e," \u2014 "),fG=n(B8e,"A",{href:!0});var lit=s(fG);J$o=r(lit,"LongformerForSequenceClassification"),lit.forEach(t),Y$o=r(B8e," (Longformer model)"),B8e.forEach(t),K$o=i(j),ab=n(j,"LI",{});var I8e=s(ab);Sfe=n(I8e,"STRONG",{});var iit=s(Sfe);Z$o=r(iit,"mbart"),iit.forEach(t),eko=r(I8e," \u2014 "),mG=n(I8e,"A",{href:!0});var dit=s(mG);oko=r(dit,"MBartForSequenceClassification"),dit.forEach(t),rko=r(I8e," (mBART model)"),I8e.forEach(t),tko=i(j),nb=n(j,"LI",{});var q8e=s(nb);Rfe=n(q8e,"STRONG",{});var cit=s(Rfe);ako=r(cit,"megatron-bert"),cit.forEach(t),nko=r(q8e," \u2014 "),gG=n(q8e,"A",{href:!0});var fit=s(gG);sko=r(fit,"MegatronBertForSequenceClassification"),fit.forEach(t),lko=r(q8e," (MegatronBert model)"),q8e.forEach(t),iko=i(j),sb=n(j,"LI",{});var N8e=s(sb);Pfe=n(N8e,"STRONG",{});var mit=s(Pfe);dko=r(mit,"mobilebert"),mit.forEach(t),cko=r(N8e," \u2014 "),hG=n(N8e,"A",{href:!0});var git=s(hG);fko=r(git,"MobileBertForSequenceClassification"),git.forEach(t),mko=r(N8e," (MobileBERT model)"),N8e.forEach(t),gko=i(j),lb=n(j,"LI",{});var j8e=s(lb);Bfe=n(j8e,"STRONG",{});var hit=s(Bfe);hko=r(hit,"mpnet"),hit.forEach(t),pko=r(j8e," \u2014 "),pG=n(j8e,"A",{href:!0});var pit=s(pG);uko=r(pit,"MPNetForSequenceClassification"),pit.forEach(t),_ko=r(j8e," (MPNet model)"),j8e.forEach(t),bko=i(j),ib=n(j,"LI",{});var D8e=s(ib);Ife=n(D8e,"STRONG",{});var uit=s(Ife);vko=r(uit,"nystromformer"),uit.forEach(t),Fko=r(D8e," \u2014 "),uG=n(D8e,"A",{href:!0});var _it=s(uG);Tko=r(_it,"NystromformerForSequenceClassification"),_it.forEach(t),Mko=r(D8e," (Nystromformer model)"),D8e.forEach(t),Eko=i(j),db=n(j,"LI",{});var G8e=s(db);qfe=n(G8e,"STRONG",{});var bit=s(qfe);Cko=r(bit,"openai-gpt"),bit.forEach(t),wko=r(G8e," \u2014 "),_G=n(G8e,"A",{href:!0});var vit=s(_G);Ako=r(vit,"OpenAIGPTForSequenceClassification"),vit.forEach(t),yko=r(G8e," (OpenAI GPT model)"),G8e.forEach(t),Lko=i(j),cb=n(j,"LI",{});var O8e=s(cb);Nfe=n(O8e,"STRONG",{});var Fit=s(Nfe);xko=r(Fit,"perceiver"),Fit.forEach(t),$ko=r(O8e," \u2014 "),bG=n(O8e,"A",{href:!0});var Tit=s(bG);kko=r(Tit,"PerceiverForSequenceClassification"),Tit.forEach(t),Sko=r(O8e," (Perceiver model)"),O8e.forEach(t),Rko=i(j),fb=n(j,"LI",{});var V8e=s(fb);jfe=n(V8e,"STRONG",{});var Mit=s(jfe);Pko=r(Mit,"plbart"),Mit.forEach(t),Bko=r(V8e," \u2014 "),vG=n(V8e,"A",{href:!0});var Eit=s(vG);Iko=r(Eit,"PLBartForSequenceClassification"),Eit.forEach(t),qko=r(V8e," (PLBart model)"),V8e.forEach(t),Nko=i(j),mb=n(j,"LI",{});var X8e=s(mb);Dfe=n(X8e,"STRONG",{});var Cit=s(Dfe);jko=r(Cit,"qdqbert"),Cit.forEach(t),Dko=r(X8e," \u2014 "),FG=n(X8e,"A",{href:!0});var wit=s(FG);Gko=r(wit,"QDQBertForSequenceClassification"),wit.forEach(t),Oko=r(X8e," (QDQBert model)"),X8e.forEach(t),Vko=i(j),gb=n(j,"LI",{});var z8e=s(gb);Gfe=n(z8e,"STRONG",{});var Ait=s(Gfe);Xko=r(Ait,"reformer"),Ait.forEach(t),zko=r(z8e," \u2014 "),TG=n(z8e,"A",{href:!0});var yit=s(TG);Wko=r(yit,"ReformerForSequenceClassification"),yit.forEach(t),Qko=r(z8e," (Reformer model)"),z8e.forEach(t),Hko=i(j),hb=n(j,"LI",{});var W8e=s(hb);Ofe=n(W8e,"STRONG",{});var Lit=s(Ofe);Uko=r(Lit,"rembert"),Lit.forEach(t),Jko=r(W8e," \u2014 "),MG=n(W8e,"A",{href:!0});var xit=s(MG);Yko=r(xit,"RemBertForSequenceClassification"),xit.forEach(t),Kko=r(W8e," (RemBERT model)"),W8e.forEach(t),Zko=i(j),pb=n(j,"LI",{});var Q8e=s(pb);Vfe=n(Q8e,"STRONG",{});var $it=s(Vfe);eSo=r($it,"roberta"),$it.forEach(t),oSo=r(Q8e," \u2014 "),EG=n(Q8e,"A",{href:!0});var kit=s(EG);rSo=r(kit,"RobertaForSequenceClassification"),kit.forEach(t),tSo=r(Q8e," (RoBERTa model)"),Q8e.forEach(t),aSo=i(j),ub=n(j,"LI",{});var H8e=s(ub);Xfe=n(H8e,"STRONG",{});var Sit=s(Xfe);nSo=r(Sit,"roformer"),Sit.forEach(t),sSo=r(H8e," \u2014 "),CG=n(H8e,"A",{href:!0});var Rit=s(CG);lSo=r(Rit,"RoFormerForSequenceClassification"),Rit.forEach(t),iSo=r(H8e," (RoFormer model)"),H8e.forEach(t),dSo=i(j),_b=n(j,"LI",{});var U8e=s(_b);zfe=n(U8e,"STRONG",{});var Pit=s(zfe);cSo=r(Pit,"squeezebert"),Pit.forEach(t),fSo=r(U8e," \u2014 "),wG=n(U8e,"A",{href:!0});var Bit=s(wG);mSo=r(Bit,"SqueezeBertForSequenceClassification"),Bit.forEach(t),gSo=r(U8e," (SqueezeBERT model)"),U8e.forEach(t),hSo=i(j),bb=n(j,"LI",{});var J8e=s(bb);Wfe=n(J8e,"STRONG",{});var Iit=s(Wfe);pSo=r(Iit,"tapas"),Iit.forEach(t),uSo=r(J8e," \u2014 "),AG=n(J8e,"A",{href:!0});var qit=s(AG);_So=r(qit,"TapasForSequenceClassification"),qit.forEach(t),bSo=r(J8e," (TAPAS model)"),J8e.forEach(t),vSo=i(j),vb=n(j,"LI",{});var Y8e=s(vb);Qfe=n(Y8e,"STRONG",{});var Nit=s(Qfe);FSo=r(Nit,"transfo-xl"),Nit.forEach(t),TSo=r(Y8e," \u2014 "),yG=n(Y8e,"A",{href:!0});var jit=s(yG);MSo=r(jit,"TransfoXLForSequenceClassification"),jit.forEach(t),ESo=r(Y8e," (Transformer-XL model)"),Y8e.forEach(t),CSo=i(j),Fb=n(j,"LI",{});var K8e=s(Fb);Hfe=n(K8e,"STRONG",{});var Dit=s(Hfe);wSo=r(Dit,"xlm"),Dit.forEach(t),ASo=r(K8e," \u2014 "),LG=n(K8e,"A",{href:!0});var Git=s(LG);ySo=r(Git,"XLMForSequenceClassification"),Git.forEach(t),LSo=r(K8e," (XLM model)"),K8e.forEach(t),xSo=i(j),Tb=n(j,"LI",{});var Z8e=s(Tb);Ufe=n(Z8e,"STRONG",{});var Oit=s(Ufe);$So=r(Oit,"xlm-roberta"),Oit.forEach(t),kSo=r(Z8e," \u2014 "),xG=n(Z8e,"A",{href:!0});var Vit=s(xG);SSo=r(Vit,"XLMRobertaForSequenceClassification"),Vit.forEach(t),RSo=r(Z8e," (XLM-RoBERTa model)"),Z8e.forEach(t),PSo=i(j),Mb=n(j,"LI",{});var e9e=s(Mb);Jfe=n(e9e,"STRONG",{});var Xit=s(Jfe);BSo=r(Xit,"xlm-roberta-xl"),Xit.forEach(t),ISo=r(e9e," \u2014 "),$G=n(e9e,"A",{href:!0});var zit=s($G);qSo=r(zit,"XLMRobertaXLForSequenceClassification"),zit.forEach(t),NSo=r(e9e," (XLM-RoBERTa-XL model)"),e9e.forEach(t),jSo=i(j),Eb=n(j,"LI",{});var o9e=s(Eb);Yfe=n(o9e,"STRONG",{});var Wit=s(Yfe);DSo=r(Wit,"xlnet"),Wit.forEach(t),GSo=r(o9e," \u2014 "),kG=n(o9e,"A",{href:!0});var Qit=s(kG);OSo=r(Qit,"XLNetForSequenceClassification"),Qit.forEach(t),VSo=r(o9e," (XLNet model)"),o9e.forEach(t),XSo=i(j),Cb=n(j,"LI",{});var r9e=s(Cb);Kfe=n(r9e,"STRONG",{});var Hit=s(Kfe);zSo=r(Hit,"yoso"),Hit.forEach(t),WSo=r(r9e," \u2014 "),SG=n(r9e,"A",{href:!0});var Uit=s(SG);QSo=r(Uit,"YosoForSequenceClassification"),Uit.forEach(t),HSo=r(r9e," (YOSO model)"),r9e.forEach(t),j.forEach(t),USo=i(sa),wb=n(sa,"P",{});var t9e=s(wb);JSo=r(t9e,"The model is set in evaluation mode by default using "),Zfe=n(t9e,"CODE",{});var Jit=s(Zfe);YSo=r(Jit,"model.eval()"),Jit.forEach(t),KSo=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(t9e,"CODE",{});var Yit=s(eme);ZSo=r(Yit,"model.train()"),Yit.forEach(t),t9e.forEach(t),eRo=i(sa),T(Ab.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),xqe=i(f),Vi=n(f,"H2",{class:!0});var Rje=s(Vi);yb=n(Rje,"A",{id:!0,class:!0,href:!0});var Kit=s(yb);ome=n(Kit,"SPAN",{});var Zit=s(ome);T(_y.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),oRo=i(Rje),rme=n(Rje,"SPAN",{});var edt=s(rme);rRo=r(edt,"AutoModelForMultipleChoice"),edt.forEach(t),Rje.forEach(t),$qe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(by.$$.fragment,Qs),tRo=i(Qs),Xi=n(Qs,"P",{});var tZ=s(Xi);aRo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RG=n(tZ,"A",{href:!0});var odt=s(RG);nRo=r(odt,"from_pretrained()"),odt.forEach(t),sRo=r(tZ," class method or the "),PG=n(tZ,"A",{href:!0});var rdt=s(PG);lRo=r(rdt,"from_config()"),rdt.forEach(t),iRo=r(tZ,` class
method.`),tZ.forEach(t),dRo=i(Qs),vy=n(Qs,"P",{});var Pje=s(vy);cRo=r(Pje,"This class cannot be instantiated directly using "),tme=n(Pje,"CODE",{});var tdt=s(tme);fRo=r(tdt,"__init__()"),tdt.forEach(t),mRo=r(Pje," (throws an error)."),Pje.forEach(t),gRo=i(Qs),dt=n(Qs,"DIV",{class:!0});var k3=s(dt);T(Fy.$$.fragment,k3),hRo=i(k3),ame=n(k3,"P",{});var adt=s(ame);pRo=r(adt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),adt.forEach(t),uRo=i(k3),zi=n(k3,"P",{});var aZ=s(zi);_Ro=r(aZ,`Note:
Loading a model from its configuration file does `),nme=n(aZ,"STRONG",{});var ndt=s(nme);bRo=r(ndt,"not"),ndt.forEach(t),vRo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(aZ,"A",{href:!0});var sdt=s(BG);FRo=r(sdt,"from_pretrained()"),sdt.forEach(t),TRo=r(aZ," to load the model weights."),aZ.forEach(t),MRo=i(k3),T(Lb.$$.fragment,k3),k3.forEach(t),ERo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(Ty.$$.fragment,la),CRo=i(la),sme=n(la,"P",{});var ldt=s(sme);wRo=r(ldt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ldt.forEach(t),ARo=i(la),Pa=n(la,"P",{});var S3=s(Pa);yRo=r(S3,"The model class to instantiate is selected based on the "),lme=n(S3,"CODE",{});var idt=s(lme);LRo=r(idt,"model_type"),idt.forEach(t),xRo=r(S3,` property of the config object (either
passed as an argument or loaded from `),ime=n(S3,"CODE",{});var ddt=s(ime);$Ro=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),kRo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(S3,"CODE",{});var cdt=s(dme);SRo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),RRo=r(S3,":"),S3.forEach(t),PRo=i(la),Y=n(la,"UL",{});var K=s(Y);xb=n(K,"LI",{});var a9e=s(xb);cme=n(a9e,"STRONG",{});var fdt=s(cme);BRo=r(fdt,"albert"),fdt.forEach(t),IRo=r(a9e," \u2014 "),IG=n(a9e,"A",{href:!0});var mdt=s(IG);qRo=r(mdt,"AlbertForMultipleChoice"),mdt.forEach(t),NRo=r(a9e," (ALBERT model)"),a9e.forEach(t),jRo=i(K),$b=n(K,"LI",{});var n9e=s($b);fme=n(n9e,"STRONG",{});var gdt=s(fme);DRo=r(gdt,"bert"),gdt.forEach(t),GRo=r(n9e," \u2014 "),qG=n(n9e,"A",{href:!0});var hdt=s(qG);ORo=r(hdt,"BertForMultipleChoice"),hdt.forEach(t),VRo=r(n9e," (BERT model)"),n9e.forEach(t),XRo=i(K),kb=n(K,"LI",{});var s9e=s(kb);mme=n(s9e,"STRONG",{});var pdt=s(mme);zRo=r(pdt,"big_bird"),pdt.forEach(t),WRo=r(s9e," \u2014 "),NG=n(s9e,"A",{href:!0});var udt=s(NG);QRo=r(udt,"BigBirdForMultipleChoice"),udt.forEach(t),HRo=r(s9e," (BigBird model)"),s9e.forEach(t),URo=i(K),Sb=n(K,"LI",{});var l9e=s(Sb);gme=n(l9e,"STRONG",{});var _dt=s(gme);JRo=r(_dt,"camembert"),_dt.forEach(t),YRo=r(l9e," \u2014 "),jG=n(l9e,"A",{href:!0});var bdt=s(jG);KRo=r(bdt,"CamembertForMultipleChoice"),bdt.forEach(t),ZRo=r(l9e," (CamemBERT model)"),l9e.forEach(t),ePo=i(K),Rb=n(K,"LI",{});var i9e=s(Rb);hme=n(i9e,"STRONG",{});var vdt=s(hme);oPo=r(vdt,"canine"),vdt.forEach(t),rPo=r(i9e," \u2014 "),DG=n(i9e,"A",{href:!0});var Fdt=s(DG);tPo=r(Fdt,"CanineForMultipleChoice"),Fdt.forEach(t),aPo=r(i9e," (Canine model)"),i9e.forEach(t),nPo=i(K),Pb=n(K,"LI",{});var d9e=s(Pb);pme=n(d9e,"STRONG",{});var Tdt=s(pme);sPo=r(Tdt,"convbert"),Tdt.forEach(t),lPo=r(d9e," \u2014 "),GG=n(d9e,"A",{href:!0});var Mdt=s(GG);iPo=r(Mdt,"ConvBertForMultipleChoice"),Mdt.forEach(t),dPo=r(d9e," (ConvBERT model)"),d9e.forEach(t),cPo=i(K),Bb=n(K,"LI",{});var c9e=s(Bb);ume=n(c9e,"STRONG",{});var Edt=s(ume);fPo=r(Edt,"data2vec-text"),Edt.forEach(t),mPo=r(c9e," \u2014 "),OG=n(c9e,"A",{href:!0});var Cdt=s(OG);gPo=r(Cdt,"Data2VecTextForMultipleChoice"),Cdt.forEach(t),hPo=r(c9e," (Data2VecText model)"),c9e.forEach(t),pPo=i(K),Ib=n(K,"LI",{});var f9e=s(Ib);_me=n(f9e,"STRONG",{});var wdt=s(_me);uPo=r(wdt,"deberta-v2"),wdt.forEach(t),_Po=r(f9e," \u2014 "),VG=n(f9e,"A",{href:!0});var Adt=s(VG);bPo=r(Adt,"DebertaV2ForMultipleChoice"),Adt.forEach(t),vPo=r(f9e," (DeBERTa-v2 model)"),f9e.forEach(t),FPo=i(K),qb=n(K,"LI",{});var m9e=s(qb);bme=n(m9e,"STRONG",{});var ydt=s(bme);TPo=r(ydt,"distilbert"),ydt.forEach(t),MPo=r(m9e," \u2014 "),XG=n(m9e,"A",{href:!0});var Ldt=s(XG);EPo=r(Ldt,"DistilBertForMultipleChoice"),Ldt.forEach(t),CPo=r(m9e," (DistilBERT model)"),m9e.forEach(t),wPo=i(K),Nb=n(K,"LI",{});var g9e=s(Nb);vme=n(g9e,"STRONG",{});var xdt=s(vme);APo=r(xdt,"electra"),xdt.forEach(t),yPo=r(g9e," \u2014 "),zG=n(g9e,"A",{href:!0});var $dt=s(zG);LPo=r($dt,"ElectraForMultipleChoice"),$dt.forEach(t),xPo=r(g9e," (ELECTRA model)"),g9e.forEach(t),$Po=i(K),jb=n(K,"LI",{});var h9e=s(jb);Fme=n(h9e,"STRONG",{});var kdt=s(Fme);kPo=r(kdt,"flaubert"),kdt.forEach(t),SPo=r(h9e," \u2014 "),WG=n(h9e,"A",{href:!0});var Sdt=s(WG);RPo=r(Sdt,"FlaubertForMultipleChoice"),Sdt.forEach(t),PPo=r(h9e," (FlauBERT model)"),h9e.forEach(t),BPo=i(K),Db=n(K,"LI",{});var p9e=s(Db);Tme=n(p9e,"STRONG",{});var Rdt=s(Tme);IPo=r(Rdt,"fnet"),Rdt.forEach(t),qPo=r(p9e," \u2014 "),QG=n(p9e,"A",{href:!0});var Pdt=s(QG);NPo=r(Pdt,"FNetForMultipleChoice"),Pdt.forEach(t),jPo=r(p9e," (FNet model)"),p9e.forEach(t),DPo=i(K),Gb=n(K,"LI",{});var u9e=s(Gb);Mme=n(u9e,"STRONG",{});var Bdt=s(Mme);GPo=r(Bdt,"funnel"),Bdt.forEach(t),OPo=r(u9e," \u2014 "),HG=n(u9e,"A",{href:!0});var Idt=s(HG);VPo=r(Idt,"FunnelForMultipleChoice"),Idt.forEach(t),XPo=r(u9e," (Funnel Transformer model)"),u9e.forEach(t),zPo=i(K),Ob=n(K,"LI",{});var _9e=s(Ob);Eme=n(_9e,"STRONG",{});var qdt=s(Eme);WPo=r(qdt,"ibert"),qdt.forEach(t),QPo=r(_9e," \u2014 "),UG=n(_9e,"A",{href:!0});var Ndt=s(UG);HPo=r(Ndt,"IBertForMultipleChoice"),Ndt.forEach(t),UPo=r(_9e," (I-BERT model)"),_9e.forEach(t),JPo=i(K),Vb=n(K,"LI",{});var b9e=s(Vb);Cme=n(b9e,"STRONG",{});var jdt=s(Cme);YPo=r(jdt,"longformer"),jdt.forEach(t),KPo=r(b9e," \u2014 "),JG=n(b9e,"A",{href:!0});var Ddt=s(JG);ZPo=r(Ddt,"LongformerForMultipleChoice"),Ddt.forEach(t),eBo=r(b9e," (Longformer model)"),b9e.forEach(t),oBo=i(K),Xb=n(K,"LI",{});var v9e=s(Xb);wme=n(v9e,"STRONG",{});var Gdt=s(wme);rBo=r(Gdt,"megatron-bert"),Gdt.forEach(t),tBo=r(v9e," \u2014 "),YG=n(v9e,"A",{href:!0});var Odt=s(YG);aBo=r(Odt,"MegatronBertForMultipleChoice"),Odt.forEach(t),nBo=r(v9e," (MegatronBert model)"),v9e.forEach(t),sBo=i(K),zb=n(K,"LI",{});var F9e=s(zb);Ame=n(F9e,"STRONG",{});var Vdt=s(Ame);lBo=r(Vdt,"mobilebert"),Vdt.forEach(t),iBo=r(F9e," \u2014 "),KG=n(F9e,"A",{href:!0});var Xdt=s(KG);dBo=r(Xdt,"MobileBertForMultipleChoice"),Xdt.forEach(t),cBo=r(F9e," (MobileBERT model)"),F9e.forEach(t),fBo=i(K),Wb=n(K,"LI",{});var T9e=s(Wb);yme=n(T9e,"STRONG",{});var zdt=s(yme);mBo=r(zdt,"mpnet"),zdt.forEach(t),gBo=r(T9e," \u2014 "),ZG=n(T9e,"A",{href:!0});var Wdt=s(ZG);hBo=r(Wdt,"MPNetForMultipleChoice"),Wdt.forEach(t),pBo=r(T9e," (MPNet model)"),T9e.forEach(t),uBo=i(K),Qb=n(K,"LI",{});var M9e=s(Qb);Lme=n(M9e,"STRONG",{});var Qdt=s(Lme);_Bo=r(Qdt,"nystromformer"),Qdt.forEach(t),bBo=r(M9e," \u2014 "),eO=n(M9e,"A",{href:!0});var Hdt=s(eO);vBo=r(Hdt,"NystromformerForMultipleChoice"),Hdt.forEach(t),FBo=r(M9e," (Nystromformer model)"),M9e.forEach(t),TBo=i(K),Hb=n(K,"LI",{});var E9e=s(Hb);xme=n(E9e,"STRONG",{});var Udt=s(xme);MBo=r(Udt,"qdqbert"),Udt.forEach(t),EBo=r(E9e," \u2014 "),oO=n(E9e,"A",{href:!0});var Jdt=s(oO);CBo=r(Jdt,"QDQBertForMultipleChoice"),Jdt.forEach(t),wBo=r(E9e," (QDQBert model)"),E9e.forEach(t),ABo=i(K),Ub=n(K,"LI",{});var C9e=s(Ub);$me=n(C9e,"STRONG",{});var Ydt=s($me);yBo=r(Ydt,"rembert"),Ydt.forEach(t),LBo=r(C9e," \u2014 "),rO=n(C9e,"A",{href:!0});var Kdt=s(rO);xBo=r(Kdt,"RemBertForMultipleChoice"),Kdt.forEach(t),$Bo=r(C9e," (RemBERT model)"),C9e.forEach(t),kBo=i(K),Jb=n(K,"LI",{});var w9e=s(Jb);kme=n(w9e,"STRONG",{});var Zdt=s(kme);SBo=r(Zdt,"roberta"),Zdt.forEach(t),RBo=r(w9e," \u2014 "),tO=n(w9e,"A",{href:!0});var ect=s(tO);PBo=r(ect,"RobertaForMultipleChoice"),ect.forEach(t),BBo=r(w9e," (RoBERTa model)"),w9e.forEach(t),IBo=i(K),Yb=n(K,"LI",{});var A9e=s(Yb);Sme=n(A9e,"STRONG",{});var oct=s(Sme);qBo=r(oct,"roformer"),oct.forEach(t),NBo=r(A9e," \u2014 "),aO=n(A9e,"A",{href:!0});var rct=s(aO);jBo=r(rct,"RoFormerForMultipleChoice"),rct.forEach(t),DBo=r(A9e," (RoFormer model)"),A9e.forEach(t),GBo=i(K),Kb=n(K,"LI",{});var y9e=s(Kb);Rme=n(y9e,"STRONG",{});var tct=s(Rme);OBo=r(tct,"squeezebert"),tct.forEach(t),VBo=r(y9e," \u2014 "),nO=n(y9e,"A",{href:!0});var act=s(nO);XBo=r(act,"SqueezeBertForMultipleChoice"),act.forEach(t),zBo=r(y9e," (SqueezeBERT model)"),y9e.forEach(t),WBo=i(K),Zb=n(K,"LI",{});var L9e=s(Zb);Pme=n(L9e,"STRONG",{});var nct=s(Pme);QBo=r(nct,"xlm"),nct.forEach(t),HBo=r(L9e," \u2014 "),sO=n(L9e,"A",{href:!0});var sct=s(sO);UBo=r(sct,"XLMForMultipleChoice"),sct.forEach(t),JBo=r(L9e," (XLM model)"),L9e.forEach(t),YBo=i(K),e2=n(K,"LI",{});var x9e=s(e2);Bme=n(x9e,"STRONG",{});var lct=s(Bme);KBo=r(lct,"xlm-roberta"),lct.forEach(t),ZBo=r(x9e," \u2014 "),lO=n(x9e,"A",{href:!0});var ict=s(lO);eIo=r(ict,"XLMRobertaForMultipleChoice"),ict.forEach(t),oIo=r(x9e," (XLM-RoBERTa model)"),x9e.forEach(t),rIo=i(K),o2=n(K,"LI",{});var $9e=s(o2);Ime=n($9e,"STRONG",{});var dct=s(Ime);tIo=r(dct,"xlm-roberta-xl"),dct.forEach(t),aIo=r($9e," \u2014 "),iO=n($9e,"A",{href:!0});var cct=s(iO);nIo=r(cct,"XLMRobertaXLForMultipleChoice"),cct.forEach(t),sIo=r($9e," (XLM-RoBERTa-XL model)"),$9e.forEach(t),lIo=i(K),r2=n(K,"LI",{});var k9e=s(r2);qme=n(k9e,"STRONG",{});var fct=s(qme);iIo=r(fct,"xlnet"),fct.forEach(t),dIo=r(k9e," \u2014 "),dO=n(k9e,"A",{href:!0});var mct=s(dO);cIo=r(mct,"XLNetForMultipleChoice"),mct.forEach(t),fIo=r(k9e," (XLNet model)"),k9e.forEach(t),mIo=i(K),t2=n(K,"LI",{});var S9e=s(t2);Nme=n(S9e,"STRONG",{});var gct=s(Nme);gIo=r(gct,"yoso"),gct.forEach(t),hIo=r(S9e," \u2014 "),cO=n(S9e,"A",{href:!0});var hct=s(cO);pIo=r(hct,"YosoForMultipleChoice"),hct.forEach(t),uIo=r(S9e," (YOSO model)"),S9e.forEach(t),K.forEach(t),_Io=i(la),a2=n(la,"P",{});var R9e=s(a2);bIo=r(R9e,"The model is set in evaluation mode by default using "),jme=n(R9e,"CODE",{});var pct=s(jme);vIo=r(pct,"model.eval()"),pct.forEach(t),FIo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(R9e,"CODE",{});var uct=s(Dme);TIo=r(uct,"model.train()"),uct.forEach(t),R9e.forEach(t),MIo=i(la),T(n2.$$.fragment,la),la.forEach(t),Qs.forEach(t),kqe=i(f),Wi=n(f,"H2",{class:!0});var Bje=s(Wi);s2=n(Bje,"A",{id:!0,class:!0,href:!0});var _ct=s(s2);Gme=n(_ct,"SPAN",{});var bct=s(Gme);T(My.$$.fragment,bct),bct.forEach(t),_ct.forEach(t),EIo=i(Bje),Ome=n(Bje,"SPAN",{});var vct=s(Ome);CIo=r(vct,"AutoModelForNextSentencePrediction"),vct.forEach(t),Bje.forEach(t),Sqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Ey.$$.fragment,Hs),wIo=i(Hs),Qi=n(Hs,"P",{});var nZ=s(Qi);AIo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fO=n(nZ,"A",{href:!0});var Fct=s(fO);yIo=r(Fct,"from_pretrained()"),Fct.forEach(t),LIo=r(nZ," class method or the "),mO=n(nZ,"A",{href:!0});var Tct=s(mO);xIo=r(Tct,"from_config()"),Tct.forEach(t),$Io=r(nZ,` class
method.`),nZ.forEach(t),kIo=i(Hs),Cy=n(Hs,"P",{});var Ije=s(Cy);SIo=r(Ije,"This class cannot be instantiated directly using "),Vme=n(Ije,"CODE",{});var Mct=s(Vme);RIo=r(Mct,"__init__()"),Mct.forEach(t),PIo=r(Ije," (throws an error)."),Ije.forEach(t),BIo=i(Hs),ct=n(Hs,"DIV",{class:!0});var R3=s(ct);T(wy.$$.fragment,R3),IIo=i(R3),Xme=n(R3,"P",{});var Ect=s(Xme);qIo=r(Ect,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ect.forEach(t),NIo=i(R3),Hi=n(R3,"P",{});var sZ=s(Hi);jIo=r(sZ,`Note:
Loading a model from its configuration file does `),zme=n(sZ,"STRONG",{});var Cct=s(zme);DIo=r(Cct,"not"),Cct.forEach(t),GIo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(sZ,"A",{href:!0});var wct=s(gO);OIo=r(wct,"from_pretrained()"),wct.forEach(t),VIo=r(sZ," to load the model weights."),sZ.forEach(t),XIo=i(R3),T(l2.$$.fragment,R3),R3.forEach(t),zIo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Ay.$$.fragment,ia),WIo=i(ia),Wme=n(ia,"P",{});var Act=s(Wme);QIo=r(Act,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Act.forEach(t),HIo=i(ia),Ba=n(ia,"P",{});var P3=s(Ba);UIo=r(P3,"The model class to instantiate is selected based on the "),Qme=n(P3,"CODE",{});var yct=s(Qme);JIo=r(yct,"model_type"),yct.forEach(t),YIo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Hme=n(P3,"CODE",{});var Lct=s(Hme);KIo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),ZIo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(P3,"CODE",{});var xct=s(Ume);eqo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),oqo=r(P3,":"),P3.forEach(t),rqo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);i2=n(Us,"LI",{});var P9e=s(i2);Jme=n(P9e,"STRONG",{});var $ct=s(Jme);tqo=r($ct,"bert"),$ct.forEach(t),aqo=r(P9e," \u2014 "),hO=n(P9e,"A",{href:!0});var kct=s(hO);nqo=r(kct,"BertForNextSentencePrediction"),kct.forEach(t),sqo=r(P9e," (BERT model)"),P9e.forEach(t),lqo=i(Us),d2=n(Us,"LI",{});var B9e=s(d2);Yme=n(B9e,"STRONG",{});var Sct=s(Yme);iqo=r(Sct,"fnet"),Sct.forEach(t),dqo=r(B9e," \u2014 "),pO=n(B9e,"A",{href:!0});var Rct=s(pO);cqo=r(Rct,"FNetForNextSentencePrediction"),Rct.forEach(t),fqo=r(B9e," (FNet model)"),B9e.forEach(t),mqo=i(Us),c2=n(Us,"LI",{});var I9e=s(c2);Kme=n(I9e,"STRONG",{});var Pct=s(Kme);gqo=r(Pct,"megatron-bert"),Pct.forEach(t),hqo=r(I9e," \u2014 "),uO=n(I9e,"A",{href:!0});var Bct=s(uO);pqo=r(Bct,"MegatronBertForNextSentencePrediction"),Bct.forEach(t),uqo=r(I9e," (MegatronBert model)"),I9e.forEach(t),_qo=i(Us),f2=n(Us,"LI",{});var q9e=s(f2);Zme=n(q9e,"STRONG",{});var Ict=s(Zme);bqo=r(Ict,"mobilebert"),Ict.forEach(t),vqo=r(q9e," \u2014 "),_O=n(q9e,"A",{href:!0});var qct=s(_O);Fqo=r(qct,"MobileBertForNextSentencePrediction"),qct.forEach(t),Tqo=r(q9e," (MobileBERT model)"),q9e.forEach(t),Mqo=i(Us),m2=n(Us,"LI",{});var N9e=s(m2);ege=n(N9e,"STRONG",{});var Nct=s(ege);Eqo=r(Nct,"qdqbert"),Nct.forEach(t),Cqo=r(N9e," \u2014 "),bO=n(N9e,"A",{href:!0});var jct=s(bO);wqo=r(jct,"QDQBertForNextSentencePrediction"),jct.forEach(t),Aqo=r(N9e," (QDQBert model)"),N9e.forEach(t),Us.forEach(t),yqo=i(ia),g2=n(ia,"P",{});var j9e=s(g2);Lqo=r(j9e,"The model is set in evaluation mode by default using "),oge=n(j9e,"CODE",{});var Dct=s(oge);xqo=r(Dct,"model.eval()"),Dct.forEach(t),$qo=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=n(j9e,"CODE",{});var Gct=s(rge);kqo=r(Gct,"model.train()"),Gct.forEach(t),j9e.forEach(t),Sqo=i(ia),T(h2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Rqe=i(f),Ui=n(f,"H2",{class:!0});var qje=s(Ui);p2=n(qje,"A",{id:!0,class:!0,href:!0});var Oct=s(p2);tge=n(Oct,"SPAN",{});var Vct=s(tge);T(yy.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),Rqo=i(qje),age=n(qje,"SPAN",{});var Xct=s(age);Pqo=r(Xct,"AutoModelForTokenClassification"),Xct.forEach(t),qje.forEach(t),Pqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Ly.$$.fragment,Js),Bqo=i(Js),Ji=n(Js,"P",{});var lZ=s(Ji);Iqo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vO=n(lZ,"A",{href:!0});var zct=s(vO);qqo=r(zct,"from_pretrained()"),zct.forEach(t),Nqo=r(lZ," class method or the "),FO=n(lZ,"A",{href:!0});var Wct=s(FO);jqo=r(Wct,"from_config()"),Wct.forEach(t),Dqo=r(lZ,` class
method.`),lZ.forEach(t),Gqo=i(Js),xy=n(Js,"P",{});var Nje=s(xy);Oqo=r(Nje,"This class cannot be instantiated directly using "),nge=n(Nje,"CODE",{});var Qct=s(nge);Vqo=r(Qct,"__init__()"),Qct.forEach(t),Xqo=r(Nje," (throws an error)."),Nje.forEach(t),zqo=i(Js),ft=n(Js,"DIV",{class:!0});var B3=s(ft);T($y.$$.fragment,B3),Wqo=i(B3),sge=n(B3,"P",{});var Hct=s(sge);Qqo=r(Hct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hct.forEach(t),Hqo=i(B3),Yi=n(B3,"P",{});var iZ=s(Yi);Uqo=r(iZ,`Note:
Loading a model from its configuration file does `),lge=n(iZ,"STRONG",{});var Uct=s(lge);Jqo=r(Uct,"not"),Uct.forEach(t),Yqo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(iZ,"A",{href:!0});var Jct=s(TO);Kqo=r(Jct,"from_pretrained()"),Jct.forEach(t),Zqo=r(iZ," to load the model weights."),iZ.forEach(t),eNo=i(B3),T(u2.$$.fragment,B3),B3.forEach(t),oNo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(ky.$$.fragment,da),rNo=i(da),ige=n(da,"P",{});var Yct=s(ige);tNo=r(Yct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yct.forEach(t),aNo=i(da),Ia=n(da,"P",{});var I3=s(Ia);nNo=r(I3,"The model class to instantiate is selected based on the "),dge=n(I3,"CODE",{});var Kct=s(dge);sNo=r(Kct,"model_type"),Kct.forEach(t),lNo=r(I3,` property of the config object (either
passed as an argument or loaded from `),cge=n(I3,"CODE",{});var Zct=s(cge);iNo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),dNo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(I3,"CODE",{});var eft=s(fge);cNo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),fNo=r(I3,":"),I3.forEach(t),mNo=i(da),H=n(da,"UL",{});var J=s(H);_2=n(J,"LI",{});var D9e=s(_2);mge=n(D9e,"STRONG",{});var oft=s(mge);gNo=r(oft,"albert"),oft.forEach(t),hNo=r(D9e," \u2014 "),MO=n(D9e,"A",{href:!0});var rft=s(MO);pNo=r(rft,"AlbertForTokenClassification"),rft.forEach(t),uNo=r(D9e," (ALBERT model)"),D9e.forEach(t),_No=i(J),b2=n(J,"LI",{});var G9e=s(b2);gge=n(G9e,"STRONG",{});var tft=s(gge);bNo=r(tft,"bert"),tft.forEach(t),vNo=r(G9e," \u2014 "),EO=n(G9e,"A",{href:!0});var aft=s(EO);FNo=r(aft,"BertForTokenClassification"),aft.forEach(t),TNo=r(G9e," (BERT model)"),G9e.forEach(t),MNo=i(J),v2=n(J,"LI",{});var O9e=s(v2);hge=n(O9e,"STRONG",{});var nft=s(hge);ENo=r(nft,"big_bird"),nft.forEach(t),CNo=r(O9e," \u2014 "),CO=n(O9e,"A",{href:!0});var sft=s(CO);wNo=r(sft,"BigBirdForTokenClassification"),sft.forEach(t),ANo=r(O9e," (BigBird model)"),O9e.forEach(t),yNo=i(J),F2=n(J,"LI",{});var V9e=s(F2);pge=n(V9e,"STRONG",{});var lft=s(pge);LNo=r(lft,"camembert"),lft.forEach(t),xNo=r(V9e," \u2014 "),wO=n(V9e,"A",{href:!0});var ift=s(wO);$No=r(ift,"CamembertForTokenClassification"),ift.forEach(t),kNo=r(V9e," (CamemBERT model)"),V9e.forEach(t),SNo=i(J),T2=n(J,"LI",{});var X9e=s(T2);uge=n(X9e,"STRONG",{});var dft=s(uge);RNo=r(dft,"canine"),dft.forEach(t),PNo=r(X9e," \u2014 "),AO=n(X9e,"A",{href:!0});var cft=s(AO);BNo=r(cft,"CanineForTokenClassification"),cft.forEach(t),INo=r(X9e," (Canine model)"),X9e.forEach(t),qNo=i(J),M2=n(J,"LI",{});var z9e=s(M2);_ge=n(z9e,"STRONG",{});var fft=s(_ge);NNo=r(fft,"convbert"),fft.forEach(t),jNo=r(z9e," \u2014 "),yO=n(z9e,"A",{href:!0});var mft=s(yO);DNo=r(mft,"ConvBertForTokenClassification"),mft.forEach(t),GNo=r(z9e," (ConvBERT model)"),z9e.forEach(t),ONo=i(J),E2=n(J,"LI",{});var W9e=s(E2);bge=n(W9e,"STRONG",{});var gft=s(bge);VNo=r(gft,"data2vec-text"),gft.forEach(t),XNo=r(W9e," \u2014 "),LO=n(W9e,"A",{href:!0});var hft=s(LO);zNo=r(hft,"Data2VecTextForTokenClassification"),hft.forEach(t),WNo=r(W9e," (Data2VecText model)"),W9e.forEach(t),QNo=i(J),C2=n(J,"LI",{});var Q9e=s(C2);vge=n(Q9e,"STRONG",{});var pft=s(vge);HNo=r(pft,"deberta"),pft.forEach(t),UNo=r(Q9e," \u2014 "),xO=n(Q9e,"A",{href:!0});var uft=s(xO);JNo=r(uft,"DebertaForTokenClassification"),uft.forEach(t),YNo=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),KNo=i(J),w2=n(J,"LI",{});var H9e=s(w2);Fge=n(H9e,"STRONG",{});var _ft=s(Fge);ZNo=r(_ft,"deberta-v2"),_ft.forEach(t),ejo=r(H9e," \u2014 "),$O=n(H9e,"A",{href:!0});var bft=s($O);ojo=r(bft,"DebertaV2ForTokenClassification"),bft.forEach(t),rjo=r(H9e," (DeBERTa-v2 model)"),H9e.forEach(t),tjo=i(J),A2=n(J,"LI",{});var U9e=s(A2);Tge=n(U9e,"STRONG",{});var vft=s(Tge);ajo=r(vft,"distilbert"),vft.forEach(t),njo=r(U9e," \u2014 "),kO=n(U9e,"A",{href:!0});var Fft=s(kO);sjo=r(Fft,"DistilBertForTokenClassification"),Fft.forEach(t),ljo=r(U9e," (DistilBERT model)"),U9e.forEach(t),ijo=i(J),y2=n(J,"LI",{});var J9e=s(y2);Mge=n(J9e,"STRONG",{});var Tft=s(Mge);djo=r(Tft,"electra"),Tft.forEach(t),cjo=r(J9e," \u2014 "),SO=n(J9e,"A",{href:!0});var Mft=s(SO);fjo=r(Mft,"ElectraForTokenClassification"),Mft.forEach(t),mjo=r(J9e," (ELECTRA model)"),J9e.forEach(t),gjo=i(J),L2=n(J,"LI",{});var Y9e=s(L2);Ege=n(Y9e,"STRONG",{});var Eft=s(Ege);hjo=r(Eft,"flaubert"),Eft.forEach(t),pjo=r(Y9e," \u2014 "),RO=n(Y9e,"A",{href:!0});var Cft=s(RO);ujo=r(Cft,"FlaubertForTokenClassification"),Cft.forEach(t),_jo=r(Y9e," (FlauBERT model)"),Y9e.forEach(t),bjo=i(J),x2=n(J,"LI",{});var K9e=s(x2);Cge=n(K9e,"STRONG",{});var wft=s(Cge);vjo=r(wft,"fnet"),wft.forEach(t),Fjo=r(K9e," \u2014 "),PO=n(K9e,"A",{href:!0});var Aft=s(PO);Tjo=r(Aft,"FNetForTokenClassification"),Aft.forEach(t),Mjo=r(K9e," (FNet model)"),K9e.forEach(t),Ejo=i(J),$2=n(J,"LI",{});var Z9e=s($2);wge=n(Z9e,"STRONG",{});var yft=s(wge);Cjo=r(yft,"funnel"),yft.forEach(t),wjo=r(Z9e," \u2014 "),BO=n(Z9e,"A",{href:!0});var Lft=s(BO);Ajo=r(Lft,"FunnelForTokenClassification"),Lft.forEach(t),yjo=r(Z9e," (Funnel Transformer model)"),Z9e.forEach(t),Ljo=i(J),k2=n(J,"LI",{});var exe=s(k2);Age=n(exe,"STRONG",{});var xft=s(Age);xjo=r(xft,"gpt2"),xft.forEach(t),$jo=r(exe," \u2014 "),IO=n(exe,"A",{href:!0});var $ft=s(IO);kjo=r($ft,"GPT2ForTokenClassification"),$ft.forEach(t),Sjo=r(exe," (OpenAI GPT-2 model)"),exe.forEach(t),Rjo=i(J),S2=n(J,"LI",{});var oxe=s(S2);yge=n(oxe,"STRONG",{});var kft=s(yge);Pjo=r(kft,"ibert"),kft.forEach(t),Bjo=r(oxe," \u2014 "),qO=n(oxe,"A",{href:!0});var Sft=s(qO);Ijo=r(Sft,"IBertForTokenClassification"),Sft.forEach(t),qjo=r(oxe," (I-BERT model)"),oxe.forEach(t),Njo=i(J),R2=n(J,"LI",{});var rxe=s(R2);Lge=n(rxe,"STRONG",{});var Rft=s(Lge);jjo=r(Rft,"layoutlm"),Rft.forEach(t),Djo=r(rxe," \u2014 "),NO=n(rxe,"A",{href:!0});var Pft=s(NO);Gjo=r(Pft,"LayoutLMForTokenClassification"),Pft.forEach(t),Ojo=r(rxe," (LayoutLM model)"),rxe.forEach(t),Vjo=i(J),P2=n(J,"LI",{});var txe=s(P2);xge=n(txe,"STRONG",{});var Bft=s(xge);Xjo=r(Bft,"layoutlmv2"),Bft.forEach(t),zjo=r(txe," \u2014 "),jO=n(txe,"A",{href:!0});var Ift=s(jO);Wjo=r(Ift,"LayoutLMv2ForTokenClassification"),Ift.forEach(t),Qjo=r(txe," (LayoutLMv2 model)"),txe.forEach(t),Hjo=i(J),B2=n(J,"LI",{});var axe=s(B2);$ge=n(axe,"STRONG",{});var qft=s($ge);Ujo=r(qft,"layoutlmv3"),qft.forEach(t),Jjo=r(axe," \u2014 "),DO=n(axe,"A",{href:!0});var Nft=s(DO);Yjo=r(Nft,"LayoutLMv3ForTokenClassification"),Nft.forEach(t),Kjo=r(axe," (LayoutLMv3 model)"),axe.forEach(t),Zjo=i(J),I2=n(J,"LI",{});var nxe=s(I2);kge=n(nxe,"STRONG",{});var jft=s(kge);eDo=r(jft,"longformer"),jft.forEach(t),oDo=r(nxe," \u2014 "),GO=n(nxe,"A",{href:!0});var Dft=s(GO);rDo=r(Dft,"LongformerForTokenClassification"),Dft.forEach(t),tDo=r(nxe," (Longformer model)"),nxe.forEach(t),aDo=i(J),q2=n(J,"LI",{});var sxe=s(q2);Sge=n(sxe,"STRONG",{});var Gft=s(Sge);nDo=r(Gft,"megatron-bert"),Gft.forEach(t),sDo=r(sxe," \u2014 "),OO=n(sxe,"A",{href:!0});var Oft=s(OO);lDo=r(Oft,"MegatronBertForTokenClassification"),Oft.forEach(t),iDo=r(sxe," (MegatronBert model)"),sxe.forEach(t),dDo=i(J),N2=n(J,"LI",{});var lxe=s(N2);Rge=n(lxe,"STRONG",{});var Vft=s(Rge);cDo=r(Vft,"mobilebert"),Vft.forEach(t),fDo=r(lxe," \u2014 "),VO=n(lxe,"A",{href:!0});var Xft=s(VO);mDo=r(Xft,"MobileBertForTokenClassification"),Xft.forEach(t),gDo=r(lxe," (MobileBERT model)"),lxe.forEach(t),hDo=i(J),j2=n(J,"LI",{});var ixe=s(j2);Pge=n(ixe,"STRONG",{});var zft=s(Pge);pDo=r(zft,"mpnet"),zft.forEach(t),uDo=r(ixe," \u2014 "),XO=n(ixe,"A",{href:!0});var Wft=s(XO);_Do=r(Wft,"MPNetForTokenClassification"),Wft.forEach(t),bDo=r(ixe," (MPNet model)"),ixe.forEach(t),vDo=i(J),D2=n(J,"LI",{});var dxe=s(D2);Bge=n(dxe,"STRONG",{});var Qft=s(Bge);FDo=r(Qft,"nystromformer"),Qft.forEach(t),TDo=r(dxe," \u2014 "),zO=n(dxe,"A",{href:!0});var Hft=s(zO);MDo=r(Hft,"NystromformerForTokenClassification"),Hft.forEach(t),EDo=r(dxe," (Nystromformer model)"),dxe.forEach(t),CDo=i(J),G2=n(J,"LI",{});var cxe=s(G2);Ige=n(cxe,"STRONG",{});var Uft=s(Ige);wDo=r(Uft,"qdqbert"),Uft.forEach(t),ADo=r(cxe," \u2014 "),WO=n(cxe,"A",{href:!0});var Jft=s(WO);yDo=r(Jft,"QDQBertForTokenClassification"),Jft.forEach(t),LDo=r(cxe," (QDQBert model)"),cxe.forEach(t),xDo=i(J),O2=n(J,"LI",{});var fxe=s(O2);qge=n(fxe,"STRONG",{});var Yft=s(qge);$Do=r(Yft,"rembert"),Yft.forEach(t),kDo=r(fxe," \u2014 "),QO=n(fxe,"A",{href:!0});var Kft=s(QO);SDo=r(Kft,"RemBertForTokenClassification"),Kft.forEach(t),RDo=r(fxe," (RemBERT model)"),fxe.forEach(t),PDo=i(J),V2=n(J,"LI",{});var mxe=s(V2);Nge=n(mxe,"STRONG",{});var Zft=s(Nge);BDo=r(Zft,"roberta"),Zft.forEach(t),IDo=r(mxe," \u2014 "),HO=n(mxe,"A",{href:!0});var emt=s(HO);qDo=r(emt,"RobertaForTokenClassification"),emt.forEach(t),NDo=r(mxe," (RoBERTa model)"),mxe.forEach(t),jDo=i(J),X2=n(J,"LI",{});var gxe=s(X2);jge=n(gxe,"STRONG",{});var omt=s(jge);DDo=r(omt,"roformer"),omt.forEach(t),GDo=r(gxe," \u2014 "),UO=n(gxe,"A",{href:!0});var rmt=s(UO);ODo=r(rmt,"RoFormerForTokenClassification"),rmt.forEach(t),VDo=r(gxe," (RoFormer model)"),gxe.forEach(t),XDo=i(J),z2=n(J,"LI",{});var hxe=s(z2);Dge=n(hxe,"STRONG",{});var tmt=s(Dge);zDo=r(tmt,"squeezebert"),tmt.forEach(t),WDo=r(hxe," \u2014 "),JO=n(hxe,"A",{href:!0});var amt=s(JO);QDo=r(amt,"SqueezeBertForTokenClassification"),amt.forEach(t),HDo=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),UDo=i(J),W2=n(J,"LI",{});var pxe=s(W2);Gge=n(pxe,"STRONG",{});var nmt=s(Gge);JDo=r(nmt,"xlm"),nmt.forEach(t),YDo=r(pxe," \u2014 "),YO=n(pxe,"A",{href:!0});var smt=s(YO);KDo=r(smt,"XLMForTokenClassification"),smt.forEach(t),ZDo=r(pxe," (XLM model)"),pxe.forEach(t),eGo=i(J),Q2=n(J,"LI",{});var uxe=s(Q2);Oge=n(uxe,"STRONG",{});var lmt=s(Oge);oGo=r(lmt,"xlm-roberta"),lmt.forEach(t),rGo=r(uxe," \u2014 "),KO=n(uxe,"A",{href:!0});var imt=s(KO);tGo=r(imt,"XLMRobertaForTokenClassification"),imt.forEach(t),aGo=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),nGo=i(J),H2=n(J,"LI",{});var _xe=s(H2);Vge=n(_xe,"STRONG",{});var dmt=s(Vge);sGo=r(dmt,"xlm-roberta-xl"),dmt.forEach(t),lGo=r(_xe," \u2014 "),ZO=n(_xe,"A",{href:!0});var cmt=s(ZO);iGo=r(cmt,"XLMRobertaXLForTokenClassification"),cmt.forEach(t),dGo=r(_xe," (XLM-RoBERTa-XL model)"),_xe.forEach(t),cGo=i(J),U2=n(J,"LI",{});var bxe=s(U2);Xge=n(bxe,"STRONG",{});var fmt=s(Xge);fGo=r(fmt,"xlnet"),fmt.forEach(t),mGo=r(bxe," \u2014 "),eV=n(bxe,"A",{href:!0});var mmt=s(eV);gGo=r(mmt,"XLNetForTokenClassification"),mmt.forEach(t),hGo=r(bxe," (XLNet model)"),bxe.forEach(t),pGo=i(J),J2=n(J,"LI",{});var vxe=s(J2);zge=n(vxe,"STRONG",{});var gmt=s(zge);uGo=r(gmt,"yoso"),gmt.forEach(t),_Go=r(vxe," \u2014 "),oV=n(vxe,"A",{href:!0});var hmt=s(oV);bGo=r(hmt,"YosoForTokenClassification"),hmt.forEach(t),vGo=r(vxe," (YOSO model)"),vxe.forEach(t),J.forEach(t),FGo=i(da),Y2=n(da,"P",{});var Fxe=s(Y2);TGo=r(Fxe,"The model is set in evaluation mode by default using "),Wge=n(Fxe,"CODE",{});var pmt=s(Wge);MGo=r(pmt,"model.eval()"),pmt.forEach(t),EGo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(Fxe,"CODE",{});var umt=s(Qge);CGo=r(umt,"model.train()"),umt.forEach(t),Fxe.forEach(t),wGo=i(da),T(K2.$$.fragment,da),da.forEach(t),Js.forEach(t),Bqe=i(f),Ki=n(f,"H2",{class:!0});var jje=s(Ki);Z2=n(jje,"A",{id:!0,class:!0,href:!0});var _mt=s(Z2);Hge=n(_mt,"SPAN",{});var bmt=s(Hge);T(Sy.$$.fragment,bmt),bmt.forEach(t),_mt.forEach(t),AGo=i(jje),Uge=n(jje,"SPAN",{});var vmt=s(Uge);yGo=r(vmt,"AutoModelForQuestionAnswering"),vmt.forEach(t),jje.forEach(t),Iqe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(Ry.$$.fragment,Ys),LGo=i(Ys),Zi=n(Ys,"P",{});var dZ=s(Zi);xGo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rV=n(dZ,"A",{href:!0});var Fmt=s(rV);$Go=r(Fmt,"from_pretrained()"),Fmt.forEach(t),kGo=r(dZ," class method or the "),tV=n(dZ,"A",{href:!0});var Tmt=s(tV);SGo=r(Tmt,"from_config()"),Tmt.forEach(t),RGo=r(dZ,` class
method.`),dZ.forEach(t),PGo=i(Ys),Py=n(Ys,"P",{});var Dje=s(Py);BGo=r(Dje,"This class cannot be instantiated directly using "),Jge=n(Dje,"CODE",{});var Mmt=s(Jge);IGo=r(Mmt,"__init__()"),Mmt.forEach(t),qGo=r(Dje," (throws an error)."),Dje.forEach(t),NGo=i(Ys),mt=n(Ys,"DIV",{class:!0});var q3=s(mt);T(By.$$.fragment,q3),jGo=i(q3),Yge=n(q3,"P",{});var Emt=s(Yge);DGo=r(Emt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Emt.forEach(t),GGo=i(q3),ed=n(q3,"P",{});var cZ=s(ed);OGo=r(cZ,`Note:
Loading a model from its configuration file does `),Kge=n(cZ,"STRONG",{});var Cmt=s(Kge);VGo=r(Cmt,"not"),Cmt.forEach(t),XGo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(cZ,"A",{href:!0});var wmt=s(aV);zGo=r(wmt,"from_pretrained()"),wmt.forEach(t),WGo=r(cZ," to load the model weights."),cZ.forEach(t),QGo=i(q3),T(ev.$$.fragment,q3),q3.forEach(t),HGo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Iy.$$.fragment,ca),UGo=i(ca),Zge=n(ca,"P",{});var Amt=s(Zge);JGo=r(Amt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Amt.forEach(t),YGo=i(ca),qa=n(ca,"P",{});var N3=s(qa);KGo=r(N3,"The model class to instantiate is selected based on the "),ehe=n(N3,"CODE",{});var ymt=s(ehe);ZGo=r(ymt,"model_type"),ymt.forEach(t),eOo=r(N3,` property of the config object (either
passed as an argument or loaded from `),ohe=n(N3,"CODE",{});var Lmt=s(ohe);oOo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),rOo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(N3,"CODE",{});var xmt=s(rhe);tOo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),aOo=r(N3,":"),N3.forEach(t),nOo=i(ca),O=n(ca,"UL",{});var X=s(O);ov=n(X,"LI",{});var Txe=s(ov);the=n(Txe,"STRONG",{});var $mt=s(the);sOo=r($mt,"albert"),$mt.forEach(t),lOo=r(Txe," \u2014 "),nV=n(Txe,"A",{href:!0});var kmt=s(nV);iOo=r(kmt,"AlbertForQuestionAnswering"),kmt.forEach(t),dOo=r(Txe," (ALBERT model)"),Txe.forEach(t),cOo=i(X),rv=n(X,"LI",{});var Mxe=s(rv);ahe=n(Mxe,"STRONG",{});var Smt=s(ahe);fOo=r(Smt,"bart"),Smt.forEach(t),mOo=r(Mxe," \u2014 "),sV=n(Mxe,"A",{href:!0});var Rmt=s(sV);gOo=r(Rmt,"BartForQuestionAnswering"),Rmt.forEach(t),hOo=r(Mxe," (BART model)"),Mxe.forEach(t),pOo=i(X),tv=n(X,"LI",{});var Exe=s(tv);nhe=n(Exe,"STRONG",{});var Pmt=s(nhe);uOo=r(Pmt,"bert"),Pmt.forEach(t),_Oo=r(Exe," \u2014 "),lV=n(Exe,"A",{href:!0});var Bmt=s(lV);bOo=r(Bmt,"BertForQuestionAnswering"),Bmt.forEach(t),vOo=r(Exe," (BERT model)"),Exe.forEach(t),FOo=i(X),av=n(X,"LI",{});var Cxe=s(av);she=n(Cxe,"STRONG",{});var Imt=s(she);TOo=r(Imt,"big_bird"),Imt.forEach(t),MOo=r(Cxe," \u2014 "),iV=n(Cxe,"A",{href:!0});var qmt=s(iV);EOo=r(qmt,"BigBirdForQuestionAnswering"),qmt.forEach(t),COo=r(Cxe," (BigBird model)"),Cxe.forEach(t),wOo=i(X),nv=n(X,"LI",{});var wxe=s(nv);lhe=n(wxe,"STRONG",{});var Nmt=s(lhe);AOo=r(Nmt,"bigbird_pegasus"),Nmt.forEach(t),yOo=r(wxe," \u2014 "),dV=n(wxe,"A",{href:!0});var jmt=s(dV);LOo=r(jmt,"BigBirdPegasusForQuestionAnswering"),jmt.forEach(t),xOo=r(wxe," (BigBirdPegasus model)"),wxe.forEach(t),$Oo=i(X),sv=n(X,"LI",{});var Axe=s(sv);ihe=n(Axe,"STRONG",{});var Dmt=s(ihe);kOo=r(Dmt,"camembert"),Dmt.forEach(t),SOo=r(Axe," \u2014 "),cV=n(Axe,"A",{href:!0});var Gmt=s(cV);ROo=r(Gmt,"CamembertForQuestionAnswering"),Gmt.forEach(t),POo=r(Axe," (CamemBERT model)"),Axe.forEach(t),BOo=i(X),lv=n(X,"LI",{});var yxe=s(lv);dhe=n(yxe,"STRONG",{});var Omt=s(dhe);IOo=r(Omt,"canine"),Omt.forEach(t),qOo=r(yxe," \u2014 "),fV=n(yxe,"A",{href:!0});var Vmt=s(fV);NOo=r(Vmt,"CanineForQuestionAnswering"),Vmt.forEach(t),jOo=r(yxe," (Canine model)"),yxe.forEach(t),DOo=i(X),iv=n(X,"LI",{});var Lxe=s(iv);che=n(Lxe,"STRONG",{});var Xmt=s(che);GOo=r(Xmt,"convbert"),Xmt.forEach(t),OOo=r(Lxe," \u2014 "),mV=n(Lxe,"A",{href:!0});var zmt=s(mV);VOo=r(zmt,"ConvBertForQuestionAnswering"),zmt.forEach(t),XOo=r(Lxe," (ConvBERT model)"),Lxe.forEach(t),zOo=i(X),dv=n(X,"LI",{});var xxe=s(dv);fhe=n(xxe,"STRONG",{});var Wmt=s(fhe);WOo=r(Wmt,"data2vec-text"),Wmt.forEach(t),QOo=r(xxe," \u2014 "),gV=n(xxe,"A",{href:!0});var Qmt=s(gV);HOo=r(Qmt,"Data2VecTextForQuestionAnswering"),Qmt.forEach(t),UOo=r(xxe," (Data2VecText model)"),xxe.forEach(t),JOo=i(X),cv=n(X,"LI",{});var $xe=s(cv);mhe=n($xe,"STRONG",{});var Hmt=s(mhe);YOo=r(Hmt,"deberta"),Hmt.forEach(t),KOo=r($xe," \u2014 "),hV=n($xe,"A",{href:!0});var Umt=s(hV);ZOo=r(Umt,"DebertaForQuestionAnswering"),Umt.forEach(t),eVo=r($xe," (DeBERTa model)"),$xe.forEach(t),oVo=i(X),fv=n(X,"LI",{});var kxe=s(fv);ghe=n(kxe,"STRONG",{});var Jmt=s(ghe);rVo=r(Jmt,"deberta-v2"),Jmt.forEach(t),tVo=r(kxe," \u2014 "),pV=n(kxe,"A",{href:!0});var Ymt=s(pV);aVo=r(Ymt,"DebertaV2ForQuestionAnswering"),Ymt.forEach(t),nVo=r(kxe," (DeBERTa-v2 model)"),kxe.forEach(t),sVo=i(X),mv=n(X,"LI",{});var Sxe=s(mv);hhe=n(Sxe,"STRONG",{});var Kmt=s(hhe);lVo=r(Kmt,"distilbert"),Kmt.forEach(t),iVo=r(Sxe," \u2014 "),uV=n(Sxe,"A",{href:!0});var Zmt=s(uV);dVo=r(Zmt,"DistilBertForQuestionAnswering"),Zmt.forEach(t),cVo=r(Sxe," (DistilBERT model)"),Sxe.forEach(t),fVo=i(X),gv=n(X,"LI",{});var Rxe=s(gv);phe=n(Rxe,"STRONG",{});var egt=s(phe);mVo=r(egt,"electra"),egt.forEach(t),gVo=r(Rxe," \u2014 "),_V=n(Rxe,"A",{href:!0});var ogt=s(_V);hVo=r(ogt,"ElectraForQuestionAnswering"),ogt.forEach(t),pVo=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),uVo=i(X),hv=n(X,"LI",{});var Pxe=s(hv);uhe=n(Pxe,"STRONG",{});var rgt=s(uhe);_Vo=r(rgt,"flaubert"),rgt.forEach(t),bVo=r(Pxe," \u2014 "),bV=n(Pxe,"A",{href:!0});var tgt=s(bV);vVo=r(tgt,"FlaubertForQuestionAnsweringSimple"),tgt.forEach(t),FVo=r(Pxe," (FlauBERT model)"),Pxe.forEach(t),TVo=i(X),pv=n(X,"LI",{});var Bxe=s(pv);_he=n(Bxe,"STRONG",{});var agt=s(_he);MVo=r(agt,"fnet"),agt.forEach(t),EVo=r(Bxe," \u2014 "),vV=n(Bxe,"A",{href:!0});var ngt=s(vV);CVo=r(ngt,"FNetForQuestionAnswering"),ngt.forEach(t),wVo=r(Bxe," (FNet model)"),Bxe.forEach(t),AVo=i(X),uv=n(X,"LI",{});var Ixe=s(uv);bhe=n(Ixe,"STRONG",{});var sgt=s(bhe);yVo=r(sgt,"funnel"),sgt.forEach(t),LVo=r(Ixe," \u2014 "),FV=n(Ixe,"A",{href:!0});var lgt=s(FV);xVo=r(lgt,"FunnelForQuestionAnswering"),lgt.forEach(t),$Vo=r(Ixe," (Funnel Transformer model)"),Ixe.forEach(t),kVo=i(X),_v=n(X,"LI",{});var qxe=s(_v);vhe=n(qxe,"STRONG",{});var igt=s(vhe);SVo=r(igt,"gptj"),igt.forEach(t),RVo=r(qxe," \u2014 "),TV=n(qxe,"A",{href:!0});var dgt=s(TV);PVo=r(dgt,"GPTJForQuestionAnswering"),dgt.forEach(t),BVo=r(qxe," (GPT-J model)"),qxe.forEach(t),IVo=i(X),bv=n(X,"LI",{});var Nxe=s(bv);Fhe=n(Nxe,"STRONG",{});var cgt=s(Fhe);qVo=r(cgt,"ibert"),cgt.forEach(t),NVo=r(Nxe," \u2014 "),MV=n(Nxe,"A",{href:!0});var fgt=s(MV);jVo=r(fgt,"IBertForQuestionAnswering"),fgt.forEach(t),DVo=r(Nxe," (I-BERT model)"),Nxe.forEach(t),GVo=i(X),vv=n(X,"LI",{});var jxe=s(vv);The=n(jxe,"STRONG",{});var mgt=s(The);OVo=r(mgt,"layoutlmv2"),mgt.forEach(t),VVo=r(jxe," \u2014 "),EV=n(jxe,"A",{href:!0});var ggt=s(EV);XVo=r(ggt,"LayoutLMv2ForQuestionAnswering"),ggt.forEach(t),zVo=r(jxe," (LayoutLMv2 model)"),jxe.forEach(t),WVo=i(X),Fv=n(X,"LI",{});var Dxe=s(Fv);Mhe=n(Dxe,"STRONG",{});var hgt=s(Mhe);QVo=r(hgt,"layoutlmv3"),hgt.forEach(t),HVo=r(Dxe," \u2014 "),CV=n(Dxe,"A",{href:!0});var pgt=s(CV);UVo=r(pgt,"LayoutLMv3ForQuestionAnswering"),pgt.forEach(t),JVo=r(Dxe," (LayoutLMv3 model)"),Dxe.forEach(t),YVo=i(X),Tv=n(X,"LI",{});var Gxe=s(Tv);Ehe=n(Gxe,"STRONG",{});var ugt=s(Ehe);KVo=r(ugt,"led"),ugt.forEach(t),ZVo=r(Gxe," \u2014 "),wV=n(Gxe,"A",{href:!0});var _gt=s(wV);eXo=r(_gt,"LEDForQuestionAnswering"),_gt.forEach(t),oXo=r(Gxe," (LED model)"),Gxe.forEach(t),rXo=i(X),Mv=n(X,"LI",{});var Oxe=s(Mv);Che=n(Oxe,"STRONG",{});var bgt=s(Che);tXo=r(bgt,"longformer"),bgt.forEach(t),aXo=r(Oxe," \u2014 "),AV=n(Oxe,"A",{href:!0});var vgt=s(AV);nXo=r(vgt,"LongformerForQuestionAnswering"),vgt.forEach(t),sXo=r(Oxe," (Longformer model)"),Oxe.forEach(t),lXo=i(X),Ev=n(X,"LI",{});var Vxe=s(Ev);whe=n(Vxe,"STRONG",{});var Fgt=s(whe);iXo=r(Fgt,"lxmert"),Fgt.forEach(t),dXo=r(Vxe," \u2014 "),yV=n(Vxe,"A",{href:!0});var Tgt=s(yV);cXo=r(Tgt,"LxmertForQuestionAnswering"),Tgt.forEach(t),fXo=r(Vxe," (LXMERT model)"),Vxe.forEach(t),mXo=i(X),Cv=n(X,"LI",{});var Xxe=s(Cv);Ahe=n(Xxe,"STRONG",{});var Mgt=s(Ahe);gXo=r(Mgt,"mbart"),Mgt.forEach(t),hXo=r(Xxe," \u2014 "),LV=n(Xxe,"A",{href:!0});var Egt=s(LV);pXo=r(Egt,"MBartForQuestionAnswering"),Egt.forEach(t),uXo=r(Xxe," (mBART model)"),Xxe.forEach(t),_Xo=i(X),wv=n(X,"LI",{});var zxe=s(wv);yhe=n(zxe,"STRONG",{});var Cgt=s(yhe);bXo=r(Cgt,"megatron-bert"),Cgt.forEach(t),vXo=r(zxe," \u2014 "),xV=n(zxe,"A",{href:!0});var wgt=s(xV);FXo=r(wgt,"MegatronBertForQuestionAnswering"),wgt.forEach(t),TXo=r(zxe," (MegatronBert model)"),zxe.forEach(t),MXo=i(X),Av=n(X,"LI",{});var Wxe=s(Av);Lhe=n(Wxe,"STRONG",{});var Agt=s(Lhe);EXo=r(Agt,"mobilebert"),Agt.forEach(t),CXo=r(Wxe," \u2014 "),$V=n(Wxe,"A",{href:!0});var ygt=s($V);wXo=r(ygt,"MobileBertForQuestionAnswering"),ygt.forEach(t),AXo=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),yXo=i(X),yv=n(X,"LI",{});var Qxe=s(yv);xhe=n(Qxe,"STRONG",{});var Lgt=s(xhe);LXo=r(Lgt,"mpnet"),Lgt.forEach(t),xXo=r(Qxe," \u2014 "),kV=n(Qxe,"A",{href:!0});var xgt=s(kV);$Xo=r(xgt,"MPNetForQuestionAnswering"),xgt.forEach(t),kXo=r(Qxe," (MPNet model)"),Qxe.forEach(t),SXo=i(X),Lv=n(X,"LI",{});var Hxe=s(Lv);$he=n(Hxe,"STRONG",{});var $gt=s($he);RXo=r($gt,"nystromformer"),$gt.forEach(t),PXo=r(Hxe," \u2014 "),SV=n(Hxe,"A",{href:!0});var kgt=s(SV);BXo=r(kgt,"NystromformerForQuestionAnswering"),kgt.forEach(t),IXo=r(Hxe," (Nystromformer model)"),Hxe.forEach(t),qXo=i(X),xv=n(X,"LI",{});var Uxe=s(xv);khe=n(Uxe,"STRONG",{});var Sgt=s(khe);NXo=r(Sgt,"qdqbert"),Sgt.forEach(t),jXo=r(Uxe," \u2014 "),RV=n(Uxe,"A",{href:!0});var Rgt=s(RV);DXo=r(Rgt,"QDQBertForQuestionAnswering"),Rgt.forEach(t),GXo=r(Uxe," (QDQBert model)"),Uxe.forEach(t),OXo=i(X),$v=n(X,"LI",{});var Jxe=s($v);She=n(Jxe,"STRONG",{});var Pgt=s(She);VXo=r(Pgt,"reformer"),Pgt.forEach(t),XXo=r(Jxe," \u2014 "),PV=n(Jxe,"A",{href:!0});var Bgt=s(PV);zXo=r(Bgt,"ReformerForQuestionAnswering"),Bgt.forEach(t),WXo=r(Jxe," (Reformer model)"),Jxe.forEach(t),QXo=i(X),kv=n(X,"LI",{});var Yxe=s(kv);Rhe=n(Yxe,"STRONG",{});var Igt=s(Rhe);HXo=r(Igt,"rembert"),Igt.forEach(t),UXo=r(Yxe," \u2014 "),BV=n(Yxe,"A",{href:!0});var qgt=s(BV);JXo=r(qgt,"RemBertForQuestionAnswering"),qgt.forEach(t),YXo=r(Yxe," (RemBERT model)"),Yxe.forEach(t),KXo=i(X),Sv=n(X,"LI",{});var Kxe=s(Sv);Phe=n(Kxe,"STRONG",{});var Ngt=s(Phe);ZXo=r(Ngt,"roberta"),Ngt.forEach(t),ezo=r(Kxe," \u2014 "),IV=n(Kxe,"A",{href:!0});var jgt=s(IV);ozo=r(jgt,"RobertaForQuestionAnswering"),jgt.forEach(t),rzo=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),tzo=i(X),Rv=n(X,"LI",{});var Zxe=s(Rv);Bhe=n(Zxe,"STRONG",{});var Dgt=s(Bhe);azo=r(Dgt,"roformer"),Dgt.forEach(t),nzo=r(Zxe," \u2014 "),qV=n(Zxe,"A",{href:!0});var Ggt=s(qV);szo=r(Ggt,"RoFormerForQuestionAnswering"),Ggt.forEach(t),lzo=r(Zxe," (RoFormer model)"),Zxe.forEach(t),izo=i(X),Pv=n(X,"LI",{});var e$e=s(Pv);Ihe=n(e$e,"STRONG",{});var Ogt=s(Ihe);dzo=r(Ogt,"splinter"),Ogt.forEach(t),czo=r(e$e," \u2014 "),NV=n(e$e,"A",{href:!0});var Vgt=s(NV);fzo=r(Vgt,"SplinterForQuestionAnswering"),Vgt.forEach(t),mzo=r(e$e," (Splinter model)"),e$e.forEach(t),gzo=i(X),Bv=n(X,"LI",{});var o$e=s(Bv);qhe=n(o$e,"STRONG",{});var Xgt=s(qhe);hzo=r(Xgt,"squeezebert"),Xgt.forEach(t),pzo=r(o$e," \u2014 "),jV=n(o$e,"A",{href:!0});var zgt=s(jV);uzo=r(zgt,"SqueezeBertForQuestionAnswering"),zgt.forEach(t),_zo=r(o$e," (SqueezeBERT model)"),o$e.forEach(t),bzo=i(X),Iv=n(X,"LI",{});var r$e=s(Iv);Nhe=n(r$e,"STRONG",{});var Wgt=s(Nhe);vzo=r(Wgt,"xlm"),Wgt.forEach(t),Fzo=r(r$e," \u2014 "),DV=n(r$e,"A",{href:!0});var Qgt=s(DV);Tzo=r(Qgt,"XLMForQuestionAnsweringSimple"),Qgt.forEach(t),Mzo=r(r$e," (XLM model)"),r$e.forEach(t),Ezo=i(X),qv=n(X,"LI",{});var t$e=s(qv);jhe=n(t$e,"STRONG",{});var Hgt=s(jhe);Czo=r(Hgt,"xlm-roberta"),Hgt.forEach(t),wzo=r(t$e," \u2014 "),GV=n(t$e,"A",{href:!0});var Ugt=s(GV);Azo=r(Ugt,"XLMRobertaForQuestionAnswering"),Ugt.forEach(t),yzo=r(t$e," (XLM-RoBERTa model)"),t$e.forEach(t),Lzo=i(X),Nv=n(X,"LI",{});var a$e=s(Nv);Dhe=n(a$e,"STRONG",{});var Jgt=s(Dhe);xzo=r(Jgt,"xlm-roberta-xl"),Jgt.forEach(t),$zo=r(a$e," \u2014 "),OV=n(a$e,"A",{href:!0});var Ygt=s(OV);kzo=r(Ygt,"XLMRobertaXLForQuestionAnswering"),Ygt.forEach(t),Szo=r(a$e," (XLM-RoBERTa-XL model)"),a$e.forEach(t),Rzo=i(X),jv=n(X,"LI",{});var n$e=s(jv);Ghe=n(n$e,"STRONG",{});var Kgt=s(Ghe);Pzo=r(Kgt,"xlnet"),Kgt.forEach(t),Bzo=r(n$e," \u2014 "),VV=n(n$e,"A",{href:!0});var Zgt=s(VV);Izo=r(Zgt,"XLNetForQuestionAnsweringSimple"),Zgt.forEach(t),qzo=r(n$e," (XLNet model)"),n$e.forEach(t),Nzo=i(X),Dv=n(X,"LI",{});var s$e=s(Dv);Ohe=n(s$e,"STRONG",{});var eht=s(Ohe);jzo=r(eht,"yoso"),eht.forEach(t),Dzo=r(s$e," \u2014 "),XV=n(s$e,"A",{href:!0});var oht=s(XV);Gzo=r(oht,"YosoForQuestionAnswering"),oht.forEach(t),Ozo=r(s$e," (YOSO model)"),s$e.forEach(t),X.forEach(t),Vzo=i(ca),Gv=n(ca,"P",{});var l$e=s(Gv);Xzo=r(l$e,"The model is set in evaluation mode by default using "),Vhe=n(l$e,"CODE",{});var rht=s(Vhe);zzo=r(rht,"model.eval()"),rht.forEach(t),Wzo=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(l$e,"CODE",{});var tht=s(Xhe);Qzo=r(tht,"model.train()"),tht.forEach(t),l$e.forEach(t),Hzo=i(ca),T(Ov.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),qqe=i(f),od=n(f,"H2",{class:!0});var Gje=s(od);Vv=n(Gje,"A",{id:!0,class:!0,href:!0});var aht=s(Vv);zhe=n(aht,"SPAN",{});var nht=s(zhe);T(qy.$$.fragment,nht),nht.forEach(t),aht.forEach(t),Uzo=i(Gje),Whe=n(Gje,"SPAN",{});var sht=s(Whe);Jzo=r(sht,"AutoModelForTableQuestionAnswering"),sht.forEach(t),Gje.forEach(t),Nqe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(Ny.$$.fragment,Ks),Yzo=i(Ks),rd=n(Ks,"P",{});var fZ=s(rd);Kzo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zV=n(fZ,"A",{href:!0});var lht=s(zV);Zzo=r(lht,"from_pretrained()"),lht.forEach(t),eWo=r(fZ," class method or the "),WV=n(fZ,"A",{href:!0});var iht=s(WV);oWo=r(iht,"from_config()"),iht.forEach(t),rWo=r(fZ,` class
method.`),fZ.forEach(t),tWo=i(Ks),jy=n(Ks,"P",{});var Oje=s(jy);aWo=r(Oje,"This class cannot be instantiated directly using "),Qhe=n(Oje,"CODE",{});var dht=s(Qhe);nWo=r(dht,"__init__()"),dht.forEach(t),sWo=r(Oje," (throws an error)."),Oje.forEach(t),lWo=i(Ks),gt=n(Ks,"DIV",{class:!0});var j3=s(gt);T(Dy.$$.fragment,j3),iWo=i(j3),Hhe=n(j3,"P",{});var cht=s(Hhe);dWo=r(cht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cht.forEach(t),cWo=i(j3),td=n(j3,"P",{});var mZ=s(td);fWo=r(mZ,`Note:
Loading a model from its configuration file does `),Uhe=n(mZ,"STRONG",{});var fht=s(Uhe);mWo=r(fht,"not"),fht.forEach(t),gWo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(mZ,"A",{href:!0});var mht=s(QV);hWo=r(mht,"from_pretrained()"),mht.forEach(t),pWo=r(mZ," to load the model weights."),mZ.forEach(t),uWo=i(j3),T(Xv.$$.fragment,j3),j3.forEach(t),_Wo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Gy.$$.fragment,fa),bWo=i(fa),Jhe=n(fa,"P",{});var ght=s(Jhe);vWo=r(ght,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ght.forEach(t),FWo=i(fa),Na=n(fa,"P",{});var D3=s(Na);TWo=r(D3,"The model class to instantiate is selected based on the "),Yhe=n(D3,"CODE",{});var hht=s(Yhe);MWo=r(hht,"model_type"),hht.forEach(t),EWo=r(D3,` property of the config object (either
passed as an argument or loaded from `),Khe=n(D3,"CODE",{});var pht=s(Khe);CWo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),wWo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(D3,"CODE",{});var uht=s(Zhe);AWo=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),yWo=r(D3,":"),D3.forEach(t),LWo=i(fa),epe=n(fa,"UL",{});var _ht=s(epe);zv=n(_ht,"LI",{});var i$e=s(zv);ope=n(i$e,"STRONG",{});var bht=s(ope);xWo=r(bht,"tapas"),bht.forEach(t),$Wo=r(i$e," \u2014 "),HV=n(i$e,"A",{href:!0});var vht=s(HV);kWo=r(vht,"TapasForQuestionAnswering"),vht.forEach(t),SWo=r(i$e," (TAPAS model)"),i$e.forEach(t),_ht.forEach(t),RWo=i(fa),Wv=n(fa,"P",{});var d$e=s(Wv);PWo=r(d$e,"The model is set in evaluation mode by default using "),rpe=n(d$e,"CODE",{});var Fht=s(rpe);BWo=r(Fht,"model.eval()"),Fht.forEach(t),IWo=r(d$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(d$e,"CODE",{});var Tht=s(tpe);qWo=r(Tht,"model.train()"),Tht.forEach(t),d$e.forEach(t),NWo=i(fa),T(Qv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),jqe=i(f),ad=n(f,"H2",{class:!0});var Vje=s(ad);Hv=n(Vje,"A",{id:!0,class:!0,href:!0});var Mht=s(Hv);ape=n(Mht,"SPAN",{});var Eht=s(ape);T(Oy.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),jWo=i(Vje),npe=n(Vje,"SPAN",{});var Cht=s(npe);DWo=r(Cht,"AutoModelForImageClassification"),Cht.forEach(t),Vje.forEach(t),Dqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(Vy.$$.fragment,Zs),GWo=i(Zs),nd=n(Zs,"P",{});var gZ=s(nd);OWo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UV=n(gZ,"A",{href:!0});var wht=s(UV);VWo=r(wht,"from_pretrained()"),wht.forEach(t),XWo=r(gZ," class method or the "),JV=n(gZ,"A",{href:!0});var Aht=s(JV);zWo=r(Aht,"from_config()"),Aht.forEach(t),WWo=r(gZ,` class
method.`),gZ.forEach(t),QWo=i(Zs),Xy=n(Zs,"P",{});var Xje=s(Xy);HWo=r(Xje,"This class cannot be instantiated directly using "),spe=n(Xje,"CODE",{});var yht=s(spe);UWo=r(yht,"__init__()"),yht.forEach(t),JWo=r(Xje," (throws an error)."),Xje.forEach(t),YWo=i(Zs),ht=n(Zs,"DIV",{class:!0});var G3=s(ht);T(zy.$$.fragment,G3),KWo=i(G3),lpe=n(G3,"P",{});var Lht=s(lpe);ZWo=r(Lht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lht.forEach(t),eQo=i(G3),sd=n(G3,"P",{});var hZ=s(sd);oQo=r(hZ,`Note:
Loading a model from its configuration file does `),ipe=n(hZ,"STRONG",{});var xht=s(ipe);rQo=r(xht,"not"),xht.forEach(t),tQo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(hZ,"A",{href:!0});var $ht=s(YV);aQo=r($ht,"from_pretrained()"),$ht.forEach(t),nQo=r(hZ," to load the model weights."),hZ.forEach(t),sQo=i(G3),T(Uv.$$.fragment,G3),G3.forEach(t),lQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Wy.$$.fragment,ma),iQo=i(ma),dpe=n(ma,"P",{});var kht=s(dpe);dQo=r(kht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kht.forEach(t),cQo=i(ma),ja=n(ma,"P",{});var O3=s(ja);fQo=r(O3,"The model class to instantiate is selected based on the "),cpe=n(O3,"CODE",{});var Sht=s(cpe);mQo=r(Sht,"model_type"),Sht.forEach(t),gQo=r(O3,` property of the config object (either
passed as an argument or loaded from `),fpe=n(O3,"CODE",{});var Rht=s(fpe);hQo=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),pQo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(O3,"CODE",{});var Pht=s(mpe);uQo=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),_Qo=r(O3,":"),O3.forEach(t),bQo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);Jv=n(Ee,"LI",{});var c$e=s(Jv);gpe=n(c$e,"STRONG",{});var Bht=s(gpe);vQo=r(Bht,"beit"),Bht.forEach(t),FQo=r(c$e," \u2014 "),KV=n(c$e,"A",{href:!0});var Iht=s(KV);TQo=r(Iht,"BeitForImageClassification"),Iht.forEach(t),MQo=r(c$e," (BEiT model)"),c$e.forEach(t),EQo=i(Ee),Yv=n(Ee,"LI",{});var f$e=s(Yv);hpe=n(f$e,"STRONG",{});var qht=s(hpe);CQo=r(qht,"convnext"),qht.forEach(t),wQo=r(f$e," \u2014 "),ZV=n(f$e,"A",{href:!0});var Nht=s(ZV);AQo=r(Nht,"ConvNextForImageClassification"),Nht.forEach(t),yQo=r(f$e," (ConvNext model)"),f$e.forEach(t),LQo=i(Ee),Kv=n(Ee,"LI",{});var m$e=s(Kv);ppe=n(m$e,"STRONG",{});var jht=s(ppe);xQo=r(jht,"data2vec-vision"),jht.forEach(t),$Qo=r(m$e," \u2014 "),eX=n(m$e,"A",{href:!0});var Dht=s(eX);kQo=r(Dht,"Data2VecVisionForImageClassification"),Dht.forEach(t),SQo=r(m$e," (Data2VecVision model)"),m$e.forEach(t),RQo=i(Ee),Bs=n(Ee,"LI",{});var k$=s(Bs);upe=n(k$,"STRONG",{});var Ght=s(upe);PQo=r(Ght,"deit"),Ght.forEach(t),BQo=r(k$," \u2014 "),oX=n(k$,"A",{href:!0});var Oht=s(oX);IQo=r(Oht,"DeiTForImageClassification"),Oht.forEach(t),qQo=r(k$," or "),rX=n(k$,"A",{href:!0});var Vht=s(rX);NQo=r(Vht,"DeiTForImageClassificationWithTeacher"),Vht.forEach(t),jQo=r(k$," (DeiT model)"),k$.forEach(t),DQo=i(Ee),Zv=n(Ee,"LI",{});var g$e=s(Zv);_pe=n(g$e,"STRONG",{});var Xht=s(_pe);GQo=r(Xht,"imagegpt"),Xht.forEach(t),OQo=r(g$e," \u2014 "),tX=n(g$e,"A",{href:!0});var zht=s(tX);VQo=r(zht,"ImageGPTForImageClassification"),zht.forEach(t),XQo=r(g$e," (ImageGPT model)"),g$e.forEach(t),zQo=i(Ee),pt=n(Ee,"LI",{});var hf=s(pt);bpe=n(hf,"STRONG",{});var Wht=s(bpe);WQo=r(Wht,"perceiver"),Wht.forEach(t),QQo=r(hf," \u2014 "),aX=n(hf,"A",{href:!0});var Qht=s(aX);HQo=r(Qht,"PerceiverForImageClassificationLearned"),Qht.forEach(t),UQo=r(hf," or "),nX=n(hf,"A",{href:!0});var Hht=s(nX);JQo=r(Hht,"PerceiverForImageClassificationFourier"),Hht.forEach(t),YQo=r(hf," or "),sX=n(hf,"A",{href:!0});var Uht=s(sX);KQo=r(Uht,"PerceiverForImageClassificationConvProcessing"),Uht.forEach(t),ZQo=r(hf," (Perceiver model)"),hf.forEach(t),eHo=i(Ee),eF=n(Ee,"LI",{});var h$e=s(eF);vpe=n(h$e,"STRONG",{});var Jht=s(vpe);oHo=r(Jht,"poolformer"),Jht.forEach(t),rHo=r(h$e," \u2014 "),lX=n(h$e,"A",{href:!0});var Yht=s(lX);tHo=r(Yht,"PoolFormerForImageClassification"),Yht.forEach(t),aHo=r(h$e," (PoolFormer model)"),h$e.forEach(t),nHo=i(Ee),oF=n(Ee,"LI",{});var p$e=s(oF);Fpe=n(p$e,"STRONG",{});var Kht=s(Fpe);sHo=r(Kht,"regnet"),Kht.forEach(t),lHo=r(p$e," \u2014 "),iX=n(p$e,"A",{href:!0});var Zht=s(iX);iHo=r(Zht,"RegNetForImageClassification"),Zht.forEach(t),dHo=r(p$e," (RegNet model)"),p$e.forEach(t),cHo=i(Ee),rF=n(Ee,"LI",{});var u$e=s(rF);Tpe=n(u$e,"STRONG",{});var ept=s(Tpe);fHo=r(ept,"resnet"),ept.forEach(t),mHo=r(u$e," \u2014 "),dX=n(u$e,"A",{href:!0});var opt=s(dX);gHo=r(opt,"ResNetForImageClassification"),opt.forEach(t),hHo=r(u$e," (ResNet model)"),u$e.forEach(t),pHo=i(Ee),tF=n(Ee,"LI",{});var _$e=s(tF);Mpe=n(_$e,"STRONG",{});var rpt=s(Mpe);uHo=r(rpt,"segformer"),rpt.forEach(t),_Ho=r(_$e," \u2014 "),cX=n(_$e,"A",{href:!0});var tpt=s(cX);bHo=r(tpt,"SegformerForImageClassification"),tpt.forEach(t),vHo=r(_$e," (SegFormer model)"),_$e.forEach(t),FHo=i(Ee),aF=n(Ee,"LI",{});var b$e=s(aF);Epe=n(b$e,"STRONG",{});var apt=s(Epe);THo=r(apt,"swin"),apt.forEach(t),MHo=r(b$e," \u2014 "),fX=n(b$e,"A",{href:!0});var npt=s(fX);EHo=r(npt,"SwinForImageClassification"),npt.forEach(t),CHo=r(b$e," (Swin model)"),b$e.forEach(t),wHo=i(Ee),nF=n(Ee,"LI",{});var v$e=s(nF);Cpe=n(v$e,"STRONG",{});var spt=s(Cpe);AHo=r(spt,"van"),spt.forEach(t),yHo=r(v$e," \u2014 "),mX=n(v$e,"A",{href:!0});var lpt=s(mX);LHo=r(lpt,"VanForImageClassification"),lpt.forEach(t),xHo=r(v$e," (VAN model)"),v$e.forEach(t),$Ho=i(Ee),sF=n(Ee,"LI",{});var F$e=s(sF);wpe=n(F$e,"STRONG",{});var ipt=s(wpe);kHo=r(ipt,"vit"),ipt.forEach(t),SHo=r(F$e," \u2014 "),gX=n(F$e,"A",{href:!0});var dpt=s(gX);RHo=r(dpt,"ViTForImageClassification"),dpt.forEach(t),PHo=r(F$e," (ViT model)"),F$e.forEach(t),Ee.forEach(t),BHo=i(ma),lF=n(ma,"P",{});var T$e=s(lF);IHo=r(T$e,"The model is set in evaluation mode by default using "),Ape=n(T$e,"CODE",{});var cpt=s(Ape);qHo=r(cpt,"model.eval()"),cpt.forEach(t),NHo=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(T$e,"CODE",{});var fpt=s(ype);jHo=r(fpt,"model.train()"),fpt.forEach(t),T$e.forEach(t),DHo=i(ma),T(iF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Gqe=i(f),ld=n(f,"H2",{class:!0});var zje=s(ld);dF=n(zje,"A",{id:!0,class:!0,href:!0});var mpt=s(dF);Lpe=n(mpt,"SPAN",{});var gpt=s(Lpe);T(Qy.$$.fragment,gpt),gpt.forEach(t),mpt.forEach(t),GHo=i(zje),xpe=n(zje,"SPAN",{});var hpt=s(xpe);OHo=r(hpt,"AutoModelForVision2Seq"),hpt.forEach(t),zje.forEach(t),Oqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(Hy.$$.fragment,el),VHo=i(el),id=n(el,"P",{});var pZ=s(id);XHo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hX=n(pZ,"A",{href:!0});var ppt=s(hX);zHo=r(ppt,"from_pretrained()"),ppt.forEach(t),WHo=r(pZ," class method or the "),pX=n(pZ,"A",{href:!0});var upt=s(pX);QHo=r(upt,"from_config()"),upt.forEach(t),HHo=r(pZ,` class
method.`),pZ.forEach(t),UHo=i(el),Uy=n(el,"P",{});var Wje=s(Uy);JHo=r(Wje,"This class cannot be instantiated directly using "),$pe=n(Wje,"CODE",{});var _pt=s($pe);YHo=r(_pt,"__init__()"),_pt.forEach(t),KHo=r(Wje," (throws an error)."),Wje.forEach(t),ZHo=i(el),ut=n(el,"DIV",{class:!0});var V3=s(ut);T(Jy.$$.fragment,V3),eUo=i(V3),kpe=n(V3,"P",{});var bpt=s(kpe);oUo=r(bpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bpt.forEach(t),rUo=i(V3),dd=n(V3,"P",{});var uZ=s(dd);tUo=r(uZ,`Note:
Loading a model from its configuration file does `),Spe=n(uZ,"STRONG",{});var vpt=s(Spe);aUo=r(vpt,"not"),vpt.forEach(t),nUo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(uZ,"A",{href:!0});var Fpt=s(uX);sUo=r(Fpt,"from_pretrained()"),Fpt.forEach(t),lUo=r(uZ," to load the model weights."),uZ.forEach(t),iUo=i(V3),T(cF.$$.fragment,V3),V3.forEach(t),dUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Yy.$$.fragment,ga),cUo=i(ga),Rpe=n(ga,"P",{});var Tpt=s(Rpe);fUo=r(Tpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tpt.forEach(t),mUo=i(ga),Da=n(ga,"P",{});var X3=s(Da);gUo=r(X3,"The model class to instantiate is selected based on the "),Ppe=n(X3,"CODE",{});var Mpt=s(Ppe);hUo=r(Mpt,"model_type"),Mpt.forEach(t),pUo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(X3,"CODE",{});var Ept=s(Bpe);uUo=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),_Uo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(X3,"CODE",{});var Cpt=s(Ipe);bUo=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),vUo=r(X3,":"),X3.forEach(t),FUo=i(ga),qpe=n(ga,"UL",{});var wpt=s(qpe);fF=n(wpt,"LI",{});var M$e=s(fF);Npe=n(M$e,"STRONG",{});var Apt=s(Npe);TUo=r(Apt,"vision-encoder-decoder"),Apt.forEach(t),MUo=r(M$e," \u2014 "),_X=n(M$e,"A",{href:!0});var ypt=s(_X);EUo=r(ypt,"VisionEncoderDecoderModel"),ypt.forEach(t),CUo=r(M$e," (Vision Encoder decoder model)"),M$e.forEach(t),wpt.forEach(t),wUo=i(ga),mF=n(ga,"P",{});var E$e=s(mF);AUo=r(E$e,"The model is set in evaluation mode by default using "),jpe=n(E$e,"CODE",{});var Lpt=s(jpe);yUo=r(Lpt,"model.eval()"),Lpt.forEach(t),LUo=r(E$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(E$e,"CODE",{});var xpt=s(Dpe);xUo=r(xpt,"model.train()"),xpt.forEach(t),E$e.forEach(t),$Uo=i(ga),T(gF.$$.fragment,ga),ga.forEach(t),el.forEach(t),Vqe=i(f),cd=n(f,"H2",{class:!0});var Qje=s(cd);hF=n(Qje,"A",{id:!0,class:!0,href:!0});var $pt=s(hF);Gpe=n($pt,"SPAN",{});var kpt=s(Gpe);T(Ky.$$.fragment,kpt),kpt.forEach(t),$pt.forEach(t),kUo=i(Qje),Ope=n(Qje,"SPAN",{});var Spt=s(Ope);SUo=r(Spt,"AutoModelForAudioClassification"),Spt.forEach(t),Qje.forEach(t),Xqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(Zy.$$.fragment,ol),RUo=i(ol),fd=n(ol,"P",{});var _Z=s(fd);PUo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),bX=n(_Z,"A",{href:!0});var Rpt=s(bX);BUo=r(Rpt,"from_pretrained()"),Rpt.forEach(t),IUo=r(_Z," class method or the "),vX=n(_Z,"A",{href:!0});var Ppt=s(vX);qUo=r(Ppt,"from_config()"),Ppt.forEach(t),NUo=r(_Z,` class
method.`),_Z.forEach(t),jUo=i(ol),eL=n(ol,"P",{});var Hje=s(eL);DUo=r(Hje,"This class cannot be instantiated directly using "),Vpe=n(Hje,"CODE",{});var Bpt=s(Vpe);GUo=r(Bpt,"__init__()"),Bpt.forEach(t),OUo=r(Hje," (throws an error)."),Hje.forEach(t),VUo=i(ol),_t=n(ol,"DIV",{class:!0});var z3=s(_t);T(oL.$$.fragment,z3),XUo=i(z3),Xpe=n(z3,"P",{});var Ipt=s(Xpe);zUo=r(Ipt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ipt.forEach(t),WUo=i(z3),md=n(z3,"P",{});var bZ=s(md);QUo=r(bZ,`Note:
Loading a model from its configuration file does `),zpe=n(bZ,"STRONG",{});var qpt=s(zpe);HUo=r(qpt,"not"),qpt.forEach(t),UUo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(bZ,"A",{href:!0});var Npt=s(FX);JUo=r(Npt,"from_pretrained()"),Npt.forEach(t),YUo=r(bZ," to load the model weights."),bZ.forEach(t),KUo=i(z3),T(pF.$$.fragment,z3),z3.forEach(t),ZUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(rL.$$.fragment,ha),eJo=i(ha),Wpe=n(ha,"P",{});var jpt=s(Wpe);oJo=r(jpt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jpt.forEach(t),rJo=i(ha),Ga=n(ha,"P",{});var W3=s(Ga);tJo=r(W3,"The model class to instantiate is selected based on the "),Qpe=n(W3,"CODE",{});var Dpt=s(Qpe);aJo=r(Dpt,"model_type"),Dpt.forEach(t),nJo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(W3,"CODE",{});var Gpt=s(Hpe);sJo=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),lJo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(W3,"CODE",{});var Opt=s(Upe);iJo=r(Opt,"pretrained_model_name_or_path"),Opt.forEach(t),dJo=r(W3,":"),W3.forEach(t),cJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);uF=n(Oe,"LI",{});var C$e=s(uF);Jpe=n(C$e,"STRONG",{});var Vpt=s(Jpe);fJo=r(Vpt,"data2vec-audio"),Vpt.forEach(t),mJo=r(C$e," \u2014 "),TX=n(C$e,"A",{href:!0});var Xpt=s(TX);gJo=r(Xpt,"Data2VecAudioForSequenceClassification"),Xpt.forEach(t),hJo=r(C$e," (Data2VecAudio model)"),C$e.forEach(t),pJo=i(Oe),_F=n(Oe,"LI",{});var w$e=s(_F);Ype=n(w$e,"STRONG",{});var zpt=s(Ype);uJo=r(zpt,"hubert"),zpt.forEach(t),_Jo=r(w$e," \u2014 "),MX=n(w$e,"A",{href:!0});var Wpt=s(MX);bJo=r(Wpt,"HubertForSequenceClassification"),Wpt.forEach(t),vJo=r(w$e," (Hubert model)"),w$e.forEach(t),FJo=i(Oe),bF=n(Oe,"LI",{});var A$e=s(bF);Kpe=n(A$e,"STRONG",{});var Qpt=s(Kpe);TJo=r(Qpt,"sew"),Qpt.forEach(t),MJo=r(A$e," \u2014 "),EX=n(A$e,"A",{href:!0});var Hpt=s(EX);EJo=r(Hpt,"SEWForSequenceClassification"),Hpt.forEach(t),CJo=r(A$e," (SEW model)"),A$e.forEach(t),wJo=i(Oe),vF=n(Oe,"LI",{});var y$e=s(vF);Zpe=n(y$e,"STRONG",{});var Upt=s(Zpe);AJo=r(Upt,"sew-d"),Upt.forEach(t),yJo=r(y$e," \u2014 "),CX=n(y$e,"A",{href:!0});var Jpt=s(CX);LJo=r(Jpt,"SEWDForSequenceClassification"),Jpt.forEach(t),xJo=r(y$e," (SEW-D model)"),y$e.forEach(t),$Jo=i(Oe),FF=n(Oe,"LI",{});var L$e=s(FF);eue=n(L$e,"STRONG",{});var Ypt=s(eue);kJo=r(Ypt,"unispeech"),Ypt.forEach(t),SJo=r(L$e," \u2014 "),wX=n(L$e,"A",{href:!0});var Kpt=s(wX);RJo=r(Kpt,"UniSpeechForSequenceClassification"),Kpt.forEach(t),PJo=r(L$e," (UniSpeech model)"),L$e.forEach(t),BJo=i(Oe),TF=n(Oe,"LI",{});var x$e=s(TF);oue=n(x$e,"STRONG",{});var Zpt=s(oue);IJo=r(Zpt,"unispeech-sat"),Zpt.forEach(t),qJo=r(x$e," \u2014 "),AX=n(x$e,"A",{href:!0});var eut=s(AX);NJo=r(eut,"UniSpeechSatForSequenceClassification"),eut.forEach(t),jJo=r(x$e," (UniSpeechSat model)"),x$e.forEach(t),DJo=i(Oe),MF=n(Oe,"LI",{});var $$e=s(MF);rue=n($$e,"STRONG",{});var out=s(rue);GJo=r(out,"wav2vec2"),out.forEach(t),OJo=r($$e," \u2014 "),yX=n($$e,"A",{href:!0});var rut=s(yX);VJo=r(rut,"Wav2Vec2ForSequenceClassification"),rut.forEach(t),XJo=r($$e," (Wav2Vec2 model)"),$$e.forEach(t),zJo=i(Oe),EF=n(Oe,"LI",{});var k$e=s(EF);tue=n(k$e,"STRONG",{});var tut=s(tue);WJo=r(tut,"wav2vec2-conformer"),tut.forEach(t),QJo=r(k$e," \u2014 "),LX=n(k$e,"A",{href:!0});var aut=s(LX);HJo=r(aut,"Wav2Vec2ConformerForSequenceClassification"),aut.forEach(t),UJo=r(k$e," (Wav2Vec2-Conformer model)"),k$e.forEach(t),JJo=i(Oe),CF=n(Oe,"LI",{});var S$e=s(CF);aue=n(S$e,"STRONG",{});var nut=s(aue);YJo=r(nut,"wavlm"),nut.forEach(t),KJo=r(S$e," \u2014 "),xX=n(S$e,"A",{href:!0});var sut=s(xX);ZJo=r(sut,"WavLMForSequenceClassification"),sut.forEach(t),eYo=r(S$e," (WavLM model)"),S$e.forEach(t),Oe.forEach(t),oYo=i(ha),wF=n(ha,"P",{});var R$e=s(wF);rYo=r(R$e,"The model is set in evaluation mode by default using "),nue=n(R$e,"CODE",{});var lut=s(nue);tYo=r(lut,"model.eval()"),lut.forEach(t),aYo=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(R$e,"CODE",{});var iut=s(sue);nYo=r(iut,"model.train()"),iut.forEach(t),R$e.forEach(t),sYo=i(ha),T(AF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),zqe=i(f),gd=n(f,"H2",{class:!0});var Uje=s(gd);yF=n(Uje,"A",{id:!0,class:!0,href:!0});var dut=s(yF);lue=n(dut,"SPAN",{});var cut=s(lue);T(tL.$$.fragment,cut),cut.forEach(t),dut.forEach(t),lYo=i(Uje),iue=n(Uje,"SPAN",{});var fut=s(iue);iYo=r(fut,"AutoModelForAudioFrameClassification"),fut.forEach(t),Uje.forEach(t),Wqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(aL.$$.fragment,rl),dYo=i(rl),hd=n(rl,"P",{});var vZ=s(hd);cYo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$X=n(vZ,"A",{href:!0});var mut=s($X);fYo=r(mut,"from_pretrained()"),mut.forEach(t),mYo=r(vZ," class method or the "),kX=n(vZ,"A",{href:!0});var gut=s(kX);gYo=r(gut,"from_config()"),gut.forEach(t),hYo=r(vZ,` class
method.`),vZ.forEach(t),pYo=i(rl),nL=n(rl,"P",{});var Jje=s(nL);uYo=r(Jje,"This class cannot be instantiated directly using "),due=n(Jje,"CODE",{});var hut=s(due);_Yo=r(hut,"__init__()"),hut.forEach(t),bYo=r(Jje," (throws an error)."),Jje.forEach(t),vYo=i(rl),bt=n(rl,"DIV",{class:!0});var Q3=s(bt);T(sL.$$.fragment,Q3),FYo=i(Q3),cue=n(Q3,"P",{});var put=s(cue);TYo=r(put,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),put.forEach(t),MYo=i(Q3),pd=n(Q3,"P",{});var FZ=s(pd);EYo=r(FZ,`Note:
Loading a model from its configuration file does `),fue=n(FZ,"STRONG",{});var uut=s(fue);CYo=r(uut,"not"),uut.forEach(t),wYo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(FZ,"A",{href:!0});var _ut=s(SX);AYo=r(_ut,"from_pretrained()"),_ut.forEach(t),yYo=r(FZ," to load the model weights."),FZ.forEach(t),LYo=i(Q3),T(LF.$$.fragment,Q3),Q3.forEach(t),xYo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(lL.$$.fragment,pa),$Yo=i(pa),mue=n(pa,"P",{});var but=s(mue);kYo=r(but,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),but.forEach(t),SYo=i(pa),Oa=n(pa,"P",{});var H3=s(Oa);RYo=r(H3,"The model class to instantiate is selected based on the "),gue=n(H3,"CODE",{});var vut=s(gue);PYo=r(vut,"model_type"),vut.forEach(t),BYo=r(H3,` property of the config object (either
passed as an argument or loaded from `),hue=n(H3,"CODE",{});var Fut=s(hue);IYo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),qYo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(H3,"CODE",{});var Tut=s(pue);NYo=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),jYo=r(H3,":"),H3.forEach(t),DYo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);xF=n(tl,"LI",{});var P$e=s(xF);uue=n(P$e,"STRONG",{});var Mut=s(uue);GYo=r(Mut,"data2vec-audio"),Mut.forEach(t),OYo=r(P$e," \u2014 "),RX=n(P$e,"A",{href:!0});var Eut=s(RX);VYo=r(Eut,"Data2VecAudioForAudioFrameClassification"),Eut.forEach(t),XYo=r(P$e," (Data2VecAudio model)"),P$e.forEach(t),zYo=i(tl),$F=n(tl,"LI",{});var B$e=s($F);_ue=n(B$e,"STRONG",{});var Cut=s(_ue);WYo=r(Cut,"unispeech-sat"),Cut.forEach(t),QYo=r(B$e," \u2014 "),PX=n(B$e,"A",{href:!0});var wut=s(PX);HYo=r(wut,"UniSpeechSatForAudioFrameClassification"),wut.forEach(t),UYo=r(B$e," (UniSpeechSat model)"),B$e.forEach(t),JYo=i(tl),kF=n(tl,"LI",{});var I$e=s(kF);bue=n(I$e,"STRONG",{});var Aut=s(bue);YYo=r(Aut,"wav2vec2"),Aut.forEach(t),KYo=r(I$e," \u2014 "),BX=n(I$e,"A",{href:!0});var yut=s(BX);ZYo=r(yut,"Wav2Vec2ForAudioFrameClassification"),yut.forEach(t),eKo=r(I$e," (Wav2Vec2 model)"),I$e.forEach(t),oKo=i(tl),SF=n(tl,"LI",{});var q$e=s(SF);vue=n(q$e,"STRONG",{});var Lut=s(vue);rKo=r(Lut,"wav2vec2-conformer"),Lut.forEach(t),tKo=r(q$e," \u2014 "),IX=n(q$e,"A",{href:!0});var xut=s(IX);aKo=r(xut,"Wav2Vec2ConformerForAudioFrameClassification"),xut.forEach(t),nKo=r(q$e," (Wav2Vec2-Conformer model)"),q$e.forEach(t),sKo=i(tl),RF=n(tl,"LI",{});var N$e=s(RF);Fue=n(N$e,"STRONG",{});var $ut=s(Fue);lKo=r($ut,"wavlm"),$ut.forEach(t),iKo=r(N$e," \u2014 "),qX=n(N$e,"A",{href:!0});var kut=s(qX);dKo=r(kut,"WavLMForAudioFrameClassification"),kut.forEach(t),cKo=r(N$e," (WavLM model)"),N$e.forEach(t),tl.forEach(t),fKo=i(pa),PF=n(pa,"P",{});var j$e=s(PF);mKo=r(j$e,"The model is set in evaluation mode by default using "),Tue=n(j$e,"CODE",{});var Sut=s(Tue);gKo=r(Sut,"model.eval()"),Sut.forEach(t),hKo=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(j$e,"CODE",{});var Rut=s(Mue);pKo=r(Rut,"model.train()"),Rut.forEach(t),j$e.forEach(t),uKo=i(pa),T(BF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Qqe=i(f),ud=n(f,"H2",{class:!0});var Yje=s(ud);IF=n(Yje,"A",{id:!0,class:!0,href:!0});var Put=s(IF);Eue=n(Put,"SPAN",{});var But=s(Eue);T(iL.$$.fragment,But),But.forEach(t),Put.forEach(t),_Ko=i(Yje),Cue=n(Yje,"SPAN",{});var Iut=s(Cue);bKo=r(Iut,"AutoModelForCTC"),Iut.forEach(t),Yje.forEach(t),Hqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(dL.$$.fragment,al),vKo=i(al),_d=n(al,"P",{});var TZ=s(_d);FKo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),NX=n(TZ,"A",{href:!0});var qut=s(NX);TKo=r(qut,"from_pretrained()"),qut.forEach(t),MKo=r(TZ," class method or the "),jX=n(TZ,"A",{href:!0});var Nut=s(jX);EKo=r(Nut,"from_config()"),Nut.forEach(t),CKo=r(TZ,` class
method.`),TZ.forEach(t),wKo=i(al),cL=n(al,"P",{});var Kje=s(cL);AKo=r(Kje,"This class cannot be instantiated directly using "),wue=n(Kje,"CODE",{});var jut=s(wue);yKo=r(jut,"__init__()"),jut.forEach(t),LKo=r(Kje," (throws an error)."),Kje.forEach(t),xKo=i(al),vt=n(al,"DIV",{class:!0});var U3=s(vt);T(fL.$$.fragment,U3),$Ko=i(U3),Aue=n(U3,"P",{});var Dut=s(Aue);kKo=r(Dut,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dut.forEach(t),SKo=i(U3),bd=n(U3,"P",{});var MZ=s(bd);RKo=r(MZ,`Note:
Loading a model from its configuration file does `),yue=n(MZ,"STRONG",{});var Gut=s(yue);PKo=r(Gut,"not"),Gut.forEach(t),BKo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(MZ,"A",{href:!0});var Out=s(DX);IKo=r(Out,"from_pretrained()"),Out.forEach(t),qKo=r(MZ," to load the model weights."),MZ.forEach(t),NKo=i(U3),T(qF.$$.fragment,U3),U3.forEach(t),jKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(mL.$$.fragment,ua),DKo=i(ua),Lue=n(ua,"P",{});var Vut=s(Lue);GKo=r(Vut,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vut.forEach(t),OKo=i(ua),Va=n(ua,"P",{});var J3=s(Va);VKo=r(J3,"The model class to instantiate is selected based on the "),xue=n(J3,"CODE",{});var Xut=s(xue);XKo=r(Xut,"model_type"),Xut.forEach(t),zKo=r(J3,` property of the config object (either
passed as an argument or loaded from `),$ue=n(J3,"CODE",{});var zut=s($ue);WKo=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),QKo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(J3,"CODE",{});var Wut=s(kue);HKo=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),UKo=r(J3,":"),J3.forEach(t),JKo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);NF=n(Ve,"LI",{});var D$e=s(NF);Sue=n(D$e,"STRONG",{});var Qut=s(Sue);YKo=r(Qut,"data2vec-audio"),Qut.forEach(t),KKo=r(D$e," \u2014 "),GX=n(D$e,"A",{href:!0});var Hut=s(GX);ZKo=r(Hut,"Data2VecAudioForCTC"),Hut.forEach(t),eZo=r(D$e," (Data2VecAudio model)"),D$e.forEach(t),oZo=i(Ve),jF=n(Ve,"LI",{});var G$e=s(jF);Rue=n(G$e,"STRONG",{});var Uut=s(Rue);rZo=r(Uut,"hubert"),Uut.forEach(t),tZo=r(G$e," \u2014 "),OX=n(G$e,"A",{href:!0});var Jut=s(OX);aZo=r(Jut,"HubertForCTC"),Jut.forEach(t),nZo=r(G$e," (Hubert model)"),G$e.forEach(t),sZo=i(Ve),DF=n(Ve,"LI",{});var O$e=s(DF);Pue=n(O$e,"STRONG",{});var Yut=s(Pue);lZo=r(Yut,"sew"),Yut.forEach(t),iZo=r(O$e," \u2014 "),VX=n(O$e,"A",{href:!0});var Kut=s(VX);dZo=r(Kut,"SEWForCTC"),Kut.forEach(t),cZo=r(O$e," (SEW model)"),O$e.forEach(t),fZo=i(Ve),GF=n(Ve,"LI",{});var V$e=s(GF);Bue=n(V$e,"STRONG",{});var Zut=s(Bue);mZo=r(Zut,"sew-d"),Zut.forEach(t),gZo=r(V$e," \u2014 "),XX=n(V$e,"A",{href:!0});var e_t=s(XX);hZo=r(e_t,"SEWDForCTC"),e_t.forEach(t),pZo=r(V$e," (SEW-D model)"),V$e.forEach(t),uZo=i(Ve),OF=n(Ve,"LI",{});var X$e=s(OF);Iue=n(X$e,"STRONG",{});var o_t=s(Iue);_Zo=r(o_t,"unispeech"),o_t.forEach(t),bZo=r(X$e," \u2014 "),zX=n(X$e,"A",{href:!0});var r_t=s(zX);vZo=r(r_t,"UniSpeechForCTC"),r_t.forEach(t),FZo=r(X$e," (UniSpeech model)"),X$e.forEach(t),TZo=i(Ve),VF=n(Ve,"LI",{});var z$e=s(VF);que=n(z$e,"STRONG",{});var t_t=s(que);MZo=r(t_t,"unispeech-sat"),t_t.forEach(t),EZo=r(z$e," \u2014 "),WX=n(z$e,"A",{href:!0});var a_t=s(WX);CZo=r(a_t,"UniSpeechSatForCTC"),a_t.forEach(t),wZo=r(z$e," (UniSpeechSat model)"),z$e.forEach(t),AZo=i(Ve),XF=n(Ve,"LI",{});var W$e=s(XF);Nue=n(W$e,"STRONG",{});var n_t=s(Nue);yZo=r(n_t,"wav2vec2"),n_t.forEach(t),LZo=r(W$e," \u2014 "),QX=n(W$e,"A",{href:!0});var s_t=s(QX);xZo=r(s_t,"Wav2Vec2ForCTC"),s_t.forEach(t),$Zo=r(W$e," (Wav2Vec2 model)"),W$e.forEach(t),kZo=i(Ve),zF=n(Ve,"LI",{});var Q$e=s(zF);jue=n(Q$e,"STRONG",{});var l_t=s(jue);SZo=r(l_t,"wav2vec2-conformer"),l_t.forEach(t),RZo=r(Q$e," \u2014 "),HX=n(Q$e,"A",{href:!0});var i_t=s(HX);PZo=r(i_t,"Wav2Vec2ConformerForCTC"),i_t.forEach(t),BZo=r(Q$e," (Wav2Vec2-Conformer model)"),Q$e.forEach(t),IZo=i(Ve),WF=n(Ve,"LI",{});var H$e=s(WF);Due=n(H$e,"STRONG",{});var d_t=s(Due);qZo=r(d_t,"wavlm"),d_t.forEach(t),NZo=r(H$e," \u2014 "),UX=n(H$e,"A",{href:!0});var c_t=s(UX);jZo=r(c_t,"WavLMForCTC"),c_t.forEach(t),DZo=r(H$e," (WavLM model)"),H$e.forEach(t),Ve.forEach(t),GZo=i(ua),QF=n(ua,"P",{});var U$e=s(QF);OZo=r(U$e,"The model is set in evaluation mode by default using "),Gue=n(U$e,"CODE",{});var f_t=s(Gue);VZo=r(f_t,"model.eval()"),f_t.forEach(t),XZo=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(U$e,"CODE",{});var m_t=s(Oue);zZo=r(m_t,"model.train()"),m_t.forEach(t),U$e.forEach(t),WZo=i(ua),T(HF.$$.fragment,ua),ua.forEach(t),al.forEach(t),Uqe=i(f),vd=n(f,"H2",{class:!0});var Zje=s(vd);UF=n(Zje,"A",{id:!0,class:!0,href:!0});var g_t=s(UF);Vue=n(g_t,"SPAN",{});var h_t=s(Vue);T(gL.$$.fragment,h_t),h_t.forEach(t),g_t.forEach(t),QZo=i(Zje),Xue=n(Zje,"SPAN",{});var p_t=s(Xue);HZo=r(p_t,"AutoModelForSpeechSeq2Seq"),p_t.forEach(t),Zje.forEach(t),Jqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(hL.$$.fragment,nl),UZo=i(nl),Fd=n(nl,"P",{});var EZ=s(Fd);JZo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JX=n(EZ,"A",{href:!0});var u_t=s(JX);YZo=r(u_t,"from_pretrained()"),u_t.forEach(t),KZo=r(EZ," class method or the "),YX=n(EZ,"A",{href:!0});var __t=s(YX);ZZo=r(__t,"from_config()"),__t.forEach(t),eer=r(EZ,` class
method.`),EZ.forEach(t),oer=i(nl),pL=n(nl,"P",{});var eDe=s(pL);rer=r(eDe,"This class cannot be instantiated directly using "),zue=n(eDe,"CODE",{});var b_t=s(zue);ter=r(b_t,"__init__()"),b_t.forEach(t),aer=r(eDe," (throws an error)."),eDe.forEach(t),ner=i(nl),Ft=n(nl,"DIV",{class:!0});var Y3=s(Ft);T(uL.$$.fragment,Y3),ser=i(Y3),Wue=n(Y3,"P",{});var v_t=s(Wue);ler=r(v_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),v_t.forEach(t),ier=i(Y3),Td=n(Y3,"P",{});var CZ=s(Td);der=r(CZ,`Note:
Loading a model from its configuration file does `),Que=n(CZ,"STRONG",{});var F_t=s(Que);cer=r(F_t,"not"),F_t.forEach(t),fer=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KX=n(CZ,"A",{href:!0});var T_t=s(KX);mer=r(T_t,"from_pretrained()"),T_t.forEach(t),ger=r(CZ," to load the model weights."),CZ.forEach(t),her=i(Y3),T(JF.$$.fragment,Y3),Y3.forEach(t),per=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(_L.$$.fragment,_a),uer=i(_a),Hue=n(_a,"P",{});var M_t=s(Hue);_er=r(M_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),M_t.forEach(t),ber=i(_a),Xa=n(_a,"P",{});var K3=s(Xa);ver=r(K3,"The model class to instantiate is selected based on the "),Uue=n(K3,"CODE",{});var E_t=s(Uue);Fer=r(E_t,"model_type"),E_t.forEach(t),Ter=r(K3,` property of the config object (either
passed as an argument or loaded from `),Jue=n(K3,"CODE",{});var C_t=s(Jue);Mer=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),Eer=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(K3,"CODE",{});var w_t=s(Yue);Cer=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),wer=r(K3,":"),K3.forEach(t),Aer=i(_a),bL=n(_a,"UL",{});var oDe=s(bL);YF=n(oDe,"LI",{});var J$e=s(YF);Kue=n(J$e,"STRONG",{});var A_t=s(Kue);yer=r(A_t,"speech-encoder-decoder"),A_t.forEach(t),Ler=r(J$e," \u2014 "),ZX=n(J$e,"A",{href:!0});var y_t=s(ZX);xer=r(y_t,"SpeechEncoderDecoderModel"),y_t.forEach(t),$er=r(J$e," (Speech Encoder decoder model)"),J$e.forEach(t),ker=i(oDe),KF=n(oDe,"LI",{});var Y$e=s(KF);Zue=n(Y$e,"STRONG",{});var L_t=s(Zue);Ser=r(L_t,"speech_to_text"),L_t.forEach(t),Rer=r(Y$e," \u2014 "),ez=n(Y$e,"A",{href:!0});var x_t=s(ez);Per=r(x_t,"Speech2TextForConditionalGeneration"),x_t.forEach(t),Ber=r(Y$e," (Speech2Text model)"),Y$e.forEach(t),oDe.forEach(t),Ier=i(_a),ZF=n(_a,"P",{});var K$e=s(ZF);qer=r(K$e,"The model is set in evaluation mode by default using "),e_e=n(K$e,"CODE",{});var $_t=s(e_e);Ner=r($_t,"model.eval()"),$_t.forEach(t),jer=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(K$e,"CODE",{});var k_t=s(o_e);Der=r(k_t,"model.train()"),k_t.forEach(t),K$e.forEach(t),Ger=i(_a),T(e6.$$.fragment,_a),_a.forEach(t),nl.forEach(t),Yqe=i(f),Md=n(f,"H2",{class:!0});var rDe=s(Md);o6=n(rDe,"A",{id:!0,class:!0,href:!0});var S_t=s(o6);r_e=n(S_t,"SPAN",{});var R_t=s(r_e);T(vL.$$.fragment,R_t),R_t.forEach(t),S_t.forEach(t),Oer=i(rDe),t_e=n(rDe,"SPAN",{});var P_t=s(t_e);Ver=r(P_t,"AutoModelForAudioXVector"),P_t.forEach(t),rDe.forEach(t),Kqe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(FL.$$.fragment,sl),Xer=i(sl),Ed=n(sl,"P",{});var wZ=s(Ed);zer=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),oz=n(wZ,"A",{href:!0});var B_t=s(oz);Wer=r(B_t,"from_pretrained()"),B_t.forEach(t),Qer=r(wZ," class method or the "),rz=n(wZ,"A",{href:!0});var I_t=s(rz);Her=r(I_t,"from_config()"),I_t.forEach(t),Uer=r(wZ,` class
method.`),wZ.forEach(t),Jer=i(sl),TL=n(sl,"P",{});var tDe=s(TL);Yer=r(tDe,"This class cannot be instantiated directly using "),a_e=n(tDe,"CODE",{});var q_t=s(a_e);Ker=r(q_t,"__init__()"),q_t.forEach(t),Zer=r(tDe," (throws an error)."),tDe.forEach(t),eor=i(sl),Tt=n(sl,"DIV",{class:!0});var Z3=s(Tt);T(ML.$$.fragment,Z3),oor=i(Z3),n_e=n(Z3,"P",{});var N_t=s(n_e);ror=r(N_t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),N_t.forEach(t),tor=i(Z3),Cd=n(Z3,"P",{});var AZ=s(Cd);aor=r(AZ,`Note:
Loading a model from its configuration file does `),s_e=n(AZ,"STRONG",{});var j_t=s(s_e);nor=r(j_t,"not"),j_t.forEach(t),sor=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(AZ,"A",{href:!0});var D_t=s(tz);lor=r(D_t,"from_pretrained()"),D_t.forEach(t),ior=r(AZ," to load the model weights."),AZ.forEach(t),dor=i(Z3),T(r6.$$.fragment,Z3),Z3.forEach(t),cor=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(EL.$$.fragment,ba),mor=i(ba),l_e=n(ba,"P",{});var G_t=s(l_e);gor=r(G_t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),G_t.forEach(t),hor=i(ba),za=n(ba,"P",{});var ew=s(za);por=r(ew,"The model class to instantiate is selected based on the "),i_e=n(ew,"CODE",{});var O_t=s(i_e);uor=r(O_t,"model_type"),O_t.forEach(t),_or=r(ew,` property of the config object (either
passed as an argument or loaded from `),d_e=n(ew,"CODE",{});var V_t=s(d_e);bor=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),vor=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(ew,"CODE",{});var X_t=s(c_e);For=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),Tor=r(ew,":"),ew.forEach(t),Mor=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);t6=n(ll,"LI",{});var Z$e=s(t6);f_e=n(Z$e,"STRONG",{});var z_t=s(f_e);Eor=r(z_t,"data2vec-audio"),z_t.forEach(t),Cor=r(Z$e," \u2014 "),az=n(Z$e,"A",{href:!0});var W_t=s(az);wor=r(W_t,"Data2VecAudioForXVector"),W_t.forEach(t),Aor=r(Z$e," (Data2VecAudio model)"),Z$e.forEach(t),yor=i(ll),a6=n(ll,"LI",{});var eke=s(a6);m_e=n(eke,"STRONG",{});var Q_t=s(m_e);Lor=r(Q_t,"unispeech-sat"),Q_t.forEach(t),xor=r(eke," \u2014 "),nz=n(eke,"A",{href:!0});var H_t=s(nz);$or=r(H_t,"UniSpeechSatForXVector"),H_t.forEach(t),kor=r(eke," (UniSpeechSat model)"),eke.forEach(t),Sor=i(ll),n6=n(ll,"LI",{});var oke=s(n6);g_e=n(oke,"STRONG",{});var U_t=s(g_e);Ror=r(U_t,"wav2vec2"),U_t.forEach(t),Por=r(oke," \u2014 "),sz=n(oke,"A",{href:!0});var J_t=s(sz);Bor=r(J_t,"Wav2Vec2ForXVector"),J_t.forEach(t),Ior=r(oke," (Wav2Vec2 model)"),oke.forEach(t),qor=i(ll),s6=n(ll,"LI",{});var rke=s(s6);h_e=n(rke,"STRONG",{});var Y_t=s(h_e);Nor=r(Y_t,"wav2vec2-conformer"),Y_t.forEach(t),jor=r(rke," \u2014 "),lz=n(rke,"A",{href:!0});var K_t=s(lz);Dor=r(K_t,"Wav2Vec2ConformerForXVector"),K_t.forEach(t),Gor=r(rke," (Wav2Vec2-Conformer model)"),rke.forEach(t),Oor=i(ll),l6=n(ll,"LI",{});var tke=s(l6);p_e=n(tke,"STRONG",{});var Z_t=s(p_e);Vor=r(Z_t,"wavlm"),Z_t.forEach(t),Xor=r(tke," \u2014 "),iz=n(tke,"A",{href:!0});var e0t=s(iz);zor=r(e0t,"WavLMForXVector"),e0t.forEach(t),Wor=r(tke," (WavLM model)"),tke.forEach(t),ll.forEach(t),Qor=i(ba),i6=n(ba,"P",{});var ake=s(i6);Hor=r(ake,"The model is set in evaluation mode by default using "),u_e=n(ake,"CODE",{});var o0t=s(u_e);Uor=r(o0t,"model.eval()"),o0t.forEach(t),Jor=r(ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=n(ake,"CODE",{});var r0t=s(__e);Yor=r(r0t,"model.train()"),r0t.forEach(t),ake.forEach(t),Kor=i(ba),T(d6.$$.fragment,ba),ba.forEach(t),sl.forEach(t),Zqe=i(f),wd=n(f,"H2",{class:!0});var aDe=s(wd);c6=n(aDe,"A",{id:!0,class:!0,href:!0});var t0t=s(c6);b_e=n(t0t,"SPAN",{});var a0t=s(b_e);T(CL.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),Zor=i(aDe),v_e=n(aDe,"SPAN",{});var n0t=s(v_e);err=r(n0t,"AutoModelForMaskedImageModeling"),n0t.forEach(t),aDe.forEach(t),eNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(wL.$$.fragment,il),orr=i(il),Ad=n(il,"P",{});var yZ=s(Ad);rrr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dz=n(yZ,"A",{href:!0});var s0t=s(dz);trr=r(s0t,"from_pretrained()"),s0t.forEach(t),arr=r(yZ," class method or the "),cz=n(yZ,"A",{href:!0});var l0t=s(cz);nrr=r(l0t,"from_config()"),l0t.forEach(t),srr=r(yZ,` class
method.`),yZ.forEach(t),lrr=i(il),AL=n(il,"P",{});var nDe=s(AL);irr=r(nDe,"This class cannot be instantiated directly using "),F_e=n(nDe,"CODE",{});var i0t=s(F_e);drr=r(i0t,"__init__()"),i0t.forEach(t),crr=r(nDe," (throws an error)."),nDe.forEach(t),frr=i(il),Mt=n(il,"DIV",{class:!0});var ow=s(Mt);T(yL.$$.fragment,ow),mrr=i(ow),T_e=n(ow,"P",{});var d0t=s(T_e);grr=r(d0t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),d0t.forEach(t),hrr=i(ow),yd=n(ow,"P",{});var LZ=s(yd);prr=r(LZ,`Note:
Loading a model from its configuration file does `),M_e=n(LZ,"STRONG",{});var c0t=s(M_e);urr=r(c0t,"not"),c0t.forEach(t),_rr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(LZ,"A",{href:!0});var f0t=s(fz);brr=r(f0t,"from_pretrained()"),f0t.forEach(t),vrr=r(LZ," to load the model weights."),LZ.forEach(t),Frr=i(ow),T(f6.$$.fragment,ow),ow.forEach(t),Trr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(LL.$$.fragment,va),Mrr=i(va),E_e=n(va,"P",{});var m0t=s(E_e);Err=r(m0t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),m0t.forEach(t),Crr=i(va),Wa=n(va,"P",{});var rw=s(Wa);wrr=r(rw,"The model class to instantiate is selected based on the "),C_e=n(rw,"CODE",{});var g0t=s(C_e);Arr=r(g0t,"model_type"),g0t.forEach(t),yrr=r(rw,` property of the config object (either
passed as an argument or loaded from `),w_e=n(rw,"CODE",{});var h0t=s(w_e);Lrr=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),xrr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=n(rw,"CODE",{});var p0t=s(A_e);$rr=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),krr=r(rw,":"),rw.forEach(t),Srr=i(va),Ld=n(va,"UL",{});var xZ=s(Ld);m6=n(xZ,"LI",{});var nke=s(m6);y_e=n(nke,"STRONG",{});var u0t=s(y_e);Rrr=r(u0t,"deit"),u0t.forEach(t),Prr=r(nke," \u2014 "),mz=n(nke,"A",{href:!0});var _0t=s(mz);Brr=r(_0t,"DeiTForMaskedImageModeling"),_0t.forEach(t),Irr=r(nke," (DeiT model)"),nke.forEach(t),qrr=i(xZ),g6=n(xZ,"LI",{});var ske=s(g6);L_e=n(ske,"STRONG",{});var b0t=s(L_e);Nrr=r(b0t,"swin"),b0t.forEach(t),jrr=r(ske," \u2014 "),gz=n(ske,"A",{href:!0});var v0t=s(gz);Drr=r(v0t,"SwinForMaskedImageModeling"),v0t.forEach(t),Grr=r(ske," (Swin model)"),ske.forEach(t),Orr=i(xZ),h6=n(xZ,"LI",{});var lke=s(h6);x_e=n(lke,"STRONG",{});var F0t=s(x_e);Vrr=r(F0t,"vit"),F0t.forEach(t),Xrr=r(lke," \u2014 "),hz=n(lke,"A",{href:!0});var T0t=s(hz);zrr=r(T0t,"ViTForMaskedImageModeling"),T0t.forEach(t),Wrr=r(lke," (ViT model)"),lke.forEach(t),xZ.forEach(t),Qrr=i(va),p6=n(va,"P",{});var ike=s(p6);Hrr=r(ike,"The model is set in evaluation mode by default using "),$_e=n(ike,"CODE",{});var M0t=s($_e);Urr=r(M0t,"model.eval()"),M0t.forEach(t),Jrr=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(ike,"CODE",{});var E0t=s(k_e);Yrr=r(E0t,"model.train()"),E0t.forEach(t),ike.forEach(t),Krr=i(va),T(u6.$$.fragment,va),va.forEach(t),il.forEach(t),oNe=i(f),xd=n(f,"H2",{class:!0});var sDe=s(xd);_6=n(sDe,"A",{id:!0,class:!0,href:!0});var C0t=s(_6);S_e=n(C0t,"SPAN",{});var w0t=s(S_e);T(xL.$$.fragment,w0t),w0t.forEach(t),C0t.forEach(t),Zrr=i(sDe),R_e=n(sDe,"SPAN",{});var A0t=s(R_e);etr=r(A0t,"AutoModelForObjectDetection"),A0t.forEach(t),sDe.forEach(t),rNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T($L.$$.fragment,dl),otr=i(dl),$d=n(dl,"P",{});var $Z=s($d);rtr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pz=n($Z,"A",{href:!0});var y0t=s(pz);ttr=r(y0t,"from_pretrained()"),y0t.forEach(t),atr=r($Z," class method or the "),uz=n($Z,"A",{href:!0});var L0t=s(uz);ntr=r(L0t,"from_config()"),L0t.forEach(t),str=r($Z,` class
method.`),$Z.forEach(t),ltr=i(dl),kL=n(dl,"P",{});var lDe=s(kL);itr=r(lDe,"This class cannot be instantiated directly using "),P_e=n(lDe,"CODE",{});var x0t=s(P_e);dtr=r(x0t,"__init__()"),x0t.forEach(t),ctr=r(lDe," (throws an error)."),lDe.forEach(t),ftr=i(dl),Et=n(dl,"DIV",{class:!0});var tw=s(Et);T(SL.$$.fragment,tw),mtr=i(tw),B_e=n(tw,"P",{});var $0t=s(B_e);gtr=r($0t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),$0t.forEach(t),htr=i(tw),kd=n(tw,"P",{});var kZ=s(kd);ptr=r(kZ,`Note:
Loading a model from its configuration file does `),I_e=n(kZ,"STRONG",{});var k0t=s(I_e);utr=r(k0t,"not"),k0t.forEach(t),_tr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(kZ,"A",{href:!0});var S0t=s(_z);btr=r(S0t,"from_pretrained()"),S0t.forEach(t),vtr=r(kZ," to load the model weights."),kZ.forEach(t),Ftr=i(tw),T(b6.$$.fragment,tw),tw.forEach(t),Ttr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(RL.$$.fragment,Fa),Mtr=i(Fa),q_e=n(Fa,"P",{});var R0t=s(q_e);Etr=r(R0t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),R0t.forEach(t),Ctr=i(Fa),Qa=n(Fa,"P",{});var aw=s(Qa);wtr=r(aw,"The model class to instantiate is selected based on the "),N_e=n(aw,"CODE",{});var P0t=s(N_e);Atr=r(P0t,"model_type"),P0t.forEach(t),ytr=r(aw,` property of the config object (either
passed as an argument or loaded from `),j_e=n(aw,"CODE",{});var B0t=s(j_e);Ltr=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),xtr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(aw,"CODE",{});var I0t=s(D_e);$tr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),ktr=r(aw,":"),aw.forEach(t),Str=i(Fa),PL=n(Fa,"UL",{});var iDe=s(PL);v6=n(iDe,"LI",{});var dke=s(v6);G_e=n(dke,"STRONG",{});var q0t=s(G_e);Rtr=r(q0t,"detr"),q0t.forEach(t),Ptr=r(dke," \u2014 "),bz=n(dke,"A",{href:!0});var N0t=s(bz);Btr=r(N0t,"DetrForObjectDetection"),N0t.forEach(t),Itr=r(dke," (DETR model)"),dke.forEach(t),qtr=i(iDe),F6=n(iDe,"LI",{});var cke=s(F6);O_e=n(cke,"STRONG",{});var j0t=s(O_e);Ntr=r(j0t,"yolos"),j0t.forEach(t),jtr=r(cke," \u2014 "),vz=n(cke,"A",{href:!0});var D0t=s(vz);Dtr=r(D0t,"YolosForObjectDetection"),D0t.forEach(t),Gtr=r(cke," (YOLOS model)"),cke.forEach(t),iDe.forEach(t),Otr=i(Fa),T6=n(Fa,"P",{});var fke=s(T6);Vtr=r(fke,"The model is set in evaluation mode by default using "),V_e=n(fke,"CODE",{});var G0t=s(V_e);Xtr=r(G0t,"model.eval()"),G0t.forEach(t),ztr=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(fke,"CODE",{});var O0t=s(X_e);Wtr=r(O0t,"model.train()"),O0t.forEach(t),fke.forEach(t),Qtr=i(Fa),T(M6.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),tNe=i(f),Sd=n(f,"H2",{class:!0});var dDe=s(Sd);E6=n(dDe,"A",{id:!0,class:!0,href:!0});var V0t=s(E6);z_e=n(V0t,"SPAN",{});var X0t=s(z_e);T(BL.$$.fragment,X0t),X0t.forEach(t),V0t.forEach(t),Htr=i(dDe),W_e=n(dDe,"SPAN",{});var z0t=s(W_e);Utr=r(z0t,"AutoModelForImageSegmentation"),z0t.forEach(t),dDe.forEach(t),aNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(IL.$$.fragment,cl),Jtr=i(cl),Rd=n(cl,"P",{});var SZ=s(Rd);Ytr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Fz=n(SZ,"A",{href:!0});var W0t=s(Fz);Ktr=r(W0t,"from_pretrained()"),W0t.forEach(t),Ztr=r(SZ," class method or the "),Tz=n(SZ,"A",{href:!0});var Q0t=s(Tz);ear=r(Q0t,"from_config()"),Q0t.forEach(t),oar=r(SZ,` class
method.`),SZ.forEach(t),rar=i(cl),qL=n(cl,"P",{});var cDe=s(qL);tar=r(cDe,"This class cannot be instantiated directly using "),Q_e=n(cDe,"CODE",{});var H0t=s(Q_e);aar=r(H0t,"__init__()"),H0t.forEach(t),nar=r(cDe," (throws an error)."),cDe.forEach(t),sar=i(cl),Ct=n(cl,"DIV",{class:!0});var nw=s(Ct);T(NL.$$.fragment,nw),lar=i(nw),H_e=n(nw,"P",{});var U0t=s(H_e);iar=r(U0t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),U0t.forEach(t),dar=i(nw),Pd=n(nw,"P",{});var RZ=s(Pd);car=r(RZ,`Note:
Loading a model from its configuration file does `),U_e=n(RZ,"STRONG",{});var J0t=s(U_e);far=r(J0t,"not"),J0t.forEach(t),mar=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(RZ,"A",{href:!0});var Y0t=s(Mz);gar=r(Y0t,"from_pretrained()"),Y0t.forEach(t),har=r(RZ," to load the model weights."),RZ.forEach(t),par=i(nw),T(C6.$$.fragment,nw),nw.forEach(t),uar=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(jL.$$.fragment,Ta),_ar=i(Ta),J_e=n(Ta,"P",{});var K0t=s(J_e);bar=r(K0t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),K0t.forEach(t),Far=i(Ta),Ha=n(Ta,"P",{});var sw=s(Ha);Tar=r(sw,"The model class to instantiate is selected based on the "),Y_e=n(sw,"CODE",{});var Z0t=s(Y_e);Mar=r(Z0t,"model_type"),Z0t.forEach(t),Ear=r(sw,` property of the config object (either
passed as an argument or loaded from `),K_e=n(sw,"CODE",{});var e1t=s(K_e);Car=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),war=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(sw,"CODE",{});var o1t=s(Z_e);Aar=r(o1t,"pretrained_model_name_or_path"),o1t.forEach(t),yar=r(sw,":"),sw.forEach(t),Lar=i(Ta),e0e=n(Ta,"UL",{});var r1t=s(e0e);w6=n(r1t,"LI",{});var mke=s(w6);o0e=n(mke,"STRONG",{});var t1t=s(o0e);xar=r(t1t,"detr"),t1t.forEach(t),$ar=r(mke," \u2014 "),Ez=n(mke,"A",{href:!0});var a1t=s(Ez);kar=r(a1t,"DetrForSegmentation"),a1t.forEach(t),Sar=r(mke," (DETR model)"),mke.forEach(t),r1t.forEach(t),Rar=i(Ta),A6=n(Ta,"P",{});var gke=s(A6);Par=r(gke,"The model is set in evaluation mode by default using "),r0e=n(gke,"CODE",{});var n1t=s(r0e);Bar=r(n1t,"model.eval()"),n1t.forEach(t),Iar=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t0e=n(gke,"CODE",{});var s1t=s(t0e);qar=r(s1t,"model.train()"),s1t.forEach(t),gke.forEach(t),Nar=i(Ta),T(y6.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),nNe=i(f),Bd=n(f,"H2",{class:!0});var fDe=s(Bd);L6=n(fDe,"A",{id:!0,class:!0,href:!0});var l1t=s(L6);a0e=n(l1t,"SPAN",{});var i1t=s(a0e);T(DL.$$.fragment,i1t),i1t.forEach(t),l1t.forEach(t),jar=i(fDe),n0e=n(fDe,"SPAN",{});var d1t=s(n0e);Dar=r(d1t,"AutoModelForSemanticSegmentation"),d1t.forEach(t),fDe.forEach(t),sNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(GL.$$.fragment,fl),Gar=i(fl),Id=n(fl,"P",{});var PZ=s(Id);Oar=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cz=n(PZ,"A",{href:!0});var c1t=s(Cz);Var=r(c1t,"from_pretrained()"),c1t.forEach(t),Xar=r(PZ," class method or the "),wz=n(PZ,"A",{href:!0});var f1t=s(wz);zar=r(f1t,"from_config()"),f1t.forEach(t),War=r(PZ,` class
method.`),PZ.forEach(t),Qar=i(fl),OL=n(fl,"P",{});var mDe=s(OL);Har=r(mDe,"This class cannot be instantiated directly using "),s0e=n(mDe,"CODE",{});var m1t=s(s0e);Uar=r(m1t,"__init__()"),m1t.forEach(t),Jar=r(mDe," (throws an error)."),mDe.forEach(t),Yar=i(fl),wt=n(fl,"DIV",{class:!0});var lw=s(wt);T(VL.$$.fragment,lw),Kar=i(lw),l0e=n(lw,"P",{});var g1t=s(l0e);Zar=r(g1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),g1t.forEach(t),enr=i(lw),qd=n(lw,"P",{});var BZ=s(qd);onr=r(BZ,`Note:
Loading a model from its configuration file does `),i0e=n(BZ,"STRONG",{});var h1t=s(i0e);rnr=r(h1t,"not"),h1t.forEach(t),tnr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(BZ,"A",{href:!0});var p1t=s(Az);anr=r(p1t,"from_pretrained()"),p1t.forEach(t),nnr=r(BZ," to load the model weights."),BZ.forEach(t),snr=i(lw),T(x6.$$.fragment,lw),lw.forEach(t),lnr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(XL.$$.fragment,Ma),inr=i(Ma),d0e=n(Ma,"P",{});var u1t=s(d0e);dnr=r(u1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),u1t.forEach(t),cnr=i(Ma),Ua=n(Ma,"P",{});var iw=s(Ua);fnr=r(iw,"The model class to instantiate is selected based on the "),c0e=n(iw,"CODE",{});var _1t=s(c0e);mnr=r(_1t,"model_type"),_1t.forEach(t),gnr=r(iw,` property of the config object (either
passed as an argument or loaded from `),f0e=n(iw,"CODE",{});var b1t=s(f0e);hnr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),pnr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(iw,"CODE",{});var v1t=s(m0e);unr=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),_nr=r(iw,":"),iw.forEach(t),bnr=i(Ma),Ja=n(Ma,"UL",{});var dw=s(Ja);$6=n(dw,"LI",{});var hke=s($6);g0e=n(hke,"STRONG",{});var F1t=s(g0e);vnr=r(F1t,"beit"),F1t.forEach(t),Fnr=r(hke," \u2014 "),yz=n(hke,"A",{href:!0});var T1t=s(yz);Tnr=r(T1t,"BeitForSemanticSegmentation"),T1t.forEach(t),Mnr=r(hke," (BEiT model)"),hke.forEach(t),Enr=i(dw),k6=n(dw,"LI",{});var pke=s(k6);h0e=n(pke,"STRONG",{});var M1t=s(h0e);Cnr=r(M1t,"data2vec-vision"),M1t.forEach(t),wnr=r(pke," \u2014 "),Lz=n(pke,"A",{href:!0});var E1t=s(Lz);Anr=r(E1t,"Data2VecVisionForSemanticSegmentation"),E1t.forEach(t),ynr=r(pke," (Data2VecVision model)"),pke.forEach(t),Lnr=i(dw),S6=n(dw,"LI",{});var uke=s(S6);p0e=n(uke,"STRONG",{});var C1t=s(p0e);xnr=r(C1t,"dpt"),C1t.forEach(t),$nr=r(uke," \u2014 "),xz=n(uke,"A",{href:!0});var w1t=s(xz);knr=r(w1t,"DPTForSemanticSegmentation"),w1t.forEach(t),Snr=r(uke," (DPT model)"),uke.forEach(t),Rnr=i(dw),R6=n(dw,"LI",{});var _ke=s(R6);u0e=n(_ke,"STRONG",{});var A1t=s(u0e);Pnr=r(A1t,"segformer"),A1t.forEach(t),Bnr=r(_ke," \u2014 "),$z=n(_ke,"A",{href:!0});var y1t=s($z);Inr=r(y1t,"SegformerForSemanticSegmentation"),y1t.forEach(t),qnr=r(_ke," (SegFormer model)"),_ke.forEach(t),dw.forEach(t),Nnr=i(Ma),P6=n(Ma,"P",{});var bke=s(P6);jnr=r(bke,"The model is set in evaluation mode by default using "),_0e=n(bke,"CODE",{});var L1t=s(_0e);Dnr=r(L1t,"model.eval()"),L1t.forEach(t),Gnr=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b0e=n(bke,"CODE",{});var x1t=s(b0e);Onr=r(x1t,"model.train()"),x1t.forEach(t),bke.forEach(t),Vnr=i(Ma),T(B6.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),lNe=i(f),Nd=n(f,"H2",{class:!0});var gDe=s(Nd);I6=n(gDe,"A",{id:!0,class:!0,href:!0});var $1t=s(I6);v0e=n($1t,"SPAN",{});var k1t=s(v0e);T(zL.$$.fragment,k1t),k1t.forEach(t),$1t.forEach(t),Xnr=i(gDe),F0e=n(gDe,"SPAN",{});var S1t=s(F0e);znr=r(S1t,"AutoModelForInstanceSegmentation"),S1t.forEach(t),gDe.forEach(t),iNe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(WL.$$.fragment,ml),Wnr=i(ml),jd=n(ml,"P",{});var IZ=s(jd);Qnr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kz=n(IZ,"A",{href:!0});var R1t=s(kz);Hnr=r(R1t,"from_pretrained()"),R1t.forEach(t),Unr=r(IZ," class method or the "),Sz=n(IZ,"A",{href:!0});var P1t=s(Sz);Jnr=r(P1t,"from_config()"),P1t.forEach(t),Ynr=r(IZ,` class
method.`),IZ.forEach(t),Knr=i(ml),QL=n(ml,"P",{});var hDe=s(QL);Znr=r(hDe,"This class cannot be instantiated directly using "),T0e=n(hDe,"CODE",{});var B1t=s(T0e);esr=r(B1t,"__init__()"),B1t.forEach(t),osr=r(hDe," (throws an error)."),hDe.forEach(t),rsr=i(ml),At=n(ml,"DIV",{class:!0});var cw=s(At);T(HL.$$.fragment,cw),tsr=i(cw),M0e=n(cw,"P",{});var I1t=s(M0e);asr=r(I1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),I1t.forEach(t),nsr=i(cw),Dd=n(cw,"P",{});var qZ=s(Dd);ssr=r(qZ,`Note:
Loading a model from its configuration file does `),E0e=n(qZ,"STRONG",{});var q1t=s(E0e);lsr=r(q1t,"not"),q1t.forEach(t),isr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(qZ,"A",{href:!0});var N1t=s(Rz);dsr=r(N1t,"from_pretrained()"),N1t.forEach(t),csr=r(qZ," to load the model weights."),qZ.forEach(t),fsr=i(cw),T(q6.$$.fragment,cw),cw.forEach(t),msr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(UL.$$.fragment,Ea),gsr=i(Ea),C0e=n(Ea,"P",{});var j1t=s(C0e);hsr=r(j1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),j1t.forEach(t),psr=i(Ea),Ya=n(Ea,"P",{});var fw=s(Ya);usr=r(fw,"The model class to instantiate is selected based on the "),w0e=n(fw,"CODE",{});var D1t=s(w0e);_sr=r(D1t,"model_type"),D1t.forEach(t),bsr=r(fw,` property of the config object (either
passed as an argument or loaded from `),A0e=n(fw,"CODE",{});var G1t=s(A0e);vsr=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),Fsr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(fw,"CODE",{});var O1t=s(y0e);Tsr=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),Msr=r(fw,":"),fw.forEach(t),Esr=i(Ea),L0e=n(Ea,"UL",{});var V1t=s(L0e);N6=n(V1t,"LI",{});var vke=s(N6);x0e=n(vke,"STRONG",{});var X1t=s(x0e);Csr=r(X1t,"maskformer"),X1t.forEach(t),wsr=r(vke," \u2014 "),Pz=n(vke,"A",{href:!0});var z1t=s(Pz);Asr=r(z1t,"MaskFormerForInstanceSegmentation"),z1t.forEach(t),ysr=r(vke," (MaskFormer model)"),vke.forEach(t),V1t.forEach(t),Lsr=i(Ea),j6=n(Ea,"P",{});var Fke=s(j6);xsr=r(Fke,"The model is set in evaluation mode by default using "),$0e=n(Fke,"CODE",{});var W1t=s($0e);$sr=r(W1t,"model.eval()"),W1t.forEach(t),ksr=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k0e=n(Fke,"CODE",{});var Q1t=s(k0e);Ssr=r(Q1t,"model.train()"),Q1t.forEach(t),Fke.forEach(t),Rsr=i(Ea),T(D6.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),dNe=i(f),Gd=n(f,"H2",{class:!0});var pDe=s(Gd);G6=n(pDe,"A",{id:!0,class:!0,href:!0});var H1t=s(G6);S0e=n(H1t,"SPAN",{});var U1t=s(S0e);T(JL.$$.fragment,U1t),U1t.forEach(t),H1t.forEach(t),Psr=i(pDe),R0e=n(pDe,"SPAN",{});var J1t=s(R0e);Bsr=r(J1t,"TFAutoModel"),J1t.forEach(t),pDe.forEach(t),cNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(YL.$$.fragment,gl),Isr=i(gl),Od=n(gl,"P",{});var NZ=s(Od);qsr=r(NZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Bz=n(NZ,"A",{href:!0});var Y1t=s(Bz);Nsr=r(Y1t,"from_pretrained()"),Y1t.forEach(t),jsr=r(NZ," class method or the "),Iz=n(NZ,"A",{href:!0});var K1t=s(Iz);Dsr=r(K1t,"from_config()"),K1t.forEach(t),Gsr=r(NZ,` class
method.`),NZ.forEach(t),Osr=i(gl),KL=n(gl,"P",{});var uDe=s(KL);Vsr=r(uDe,"This class cannot be instantiated directly using "),P0e=n(uDe,"CODE",{});var Z1t=s(P0e);Xsr=r(Z1t,"__init__()"),Z1t.forEach(t),zsr=r(uDe," (throws an error)."),uDe.forEach(t),Wsr=i(gl),yt=n(gl,"DIV",{class:!0});var mw=s(yt);T(ZL.$$.fragment,mw),Qsr=i(mw),B0e=n(mw,"P",{});var ebt=s(B0e);Hsr=r(ebt,"Instantiates one of the base model classes of the library from a configuration."),ebt.forEach(t),Usr=i(mw),Vd=n(mw,"P",{});var jZ=s(Vd);Jsr=r(jZ,`Note:
Loading a model from its configuration file does `),I0e=n(jZ,"STRONG",{});var obt=s(I0e);Ysr=r(obt,"not"),obt.forEach(t),Ksr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(jZ,"A",{href:!0});var rbt=s(qz);Zsr=r(rbt,"from_pretrained()"),rbt.forEach(t),elr=r(jZ," to load the model weights."),jZ.forEach(t),olr=i(mw),T(O6.$$.fragment,mw),mw.forEach(t),rlr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(e8.$$.fragment,hl),tlr=i(hl),q0e=n(hl,"P",{});var tbt=s(q0e);alr=r(tbt,"Instantiate one of the base model classes of the library from a pretrained model."),tbt.forEach(t),nlr=i(hl),Ka=n(hl,"P",{});var gw=s(Ka);slr=r(gw,"The model class to instantiate is selected based on the "),N0e=n(gw,"CODE",{});var abt=s(N0e);llr=r(abt,"model_type"),abt.forEach(t),ilr=r(gw,` property of the config object (either
passed as an argument or loaded from `),j0e=n(gw,"CODE",{});var nbt=s(j0e);dlr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),clr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(gw,"CODE",{});var sbt=s(D0e);flr=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),mlr=r(gw,":"),gw.forEach(t),glr=i(hl),N=n(hl,"UL",{});var D=s(N);V6=n(D,"LI",{});var Tke=s(V6);G0e=n(Tke,"STRONG",{});var lbt=s(G0e);hlr=r(lbt,"albert"),lbt.forEach(t),plr=r(Tke," \u2014 "),Nz=n(Tke,"A",{href:!0});var ibt=s(Nz);ulr=r(ibt,"TFAlbertModel"),ibt.forEach(t),_lr=r(Tke," (ALBERT model)"),Tke.forEach(t),blr=i(D),X6=n(D,"LI",{});var Mke=s(X6);O0e=n(Mke,"STRONG",{});var dbt=s(O0e);vlr=r(dbt,"bart"),dbt.forEach(t),Flr=r(Mke," \u2014 "),jz=n(Mke,"A",{href:!0});var cbt=s(jz);Tlr=r(cbt,"TFBartModel"),cbt.forEach(t),Mlr=r(Mke," (BART model)"),Mke.forEach(t),Elr=i(D),z6=n(D,"LI",{});var Eke=s(z6);V0e=n(Eke,"STRONG",{});var fbt=s(V0e);Clr=r(fbt,"bert"),fbt.forEach(t),wlr=r(Eke," \u2014 "),Dz=n(Eke,"A",{href:!0});var mbt=s(Dz);Alr=r(mbt,"TFBertModel"),mbt.forEach(t),ylr=r(Eke," (BERT model)"),Eke.forEach(t),Llr=i(D),W6=n(D,"LI",{});var Cke=s(W6);X0e=n(Cke,"STRONG",{});var gbt=s(X0e);xlr=r(gbt,"blenderbot"),gbt.forEach(t),$lr=r(Cke," \u2014 "),Gz=n(Cke,"A",{href:!0});var hbt=s(Gz);klr=r(hbt,"TFBlenderbotModel"),hbt.forEach(t),Slr=r(Cke," (Blenderbot model)"),Cke.forEach(t),Rlr=i(D),Q6=n(D,"LI",{});var wke=s(Q6);z0e=n(wke,"STRONG",{});var pbt=s(z0e);Plr=r(pbt,"blenderbot-small"),pbt.forEach(t),Blr=r(wke," \u2014 "),Oz=n(wke,"A",{href:!0});var ubt=s(Oz);Ilr=r(ubt,"TFBlenderbotSmallModel"),ubt.forEach(t),qlr=r(wke," (BlenderbotSmall model)"),wke.forEach(t),Nlr=i(D),H6=n(D,"LI",{});var Ake=s(H6);W0e=n(Ake,"STRONG",{});var _bt=s(W0e);jlr=r(_bt,"camembert"),_bt.forEach(t),Dlr=r(Ake," \u2014 "),Vz=n(Ake,"A",{href:!0});var bbt=s(Vz);Glr=r(bbt,"TFCamembertModel"),bbt.forEach(t),Olr=r(Ake," (CamemBERT model)"),Ake.forEach(t),Vlr=i(D),U6=n(D,"LI",{});var yke=s(U6);Q0e=n(yke,"STRONG",{});var vbt=s(Q0e);Xlr=r(vbt,"clip"),vbt.forEach(t),zlr=r(yke," \u2014 "),Xz=n(yke,"A",{href:!0});var Fbt=s(Xz);Wlr=r(Fbt,"TFCLIPModel"),Fbt.forEach(t),Qlr=r(yke," (CLIP model)"),yke.forEach(t),Hlr=i(D),J6=n(D,"LI",{});var Lke=s(J6);H0e=n(Lke,"STRONG",{});var Tbt=s(H0e);Ulr=r(Tbt,"convbert"),Tbt.forEach(t),Jlr=r(Lke," \u2014 "),zz=n(Lke,"A",{href:!0});var Mbt=s(zz);Ylr=r(Mbt,"TFConvBertModel"),Mbt.forEach(t),Klr=r(Lke," (ConvBERT model)"),Lke.forEach(t),Zlr=i(D),Y6=n(D,"LI",{});var xke=s(Y6);U0e=n(xke,"STRONG",{});var Ebt=s(U0e);eir=r(Ebt,"convnext"),Ebt.forEach(t),oir=r(xke," \u2014 "),Wz=n(xke,"A",{href:!0});var Cbt=s(Wz);rir=r(Cbt,"TFConvNextModel"),Cbt.forEach(t),tir=r(xke," (ConvNext model)"),xke.forEach(t),air=i(D),K6=n(D,"LI",{});var $ke=s(K6);J0e=n($ke,"STRONG",{});var wbt=s(J0e);nir=r(wbt,"ctrl"),wbt.forEach(t),sir=r($ke," \u2014 "),Qz=n($ke,"A",{href:!0});var Abt=s(Qz);lir=r(Abt,"TFCTRLModel"),Abt.forEach(t),iir=r($ke," (CTRL model)"),$ke.forEach(t),dir=i(D),Z6=n(D,"LI",{});var kke=s(Z6);Y0e=n(kke,"STRONG",{});var ybt=s(Y0e);cir=r(ybt,"data2vec-vision"),ybt.forEach(t),fir=r(kke," \u2014 "),Hz=n(kke,"A",{href:!0});var Lbt=s(Hz);mir=r(Lbt,"TFData2VecVisionModel"),Lbt.forEach(t),gir=r(kke," (Data2VecVision model)"),kke.forEach(t),hir=i(D),eT=n(D,"LI",{});var Ske=s(eT);K0e=n(Ske,"STRONG",{});var xbt=s(K0e);pir=r(xbt,"deberta"),xbt.forEach(t),uir=r(Ske," \u2014 "),Uz=n(Ske,"A",{href:!0});var $bt=s(Uz);_ir=r($bt,"TFDebertaModel"),$bt.forEach(t),bir=r(Ske," (DeBERTa model)"),Ske.forEach(t),vir=i(D),oT=n(D,"LI",{});var Rke=s(oT);Z0e=n(Rke,"STRONG",{});var kbt=s(Z0e);Fir=r(kbt,"deberta-v2"),kbt.forEach(t),Tir=r(Rke," \u2014 "),Jz=n(Rke,"A",{href:!0});var Sbt=s(Jz);Mir=r(Sbt,"TFDebertaV2Model"),Sbt.forEach(t),Eir=r(Rke," (DeBERTa-v2 model)"),Rke.forEach(t),Cir=i(D),rT=n(D,"LI",{});var Pke=s(rT);e1e=n(Pke,"STRONG",{});var Rbt=s(e1e);wir=r(Rbt,"distilbert"),Rbt.forEach(t),Air=r(Pke," \u2014 "),Yz=n(Pke,"A",{href:!0});var Pbt=s(Yz);yir=r(Pbt,"TFDistilBertModel"),Pbt.forEach(t),Lir=r(Pke," (DistilBERT model)"),Pke.forEach(t),xir=i(D),tT=n(D,"LI",{});var Bke=s(tT);o1e=n(Bke,"STRONG",{});var Bbt=s(o1e);$ir=r(Bbt,"dpr"),Bbt.forEach(t),kir=r(Bke," \u2014 "),Kz=n(Bke,"A",{href:!0});var Ibt=s(Kz);Sir=r(Ibt,"TFDPRQuestionEncoder"),Ibt.forEach(t),Rir=r(Bke," (DPR model)"),Bke.forEach(t),Pir=i(D),aT=n(D,"LI",{});var Ike=s(aT);r1e=n(Ike,"STRONG",{});var qbt=s(r1e);Bir=r(qbt,"electra"),qbt.forEach(t),Iir=r(Ike," \u2014 "),Zz=n(Ike,"A",{href:!0});var Nbt=s(Zz);qir=r(Nbt,"TFElectraModel"),Nbt.forEach(t),Nir=r(Ike," (ELECTRA model)"),Ike.forEach(t),jir=i(D),nT=n(D,"LI",{});var qke=s(nT);t1e=n(qke,"STRONG",{});var jbt=s(t1e);Dir=r(jbt,"flaubert"),jbt.forEach(t),Gir=r(qke," \u2014 "),eW=n(qke,"A",{href:!0});var Dbt=s(eW);Oir=r(Dbt,"TFFlaubertModel"),Dbt.forEach(t),Vir=r(qke," (FlauBERT model)"),qke.forEach(t),Xir=i(D),Is=n(D,"LI",{});var S$=s(Is);a1e=n(S$,"STRONG",{});var Gbt=s(a1e);zir=r(Gbt,"funnel"),Gbt.forEach(t),Wir=r(S$," \u2014 "),oW=n(S$,"A",{href:!0});var Obt=s(oW);Qir=r(Obt,"TFFunnelModel"),Obt.forEach(t),Hir=r(S$," or "),rW=n(S$,"A",{href:!0});var Vbt=s(rW);Uir=r(Vbt,"TFFunnelBaseModel"),Vbt.forEach(t),Jir=r(S$," (Funnel Transformer model)"),S$.forEach(t),Yir=i(D),sT=n(D,"LI",{});var Nke=s(sT);n1e=n(Nke,"STRONG",{});var Xbt=s(n1e);Kir=r(Xbt,"gpt2"),Xbt.forEach(t),Zir=r(Nke," \u2014 "),tW=n(Nke,"A",{href:!0});var zbt=s(tW);edr=r(zbt,"TFGPT2Model"),zbt.forEach(t),odr=r(Nke," (OpenAI GPT-2 model)"),Nke.forEach(t),rdr=i(D),lT=n(D,"LI",{});var jke=s(lT);s1e=n(jke,"STRONG",{});var Wbt=s(s1e);tdr=r(Wbt,"gptj"),Wbt.forEach(t),adr=r(jke," \u2014 "),aW=n(jke,"A",{href:!0});var Qbt=s(aW);ndr=r(Qbt,"TFGPTJModel"),Qbt.forEach(t),sdr=r(jke," (GPT-J model)"),jke.forEach(t),ldr=i(D),iT=n(D,"LI",{});var Dke=s(iT);l1e=n(Dke,"STRONG",{});var Hbt=s(l1e);idr=r(Hbt,"hubert"),Hbt.forEach(t),ddr=r(Dke," \u2014 "),nW=n(Dke,"A",{href:!0});var Ubt=s(nW);cdr=r(Ubt,"TFHubertModel"),Ubt.forEach(t),fdr=r(Dke," (Hubert model)"),Dke.forEach(t),mdr=i(D),dT=n(D,"LI",{});var Gke=s(dT);i1e=n(Gke,"STRONG",{});var Jbt=s(i1e);gdr=r(Jbt,"layoutlm"),Jbt.forEach(t),hdr=r(Gke," \u2014 "),sW=n(Gke,"A",{href:!0});var Ybt=s(sW);pdr=r(Ybt,"TFLayoutLMModel"),Ybt.forEach(t),udr=r(Gke," (LayoutLM model)"),Gke.forEach(t),_dr=i(D),cT=n(D,"LI",{});var Oke=s(cT);d1e=n(Oke,"STRONG",{});var Kbt=s(d1e);bdr=r(Kbt,"led"),Kbt.forEach(t),vdr=r(Oke," \u2014 "),lW=n(Oke,"A",{href:!0});var Zbt=s(lW);Fdr=r(Zbt,"TFLEDModel"),Zbt.forEach(t),Tdr=r(Oke," (LED model)"),Oke.forEach(t),Mdr=i(D),fT=n(D,"LI",{});var Vke=s(fT);c1e=n(Vke,"STRONG",{});var e2t=s(c1e);Edr=r(e2t,"longformer"),e2t.forEach(t),Cdr=r(Vke," \u2014 "),iW=n(Vke,"A",{href:!0});var o2t=s(iW);wdr=r(o2t,"TFLongformerModel"),o2t.forEach(t),Adr=r(Vke," (Longformer model)"),Vke.forEach(t),ydr=i(D),mT=n(D,"LI",{});var Xke=s(mT);f1e=n(Xke,"STRONG",{});var r2t=s(f1e);Ldr=r(r2t,"lxmert"),r2t.forEach(t),xdr=r(Xke," \u2014 "),dW=n(Xke,"A",{href:!0});var t2t=s(dW);$dr=r(t2t,"TFLxmertModel"),t2t.forEach(t),kdr=r(Xke," (LXMERT model)"),Xke.forEach(t),Sdr=i(D),gT=n(D,"LI",{});var zke=s(gT);m1e=n(zke,"STRONG",{});var a2t=s(m1e);Rdr=r(a2t,"marian"),a2t.forEach(t),Pdr=r(zke," \u2014 "),cW=n(zke,"A",{href:!0});var n2t=s(cW);Bdr=r(n2t,"TFMarianModel"),n2t.forEach(t),Idr=r(zke," (Marian model)"),zke.forEach(t),qdr=i(D),hT=n(D,"LI",{});var Wke=s(hT);g1e=n(Wke,"STRONG",{});var s2t=s(g1e);Ndr=r(s2t,"mbart"),s2t.forEach(t),jdr=r(Wke," \u2014 "),fW=n(Wke,"A",{href:!0});var l2t=s(fW);Ddr=r(l2t,"TFMBartModel"),l2t.forEach(t),Gdr=r(Wke," (mBART model)"),Wke.forEach(t),Odr=i(D),pT=n(D,"LI",{});var Qke=s(pT);h1e=n(Qke,"STRONG",{});var i2t=s(h1e);Vdr=r(i2t,"mobilebert"),i2t.forEach(t),Xdr=r(Qke," \u2014 "),mW=n(Qke,"A",{href:!0});var d2t=s(mW);zdr=r(d2t,"TFMobileBertModel"),d2t.forEach(t),Wdr=r(Qke," (MobileBERT model)"),Qke.forEach(t),Qdr=i(D),uT=n(D,"LI",{});var Hke=s(uT);p1e=n(Hke,"STRONG",{});var c2t=s(p1e);Hdr=r(c2t,"mpnet"),c2t.forEach(t),Udr=r(Hke," \u2014 "),gW=n(Hke,"A",{href:!0});var f2t=s(gW);Jdr=r(f2t,"TFMPNetModel"),f2t.forEach(t),Ydr=r(Hke," (MPNet model)"),Hke.forEach(t),Kdr=i(D),_T=n(D,"LI",{});var Uke=s(_T);u1e=n(Uke,"STRONG",{});var m2t=s(u1e);Zdr=r(m2t,"mt5"),m2t.forEach(t),ecr=r(Uke," \u2014 "),hW=n(Uke,"A",{href:!0});var g2t=s(hW);ocr=r(g2t,"TFMT5Model"),g2t.forEach(t),rcr=r(Uke," (mT5 model)"),Uke.forEach(t),tcr=i(D),bT=n(D,"LI",{});var Jke=s(bT);_1e=n(Jke,"STRONG",{});var h2t=s(_1e);acr=r(h2t,"openai-gpt"),h2t.forEach(t),ncr=r(Jke," \u2014 "),pW=n(Jke,"A",{href:!0});var p2t=s(pW);scr=r(p2t,"TFOpenAIGPTModel"),p2t.forEach(t),lcr=r(Jke," (OpenAI GPT model)"),Jke.forEach(t),icr=i(D),vT=n(D,"LI",{});var Yke=s(vT);b1e=n(Yke,"STRONG",{});var u2t=s(b1e);dcr=r(u2t,"pegasus"),u2t.forEach(t),ccr=r(Yke," \u2014 "),uW=n(Yke,"A",{href:!0});var _2t=s(uW);fcr=r(_2t,"TFPegasusModel"),_2t.forEach(t),mcr=r(Yke," (Pegasus model)"),Yke.forEach(t),gcr=i(D),FT=n(D,"LI",{});var Kke=s(FT);v1e=n(Kke,"STRONG",{});var b2t=s(v1e);hcr=r(b2t,"rembert"),b2t.forEach(t),pcr=r(Kke," \u2014 "),_W=n(Kke,"A",{href:!0});var v2t=s(_W);ucr=r(v2t,"TFRemBertModel"),v2t.forEach(t),_cr=r(Kke," (RemBERT model)"),Kke.forEach(t),bcr=i(D),TT=n(D,"LI",{});var Zke=s(TT);F1e=n(Zke,"STRONG",{});var F2t=s(F1e);vcr=r(F2t,"roberta"),F2t.forEach(t),Fcr=r(Zke," \u2014 "),bW=n(Zke,"A",{href:!0});var T2t=s(bW);Tcr=r(T2t,"TFRobertaModel"),T2t.forEach(t),Mcr=r(Zke," (RoBERTa model)"),Zke.forEach(t),Ecr=i(D),MT=n(D,"LI",{});var eSe=s(MT);T1e=n(eSe,"STRONG",{});var M2t=s(T1e);Ccr=r(M2t,"roformer"),M2t.forEach(t),wcr=r(eSe," \u2014 "),vW=n(eSe,"A",{href:!0});var E2t=s(vW);Acr=r(E2t,"TFRoFormerModel"),E2t.forEach(t),ycr=r(eSe," (RoFormer model)"),eSe.forEach(t),Lcr=i(D),ET=n(D,"LI",{});var oSe=s(ET);M1e=n(oSe,"STRONG",{});var C2t=s(M1e);xcr=r(C2t,"speech_to_text"),C2t.forEach(t),$cr=r(oSe," \u2014 "),FW=n(oSe,"A",{href:!0});var w2t=s(FW);kcr=r(w2t,"TFSpeech2TextModel"),w2t.forEach(t),Scr=r(oSe," (Speech2Text model)"),oSe.forEach(t),Rcr=i(D),CT=n(D,"LI",{});var rSe=s(CT);E1e=n(rSe,"STRONG",{});var A2t=s(E1e);Pcr=r(A2t,"swin"),A2t.forEach(t),Bcr=r(rSe," \u2014 "),TW=n(rSe,"A",{href:!0});var y2t=s(TW);Icr=r(y2t,"TFSwinModel"),y2t.forEach(t),qcr=r(rSe," (Swin model)"),rSe.forEach(t),Ncr=i(D),wT=n(D,"LI",{});var tSe=s(wT);C1e=n(tSe,"STRONG",{});var L2t=s(C1e);jcr=r(L2t,"t5"),L2t.forEach(t),Dcr=r(tSe," \u2014 "),MW=n(tSe,"A",{href:!0});var x2t=s(MW);Gcr=r(x2t,"TFT5Model"),x2t.forEach(t),Ocr=r(tSe," (T5 model)"),tSe.forEach(t),Vcr=i(D),AT=n(D,"LI",{});var aSe=s(AT);w1e=n(aSe,"STRONG",{});var $2t=s(w1e);Xcr=r($2t,"tapas"),$2t.forEach(t),zcr=r(aSe," \u2014 "),EW=n(aSe,"A",{href:!0});var k2t=s(EW);Wcr=r(k2t,"TFTapasModel"),k2t.forEach(t),Qcr=r(aSe," (TAPAS model)"),aSe.forEach(t),Hcr=i(D),yT=n(D,"LI",{});var nSe=s(yT);A1e=n(nSe,"STRONG",{});var S2t=s(A1e);Ucr=r(S2t,"transfo-xl"),S2t.forEach(t),Jcr=r(nSe," \u2014 "),CW=n(nSe,"A",{href:!0});var R2t=s(CW);Ycr=r(R2t,"TFTransfoXLModel"),R2t.forEach(t),Kcr=r(nSe," (Transformer-XL model)"),nSe.forEach(t),Zcr=i(D),LT=n(D,"LI",{});var sSe=s(LT);y1e=n(sSe,"STRONG",{});var P2t=s(y1e);efr=r(P2t,"vit"),P2t.forEach(t),ofr=r(sSe," \u2014 "),wW=n(sSe,"A",{href:!0});var B2t=s(wW);rfr=r(B2t,"TFViTModel"),B2t.forEach(t),tfr=r(sSe," (ViT model)"),sSe.forEach(t),afr=i(D),xT=n(D,"LI",{});var lSe=s(xT);L1e=n(lSe,"STRONG",{});var I2t=s(L1e);nfr=r(I2t,"vit_mae"),I2t.forEach(t),sfr=r(lSe," \u2014 "),AW=n(lSe,"A",{href:!0});var q2t=s(AW);lfr=r(q2t,"TFViTMAEModel"),q2t.forEach(t),ifr=r(lSe," (ViTMAE model)"),lSe.forEach(t),dfr=i(D),$T=n(D,"LI",{});var iSe=s($T);x1e=n(iSe,"STRONG",{});var N2t=s(x1e);cfr=r(N2t,"wav2vec2"),N2t.forEach(t),ffr=r(iSe," \u2014 "),yW=n(iSe,"A",{href:!0});var j2t=s(yW);mfr=r(j2t,"TFWav2Vec2Model"),j2t.forEach(t),gfr=r(iSe," (Wav2Vec2 model)"),iSe.forEach(t),hfr=i(D),kT=n(D,"LI",{});var dSe=s(kT);$1e=n(dSe,"STRONG",{});var D2t=s($1e);pfr=r(D2t,"xlm"),D2t.forEach(t),ufr=r(dSe," \u2014 "),LW=n(dSe,"A",{href:!0});var G2t=s(LW);_fr=r(G2t,"TFXLMModel"),G2t.forEach(t),bfr=r(dSe," (XLM model)"),dSe.forEach(t),vfr=i(D),ST=n(D,"LI",{});var cSe=s(ST);k1e=n(cSe,"STRONG",{});var O2t=s(k1e);Ffr=r(O2t,"xlm-roberta"),O2t.forEach(t),Tfr=r(cSe," \u2014 "),xW=n(cSe,"A",{href:!0});var V2t=s(xW);Mfr=r(V2t,"TFXLMRobertaModel"),V2t.forEach(t),Efr=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),Cfr=i(D),RT=n(D,"LI",{});var fSe=s(RT);S1e=n(fSe,"STRONG",{});var X2t=s(S1e);wfr=r(X2t,"xlnet"),X2t.forEach(t),Afr=r(fSe," \u2014 "),$W=n(fSe,"A",{href:!0});var z2t=s($W);yfr=r(z2t,"TFXLNetModel"),z2t.forEach(t),Lfr=r(fSe," (XLNet model)"),fSe.forEach(t),D.forEach(t),xfr=i(hl),T(PT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),fNe=i(f),Xd=n(f,"H2",{class:!0});var _De=s(Xd);BT=n(_De,"A",{id:!0,class:!0,href:!0});var W2t=s(BT);R1e=n(W2t,"SPAN",{});var Q2t=s(R1e);T(o8.$$.fragment,Q2t),Q2t.forEach(t),W2t.forEach(t),$fr=i(_De),P1e=n(_De,"SPAN",{});var H2t=s(P1e);kfr=r(H2t,"TFAutoModelForPreTraining"),H2t.forEach(t),_De.forEach(t),mNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(r8.$$.fragment,pl),Sfr=i(pl),zd=n(pl,"P",{});var DZ=s(zd);Rfr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=n(DZ,"A",{href:!0});var U2t=s(kW);Pfr=r(U2t,"from_pretrained()"),U2t.forEach(t),Bfr=r(DZ," class method or the "),SW=n(DZ,"A",{href:!0});var J2t=s(SW);Ifr=r(J2t,"from_config()"),J2t.forEach(t),qfr=r(DZ,` class
method.`),DZ.forEach(t),Nfr=i(pl),t8=n(pl,"P",{});var bDe=s(t8);jfr=r(bDe,"This class cannot be instantiated directly using "),B1e=n(bDe,"CODE",{});var Y2t=s(B1e);Dfr=r(Y2t,"__init__()"),Y2t.forEach(t),Gfr=r(bDe," (throws an error)."),bDe.forEach(t),Ofr=i(pl),Lt=n(pl,"DIV",{class:!0});var hw=s(Lt);T(a8.$$.fragment,hw),Vfr=i(hw),I1e=n(hw,"P",{});var K2t=s(I1e);Xfr=r(K2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K2t.forEach(t),zfr=i(hw),Wd=n(hw,"P",{});var GZ=s(Wd);Wfr=r(GZ,`Note:
Loading a model from its configuration file does `),q1e=n(GZ,"STRONG",{});var Z2t=s(q1e);Qfr=r(Z2t,"not"),Z2t.forEach(t),Hfr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(GZ,"A",{href:!0});var evt=s(RW);Ufr=r(evt,"from_pretrained()"),evt.forEach(t),Jfr=r(GZ," to load the model weights."),GZ.forEach(t),Yfr=i(hw),T(IT.$$.fragment,hw),hw.forEach(t),Kfr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(n8.$$.fragment,ul),Zfr=i(ul),N1e=n(ul,"P",{});var ovt=s(N1e);emr=r(ovt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ovt.forEach(t),omr=i(ul),Za=n(ul,"P",{});var pw=s(Za);rmr=r(pw,"The model class to instantiate is selected based on the "),j1e=n(pw,"CODE",{});var rvt=s(j1e);tmr=r(rvt,"model_type"),rvt.forEach(t),amr=r(pw,` property of the config object (either
passed as an argument or loaded from `),D1e=n(pw,"CODE",{});var tvt=s(D1e);nmr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),smr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(pw,"CODE",{});var avt=s(G1e);lmr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),imr=r(pw,":"),pw.forEach(t),dmr=i(ul),se=n(ul,"UL",{});var le=s(se);qT=n(le,"LI",{});var mSe=s(qT);O1e=n(mSe,"STRONG",{});var nvt=s(O1e);cmr=r(nvt,"albert"),nvt.forEach(t),fmr=r(mSe," \u2014 "),PW=n(mSe,"A",{href:!0});var svt=s(PW);mmr=r(svt,"TFAlbertForPreTraining"),svt.forEach(t),gmr=r(mSe," (ALBERT model)"),mSe.forEach(t),hmr=i(le),NT=n(le,"LI",{});var gSe=s(NT);V1e=n(gSe,"STRONG",{});var lvt=s(V1e);pmr=r(lvt,"bart"),lvt.forEach(t),umr=r(gSe," \u2014 "),BW=n(gSe,"A",{href:!0});var ivt=s(BW);_mr=r(ivt,"TFBartForConditionalGeneration"),ivt.forEach(t),bmr=r(gSe," (BART model)"),gSe.forEach(t),vmr=i(le),jT=n(le,"LI",{});var hSe=s(jT);X1e=n(hSe,"STRONG",{});var dvt=s(X1e);Fmr=r(dvt,"bert"),dvt.forEach(t),Tmr=r(hSe," \u2014 "),IW=n(hSe,"A",{href:!0});var cvt=s(IW);Mmr=r(cvt,"TFBertForPreTraining"),cvt.forEach(t),Emr=r(hSe," (BERT model)"),hSe.forEach(t),Cmr=i(le),DT=n(le,"LI",{});var pSe=s(DT);z1e=n(pSe,"STRONG",{});var fvt=s(z1e);wmr=r(fvt,"camembert"),fvt.forEach(t),Amr=r(pSe," \u2014 "),qW=n(pSe,"A",{href:!0});var mvt=s(qW);ymr=r(mvt,"TFCamembertForMaskedLM"),mvt.forEach(t),Lmr=r(pSe," (CamemBERT model)"),pSe.forEach(t),xmr=i(le),GT=n(le,"LI",{});var uSe=s(GT);W1e=n(uSe,"STRONG",{});var gvt=s(W1e);$mr=r(gvt,"ctrl"),gvt.forEach(t),kmr=r(uSe," \u2014 "),NW=n(uSe,"A",{href:!0});var hvt=s(NW);Smr=r(hvt,"TFCTRLLMHeadModel"),hvt.forEach(t),Rmr=r(uSe," (CTRL model)"),uSe.forEach(t),Pmr=i(le),OT=n(le,"LI",{});var _Se=s(OT);Q1e=n(_Se,"STRONG",{});var pvt=s(Q1e);Bmr=r(pvt,"distilbert"),pvt.forEach(t),Imr=r(_Se," \u2014 "),jW=n(_Se,"A",{href:!0});var uvt=s(jW);qmr=r(uvt,"TFDistilBertForMaskedLM"),uvt.forEach(t),Nmr=r(_Se," (DistilBERT model)"),_Se.forEach(t),jmr=i(le),VT=n(le,"LI",{});var bSe=s(VT);H1e=n(bSe,"STRONG",{});var _vt=s(H1e);Dmr=r(_vt,"electra"),_vt.forEach(t),Gmr=r(bSe," \u2014 "),DW=n(bSe,"A",{href:!0});var bvt=s(DW);Omr=r(bvt,"TFElectraForPreTraining"),bvt.forEach(t),Vmr=r(bSe," (ELECTRA model)"),bSe.forEach(t),Xmr=i(le),XT=n(le,"LI",{});var vSe=s(XT);U1e=n(vSe,"STRONG",{});var vvt=s(U1e);zmr=r(vvt,"flaubert"),vvt.forEach(t),Wmr=r(vSe," \u2014 "),GW=n(vSe,"A",{href:!0});var Fvt=s(GW);Qmr=r(Fvt,"TFFlaubertWithLMHeadModel"),Fvt.forEach(t),Hmr=r(vSe," (FlauBERT model)"),vSe.forEach(t),Umr=i(le),zT=n(le,"LI",{});var FSe=s(zT);J1e=n(FSe,"STRONG",{});var Tvt=s(J1e);Jmr=r(Tvt,"funnel"),Tvt.forEach(t),Ymr=r(FSe," \u2014 "),OW=n(FSe,"A",{href:!0});var Mvt=s(OW);Kmr=r(Mvt,"TFFunnelForPreTraining"),Mvt.forEach(t),Zmr=r(FSe," (Funnel Transformer model)"),FSe.forEach(t),egr=i(le),WT=n(le,"LI",{});var TSe=s(WT);Y1e=n(TSe,"STRONG",{});var Evt=s(Y1e);ogr=r(Evt,"gpt2"),Evt.forEach(t),rgr=r(TSe," \u2014 "),VW=n(TSe,"A",{href:!0});var Cvt=s(VW);tgr=r(Cvt,"TFGPT2LMHeadModel"),Cvt.forEach(t),agr=r(TSe," (OpenAI GPT-2 model)"),TSe.forEach(t),ngr=i(le),QT=n(le,"LI",{});var MSe=s(QT);K1e=n(MSe,"STRONG",{});var wvt=s(K1e);sgr=r(wvt,"layoutlm"),wvt.forEach(t),lgr=r(MSe," \u2014 "),XW=n(MSe,"A",{href:!0});var Avt=s(XW);igr=r(Avt,"TFLayoutLMForMaskedLM"),Avt.forEach(t),dgr=r(MSe," (LayoutLM model)"),MSe.forEach(t),cgr=i(le),HT=n(le,"LI",{});var ESe=s(HT);Z1e=n(ESe,"STRONG",{});var yvt=s(Z1e);fgr=r(yvt,"lxmert"),yvt.forEach(t),mgr=r(ESe," \u2014 "),zW=n(ESe,"A",{href:!0});var Lvt=s(zW);ggr=r(Lvt,"TFLxmertForPreTraining"),Lvt.forEach(t),hgr=r(ESe," (LXMERT model)"),ESe.forEach(t),pgr=i(le),UT=n(le,"LI",{});var CSe=s(UT);ebe=n(CSe,"STRONG",{});var xvt=s(ebe);ugr=r(xvt,"mobilebert"),xvt.forEach(t),_gr=r(CSe," \u2014 "),WW=n(CSe,"A",{href:!0});var $vt=s(WW);bgr=r($vt,"TFMobileBertForPreTraining"),$vt.forEach(t),vgr=r(CSe," (MobileBERT model)"),CSe.forEach(t),Fgr=i(le),JT=n(le,"LI",{});var wSe=s(JT);obe=n(wSe,"STRONG",{});var kvt=s(obe);Tgr=r(kvt,"mpnet"),kvt.forEach(t),Mgr=r(wSe," \u2014 "),QW=n(wSe,"A",{href:!0});var Svt=s(QW);Egr=r(Svt,"TFMPNetForMaskedLM"),Svt.forEach(t),Cgr=r(wSe," (MPNet model)"),wSe.forEach(t),wgr=i(le),YT=n(le,"LI",{});var ASe=s(YT);rbe=n(ASe,"STRONG",{});var Rvt=s(rbe);Agr=r(Rvt,"openai-gpt"),Rvt.forEach(t),ygr=r(ASe," \u2014 "),HW=n(ASe,"A",{href:!0});var Pvt=s(HW);Lgr=r(Pvt,"TFOpenAIGPTLMHeadModel"),Pvt.forEach(t),xgr=r(ASe," (OpenAI GPT model)"),ASe.forEach(t),$gr=i(le),KT=n(le,"LI",{});var ySe=s(KT);tbe=n(ySe,"STRONG",{});var Bvt=s(tbe);kgr=r(Bvt,"roberta"),Bvt.forEach(t),Sgr=r(ySe," \u2014 "),UW=n(ySe,"A",{href:!0});var Ivt=s(UW);Rgr=r(Ivt,"TFRobertaForMaskedLM"),Ivt.forEach(t),Pgr=r(ySe," (RoBERTa model)"),ySe.forEach(t),Bgr=i(le),ZT=n(le,"LI",{});var LSe=s(ZT);abe=n(LSe,"STRONG",{});var qvt=s(abe);Igr=r(qvt,"t5"),qvt.forEach(t),qgr=r(LSe," \u2014 "),JW=n(LSe,"A",{href:!0});var Nvt=s(JW);Ngr=r(Nvt,"TFT5ForConditionalGeneration"),Nvt.forEach(t),jgr=r(LSe," (T5 model)"),LSe.forEach(t),Dgr=i(le),e7=n(le,"LI",{});var xSe=s(e7);nbe=n(xSe,"STRONG",{});var jvt=s(nbe);Ggr=r(jvt,"tapas"),jvt.forEach(t),Ogr=r(xSe," \u2014 "),YW=n(xSe,"A",{href:!0});var Dvt=s(YW);Vgr=r(Dvt,"TFTapasForMaskedLM"),Dvt.forEach(t),Xgr=r(xSe," (TAPAS model)"),xSe.forEach(t),zgr=i(le),o7=n(le,"LI",{});var $Se=s(o7);sbe=n($Se,"STRONG",{});var Gvt=s(sbe);Wgr=r(Gvt,"transfo-xl"),Gvt.forEach(t),Qgr=r($Se," \u2014 "),KW=n($Se,"A",{href:!0});var Ovt=s(KW);Hgr=r(Ovt,"TFTransfoXLLMHeadModel"),Ovt.forEach(t),Ugr=r($Se," (Transformer-XL model)"),$Se.forEach(t),Jgr=i(le),r7=n(le,"LI",{});var kSe=s(r7);lbe=n(kSe,"STRONG",{});var Vvt=s(lbe);Ygr=r(Vvt,"vit_mae"),Vvt.forEach(t),Kgr=r(kSe," \u2014 "),ZW=n(kSe,"A",{href:!0});var Xvt=s(ZW);Zgr=r(Xvt,"TFViTMAEForPreTraining"),Xvt.forEach(t),ehr=r(kSe," (ViTMAE model)"),kSe.forEach(t),ohr=i(le),t7=n(le,"LI",{});var SSe=s(t7);ibe=n(SSe,"STRONG",{});var zvt=s(ibe);rhr=r(zvt,"xlm"),zvt.forEach(t),thr=r(SSe," \u2014 "),eQ=n(SSe,"A",{href:!0});var Wvt=s(eQ);ahr=r(Wvt,"TFXLMWithLMHeadModel"),Wvt.forEach(t),nhr=r(SSe," (XLM model)"),SSe.forEach(t),shr=i(le),a7=n(le,"LI",{});var RSe=s(a7);dbe=n(RSe,"STRONG",{});var Qvt=s(dbe);lhr=r(Qvt,"xlm-roberta"),Qvt.forEach(t),ihr=r(RSe," \u2014 "),oQ=n(RSe,"A",{href:!0});var Hvt=s(oQ);dhr=r(Hvt,"TFXLMRobertaForMaskedLM"),Hvt.forEach(t),chr=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),fhr=i(le),n7=n(le,"LI",{});var PSe=s(n7);cbe=n(PSe,"STRONG",{});var Uvt=s(cbe);mhr=r(Uvt,"xlnet"),Uvt.forEach(t),ghr=r(PSe," \u2014 "),rQ=n(PSe,"A",{href:!0});var Jvt=s(rQ);hhr=r(Jvt,"TFXLNetLMHeadModel"),Jvt.forEach(t),phr=r(PSe," (XLNet model)"),PSe.forEach(t),le.forEach(t),uhr=i(ul),T(s7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),gNe=i(f),Qd=n(f,"H2",{class:!0});var vDe=s(Qd);l7=n(vDe,"A",{id:!0,class:!0,href:!0});var Yvt=s(l7);fbe=n(Yvt,"SPAN",{});var Kvt=s(fbe);T(s8.$$.fragment,Kvt),Kvt.forEach(t),Yvt.forEach(t),_hr=i(vDe),mbe=n(vDe,"SPAN",{});var Zvt=s(mbe);bhr=r(Zvt,"TFAutoModelForCausalLM"),Zvt.forEach(t),vDe.forEach(t),hNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(l8.$$.fragment,_l),vhr=i(_l),Hd=n(_l,"P",{});var OZ=s(Hd);Fhr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tQ=n(OZ,"A",{href:!0});var eFt=s(tQ);Thr=r(eFt,"from_pretrained()"),eFt.forEach(t),Mhr=r(OZ," class method or the "),aQ=n(OZ,"A",{href:!0});var oFt=s(aQ);Ehr=r(oFt,"from_config()"),oFt.forEach(t),Chr=r(OZ,` class
method.`),OZ.forEach(t),whr=i(_l),i8=n(_l,"P",{});var FDe=s(i8);Ahr=r(FDe,"This class cannot be instantiated directly using "),gbe=n(FDe,"CODE",{});var rFt=s(gbe);yhr=r(rFt,"__init__()"),rFt.forEach(t),Lhr=r(FDe," (throws an error)."),FDe.forEach(t),xhr=i(_l),xt=n(_l,"DIV",{class:!0});var uw=s(xt);T(d8.$$.fragment,uw),$hr=i(uw),hbe=n(uw,"P",{});var tFt=s(hbe);khr=r(tFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tFt.forEach(t),Shr=i(uw),Ud=n(uw,"P",{});var VZ=s(Ud);Rhr=r(VZ,`Note:
Loading a model from its configuration file does `),pbe=n(VZ,"STRONG",{});var aFt=s(pbe);Phr=r(aFt,"not"),aFt.forEach(t),Bhr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(VZ,"A",{href:!0});var nFt=s(nQ);Ihr=r(nFt,"from_pretrained()"),nFt.forEach(t),qhr=r(VZ," to load the model weights."),VZ.forEach(t),Nhr=i(uw),T(i7.$$.fragment,uw),uw.forEach(t),jhr=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(c8.$$.fragment,bl),Dhr=i(bl),ube=n(bl,"P",{});var sFt=s(ube);Ghr=r(sFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sFt.forEach(t),Ohr=i(bl),en=n(bl,"P",{});var _w=s(en);Vhr=r(_w,"The model class to instantiate is selected based on the "),_be=n(_w,"CODE",{});var lFt=s(_be);Xhr=r(lFt,"model_type"),lFt.forEach(t),zhr=r(_w,` property of the config object (either
passed as an argument or loaded from `),bbe=n(_w,"CODE",{});var iFt=s(bbe);Whr=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),Qhr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(_w,"CODE",{});var dFt=s(vbe);Hhr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),Uhr=r(_w,":"),_w.forEach(t),Jhr=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);d7=n(Ce,"LI",{});var BSe=s(d7);Fbe=n(BSe,"STRONG",{});var cFt=s(Fbe);Yhr=r(cFt,"bert"),cFt.forEach(t),Khr=r(BSe," \u2014 "),sQ=n(BSe,"A",{href:!0});var fFt=s(sQ);Zhr=r(fFt,"TFBertLMHeadModel"),fFt.forEach(t),epr=r(BSe," (BERT model)"),BSe.forEach(t),opr=i(Ce),c7=n(Ce,"LI",{});var ISe=s(c7);Tbe=n(ISe,"STRONG",{});var mFt=s(Tbe);rpr=r(mFt,"camembert"),mFt.forEach(t),tpr=r(ISe," \u2014 "),lQ=n(ISe,"A",{href:!0});var gFt=s(lQ);apr=r(gFt,"TFCamembertForCausalLM"),gFt.forEach(t),npr=r(ISe," (CamemBERT model)"),ISe.forEach(t),spr=i(Ce),f7=n(Ce,"LI",{});var qSe=s(f7);Mbe=n(qSe,"STRONG",{});var hFt=s(Mbe);lpr=r(hFt,"ctrl"),hFt.forEach(t),ipr=r(qSe," \u2014 "),iQ=n(qSe,"A",{href:!0});var pFt=s(iQ);dpr=r(pFt,"TFCTRLLMHeadModel"),pFt.forEach(t),cpr=r(qSe," (CTRL model)"),qSe.forEach(t),fpr=i(Ce),m7=n(Ce,"LI",{});var NSe=s(m7);Ebe=n(NSe,"STRONG",{});var uFt=s(Ebe);mpr=r(uFt,"gpt2"),uFt.forEach(t),gpr=r(NSe," \u2014 "),dQ=n(NSe,"A",{href:!0});var _Ft=s(dQ);hpr=r(_Ft,"TFGPT2LMHeadModel"),_Ft.forEach(t),ppr=r(NSe," (OpenAI GPT-2 model)"),NSe.forEach(t),upr=i(Ce),g7=n(Ce,"LI",{});var jSe=s(g7);Cbe=n(jSe,"STRONG",{});var bFt=s(Cbe);_pr=r(bFt,"gptj"),bFt.forEach(t),bpr=r(jSe," \u2014 "),cQ=n(jSe,"A",{href:!0});var vFt=s(cQ);vpr=r(vFt,"TFGPTJForCausalLM"),vFt.forEach(t),Fpr=r(jSe," (GPT-J model)"),jSe.forEach(t),Tpr=i(Ce),h7=n(Ce,"LI",{});var DSe=s(h7);wbe=n(DSe,"STRONG",{});var FFt=s(wbe);Mpr=r(FFt,"openai-gpt"),FFt.forEach(t),Epr=r(DSe," \u2014 "),fQ=n(DSe,"A",{href:!0});var TFt=s(fQ);Cpr=r(TFt,"TFOpenAIGPTLMHeadModel"),TFt.forEach(t),wpr=r(DSe," (OpenAI GPT model)"),DSe.forEach(t),Apr=i(Ce),p7=n(Ce,"LI",{});var GSe=s(p7);Abe=n(GSe,"STRONG",{});var MFt=s(Abe);ypr=r(MFt,"rembert"),MFt.forEach(t),Lpr=r(GSe," \u2014 "),mQ=n(GSe,"A",{href:!0});var EFt=s(mQ);xpr=r(EFt,"TFRemBertForCausalLM"),EFt.forEach(t),$pr=r(GSe," (RemBERT model)"),GSe.forEach(t),kpr=i(Ce),u7=n(Ce,"LI",{});var OSe=s(u7);ybe=n(OSe,"STRONG",{});var CFt=s(ybe);Spr=r(CFt,"roberta"),CFt.forEach(t),Rpr=r(OSe," \u2014 "),gQ=n(OSe,"A",{href:!0});var wFt=s(gQ);Ppr=r(wFt,"TFRobertaForCausalLM"),wFt.forEach(t),Bpr=r(OSe," (RoBERTa model)"),OSe.forEach(t),Ipr=i(Ce),_7=n(Ce,"LI",{});var VSe=s(_7);Lbe=n(VSe,"STRONG",{});var AFt=s(Lbe);qpr=r(AFt,"roformer"),AFt.forEach(t),Npr=r(VSe," \u2014 "),hQ=n(VSe,"A",{href:!0});var yFt=s(hQ);jpr=r(yFt,"TFRoFormerForCausalLM"),yFt.forEach(t),Dpr=r(VSe," (RoFormer model)"),VSe.forEach(t),Gpr=i(Ce),b7=n(Ce,"LI",{});var XSe=s(b7);xbe=n(XSe,"STRONG",{});var LFt=s(xbe);Opr=r(LFt,"transfo-xl"),LFt.forEach(t),Vpr=r(XSe," \u2014 "),pQ=n(XSe,"A",{href:!0});var xFt=s(pQ);Xpr=r(xFt,"TFTransfoXLLMHeadModel"),xFt.forEach(t),zpr=r(XSe," (Transformer-XL model)"),XSe.forEach(t),Wpr=i(Ce),v7=n(Ce,"LI",{});var zSe=s(v7);$be=n(zSe,"STRONG",{});var $Ft=s($be);Qpr=r($Ft,"xlm"),$Ft.forEach(t),Hpr=r(zSe," \u2014 "),uQ=n(zSe,"A",{href:!0});var kFt=s(uQ);Upr=r(kFt,"TFXLMWithLMHeadModel"),kFt.forEach(t),Jpr=r(zSe," (XLM model)"),zSe.forEach(t),Ypr=i(Ce),F7=n(Ce,"LI",{});var WSe=s(F7);kbe=n(WSe,"STRONG",{});var SFt=s(kbe);Kpr=r(SFt,"xlnet"),SFt.forEach(t),Zpr=r(WSe," \u2014 "),_Q=n(WSe,"A",{href:!0});var RFt=s(_Q);eur=r(RFt,"TFXLNetLMHeadModel"),RFt.forEach(t),our=r(WSe," (XLNet model)"),WSe.forEach(t),Ce.forEach(t),rur=i(bl),T(T7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),pNe=i(f),Jd=n(f,"H2",{class:!0});var TDe=s(Jd);M7=n(TDe,"A",{id:!0,class:!0,href:!0});var PFt=s(M7);Sbe=n(PFt,"SPAN",{});var BFt=s(Sbe);T(f8.$$.fragment,BFt),BFt.forEach(t),PFt.forEach(t),tur=i(TDe),Rbe=n(TDe,"SPAN",{});var IFt=s(Rbe);aur=r(IFt,"TFAutoModelForImageClassification"),IFt.forEach(t),TDe.forEach(t),uNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(m8.$$.fragment,vl),nur=i(vl),Yd=n(vl,"P",{});var XZ=s(Yd);sur=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bQ=n(XZ,"A",{href:!0});var qFt=s(bQ);lur=r(qFt,"from_pretrained()"),qFt.forEach(t),iur=r(XZ," class method or the "),vQ=n(XZ,"A",{href:!0});var NFt=s(vQ);dur=r(NFt,"from_config()"),NFt.forEach(t),cur=r(XZ,` class
method.`),XZ.forEach(t),fur=i(vl),g8=n(vl,"P",{});var MDe=s(g8);mur=r(MDe,"This class cannot be instantiated directly using "),Pbe=n(MDe,"CODE",{});var jFt=s(Pbe);gur=r(jFt,"__init__()"),jFt.forEach(t),hur=r(MDe," (throws an error)."),MDe.forEach(t),pur=i(vl),$t=n(vl,"DIV",{class:!0});var bw=s($t);T(h8.$$.fragment,bw),uur=i(bw),Bbe=n(bw,"P",{});var DFt=s(Bbe);_ur=r(DFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DFt.forEach(t),bur=i(bw),Kd=n(bw,"P",{});var zZ=s(Kd);vur=r(zZ,`Note:
Loading a model from its configuration file does `),Ibe=n(zZ,"STRONG",{});var GFt=s(Ibe);Fur=r(GFt,"not"),GFt.forEach(t),Tur=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(zZ,"A",{href:!0});var OFt=s(FQ);Mur=r(OFt,"from_pretrained()"),OFt.forEach(t),Eur=r(zZ," to load the model weights."),zZ.forEach(t),Cur=i(bw),T(E7.$$.fragment,bw),bw.forEach(t),wur=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(p8.$$.fragment,Fl),Aur=i(Fl),qbe=n(Fl,"P",{});var VFt=s(qbe);yur=r(VFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VFt.forEach(t),Lur=i(Fl),on=n(Fl,"P",{});var vw=s(on);xur=r(vw,"The model class to instantiate is selected based on the "),Nbe=n(vw,"CODE",{});var XFt=s(Nbe);$ur=r(XFt,"model_type"),XFt.forEach(t),kur=r(vw,` property of the config object (either
passed as an argument or loaded from `),jbe=n(vw,"CODE",{});var zFt=s(jbe);Sur=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),Rur=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(vw,"CODE",{});var WFt=s(Dbe);Pur=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),Bur=r(vw,":"),vw.forEach(t),Iur=i(Fl),rn=n(Fl,"UL",{});var Fw=s(rn);C7=n(Fw,"LI",{});var QSe=s(C7);Gbe=n(QSe,"STRONG",{});var QFt=s(Gbe);qur=r(QFt,"convnext"),QFt.forEach(t),Nur=r(QSe," \u2014 "),TQ=n(QSe,"A",{href:!0});var HFt=s(TQ);jur=r(HFt,"TFConvNextForImageClassification"),HFt.forEach(t),Dur=r(QSe," (ConvNext model)"),QSe.forEach(t),Gur=i(Fw),w7=n(Fw,"LI",{});var HSe=s(w7);Obe=n(HSe,"STRONG",{});var UFt=s(Obe);Our=r(UFt,"data2vec-vision"),UFt.forEach(t),Vur=r(HSe," \u2014 "),MQ=n(HSe,"A",{href:!0});var JFt=s(MQ);Xur=r(JFt,"TFData2VecVisionForImageClassification"),JFt.forEach(t),zur=r(HSe," (Data2VecVision model)"),HSe.forEach(t),Wur=i(Fw),A7=n(Fw,"LI",{});var USe=s(A7);Vbe=n(USe,"STRONG",{});var YFt=s(Vbe);Qur=r(YFt,"swin"),YFt.forEach(t),Hur=r(USe," \u2014 "),EQ=n(USe,"A",{href:!0});var KFt=s(EQ);Uur=r(KFt,"TFSwinForImageClassification"),KFt.forEach(t),Jur=r(USe," (Swin model)"),USe.forEach(t),Yur=i(Fw),y7=n(Fw,"LI",{});var JSe=s(y7);Xbe=n(JSe,"STRONG",{});var ZFt=s(Xbe);Kur=r(ZFt,"vit"),ZFt.forEach(t),Zur=r(JSe," \u2014 "),CQ=n(JSe,"A",{href:!0});var e6t=s(CQ);e_r=r(e6t,"TFViTForImageClassification"),e6t.forEach(t),o_r=r(JSe," (ViT model)"),JSe.forEach(t),Fw.forEach(t),r_r=i(Fl),T(L7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),_Ne=i(f),Zd=n(f,"H2",{class:!0});var EDe=s(Zd);x7=n(EDe,"A",{id:!0,class:!0,href:!0});var o6t=s(x7);zbe=n(o6t,"SPAN",{});var r6t=s(zbe);T(u8.$$.fragment,r6t),r6t.forEach(t),o6t.forEach(t),t_r=i(EDe),Wbe=n(EDe,"SPAN",{});var t6t=s(Wbe);a_r=r(t6t,"TFAutoModelForMaskedLM"),t6t.forEach(t),EDe.forEach(t),bNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(_8.$$.fragment,Tl),n_r=i(Tl),ec=n(Tl,"P",{});var WZ=s(ec);s_r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=n(WZ,"A",{href:!0});var a6t=s(wQ);l_r=r(a6t,"from_pretrained()"),a6t.forEach(t),i_r=r(WZ," class method or the "),AQ=n(WZ,"A",{href:!0});var n6t=s(AQ);d_r=r(n6t,"from_config()"),n6t.forEach(t),c_r=r(WZ,` class
method.`),WZ.forEach(t),f_r=i(Tl),b8=n(Tl,"P",{});var CDe=s(b8);m_r=r(CDe,"This class cannot be instantiated directly using "),Qbe=n(CDe,"CODE",{});var s6t=s(Qbe);g_r=r(s6t,"__init__()"),s6t.forEach(t),h_r=r(CDe," (throws an error)."),CDe.forEach(t),p_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var Tw=s(kt);T(v8.$$.fragment,Tw),u_r=i(Tw),Hbe=n(Tw,"P",{});var l6t=s(Hbe);__r=r(l6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l6t.forEach(t),b_r=i(Tw),oc=n(Tw,"P",{});var QZ=s(oc);v_r=r(QZ,`Note:
Loading a model from its configuration file does `),Ube=n(QZ,"STRONG",{});var i6t=s(Ube);F_r=r(i6t,"not"),i6t.forEach(t),T_r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(QZ,"A",{href:!0});var d6t=s(yQ);M_r=r(d6t,"from_pretrained()"),d6t.forEach(t),E_r=r(QZ," to load the model weights."),QZ.forEach(t),C_r=i(Tw),T($7.$$.fragment,Tw),Tw.forEach(t),w_r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(F8.$$.fragment,Ml),A_r=i(Ml),Jbe=n(Ml,"P",{});var c6t=s(Jbe);y_r=r(c6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c6t.forEach(t),L_r=i(Ml),tn=n(Ml,"P",{});var Mw=s(tn);x_r=r(Mw,"The model class to instantiate is selected based on the "),Ybe=n(Mw,"CODE",{});var f6t=s(Ybe);$_r=r(f6t,"model_type"),f6t.forEach(t),k_r=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(Mw,"CODE",{});var m6t=s(Kbe);S_r=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),R_r=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(Mw,"CODE",{});var g6t=s(Zbe);P_r=r(g6t,"pretrained_model_name_or_path"),g6t.forEach(t),B_r=r(Mw,":"),Mw.forEach(t),I_r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);k7=n(fe,"LI",{});var YSe=s(k7);e2e=n(YSe,"STRONG",{});var h6t=s(e2e);q_r=r(h6t,"albert"),h6t.forEach(t),N_r=r(YSe," \u2014 "),LQ=n(YSe,"A",{href:!0});var p6t=s(LQ);j_r=r(p6t,"TFAlbertForMaskedLM"),p6t.forEach(t),D_r=r(YSe," (ALBERT model)"),YSe.forEach(t),G_r=i(fe),S7=n(fe,"LI",{});var KSe=s(S7);o2e=n(KSe,"STRONG",{});var u6t=s(o2e);O_r=r(u6t,"bert"),u6t.forEach(t),V_r=r(KSe," \u2014 "),xQ=n(KSe,"A",{href:!0});var _6t=s(xQ);X_r=r(_6t,"TFBertForMaskedLM"),_6t.forEach(t),z_r=r(KSe," (BERT model)"),KSe.forEach(t),W_r=i(fe),R7=n(fe,"LI",{});var ZSe=s(R7);r2e=n(ZSe,"STRONG",{});var b6t=s(r2e);Q_r=r(b6t,"camembert"),b6t.forEach(t),H_r=r(ZSe," \u2014 "),$Q=n(ZSe,"A",{href:!0});var v6t=s($Q);U_r=r(v6t,"TFCamembertForMaskedLM"),v6t.forEach(t),J_r=r(ZSe," (CamemBERT model)"),ZSe.forEach(t),Y_r=i(fe),P7=n(fe,"LI",{});var eRe=s(P7);t2e=n(eRe,"STRONG",{});var F6t=s(t2e);K_r=r(F6t,"convbert"),F6t.forEach(t),Z_r=r(eRe," \u2014 "),kQ=n(eRe,"A",{href:!0});var T6t=s(kQ);e0r=r(T6t,"TFConvBertForMaskedLM"),T6t.forEach(t),o0r=r(eRe," (ConvBERT model)"),eRe.forEach(t),r0r=i(fe),B7=n(fe,"LI",{});var oRe=s(B7);a2e=n(oRe,"STRONG",{});var M6t=s(a2e);t0r=r(M6t,"deberta"),M6t.forEach(t),a0r=r(oRe," \u2014 "),SQ=n(oRe,"A",{href:!0});var E6t=s(SQ);n0r=r(E6t,"TFDebertaForMaskedLM"),E6t.forEach(t),s0r=r(oRe," (DeBERTa model)"),oRe.forEach(t),l0r=i(fe),I7=n(fe,"LI",{});var rRe=s(I7);n2e=n(rRe,"STRONG",{});var C6t=s(n2e);i0r=r(C6t,"deberta-v2"),C6t.forEach(t),d0r=r(rRe," \u2014 "),RQ=n(rRe,"A",{href:!0});var w6t=s(RQ);c0r=r(w6t,"TFDebertaV2ForMaskedLM"),w6t.forEach(t),f0r=r(rRe," (DeBERTa-v2 model)"),rRe.forEach(t),m0r=i(fe),q7=n(fe,"LI",{});var tRe=s(q7);s2e=n(tRe,"STRONG",{});var A6t=s(s2e);g0r=r(A6t,"distilbert"),A6t.forEach(t),h0r=r(tRe," \u2014 "),PQ=n(tRe,"A",{href:!0});var y6t=s(PQ);p0r=r(y6t,"TFDistilBertForMaskedLM"),y6t.forEach(t),u0r=r(tRe," (DistilBERT model)"),tRe.forEach(t),_0r=i(fe),N7=n(fe,"LI",{});var aRe=s(N7);l2e=n(aRe,"STRONG",{});var L6t=s(l2e);b0r=r(L6t,"electra"),L6t.forEach(t),v0r=r(aRe," \u2014 "),BQ=n(aRe,"A",{href:!0});var x6t=s(BQ);F0r=r(x6t,"TFElectraForMaskedLM"),x6t.forEach(t),T0r=r(aRe," (ELECTRA model)"),aRe.forEach(t),M0r=i(fe),j7=n(fe,"LI",{});var nRe=s(j7);i2e=n(nRe,"STRONG",{});var $6t=s(i2e);E0r=r($6t,"flaubert"),$6t.forEach(t),C0r=r(nRe," \u2014 "),IQ=n(nRe,"A",{href:!0});var k6t=s(IQ);w0r=r(k6t,"TFFlaubertWithLMHeadModel"),k6t.forEach(t),A0r=r(nRe," (FlauBERT model)"),nRe.forEach(t),y0r=i(fe),D7=n(fe,"LI",{});var sRe=s(D7);d2e=n(sRe,"STRONG",{});var S6t=s(d2e);L0r=r(S6t,"funnel"),S6t.forEach(t),x0r=r(sRe," \u2014 "),qQ=n(sRe,"A",{href:!0});var R6t=s(qQ);$0r=r(R6t,"TFFunnelForMaskedLM"),R6t.forEach(t),k0r=r(sRe," (Funnel Transformer model)"),sRe.forEach(t),S0r=i(fe),G7=n(fe,"LI",{});var lRe=s(G7);c2e=n(lRe,"STRONG",{});var P6t=s(c2e);R0r=r(P6t,"layoutlm"),P6t.forEach(t),P0r=r(lRe," \u2014 "),NQ=n(lRe,"A",{href:!0});var B6t=s(NQ);B0r=r(B6t,"TFLayoutLMForMaskedLM"),B6t.forEach(t),I0r=r(lRe," (LayoutLM model)"),lRe.forEach(t),q0r=i(fe),O7=n(fe,"LI",{});var iRe=s(O7);f2e=n(iRe,"STRONG",{});var I6t=s(f2e);N0r=r(I6t,"longformer"),I6t.forEach(t),j0r=r(iRe," \u2014 "),jQ=n(iRe,"A",{href:!0});var q6t=s(jQ);D0r=r(q6t,"TFLongformerForMaskedLM"),q6t.forEach(t),G0r=r(iRe," (Longformer model)"),iRe.forEach(t),O0r=i(fe),V7=n(fe,"LI",{});var dRe=s(V7);m2e=n(dRe,"STRONG",{});var N6t=s(m2e);V0r=r(N6t,"mobilebert"),N6t.forEach(t),X0r=r(dRe," \u2014 "),DQ=n(dRe,"A",{href:!0});var j6t=s(DQ);z0r=r(j6t,"TFMobileBertForMaskedLM"),j6t.forEach(t),W0r=r(dRe," (MobileBERT model)"),dRe.forEach(t),Q0r=i(fe),X7=n(fe,"LI",{});var cRe=s(X7);g2e=n(cRe,"STRONG",{});var D6t=s(g2e);H0r=r(D6t,"mpnet"),D6t.forEach(t),U0r=r(cRe," \u2014 "),GQ=n(cRe,"A",{href:!0});var G6t=s(GQ);J0r=r(G6t,"TFMPNetForMaskedLM"),G6t.forEach(t),Y0r=r(cRe," (MPNet model)"),cRe.forEach(t),K0r=i(fe),z7=n(fe,"LI",{});var fRe=s(z7);h2e=n(fRe,"STRONG",{});var O6t=s(h2e);Z0r=r(O6t,"rembert"),O6t.forEach(t),e1r=r(fRe," \u2014 "),OQ=n(fRe,"A",{href:!0});var V6t=s(OQ);o1r=r(V6t,"TFRemBertForMaskedLM"),V6t.forEach(t),r1r=r(fRe," (RemBERT model)"),fRe.forEach(t),t1r=i(fe),W7=n(fe,"LI",{});var mRe=s(W7);p2e=n(mRe,"STRONG",{});var X6t=s(p2e);a1r=r(X6t,"roberta"),X6t.forEach(t),n1r=r(mRe," \u2014 "),VQ=n(mRe,"A",{href:!0});var z6t=s(VQ);s1r=r(z6t,"TFRobertaForMaskedLM"),z6t.forEach(t),l1r=r(mRe," (RoBERTa model)"),mRe.forEach(t),i1r=i(fe),Q7=n(fe,"LI",{});var gRe=s(Q7);u2e=n(gRe,"STRONG",{});var W6t=s(u2e);d1r=r(W6t,"roformer"),W6t.forEach(t),c1r=r(gRe," \u2014 "),XQ=n(gRe,"A",{href:!0});var Q6t=s(XQ);f1r=r(Q6t,"TFRoFormerForMaskedLM"),Q6t.forEach(t),m1r=r(gRe," (RoFormer model)"),gRe.forEach(t),g1r=i(fe),H7=n(fe,"LI",{});var hRe=s(H7);_2e=n(hRe,"STRONG",{});var H6t=s(_2e);h1r=r(H6t,"tapas"),H6t.forEach(t),p1r=r(hRe," \u2014 "),zQ=n(hRe,"A",{href:!0});var U6t=s(zQ);u1r=r(U6t,"TFTapasForMaskedLM"),U6t.forEach(t),_1r=r(hRe," (TAPAS model)"),hRe.forEach(t),b1r=i(fe),U7=n(fe,"LI",{});var pRe=s(U7);b2e=n(pRe,"STRONG",{});var J6t=s(b2e);v1r=r(J6t,"xlm"),J6t.forEach(t),F1r=r(pRe," \u2014 "),WQ=n(pRe,"A",{href:!0});var Y6t=s(WQ);T1r=r(Y6t,"TFXLMWithLMHeadModel"),Y6t.forEach(t),M1r=r(pRe," (XLM model)"),pRe.forEach(t),E1r=i(fe),J7=n(fe,"LI",{});var uRe=s(J7);v2e=n(uRe,"STRONG",{});var K6t=s(v2e);C1r=r(K6t,"xlm-roberta"),K6t.forEach(t),w1r=r(uRe," \u2014 "),QQ=n(uRe,"A",{href:!0});var Z6t=s(QQ);A1r=r(Z6t,"TFXLMRobertaForMaskedLM"),Z6t.forEach(t),y1r=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),fe.forEach(t),L1r=i(Ml),T(Y7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),vNe=i(f),rc=n(f,"H2",{class:!0});var wDe=s(rc);K7=n(wDe,"A",{id:!0,class:!0,href:!0});var eTt=s(K7);F2e=n(eTt,"SPAN",{});var oTt=s(F2e);T(T8.$$.fragment,oTt),oTt.forEach(t),eTt.forEach(t),x1r=i(wDe),T2e=n(wDe,"SPAN",{});var rTt=s(T2e);$1r=r(rTt,"TFAutoModelForSeq2SeqLM"),rTt.forEach(t),wDe.forEach(t),FNe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(M8.$$.fragment,El),k1r=i(El),tc=n(El,"P",{});var HZ=s(tc);S1r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=n(HZ,"A",{href:!0});var tTt=s(HQ);R1r=r(tTt,"from_pretrained()"),tTt.forEach(t),P1r=r(HZ," class method or the "),UQ=n(HZ,"A",{href:!0});var aTt=s(UQ);B1r=r(aTt,"from_config()"),aTt.forEach(t),I1r=r(HZ,` class
method.`),HZ.forEach(t),q1r=i(El),E8=n(El,"P",{});var ADe=s(E8);N1r=r(ADe,"This class cannot be instantiated directly using "),M2e=n(ADe,"CODE",{});var nTt=s(M2e);j1r=r(nTt,"__init__()"),nTt.forEach(t),D1r=r(ADe," (throws an error)."),ADe.forEach(t),G1r=i(El),St=n(El,"DIV",{class:!0});var Ew=s(St);T(C8.$$.fragment,Ew),O1r=i(Ew),E2e=n(Ew,"P",{});var sTt=s(E2e);V1r=r(sTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sTt.forEach(t),X1r=i(Ew),ac=n(Ew,"P",{});var UZ=s(ac);z1r=r(UZ,`Note:
Loading a model from its configuration file does `),C2e=n(UZ,"STRONG",{});var lTt=s(C2e);W1r=r(lTt,"not"),lTt.forEach(t),Q1r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(UZ,"A",{href:!0});var iTt=s(JQ);H1r=r(iTt,"from_pretrained()"),iTt.forEach(t),U1r=r(UZ," to load the model weights."),UZ.forEach(t),J1r=i(Ew),T(Z7.$$.fragment,Ew),Ew.forEach(t),Y1r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(w8.$$.fragment,Cl),K1r=i(Cl),w2e=n(Cl,"P",{});var dTt=s(w2e);Z1r=r(dTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dTt.forEach(t),ebr=i(Cl),an=n(Cl,"P",{});var Cw=s(an);obr=r(Cw,"The model class to instantiate is selected based on the "),A2e=n(Cw,"CODE",{});var cTt=s(A2e);rbr=r(cTt,"model_type"),cTt.forEach(t),tbr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),y2e=n(Cw,"CODE",{});var fTt=s(y2e);abr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),nbr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(Cw,"CODE",{});var mTt=s(L2e);sbr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),lbr=r(Cw,":"),Cw.forEach(t),ibr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);eM=n(Be,"LI",{});var _Re=s(eM);x2e=n(_Re,"STRONG",{});var gTt=s(x2e);dbr=r(gTt,"bart"),gTt.forEach(t),cbr=r(_Re," \u2014 "),YQ=n(_Re,"A",{href:!0});var hTt=s(YQ);fbr=r(hTt,"TFBartForConditionalGeneration"),hTt.forEach(t),mbr=r(_Re," (BART model)"),_Re.forEach(t),gbr=i(Be),oM=n(Be,"LI",{});var bRe=s(oM);$2e=n(bRe,"STRONG",{});var pTt=s($2e);hbr=r(pTt,"blenderbot"),pTt.forEach(t),pbr=r(bRe," \u2014 "),KQ=n(bRe,"A",{href:!0});var uTt=s(KQ);ubr=r(uTt,"TFBlenderbotForConditionalGeneration"),uTt.forEach(t),_br=r(bRe," (Blenderbot model)"),bRe.forEach(t),bbr=i(Be),rM=n(Be,"LI",{});var vRe=s(rM);k2e=n(vRe,"STRONG",{});var _Tt=s(k2e);vbr=r(_Tt,"blenderbot-small"),_Tt.forEach(t),Fbr=r(vRe," \u2014 "),ZQ=n(vRe,"A",{href:!0});var bTt=s(ZQ);Tbr=r(bTt,"TFBlenderbotSmallForConditionalGeneration"),bTt.forEach(t),Mbr=r(vRe," (BlenderbotSmall model)"),vRe.forEach(t),Ebr=i(Be),tM=n(Be,"LI",{});var FRe=s(tM);S2e=n(FRe,"STRONG",{});var vTt=s(S2e);Cbr=r(vTt,"encoder-decoder"),vTt.forEach(t),wbr=r(FRe," \u2014 "),eH=n(FRe,"A",{href:!0});var FTt=s(eH);Abr=r(FTt,"TFEncoderDecoderModel"),FTt.forEach(t),ybr=r(FRe," (Encoder decoder model)"),FRe.forEach(t),Lbr=i(Be),aM=n(Be,"LI",{});var TRe=s(aM);R2e=n(TRe,"STRONG",{});var TTt=s(R2e);xbr=r(TTt,"led"),TTt.forEach(t),$br=r(TRe," \u2014 "),oH=n(TRe,"A",{href:!0});var MTt=s(oH);kbr=r(MTt,"TFLEDForConditionalGeneration"),MTt.forEach(t),Sbr=r(TRe," (LED model)"),TRe.forEach(t),Rbr=i(Be),nM=n(Be,"LI",{});var MRe=s(nM);P2e=n(MRe,"STRONG",{});var ETt=s(P2e);Pbr=r(ETt,"marian"),ETt.forEach(t),Bbr=r(MRe," \u2014 "),rH=n(MRe,"A",{href:!0});var CTt=s(rH);Ibr=r(CTt,"TFMarianMTModel"),CTt.forEach(t),qbr=r(MRe," (Marian model)"),MRe.forEach(t),Nbr=i(Be),sM=n(Be,"LI",{});var ERe=s(sM);B2e=n(ERe,"STRONG",{});var wTt=s(B2e);jbr=r(wTt,"mbart"),wTt.forEach(t),Dbr=r(ERe," \u2014 "),tH=n(ERe,"A",{href:!0});var ATt=s(tH);Gbr=r(ATt,"TFMBartForConditionalGeneration"),ATt.forEach(t),Obr=r(ERe," (mBART model)"),ERe.forEach(t),Vbr=i(Be),lM=n(Be,"LI",{});var CRe=s(lM);I2e=n(CRe,"STRONG",{});var yTt=s(I2e);Xbr=r(yTt,"mt5"),yTt.forEach(t),zbr=r(CRe," \u2014 "),aH=n(CRe,"A",{href:!0});var LTt=s(aH);Wbr=r(LTt,"TFMT5ForConditionalGeneration"),LTt.forEach(t),Qbr=r(CRe," (mT5 model)"),CRe.forEach(t),Hbr=i(Be),iM=n(Be,"LI",{});var wRe=s(iM);q2e=n(wRe,"STRONG",{});var xTt=s(q2e);Ubr=r(xTt,"pegasus"),xTt.forEach(t),Jbr=r(wRe," \u2014 "),nH=n(wRe,"A",{href:!0});var $Tt=s(nH);Ybr=r($Tt,"TFPegasusForConditionalGeneration"),$Tt.forEach(t),Kbr=r(wRe," (Pegasus model)"),wRe.forEach(t),Zbr=i(Be),dM=n(Be,"LI",{});var ARe=s(dM);N2e=n(ARe,"STRONG",{});var kTt=s(N2e);e2r=r(kTt,"t5"),kTt.forEach(t),o2r=r(ARe," \u2014 "),sH=n(ARe,"A",{href:!0});var STt=s(sH);r2r=r(STt,"TFT5ForConditionalGeneration"),STt.forEach(t),t2r=r(ARe," (T5 model)"),ARe.forEach(t),Be.forEach(t),a2r=i(Cl),T(cM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),TNe=i(f),nc=n(f,"H2",{class:!0});var yDe=s(nc);fM=n(yDe,"A",{id:!0,class:!0,href:!0});var RTt=s(fM);j2e=n(RTt,"SPAN",{});var PTt=s(j2e);T(A8.$$.fragment,PTt),PTt.forEach(t),RTt.forEach(t),n2r=i(yDe),D2e=n(yDe,"SPAN",{});var BTt=s(D2e);s2r=r(BTt,"TFAutoModelForSequenceClassification"),BTt.forEach(t),yDe.forEach(t),MNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(y8.$$.fragment,wl),l2r=i(wl),sc=n(wl,"P",{});var JZ=s(sc);i2r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lH=n(JZ,"A",{href:!0});var ITt=s(lH);d2r=r(ITt,"from_pretrained()"),ITt.forEach(t),c2r=r(JZ," class method or the "),iH=n(JZ,"A",{href:!0});var qTt=s(iH);f2r=r(qTt,"from_config()"),qTt.forEach(t),m2r=r(JZ,` class
method.`),JZ.forEach(t),g2r=i(wl),L8=n(wl,"P",{});var LDe=s(L8);h2r=r(LDe,"This class cannot be instantiated directly using "),G2e=n(LDe,"CODE",{});var NTt=s(G2e);p2r=r(NTt,"__init__()"),NTt.forEach(t),u2r=r(LDe," (throws an error)."),LDe.forEach(t),_2r=i(wl),Rt=n(wl,"DIV",{class:!0});var ww=s(Rt);T(x8.$$.fragment,ww),b2r=i(ww),O2e=n(ww,"P",{});var jTt=s(O2e);v2r=r(jTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jTt.forEach(t),F2r=i(ww),lc=n(ww,"P",{});var YZ=s(lc);T2r=r(YZ,`Note:
Loading a model from its configuration file does `),V2e=n(YZ,"STRONG",{});var DTt=s(V2e);M2r=r(DTt,"not"),DTt.forEach(t),E2r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(YZ,"A",{href:!0});var GTt=s(dH);C2r=r(GTt,"from_pretrained()"),GTt.forEach(t),w2r=r(YZ," to load the model weights."),YZ.forEach(t),A2r=i(ww),T(mM.$$.fragment,ww),ww.forEach(t),y2r=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T($8.$$.fragment,Al),L2r=i(Al),X2e=n(Al,"P",{});var OTt=s(X2e);x2r=r(OTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OTt.forEach(t),$2r=i(Al),nn=n(Al,"P",{});var Aw=s(nn);k2r=r(Aw,"The model class to instantiate is selected based on the "),z2e=n(Aw,"CODE",{});var VTt=s(z2e);S2r=r(VTt,"model_type"),VTt.forEach(t),R2r=r(Aw,` property of the config object (either
passed as an argument or loaded from `),W2e=n(Aw,"CODE",{});var XTt=s(W2e);P2r=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),B2r=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(Aw,"CODE",{});var zTt=s(Q2e);I2r=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),q2r=r(Aw,":"),Aw.forEach(t),N2r=i(Al),ee=n(Al,"UL",{});var ae=s(ee);gM=n(ae,"LI",{});var yRe=s(gM);H2e=n(yRe,"STRONG",{});var WTt=s(H2e);j2r=r(WTt,"albert"),WTt.forEach(t),D2r=r(yRe," \u2014 "),cH=n(yRe,"A",{href:!0});var QTt=s(cH);G2r=r(QTt,"TFAlbertForSequenceClassification"),QTt.forEach(t),O2r=r(yRe," (ALBERT model)"),yRe.forEach(t),V2r=i(ae),hM=n(ae,"LI",{});var LRe=s(hM);U2e=n(LRe,"STRONG",{});var HTt=s(U2e);X2r=r(HTt,"bert"),HTt.forEach(t),z2r=r(LRe," \u2014 "),fH=n(LRe,"A",{href:!0});var UTt=s(fH);W2r=r(UTt,"TFBertForSequenceClassification"),UTt.forEach(t),Q2r=r(LRe," (BERT model)"),LRe.forEach(t),H2r=i(ae),pM=n(ae,"LI",{});var xRe=s(pM);J2e=n(xRe,"STRONG",{});var JTt=s(J2e);U2r=r(JTt,"camembert"),JTt.forEach(t),J2r=r(xRe," \u2014 "),mH=n(xRe,"A",{href:!0});var YTt=s(mH);Y2r=r(YTt,"TFCamembertForSequenceClassification"),YTt.forEach(t),K2r=r(xRe," (CamemBERT model)"),xRe.forEach(t),Z2r=i(ae),uM=n(ae,"LI",{});var $Re=s(uM);Y2e=n($Re,"STRONG",{});var KTt=s(Y2e);evr=r(KTt,"convbert"),KTt.forEach(t),ovr=r($Re," \u2014 "),gH=n($Re,"A",{href:!0});var ZTt=s(gH);rvr=r(ZTt,"TFConvBertForSequenceClassification"),ZTt.forEach(t),tvr=r($Re," (ConvBERT model)"),$Re.forEach(t),avr=i(ae),_M=n(ae,"LI",{});var kRe=s(_M);K2e=n(kRe,"STRONG",{});var e7t=s(K2e);nvr=r(e7t,"ctrl"),e7t.forEach(t),svr=r(kRe," \u2014 "),hH=n(kRe,"A",{href:!0});var o7t=s(hH);lvr=r(o7t,"TFCTRLForSequenceClassification"),o7t.forEach(t),ivr=r(kRe," (CTRL model)"),kRe.forEach(t),dvr=i(ae),bM=n(ae,"LI",{});var SRe=s(bM);Z2e=n(SRe,"STRONG",{});var r7t=s(Z2e);cvr=r(r7t,"deberta"),r7t.forEach(t),fvr=r(SRe," \u2014 "),pH=n(SRe,"A",{href:!0});var t7t=s(pH);mvr=r(t7t,"TFDebertaForSequenceClassification"),t7t.forEach(t),gvr=r(SRe," (DeBERTa model)"),SRe.forEach(t),hvr=i(ae),vM=n(ae,"LI",{});var RRe=s(vM);eve=n(RRe,"STRONG",{});var a7t=s(eve);pvr=r(a7t,"deberta-v2"),a7t.forEach(t),uvr=r(RRe," \u2014 "),uH=n(RRe,"A",{href:!0});var n7t=s(uH);_vr=r(n7t,"TFDebertaV2ForSequenceClassification"),n7t.forEach(t),bvr=r(RRe," (DeBERTa-v2 model)"),RRe.forEach(t),vvr=i(ae),FM=n(ae,"LI",{});var PRe=s(FM);ove=n(PRe,"STRONG",{});var s7t=s(ove);Fvr=r(s7t,"distilbert"),s7t.forEach(t),Tvr=r(PRe," \u2014 "),_H=n(PRe,"A",{href:!0});var l7t=s(_H);Mvr=r(l7t,"TFDistilBertForSequenceClassification"),l7t.forEach(t),Evr=r(PRe," (DistilBERT model)"),PRe.forEach(t),Cvr=i(ae),TM=n(ae,"LI",{});var BRe=s(TM);rve=n(BRe,"STRONG",{});var i7t=s(rve);wvr=r(i7t,"electra"),i7t.forEach(t),Avr=r(BRe," \u2014 "),bH=n(BRe,"A",{href:!0});var d7t=s(bH);yvr=r(d7t,"TFElectraForSequenceClassification"),d7t.forEach(t),Lvr=r(BRe," (ELECTRA model)"),BRe.forEach(t),xvr=i(ae),MM=n(ae,"LI",{});var IRe=s(MM);tve=n(IRe,"STRONG",{});var c7t=s(tve);$vr=r(c7t,"flaubert"),c7t.forEach(t),kvr=r(IRe," \u2014 "),vH=n(IRe,"A",{href:!0});var f7t=s(vH);Svr=r(f7t,"TFFlaubertForSequenceClassification"),f7t.forEach(t),Rvr=r(IRe," (FlauBERT model)"),IRe.forEach(t),Pvr=i(ae),EM=n(ae,"LI",{});var qRe=s(EM);ave=n(qRe,"STRONG",{});var m7t=s(ave);Bvr=r(m7t,"funnel"),m7t.forEach(t),Ivr=r(qRe," \u2014 "),FH=n(qRe,"A",{href:!0});var g7t=s(FH);qvr=r(g7t,"TFFunnelForSequenceClassification"),g7t.forEach(t),Nvr=r(qRe," (Funnel Transformer model)"),qRe.forEach(t),jvr=i(ae),CM=n(ae,"LI",{});var NRe=s(CM);nve=n(NRe,"STRONG",{});var h7t=s(nve);Dvr=r(h7t,"gpt2"),h7t.forEach(t),Gvr=r(NRe," \u2014 "),TH=n(NRe,"A",{href:!0});var p7t=s(TH);Ovr=r(p7t,"TFGPT2ForSequenceClassification"),p7t.forEach(t),Vvr=r(NRe," (OpenAI GPT-2 model)"),NRe.forEach(t),Xvr=i(ae),wM=n(ae,"LI",{});var jRe=s(wM);sve=n(jRe,"STRONG",{});var u7t=s(sve);zvr=r(u7t,"gptj"),u7t.forEach(t),Wvr=r(jRe," \u2014 "),MH=n(jRe,"A",{href:!0});var _7t=s(MH);Qvr=r(_7t,"TFGPTJForSequenceClassification"),_7t.forEach(t),Hvr=r(jRe," (GPT-J model)"),jRe.forEach(t),Uvr=i(ae),AM=n(ae,"LI",{});var DRe=s(AM);lve=n(DRe,"STRONG",{});var b7t=s(lve);Jvr=r(b7t,"layoutlm"),b7t.forEach(t),Yvr=r(DRe," \u2014 "),EH=n(DRe,"A",{href:!0});var v7t=s(EH);Kvr=r(v7t,"TFLayoutLMForSequenceClassification"),v7t.forEach(t),Zvr=r(DRe," (LayoutLM model)"),DRe.forEach(t),eFr=i(ae),yM=n(ae,"LI",{});var GRe=s(yM);ive=n(GRe,"STRONG",{});var F7t=s(ive);oFr=r(F7t,"longformer"),F7t.forEach(t),rFr=r(GRe," \u2014 "),CH=n(GRe,"A",{href:!0});var T7t=s(CH);tFr=r(T7t,"TFLongformerForSequenceClassification"),T7t.forEach(t),aFr=r(GRe," (Longformer model)"),GRe.forEach(t),nFr=i(ae),LM=n(ae,"LI",{});var ORe=s(LM);dve=n(ORe,"STRONG",{});var M7t=s(dve);sFr=r(M7t,"mobilebert"),M7t.forEach(t),lFr=r(ORe," \u2014 "),wH=n(ORe,"A",{href:!0});var E7t=s(wH);iFr=r(E7t,"TFMobileBertForSequenceClassification"),E7t.forEach(t),dFr=r(ORe," (MobileBERT model)"),ORe.forEach(t),cFr=i(ae),xM=n(ae,"LI",{});var VRe=s(xM);cve=n(VRe,"STRONG",{});var C7t=s(cve);fFr=r(C7t,"mpnet"),C7t.forEach(t),mFr=r(VRe," \u2014 "),AH=n(VRe,"A",{href:!0});var w7t=s(AH);gFr=r(w7t,"TFMPNetForSequenceClassification"),w7t.forEach(t),hFr=r(VRe," (MPNet model)"),VRe.forEach(t),pFr=i(ae),$M=n(ae,"LI",{});var XRe=s($M);fve=n(XRe,"STRONG",{});var A7t=s(fve);uFr=r(A7t,"openai-gpt"),A7t.forEach(t),_Fr=r(XRe," \u2014 "),yH=n(XRe,"A",{href:!0});var y7t=s(yH);bFr=r(y7t,"TFOpenAIGPTForSequenceClassification"),y7t.forEach(t),vFr=r(XRe," (OpenAI GPT model)"),XRe.forEach(t),FFr=i(ae),kM=n(ae,"LI",{});var zRe=s(kM);mve=n(zRe,"STRONG",{});var L7t=s(mve);TFr=r(L7t,"rembert"),L7t.forEach(t),MFr=r(zRe," \u2014 "),LH=n(zRe,"A",{href:!0});var x7t=s(LH);EFr=r(x7t,"TFRemBertForSequenceClassification"),x7t.forEach(t),CFr=r(zRe," (RemBERT model)"),zRe.forEach(t),wFr=i(ae),SM=n(ae,"LI",{});var WRe=s(SM);gve=n(WRe,"STRONG",{});var $7t=s(gve);AFr=r($7t,"roberta"),$7t.forEach(t),yFr=r(WRe," \u2014 "),xH=n(WRe,"A",{href:!0});var k7t=s(xH);LFr=r(k7t,"TFRobertaForSequenceClassification"),k7t.forEach(t),xFr=r(WRe," (RoBERTa model)"),WRe.forEach(t),$Fr=i(ae),RM=n(ae,"LI",{});var QRe=s(RM);hve=n(QRe,"STRONG",{});var S7t=s(hve);kFr=r(S7t,"roformer"),S7t.forEach(t),SFr=r(QRe," \u2014 "),$H=n(QRe,"A",{href:!0});var R7t=s($H);RFr=r(R7t,"TFRoFormerForSequenceClassification"),R7t.forEach(t),PFr=r(QRe," (RoFormer model)"),QRe.forEach(t),BFr=i(ae),PM=n(ae,"LI",{});var HRe=s(PM);pve=n(HRe,"STRONG",{});var P7t=s(pve);IFr=r(P7t,"tapas"),P7t.forEach(t),qFr=r(HRe," \u2014 "),kH=n(HRe,"A",{href:!0});var B7t=s(kH);NFr=r(B7t,"TFTapasForSequenceClassification"),B7t.forEach(t),jFr=r(HRe," (TAPAS model)"),HRe.forEach(t),DFr=i(ae),BM=n(ae,"LI",{});var URe=s(BM);uve=n(URe,"STRONG",{});var I7t=s(uve);GFr=r(I7t,"transfo-xl"),I7t.forEach(t),OFr=r(URe," \u2014 "),SH=n(URe,"A",{href:!0});var q7t=s(SH);VFr=r(q7t,"TFTransfoXLForSequenceClassification"),q7t.forEach(t),XFr=r(URe," (Transformer-XL model)"),URe.forEach(t),zFr=i(ae),IM=n(ae,"LI",{});var JRe=s(IM);_ve=n(JRe,"STRONG",{});var N7t=s(_ve);WFr=r(N7t,"xlm"),N7t.forEach(t),QFr=r(JRe," \u2014 "),RH=n(JRe,"A",{href:!0});var j7t=s(RH);HFr=r(j7t,"TFXLMForSequenceClassification"),j7t.forEach(t),UFr=r(JRe," (XLM model)"),JRe.forEach(t),JFr=i(ae),qM=n(ae,"LI",{});var YRe=s(qM);bve=n(YRe,"STRONG",{});var D7t=s(bve);YFr=r(D7t,"xlm-roberta"),D7t.forEach(t),KFr=r(YRe," \u2014 "),PH=n(YRe,"A",{href:!0});var G7t=s(PH);ZFr=r(G7t,"TFXLMRobertaForSequenceClassification"),G7t.forEach(t),e6r=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),o6r=i(ae),NM=n(ae,"LI",{});var KRe=s(NM);vve=n(KRe,"STRONG",{});var O7t=s(vve);r6r=r(O7t,"xlnet"),O7t.forEach(t),t6r=r(KRe," \u2014 "),BH=n(KRe,"A",{href:!0});var V7t=s(BH);a6r=r(V7t,"TFXLNetForSequenceClassification"),V7t.forEach(t),n6r=r(KRe," (XLNet model)"),KRe.forEach(t),ae.forEach(t),s6r=i(Al),T(jM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),ENe=i(f),ic=n(f,"H2",{class:!0});var xDe=s(ic);DM=n(xDe,"A",{id:!0,class:!0,href:!0});var X7t=s(DM);Fve=n(X7t,"SPAN",{});var z7t=s(Fve);T(k8.$$.fragment,z7t),z7t.forEach(t),X7t.forEach(t),l6r=i(xDe),Tve=n(xDe,"SPAN",{});var W7t=s(Tve);i6r=r(W7t,"TFAutoModelForMultipleChoice"),W7t.forEach(t),xDe.forEach(t),CNe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(S8.$$.fragment,yl),d6r=i(yl),dc=n(yl,"P",{});var KZ=s(dc);c6r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IH=n(KZ,"A",{href:!0});var Q7t=s(IH);f6r=r(Q7t,"from_pretrained()"),Q7t.forEach(t),m6r=r(KZ," class method or the "),qH=n(KZ,"A",{href:!0});var H7t=s(qH);g6r=r(H7t,"from_config()"),H7t.forEach(t),h6r=r(KZ,` class
method.`),KZ.forEach(t),p6r=i(yl),R8=n(yl,"P",{});var $De=s(R8);u6r=r($De,"This class cannot be instantiated directly using "),Mve=n($De,"CODE",{});var U7t=s(Mve);_6r=r(U7t,"__init__()"),U7t.forEach(t),b6r=r($De," (throws an error)."),$De.forEach(t),v6r=i(yl),Pt=n(yl,"DIV",{class:!0});var yw=s(Pt);T(P8.$$.fragment,yw),F6r=i(yw),Eve=n(yw,"P",{});var J7t=s(Eve);T6r=r(J7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J7t.forEach(t),M6r=i(yw),cc=n(yw,"P",{});var ZZ=s(cc);E6r=r(ZZ,`Note:
Loading a model from its configuration file does `),Cve=n(ZZ,"STRONG",{});var Y7t=s(Cve);C6r=r(Y7t,"not"),Y7t.forEach(t),w6r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(ZZ,"A",{href:!0});var K7t=s(NH);A6r=r(K7t,"from_pretrained()"),K7t.forEach(t),y6r=r(ZZ," to load the model weights."),ZZ.forEach(t),L6r=i(yw),T(GM.$$.fragment,yw),yw.forEach(t),x6r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(B8.$$.fragment,Ll),$6r=i(Ll),wve=n(Ll,"P",{});var Z7t=s(wve);k6r=r(Z7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z7t.forEach(t),S6r=i(Ll),sn=n(Ll,"P",{});var Lw=s(sn);R6r=r(Lw,"The model class to instantiate is selected based on the "),Ave=n(Lw,"CODE",{});var eMt=s(Ave);P6r=r(eMt,"model_type"),eMt.forEach(t),B6r=r(Lw,` property of the config object (either
passed as an argument or loaded from `),yve=n(Lw,"CODE",{});var oMt=s(yve);I6r=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),q6r=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(Lw,"CODE",{});var rMt=s(Lve);N6r=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),j6r=r(Lw,":"),Lw.forEach(t),D6r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);OM=n(be,"LI",{});var ZRe=s(OM);xve=n(ZRe,"STRONG",{});var tMt=s(xve);G6r=r(tMt,"albert"),tMt.forEach(t),O6r=r(ZRe," \u2014 "),jH=n(ZRe,"A",{href:!0});var aMt=s(jH);V6r=r(aMt,"TFAlbertForMultipleChoice"),aMt.forEach(t),X6r=r(ZRe," (ALBERT model)"),ZRe.forEach(t),z6r=i(be),VM=n(be,"LI",{});var ePe=s(VM);$ve=n(ePe,"STRONG",{});var nMt=s($ve);W6r=r(nMt,"bert"),nMt.forEach(t),Q6r=r(ePe," \u2014 "),DH=n(ePe,"A",{href:!0});var sMt=s(DH);H6r=r(sMt,"TFBertForMultipleChoice"),sMt.forEach(t),U6r=r(ePe," (BERT model)"),ePe.forEach(t),J6r=i(be),XM=n(be,"LI",{});var oPe=s(XM);kve=n(oPe,"STRONG",{});var lMt=s(kve);Y6r=r(lMt,"camembert"),lMt.forEach(t),K6r=r(oPe," \u2014 "),GH=n(oPe,"A",{href:!0});var iMt=s(GH);Z6r=r(iMt,"TFCamembertForMultipleChoice"),iMt.forEach(t),eTr=r(oPe," (CamemBERT model)"),oPe.forEach(t),oTr=i(be),zM=n(be,"LI",{});var rPe=s(zM);Sve=n(rPe,"STRONG",{});var dMt=s(Sve);rTr=r(dMt,"convbert"),dMt.forEach(t),tTr=r(rPe," \u2014 "),OH=n(rPe,"A",{href:!0});var cMt=s(OH);aTr=r(cMt,"TFConvBertForMultipleChoice"),cMt.forEach(t),nTr=r(rPe," (ConvBERT model)"),rPe.forEach(t),sTr=i(be),WM=n(be,"LI",{});var tPe=s(WM);Rve=n(tPe,"STRONG",{});var fMt=s(Rve);lTr=r(fMt,"distilbert"),fMt.forEach(t),iTr=r(tPe," \u2014 "),VH=n(tPe,"A",{href:!0});var mMt=s(VH);dTr=r(mMt,"TFDistilBertForMultipleChoice"),mMt.forEach(t),cTr=r(tPe," (DistilBERT model)"),tPe.forEach(t),fTr=i(be),QM=n(be,"LI",{});var aPe=s(QM);Pve=n(aPe,"STRONG",{});var gMt=s(Pve);mTr=r(gMt,"electra"),gMt.forEach(t),gTr=r(aPe," \u2014 "),XH=n(aPe,"A",{href:!0});var hMt=s(XH);hTr=r(hMt,"TFElectraForMultipleChoice"),hMt.forEach(t),pTr=r(aPe," (ELECTRA model)"),aPe.forEach(t),uTr=i(be),HM=n(be,"LI",{});var nPe=s(HM);Bve=n(nPe,"STRONG",{});var pMt=s(Bve);_Tr=r(pMt,"flaubert"),pMt.forEach(t),bTr=r(nPe," \u2014 "),zH=n(nPe,"A",{href:!0});var uMt=s(zH);vTr=r(uMt,"TFFlaubertForMultipleChoice"),uMt.forEach(t),FTr=r(nPe," (FlauBERT model)"),nPe.forEach(t),TTr=i(be),UM=n(be,"LI",{});var sPe=s(UM);Ive=n(sPe,"STRONG",{});var _Mt=s(Ive);MTr=r(_Mt,"funnel"),_Mt.forEach(t),ETr=r(sPe," \u2014 "),WH=n(sPe,"A",{href:!0});var bMt=s(WH);CTr=r(bMt,"TFFunnelForMultipleChoice"),bMt.forEach(t),wTr=r(sPe," (Funnel Transformer model)"),sPe.forEach(t),ATr=i(be),JM=n(be,"LI",{});var lPe=s(JM);qve=n(lPe,"STRONG",{});var vMt=s(qve);yTr=r(vMt,"longformer"),vMt.forEach(t),LTr=r(lPe," \u2014 "),QH=n(lPe,"A",{href:!0});var FMt=s(QH);xTr=r(FMt,"TFLongformerForMultipleChoice"),FMt.forEach(t),$Tr=r(lPe," (Longformer model)"),lPe.forEach(t),kTr=i(be),YM=n(be,"LI",{});var iPe=s(YM);Nve=n(iPe,"STRONG",{});var TMt=s(Nve);STr=r(TMt,"mobilebert"),TMt.forEach(t),RTr=r(iPe," \u2014 "),HH=n(iPe,"A",{href:!0});var MMt=s(HH);PTr=r(MMt,"TFMobileBertForMultipleChoice"),MMt.forEach(t),BTr=r(iPe," (MobileBERT model)"),iPe.forEach(t),ITr=i(be),KM=n(be,"LI",{});var dPe=s(KM);jve=n(dPe,"STRONG",{});var EMt=s(jve);qTr=r(EMt,"mpnet"),EMt.forEach(t),NTr=r(dPe," \u2014 "),UH=n(dPe,"A",{href:!0});var CMt=s(UH);jTr=r(CMt,"TFMPNetForMultipleChoice"),CMt.forEach(t),DTr=r(dPe," (MPNet model)"),dPe.forEach(t),GTr=i(be),ZM=n(be,"LI",{});var cPe=s(ZM);Dve=n(cPe,"STRONG",{});var wMt=s(Dve);OTr=r(wMt,"rembert"),wMt.forEach(t),VTr=r(cPe," \u2014 "),JH=n(cPe,"A",{href:!0});var AMt=s(JH);XTr=r(AMt,"TFRemBertForMultipleChoice"),AMt.forEach(t),zTr=r(cPe," (RemBERT model)"),cPe.forEach(t),WTr=i(be),e4=n(be,"LI",{});var fPe=s(e4);Gve=n(fPe,"STRONG",{});var yMt=s(Gve);QTr=r(yMt,"roberta"),yMt.forEach(t),HTr=r(fPe," \u2014 "),YH=n(fPe,"A",{href:!0});var LMt=s(YH);UTr=r(LMt,"TFRobertaForMultipleChoice"),LMt.forEach(t),JTr=r(fPe," (RoBERTa model)"),fPe.forEach(t),YTr=i(be),o4=n(be,"LI",{});var mPe=s(o4);Ove=n(mPe,"STRONG",{});var xMt=s(Ove);KTr=r(xMt,"roformer"),xMt.forEach(t),ZTr=r(mPe," \u2014 "),KH=n(mPe,"A",{href:!0});var $Mt=s(KH);e7r=r($Mt,"TFRoFormerForMultipleChoice"),$Mt.forEach(t),o7r=r(mPe," (RoFormer model)"),mPe.forEach(t),r7r=i(be),r4=n(be,"LI",{});var gPe=s(r4);Vve=n(gPe,"STRONG",{});var kMt=s(Vve);t7r=r(kMt,"xlm"),kMt.forEach(t),a7r=r(gPe," \u2014 "),ZH=n(gPe,"A",{href:!0});var SMt=s(ZH);n7r=r(SMt,"TFXLMForMultipleChoice"),SMt.forEach(t),s7r=r(gPe," (XLM model)"),gPe.forEach(t),l7r=i(be),t4=n(be,"LI",{});var hPe=s(t4);Xve=n(hPe,"STRONG",{});var RMt=s(Xve);i7r=r(RMt,"xlm-roberta"),RMt.forEach(t),d7r=r(hPe," \u2014 "),eU=n(hPe,"A",{href:!0});var PMt=s(eU);c7r=r(PMt,"TFXLMRobertaForMultipleChoice"),PMt.forEach(t),f7r=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),m7r=i(be),a4=n(be,"LI",{});var pPe=s(a4);zve=n(pPe,"STRONG",{});var BMt=s(zve);g7r=r(BMt,"xlnet"),BMt.forEach(t),h7r=r(pPe," \u2014 "),oU=n(pPe,"A",{href:!0});var IMt=s(oU);p7r=r(IMt,"TFXLNetForMultipleChoice"),IMt.forEach(t),u7r=r(pPe," (XLNet model)"),pPe.forEach(t),be.forEach(t),_7r=i(Ll),T(n4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),wNe=i(f),fc=n(f,"H2",{class:!0});var kDe=s(fc);s4=n(kDe,"A",{id:!0,class:!0,href:!0});var qMt=s(s4);Wve=n(qMt,"SPAN",{});var NMt=s(Wve);T(I8.$$.fragment,NMt),NMt.forEach(t),qMt.forEach(t),b7r=i(kDe),Qve=n(kDe,"SPAN",{});var jMt=s(Qve);v7r=r(jMt,"TFAutoModelForNextSentencePrediction"),jMt.forEach(t),kDe.forEach(t),ANe=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(q8.$$.fragment,xl),F7r=i(xl),mc=n(xl,"P",{});var eee=s(mc);T7r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rU=n(eee,"A",{href:!0});var DMt=s(rU);M7r=r(DMt,"from_pretrained()"),DMt.forEach(t),E7r=r(eee," class method or the "),tU=n(eee,"A",{href:!0});var GMt=s(tU);C7r=r(GMt,"from_config()"),GMt.forEach(t),w7r=r(eee,` class
method.`),eee.forEach(t),A7r=i(xl),N8=n(xl,"P",{});var SDe=s(N8);y7r=r(SDe,"This class cannot be instantiated directly using "),Hve=n(SDe,"CODE",{});var OMt=s(Hve);L7r=r(OMt,"__init__()"),OMt.forEach(t),x7r=r(SDe," (throws an error)."),SDe.forEach(t),$7r=i(xl),Bt=n(xl,"DIV",{class:!0});var xw=s(Bt);T(j8.$$.fragment,xw),k7r=i(xw),Uve=n(xw,"P",{});var VMt=s(Uve);S7r=r(VMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VMt.forEach(t),R7r=i(xw),gc=n(xw,"P",{});var oee=s(gc);P7r=r(oee,`Note:
Loading a model from its configuration file does `),Jve=n(oee,"STRONG",{});var XMt=s(Jve);B7r=r(XMt,"not"),XMt.forEach(t),I7r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(oee,"A",{href:!0});var zMt=s(aU);q7r=r(zMt,"from_pretrained()"),zMt.forEach(t),N7r=r(oee," to load the model weights."),oee.forEach(t),j7r=i(xw),T(l4.$$.fragment,xw),xw.forEach(t),D7r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(D8.$$.fragment,$l),G7r=i($l),Yve=n($l,"P",{});var WMt=s(Yve);O7r=r(WMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WMt.forEach(t),V7r=i($l),ln=n($l,"P",{});var $w=s(ln);X7r=r($w,"The model class to instantiate is selected based on the "),Kve=n($w,"CODE",{});var QMt=s(Kve);z7r=r(QMt,"model_type"),QMt.forEach(t),W7r=r($w,` property of the config object (either
passed as an argument or loaded from `),Zve=n($w,"CODE",{});var HMt=s(Zve);Q7r=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),H7r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n($w,"CODE",{});var UMt=s(eFe);U7r=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),J7r=r($w,":"),$w.forEach(t),Y7r=i($l),G8=n($l,"UL",{});var RDe=s(G8);i4=n(RDe,"LI",{});var uPe=s(i4);oFe=n(uPe,"STRONG",{});var JMt=s(oFe);K7r=r(JMt,"bert"),JMt.forEach(t),Z7r=r(uPe," \u2014 "),nU=n(uPe,"A",{href:!0});var YMt=s(nU);eMr=r(YMt,"TFBertForNextSentencePrediction"),YMt.forEach(t),oMr=r(uPe," (BERT model)"),uPe.forEach(t),rMr=i(RDe),d4=n(RDe,"LI",{});var _Pe=s(d4);rFe=n(_Pe,"STRONG",{});var KMt=s(rFe);tMr=r(KMt,"mobilebert"),KMt.forEach(t),aMr=r(_Pe," \u2014 "),sU=n(_Pe,"A",{href:!0});var ZMt=s(sU);nMr=r(ZMt,"TFMobileBertForNextSentencePrediction"),ZMt.forEach(t),sMr=r(_Pe," (MobileBERT model)"),_Pe.forEach(t),RDe.forEach(t),lMr=i($l),T(c4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),yNe=i(f),hc=n(f,"H2",{class:!0});var PDe=s(hc);f4=n(PDe,"A",{id:!0,class:!0,href:!0});var e4t=s(f4);tFe=n(e4t,"SPAN",{});var o4t=s(tFe);T(O8.$$.fragment,o4t),o4t.forEach(t),e4t.forEach(t),iMr=i(PDe),aFe=n(PDe,"SPAN",{});var r4t=s(aFe);dMr=r(r4t,"TFAutoModelForTableQuestionAnswering"),r4t.forEach(t),PDe.forEach(t),LNe=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(V8.$$.fragment,kl),cMr=i(kl),pc=n(kl,"P",{});var ree=s(pc);fMr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lU=n(ree,"A",{href:!0});var t4t=s(lU);mMr=r(t4t,"from_pretrained()"),t4t.forEach(t),gMr=r(ree," class method or the "),iU=n(ree,"A",{href:!0});var a4t=s(iU);hMr=r(a4t,"from_config()"),a4t.forEach(t),pMr=r(ree,` class
method.`),ree.forEach(t),uMr=i(kl),X8=n(kl,"P",{});var BDe=s(X8);_Mr=r(BDe,"This class cannot be instantiated directly using "),nFe=n(BDe,"CODE",{});var n4t=s(nFe);bMr=r(n4t,"__init__()"),n4t.forEach(t),vMr=r(BDe," (throws an error)."),BDe.forEach(t),FMr=i(kl),It=n(kl,"DIV",{class:!0});var kw=s(It);T(z8.$$.fragment,kw),TMr=i(kw),sFe=n(kw,"P",{});var s4t=s(sFe);MMr=r(s4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),s4t.forEach(t),EMr=i(kw),uc=n(kw,"P",{});var tee=s(uc);CMr=r(tee,`Note:
Loading a model from its configuration file does `),lFe=n(tee,"STRONG",{});var l4t=s(lFe);wMr=r(l4t,"not"),l4t.forEach(t),AMr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(tee,"A",{href:!0});var i4t=s(dU);yMr=r(i4t,"from_pretrained()"),i4t.forEach(t),LMr=r(tee," to load the model weights."),tee.forEach(t),xMr=i(kw),T(m4.$$.fragment,kw),kw.forEach(t),$Mr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(W8.$$.fragment,Sl),kMr=i(Sl),iFe=n(Sl,"P",{});var d4t=s(iFe);SMr=r(d4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),d4t.forEach(t),RMr=i(Sl),dn=n(Sl,"P",{});var Sw=s(dn);PMr=r(Sw,"The model class to instantiate is selected based on the "),dFe=n(Sw,"CODE",{});var c4t=s(dFe);BMr=r(c4t,"model_type"),c4t.forEach(t),IMr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),cFe=n(Sw,"CODE",{});var f4t=s(cFe);qMr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),NMr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(Sw,"CODE",{});var m4t=s(fFe);jMr=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),DMr=r(Sw,":"),Sw.forEach(t),GMr=i(Sl),mFe=n(Sl,"UL",{});var g4t=s(mFe);g4=n(g4t,"LI",{});var bPe=s(g4);gFe=n(bPe,"STRONG",{});var h4t=s(gFe);OMr=r(h4t,"tapas"),h4t.forEach(t),VMr=r(bPe," \u2014 "),cU=n(bPe,"A",{href:!0});var p4t=s(cU);XMr=r(p4t,"TFTapasForQuestionAnswering"),p4t.forEach(t),zMr=r(bPe," (TAPAS model)"),bPe.forEach(t),g4t.forEach(t),WMr=i(Sl),T(h4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),xNe=i(f),_c=n(f,"H2",{class:!0});var IDe=s(_c);p4=n(IDe,"A",{id:!0,class:!0,href:!0});var u4t=s(p4);hFe=n(u4t,"SPAN",{});var _4t=s(hFe);T(Q8.$$.fragment,_4t),_4t.forEach(t),u4t.forEach(t),QMr=i(IDe),pFe=n(IDe,"SPAN",{});var b4t=s(pFe);HMr=r(b4t,"TFAutoModelForTokenClassification"),b4t.forEach(t),IDe.forEach(t),$Ne=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(H8.$$.fragment,Rl),UMr=i(Rl),bc=n(Rl,"P",{});var aee=s(bc);JMr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fU=n(aee,"A",{href:!0});var v4t=s(fU);YMr=r(v4t,"from_pretrained()"),v4t.forEach(t),KMr=r(aee," class method or the "),mU=n(aee,"A",{href:!0});var F4t=s(mU);ZMr=r(F4t,"from_config()"),F4t.forEach(t),e4r=r(aee,` class
method.`),aee.forEach(t),o4r=i(Rl),U8=n(Rl,"P",{});var qDe=s(U8);r4r=r(qDe,"This class cannot be instantiated directly using "),uFe=n(qDe,"CODE",{});var T4t=s(uFe);t4r=r(T4t,"__init__()"),T4t.forEach(t),a4r=r(qDe," (throws an error)."),qDe.forEach(t),n4r=i(Rl),qt=n(Rl,"DIV",{class:!0});var Rw=s(qt);T(J8.$$.fragment,Rw),s4r=i(Rw),_Fe=n(Rw,"P",{});var M4t=s(_Fe);l4r=r(M4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),M4t.forEach(t),i4r=i(Rw),vc=n(Rw,"P",{});var nee=s(vc);d4r=r(nee,`Note:
Loading a model from its configuration file does `),bFe=n(nee,"STRONG",{});var E4t=s(bFe);c4r=r(E4t,"not"),E4t.forEach(t),f4r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(nee,"A",{href:!0});var C4t=s(gU);m4r=r(C4t,"from_pretrained()"),C4t.forEach(t),g4r=r(nee," to load the model weights."),nee.forEach(t),h4r=i(Rw),T(u4.$$.fragment,Rw),Rw.forEach(t),p4r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(Y8.$$.fragment,Pl),u4r=i(Pl),vFe=n(Pl,"P",{});var w4t=s(vFe);_4r=r(w4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),w4t.forEach(t),b4r=i(Pl),cn=n(Pl,"P",{});var Pw=s(cn);v4r=r(Pw,"The model class to instantiate is selected based on the "),FFe=n(Pw,"CODE",{});var A4t=s(FFe);F4r=r(A4t,"model_type"),A4t.forEach(t),T4r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),TFe=n(Pw,"CODE",{});var y4t=s(TFe);M4r=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),E4r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(Pw,"CODE",{});var L4t=s(MFe);C4r=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),w4r=r(Pw,":"),Pw.forEach(t),A4r=i(Pl),de=n(Pl,"UL",{});var me=s(de);_4=n(me,"LI",{});var vPe=s(_4);EFe=n(vPe,"STRONG",{});var x4t=s(EFe);y4r=r(x4t,"albert"),x4t.forEach(t),L4r=r(vPe," \u2014 "),hU=n(vPe,"A",{href:!0});var $4t=s(hU);x4r=r($4t,"TFAlbertForTokenClassification"),$4t.forEach(t),$4r=r(vPe," (ALBERT model)"),vPe.forEach(t),k4r=i(me),b4=n(me,"LI",{});var FPe=s(b4);CFe=n(FPe,"STRONG",{});var k4t=s(CFe);S4r=r(k4t,"bert"),k4t.forEach(t),R4r=r(FPe," \u2014 "),pU=n(FPe,"A",{href:!0});var S4t=s(pU);P4r=r(S4t,"TFBertForTokenClassification"),S4t.forEach(t),B4r=r(FPe," (BERT model)"),FPe.forEach(t),I4r=i(me),v4=n(me,"LI",{});var TPe=s(v4);wFe=n(TPe,"STRONG",{});var R4t=s(wFe);q4r=r(R4t,"camembert"),R4t.forEach(t),N4r=r(TPe," \u2014 "),uU=n(TPe,"A",{href:!0});var P4t=s(uU);j4r=r(P4t,"TFCamembertForTokenClassification"),P4t.forEach(t),D4r=r(TPe," (CamemBERT model)"),TPe.forEach(t),G4r=i(me),F4=n(me,"LI",{});var MPe=s(F4);AFe=n(MPe,"STRONG",{});var B4t=s(AFe);O4r=r(B4t,"convbert"),B4t.forEach(t),V4r=r(MPe," \u2014 "),_U=n(MPe,"A",{href:!0});var I4t=s(_U);X4r=r(I4t,"TFConvBertForTokenClassification"),I4t.forEach(t),z4r=r(MPe," (ConvBERT model)"),MPe.forEach(t),W4r=i(me),T4=n(me,"LI",{});var EPe=s(T4);yFe=n(EPe,"STRONG",{});var q4t=s(yFe);Q4r=r(q4t,"deberta"),q4t.forEach(t),H4r=r(EPe," \u2014 "),bU=n(EPe,"A",{href:!0});var N4t=s(bU);U4r=r(N4t,"TFDebertaForTokenClassification"),N4t.forEach(t),J4r=r(EPe," (DeBERTa model)"),EPe.forEach(t),Y4r=i(me),M4=n(me,"LI",{});var CPe=s(M4);LFe=n(CPe,"STRONG",{});var j4t=s(LFe);K4r=r(j4t,"deberta-v2"),j4t.forEach(t),Z4r=r(CPe," \u2014 "),vU=n(CPe,"A",{href:!0});var D4t=s(vU);eEr=r(D4t,"TFDebertaV2ForTokenClassification"),D4t.forEach(t),oEr=r(CPe," (DeBERTa-v2 model)"),CPe.forEach(t),rEr=i(me),E4=n(me,"LI",{});var wPe=s(E4);xFe=n(wPe,"STRONG",{});var G4t=s(xFe);tEr=r(G4t,"distilbert"),G4t.forEach(t),aEr=r(wPe," \u2014 "),FU=n(wPe,"A",{href:!0});var O4t=s(FU);nEr=r(O4t,"TFDistilBertForTokenClassification"),O4t.forEach(t),sEr=r(wPe," (DistilBERT model)"),wPe.forEach(t),lEr=i(me),C4=n(me,"LI",{});var APe=s(C4);$Fe=n(APe,"STRONG",{});var V4t=s($Fe);iEr=r(V4t,"electra"),V4t.forEach(t),dEr=r(APe," \u2014 "),TU=n(APe,"A",{href:!0});var X4t=s(TU);cEr=r(X4t,"TFElectraForTokenClassification"),X4t.forEach(t),fEr=r(APe," (ELECTRA model)"),APe.forEach(t),mEr=i(me),w4=n(me,"LI",{});var yPe=s(w4);kFe=n(yPe,"STRONG",{});var z4t=s(kFe);gEr=r(z4t,"flaubert"),z4t.forEach(t),hEr=r(yPe," \u2014 "),MU=n(yPe,"A",{href:!0});var W4t=s(MU);pEr=r(W4t,"TFFlaubertForTokenClassification"),W4t.forEach(t),uEr=r(yPe," (FlauBERT model)"),yPe.forEach(t),_Er=i(me),A4=n(me,"LI",{});var LPe=s(A4);SFe=n(LPe,"STRONG",{});var Q4t=s(SFe);bEr=r(Q4t,"funnel"),Q4t.forEach(t),vEr=r(LPe," \u2014 "),EU=n(LPe,"A",{href:!0});var H4t=s(EU);FEr=r(H4t,"TFFunnelForTokenClassification"),H4t.forEach(t),TEr=r(LPe," (Funnel Transformer model)"),LPe.forEach(t),MEr=i(me),y4=n(me,"LI",{});var xPe=s(y4);RFe=n(xPe,"STRONG",{});var U4t=s(RFe);EEr=r(U4t,"layoutlm"),U4t.forEach(t),CEr=r(xPe," \u2014 "),CU=n(xPe,"A",{href:!0});var J4t=s(CU);wEr=r(J4t,"TFLayoutLMForTokenClassification"),J4t.forEach(t),AEr=r(xPe," (LayoutLM model)"),xPe.forEach(t),yEr=i(me),L4=n(me,"LI",{});var $Pe=s(L4);PFe=n($Pe,"STRONG",{});var Y4t=s(PFe);LEr=r(Y4t,"longformer"),Y4t.forEach(t),xEr=r($Pe," \u2014 "),wU=n($Pe,"A",{href:!0});var K4t=s(wU);$Er=r(K4t,"TFLongformerForTokenClassification"),K4t.forEach(t),kEr=r($Pe," (Longformer model)"),$Pe.forEach(t),SEr=i(me),x4=n(me,"LI",{});var kPe=s(x4);BFe=n(kPe,"STRONG",{});var Z4t=s(BFe);REr=r(Z4t,"mobilebert"),Z4t.forEach(t),PEr=r(kPe," \u2014 "),AU=n(kPe,"A",{href:!0});var eEt=s(AU);BEr=r(eEt,"TFMobileBertForTokenClassification"),eEt.forEach(t),IEr=r(kPe," (MobileBERT model)"),kPe.forEach(t),qEr=i(me),$4=n(me,"LI",{});var SPe=s($4);IFe=n(SPe,"STRONG",{});var oEt=s(IFe);NEr=r(oEt,"mpnet"),oEt.forEach(t),jEr=r(SPe," \u2014 "),yU=n(SPe,"A",{href:!0});var rEt=s(yU);DEr=r(rEt,"TFMPNetForTokenClassification"),rEt.forEach(t),GEr=r(SPe," (MPNet model)"),SPe.forEach(t),OEr=i(me),k4=n(me,"LI",{});var RPe=s(k4);qFe=n(RPe,"STRONG",{});var tEt=s(qFe);VEr=r(tEt,"rembert"),tEt.forEach(t),XEr=r(RPe," \u2014 "),LU=n(RPe,"A",{href:!0});var aEt=s(LU);zEr=r(aEt,"TFRemBertForTokenClassification"),aEt.forEach(t),WEr=r(RPe," (RemBERT model)"),RPe.forEach(t),QEr=i(me),S4=n(me,"LI",{});var PPe=s(S4);NFe=n(PPe,"STRONG",{});var nEt=s(NFe);HEr=r(nEt,"roberta"),nEt.forEach(t),UEr=r(PPe," \u2014 "),xU=n(PPe,"A",{href:!0});var sEt=s(xU);JEr=r(sEt,"TFRobertaForTokenClassification"),sEt.forEach(t),YEr=r(PPe," (RoBERTa model)"),PPe.forEach(t),KEr=i(me),R4=n(me,"LI",{});var BPe=s(R4);jFe=n(BPe,"STRONG",{});var lEt=s(jFe);ZEr=r(lEt,"roformer"),lEt.forEach(t),eCr=r(BPe," \u2014 "),$U=n(BPe,"A",{href:!0});var iEt=s($U);oCr=r(iEt,"TFRoFormerForTokenClassification"),iEt.forEach(t),rCr=r(BPe," (RoFormer model)"),BPe.forEach(t),tCr=i(me),P4=n(me,"LI",{});var IPe=s(P4);DFe=n(IPe,"STRONG",{});var dEt=s(DFe);aCr=r(dEt,"xlm"),dEt.forEach(t),nCr=r(IPe," \u2014 "),kU=n(IPe,"A",{href:!0});var cEt=s(kU);sCr=r(cEt,"TFXLMForTokenClassification"),cEt.forEach(t),lCr=r(IPe," (XLM model)"),IPe.forEach(t),iCr=i(me),B4=n(me,"LI",{});var qPe=s(B4);GFe=n(qPe,"STRONG",{});var fEt=s(GFe);dCr=r(fEt,"xlm-roberta"),fEt.forEach(t),cCr=r(qPe," \u2014 "),SU=n(qPe,"A",{href:!0});var mEt=s(SU);fCr=r(mEt,"TFXLMRobertaForTokenClassification"),mEt.forEach(t),mCr=r(qPe," (XLM-RoBERTa model)"),qPe.forEach(t),gCr=i(me),I4=n(me,"LI",{});var NPe=s(I4);OFe=n(NPe,"STRONG",{});var gEt=s(OFe);hCr=r(gEt,"xlnet"),gEt.forEach(t),pCr=r(NPe," \u2014 "),RU=n(NPe,"A",{href:!0});var hEt=s(RU);uCr=r(hEt,"TFXLNetForTokenClassification"),hEt.forEach(t),_Cr=r(NPe," (XLNet model)"),NPe.forEach(t),me.forEach(t),bCr=i(Pl),T(q4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),kNe=i(f),Fc=n(f,"H2",{class:!0});var NDe=s(Fc);N4=n(NDe,"A",{id:!0,class:!0,href:!0});var pEt=s(N4);VFe=n(pEt,"SPAN",{});var uEt=s(VFe);T(K8.$$.fragment,uEt),uEt.forEach(t),pEt.forEach(t),vCr=i(NDe),XFe=n(NDe,"SPAN",{});var _Et=s(XFe);FCr=r(_Et,"TFAutoModelForQuestionAnswering"),_Et.forEach(t),NDe.forEach(t),SNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(Z8.$$.fragment,Bl),TCr=i(Bl),Tc=n(Bl,"P",{});var see=s(Tc);MCr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PU=n(see,"A",{href:!0});var bEt=s(PU);ECr=r(bEt,"from_pretrained()"),bEt.forEach(t),CCr=r(see," class method or the "),BU=n(see,"A",{href:!0});var vEt=s(BU);wCr=r(vEt,"from_config()"),vEt.forEach(t),ACr=r(see,` class
method.`),see.forEach(t),yCr=i(Bl),e9=n(Bl,"P",{});var jDe=s(e9);LCr=r(jDe,"This class cannot be instantiated directly using "),zFe=n(jDe,"CODE",{});var FEt=s(zFe);xCr=r(FEt,"__init__()"),FEt.forEach(t),$Cr=r(jDe," (throws an error)."),jDe.forEach(t),kCr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Bw=s(Nt);T(o9.$$.fragment,Bw),SCr=i(Bw),WFe=n(Bw,"P",{});var TEt=s(WFe);RCr=r(TEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TEt.forEach(t),PCr=i(Bw),Mc=n(Bw,"P",{});var lee=s(Mc);BCr=r(lee,`Note:
Loading a model from its configuration file does `),QFe=n(lee,"STRONG",{});var MEt=s(QFe);ICr=r(MEt,"not"),MEt.forEach(t),qCr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(lee,"A",{href:!0});var EEt=s(IU);NCr=r(EEt,"from_pretrained()"),EEt.forEach(t),jCr=r(lee," to load the model weights."),lee.forEach(t),DCr=i(Bw),T(j4.$$.fragment,Bw),Bw.forEach(t),GCr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(r9.$$.fragment,Il),OCr=i(Il),HFe=n(Il,"P",{});var CEt=s(HFe);VCr=r(CEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CEt.forEach(t),XCr=i(Il),fn=n(Il,"P",{});var Iw=s(fn);zCr=r(Iw,"The model class to instantiate is selected based on the "),UFe=n(Iw,"CODE",{});var wEt=s(UFe);WCr=r(wEt,"model_type"),wEt.forEach(t),QCr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),JFe=n(Iw,"CODE",{});var AEt=s(JFe);HCr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),UCr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(Iw,"CODE",{});var yEt=s(YFe);JCr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),YCr=r(Iw,":"),Iw.forEach(t),KCr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);D4=n(ge,"LI",{});var jPe=s(D4);KFe=n(jPe,"STRONG",{});var LEt=s(KFe);ZCr=r(LEt,"albert"),LEt.forEach(t),e5r=r(jPe," \u2014 "),qU=n(jPe,"A",{href:!0});var xEt=s(qU);o5r=r(xEt,"TFAlbertForQuestionAnswering"),xEt.forEach(t),r5r=r(jPe," (ALBERT model)"),jPe.forEach(t),t5r=i(ge),G4=n(ge,"LI",{});var DPe=s(G4);ZFe=n(DPe,"STRONG",{});var $Et=s(ZFe);a5r=r($Et,"bert"),$Et.forEach(t),n5r=r(DPe," \u2014 "),NU=n(DPe,"A",{href:!0});var kEt=s(NU);s5r=r(kEt,"TFBertForQuestionAnswering"),kEt.forEach(t),l5r=r(DPe," (BERT model)"),DPe.forEach(t),i5r=i(ge),O4=n(ge,"LI",{});var GPe=s(O4);e6e=n(GPe,"STRONG",{});var SEt=s(e6e);d5r=r(SEt,"camembert"),SEt.forEach(t),c5r=r(GPe," \u2014 "),jU=n(GPe,"A",{href:!0});var REt=s(jU);f5r=r(REt,"TFCamembertForQuestionAnswering"),REt.forEach(t),m5r=r(GPe," (CamemBERT model)"),GPe.forEach(t),g5r=i(ge),V4=n(ge,"LI",{});var OPe=s(V4);o6e=n(OPe,"STRONG",{});var PEt=s(o6e);h5r=r(PEt,"convbert"),PEt.forEach(t),p5r=r(OPe," \u2014 "),DU=n(OPe,"A",{href:!0});var BEt=s(DU);u5r=r(BEt,"TFConvBertForQuestionAnswering"),BEt.forEach(t),_5r=r(OPe," (ConvBERT model)"),OPe.forEach(t),b5r=i(ge),X4=n(ge,"LI",{});var VPe=s(X4);r6e=n(VPe,"STRONG",{});var IEt=s(r6e);v5r=r(IEt,"deberta"),IEt.forEach(t),F5r=r(VPe," \u2014 "),GU=n(VPe,"A",{href:!0});var qEt=s(GU);T5r=r(qEt,"TFDebertaForQuestionAnswering"),qEt.forEach(t),M5r=r(VPe," (DeBERTa model)"),VPe.forEach(t),E5r=i(ge),z4=n(ge,"LI",{});var XPe=s(z4);t6e=n(XPe,"STRONG",{});var NEt=s(t6e);C5r=r(NEt,"deberta-v2"),NEt.forEach(t),w5r=r(XPe," \u2014 "),OU=n(XPe,"A",{href:!0});var jEt=s(OU);A5r=r(jEt,"TFDebertaV2ForQuestionAnswering"),jEt.forEach(t),y5r=r(XPe," (DeBERTa-v2 model)"),XPe.forEach(t),L5r=i(ge),W4=n(ge,"LI",{});var zPe=s(W4);a6e=n(zPe,"STRONG",{});var DEt=s(a6e);x5r=r(DEt,"distilbert"),DEt.forEach(t),$5r=r(zPe," \u2014 "),VU=n(zPe,"A",{href:!0});var GEt=s(VU);k5r=r(GEt,"TFDistilBertForQuestionAnswering"),GEt.forEach(t),S5r=r(zPe," (DistilBERT model)"),zPe.forEach(t),R5r=i(ge),Q4=n(ge,"LI",{});var WPe=s(Q4);n6e=n(WPe,"STRONG",{});var OEt=s(n6e);P5r=r(OEt,"electra"),OEt.forEach(t),B5r=r(WPe," \u2014 "),XU=n(WPe,"A",{href:!0});var VEt=s(XU);I5r=r(VEt,"TFElectraForQuestionAnswering"),VEt.forEach(t),q5r=r(WPe," (ELECTRA model)"),WPe.forEach(t),N5r=i(ge),H4=n(ge,"LI",{});var QPe=s(H4);s6e=n(QPe,"STRONG",{});var XEt=s(s6e);j5r=r(XEt,"flaubert"),XEt.forEach(t),D5r=r(QPe," \u2014 "),zU=n(QPe,"A",{href:!0});var zEt=s(zU);G5r=r(zEt,"TFFlaubertForQuestionAnsweringSimple"),zEt.forEach(t),O5r=r(QPe," (FlauBERT model)"),QPe.forEach(t),V5r=i(ge),U4=n(ge,"LI",{});var HPe=s(U4);l6e=n(HPe,"STRONG",{});var WEt=s(l6e);X5r=r(WEt,"funnel"),WEt.forEach(t),z5r=r(HPe," \u2014 "),WU=n(HPe,"A",{href:!0});var QEt=s(WU);W5r=r(QEt,"TFFunnelForQuestionAnswering"),QEt.forEach(t),Q5r=r(HPe," (Funnel Transformer model)"),HPe.forEach(t),H5r=i(ge),J4=n(ge,"LI",{});var UPe=s(J4);i6e=n(UPe,"STRONG",{});var HEt=s(i6e);U5r=r(HEt,"gptj"),HEt.forEach(t),J5r=r(UPe," \u2014 "),QU=n(UPe,"A",{href:!0});var UEt=s(QU);Y5r=r(UEt,"TFGPTJForQuestionAnswering"),UEt.forEach(t),K5r=r(UPe," (GPT-J model)"),UPe.forEach(t),Z5r=i(ge),Y4=n(ge,"LI",{});var JPe=s(Y4);d6e=n(JPe,"STRONG",{});var JEt=s(d6e);e3r=r(JEt,"longformer"),JEt.forEach(t),o3r=r(JPe," \u2014 "),HU=n(JPe,"A",{href:!0});var YEt=s(HU);r3r=r(YEt,"TFLongformerForQuestionAnswering"),YEt.forEach(t),t3r=r(JPe," (Longformer model)"),JPe.forEach(t),a3r=i(ge),K4=n(ge,"LI",{});var YPe=s(K4);c6e=n(YPe,"STRONG",{});var KEt=s(c6e);n3r=r(KEt,"mobilebert"),KEt.forEach(t),s3r=r(YPe," \u2014 "),UU=n(YPe,"A",{href:!0});var ZEt=s(UU);l3r=r(ZEt,"TFMobileBertForQuestionAnswering"),ZEt.forEach(t),i3r=r(YPe," (MobileBERT model)"),YPe.forEach(t),d3r=i(ge),Z4=n(ge,"LI",{});var KPe=s(Z4);f6e=n(KPe,"STRONG",{});var eCt=s(f6e);c3r=r(eCt,"mpnet"),eCt.forEach(t),f3r=r(KPe," \u2014 "),JU=n(KPe,"A",{href:!0});var oCt=s(JU);m3r=r(oCt,"TFMPNetForQuestionAnswering"),oCt.forEach(t),g3r=r(KPe," (MPNet model)"),KPe.forEach(t),h3r=i(ge),eE=n(ge,"LI",{});var ZPe=s(eE);m6e=n(ZPe,"STRONG",{});var rCt=s(m6e);p3r=r(rCt,"rembert"),rCt.forEach(t),u3r=r(ZPe," \u2014 "),YU=n(ZPe,"A",{href:!0});var tCt=s(YU);_3r=r(tCt,"TFRemBertForQuestionAnswering"),tCt.forEach(t),b3r=r(ZPe," (RemBERT model)"),ZPe.forEach(t),v3r=i(ge),oE=n(ge,"LI",{});var eBe=s(oE);g6e=n(eBe,"STRONG",{});var aCt=s(g6e);F3r=r(aCt,"roberta"),aCt.forEach(t),T3r=r(eBe," \u2014 "),KU=n(eBe,"A",{href:!0});var nCt=s(KU);M3r=r(nCt,"TFRobertaForQuestionAnswering"),nCt.forEach(t),E3r=r(eBe," (RoBERTa model)"),eBe.forEach(t),C3r=i(ge),rE=n(ge,"LI",{});var oBe=s(rE);h6e=n(oBe,"STRONG",{});var sCt=s(h6e);w3r=r(sCt,"roformer"),sCt.forEach(t),A3r=r(oBe," \u2014 "),ZU=n(oBe,"A",{href:!0});var lCt=s(ZU);y3r=r(lCt,"TFRoFormerForQuestionAnswering"),lCt.forEach(t),L3r=r(oBe," (RoFormer model)"),oBe.forEach(t),x3r=i(ge),tE=n(ge,"LI",{});var rBe=s(tE);p6e=n(rBe,"STRONG",{});var iCt=s(p6e);$3r=r(iCt,"xlm"),iCt.forEach(t),k3r=r(rBe," \u2014 "),eJ=n(rBe,"A",{href:!0});var dCt=s(eJ);S3r=r(dCt,"TFXLMForQuestionAnsweringSimple"),dCt.forEach(t),R3r=r(rBe," (XLM model)"),rBe.forEach(t),P3r=i(ge),aE=n(ge,"LI",{});var tBe=s(aE);u6e=n(tBe,"STRONG",{});var cCt=s(u6e);B3r=r(cCt,"xlm-roberta"),cCt.forEach(t),I3r=r(tBe," \u2014 "),oJ=n(tBe,"A",{href:!0});var fCt=s(oJ);q3r=r(fCt,"TFXLMRobertaForQuestionAnswering"),fCt.forEach(t),N3r=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),j3r=i(ge),nE=n(ge,"LI",{});var aBe=s(nE);_6e=n(aBe,"STRONG",{});var mCt=s(_6e);D3r=r(mCt,"xlnet"),mCt.forEach(t),G3r=r(aBe," \u2014 "),rJ=n(aBe,"A",{href:!0});var gCt=s(rJ);O3r=r(gCt,"TFXLNetForQuestionAnsweringSimple"),gCt.forEach(t),V3r=r(aBe," (XLNet model)"),aBe.forEach(t),ge.forEach(t),X3r=i(Il),T(sE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),RNe=i(f),Ec=n(f,"H2",{class:!0});var DDe=s(Ec);lE=n(DDe,"A",{id:!0,class:!0,href:!0});var hCt=s(lE);b6e=n(hCt,"SPAN",{});var pCt=s(b6e);T(t9.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),z3r=i(DDe),v6e=n(DDe,"SPAN",{});var uCt=s(v6e);W3r=r(uCt,"TFAutoModelForVision2Seq"),uCt.forEach(t),DDe.forEach(t),PNe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(a9.$$.fragment,ql),Q3r=i(ql),Cc=n(ql,"P",{});var iee=s(Cc);H3r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tJ=n(iee,"A",{href:!0});var _Ct=s(tJ);U3r=r(_Ct,"from_pretrained()"),_Ct.forEach(t),J3r=r(iee," class method or the "),aJ=n(iee,"A",{href:!0});var bCt=s(aJ);Y3r=r(bCt,"from_config()"),bCt.forEach(t),K3r=r(iee,` class
method.`),iee.forEach(t),Z3r=i(ql),n9=n(ql,"P",{});var GDe=s(n9);ewr=r(GDe,"This class cannot be instantiated directly using "),F6e=n(GDe,"CODE",{});var vCt=s(F6e);owr=r(vCt,"__init__()"),vCt.forEach(t),rwr=r(GDe," (throws an error)."),GDe.forEach(t),twr=i(ql),jt=n(ql,"DIV",{class:!0});var qw=s(jt);T(s9.$$.fragment,qw),awr=i(qw),T6e=n(qw,"P",{});var FCt=s(T6e);nwr=r(FCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FCt.forEach(t),swr=i(qw),wc=n(qw,"P",{});var dee=s(wc);lwr=r(dee,`Note:
Loading a model from its configuration file does `),M6e=n(dee,"STRONG",{});var TCt=s(M6e);iwr=r(TCt,"not"),TCt.forEach(t),dwr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(dee,"A",{href:!0});var MCt=s(nJ);cwr=r(MCt,"from_pretrained()"),MCt.forEach(t),fwr=r(dee," to load the model weights."),dee.forEach(t),mwr=i(qw),T(iE.$$.fragment,qw),qw.forEach(t),gwr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(l9.$$.fragment,Nl),hwr=i(Nl),E6e=n(Nl,"P",{});var ECt=s(E6e);pwr=r(ECt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ECt.forEach(t),uwr=i(Nl),mn=n(Nl,"P",{});var Nw=s(mn);_wr=r(Nw,"The model class to instantiate is selected based on the "),C6e=n(Nw,"CODE",{});var CCt=s(C6e);bwr=r(CCt,"model_type"),CCt.forEach(t),vwr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),w6e=n(Nw,"CODE",{});var wCt=s(w6e);Fwr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),Twr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A6e=n(Nw,"CODE",{});var ACt=s(A6e);Mwr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),Ewr=r(Nw,":"),Nw.forEach(t),Cwr=i(Nl),y6e=n(Nl,"UL",{});var yCt=s(y6e);dE=n(yCt,"LI",{});var nBe=s(dE);L6e=n(nBe,"STRONG",{});var LCt=s(L6e);wwr=r(LCt,"vision-encoder-decoder"),LCt.forEach(t),Awr=r(nBe," \u2014 "),sJ=n(nBe,"A",{href:!0});var xCt=s(sJ);ywr=r(xCt,"TFVisionEncoderDecoderModel"),xCt.forEach(t),Lwr=r(nBe," (Vision Encoder decoder model)"),nBe.forEach(t),yCt.forEach(t),xwr=i(Nl),T(cE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),BNe=i(f),Ac=n(f,"H2",{class:!0});var ODe=s(Ac);fE=n(ODe,"A",{id:!0,class:!0,href:!0});var $Ct=s(fE);x6e=n($Ct,"SPAN",{});var kCt=s(x6e);T(i9.$$.fragment,kCt),kCt.forEach(t),$Ct.forEach(t),$wr=i(ODe),$6e=n(ODe,"SPAN",{});var SCt=s($6e);kwr=r(SCt,"TFAutoModelForSpeechSeq2Seq"),SCt.forEach(t),ODe.forEach(t),INe=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(d9.$$.fragment,jl),Swr=i(jl),yc=n(jl,"P",{});var cee=s(yc);Rwr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lJ=n(cee,"A",{href:!0});var RCt=s(lJ);Pwr=r(RCt,"from_pretrained()"),RCt.forEach(t),Bwr=r(cee," class method or the "),iJ=n(cee,"A",{href:!0});var PCt=s(iJ);Iwr=r(PCt,"from_config()"),PCt.forEach(t),qwr=r(cee,` class
method.`),cee.forEach(t),Nwr=i(jl),c9=n(jl,"P",{});var VDe=s(c9);jwr=r(VDe,"This class cannot be instantiated directly using "),k6e=n(VDe,"CODE",{});var BCt=s(k6e);Dwr=r(BCt,"__init__()"),BCt.forEach(t),Gwr=r(VDe," (throws an error)."),VDe.forEach(t),Owr=i(jl),Dt=n(jl,"DIV",{class:!0});var jw=s(Dt);T(f9.$$.fragment,jw),Vwr=i(jw),S6e=n(jw,"P",{});var ICt=s(S6e);Xwr=r(ICt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ICt.forEach(t),zwr=i(jw),Lc=n(jw,"P",{});var fee=s(Lc);Wwr=r(fee,`Note:
Loading a model from its configuration file does `),R6e=n(fee,"STRONG",{});var qCt=s(R6e);Qwr=r(qCt,"not"),qCt.forEach(t),Hwr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(fee,"A",{href:!0});var NCt=s(dJ);Uwr=r(NCt,"from_pretrained()"),NCt.forEach(t),Jwr=r(fee," to load the model weights."),fee.forEach(t),Ywr=i(jw),T(mE.$$.fragment,jw),jw.forEach(t),Kwr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(m9.$$.fragment,Dl),Zwr=i(Dl),P6e=n(Dl,"P",{});var jCt=s(P6e);eAr=r(jCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jCt.forEach(t),oAr=i(Dl),gn=n(Dl,"P",{});var Dw=s(gn);rAr=r(Dw,"The model class to instantiate is selected based on the "),B6e=n(Dw,"CODE",{});var DCt=s(B6e);tAr=r(DCt,"model_type"),DCt.forEach(t),aAr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),I6e=n(Dw,"CODE",{});var GCt=s(I6e);nAr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),sAr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q6e=n(Dw,"CODE",{});var OCt=s(q6e);lAr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),iAr=r(Dw,":"),Dw.forEach(t),dAr=i(Dl),N6e=n(Dl,"UL",{});var VCt=s(N6e);gE=n(VCt,"LI",{});var sBe=s(gE);j6e=n(sBe,"STRONG",{});var XCt=s(j6e);cAr=r(XCt,"speech_to_text"),XCt.forEach(t),fAr=r(sBe," \u2014 "),cJ=n(sBe,"A",{href:!0});var zCt=s(cJ);mAr=r(zCt,"TFSpeech2TextForConditionalGeneration"),zCt.forEach(t),gAr=r(sBe," (Speech2Text model)"),sBe.forEach(t),VCt.forEach(t),hAr=i(Dl),T(hE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),qNe=i(f),xc=n(f,"H2",{class:!0});var XDe=s(xc);pE=n(XDe,"A",{id:!0,class:!0,href:!0});var WCt=s(pE);D6e=n(WCt,"SPAN",{});var QCt=s(D6e);T(g9.$$.fragment,QCt),QCt.forEach(t),WCt.forEach(t),pAr=i(XDe),G6e=n(XDe,"SPAN",{});var HCt=s(G6e);uAr=r(HCt,"FlaxAutoModel"),HCt.forEach(t),XDe.forEach(t),NNe=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(h9.$$.fragment,Gl),_Ar=i(Gl),$c=n(Gl,"P",{});var mee=s($c);bAr=r(mee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fJ=n(mee,"A",{href:!0});var UCt=s(fJ);vAr=r(UCt,"from_pretrained()"),UCt.forEach(t),FAr=r(mee," class method or the "),mJ=n(mee,"A",{href:!0});var JCt=s(mJ);TAr=r(JCt,"from_config()"),JCt.forEach(t),MAr=r(mee,` class
method.`),mee.forEach(t),EAr=i(Gl),p9=n(Gl,"P",{});var zDe=s(p9);CAr=r(zDe,"This class cannot be instantiated directly using "),O6e=n(zDe,"CODE",{});var YCt=s(O6e);wAr=r(YCt,"__init__()"),YCt.forEach(t),AAr=r(zDe," (throws an error)."),zDe.forEach(t),yAr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Gw=s(Gt);T(u9.$$.fragment,Gw),LAr=i(Gw),V6e=n(Gw,"P",{});var KCt=s(V6e);xAr=r(KCt,"Instantiates one of the base model classes of the library from a configuration."),KCt.forEach(t),$Ar=i(Gw),kc=n(Gw,"P",{});var gee=s(kc);kAr=r(gee,`Note:
Loading a model from its configuration file does `),X6e=n(gee,"STRONG",{});var ZCt=s(X6e);SAr=r(ZCt,"not"),ZCt.forEach(t),RAr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(gee,"A",{href:!0});var e5t=s(gJ);PAr=r(e5t,"from_pretrained()"),e5t.forEach(t),BAr=r(gee," to load the model weights."),gee.forEach(t),IAr=i(Gw),T(uE.$$.fragment,Gw),Gw.forEach(t),qAr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(_9.$$.fragment,Ol),NAr=i(Ol),z6e=n(Ol,"P",{});var o5t=s(z6e);jAr=r(o5t,"Instantiate one of the base model classes of the library from a pretrained model."),o5t.forEach(t),DAr=i(Ol),hn=n(Ol,"P",{});var Ow=s(hn);GAr=r(Ow,"The model class to instantiate is selected based on the "),W6e=n(Ow,"CODE",{});var r5t=s(W6e);OAr=r(r5t,"model_type"),r5t.forEach(t),VAr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Q6e=n(Ow,"CODE",{});var t5t=s(Q6e);XAr=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),zAr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(Ow,"CODE",{});var a5t=s(H6e);WAr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),QAr=r(Ow,":"),Ow.forEach(t),HAr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);_E=n(ne,"LI",{});var lBe=s(_E);U6e=n(lBe,"STRONG",{});var n5t=s(U6e);UAr=r(n5t,"albert"),n5t.forEach(t),JAr=r(lBe," \u2014 "),hJ=n(lBe,"A",{href:!0});var s5t=s(hJ);YAr=r(s5t,"FlaxAlbertModel"),s5t.forEach(t),KAr=r(lBe," (ALBERT model)"),lBe.forEach(t),ZAr=i(ne),bE=n(ne,"LI",{});var iBe=s(bE);J6e=n(iBe,"STRONG",{});var l5t=s(J6e);eyr=r(l5t,"bart"),l5t.forEach(t),oyr=r(iBe," \u2014 "),pJ=n(iBe,"A",{href:!0});var i5t=s(pJ);ryr=r(i5t,"FlaxBartModel"),i5t.forEach(t),tyr=r(iBe," (BART model)"),iBe.forEach(t),ayr=i(ne),vE=n(ne,"LI",{});var dBe=s(vE);Y6e=n(dBe,"STRONG",{});var d5t=s(Y6e);nyr=r(d5t,"beit"),d5t.forEach(t),syr=r(dBe," \u2014 "),uJ=n(dBe,"A",{href:!0});var c5t=s(uJ);lyr=r(c5t,"FlaxBeitModel"),c5t.forEach(t),iyr=r(dBe," (BEiT model)"),dBe.forEach(t),dyr=i(ne),FE=n(ne,"LI",{});var cBe=s(FE);K6e=n(cBe,"STRONG",{});var f5t=s(K6e);cyr=r(f5t,"bert"),f5t.forEach(t),fyr=r(cBe," \u2014 "),_J=n(cBe,"A",{href:!0});var m5t=s(_J);myr=r(m5t,"FlaxBertModel"),m5t.forEach(t),gyr=r(cBe," (BERT model)"),cBe.forEach(t),hyr=i(ne),TE=n(ne,"LI",{});var fBe=s(TE);Z6e=n(fBe,"STRONG",{});var g5t=s(Z6e);pyr=r(g5t,"big_bird"),g5t.forEach(t),uyr=r(fBe," \u2014 "),bJ=n(fBe,"A",{href:!0});var h5t=s(bJ);_yr=r(h5t,"FlaxBigBirdModel"),h5t.forEach(t),byr=r(fBe," (BigBird model)"),fBe.forEach(t),vyr=i(ne),ME=n(ne,"LI",{});var mBe=s(ME);eTe=n(mBe,"STRONG",{});var p5t=s(eTe);Fyr=r(p5t,"blenderbot"),p5t.forEach(t),Tyr=r(mBe," \u2014 "),vJ=n(mBe,"A",{href:!0});var u5t=s(vJ);Myr=r(u5t,"FlaxBlenderbotModel"),u5t.forEach(t),Eyr=r(mBe," (Blenderbot model)"),mBe.forEach(t),Cyr=i(ne),EE=n(ne,"LI",{});var gBe=s(EE);oTe=n(gBe,"STRONG",{});var _5t=s(oTe);wyr=r(_5t,"blenderbot-small"),_5t.forEach(t),Ayr=r(gBe," \u2014 "),FJ=n(gBe,"A",{href:!0});var b5t=s(FJ);yyr=r(b5t,"FlaxBlenderbotSmallModel"),b5t.forEach(t),Lyr=r(gBe," (BlenderbotSmall model)"),gBe.forEach(t),xyr=i(ne),CE=n(ne,"LI",{});var hBe=s(CE);rTe=n(hBe,"STRONG",{});var v5t=s(rTe);$yr=r(v5t,"clip"),v5t.forEach(t),kyr=r(hBe," \u2014 "),TJ=n(hBe,"A",{href:!0});var F5t=s(TJ);Syr=r(F5t,"FlaxCLIPModel"),F5t.forEach(t),Ryr=r(hBe," (CLIP model)"),hBe.forEach(t),Pyr=i(ne),wE=n(ne,"LI",{});var pBe=s(wE);tTe=n(pBe,"STRONG",{});var T5t=s(tTe);Byr=r(T5t,"distilbert"),T5t.forEach(t),Iyr=r(pBe," \u2014 "),MJ=n(pBe,"A",{href:!0});var M5t=s(MJ);qyr=r(M5t,"FlaxDistilBertModel"),M5t.forEach(t),Nyr=r(pBe," (DistilBERT model)"),pBe.forEach(t),jyr=i(ne),AE=n(ne,"LI",{});var uBe=s(AE);aTe=n(uBe,"STRONG",{});var E5t=s(aTe);Dyr=r(E5t,"electra"),E5t.forEach(t),Gyr=r(uBe," \u2014 "),EJ=n(uBe,"A",{href:!0});var C5t=s(EJ);Oyr=r(C5t,"FlaxElectraModel"),C5t.forEach(t),Vyr=r(uBe," (ELECTRA model)"),uBe.forEach(t),Xyr=i(ne),yE=n(ne,"LI",{});var _Be=s(yE);nTe=n(_Be,"STRONG",{});var w5t=s(nTe);zyr=r(w5t,"gpt2"),w5t.forEach(t),Wyr=r(_Be," \u2014 "),CJ=n(_Be,"A",{href:!0});var A5t=s(CJ);Qyr=r(A5t,"FlaxGPT2Model"),A5t.forEach(t),Hyr=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),Uyr=i(ne),LE=n(ne,"LI",{});var bBe=s(LE);sTe=n(bBe,"STRONG",{});var y5t=s(sTe);Jyr=r(y5t,"gpt_neo"),y5t.forEach(t),Yyr=r(bBe," \u2014 "),wJ=n(bBe,"A",{href:!0});var L5t=s(wJ);Kyr=r(L5t,"FlaxGPTNeoModel"),L5t.forEach(t),Zyr=r(bBe," (GPT Neo model)"),bBe.forEach(t),eLr=i(ne),xE=n(ne,"LI",{});var vBe=s(xE);lTe=n(vBe,"STRONG",{});var x5t=s(lTe);oLr=r(x5t,"gptj"),x5t.forEach(t),rLr=r(vBe," \u2014 "),AJ=n(vBe,"A",{href:!0});var $5t=s(AJ);tLr=r($5t,"FlaxGPTJModel"),$5t.forEach(t),aLr=r(vBe," (GPT-J model)"),vBe.forEach(t),nLr=i(ne),$E=n(ne,"LI",{});var FBe=s($E);iTe=n(FBe,"STRONG",{});var k5t=s(iTe);sLr=r(k5t,"marian"),k5t.forEach(t),lLr=r(FBe," \u2014 "),yJ=n(FBe,"A",{href:!0});var S5t=s(yJ);iLr=r(S5t,"FlaxMarianModel"),S5t.forEach(t),dLr=r(FBe," (Marian model)"),FBe.forEach(t),cLr=i(ne),kE=n(ne,"LI",{});var TBe=s(kE);dTe=n(TBe,"STRONG",{});var R5t=s(dTe);fLr=r(R5t,"mbart"),R5t.forEach(t),mLr=r(TBe," \u2014 "),LJ=n(TBe,"A",{href:!0});var P5t=s(LJ);gLr=r(P5t,"FlaxMBartModel"),P5t.forEach(t),hLr=r(TBe," (mBART model)"),TBe.forEach(t),pLr=i(ne),SE=n(ne,"LI",{});var MBe=s(SE);cTe=n(MBe,"STRONG",{});var B5t=s(cTe);uLr=r(B5t,"mt5"),B5t.forEach(t),_Lr=r(MBe," \u2014 "),xJ=n(MBe,"A",{href:!0});var I5t=s(xJ);bLr=r(I5t,"FlaxMT5Model"),I5t.forEach(t),vLr=r(MBe," (mT5 model)"),MBe.forEach(t),FLr=i(ne),RE=n(ne,"LI",{});var EBe=s(RE);fTe=n(EBe,"STRONG",{});var q5t=s(fTe);TLr=r(q5t,"pegasus"),q5t.forEach(t),MLr=r(EBe," \u2014 "),$J=n(EBe,"A",{href:!0});var N5t=s($J);ELr=r(N5t,"FlaxPegasusModel"),N5t.forEach(t),CLr=r(EBe," (Pegasus model)"),EBe.forEach(t),wLr=i(ne),PE=n(ne,"LI",{});var CBe=s(PE);mTe=n(CBe,"STRONG",{});var j5t=s(mTe);ALr=r(j5t,"roberta"),j5t.forEach(t),yLr=r(CBe," \u2014 "),kJ=n(CBe,"A",{href:!0});var D5t=s(kJ);LLr=r(D5t,"FlaxRobertaModel"),D5t.forEach(t),xLr=r(CBe," (RoBERTa model)"),CBe.forEach(t),$Lr=i(ne),BE=n(ne,"LI",{});var wBe=s(BE);gTe=n(wBe,"STRONG",{});var G5t=s(gTe);kLr=r(G5t,"roformer"),G5t.forEach(t),SLr=r(wBe," \u2014 "),SJ=n(wBe,"A",{href:!0});var O5t=s(SJ);RLr=r(O5t,"FlaxRoFormerModel"),O5t.forEach(t),PLr=r(wBe," (RoFormer model)"),wBe.forEach(t),BLr=i(ne),IE=n(ne,"LI",{});var ABe=s(IE);hTe=n(ABe,"STRONG",{});var V5t=s(hTe);ILr=r(V5t,"t5"),V5t.forEach(t),qLr=r(ABe," \u2014 "),RJ=n(ABe,"A",{href:!0});var X5t=s(RJ);NLr=r(X5t,"FlaxT5Model"),X5t.forEach(t),jLr=r(ABe," (T5 model)"),ABe.forEach(t),DLr=i(ne),qE=n(ne,"LI",{});var yBe=s(qE);pTe=n(yBe,"STRONG",{});var z5t=s(pTe);GLr=r(z5t,"vision-text-dual-encoder"),z5t.forEach(t),OLr=r(yBe," \u2014 "),PJ=n(yBe,"A",{href:!0});var W5t=s(PJ);VLr=r(W5t,"FlaxVisionTextDualEncoderModel"),W5t.forEach(t),XLr=r(yBe," (VisionTextDualEncoder model)"),yBe.forEach(t),zLr=i(ne),NE=n(ne,"LI",{});var LBe=s(NE);uTe=n(LBe,"STRONG",{});var Q5t=s(uTe);WLr=r(Q5t,"vit"),Q5t.forEach(t),QLr=r(LBe," \u2014 "),BJ=n(LBe,"A",{href:!0});var H5t=s(BJ);HLr=r(H5t,"FlaxViTModel"),H5t.forEach(t),ULr=r(LBe," (ViT model)"),LBe.forEach(t),JLr=i(ne),jE=n(ne,"LI",{});var xBe=s(jE);_Te=n(xBe,"STRONG",{});var U5t=s(_Te);YLr=r(U5t,"wav2vec2"),U5t.forEach(t),KLr=r(xBe," \u2014 "),IJ=n(xBe,"A",{href:!0});var J5t=s(IJ);ZLr=r(J5t,"FlaxWav2Vec2Model"),J5t.forEach(t),e8r=r(xBe," (Wav2Vec2 model)"),xBe.forEach(t),o8r=i(ne),DE=n(ne,"LI",{});var $Be=s(DE);bTe=n($Be,"STRONG",{});var Y5t=s(bTe);r8r=r(Y5t,"xglm"),Y5t.forEach(t),t8r=r($Be," \u2014 "),qJ=n($Be,"A",{href:!0});var K5t=s(qJ);a8r=r(K5t,"FlaxXGLMModel"),K5t.forEach(t),n8r=r($Be," (XGLM model)"),$Be.forEach(t),s8r=i(ne),GE=n(ne,"LI",{});var kBe=s(GE);vTe=n(kBe,"STRONG",{});var Z5t=s(vTe);l8r=r(Z5t,"xlm-roberta"),Z5t.forEach(t),i8r=r(kBe," \u2014 "),NJ=n(kBe,"A",{href:!0});var e3t=s(NJ);d8r=r(e3t,"FlaxXLMRobertaModel"),e3t.forEach(t),c8r=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),ne.forEach(t),f8r=i(Ol),T(OE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),jNe=i(f),Sc=n(f,"H2",{class:!0});var WDe=s(Sc);VE=n(WDe,"A",{id:!0,class:!0,href:!0});var o3t=s(VE);FTe=n(o3t,"SPAN",{});var r3t=s(FTe);T(b9.$$.fragment,r3t),r3t.forEach(t),o3t.forEach(t),m8r=i(WDe),TTe=n(WDe,"SPAN",{});var t3t=s(TTe);g8r=r(t3t,"FlaxAutoModelForCausalLM"),t3t.forEach(t),WDe.forEach(t),DNe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(v9.$$.fragment,Vl),h8r=i(Vl),Rc=n(Vl,"P",{});var hee=s(Rc);p8r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jJ=n(hee,"A",{href:!0});var a3t=s(jJ);u8r=r(a3t,"from_pretrained()"),a3t.forEach(t),_8r=r(hee," class method or the "),DJ=n(hee,"A",{href:!0});var n3t=s(DJ);b8r=r(n3t,"from_config()"),n3t.forEach(t),v8r=r(hee,` class
method.`),hee.forEach(t),F8r=i(Vl),F9=n(Vl,"P",{});var QDe=s(F9);T8r=r(QDe,"This class cannot be instantiated directly using "),MTe=n(QDe,"CODE",{});var s3t=s(MTe);M8r=r(s3t,"__init__()"),s3t.forEach(t),E8r=r(QDe," (throws an error)."),QDe.forEach(t),C8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Vw=s(Ot);T(T9.$$.fragment,Vw),w8r=i(Vw),ETe=n(Vw,"P",{});var l3t=s(ETe);A8r=r(l3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),l3t.forEach(t),y8r=i(Vw),Pc=n(Vw,"P",{});var pee=s(Pc);L8r=r(pee,`Note:
Loading a model from its configuration file does `),CTe=n(pee,"STRONG",{});var i3t=s(CTe);x8r=r(i3t,"not"),i3t.forEach(t),$8r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(pee,"A",{href:!0});var d3t=s(GJ);k8r=r(d3t,"from_pretrained()"),d3t.forEach(t),S8r=r(pee," to load the model weights."),pee.forEach(t),R8r=i(Vw),T(XE.$$.fragment,Vw),Vw.forEach(t),P8r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(M9.$$.fragment,Xl),B8r=i(Xl),wTe=n(Xl,"P",{});var c3t=s(wTe);I8r=r(c3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c3t.forEach(t),q8r=i(Xl),pn=n(Xl,"P",{});var Xw=s(pn);N8r=r(Xw,"The model class to instantiate is selected based on the "),ATe=n(Xw,"CODE",{});var f3t=s(ATe);j8r=r(f3t,"model_type"),f3t.forEach(t),D8r=r(Xw,` property of the config object (either
passed as an argument or loaded from `),yTe=n(Xw,"CODE",{});var m3t=s(yTe);G8r=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),O8r=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(Xw,"CODE",{});var g3t=s(LTe);V8r=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),X8r=r(Xw,":"),Xw.forEach(t),z8r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);zE=n(Xe,"LI",{});var SBe=s(zE);xTe=n(SBe,"STRONG",{});var h3t=s(xTe);W8r=r(h3t,"bart"),h3t.forEach(t),Q8r=r(SBe," \u2014 "),OJ=n(SBe,"A",{href:!0});var p3t=s(OJ);H8r=r(p3t,"FlaxBartForCausalLM"),p3t.forEach(t),U8r=r(SBe," (BART model)"),SBe.forEach(t),J8r=i(Xe),WE=n(Xe,"LI",{});var RBe=s(WE);$Te=n(RBe,"STRONG",{});var u3t=s($Te);Y8r=r(u3t,"bert"),u3t.forEach(t),K8r=r(RBe," \u2014 "),VJ=n(RBe,"A",{href:!0});var _3t=s(VJ);Z8r=r(_3t,"FlaxBertForCausalLM"),_3t.forEach(t),e9r=r(RBe," (BERT model)"),RBe.forEach(t),o9r=i(Xe),QE=n(Xe,"LI",{});var PBe=s(QE);kTe=n(PBe,"STRONG",{});var b3t=s(kTe);r9r=r(b3t,"big_bird"),b3t.forEach(t),t9r=r(PBe," \u2014 "),XJ=n(PBe,"A",{href:!0});var v3t=s(XJ);a9r=r(v3t,"FlaxBigBirdForCausalLM"),v3t.forEach(t),n9r=r(PBe," (BigBird model)"),PBe.forEach(t),s9r=i(Xe),HE=n(Xe,"LI",{});var BBe=s(HE);STe=n(BBe,"STRONG",{});var F3t=s(STe);l9r=r(F3t,"electra"),F3t.forEach(t),i9r=r(BBe," \u2014 "),zJ=n(BBe,"A",{href:!0});var T3t=s(zJ);d9r=r(T3t,"FlaxElectraForCausalLM"),T3t.forEach(t),c9r=r(BBe," (ELECTRA model)"),BBe.forEach(t),f9r=i(Xe),UE=n(Xe,"LI",{});var IBe=s(UE);RTe=n(IBe,"STRONG",{});var M3t=s(RTe);m9r=r(M3t,"gpt2"),M3t.forEach(t),g9r=r(IBe," \u2014 "),WJ=n(IBe,"A",{href:!0});var E3t=s(WJ);h9r=r(E3t,"FlaxGPT2LMHeadModel"),E3t.forEach(t),p9r=r(IBe," (OpenAI GPT-2 model)"),IBe.forEach(t),u9r=i(Xe),JE=n(Xe,"LI",{});var qBe=s(JE);PTe=n(qBe,"STRONG",{});var C3t=s(PTe);_9r=r(C3t,"gpt_neo"),C3t.forEach(t),b9r=r(qBe," \u2014 "),QJ=n(qBe,"A",{href:!0});var w3t=s(QJ);v9r=r(w3t,"FlaxGPTNeoForCausalLM"),w3t.forEach(t),F9r=r(qBe," (GPT Neo model)"),qBe.forEach(t),T9r=i(Xe),YE=n(Xe,"LI",{});var NBe=s(YE);BTe=n(NBe,"STRONG",{});var A3t=s(BTe);M9r=r(A3t,"gptj"),A3t.forEach(t),E9r=r(NBe," \u2014 "),HJ=n(NBe,"A",{href:!0});var y3t=s(HJ);C9r=r(y3t,"FlaxGPTJForCausalLM"),y3t.forEach(t),w9r=r(NBe," (GPT-J model)"),NBe.forEach(t),A9r=i(Xe),KE=n(Xe,"LI",{});var jBe=s(KE);ITe=n(jBe,"STRONG",{});var L3t=s(ITe);y9r=r(L3t,"roberta"),L3t.forEach(t),L9r=r(jBe," \u2014 "),UJ=n(jBe,"A",{href:!0});var x3t=s(UJ);x9r=r(x3t,"FlaxRobertaForCausalLM"),x3t.forEach(t),$9r=r(jBe," (RoBERTa model)"),jBe.forEach(t),k9r=i(Xe),ZE=n(Xe,"LI",{});var DBe=s(ZE);qTe=n(DBe,"STRONG",{});var $3t=s(qTe);S9r=r($3t,"xglm"),$3t.forEach(t),R9r=r(DBe," \u2014 "),JJ=n(DBe,"A",{href:!0});var k3t=s(JJ);P9r=r(k3t,"FlaxXGLMForCausalLM"),k3t.forEach(t),B9r=r(DBe," (XGLM model)"),DBe.forEach(t),Xe.forEach(t),I9r=i(Xl),T(eC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),GNe=i(f),Bc=n(f,"H2",{class:!0});var HDe=s(Bc);oC=n(HDe,"A",{id:!0,class:!0,href:!0});var S3t=s(oC);NTe=n(S3t,"SPAN",{});var R3t=s(NTe);T(E9.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),q9r=i(HDe),jTe=n(HDe,"SPAN",{});var P3t=s(jTe);N9r=r(P3t,"FlaxAutoModelForPreTraining"),P3t.forEach(t),HDe.forEach(t),ONe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(C9.$$.fragment,zl),j9r=i(zl),Ic=n(zl,"P",{});var uee=s(Ic);D9r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YJ=n(uee,"A",{href:!0});var B3t=s(YJ);G9r=r(B3t,"from_pretrained()"),B3t.forEach(t),O9r=r(uee," class method or the "),KJ=n(uee,"A",{href:!0});var I3t=s(KJ);V9r=r(I3t,"from_config()"),I3t.forEach(t),X9r=r(uee,` class
method.`),uee.forEach(t),z9r=i(zl),w9=n(zl,"P",{});var UDe=s(w9);W9r=r(UDe,"This class cannot be instantiated directly using "),DTe=n(UDe,"CODE",{});var q3t=s(DTe);Q9r=r(q3t,"__init__()"),q3t.forEach(t),H9r=r(UDe," (throws an error)."),UDe.forEach(t),U9r=i(zl),Vt=n(zl,"DIV",{class:!0});var zw=s(Vt);T(A9.$$.fragment,zw),J9r=i(zw),GTe=n(zw,"P",{});var N3t=s(GTe);Y9r=r(N3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N3t.forEach(t),K9r=i(zw),qc=n(zw,"P",{});var _ee=s(qc);Z9r=r(_ee,`Note:
Loading a model from its configuration file does `),OTe=n(_ee,"STRONG",{});var j3t=s(OTe);exr=r(j3t,"not"),j3t.forEach(t),oxr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(_ee,"A",{href:!0});var D3t=s(ZJ);rxr=r(D3t,"from_pretrained()"),D3t.forEach(t),txr=r(_ee," to load the model weights."),_ee.forEach(t),axr=i(zw),T(rC.$$.fragment,zw),zw.forEach(t),nxr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(y9.$$.fragment,Wl),sxr=i(Wl),VTe=n(Wl,"P",{});var G3t=s(VTe);lxr=r(G3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G3t.forEach(t),ixr=i(Wl),un=n(Wl,"P",{});var Ww=s(un);dxr=r(Ww,"The model class to instantiate is selected based on the "),XTe=n(Ww,"CODE",{});var O3t=s(XTe);cxr=r(O3t,"model_type"),O3t.forEach(t),fxr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),zTe=n(Ww,"CODE",{});var V3t=s(zTe);mxr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),gxr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(Ww,"CODE",{});var X3t=s(WTe);hxr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),pxr=r(Ww,":"),Ww.forEach(t),uxr=i(Wl),Me=n(Wl,"UL",{});var we=s(Me);tC=n(we,"LI",{});var GBe=s(tC);QTe=n(GBe,"STRONG",{});var z3t=s(QTe);_xr=r(z3t,"albert"),z3t.forEach(t),bxr=r(GBe," \u2014 "),eY=n(GBe,"A",{href:!0});var W3t=s(eY);vxr=r(W3t,"FlaxAlbertForPreTraining"),W3t.forEach(t),Fxr=r(GBe," (ALBERT model)"),GBe.forEach(t),Txr=i(we),aC=n(we,"LI",{});var OBe=s(aC);HTe=n(OBe,"STRONG",{});var Q3t=s(HTe);Mxr=r(Q3t,"bart"),Q3t.forEach(t),Exr=r(OBe," \u2014 "),oY=n(OBe,"A",{href:!0});var H3t=s(oY);Cxr=r(H3t,"FlaxBartForConditionalGeneration"),H3t.forEach(t),wxr=r(OBe," (BART model)"),OBe.forEach(t),Axr=i(we),nC=n(we,"LI",{});var VBe=s(nC);UTe=n(VBe,"STRONG",{});var U3t=s(UTe);yxr=r(U3t,"bert"),U3t.forEach(t),Lxr=r(VBe," \u2014 "),rY=n(VBe,"A",{href:!0});var J3t=s(rY);xxr=r(J3t,"FlaxBertForPreTraining"),J3t.forEach(t),$xr=r(VBe," (BERT model)"),VBe.forEach(t),kxr=i(we),sC=n(we,"LI",{});var XBe=s(sC);JTe=n(XBe,"STRONG",{});var Y3t=s(JTe);Sxr=r(Y3t,"big_bird"),Y3t.forEach(t),Rxr=r(XBe," \u2014 "),tY=n(XBe,"A",{href:!0});var K3t=s(tY);Pxr=r(K3t,"FlaxBigBirdForPreTraining"),K3t.forEach(t),Bxr=r(XBe," (BigBird model)"),XBe.forEach(t),Ixr=i(we),lC=n(we,"LI",{});var zBe=s(lC);YTe=n(zBe,"STRONG",{});var Z3t=s(YTe);qxr=r(Z3t,"electra"),Z3t.forEach(t),Nxr=r(zBe," \u2014 "),aY=n(zBe,"A",{href:!0});var ewt=s(aY);jxr=r(ewt,"FlaxElectraForPreTraining"),ewt.forEach(t),Dxr=r(zBe," (ELECTRA model)"),zBe.forEach(t),Gxr=i(we),iC=n(we,"LI",{});var WBe=s(iC);KTe=n(WBe,"STRONG",{});var owt=s(KTe);Oxr=r(owt,"mbart"),owt.forEach(t),Vxr=r(WBe," \u2014 "),nY=n(WBe,"A",{href:!0});var rwt=s(nY);Xxr=r(rwt,"FlaxMBartForConditionalGeneration"),rwt.forEach(t),zxr=r(WBe," (mBART model)"),WBe.forEach(t),Wxr=i(we),dC=n(we,"LI",{});var QBe=s(dC);ZTe=n(QBe,"STRONG",{});var twt=s(ZTe);Qxr=r(twt,"mt5"),twt.forEach(t),Hxr=r(QBe," \u2014 "),sY=n(QBe,"A",{href:!0});var awt=s(sY);Uxr=r(awt,"FlaxMT5ForConditionalGeneration"),awt.forEach(t),Jxr=r(QBe," (mT5 model)"),QBe.forEach(t),Yxr=i(we),cC=n(we,"LI",{});var HBe=s(cC);e7e=n(HBe,"STRONG",{});var nwt=s(e7e);Kxr=r(nwt,"roberta"),nwt.forEach(t),Zxr=r(HBe," \u2014 "),lY=n(HBe,"A",{href:!0});var swt=s(lY);e$r=r(swt,"FlaxRobertaForMaskedLM"),swt.forEach(t),o$r=r(HBe," (RoBERTa model)"),HBe.forEach(t),r$r=i(we),fC=n(we,"LI",{});var UBe=s(fC);o7e=n(UBe,"STRONG",{});var lwt=s(o7e);t$r=r(lwt,"roformer"),lwt.forEach(t),a$r=r(UBe," \u2014 "),iY=n(UBe,"A",{href:!0});var iwt=s(iY);n$r=r(iwt,"FlaxRoFormerForMaskedLM"),iwt.forEach(t),s$r=r(UBe," (RoFormer model)"),UBe.forEach(t),l$r=i(we),mC=n(we,"LI",{});var JBe=s(mC);r7e=n(JBe,"STRONG",{});var dwt=s(r7e);i$r=r(dwt,"t5"),dwt.forEach(t),d$r=r(JBe," \u2014 "),dY=n(JBe,"A",{href:!0});var cwt=s(dY);c$r=r(cwt,"FlaxT5ForConditionalGeneration"),cwt.forEach(t),f$r=r(JBe," (T5 model)"),JBe.forEach(t),m$r=i(we),gC=n(we,"LI",{});var YBe=s(gC);t7e=n(YBe,"STRONG",{});var fwt=s(t7e);g$r=r(fwt,"wav2vec2"),fwt.forEach(t),h$r=r(YBe," \u2014 "),cY=n(YBe,"A",{href:!0});var mwt=s(cY);p$r=r(mwt,"FlaxWav2Vec2ForPreTraining"),mwt.forEach(t),u$r=r(YBe," (Wav2Vec2 model)"),YBe.forEach(t),_$r=i(we),hC=n(we,"LI",{});var KBe=s(hC);a7e=n(KBe,"STRONG",{});var gwt=s(a7e);b$r=r(gwt,"xlm-roberta"),gwt.forEach(t),v$r=r(KBe," \u2014 "),fY=n(KBe,"A",{href:!0});var hwt=s(fY);F$r=r(hwt,"FlaxXLMRobertaForMaskedLM"),hwt.forEach(t),T$r=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),we.forEach(t),M$r=i(Wl),T(pC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),VNe=i(f),Nc=n(f,"H2",{class:!0});var JDe=s(Nc);uC=n(JDe,"A",{id:!0,class:!0,href:!0});var pwt=s(uC);n7e=n(pwt,"SPAN",{});var uwt=s(n7e);T(L9.$$.fragment,uwt),uwt.forEach(t),pwt.forEach(t),E$r=i(JDe),s7e=n(JDe,"SPAN",{});var _wt=s(s7e);C$r=r(_wt,"FlaxAutoModelForMaskedLM"),_wt.forEach(t),JDe.forEach(t),XNe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(x9.$$.fragment,Ql),w$r=i(Ql),jc=n(Ql,"P",{});var bee=s(jc);A$r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mY=n(bee,"A",{href:!0});var bwt=s(mY);y$r=r(bwt,"from_pretrained()"),bwt.forEach(t),L$r=r(bee," class method or the "),gY=n(bee,"A",{href:!0});var vwt=s(gY);x$r=r(vwt,"from_config()"),vwt.forEach(t),$$r=r(bee,` class
method.`),bee.forEach(t),k$r=i(Ql),$9=n(Ql,"P",{});var YDe=s($9);S$r=r(YDe,"This class cannot be instantiated directly using "),l7e=n(YDe,"CODE",{});var Fwt=s(l7e);R$r=r(Fwt,"__init__()"),Fwt.forEach(t),P$r=r(YDe," (throws an error)."),YDe.forEach(t),B$r=i(Ql),Xt=n(Ql,"DIV",{class:!0});var Qw=s(Xt);T(k9.$$.fragment,Qw),I$r=i(Qw),i7e=n(Qw,"P",{});var Twt=s(i7e);q$r=r(Twt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Twt.forEach(t),N$r=i(Qw),Dc=n(Qw,"P",{});var vee=s(Dc);j$r=r(vee,`Note:
Loading a model from its configuration file does `),d7e=n(vee,"STRONG",{});var Mwt=s(d7e);D$r=r(Mwt,"not"),Mwt.forEach(t),G$r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(vee,"A",{href:!0});var Ewt=s(hY);O$r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),V$r=r(vee," to load the model weights."),vee.forEach(t),X$r=i(Qw),T(_C.$$.fragment,Qw),Qw.forEach(t),z$r=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(S9.$$.fragment,Hl),W$r=i(Hl),c7e=n(Hl,"P",{});var Cwt=s(c7e);Q$r=r(Cwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cwt.forEach(t),H$r=i(Hl),_n=n(Hl,"P",{});var Hw=s(_n);U$r=r(Hw,"The model class to instantiate is selected based on the "),f7e=n(Hw,"CODE",{});var wwt=s(f7e);J$r=r(wwt,"model_type"),wwt.forEach(t),Y$r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),m7e=n(Hw,"CODE",{});var Awt=s(m7e);K$r=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),Z$r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=n(Hw,"CODE",{});var ywt=s(g7e);ekr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),okr=r(Hw,":"),Hw.forEach(t),rkr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);bC=n(Ie,"LI",{});var ZBe=s(bC);h7e=n(ZBe,"STRONG",{});var Lwt=s(h7e);tkr=r(Lwt,"albert"),Lwt.forEach(t),akr=r(ZBe," \u2014 "),pY=n(ZBe,"A",{href:!0});var xwt=s(pY);nkr=r(xwt,"FlaxAlbertForMaskedLM"),xwt.forEach(t),skr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),lkr=i(Ie),vC=n(Ie,"LI",{});var eIe=s(vC);p7e=n(eIe,"STRONG",{});var $wt=s(p7e);ikr=r($wt,"bart"),$wt.forEach(t),dkr=r(eIe," \u2014 "),uY=n(eIe,"A",{href:!0});var kwt=s(uY);ckr=r(kwt,"FlaxBartForConditionalGeneration"),kwt.forEach(t),fkr=r(eIe," (BART model)"),eIe.forEach(t),mkr=i(Ie),FC=n(Ie,"LI",{});var oIe=s(FC);u7e=n(oIe,"STRONG",{});var Swt=s(u7e);gkr=r(Swt,"bert"),Swt.forEach(t),hkr=r(oIe," \u2014 "),_Y=n(oIe,"A",{href:!0});var Rwt=s(_Y);pkr=r(Rwt,"FlaxBertForMaskedLM"),Rwt.forEach(t),ukr=r(oIe," (BERT model)"),oIe.forEach(t),_kr=i(Ie),TC=n(Ie,"LI",{});var rIe=s(TC);_7e=n(rIe,"STRONG",{});var Pwt=s(_7e);bkr=r(Pwt,"big_bird"),Pwt.forEach(t),vkr=r(rIe," \u2014 "),bY=n(rIe,"A",{href:!0});var Bwt=s(bY);Fkr=r(Bwt,"FlaxBigBirdForMaskedLM"),Bwt.forEach(t),Tkr=r(rIe," (BigBird model)"),rIe.forEach(t),Mkr=i(Ie),MC=n(Ie,"LI",{});var tIe=s(MC);b7e=n(tIe,"STRONG",{});var Iwt=s(b7e);Ekr=r(Iwt,"distilbert"),Iwt.forEach(t),Ckr=r(tIe," \u2014 "),vY=n(tIe,"A",{href:!0});var qwt=s(vY);wkr=r(qwt,"FlaxDistilBertForMaskedLM"),qwt.forEach(t),Akr=r(tIe," (DistilBERT model)"),tIe.forEach(t),ykr=i(Ie),EC=n(Ie,"LI",{});var aIe=s(EC);v7e=n(aIe,"STRONG",{});var Nwt=s(v7e);Lkr=r(Nwt,"electra"),Nwt.forEach(t),xkr=r(aIe," \u2014 "),FY=n(aIe,"A",{href:!0});var jwt=s(FY);$kr=r(jwt,"FlaxElectraForMaskedLM"),jwt.forEach(t),kkr=r(aIe," (ELECTRA model)"),aIe.forEach(t),Skr=i(Ie),CC=n(Ie,"LI",{});var nIe=s(CC);F7e=n(nIe,"STRONG",{});var Dwt=s(F7e);Rkr=r(Dwt,"mbart"),Dwt.forEach(t),Pkr=r(nIe," \u2014 "),TY=n(nIe,"A",{href:!0});var Gwt=s(TY);Bkr=r(Gwt,"FlaxMBartForConditionalGeneration"),Gwt.forEach(t),Ikr=r(nIe," (mBART model)"),nIe.forEach(t),qkr=i(Ie),wC=n(Ie,"LI",{});var sIe=s(wC);T7e=n(sIe,"STRONG",{});var Owt=s(T7e);Nkr=r(Owt,"roberta"),Owt.forEach(t),jkr=r(sIe," \u2014 "),MY=n(sIe,"A",{href:!0});var Vwt=s(MY);Dkr=r(Vwt,"FlaxRobertaForMaskedLM"),Vwt.forEach(t),Gkr=r(sIe," (RoBERTa model)"),sIe.forEach(t),Okr=i(Ie),AC=n(Ie,"LI",{});var lIe=s(AC);M7e=n(lIe,"STRONG",{});var Xwt=s(M7e);Vkr=r(Xwt,"roformer"),Xwt.forEach(t),Xkr=r(lIe," \u2014 "),EY=n(lIe,"A",{href:!0});var zwt=s(EY);zkr=r(zwt,"FlaxRoFormerForMaskedLM"),zwt.forEach(t),Wkr=r(lIe," (RoFormer model)"),lIe.forEach(t),Qkr=i(Ie),yC=n(Ie,"LI",{});var iIe=s(yC);E7e=n(iIe,"STRONG",{});var Wwt=s(E7e);Hkr=r(Wwt,"xlm-roberta"),Wwt.forEach(t),Ukr=r(iIe," \u2014 "),CY=n(iIe,"A",{href:!0});var Qwt=s(CY);Jkr=r(Qwt,"FlaxXLMRobertaForMaskedLM"),Qwt.forEach(t),Ykr=r(iIe," (XLM-RoBERTa model)"),iIe.forEach(t),Ie.forEach(t),Kkr=i(Hl),T(LC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),zNe=i(f),Gc=n(f,"H2",{class:!0});var KDe=s(Gc);xC=n(KDe,"A",{id:!0,class:!0,href:!0});var Hwt=s(xC);C7e=n(Hwt,"SPAN",{});var Uwt=s(C7e);T(R9.$$.fragment,Uwt),Uwt.forEach(t),Hwt.forEach(t),Zkr=i(KDe),w7e=n(KDe,"SPAN",{});var Jwt=s(w7e);eSr=r(Jwt,"FlaxAutoModelForSeq2SeqLM"),Jwt.forEach(t),KDe.forEach(t),WNe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(P9.$$.fragment,Ul),oSr=i(Ul),Oc=n(Ul,"P",{});var Fee=s(Oc);rSr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wY=n(Fee,"A",{href:!0});var Ywt=s(wY);tSr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),aSr=r(Fee," class method or the "),AY=n(Fee,"A",{href:!0});var Kwt=s(AY);nSr=r(Kwt,"from_config()"),Kwt.forEach(t),sSr=r(Fee,` class
method.`),Fee.forEach(t),lSr=i(Ul),B9=n(Ul,"P",{});var ZDe=s(B9);iSr=r(ZDe,"This class cannot be instantiated directly using "),A7e=n(ZDe,"CODE",{});var Zwt=s(A7e);dSr=r(Zwt,"__init__()"),Zwt.forEach(t),cSr=r(ZDe," (throws an error)."),ZDe.forEach(t),fSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var Uw=s(zt);T(I9.$$.fragment,Uw),mSr=i(Uw),y7e=n(Uw,"P",{});var eAt=s(y7e);gSr=r(eAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eAt.forEach(t),hSr=i(Uw),Vc=n(Uw,"P",{});var Tee=s(Vc);pSr=r(Tee,`Note:
Loading a model from its configuration file does `),L7e=n(Tee,"STRONG",{});var oAt=s(L7e);uSr=r(oAt,"not"),oAt.forEach(t),_Sr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(Tee,"A",{href:!0});var rAt=s(yY);bSr=r(rAt,"from_pretrained()"),rAt.forEach(t),vSr=r(Tee," to load the model weights."),Tee.forEach(t),FSr=i(Uw),T($C.$$.fragment,Uw),Uw.forEach(t),TSr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(q9.$$.fragment,Jl),MSr=i(Jl),x7e=n(Jl,"P",{});var tAt=s(x7e);ESr=r(tAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tAt.forEach(t),CSr=i(Jl),bn=n(Jl,"P",{});var Jw=s(bn);wSr=r(Jw,"The model class to instantiate is selected based on the "),$7e=n(Jw,"CODE",{});var aAt=s($7e);ASr=r(aAt,"model_type"),aAt.forEach(t),ySr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),k7e=n(Jw,"CODE",{});var nAt=s(k7e);LSr=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),xSr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(Jw,"CODE",{});var sAt=s(S7e);$Sr=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),kSr=r(Jw,":"),Jw.forEach(t),SSr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);kC=n(ze,"LI",{});var dIe=s(kC);R7e=n(dIe,"STRONG",{});var lAt=s(R7e);RSr=r(lAt,"bart"),lAt.forEach(t),PSr=r(dIe," \u2014 "),LY=n(dIe,"A",{href:!0});var iAt=s(LY);BSr=r(iAt,"FlaxBartForConditionalGeneration"),iAt.forEach(t),ISr=r(dIe," (BART model)"),dIe.forEach(t),qSr=i(ze),SC=n(ze,"LI",{});var cIe=s(SC);P7e=n(cIe,"STRONG",{});var dAt=s(P7e);NSr=r(dAt,"blenderbot"),dAt.forEach(t),jSr=r(cIe," \u2014 "),xY=n(cIe,"A",{href:!0});var cAt=s(xY);DSr=r(cAt,"FlaxBlenderbotForConditionalGeneration"),cAt.forEach(t),GSr=r(cIe," (Blenderbot model)"),cIe.forEach(t),OSr=i(ze),RC=n(ze,"LI",{});var fIe=s(RC);B7e=n(fIe,"STRONG",{});var fAt=s(B7e);VSr=r(fAt,"blenderbot-small"),fAt.forEach(t),XSr=r(fIe," \u2014 "),$Y=n(fIe,"A",{href:!0});var mAt=s($Y);zSr=r(mAt,"FlaxBlenderbotSmallForConditionalGeneration"),mAt.forEach(t),WSr=r(fIe," (BlenderbotSmall model)"),fIe.forEach(t),QSr=i(ze),PC=n(ze,"LI",{});var mIe=s(PC);I7e=n(mIe,"STRONG",{});var gAt=s(I7e);HSr=r(gAt,"encoder-decoder"),gAt.forEach(t),USr=r(mIe," \u2014 "),kY=n(mIe,"A",{href:!0});var hAt=s(kY);JSr=r(hAt,"FlaxEncoderDecoderModel"),hAt.forEach(t),YSr=r(mIe," (Encoder decoder model)"),mIe.forEach(t),KSr=i(ze),BC=n(ze,"LI",{});var gIe=s(BC);q7e=n(gIe,"STRONG",{});var pAt=s(q7e);ZSr=r(pAt,"marian"),pAt.forEach(t),eRr=r(gIe," \u2014 "),SY=n(gIe,"A",{href:!0});var uAt=s(SY);oRr=r(uAt,"FlaxMarianMTModel"),uAt.forEach(t),rRr=r(gIe," (Marian model)"),gIe.forEach(t),tRr=i(ze),IC=n(ze,"LI",{});var hIe=s(IC);N7e=n(hIe,"STRONG",{});var _At=s(N7e);aRr=r(_At,"mbart"),_At.forEach(t),nRr=r(hIe," \u2014 "),RY=n(hIe,"A",{href:!0});var bAt=s(RY);sRr=r(bAt,"FlaxMBartForConditionalGeneration"),bAt.forEach(t),lRr=r(hIe," (mBART model)"),hIe.forEach(t),iRr=i(ze),qC=n(ze,"LI",{});var pIe=s(qC);j7e=n(pIe,"STRONG",{});var vAt=s(j7e);dRr=r(vAt,"mt5"),vAt.forEach(t),cRr=r(pIe," \u2014 "),PY=n(pIe,"A",{href:!0});var FAt=s(PY);fRr=r(FAt,"FlaxMT5ForConditionalGeneration"),FAt.forEach(t),mRr=r(pIe," (mT5 model)"),pIe.forEach(t),gRr=i(ze),NC=n(ze,"LI",{});var uIe=s(NC);D7e=n(uIe,"STRONG",{});var TAt=s(D7e);hRr=r(TAt,"pegasus"),TAt.forEach(t),pRr=r(uIe," \u2014 "),BY=n(uIe,"A",{href:!0});var MAt=s(BY);uRr=r(MAt,"FlaxPegasusForConditionalGeneration"),MAt.forEach(t),_Rr=r(uIe," (Pegasus model)"),uIe.forEach(t),bRr=i(ze),jC=n(ze,"LI",{});var _Ie=s(jC);G7e=n(_Ie,"STRONG",{});var EAt=s(G7e);vRr=r(EAt,"t5"),EAt.forEach(t),FRr=r(_Ie," \u2014 "),IY=n(_Ie,"A",{href:!0});var CAt=s(IY);TRr=r(CAt,"FlaxT5ForConditionalGeneration"),CAt.forEach(t),MRr=r(_Ie," (T5 model)"),_Ie.forEach(t),ze.forEach(t),ERr=i(Jl),T(DC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),QNe=i(f),Xc=n(f,"H2",{class:!0});var eGe=s(Xc);GC=n(eGe,"A",{id:!0,class:!0,href:!0});var wAt=s(GC);O7e=n(wAt,"SPAN",{});var AAt=s(O7e);T(N9.$$.fragment,AAt),AAt.forEach(t),wAt.forEach(t),CRr=i(eGe),V7e=n(eGe,"SPAN",{});var yAt=s(V7e);wRr=r(yAt,"FlaxAutoModelForSequenceClassification"),yAt.forEach(t),eGe.forEach(t),HNe=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(j9.$$.fragment,Yl),ARr=i(Yl),zc=n(Yl,"P",{});var Mee=s(zc);yRr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qY=n(Mee,"A",{href:!0});var LAt=s(qY);LRr=r(LAt,"from_pretrained()"),LAt.forEach(t),xRr=r(Mee," class method or the "),NY=n(Mee,"A",{href:!0});var xAt=s(NY);$Rr=r(xAt,"from_config()"),xAt.forEach(t),kRr=r(Mee,` class
method.`),Mee.forEach(t),SRr=i(Yl),D9=n(Yl,"P",{});var oGe=s(D9);RRr=r(oGe,"This class cannot be instantiated directly using "),X7e=n(oGe,"CODE",{});var $At=s(X7e);PRr=r($At,"__init__()"),$At.forEach(t),BRr=r(oGe," (throws an error)."),oGe.forEach(t),IRr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var Yw=s(Wt);T(G9.$$.fragment,Yw),qRr=i(Yw),z7e=n(Yw,"P",{});var kAt=s(z7e);NRr=r(kAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kAt.forEach(t),jRr=i(Yw),Wc=n(Yw,"P",{});var Eee=s(Wc);DRr=r(Eee,`Note:
Loading a model from its configuration file does `),W7e=n(Eee,"STRONG",{});var SAt=s(W7e);GRr=r(SAt,"not"),SAt.forEach(t),ORr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(Eee,"A",{href:!0});var RAt=s(jY);VRr=r(RAt,"from_pretrained()"),RAt.forEach(t),XRr=r(Eee," to load the model weights."),Eee.forEach(t),zRr=i(Yw),T(OC.$$.fragment,Yw),Yw.forEach(t),WRr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(O9.$$.fragment,Kl),QRr=i(Kl),Q7e=n(Kl,"P",{});var PAt=s(Q7e);HRr=r(PAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PAt.forEach(t),URr=i(Kl),vn=n(Kl,"P",{});var Kw=s(vn);JRr=r(Kw,"The model class to instantiate is selected based on the "),H7e=n(Kw,"CODE",{});var BAt=s(H7e);YRr=r(BAt,"model_type"),BAt.forEach(t),KRr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),U7e=n(Kw,"CODE",{});var IAt=s(U7e);ZRr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),ePr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(Kw,"CODE",{});var qAt=s(J7e);oPr=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),rPr=r(Kw,":"),Kw.forEach(t),tPr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);VC=n(qe,"LI",{});var bIe=s(VC);Y7e=n(bIe,"STRONG",{});var NAt=s(Y7e);aPr=r(NAt,"albert"),NAt.forEach(t),nPr=r(bIe," \u2014 "),DY=n(bIe,"A",{href:!0});var jAt=s(DY);sPr=r(jAt,"FlaxAlbertForSequenceClassification"),jAt.forEach(t),lPr=r(bIe," (ALBERT model)"),bIe.forEach(t),iPr=i(qe),XC=n(qe,"LI",{});var vIe=s(XC);K7e=n(vIe,"STRONG",{});var DAt=s(K7e);dPr=r(DAt,"bart"),DAt.forEach(t),cPr=r(vIe," \u2014 "),GY=n(vIe,"A",{href:!0});var GAt=s(GY);fPr=r(GAt,"FlaxBartForSequenceClassification"),GAt.forEach(t),mPr=r(vIe," (BART model)"),vIe.forEach(t),gPr=i(qe),zC=n(qe,"LI",{});var FIe=s(zC);Z7e=n(FIe,"STRONG",{});var OAt=s(Z7e);hPr=r(OAt,"bert"),OAt.forEach(t),pPr=r(FIe," \u2014 "),OY=n(FIe,"A",{href:!0});var VAt=s(OY);uPr=r(VAt,"FlaxBertForSequenceClassification"),VAt.forEach(t),_Pr=r(FIe," (BERT model)"),FIe.forEach(t),bPr=i(qe),WC=n(qe,"LI",{});var TIe=s(WC);eMe=n(TIe,"STRONG",{});var XAt=s(eMe);vPr=r(XAt,"big_bird"),XAt.forEach(t),FPr=r(TIe," \u2014 "),VY=n(TIe,"A",{href:!0});var zAt=s(VY);TPr=r(zAt,"FlaxBigBirdForSequenceClassification"),zAt.forEach(t),MPr=r(TIe," (BigBird model)"),TIe.forEach(t),EPr=i(qe),QC=n(qe,"LI",{});var MIe=s(QC);oMe=n(MIe,"STRONG",{});var WAt=s(oMe);CPr=r(WAt,"distilbert"),WAt.forEach(t),wPr=r(MIe," \u2014 "),XY=n(MIe,"A",{href:!0});var QAt=s(XY);APr=r(QAt,"FlaxDistilBertForSequenceClassification"),QAt.forEach(t),yPr=r(MIe," (DistilBERT model)"),MIe.forEach(t),LPr=i(qe),HC=n(qe,"LI",{});var EIe=s(HC);rMe=n(EIe,"STRONG",{});var HAt=s(rMe);xPr=r(HAt,"electra"),HAt.forEach(t),$Pr=r(EIe," \u2014 "),zY=n(EIe,"A",{href:!0});var UAt=s(zY);kPr=r(UAt,"FlaxElectraForSequenceClassification"),UAt.forEach(t),SPr=r(EIe," (ELECTRA model)"),EIe.forEach(t),RPr=i(qe),UC=n(qe,"LI",{});var CIe=s(UC);tMe=n(CIe,"STRONG",{});var JAt=s(tMe);PPr=r(JAt,"mbart"),JAt.forEach(t),BPr=r(CIe," \u2014 "),WY=n(CIe,"A",{href:!0});var YAt=s(WY);IPr=r(YAt,"FlaxMBartForSequenceClassification"),YAt.forEach(t),qPr=r(CIe," (mBART model)"),CIe.forEach(t),NPr=i(qe),JC=n(qe,"LI",{});var wIe=s(JC);aMe=n(wIe,"STRONG",{});var KAt=s(aMe);jPr=r(KAt,"roberta"),KAt.forEach(t),DPr=r(wIe," \u2014 "),QY=n(wIe,"A",{href:!0});var ZAt=s(QY);GPr=r(ZAt,"FlaxRobertaForSequenceClassification"),ZAt.forEach(t),OPr=r(wIe," (RoBERTa model)"),wIe.forEach(t),VPr=i(qe),YC=n(qe,"LI",{});var AIe=s(YC);nMe=n(AIe,"STRONG",{});var eyt=s(nMe);XPr=r(eyt,"roformer"),eyt.forEach(t),zPr=r(AIe," \u2014 "),HY=n(AIe,"A",{href:!0});var oyt=s(HY);WPr=r(oyt,"FlaxRoFormerForSequenceClassification"),oyt.forEach(t),QPr=r(AIe," (RoFormer model)"),AIe.forEach(t),HPr=i(qe),KC=n(qe,"LI",{});var yIe=s(KC);sMe=n(yIe,"STRONG",{});var ryt=s(sMe);UPr=r(ryt,"xlm-roberta"),ryt.forEach(t),JPr=r(yIe," \u2014 "),UY=n(yIe,"A",{href:!0});var tyt=s(UY);YPr=r(tyt,"FlaxXLMRobertaForSequenceClassification"),tyt.forEach(t),KPr=r(yIe," (XLM-RoBERTa model)"),yIe.forEach(t),qe.forEach(t),ZPr=i(Kl),T(ZC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),UNe=i(f),Qc=n(f,"H2",{class:!0});var rGe=s(Qc);e5=n(rGe,"A",{id:!0,class:!0,href:!0});var ayt=s(e5);lMe=n(ayt,"SPAN",{});var nyt=s(lMe);T(V9.$$.fragment,nyt),nyt.forEach(t),ayt.forEach(t),eBr=i(rGe),iMe=n(rGe,"SPAN",{});var syt=s(iMe);oBr=r(syt,"FlaxAutoModelForQuestionAnswering"),syt.forEach(t),rGe.forEach(t),JNe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(X9.$$.fragment,Zl),rBr=i(Zl),Hc=n(Zl,"P",{});var Cee=s(Hc);tBr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JY=n(Cee,"A",{href:!0});var lyt=s(JY);aBr=r(lyt,"from_pretrained()"),lyt.forEach(t),nBr=r(Cee," class method or the "),YY=n(Cee,"A",{href:!0});var iyt=s(YY);sBr=r(iyt,"from_config()"),iyt.forEach(t),lBr=r(Cee,` class
method.`),Cee.forEach(t),iBr=i(Zl),z9=n(Zl,"P",{});var tGe=s(z9);dBr=r(tGe,"This class cannot be instantiated directly using "),dMe=n(tGe,"CODE",{});var dyt=s(dMe);cBr=r(dyt,"__init__()"),dyt.forEach(t),fBr=r(tGe," (throws an error)."),tGe.forEach(t),mBr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var Zw=s(Qt);T(W9.$$.fragment,Zw),gBr=i(Zw),cMe=n(Zw,"P",{});var cyt=s(cMe);hBr=r(cyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cyt.forEach(t),pBr=i(Zw),Uc=n(Zw,"P",{});var wee=s(Uc);uBr=r(wee,`Note:
Loading a model from its configuration file does `),fMe=n(wee,"STRONG",{});var fyt=s(fMe);_Br=r(fyt,"not"),fyt.forEach(t),bBr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(wee,"A",{href:!0});var myt=s(KY);vBr=r(myt,"from_pretrained()"),myt.forEach(t),FBr=r(wee," to load the model weights."),wee.forEach(t),TBr=i(Zw),T(o5.$$.fragment,Zw),Zw.forEach(t),MBr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(Q9.$$.fragment,ei),EBr=i(ei),mMe=n(ei,"P",{});var gyt=s(mMe);CBr=r(gyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gyt.forEach(t),wBr=i(ei),Fn=n(ei,"P",{});var eA=s(Fn);ABr=r(eA,"The model class to instantiate is selected based on the "),gMe=n(eA,"CODE",{});var hyt=s(gMe);yBr=r(hyt,"model_type"),hyt.forEach(t),LBr=r(eA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(eA,"CODE",{});var pyt=s(hMe);xBr=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),$Br=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(eA,"CODE",{});var uyt=s(pMe);kBr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),SBr=r(eA,":"),eA.forEach(t),RBr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);r5=n(Ne,"LI",{});var LIe=s(r5);uMe=n(LIe,"STRONG",{});var _yt=s(uMe);PBr=r(_yt,"albert"),_yt.forEach(t),BBr=r(LIe," \u2014 "),ZY=n(LIe,"A",{href:!0});var byt=s(ZY);IBr=r(byt,"FlaxAlbertForQuestionAnswering"),byt.forEach(t),qBr=r(LIe," (ALBERT model)"),LIe.forEach(t),NBr=i(Ne),t5=n(Ne,"LI",{});var xIe=s(t5);_Me=n(xIe,"STRONG",{});var vyt=s(_Me);jBr=r(vyt,"bart"),vyt.forEach(t),DBr=r(xIe," \u2014 "),eK=n(xIe,"A",{href:!0});var Fyt=s(eK);GBr=r(Fyt,"FlaxBartForQuestionAnswering"),Fyt.forEach(t),OBr=r(xIe," (BART model)"),xIe.forEach(t),VBr=i(Ne),a5=n(Ne,"LI",{});var $Ie=s(a5);bMe=n($Ie,"STRONG",{});var Tyt=s(bMe);XBr=r(Tyt,"bert"),Tyt.forEach(t),zBr=r($Ie," \u2014 "),oK=n($Ie,"A",{href:!0});var Myt=s(oK);WBr=r(Myt,"FlaxBertForQuestionAnswering"),Myt.forEach(t),QBr=r($Ie," (BERT model)"),$Ie.forEach(t),HBr=i(Ne),n5=n(Ne,"LI",{});var kIe=s(n5);vMe=n(kIe,"STRONG",{});var Eyt=s(vMe);UBr=r(Eyt,"big_bird"),Eyt.forEach(t),JBr=r(kIe," \u2014 "),rK=n(kIe,"A",{href:!0});var Cyt=s(rK);YBr=r(Cyt,"FlaxBigBirdForQuestionAnswering"),Cyt.forEach(t),KBr=r(kIe," (BigBird model)"),kIe.forEach(t),ZBr=i(Ne),s5=n(Ne,"LI",{});var SIe=s(s5);FMe=n(SIe,"STRONG",{});var wyt=s(FMe);eIr=r(wyt,"distilbert"),wyt.forEach(t),oIr=r(SIe," \u2014 "),tK=n(SIe,"A",{href:!0});var Ayt=s(tK);rIr=r(Ayt,"FlaxDistilBertForQuestionAnswering"),Ayt.forEach(t),tIr=r(SIe," (DistilBERT model)"),SIe.forEach(t),aIr=i(Ne),l5=n(Ne,"LI",{});var RIe=s(l5);TMe=n(RIe,"STRONG",{});var yyt=s(TMe);nIr=r(yyt,"electra"),yyt.forEach(t),sIr=r(RIe," \u2014 "),aK=n(RIe,"A",{href:!0});var Lyt=s(aK);lIr=r(Lyt,"FlaxElectraForQuestionAnswering"),Lyt.forEach(t),iIr=r(RIe," (ELECTRA model)"),RIe.forEach(t),dIr=i(Ne),i5=n(Ne,"LI",{});var PIe=s(i5);MMe=n(PIe,"STRONG",{});var xyt=s(MMe);cIr=r(xyt,"mbart"),xyt.forEach(t),fIr=r(PIe," \u2014 "),nK=n(PIe,"A",{href:!0});var $yt=s(nK);mIr=r($yt,"FlaxMBartForQuestionAnswering"),$yt.forEach(t),gIr=r(PIe," (mBART model)"),PIe.forEach(t),hIr=i(Ne),d5=n(Ne,"LI",{});var BIe=s(d5);EMe=n(BIe,"STRONG",{});var kyt=s(EMe);pIr=r(kyt,"roberta"),kyt.forEach(t),uIr=r(BIe," \u2014 "),sK=n(BIe,"A",{href:!0});var Syt=s(sK);_Ir=r(Syt,"FlaxRobertaForQuestionAnswering"),Syt.forEach(t),bIr=r(BIe," (RoBERTa model)"),BIe.forEach(t),vIr=i(Ne),c5=n(Ne,"LI",{});var IIe=s(c5);CMe=n(IIe,"STRONG",{});var Ryt=s(CMe);FIr=r(Ryt,"roformer"),Ryt.forEach(t),TIr=r(IIe," \u2014 "),lK=n(IIe,"A",{href:!0});var Pyt=s(lK);MIr=r(Pyt,"FlaxRoFormerForQuestionAnswering"),Pyt.forEach(t),EIr=r(IIe," (RoFormer model)"),IIe.forEach(t),CIr=i(Ne),f5=n(Ne,"LI",{});var qIe=s(f5);wMe=n(qIe,"STRONG",{});var Byt=s(wMe);wIr=r(Byt,"xlm-roberta"),Byt.forEach(t),AIr=r(qIe," \u2014 "),iK=n(qIe,"A",{href:!0});var Iyt=s(iK);yIr=r(Iyt,"FlaxXLMRobertaForQuestionAnswering"),Iyt.forEach(t),LIr=r(qIe," (XLM-RoBERTa model)"),qIe.forEach(t),Ne.forEach(t),xIr=i(ei),T(m5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),YNe=i(f),Jc=n(f,"H2",{class:!0});var aGe=s(Jc);g5=n(aGe,"A",{id:!0,class:!0,href:!0});var qyt=s(g5);AMe=n(qyt,"SPAN",{});var Nyt=s(AMe);T(H9.$$.fragment,Nyt),Nyt.forEach(t),qyt.forEach(t),$Ir=i(aGe),yMe=n(aGe,"SPAN",{});var jyt=s(yMe);kIr=r(jyt,"FlaxAutoModelForTokenClassification"),jyt.forEach(t),aGe.forEach(t),KNe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(U9.$$.fragment,oi),SIr=i(oi),Yc=n(oi,"P",{});var Aee=s(Yc);RIr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dK=n(Aee,"A",{href:!0});var Dyt=s(dK);PIr=r(Dyt,"from_pretrained()"),Dyt.forEach(t),BIr=r(Aee," class method or the "),cK=n(Aee,"A",{href:!0});var Gyt=s(cK);IIr=r(Gyt,"from_config()"),Gyt.forEach(t),qIr=r(Aee,` class
method.`),Aee.forEach(t),NIr=i(oi),J9=n(oi,"P",{});var nGe=s(J9);jIr=r(nGe,"This class cannot be instantiated directly using "),LMe=n(nGe,"CODE",{});var Oyt=s(LMe);DIr=r(Oyt,"__init__()"),Oyt.forEach(t),GIr=r(nGe," (throws an error)."),nGe.forEach(t),OIr=i(oi),Ht=n(oi,"DIV",{class:!0});var oA=s(Ht);T(Y9.$$.fragment,oA),VIr=i(oA),xMe=n(oA,"P",{});var Vyt=s(xMe);XIr=r(Vyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vyt.forEach(t),zIr=i(oA),Kc=n(oA,"P",{});var yee=s(Kc);WIr=r(yee,`Note:
Loading a model from its configuration file does `),$Me=n(yee,"STRONG",{});var Xyt=s($Me);QIr=r(Xyt,"not"),Xyt.forEach(t),HIr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(yee,"A",{href:!0});var zyt=s(fK);UIr=r(zyt,"from_pretrained()"),zyt.forEach(t),JIr=r(yee," to load the model weights."),yee.forEach(t),YIr=i(oA),T(h5.$$.fragment,oA),oA.forEach(t),KIr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(K9.$$.fragment,ri),ZIr=i(ri),kMe=n(ri,"P",{});var Wyt=s(kMe);eqr=r(Wyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wyt.forEach(t),oqr=i(ri),Tn=n(ri,"P",{});var rA=s(Tn);rqr=r(rA,"The model class to instantiate is selected based on the "),SMe=n(rA,"CODE",{});var Qyt=s(SMe);tqr=r(Qyt,"model_type"),Qyt.forEach(t),aqr=r(rA,` property of the config object (either
passed as an argument or loaded from `),RMe=n(rA,"CODE",{});var Hyt=s(RMe);nqr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),sqr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(rA,"CODE",{});var Uyt=s(PMe);lqr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),iqr=r(rA,":"),rA.forEach(t),dqr=i(ri),De=n(ri,"UL",{});var Fo=s(De);p5=n(Fo,"LI",{});var NIe=s(p5);BMe=n(NIe,"STRONG",{});var Jyt=s(BMe);cqr=r(Jyt,"albert"),Jyt.forEach(t),fqr=r(NIe," \u2014 "),mK=n(NIe,"A",{href:!0});var Yyt=s(mK);mqr=r(Yyt,"FlaxAlbertForTokenClassification"),Yyt.forEach(t),gqr=r(NIe," (ALBERT model)"),NIe.forEach(t),hqr=i(Fo),u5=n(Fo,"LI",{});var jIe=s(u5);IMe=n(jIe,"STRONG",{});var Kyt=s(IMe);pqr=r(Kyt,"bert"),Kyt.forEach(t),uqr=r(jIe," \u2014 "),gK=n(jIe,"A",{href:!0});var Zyt=s(gK);_qr=r(Zyt,"FlaxBertForTokenClassification"),Zyt.forEach(t),bqr=r(jIe," (BERT model)"),jIe.forEach(t),vqr=i(Fo),_5=n(Fo,"LI",{});var DIe=s(_5);qMe=n(DIe,"STRONG",{});var eLt=s(qMe);Fqr=r(eLt,"big_bird"),eLt.forEach(t),Tqr=r(DIe," \u2014 "),hK=n(DIe,"A",{href:!0});var oLt=s(hK);Mqr=r(oLt,"FlaxBigBirdForTokenClassification"),oLt.forEach(t),Eqr=r(DIe," (BigBird model)"),DIe.forEach(t),Cqr=i(Fo),b5=n(Fo,"LI",{});var GIe=s(b5);NMe=n(GIe,"STRONG",{});var rLt=s(NMe);wqr=r(rLt,"distilbert"),rLt.forEach(t),Aqr=r(GIe," \u2014 "),pK=n(GIe,"A",{href:!0});var tLt=s(pK);yqr=r(tLt,"FlaxDistilBertForTokenClassification"),tLt.forEach(t),Lqr=r(GIe," (DistilBERT model)"),GIe.forEach(t),xqr=i(Fo),v5=n(Fo,"LI",{});var OIe=s(v5);jMe=n(OIe,"STRONG",{});var aLt=s(jMe);$qr=r(aLt,"electra"),aLt.forEach(t),kqr=r(OIe," \u2014 "),uK=n(OIe,"A",{href:!0});var nLt=s(uK);Sqr=r(nLt,"FlaxElectraForTokenClassification"),nLt.forEach(t),Rqr=r(OIe," (ELECTRA model)"),OIe.forEach(t),Pqr=i(Fo),F5=n(Fo,"LI",{});var VIe=s(F5);DMe=n(VIe,"STRONG",{});var sLt=s(DMe);Bqr=r(sLt,"roberta"),sLt.forEach(t),Iqr=r(VIe," \u2014 "),_K=n(VIe,"A",{href:!0});var lLt=s(_K);qqr=r(lLt,"FlaxRobertaForTokenClassification"),lLt.forEach(t),Nqr=r(VIe," (RoBERTa model)"),VIe.forEach(t),jqr=i(Fo),T5=n(Fo,"LI",{});var XIe=s(T5);GMe=n(XIe,"STRONG",{});var iLt=s(GMe);Dqr=r(iLt,"roformer"),iLt.forEach(t),Gqr=r(XIe," \u2014 "),bK=n(XIe,"A",{href:!0});var dLt=s(bK);Oqr=r(dLt,"FlaxRoFormerForTokenClassification"),dLt.forEach(t),Vqr=r(XIe," (RoFormer model)"),XIe.forEach(t),Xqr=i(Fo),M5=n(Fo,"LI",{});var zIe=s(M5);OMe=n(zIe,"STRONG",{});var cLt=s(OMe);zqr=r(cLt,"xlm-roberta"),cLt.forEach(t),Wqr=r(zIe," \u2014 "),vK=n(zIe,"A",{href:!0});var fLt=s(vK);Qqr=r(fLt,"FlaxXLMRobertaForTokenClassification"),fLt.forEach(t),Hqr=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),Fo.forEach(t),Uqr=i(ri),T(E5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),ZNe=i(f),Zc=n(f,"H2",{class:!0});var sGe=s(Zc);C5=n(sGe,"A",{id:!0,class:!0,href:!0});var mLt=s(C5);VMe=n(mLt,"SPAN",{});var gLt=s(VMe);T(Z9.$$.fragment,gLt),gLt.forEach(t),mLt.forEach(t),Jqr=i(sGe),XMe=n(sGe,"SPAN",{});var hLt=s(XMe);Yqr=r(hLt,"FlaxAutoModelForMultipleChoice"),hLt.forEach(t),sGe.forEach(t),eje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ex.$$.fragment,ti),Kqr=i(ti),ef=n(ti,"P",{});var Lee=s(ef);Zqr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FK=n(Lee,"A",{href:!0});var pLt=s(FK);eNr=r(pLt,"from_pretrained()"),pLt.forEach(t),oNr=r(Lee," class method or the "),TK=n(Lee,"A",{href:!0});var uLt=s(TK);rNr=r(uLt,"from_config()"),uLt.forEach(t),tNr=r(Lee,` class
method.`),Lee.forEach(t),aNr=i(ti),ox=n(ti,"P",{});var lGe=s(ox);nNr=r(lGe,"This class cannot be instantiated directly using "),zMe=n(lGe,"CODE",{});var _Lt=s(zMe);sNr=r(_Lt,"__init__()"),_Lt.forEach(t),lNr=r(lGe," (throws an error)."),lGe.forEach(t),iNr=i(ti),Ut=n(ti,"DIV",{class:!0});var tA=s(Ut);T(rx.$$.fragment,tA),dNr=i(tA),WMe=n(tA,"P",{});var bLt=s(WMe);cNr=r(bLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bLt.forEach(t),fNr=i(tA),of=n(tA,"P",{});var xee=s(of);mNr=r(xee,`Note:
Loading a model from its configuration file does `),QMe=n(xee,"STRONG",{});var vLt=s(QMe);gNr=r(vLt,"not"),vLt.forEach(t),hNr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(xee,"A",{href:!0});var FLt=s(MK);pNr=r(FLt,"from_pretrained()"),FLt.forEach(t),uNr=r(xee," to load the model weights."),xee.forEach(t),_Nr=i(tA),T(w5.$$.fragment,tA),tA.forEach(t),bNr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(tx.$$.fragment,ai),vNr=i(ai),HMe=n(ai,"P",{});var TLt=s(HMe);FNr=r(TLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TLt.forEach(t),TNr=i(ai),Mn=n(ai,"P",{});var aA=s(Mn);MNr=r(aA,"The model class to instantiate is selected based on the "),UMe=n(aA,"CODE",{});var MLt=s(UMe);ENr=r(MLt,"model_type"),MLt.forEach(t),CNr=r(aA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(aA,"CODE",{});var ELt=s(JMe);wNr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),ANr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(aA,"CODE",{});var CLt=s(YMe);yNr=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),LNr=r(aA,":"),aA.forEach(t),xNr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);A5=n(To,"LI",{});var WIe=s(A5);KMe=n(WIe,"STRONG",{});var wLt=s(KMe);$Nr=r(wLt,"albert"),wLt.forEach(t),kNr=r(WIe," \u2014 "),EK=n(WIe,"A",{href:!0});var ALt=s(EK);SNr=r(ALt,"FlaxAlbertForMultipleChoice"),ALt.forEach(t),RNr=r(WIe," (ALBERT model)"),WIe.forEach(t),PNr=i(To),y5=n(To,"LI",{});var QIe=s(y5);ZMe=n(QIe,"STRONG",{});var yLt=s(ZMe);BNr=r(yLt,"bert"),yLt.forEach(t),INr=r(QIe," \u2014 "),CK=n(QIe,"A",{href:!0});var LLt=s(CK);qNr=r(LLt,"FlaxBertForMultipleChoice"),LLt.forEach(t),NNr=r(QIe," (BERT model)"),QIe.forEach(t),jNr=i(To),L5=n(To,"LI",{});var HIe=s(L5);e4e=n(HIe,"STRONG",{});var xLt=s(e4e);DNr=r(xLt,"big_bird"),xLt.forEach(t),GNr=r(HIe," \u2014 "),wK=n(HIe,"A",{href:!0});var $Lt=s(wK);ONr=r($Lt,"FlaxBigBirdForMultipleChoice"),$Lt.forEach(t),VNr=r(HIe," (BigBird model)"),HIe.forEach(t),XNr=i(To),x5=n(To,"LI",{});var UIe=s(x5);o4e=n(UIe,"STRONG",{});var kLt=s(o4e);zNr=r(kLt,"distilbert"),kLt.forEach(t),WNr=r(UIe," \u2014 "),AK=n(UIe,"A",{href:!0});var SLt=s(AK);QNr=r(SLt,"FlaxDistilBertForMultipleChoice"),SLt.forEach(t),HNr=r(UIe," (DistilBERT model)"),UIe.forEach(t),UNr=i(To),$5=n(To,"LI",{});var JIe=s($5);r4e=n(JIe,"STRONG",{});var RLt=s(r4e);JNr=r(RLt,"electra"),RLt.forEach(t),YNr=r(JIe," \u2014 "),yK=n(JIe,"A",{href:!0});var PLt=s(yK);KNr=r(PLt,"FlaxElectraForMultipleChoice"),PLt.forEach(t),ZNr=r(JIe," (ELECTRA model)"),JIe.forEach(t),ejr=i(To),k5=n(To,"LI",{});var YIe=s(k5);t4e=n(YIe,"STRONG",{});var BLt=s(t4e);ojr=r(BLt,"roberta"),BLt.forEach(t),rjr=r(YIe," \u2014 "),LK=n(YIe,"A",{href:!0});var ILt=s(LK);tjr=r(ILt,"FlaxRobertaForMultipleChoice"),ILt.forEach(t),ajr=r(YIe," (RoBERTa model)"),YIe.forEach(t),njr=i(To),S5=n(To,"LI",{});var KIe=s(S5);a4e=n(KIe,"STRONG",{});var qLt=s(a4e);sjr=r(qLt,"roformer"),qLt.forEach(t),ljr=r(KIe," \u2014 "),xK=n(KIe,"A",{href:!0});var NLt=s(xK);ijr=r(NLt,"FlaxRoFormerForMultipleChoice"),NLt.forEach(t),djr=r(KIe," (RoFormer model)"),KIe.forEach(t),cjr=i(To),R5=n(To,"LI",{});var ZIe=s(R5);n4e=n(ZIe,"STRONG",{});var jLt=s(n4e);fjr=r(jLt,"xlm-roberta"),jLt.forEach(t),mjr=r(ZIe," \u2014 "),$K=n(ZIe,"A",{href:!0});var DLt=s($K);gjr=r(DLt,"FlaxXLMRobertaForMultipleChoice"),DLt.forEach(t),hjr=r(ZIe," (XLM-RoBERTa model)"),ZIe.forEach(t),To.forEach(t),pjr=i(ai),T(P5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),oje=i(f),rf=n(f,"H2",{class:!0});var iGe=s(rf);B5=n(iGe,"A",{id:!0,class:!0,href:!0});var GLt=s(B5);s4e=n(GLt,"SPAN",{});var OLt=s(s4e);T(ax.$$.fragment,OLt),OLt.forEach(t),GLt.forEach(t),ujr=i(iGe),l4e=n(iGe,"SPAN",{});var VLt=s(l4e);_jr=r(VLt,"FlaxAutoModelForNextSentencePrediction"),VLt.forEach(t),iGe.forEach(t),rje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(nx.$$.fragment,ni),bjr=i(ni),tf=n(ni,"P",{});var $ee=s(tf);vjr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=n($ee,"A",{href:!0});var XLt=s(kK);Fjr=r(XLt,"from_pretrained()"),XLt.forEach(t),Tjr=r($ee," class method or the "),SK=n($ee,"A",{href:!0});var zLt=s(SK);Mjr=r(zLt,"from_config()"),zLt.forEach(t),Ejr=r($ee,` class
method.`),$ee.forEach(t),Cjr=i(ni),sx=n(ni,"P",{});var dGe=s(sx);wjr=r(dGe,"This class cannot be instantiated directly using "),i4e=n(dGe,"CODE",{});var WLt=s(i4e);Ajr=r(WLt,"__init__()"),WLt.forEach(t),yjr=r(dGe," (throws an error)."),dGe.forEach(t),Ljr=i(ni),Jt=n(ni,"DIV",{class:!0});var nA=s(Jt);T(lx.$$.fragment,nA),xjr=i(nA),d4e=n(nA,"P",{});var QLt=s(d4e);$jr=r(QLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QLt.forEach(t),kjr=i(nA),af=n(nA,"P",{});var kee=s(af);Sjr=r(kee,`Note:
Loading a model from its configuration file does `),c4e=n(kee,"STRONG",{});var HLt=s(c4e);Rjr=r(HLt,"not"),HLt.forEach(t),Pjr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(kee,"A",{href:!0});var ULt=s(RK);Bjr=r(ULt,"from_pretrained()"),ULt.forEach(t),Ijr=r(kee," to load the model weights."),kee.forEach(t),qjr=i(nA),T(I5.$$.fragment,nA),nA.forEach(t),Njr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(ix.$$.fragment,si),jjr=i(si),f4e=n(si,"P",{});var JLt=s(f4e);Djr=r(JLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JLt.forEach(t),Gjr=i(si),En=n(si,"P",{});var sA=s(En);Ojr=r(sA,"The model class to instantiate is selected based on the "),m4e=n(sA,"CODE",{});var YLt=s(m4e);Vjr=r(YLt,"model_type"),YLt.forEach(t),Xjr=r(sA,` property of the config object (either
passed as an argument or loaded from `),g4e=n(sA,"CODE",{});var KLt=s(g4e);zjr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),Wjr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(sA,"CODE",{});var ZLt=s(h4e);Qjr=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),Hjr=r(sA,":"),sA.forEach(t),Ujr=i(si),p4e=n(si,"UL",{});var e8t=s(p4e);q5=n(e8t,"LI",{});var eqe=s(q5);u4e=n(eqe,"STRONG",{});var o8t=s(u4e);Jjr=r(o8t,"bert"),o8t.forEach(t),Yjr=r(eqe," \u2014 "),PK=n(eqe,"A",{href:!0});var r8t=s(PK);Kjr=r(r8t,"FlaxBertForNextSentencePrediction"),r8t.forEach(t),Zjr=r(eqe," (BERT model)"),eqe.forEach(t),e8t.forEach(t),eDr=i(si),T(N5.$$.fragment,si),si.forEach(t),ni.forEach(t),tje=i(f),nf=n(f,"H2",{class:!0});var cGe=s(nf);j5=n(cGe,"A",{id:!0,class:!0,href:!0});var t8t=s(j5);_4e=n(t8t,"SPAN",{});var a8t=s(_4e);T(dx.$$.fragment,a8t),a8t.forEach(t),t8t.forEach(t),oDr=i(cGe),b4e=n(cGe,"SPAN",{});var n8t=s(b4e);rDr=r(n8t,"FlaxAutoModelForImageClassification"),n8t.forEach(t),cGe.forEach(t),aje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(cx.$$.fragment,li),tDr=i(li),sf=n(li,"P",{});var See=s(sf);aDr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BK=n(See,"A",{href:!0});var s8t=s(BK);nDr=r(s8t,"from_pretrained()"),s8t.forEach(t),sDr=r(See," class method or the "),IK=n(See,"A",{href:!0});var l8t=s(IK);lDr=r(l8t,"from_config()"),l8t.forEach(t),iDr=r(See,` class
method.`),See.forEach(t),dDr=i(li),fx=n(li,"P",{});var fGe=s(fx);cDr=r(fGe,"This class cannot be instantiated directly using "),v4e=n(fGe,"CODE",{});var i8t=s(v4e);fDr=r(i8t,"__init__()"),i8t.forEach(t),mDr=r(fGe," (throws an error)."),fGe.forEach(t),gDr=i(li),Yt=n(li,"DIV",{class:!0});var lA=s(Yt);T(mx.$$.fragment,lA),hDr=i(lA),F4e=n(lA,"P",{});var d8t=s(F4e);pDr=r(d8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d8t.forEach(t),uDr=i(lA),lf=n(lA,"P",{});var Ree=s(lf);_Dr=r(Ree,`Note:
Loading a model from its configuration file does `),T4e=n(Ree,"STRONG",{});var c8t=s(T4e);bDr=r(c8t,"not"),c8t.forEach(t),vDr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Ree,"A",{href:!0});var f8t=s(qK);FDr=r(f8t,"from_pretrained()"),f8t.forEach(t),TDr=r(Ree," to load the model weights."),Ree.forEach(t),MDr=i(lA),T(D5.$$.fragment,lA),lA.forEach(t),EDr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(gx.$$.fragment,ii),CDr=i(ii),M4e=n(ii,"P",{});var m8t=s(M4e);wDr=r(m8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),m8t.forEach(t),ADr=i(ii),Cn=n(ii,"P",{});var iA=s(Cn);yDr=r(iA,"The model class to instantiate is selected based on the "),E4e=n(iA,"CODE",{});var g8t=s(E4e);LDr=r(g8t,"model_type"),g8t.forEach(t),xDr=r(iA,` property of the config object (either
passed as an argument or loaded from `),C4e=n(iA,"CODE",{});var h8t=s(C4e);$Dr=r(h8t,"pretrained_model_name_or_path"),h8t.forEach(t),kDr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(iA,"CODE",{});var p8t=s(w4e);SDr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),RDr=r(iA,":"),iA.forEach(t),PDr=i(ii),hx=n(ii,"UL",{});var mGe=s(hx);G5=n(mGe,"LI",{});var oqe=s(G5);A4e=n(oqe,"STRONG",{});var u8t=s(A4e);BDr=r(u8t,"beit"),u8t.forEach(t),IDr=r(oqe," \u2014 "),NK=n(oqe,"A",{href:!0});var _8t=s(NK);qDr=r(_8t,"FlaxBeitForImageClassification"),_8t.forEach(t),NDr=r(oqe," (BEiT model)"),oqe.forEach(t),jDr=i(mGe),O5=n(mGe,"LI",{});var rqe=s(O5);y4e=n(rqe,"STRONG",{});var b8t=s(y4e);DDr=r(b8t,"vit"),b8t.forEach(t),GDr=r(rqe," \u2014 "),jK=n(rqe,"A",{href:!0});var v8t=s(jK);ODr=r(v8t,"FlaxViTForImageClassification"),v8t.forEach(t),VDr=r(rqe," (ViT model)"),rqe.forEach(t),mGe.forEach(t),XDr=i(ii),T(V5.$$.fragment,ii),ii.forEach(t),li.forEach(t),nje=i(f),df=n(f,"H2",{class:!0});var gGe=s(df);X5=n(gGe,"A",{id:!0,class:!0,href:!0});var F8t=s(X5);L4e=n(F8t,"SPAN",{});var T8t=s(L4e);T(px.$$.fragment,T8t),T8t.forEach(t),F8t.forEach(t),zDr=i(gGe),x4e=n(gGe,"SPAN",{});var M8t=s(x4e);WDr=r(M8t,"FlaxAutoModelForVision2Seq"),M8t.forEach(t),gGe.forEach(t),sje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(ux.$$.fragment,di),QDr=i(di),cf=n(di,"P",{});var Pee=s(cf);HDr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DK=n(Pee,"A",{href:!0});var E8t=s(DK);UDr=r(E8t,"from_pretrained()"),E8t.forEach(t),JDr=r(Pee," class method or the "),GK=n(Pee,"A",{href:!0});var C8t=s(GK);YDr=r(C8t,"from_config()"),C8t.forEach(t),KDr=r(Pee,` class
method.`),Pee.forEach(t),ZDr=i(di),_x=n(di,"P",{});var hGe=s(_x);eGr=r(hGe,"This class cannot be instantiated directly using "),$4e=n(hGe,"CODE",{});var w8t=s($4e);oGr=r(w8t,"__init__()"),w8t.forEach(t),rGr=r(hGe," (throws an error)."),hGe.forEach(t),tGr=i(di),Kt=n(di,"DIV",{class:!0});var dA=s(Kt);T(bx.$$.fragment,dA),aGr=i(dA),k4e=n(dA,"P",{});var A8t=s(k4e);nGr=r(A8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A8t.forEach(t),sGr=i(dA),ff=n(dA,"P",{});var Bee=s(ff);lGr=r(Bee,`Note:
Loading a model from its configuration file does `),S4e=n(Bee,"STRONG",{});var y8t=s(S4e);iGr=r(y8t,"not"),y8t.forEach(t),dGr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Bee,"A",{href:!0});var L8t=s(OK);cGr=r(L8t,"from_pretrained()"),L8t.forEach(t),fGr=r(Bee," to load the model weights."),Bee.forEach(t),mGr=i(dA),T(z5.$$.fragment,dA),dA.forEach(t),gGr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(vx.$$.fragment,ci),hGr=i(ci),R4e=n(ci,"P",{});var x8t=s(R4e);pGr=r(x8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),x8t.forEach(t),uGr=i(ci),wn=n(ci,"P",{});var cA=s(wn);_Gr=r(cA,"The model class to instantiate is selected based on the "),P4e=n(cA,"CODE",{});var $8t=s(P4e);bGr=r($8t,"model_type"),$8t.forEach(t),vGr=r(cA,` property of the config object (either
passed as an argument or loaded from `),B4e=n(cA,"CODE",{});var k8t=s(B4e);FGr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),TGr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n(cA,"CODE",{});var S8t=s(I4e);MGr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),EGr=r(cA,":"),cA.forEach(t),CGr=i(ci),q4e=n(ci,"UL",{});var R8t=s(q4e);W5=n(R8t,"LI",{});var tqe=s(W5);N4e=n(tqe,"STRONG",{});var P8t=s(N4e);wGr=r(P8t,"vision-encoder-decoder"),P8t.forEach(t),AGr=r(tqe," \u2014 "),VK=n(tqe,"A",{href:!0});var B8t=s(VK);yGr=r(B8t,"FlaxVisionEncoderDecoderModel"),B8t.forEach(t),LGr=r(tqe," (Vision Encoder decoder model)"),tqe.forEach(t),R8t.forEach(t),xGr=i(ci),T(Q5.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(jxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(j$,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(D$,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig"),c(G$,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(O$,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig"),c(V$,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig"),c(X$,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(z$,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig"),c(W$,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Q$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(H$,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(U$,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig"),c(J$,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig"),c(Y$,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig"),c(K$,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig"),c(Z$,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig"),c(ek,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig"),c(ok,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rk,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tk,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ak,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig"),c(nk,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sk,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lk,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig"),c(ik,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig"),c(dk,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig"),c(ck,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig"),c(fk,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig"),c(mk,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig"),c(gk,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig"),c(pk,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig"),c(uk,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig"),c(_k,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig"),c(bk,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig"),c(vk,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig"),c(Fk,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config"),c(Tk,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Mk,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig"),c(Ek,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig"),c(Ck,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig"),c(wk,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ak,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(yk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Lk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(xk,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig"),c($k,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig"),c(kk,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig"),c(Sk,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig"),c(Rk,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config"),c(Pk,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig"),c(Bk,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Ik,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig"),c(qk,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Nk,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(jk,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig"),c(Dk,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config"),c(Gk,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Ok,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Vk,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig"),c(Xk,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig"),c(zk,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Wk,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig"),c(Qk,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Hk,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Uk,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Jk,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagConfig"),c(Yk,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmConfig"),c(Kk,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig"),c(Zk,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig"),c(eS,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig"),c(oS,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig"),c(rS,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig"),c(tS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig"),c(aS,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig"),c(nS,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig"),c(sS,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig"),c(lS,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig"),c(iS,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(dS,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(cS,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(fS,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig"),c(mS,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(gS,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig"),c(hS,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config"),c(pS,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig"),c(uS,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(_S,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig"),c(bS,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(vS,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(FS,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig"),c(TS,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig"),c(MS,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(CS,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(wS,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig"),c(AS,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(yS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(LS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(xS,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig"),c($S,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig"),c(kS,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig"),c(SS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(RS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(PS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(BS,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig"),c(IS,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig"),c(qS,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(NS,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(jS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(DS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(GS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizer"),c(OS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizerFast"),c(VS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizer"),c(XS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(zS,"href","/docs/transformers/pr_17060/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(WS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(QS,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(HS,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(US,"href","/docs/transformers/pr_17060/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(JS,"href","/docs/transformers/pr_17060/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(YS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(KS,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(rR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(tR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(aR,"href","/docs/transformers/pr_17060/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(nR,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizer"),c(sR,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineTokenizer"),c(iR,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizer"),c(dR,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(cR,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(fR,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizer"),c(gR,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(hR,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(pR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_R,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizer"),c(bR,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(vR,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(FR,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(TR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(MR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(ER,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(CR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(wR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizer"),c(AR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(yR,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(LR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizer"),c(xR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizerFast"),c($R,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(kR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizer"),c(SR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(RR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(qR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizer"),c(DR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(GR,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(zR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(WR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(QR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(HR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(UR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(JR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(YR,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(KR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizer"),c(ZR,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizerFast"),c(eP,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizer"),c(oP,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(rP,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeTokenizer"),c(tP,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aP,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nP,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sP,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianTokenizer"),c(lP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizer"),c(iP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(fP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(mP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17060/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hP,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(pP,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(uP,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(_P,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bP,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(vP,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(FP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(TP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MP,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(EP,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(CP,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wP,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AP,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(yP,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(LP,"href","/docs/transformers/pr_17060/en/model_doc/phobert#transformers.PhobertTokenizer"),c(xP,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartTokenizer"),c($P,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(kP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(SP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagTokenizer"),c(PP,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizer"),c(BP,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizerFast"),c(IP,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizer"),c(qP,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(NP,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizer"),c(jP,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(GP,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VP,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XP,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(zP,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(WP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(QP,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(HP,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizer"),c(UP,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(JP,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(YP,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5Tokenizer"),c(ZP,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.T5TokenizerFast"),c(eB,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasTokenizer"),c(oB,"href","/docs/transformers/pr_17060/en/model_doc/tapex#transformers.TapexTokenizer"),c(rB,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(tB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(iB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizer"),c(dB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(cB,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMTokenizer"),c(fB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(mB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(gB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_B,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(bB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(vB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(FB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(TB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c($B,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(PB,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoProcessor"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(HB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(UB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPProcessor"),c(JB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(YB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(KB,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ZB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(rI,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(tI,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRProcessor"),c(aI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sI,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltProcessor"),c(lI,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(iI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ep,"id","transformers.AutoModel"),c(ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ep,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(fI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hI,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel"),c(pI,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel"),c(uI,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel"),c(_I,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(bI,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(vI,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel"),c(FI,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(TI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(MI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(EI,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel"),c(CI,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel"),c(wI,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel"),c(AI,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel"),c(yI,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel"),c(LI,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel"),c(xI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c($I,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(kI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(SI,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel"),c(RI,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(PI,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(BI,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel"),c(II,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel"),c(qI,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel"),c(NI,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(jI,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel"),c(DI,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel"),c(GI,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel"),c(OI,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel"),c(VI,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel"),c(XI,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel"),c(zI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel"),c(WI,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel"),c(QI,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel"),c(HI,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model"),c(UI,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(JI,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel"),c(YI,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel"),c(KI,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel"),c(ZI,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(eq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(oq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(rq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(tq,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel"),c(aq,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel"),c(nq,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel"),c(sq,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel"),c(lq,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model"),c(iq,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel"),c(dq,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cq,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel"),c(fq,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(mq,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gq,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel"),c(hq,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model"),c(pq,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel"),c(uq,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(_q,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTModel"),c(bq,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel"),c(vq,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel"),c(Fq,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel"),c(Tq,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Mq,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Eq,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Cq,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel"),c(wq,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel"),c(Aq,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel"),c(yq,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel"),c(Lq,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(xq,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel"),c($q,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel"),c(kq,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel"),c(Sq,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel"),c(Rq,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel"),c(Pq,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Bq,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel"),c(Iq,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(qq,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel"),c(Nq,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model"),c(jq,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel"),c(Dq,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Gq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Oq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Vq,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel"),c(Xq,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel"),c(zq,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Wq,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Qq,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel"),c(Hq,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Uq,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Jq,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Yq,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel"),c(Kq,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel"),c(Zq,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel"),c(eN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(oN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(rN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(tN,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel"),c(aN,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel"),c(nN,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hu,"id","transformers.AutoModelForPreTraining"),c(Hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(sN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dN,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining"),c(cN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fN,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining"),c(mN,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(gN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hN,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(pN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(uN,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bN,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining"),c(FN,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TN,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining"),c(MN,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining"),c(EN,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(CN,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(wN,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(AN,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yN,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LN,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(xN,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c($N,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(kN,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(SN,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(RN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(PN,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(BN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(IN,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(NN,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ON,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VN,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(WN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UN,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j_,"id","transformers.AutoModelForCausalLM"),c(j_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(JN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM"),c(ej,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel"),c(oj,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lj,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ij,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(dj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM"),c(cj,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fj,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(mj,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(gj,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM"),c(hj,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM"),c(pj,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(uj,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_j,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTForCausalLM"),c(bj,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(vj,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Fj,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Tj,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Mj,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Ej,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Cj,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(wj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Aj,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yj,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Lj,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(xj,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM"),c($j,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Sj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Rj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Pj,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.AutoModelForMaskedLM"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Bj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ij,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nj,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zj,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Jj,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sD,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lD,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dD,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fD,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(mD,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hD,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_D,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForSeq2SeqLM"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(bD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AD,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel"),c($D,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSequenceClassification"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(qD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DD,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c($G,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForMultipleChoice"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(RG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s2,"id","transformers.AutoModelForNextSentencePrediction"),c(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(fO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(pO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(uO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(_O,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(bO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForTokenClassification"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(vO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(wO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification"),c(yO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(xO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c($O,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(kO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(RO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(PO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(BO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(IO,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(qO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(NO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(jO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(DO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(GO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(OO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(WO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(UO,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(JO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(KO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(eV,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(oV,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z2,"id","transformers.AutoModelForQuestionAnswering"),c(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(rV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(vV,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(GV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(XV,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(zV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForImageClassification"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(UV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification"),c(ZV,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(eX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(oX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification"),c(rX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(tX,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(aX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(nX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(sX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(lX,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(iX,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(dX,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(cX,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(fX,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification"),c(mX,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification"),c(gX,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForVision2Seq"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(hX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForAudioClassification"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(bX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForAudioFrameClassification"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c($X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(PX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(IX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(qX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForCTC"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(NX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(OX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC"),c(VX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC"),c(XX,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC"),c(zX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(WX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(QX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(HX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(UX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(JX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZX,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(ez,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.AutoModelForAudioXVector"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(oz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(nz,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(sz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(lz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(iz,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.AutoModelForMaskedImageModeling"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(dz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(gz,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(hz,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_6,"id","transformers.AutoModelForObjectDetection"),c(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_6,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection"),c(vz,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.AutoModelForImageSegmentation"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.AutoModelForSemanticSegmentation"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Lz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(xz,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c($z,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.AutoModelForInstanceSegmentation"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(kz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.TFAutoModel"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel"),c(jz,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel"),c(Dz,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel"),c(Gz,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Oz,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Vz,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel"),c(Xz,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel"),c(zz,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel"),c(Wz,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel"),c(Qz,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Hz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Uz,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel"),c(Jz,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Yz,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Kz,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Zz,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel"),c(eW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(oW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel"),c(rW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(tW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model"),c(aW,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel"),c(nW,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel"),c(sW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(lW,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel"),c(iW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel"),c(dW,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel"),c(cW,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel"),c(fW,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel"),c(mW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(gW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel"),c(hW,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model"),c(pW,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(uW,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_W,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel"),c(bW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel"),c(vW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel"),c(FW,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(TW,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinModel"),c(MW,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model"),c(EW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel"),c(CW,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(wW,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel"),c(AW,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(yW,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(LW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel"),c(xW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c($W,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.TFAutoModelForPreTraining"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(kW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(BW,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining"),c(qW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(NW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(DW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(GW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(OW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(VW,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zW,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(WW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(QW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HW,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JW,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(YW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KW,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(eQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.TFAutoModelForCausalLM"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(iQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(cQ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(fQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(gQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(hQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(pQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.TFAutoModelForImageClassification"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(MQ,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(EQ,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(CQ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForMaskedLM"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(QQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(ZQ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(oH,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel"),c(tH,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(nH,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForSequenceClassification"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(lH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c($H,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForMultipleChoice"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(IH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(rU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(sU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(lU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForTokenClassification"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(fU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(pU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(uU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(_U,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(bU,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(vU,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(FU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(TU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(MU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(CU,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(wU,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(AU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(LU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c($U,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(kU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(SU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(RU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForQuestionAnswering"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(PU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(WU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(oJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForVision2Seq"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.FlaxAutoModel"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(fJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel"),c(pJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel"),c(uJ,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel"),c(_J,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel"),c(bJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(vJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(FJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(TJ,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel"),c(MJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(EJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel"),c(CJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(wJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(AJ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yJ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel"),c(LJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel"),c(xJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model"),c($J,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(kJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(SJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(RJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model"),c(PJ,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(BJ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel"),c(IJ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(qJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.FlaxAutoModelForCausalLM"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(VJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(XJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(zJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(WJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(QJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(HJ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(UJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForPreTraining"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cY,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForMaskedLM"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(uY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_Y,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(TY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(SY,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(qY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(JY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForTokenClassification"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(dK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(uK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_K,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(FK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($K,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(kK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForImageClassification"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(BK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jK,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForVision2Seq"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(DK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,fA),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,mA),e(We,Ln),e(We,xn),e(xn,gA),e(We,pi),e(We,$n),e($n,hA),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,R$),e(Ae,_i),e(_i,P$),e(Ae,B$),b(f,Eo,_),b(f,wa,_),e(wa,I$),e(wa,bf),e(bf,q$),e(wa,pGe),b(f,aqe,_),b(f,bi,_),e(bi,vf),e(vf,Iee),M(pA,Iee,null),e(bi,uGe),e(bi,qee),e(qee,_Ge),b(f,nqe,_),b(f,kn,_),e(kn,bGe),e(kn,Nee),e(Nee,vGe),e(kn,FGe),e(kn,jee),e(jee,TGe),e(kn,MGe),b(f,sqe,_),M(uA,f,_),b(f,lqe,_),b(f,N$,_),e(N$,EGe),b(f,iqe,_),M(Ff,f,_),b(f,dqe,_),b(f,vi,_),e(vi,Tf),e(Tf,Dee),M(_A,Dee,null),e(vi,CGe),e(vi,Gee),e(Gee,wGe),b(f,cqe,_),b(f,Co,_),M(bA,Co,null),e(Co,AGe),e(Co,vA),e(vA,yGe),e(vA,j$),e(j$,LGe),e(vA,xGe),e(Co,$Ge),e(Co,FA),e(FA,kGe),e(FA,Oee),e(Oee,SGe),e(FA,RGe),e(Co,PGe),e(Co,Er),M(TA,Er,null),e(Er,BGe),e(Er,Vee),e(Vee,IGe),e(Er,qGe),e(Er,Fi),e(Fi,NGe),e(Fi,Xee),e(Xee,jGe),e(Fi,DGe),e(Fi,zee),e(zee,GGe),e(Fi,OGe),e(Er,VGe),e(Er,A),e(A,Mf),e(Mf,Wee),e(Wee,XGe),e(Mf,zGe),e(Mf,D$),e(D$,WGe),e(Mf,QGe),e(A,HGe),e(A,Ef),e(Ef,Qee),e(Qee,UGe),e(Ef,JGe),e(Ef,G$),e(G$,YGe),e(Ef,KGe),e(A,ZGe),e(A,Cf),e(Cf,Hee),e(Hee,eOe),e(Cf,oOe),e(Cf,O$),e(O$,rOe),e(Cf,tOe),e(A,aOe),e(A,wf),e(wf,Uee),e(Uee,nOe),e(wf,sOe),e(wf,V$),e(V$,lOe),e(wf,iOe),e(A,dOe),e(A,Af),e(Af,Jee),e(Jee,cOe),e(Af,fOe),e(Af,X$),e(X$,mOe),e(Af,gOe),e(A,hOe),e(A,yf),e(yf,Yee),e(Yee,pOe),e(yf,uOe),e(yf,z$),e(z$,_Oe),e(yf,bOe),e(A,vOe),e(A,Lf),e(Lf,Kee),e(Kee,FOe),e(Lf,TOe),e(Lf,W$),e(W$,MOe),e(Lf,EOe),e(A,COe),e(A,xf),e(xf,Zee),e(Zee,wOe),e(xf,AOe),e(xf,Q$),e(Q$,yOe),e(xf,LOe),e(A,xOe),e(A,$f),e($f,eoe),e(eoe,$Oe),e($f,kOe),e($f,H$),e(H$,SOe),e($f,ROe),e(A,POe),e(A,kf),e(kf,ooe),e(ooe,BOe),e(kf,IOe),e(kf,U$),e(U$,qOe),e(kf,NOe),e(A,jOe),e(A,Sf),e(Sf,roe),e(roe,DOe),e(Sf,GOe),e(Sf,J$),e(J$,OOe),e(Sf,VOe),e(A,XOe),e(A,Rf),e(Rf,toe),e(toe,zOe),e(Rf,WOe),e(Rf,Y$),e(Y$,QOe),e(Rf,HOe),e(A,UOe),e(A,Pf),e(Pf,aoe),e(aoe,JOe),e(Pf,YOe),e(Pf,K$),e(K$,KOe),e(Pf,ZOe),e(A,eVe),e(A,Bf),e(Bf,noe),e(noe,oVe),e(Bf,rVe),e(Bf,Z$),e(Z$,tVe),e(Bf,aVe),e(A,nVe),e(A,If),e(If,soe),e(soe,sVe),e(If,lVe),e(If,ek),e(ek,iVe),e(If,dVe),e(A,cVe),e(A,qf),e(qf,loe),e(loe,fVe),e(qf,mVe),e(qf,ok),e(ok,gVe),e(qf,hVe),e(A,pVe),e(A,Nf),e(Nf,ioe),e(ioe,uVe),e(Nf,_Ve),e(Nf,rk),e(rk,bVe),e(Nf,vVe),e(A,FVe),e(A,jf),e(jf,doe),e(doe,TVe),e(jf,MVe),e(jf,tk),e(tk,EVe),e(jf,CVe),e(A,wVe),e(A,Df),e(Df,coe),e(coe,AVe),e(Df,yVe),e(Df,ak),e(ak,LVe),e(Df,xVe),e(A,$Ve),e(A,Gf),e(Gf,foe),e(foe,kVe),e(Gf,SVe),e(Gf,nk),e(nk,RVe),e(Gf,PVe),e(A,BVe),e(A,Of),e(Of,moe),e(moe,IVe),e(Of,qVe),e(Of,sk),e(sk,NVe),e(Of,jVe),e(A,DVe),e(A,Vf),e(Vf,goe),e(goe,GVe),e(Vf,OVe),e(Vf,lk),e(lk,VVe),e(Vf,XVe),e(A,zVe),e(A,Xf),e(Xf,hoe),e(hoe,WVe),e(Xf,QVe),e(Xf,ik),e(ik,HVe),e(Xf,UVe),e(A,JVe),e(A,zf),e(zf,poe),e(poe,YVe),e(zf,KVe),e(zf,dk),e(dk,ZVe),e(zf,eXe),e(A,oXe),e(A,Wf),e(Wf,uoe),e(uoe,rXe),e(Wf,tXe),e(Wf,ck),e(ck,aXe),e(Wf,nXe),e(A,sXe),e(A,Qf),e(Qf,_oe),e(_oe,lXe),e(Qf,iXe),e(Qf,fk),e(fk,dXe),e(Qf,cXe),e(A,fXe),e(A,Hf),e(Hf,boe),e(boe,mXe),e(Hf,gXe),e(Hf,mk),e(mk,hXe),e(Hf,pXe),e(A,uXe),e(A,Uf),e(Uf,voe),e(voe,_Xe),e(Uf,bXe),e(Uf,gk),e(gk,vXe),e(Uf,FXe),e(A,TXe),e(A,Jf),e(Jf,Foe),e(Foe,MXe),e(Jf,EXe),e(Jf,hk),e(hk,CXe),e(Jf,wXe),e(A,AXe),e(A,Yf),e(Yf,Toe),e(Toe,yXe),e(Yf,LXe),e(Yf,pk),e(pk,xXe),e(Yf,$Xe),e(A,kXe),e(A,Kf),e(Kf,Moe),e(Moe,SXe),e(Kf,RXe),e(Kf,uk),e(uk,PXe),e(Kf,BXe),e(A,IXe),e(A,Zf),e(Zf,Eoe),e(Eoe,qXe),e(Zf,NXe),e(Zf,_k),e(_k,jXe),e(Zf,DXe),e(A,GXe),e(A,em),e(em,Coe),e(Coe,OXe),e(em,VXe),e(em,bk),e(bk,XXe),e(em,zXe),e(A,WXe),e(A,om),e(om,woe),e(woe,QXe),e(om,HXe),e(om,vk),e(vk,UXe),e(om,JXe),e(A,YXe),e(A,rm),e(rm,Aoe),e(Aoe,KXe),e(rm,ZXe),e(rm,Fk),e(Fk,eze),e(rm,oze),e(A,rze),e(A,tm),e(tm,yoe),e(yoe,tze),e(tm,aze),e(tm,Tk),e(Tk,nze),e(tm,sze),e(A,lze),e(A,am),e(am,Loe),e(Loe,ize),e(am,dze),e(am,Mk),e(Mk,cze),e(am,fze),e(A,mze),e(A,nm),e(nm,xoe),e(xoe,gze),e(nm,hze),e(nm,Ek),e(Ek,pze),e(nm,uze),e(A,_ze),e(A,sm),e(sm,$oe),e($oe,bze),e(sm,vze),e(sm,Ck),e(Ck,Fze),e(sm,Tze),e(A,Mze),e(A,lm),e(lm,koe),e(koe,Eze),e(lm,Cze),e(lm,wk),e(wk,wze),e(lm,Aze),e(A,yze),e(A,im),e(im,Soe),e(Soe,Lze),e(im,xze),e(im,Ak),e(Ak,$ze),e(im,kze),e(A,Sze),e(A,dm),e(dm,Roe),e(Roe,Rze),e(dm,Pze),e(dm,yk),e(yk,Bze),e(dm,Ize),e(A,qze),e(A,cm),e(cm,Poe),e(Poe,Nze),e(cm,jze),e(cm,Lk),e(Lk,Dze),e(cm,Gze),e(A,Oze),e(A,fm),e(fm,Boe),e(Boe,Vze),e(fm,Xze),e(fm,xk),e(xk,zze),e(fm,Wze),e(A,Qze),e(A,mm),e(mm,Ioe),e(Ioe,Hze),e(mm,Uze),e(mm,$k),e($k,Jze),e(mm,Yze),e(A,Kze),e(A,gm),e(gm,qoe),e(qoe,Zze),e(gm,eWe),e(gm,kk),e(kk,oWe),e(gm,rWe),e(A,tWe),e(A,hm),e(hm,Noe),e(Noe,aWe),e(hm,nWe),e(hm,Sk),e(Sk,sWe),e(hm,lWe),e(A,iWe),e(A,pm),e(pm,joe),e(joe,dWe),e(pm,cWe),e(pm,Rk),e(Rk,fWe),e(pm,mWe),e(A,gWe),e(A,um),e(um,Doe),e(Doe,hWe),e(um,pWe),e(um,Pk),e(Pk,uWe),e(um,_We),e(A,bWe),e(A,_m),e(_m,Goe),e(Goe,vWe),e(_m,FWe),e(_m,Bk),e(Bk,TWe),e(_m,MWe),e(A,EWe),e(A,bm),e(bm,Ooe),e(Ooe,CWe),e(bm,wWe),e(bm,Ik),e(Ik,AWe),e(bm,yWe),e(A,LWe),e(A,vm),e(vm,Voe),e(Voe,xWe),e(vm,$We),e(vm,qk),e(qk,kWe),e(vm,SWe),e(A,RWe),e(A,Fm),e(Fm,Xoe),e(Xoe,PWe),e(Fm,BWe),e(Fm,Nk),e(Nk,IWe),e(Fm,qWe),e(A,NWe),e(A,Tm),e(Tm,zoe),e(zoe,jWe),e(Tm,DWe),e(Tm,jk),e(jk,GWe),e(Tm,OWe),e(A,VWe),e(A,Mm),e(Mm,Woe),e(Woe,XWe),e(Mm,zWe),e(Mm,Dk),e(Dk,WWe),e(Mm,QWe),e(A,HWe),e(A,Em),e(Em,Qoe),e(Qoe,UWe),e(Em,JWe),e(Em,Gk),e(Gk,YWe),e(Em,KWe),e(A,ZWe),e(A,Cm),e(Cm,Hoe),e(Hoe,eQe),e(Cm,oQe),e(Cm,Ok),e(Ok,rQe),e(Cm,tQe),e(A,aQe),e(A,wm),e(wm,Uoe),e(Uoe,nQe),e(wm,sQe),e(wm,Vk),e(Vk,lQe),e(wm,iQe),e(A,dQe),e(A,Am),e(Am,Joe),e(Joe,cQe),e(Am,fQe),e(Am,Xk),e(Xk,mQe),e(Am,gQe),e(A,hQe),e(A,ym),e(ym,Yoe),e(Yoe,pQe),e(ym,uQe),e(ym,zk),e(zk,_Qe),e(ym,bQe),e(A,vQe),e(A,Lm),e(Lm,Koe),e(Koe,FQe),e(Lm,TQe),e(Lm,Wk),e(Wk,MQe),e(Lm,EQe),e(A,CQe),e(A,xm),e(xm,Zoe),e(Zoe,wQe),e(xm,AQe),e(xm,Qk),e(Qk,yQe),e(xm,LQe),e(A,xQe),e(A,$m),e($m,ere),e(ere,$Qe),e($m,kQe),e($m,Hk),e(Hk,SQe),e($m,RQe),e(A,PQe),e(A,km),e(km,ore),e(ore,BQe),e(km,IQe),e(km,Uk),e(Uk,qQe),e(km,NQe),e(A,jQe),e(A,Sm),e(Sm,rre),e(rre,DQe),e(Sm,GQe),e(Sm,Jk),e(Jk,OQe),e(Sm,VQe),e(A,XQe),e(A,Rm),e(Rm,tre),e(tre,zQe),e(Rm,WQe),e(Rm,Yk),e(Yk,QQe),e(Rm,HQe),e(A,UQe),e(A,Pm),e(Pm,are),e(are,JQe),e(Pm,YQe),e(Pm,Kk),e(Kk,KQe),e(Pm,ZQe),e(A,eHe),e(A,Bm),e(Bm,nre),e(nre,oHe),e(Bm,rHe),e(Bm,Zk),e(Zk,tHe),e(Bm,aHe),e(A,nHe),e(A,Im),e(Im,sre),e(sre,sHe),e(Im,lHe),e(Im,eS),e(eS,iHe),e(Im,dHe),e(A,cHe),e(A,qm),e(qm,lre),e(lre,fHe),e(qm,mHe),e(qm,oS),e(oS,gHe),e(qm,hHe),e(A,pHe),e(A,Nm),e(Nm,ire),e(ire,uHe),e(Nm,_He),e(Nm,rS),e(rS,bHe),e(Nm,vHe),e(A,FHe),e(A,jm),e(jm,dre),e(dre,THe),e(jm,MHe),e(jm,tS),e(tS,EHe),e(jm,CHe),e(A,wHe),e(A,Dm),e(Dm,cre),e(cre,AHe),e(Dm,yHe),e(Dm,aS),e(aS,LHe),e(Dm,xHe),e(A,$He),e(A,Gm),e(Gm,fre),e(fre,kHe),e(Gm,SHe),e(Gm,nS),e(nS,RHe),e(Gm,PHe),e(A,BHe),e(A,Om),e(Om,mre),e(mre,IHe),e(Om,qHe),e(Om,sS),e(sS,NHe),e(Om,jHe),e(A,DHe),e(A,Vm),e(Vm,gre),e(gre,GHe),e(Vm,OHe),e(Vm,lS),e(lS,VHe),e(Vm,XHe),e(A,zHe),e(A,Xm),e(Xm,hre),e(hre,WHe),e(Xm,QHe),e(Xm,iS),e(iS,HHe),e(Xm,UHe),e(A,JHe),e(A,zm),e(zm,pre),e(pre,YHe),e(zm,KHe),e(zm,dS),e(dS,ZHe),e(zm,eUe),e(A,oUe),e(A,Wm),e(Wm,ure),e(ure,rUe),e(Wm,tUe),e(Wm,cS),e(cS,aUe),e(Wm,nUe),e(A,sUe),e(A,Qm),e(Qm,_re),e(_re,lUe),e(Qm,iUe),e(Qm,fS),e(fS,dUe),e(Qm,cUe),e(A,fUe),e(A,Hm),e(Hm,bre),e(bre,mUe),e(Hm,gUe),e(Hm,mS),e(mS,hUe),e(Hm,pUe),e(A,uUe),e(A,Um),e(Um,vre),e(vre,_Ue),e(Um,bUe),e(Um,gS),e(gS,vUe),e(Um,FUe),e(A,TUe),e(A,Jm),e(Jm,Fre),e(Fre,MUe),e(Jm,EUe),e(Jm,hS),e(hS,CUe),e(Jm,wUe),e(A,AUe),e(A,Ym),e(Ym,Tre),e(Tre,yUe),e(Ym,LUe),e(Ym,pS),e(pS,xUe),e(Ym,$Ue),e(A,kUe),e(A,Km),e(Km,Mre),e(Mre,SUe),e(Km,RUe),e(Km,uS),e(uS,PUe),e(Km,BUe),e(A,IUe),e(A,Zm),e(Zm,Ere),e(Ere,qUe),e(Zm,NUe),e(Zm,_S),e(_S,jUe),e(Zm,DUe),e(A,GUe),e(A,eg),e(eg,Cre),e(Cre,OUe),e(eg,VUe),e(eg,bS),e(bS,XUe),e(eg,zUe),e(A,WUe),e(A,og),e(og,wre),e(wre,QUe),e(og,HUe),e(og,vS),e(vS,UUe),e(og,JUe),e(A,YUe),e(A,rg),e(rg,Are),e(Are,KUe),e(rg,ZUe),e(rg,FS),e(FS,eJe),e(rg,oJe),e(A,rJe),e(A,tg),e(tg,yre),e(yre,tJe),e(tg,aJe),e(tg,TS),e(TS,nJe),e(tg,sJe),e(A,lJe),e(A,ag),e(ag,Lre),e(Lre,iJe),e(ag,dJe),e(ag,MS),e(MS,cJe),e(ag,fJe),e(A,mJe),e(A,ng),e(ng,xre),e(xre,gJe),e(ng,hJe),e(ng,ES),e(ES,pJe),e(ng,uJe),e(A,_Je),e(A,sg),e(sg,$re),e($re,bJe),e(sg,vJe),e(sg,CS),e(CS,FJe),e(sg,TJe),e(A,MJe),e(A,lg),e(lg,kre),e(kre,EJe),e(lg,CJe),e(lg,wS),e(wS,wJe),e(lg,AJe),e(A,yJe),e(A,ig),e(ig,Sre),e(Sre,LJe),e(ig,xJe),e(ig,AS),e(AS,$Je),e(ig,kJe),e(A,SJe),e(A,dg),e(dg,Rre),e(Rre,RJe),e(dg,PJe),e(dg,yS),e(yS,BJe),e(dg,IJe),e(A,qJe),e(A,cg),e(cg,Pre),e(Pre,NJe),e(cg,jJe),e(cg,LS),e(LS,DJe),e(cg,GJe),e(A,OJe),e(A,fg),e(fg,Bre),e(Bre,VJe),e(fg,XJe),e(fg,xS),e(xS,zJe),e(fg,WJe),e(A,QJe),e(A,mg),e(mg,Ire),e(Ire,HJe),e(mg,UJe),e(mg,$S),e($S,JJe),e(mg,YJe),e(A,KJe),e(A,gg),e(gg,qre),e(qre,ZJe),e(gg,eYe),e(gg,kS),e(kS,oYe),e(gg,rYe),e(A,tYe),e(A,hg),e(hg,Nre),e(Nre,aYe),e(hg,nYe),e(hg,SS),e(SS,sYe),e(hg,lYe),e(A,iYe),e(A,pg),e(pg,jre),e(jre,dYe),e(pg,cYe),e(pg,RS),e(RS,fYe),e(pg,mYe),e(A,gYe),e(A,ug),e(ug,Dre),e(Dre,hYe),e(ug,pYe),e(ug,PS),e(PS,uYe),e(ug,_Ye),e(A,bYe),e(A,_g),e(_g,Gre),e(Gre,vYe),e(_g,FYe),e(_g,BS),e(BS,TYe),e(_g,MYe),e(A,EYe),e(A,bg),e(bg,Ore),e(Ore,CYe),e(bg,wYe),e(bg,IS),e(IS,AYe),e(bg,yYe),e(A,LYe),e(A,vg),e(vg,Vre),e(Vre,xYe),e(vg,$Ye),e(vg,qS),e(qS,kYe),e(vg,SYe),e(Er,RYe),M(Fg,Er,null),e(Co,PYe),e(Co,Tg),M(MA,Tg,null),e(Tg,BYe),e(Tg,Xre),e(Xre,IYe),b(f,fqe,_),b(f,Ti,_),e(Ti,Mg),e(Mg,zre),M(EA,zre,null),e(Ti,qYe),e(Ti,Wre),e(Wre,NYe),b(f,mqe,_),b(f,wo,_),M(CA,wo,null),e(wo,jYe),e(wo,wA),e(wA,DYe),e(wA,NS),e(NS,GYe),e(wA,OYe),e(wo,VYe),e(wo,AA),e(AA,XYe),e(AA,Qre),e(Qre,zYe),e(AA,WYe),e(wo,QYe),e(wo,Cr),M(yA,Cr,null),e(Cr,HYe),e(Cr,Hre),e(Hre,UYe),e(Cr,JYe),e(Cr,Aa),e(Aa,YYe),e(Aa,Ure),e(Ure,KYe),e(Aa,ZYe),e(Aa,Jre),e(Jre,eKe),e(Aa,oKe),e(Aa,Yre),e(Yre,rKe),e(Aa,tKe),e(Cr,aKe),e(Cr,k),e(k,Sn),e(Sn,Kre),e(Kre,nKe),e(Sn,sKe),e(Sn,jS),e(jS,lKe),e(Sn,iKe),e(Sn,DS),e(DS,dKe),e(Sn,cKe),e(k,fKe),e(k,Rn),e(Rn,Zre),e(Zre,mKe),e(Rn,gKe),e(Rn,GS),e(GS,hKe),e(Rn,pKe),e(Rn,OS),e(OS,uKe),e(Rn,_Ke),e(k,bKe),e(k,Pn),e(Pn,ete),e(ete,vKe),e(Pn,FKe),e(Pn,VS),e(VS,TKe),e(Pn,MKe),e(Pn,XS),e(XS,EKe),e(Pn,CKe),e(k,wKe),e(k,Eg),e(Eg,ote),e(ote,AKe),e(Eg,yKe),e(Eg,zS),e(zS,LKe),e(Eg,xKe),e(k,$Ke),e(k,Bn),e(Bn,rte),e(rte,kKe),e(Bn,SKe),e(Bn,WS),e(WS,RKe),e(Bn,PKe),e(Bn,QS),e(QS,BKe),e(Bn,IKe),e(k,qKe),e(k,Cg),e(Cg,tte),e(tte,NKe),e(Cg,jKe),e(Cg,HS),e(HS,DKe),e(Cg,GKe),e(k,OKe),e(k,wg),e(wg,ate),e(ate,VKe),e(wg,XKe),e(wg,US),e(US,zKe),e(wg,WKe),e(k,QKe),e(k,Ag),e(Ag,nte),e(nte,HKe),e(Ag,UKe),e(Ag,JS),e(JS,JKe),e(Ag,YKe),e(k,KKe),e(k,In),e(In,ste),e(ste,ZKe),e(In,eZe),e(In,YS),e(YS,oZe),e(In,rZe),e(In,KS),e(KS,tZe),e(In,aZe),e(k,nZe),e(k,qn),e(qn,lte),e(lte,sZe),e(qn,lZe),e(qn,ZS),e(ZS,iZe),e(qn,dZe),e(qn,eR),e(eR,cZe),e(qn,fZe),e(k,mZe),e(k,Nn),e(Nn,ite),e(ite,gZe),e(Nn,hZe),e(Nn,oR),e(oR,pZe),e(Nn,uZe),e(Nn,rR),e(rR,_Ze),e(Nn,bZe),e(k,vZe),e(k,yg),e(yg,dte),e(dte,FZe),e(yg,TZe),e(yg,tR),e(tR,MZe),e(yg,EZe),e(k,CZe),e(k,Lg),e(Lg,cte),e(cte,wZe),e(Lg,AZe),e(Lg,aR),e(aR,yZe),e(Lg,LZe),e(k,xZe),e(k,jn),e(jn,fte),e(fte,$Ze),e(jn,kZe),e(jn,nR),e(nR,SZe),e(jn,RZe),e(jn,sR),e(sR,PZe),e(jn,BZe),e(k,IZe),e(k,xg),e(xg,mte),e(mte,qZe),e(xg,NZe),e(xg,lR),e(lR,jZe),e(xg,DZe),e(k,GZe),e(k,Dn),e(Dn,gte),e(gte,OZe),e(Dn,VZe),e(Dn,iR),e(iR,XZe),e(Dn,zZe),e(Dn,dR),e(dR,WZe),e(Dn,QZe),e(k,HZe),e(k,Gn),e(Gn,hte),e(hte,UZe),e(Gn,JZe),e(Gn,cR),e(cR,YZe),e(Gn,KZe),e(Gn,fR),e(fR,ZZe),e(Gn,eeo),e(k,oeo),e(k,On),e(On,pte),e(pte,reo),e(On,teo),e(On,mR),e(mR,aeo),e(On,neo),e(On,gR),e(gR,seo),e(On,leo),e(k,ieo),e(k,$g),e($g,ute),e(ute,deo),e($g,ceo),e($g,hR),e(hR,feo),e($g,meo),e(k,geo),e(k,Vn),e(Vn,_te),e(_te,heo),e(Vn,peo),e(Vn,pR),e(pR,ueo),e(Vn,_eo),e(Vn,uR),e(uR,beo),e(Vn,veo),e(k,Feo),e(k,Xn),e(Xn,bte),e(bte,Teo),e(Xn,Meo),e(Xn,_R),e(_R,Eeo),e(Xn,Ceo),e(Xn,bR),e(bR,weo),e(Xn,Aeo),e(k,yeo),e(k,zn),e(zn,vte),e(vte,Leo),e(zn,xeo),e(zn,vR),e(vR,$eo),e(zn,keo),e(zn,FR),e(FR,Seo),e(zn,Reo),e(k,Peo),e(k,Wn),e(Wn,Fte),e(Fte,Beo),e(Wn,Ieo),e(Wn,TR),e(TR,qeo),e(Wn,Neo),e(Wn,MR),e(MR,jeo),e(Wn,Deo),e(k,Geo),e(k,Qn),e(Qn,Tte),e(Tte,Oeo),e(Qn,Veo),e(Qn,ER),e(ER,Xeo),e(Qn,zeo),e(Qn,CR),e(CR,Weo),e(Qn,Qeo),e(k,Heo),e(k,Hn),e(Hn,Mte),e(Mte,Ueo),e(Hn,Jeo),e(Hn,wR),e(wR,Yeo),e(Hn,Keo),e(Hn,AR),e(AR,Zeo),e(Hn,eoo),e(k,ooo),e(k,kg),e(kg,Ete),e(Ete,roo),e(kg,too),e(kg,yR),e(yR,aoo),e(kg,noo),e(k,soo),e(k,Un),e(Un,Cte),e(Cte,loo),e(Un,ioo),e(Un,LR),e(LR,doo),e(Un,coo),e(Un,xR),e(xR,foo),e(Un,moo),e(k,goo),e(k,Sg),e(Sg,wte),e(wte,hoo),e(Sg,poo),e(Sg,$R),e($R,uoo),e(Sg,_oo),e(k,boo),e(k,Jn),e(Jn,Ate),e(Ate,voo),e(Jn,Foo),e(Jn,kR),e(kR,Too),e(Jn,Moo),e(Jn,SR),e(SR,Eoo),e(Jn,Coo),e(k,woo),e(k,Yn),e(Yn,yte),e(yte,Aoo),e(Yn,yoo),e(Yn,RR),e(RR,Loo),e(Yn,xoo),e(Yn,PR),e(PR,$oo),e(Yn,koo),e(k,Soo),e(k,Kn),e(Kn,Lte),e(Lte,Roo),e(Kn,Poo),e(Kn,BR),e(BR,Boo),e(Kn,Ioo),e(Kn,IR),e(IR,qoo),e(Kn,Noo),e(k,joo),e(k,Zn),e(Zn,xte),e(xte,Doo),e(Zn,Goo),e(Zn,qR),e(qR,Ooo),e(Zn,Voo),e(Zn,NR),e(NR,Xoo),e(Zn,zoo),e(k,Woo),e(k,es),e(es,$te),e($te,Qoo),e(es,Hoo),e(es,jR),e(jR,Uoo),e(es,Joo),e(es,DR),e(DR,Yoo),e(es,Koo),e(k,Zoo),e(k,Rg),e(Rg,kte),e(kte,ero),e(Rg,oro),e(Rg,GR),e(GR,rro),e(Rg,tro),e(k,aro),e(k,os),e(os,Ste),e(Ste,nro),e(os,sro),e(os,OR),e(OR,lro),e(os,iro),e(os,VR),e(VR,dro),e(os,cro),e(k,fro),e(k,rs),e(rs,Rte),e(Rte,mro),e(rs,gro),e(rs,XR),e(XR,hro),e(rs,pro),e(rs,zR),e(zR,uro),e(rs,_ro),e(k,bro),e(k,ts),e(ts,Pte),e(Pte,vro),e(ts,Fro),e(ts,WR),e(WR,Tro),e(ts,Mro),e(ts,QR),e(QR,Ero),e(ts,Cro),e(k,wro),e(k,as),e(as,Bte),e(Bte,Aro),e(as,yro),e(as,HR),e(HR,Lro),e(as,xro),e(as,UR),e(UR,$ro),e(as,kro),e(k,Sro),e(k,ns),e(ns,Ite),e(Ite,Rro),e(ns,Pro),e(ns,JR),e(JR,Bro),e(ns,Iro),e(ns,YR),e(YR,qro),e(ns,Nro),e(k,jro),e(k,ss),e(ss,qte),e(qte,Dro),e(ss,Gro),e(ss,KR),e(KR,Oro),e(ss,Vro),e(ss,ZR),e(ZR,Xro),e(ss,zro),e(k,Wro),e(k,ls),e(ls,Nte),e(Nte,Qro),e(ls,Hro),e(ls,eP),e(eP,Uro),e(ls,Jro),e(ls,oP),e(oP,Yro),e(ls,Kro),e(k,Zro),e(k,Pg),e(Pg,jte),e(jte,eto),e(Pg,oto),e(Pg,rP),e(rP,rto),e(Pg,tto),e(k,ato),e(k,is),e(is,Dte),e(Dte,nto),e(is,sto),e(is,tP),e(tP,lto),e(is,ito),e(is,aP),e(aP,dto),e(is,cto),e(k,fto),e(k,Bg),e(Bg,Gte),e(Gte,mto),e(Bg,gto),e(Bg,nP),e(nP,hto),e(Bg,pto),e(k,uto),e(k,Ig),e(Ig,Ote),e(Ote,_to),e(Ig,bto),e(Ig,sP),e(sP,vto),e(Ig,Fto),e(k,Tto),e(k,ds),e(ds,Vte),e(Vte,Mto),e(ds,Eto),e(ds,lP),e(lP,Cto),e(ds,wto),e(ds,iP),e(iP,Ato),e(ds,yto),e(k,Lto),e(k,cs),e(cs,Xte),e(Xte,xto),e(cs,$to),e(cs,dP),e(dP,kto),e(cs,Sto),e(cs,cP),e(cP,Rto),e(cs,Pto),e(k,Bto),e(k,fs),e(fs,zte),e(zte,Ito),e(fs,qto),e(fs,fP),e(fP,Nto),e(fs,jto),e(fs,mP),e(mP,Dto),e(fs,Gto),e(k,Oto),e(k,qg),e(qg,Wte),e(Wte,Vto),e(qg,Xto),e(qg,gP),e(gP,zto),e(qg,Wto),e(k,Qto),e(k,ms),e(ms,Qte),e(Qte,Hto),e(ms,Uto),e(ms,hP),e(hP,Jto),e(ms,Yto),e(ms,pP),e(pP,Kto),e(ms,Zto),e(k,eao),e(k,gs),e(gs,Hte),e(Hte,oao),e(gs,rao),e(gs,uP),e(uP,tao),e(gs,aao),e(gs,_P),e(_P,nao),e(gs,sao),e(k,lao),e(k,hs),e(hs,Ute),e(Ute,iao),e(hs,dao),e(hs,bP),e(bP,cao),e(hs,fao),e(hs,vP),e(vP,mao),e(hs,gao),e(k,hao),e(k,ps),e(ps,Jte),e(Jte,pao),e(ps,uao),e(ps,FP),e(FP,_ao),e(ps,bao),e(ps,TP),e(TP,vao),e(ps,Fao),e(k,Tao),e(k,us),e(us,Yte),e(Yte,Mao),e(us,Eao),e(us,MP),e(MP,Cao),e(us,wao),e(us,EP),e(EP,Aao),e(us,yao),e(k,Lao),e(k,Ng),e(Ng,Kte),e(Kte,xao),e(Ng,$ao),e(Ng,CP),e(CP,kao),e(Ng,Sao),e(k,Rao),e(k,_s),e(_s,Zte),e(Zte,Pao),e(_s,Bao),e(_s,wP),e(wP,Iao),e(_s,qao),e(_s,AP),e(AP,Nao),e(_s,jao),e(k,Dao),e(k,jg),e(jg,eae),e(eae,Gao),e(jg,Oao),e(jg,yP),e(yP,Vao),e(jg,Xao),e(k,zao),e(k,Dg),e(Dg,oae),e(oae,Wao),e(Dg,Qao),e(Dg,LP),e(LP,Hao),e(Dg,Uao),e(k,Jao),e(k,Gg),e(Gg,rae),e(rae,Yao),e(Gg,Kao),e(Gg,xP),e(xP,Zao),e(Gg,eno),e(k,ono),e(k,Og),e(Og,tae),e(tae,rno),e(Og,tno),e(Og,$P),e($P,ano),e(Og,nno),e(k,sno),e(k,bs),e(bs,aae),e(aae,lno),e(bs,ino),e(bs,kP),e(kP,dno),e(bs,cno),e(bs,SP),e(SP,fno),e(bs,mno),e(k,gno),e(k,Vg),e(Vg,nae),e(nae,hno),e(Vg,pno),e(Vg,RP),e(RP,uno),e(Vg,_no),e(k,bno),e(k,vs),e(vs,sae),e(sae,vno),e(vs,Fno),e(vs,PP),e(PP,Tno),e(vs,Mno),e(vs,BP),e(BP,Eno),e(vs,Cno),e(k,wno),e(k,Fs),e(Fs,lae),e(lae,Ano),e(Fs,yno),e(Fs,IP),e(IP,Lno),e(Fs,xno),e(Fs,qP),e(qP,$no),e(Fs,kno),e(k,Sno),e(k,Ts),e(Ts,iae),e(iae,Rno),e(Ts,Pno),e(Ts,NP),e(NP,Bno),e(Ts,Ino),e(Ts,jP),e(jP,qno),e(Ts,Nno),e(k,jno),e(k,Ms),e(Ms,dae),e(dae,Dno),e(Ms,Gno),e(Ms,DP),e(DP,Ono),e(Ms,Vno),e(Ms,GP),e(GP,Xno),e(Ms,zno),e(k,Wno),e(k,Es),e(Es,cae),e(cae,Qno),e(Es,Hno),e(Es,OP),e(OP,Uno),e(Es,Jno),e(Es,VP),e(VP,Yno),e(Es,Kno),e(k,Zno),e(k,Cs),e(Cs,fae),e(fae,eso),e(Cs,oso),e(Cs,XP),e(XP,rso),e(Cs,tso),e(Cs,zP),e(zP,aso),e(Cs,nso),e(k,sso),e(k,Xg),e(Xg,mae),e(mae,lso),e(Xg,iso),e(Xg,WP),e(WP,dso),e(Xg,cso),e(k,fso),e(k,zg),e(zg,gae),e(gae,mso),e(zg,gso),e(zg,QP),e(QP,hso),e(zg,pso),e(k,uso),e(k,ws),e(ws,hae),e(hae,_so),e(ws,bso),e(ws,HP),e(HP,vso),e(ws,Fso),e(ws,UP),e(UP,Tso),e(ws,Mso),e(k,Eso),e(k,As),e(As,pae),e(pae,Cso),e(As,wso),e(As,JP),e(JP,Aso),e(As,yso),e(As,YP),e(YP,Lso),e(As,xso),e(k,$so),e(k,ys),e(ys,uae),e(uae,kso),e(ys,Sso),e(ys,KP),e(KP,Rso),e(ys,Pso),e(ys,ZP),e(ZP,Bso),e(ys,Iso),e(k,qso),e(k,Wg),e(Wg,_ae),e(_ae,Nso),e(Wg,jso),e(Wg,eB),e(eB,Dso),e(Wg,Gso),e(k,Oso),e(k,Qg),e(Qg,bae),e(bae,Vso),e(Qg,Xso),e(Qg,oB),e(oB,zso),e(Qg,Wso),e(k,Qso),e(k,Hg),e(Hg,vae),e(vae,Hso),e(Hg,Uso),e(Hg,rB),e(rB,Jso),e(Hg,Yso),e(k,Kso),e(k,Ls),e(Ls,Fae),e(Fae,Zso),e(Ls,elo),e(Ls,tB),e(tB,olo),e(Ls,rlo),e(Ls,aB),e(aB,tlo),e(Ls,alo),e(k,nlo),e(k,Ug),e(Ug,Tae),e(Tae,slo),e(Ug,llo),e(Ug,nB),e(nB,ilo),e(Ug,dlo),e(k,clo),e(k,Jg),e(Jg,Mae),e(Mae,flo),e(Jg,mlo),e(Jg,sB),e(sB,glo),e(Jg,hlo),e(k,plo),e(k,Yg),e(Yg,Eae),e(Eae,ulo),e(Yg,_lo),e(Yg,lB),e(lB,blo),e(Yg,vlo),e(k,Flo),e(k,xs),e(xs,Cae),e(Cae,Tlo),e(xs,Mlo),e(xs,iB),e(iB,Elo),e(xs,Clo),e(xs,dB),e(dB,wlo),e(xs,Alo),e(k,ylo),e(k,Kg),e(Kg,wae),e(wae,Llo),e(Kg,xlo),e(Kg,cB),e(cB,$lo),e(Kg,klo),e(k,Slo),e(k,Zg),e(Zg,Aae),e(Aae,Rlo),e(Zg,Plo),e(Zg,fB),e(fB,Blo),e(Zg,Ilo),e(k,qlo),e(k,$s),e($s,yae),e(yae,Nlo),e($s,jlo),e($s,mB),e(mB,Dlo),e($s,Glo),e($s,gB),e(gB,Olo),e($s,Vlo),e(k,Xlo),e(k,ks),e(ks,Lae),e(Lae,zlo),e(ks,Wlo),e(ks,hB),e(hB,Qlo),e(ks,Hlo),e(ks,pB),e(pB,Ulo),e(ks,Jlo),e(k,Ylo),e(k,Ss),e(Ss,xae),e(xae,Klo),e(Ss,Zlo),e(Ss,uB),e(uB,eio),e(Ss,oio),e(Ss,_B),e(_B,rio),e(Ss,tio),e(k,aio),e(k,Rs),e(Rs,$ae),e($ae,nio),e(Rs,sio),e(Rs,bB),e(bB,lio),e(Rs,iio),e(Rs,vB),e(vB,dio),e(Rs,cio),e(Cr,fio),M(eh,Cr,null),e(wo,mio),e(wo,oh),M(LA,oh,null),e(oh,gio),e(oh,kae),e(kae,hio),b(f,gqe,_),b(f,Mi,_),e(Mi,rh),e(rh,Sae),M(xA,Sae,null),e(Mi,pio),e(Mi,Rae),e(Rae,uio),b(f,hqe,_),b(f,Ao,_),M($A,Ao,null),e(Ao,_io),e(Ao,kA),e(kA,bio),e(kA,FB),e(FB,vio),e(kA,Fio),e(Ao,Tio),e(Ao,SA),e(SA,Mio),e(SA,Pae),e(Pae,Eio),e(SA,Cio),e(Ao,wio),e(Ao,He),M(RA,He,null),e(He,Aio),e(He,Bae),e(Bae,yio),e(He,Lio),e(He,ya),e(ya,xio),e(ya,Iae),e(Iae,$io),e(ya,kio),e(ya,qae),e(qae,Sio),e(ya,Rio),e(ya,Nae),e(Nae,Pio),e(ya,Bio),e(He,Iio),e(He,Z),e(Z,th),e(th,jae),e(jae,qio),e(th,Nio),e(th,TB),e(TB,jio),e(th,Dio),e(Z,Gio),e(Z,ah),e(ah,Dae),e(Dae,Oio),e(ah,Vio),e(ah,MB),e(MB,Xio),e(ah,zio),e(Z,Wio),e(Z,nh),e(nh,Gae),e(Gae,Qio),e(nh,Hio),e(nh,EB),e(EB,Uio),e(nh,Jio),e(Z,Yio),e(Z,sh),e(sh,Oae),e(Oae,Kio),e(sh,Zio),e(sh,CB),e(CB,edo),e(sh,odo),e(Z,rdo),e(Z,lh),e(lh,Vae),e(Vae,tdo),e(lh,ado),e(lh,wB),e(wB,ndo),e(lh,sdo),e(Z,ldo),e(Z,ih),e(ih,Xae),e(Xae,ido),e(ih,ddo),e(ih,AB),e(AB,cdo),e(ih,fdo),e(Z,mdo),e(Z,dh),e(dh,zae),e(zae,gdo),e(dh,hdo),e(dh,yB),e(yB,pdo),e(dh,udo),e(Z,_do),e(Z,ch),e(ch,Wae),e(Wae,bdo),e(ch,vdo),e(ch,LB),e(LB,Fdo),e(ch,Tdo),e(Z,Mdo),e(Z,fh),e(fh,Qae),e(Qae,Edo),e(fh,Cdo),e(fh,xB),e(xB,wdo),e(fh,Ado),e(Z,ydo),e(Z,mh),e(mh,Hae),e(Hae,Ldo),e(mh,xdo),e(mh,$B),e($B,$do),e(mh,kdo),e(Z,Sdo),e(Z,gh),e(gh,Uae),e(Uae,Rdo),e(gh,Pdo),e(gh,kB),e(kB,Bdo),e(gh,Ido),e(Z,qdo),e(Z,hh),e(hh,Jae),e(Jae,Ndo),e(hh,jdo),e(hh,SB),e(SB,Ddo),e(hh,Gdo),e(Z,Odo),e(Z,ph),e(ph,Yae),e(Yae,Vdo),e(ph,Xdo),e(ph,RB),e(RB,zdo),e(ph,Wdo),e(Z,Qdo),e(Z,uh),e(uh,Kae),e(Kae,Hdo),e(uh,Udo),e(uh,PB),e(PB,Jdo),e(uh,Ydo),e(Z,Kdo),e(Z,_h),e(_h,Zae),e(Zae,Zdo),e(_h,eco),e(_h,BB),e(BB,oco),e(_h,rco),e(Z,tco),e(Z,bh),e(bh,ene),e(ene,aco),e(bh,nco),e(bh,IB),e(IB,sco),e(bh,lco),e(Z,ico),e(Z,vh),e(vh,one),e(one,dco),e(vh,cco),e(vh,qB),e(qB,fco),e(vh,mco),e(Z,gco),e(Z,Fh),e(Fh,rne),e(rne,hco),e(Fh,pco),e(Fh,NB),e(NB,uco),e(Fh,_co),e(Z,bco),e(Z,Th),e(Th,tne),e(tne,vco),e(Th,Fco),e(Th,jB),e(jB,Tco),e(Th,Mco),e(Z,Eco),e(Z,Mh),e(Mh,ane),e(ane,Cco),e(Mh,wco),e(Mh,DB),e(DB,Aco),e(Mh,yco),e(Z,Lco),e(Z,Eh),e(Eh,nne),e(nne,xco),e(Eh,$co),e(Eh,GB),e(GB,kco),e(Eh,Sco),e(Z,Rco),e(Z,Ch),e(Ch,sne),e(sne,Pco),e(Ch,Bco),e(Ch,OB),e(OB,Ico),e(Ch,qco),e(Z,Nco),e(Z,wh),e(wh,lne),e(lne,jco),e(wh,Dco),e(wh,VB),e(VB,Gco),e(wh,Oco),e(Z,Vco),e(Z,Ah),e(Ah,ine),e(ine,Xco),e(Ah,zco),e(Ah,XB),e(XB,Wco),e(Ah,Qco),e(Z,Hco),e(Z,yh),e(yh,dne),e(dne,Uco),e(yh,Jco),e(yh,zB),e(zB,Yco),e(yh,Kco),e(Z,Zco),e(Z,Lh),e(Lh,cne),e(cne,efo),e(Lh,ofo),e(Lh,WB),e(WB,rfo),e(Lh,tfo),e(Z,afo),e(Z,xh),e(xh,fne),e(fne,nfo),e(xh,sfo),e(xh,QB),e(QB,lfo),e(xh,ifo),e(He,dfo),M($h,He,null),e(He,cfo),M(kh,He,null),e(Ao,ffo),e(Ao,Sh),M(PA,Sh,null),e(Sh,mfo),e(Sh,mne),e(mne,gfo),b(f,pqe,_),b(f,Ei,_),e(Ei,Rh),e(Rh,gne),M(BA,gne,null),e(Ei,hfo),e(Ei,hne),e(hne,pfo),b(f,uqe,_),b(f,yo,_),M(IA,yo,null),e(yo,ufo),e(yo,qA),e(qA,_fo),e(qA,HB),e(HB,bfo),e(qA,vfo),e(yo,Ffo),e(yo,NA),e(NA,Tfo),e(NA,pne),e(pne,Mfo),e(NA,Efo),e(yo,Cfo),e(yo,Ue),M(jA,Ue,null),e(Ue,wfo),e(Ue,une),e(une,Afo),e(Ue,yfo),e(Ue,Ci),e(Ci,Lfo),e(Ci,_ne),e(_ne,xfo),e(Ci,$fo),e(Ci,bne),e(bne,kfo),e(Ci,Sfo),e(Ue,Rfo),e(Ue,he),e(he,Ph),e(Ph,vne),e(vne,Pfo),e(Ph,Bfo),e(Ph,UB),e(UB,Ifo),e(Ph,qfo),e(he,Nfo),e(he,Bh),e(Bh,Fne),e(Fne,jfo),e(Bh,Dfo),e(Bh,Tne),e(Tne,Gfo),e(Bh,Ofo),e(he,Vfo),e(he,Ih),e(Ih,Mne),e(Mne,Xfo),e(Ih,zfo),e(Ih,JB),e(JB,Wfo),e(Ih,Qfo),e(he,Hfo),e(he,qh),e(qh,Ene),e(Ene,Ufo),e(qh,Jfo),e(qh,YB),e(YB,Yfo),e(qh,Kfo),e(he,Zfo),e(he,Nh),e(Nh,Cne),e(Cne,emo),e(Nh,omo),e(Nh,KB),e(KB,rmo),e(Nh,tmo),e(he,amo),e(he,jh),e(jh,wne),e(wne,nmo),e(jh,smo),e(jh,ZB),e(ZB,lmo),e(jh,imo),e(he,dmo),e(he,Dh),e(Dh,Ane),e(Ane,cmo),e(Dh,fmo),e(Dh,eI),e(eI,mmo),e(Dh,gmo),e(he,hmo),e(he,Gh),e(Gh,yne),e(yne,pmo),e(Gh,umo),e(Gh,oI),e(oI,_mo),e(Gh,bmo),e(he,vmo),e(he,Oh),e(Oh,Lne),e(Lne,Fmo),e(Oh,Tmo),e(Oh,rI),e(rI,Mmo),e(Oh,Emo),e(he,Cmo),e(he,Vh),e(Vh,xne),e(xne,wmo),e(Vh,Amo),e(Vh,tI),e(tI,ymo),e(Vh,Lmo),e(he,xmo),e(he,Xh),e(Xh,$ne),e($ne,$mo),e(Xh,kmo),e(Xh,aI),e(aI,Smo),e(Xh,Rmo),e(he,Pmo),e(he,zh),e(zh,kne),e(kne,Bmo),e(zh,Imo),e(zh,nI),e(nI,qmo),e(zh,Nmo),e(he,jmo),e(he,Wh),e(Wh,Sne),e(Sne,Dmo),e(Wh,Gmo),e(Wh,sI),e(sI,Omo),e(Wh,Vmo),e(he,Xmo),e(he,Qh),e(Qh,Rne),e(Rne,zmo),e(Qh,Wmo),e(Qh,lI),e(lI,Qmo),e(Qh,Hmo),e(he,Umo),e(he,Hh),e(Hh,Pne),e(Pne,Jmo),e(Hh,Ymo),e(Hh,iI),e(iI,Kmo),e(Hh,Zmo),e(he,ego),e(he,Uh),e(Uh,Bne),e(Bne,ogo),e(Uh,rgo),e(Uh,dI),e(dI,tgo),e(Uh,ago),e(he,ngo),e(he,Jh),e(Jh,Ine),e(Ine,sgo),e(Jh,lgo),e(Jh,cI),e(cI,igo),e(Jh,dgo),e(Ue,cgo),M(Yh,Ue,null),e(Ue,fgo),M(Kh,Ue,null),e(yo,mgo),e(yo,Zh),M(DA,Zh,null),e(Zh,ggo),e(Zh,qne),e(qne,hgo),b(f,_qe,_),b(f,wi,_),e(wi,ep),e(ep,Nne),M(GA,Nne,null),e(wi,pgo),e(wi,jne),e(jne,ugo),b(f,bqe,_),b(f,Lo,_),M(OA,Lo,null),e(Lo,_go),e(Lo,Ai),e(Ai,bgo),e(Ai,fI),e(fI,vgo),e(Ai,Fgo),e(Ai,mI),e(mI,Tgo),e(Ai,Mgo),e(Lo,Ego),e(Lo,VA),e(VA,Cgo),e(VA,Dne),e(Dne,wgo),e(VA,Ago),e(Lo,ygo),e(Lo,tt),M(XA,tt,null),e(tt,Lgo),e(tt,Gne),e(Gne,xgo),e(tt,$go),e(tt,yi),e(yi,kgo),e(yi,One),e(One,Sgo),e(yi,Rgo),e(yi,gI),e(gI,Pgo),e(yi,Bgo),e(tt,Igo),M(op,tt,null),e(Lo,qgo),e(Lo,Je),M(zA,Je,null),e(Je,Ngo),e(Je,Vne),e(Vne,jgo),e(Je,Dgo),e(Je,La),e(La,Ggo),e(La,Xne),e(Xne,Ogo),e(La,Vgo),e(La,zne),e(zne,Xgo),e(La,zgo),e(La,Wne),e(Wne,Wgo),e(La,Qgo),e(Je,Hgo),e(Je,x),e(x,rp),e(rp,Qne),e(Qne,Ugo),e(rp,Jgo),e(rp,hI),e(hI,Ygo),e(rp,Kgo),e(x,Zgo),e(x,tp),e(tp,Hne),e(Hne,eho),e(tp,oho),e(tp,pI),e(pI,rho),e(tp,tho),e(x,aho),e(x,ap),e(ap,Une),e(Une,nho),e(ap,sho),e(ap,uI),e(uI,lho),e(ap,iho),e(x,dho),e(x,np),e(np,Jne),e(Jne,cho),e(np,fho),e(np,_I),e(_I,mho),e(np,gho),e(x,hho),e(x,sp),e(sp,Yne),e(Yne,pho),e(sp,uho),e(sp,bI),e(bI,_ho),e(sp,bho),e(x,vho),e(x,lp),e(lp,Kne),e(Kne,Fho),e(lp,Tho),e(lp,vI),e(vI,Mho),e(lp,Eho),e(x,Cho),e(x,ip),e(ip,Zne),e(Zne,who),e(ip,Aho),e(ip,FI),e(FI,yho),e(ip,Lho),e(x,xho),e(x,dp),e(dp,ese),e(ese,$ho),e(dp,kho),e(dp,TI),e(TI,Sho),e(dp,Rho),e(x,Pho),e(x,cp),e(cp,ose),e(ose,Bho),e(cp,Iho),e(cp,MI),e(MI,qho),e(cp,Nho),e(x,jho),e(x,fp),e(fp,rse),e(rse,Dho),e(fp,Gho),e(fp,EI),e(EI,Oho),e(fp,Vho),e(x,Xho),e(x,mp),e(mp,tse),e(tse,zho),e(mp,Who),e(mp,CI),e(CI,Qho),e(mp,Hho),e(x,Uho),e(x,gp),e(gp,ase),e(ase,Jho),e(gp,Yho),e(gp,wI),e(wI,Kho),e(gp,Zho),e(x,epo),e(x,hp),e(hp,nse),e(nse,opo),e(hp,rpo),e(hp,AI),e(AI,tpo),e(hp,apo),e(x,npo),e(x,pp),e(pp,sse),e(sse,spo),e(pp,lpo),e(pp,yI),e(yI,ipo),e(pp,dpo),e(x,cpo),e(x,up),e(up,lse),e(lse,fpo),e(up,mpo),e(up,LI),e(LI,gpo),e(up,hpo),e(x,ppo),e(x,_p),e(_p,ise),e(ise,upo),e(_p,_po),e(_p,xI),e(xI,bpo),e(_p,vpo),e(x,Fpo),e(x,bp),e(bp,dse),e(dse,Tpo),e(bp,Mpo),e(bp,$I),e($I,Epo),e(bp,Cpo),e(x,wpo),e(x,vp),e(vp,cse),e(cse,Apo),e(vp,ypo),e(vp,kI),e(kI,Lpo),e(vp,xpo),e(x,$po),e(x,Fp),e(Fp,fse),e(fse,kpo),e(Fp,Spo),e(Fp,SI),e(SI,Rpo),e(Fp,Ppo),e(x,Bpo),e(x,Tp),e(Tp,mse),e(mse,Ipo),e(Tp,qpo),e(Tp,RI),e(RI,Npo),e(Tp,jpo),e(x,Dpo),e(x,Mp),e(Mp,gse),e(gse,Gpo),e(Mp,Opo),e(Mp,PI),e(PI,Vpo),e(Mp,Xpo),e(x,zpo),e(x,Ep),e(Ep,hse),e(hse,Wpo),e(Ep,Qpo),e(Ep,BI),e(BI,Hpo),e(Ep,Upo),e(x,Jpo),e(x,Cp),e(Cp,pse),e(pse,Ypo),e(Cp,Kpo),e(Cp,II),e(II,Zpo),e(Cp,euo),e(x,ouo),e(x,wp),e(wp,use),e(use,ruo),e(wp,tuo),e(wp,qI),e(qI,auo),e(wp,nuo),e(x,suo),e(x,Ap),e(Ap,_se),e(_se,luo),e(Ap,iuo),e(Ap,NI),e(NI,duo),e(Ap,cuo),e(x,fuo),e(x,yp),e(yp,bse),e(bse,muo),e(yp,guo),e(yp,jI),e(jI,huo),e(yp,puo),e(x,uuo),e(x,Lp),e(Lp,vse),e(vse,_uo),e(Lp,buo),e(Lp,DI),e(DI,vuo),e(Lp,Fuo),e(x,Tuo),e(x,xp),e(xp,Fse),e(Fse,Muo),e(xp,Euo),e(xp,GI),e(GI,Cuo),e(xp,wuo),e(x,Auo),e(x,$p),e($p,Tse),e(Tse,yuo),e($p,Luo),e($p,OI),e(OI,xuo),e($p,$uo),e(x,kuo),e(x,kp),e(kp,Mse),e(Mse,Suo),e(kp,Ruo),e(kp,VI),e(VI,Puo),e(kp,Buo),e(x,Iuo),e(x,Sp),e(Sp,Ese),e(Ese,quo),e(Sp,Nuo),e(Sp,XI),e(XI,juo),e(Sp,Duo),e(x,Guo),e(x,Ps),e(Ps,Cse),e(Cse,Ouo),e(Ps,Vuo),e(Ps,zI),e(zI,Xuo),e(Ps,zuo),e(Ps,WI),e(WI,Wuo),e(Ps,Quo),e(x,Huo),e(x,Rp),e(Rp,wse),e(wse,Uuo),e(Rp,Juo),e(Rp,QI),e(QI,Yuo),e(Rp,Kuo),e(x,Zuo),e(x,Pp),e(Pp,Ase),e(Ase,e_o),e(Pp,o_o),e(Pp,HI),e(HI,r_o),e(Pp,t_o),e(x,a_o),e(x,Bp),e(Bp,yse),e(yse,n_o),e(Bp,s_o),e(Bp,UI),e(UI,l_o),e(Bp,i_o),e(x,d_o),e(x,Ip),e(Ip,Lse),e(Lse,c_o),e(Ip,f_o),e(Ip,JI),e(JI,m_o),e(Ip,g_o),e(x,h_o),e(x,qp),e(qp,xse),e(xse,p_o),e(qp,u_o),e(qp,YI),e(YI,__o),e(qp,b_o),e(x,v_o),e(x,Np),e(Np,$se),e($se,F_o),e(Np,T_o),e(Np,KI),e(KI,M_o),e(Np,E_o),e(x,C_o),e(x,jp),e(jp,kse),e(kse,w_o),e(jp,A_o),e(jp,ZI),e(ZI,y_o),e(jp,L_o),e(x,x_o),e(x,Dp),e(Dp,Sse),e(Sse,$_o),e(Dp,k_o),e(Dp,eq),e(eq,S_o),e(Dp,R_o),e(x,P_o),e(x,Gp),e(Gp,Rse),e(Rse,B_o),e(Gp,I_o),e(Gp,oq),e(oq,q_o),e(Gp,N_o),e(x,j_o),e(x,Op),e(Op,Pse),e(Pse,D_o),e(Op,G_o),e(Op,rq),e(rq,O_o),e(Op,V_o),e(x,X_o),e(x,Vp),e(Vp,Bse),e(Bse,z_o),e(Vp,W_o),e(Vp,tq),e(tq,Q_o),e(Vp,H_o),e(x,U_o),e(x,Xp),e(Xp,Ise),e(Ise,J_o),e(Xp,Y_o),e(Xp,aq),e(aq,K_o),e(Xp,Z_o),e(x,e0o),e(x,zp),e(zp,qse),e(qse,o0o),e(zp,r0o),e(zp,nq),e(nq,t0o),e(zp,a0o),e(x,n0o),e(x,Wp),e(Wp,Nse),e(Nse,s0o),e(Wp,l0o),e(Wp,sq),e(sq,i0o),e(Wp,d0o),e(x,c0o),e(x,Qp),e(Qp,jse),e(jse,f0o),e(Qp,m0o),e(Qp,lq),e(lq,g0o),e(Qp,h0o),e(x,p0o),e(x,Hp),e(Hp,Dse),e(Dse,u0o),e(Hp,_0o),e(Hp,iq),e(iq,b0o),e(Hp,v0o),e(x,F0o),e(x,Up),e(Up,Gse),e(Gse,T0o),e(Up,M0o),e(Up,dq),e(dq,E0o),e(Up,C0o),e(x,w0o),e(x,Jp),e(Jp,Ose),e(Ose,A0o),e(Jp,y0o),e(Jp,cq),e(cq,L0o),e(Jp,x0o),e(x,$0o),e(x,Yp),e(Yp,Vse),e(Vse,k0o),e(Yp,S0o),e(Yp,fq),e(fq,R0o),e(Yp,P0o),e(x,B0o),e(x,Kp),e(Kp,Xse),e(Xse,I0o),e(Kp,q0o),e(Kp,mq),e(mq,N0o),e(Kp,j0o),e(x,D0o),e(x,Zp),e(Zp,zse),e(zse,G0o),e(Zp,O0o),e(Zp,gq),e(gq,V0o),e(Zp,X0o),e(x,z0o),e(x,eu),e(eu,Wse),e(Wse,W0o),e(eu,Q0o),e(eu,hq),e(hq,H0o),e(eu,U0o),e(x,J0o),e(x,ou),e(ou,Qse),e(Qse,Y0o),e(ou,K0o),e(ou,pq),e(pq,Z0o),e(ou,e1o),e(x,o1o),e(x,ru),e(ru,Hse),e(Hse,r1o),e(ru,t1o),e(ru,uq),e(uq,a1o),e(ru,n1o),e(x,s1o),e(x,tu),e(tu,Use),e(Use,l1o),e(tu,i1o),e(tu,_q),e(_q,d1o),e(tu,c1o),e(x,f1o),e(x,au),e(au,Jse),e(Jse,m1o),e(au,g1o),e(au,bq),e(bq,h1o),e(au,p1o),e(x,u1o),e(x,nu),e(nu,Yse),e(Yse,_1o),e(nu,b1o),e(nu,vq),e(vq,v1o),e(nu,F1o),e(x,T1o),e(x,su),e(su,Kse),e(Kse,M1o),e(su,E1o),e(su,Fq),e(Fq,C1o),e(su,w1o),e(x,A1o),e(x,lu),e(lu,Zse),e(Zse,y1o),e(lu,L1o),e(lu,Tq),e(Tq,x1o),e(lu,$1o),e(x,k1o),e(x,iu),e(iu,ele),e(ele,S1o),e(iu,R1o),e(iu,Mq),e(Mq,P1o),e(iu,B1o),e(x,I1o),e(x,du),e(du,ole),e(ole,q1o),e(du,N1o),e(du,Eq),e(Eq,j1o),e(du,D1o),e(x,G1o),e(x,cu),e(cu,rle),e(rle,O1o),e(cu,V1o),e(cu,Cq),e(Cq,X1o),e(cu,z1o),e(x,W1o),e(x,fu),e(fu,tle),e(tle,Q1o),e(fu,H1o),e(fu,wq),e(wq,U1o),e(fu,J1o),e(x,Y1o),e(x,mu),e(mu,ale),e(ale,K1o),e(mu,Z1o),e(mu,Aq),e(Aq,ebo),e(mu,obo),e(x,rbo),e(x,gu),e(gu,nle),e(nle,tbo),e(gu,abo),e(gu,yq),e(yq,nbo),e(gu,sbo),e(x,lbo),e(x,hu),e(hu,sle),e(sle,ibo),e(hu,dbo),e(hu,Lq),e(Lq,cbo),e(hu,fbo),e(x,mbo),e(x,pu),e(pu,lle),e(lle,gbo),e(pu,hbo),e(pu,xq),e(xq,pbo),e(pu,ubo),e(x,_bo),e(x,uu),e(uu,ile),e(ile,bbo),e(uu,vbo),e(uu,$q),e($q,Fbo),e(uu,Tbo),e(x,Mbo),e(x,_u),e(_u,dle),e(dle,Ebo),e(_u,Cbo),e(_u,kq),e(kq,wbo),e(_u,Abo),e(x,ybo),e(x,bu),e(bu,cle),e(cle,Lbo),e(bu,xbo),e(bu,Sq),e(Sq,$bo),e(bu,kbo),e(x,Sbo),e(x,vu),e(vu,fle),e(fle,Rbo),e(vu,Pbo),e(vu,Rq),e(Rq,Bbo),e(vu,Ibo),e(x,qbo),e(x,Fu),e(Fu,mle),e(mle,Nbo),e(Fu,jbo),e(Fu,Pq),e(Pq,Dbo),e(Fu,Gbo),e(x,Obo),e(x,Tu),e(Tu,gle),e(gle,Vbo),e(Tu,Xbo),e(Tu,Bq),e(Bq,zbo),e(Tu,Wbo),e(x,Qbo),e(x,Mu),e(Mu,hle),e(hle,Hbo),e(Mu,Ubo),e(Mu,Iq),e(Iq,Jbo),e(Mu,Ybo),e(x,Kbo),e(x,Eu),e(Eu,ple),e(ple,Zbo),e(Eu,e2o),e(Eu,qq),e(qq,o2o),e(Eu,r2o),e(x,t2o),e(x,Cu),e(Cu,ule),e(ule,a2o),e(Cu,n2o),e(Cu,Nq),e(Nq,s2o),e(Cu,l2o),e(x,i2o),e(x,wu),e(wu,_le),e(_le,d2o),e(wu,c2o),e(wu,jq),e(jq,f2o),e(wu,m2o),e(x,g2o),e(x,Au),e(Au,ble),e(ble,h2o),e(Au,p2o),e(Au,Dq),e(Dq,u2o),e(Au,_2o),e(x,b2o),e(x,yu),e(yu,vle),e(vle,v2o),e(yu,F2o),e(yu,Gq),e(Gq,T2o),e(yu,M2o),e(x,E2o),e(x,Lu),e(Lu,Fle),e(Fle,C2o),e(Lu,w2o),e(Lu,Oq),e(Oq,A2o),e(Lu,y2o),e(x,L2o),e(x,xu),e(xu,Tle),e(Tle,x2o),e(xu,$2o),e(xu,Vq),e(Vq,k2o),e(xu,S2o),e(x,R2o),e(x,$u),e($u,Mle),e(Mle,P2o),e($u,B2o),e($u,Xq),e(Xq,I2o),e($u,q2o),e(x,N2o),e(x,ku),e(ku,Ele),e(Ele,j2o),e(ku,D2o),e(ku,zq),e(zq,G2o),e(ku,O2o),e(x,V2o),e(x,Su),e(Su,Cle),e(Cle,X2o),e(Su,z2o),e(Su,Wq),e(Wq,W2o),e(Su,Q2o),e(x,H2o),e(x,Ru),e(Ru,wle),e(wle,U2o),e(Ru,J2o),e(Ru,Qq),e(Qq,Y2o),e(Ru,K2o),e(x,Z2o),e(x,Pu),e(Pu,Ale),e(Ale,evo),e(Pu,ovo),e(Pu,Hq),e(Hq,rvo),e(Pu,tvo),e(x,avo),e(x,Bu),e(Bu,yle),e(yle,nvo),e(Bu,svo),e(Bu,Uq),e(Uq,lvo),e(Bu,ivo),e(x,dvo),e(x,Iu),e(Iu,Lle),e(Lle,cvo),e(Iu,fvo),e(Iu,Jq),e(Jq,mvo),e(Iu,gvo),e(x,hvo),e(x,qu),e(qu,xle),e(xle,pvo),e(qu,uvo),e(qu,Yq),e(Yq,_vo),e(qu,bvo),e(x,vvo),e(x,Nu),e(Nu,$le),e($le,Fvo),e(Nu,Tvo),e(Nu,Kq),e(Kq,Mvo),e(Nu,Evo),e(x,Cvo),e(x,ju),e(ju,kle),e(kle,wvo),e(ju,Avo),e(ju,Zq),e(Zq,yvo),e(ju,Lvo),e(x,xvo),e(x,Du),e(Du,Sle),e(Sle,$vo),e(Du,kvo),e(Du,eN),e(eN,Svo),e(Du,Rvo),e(x,Pvo),e(x,Gu),e(Gu,Rle),e(Rle,Bvo),e(Gu,Ivo),e(Gu,oN),e(oN,qvo),e(Gu,Nvo),e(x,jvo),e(x,Ou),e(Ou,Ple),e(Ple,Dvo),e(Ou,Gvo),e(Ou,rN),e(rN,Ovo),e(Ou,Vvo),e(x,Xvo),e(x,Vu),e(Vu,Ble),e(Ble,zvo),e(Vu,Wvo),e(Vu,tN),e(tN,Qvo),e(Vu,Hvo),e(x,Uvo),e(x,Xu),e(Xu,Ile),e(Ile,Jvo),e(Xu,Yvo),e(Xu,aN),e(aN,Kvo),e(Xu,Zvo),e(x,eFo),e(x,zu),e(zu,qle),e(qle,oFo),e(zu,rFo),e(zu,nN),e(nN,tFo),e(zu,aFo),e(Je,nFo),e(Je,Wu),e(Wu,sFo),e(Wu,Nle),e(Nle,lFo),e(Wu,iFo),e(Wu,jle),e(jle,dFo),e(Je,cFo),M(Qu,Je,null),b(f,vqe,_),b(f,Li,_),e(Li,Hu),e(Hu,Dle),M(WA,Dle,null),e(Li,fFo),e(Li,Gle),e(Gle,mFo),b(f,Fqe,_),b(f,xo,_),M(QA,xo,null),e(xo,gFo),e(xo,xi),e(xi,hFo),e(xi,sN),e(sN,pFo),e(xi,uFo),e(xi,lN),e(lN,_Fo),e(xi,bFo),e(xo,vFo),e(xo,HA),e(HA,FFo),e(HA,Ole),e(Ole,TFo),e(HA,MFo),e(xo,EFo),e(xo,at),M(UA,at,null),e(at,CFo),e(at,Vle),e(Vle,wFo),e(at,AFo),e(at,$i),e($i,yFo),e($i,Xle),e(Xle,LFo),e($i,xFo),e($i,iN),e(iN,$Fo),e($i,kFo),e(at,SFo),M(Uu,at,null),e(xo,RFo),e(xo,Ye),M(JA,Ye,null),e(Ye,PFo),e(Ye,zle),e(zle,BFo),e(Ye,IFo),e(Ye,xa),e(xa,qFo),e(xa,Wle),e(Wle,NFo),e(xa,jFo),e(xa,Qle),e(Qle,DFo),e(xa,GFo),e(xa,Hle),e(Hle,OFo),e(xa,VFo),e(Ye,XFo),e(Ye,G),e(G,Ju),e(Ju,Ule),e(Ule,zFo),e(Ju,WFo),e(Ju,dN),e(dN,QFo),e(Ju,HFo),e(G,UFo),e(G,Yu),e(Yu,Jle),e(Jle,JFo),e(Yu,YFo),e(Yu,cN),e(cN,KFo),e(Yu,ZFo),e(G,e6o),e(G,Ku),e(Ku,Yle),e(Yle,o6o),e(Ku,r6o),e(Ku,fN),e(fN,t6o),e(Ku,a6o),e(G,n6o),e(G,Zu),e(Zu,Kle),e(Kle,s6o),e(Zu,l6o),e(Zu,mN),e(mN,i6o),e(Zu,d6o),e(G,c6o),e(G,e_),e(e_,Zle),e(Zle,f6o),e(e_,m6o),e(e_,gN),e(gN,g6o),e(e_,h6o),e(G,p6o),e(G,o_),e(o_,eie),e(eie,u6o),e(o_,_6o),e(o_,hN),e(hN,b6o),e(o_,v6o),e(G,F6o),e(G,r_),e(r_,oie),e(oie,T6o),e(r_,M6o),e(r_,pN),e(pN,E6o),e(r_,C6o),e(G,w6o),e(G,t_),e(t_,rie),e(rie,A6o),e(t_,y6o),e(t_,uN),e(uN,L6o),e(t_,x6o),e(G,$6o),e(G,a_),e(a_,tie),e(tie,k6o),e(a_,S6o),e(a_,_N),e(_N,R6o),e(a_,P6o),e(G,B6o),e(G,n_),e(n_,aie),e(aie,I6o),e(n_,q6o),e(n_,bN),e(bN,N6o),e(n_,j6o),e(G,D6o),e(G,s_),e(s_,nie),e(nie,G6o),e(s_,O6o),e(s_,vN),e(vN,V6o),e(s_,X6o),e(G,z6o),e(G,l_),e(l_,sie),e(sie,W6o),e(l_,Q6o),e(l_,FN),e(FN,H6o),e(l_,U6o),e(G,J6o),e(G,i_),e(i_,lie),e(lie,Y6o),e(i_,K6o),e(i_,TN),e(TN,Z6o),e(i_,eTo),e(G,oTo),e(G,d_),e(d_,iie),e(iie,rTo),e(d_,tTo),e(d_,MN),e(MN,aTo),e(d_,nTo),e(G,sTo),e(G,c_),e(c_,die),e(die,lTo),e(c_,iTo),e(c_,EN),e(EN,dTo),e(c_,cTo),e(G,fTo),e(G,f_),e(f_,cie),e(cie,mTo),e(f_,gTo),e(f_,CN),e(CN,hTo),e(f_,pTo),e(G,uTo),e(G,m_),e(m_,fie),e(fie,_To),e(m_,bTo),e(m_,wN),e(wN,vTo),e(m_,FTo),e(G,TTo),e(G,g_),e(g_,mie),e(mie,MTo),e(g_,ETo),e(g_,AN),e(AN,CTo),e(g_,wTo),e(G,ATo),e(G,h_),e(h_,gie),e(gie,yTo),e(h_,LTo),e(h_,yN),e(yN,xTo),e(h_,$To),e(G,kTo),e(G,p_),e(p_,hie),e(hie,STo),e(p_,RTo),e(p_,LN),e(LN,PTo),e(p_,BTo),e(G,ITo),e(G,u_),e(u_,pie),e(pie,qTo),e(u_,NTo),e(u_,xN),e(xN,jTo),e(u_,DTo),e(G,GTo),e(G,__),e(__,uie),e(uie,OTo),e(__,VTo),e(__,$N),e($N,XTo),e(__,zTo),e(G,WTo),e(G,b_),e(b_,_ie),e(_ie,QTo),e(b_,HTo),e(b_,kN),e(kN,UTo),e(b_,JTo),e(G,YTo),e(G,v_),e(v_,bie),e(bie,KTo),e(v_,ZTo),e(v_,SN),e(SN,e7o),e(v_,o7o),e(G,r7o),e(G,F_),e(F_,vie),e(vie,t7o),e(F_,a7o),e(F_,RN),e(RN,n7o),e(F_,s7o),e(G,l7o),e(G,T_),e(T_,Fie),e(Fie,i7o),e(T_,d7o),e(T_,PN),e(PN,c7o),e(T_,f7o),e(G,m7o),e(G,M_),e(M_,Tie),e(Tie,g7o),e(M_,h7o),e(M_,BN),e(BN,p7o),e(M_,u7o),e(G,_7o),e(G,E_),e(E_,Mie),e(Mie,b7o),e(E_,v7o),e(E_,IN),e(IN,F7o),e(E_,T7o),e(G,M7o),e(G,C_),e(C_,Eie),e(Eie,E7o),e(C_,C7o),e(C_,qN),e(qN,w7o),e(C_,A7o),e(G,y7o),e(G,w_),e(w_,Cie),e(Cie,L7o),e(w_,x7o),e(w_,NN),e(NN,$7o),e(w_,k7o),e(G,S7o),e(G,A_),e(A_,wie),e(wie,R7o),e(A_,P7o),e(A_,jN),e(jN,B7o),e(A_,I7o),e(G,q7o),e(G,y_),e(y_,Aie),e(Aie,N7o),e(y_,j7o),e(y_,DN),e(DN,D7o),e(y_,G7o),e(G,O7o),e(G,L_),e(L_,yie),e(yie,V7o),e(L_,X7o),e(L_,GN),e(GN,z7o),e(L_,W7o),e(G,Q7o),e(G,x_),e(x_,Lie),e(Lie,H7o),e(x_,U7o),e(x_,ON),e(ON,J7o),e(x_,Y7o),e(G,K7o),e(G,$_),e($_,xie),e(xie,Z7o),e($_,eMo),e($_,VN),e(VN,oMo),e($_,rMo),e(G,tMo),e(G,k_),e(k_,$ie),e($ie,aMo),e(k_,nMo),e(k_,XN),e(XN,sMo),e(k_,lMo),e(G,iMo),e(G,S_),e(S_,kie),e(kie,dMo),e(S_,cMo),e(S_,zN),e(zN,fMo),e(S_,mMo),e(G,gMo),e(G,R_),e(R_,Sie),e(Sie,hMo),e(R_,pMo),e(R_,WN),e(WN,uMo),e(R_,_Mo),e(G,bMo),e(G,P_),e(P_,Rie),e(Rie,vMo),e(P_,FMo),e(P_,QN),e(QN,TMo),e(P_,MMo),e(G,EMo),e(G,B_),e(B_,Pie),e(Pie,CMo),e(B_,wMo),e(B_,HN),e(HN,AMo),e(B_,yMo),e(G,LMo),e(G,I_),e(I_,Bie),e(Bie,xMo),e(I_,$Mo),e(I_,UN),e(UN,kMo),e(I_,SMo),e(Ye,RMo),e(Ye,q_),e(q_,PMo),e(q_,Iie),e(Iie,BMo),e(q_,IMo),e(q_,qie),e(qie,qMo),e(Ye,NMo),M(N_,Ye,null),b(f,Tqe,_),b(f,ki,_),e(ki,j_),e(j_,Nie),M(YA,Nie,null),e(ki,jMo),e(ki,jie),e(jie,DMo),b(f,Mqe,_),b(f,$o,_),M(KA,$o,null),e($o,GMo),e($o,Si),e(Si,OMo),e(Si,JN),e(JN,VMo),e(Si,XMo),e(Si,YN),e(YN,zMo),e(Si,WMo),e($o,QMo),e($o,ZA),e(ZA,HMo),e(ZA,Die),e(Die,UMo),e(ZA,JMo),e($o,YMo),e($o,nt),M(ey,nt,null),e(nt,KMo),e(nt,Gie),e(Gie,ZMo),e(nt,e4o),e(nt,Ri),e(Ri,o4o),e(Ri,Oie),e(Oie,r4o),e(Ri,t4o),e(Ri,KN),e(KN,a4o),e(Ri,n4o),e(nt,s4o),M(D_,nt,null),e($o,l4o),e($o,Ke),M(oy,Ke,null),e(Ke,i4o),e(Ke,Vie),e(Vie,d4o),e(Ke,c4o),e(Ke,$a),e($a,f4o),e($a,Xie),e(Xie,m4o),e($a,g4o),e($a,zie),e(zie,h4o),e($a,p4o),e($a,Wie),e(Wie,u4o),e($a,_4o),e(Ke,b4o),e(Ke,z),e(z,G_),e(G_,Qie),e(Qie,v4o),e(G_,F4o),e(G_,ZN),e(ZN,T4o),e(G_,M4o),e(z,E4o),e(z,O_),e(O_,Hie),e(Hie,C4o),e(O_,w4o),e(O_,ej),e(ej,A4o),e(O_,y4o),e(z,L4o),e(z,V_),e(V_,Uie),e(Uie,x4o),e(V_,$4o),e(V_,oj),e(oj,k4o),e(V_,S4o),e(z,R4o),e(z,X_),e(X_,Jie),e(Jie,P4o),e(X_,B4o),e(X_,rj),e(rj,I4o),e(X_,q4o),e(z,N4o),e(z,z_),e(z_,Yie),e(Yie,j4o),e(z_,D4o),e(z_,tj),e(tj,G4o),e(z_,O4o),e(z,V4o),e(z,W_),e(W_,Kie),e(Kie,X4o),e(W_,z4o),e(W_,aj),e(aj,W4o),e(W_,Q4o),e(z,H4o),e(z,Q_),e(Q_,Zie),e(Zie,U4o),e(Q_,J4o),e(Q_,nj),e(nj,Y4o),e(Q_,K4o),e(z,Z4o),e(z,H_),e(H_,ede),e(ede,eEo),e(H_,oEo),e(H_,sj),e(sj,rEo),e(H_,tEo),e(z,aEo),e(z,U_),e(U_,ode),e(ode,nEo),e(U_,sEo),e(U_,lj),e(lj,lEo),e(U_,iEo),e(z,dEo),e(z,J_),e(J_,rde),e(rde,cEo),e(J_,fEo),e(J_,ij),e(ij,mEo),e(J_,gEo),e(z,hEo),e(z,Y_),e(Y_,tde),e(tde,pEo),e(Y_,uEo),e(Y_,dj),e(dj,_Eo),e(Y_,bEo),e(z,vEo),e(z,K_),e(K_,ade),e(ade,FEo),e(K_,TEo),e(K_,cj),e(cj,MEo),e(K_,EEo),e(z,CEo),e(z,Z_),e(Z_,nde),e(nde,wEo),e(Z_,AEo),e(Z_,fj),e(fj,yEo),e(Z_,LEo),e(z,xEo),e(z,e0),e(e0,sde),e(sde,$Eo),e(e0,kEo),e(e0,mj),e(mj,SEo),e(e0,REo),e(z,PEo),e(z,o0),e(o0,lde),e(lde,BEo),e(o0,IEo),e(o0,gj),e(gj,qEo),e(o0,NEo),e(z,jEo),e(z,r0),e(r0,ide),e(ide,DEo),e(r0,GEo),e(r0,hj),e(hj,OEo),e(r0,VEo),e(z,XEo),e(z,t0),e(t0,dde),e(dde,zEo),e(t0,WEo),e(t0,pj),e(pj,QEo),e(t0,HEo),e(z,UEo),e(z,a0),e(a0,cde),e(cde,JEo),e(a0,YEo),e(a0,uj),e(uj,KEo),e(a0,ZEo),e(z,eCo),e(z,n0),e(n0,fde),e(fde,oCo),e(n0,rCo),e(n0,_j),e(_j,tCo),e(n0,aCo),e(z,nCo),e(z,s0),e(s0,mde),e(mde,sCo),e(s0,lCo),e(s0,bj),e(bj,iCo),e(s0,dCo),e(z,cCo),e(z,l0),e(l0,gde),e(gde,fCo),e(l0,mCo),e(l0,vj),e(vj,gCo),e(l0,hCo),e(z,pCo),e(z,i0),e(i0,hde),e(hde,uCo),e(i0,_Co),e(i0,Fj),e(Fj,bCo),e(i0,vCo),e(z,FCo),e(z,d0),e(d0,pde),e(pde,TCo),e(d0,MCo),e(d0,Tj),e(Tj,ECo),e(d0,CCo),e(z,wCo),e(z,c0),e(c0,ude),e(ude,ACo),e(c0,yCo),e(c0,Mj),e(Mj,LCo),e(c0,xCo),e(z,$Co),e(z,f0),e(f0,_de),e(_de,kCo),e(f0,SCo),e(f0,Ej),e(Ej,RCo),e(f0,PCo),e(z,BCo),e(z,m0),e(m0,bde),e(bde,ICo),e(m0,qCo),e(m0,Cj),e(Cj,NCo),e(m0,jCo),e(z,DCo),e(z,g0),e(g0,vde),e(vde,GCo),e(g0,OCo),e(g0,wj),e(wj,VCo),e(g0,XCo),e(z,zCo),e(z,h0),e(h0,Fde),e(Fde,WCo),e(h0,QCo),e(h0,Aj),e(Aj,HCo),e(h0,UCo),e(z,JCo),e(z,p0),e(p0,Tde),e(Tde,YCo),e(p0,KCo),e(p0,yj),e(yj,ZCo),e(p0,e5o),e(z,o5o),e(z,u0),e(u0,Mde),e(Mde,r5o),e(u0,t5o),e(u0,Lj),e(Lj,a5o),e(u0,n5o),e(z,s5o),e(z,_0),e(_0,Ede),e(Ede,l5o),e(_0,i5o),e(_0,xj),e(xj,d5o),e(_0,c5o),e(z,f5o),e(z,b0),e(b0,Cde),e(Cde,m5o),e(b0,g5o),e(b0,$j),e($j,h5o),e(b0,p5o),e(z,u5o),e(z,v0),e(v0,wde),e(wde,_5o),e(v0,b5o),e(v0,kj),e(kj,v5o),e(v0,F5o),e(z,T5o),e(z,F0),e(F0,Ade),e(Ade,M5o),e(F0,E5o),e(F0,Sj),e(Sj,C5o),e(F0,w5o),e(z,A5o),e(z,T0),e(T0,yde),e(yde,y5o),e(T0,L5o),e(T0,Rj),e(Rj,x5o),e(T0,$5o),e(z,k5o),e(z,M0),e(M0,Lde),e(Lde,S5o),e(M0,R5o),e(M0,Pj),e(Pj,P5o),e(M0,B5o),e(Ke,I5o),e(Ke,E0),e(E0,q5o),e(E0,xde),e(xde,N5o),e(E0,j5o),e(E0,$de),e($de,D5o),e(Ke,G5o),M(C0,Ke,null),b(f,Eqe,_),b(f,Pi,_),e(Pi,w0),e(w0,kde),M(ry,kde,null),e(Pi,O5o),e(Pi,Sde),e(Sde,V5o),b(f,Cqe,_),b(f,ko,_),M(ty,ko,null),e(ko,X5o),e(ko,Bi),e(Bi,z5o),e(Bi,Bj),e(Bj,W5o),e(Bi,Q5o),e(Bi,Ij),e(Ij,H5o),e(Bi,U5o),e(ko,J5o),e(ko,ay),e(ay,Y5o),e(ay,Rde),e(Rde,K5o),e(ay,Z5o),e(ko,e3o),e(ko,st),M(ny,st,null),e(st,o3o),e(st,Pde),e(Pde,r3o),e(st,t3o),e(st,Ii),e(Ii,a3o),e(Ii,Bde),e(Bde,n3o),e(Ii,s3o),e(Ii,qj),e(qj,l3o),e(Ii,i3o),e(st,d3o),M(A0,st,null),e(ko,c3o),e(ko,Ze),M(sy,Ze,null),e(Ze,f3o),e(Ze,Ide),e(Ide,m3o),e(Ze,g3o),e(Ze,ka),e(ka,h3o),e(ka,qde),e(qde,p3o),e(ka,u3o),e(ka,Nde),e(Nde,_3o),e(ka,b3o),e(ka,jde),e(jde,v3o),e(ka,F3o),e(Ze,T3o),e(Ze,W),e(W,y0),e(y0,Dde),e(Dde,M3o),e(y0,E3o),e(y0,Nj),e(Nj,C3o),e(y0,w3o),e(W,A3o),e(W,L0),e(L0,Gde),e(Gde,y3o),e(L0,L3o),e(L0,jj),e(jj,x3o),e(L0,$3o),e(W,k3o),e(W,x0),e(x0,Ode),e(Ode,S3o),e(x0,R3o),e(x0,Dj),e(Dj,P3o),e(x0,B3o),e(W,I3o),e(W,$0),e($0,Vde),e(Vde,q3o),e($0,N3o),e($0,Gj),e(Gj,j3o),e($0,D3o),e(W,G3o),e(W,k0),e(k0,Xde),e(Xde,O3o),e(k0,V3o),e(k0,Oj),e(Oj,X3o),e(k0,z3o),e(W,W3o),e(W,S0),e(S0,zde),e(zde,Q3o),e(S0,H3o),e(S0,Vj),e(Vj,U3o),e(S0,J3o),e(W,Y3o),e(W,R0),e(R0,Wde),e(Wde,K3o),e(R0,Z3o),e(R0,Xj),e(Xj,ewo),e(R0,owo),e(W,rwo),e(W,P0),e(P0,Qde),e(Qde,two),e(P0,awo),e(P0,zj),e(zj,nwo),e(P0,swo),e(W,lwo),e(W,B0),e(B0,Hde),e(Hde,iwo),e(B0,dwo),e(B0,Wj),e(Wj,cwo),e(B0,fwo),e(W,mwo),e(W,I0),e(I0,Ude),e(Ude,gwo),e(I0,hwo),e(I0,Qj),e(Qj,pwo),e(I0,uwo),e(W,_wo),e(W,q0),e(q0,Jde),e(Jde,bwo),e(q0,vwo),e(q0,Hj),e(Hj,Fwo),e(q0,Two),e(W,Mwo),e(W,N0),e(N0,Yde),e(Yde,Ewo),e(N0,Cwo),e(N0,Uj),e(Uj,wwo),e(N0,Awo),e(W,ywo),e(W,j0),e(j0,Kde),e(Kde,Lwo),e(j0,xwo),e(j0,Jj),e(Jj,$wo),e(j0,kwo),e(W,Swo),e(W,D0),e(D0,Zde),e(Zde,Rwo),e(D0,Pwo),e(D0,Yj),e(Yj,Bwo),e(D0,Iwo),e(W,qwo),e(W,G0),e(G0,ece),e(ece,Nwo),e(G0,jwo),e(G0,Kj),e(Kj,Dwo),e(G0,Gwo),e(W,Owo),e(W,O0),e(O0,oce),e(oce,Vwo),e(O0,Xwo),e(O0,Zj),e(Zj,zwo),e(O0,Wwo),e(W,Qwo),e(W,V0),e(V0,rce),e(rce,Hwo),e(V0,Uwo),e(V0,eD),e(eD,Jwo),e(V0,Ywo),e(W,Kwo),e(W,X0),e(X0,tce),e(tce,Zwo),e(X0,eAo),e(X0,oD),e(oD,oAo),e(X0,rAo),e(W,tAo),e(W,z0),e(z0,ace),e(ace,aAo),e(z0,nAo),e(z0,rD),e(rD,sAo),e(z0,lAo),e(W,iAo),e(W,W0),e(W0,nce),e(nce,dAo),e(W0,cAo),e(W0,tD),e(tD,fAo),e(W0,mAo),e(W,gAo),e(W,Q0),e(Q0,sce),e(sce,hAo),e(Q0,pAo),e(Q0,aD),e(aD,uAo),e(Q0,_Ao),e(W,bAo),e(W,H0),e(H0,lce),e(lce,vAo),e(H0,FAo),e(H0,nD),e(nD,TAo),e(H0,MAo),e(W,EAo),e(W,U0),e(U0,ice),e(ice,CAo),e(U0,wAo),e(U0,sD),e(sD,AAo),e(U0,yAo),e(W,LAo),e(W,J0),e(J0,dce),e(dce,xAo),e(J0,$Ao),e(J0,lD),e(lD,kAo),e(J0,SAo),e(W,RAo),e(W,Y0),e(Y0,cce),e(cce,PAo),e(Y0,BAo),e(Y0,iD),e(iD,IAo),e(Y0,qAo),e(W,NAo),e(W,K0),e(K0,fce),e(fce,jAo),e(K0,DAo),e(K0,dD),e(dD,GAo),e(K0,OAo),e(W,VAo),e(W,Z0),e(Z0,mce),e(mce,XAo),e(Z0,zAo),e(Z0,cD),e(cD,WAo),e(Z0,QAo),e(W,HAo),e(W,e1),e(e1,gce),e(gce,UAo),e(e1,JAo),e(e1,fD),e(fD,YAo),e(e1,KAo),e(W,ZAo),e(W,o1),e(o1,hce),e(hce,eyo),e(o1,oyo),e(o1,mD),e(mD,ryo),e(o1,tyo),e(W,ayo),e(W,r1),e(r1,pce),e(pce,nyo),e(r1,syo),e(r1,gD),e(gD,lyo),e(r1,iyo),e(W,dyo),e(W,t1),e(t1,uce),e(uce,cyo),e(t1,fyo),e(t1,_ce),e(_ce,myo),e(t1,gyo),e(W,hyo),e(W,a1),e(a1,bce),e(bce,pyo),e(a1,uyo),e(a1,hD),e(hD,_yo),e(a1,byo),e(W,vyo),e(W,n1),e(n1,vce),e(vce,Fyo),e(n1,Tyo),e(n1,pD),e(pD,Myo),e(n1,Eyo),e(W,Cyo),e(W,s1),e(s1,Fce),e(Fce,wyo),e(s1,Ayo),e(s1,uD),e(uD,yyo),e(s1,Lyo),e(W,xyo),e(W,l1),e(l1,Tce),e(Tce,$yo),e(l1,kyo),e(l1,_D),e(_D,Syo),e(l1,Ryo),e(Ze,Pyo),e(Ze,i1),e(i1,Byo),e(i1,Mce),e(Mce,Iyo),e(i1,qyo),e(i1,Ece),e(Ece,Nyo),e(Ze,jyo),M(d1,Ze,null),b(f,wqe,_),b(f,qi,_),e(qi,c1),e(c1,Cce),M(ly,Cce,null),e(qi,Dyo),e(qi,wce),e(wce,Gyo),b(f,Aqe,_),b(f,So,_),M(iy,So,null),e(So,Oyo),e(So,Ni),e(Ni,Vyo),e(Ni,bD),e(bD,Xyo),e(Ni,zyo),e(Ni,vD),e(vD,Wyo),e(Ni,Qyo),e(So,Hyo),e(So,dy),e(dy,Uyo),e(dy,Ace),e(Ace,Jyo),e(dy,Yyo),e(So,Kyo),e(So,lt),M(cy,lt,null),e(lt,Zyo),e(lt,yce),e(yce,eLo),e(lt,oLo),e(lt,ji),e(ji,rLo),e(ji,Lce),e(Lce,tLo),e(ji,aLo),e(ji,FD),e(FD,nLo),e(ji,sLo),e(lt,lLo),M(f1,lt,null),e(So,iLo),e(So,eo),M(fy,eo,null),e(eo,dLo),e(eo,xce),e(xce,cLo),e(eo,fLo),e(eo,Sa),e(Sa,mLo),e(Sa,$ce),e($ce,gLo),e(Sa,hLo),e(Sa,kce),e(kce,pLo),e(Sa,uLo),e(Sa,Sce),e(Sce,_Lo),e(Sa,bLo),e(eo,vLo),e(eo,ue),e(ue,m1),e(m1,Rce),e(Rce,FLo),e(m1,TLo),e(m1,TD),e(TD,MLo),e(m1,ELo),e(ue,CLo),e(ue,g1),e(g1,Pce),e(Pce,wLo),e(g1,ALo),e(g1,MD),e(MD,yLo),e(g1,LLo),e(ue,xLo),e(ue,h1),e(h1,Bce),e(Bce,$Lo),e(h1,kLo),e(h1,ED),e(ED,SLo),e(h1,RLo),e(ue,PLo),e(ue,p1),e(p1,Ice),e(Ice,BLo),e(p1,ILo),e(p1,CD),e(CD,qLo),e(p1,NLo),e(ue,jLo),e(ue,u1),e(u1,qce),e(qce,DLo),e(u1,GLo),e(u1,wD),e(wD,OLo),e(u1,VLo),e(ue,XLo),e(ue,_1),e(_1,Nce),e(Nce,zLo),e(_1,WLo),e(_1,AD),e(AD,QLo),e(_1,HLo),e(ue,ULo),e(ue,b1),e(b1,jce),e(jce,JLo),e(b1,YLo),e(b1,yD),e(yD,KLo),e(b1,ZLo),e(ue,e8o),e(ue,v1),e(v1,Dce),e(Dce,o8o),e(v1,r8o),e(v1,LD),e(LD,t8o),e(v1,a8o),e(ue,n8o),e(ue,F1),e(F1,Gce),e(Gce,s8o),e(F1,l8o),e(F1,xD),e(xD,i8o),e(F1,d8o),e(ue,c8o),e(ue,T1),e(T1,Oce),e(Oce,f8o),e(T1,m8o),e(T1,$D),e($D,g8o),e(T1,h8o),e(ue,p8o),e(ue,M1),e(M1,Vce),e(Vce,u8o),e(M1,_8o),e(M1,kD),e(kD,b8o),e(M1,v8o),e(ue,F8o),e(ue,E1),e(E1,Xce),e(Xce,T8o),e(E1,M8o),e(E1,SD),e(SD,E8o),e(E1,C8o),e(ue,w8o),e(ue,C1),e(C1,zce),e(zce,A8o),e(C1,y8o),e(C1,RD),e(RD,L8o),e(C1,x8o),e(ue,$8o),e(ue,w1),e(w1,Wce),e(Wce,k8o),e(w1,S8o),e(w1,PD),e(PD,R8o),e(w1,P8o),e(ue,B8o),e(ue,A1),e(A1,Qce),e(Qce,I8o),e(A1,q8o),e(A1,BD),e(BD,N8o),e(A1,j8o),e(ue,D8o),e(ue,y1),e(y1,Hce),e(Hce,G8o),e(y1,O8o),e(y1,ID),e(ID,V8o),e(y1,X8o),e(eo,z8o),e(eo,L1),e(L1,W8o),e(L1,Uce),e(Uce,Q8o),e(L1,H8o),e(L1,Jce),e(Jce,U8o),e(eo,J8o),M(x1,eo,null),b(f,yqe,_),b(f,Di,_),e(Di,$1),e($1,Yce),M(my,Yce,null),e(Di,Y8o),e(Di,Kce),e(Kce,K8o),b(f,Lqe,_),b(f,Ro,_),M(gy,Ro,null),e(Ro,Z8o),e(Ro,Gi),e(Gi,e9o),e(Gi,qD),e(qD,o9o),e(Gi,r9o),e(Gi,ND),e(ND,t9o),e(Gi,a9o),e(Ro,n9o),e(Ro,hy),e(hy,s9o),e(hy,Zce),e(Zce,l9o),e(hy,i9o),e(Ro,d9o),e(Ro,it),M(py,it,null),e(it,c9o),e(it,efe),e(efe,f9o),e(it,m9o),e(it,Oi),e(Oi,g9o),e(Oi,ofe),e(ofe,h9o),e(Oi,p9o),e(Oi,jD),e(jD,u9o),e(Oi,_9o),e(it,b9o),M(k1,it,null),e(Ro,v9o),e(Ro,oo),M(uy,oo,null),e(oo,F9o),e(oo,rfe),e(rfe,T9o),e(oo,M9o),e(oo,Ra),e(Ra,E9o),e(Ra,tfe),e(tfe,C9o),e(Ra,w9o),e(Ra,afe),e(afe,A9o),e(Ra,y9o),e(Ra,nfe),e(nfe,L9o),e(Ra,x9o),e(oo,$9o),e(oo,q),e(q,S1),e(S1,sfe),e(sfe,k9o),e(S1,S9o),e(S1,DD),e(DD,R9o),e(S1,P9o),e(q,B9o),e(q,R1),e(R1,lfe),e(lfe,I9o),e(R1,q9o),e(R1,GD),e(GD,N9o),e(R1,j9o),e(q,D9o),e(q,P1),e(P1,ife),e(ife,G9o),e(P1,O9o),e(P1,OD),e(OD,V9o),e(P1,X9o),e(q,z9o),e(q,B1),e(B1,dfe),e(dfe,W9o),e(B1,Q9o),e(B1,VD),e(VD,H9o),e(B1,U9o),e(q,J9o),e(q,I1),e(I1,cfe),e(cfe,Y9o),e(I1,K9o),e(I1,XD),e(XD,Z9o),e(I1,exo),e(q,oxo),e(q,q1),e(q1,ffe),e(ffe,rxo),e(q1,txo),e(q1,zD),e(zD,axo),e(q1,nxo),e(q,sxo),e(q,N1),e(N1,mfe),e(mfe,lxo),e(N1,ixo),e(N1,WD),e(WD,dxo),e(N1,cxo),e(q,fxo),e(q,j1),e(j1,gfe),e(gfe,mxo),e(j1,gxo),e(j1,QD),e(QD,hxo),e(j1,pxo),e(q,uxo),e(q,D1),e(D1,hfe),e(hfe,_xo),e(D1,bxo),e(D1,HD),e(HD,vxo),e(D1,Fxo),e(q,Txo),e(q,G1),e(G1,pfe),e(pfe,Mxo),e(G1,Exo),e(G1,UD),e(UD,Cxo),e(G1,wxo),e(q,Axo),e(q,O1),e(O1,ufe),e(ufe,yxo),e(O1,Lxo),e(O1,JD),e(JD,xxo),e(O1,$xo),e(q,kxo),e(q,V1),e(V1,_fe),e(_fe,Sxo),e(V1,Rxo),e(V1,YD),e(YD,Pxo),e(V1,Bxo),e(q,Ixo),e(q,X1),e(X1,bfe),e(bfe,qxo),e(X1,Nxo),e(X1,KD),e(KD,jxo),e(X1,Dxo),e(q,Gxo),e(q,z1),e(z1,vfe),e(vfe,Oxo),e(z1,Vxo),e(z1,ZD),e(ZD,Xxo),e(z1,zxo),e(q,Wxo),e(q,W1),e(W1,Ffe),e(Ffe,Qxo),e(W1,Hxo),e(W1,eG),e(eG,Uxo),e(W1,Jxo),e(q,Yxo),e(q,Q1),e(Q1,Tfe),e(Tfe,Kxo),e(Q1,Zxo),e(Q1,oG),e(oG,e$o),e(Q1,o$o),e(q,r$o),e(q,H1),e(H1,Mfe),e(Mfe,t$o),e(H1,a$o),e(H1,rG),e(rG,n$o),e(H1,s$o),e(q,l$o),e(q,U1),e(U1,Efe),e(Efe,i$o),e(U1,d$o),e(U1,tG),e(tG,c$o),e(U1,f$o),e(q,m$o),e(q,J1),e(J1,Cfe),e(Cfe,g$o),e(J1,h$o),e(J1,aG),e(aG,p$o),e(J1,u$o),e(q,_$o),e(q,Y1),e(Y1,wfe),e(wfe,b$o),e(Y1,v$o),e(Y1,nG),e(nG,F$o),e(Y1,T$o),e(q,M$o),e(q,K1),e(K1,Afe),e(Afe,E$o),e(K1,C$o),e(K1,sG),e(sG,w$o),e(K1,A$o),e(q,y$o),e(q,Z1),e(Z1,yfe),e(yfe,L$o),e(Z1,x$o),e(Z1,lG),e(lG,$$o),e(Z1,k$o),e(q,S$o),e(q,eb),e(eb,Lfe),e(Lfe,R$o),e(eb,P$o),e(eb,iG),e(iG,B$o),e(eb,I$o),e(q,q$o),e(q,ob),e(ob,xfe),e(xfe,N$o),e(ob,j$o),e(ob,dG),e(dG,D$o),e(ob,G$o),e(q,O$o),e(q,rb),e(rb,$fe),e($fe,V$o),e(rb,X$o),e(rb,cG),e(cG,z$o),e(rb,W$o),e(q,Q$o),e(q,tb),e(tb,kfe),e(kfe,H$o),e(tb,U$o),e(tb,fG),e(fG,J$o),e(tb,Y$o),e(q,K$o),e(q,ab),e(ab,Sfe),e(Sfe,Z$o),e(ab,eko),e(ab,mG),e(mG,oko),e(ab,rko),e(q,tko),e(q,nb),e(nb,Rfe),e(Rfe,ako),e(nb,nko),e(nb,gG),e(gG,sko),e(nb,lko),e(q,iko),e(q,sb),e(sb,Pfe),e(Pfe,dko),e(sb,cko),e(sb,hG),e(hG,fko),e(sb,mko),e(q,gko),e(q,lb),e(lb,Bfe),e(Bfe,hko),e(lb,pko),e(lb,pG),e(pG,uko),e(lb,_ko),e(q,bko),e(q,ib),e(ib,Ife),e(Ife,vko),e(ib,Fko),e(ib,uG),e(uG,Tko),e(ib,Mko),e(q,Eko),e(q,db),e(db,qfe),e(qfe,Cko),e(db,wko),e(db,_G),e(_G,Ako),e(db,yko),e(q,Lko),e(q,cb),e(cb,Nfe),e(Nfe,xko),e(cb,$ko),e(cb,bG),e(bG,kko),e(cb,Sko),e(q,Rko),e(q,fb),e(fb,jfe),e(jfe,Pko),e(fb,Bko),e(fb,vG),e(vG,Iko),e(fb,qko),e(q,Nko),e(q,mb),e(mb,Dfe),e(Dfe,jko),e(mb,Dko),e(mb,FG),e(FG,Gko),e(mb,Oko),e(q,Vko),e(q,gb),e(gb,Gfe),e(Gfe,Xko),e(gb,zko),e(gb,TG),e(TG,Wko),e(gb,Qko),e(q,Hko),e(q,hb),e(hb,Ofe),e(Ofe,Uko),e(hb,Jko),e(hb,MG),e(MG,Yko),e(hb,Kko),e(q,Zko),e(q,pb),e(pb,Vfe),e(Vfe,eSo),e(pb,oSo),e(pb,EG),e(EG,rSo),e(pb,tSo),e(q,aSo),e(q,ub),e(ub,Xfe),e(Xfe,nSo),e(ub,sSo),e(ub,CG),e(CG,lSo),e(ub,iSo),e(q,dSo),e(q,_b),e(_b,zfe),e(zfe,cSo),e(_b,fSo),e(_b,wG),e(wG,mSo),e(_b,gSo),e(q,hSo),e(q,bb),e(bb,Wfe),e(Wfe,pSo),e(bb,uSo),e(bb,AG),e(AG,_So),e(bb,bSo),e(q,vSo),e(q,vb),e(vb,Qfe),e(Qfe,FSo),e(vb,TSo),e(vb,yG),e(yG,MSo),e(vb,ESo),e(q,CSo),e(q,Fb),e(Fb,Hfe),e(Hfe,wSo),e(Fb,ASo),e(Fb,LG),e(LG,ySo),e(Fb,LSo),e(q,xSo),e(q,Tb),e(Tb,Ufe),e(Ufe,$So),e(Tb,kSo),e(Tb,xG),e(xG,SSo),e(Tb,RSo),e(q,PSo),e(q,Mb),e(Mb,Jfe),e(Jfe,BSo),e(Mb,ISo),e(Mb,$G),e($G,qSo),e(Mb,NSo),e(q,jSo),e(q,Eb),e(Eb,Yfe),e(Yfe,DSo),e(Eb,GSo),e(Eb,kG),e(kG,OSo),e(Eb,VSo),e(q,XSo),e(q,Cb),e(Cb,Kfe),e(Kfe,zSo),e(Cb,WSo),e(Cb,SG),e(SG,QSo),e(Cb,HSo),e(oo,USo),e(oo,wb),e(wb,JSo),e(wb,Zfe),e(Zfe,YSo),e(wb,KSo),e(wb,eme),e(eme,ZSo),e(oo,eRo),M(Ab,oo,null),b(f,xqe,_),b(f,Vi,_),e(Vi,yb),e(yb,ome),M(_y,ome,null),e(Vi,oRo),e(Vi,rme),e(rme,rRo),b(f,$qe,_),b(f,Po,_),M(by,Po,null),e(Po,tRo),e(Po,Xi),e(Xi,aRo),e(Xi,RG),e(RG,nRo),e(Xi,sRo),e(Xi,PG),e(PG,lRo),e(Xi,iRo),e(Po,dRo),e(Po,vy),e(vy,cRo),e(vy,tme),e(tme,fRo),e(vy,mRo),e(Po,gRo),e(Po,dt),M(Fy,dt,null),e(dt,hRo),e(dt,ame),e(ame,pRo),e(dt,uRo),e(dt,zi),e(zi,_Ro),e(zi,nme),e(nme,bRo),e(zi,vRo),e(zi,BG),e(BG,FRo),e(zi,TRo),e(dt,MRo),M(Lb,dt,null),e(Po,ERo),e(Po,ro),M(Ty,ro,null),e(ro,CRo),e(ro,sme),e(sme,wRo),e(ro,ARo),e(ro,Pa),e(Pa,yRo),e(Pa,lme),e(lme,LRo),e(Pa,xRo),e(Pa,ime),e(ime,$Ro),e(Pa,kRo),e(Pa,dme),e(dme,SRo),e(Pa,RRo),e(ro,PRo),e(ro,Y),e(Y,xb),e(xb,cme),e(cme,BRo),e(xb,IRo),e(xb,IG),e(IG,qRo),e(xb,NRo),e(Y,jRo),e(Y,$b),e($b,fme),e(fme,DRo),e($b,GRo),e($b,qG),e(qG,ORo),e($b,VRo),e(Y,XRo),e(Y,kb),e(kb,mme),e(mme,zRo),e(kb,WRo),e(kb,NG),e(NG,QRo),e(kb,HRo),e(Y,URo),e(Y,Sb),e(Sb,gme),e(gme,JRo),e(Sb,YRo),e(Sb,jG),e(jG,KRo),e(Sb,ZRo),e(Y,ePo),e(Y,Rb),e(Rb,hme),e(hme,oPo),e(Rb,rPo),e(Rb,DG),e(DG,tPo),e(Rb,aPo),e(Y,nPo),e(Y,Pb),e(Pb,pme),e(pme,sPo),e(Pb,lPo),e(Pb,GG),e(GG,iPo),e(Pb,dPo),e(Y,cPo),e(Y,Bb),e(Bb,ume),e(ume,fPo),e(Bb,mPo),e(Bb,OG),e(OG,gPo),e(Bb,hPo),e(Y,pPo),e(Y,Ib),e(Ib,_me),e(_me,uPo),e(Ib,_Po),e(Ib,VG),e(VG,bPo),e(Ib,vPo),e(Y,FPo),e(Y,qb),e(qb,bme),e(bme,TPo),e(qb,MPo),e(qb,XG),e(XG,EPo),e(qb,CPo),e(Y,wPo),e(Y,Nb),e(Nb,vme),e(vme,APo),e(Nb,yPo),e(Nb,zG),e(zG,LPo),e(Nb,xPo),e(Y,$Po),e(Y,jb),e(jb,Fme),e(Fme,kPo),e(jb,SPo),e(jb,WG),e(WG,RPo),e(jb,PPo),e(Y,BPo),e(Y,Db),e(Db,Tme),e(Tme,IPo),e(Db,qPo),e(Db,QG),e(QG,NPo),e(Db,jPo),e(Y,DPo),e(Y,Gb),e(Gb,Mme),e(Mme,GPo),e(Gb,OPo),e(Gb,HG),e(HG,VPo),e(Gb,XPo),e(Y,zPo),e(Y,Ob),e(Ob,Eme),e(Eme,WPo),e(Ob,QPo),e(Ob,UG),e(UG,HPo),e(Ob,UPo),e(Y,JPo),e(Y,Vb),e(Vb,Cme),e(Cme,YPo),e(Vb,KPo),e(Vb,JG),e(JG,ZPo),e(Vb,eBo),e(Y,oBo),e(Y,Xb),e(Xb,wme),e(wme,rBo),e(Xb,tBo),e(Xb,YG),e(YG,aBo),e(Xb,nBo),e(Y,sBo),e(Y,zb),e(zb,Ame),e(Ame,lBo),e(zb,iBo),e(zb,KG),e(KG,dBo),e(zb,cBo),e(Y,fBo),e(Y,Wb),e(Wb,yme),e(yme,mBo),e(Wb,gBo),e(Wb,ZG),e(ZG,hBo),e(Wb,pBo),e(Y,uBo),e(Y,Qb),e(Qb,Lme),e(Lme,_Bo),e(Qb,bBo),e(Qb,eO),e(eO,vBo),e(Qb,FBo),e(Y,TBo),e(Y,Hb),e(Hb,xme),e(xme,MBo),e(Hb,EBo),e(Hb,oO),e(oO,CBo),e(Hb,wBo),e(Y,ABo),e(Y,Ub),e(Ub,$me),e($me,yBo),e(Ub,LBo),e(Ub,rO),e(rO,xBo),e(Ub,$Bo),e(Y,kBo),e(Y,Jb),e(Jb,kme),e(kme,SBo),e(Jb,RBo),e(Jb,tO),e(tO,PBo),e(Jb,BBo),e(Y,IBo),e(Y,Yb),e(Yb,Sme),e(Sme,qBo),e(Yb,NBo),e(Yb,aO),e(aO,jBo),e(Yb,DBo),e(Y,GBo),e(Y,Kb),e(Kb,Rme),e(Rme,OBo),e(Kb,VBo),e(Kb,nO),e(nO,XBo),e(Kb,zBo),e(Y,WBo),e(Y,Zb),e(Zb,Pme),e(Pme,QBo),e(Zb,HBo),e(Zb,sO),e(sO,UBo),e(Zb,JBo),e(Y,YBo),e(Y,e2),e(e2,Bme),e(Bme,KBo),e(e2,ZBo),e(e2,lO),e(lO,eIo),e(e2,oIo),e(Y,rIo),e(Y,o2),e(o2,Ime),e(Ime,tIo),e(o2,aIo),e(o2,iO),e(iO,nIo),e(o2,sIo),e(Y,lIo),e(Y,r2),e(r2,qme),e(qme,iIo),e(r2,dIo),e(r2,dO),e(dO,cIo),e(r2,fIo),e(Y,mIo),e(Y,t2),e(t2,Nme),e(Nme,gIo),e(t2,hIo),e(t2,cO),e(cO,pIo),e(t2,uIo),e(ro,_Io),e(ro,a2),e(a2,bIo),e(a2,jme),e(jme,vIo),e(a2,FIo),e(a2,Dme),e(Dme,TIo),e(ro,MIo),M(n2,ro,null),b(f,kqe,_),b(f,Wi,_),e(Wi,s2),e(s2,Gme),M(My,Gme,null),e(Wi,EIo),e(Wi,Ome),e(Ome,CIo),b(f,Sqe,_),b(f,Bo,_),M(Ey,Bo,null),e(Bo,wIo),e(Bo,Qi),e(Qi,AIo),e(Qi,fO),e(fO,yIo),e(Qi,LIo),e(Qi,mO),e(mO,xIo),e(Qi,$Io),e(Bo,kIo),e(Bo,Cy),e(Cy,SIo),e(Cy,Vme),e(Vme,RIo),e(Cy,PIo),e(Bo,BIo),e(Bo,ct),M(wy,ct,null),e(ct,IIo),e(ct,Xme),e(Xme,qIo),e(ct,NIo),e(ct,Hi),e(Hi,jIo),e(Hi,zme),e(zme,DIo),e(Hi,GIo),e(Hi,gO),e(gO,OIo),e(Hi,VIo),e(ct,XIo),M(l2,ct,null),e(Bo,zIo),e(Bo,to),M(Ay,to,null),e(to,WIo),e(to,Wme),e(Wme,QIo),e(to,HIo),e(to,Ba),e(Ba,UIo),e(Ba,Qme),e(Qme,JIo),e(Ba,YIo),e(Ba,Hme),e(Hme,KIo),e(Ba,ZIo),e(Ba,Ume),e(Ume,eqo),e(Ba,oqo),e(to,rqo),e(to,Yr),e(Yr,i2),e(i2,Jme),e(Jme,tqo),e(i2,aqo),e(i2,hO),e(hO,nqo),e(i2,sqo),e(Yr,lqo),e(Yr,d2),e(d2,Yme),e(Yme,iqo),e(d2,dqo),e(d2,pO),e(pO,cqo),e(d2,fqo),e(Yr,mqo),e(Yr,c2),e(c2,Kme),e(Kme,gqo),e(c2,hqo),e(c2,uO),e(uO,pqo),e(c2,uqo),e(Yr,_qo),e(Yr,f2),e(f2,Zme),e(Zme,bqo),e(f2,vqo),e(f2,_O),e(_O,Fqo),e(f2,Tqo),e(Yr,Mqo),e(Yr,m2),e(m2,ege),e(ege,Eqo),e(m2,Cqo),e(m2,bO),e(bO,wqo),e(m2,Aqo),e(to,yqo),e(to,g2),e(g2,Lqo),e(g2,oge),e(oge,xqo),e(g2,$qo),e(g2,rge),e(rge,kqo),e(to,Sqo),M(h2,to,null),b(f,Rqe,_),b(f,Ui,_),e(Ui,p2),e(p2,tge),M(yy,tge,null),e(Ui,Rqo),e(Ui,age),e(age,Pqo),b(f,Pqe,_),b(f,Io,_),M(Ly,Io,null),e(Io,Bqo),e(Io,Ji),e(Ji,Iqo),e(Ji,vO),e(vO,qqo),e(Ji,Nqo),e(Ji,FO),e(FO,jqo),e(Ji,Dqo),e(Io,Gqo),e(Io,xy),e(xy,Oqo),e(xy,nge),e(nge,Vqo),e(xy,Xqo),e(Io,zqo),e(Io,ft),M($y,ft,null),e(ft,Wqo),e(ft,sge),e(sge,Qqo),e(ft,Hqo),e(ft,Yi),e(Yi,Uqo),e(Yi,lge),e(lge,Jqo),e(Yi,Yqo),e(Yi,TO),e(TO,Kqo),e(Yi,Zqo),e(ft,eNo),M(u2,ft,null),e(Io,oNo),e(Io,ao),M(ky,ao,null),e(ao,rNo),e(ao,ige),e(ige,tNo),e(ao,aNo),e(ao,Ia),e(Ia,nNo),e(Ia,dge),e(dge,sNo),e(Ia,lNo),e(Ia,cge),e(cge,iNo),e(Ia,dNo),e(Ia,fge),e(fge,cNo),e(Ia,fNo),e(ao,mNo),e(ao,H),e(H,_2),e(_2,mge),e(mge,gNo),e(_2,hNo),e(_2,MO),e(MO,pNo),e(_2,uNo),e(H,_No),e(H,b2),e(b2,gge),e(gge,bNo),e(b2,vNo),e(b2,EO),e(EO,FNo),e(b2,TNo),e(H,MNo),e(H,v2),e(v2,hge),e(hge,ENo),e(v2,CNo),e(v2,CO),e(CO,wNo),e(v2,ANo),e(H,yNo),e(H,F2),e(F2,pge),e(pge,LNo),e(F2,xNo),e(F2,wO),e(wO,$No),e(F2,kNo),e(H,SNo),e(H,T2),e(T2,uge),e(uge,RNo),e(T2,PNo),e(T2,AO),e(AO,BNo),e(T2,INo),e(H,qNo),e(H,M2),e(M2,_ge),e(_ge,NNo),e(M2,jNo),e(M2,yO),e(yO,DNo),e(M2,GNo),e(H,ONo),e(H,E2),e(E2,bge),e(bge,VNo),e(E2,XNo),e(E2,LO),e(LO,zNo),e(E2,WNo),e(H,QNo),e(H,C2),e(C2,vge),e(vge,HNo),e(C2,UNo),e(C2,xO),e(xO,JNo),e(C2,YNo),e(H,KNo),e(H,w2),e(w2,Fge),e(Fge,ZNo),e(w2,ejo),e(w2,$O),e($O,ojo),e(w2,rjo),e(H,tjo),e(H,A2),e(A2,Tge),e(Tge,ajo),e(A2,njo),e(A2,kO),e(kO,sjo),e(A2,ljo),e(H,ijo),e(H,y2),e(y2,Mge),e(Mge,djo),e(y2,cjo),e(y2,SO),e(SO,fjo),e(y2,mjo),e(H,gjo),e(H,L2),e(L2,Ege),e(Ege,hjo),e(L2,pjo),e(L2,RO),e(RO,ujo),e(L2,_jo),e(H,bjo),e(H,x2),e(x2,Cge),e(Cge,vjo),e(x2,Fjo),e(x2,PO),e(PO,Tjo),e(x2,Mjo),e(H,Ejo),e(H,$2),e($2,wge),e(wge,Cjo),e($2,wjo),e($2,BO),e(BO,Ajo),e($2,yjo),e(H,Ljo),e(H,k2),e(k2,Age),e(Age,xjo),e(k2,$jo),e(k2,IO),e(IO,kjo),e(k2,Sjo),e(H,Rjo),e(H,S2),e(S2,yge),e(yge,Pjo),e(S2,Bjo),e(S2,qO),e(qO,Ijo),e(S2,qjo),e(H,Njo),e(H,R2),e(R2,Lge),e(Lge,jjo),e(R2,Djo),e(R2,NO),e(NO,Gjo),e(R2,Ojo),e(H,Vjo),e(H,P2),e(P2,xge),e(xge,Xjo),e(P2,zjo),e(P2,jO),e(jO,Wjo),e(P2,Qjo),e(H,Hjo),e(H,B2),e(B2,$ge),e($ge,Ujo),e(B2,Jjo),e(B2,DO),e(DO,Yjo),e(B2,Kjo),e(H,Zjo),e(H,I2),e(I2,kge),e(kge,eDo),e(I2,oDo),e(I2,GO),e(GO,rDo),e(I2,tDo),e(H,aDo),e(H,q2),e(q2,Sge),e(Sge,nDo),e(q2,sDo),e(q2,OO),e(OO,lDo),e(q2,iDo),e(H,dDo),e(H,N2),e(N2,Rge),e(Rge,cDo),e(N2,fDo),e(N2,VO),e(VO,mDo),e(N2,gDo),e(H,hDo),e(H,j2),e(j2,Pge),e(Pge,pDo),e(j2,uDo),e(j2,XO),e(XO,_Do),e(j2,bDo),e(H,vDo),e(H,D2),e(D2,Bge),e(Bge,FDo),e(D2,TDo),e(D2,zO),e(zO,MDo),e(D2,EDo),e(H,CDo),e(H,G2),e(G2,Ige),e(Ige,wDo),e(G2,ADo),e(G2,WO),e(WO,yDo),e(G2,LDo),e(H,xDo),e(H,O2),e(O2,qge),e(qge,$Do),e(O2,kDo),e(O2,QO),e(QO,SDo),e(O2,RDo),e(H,PDo),e(H,V2),e(V2,Nge),e(Nge,BDo),e(V2,IDo),e(V2,HO),e(HO,qDo),e(V2,NDo),e(H,jDo),e(H,X2),e(X2,jge),e(jge,DDo),e(X2,GDo),e(X2,UO),e(UO,ODo),e(X2,VDo),e(H,XDo),e(H,z2),e(z2,Dge),e(Dge,zDo),e(z2,WDo),e(z2,JO),e(JO,QDo),e(z2,HDo),e(H,UDo),e(H,W2),e(W2,Gge),e(Gge,JDo),e(W2,YDo),e(W2,YO),e(YO,KDo),e(W2,ZDo),e(H,eGo),e(H,Q2),e(Q2,Oge),e(Oge,oGo),e(Q2,rGo),e(Q2,KO),e(KO,tGo),e(Q2,aGo),e(H,nGo),e(H,H2),e(H2,Vge),e(Vge,sGo),e(H2,lGo),e(H2,ZO),e(ZO,iGo),e(H2,dGo),e(H,cGo),e(H,U2),e(U2,Xge),e(Xge,fGo),e(U2,mGo),e(U2,eV),e(eV,gGo),e(U2,hGo),e(H,pGo),e(H,J2),e(J2,zge),e(zge,uGo),e(J2,_Go),e(J2,oV),e(oV,bGo),e(J2,vGo),e(ao,FGo),e(ao,Y2),e(Y2,TGo),e(Y2,Wge),e(Wge,MGo),e(Y2,EGo),e(Y2,Qge),e(Qge,CGo),e(ao,wGo),M(K2,ao,null),b(f,Bqe,_),b(f,Ki,_),e(Ki,Z2),e(Z2,Hge),M(Sy,Hge,null),e(Ki,AGo),e(Ki,Uge),e(Uge,yGo),b(f,Iqe,_),b(f,qo,_),M(Ry,qo,null),e(qo,LGo),e(qo,Zi),e(Zi,xGo),e(Zi,rV),e(rV,$Go),e(Zi,kGo),e(Zi,tV),e(tV,SGo),e(Zi,RGo),e(qo,PGo),e(qo,Py),e(Py,BGo),e(Py,Jge),e(Jge,IGo),e(Py,qGo),e(qo,NGo),e(qo,mt),M(By,mt,null),e(mt,jGo),e(mt,Yge),e(Yge,DGo),e(mt,GGo),e(mt,ed),e(ed,OGo),e(ed,Kge),e(Kge,VGo),e(ed,XGo),e(ed,aV),e(aV,zGo),e(ed,WGo),e(mt,QGo),M(ev,mt,null),e(qo,HGo),e(qo,no),M(Iy,no,null),e(no,UGo),e(no,Zge),e(Zge,JGo),e(no,YGo),e(no,qa),e(qa,KGo),e(qa,ehe),e(ehe,ZGo),e(qa,eOo),e(qa,ohe),e(ohe,oOo),e(qa,rOo),e(qa,rhe),e(rhe,tOo),e(qa,aOo),e(no,nOo),e(no,O),e(O,ov),e(ov,the),e(the,sOo),e(ov,lOo),e(ov,nV),e(nV,iOo),e(ov,dOo),e(O,cOo),e(O,rv),e(rv,ahe),e(ahe,fOo),e(rv,mOo),e(rv,sV),e(sV,gOo),e(rv,hOo),e(O,pOo),e(O,tv),e(tv,nhe),e(nhe,uOo),e(tv,_Oo),e(tv,lV),e(lV,bOo),e(tv,vOo),e(O,FOo),e(O,av),e(av,she),e(she,TOo),e(av,MOo),e(av,iV),e(iV,EOo),e(av,COo),e(O,wOo),e(O,nv),e(nv,lhe),e(lhe,AOo),e(nv,yOo),e(nv,dV),e(dV,LOo),e(nv,xOo),e(O,$Oo),e(O,sv),e(sv,ihe),e(ihe,kOo),e(sv,SOo),e(sv,cV),e(cV,ROo),e(sv,POo),e(O,BOo),e(O,lv),e(lv,dhe),e(dhe,IOo),e(lv,qOo),e(lv,fV),e(fV,NOo),e(lv,jOo),e(O,DOo),e(O,iv),e(iv,che),e(che,GOo),e(iv,OOo),e(iv,mV),e(mV,VOo),e(iv,XOo),e(O,zOo),e(O,dv),e(dv,fhe),e(fhe,WOo),e(dv,QOo),e(dv,gV),e(gV,HOo),e(dv,UOo),e(O,JOo),e(O,cv),e(cv,mhe),e(mhe,YOo),e(cv,KOo),e(cv,hV),e(hV,ZOo),e(cv,eVo),e(O,oVo),e(O,fv),e(fv,ghe),e(ghe,rVo),e(fv,tVo),e(fv,pV),e(pV,aVo),e(fv,nVo),e(O,sVo),e(O,mv),e(mv,hhe),e(hhe,lVo),e(mv,iVo),e(mv,uV),e(uV,dVo),e(mv,cVo),e(O,fVo),e(O,gv),e(gv,phe),e(phe,mVo),e(gv,gVo),e(gv,_V),e(_V,hVo),e(gv,pVo),e(O,uVo),e(O,hv),e(hv,uhe),e(uhe,_Vo),e(hv,bVo),e(hv,bV),e(bV,vVo),e(hv,FVo),e(O,TVo),e(O,pv),e(pv,_he),e(_he,MVo),e(pv,EVo),e(pv,vV),e(vV,CVo),e(pv,wVo),e(O,AVo),e(O,uv),e(uv,bhe),e(bhe,yVo),e(uv,LVo),e(uv,FV),e(FV,xVo),e(uv,$Vo),e(O,kVo),e(O,_v),e(_v,vhe),e(vhe,SVo),e(_v,RVo),e(_v,TV),e(TV,PVo),e(_v,BVo),e(O,IVo),e(O,bv),e(bv,Fhe),e(Fhe,qVo),e(bv,NVo),e(bv,MV),e(MV,jVo),e(bv,DVo),e(O,GVo),e(O,vv),e(vv,The),e(The,OVo),e(vv,VVo),e(vv,EV),e(EV,XVo),e(vv,zVo),e(O,WVo),e(O,Fv),e(Fv,Mhe),e(Mhe,QVo),e(Fv,HVo),e(Fv,CV),e(CV,UVo),e(Fv,JVo),e(O,YVo),e(O,Tv),e(Tv,Ehe),e(Ehe,KVo),e(Tv,ZVo),e(Tv,wV),e(wV,eXo),e(Tv,oXo),e(O,rXo),e(O,Mv),e(Mv,Che),e(Che,tXo),e(Mv,aXo),e(Mv,AV),e(AV,nXo),e(Mv,sXo),e(O,lXo),e(O,Ev),e(Ev,whe),e(whe,iXo),e(Ev,dXo),e(Ev,yV),e(yV,cXo),e(Ev,fXo),e(O,mXo),e(O,Cv),e(Cv,Ahe),e(Ahe,gXo),e(Cv,hXo),e(Cv,LV),e(LV,pXo),e(Cv,uXo),e(O,_Xo),e(O,wv),e(wv,yhe),e(yhe,bXo),e(wv,vXo),e(wv,xV),e(xV,FXo),e(wv,TXo),e(O,MXo),e(O,Av),e(Av,Lhe),e(Lhe,EXo),e(Av,CXo),e(Av,$V),e($V,wXo),e(Av,AXo),e(O,yXo),e(O,yv),e(yv,xhe),e(xhe,LXo),e(yv,xXo),e(yv,kV),e(kV,$Xo),e(yv,kXo),e(O,SXo),e(O,Lv),e(Lv,$he),e($he,RXo),e(Lv,PXo),e(Lv,SV),e(SV,BXo),e(Lv,IXo),e(O,qXo),e(O,xv),e(xv,khe),e(khe,NXo),e(xv,jXo),e(xv,RV),e(RV,DXo),e(xv,GXo),e(O,OXo),e(O,$v),e($v,She),e(She,VXo),e($v,XXo),e($v,PV),e(PV,zXo),e($v,WXo),e(O,QXo),e(O,kv),e(kv,Rhe),e(Rhe,HXo),e(kv,UXo),e(kv,BV),e(BV,JXo),e(kv,YXo),e(O,KXo),e(O,Sv),e(Sv,Phe),e(Phe,ZXo),e(Sv,ezo),e(Sv,IV),e(IV,ozo),e(Sv,rzo),e(O,tzo),e(O,Rv),e(Rv,Bhe),e(Bhe,azo),e(Rv,nzo),e(Rv,qV),e(qV,szo),e(Rv,lzo),e(O,izo),e(O,Pv),e(Pv,Ihe),e(Ihe,dzo),e(Pv,czo),e(Pv,NV),e(NV,fzo),e(Pv,mzo),e(O,gzo),e(O,Bv),e(Bv,qhe),e(qhe,hzo),e(Bv,pzo),e(Bv,jV),e(jV,uzo),e(Bv,_zo),e(O,bzo),e(O,Iv),e(Iv,Nhe),e(Nhe,vzo),e(Iv,Fzo),e(Iv,DV),e(DV,Tzo),e(Iv,Mzo),e(O,Ezo),e(O,qv),e(qv,jhe),e(jhe,Czo),e(qv,wzo),e(qv,GV),e(GV,Azo),e(qv,yzo),e(O,Lzo),e(O,Nv),e(Nv,Dhe),e(Dhe,xzo),e(Nv,$zo),e(Nv,OV),e(OV,kzo),e(Nv,Szo),e(O,Rzo),e(O,jv),e(jv,Ghe),e(Ghe,Pzo),e(jv,Bzo),e(jv,VV),e(VV,Izo),e(jv,qzo),e(O,Nzo),e(O,Dv),e(Dv,Ohe),e(Ohe,jzo),e(Dv,Dzo),e(Dv,XV),e(XV,Gzo),e(Dv,Ozo),e(no,Vzo),e(no,Gv),e(Gv,Xzo),e(Gv,Vhe),e(Vhe,zzo),e(Gv,Wzo),e(Gv,Xhe),e(Xhe,Qzo),e(no,Hzo),M(Ov,no,null),b(f,qqe,_),b(f,od,_),e(od,Vv),e(Vv,zhe),M(qy,zhe,null),e(od,Uzo),e(od,Whe),e(Whe,Jzo),b(f,Nqe,_),b(f,No,_),M(Ny,No,null),e(No,Yzo),e(No,rd),e(rd,Kzo),e(rd,zV),e(zV,Zzo),e(rd,eWo),e(rd,WV),e(WV,oWo),e(rd,rWo),e(No,tWo),e(No,jy),e(jy,aWo),e(jy,Qhe),e(Qhe,nWo),e(jy,sWo),e(No,lWo),e(No,gt),M(Dy,gt,null),e(gt,iWo),e(gt,Hhe),e(Hhe,dWo),e(gt,cWo),e(gt,td),e(td,fWo),e(td,Uhe),e(Uhe,mWo),e(td,gWo),e(td,QV),e(QV,hWo),e(td,pWo),e(gt,uWo),M(Xv,gt,null),e(No,_Wo),e(No,so),M(Gy,so,null),e(so,bWo),e(so,Jhe),e(Jhe,vWo),e(so,FWo),e(so,Na),e(Na,TWo),e(Na,Yhe),e(Yhe,MWo),e(Na,EWo),e(Na,Khe),e(Khe,CWo),e(Na,wWo),e(Na,Zhe),e(Zhe,AWo),e(Na,yWo),e(so,LWo),e(so,epe),e(epe,zv),e(zv,ope),e(ope,xWo),e(zv,$Wo),e(zv,HV),e(HV,kWo),e(zv,SWo),e(so,RWo),e(so,Wv),e(Wv,PWo),e(Wv,rpe),e(rpe,BWo),e(Wv,IWo),e(Wv,tpe),e(tpe,qWo),e(so,NWo),M(Qv,so,null),b(f,jqe,_),b(f,ad,_),e(ad,Hv),e(Hv,ape),M(Oy,ape,null),e(ad,jWo),e(ad,npe),e(npe,DWo),b(f,Dqe,_),b(f,jo,_),M(Vy,jo,null),e(jo,GWo),e(jo,nd),e(nd,OWo),e(nd,UV),e(UV,VWo),e(nd,XWo),e(nd,JV),e(JV,zWo),e(nd,WWo),e(jo,QWo),e(jo,Xy),e(Xy,HWo),e(Xy,spe),e(spe,UWo),e(Xy,JWo),e(jo,YWo),e(jo,ht),M(zy,ht,null),e(ht,KWo),e(ht,lpe),e(lpe,ZWo),e(ht,eQo),e(ht,sd),e(sd,oQo),e(sd,ipe),e(ipe,rQo),e(sd,tQo),e(sd,YV),e(YV,aQo),e(sd,nQo),e(ht,sQo),M(Uv,ht,null),e(jo,lQo),e(jo,lo),M(Wy,lo,null),e(lo,iQo),e(lo,dpe),e(dpe,dQo),e(lo,cQo),e(lo,ja),e(ja,fQo),e(ja,cpe),e(cpe,mQo),e(ja,gQo),e(ja,fpe),e(fpe,hQo),e(ja,pQo),e(ja,mpe),e(mpe,uQo),e(ja,_Qo),e(lo,bQo),e(lo,Fe),e(Fe,Jv),e(Jv,gpe),e(gpe,vQo),e(Jv,FQo),e(Jv,KV),e(KV,TQo),e(Jv,MQo),e(Fe,EQo),e(Fe,Yv),e(Yv,hpe),e(hpe,CQo),e(Yv,wQo),e(Yv,ZV),e(ZV,AQo),e(Yv,yQo),e(Fe,LQo),e(Fe,Kv),e(Kv,ppe),e(ppe,xQo),e(Kv,$Qo),e(Kv,eX),e(eX,kQo),e(Kv,SQo),e(Fe,RQo),e(Fe,Bs),e(Bs,upe),e(upe,PQo),e(Bs,BQo),e(Bs,oX),e(oX,IQo),e(Bs,qQo),e(Bs,rX),e(rX,NQo),e(Bs,jQo),e(Fe,DQo),e(Fe,Zv),e(Zv,_pe),e(_pe,GQo),e(Zv,OQo),e(Zv,tX),e(tX,VQo),e(Zv,XQo),e(Fe,zQo),e(Fe,pt),e(pt,bpe),e(bpe,WQo),e(pt,QQo),e(pt,aX),e(aX,HQo),e(pt,UQo),e(pt,nX),e(nX,JQo),e(pt,YQo),e(pt,sX),e(sX,KQo),e(pt,ZQo),e(Fe,eHo),e(Fe,eF),e(eF,vpe),e(vpe,oHo),e(eF,rHo),e(eF,lX),e(lX,tHo),e(eF,aHo),e(Fe,nHo),e(Fe,oF),e(oF,Fpe),e(Fpe,sHo),e(oF,lHo),e(oF,iX),e(iX,iHo),e(oF,dHo),e(Fe,cHo),e(Fe,rF),e(rF,Tpe),e(Tpe,fHo),e(rF,mHo),e(rF,dX),e(dX,gHo),e(rF,hHo),e(Fe,pHo),e(Fe,tF),e(tF,Mpe),e(Mpe,uHo),e(tF,_Ho),e(tF,cX),e(cX,bHo),e(tF,vHo),e(Fe,FHo),e(Fe,aF),e(aF,Epe),e(Epe,THo),e(aF,MHo),e(aF,fX),e(fX,EHo),e(aF,CHo),e(Fe,wHo),e(Fe,nF),e(nF,Cpe),e(Cpe,AHo),e(nF,yHo),e(nF,mX),e(mX,LHo),e(nF,xHo),e(Fe,$Ho),e(Fe,sF),e(sF,wpe),e(wpe,kHo),e(sF,SHo),e(sF,gX),e(gX,RHo),e(sF,PHo),e(lo,BHo),e(lo,lF),e(lF,IHo),e(lF,Ape),e(Ape,qHo),e(lF,NHo),e(lF,ype),e(ype,jHo),e(lo,DHo),M(iF,lo,null),b(f,Gqe,_),b(f,ld,_),e(ld,dF),e(dF,Lpe),M(Qy,Lpe,null),e(ld,GHo),e(ld,xpe),e(xpe,OHo),b(f,Oqe,_),b(f,Do,_),M(Hy,Do,null),e(Do,VHo),e(Do,id),e(id,XHo),e(id,hX),e(hX,zHo),e(id,WHo),e(id,pX),e(pX,QHo),e(id,HHo),e(Do,UHo),e(Do,Uy),e(Uy,JHo),e(Uy,$pe),e($pe,YHo),e(Uy,KHo),e(Do,ZHo),e(Do,ut),M(Jy,ut,null),e(ut,eUo),e(ut,kpe),e(kpe,oUo),e(ut,rUo),e(ut,dd),e(dd,tUo),e(dd,Spe),e(Spe,aUo),e(dd,nUo),e(dd,uX),e(uX,sUo),e(dd,lUo),e(ut,iUo),M(cF,ut,null),e(Do,dUo),e(Do,io),M(Yy,io,null),e(io,cUo),e(io,Rpe),e(Rpe,fUo),e(io,mUo),e(io,Da),e(Da,gUo),e(Da,Ppe),e(Ppe,hUo),e(Da,pUo),e(Da,Bpe),e(Bpe,uUo),e(Da,_Uo),e(Da,Ipe),e(Ipe,bUo),e(Da,vUo),e(io,FUo),e(io,qpe),e(qpe,fF),e(fF,Npe),e(Npe,TUo),e(fF,MUo),e(fF,_X),e(_X,EUo),e(fF,CUo),e(io,wUo),e(io,mF),e(mF,AUo),e(mF,jpe),e(jpe,yUo),e(mF,LUo),e(mF,Dpe),e(Dpe,xUo),e(io,$Uo),M(gF,io,null),b(f,Vqe,_),b(f,cd,_),e(cd,hF),e(hF,Gpe),M(Ky,Gpe,null),e(cd,kUo),e(cd,Ope),e(Ope,SUo),b(f,Xqe,_),b(f,Go,_),M(Zy,Go,null),e(Go,RUo),e(Go,fd),e(fd,PUo),e(fd,bX),e(bX,BUo),e(fd,IUo),e(fd,vX),e(vX,qUo),e(fd,NUo),e(Go,jUo),e(Go,eL),e(eL,DUo),e(eL,Vpe),e(Vpe,GUo),e(eL,OUo),e(Go,VUo),e(Go,_t),M(oL,_t,null),e(_t,XUo),e(_t,Xpe),e(Xpe,zUo),e(_t,WUo),e(_t,md),e(md,QUo),e(md,zpe),e(zpe,HUo),e(md,UUo),e(md,FX),e(FX,JUo),e(md,YUo),e(_t,KUo),M(pF,_t,null),e(Go,ZUo),e(Go,co),M(rL,co,null),e(co,eJo),e(co,Wpe),e(Wpe,oJo),e(co,rJo),e(co,Ga),e(Ga,tJo),e(Ga,Qpe),e(Qpe,aJo),e(Ga,nJo),e(Ga,Hpe),e(Hpe,sJo),e(Ga,lJo),e(Ga,Upe),e(Upe,iJo),e(Ga,dJo),e(co,cJo),e(co,ke),e(ke,uF),e(uF,Jpe),e(Jpe,fJo),e(uF,mJo),e(uF,TX),e(TX,gJo),e(uF,hJo),e(ke,pJo),e(ke,_F),e(_F,Ype),e(Ype,uJo),e(_F,_Jo),e(_F,MX),e(MX,bJo),e(_F,vJo),e(ke,FJo),e(ke,bF),e(bF,Kpe),e(Kpe,TJo),e(bF,MJo),e(bF,EX),e(EX,EJo),e(bF,CJo),e(ke,wJo),e(ke,vF),e(vF,Zpe),e(Zpe,AJo),e(vF,yJo),e(vF,CX),e(CX,LJo),e(vF,xJo),e(ke,$Jo),e(ke,FF),e(FF,eue),e(eue,kJo),e(FF,SJo),e(FF,wX),e(wX,RJo),e(FF,PJo),e(ke,BJo),e(ke,TF),e(TF,oue),e(oue,IJo),e(TF,qJo),e(TF,AX),e(AX,NJo),e(TF,jJo),e(ke,DJo),e(ke,MF),e(MF,rue),e(rue,GJo),e(MF,OJo),e(MF,yX),e(yX,VJo),e(MF,XJo),e(ke,zJo),e(ke,EF),e(EF,tue),e(tue,WJo),e(EF,QJo),e(EF,LX),e(LX,HJo),e(EF,UJo),e(ke,JJo),e(ke,CF),e(CF,aue),e(aue,YJo),e(CF,KJo),e(CF,xX),e(xX,ZJo),e(CF,eYo),e(co,oYo),e(co,wF),e(wF,rYo),e(wF,nue),e(nue,tYo),e(wF,aYo),e(wF,sue),e(sue,nYo),e(co,sYo),M(AF,co,null),b(f,zqe,_),b(f,gd,_),e(gd,yF),e(yF,lue),M(tL,lue,null),e(gd,lYo),e(gd,iue),e(iue,iYo),b(f,Wqe,_),b(f,Oo,_),M(aL,Oo,null),e(Oo,dYo),e(Oo,hd),e(hd,cYo),e(hd,$X),e($X,fYo),e(hd,mYo),e(hd,kX),e(kX,gYo),e(hd,hYo),e(Oo,pYo),e(Oo,nL),e(nL,uYo),e(nL,due),e(due,_Yo),e(nL,bYo),e(Oo,vYo),e(Oo,bt),M(sL,bt,null),e(bt,FYo),e(bt,cue),e(cue,TYo),e(bt,MYo),e(bt,pd),e(pd,EYo),e(pd,fue),e(fue,CYo),e(pd,wYo),e(pd,SX),e(SX,AYo),e(pd,yYo),e(bt,LYo),M(LF,bt,null),e(Oo,xYo),e(Oo,fo),M(lL,fo,null),e(fo,$Yo),e(fo,mue),e(mue,kYo),e(fo,SYo),e(fo,Oa),e(Oa,RYo),e(Oa,gue),e(gue,PYo),e(Oa,BYo),e(Oa,hue),e(hue,IYo),e(Oa,qYo),e(Oa,pue),e(pue,NYo),e(Oa,jYo),e(fo,DYo),e(fo,Kr),e(Kr,xF),e(xF,uue),e(uue,GYo),e(xF,OYo),e(xF,RX),e(RX,VYo),e(xF,XYo),e(Kr,zYo),e(Kr,$F),e($F,_ue),e(_ue,WYo),e($F,QYo),e($F,PX),e(PX,HYo),e($F,UYo),e(Kr,JYo),e(Kr,kF),e(kF,bue),e(bue,YYo),e(kF,KYo),e(kF,BX),e(BX,ZYo),e(kF,eKo),e(Kr,oKo),e(Kr,SF),e(SF,vue),e(vue,rKo),e(SF,tKo),e(SF,IX),e(IX,aKo),e(SF,nKo),e(Kr,sKo),e(Kr,RF),e(RF,Fue),e(Fue,lKo),e(RF,iKo),e(RF,qX),e(qX,dKo),e(RF,cKo),e(fo,fKo),e(fo,PF),e(PF,mKo),e(PF,Tue),e(Tue,gKo),e(PF,hKo),e(PF,Mue),e(Mue,pKo),e(fo,uKo),M(BF,fo,null),b(f,Qqe,_),b(f,ud,_),e(ud,IF),e(IF,Eue),M(iL,Eue,null),e(ud,_Ko),e(ud,Cue),e(Cue,bKo),b(f,Hqe,_),b(f,Vo,_),M(dL,Vo,null),e(Vo,vKo),e(Vo,_d),e(_d,FKo),e(_d,NX),e(NX,TKo),e(_d,MKo),e(_d,jX),e(jX,EKo),e(_d,CKo),e(Vo,wKo),e(Vo,cL),e(cL,AKo),e(cL,wue),e(wue,yKo),e(cL,LKo),e(Vo,xKo),e(Vo,vt),M(fL,vt,null),e(vt,$Ko),e(vt,Aue),e(Aue,kKo),e(vt,SKo),e(vt,bd),e(bd,RKo),e(bd,yue),e(yue,PKo),e(bd,BKo),e(bd,DX),e(DX,IKo),e(bd,qKo),e(vt,NKo),M(qF,vt,null),e(Vo,jKo),e(Vo,mo),M(mL,mo,null),e(mo,DKo),e(mo,Lue),e(Lue,GKo),e(mo,OKo),e(mo,Va),e(Va,VKo),e(Va,xue),e(xue,XKo),e(Va,zKo),e(Va,$ue),e($ue,WKo),e(Va,QKo),e(Va,kue),e(kue,HKo),e(Va,UKo),e(mo,JKo),e(mo,Se),e(Se,NF),e(NF,Sue),e(Sue,YKo),e(NF,KKo),e(NF,GX),e(GX,ZKo),e(NF,eZo),e(Se,oZo),e(Se,jF),e(jF,Rue),e(Rue,rZo),e(jF,tZo),e(jF,OX),e(OX,aZo),e(jF,nZo),e(Se,sZo),e(Se,DF),e(DF,Pue),e(Pue,lZo),e(DF,iZo),e(DF,VX),e(VX,dZo),e(DF,cZo),e(Se,fZo),e(Se,GF),e(GF,Bue),e(Bue,mZo),e(GF,gZo),e(GF,XX),e(XX,hZo),e(GF,pZo),e(Se,uZo),e(Se,OF),e(OF,Iue),e(Iue,_Zo),e(OF,bZo),e(OF,zX),e(zX,vZo),e(OF,FZo),e(Se,TZo),e(Se,VF),e(VF,que),e(que,MZo),e(VF,EZo),e(VF,WX),e(WX,CZo),e(VF,wZo),e(Se,AZo),e(Se,XF),e(XF,Nue),e(Nue,yZo),e(XF,LZo),e(XF,QX),e(QX,xZo),e(XF,$Zo),e(Se,kZo),e(Se,zF),e(zF,jue),e(jue,SZo),e(zF,RZo),e(zF,HX),e(HX,PZo),e(zF,BZo),e(Se,IZo),e(Se,WF),e(WF,Due),e(Due,qZo),e(WF,NZo),e(WF,UX),e(UX,jZo),e(WF,DZo),e(mo,GZo),e(mo,QF),e(QF,OZo),e(QF,Gue),e(Gue,VZo),e(QF,XZo),e(QF,Oue),e(Oue,zZo),e(mo,WZo),M(HF,mo,null),b(f,Uqe,_),b(f,vd,_),e(vd,UF),e(UF,Vue),M(gL,Vue,null),e(vd,QZo),e(vd,Xue),e(Xue,HZo),b(f,Jqe,_),b(f,Xo,_),M(hL,Xo,null),e(Xo,UZo),e(Xo,Fd),e(Fd,JZo),e(Fd,JX),e(JX,YZo),e(Fd,KZo),e(Fd,YX),e(YX,ZZo),e(Fd,eer),e(Xo,oer),e(Xo,pL),e(pL,rer),e(pL,zue),e(zue,ter),e(pL,aer),e(Xo,ner),e(Xo,Ft),M(uL,Ft,null),e(Ft,ser),e(Ft,Wue),e(Wue,ler),e(Ft,ier),e(Ft,Td),e(Td,der),e(Td,Que),e(Que,cer),e(Td,fer),e(Td,KX),e(KX,mer),e(Td,ger),e(Ft,her),M(JF,Ft,null),e(Xo,per),e(Xo,go),M(_L,go,null),e(go,uer),e(go,Hue),e(Hue,_er),e(go,ber),e(go,Xa),e(Xa,ver),e(Xa,Uue),e(Uue,Fer),e(Xa,Ter),e(Xa,Jue),e(Jue,Mer),e(Xa,Eer),e(Xa,Yue),e(Yue,Cer),e(Xa,wer),e(go,Aer),e(go,bL),e(bL,YF),e(YF,Kue),e(Kue,yer),e(YF,Ler),e(YF,ZX),e(ZX,xer),e(YF,$er),e(bL,ker),e(bL,KF),e(KF,Zue),e(Zue,Ser),e(KF,Rer),e(KF,ez),e(ez,Per),e(KF,Ber),e(go,Ier),e(go,ZF),e(ZF,qer),e(ZF,e_e),e(e_e,Ner),e(ZF,jer),e(ZF,o_e),e(o_e,Der),e(go,Ger),M(e6,go,null),b(f,Yqe,_),b(f,Md,_),e(Md,o6),e(o6,r_e),M(vL,r_e,null),e(Md,Oer),e(Md,t_e),e(t_e,Ver),b(f,Kqe,_),b(f,zo,_),M(FL,zo,null),e(zo,Xer),e(zo,Ed),e(Ed,zer),e(Ed,oz),e(oz,Wer),e(Ed,Qer),e(Ed,rz),e(rz,Her),e(Ed,Uer),e(zo,Jer),e(zo,TL),e(TL,Yer),e(TL,a_e),e(a_e,Ker),e(TL,Zer),e(zo,eor),e(zo,Tt),M(ML,Tt,null),e(Tt,oor),e(Tt,n_e),e(n_e,ror),e(Tt,tor),e(Tt,Cd),e(Cd,aor),e(Cd,s_e),e(s_e,nor),e(Cd,sor),e(Cd,tz),e(tz,lor),e(Cd,ior),e(Tt,dor),M(r6,Tt,null),e(zo,cor),e(zo,ho),M(EL,ho,null),e(ho,mor),e(ho,l_e),e(l_e,gor),e(ho,hor),e(ho,za),e(za,por),e(za,i_e),e(i_e,uor),e(za,_or),e(za,d_e),e(d_e,bor),e(za,vor),e(za,c_e),e(c_e,For),e(za,Tor),e(ho,Mor),e(ho,Zr),e(Zr,t6),e(t6,f_e),e(f_e,Eor),e(t6,Cor),e(t6,az),e(az,wor),e(t6,Aor),e(Zr,yor),e(Zr,a6),e(a6,m_e),e(m_e,Lor),e(a6,xor),e(a6,nz),e(nz,$or),e(a6,kor),e(Zr,Sor),e(Zr,n6),e(n6,g_e),e(g_e,Ror),e(n6,Por),e(n6,sz),e(sz,Bor),e(n6,Ior),e(Zr,qor),e(Zr,s6),e(s6,h_e),e(h_e,Nor),e(s6,jor),e(s6,lz),e(lz,Dor),e(s6,Gor),e(Zr,Oor),e(Zr,l6),e(l6,p_e),e(p_e,Vor),e(l6,Xor),e(l6,iz),e(iz,zor),e(l6,Wor),e(ho,Qor),e(ho,i6),e(i6,Hor),e(i6,u_e),e(u_e,Uor),e(i6,Jor),e(i6,__e),e(__e,Yor),e(ho,Kor),M(d6,ho,null),b(f,Zqe,_),b(f,wd,_),e(wd,c6),e(c6,b_e),M(CL,b_e,null),e(wd,Zor),e(wd,v_e),e(v_e,err),b(f,eNe,_),b(f,Wo,_),M(wL,Wo,null),e(Wo,orr),e(Wo,Ad),e(Ad,rrr),e(Ad,dz),e(dz,trr),e(Ad,arr),e(Ad,cz),e(cz,nrr),e(Ad,srr),e(Wo,lrr),e(Wo,AL),e(AL,irr),e(AL,F_e),e(F_e,drr),e(AL,crr),e(Wo,frr),e(Wo,Mt),M(yL,Mt,null),e(Mt,mrr),e(Mt,T_e),e(T_e,grr),e(Mt,hrr),e(Mt,yd),e(yd,prr),e(yd,M_e),e(M_e,urr),e(yd,_rr),e(yd,fz),e(fz,brr),e(yd,vrr),e(Mt,Frr),M(f6,Mt,null),e(Wo,Trr),e(Wo,po),M(LL,po,null),e(po,Mrr),e(po,E_e),e(E_e,Err),e(po,Crr),e(po,Wa),e(Wa,wrr),e(Wa,C_e),e(C_e,Arr),e(Wa,yrr),e(Wa,w_e),e(w_e,Lrr),e(Wa,xrr),e(Wa,A_e),e(A_e,$rr),e(Wa,krr),e(po,Srr),e(po,Ld),e(Ld,m6),e(m6,y_e),e(y_e,Rrr),e(m6,Prr),e(m6,mz),e(mz,Brr),e(m6,Irr),e(Ld,qrr),e(Ld,g6),e(g6,L_e),e(L_e,Nrr),e(g6,jrr),e(g6,gz),e(gz,Drr),e(g6,Grr),e(Ld,Orr),e(Ld,h6),e(h6,x_e),e(x_e,Vrr),e(h6,Xrr),e(h6,hz),e(hz,zrr),e(h6,Wrr),e(po,Qrr),e(po,p6),e(p6,Hrr),e(p6,$_e),e($_e,Urr),e(p6,Jrr),e(p6,k_e),e(k_e,Yrr),e(po,Krr),M(u6,po,null),b(f,oNe,_),b(f,xd,_),e(xd,_6),e(_6,S_e),M(xL,S_e,null),e(xd,Zrr),e(xd,R_e),e(R_e,etr),b(f,rNe,_),b(f,Qo,_),M($L,Qo,null),e(Qo,otr),e(Qo,$d),e($d,rtr),e($d,pz),e(pz,ttr),e($d,atr),e($d,uz),e(uz,ntr),e($d,str),e(Qo,ltr),e(Qo,kL),e(kL,itr),e(kL,P_e),e(P_e,dtr),e(kL,ctr),e(Qo,ftr),e(Qo,Et),M(SL,Et,null),e(Et,mtr),e(Et,B_e),e(B_e,gtr),e(Et,htr),e(Et,kd),e(kd,ptr),e(kd,I_e),e(I_e,utr),e(kd,_tr),e(kd,_z),e(_z,btr),e(kd,vtr),e(Et,Ftr),M(b6,Et,null),e(Qo,Ttr),e(Qo,uo),M(RL,uo,null),e(uo,Mtr),e(uo,q_e),e(q_e,Etr),e(uo,Ctr),e(uo,Qa),e(Qa,wtr),e(Qa,N_e),e(N_e,Atr),e(Qa,ytr),e(Qa,j_e),e(j_e,Ltr),e(Qa,xtr),e(Qa,D_e),e(D_e,$tr),e(Qa,ktr),e(uo,Str),e(uo,PL),e(PL,v6),e(v6,G_e),e(G_e,Rtr),e(v6,Ptr),e(v6,bz),e(bz,Btr),e(v6,Itr),e(PL,qtr),e(PL,F6),e(F6,O_e),e(O_e,Ntr),e(F6,jtr),e(F6,vz),e(vz,Dtr),e(F6,Gtr),e(uo,Otr),e(uo,T6),e(T6,Vtr),e(T6,V_e),e(V_e,Xtr),e(T6,ztr),e(T6,X_e),e(X_e,Wtr),e(uo,Qtr),M(M6,uo,null),b(f,tNe,_),b(f,Sd,_),e(Sd,E6),e(E6,z_e),M(BL,z_e,null),e(Sd,Htr),e(Sd,W_e),e(W_e,Utr),b(f,aNe,_),b(f,Ho,_),M(IL,Ho,null),e(Ho,Jtr),e(Ho,Rd),e(Rd,Ytr),e(Rd,Fz),e(Fz,Ktr),e(Rd,Ztr),e(Rd,Tz),e(Tz,ear),e(Rd,oar),e(Ho,rar),e(Ho,qL),e(qL,tar),e(qL,Q_e),e(Q_e,aar),e(qL,nar),e(Ho,sar),e(Ho,Ct),M(NL,Ct,null),e(Ct,lar),e(Ct,H_e),e(H_e,iar),e(Ct,dar),e(Ct,Pd),e(Pd,car),e(Pd,U_e),e(U_e,far),e(Pd,mar),e(Pd,Mz),e(Mz,gar),e(Pd,har),e(Ct,par),M(C6,Ct,null),e(Ho,uar),e(Ho,_o),M(jL,_o,null),e(_o,_ar),e(_o,J_e),e(J_e,bar),e(_o,Far),e(_o,Ha),e(Ha,Tar),e(Ha,Y_e),e(Y_e,Mar),e(Ha,Ear),e(Ha,K_e),e(K_e,Car),e(Ha,war),e(Ha,Z_e),e(Z_e,Aar),e(Ha,yar),e(_o,Lar),e(_o,e0e),e(e0e,w6),e(w6,o0e),e(o0e,xar),e(w6,$ar),e(w6,Ez),e(Ez,kar),e(w6,Sar),e(_o,Rar),e(_o,A6),e(A6,Par),e(A6,r0e),e(r0e,Bar),e(A6,Iar),e(A6,t0e),e(t0e,qar),e(_o,Nar),M(y6,_o,null),b(f,nNe,_),b(f,Bd,_),e(Bd,L6),e(L6,a0e),M(DL,a0e,null),e(Bd,jar),e(Bd,n0e),e(n0e,Dar),b(f,sNe,_),b(f,Uo,_),M(GL,Uo,null),e(Uo,Gar),e(Uo,Id),e(Id,Oar),e(Id,Cz),e(Cz,Var),e(Id,Xar),e(Id,wz),e(wz,zar),e(Id,War),e(Uo,Qar),e(Uo,OL),e(OL,Har),e(OL,s0e),e(s0e,Uar),e(OL,Jar),e(Uo,Yar),e(Uo,wt),M(VL,wt,null),e(wt,Kar),e(wt,l0e),e(l0e,Zar),e(wt,enr),e(wt,qd),e(qd,onr),e(qd,i0e),e(i0e,rnr),e(qd,tnr),e(qd,Az),e(Az,anr),e(qd,nnr),e(wt,snr),M(x6,wt,null),e(Uo,lnr),e(Uo,bo),M(XL,bo,null),e(bo,inr),e(bo,d0e),e(d0e,dnr),e(bo,cnr),e(bo,Ua),e(Ua,fnr),e(Ua,c0e),e(c0e,mnr),e(Ua,gnr),e(Ua,f0e),e(f0e,hnr),e(Ua,pnr),e(Ua,m0e),e(m0e,unr),e(Ua,_nr),e(bo,bnr),e(bo,Ja),e(Ja,$6),e($6,g0e),e(g0e,vnr),e($6,Fnr),e($6,yz),e(yz,Tnr),e($6,Mnr),e(Ja,Enr),e(Ja,k6),e(k6,h0e),e(h0e,Cnr),e(k6,wnr),e(k6,Lz),e(Lz,Anr),e(k6,ynr),e(Ja,Lnr),e(Ja,S6),e(S6,p0e),e(p0e,xnr),e(S6,$nr),e(S6,xz),e(xz,knr),e(S6,Snr),e(Ja,Rnr),e(Ja,R6),e(R6,u0e),e(u0e,Pnr),e(R6,Bnr),e(R6,$z),e($z,Inr),e(R6,qnr),e(bo,Nnr),e(bo,P6),e(P6,jnr),e(P6,_0e),e(_0e,Dnr),e(P6,Gnr),e(P6,b0e),e(b0e,Onr),e(bo,Vnr),M(B6,bo,null),b(f,lNe,_),b(f,Nd,_),e(Nd,I6),e(I6,v0e),M(zL,v0e,null),e(Nd,Xnr),e(Nd,F0e),e(F0e,znr),b(f,iNe,_),b(f,Jo,_),M(WL,Jo,null),e(Jo,Wnr),e(Jo,jd),e(jd,Qnr),e(jd,kz),e(kz,Hnr),e(jd,Unr),e(jd,Sz),e(Sz,Jnr),e(jd,Ynr),e(Jo,Knr),e(Jo,QL),e(QL,Znr),e(QL,T0e),e(T0e,esr),e(QL,osr),e(Jo,rsr),e(Jo,At),M(HL,At,null),e(At,tsr),e(At,M0e),e(M0e,asr),e(At,nsr),e(At,Dd),e(Dd,ssr),e(Dd,E0e),e(E0e,lsr),e(Dd,isr),e(Dd,Rz),e(Rz,dsr),e(Dd,csr),e(At,fsr),M(q6,At,null),e(Jo,msr),e(Jo,vo),M(UL,vo,null),e(vo,gsr),e(vo,C0e),e(C0e,hsr),e(vo,psr),e(vo,Ya),e(Ya,usr),e(Ya,w0e),e(w0e,_sr),e(Ya,bsr),e(Ya,A0e),e(A0e,vsr),e(Ya,Fsr),e(Ya,y0e),e(y0e,Tsr),e(Ya,Msr),e(vo,Esr),e(vo,L0e),e(L0e,N6),e(N6,x0e),e(x0e,Csr),e(N6,wsr),e(N6,Pz),e(Pz,Asr),e(N6,ysr),e(vo,Lsr),e(vo,j6),e(j6,xsr),e(j6,$0e),e($0e,$sr),e(j6,ksr),e(j6,k0e),e(k0e,Ssr),e(vo,Rsr),M(D6,vo,null),b(f,dNe,_),b(f,Gd,_),e(Gd,G6),e(G6,S0e),M(JL,S0e,null),e(Gd,Psr),e(Gd,R0e),e(R0e,Bsr),b(f,cNe,_),b(f,Yo,_),M(YL,Yo,null),e(Yo,Isr),e(Yo,Od),e(Od,qsr),e(Od,Bz),e(Bz,Nsr),e(Od,jsr),e(Od,Iz),e(Iz,Dsr),e(Od,Gsr),e(Yo,Osr),e(Yo,KL),e(KL,Vsr),e(KL,P0e),e(P0e,Xsr),e(KL,zsr),e(Yo,Wsr),e(Yo,yt),M(ZL,yt,null),e(yt,Qsr),e(yt,B0e),e(B0e,Hsr),e(yt,Usr),e(yt,Vd),e(Vd,Jsr),e(Vd,I0e),e(I0e,Ysr),e(Vd,Ksr),e(Vd,qz),e(qz,Zsr),e(Vd,elr),e(yt,olr),M(O6,yt,null),e(Yo,rlr),e(Yo,wr),M(e8,wr,null),e(wr,tlr),e(wr,q0e),e(q0e,alr),e(wr,nlr),e(wr,Ka),e(Ka,slr),e(Ka,N0e),e(N0e,llr),e(Ka,ilr),e(Ka,j0e),e(j0e,dlr),e(Ka,clr),e(Ka,D0e),e(D0e,flr),e(Ka,mlr),e(wr,glr),e(wr,N),e(N,V6),e(V6,G0e),e(G0e,hlr),e(V6,plr),e(V6,Nz),e(Nz,ulr),e(V6,_lr),e(N,blr),e(N,X6),e(X6,O0e),e(O0e,vlr),e(X6,Flr),e(X6,jz),e(jz,Tlr),e(X6,Mlr),e(N,Elr),e(N,z6),e(z6,V0e),e(V0e,Clr),e(z6,wlr),e(z6,Dz),e(Dz,Alr),e(z6,ylr),e(N,Llr),e(N,W6),e(W6,X0e),e(X0e,xlr),e(W6,$lr),e(W6,Gz),e(Gz,klr),e(W6,Slr),e(N,Rlr),e(N,Q6),e(Q6,z0e),e(z0e,Plr),e(Q6,Blr),e(Q6,Oz),e(Oz,Ilr),e(Q6,qlr),e(N,Nlr),e(N,H6),e(H6,W0e),e(W0e,jlr),e(H6,Dlr),e(H6,Vz),e(Vz,Glr),e(H6,Olr),e(N,Vlr),e(N,U6),e(U6,Q0e),e(Q0e,Xlr),e(U6,zlr),e(U6,Xz),e(Xz,Wlr),e(U6,Qlr),e(N,Hlr),e(N,J6),e(J6,H0e),e(H0e,Ulr),e(J6,Jlr),e(J6,zz),e(zz,Ylr),e(J6,Klr),e(N,Zlr),e(N,Y6),e(Y6,U0e),e(U0e,eir),e(Y6,oir),e(Y6,Wz),e(Wz,rir),e(Y6,tir),e(N,air),e(N,K6),e(K6,J0e),e(J0e,nir),e(K6,sir),e(K6,Qz),e(Qz,lir),e(K6,iir),e(N,dir),e(N,Z6),e(Z6,Y0e),e(Y0e,cir),e(Z6,fir),e(Z6,Hz),e(Hz,mir),e(Z6,gir),e(N,hir),e(N,eT),e(eT,K0e),e(K0e,pir),e(eT,uir),e(eT,Uz),e(Uz,_ir),e(eT,bir),e(N,vir),e(N,oT),e(oT,Z0e),e(Z0e,Fir),e(oT,Tir),e(oT,Jz),e(Jz,Mir),e(oT,Eir),e(N,Cir),e(N,rT),e(rT,e1e),e(e1e,wir),e(rT,Air),e(rT,Yz),e(Yz,yir),e(rT,Lir),e(N,xir),e(N,tT),e(tT,o1e),e(o1e,$ir),e(tT,kir),e(tT,Kz),e(Kz,Sir),e(tT,Rir),e(N,Pir),e(N,aT),e(aT,r1e),e(r1e,Bir),e(aT,Iir),e(aT,Zz),e(Zz,qir),e(aT,Nir),e(N,jir),e(N,nT),e(nT,t1e),e(t1e,Dir),e(nT,Gir),e(nT,eW),e(eW,Oir),e(nT,Vir),e(N,Xir),e(N,Is),e(Is,a1e),e(a1e,zir),e(Is,Wir),e(Is,oW),e(oW,Qir),e(Is,Hir),e(Is,rW),e(rW,Uir),e(Is,Jir),e(N,Yir),e(N,sT),e(sT,n1e),e(n1e,Kir),e(sT,Zir),e(sT,tW),e(tW,edr),e(sT,odr),e(N,rdr),e(N,lT),e(lT,s1e),e(s1e,tdr),e(lT,adr),e(lT,aW),e(aW,ndr),e(lT,sdr),e(N,ldr),e(N,iT),e(iT,l1e),e(l1e,idr),e(iT,ddr),e(iT,nW),e(nW,cdr),e(iT,fdr),e(N,mdr),e(N,dT),e(dT,i1e),e(i1e,gdr),e(dT,hdr),e(dT,sW),e(sW,pdr),e(dT,udr),e(N,_dr),e(N,cT),e(cT,d1e),e(d1e,bdr),e(cT,vdr),e(cT,lW),e(lW,Fdr),e(cT,Tdr),e(N,Mdr),e(N,fT),e(fT,c1e),e(c1e,Edr),e(fT,Cdr),e(fT,iW),e(iW,wdr),e(fT,Adr),e(N,ydr),e(N,mT),e(mT,f1e),e(f1e,Ldr),e(mT,xdr),e(mT,dW),e(dW,$dr),e(mT,kdr),e(N,Sdr),e(N,gT),e(gT,m1e),e(m1e,Rdr),e(gT,Pdr),e(gT,cW),e(cW,Bdr),e(gT,Idr),e(N,qdr),e(N,hT),e(hT,g1e),e(g1e,Ndr),e(hT,jdr),e(hT,fW),e(fW,Ddr),e(hT,Gdr),e(N,Odr),e(N,pT),e(pT,h1e),e(h1e,Vdr),e(pT,Xdr),e(pT,mW),e(mW,zdr),e(pT,Wdr),e(N,Qdr),e(N,uT),e(uT,p1e),e(p1e,Hdr),e(uT,Udr),e(uT,gW),e(gW,Jdr),e(uT,Ydr),e(N,Kdr),e(N,_T),e(_T,u1e),e(u1e,Zdr),e(_T,ecr),e(_T,hW),e(hW,ocr),e(_T,rcr),e(N,tcr),e(N,bT),e(bT,_1e),e(_1e,acr),e(bT,ncr),e(bT,pW),e(pW,scr),e(bT,lcr),e(N,icr),e(N,vT),e(vT,b1e),e(b1e,dcr),e(vT,ccr),e(vT,uW),e(uW,fcr),e(vT,mcr),e(N,gcr),e(N,FT),e(FT,v1e),e(v1e,hcr),e(FT,pcr),e(FT,_W),e(_W,ucr),e(FT,_cr),e(N,bcr),e(N,TT),e(TT,F1e),e(F1e,vcr),e(TT,Fcr),e(TT,bW),e(bW,Tcr),e(TT,Mcr),e(N,Ecr),e(N,MT),e(MT,T1e),e(T1e,Ccr),e(MT,wcr),e(MT,vW),e(vW,Acr),e(MT,ycr),e(N,Lcr),e(N,ET),e(ET,M1e),e(M1e,xcr),e(ET,$cr),e(ET,FW),e(FW,kcr),e(ET,Scr),e(N,Rcr),e(N,CT),e(CT,E1e),e(E1e,Pcr),e(CT,Bcr),e(CT,TW),e(TW,Icr),e(CT,qcr),e(N,Ncr),e(N,wT),e(wT,C1e),e(C1e,jcr),e(wT,Dcr),e(wT,MW),e(MW,Gcr),e(wT,Ocr),e(N,Vcr),e(N,AT),e(AT,w1e),e(w1e,Xcr),e(AT,zcr),e(AT,EW),e(EW,Wcr),e(AT,Qcr),e(N,Hcr),e(N,yT),e(yT,A1e),e(A1e,Ucr),e(yT,Jcr),e(yT,CW),e(CW,Ycr),e(yT,Kcr),e(N,Zcr),e(N,LT),e(LT,y1e),e(y1e,efr),e(LT,ofr),e(LT,wW),e(wW,rfr),e(LT,tfr),e(N,afr),e(N,xT),e(xT,L1e),e(L1e,nfr),e(xT,sfr),e(xT,AW),e(AW,lfr),e(xT,ifr),e(N,dfr),e(N,$T),e($T,x1e),e(x1e,cfr),e($T,ffr),e($T,yW),e(yW,mfr),e($T,gfr),e(N,hfr),e(N,kT),e(kT,$1e),e($1e,pfr),e(kT,ufr),e(kT,LW),e(LW,_fr),e(kT,bfr),e(N,vfr),e(N,ST),e(ST,k1e),e(k1e,Ffr),e(ST,Tfr),e(ST,xW),e(xW,Mfr),e(ST,Efr),e(N,Cfr),e(N,RT),e(RT,S1e),e(S1e,wfr),e(RT,Afr),e(RT,$W),e($W,yfr),e(RT,Lfr),e(wr,xfr),M(PT,wr,null),b(f,fNe,_),b(f,Xd,_),e(Xd,BT),e(BT,R1e),M(o8,R1e,null),e(Xd,$fr),e(Xd,P1e),e(P1e,kfr),b(f,mNe,_),b(f,Ko,_),M(r8,Ko,null),e(Ko,Sfr),e(Ko,zd),e(zd,Rfr),e(zd,kW),e(kW,Pfr),e(zd,Bfr),e(zd,SW),e(SW,Ifr),e(zd,qfr),e(Ko,Nfr),e(Ko,t8),e(t8,jfr),e(t8,B1e),e(B1e,Dfr),e(t8,Gfr),e(Ko,Ofr),e(Ko,Lt),M(a8,Lt,null),e(Lt,Vfr),e(Lt,I1e),e(I1e,Xfr),e(Lt,zfr),e(Lt,Wd),e(Wd,Wfr),e(Wd,q1e),e(q1e,Qfr),e(Wd,Hfr),e(Wd,RW),e(RW,Ufr),e(Wd,Jfr),e(Lt,Yfr),M(IT,Lt,null),e(Ko,Kfr),e(Ko,Ar),M(n8,Ar,null),e(Ar,Zfr),e(Ar,N1e),e(N1e,emr),e(Ar,omr),e(Ar,Za),e(Za,rmr),e(Za,j1e),e(j1e,tmr),e(Za,amr),e(Za,D1e),e(D1e,nmr),e(Za,smr),e(Za,G1e),e(G1e,lmr),e(Za,imr),e(Ar,dmr),e(Ar,se),e(se,qT),e(qT,O1e),e(O1e,cmr),e(qT,fmr),e(qT,PW),e(PW,mmr),e(qT,gmr),e(se,hmr),e(se,NT),e(NT,V1e),e(V1e,pmr),e(NT,umr),e(NT,BW),e(BW,_mr),e(NT,bmr),e(se,vmr),e(se,jT),e(jT,X1e),e(X1e,Fmr),e(jT,Tmr),e(jT,IW),e(IW,Mmr),e(jT,Emr),e(se,Cmr),e(se,DT),e(DT,z1e),e(z1e,wmr),e(DT,Amr),e(DT,qW),e(qW,ymr),e(DT,Lmr),e(se,xmr),e(se,GT),e(GT,W1e),e(W1e,$mr),e(GT,kmr),e(GT,NW),e(NW,Smr),e(GT,Rmr),e(se,Pmr),e(se,OT),e(OT,Q1e),e(Q1e,Bmr),e(OT,Imr),e(OT,jW),e(jW,qmr),e(OT,Nmr),e(se,jmr),e(se,VT),e(VT,H1e),e(H1e,Dmr),e(VT,Gmr),e(VT,DW),e(DW,Omr),e(VT,Vmr),e(se,Xmr),e(se,XT),e(XT,U1e),e(U1e,zmr),e(XT,Wmr),e(XT,GW),e(GW,Qmr),e(XT,Hmr),e(se,Umr),e(se,zT),e(zT,J1e),e(J1e,Jmr),e(zT,Ymr),e(zT,OW),e(OW,Kmr),e(zT,Zmr),e(se,egr),e(se,WT),e(WT,Y1e),e(Y1e,ogr),e(WT,rgr),e(WT,VW),e(VW,tgr),e(WT,agr),e(se,ngr),e(se,QT),e(QT,K1e),e(K1e,sgr),e(QT,lgr),e(QT,XW),e(XW,igr),e(QT,dgr),e(se,cgr),e(se,HT),e(HT,Z1e),e(Z1e,fgr),e(HT,mgr),e(HT,zW),e(zW,ggr),e(HT,hgr),e(se,pgr),e(se,UT),e(UT,ebe),e(ebe,ugr),e(UT,_gr),e(UT,WW),e(WW,bgr),e(UT,vgr),e(se,Fgr),e(se,JT),e(JT,obe),e(obe,Tgr),e(JT,Mgr),e(JT,QW),e(QW,Egr),e(JT,Cgr),e(se,wgr),e(se,YT),e(YT,rbe),e(rbe,Agr),e(YT,ygr),e(YT,HW),e(HW,Lgr),e(YT,xgr),e(se,$gr),e(se,KT),e(KT,tbe),e(tbe,kgr),e(KT,Sgr),e(KT,UW),e(UW,Rgr),e(KT,Pgr),e(se,Bgr),e(se,ZT),e(ZT,abe),e(abe,Igr),e(ZT,qgr),e(ZT,JW),e(JW,Ngr),e(ZT,jgr),e(se,Dgr),e(se,e7),e(e7,nbe),e(nbe,Ggr),e(e7,Ogr),e(e7,YW),e(YW,Vgr),e(e7,Xgr),e(se,zgr),e(se,o7),e(o7,sbe),e(sbe,Wgr),e(o7,Qgr),e(o7,KW),e(KW,Hgr),e(o7,Ugr),e(se,Jgr),e(se,r7),e(r7,lbe),e(lbe,Ygr),e(r7,Kgr),e(r7,ZW),e(ZW,Zgr),e(r7,ehr),e(se,ohr),e(se,t7),e(t7,ibe),e(ibe,rhr),e(t7,thr),e(t7,eQ),e(eQ,ahr),e(t7,nhr),e(se,shr),e(se,a7),e(a7,dbe),e(dbe,lhr),e(a7,ihr),e(a7,oQ),e(oQ,dhr),e(a7,chr),e(se,fhr),e(se,n7),e(n7,cbe),e(cbe,mhr),e(n7,ghr),e(n7,rQ),e(rQ,hhr),e(n7,phr),e(Ar,uhr),M(s7,Ar,null),b(f,gNe,_),b(f,Qd,_),e(Qd,l7),e(l7,fbe),M(s8,fbe,null),e(Qd,_hr),e(Qd,mbe),e(mbe,bhr),b(f,hNe,_),b(f,Zo,_),M(l8,Zo,null),e(Zo,vhr),e(Zo,Hd),e(Hd,Fhr),e(Hd,tQ),e(tQ,Thr),e(Hd,Mhr),e(Hd,aQ),e(aQ,Ehr),e(Hd,Chr),e(Zo,whr),e(Zo,i8),e(i8,Ahr),e(i8,gbe),e(gbe,yhr),e(i8,Lhr),e(Zo,xhr),e(Zo,xt),M(d8,xt,null),e(xt,$hr),e(xt,hbe),e(hbe,khr),e(xt,Shr),e(xt,Ud),e(Ud,Rhr),e(Ud,pbe),e(pbe,Phr),e(Ud,Bhr),e(Ud,nQ),e(nQ,Ihr),e(Ud,qhr),e(xt,Nhr),M(i7,xt,null),e(Zo,jhr),e(Zo,yr),M(c8,yr,null),e(yr,Dhr),e(yr,ube),e(ube,Ghr),e(yr,Ohr),e(yr,en),e(en,Vhr),e(en,_be),e(_be,Xhr),e(en,zhr),e(en,bbe),e(bbe,Whr),e(en,Qhr),e(en,vbe),e(vbe,Hhr),e(en,Uhr),e(yr,Jhr),e(yr,Te),e(Te,d7),e(d7,Fbe),e(Fbe,Yhr),e(d7,Khr),e(d7,sQ),e(sQ,Zhr),e(d7,epr),e(Te,opr),e(Te,c7),e(c7,Tbe),e(Tbe,rpr),e(c7,tpr),e(c7,lQ),e(lQ,apr),e(c7,npr),e(Te,spr),e(Te,f7),e(f7,Mbe),e(Mbe,lpr),e(f7,ipr),e(f7,iQ),e(iQ,dpr),e(f7,cpr),e(Te,fpr),e(Te,m7),e(m7,Ebe),e(Ebe,mpr),e(m7,gpr),e(m7,dQ),e(dQ,hpr),e(m7,ppr),e(Te,upr),e(Te,g7),e(g7,Cbe),e(Cbe,_pr),e(g7,bpr),e(g7,cQ),e(cQ,vpr),e(g7,Fpr),e(Te,Tpr),e(Te,h7),e(h7,wbe),e(wbe,Mpr),e(h7,Epr),e(h7,fQ),e(fQ,Cpr),e(h7,wpr),e(Te,Apr),e(Te,p7),e(p7,Abe),e(Abe,ypr),e(p7,Lpr),e(p7,mQ),e(mQ,xpr),e(p7,$pr),e(Te,kpr),e(Te,u7),e(u7,ybe),e(ybe,Spr),e(u7,Rpr),e(u7,gQ),e(gQ,Ppr),e(u7,Bpr),e(Te,Ipr),e(Te,_7),e(_7,Lbe),e(Lbe,qpr),e(_7,Npr),e(_7,hQ),e(hQ,jpr),e(_7,Dpr),e(Te,Gpr),e(Te,b7),e(b7,xbe),e(xbe,Opr),e(b7,Vpr),e(b7,pQ),e(pQ,Xpr),e(b7,zpr),e(Te,Wpr),e(Te,v7),e(v7,$be),e($be,Qpr),e(v7,Hpr),e(v7,uQ),e(uQ,Upr),e(v7,Jpr),e(Te,Ypr),e(Te,F7),e(F7,kbe),e(kbe,Kpr),e(F7,Zpr),e(F7,_Q),e(_Q,eur),e(F7,our),e(yr,rur),M(T7,yr,null),b(f,pNe,_),b(f,Jd,_),e(Jd,M7),e(M7,Sbe),M(f8,Sbe,null),e(Jd,tur),e(Jd,Rbe),e(Rbe,aur),b(f,uNe,_),b(f,er,_),M(m8,er,null),e(er,nur),e(er,Yd),e(Yd,sur),e(Yd,bQ),e(bQ,lur),e(Yd,iur),e(Yd,vQ),e(vQ,dur),e(Yd,cur),e(er,fur),e(er,g8),e(g8,mur),e(g8,Pbe),e(Pbe,gur),e(g8,hur),e(er,pur),e(er,$t),M(h8,$t,null),e($t,uur),e($t,Bbe),e(Bbe,_ur),e($t,bur),e($t,Kd),e(Kd,vur),e(Kd,Ibe),e(Ibe,Fur),e(Kd,Tur),e(Kd,FQ),e(FQ,Mur),e(Kd,Eur),e($t,Cur),M(E7,$t,null),e(er,wur),e(er,Lr),M(p8,Lr,null),e(Lr,Aur),e(Lr,qbe),e(qbe,yur),e(Lr,Lur),e(Lr,on),e(on,xur),e(on,Nbe),e(Nbe,$ur),e(on,kur),e(on,jbe),e(jbe,Sur),e(on,Rur),e(on,Dbe),e(Dbe,Pur),e(on,Bur),e(Lr,Iur),e(Lr,rn),e(rn,C7),e(C7,Gbe),e(Gbe,qur),e(C7,Nur),e(C7,TQ),e(TQ,jur),e(C7,Dur),e(rn,Gur),e(rn,w7),e(w7,Obe),e(Obe,Our),e(w7,Vur),e(w7,MQ),e(MQ,Xur),e(w7,zur),e(rn,Wur),e(rn,A7),e(A7,Vbe),e(Vbe,Qur),e(A7,Hur),e(A7,EQ),e(EQ,Uur),e(A7,Jur),e(rn,Yur),e(rn,y7),e(y7,Xbe),e(Xbe,Kur),e(y7,Zur),e(y7,CQ),e(CQ,e_r),e(y7,o_r),e(Lr,r_r),M(L7,Lr,null),b(f,_Ne,_),b(f,Zd,_),e(Zd,x7),e(x7,zbe),M(u8,zbe,null),e(Zd,t_r),e(Zd,Wbe),e(Wbe,a_r),b(f,bNe,_),b(f,or,_),M(_8,or,null),e(or,n_r),e(or,ec),e(ec,s_r),e(ec,wQ),e(wQ,l_r),e(ec,i_r),e(ec,AQ),e(AQ,d_r),e(ec,c_r),e(or,f_r),e(or,b8),e(b8,m_r),e(b8,Qbe),e(Qbe,g_r),e(b8,h_r),e(or,p_r),e(or,kt),M(v8,kt,null),e(kt,u_r),e(kt,Hbe),e(Hbe,__r),e(kt,b_r),e(kt,oc),e(oc,v_r),e(oc,Ube),e(Ube,F_r),e(oc,T_r),e(oc,yQ),e(yQ,M_r),e(oc,E_r),e(kt,C_r),M($7,kt,null),e(or,w_r),e(or,xr),M(F8,xr,null),e(xr,A_r),e(xr,Jbe),e(Jbe,y_r),e(xr,L_r),e(xr,tn),e(tn,x_r),e(tn,Ybe),e(Ybe,$_r),e(tn,k_r),e(tn,Kbe),e(Kbe,S_r),e(tn,R_r),e(tn,Zbe),e(Zbe,P_r),e(tn,B_r),e(xr,I_r),e(xr,ie),e(ie,k7),e(k7,e2e),e(e2e,q_r),e(k7,N_r),e(k7,LQ),e(LQ,j_r),e(k7,D_r),e(ie,G_r),e(ie,S7),e(S7,o2e),e(o2e,O_r),e(S7,V_r),e(S7,xQ),e(xQ,X_r),e(S7,z_r),e(ie,W_r),e(ie,R7),e(R7,r2e),e(r2e,Q_r),e(R7,H_r),e(R7,$Q),e($Q,U_r),e(R7,J_r),e(ie,Y_r),e(ie,P7),e(P7,t2e),e(t2e,K_r),e(P7,Z_r),e(P7,kQ),e(kQ,e0r),e(P7,o0r),e(ie,r0r),e(ie,B7),e(B7,a2e),e(a2e,t0r),e(B7,a0r),e(B7,SQ),e(SQ,n0r),e(B7,s0r),e(ie,l0r),e(ie,I7),e(I7,n2e),e(n2e,i0r),e(I7,d0r),e(I7,RQ),e(RQ,c0r),e(I7,f0r),e(ie,m0r),e(ie,q7),e(q7,s2e),e(s2e,g0r),e(q7,h0r),e(q7,PQ),e(PQ,p0r),e(q7,u0r),e(ie,_0r),e(ie,N7),e(N7,l2e),e(l2e,b0r),e(N7,v0r),e(N7,BQ),e(BQ,F0r),e(N7,T0r),e(ie,M0r),e(ie,j7),e(j7,i2e),e(i2e,E0r),e(j7,C0r),e(j7,IQ),e(IQ,w0r),e(j7,A0r),e(ie,y0r),e(ie,D7),e(D7,d2e),e(d2e,L0r),e(D7,x0r),e(D7,qQ),e(qQ,$0r),e(D7,k0r),e(ie,S0r),e(ie,G7),e(G7,c2e),e(c2e,R0r),e(G7,P0r),e(G7,NQ),e(NQ,B0r),e(G7,I0r),e(ie,q0r),e(ie,O7),e(O7,f2e),e(f2e,N0r),e(O7,j0r),e(O7,jQ),e(jQ,D0r),e(O7,G0r),e(ie,O0r),e(ie,V7),e(V7,m2e),e(m2e,V0r),e(V7,X0r),e(V7,DQ),e(DQ,z0r),e(V7,W0r),e(ie,Q0r),e(ie,X7),e(X7,g2e),e(g2e,H0r),e(X7,U0r),e(X7,GQ),e(GQ,J0r),e(X7,Y0r),e(ie,K0r),e(ie,z7),e(z7,h2e),e(h2e,Z0r),e(z7,e1r),e(z7,OQ),e(OQ,o1r),e(z7,r1r),e(ie,t1r),e(ie,W7),e(W7,p2e),e(p2e,a1r),e(W7,n1r),e(W7,VQ),e(VQ,s1r),e(W7,l1r),e(ie,i1r),e(ie,Q7),e(Q7,u2e),e(u2e,d1r),e(Q7,c1r),e(Q7,XQ),e(XQ,f1r),e(Q7,m1r),e(ie,g1r),e(ie,H7),e(H7,_2e),e(_2e,h1r),e(H7,p1r),e(H7,zQ),e(zQ,u1r),e(H7,_1r),e(ie,b1r),e(ie,U7),e(U7,b2e),e(b2e,v1r),e(U7,F1r),e(U7,WQ),e(WQ,T1r),e(U7,M1r),e(ie,E1r),e(ie,J7),e(J7,v2e),e(v2e,C1r),e(J7,w1r),e(J7,QQ),e(QQ,A1r),e(J7,y1r),e(xr,L1r),M(Y7,xr,null),b(f,vNe,_),b(f,rc,_),e(rc,K7),e(K7,F2e),M(T8,F2e,null),e(rc,x1r),e(rc,T2e),e(T2e,$1r),b(f,FNe,_),b(f,rr,_),M(M8,rr,null),e(rr,k1r),e(rr,tc),e(tc,S1r),e(tc,HQ),e(HQ,R1r),e(tc,P1r),e(tc,UQ),e(UQ,B1r),e(tc,I1r),e(rr,q1r),e(rr,E8),e(E8,N1r),e(E8,M2e),e(M2e,j1r),e(E8,D1r),e(rr,G1r),e(rr,St),M(C8,St,null),e(St,O1r),e(St,E2e),e(E2e,V1r),e(St,X1r),e(St,ac),e(ac,z1r),e(ac,C2e),e(C2e,W1r),e(ac,Q1r),e(ac,JQ),e(JQ,H1r),e(ac,U1r),e(St,J1r),M(Z7,St,null),e(rr,Y1r),e(rr,$r),M(w8,$r,null),e($r,K1r),e($r,w2e),e(w2e,Z1r),e($r,ebr),e($r,an),e(an,obr),e(an,A2e),e(A2e,rbr),e(an,tbr),e(an,y2e),e(y2e,abr),e(an,nbr),e(an,L2e),e(L2e,sbr),e(an,lbr),e($r,ibr),e($r,ye),e(ye,eM),e(eM,x2e),e(x2e,dbr),e(eM,cbr),e(eM,YQ),e(YQ,fbr),e(eM,mbr),e(ye,gbr),e(ye,oM),e(oM,$2e),e($2e,hbr),e(oM,pbr),e(oM,KQ),e(KQ,ubr),e(oM,_br),e(ye,bbr),e(ye,rM),e(rM,k2e),e(k2e,vbr),e(rM,Fbr),e(rM,ZQ),e(ZQ,Tbr),e(rM,Mbr),e(ye,Ebr),e(ye,tM),e(tM,S2e),e(S2e,Cbr),e(tM,wbr),e(tM,eH),e(eH,Abr),e(tM,ybr),e(ye,Lbr),e(ye,aM),e(aM,R2e),e(R2e,xbr),e(aM,$br),e(aM,oH),e(oH,kbr),e(aM,Sbr),e(ye,Rbr),e(ye,nM),e(nM,P2e),e(P2e,Pbr),e(nM,Bbr),e(nM,rH),e(rH,Ibr),e(nM,qbr),e(ye,Nbr),e(ye,sM),e(sM,B2e),e(B2e,jbr),e(sM,Dbr),e(sM,tH),e(tH,Gbr),e(sM,Obr),e(ye,Vbr),e(ye,lM),e(lM,I2e),e(I2e,Xbr),e(lM,zbr),e(lM,aH),e(aH,Wbr),e(lM,Qbr),e(ye,Hbr),e(ye,iM),e(iM,q2e),e(q2e,Ubr),e(iM,Jbr),e(iM,nH),e(nH,Ybr),e(iM,Kbr),e(ye,Zbr),e(ye,dM),e(dM,N2e),e(N2e,e2r),e(dM,o2r),e(dM,sH),e(sH,r2r),e(dM,t2r),e($r,a2r),M(cM,$r,null),b(f,TNe,_),b(f,nc,_),e(nc,fM),e(fM,j2e),M(A8,j2e,null),e(nc,n2r),e(nc,D2e),e(D2e,s2r),b(f,MNe,_),b(f,tr,_),M(y8,tr,null),e(tr,l2r),e(tr,sc),e(sc,i2r),e(sc,lH),e(lH,d2r),e(sc,c2r),e(sc,iH),e(iH,f2r),e(sc,m2r),e(tr,g2r),e(tr,L8),e(L8,h2r),e(L8,G2e),e(G2e,p2r),e(L8,u2r),e(tr,_2r),e(tr,Rt),M(x8,Rt,null),e(Rt,b2r),e(Rt,O2e),e(O2e,v2r),e(Rt,F2r),e(Rt,lc),e(lc,T2r),e(lc,V2e),e(V2e,M2r),e(lc,E2r),e(lc,dH),e(dH,C2r),e(lc,w2r),e(Rt,A2r),M(mM,Rt,null),e(tr,y2r),e(tr,kr),M($8,kr,null),e(kr,L2r),e(kr,X2e),e(X2e,x2r),e(kr,$2r),e(kr,nn),e(nn,k2r),e(nn,z2e),e(z2e,S2r),e(nn,R2r),e(nn,W2e),e(W2e,P2r),e(nn,B2r),e(nn,Q2e),e(Q2e,I2r),e(nn,q2r),e(kr,N2r),e(kr,ee),e(ee,gM),e(gM,H2e),e(H2e,j2r),e(gM,D2r),e(gM,cH),e(cH,G2r),e(gM,O2r),e(ee,V2r),e(ee,hM),e(hM,U2e),e(U2e,X2r),e(hM,z2r),e(hM,fH),e(fH,W2r),e(hM,Q2r),e(ee,H2r),e(ee,pM),e(pM,J2e),e(J2e,U2r),e(pM,J2r),e(pM,mH),e(mH,Y2r),e(pM,K2r),e(ee,Z2r),e(ee,uM),e(uM,Y2e),e(Y2e,evr),e(uM,ovr),e(uM,gH),e(gH,rvr),e(uM,tvr),e(ee,avr),e(ee,_M),e(_M,K2e),e(K2e,nvr),e(_M,svr),e(_M,hH),e(hH,lvr),e(_M,ivr),e(ee,dvr),e(ee,bM),e(bM,Z2e),e(Z2e,cvr),e(bM,fvr),e(bM,pH),e(pH,mvr),e(bM,gvr),e(ee,hvr),e(ee,vM),e(vM,eve),e(eve,pvr),e(vM,uvr),e(vM,uH),e(uH,_vr),e(vM,bvr),e(ee,vvr),e(ee,FM),e(FM,ove),e(ove,Fvr),e(FM,Tvr),e(FM,_H),e(_H,Mvr),e(FM,Evr),e(ee,Cvr),e(ee,TM),e(TM,rve),e(rve,wvr),e(TM,Avr),e(TM,bH),e(bH,yvr),e(TM,Lvr),e(ee,xvr),e(ee,MM),e(MM,tve),e(tve,$vr),e(MM,kvr),e(MM,vH),e(vH,Svr),e(MM,Rvr),e(ee,Pvr),e(ee,EM),e(EM,ave),e(ave,Bvr),e(EM,Ivr),e(EM,FH),e(FH,qvr),e(EM,Nvr),e(ee,jvr),e(ee,CM),e(CM,nve),e(nve,Dvr),e(CM,Gvr),e(CM,TH),e(TH,Ovr),e(CM,Vvr),e(ee,Xvr),e(ee,wM),e(wM,sve),e(sve,zvr),e(wM,Wvr),e(wM,MH),e(MH,Qvr),e(wM,Hvr),e(ee,Uvr),e(ee,AM),e(AM,lve),e(lve,Jvr),e(AM,Yvr),e(AM,EH),e(EH,Kvr),e(AM,Zvr),e(ee,eFr),e(ee,yM),e(yM,ive),e(ive,oFr),e(yM,rFr),e(yM,CH),e(CH,tFr),e(yM,aFr),e(ee,nFr),e(ee,LM),e(LM,dve),e(dve,sFr),e(LM,lFr),e(LM,wH),e(wH,iFr),e(LM,dFr),e(ee,cFr),e(ee,xM),e(xM,cve),e(cve,fFr),e(xM,mFr),e(xM,AH),e(AH,gFr),e(xM,hFr),e(ee,pFr),e(ee,$M),e($M,fve),e(fve,uFr),e($M,_Fr),e($M,yH),e(yH,bFr),e($M,vFr),e(ee,FFr),e(ee,kM),e(kM,mve),e(mve,TFr),e(kM,MFr),e(kM,LH),e(LH,EFr),e(kM,CFr),e(ee,wFr),e(ee,SM),e(SM,gve),e(gve,AFr),e(SM,yFr),e(SM,xH),e(xH,LFr),e(SM,xFr),e(ee,$Fr),e(ee,RM),e(RM,hve),e(hve,kFr),e(RM,SFr),e(RM,$H),e($H,RFr),e(RM,PFr),e(ee,BFr),e(ee,PM),e(PM,pve),e(pve,IFr),e(PM,qFr),e(PM,kH),e(kH,NFr),e(PM,jFr),e(ee,DFr),e(ee,BM),e(BM,uve),e(uve,GFr),e(BM,OFr),e(BM,SH),e(SH,VFr),e(BM,XFr),e(ee,zFr),e(ee,IM),e(IM,_ve),e(_ve,WFr),e(IM,QFr),e(IM,RH),e(RH,HFr),e(IM,UFr),e(ee,JFr),e(ee,qM),e(qM,bve),e(bve,YFr),e(qM,KFr),e(qM,PH),e(PH,ZFr),e(qM,e6r),e(ee,o6r),e(ee,NM),e(NM,vve),e(vve,r6r),e(NM,t6r),e(NM,BH),e(BH,a6r),e(NM,n6r),e(kr,s6r),M(jM,kr,null),b(f,ENe,_),b(f,ic,_),e(ic,DM),e(DM,Fve),M(k8,Fve,null),e(ic,l6r),e(ic,Tve),e(Tve,i6r),b(f,CNe,_),b(f,ar,_),M(S8,ar,null),e(ar,d6r),e(ar,dc),e(dc,c6r),e(dc,IH),e(IH,f6r),e(dc,m6r),e(dc,qH),e(qH,g6r),e(dc,h6r),e(ar,p6r),e(ar,R8),e(R8,u6r),e(R8,Mve),e(Mve,_6r),e(R8,b6r),e(ar,v6r),e(ar,Pt),M(P8,Pt,null),e(Pt,F6r),e(Pt,Eve),e(Eve,T6r),e(Pt,M6r),e(Pt,cc),e(cc,E6r),e(cc,Cve),e(Cve,C6r),e(cc,w6r),e(cc,NH),e(NH,A6r),e(cc,y6r),e(Pt,L6r),M(GM,Pt,null),e(ar,x6r),e(ar,Sr),M(B8,Sr,null),e(Sr,$6r),e(Sr,wve),e(wve,k6r),e(Sr,S6r),e(Sr,sn),e(sn,R6r),e(sn,Ave),e(Ave,P6r),e(sn,B6r),e(sn,yve),e(yve,I6r),e(sn,q6r),e(sn,Lve),e(Lve,N6r),e(sn,j6r),e(Sr,D6r),e(Sr,pe),e(pe,OM),e(OM,xve),e(xve,G6r),e(OM,O6r),e(OM,jH),e(jH,V6r),e(OM,X6r),e(pe,z6r),e(pe,VM),e(VM,$ve),e($ve,W6r),e(VM,Q6r),e(VM,DH),e(DH,H6r),e(VM,U6r),e(pe,J6r),e(pe,XM),e(XM,kve),e(kve,Y6r),e(XM,K6r),e(XM,GH),e(GH,Z6r),e(XM,eTr),e(pe,oTr),e(pe,zM),e(zM,Sve),e(Sve,rTr),e(zM,tTr),e(zM,OH),e(OH,aTr),e(zM,nTr),e(pe,sTr),e(pe,WM),e(WM,Rve),e(Rve,lTr),e(WM,iTr),e(WM,VH),e(VH,dTr),e(WM,cTr),e(pe,fTr),e(pe,QM),e(QM,Pve),e(Pve,mTr),e(QM,gTr),e(QM,XH),e(XH,hTr),e(QM,pTr),e(pe,uTr),e(pe,HM),e(HM,Bve),e(Bve,_Tr),e(HM,bTr),e(HM,zH),e(zH,vTr),e(HM,FTr),e(pe,TTr),e(pe,UM),e(UM,Ive),e(Ive,MTr),e(UM,ETr),e(UM,WH),e(WH,CTr),e(UM,wTr),e(pe,ATr),e(pe,JM),e(JM,qve),e(qve,yTr),e(JM,LTr),e(JM,QH),e(QH,xTr),e(JM,$Tr),e(pe,kTr),e(pe,YM),e(YM,Nve),e(Nve,STr),e(YM,RTr),e(YM,HH),e(HH,PTr),e(YM,BTr),e(pe,ITr),e(pe,KM),e(KM,jve),e(jve,qTr),e(KM,NTr),e(KM,UH),e(UH,jTr),e(KM,DTr),e(pe,GTr),e(pe,ZM),e(ZM,Dve),e(Dve,OTr),e(ZM,VTr),e(ZM,JH),e(JH,XTr),e(ZM,zTr),e(pe,WTr),e(pe,e4),e(e4,Gve),e(Gve,QTr),e(e4,HTr),e(e4,YH),e(YH,UTr),e(e4,JTr),e(pe,YTr),e(pe,o4),e(o4,Ove),e(Ove,KTr),e(o4,ZTr),e(o4,KH),e(KH,e7r),e(o4,o7r),e(pe,r7r),e(pe,r4),e(r4,Vve),e(Vve,t7r),e(r4,a7r),e(r4,ZH),e(ZH,n7r),e(r4,s7r),e(pe,l7r),e(pe,t4),e(t4,Xve),e(Xve,i7r),e(t4,d7r),e(t4,eU),e(eU,c7r),e(t4,f7r),e(pe,m7r),e(pe,a4),e(a4,zve),e(zve,g7r),e(a4,h7r),e(a4,oU),e(oU,p7r),e(a4,u7r),e(Sr,_7r),M(n4,Sr,null),b(f,wNe,_),b(f,fc,_),e(fc,s4),e(s4,Wve),M(I8,Wve,null),e(fc,b7r),e(fc,Qve),e(Qve,v7r),b(f,ANe,_),b(f,nr,_),M(q8,nr,null),e(nr,F7r),e(nr,mc),e(mc,T7r),e(mc,rU),e(rU,M7r),e(mc,E7r),e(mc,tU),e(tU,C7r),e(mc,w7r),e(nr,A7r),e(nr,N8),e(N8,y7r),e(N8,Hve),e(Hve,L7r),e(N8,x7r),e(nr,$7r),e(nr,Bt),M(j8,Bt,null),e(Bt,k7r),e(Bt,Uve),e(Uve,S7r),e(Bt,R7r),e(Bt,gc),e(gc,P7r),e(gc,Jve),e(Jve,B7r),e(gc,I7r),e(gc,aU),e(aU,q7r),e(gc,N7r),e(Bt,j7r),M(l4,Bt,null),e(nr,D7r),e(nr,Rr),M(D8,Rr,null),e(Rr,G7r),e(Rr,Yve),e(Yve,O7r),e(Rr,V7r),e(Rr,ln),e(ln,X7r),e(ln,Kve),e(Kve,z7r),e(ln,W7r),e(ln,Zve),e(Zve,Q7r),e(ln,H7r),e(ln,eFe),e(eFe,U7r),e(ln,J7r),e(Rr,Y7r),e(Rr,G8),e(G8,i4),e(i4,oFe),e(oFe,K7r),e(i4,Z7r),e(i4,nU),e(nU,eMr),e(i4,oMr),e(G8,rMr),e(G8,d4),e(d4,rFe),e(rFe,tMr),e(d4,aMr),e(d4,sU),e(sU,nMr),e(d4,sMr),e(Rr,lMr),M(c4,Rr,null),b(f,yNe,_),b(f,hc,_),e(hc,f4),e(f4,tFe),M(O8,tFe,null),e(hc,iMr),e(hc,aFe),e(aFe,dMr),b(f,LNe,_),b(f,sr,_),M(V8,sr,null),e(sr,cMr),e(sr,pc),e(pc,fMr),e(pc,lU),e(lU,mMr),e(pc,gMr),e(pc,iU),e(iU,hMr),e(pc,pMr),e(sr,uMr),e(sr,X8),e(X8,_Mr),e(X8,nFe),e(nFe,bMr),e(X8,vMr),e(sr,FMr),e(sr,It),M(z8,It,null),e(It,TMr),e(It,sFe),e(sFe,MMr),e(It,EMr),e(It,uc),e(uc,CMr),e(uc,lFe),e(lFe,wMr),e(uc,AMr),e(uc,dU),e(dU,yMr),e(uc,LMr),e(It,xMr),M(m4,It,null),e(sr,$Mr),e(sr,Pr),M(W8,Pr,null),e(Pr,kMr),e(Pr,iFe),e(iFe,SMr),e(Pr,RMr),e(Pr,dn),e(dn,PMr),e(dn,dFe),e(dFe,BMr),e(dn,IMr),e(dn,cFe),e(cFe,qMr),e(dn,NMr),e(dn,fFe),e(fFe,jMr),e(dn,DMr),e(Pr,GMr),e(Pr,mFe),e(mFe,g4),e(g4,gFe),e(gFe,OMr),e(g4,VMr),e(g4,cU),e(cU,XMr),e(g4,zMr),e(Pr,WMr),M(h4,Pr,null),b(f,xNe,_),b(f,_c,_),e(_c,p4),e(p4,hFe),M(Q8,hFe,null),e(_c,QMr),e(_c,pFe),e(pFe,HMr),b(f,$Ne,_),b(f,lr,_),M(H8,lr,null),e(lr,UMr),e(lr,bc),e(bc,JMr),e(bc,fU),e(fU,YMr),e(bc,KMr),e(bc,mU),e(mU,ZMr),e(bc,e4r),e(lr,o4r),e(lr,U8),e(U8,r4r),e(U8,uFe),e(uFe,t4r),e(U8,a4r),e(lr,n4r),e(lr,qt),M(J8,qt,null),e(qt,s4r),e(qt,_Fe),e(_Fe,l4r),e(qt,i4r),e(qt,vc),e(vc,d4r),e(vc,bFe),e(bFe,c4r),e(vc,f4r),e(vc,gU),e(gU,m4r),e(vc,g4r),e(qt,h4r),M(u4,qt,null),e(lr,p4r),e(lr,Br),M(Y8,Br,null),e(Br,u4r),e(Br,vFe),e(vFe,_4r),e(Br,b4r),e(Br,cn),e(cn,v4r),e(cn,FFe),e(FFe,F4r),e(cn,T4r),e(cn,TFe),e(TFe,M4r),e(cn,E4r),e(cn,MFe),e(MFe,C4r),e(cn,w4r),e(Br,A4r),e(Br,de),e(de,_4),e(_4,EFe),e(EFe,y4r),e(_4,L4r),e(_4,hU),e(hU,x4r),e(_4,$4r),e(de,k4r),e(de,b4),e(b4,CFe),e(CFe,S4r),e(b4,R4r),e(b4,pU),e(pU,P4r),e(b4,B4r),e(de,I4r),e(de,v4),e(v4,wFe),e(wFe,q4r),e(v4,N4r),e(v4,uU),e(uU,j4r),e(v4,D4r),e(de,G4r),e(de,F4),e(F4,AFe),e(AFe,O4r),e(F4,V4r),e(F4,_U),e(_U,X4r),e(F4,z4r),e(de,W4r),e(de,T4),e(T4,yFe),e(yFe,Q4r),e(T4,H4r),e(T4,bU),e(bU,U4r),e(T4,J4r),e(de,Y4r),e(de,M4),e(M4,LFe),e(LFe,K4r),e(M4,Z4r),e(M4,vU),e(vU,eEr),e(M4,oEr),e(de,rEr),e(de,E4),e(E4,xFe),e(xFe,tEr),e(E4,aEr),e(E4,FU),e(FU,nEr),e(E4,sEr),e(de,lEr),e(de,C4),e(C4,$Fe),e($Fe,iEr),e(C4,dEr),e(C4,TU),e(TU,cEr),e(C4,fEr),e(de,mEr),e(de,w4),e(w4,kFe),e(kFe,gEr),e(w4,hEr),e(w4,MU),e(MU,pEr),e(w4,uEr),e(de,_Er),e(de,A4),e(A4,SFe),e(SFe,bEr),e(A4,vEr),e(A4,EU),e(EU,FEr),e(A4,TEr),e(de,MEr),e(de,y4),e(y4,RFe),e(RFe,EEr),e(y4,CEr),e(y4,CU),e(CU,wEr),e(y4,AEr),e(de,yEr),e(de,L4),e(L4,PFe),e(PFe,LEr),e(L4,xEr),e(L4,wU),e(wU,$Er),e(L4,kEr),e(de,SEr),e(de,x4),e(x4,BFe),e(BFe,REr),e(x4,PEr),e(x4,AU),e(AU,BEr),e(x4,IEr),e(de,qEr),e(de,$4),e($4,IFe),e(IFe,NEr),e($4,jEr),e($4,yU),e(yU,DEr),e($4,GEr),e(de,OEr),e(de,k4),e(k4,qFe),e(qFe,VEr),e(k4,XEr),e(k4,LU),e(LU,zEr),e(k4,WEr),e(de,QEr),e(de,S4),e(S4,NFe),e(NFe,HEr),e(S4,UEr),e(S4,xU),e(xU,JEr),e(S4,YEr),e(de,KEr),e(de,R4),e(R4,jFe),e(jFe,ZEr),e(R4,eCr),e(R4,$U),e($U,oCr),e(R4,rCr),e(de,tCr),e(de,P4),e(P4,DFe),e(DFe,aCr),e(P4,nCr),e(P4,kU),e(kU,sCr),e(P4,lCr),e(de,iCr),e(de,B4),e(B4,GFe),e(GFe,dCr),e(B4,cCr),e(B4,SU),e(SU,fCr),e(B4,mCr),e(de,gCr),e(de,I4),e(I4,OFe),e(OFe,hCr),e(I4,pCr),e(I4,RU),e(RU,uCr),e(I4,_Cr),e(Br,bCr),M(q4,Br,null),b(f,kNe,_),b(f,Fc,_),e(Fc,N4),e(N4,VFe),M(K8,VFe,null),e(Fc,vCr),e(Fc,XFe),e(XFe,FCr),b(f,SNe,_),b(f,ir,_),M(Z8,ir,null),e(ir,TCr),e(ir,Tc),e(Tc,MCr),e(Tc,PU),e(PU,ECr),e(Tc,CCr),e(Tc,BU),e(BU,wCr),e(Tc,ACr),e(ir,yCr),e(ir,e9),e(e9,LCr),e(e9,zFe),e(zFe,xCr),e(e9,$Cr),e(ir,kCr),e(ir,Nt),M(o9,Nt,null),e(Nt,SCr),e(Nt,WFe),e(WFe,RCr),e(Nt,PCr),e(Nt,Mc),e(Mc,BCr),e(Mc,QFe),e(QFe,ICr),e(Mc,qCr),e(Mc,IU),e(IU,NCr),e(Mc,jCr),e(Nt,DCr),M(j4,Nt,null),e(ir,GCr),e(ir,Ir),M(r9,Ir,null),e(Ir,OCr),e(Ir,HFe),e(HFe,VCr),e(Ir,XCr),e(Ir,fn),e(fn,zCr),e(fn,UFe),e(UFe,WCr),e(fn,QCr),e(fn,JFe),e(JFe,HCr),e(fn,UCr),e(fn,YFe),e(YFe,JCr),e(fn,YCr),e(Ir,KCr),e(Ir,ce),e(ce,D4),e(D4,KFe),e(KFe,ZCr),e(D4,e5r),e(D4,qU),e(qU,o5r),e(D4,r5r),e(ce,t5r),e(ce,G4),e(G4,ZFe),e(ZFe,a5r),e(G4,n5r),e(G4,NU),e(NU,s5r),e(G4,l5r),e(ce,i5r),e(ce,O4),e(O4,e6e),e(e6e,d5r),e(O4,c5r),e(O4,jU),e(jU,f5r),e(O4,m5r),e(ce,g5r),e(ce,V4),e(V4,o6e),e(o6e,h5r),e(V4,p5r),e(V4,DU),e(DU,u5r),e(V4,_5r),e(ce,b5r),e(ce,X4),e(X4,r6e),e(r6e,v5r),e(X4,F5r),e(X4,GU),e(GU,T5r),e(X4,M5r),e(ce,E5r),e(ce,z4),e(z4,t6e),e(t6e,C5r),e(z4,w5r),e(z4,OU),e(OU,A5r),e(z4,y5r),e(ce,L5r),e(ce,W4),e(W4,a6e),e(a6e,x5r),e(W4,$5r),e(W4,VU),e(VU,k5r),e(W4,S5r),e(ce,R5r),e(ce,Q4),e(Q4,n6e),e(n6e,P5r),e(Q4,B5r),e(Q4,XU),e(XU,I5r),e(Q4,q5r),e(ce,N5r),e(ce,H4),e(H4,s6e),e(s6e,j5r),e(H4,D5r),e(H4,zU),e(zU,G5r),e(H4,O5r),e(ce,V5r),e(ce,U4),e(U4,l6e),e(l6e,X5r),e(U4,z5r),e(U4,WU),e(WU,W5r),e(U4,Q5r),e(ce,H5r),e(ce,J4),e(J4,i6e),e(i6e,U5r),e(J4,J5r),e(J4,QU),e(QU,Y5r),e(J4,K5r),e(ce,Z5r),e(ce,Y4),e(Y4,d6e),e(d6e,e3r),e(Y4,o3r),e(Y4,HU),e(HU,r3r),e(Y4,t3r),e(ce,a3r),e(ce,K4),e(K4,c6e),e(c6e,n3r),e(K4,s3r),e(K4,UU),e(UU,l3r),e(K4,i3r),e(ce,d3r),e(ce,Z4),e(Z4,f6e),e(f6e,c3r),e(Z4,f3r),e(Z4,JU),e(JU,m3r),e(Z4,g3r),e(ce,h3r),e(ce,eE),e(eE,m6e),e(m6e,p3r),e(eE,u3r),e(eE,YU),e(YU,_3r),e(eE,b3r),e(ce,v3r),e(ce,oE),e(oE,g6e),e(g6e,F3r),e(oE,T3r),e(oE,KU),e(KU,M3r),e(oE,E3r),e(ce,C3r),e(ce,rE),e(rE,h6e),e(h6e,w3r),e(rE,A3r),e(rE,ZU),e(ZU,y3r),e(rE,L3r),e(ce,x3r),e(ce,tE),e(tE,p6e),e(p6e,$3r),e(tE,k3r),e(tE,eJ),e(eJ,S3r),e(tE,R3r),e(ce,P3r),e(ce,aE),e(aE,u6e),e(u6e,B3r),e(aE,I3r),e(aE,oJ),e(oJ,q3r),e(aE,N3r),e(ce,j3r),e(ce,nE),e(nE,_6e),e(_6e,D3r),e(nE,G3r),e(nE,rJ),e(rJ,O3r),e(nE,V3r),e(Ir,X3r),M(sE,Ir,null),b(f,RNe,_),b(f,Ec,_),e(Ec,lE),e(lE,b6e),M(t9,b6e,null),e(Ec,z3r),e(Ec,v6e),e(v6e,W3r),b(f,PNe,_),b(f,dr,_),M(a9,dr,null),e(dr,Q3r),e(dr,Cc),e(Cc,H3r),e(Cc,tJ),e(tJ,U3r),e(Cc,J3r),e(Cc,aJ),e(aJ,Y3r),e(Cc,K3r),e(dr,Z3r),e(dr,n9),e(n9,ewr),e(n9,F6e),e(F6e,owr),e(n9,rwr),e(dr,twr),e(dr,jt),M(s9,jt,null),e(jt,awr),e(jt,T6e),e(T6e,nwr),e(jt,swr),e(jt,wc),e(wc,lwr),e(wc,M6e),e(M6e,iwr),e(wc,dwr),e(wc,nJ),e(nJ,cwr),e(wc,fwr),e(jt,mwr),M(iE,jt,null),e(dr,gwr),e(dr,qr),M(l9,qr,null),e(qr,hwr),e(qr,E6e),e(E6e,pwr),e(qr,uwr),e(qr,mn),e(mn,_wr),e(mn,C6e),e(C6e,bwr),e(mn,vwr),e(mn,w6e),e(w6e,Fwr),e(mn,Twr),e(mn,A6e),e(A6e,Mwr),e(mn,Ewr),e(qr,Cwr),e(qr,y6e),e(y6e,dE),e(dE,L6e),e(L6e,wwr),e(dE,Awr),e(dE,sJ),e(sJ,ywr),e(dE,Lwr),e(qr,xwr),M(cE,qr,null),b(f,BNe,_),b(f,Ac,_),e(Ac,fE),e(fE,x6e),M(i9,x6e,null),e(Ac,$wr),e(Ac,$6e),e($6e,kwr),b(f,INe,_),b(f,cr,_),M(d9,cr,null),e(cr,Swr),e(cr,yc),e(yc,Rwr),e(yc,lJ),e(lJ,Pwr),e(yc,Bwr),e(yc,iJ),e(iJ,Iwr),e(yc,qwr),e(cr,Nwr),e(cr,c9),e(c9,jwr),e(c9,k6e),e(k6e,Dwr),e(c9,Gwr),e(cr,Owr),e(cr,Dt),M(f9,Dt,null),e(Dt,Vwr),e(Dt,S6e),e(S6e,Xwr),e(Dt,zwr),e(Dt,Lc),e(Lc,Wwr),e(Lc,R6e),e(R6e,Qwr),e(Lc,Hwr),e(Lc,dJ),e(dJ,Uwr),e(Lc,Jwr),e(Dt,Ywr),M(mE,Dt,null),e(cr,Kwr),e(cr,Nr),M(m9,Nr,null),e(Nr,Zwr),e(Nr,P6e),e(P6e,eAr),e(Nr,oAr),e(Nr,gn),e(gn,rAr),e(gn,B6e),e(B6e,tAr),e(gn,aAr),e(gn,I6e),e(I6e,nAr),e(gn,sAr),e(gn,q6e),e(q6e,lAr),e(gn,iAr),e(Nr,dAr),e(Nr,N6e),e(N6e,gE),e(gE,j6e),e(j6e,cAr),e(gE,fAr),e(gE,cJ),e(cJ,mAr),e(gE,gAr),e(Nr,hAr),M(hE,Nr,null),b(f,qNe,_),b(f,xc,_),e(xc,pE),e(pE,D6e),M(g9,D6e,null),e(xc,pAr),e(xc,G6e),e(G6e,uAr),b(f,NNe,_),b(f,fr,_),M(h9,fr,null),e(fr,_Ar),e(fr,$c),e($c,bAr),e($c,fJ),e(fJ,vAr),e($c,FAr),e($c,mJ),e(mJ,TAr),e($c,MAr),e(fr,EAr),e(fr,p9),e(p9,CAr),e(p9,O6e),e(O6e,wAr),e(p9,AAr),e(fr,yAr),e(fr,Gt),M(u9,Gt,null),e(Gt,LAr),e(Gt,V6e),e(V6e,xAr),e(Gt,$Ar),e(Gt,kc),e(kc,kAr),e(kc,X6e),e(X6e,SAr),e(kc,RAr),e(kc,gJ),e(gJ,PAr),e(kc,BAr),e(Gt,IAr),M(uE,Gt,null),e(fr,qAr),e(fr,jr),M(_9,jr,null),e(jr,NAr),e(jr,z6e),e(z6e,jAr),e(jr,DAr),e(jr,hn),e(hn,GAr),e(hn,W6e),e(W6e,OAr),e(hn,VAr),e(hn,Q6e),e(Q6e,XAr),e(hn,zAr),e(hn,H6e),e(H6e,WAr),e(hn,QAr),e(jr,HAr),e(jr,te),e(te,_E),e(_E,U6e),e(U6e,UAr),e(_E,JAr),e(_E,hJ),e(hJ,YAr),e(_E,KAr),e(te,ZAr),e(te,bE),e(bE,J6e),e(J6e,eyr),e(bE,oyr),e(bE,pJ),e(pJ,ryr),e(bE,tyr),e(te,ayr),e(te,vE),e(vE,Y6e),e(Y6e,nyr),e(vE,syr),e(vE,uJ),e(uJ,lyr),e(vE,iyr),e(te,dyr),e(te,FE),e(FE,K6e),e(K6e,cyr),e(FE,fyr),e(FE,_J),e(_J,myr),e(FE,gyr),e(te,hyr),e(te,TE),e(TE,Z6e),e(Z6e,pyr),e(TE,uyr),e(TE,bJ),e(bJ,_yr),e(TE,byr),e(te,vyr),e(te,ME),e(ME,eTe),e(eTe,Fyr),e(ME,Tyr),e(ME,vJ),e(vJ,Myr),e(ME,Eyr),e(te,Cyr),e(te,EE),e(EE,oTe),e(oTe,wyr),e(EE,Ayr),e(EE,FJ),e(FJ,yyr),e(EE,Lyr),e(te,xyr),e(te,CE),e(CE,rTe),e(rTe,$yr),e(CE,kyr),e(CE,TJ),e(TJ,Syr),e(CE,Ryr),e(te,Pyr),e(te,wE),e(wE,tTe),e(tTe,Byr),e(wE,Iyr),e(wE,MJ),e(MJ,qyr),e(wE,Nyr),e(te,jyr),e(te,AE),e(AE,aTe),e(aTe,Dyr),e(AE,Gyr),e(AE,EJ),e(EJ,Oyr),e(AE,Vyr),e(te,Xyr),e(te,yE),e(yE,nTe),e(nTe,zyr),e(yE,Wyr),e(yE,CJ),e(CJ,Qyr),e(yE,Hyr),e(te,Uyr),e(te,LE),e(LE,sTe),e(sTe,Jyr),e(LE,Yyr),e(LE,wJ),e(wJ,Kyr),e(LE,Zyr),e(te,eLr),e(te,xE),e(xE,lTe),e(lTe,oLr),e(xE,rLr),e(xE,AJ),e(AJ,tLr),e(xE,aLr),e(te,nLr),e(te,$E),e($E,iTe),e(iTe,sLr),e($E,lLr),e($E,yJ),e(yJ,iLr),e($E,dLr),e(te,cLr),e(te,kE),e(kE,dTe),e(dTe,fLr),e(kE,mLr),e(kE,LJ),e(LJ,gLr),e(kE,hLr),e(te,pLr),e(te,SE),e(SE,cTe),e(cTe,uLr),e(SE,_Lr),e(SE,xJ),e(xJ,bLr),e(SE,vLr),e(te,FLr),e(te,RE),e(RE,fTe),e(fTe,TLr),e(RE,MLr),e(RE,$J),e($J,ELr),e(RE,CLr),e(te,wLr),e(te,PE),e(PE,mTe),e(mTe,ALr),e(PE,yLr),e(PE,kJ),e(kJ,LLr),e(PE,xLr),e(te,$Lr),e(te,BE),e(BE,gTe),e(gTe,kLr),e(BE,SLr),e(BE,SJ),e(SJ,RLr),e(BE,PLr),e(te,BLr),e(te,IE),e(IE,hTe),e(hTe,ILr),e(IE,qLr),e(IE,RJ),e(RJ,NLr),e(IE,jLr),e(te,DLr),e(te,qE),e(qE,pTe),e(pTe,GLr),e(qE,OLr),e(qE,PJ),e(PJ,VLr),e(qE,XLr),e(te,zLr),e(te,NE),e(NE,uTe),e(uTe,WLr),e(NE,QLr),e(NE,BJ),e(BJ,HLr),e(NE,ULr),e(te,JLr),e(te,jE),e(jE,_Te),e(_Te,YLr),e(jE,KLr),e(jE,IJ),e(IJ,ZLr),e(jE,e8r),e(te,o8r),e(te,DE),e(DE,bTe),e(bTe,r8r),e(DE,t8r),e(DE,qJ),e(qJ,a8r),e(DE,n8r),e(te,s8r),e(te,GE),e(GE,vTe),e(vTe,l8r),e(GE,i8r),e(GE,NJ),e(NJ,d8r),e(GE,c8r),e(jr,f8r),M(OE,jr,null),b(f,jNe,_),b(f,Sc,_),e(Sc,VE),e(VE,FTe),M(b9,FTe,null),e(Sc,m8r),e(Sc,TTe),e(TTe,g8r),b(f,DNe,_),b(f,mr,_),M(v9,mr,null),e(mr,h8r),e(mr,Rc),e(Rc,p8r),e(Rc,jJ),e(jJ,u8r),e(Rc,_8r),e(Rc,DJ),e(DJ,b8r),e(Rc,v8r),e(mr,F8r),e(mr,F9),e(F9,T8r),e(F9,MTe),e(MTe,M8r),e(F9,E8r),e(mr,C8r),e(mr,Ot),M(T9,Ot,null),e(Ot,w8r),e(Ot,ETe),e(ETe,A8r),e(Ot,y8r),e(Ot,Pc),e(Pc,L8r),e(Pc,CTe),e(CTe,x8r),e(Pc,$8r),e(Pc,GJ),e(GJ,k8r),e(Pc,S8r),e(Ot,R8r),M(XE,Ot,null),e(mr,P8r),e(mr,Dr),M(M9,Dr,null),e(Dr,B8r),e(Dr,wTe),e(wTe,I8r),e(Dr,q8r),e(Dr,pn),e(pn,N8r),e(pn,ATe),e(ATe,j8r),e(pn,D8r),e(pn,yTe),e(yTe,G8r),e(pn,O8r),e(pn,LTe),e(LTe,V8r),e(pn,X8r),e(Dr,z8r),e(Dr,Re),e(Re,zE),e(zE,xTe),e(xTe,W8r),e(zE,Q8r),e(zE,OJ),e(OJ,H8r),e(zE,U8r),e(Re,J8r),e(Re,WE),e(WE,$Te),e($Te,Y8r),e(WE,K8r),e(WE,VJ),e(VJ,Z8r),e(WE,e9r),e(Re,o9r),e(Re,QE),e(QE,kTe),e(kTe,r9r),e(QE,t9r),e(QE,XJ),e(XJ,a9r),e(QE,n9r),e(Re,s9r),e(Re,HE),e(HE,STe),e(STe,l9r),e(HE,i9r),e(HE,zJ),e(zJ,d9r),e(HE,c9r),e(Re,f9r),e(Re,UE),e(UE,RTe),e(RTe,m9r),e(UE,g9r),e(UE,WJ),e(WJ,h9r),e(UE,p9r),e(Re,u9r),e(Re,JE),e(JE,PTe),e(PTe,_9r),e(JE,b9r),e(JE,QJ),e(QJ,v9r),e(JE,F9r),e(Re,T9r),e(Re,YE),e(YE,BTe),e(BTe,M9r),e(YE,E9r),e(YE,HJ),e(HJ,C9r),e(YE,w9r),e(Re,A9r),e(Re,KE),e(KE,ITe),e(ITe,y9r),e(KE,L9r),e(KE,UJ),e(UJ,x9r),e(KE,$9r),e(Re,k9r),e(Re,ZE),e(ZE,qTe),e(qTe,S9r),e(ZE,R9r),e(ZE,JJ),e(JJ,P9r),e(ZE,B9r),e(Dr,I9r),M(eC,Dr,null),b(f,GNe,_),b(f,Bc,_),e(Bc,oC),e(oC,NTe),M(E9,NTe,null),e(Bc,q9r),e(Bc,jTe),e(jTe,N9r),b(f,ONe,_),b(f,gr,_),M(C9,gr,null),e(gr,j9r),e(gr,Ic),e(Ic,D9r),e(Ic,YJ),e(YJ,G9r),e(Ic,O9r),e(Ic,KJ),e(KJ,V9r),e(Ic,X9r),e(gr,z9r),e(gr,w9),e(w9,W9r),e(w9,DTe),e(DTe,Q9r),e(w9,H9r),e(gr,U9r),e(gr,Vt),M(A9,Vt,null),e(Vt,J9r),e(Vt,GTe),e(GTe,Y9r),e(Vt,K9r),e(Vt,qc),e(qc,Z9r),e(qc,OTe),e(OTe,exr),e(qc,oxr),e(qc,ZJ),e(ZJ,rxr),e(qc,txr),e(Vt,axr),M(rC,Vt,null),e(gr,nxr),e(gr,Gr),M(y9,Gr,null),e(Gr,sxr),e(Gr,VTe),e(VTe,lxr),e(Gr,ixr),e(Gr,un),e(un,dxr),e(un,XTe),e(XTe,cxr),e(un,fxr),e(un,zTe),e(zTe,mxr),e(un,gxr),e(un,WTe),e(WTe,hxr),e(un,pxr),e(Gr,uxr),e(Gr,Me),e(Me,tC),e(tC,QTe),e(QTe,_xr),e(tC,bxr),e(tC,eY),e(eY,vxr),e(tC,Fxr),e(Me,Txr),e(Me,aC),e(aC,HTe),e(HTe,Mxr),e(aC,Exr),e(aC,oY),e(oY,Cxr),e(aC,wxr),e(Me,Axr),e(Me,nC),e(nC,UTe),e(UTe,yxr),e(nC,Lxr),e(nC,rY),e(rY,xxr),e(nC,$xr),e(Me,kxr),e(Me,sC),e(sC,JTe),e(JTe,Sxr),e(sC,Rxr),e(sC,tY),e(tY,Pxr),e(sC,Bxr),e(Me,Ixr),e(Me,lC),e(lC,YTe),e(YTe,qxr),e(lC,Nxr),e(lC,aY),e(aY,jxr),e(lC,Dxr),e(Me,Gxr),e(Me,iC),e(iC,KTe),e(KTe,Oxr),e(iC,Vxr),e(iC,nY),e(nY,Xxr),e(iC,zxr),e(Me,Wxr),e(Me,dC),e(dC,ZTe),e(ZTe,Qxr),e(dC,Hxr),e(dC,sY),e(sY,Uxr),e(dC,Jxr),e(Me,Yxr),e(Me,cC),e(cC,e7e),e(e7e,Kxr),e(cC,Zxr),e(cC,lY),e(lY,e$r),e(cC,o$r),e(Me,r$r),e(Me,fC),e(fC,o7e),e(o7e,t$r),e(fC,a$r),e(fC,iY),e(iY,n$r),e(fC,s$r),e(Me,l$r),e(Me,mC),e(mC,r7e),e(r7e,i$r),e(mC,d$r),e(mC,dY),e(dY,c$r),e(mC,f$r),e(Me,m$r),e(Me,gC),e(gC,t7e),e(t7e,g$r),e(gC,h$r),e(gC,cY),e(cY,p$r),e(gC,u$r),e(Me,_$r),e(Me,hC),e(hC,a7e),e(a7e,b$r),e(hC,v$r),e(hC,fY),e(fY,F$r),e(hC,T$r),e(Gr,M$r),M(pC,Gr,null),b(f,VNe,_),b(f,Nc,_),e(Nc,uC),e(uC,n7e),M(L9,n7e,null),e(Nc,E$r),e(Nc,s7e),e(s7e,C$r),b(f,XNe,_),b(f,hr,_),M(x9,hr,null),e(hr,w$r),e(hr,jc),e(jc,A$r),e(jc,mY),e(mY,y$r),e(jc,L$r),e(jc,gY),e(gY,x$r),e(jc,$$r),e(hr,k$r),e(hr,$9),e($9,S$r),e($9,l7e),e(l7e,R$r),e($9,P$r),e(hr,B$r),e(hr,Xt),M(k9,Xt,null),e(Xt,I$r),e(Xt,i7e),e(i7e,q$r),e(Xt,N$r),e(Xt,Dc),e(Dc,j$r),e(Dc,d7e),e(d7e,D$r),e(Dc,G$r),e(Dc,hY),e(hY,O$r),e(Dc,V$r),e(Xt,X$r),M(_C,Xt,null),e(hr,z$r),e(hr,Or),M(S9,Or,null),e(Or,W$r),e(Or,c7e),e(c7e,Q$r),e(Or,H$r),e(Or,_n),e(_n,U$r),e(_n,f7e),e(f7e,J$r),e(_n,Y$r),e(_n,m7e),e(m7e,K$r),e(_n,Z$r),e(_n,g7e),e(g7e,ekr),e(_n,okr),e(Or,rkr),e(Or,Le),e(Le,bC),e(bC,h7e),e(h7e,tkr),e(bC,akr),e(bC,pY),e(pY,nkr),e(bC,skr),e(Le,lkr),e(Le,vC),e(vC,p7e),e(p7e,ikr),e(vC,dkr),e(vC,uY),e(uY,ckr),e(vC,fkr),e(Le,mkr),e(Le,FC),e(FC,u7e),e(u7e,gkr),e(FC,hkr),e(FC,_Y),e(_Y,pkr),e(FC,ukr),e(Le,_kr),e(Le,TC),e(TC,_7e),e(_7e,bkr),e(TC,vkr),e(TC,bY),e(bY,Fkr),e(TC,Tkr),e(Le,Mkr),e(Le,MC),e(MC,b7e),e(b7e,Ekr),e(MC,Ckr),e(MC,vY),e(vY,wkr),e(MC,Akr),e(Le,ykr),e(Le,EC),e(EC,v7e),e(v7e,Lkr),e(EC,xkr),e(EC,FY),e(FY,$kr),e(EC,kkr),e(Le,Skr),e(Le,CC),e(CC,F7e),e(F7e,Rkr),e(CC,Pkr),e(CC,TY),e(TY,Bkr),e(CC,Ikr),e(Le,qkr),e(Le,wC),e(wC,T7e),e(T7e,Nkr),e(wC,jkr),e(wC,MY),e(MY,Dkr),e(wC,Gkr),e(Le,Okr),e(Le,AC),e(AC,M7e),e(M7e,Vkr),e(AC,Xkr),e(AC,EY),e(EY,zkr),e(AC,Wkr),e(Le,Qkr),e(Le,yC),e(yC,E7e),e(E7e,Hkr),e(yC,Ukr),e(yC,CY),e(CY,Jkr),e(yC,Ykr),e(Or,Kkr),M(LC,Or,null),b(f,zNe,_),b(f,Gc,_),e(Gc,xC),e(xC,C7e),M(R9,C7e,null),e(Gc,Zkr),e(Gc,w7e),e(w7e,eSr),b(f,WNe,_),b(f,pr,_),M(P9,pr,null),e(pr,oSr),e(pr,Oc),e(Oc,rSr),e(Oc,wY),e(wY,tSr),e(Oc,aSr),e(Oc,AY),e(AY,nSr),e(Oc,sSr),e(pr,lSr),e(pr,B9),e(B9,iSr),e(B9,A7e),e(A7e,dSr),e(B9,cSr),e(pr,fSr),e(pr,zt),M(I9,zt,null),e(zt,mSr),e(zt,y7e),e(y7e,gSr),e(zt,hSr),e(zt,Vc),e(Vc,pSr),e(Vc,L7e),e(L7e,uSr),e(Vc,_Sr),e(Vc,yY),e(yY,bSr),e(Vc,vSr),e(zt,FSr),M($C,zt,null),e(pr,TSr),e(pr,Vr),M(q9,Vr,null),e(Vr,MSr),e(Vr,x7e),e(x7e,ESr),e(Vr,CSr),e(Vr,bn),e(bn,wSr),e(bn,$7e),e($7e,ASr),e(bn,ySr),e(bn,k7e),e(k7e,LSr),e(bn,xSr),e(bn,S7e),e(S7e,$Sr),e(bn,kSr),e(Vr,SSr),e(Vr,Pe),e(Pe,kC),e(kC,R7e),e(R7e,RSr),e(kC,PSr),e(kC,LY),e(LY,BSr),e(kC,ISr),e(Pe,qSr),e(Pe,SC),e(SC,P7e),e(P7e,NSr),e(SC,jSr),e(SC,xY),e(xY,DSr),e(SC,GSr),e(Pe,OSr),e(Pe,RC),e(RC,B7e),e(B7e,VSr),e(RC,XSr),e(RC,$Y),e($Y,zSr),e(RC,WSr),e(Pe,QSr),e(Pe,PC),e(PC,I7e),e(I7e,HSr),e(PC,USr),e(PC,kY),e(kY,JSr),e(PC,YSr),e(Pe,KSr),e(Pe,BC),e(BC,q7e),e(q7e,ZSr),e(BC,eRr),e(BC,SY),e(SY,oRr),e(BC,rRr),e(Pe,tRr),e(Pe,IC),e(IC,N7e),e(N7e,aRr),e(IC,nRr),e(IC,RY),e(RY,sRr),e(IC,lRr),e(Pe,iRr),e(Pe,qC),e(qC,j7e),e(j7e,dRr),e(qC,cRr),e(qC,PY),e(PY,fRr),e(qC,mRr),e(Pe,gRr),e(Pe,NC),e(NC,D7e),e(D7e,hRr),e(NC,pRr),e(NC,BY),e(BY,uRr),e(NC,_Rr),e(Pe,bRr),e(Pe,jC),e(jC,G7e),e(G7e,vRr),e(jC,FRr),e(jC,IY),e(IY,TRr),e(jC,MRr),e(Vr,ERr),M(DC,Vr,null),b(f,QNe,_),b(f,Xc,_),e(Xc,GC),e(GC,O7e),M(N9,O7e,null),e(Xc,CRr),e(Xc,V7e),e(V7e,wRr),b(f,HNe,_),b(f,ur,_),M(j9,ur,null),e(ur,ARr),e(ur,zc),e(zc,yRr),e(zc,qY),e(qY,LRr),e(zc,xRr),e(zc,NY),e(NY,$Rr),e(zc,kRr),e(ur,SRr),e(ur,D9),e(D9,RRr),e(D9,X7e),e(X7e,PRr),e(D9,BRr),e(ur,IRr),e(ur,Wt),M(G9,Wt,null),e(Wt,qRr),e(Wt,z7e),e(z7e,NRr),e(Wt,jRr),e(Wt,Wc),e(Wc,DRr),e(Wc,W7e),e(W7e,GRr),e(Wc,ORr),e(Wc,jY),e(jY,VRr),e(Wc,XRr),e(Wt,zRr),M(OC,Wt,null),e(ur,WRr),e(ur,Xr),M(O9,Xr,null),e(Xr,QRr),e(Xr,Q7e),e(Q7e,HRr),e(Xr,URr),e(Xr,vn),e(vn,JRr),e(vn,H7e),e(H7e,YRr),e(vn,KRr),e(vn,U7e),e(U7e,ZRr),e(vn,ePr),e(vn,J7e),e(J7e,oPr),e(vn,rPr),e(Xr,tPr),e(Xr,xe),e(xe,VC),e(VC,Y7e),e(Y7e,aPr),e(VC,nPr),e(VC,DY),e(DY,sPr),e(VC,lPr),e(xe,iPr),e(xe,XC),e(XC,K7e),e(K7e,dPr),e(XC,cPr),e(XC,GY),e(GY,fPr),e(XC,mPr),e(xe,gPr),e(xe,zC),e(zC,Z7e),e(Z7e,hPr),e(zC,pPr),e(zC,OY),e(OY,uPr),e(zC,_Pr),e(xe,bPr),e(xe,WC),e(WC,eMe),e(eMe,vPr),e(WC,FPr),e(WC,VY),e(VY,TPr),e(WC,MPr),e(xe,EPr),e(xe,QC),e(QC,oMe),e(oMe,CPr),e(QC,wPr),e(QC,XY),e(XY,APr),e(QC,yPr),e(xe,LPr),e(xe,HC),e(HC,rMe),e(rMe,xPr),e(HC,$Pr),e(HC,zY),e(zY,kPr),e(HC,SPr),e(xe,RPr),e(xe,UC),e(UC,tMe),e(tMe,PPr),e(UC,BPr),e(UC,WY),e(WY,IPr),e(UC,qPr),e(xe,NPr),e(xe,JC),e(JC,aMe),e(aMe,jPr),e(JC,DPr),e(JC,QY),e(QY,GPr),e(JC,OPr),e(xe,VPr),e(xe,YC),e(YC,nMe),e(nMe,XPr),e(YC,zPr),e(YC,HY),e(HY,WPr),e(YC,QPr),e(xe,HPr),e(xe,KC),e(KC,sMe),e(sMe,UPr),e(KC,JPr),e(KC,UY),e(UY,YPr),e(KC,KPr),e(Xr,ZPr),M(ZC,Xr,null),b(f,UNe,_),b(f,Qc,_),e(Qc,e5),e(e5,lMe),M(V9,lMe,null),e(Qc,eBr),e(Qc,iMe),e(iMe,oBr),b(f,JNe,_),b(f,_r,_),M(X9,_r,null),e(_r,rBr),e(_r,Hc),e(Hc,tBr),e(Hc,JY),e(JY,aBr),e(Hc,nBr),e(Hc,YY),e(YY,sBr),e(Hc,lBr),e(_r,iBr),e(_r,z9),e(z9,dBr),e(z9,dMe),e(dMe,cBr),e(z9,fBr),e(_r,mBr),e(_r,Qt),M(W9,Qt,null),e(Qt,gBr),e(Qt,cMe),e(cMe,hBr),e(Qt,pBr),e(Qt,Uc),e(Uc,uBr),e(Uc,fMe),e(fMe,_Br),e(Uc,bBr),e(Uc,KY),e(KY,vBr),e(Uc,FBr),e(Qt,TBr),M(o5,Qt,null),e(_r,MBr),e(_r,zr),M(Q9,zr,null),e(zr,EBr),e(zr,mMe),e(mMe,CBr),e(zr,wBr),e(zr,Fn),e(Fn,ABr),e(Fn,gMe),e(gMe,yBr),e(Fn,LBr),e(Fn,hMe),e(hMe,xBr),e(Fn,$Br),e(Fn,pMe),e(pMe,kBr),e(Fn,SBr),e(zr,RBr),e(zr,$e),e($e,r5),e(r5,uMe),e(uMe,PBr),e(r5,BBr),e(r5,ZY),e(ZY,IBr),e(r5,qBr),e($e,NBr),e($e,t5),e(t5,_Me),e(_Me,jBr),e(t5,DBr),e(t5,eK),e(eK,GBr),e(t5,OBr),e($e,VBr),e($e,a5),e(a5,bMe),e(bMe,XBr),e(a5,zBr),e(a5,oK),e(oK,WBr),e(a5,QBr),e($e,HBr),e($e,n5),e(n5,vMe),e(vMe,UBr),e(n5,JBr),e(n5,rK),e(rK,YBr),e(n5,KBr),e($e,ZBr),e($e,s5),e(s5,FMe),e(FMe,eIr),e(s5,oIr),e(s5,tK),e(tK,rIr),e(s5,tIr),e($e,aIr),e($e,l5),e(l5,TMe),e(TMe,nIr),e(l5,sIr),e(l5,aK),e(aK,lIr),e(l5,iIr),e($e,dIr),e($e,i5),e(i5,MMe),e(MMe,cIr),e(i5,fIr),e(i5,nK),e(nK,mIr),e(i5,gIr),e($e,hIr),e($e,d5),e(d5,EMe),e(EMe,pIr),e(d5,uIr),e(d5,sK),e(sK,_Ir),e(d5,bIr),e($e,vIr),e($e,c5),e(c5,CMe),e(CMe,FIr),e(c5,TIr),e(c5,lK),e(lK,MIr),e(c5,EIr),e($e,CIr),e($e,f5),e(f5,wMe),e(wMe,wIr),e(f5,AIr),e(f5,iK),e(iK,yIr),e(f5,LIr),e(zr,xIr),M(m5,zr,null),b(f,YNe,_),b(f,Jc,_),e(Jc,g5),e(g5,AMe),M(H9,AMe,null),e(Jc,$Ir),e(Jc,yMe),e(yMe,kIr),b(f,KNe,_),b(f,br,_),M(U9,br,null),e(br,SIr),e(br,Yc),e(Yc,RIr),e(Yc,dK),e(dK,PIr),e(Yc,BIr),e(Yc,cK),e(cK,IIr),e(Yc,qIr),e(br,NIr),e(br,J9),e(J9,jIr),e(J9,LMe),e(LMe,DIr),e(J9,GIr),e(br,OIr),e(br,Ht),M(Y9,Ht,null),e(Ht,VIr),e(Ht,xMe),e(xMe,XIr),e(Ht,zIr),e(Ht,Kc),e(Kc,WIr),e(Kc,$Me),e($Me,QIr),e(Kc,HIr),e(Kc,fK),e(fK,UIr),e(Kc,JIr),e(Ht,YIr),M(h5,Ht,null),e(br,KIr),e(br,Wr),M(K9,Wr,null),e(Wr,ZIr),e(Wr,kMe),e(kMe,eqr),e(Wr,oqr),e(Wr,Tn),e(Tn,rqr),e(Tn,SMe),e(SMe,tqr),e(Tn,aqr),e(Tn,RMe),e(RMe,nqr),e(Tn,sqr),e(Tn,PMe),e(PMe,lqr),e(Tn,iqr),e(Wr,dqr),e(Wr,De),e(De,p5),e(p5,BMe),e(BMe,cqr),e(p5,fqr),e(p5,mK),e(mK,mqr),e(p5,gqr),e(De,hqr),e(De,u5),e(u5,IMe),e(IMe,pqr),e(u5,uqr),e(u5,gK),e(gK,_qr),e(u5,bqr),e(De,vqr),e(De,_5),e(_5,qMe),e(qMe,Fqr),e(_5,Tqr),e(_5,hK),e(hK,Mqr),e(_5,Eqr),e(De,Cqr),e(De,b5),e(b5,NMe),e(NMe,wqr),e(b5,Aqr),e(b5,pK),e(pK,yqr),e(b5,Lqr),e(De,xqr),e(De,v5),e(v5,jMe),e(jMe,$qr),e(v5,kqr),e(v5,uK),e(uK,Sqr),e(v5,Rqr),e(De,Pqr),e(De,F5),e(F5,DMe),e(DMe,Bqr),e(F5,Iqr),e(F5,_K),e(_K,qqr),e(F5,Nqr),e(De,jqr),e(De,T5),e(T5,GMe),e(GMe,Dqr),e(T5,Gqr),e(T5,bK),e(bK,Oqr),e(T5,Vqr),e(De,Xqr),e(De,M5),e(M5,OMe),e(OMe,zqr),e(M5,Wqr),e(M5,vK),e(vK,Qqr),e(M5,Hqr),e(Wr,Uqr),M(E5,Wr,null),b(f,ZNe,_),b(f,Zc,_),e(Zc,C5),e(C5,VMe),M(Z9,VMe,null),e(Zc,Jqr),e(Zc,XMe),e(XMe,Yqr),b(f,eje,_),b(f,vr,_),M(ex,vr,null),e(vr,Kqr),e(vr,ef),e(ef,Zqr),e(ef,FK),e(FK,eNr),e(ef,oNr),e(ef,TK),e(TK,rNr),e(ef,tNr),e(vr,aNr),e(vr,ox),e(ox,nNr),e(ox,zMe),e(zMe,sNr),e(ox,lNr),e(vr,iNr),e(vr,Ut),M(rx,Ut,null),e(Ut,dNr),e(Ut,WMe),e(WMe,cNr),e(Ut,fNr),e(Ut,of),e(of,mNr),e(of,QMe),e(QMe,gNr),e(of,hNr),e(of,MK),e(MK,pNr),e(of,uNr),e(Ut,_Nr),M(w5,Ut,null),e(vr,bNr),e(vr,Qr),M(tx,Qr,null),e(Qr,vNr),e(Qr,HMe),e(HMe,FNr),e(Qr,TNr),e(Qr,Mn),e(Mn,MNr),e(Mn,UMe),e(UMe,ENr),e(Mn,CNr),e(Mn,JMe),e(JMe,wNr),e(Mn,ANr),e(Mn,YMe),e(YMe,yNr),e(Mn,LNr),e(Qr,xNr),e(Qr,Ge),e(Ge,A5),e(A5,KMe),e(KMe,$Nr),e(A5,kNr),e(A5,EK),e(EK,SNr),e(A5,RNr),e(Ge,PNr),e(Ge,y5),e(y5,ZMe),e(ZMe,BNr),e(y5,INr),e(y5,CK),e(CK,qNr),e(y5,NNr),e(Ge,jNr),e(Ge,L5),e(L5,e4e),e(e4e,DNr),e(L5,GNr),e(L5,wK),e(wK,ONr),e(L5,VNr),e(Ge,XNr),e(Ge,x5),e(x5,o4e),e(o4e,zNr),e(x5,WNr),e(x5,AK),e(AK,QNr),e(x5,HNr),e(Ge,UNr),e(Ge,$5),e($5,r4e),e(r4e,JNr),e($5,YNr),e($5,yK),e(yK,KNr),e($5,ZNr),e(Ge,ejr),e(Ge,k5),e(k5,t4e),e(t4e,ojr),e(k5,rjr),e(k5,LK),e(LK,tjr),e(k5,ajr),e(Ge,njr),e(Ge,S5),e(S5,a4e),e(a4e,sjr),e(S5,ljr),e(S5,xK),e(xK,ijr),e(S5,djr),e(Ge,cjr),e(Ge,R5),e(R5,n4e),e(n4e,fjr),e(R5,mjr),e(R5,$K),e($K,gjr),e(R5,hjr),e(Qr,pjr),M(P5,Qr,null),b(f,oje,_),b(f,rf,_),e(rf,B5),e(B5,s4e),M(ax,s4e,null),e(rf,ujr),e(rf,l4e),e(l4e,_jr),b(f,rje,_),b(f,Fr,_),M(nx,Fr,null),e(Fr,bjr),e(Fr,tf),e(tf,vjr),e(tf,kK),e(kK,Fjr),e(tf,Tjr),e(tf,SK),e(SK,Mjr),e(tf,Ejr),e(Fr,Cjr),e(Fr,sx),e(sx,wjr),e(sx,i4e),e(i4e,Ajr),e(sx,yjr),e(Fr,Ljr),e(Fr,Jt),M(lx,Jt,null),e(Jt,xjr),e(Jt,d4e),e(d4e,$jr),e(Jt,kjr),e(Jt,af),e(af,Sjr),e(af,c4e),e(c4e,Rjr),e(af,Pjr),e(af,RK),e(RK,Bjr),e(af,Ijr),e(Jt,qjr),M(I5,Jt,null),e(Fr,Njr),e(Fr,Hr),M(ix,Hr,null),e(Hr,jjr),e(Hr,f4e),e(f4e,Djr),e(Hr,Gjr),e(Hr,En),e(En,Ojr),e(En,m4e),e(m4e,Vjr),e(En,Xjr),e(En,g4e),e(g4e,zjr),e(En,Wjr),e(En,h4e),e(h4e,Qjr),e(En,Hjr),e(Hr,Ujr),e(Hr,p4e),e(p4e,q5),e(q5,u4e),e(u4e,Jjr),e(q5,Yjr),e(q5,PK),e(PK,Kjr),e(q5,Zjr),e(Hr,eDr),M(N5,Hr,null),b(f,tje,_),b(f,nf,_),e(nf,j5),e(j5,_4e),M(dx,_4e,null),e(nf,oDr),e(nf,b4e),e(b4e,rDr),b(f,aje,_),b(f,Tr,_),M(cx,Tr,null),e(Tr,tDr),e(Tr,sf),e(sf,aDr),e(sf,BK),e(BK,nDr),e(sf,sDr),e(sf,IK),e(IK,lDr),e(sf,iDr),e(Tr,dDr),e(Tr,fx),e(fx,cDr),e(fx,v4e),e(v4e,fDr),e(fx,mDr),e(Tr,gDr),e(Tr,Yt),M(mx,Yt,null),e(Yt,hDr),e(Yt,F4e),e(F4e,pDr),e(Yt,uDr),e(Yt,lf),e(lf,_Dr),e(lf,T4e),e(T4e,bDr),e(lf,vDr),e(lf,qK),e(qK,FDr),e(lf,TDr),e(Yt,MDr),M(D5,Yt,null),e(Tr,EDr),e(Tr,Ur),M(gx,Ur,null),e(Ur,CDr),e(Ur,M4e),e(M4e,wDr),e(Ur,ADr),e(Ur,Cn),e(Cn,yDr),e(Cn,E4e),e(E4e,LDr),e(Cn,xDr),e(Cn,C4e),e(C4e,$Dr),e(Cn,kDr),e(Cn,w4e),e(w4e,SDr),e(Cn,RDr),e(Ur,PDr),e(Ur,hx),e(hx,G5),e(G5,A4e),e(A4e,BDr),e(G5,IDr),e(G5,NK),e(NK,qDr),e(G5,NDr),e(hx,jDr),e(hx,O5),e(O5,y4e),e(y4e,DDr),e(O5,GDr),e(O5,jK),e(jK,ODr),e(O5,VDr),e(Ur,XDr),M(V5,Ur,null),b(f,nje,_),b(f,df,_),e(df,X5),e(X5,L4e),M(px,L4e,null),e(df,zDr),e(df,x4e),e(x4e,WDr),b(f,sje,_),b(f,Mr,_),M(ux,Mr,null),e(Mr,QDr),e(Mr,cf),e(cf,HDr),e(cf,DK),e(DK,UDr),e(cf,JDr),e(cf,GK),e(GK,YDr),e(cf,KDr),e(Mr,ZDr),e(Mr,_x),e(_x,eGr),e(_x,$4e),e($4e,oGr),e(_x,rGr),e(Mr,tGr),e(Mr,Kt),M(bx,Kt,null),e(Kt,aGr),e(Kt,k4e),e(k4e,nGr),e(Kt,sGr),e(Kt,ff),e(ff,lGr),e(ff,S4e),e(S4e,iGr),e(ff,dGr),e(ff,OK),e(OK,cGr),e(ff,fGr),e(Kt,mGr),M(z5,Kt,null),e(Mr,gGr),e(Mr,Jr),M(vx,Jr,null),e(Jr,hGr),e(Jr,R4e),e(R4e,pGr),e(Jr,uGr),e(Jr,wn),e(wn,_Gr),e(wn,P4e),e(P4e,bGr),e(wn,vGr),e(wn,B4e),e(B4e,FGr),e(wn,TGr),e(wn,I4e),e(I4e,MGr),e(wn,EGr),e(Jr,CGr),e(Jr,q4e),e(q4e,W5),e(W5,N4e),e(N4e,wGr),e(W5,AGr),e(W5,VK),e(VK,yGr),e(W5,LGr),e(Jr,xGr),M(Q5,Jr,null),lje=!0},p(f,[_]){const Fx={};_&2&&(Fx.$$scope={dirty:_,ctx:f}),Ff.$set(Fx);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),Fg.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),eh.$set(D4e);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),$h.$set(G4e);const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:f}),kh.$set(Tx);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),Yh.$set(O4e);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Kh.$set(An);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),op.$set(V4e);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),Qu.$set(X4e);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),Uu.$set(z4e);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:f}),N_.$set(Mx);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),D_.$set(W4e);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),C0.$set(Ex);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),A0.$set(Q4e);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:f}),d1.$set(Cx);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),f1.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),x1.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),k1.$set(J4e);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Ab.$set(mf);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),Lb.$set(Y4e);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),n2.$set(K4e);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),l2.$set(Z4e);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:f}),h2.$set(wx);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),u2.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),K2.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),ev.$set(rEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Ov.$set(et);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:f}),Xv.$set(Ax);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),Qv.$set(tEe);const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),Uv.$set(yx);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),iF.$set(aEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),cF.$set(ot);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),gF.$set(nEe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),pF.$set(gf);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),AF.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),LF.$set(lEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),BF.$set(y);const H5={};_&2&&(H5.$$scope={dirty:_,ctx:f}),qF.$set(H5);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),HF.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),JF.$set(dEe);const U5={};_&2&&(U5.$$scope={dirty:_,ctx:f}),e6.$set(U5);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),r6.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),d6.$set(fEe);const J5={};_&2&&(J5.$$scope={dirty:_,ctx:f}),f6.$set(J5);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),u6.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),b6.$set(gEe);const Y5={};_&2&&(Y5.$$scope={dirty:_,ctx:f}),M6.$set(Y5);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),C6.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),y6.$set(pEe);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),x6.$set(K5);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),B6.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),q6.$set(_Ee);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),D6.$set(Z5);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),O6.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),PT.$set(vEe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),IT.$set(e3);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),s7.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),i7.$set(TEe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),T7.$set(o3);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),E7.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),L7.$set(EEe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),$7.$set(r3);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),Y7.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),Z7.$set(wEe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),cM.$set(t3);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),mM.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),jM.$set(yEe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),GM.$set(a3);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),n4.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),l4.$set(xEe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),c4.$set(n3);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),m4.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),h4.$set(kEe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),u4.$set(s3);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),q4.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),j4.$set(REe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),sE.$set(l3);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),iE.$set(PEe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),cE.$set(BEe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),mE.$set(i3);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),hE.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),uE.$set(qEe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),OE.$set(d3);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),XE.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),eC.$set(jEe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),rC.$set(c3);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),pC.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),_C.$set(GEe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),LC.$set(f3);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),$C.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),DC.$set(VEe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),OC.$set(m3);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),ZC.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),o5.$set(zEe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),m5.$set(g3);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),h5.$set(WEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),E5.$set(QEe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),w5.$set(h3);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),P5.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),I5.$set(UEe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),N5.$set(p3);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),D5.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),V5.$set(YEe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),z5.$set(u3);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),Q5.$set(KEe)},i(f){lje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(Ff.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(TA.$$.fragment,f),E(Fg.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(yA.$$.fragment,f),E(eh.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(RA.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(Yh.$$.fragment,f),E(Kh.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(op.$$.fragment,f),E(zA.$$.fragment,f),E(Qu.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(UA.$$.fragment,f),E(Uu.$$.fragment,f),E(JA.$$.fragment,f),E(N_.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ey.$$.fragment,f),E(D_.$$.fragment,f),E(oy.$$.fragment,f),E(C0.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(A0.$$.fragment,f),E(sy.$$.fragment,f),E(d1.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(f1.$$.fragment,f),E(fy.$$.fragment,f),E(x1.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(k1.$$.fragment,f),E(uy.$$.fragment,f),E(Ab.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Lb.$$.fragment,f),E(Ty.$$.fragment,f),E(n2.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(l2.$$.fragment,f),E(Ay.$$.fragment,f),E(h2.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(u2.$$.fragment,f),E(ky.$$.fragment,f),E(K2.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(ev.$$.fragment,f),E(Iy.$$.fragment,f),E(Ov.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(Xv.$$.fragment,f),E(Gy.$$.fragment,f),E(Qv.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(Uv.$$.fragment,f),E(Wy.$$.fragment,f),E(iF.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(cF.$$.fragment,f),E(Yy.$$.fragment,f),E(gF.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(pF.$$.fragment,f),E(rL.$$.fragment,f),E(AF.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(LF.$$.fragment,f),E(lL.$$.fragment,f),E(BF.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(qF.$$.fragment,f),E(mL.$$.fragment,f),E(HF.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(JF.$$.fragment,f),E(_L.$$.fragment,f),E(e6.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(r6.$$.fragment,f),E(EL.$$.fragment,f),E(d6.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(f6.$$.fragment,f),E(LL.$$.fragment,f),E(u6.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(b6.$$.fragment,f),E(RL.$$.fragment,f),E(M6.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(C6.$$.fragment,f),E(jL.$$.fragment,f),E(y6.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(x6.$$.fragment,f),E(XL.$$.fragment,f),E(B6.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(q6.$$.fragment,f),E(UL.$$.fragment,f),E(D6.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(O6.$$.fragment,f),E(e8.$$.fragment,f),E(PT.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(IT.$$.fragment,f),E(n8.$$.fragment,f),E(s7.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(i7.$$.fragment,f),E(c8.$$.fragment,f),E(T7.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(E7.$$.fragment,f),E(p8.$$.fragment,f),E(L7.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E($7.$$.fragment,f),E(F8.$$.fragment,f),E(Y7.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(Z7.$$.fragment,f),E(w8.$$.fragment,f),E(cM.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(mM.$$.fragment,f),E($8.$$.fragment,f),E(jM.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(GM.$$.fragment,f),E(B8.$$.fragment,f),E(n4.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(l4.$$.fragment,f),E(D8.$$.fragment,f),E(c4.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(m4.$$.fragment,f),E(W8.$$.fragment,f),E(h4.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(u4.$$.fragment,f),E(Y8.$$.fragment,f),E(q4.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(j4.$$.fragment,f),E(r9.$$.fragment,f),E(sE.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(iE.$$.fragment,f),E(l9.$$.fragment,f),E(cE.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(mE.$$.fragment,f),E(m9.$$.fragment,f),E(hE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(u9.$$.fragment,f),E(uE.$$.fragment,f),E(_9.$$.fragment,f),E(OE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(XE.$$.fragment,f),E(M9.$$.fragment,f),E(eC.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(rC.$$.fragment,f),E(y9.$$.fragment,f),E(pC.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(_C.$$.fragment,f),E(S9.$$.fragment,f),E(LC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E($C.$$.fragment,f),E(q9.$$.fragment,f),E(DC.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(OC.$$.fragment,f),E(O9.$$.fragment,f),E(ZC.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(o5.$$.fragment,f),E(Q9.$$.fragment,f),E(m5.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(h5.$$.fragment,f),E(K9.$$.fragment,f),E(E5.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(w5.$$.fragment,f),E(tx.$$.fragment,f),E(P5.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(I5.$$.fragment,f),E(ix.$$.fragment,f),E(N5.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(D5.$$.fragment,f),E(gx.$$.fragment,f),E(V5.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(z5.$$.fragment,f),E(vx.$$.fragment,f),E(Q5.$$.fragment,f),lje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(Ff.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(TA.$$.fragment,f),C(Fg.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(yA.$$.fragment,f),C(eh.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(RA.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(Yh.$$.fragment,f),C(Kh.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(op.$$.fragment,f),C(zA.$$.fragment,f),C(Qu.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(UA.$$.fragment,f),C(Uu.$$.fragment,f),C(JA.$$.fragment,f),C(N_.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ey.$$.fragment,f),C(D_.$$.fragment,f),C(oy.$$.fragment,f),C(C0.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(A0.$$.fragment,f),C(sy.$$.fragment,f),C(d1.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(f1.$$.fragment,f),C(fy.$$.fragment,f),C(x1.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(k1.$$.fragment,f),C(uy.$$.fragment,f),C(Ab.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Lb.$$.fragment,f),C(Ty.$$.fragment,f),C(n2.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(l2.$$.fragment,f),C(Ay.$$.fragment,f),C(h2.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(u2.$$.fragment,f),C(ky.$$.fragment,f),C(K2.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(ev.$$.fragment,f),C(Iy.$$.fragment,f),C(Ov.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(Xv.$$.fragment,f),C(Gy.$$.fragment,f),C(Qv.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(Uv.$$.fragment,f),C(Wy.$$.fragment,f),C(iF.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(cF.$$.fragment,f),C(Yy.$$.fragment,f),C(gF.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(pF.$$.fragment,f),C(rL.$$.fragment,f),C(AF.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(LF.$$.fragment,f),C(lL.$$.fragment,f),C(BF.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(qF.$$.fragment,f),C(mL.$$.fragment,f),C(HF.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(JF.$$.fragment,f),C(_L.$$.fragment,f),C(e6.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(r6.$$.fragment,f),C(EL.$$.fragment,f),C(d6.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(f6.$$.fragment,f),C(LL.$$.fragment,f),C(u6.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(b6.$$.fragment,f),C(RL.$$.fragment,f),C(M6.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(C6.$$.fragment,f),C(jL.$$.fragment,f),C(y6.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(x6.$$.fragment,f),C(XL.$$.fragment,f),C(B6.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(q6.$$.fragment,f),C(UL.$$.fragment,f),C(D6.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(O6.$$.fragment,f),C(e8.$$.fragment,f),C(PT.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(IT.$$.fragment,f),C(n8.$$.fragment,f),C(s7.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(i7.$$.fragment,f),C(c8.$$.fragment,f),C(T7.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(E7.$$.fragment,f),C(p8.$$.fragment,f),C(L7.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C($7.$$.fragment,f),C(F8.$$.fragment,f),C(Y7.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(Z7.$$.fragment,f),C(w8.$$.fragment,f),C(cM.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(mM.$$.fragment,f),C($8.$$.fragment,f),C(jM.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(GM.$$.fragment,f),C(B8.$$.fragment,f),C(n4.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(l4.$$.fragment,f),C(D8.$$.fragment,f),C(c4.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(m4.$$.fragment,f),C(W8.$$.fragment,f),C(h4.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(u4.$$.fragment,f),C(Y8.$$.fragment,f),C(q4.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(j4.$$.fragment,f),C(r9.$$.fragment,f),C(sE.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(iE.$$.fragment,f),C(l9.$$.fragment,f),C(cE.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(mE.$$.fragment,f),C(m9.$$.fragment,f),C(hE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(u9.$$.fragment,f),C(uE.$$.fragment,f),C(_9.$$.fragment,f),C(OE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(XE.$$.fragment,f),C(M9.$$.fragment,f),C(eC.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(rC.$$.fragment,f),C(y9.$$.fragment,f),C(pC.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(_C.$$.fragment,f),C(S9.$$.fragment,f),C(LC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C($C.$$.fragment,f),C(q9.$$.fragment,f),C(DC.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(OC.$$.fragment,f),C(O9.$$.fragment,f),C(ZC.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(o5.$$.fragment,f),C(Q9.$$.fragment,f),C(m5.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(h5.$$.fragment,f),C(K9.$$.fragment,f),C(E5.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(w5.$$.fragment,f),C(tx.$$.fragment,f),C(P5.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(I5.$$.fragment,f),C(ix.$$.fragment,f),C(N5.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(D5.$$.fragment,f),C(gx.$$.fragment,f),C(V5.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(z5.$$.fragment,f),C(vx.$$.fragment,f),C(Q5.$$.fragment,f),lje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(aqe),f&&t(bi),w(pA),f&&t(nqe),f&&t(kn),f&&t(sqe),w(uA,f),f&&t(lqe),f&&t(N$),f&&t(iqe),w(Ff,f),f&&t(dqe),f&&t(vi),w(_A),f&&t(cqe),f&&t(Co),w(bA),w(TA),w(Fg),w(MA),f&&t(fqe),f&&t(Ti),w(EA),f&&t(mqe),f&&t(wo),w(CA),w(yA),w(eh),w(LA),f&&t(gqe),f&&t(Mi),w(xA),f&&t(hqe),f&&t(Ao),w($A),w(RA),w($h),w(kh),w(PA),f&&t(pqe),f&&t(Ei),w(BA),f&&t(uqe),f&&t(yo),w(IA),w(jA),w(Yh),w(Kh),w(DA),f&&t(_qe),f&&t(wi),w(GA),f&&t(bqe),f&&t(Lo),w(OA),w(XA),w(op),w(zA),w(Qu),f&&t(vqe),f&&t(Li),w(WA),f&&t(Fqe),f&&t(xo),w(QA),w(UA),w(Uu),w(JA),w(N_),f&&t(Tqe),f&&t(ki),w(YA),f&&t(Mqe),f&&t($o),w(KA),w(ey),w(D_),w(oy),w(C0),f&&t(Eqe),f&&t(Pi),w(ry),f&&t(Cqe),f&&t(ko),w(ty),w(ny),w(A0),w(sy),w(d1),f&&t(wqe),f&&t(qi),w(ly),f&&t(Aqe),f&&t(So),w(iy),w(cy),w(f1),w(fy),w(x1),f&&t(yqe),f&&t(Di),w(my),f&&t(Lqe),f&&t(Ro),w(gy),w(py),w(k1),w(uy),w(Ab),f&&t(xqe),f&&t(Vi),w(_y),f&&t($qe),f&&t(Po),w(by),w(Fy),w(Lb),w(Ty),w(n2),f&&t(kqe),f&&t(Wi),w(My),f&&t(Sqe),f&&t(Bo),w(Ey),w(wy),w(l2),w(Ay),w(h2),f&&t(Rqe),f&&t(Ui),w(yy),f&&t(Pqe),f&&t(Io),w(Ly),w($y),w(u2),w(ky),w(K2),f&&t(Bqe),f&&t(Ki),w(Sy),f&&t(Iqe),f&&t(qo),w(Ry),w(By),w(ev),w(Iy),w(Ov),f&&t(qqe),f&&t(od),w(qy),f&&t(Nqe),f&&t(No),w(Ny),w(Dy),w(Xv),w(Gy),w(Qv),f&&t(jqe),f&&t(ad),w(Oy),f&&t(Dqe),f&&t(jo),w(Vy),w(zy),w(Uv),w(Wy),w(iF),f&&t(Gqe),f&&t(ld),w(Qy),f&&t(Oqe),f&&t(Do),w(Hy),w(Jy),w(cF),w(Yy),w(gF),f&&t(Vqe),f&&t(cd),w(Ky),f&&t(Xqe),f&&t(Go),w(Zy),w(oL),w(pF),w(rL),w(AF),f&&t(zqe),f&&t(gd),w(tL),f&&t(Wqe),f&&t(Oo),w(aL),w(sL),w(LF),w(lL),w(BF),f&&t(Qqe),f&&t(ud),w(iL),f&&t(Hqe),f&&t(Vo),w(dL),w(fL),w(qF),w(mL),w(HF),f&&t(Uqe),f&&t(vd),w(gL),f&&t(Jqe),f&&t(Xo),w(hL),w(uL),w(JF),w(_L),w(e6),f&&t(Yqe),f&&t(Md),w(vL),f&&t(Kqe),f&&t(zo),w(FL),w(ML),w(r6),w(EL),w(d6),f&&t(Zqe),f&&t(wd),w(CL),f&&t(eNe),f&&t(Wo),w(wL),w(yL),w(f6),w(LL),w(u6),f&&t(oNe),f&&t(xd),w(xL),f&&t(rNe),f&&t(Qo),w($L),w(SL),w(b6),w(RL),w(M6),f&&t(tNe),f&&t(Sd),w(BL),f&&t(aNe),f&&t(Ho),w(IL),w(NL),w(C6),w(jL),w(y6),f&&t(nNe),f&&t(Bd),w(DL),f&&t(sNe),f&&t(Uo),w(GL),w(VL),w(x6),w(XL),w(B6),f&&t(lNe),f&&t(Nd),w(zL),f&&t(iNe),f&&t(Jo),w(WL),w(HL),w(q6),w(UL),w(D6),f&&t(dNe),f&&t(Gd),w(JL),f&&t(cNe),f&&t(Yo),w(YL),w(ZL),w(O6),w(e8),w(PT),f&&t(fNe),f&&t(Xd),w(o8),f&&t(mNe),f&&t(Ko),w(r8),w(a8),w(IT),w(n8),w(s7),f&&t(gNe),f&&t(Qd),w(s8),f&&t(hNe),f&&t(Zo),w(l8),w(d8),w(i7),w(c8),w(T7),f&&t(pNe),f&&t(Jd),w(f8),f&&t(uNe),f&&t(er),w(m8),w(h8),w(E7),w(p8),w(L7),f&&t(_Ne),f&&t(Zd),w(u8),f&&t(bNe),f&&t(or),w(_8),w(v8),w($7),w(F8),w(Y7),f&&t(vNe),f&&t(rc),w(T8),f&&t(FNe),f&&t(rr),w(M8),w(C8),w(Z7),w(w8),w(cM),f&&t(TNe),f&&t(nc),w(A8),f&&t(MNe),f&&t(tr),w(y8),w(x8),w(mM),w($8),w(jM),f&&t(ENe),f&&t(ic),w(k8),f&&t(CNe),f&&t(ar),w(S8),w(P8),w(GM),w(B8),w(n4),f&&t(wNe),f&&t(fc),w(I8),f&&t(ANe),f&&t(nr),w(q8),w(j8),w(l4),w(D8),w(c4),f&&t(yNe),f&&t(hc),w(O8),f&&t(LNe),f&&t(sr),w(V8),w(z8),w(m4),w(W8),w(h4),f&&t(xNe),f&&t(_c),w(Q8),f&&t($Ne),f&&t(lr),w(H8),w(J8),w(u4),w(Y8),w(q4),f&&t(kNe),f&&t(Fc),w(K8),f&&t(SNe),f&&t(ir),w(Z8),w(o9),w(j4),w(r9),w(sE),f&&t(RNe),f&&t(Ec),w(t9),f&&t(PNe),f&&t(dr),w(a9),w(s9),w(iE),w(l9),w(cE),f&&t(BNe),f&&t(Ac),w(i9),f&&t(INe),f&&t(cr),w(d9),w(f9),w(mE),w(m9),w(hE),f&&t(qNe),f&&t(xc),w(g9),f&&t(NNe),f&&t(fr),w(h9),w(u9),w(uE),w(_9),w(OE),f&&t(jNe),f&&t(Sc),w(b9),f&&t(DNe),f&&t(mr),w(v9),w(T9),w(XE),w(M9),w(eC),f&&t(GNe),f&&t(Bc),w(E9),f&&t(ONe),f&&t(gr),w(C9),w(A9),w(rC),w(y9),w(pC),f&&t(VNe),f&&t(Nc),w(L9),f&&t(XNe),f&&t(hr),w(x9),w(k9),w(_C),w(S9),w(LC),f&&t(zNe),f&&t(Gc),w(R9),f&&t(WNe),f&&t(pr),w(P9),w(I9),w($C),w(q9),w(DC),f&&t(QNe),f&&t(Xc),w(N9),f&&t(HNe),f&&t(ur),w(j9),w(G9),w(OC),w(O9),w(ZC),f&&t(UNe),f&&t(Qc),w(V9),f&&t(JNe),f&&t(_r),w(X9),w(W9),w(o5),w(Q9),w(m5),f&&t(YNe),f&&t(Jc),w(H9),f&&t(KNe),f&&t(br),w(U9),w(Y9),w(h5),w(K9),w(E5),f&&t(ZNe),f&&t(Zc),w(Z9),f&&t(eje),f&&t(vr),w(ex),w(rx),w(w5),w(tx),w(P5),f&&t(oje),f&&t(rf),w(ax),f&&t(rje),f&&t(Fr),w(nx),w(lx),w(I5),w(ix),w(N5),f&&t(tje),f&&t(nf),w(dx),f&&t(aje),f&&t(Tr),w(cx),w(mx),w(D5),w(gx),w(V5),f&&t(nje),f&&t(df),w(px),f&&t(sje),f&&t(Mr),w(ux),w(bx),w(z5),w(vx),w(Q5)}}}const jxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Dxt(L){return D8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Qxt extends I8t{constructor(g){super();q8t(this,g,Dxt,Nxt,N8t,{})}}export{Qxt as default,jxt as metadata};
