import{S as nxt,i as sxt,s as lxt,e as a,k as l,w as F,t as o,M as ixt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as dxt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as jOr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function cxt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,bA,uf,je,We,hi,yn,vA,Ln,xn,FA,pi,$n,TA,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),bA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),vA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),FA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),TA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var D$=s(p);m=r(D$,"NewModelConfig"),D$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var G$=s(fi);pf=r(G$,"model_type"),G$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var O$=s(mi);gi=r(O$,'"new-model"'),O$.forEach(t),bA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),vA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var V$=s(Ln);xn=r(V$,"PreTrainedModel"),V$.forEach(t),FA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),TA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var X$=s(ui);_f=r(X$,"NewModelConfig"),X$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,bA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,vA),e(je,Ln),e(Ln,xn),e(je,FA),e(je,pi),e(pi,$n),e(je,TA),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,bA,uf,je,We,hi,yn,vA,Ln,xn,FA,pi,$n,TA,ui,_f,Ca,Qe,Ae,D$,_i,G$,O$,Eo,wa,V$,bf,X$,VGe,Sqe,bi,vf,Jee,MA,XGe,Yee,zGe,Rqe,kn,WGe,Kee,QGe,HGe,Zee,UGe,JGe,Pqe,EA,Bqe,z$,YGe,Iqe,Ff,qqe,vi,Tf,eoe,CA,KGe,ooe,ZGe,Nqe,Co,wA,eOe,AA,oOe,W$,rOe,tOe,aOe,yA,nOe,roe,sOe,lOe,iOe,Er,LA,dOe,toe,cOe,fOe,Fi,mOe,aoe,gOe,hOe,noe,pOe,uOe,_Oe,A,Mf,soe,bOe,vOe,Q$,FOe,TOe,MOe,Ef,loe,EOe,COe,H$,wOe,AOe,yOe,Cf,ioe,LOe,xOe,U$,$Oe,kOe,SOe,wf,doe,ROe,POe,J$,BOe,IOe,qOe,Af,coe,NOe,jOe,Y$,DOe,GOe,OOe,yf,foe,VOe,XOe,K$,zOe,WOe,QOe,Lf,moe,HOe,UOe,Z$,JOe,YOe,KOe,xf,goe,ZOe,eVe,ek,oVe,rVe,tVe,$f,hoe,aVe,nVe,ok,sVe,lVe,iVe,kf,poe,dVe,cVe,rk,fVe,mVe,gVe,Sf,uoe,hVe,pVe,tk,uVe,_Ve,bVe,Rf,_oe,vVe,FVe,ak,TVe,MVe,EVe,Pf,boe,CVe,wVe,nk,AVe,yVe,LVe,Bf,voe,xVe,$Ve,sk,kVe,SVe,RVe,If,Foe,PVe,BVe,lk,IVe,qVe,NVe,qf,Toe,jVe,DVe,ik,GVe,OVe,VVe,Nf,Moe,XVe,zVe,dk,WVe,QVe,HVe,jf,Eoe,UVe,JVe,ck,YVe,KVe,ZVe,Df,Coe,eXe,oXe,fk,rXe,tXe,aXe,Gf,woe,nXe,sXe,mk,lXe,iXe,dXe,Of,Aoe,cXe,fXe,gk,mXe,gXe,hXe,Vf,yoe,pXe,uXe,hk,_Xe,bXe,vXe,Xf,Loe,FXe,TXe,pk,MXe,EXe,CXe,zf,xoe,wXe,AXe,uk,yXe,LXe,xXe,Wf,$oe,$Xe,kXe,_k,SXe,RXe,PXe,Qf,koe,BXe,IXe,bk,qXe,NXe,jXe,Hf,Soe,DXe,GXe,vk,OXe,VXe,XXe,Uf,Roe,zXe,WXe,Fk,QXe,HXe,UXe,Jf,Poe,JXe,YXe,Tk,KXe,ZXe,eze,Yf,Boe,oze,rze,Mk,tze,aze,nze,Kf,Ioe,sze,lze,Ek,ize,dze,cze,Zf,qoe,fze,mze,Ck,gze,hze,pze,em,Noe,uze,_ze,wk,bze,vze,Fze,om,joe,Tze,Mze,Ak,Eze,Cze,wze,rm,Doe,Aze,yze,yk,Lze,xze,$ze,tm,Goe,kze,Sze,Lk,Rze,Pze,Bze,am,Ooe,Ize,qze,xk,Nze,jze,Dze,nm,Voe,Gze,Oze,$k,Vze,Xze,zze,sm,Xoe,Wze,Qze,kk,Hze,Uze,Jze,lm,zoe,Yze,Kze,Sk,Zze,eWe,oWe,im,Woe,rWe,tWe,Rk,aWe,nWe,sWe,dm,Qoe,lWe,iWe,Pk,dWe,cWe,fWe,cm,Hoe,mWe,gWe,Bk,hWe,pWe,uWe,fm,Uoe,_We,bWe,Ik,vWe,FWe,TWe,mm,Joe,MWe,EWe,qk,CWe,wWe,AWe,gm,Yoe,yWe,LWe,Nk,xWe,$We,kWe,hm,Koe,SWe,RWe,jk,PWe,BWe,IWe,pm,Zoe,qWe,NWe,Dk,jWe,DWe,GWe,um,ere,OWe,VWe,Gk,XWe,zWe,WWe,_m,ore,QWe,HWe,Ok,UWe,JWe,YWe,bm,rre,KWe,ZWe,Vk,eQe,oQe,rQe,vm,tre,tQe,aQe,Xk,nQe,sQe,lQe,Fm,are,iQe,dQe,zk,cQe,fQe,mQe,Tm,nre,gQe,hQe,Wk,pQe,uQe,_Qe,Mm,sre,bQe,vQe,Qk,FQe,TQe,MQe,Em,lre,EQe,CQe,Hk,wQe,AQe,yQe,Cm,ire,LQe,xQe,Uk,$Qe,kQe,SQe,wm,dre,RQe,PQe,Jk,BQe,IQe,qQe,Am,cre,NQe,jQe,Yk,DQe,GQe,OQe,ym,fre,VQe,XQe,Kk,zQe,WQe,QQe,Lm,mre,HQe,UQe,Zk,JQe,YQe,KQe,xm,gre,ZQe,eHe,eS,oHe,rHe,tHe,$m,hre,aHe,nHe,oS,sHe,lHe,iHe,km,pre,dHe,cHe,rS,fHe,mHe,gHe,Sm,ure,hHe,pHe,tS,uHe,_He,bHe,Rm,_re,vHe,FHe,aS,THe,MHe,EHe,Pm,bre,CHe,wHe,nS,AHe,yHe,LHe,Bm,vre,xHe,$He,sS,kHe,SHe,RHe,Im,Fre,PHe,BHe,lS,IHe,qHe,NHe,qm,Tre,jHe,DHe,iS,GHe,OHe,VHe,Nm,Mre,XHe,zHe,dS,WHe,QHe,HHe,jm,Ere,UHe,JHe,cS,YHe,KHe,ZHe,Dm,Cre,eUe,oUe,fS,rUe,tUe,aUe,Gm,wre,nUe,sUe,mS,lUe,iUe,dUe,Om,Are,cUe,fUe,gS,mUe,gUe,hUe,Vm,yre,pUe,uUe,hS,_Ue,bUe,vUe,Xm,Lre,FUe,TUe,pS,MUe,EUe,CUe,zm,xre,wUe,AUe,uS,yUe,LUe,xUe,Wm,$re,$Ue,kUe,_S,SUe,RUe,PUe,Qm,kre,BUe,IUe,bS,qUe,NUe,jUe,Hm,Sre,DUe,GUe,vS,OUe,VUe,XUe,Um,Rre,zUe,WUe,FS,QUe,HUe,UUe,Jm,Pre,JUe,YUe,TS,KUe,ZUe,eJe,Ym,Bre,oJe,rJe,MS,tJe,aJe,nJe,Km,Ire,sJe,lJe,ES,iJe,dJe,cJe,Zm,qre,fJe,mJe,CS,gJe,hJe,pJe,eg,Nre,uJe,_Je,wS,bJe,vJe,FJe,og,jre,TJe,MJe,AS,EJe,CJe,wJe,rg,Dre,AJe,yJe,yS,LJe,xJe,$Je,tg,Gre,kJe,SJe,LS,RJe,PJe,BJe,ag,Ore,IJe,qJe,xS,NJe,jJe,DJe,ng,Vre,GJe,OJe,$S,VJe,XJe,zJe,sg,Xre,WJe,QJe,kS,HJe,UJe,JJe,lg,zre,YJe,KJe,SS,ZJe,eYe,oYe,ig,Wre,rYe,tYe,RS,aYe,nYe,sYe,dg,Qre,lYe,iYe,PS,dYe,cYe,fYe,cg,Hre,mYe,gYe,BS,hYe,pYe,uYe,fg,Ure,_Ye,bYe,IS,vYe,FYe,TYe,mg,Jre,MYe,EYe,qS,CYe,wYe,AYe,gg,Yre,yYe,LYe,NS,xYe,$Ye,kYe,hg,Kre,SYe,RYe,jS,PYe,BYe,IYe,pg,Zre,qYe,NYe,DS,jYe,DYe,GYe,ug,ete,OYe,VYe,GS,XYe,zYe,WYe,_g,ote,QYe,HYe,OS,UYe,JYe,YYe,bg,rte,KYe,ZYe,VS,eKe,oKe,rKe,vg,tte,tKe,aKe,XS,nKe,sKe,lKe,Fg,ate,iKe,dKe,zS,cKe,fKe,mKe,Tg,nte,gKe,hKe,WS,pKe,uKe,_Ke,Mg,bKe,Eg,xA,vKe,ste,FKe,jqe,Ti,Cg,lte,$A,TKe,ite,MKe,Dqe,wo,kA,EKe,SA,CKe,QS,wKe,AKe,yKe,RA,LKe,dte,xKe,$Ke,kKe,Cr,PA,SKe,cte,RKe,PKe,Aa,BKe,fte,IKe,qKe,mte,NKe,jKe,gte,DKe,GKe,OKe,k,Sn,hte,VKe,XKe,HS,zKe,WKe,US,QKe,HKe,UKe,Rn,pte,JKe,YKe,JS,KKe,ZKe,YS,eZe,oZe,rZe,Pn,ute,tZe,aZe,KS,nZe,sZe,ZS,lZe,iZe,dZe,wg,_te,cZe,fZe,eR,mZe,gZe,hZe,Bn,bte,pZe,uZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,Ag,vte,MZe,EZe,tR,CZe,wZe,AZe,yg,Fte,yZe,LZe,aR,xZe,$Ze,kZe,Lg,Tte,SZe,RZe,nR,PZe,BZe,IZe,In,Mte,qZe,NZe,sR,jZe,DZe,lR,GZe,OZe,VZe,qn,Ete,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,Nn,Cte,YZe,KZe,cR,ZZe,eeo,fR,oeo,reo,teo,xg,wte,aeo,neo,mR,seo,leo,ieo,$g,Ate,deo,ceo,gR,feo,meo,geo,jn,yte,heo,peo,hR,ueo,_eo,pR,beo,veo,Feo,kg,Lte,Teo,Meo,uR,Eeo,Ceo,weo,Dn,xte,Aeo,yeo,_R,Leo,xeo,bR,$eo,keo,Seo,Gn,$te,Reo,Peo,vR,Beo,Ieo,FR,qeo,Neo,jeo,On,kte,Deo,Geo,TR,Oeo,Veo,MR,Xeo,zeo,Weo,Sg,Ste,Qeo,Heo,ER,Ueo,Jeo,Yeo,Vn,Rte,Keo,Zeo,CR,eoo,ooo,wR,roo,too,aoo,Xn,Pte,noo,soo,AR,loo,ioo,yR,doo,coo,foo,zn,Bte,moo,goo,LR,hoo,poo,xR,uoo,_oo,boo,Wn,Ite,voo,Foo,$R,Too,Moo,kR,Eoo,Coo,woo,Qn,qte,Aoo,yoo,SR,Loo,xoo,RR,$oo,koo,Soo,Hn,Nte,Roo,Poo,PR,Boo,Ioo,BR,qoo,Noo,joo,Rg,jte,Doo,Goo,IR,Ooo,Voo,Xoo,Un,Dte,zoo,Woo,qR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Pg,Gte,Koo,Zoo,jR,ero,oro,rro,Jn,Ote,tro,aro,DR,nro,sro,GR,lro,iro,dro,Yn,Vte,cro,fro,OR,mro,gro,VR,hro,pro,uro,Kn,Xte,_ro,bro,XR,vro,Fro,zR,Tro,Mro,Ero,Zn,zte,Cro,wro,WR,Aro,yro,QR,Lro,xro,$ro,es,Wte,kro,Sro,HR,Rro,Pro,UR,Bro,Iro,qro,Bg,Qte,Nro,jro,JR,Dro,Gro,Oro,os,Hte,Vro,Xro,YR,zro,Wro,KR,Qro,Hro,Uro,rs,Ute,Jro,Yro,ZR,Kro,Zro,eP,eto,oto,rto,ts,Jte,tto,ato,oP,nto,sto,rP,lto,ito,dto,as,Yte,cto,fto,tP,mto,gto,aP,hto,pto,uto,ns,Kte,_to,bto,nP,vto,Fto,sP,Tto,Mto,Eto,ss,Zte,Cto,wto,lP,Ato,yto,iP,Lto,xto,$to,ls,eae,kto,Sto,dP,Rto,Pto,cP,Bto,Ito,qto,Ig,oae,Nto,jto,fP,Dto,Gto,Oto,is,rae,Vto,Xto,mP,zto,Wto,gP,Qto,Hto,Uto,qg,tae,Jto,Yto,hP,Kto,Zto,eao,Ng,aae,oao,rao,pP,tao,aao,nao,ds,nae,sao,lao,uP,iao,dao,_P,cao,fao,mao,cs,sae,gao,hao,bP,pao,uao,vP,_ao,bao,vao,fs,lae,Fao,Tao,FP,Mao,Eao,TP,Cao,wao,Aao,jg,iae,yao,Lao,MP,xao,$ao,kao,ms,dae,Sao,Rao,EP,Pao,Bao,CP,Iao,qao,Nao,gs,cae,jao,Dao,wP,Gao,Oao,AP,Vao,Xao,zao,hs,fae,Wao,Qao,yP,Hao,Uao,LP,Jao,Yao,Kao,ps,mae,Zao,eno,xP,ono,rno,$P,tno,ano,nno,us,gae,sno,lno,kP,ino,dno,SP,cno,fno,mno,Dg,hae,gno,hno,RP,pno,uno,_no,_s,pae,bno,vno,PP,Fno,Tno,BP,Mno,Eno,Cno,Gg,uae,wno,Ano,IP,yno,Lno,xno,Og,_ae,$no,kno,qP,Sno,Rno,Pno,Vg,bae,Bno,Ino,NP,qno,Nno,jno,Xg,vae,Dno,Gno,jP,Ono,Vno,Xno,bs,Fae,zno,Wno,DP,Qno,Hno,GP,Uno,Jno,Yno,zg,Tae,Kno,Zno,OP,eso,oso,rso,vs,Mae,tso,aso,VP,nso,sso,XP,lso,iso,dso,Fs,Eae,cso,fso,zP,mso,gso,WP,hso,pso,uso,Ts,Cae,_so,bso,QP,vso,Fso,HP,Tso,Mso,Eso,Ms,wae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Es,Aae,kso,Sso,YP,Rso,Pso,KP,Bso,Iso,qso,Cs,yae,Nso,jso,ZP,Dso,Gso,eB,Oso,Vso,Xso,Wg,Lae,zso,Wso,oB,Qso,Hso,Uso,Qg,xae,Jso,Yso,rB,Kso,Zso,elo,ws,$ae,olo,rlo,tB,tlo,alo,aB,nlo,slo,llo,As,kae,ilo,dlo,nB,clo,flo,sB,mlo,glo,hlo,ys,Sae,plo,ulo,lB,_lo,blo,iB,vlo,Flo,Tlo,Hg,Rae,Mlo,Elo,dB,Clo,wlo,Alo,Ug,Pae,ylo,Llo,cB,xlo,$lo,klo,Jg,Bae,Slo,Rlo,fB,Plo,Blo,Ilo,Ls,Iae,qlo,Nlo,mB,jlo,Dlo,gB,Glo,Olo,Vlo,Yg,qae,Xlo,zlo,hB,Wlo,Qlo,Hlo,Kg,Nae,Ulo,Jlo,pB,Ylo,Klo,Zlo,Zg,jae,eio,oio,uB,rio,tio,aio,xs,Dae,nio,sio,_B,lio,iio,bB,dio,cio,fio,eh,Gae,mio,gio,vB,hio,pio,uio,oh,Oae,_io,bio,FB,vio,Fio,Tio,$s,Vae,Mio,Eio,TB,Cio,wio,MB,Aio,yio,Lio,ks,Xae,xio,$io,EB,kio,Sio,CB,Rio,Pio,Bio,Ss,zae,Iio,qio,wB,Nio,jio,AB,Dio,Gio,Oio,Rs,Wae,Vio,Xio,yB,zio,Wio,LB,Qio,Hio,Uio,rh,Jio,th,BA,Yio,Qae,Kio,Gqe,Mi,ah,Hae,IA,Zio,Uae,edo,Oqe,Ao,qA,odo,NA,rdo,xB,tdo,ado,ndo,jA,sdo,Jae,ldo,ido,ddo,He,DA,cdo,Yae,fdo,mdo,ya,gdo,Kae,hdo,pdo,Zae,udo,_do,ene,bdo,vdo,Fdo,K,nh,one,Tdo,Mdo,$B,Edo,Cdo,wdo,sh,rne,Ado,ydo,kB,Ldo,xdo,$do,lh,tne,kdo,Sdo,SB,Rdo,Pdo,Bdo,ih,ane,Ido,qdo,RB,Ndo,jdo,Ddo,dh,nne,Gdo,Odo,PB,Vdo,Xdo,zdo,ch,sne,Wdo,Qdo,BB,Hdo,Udo,Jdo,fh,lne,Ydo,Kdo,IB,Zdo,eco,oco,mh,ine,rco,tco,qB,aco,nco,sco,gh,dne,lco,ico,NB,dco,cco,fco,hh,cne,mco,gco,jB,hco,pco,uco,ph,fne,_co,bco,DB,vco,Fco,Tco,uh,mne,Mco,Eco,GB,Cco,wco,Aco,_h,gne,yco,Lco,OB,xco,$co,kco,bh,hne,Sco,Rco,VB,Pco,Bco,Ico,vh,pne,qco,Nco,XB,jco,Dco,Gco,Fh,une,Oco,Vco,zB,Xco,zco,Wco,Th,_ne,Qco,Hco,WB,Uco,Jco,Yco,Mh,bne,Kco,Zco,QB,efo,ofo,rfo,Eh,vne,tfo,afo,HB,nfo,sfo,lfo,Ch,Fne,ifo,dfo,UB,cfo,ffo,mfo,wh,Tne,gfo,hfo,JB,pfo,ufo,_fo,Ah,Mne,bfo,vfo,YB,Ffo,Tfo,Mfo,yh,Ene,Efo,Cfo,KB,wfo,Afo,yfo,Lh,Cne,Lfo,xfo,ZB,$fo,kfo,Sfo,xh,wne,Rfo,Pfo,eI,Bfo,Ifo,qfo,$h,Ane,Nfo,jfo,oI,Dfo,Gfo,Ofo,kh,yne,Vfo,Xfo,rI,zfo,Wfo,Qfo,Sh,Lne,Hfo,Ufo,tI,Jfo,Yfo,Kfo,Rh,Zfo,Ph,emo,Bh,GA,omo,xne,rmo,Vqe,Ei,Ih,$ne,OA,tmo,kne,amo,Xqe,yo,VA,nmo,XA,smo,aI,lmo,imo,dmo,zA,cmo,Sne,fmo,mmo,gmo,Ue,WA,hmo,Rne,pmo,umo,Ci,_mo,Pne,bmo,vmo,Bne,Fmo,Tmo,Mmo,he,qh,Ine,Emo,Cmo,nI,wmo,Amo,ymo,Nh,qne,Lmo,xmo,Nne,$mo,kmo,Smo,jh,jne,Rmo,Pmo,sI,Bmo,Imo,qmo,Dh,Dne,Nmo,jmo,lI,Dmo,Gmo,Omo,Gh,Gne,Vmo,Xmo,iI,zmo,Wmo,Qmo,Oh,One,Hmo,Umo,dI,Jmo,Ymo,Kmo,Vh,Vne,Zmo,ego,cI,ogo,rgo,tgo,Xh,Xne,ago,ngo,fI,sgo,lgo,igo,zh,zne,dgo,cgo,mI,fgo,mgo,ggo,Wh,Wne,hgo,pgo,gI,ugo,_go,bgo,Qh,Qne,vgo,Fgo,hI,Tgo,Mgo,Ego,Hh,Hne,Cgo,wgo,pI,Ago,ygo,Lgo,Uh,Une,xgo,$go,uI,kgo,Sgo,Rgo,Jh,Jne,Pgo,Bgo,_I,Igo,qgo,Ngo,Yh,Yne,jgo,Dgo,bI,Ggo,Ogo,Vgo,Kh,Kne,Xgo,zgo,vI,Wgo,Qgo,Hgo,Zh,Zne,Ugo,Jgo,FI,Ygo,Kgo,Zgo,ep,eho,op,oho,rp,QA,rho,ese,tho,zqe,wi,tp,ose,HA,aho,rse,nho,Wqe,Lo,UA,sho,Ai,lho,TI,iho,dho,MI,cho,fho,mho,JA,gho,tse,hho,pho,uho,tt,YA,_ho,ase,bho,vho,yi,Fho,nse,Tho,Mho,EI,Eho,Cho,who,ap,Aho,Je,KA,yho,sse,Lho,xho,La,$ho,lse,kho,Sho,ise,Rho,Pho,dse,Bho,Iho,qho,x,np,cse,Nho,jho,CI,Dho,Gho,Oho,sp,fse,Vho,Xho,wI,zho,Who,Qho,lp,mse,Hho,Uho,AI,Jho,Yho,Kho,ip,gse,Zho,epo,yI,opo,rpo,tpo,dp,hse,apo,npo,LI,spo,lpo,ipo,cp,pse,dpo,cpo,xI,fpo,mpo,gpo,fp,use,hpo,ppo,$I,upo,_po,bpo,mp,_se,vpo,Fpo,kI,Tpo,Mpo,Epo,gp,bse,Cpo,wpo,SI,Apo,ypo,Lpo,hp,vse,xpo,$po,RI,kpo,Spo,Rpo,pp,Fse,Ppo,Bpo,PI,Ipo,qpo,Npo,up,Tse,jpo,Dpo,BI,Gpo,Opo,Vpo,_p,Mse,Xpo,zpo,II,Wpo,Qpo,Hpo,bp,Ese,Upo,Jpo,qI,Ypo,Kpo,Zpo,vp,Cse,euo,ouo,NI,ruo,tuo,auo,Fp,wse,nuo,suo,jI,luo,iuo,duo,Tp,Ase,cuo,fuo,DI,muo,guo,huo,Mp,yse,puo,uuo,GI,_uo,buo,vuo,Ep,Lse,Fuo,Tuo,OI,Muo,Euo,Cuo,Cp,xse,wuo,Auo,VI,yuo,Luo,xuo,wp,$se,$uo,kuo,XI,Suo,Ruo,Puo,Ap,kse,Buo,Iuo,zI,quo,Nuo,juo,yp,Sse,Duo,Guo,WI,Ouo,Vuo,Xuo,Lp,Rse,zuo,Wuo,QI,Quo,Huo,Uuo,xp,Pse,Juo,Yuo,HI,Kuo,Zuo,e_o,$p,Bse,o_o,r_o,UI,t_o,a_o,n_o,kp,Ise,s_o,l_o,JI,i_o,d_o,c_o,Sp,qse,f_o,m_o,YI,g_o,h_o,p_o,Rp,Nse,u_o,__o,KI,b_o,v_o,F_o,Pp,jse,T_o,M_o,ZI,E_o,C_o,w_o,Bp,Dse,A_o,y_o,eq,L_o,x_o,$_o,Ip,Gse,k_o,S_o,oq,R_o,P_o,B_o,Ps,Ose,I_o,q_o,rq,N_o,j_o,tq,D_o,G_o,O_o,qp,Vse,V_o,X_o,aq,z_o,W_o,Q_o,Np,Xse,H_o,U_o,nq,J_o,Y_o,K_o,jp,zse,Z_o,e0o,sq,o0o,r0o,t0o,Dp,Wse,a0o,n0o,lq,s0o,l0o,i0o,Gp,Qse,d0o,c0o,iq,f0o,m0o,g0o,Op,Hse,h0o,p0o,dq,u0o,_0o,b0o,Vp,Use,v0o,F0o,cq,T0o,M0o,E0o,Xp,Jse,C0o,w0o,fq,A0o,y0o,L0o,zp,Yse,x0o,$0o,mq,k0o,S0o,R0o,Wp,Kse,P0o,B0o,gq,I0o,q0o,N0o,Qp,Zse,j0o,D0o,hq,G0o,O0o,V0o,Hp,ele,X0o,z0o,pq,W0o,Q0o,H0o,Up,ole,U0o,J0o,uq,Y0o,K0o,Z0o,Jp,rle,e1o,o1o,_q,r1o,t1o,a1o,Yp,tle,n1o,s1o,bq,l1o,i1o,d1o,Kp,ale,c1o,f1o,vq,m1o,g1o,h1o,Zp,nle,p1o,u1o,Fq,_1o,b1o,v1o,eu,sle,F1o,T1o,Tq,M1o,E1o,C1o,ou,lle,w1o,A1o,Mq,y1o,L1o,x1o,ru,ile,$1o,k1o,Eq,S1o,R1o,P1o,tu,dle,B1o,I1o,Cq,q1o,N1o,j1o,au,cle,D1o,G1o,wq,O1o,V1o,X1o,nu,fle,z1o,W1o,Aq,Q1o,H1o,U1o,su,mle,J1o,Y1o,yq,K1o,Z1o,ebo,lu,gle,obo,rbo,Lq,tbo,abo,nbo,iu,hle,sbo,lbo,xq,ibo,dbo,cbo,du,ple,fbo,mbo,$q,gbo,hbo,pbo,cu,ule,ubo,_bo,kq,bbo,vbo,Fbo,fu,_le,Tbo,Mbo,Sq,Ebo,Cbo,wbo,mu,ble,Abo,ybo,Rq,Lbo,xbo,$bo,gu,vle,kbo,Sbo,Pq,Rbo,Pbo,Bbo,hu,Fle,Ibo,qbo,Bq,Nbo,jbo,Dbo,pu,Tle,Gbo,Obo,Iq,Vbo,Xbo,zbo,uu,Mle,Wbo,Qbo,qq,Hbo,Ubo,Jbo,_u,Ele,Ybo,Kbo,Nq,Zbo,e2o,o2o,bu,Cle,r2o,t2o,jq,a2o,n2o,s2o,vu,wle,l2o,i2o,Dq,d2o,c2o,f2o,Fu,Ale,m2o,g2o,Gq,h2o,p2o,u2o,Tu,yle,_2o,b2o,Oq,v2o,F2o,T2o,Mu,Lle,M2o,E2o,Vq,C2o,w2o,A2o,Eu,xle,y2o,L2o,Xq,x2o,$2o,k2o,Cu,$le,S2o,R2o,zq,P2o,B2o,I2o,wu,kle,q2o,N2o,Wq,j2o,D2o,G2o,Au,Sle,O2o,V2o,Qq,X2o,z2o,W2o,yu,Rle,Q2o,H2o,Hq,U2o,J2o,Y2o,Lu,Ple,K2o,Z2o,Uq,evo,ovo,rvo,xu,Ble,tvo,avo,Jq,nvo,svo,lvo,$u,Ile,ivo,dvo,Yq,cvo,fvo,mvo,ku,qle,gvo,hvo,Kq,pvo,uvo,_vo,Su,Nle,bvo,vvo,Zq,Fvo,Tvo,Mvo,Ru,jle,Evo,Cvo,eN,wvo,Avo,yvo,Pu,Dle,Lvo,xvo,oN,$vo,kvo,Svo,Bu,Gle,Rvo,Pvo,rN,Bvo,Ivo,qvo,Iu,Ole,Nvo,jvo,tN,Dvo,Gvo,Ovo,qu,Vle,Vvo,Xvo,aN,zvo,Wvo,Qvo,Nu,Xle,Hvo,Uvo,nN,Jvo,Yvo,Kvo,ju,zle,Zvo,eFo,sN,oFo,rFo,tFo,Du,Wle,aFo,nFo,lN,sFo,lFo,iFo,Gu,Qle,dFo,cFo,iN,fFo,mFo,gFo,Ou,Hle,hFo,pFo,dN,uFo,_Fo,bFo,Vu,Ule,vFo,FFo,cN,TFo,MFo,EFo,Xu,Jle,CFo,wFo,fN,AFo,yFo,LFo,zu,Yle,xFo,$Fo,mN,kFo,SFo,RFo,Wu,Kle,PFo,BFo,gN,IFo,qFo,NFo,Qu,Zle,jFo,DFo,hN,GFo,OFo,VFo,Hu,eie,XFo,zFo,pN,WFo,QFo,HFo,Uu,oie,UFo,JFo,uN,YFo,KFo,ZFo,Ju,rie,e6o,o6o,_N,r6o,t6o,a6o,Yu,n6o,tie,s6o,l6o,aie,i6o,d6o,Ku,Qqe,Li,Zu,nie,ZA,c6o,sie,f6o,Hqe,xo,ey,m6o,xi,g6o,bN,h6o,p6o,vN,u6o,_6o,b6o,oy,v6o,lie,F6o,T6o,M6o,at,ry,E6o,iie,C6o,w6o,$i,A6o,die,y6o,L6o,FN,x6o,$6o,k6o,e_,S6o,Ye,ty,R6o,cie,P6o,B6o,xa,I6o,fie,q6o,N6o,mie,j6o,D6o,gie,G6o,O6o,V6o,G,o_,hie,X6o,z6o,TN,W6o,Q6o,H6o,r_,pie,U6o,J6o,MN,Y6o,K6o,Z6o,t_,uie,eTo,oTo,EN,rTo,tTo,aTo,a_,_ie,nTo,sTo,CN,lTo,iTo,dTo,n_,bie,cTo,fTo,wN,mTo,gTo,hTo,s_,vie,pTo,uTo,AN,_To,bTo,vTo,l_,Fie,FTo,TTo,yN,MTo,ETo,CTo,i_,Tie,wTo,ATo,LN,yTo,LTo,xTo,d_,Mie,$To,kTo,xN,STo,RTo,PTo,c_,Eie,BTo,ITo,$N,qTo,NTo,jTo,f_,Cie,DTo,GTo,kN,OTo,VTo,XTo,m_,wie,zTo,WTo,SN,QTo,HTo,UTo,g_,Aie,JTo,YTo,RN,KTo,ZTo,e7o,h_,yie,o7o,r7o,PN,t7o,a7o,n7o,p_,Lie,s7o,l7o,BN,i7o,d7o,c7o,u_,xie,f7o,m7o,IN,g7o,h7o,p7o,__,$ie,u7o,_7o,qN,b7o,v7o,F7o,b_,kie,T7o,M7o,NN,E7o,C7o,w7o,v_,Sie,A7o,y7o,jN,L7o,x7o,$7o,F_,Rie,k7o,S7o,DN,R7o,P7o,B7o,T_,Pie,I7o,q7o,GN,N7o,j7o,D7o,M_,Bie,G7o,O7o,ON,V7o,X7o,z7o,E_,Iie,W7o,Q7o,VN,H7o,U7o,J7o,C_,qie,Y7o,K7o,XN,Z7o,eMo,oMo,w_,Nie,rMo,tMo,zN,aMo,nMo,sMo,A_,jie,lMo,iMo,WN,dMo,cMo,fMo,y_,Die,mMo,gMo,QN,hMo,pMo,uMo,L_,Gie,_Mo,bMo,HN,vMo,FMo,TMo,x_,Oie,MMo,EMo,UN,CMo,wMo,AMo,$_,Vie,yMo,LMo,JN,xMo,$Mo,kMo,k_,Xie,SMo,RMo,YN,PMo,BMo,IMo,S_,zie,qMo,NMo,KN,jMo,DMo,GMo,R_,Wie,OMo,VMo,ZN,XMo,zMo,WMo,P_,Qie,QMo,HMo,ej,UMo,JMo,YMo,B_,Hie,KMo,ZMo,oj,e4o,o4o,r4o,I_,Uie,t4o,a4o,rj,n4o,s4o,l4o,q_,Jie,i4o,d4o,tj,c4o,f4o,m4o,N_,Yie,g4o,h4o,aj,p4o,u4o,_4o,j_,Kie,b4o,v4o,nj,F4o,T4o,M4o,D_,Zie,E4o,C4o,sj,w4o,A4o,y4o,G_,ede,L4o,x4o,lj,$4o,k4o,S4o,O_,ode,R4o,P4o,ij,B4o,I4o,q4o,V_,N4o,rde,j4o,D4o,tde,G4o,O4o,X_,Uqe,ki,z_,ade,ay,V4o,nde,X4o,Jqe,$o,ny,z4o,Si,W4o,dj,Q4o,H4o,cj,U4o,J4o,Y4o,sy,K4o,sde,Z4o,eEo,oEo,nt,ly,rEo,lde,tEo,aEo,Ri,nEo,ide,sEo,lEo,fj,iEo,dEo,cEo,W_,fEo,Ke,iy,mEo,dde,gEo,hEo,$a,pEo,cde,uEo,_Eo,fde,bEo,vEo,mde,FEo,TEo,MEo,z,Q_,gde,EEo,CEo,mj,wEo,AEo,yEo,H_,hde,LEo,xEo,gj,$Eo,kEo,SEo,U_,pde,REo,PEo,hj,BEo,IEo,qEo,J_,ude,NEo,jEo,pj,DEo,GEo,OEo,Y_,_de,VEo,XEo,uj,zEo,WEo,QEo,K_,bde,HEo,UEo,_j,JEo,YEo,KEo,Z_,vde,ZEo,eCo,bj,oCo,rCo,tCo,e0,Fde,aCo,nCo,vj,sCo,lCo,iCo,o0,Tde,dCo,cCo,Fj,fCo,mCo,gCo,r0,Mde,hCo,pCo,Tj,uCo,_Co,bCo,t0,Ede,vCo,FCo,Mj,TCo,MCo,ECo,a0,Cde,CCo,wCo,Ej,ACo,yCo,LCo,n0,wde,xCo,$Co,Cj,kCo,SCo,RCo,s0,Ade,PCo,BCo,wj,ICo,qCo,NCo,l0,yde,jCo,DCo,Aj,GCo,OCo,VCo,i0,Lde,XCo,zCo,yj,WCo,QCo,HCo,d0,xde,UCo,JCo,Lj,YCo,KCo,ZCo,c0,$de,e5o,o5o,xj,r5o,t5o,a5o,f0,kde,n5o,s5o,$j,l5o,i5o,d5o,m0,Sde,c5o,f5o,kj,m5o,g5o,h5o,g0,Rde,p5o,u5o,Sj,_5o,b5o,v5o,h0,Pde,F5o,T5o,Rj,M5o,E5o,C5o,p0,Bde,w5o,A5o,Pj,y5o,L5o,x5o,u0,Ide,$5o,k5o,Bj,S5o,R5o,P5o,_0,qde,B5o,I5o,Ij,q5o,N5o,j5o,b0,Nde,D5o,G5o,qj,O5o,V5o,X5o,v0,jde,z5o,W5o,Nj,Q5o,H5o,U5o,F0,Dde,J5o,Y5o,jj,K5o,Z5o,e3o,T0,Gde,o3o,r3o,Dj,t3o,a3o,n3o,M0,Ode,s3o,l3o,Gj,i3o,d3o,c3o,E0,Vde,f3o,m3o,Oj,g3o,h3o,p3o,C0,Xde,u3o,_3o,Vj,b3o,v3o,F3o,w0,zde,T3o,M3o,Xj,E3o,C3o,w3o,A0,Wde,A3o,y3o,zj,L3o,x3o,$3o,y0,Qde,k3o,S3o,Wj,R3o,P3o,B3o,L0,Hde,I3o,q3o,Qj,N3o,j3o,D3o,x0,G3o,Ude,O3o,V3o,Jde,X3o,z3o,$0,Yqe,Pi,k0,Yde,dy,W3o,Kde,Q3o,Kqe,ko,cy,H3o,Bi,U3o,Hj,J3o,Y3o,Uj,K3o,Z3o,ewo,fy,owo,Zde,rwo,two,awo,st,my,nwo,ece,swo,lwo,Ii,iwo,oce,dwo,cwo,Jj,fwo,mwo,gwo,S0,hwo,Ze,gy,pwo,rce,uwo,_wo,ka,bwo,tce,vwo,Fwo,ace,Two,Mwo,nce,Ewo,Cwo,wwo,W,R0,sce,Awo,ywo,Yj,Lwo,xwo,$wo,P0,lce,kwo,Swo,Kj,Rwo,Pwo,Bwo,B0,ice,Iwo,qwo,Zj,Nwo,jwo,Dwo,I0,dce,Gwo,Owo,eD,Vwo,Xwo,zwo,q0,cce,Wwo,Qwo,oD,Hwo,Uwo,Jwo,N0,fce,Ywo,Kwo,rD,Zwo,eAo,oAo,j0,mce,rAo,tAo,tD,aAo,nAo,sAo,D0,gce,lAo,iAo,aD,dAo,cAo,fAo,G0,hce,mAo,gAo,nD,hAo,pAo,uAo,O0,pce,_Ao,bAo,sD,vAo,FAo,TAo,V0,uce,MAo,EAo,lD,CAo,wAo,AAo,X0,_ce,yAo,LAo,iD,xAo,$Ao,kAo,z0,bce,SAo,RAo,dD,PAo,BAo,IAo,W0,vce,qAo,NAo,cD,jAo,DAo,GAo,Q0,Fce,OAo,VAo,fD,XAo,zAo,WAo,H0,Tce,QAo,HAo,mD,UAo,JAo,YAo,U0,Mce,KAo,ZAo,gD,eyo,oyo,ryo,J0,Ece,tyo,ayo,hD,nyo,syo,lyo,Y0,Cce,iyo,dyo,pD,cyo,fyo,myo,K0,wce,gyo,hyo,uD,pyo,uyo,_yo,Z0,Ace,byo,vyo,_D,Fyo,Tyo,Myo,e1,yce,Eyo,Cyo,bD,wyo,Ayo,yyo,o1,Lce,Lyo,xyo,vD,$yo,kyo,Syo,r1,xce,Ryo,Pyo,FD,Byo,Iyo,qyo,t1,$ce,Nyo,jyo,TD,Dyo,Gyo,Oyo,a1,kce,Vyo,Xyo,MD,zyo,Wyo,Qyo,n1,Sce,Hyo,Uyo,ED,Jyo,Yyo,Kyo,s1,Rce,Zyo,eLo,CD,oLo,rLo,tLo,l1,Pce,aLo,nLo,wD,sLo,lLo,iLo,i1,Bce,dLo,cLo,AD,fLo,mLo,gLo,d1,Ice,hLo,pLo,qce,uLo,_Lo,bLo,c1,Nce,vLo,FLo,yD,TLo,MLo,ELo,f1,jce,CLo,wLo,LD,ALo,yLo,LLo,m1,Dce,xLo,$Lo,xD,kLo,SLo,RLo,g1,Gce,PLo,BLo,$D,ILo,qLo,NLo,h1,jLo,Oce,DLo,GLo,Vce,OLo,VLo,p1,Zqe,qi,u1,Xce,hy,XLo,zce,zLo,eNe,So,py,WLo,Ni,QLo,kD,HLo,ULo,SD,JLo,YLo,KLo,uy,ZLo,Wce,e8o,o8o,r8o,lt,_y,t8o,Qce,a8o,n8o,ji,s8o,Hce,l8o,i8o,RD,d8o,c8o,f8o,_1,m8o,eo,by,g8o,Uce,h8o,p8o,Sa,u8o,Jce,_8o,b8o,Yce,v8o,F8o,Kce,T8o,M8o,E8o,ue,b1,Zce,C8o,w8o,PD,A8o,y8o,L8o,v1,efe,x8o,$8o,BD,k8o,S8o,R8o,F1,ofe,P8o,B8o,ID,I8o,q8o,N8o,T1,rfe,j8o,D8o,qD,G8o,O8o,V8o,M1,tfe,X8o,z8o,ND,W8o,Q8o,H8o,E1,afe,U8o,J8o,jD,Y8o,K8o,Z8o,C1,nfe,e9o,o9o,DD,r9o,t9o,a9o,w1,sfe,n9o,s9o,GD,l9o,i9o,d9o,A1,lfe,c9o,f9o,OD,m9o,g9o,h9o,y1,ife,p9o,u9o,VD,_9o,b9o,v9o,L1,dfe,F9o,T9o,XD,M9o,E9o,C9o,x1,cfe,w9o,A9o,zD,y9o,L9o,x9o,$1,ffe,$9o,k9o,WD,S9o,R9o,P9o,k1,mfe,B9o,I9o,QD,q9o,N9o,j9o,S1,gfe,D9o,G9o,HD,O9o,V9o,X9o,R1,hfe,z9o,W9o,UD,Q9o,H9o,U9o,P1,J9o,pfe,Y9o,K9o,ufe,Z9o,exo,B1,oNe,Di,I1,_fe,vy,oxo,bfe,rxo,rNe,Ro,Fy,txo,Gi,axo,JD,nxo,sxo,YD,lxo,ixo,dxo,Ty,cxo,vfe,fxo,mxo,gxo,it,My,hxo,Ffe,pxo,uxo,Oi,_xo,Tfe,bxo,vxo,KD,Fxo,Txo,Mxo,q1,Exo,oo,Ey,Cxo,Mfe,wxo,Axo,Ra,yxo,Efe,Lxo,xxo,Cfe,$xo,kxo,wfe,Sxo,Rxo,Pxo,q,N1,Afe,Bxo,Ixo,ZD,qxo,Nxo,jxo,j1,yfe,Dxo,Gxo,eG,Oxo,Vxo,Xxo,D1,Lfe,zxo,Wxo,oG,Qxo,Hxo,Uxo,G1,xfe,Jxo,Yxo,rG,Kxo,Zxo,e$o,O1,$fe,o$o,r$o,tG,t$o,a$o,n$o,V1,kfe,s$o,l$o,aG,i$o,d$o,c$o,X1,Sfe,f$o,m$o,nG,g$o,h$o,p$o,z1,Rfe,u$o,_$o,sG,b$o,v$o,F$o,W1,Pfe,T$o,M$o,lG,E$o,C$o,w$o,Q1,Bfe,A$o,y$o,iG,L$o,x$o,$$o,H1,Ife,k$o,S$o,dG,R$o,P$o,B$o,U1,qfe,I$o,q$o,cG,N$o,j$o,D$o,J1,Nfe,G$o,O$o,fG,V$o,X$o,z$o,Y1,jfe,W$o,Q$o,mG,H$o,U$o,J$o,K1,Dfe,Y$o,K$o,gG,Z$o,eko,oko,Z1,Gfe,rko,tko,hG,ako,nko,sko,eb,Ofe,lko,iko,pG,dko,cko,fko,ob,Vfe,mko,gko,uG,hko,pko,uko,rb,Xfe,_ko,bko,_G,vko,Fko,Tko,tb,zfe,Mko,Eko,bG,Cko,wko,Ako,ab,Wfe,yko,Lko,vG,xko,$ko,kko,nb,Qfe,Sko,Rko,FG,Pko,Bko,Iko,sb,Hfe,qko,Nko,TG,jko,Dko,Gko,lb,Ufe,Oko,Vko,MG,Xko,zko,Wko,ib,Jfe,Qko,Hko,EG,Uko,Jko,Yko,db,Yfe,Kko,Zko,CG,eSo,oSo,rSo,cb,Kfe,tSo,aSo,wG,nSo,sSo,lSo,fb,Zfe,iSo,dSo,AG,cSo,fSo,mSo,mb,eme,gSo,hSo,yG,pSo,uSo,_So,gb,ome,bSo,vSo,LG,FSo,TSo,MSo,hb,rme,ESo,CSo,xG,wSo,ASo,ySo,pb,tme,LSo,xSo,$G,$So,kSo,SSo,ub,ame,RSo,PSo,kG,BSo,ISo,qSo,_b,nme,NSo,jSo,SG,DSo,GSo,OSo,bb,sme,VSo,XSo,RG,zSo,WSo,QSo,vb,lme,HSo,USo,PG,JSo,YSo,KSo,Fb,ime,ZSo,eRo,BG,oRo,rRo,tRo,Tb,dme,aRo,nRo,IG,sRo,lRo,iRo,Mb,cme,dRo,cRo,qG,fRo,mRo,gRo,Eb,fme,hRo,pRo,NG,uRo,_Ro,bRo,Cb,mme,vRo,FRo,jG,TRo,MRo,ERo,wb,gme,CRo,wRo,DG,ARo,yRo,LRo,Ab,hme,xRo,$Ro,GG,kRo,SRo,RRo,yb,pme,PRo,BRo,OG,IRo,qRo,NRo,Lb,ume,jRo,DRo,VG,GRo,ORo,VRo,xb,_me,XRo,zRo,XG,WRo,QRo,HRo,$b,bme,URo,JRo,zG,YRo,KRo,ZRo,kb,ePo,vme,oPo,rPo,Fme,tPo,aPo,Sb,tNe,Vi,Rb,Tme,Cy,nPo,Mme,sPo,aNe,Po,wy,lPo,Xi,iPo,WG,dPo,cPo,QG,fPo,mPo,gPo,Ay,hPo,Eme,pPo,uPo,_Po,dt,yy,bPo,Cme,vPo,FPo,zi,TPo,wme,MPo,EPo,HG,CPo,wPo,APo,Pb,yPo,ro,Ly,LPo,Ame,xPo,$Po,Pa,kPo,yme,SPo,RPo,Lme,PPo,BPo,xme,IPo,qPo,NPo,Y,Bb,$me,jPo,DPo,UG,GPo,OPo,VPo,Ib,kme,XPo,zPo,JG,WPo,QPo,HPo,qb,Sme,UPo,JPo,YG,YPo,KPo,ZPo,Nb,Rme,eBo,oBo,KG,rBo,tBo,aBo,jb,Pme,nBo,sBo,ZG,lBo,iBo,dBo,Db,Bme,cBo,fBo,eO,mBo,gBo,hBo,Gb,Ime,pBo,uBo,oO,_Bo,bBo,vBo,Ob,qme,FBo,TBo,rO,MBo,EBo,CBo,Vb,Nme,wBo,ABo,tO,yBo,LBo,xBo,Xb,jme,$Bo,kBo,aO,SBo,RBo,PBo,zb,Dme,BBo,IBo,nO,qBo,NBo,jBo,Wb,Gme,DBo,GBo,sO,OBo,VBo,XBo,Qb,Ome,zBo,WBo,lO,QBo,HBo,UBo,Hb,Vme,JBo,YBo,iO,KBo,ZBo,eIo,Ub,Xme,oIo,rIo,dO,tIo,aIo,nIo,Jb,zme,sIo,lIo,cO,iIo,dIo,cIo,Yb,Wme,fIo,mIo,fO,gIo,hIo,pIo,Kb,Qme,uIo,_Io,mO,bIo,vIo,FIo,Zb,Hme,TIo,MIo,gO,EIo,CIo,wIo,e2,Ume,AIo,yIo,hO,LIo,xIo,$Io,o2,Jme,kIo,SIo,pO,RIo,PIo,BIo,r2,Yme,IIo,qIo,uO,NIo,jIo,DIo,t2,Kme,GIo,OIo,_O,VIo,XIo,zIo,a2,Zme,WIo,QIo,bO,HIo,UIo,JIo,n2,ege,YIo,KIo,vO,ZIo,eqo,oqo,s2,oge,rqo,tqo,FO,aqo,nqo,sqo,l2,rge,lqo,iqo,TO,dqo,cqo,fqo,i2,tge,mqo,gqo,MO,hqo,pqo,uqo,d2,age,_qo,bqo,EO,vqo,Fqo,Tqo,c2,Mqo,nge,Eqo,Cqo,sge,wqo,Aqo,f2,nNe,Wi,m2,lge,xy,yqo,ige,Lqo,sNe,Bo,$y,xqo,Qi,$qo,CO,kqo,Sqo,wO,Rqo,Pqo,Bqo,ky,Iqo,dge,qqo,Nqo,jqo,ct,Sy,Dqo,cge,Gqo,Oqo,Hi,Vqo,fge,Xqo,zqo,AO,Wqo,Qqo,Hqo,g2,Uqo,to,Ry,Jqo,mge,Yqo,Kqo,Ba,Zqo,gge,eNo,oNo,hge,rNo,tNo,pge,aNo,nNo,sNo,Yr,h2,uge,lNo,iNo,yO,dNo,cNo,fNo,p2,_ge,mNo,gNo,LO,hNo,pNo,uNo,u2,bge,_No,bNo,xO,vNo,FNo,TNo,_2,vge,MNo,ENo,$O,CNo,wNo,ANo,b2,Fge,yNo,LNo,kO,xNo,$No,kNo,v2,SNo,Tge,RNo,PNo,Mge,BNo,INo,F2,lNe,Ui,T2,Ege,Py,qNo,Cge,NNo,iNe,Io,By,jNo,Ji,DNo,SO,GNo,ONo,RO,VNo,XNo,zNo,Iy,WNo,wge,QNo,HNo,UNo,ft,qy,JNo,Age,YNo,KNo,Yi,ZNo,yge,ejo,ojo,PO,rjo,tjo,ajo,M2,njo,ao,Ny,sjo,Lge,ljo,ijo,Ia,djo,xge,cjo,fjo,$ge,mjo,gjo,kge,hjo,pjo,ujo,H,E2,Sge,_jo,bjo,BO,vjo,Fjo,Tjo,C2,Rge,Mjo,Ejo,IO,Cjo,wjo,Ajo,w2,Pge,yjo,Ljo,qO,xjo,$jo,kjo,A2,Bge,Sjo,Rjo,NO,Pjo,Bjo,Ijo,y2,Ige,qjo,Njo,jO,jjo,Djo,Gjo,L2,qge,Ojo,Vjo,DO,Xjo,zjo,Wjo,x2,Nge,Qjo,Hjo,GO,Ujo,Jjo,Yjo,$2,jge,Kjo,Zjo,OO,eDo,oDo,rDo,k2,Dge,tDo,aDo,VO,nDo,sDo,lDo,S2,Gge,iDo,dDo,XO,cDo,fDo,mDo,R2,Oge,gDo,hDo,zO,pDo,uDo,_Do,P2,Vge,bDo,vDo,WO,FDo,TDo,MDo,B2,Xge,EDo,CDo,QO,wDo,ADo,yDo,I2,zge,LDo,xDo,HO,$Do,kDo,SDo,q2,Wge,RDo,PDo,UO,BDo,IDo,qDo,N2,Qge,NDo,jDo,JO,DDo,GDo,ODo,j2,Hge,VDo,XDo,YO,zDo,WDo,QDo,D2,Uge,HDo,UDo,KO,JDo,YDo,KDo,G2,Jge,ZDo,eGo,ZO,oGo,rGo,tGo,O2,Yge,aGo,nGo,eV,sGo,lGo,iGo,V2,Kge,dGo,cGo,oV,fGo,mGo,gGo,X2,Zge,hGo,pGo,rV,uGo,_Go,bGo,z2,ehe,vGo,FGo,tV,TGo,MGo,EGo,W2,ohe,CGo,wGo,aV,AGo,yGo,LGo,Q2,rhe,xGo,$Go,nV,kGo,SGo,RGo,H2,the,PGo,BGo,sV,IGo,qGo,NGo,U2,ahe,jGo,DGo,lV,GGo,OGo,VGo,J2,nhe,XGo,zGo,iV,WGo,QGo,HGo,Y2,she,UGo,JGo,dV,YGo,KGo,ZGo,K2,lhe,eOo,oOo,cV,rOo,tOo,aOo,Z2,ihe,nOo,sOo,fV,lOo,iOo,dOo,ev,dhe,cOo,fOo,mV,mOo,gOo,hOo,ov,che,pOo,uOo,gV,_Oo,bOo,vOo,rv,fhe,FOo,TOo,hV,MOo,EOo,COo,tv,wOo,mhe,AOo,yOo,ghe,LOo,xOo,av,dNe,Ki,nv,hhe,jy,$Oo,phe,kOo,cNe,qo,Dy,SOo,Zi,ROo,pV,POo,BOo,uV,IOo,qOo,NOo,Gy,jOo,uhe,DOo,GOo,OOo,mt,Oy,VOo,_he,XOo,zOo,ed,WOo,bhe,QOo,HOo,_V,UOo,JOo,YOo,sv,KOo,no,Vy,ZOo,vhe,eVo,oVo,qa,rVo,Fhe,tVo,aVo,The,nVo,sVo,Mhe,lVo,iVo,dVo,V,lv,Ehe,cVo,fVo,bV,mVo,gVo,hVo,iv,Che,pVo,uVo,vV,_Vo,bVo,vVo,dv,whe,FVo,TVo,FV,MVo,EVo,CVo,cv,Ahe,wVo,AVo,TV,yVo,LVo,xVo,fv,yhe,$Vo,kVo,MV,SVo,RVo,PVo,mv,Lhe,BVo,IVo,EV,qVo,NVo,jVo,gv,xhe,DVo,GVo,CV,OVo,VVo,XVo,hv,$he,zVo,WVo,wV,QVo,HVo,UVo,pv,khe,JVo,YVo,AV,KVo,ZVo,eXo,uv,She,oXo,rXo,yV,tXo,aXo,nXo,_v,Rhe,sXo,lXo,LV,iXo,dXo,cXo,bv,Phe,fXo,mXo,xV,gXo,hXo,pXo,vv,Bhe,uXo,_Xo,$V,bXo,vXo,FXo,Fv,Ihe,TXo,MXo,kV,EXo,CXo,wXo,Tv,qhe,AXo,yXo,SV,LXo,xXo,$Xo,Mv,Nhe,kXo,SXo,RV,RXo,PXo,BXo,Ev,jhe,IXo,qXo,PV,NXo,jXo,DXo,Cv,Dhe,GXo,OXo,BV,VXo,XXo,zXo,wv,Ghe,WXo,QXo,IV,HXo,UXo,JXo,Av,Ohe,YXo,KXo,qV,ZXo,ezo,ozo,yv,Vhe,rzo,tzo,NV,azo,nzo,szo,Lv,Xhe,lzo,izo,jV,dzo,czo,fzo,xv,zhe,mzo,gzo,DV,hzo,pzo,uzo,$v,Whe,_zo,bzo,GV,vzo,Fzo,Tzo,kv,Qhe,Mzo,Ezo,OV,Czo,wzo,Azo,Sv,Hhe,yzo,Lzo,VV,xzo,$zo,kzo,Rv,Uhe,Szo,Rzo,XV,Pzo,Bzo,Izo,Pv,Jhe,qzo,Nzo,zV,jzo,Dzo,Gzo,Bv,Yhe,Ozo,Vzo,WV,Xzo,zzo,Wzo,Iv,Khe,Qzo,Hzo,QV,Uzo,Jzo,Yzo,qv,Zhe,Kzo,Zzo,HV,eWo,oWo,rWo,Nv,epe,tWo,aWo,UV,nWo,sWo,lWo,jv,ope,iWo,dWo,JV,cWo,fWo,mWo,Dv,rpe,gWo,hWo,YV,pWo,uWo,_Wo,Gv,tpe,bWo,vWo,KV,FWo,TWo,MWo,Ov,ape,EWo,CWo,ZV,wWo,AWo,yWo,Vv,npe,LWo,xWo,eX,$Wo,kWo,SWo,Xv,spe,RWo,PWo,oX,BWo,IWo,qWo,zv,lpe,NWo,jWo,rX,DWo,GWo,OWo,Wv,ipe,VWo,XWo,tX,zWo,WWo,QWo,Qv,HWo,dpe,UWo,JWo,cpe,YWo,KWo,Hv,fNe,od,Uv,fpe,Xy,ZWo,mpe,eQo,mNe,No,zy,oQo,rd,rQo,aX,tQo,aQo,nX,nQo,sQo,lQo,Wy,iQo,gpe,dQo,cQo,fQo,gt,Qy,mQo,hpe,gQo,hQo,td,pQo,ppe,uQo,_Qo,sX,bQo,vQo,FQo,Jv,TQo,so,Hy,MQo,upe,EQo,CQo,Na,wQo,_pe,AQo,yQo,bpe,LQo,xQo,vpe,$Qo,kQo,SQo,Fpe,Yv,Tpe,RQo,PQo,lX,BQo,IQo,qQo,Kv,NQo,Mpe,jQo,DQo,Epe,GQo,OQo,Zv,gNe,ad,eF,Cpe,Uy,VQo,wpe,XQo,hNe,jo,Jy,zQo,nd,WQo,iX,QQo,HQo,dX,UQo,JQo,YQo,Yy,KQo,Ape,ZQo,eHo,oHo,ht,Ky,rHo,ype,tHo,aHo,sd,nHo,Lpe,sHo,lHo,cX,iHo,dHo,cHo,oF,fHo,lo,Zy,mHo,xpe,gHo,hHo,ja,pHo,$pe,uHo,_Ho,kpe,bHo,vHo,Spe,FHo,THo,MHo,Fe,rF,Rpe,EHo,CHo,fX,wHo,AHo,yHo,tF,Ppe,LHo,xHo,mX,$Ho,kHo,SHo,aF,Bpe,RHo,PHo,gX,BHo,IHo,qHo,nF,Ipe,NHo,jHo,hX,DHo,GHo,OHo,Bs,qpe,VHo,XHo,pX,zHo,WHo,uX,QHo,HHo,UHo,sF,Npe,JHo,YHo,_X,KHo,ZHo,eUo,pt,jpe,oUo,rUo,bX,tUo,aUo,vX,nUo,sUo,FX,lUo,iUo,dUo,lF,Dpe,cUo,fUo,TX,mUo,gUo,hUo,iF,Gpe,pUo,uUo,MX,_Uo,bUo,vUo,dF,Ope,FUo,TUo,EX,MUo,EUo,CUo,cF,Vpe,wUo,AUo,CX,yUo,LUo,xUo,fF,Xpe,$Uo,kUo,wX,SUo,RUo,PUo,mF,zpe,BUo,IUo,AX,qUo,NUo,jUo,gF,Wpe,DUo,GUo,yX,OUo,VUo,XUo,hF,zUo,Qpe,WUo,QUo,Hpe,HUo,UUo,pF,pNe,ld,uF,Upe,eL,JUo,Jpe,YUo,uNe,Do,oL,KUo,id,ZUo,LX,eJo,oJo,xX,rJo,tJo,aJo,rL,nJo,Ype,sJo,lJo,iJo,ut,tL,dJo,Kpe,cJo,fJo,dd,mJo,Zpe,gJo,hJo,$X,pJo,uJo,_Jo,_F,bJo,io,aL,vJo,eue,FJo,TJo,Da,MJo,oue,EJo,CJo,rue,wJo,AJo,tue,yJo,LJo,xJo,aue,bF,nue,$Jo,kJo,kX,SJo,RJo,PJo,vF,BJo,sue,IJo,qJo,lue,NJo,jJo,FF,_Ne,cd,TF,iue,nL,DJo,due,GJo,bNe,Go,sL,OJo,fd,VJo,SX,XJo,zJo,RX,WJo,QJo,HJo,lL,UJo,cue,JJo,YJo,KJo,_t,iL,ZJo,fue,eYo,oYo,md,rYo,mue,tYo,aYo,PX,nYo,sYo,lYo,MF,iYo,co,dL,dYo,gue,cYo,fYo,Ga,mYo,hue,gYo,hYo,pue,pYo,uYo,uue,_Yo,bYo,vYo,ke,EF,_ue,FYo,TYo,BX,MYo,EYo,CYo,CF,bue,wYo,AYo,IX,yYo,LYo,xYo,wF,vue,$Yo,kYo,qX,SYo,RYo,PYo,AF,Fue,BYo,IYo,NX,qYo,NYo,jYo,yF,Tue,DYo,GYo,jX,OYo,VYo,XYo,LF,Mue,zYo,WYo,DX,QYo,HYo,UYo,xF,Eue,JYo,YYo,GX,KYo,ZYo,eKo,$F,Cue,oKo,rKo,OX,tKo,aKo,nKo,kF,wue,sKo,lKo,VX,iKo,dKo,cKo,SF,fKo,Aue,mKo,gKo,yue,hKo,pKo,RF,vNe,gd,PF,Lue,cL,uKo,xue,_Ko,FNe,Oo,fL,bKo,hd,vKo,XX,FKo,TKo,zX,MKo,EKo,CKo,mL,wKo,$ue,AKo,yKo,LKo,bt,gL,xKo,kue,$Ko,kKo,pd,SKo,Sue,RKo,PKo,WX,BKo,IKo,qKo,BF,NKo,fo,hL,jKo,Rue,DKo,GKo,Oa,OKo,Pue,VKo,XKo,Bue,zKo,WKo,Iue,QKo,HKo,UKo,Kr,IF,que,JKo,YKo,QX,KKo,ZKo,eZo,qF,Nue,oZo,rZo,HX,tZo,aZo,nZo,NF,jue,sZo,lZo,UX,iZo,dZo,cZo,jF,Due,fZo,mZo,JX,gZo,hZo,pZo,DF,Gue,uZo,_Zo,YX,bZo,vZo,FZo,GF,TZo,Oue,MZo,EZo,Vue,CZo,wZo,OF,TNe,ud,VF,Xue,pL,AZo,zue,yZo,MNe,Vo,uL,LZo,_d,xZo,KX,$Zo,kZo,ZX,SZo,RZo,PZo,_L,BZo,Wue,IZo,qZo,NZo,vt,bL,jZo,Que,DZo,GZo,bd,OZo,Hue,VZo,XZo,ez,zZo,WZo,QZo,XF,HZo,mo,vL,UZo,Uue,JZo,YZo,Va,KZo,Jue,ZZo,eer,Yue,oer,rer,Kue,ter,aer,ner,Se,zF,Zue,ser,ler,oz,ier,der,cer,WF,e_e,fer,mer,rz,ger,her,per,QF,o_e,uer,_er,tz,ber,ver,Fer,HF,r_e,Ter,Mer,az,Eer,Cer,wer,UF,t_e,Aer,yer,nz,Ler,xer,$er,JF,a_e,ker,Ser,sz,Rer,Per,Ber,YF,n_e,Ier,qer,lz,Ner,jer,Der,KF,s_e,Ger,Oer,iz,Ver,Xer,zer,ZF,l_e,Wer,Qer,dz,Her,Uer,Jer,e6,Yer,i_e,Ker,Zer,d_e,eor,oor,o6,ENe,vd,r6,c_e,FL,ror,f_e,tor,CNe,Xo,TL,aor,Fd,nor,cz,sor,lor,fz,ior,dor,cor,ML,mor,m_e,gor,hor,por,Ft,EL,uor,g_e,_or,bor,Td,vor,h_e,For,Tor,mz,Mor,Eor,Cor,t6,wor,go,CL,Aor,p_e,yor,Lor,Xa,xor,u_e,$or,kor,__e,Sor,Ror,b_e,Por,Bor,Ior,wL,a6,v_e,qor,Nor,gz,jor,Dor,Gor,n6,F_e,Oor,Vor,hz,Xor,zor,Wor,s6,Qor,T_e,Hor,Uor,M_e,Jor,Yor,l6,wNe,Md,i6,E_e,AL,Kor,C_e,Zor,ANe,zo,yL,err,Ed,orr,pz,rrr,trr,uz,arr,nrr,srr,LL,lrr,w_e,irr,drr,crr,Tt,xL,frr,A_e,mrr,grr,Cd,hrr,y_e,prr,urr,_z,_rr,brr,vrr,d6,Frr,ho,$L,Trr,L_e,Mrr,Err,za,Crr,x_e,wrr,Arr,$_e,yrr,Lrr,k_e,xrr,$rr,krr,Zr,c6,S_e,Srr,Rrr,bz,Prr,Brr,Irr,f6,R_e,qrr,Nrr,vz,jrr,Drr,Grr,m6,P_e,Orr,Vrr,Fz,Xrr,zrr,Wrr,g6,B_e,Qrr,Hrr,Tz,Urr,Jrr,Yrr,h6,I_e,Krr,Zrr,Mz,etr,otr,rtr,p6,ttr,q_e,atr,ntr,N_e,str,ltr,u6,yNe,wd,_6,j_e,kL,itr,D_e,dtr,LNe,Wo,SL,ctr,Ad,ftr,Ez,mtr,gtr,Cz,htr,ptr,utr,RL,_tr,G_e,btr,vtr,Ftr,Mt,PL,Ttr,O_e,Mtr,Etr,yd,Ctr,V_e,wtr,Atr,wz,ytr,Ltr,xtr,b6,$tr,po,BL,ktr,X_e,Str,Rtr,Wa,Ptr,z_e,Btr,Itr,W_e,qtr,Ntr,Q_e,jtr,Dtr,Gtr,Ld,v6,H_e,Otr,Vtr,Az,Xtr,ztr,Wtr,F6,U_e,Qtr,Htr,yz,Utr,Jtr,Ytr,T6,J_e,Ktr,Ztr,Lz,ear,oar,rar,M6,tar,Y_e,aar,nar,K_e,sar,lar,E6,xNe,xd,C6,Z_e,IL,iar,e0e,dar,$Ne,Qo,qL,car,$d,far,xz,mar,gar,$z,har,par,uar,NL,_ar,o0e,bar,Far,Tar,Et,jL,Mar,r0e,Ear,Car,kd,war,t0e,Aar,yar,kz,Lar,xar,$ar,w6,kar,uo,DL,Sar,a0e,Rar,Par,Qa,Bar,n0e,Iar,qar,s0e,Nar,jar,l0e,Dar,Gar,Oar,GL,A6,i0e,Var,Xar,Sz,zar,War,Qar,y6,d0e,Har,Uar,Rz,Jar,Yar,Kar,L6,Zar,c0e,enr,onr,f0e,rnr,tnr,x6,kNe,Sd,$6,m0e,OL,anr,g0e,nnr,SNe,Ho,VL,snr,Rd,lnr,Pz,inr,dnr,Bz,cnr,fnr,mnr,XL,gnr,h0e,hnr,pnr,unr,Ct,zL,_nr,p0e,bnr,vnr,Pd,Fnr,u0e,Tnr,Mnr,Iz,Enr,Cnr,wnr,k6,Anr,_o,WL,ynr,_0e,Lnr,xnr,Ha,$nr,b0e,knr,Snr,v0e,Rnr,Pnr,F0e,Bnr,Inr,qnr,T0e,S6,M0e,Nnr,jnr,qz,Dnr,Gnr,Onr,R6,Vnr,E0e,Xnr,znr,C0e,Wnr,Qnr,P6,RNe,Bd,B6,w0e,QL,Hnr,A0e,Unr,PNe,Uo,HL,Jnr,Id,Ynr,Nz,Knr,Znr,jz,esr,osr,rsr,UL,tsr,y0e,asr,nsr,ssr,wt,JL,lsr,L0e,isr,dsr,qd,csr,x0e,fsr,msr,Dz,gsr,hsr,psr,I6,usr,bo,YL,_sr,$0e,bsr,vsr,Ua,Fsr,k0e,Tsr,Msr,S0e,Esr,Csr,R0e,wsr,Asr,ysr,Ja,q6,P0e,Lsr,xsr,Gz,$sr,ksr,Ssr,N6,B0e,Rsr,Psr,Oz,Bsr,Isr,qsr,j6,I0e,Nsr,jsr,Vz,Dsr,Gsr,Osr,D6,q0e,Vsr,Xsr,Xz,zsr,Wsr,Qsr,G6,Hsr,N0e,Usr,Jsr,j0e,Ysr,Ksr,O6,BNe,Nd,V6,D0e,KL,Zsr,G0e,elr,INe,Jo,ZL,olr,jd,rlr,zz,tlr,alr,Wz,nlr,slr,llr,e8,ilr,O0e,dlr,clr,flr,At,o8,mlr,V0e,glr,hlr,Dd,plr,X0e,ulr,_lr,Qz,blr,vlr,Flr,X6,Tlr,vo,r8,Mlr,z0e,Elr,Clr,Ya,wlr,W0e,Alr,ylr,Q0e,Llr,xlr,H0e,$lr,klr,Slr,U0e,z6,J0e,Rlr,Plr,Hz,Blr,Ilr,qlr,W6,Nlr,Y0e,jlr,Dlr,K0e,Glr,Olr,Q6,qNe,Gd,H6,Z0e,t8,Vlr,e1e,Xlr,NNe,Yo,a8,zlr,Od,Wlr,Uz,Qlr,Hlr,Jz,Ulr,Jlr,Ylr,n8,Klr,o1e,Zlr,eir,oir,yt,s8,rir,r1e,tir,air,Vd,nir,t1e,sir,lir,Yz,iir,dir,cir,U6,fir,wr,l8,mir,a1e,gir,hir,Ka,pir,n1e,uir,_ir,s1e,bir,vir,l1e,Fir,Tir,Mir,N,J6,i1e,Eir,Cir,Kz,wir,Air,yir,Y6,d1e,Lir,xir,Zz,$ir,kir,Sir,K6,c1e,Rir,Pir,eW,Bir,Iir,qir,Z6,f1e,Nir,jir,oW,Dir,Gir,Oir,eT,m1e,Vir,Xir,rW,zir,Wir,Qir,oT,g1e,Hir,Uir,tW,Jir,Yir,Kir,rT,h1e,Zir,edr,aW,odr,rdr,tdr,tT,p1e,adr,ndr,nW,sdr,ldr,idr,aT,u1e,ddr,cdr,sW,fdr,mdr,gdr,nT,_1e,hdr,pdr,lW,udr,_dr,bdr,sT,b1e,vdr,Fdr,iW,Tdr,Mdr,Edr,lT,v1e,Cdr,wdr,dW,Adr,ydr,Ldr,iT,F1e,xdr,$dr,cW,kdr,Sdr,Rdr,dT,T1e,Pdr,Bdr,fW,Idr,qdr,Ndr,cT,M1e,jdr,Ddr,mW,Gdr,Odr,Vdr,fT,E1e,Xdr,zdr,gW,Wdr,Qdr,Hdr,mT,C1e,Udr,Jdr,hW,Ydr,Kdr,Zdr,Is,w1e,ecr,ocr,pW,rcr,tcr,uW,acr,ncr,scr,gT,A1e,lcr,icr,_W,dcr,ccr,fcr,hT,y1e,mcr,gcr,bW,hcr,pcr,ucr,pT,L1e,_cr,bcr,vW,vcr,Fcr,Tcr,uT,x1e,Mcr,Ecr,FW,Ccr,wcr,Acr,_T,$1e,ycr,Lcr,TW,xcr,$cr,kcr,bT,k1e,Scr,Rcr,MW,Pcr,Bcr,Icr,vT,S1e,qcr,Ncr,EW,jcr,Dcr,Gcr,FT,R1e,Ocr,Vcr,CW,Xcr,zcr,Wcr,TT,P1e,Qcr,Hcr,wW,Ucr,Jcr,Ycr,MT,B1e,Kcr,Zcr,AW,efr,ofr,rfr,ET,I1e,tfr,afr,yW,nfr,sfr,lfr,CT,q1e,ifr,dfr,LW,cfr,ffr,mfr,wT,N1e,gfr,hfr,xW,pfr,ufr,_fr,AT,j1e,bfr,vfr,$W,Ffr,Tfr,Mfr,yT,D1e,Efr,Cfr,kW,wfr,Afr,yfr,LT,G1e,Lfr,xfr,SW,$fr,kfr,Sfr,xT,O1e,Rfr,Pfr,RW,Bfr,Ifr,qfr,$T,V1e,Nfr,jfr,PW,Dfr,Gfr,Ofr,kT,X1e,Vfr,Xfr,BW,zfr,Wfr,Qfr,ST,z1e,Hfr,Ufr,IW,Jfr,Yfr,Kfr,RT,W1e,Zfr,emr,qW,omr,rmr,tmr,PT,Q1e,amr,nmr,NW,smr,lmr,imr,BT,H1e,dmr,cmr,jW,fmr,mmr,gmr,IT,U1e,hmr,pmr,DW,umr,_mr,bmr,qT,J1e,vmr,Fmr,GW,Tmr,Mmr,Emr,NT,Y1e,Cmr,wmr,OW,Amr,ymr,Lmr,jT,K1e,xmr,$mr,VW,kmr,Smr,Rmr,DT,Z1e,Pmr,Bmr,XW,Imr,qmr,Nmr,GT,jNe,Xd,OT,ebe,i8,jmr,obe,Dmr,DNe,Ko,d8,Gmr,zd,Omr,zW,Vmr,Xmr,WW,zmr,Wmr,Qmr,c8,Hmr,rbe,Umr,Jmr,Ymr,Lt,f8,Kmr,tbe,Zmr,egr,Wd,ogr,abe,rgr,tgr,QW,agr,ngr,sgr,VT,lgr,Ar,m8,igr,nbe,dgr,cgr,Za,fgr,sbe,mgr,ggr,lbe,hgr,pgr,ibe,ugr,_gr,bgr,se,XT,dbe,vgr,Fgr,HW,Tgr,Mgr,Egr,zT,cbe,Cgr,wgr,UW,Agr,ygr,Lgr,WT,fbe,xgr,$gr,JW,kgr,Sgr,Rgr,QT,mbe,Pgr,Bgr,YW,Igr,qgr,Ngr,HT,gbe,jgr,Dgr,KW,Ggr,Ogr,Vgr,UT,hbe,Xgr,zgr,ZW,Wgr,Qgr,Hgr,JT,pbe,Ugr,Jgr,eQ,Ygr,Kgr,Zgr,YT,ube,ehr,ohr,oQ,rhr,thr,ahr,KT,_be,nhr,shr,rQ,lhr,ihr,dhr,ZT,bbe,chr,fhr,tQ,mhr,ghr,hhr,e7,vbe,phr,uhr,aQ,_hr,bhr,vhr,o7,Fbe,Fhr,Thr,nQ,Mhr,Ehr,Chr,r7,Tbe,whr,Ahr,sQ,yhr,Lhr,xhr,t7,Mbe,$hr,khr,lQ,Shr,Rhr,Phr,a7,Ebe,Bhr,Ihr,iQ,qhr,Nhr,jhr,n7,Cbe,Dhr,Ghr,dQ,Ohr,Vhr,Xhr,s7,wbe,zhr,Whr,cQ,Qhr,Hhr,Uhr,l7,Abe,Jhr,Yhr,fQ,Khr,Zhr,epr,i7,ybe,opr,rpr,mQ,tpr,apr,npr,d7,Lbe,spr,lpr,gQ,ipr,dpr,cpr,c7,xbe,fpr,mpr,hQ,gpr,hpr,ppr,f7,$be,upr,_pr,pQ,bpr,vpr,Fpr,m7,kbe,Tpr,Mpr,uQ,Epr,Cpr,wpr,g7,GNe,Qd,h7,Sbe,g8,Apr,Rbe,ypr,ONe,Zo,h8,Lpr,Hd,xpr,_Q,$pr,kpr,bQ,Spr,Rpr,Ppr,p8,Bpr,Pbe,Ipr,qpr,Npr,xt,u8,jpr,Bbe,Dpr,Gpr,Ud,Opr,Ibe,Vpr,Xpr,vQ,zpr,Wpr,Qpr,p7,Hpr,yr,_8,Upr,qbe,Jpr,Ypr,en,Kpr,Nbe,Zpr,eur,jbe,our,rur,Dbe,tur,aur,nur,Me,u7,Gbe,sur,lur,FQ,iur,dur,cur,_7,Obe,fur,mur,TQ,gur,hur,pur,b7,Vbe,uur,_ur,MQ,bur,vur,Fur,v7,Xbe,Tur,Mur,EQ,Eur,Cur,wur,F7,zbe,Aur,yur,CQ,Lur,xur,$ur,T7,Wbe,kur,Sur,wQ,Rur,Pur,Bur,M7,Qbe,Iur,qur,AQ,Nur,jur,Dur,E7,Hbe,Gur,Our,yQ,Vur,Xur,zur,C7,Ube,Wur,Qur,LQ,Hur,Uur,Jur,w7,Jbe,Yur,Kur,xQ,Zur,e_r,o_r,A7,Ybe,r_r,t_r,$Q,a_r,n_r,s_r,y7,Kbe,l_r,i_r,kQ,d_r,c_r,f_r,L7,VNe,Jd,x7,Zbe,b8,m_r,e2e,g_r,XNe,er,v8,h_r,Yd,p_r,SQ,u_r,__r,RQ,b_r,v_r,F_r,F8,T_r,o2e,M_r,E_r,C_r,$t,T8,w_r,r2e,A_r,y_r,Kd,L_r,t2e,x_r,$_r,PQ,k_r,S_r,R_r,$7,P_r,Lr,M8,B_r,a2e,I_r,q_r,on,N_r,n2e,j_r,D_r,s2e,G_r,O_r,l2e,V_r,X_r,z_r,rn,k7,i2e,W_r,Q_r,BQ,H_r,U_r,J_r,S7,d2e,Y_r,K_r,IQ,Z_r,e0r,o0r,R7,c2e,r0r,t0r,qQ,a0r,n0r,s0r,P7,f2e,l0r,i0r,NQ,d0r,c0r,f0r,B7,zNe,Zd,I7,m2e,E8,m0r,g2e,g0r,WNe,or,C8,h0r,ec,p0r,jQ,u0r,_0r,DQ,b0r,v0r,F0r,w8,T0r,h2e,M0r,E0r,C0r,kt,A8,w0r,p2e,A0r,y0r,oc,L0r,u2e,x0r,$0r,GQ,k0r,S0r,R0r,q7,P0r,xr,y8,B0r,_2e,I0r,q0r,tn,N0r,b2e,j0r,D0r,v2e,G0r,O0r,F2e,V0r,X0r,z0r,ie,N7,T2e,W0r,Q0r,OQ,H0r,U0r,J0r,j7,M2e,Y0r,K0r,VQ,Z0r,e1r,o1r,D7,E2e,r1r,t1r,XQ,a1r,n1r,s1r,G7,C2e,l1r,i1r,zQ,d1r,c1r,f1r,O7,w2e,m1r,g1r,WQ,h1r,p1r,u1r,V7,A2e,_1r,b1r,QQ,v1r,F1r,T1r,X7,y2e,M1r,E1r,HQ,C1r,w1r,A1r,z7,L2e,y1r,L1r,UQ,x1r,$1r,k1r,W7,x2e,S1r,R1r,JQ,P1r,B1r,I1r,Q7,$2e,q1r,N1r,YQ,j1r,D1r,G1r,H7,k2e,O1r,V1r,KQ,X1r,z1r,W1r,U7,S2e,Q1r,H1r,ZQ,U1r,J1r,Y1r,J7,R2e,K1r,Z1r,eH,ebr,obr,rbr,Y7,P2e,tbr,abr,oH,nbr,sbr,lbr,K7,B2e,ibr,dbr,rH,cbr,fbr,mbr,Z7,I2e,gbr,hbr,tH,pbr,ubr,_br,eM,q2e,bbr,vbr,aH,Fbr,Tbr,Mbr,oM,N2e,Ebr,Cbr,nH,wbr,Abr,ybr,rM,j2e,Lbr,xbr,sH,$br,kbr,Sbr,tM,D2e,Rbr,Pbr,lH,Bbr,Ibr,qbr,aM,QNe,rc,nM,G2e,L8,Nbr,O2e,jbr,HNe,rr,x8,Dbr,tc,Gbr,iH,Obr,Vbr,dH,Xbr,zbr,Wbr,$8,Qbr,V2e,Hbr,Ubr,Jbr,St,k8,Ybr,X2e,Kbr,Zbr,ac,e2r,z2e,o2r,r2r,cH,t2r,a2r,n2r,sM,s2r,$r,S8,l2r,W2e,i2r,d2r,an,c2r,Q2e,f2r,m2r,H2e,g2r,h2r,U2e,p2r,u2r,_2r,ye,lM,J2e,b2r,v2r,fH,F2r,T2r,M2r,iM,Y2e,E2r,C2r,mH,w2r,A2r,y2r,dM,K2e,L2r,x2r,gH,$2r,k2r,S2r,cM,Z2e,R2r,P2r,hH,B2r,I2r,q2r,fM,eve,N2r,j2r,pH,D2r,G2r,O2r,mM,ove,V2r,X2r,uH,z2r,W2r,Q2r,gM,rve,H2r,U2r,_H,J2r,Y2r,K2r,hM,tve,Z2r,evr,bH,ovr,rvr,tvr,pM,ave,avr,nvr,vH,svr,lvr,ivr,uM,nve,dvr,cvr,FH,fvr,mvr,gvr,_M,UNe,nc,bM,sve,R8,hvr,lve,pvr,JNe,tr,P8,uvr,sc,_vr,TH,bvr,vvr,MH,Fvr,Tvr,Mvr,B8,Evr,ive,Cvr,wvr,Avr,Rt,I8,yvr,dve,Lvr,xvr,lc,$vr,cve,kvr,Svr,EH,Rvr,Pvr,Bvr,vM,Ivr,kr,q8,qvr,fve,Nvr,jvr,nn,Dvr,mve,Gvr,Ovr,gve,Vvr,Xvr,hve,zvr,Wvr,Qvr,oe,FM,pve,Hvr,Uvr,CH,Jvr,Yvr,Kvr,TM,uve,Zvr,eFr,wH,oFr,rFr,tFr,MM,_ve,aFr,nFr,AH,sFr,lFr,iFr,EM,bve,dFr,cFr,yH,fFr,mFr,gFr,CM,vve,hFr,pFr,LH,uFr,_Fr,bFr,wM,Fve,vFr,FFr,xH,TFr,MFr,EFr,AM,Tve,CFr,wFr,$H,AFr,yFr,LFr,yM,Mve,xFr,$Fr,kH,kFr,SFr,RFr,LM,Eve,PFr,BFr,SH,IFr,qFr,NFr,xM,Cve,jFr,DFr,RH,GFr,OFr,VFr,$M,wve,XFr,zFr,PH,WFr,QFr,HFr,kM,Ave,UFr,JFr,BH,YFr,KFr,ZFr,SM,yve,e6r,o6r,IH,r6r,t6r,a6r,RM,Lve,n6r,s6r,qH,l6r,i6r,d6r,PM,xve,c6r,f6r,NH,m6r,g6r,h6r,BM,$ve,p6r,u6r,jH,_6r,b6r,v6r,IM,kve,F6r,T6r,DH,M6r,E6r,C6r,qM,Sve,w6r,A6r,GH,y6r,L6r,x6r,NM,Rve,$6r,k6r,OH,S6r,R6r,P6r,jM,Pve,B6r,I6r,VH,q6r,N6r,j6r,DM,Bve,D6r,G6r,XH,O6r,V6r,X6r,GM,Ive,z6r,W6r,zH,Q6r,H6r,U6r,OM,qve,J6r,Y6r,WH,K6r,Z6r,eTr,VM,Nve,oTr,rTr,QH,tTr,aTr,nTr,XM,jve,sTr,lTr,HH,iTr,dTr,cTr,zM,Dve,fTr,mTr,UH,gTr,hTr,pTr,WM,YNe,ic,QM,Gve,N8,uTr,Ove,_Tr,KNe,ar,j8,bTr,dc,vTr,JH,FTr,TTr,YH,MTr,ETr,CTr,D8,wTr,Vve,ATr,yTr,LTr,Pt,G8,xTr,Xve,$Tr,kTr,cc,STr,zve,RTr,PTr,KH,BTr,ITr,qTr,HM,NTr,Sr,O8,jTr,Wve,DTr,GTr,sn,OTr,Qve,VTr,XTr,Hve,zTr,WTr,Uve,QTr,HTr,UTr,pe,UM,Jve,JTr,YTr,ZH,KTr,ZTr,e7r,JM,Yve,o7r,r7r,eU,t7r,a7r,n7r,YM,Kve,s7r,l7r,oU,i7r,d7r,c7r,KM,Zve,f7r,m7r,rU,g7r,h7r,p7r,ZM,eFe,u7r,_7r,tU,b7r,v7r,F7r,e4,oFe,T7r,M7r,aU,E7r,C7r,w7r,o4,rFe,A7r,y7r,nU,L7r,x7r,$7r,r4,tFe,k7r,S7r,sU,R7r,P7r,B7r,t4,aFe,I7r,q7r,lU,N7r,j7r,D7r,a4,nFe,G7r,O7r,iU,V7r,X7r,z7r,n4,sFe,W7r,Q7r,dU,H7r,U7r,J7r,s4,lFe,Y7r,K7r,cU,Z7r,eMr,oMr,l4,iFe,rMr,tMr,fU,aMr,nMr,sMr,i4,dFe,lMr,iMr,mU,dMr,cMr,fMr,d4,cFe,mMr,gMr,gU,hMr,pMr,uMr,c4,fFe,_Mr,bMr,hU,vMr,FMr,TMr,f4,mFe,MMr,EMr,pU,CMr,wMr,AMr,m4,ZNe,fc,g4,gFe,V8,yMr,hFe,LMr,eje,nr,X8,xMr,mc,$Mr,uU,kMr,SMr,_U,RMr,PMr,BMr,z8,IMr,pFe,qMr,NMr,jMr,Bt,W8,DMr,uFe,GMr,OMr,gc,VMr,_Fe,XMr,zMr,bU,WMr,QMr,HMr,h4,UMr,Rr,Q8,JMr,bFe,YMr,KMr,ln,ZMr,vFe,e4r,o4r,FFe,r4r,t4r,TFe,a4r,n4r,s4r,H8,p4,MFe,l4r,i4r,vU,d4r,c4r,f4r,u4,EFe,m4r,g4r,FU,h4r,p4r,u4r,_4,oje,hc,b4,CFe,U8,_4r,wFe,b4r,rje,sr,J8,v4r,pc,F4r,TU,T4r,M4r,MU,E4r,C4r,w4r,Y8,A4r,AFe,y4r,L4r,x4r,It,K8,$4r,yFe,k4r,S4r,uc,R4r,LFe,P4r,B4r,EU,I4r,q4r,N4r,v4,j4r,Pr,Z8,D4r,xFe,G4r,O4r,dn,V4r,$Fe,X4r,z4r,kFe,W4r,Q4r,SFe,H4r,U4r,J4r,RFe,F4,PFe,Y4r,K4r,CU,Z4r,eEr,oEr,T4,tje,_c,M4,BFe,e9,rEr,IFe,tEr,aje,lr,o9,aEr,bc,nEr,wU,sEr,lEr,AU,iEr,dEr,cEr,r9,fEr,qFe,mEr,gEr,hEr,qt,t9,pEr,NFe,uEr,_Er,vc,bEr,jFe,vEr,FEr,yU,TEr,MEr,EEr,E4,CEr,Br,a9,wEr,DFe,AEr,yEr,cn,LEr,GFe,xEr,$Er,OFe,kEr,SEr,VFe,REr,PEr,BEr,de,C4,XFe,IEr,qEr,LU,NEr,jEr,DEr,w4,zFe,GEr,OEr,xU,VEr,XEr,zEr,A4,WFe,WEr,QEr,$U,HEr,UEr,JEr,y4,QFe,YEr,KEr,kU,ZEr,eCr,oCr,L4,HFe,rCr,tCr,SU,aCr,nCr,sCr,x4,UFe,lCr,iCr,RU,dCr,cCr,fCr,$4,JFe,mCr,gCr,PU,hCr,pCr,uCr,k4,YFe,_Cr,bCr,BU,vCr,FCr,TCr,S4,KFe,MCr,ECr,IU,CCr,wCr,ACr,R4,ZFe,yCr,LCr,qU,xCr,$Cr,kCr,P4,e6e,SCr,RCr,NU,PCr,BCr,ICr,B4,o6e,qCr,NCr,jU,jCr,DCr,GCr,I4,r6e,OCr,VCr,DU,XCr,zCr,WCr,q4,t6e,QCr,HCr,GU,UCr,JCr,YCr,N4,a6e,KCr,ZCr,OU,e5r,o5r,r5r,j4,n6e,t5r,a5r,VU,n5r,s5r,l5r,D4,s6e,i5r,d5r,XU,c5r,f5r,m5r,G4,l6e,g5r,h5r,zU,p5r,u5r,_5r,O4,i6e,b5r,v5r,WU,F5r,T5r,M5r,V4,d6e,E5r,C5r,QU,w5r,A5r,y5r,X4,nje,Fc,z4,c6e,n9,L5r,f6e,x5r,sje,ir,s9,$5r,Tc,k5r,HU,S5r,R5r,UU,P5r,B5r,I5r,l9,q5r,m6e,N5r,j5r,D5r,Nt,i9,G5r,g6e,O5r,V5r,Mc,X5r,h6e,z5r,W5r,JU,Q5r,H5r,U5r,W4,J5r,Ir,d9,Y5r,p6e,K5r,Z5r,fn,e3r,u6e,o3r,r3r,_6e,t3r,a3r,b6e,n3r,s3r,l3r,ce,Q4,v6e,i3r,d3r,YU,c3r,f3r,m3r,H4,F6e,g3r,h3r,KU,p3r,u3r,_3r,U4,T6e,b3r,v3r,ZU,F3r,T3r,M3r,J4,M6e,E3r,C3r,eJ,w3r,A3r,y3r,Y4,E6e,L3r,x3r,oJ,$3r,k3r,S3r,K4,C6e,R3r,P3r,rJ,B3r,I3r,q3r,Z4,w6e,N3r,j3r,tJ,D3r,G3r,O3r,eE,A6e,V3r,X3r,aJ,z3r,W3r,Q3r,oE,y6e,H3r,U3r,nJ,J3r,Y3r,K3r,rE,L6e,Z3r,ewr,sJ,owr,rwr,twr,tE,x6e,awr,nwr,lJ,swr,lwr,iwr,aE,$6e,dwr,cwr,iJ,fwr,mwr,gwr,nE,k6e,hwr,pwr,dJ,uwr,_wr,bwr,sE,S6e,vwr,Fwr,cJ,Twr,Mwr,Ewr,lE,R6e,Cwr,wwr,fJ,Awr,ywr,Lwr,iE,P6e,xwr,$wr,mJ,kwr,Swr,Rwr,dE,B6e,Pwr,Bwr,gJ,Iwr,qwr,Nwr,cE,I6e,jwr,Dwr,hJ,Gwr,Owr,Vwr,fE,q6e,Xwr,zwr,pJ,Wwr,Qwr,Hwr,mE,N6e,Uwr,Jwr,uJ,Ywr,Kwr,Zwr,gE,lje,Ec,hE,j6e,c9,eAr,D6e,oAr,ije,dr,f9,rAr,Cc,tAr,_J,aAr,nAr,bJ,sAr,lAr,iAr,m9,dAr,G6e,cAr,fAr,mAr,jt,g9,gAr,O6e,hAr,pAr,wc,uAr,V6e,_Ar,bAr,vJ,vAr,FAr,TAr,pE,MAr,qr,h9,EAr,X6e,CAr,wAr,mn,AAr,z6e,yAr,LAr,W6e,xAr,$Ar,Q6e,kAr,SAr,RAr,H6e,uE,U6e,PAr,BAr,FJ,IAr,qAr,NAr,_E,dje,Ac,bE,J6e,p9,jAr,Y6e,DAr,cje,cr,u9,GAr,yc,OAr,TJ,VAr,XAr,MJ,zAr,WAr,QAr,_9,HAr,K6e,UAr,JAr,YAr,Dt,b9,KAr,Z6e,ZAr,eyr,Lc,oyr,eTe,ryr,tyr,EJ,ayr,nyr,syr,vE,lyr,Nr,v9,iyr,oTe,dyr,cyr,gn,fyr,rTe,myr,gyr,tTe,hyr,pyr,aTe,uyr,_yr,byr,nTe,FE,sTe,vyr,Fyr,CJ,Tyr,Myr,Eyr,TE,fje,xc,ME,lTe,F9,Cyr,iTe,wyr,mje,fr,T9,Ayr,$c,yyr,wJ,Lyr,xyr,AJ,$yr,kyr,Syr,M9,Ryr,dTe,Pyr,Byr,Iyr,Gt,E9,qyr,cTe,Nyr,jyr,kc,Dyr,fTe,Gyr,Oyr,yJ,Vyr,Xyr,zyr,EE,Wyr,jr,C9,Qyr,mTe,Hyr,Uyr,hn,Jyr,gTe,Yyr,Kyr,hTe,Zyr,eLr,pTe,oLr,rLr,tLr,te,CE,uTe,aLr,nLr,LJ,sLr,lLr,iLr,wE,_Te,dLr,cLr,xJ,fLr,mLr,gLr,AE,bTe,hLr,pLr,$J,uLr,_Lr,bLr,yE,vTe,vLr,FLr,kJ,TLr,MLr,ELr,LE,FTe,CLr,wLr,SJ,ALr,yLr,LLr,xE,TTe,xLr,$Lr,RJ,kLr,SLr,RLr,$E,MTe,PLr,BLr,PJ,ILr,qLr,NLr,kE,ETe,jLr,DLr,BJ,GLr,OLr,VLr,SE,CTe,XLr,zLr,IJ,WLr,QLr,HLr,RE,wTe,ULr,JLr,qJ,YLr,KLr,ZLr,PE,ATe,e8r,o8r,NJ,r8r,t8r,a8r,BE,yTe,n8r,s8r,jJ,l8r,i8r,d8r,IE,LTe,c8r,f8r,DJ,m8r,g8r,h8r,qE,xTe,p8r,u8r,GJ,_8r,b8r,v8r,NE,$Te,F8r,T8r,OJ,M8r,E8r,C8r,jE,kTe,w8r,A8r,VJ,y8r,L8r,x8r,DE,STe,$8r,k8r,XJ,S8r,R8r,P8r,GE,RTe,B8r,I8r,zJ,q8r,N8r,j8r,OE,PTe,D8r,G8r,WJ,O8r,V8r,X8r,VE,BTe,z8r,W8r,QJ,Q8r,H8r,U8r,XE,ITe,J8r,Y8r,HJ,K8r,Z8r,e9r,zE,qTe,o9r,r9r,UJ,t9r,a9r,n9r,WE,NTe,s9r,l9r,JJ,i9r,d9r,c9r,QE,jTe,f9r,m9r,YJ,g9r,h9r,p9r,HE,DTe,u9r,_9r,KJ,b9r,v9r,F9r,UE,gje,Sc,JE,GTe,w9,T9r,OTe,M9r,hje,mr,A9,E9r,Rc,C9r,ZJ,w9r,A9r,eY,y9r,L9r,x9r,y9,$9r,VTe,k9r,S9r,R9r,Ot,L9,P9r,XTe,B9r,I9r,Pc,q9r,zTe,N9r,j9r,oY,D9r,G9r,O9r,YE,V9r,Dr,x9,X9r,WTe,z9r,W9r,pn,Q9r,QTe,H9r,U9r,HTe,J9r,Y9r,UTe,K9r,Z9r,exr,Re,KE,JTe,oxr,rxr,rY,txr,axr,nxr,ZE,YTe,sxr,lxr,tY,ixr,dxr,cxr,eC,KTe,fxr,mxr,aY,gxr,hxr,pxr,oC,ZTe,uxr,_xr,nY,bxr,vxr,Fxr,rC,e7e,Txr,Mxr,sY,Exr,Cxr,wxr,tC,o7e,Axr,yxr,lY,Lxr,xxr,$xr,aC,r7e,kxr,Sxr,iY,Rxr,Pxr,Bxr,nC,t7e,Ixr,qxr,dY,Nxr,jxr,Dxr,sC,a7e,Gxr,Oxr,cY,Vxr,Xxr,zxr,lC,pje,Bc,iC,n7e,$9,Wxr,s7e,Qxr,uje,gr,k9,Hxr,Ic,Uxr,fY,Jxr,Yxr,mY,Kxr,Zxr,e$r,S9,o$r,l7e,r$r,t$r,a$r,Vt,R9,n$r,i7e,s$r,l$r,qc,i$r,d7e,d$r,c$r,gY,f$r,m$r,g$r,dC,h$r,Gr,P9,p$r,c7e,u$r,_$r,un,b$r,f7e,v$r,F$r,m7e,T$r,M$r,g7e,E$r,C$r,w$r,Ee,cC,h7e,A$r,y$r,hY,L$r,x$r,$$r,fC,p7e,k$r,S$r,pY,R$r,P$r,B$r,mC,u7e,I$r,q$r,uY,N$r,j$r,D$r,gC,_7e,G$r,O$r,_Y,V$r,X$r,z$r,hC,b7e,W$r,Q$r,bY,H$r,U$r,J$r,pC,v7e,Y$r,K$r,vY,Z$r,ekr,okr,uC,F7e,rkr,tkr,FY,akr,nkr,skr,_C,T7e,lkr,ikr,TY,dkr,ckr,fkr,bC,M7e,mkr,gkr,MY,hkr,pkr,ukr,vC,E7e,_kr,bkr,EY,vkr,Fkr,Tkr,FC,C7e,Mkr,Ekr,CY,Ckr,wkr,Akr,TC,w7e,ykr,Lkr,wY,xkr,$kr,kkr,MC,_je,Nc,EC,A7e,B9,Skr,y7e,Rkr,bje,hr,I9,Pkr,jc,Bkr,AY,Ikr,qkr,yY,Nkr,jkr,Dkr,q9,Gkr,L7e,Okr,Vkr,Xkr,Xt,N9,zkr,x7e,Wkr,Qkr,Dc,Hkr,$7e,Ukr,Jkr,LY,Ykr,Kkr,Zkr,CC,eSr,Or,j9,oSr,k7e,rSr,tSr,_n,aSr,S7e,nSr,sSr,R7e,lSr,iSr,P7e,dSr,cSr,fSr,Le,wC,B7e,mSr,gSr,xY,hSr,pSr,uSr,AC,I7e,_Sr,bSr,$Y,vSr,FSr,TSr,yC,q7e,MSr,ESr,kY,CSr,wSr,ASr,LC,N7e,ySr,LSr,SY,xSr,$Sr,kSr,xC,j7e,SSr,RSr,RY,PSr,BSr,ISr,$C,D7e,qSr,NSr,PY,jSr,DSr,GSr,kC,G7e,OSr,VSr,BY,XSr,zSr,WSr,SC,O7e,QSr,HSr,IY,USr,JSr,YSr,RC,V7e,KSr,ZSr,qY,eRr,oRr,rRr,PC,X7e,tRr,aRr,NY,nRr,sRr,lRr,BC,vje,Gc,IC,z7e,D9,iRr,W7e,dRr,Fje,pr,G9,cRr,Oc,fRr,jY,mRr,gRr,DY,hRr,pRr,uRr,O9,_Rr,Q7e,bRr,vRr,FRr,zt,V9,TRr,H7e,MRr,ERr,Vc,CRr,U7e,wRr,ARr,GY,yRr,LRr,xRr,qC,$Rr,Vr,X9,kRr,J7e,SRr,RRr,bn,PRr,Y7e,BRr,IRr,K7e,qRr,NRr,Z7e,jRr,DRr,GRr,Pe,NC,eMe,ORr,VRr,OY,XRr,zRr,WRr,jC,oMe,QRr,HRr,VY,URr,JRr,YRr,DC,rMe,KRr,ZRr,XY,ePr,oPr,rPr,GC,tMe,tPr,aPr,zY,nPr,sPr,lPr,OC,aMe,iPr,dPr,WY,cPr,fPr,mPr,VC,nMe,gPr,hPr,QY,pPr,uPr,_Pr,XC,sMe,bPr,vPr,HY,FPr,TPr,MPr,zC,lMe,EPr,CPr,UY,wPr,APr,yPr,WC,iMe,LPr,xPr,JY,$Pr,kPr,SPr,QC,Tje,Xc,HC,dMe,z9,RPr,cMe,PPr,Mje,ur,W9,BPr,zc,IPr,YY,qPr,NPr,KY,jPr,DPr,GPr,Q9,OPr,fMe,VPr,XPr,zPr,Wt,H9,WPr,mMe,QPr,HPr,Wc,UPr,gMe,JPr,YPr,ZY,KPr,ZPr,eBr,UC,oBr,Xr,U9,rBr,hMe,tBr,aBr,vn,nBr,pMe,sBr,lBr,uMe,iBr,dBr,_Me,cBr,fBr,mBr,xe,JC,bMe,gBr,hBr,eK,pBr,uBr,_Br,YC,vMe,bBr,vBr,oK,FBr,TBr,MBr,KC,FMe,EBr,CBr,rK,wBr,ABr,yBr,ZC,TMe,LBr,xBr,tK,$Br,kBr,SBr,e5,MMe,RBr,PBr,aK,BBr,IBr,qBr,o5,EMe,NBr,jBr,nK,DBr,GBr,OBr,r5,CMe,VBr,XBr,sK,zBr,WBr,QBr,t5,wMe,HBr,UBr,lK,JBr,YBr,KBr,a5,AMe,ZBr,eIr,iK,oIr,rIr,tIr,n5,yMe,aIr,nIr,dK,sIr,lIr,iIr,s5,Eje,Qc,l5,LMe,J9,dIr,xMe,cIr,Cje,_r,Y9,fIr,Hc,mIr,cK,gIr,hIr,fK,pIr,uIr,_Ir,K9,bIr,$Me,vIr,FIr,TIr,Qt,Z9,MIr,kMe,EIr,CIr,Uc,wIr,SMe,AIr,yIr,mK,LIr,xIr,$Ir,i5,kIr,zr,ex,SIr,RMe,RIr,PIr,Fn,BIr,PMe,IIr,qIr,BMe,NIr,jIr,IMe,DIr,GIr,OIr,$e,d5,qMe,VIr,XIr,gK,zIr,WIr,QIr,c5,NMe,HIr,UIr,hK,JIr,YIr,KIr,f5,jMe,ZIr,eqr,pK,oqr,rqr,tqr,m5,DMe,aqr,nqr,uK,sqr,lqr,iqr,g5,GMe,dqr,cqr,_K,fqr,mqr,gqr,h5,OMe,hqr,pqr,bK,uqr,_qr,bqr,p5,VMe,vqr,Fqr,vK,Tqr,Mqr,Eqr,u5,XMe,Cqr,wqr,FK,Aqr,yqr,Lqr,_5,zMe,xqr,$qr,TK,kqr,Sqr,Rqr,b5,WMe,Pqr,Bqr,MK,Iqr,qqr,Nqr,v5,wje,Jc,F5,QMe,ox,jqr,HMe,Dqr,Aje,br,rx,Gqr,Yc,Oqr,EK,Vqr,Xqr,CK,zqr,Wqr,Qqr,tx,Hqr,UMe,Uqr,Jqr,Yqr,Ht,ax,Kqr,JMe,Zqr,eNr,Kc,oNr,YMe,rNr,tNr,wK,aNr,nNr,sNr,T5,lNr,Wr,nx,iNr,KMe,dNr,cNr,Tn,fNr,ZMe,mNr,gNr,e4e,hNr,pNr,o4e,uNr,_Nr,bNr,De,M5,r4e,vNr,FNr,AK,TNr,MNr,ENr,E5,t4e,CNr,wNr,yK,ANr,yNr,LNr,C5,a4e,xNr,$Nr,LK,kNr,SNr,RNr,w5,n4e,PNr,BNr,xK,INr,qNr,NNr,A5,s4e,jNr,DNr,$K,GNr,ONr,VNr,y5,l4e,XNr,zNr,kK,WNr,QNr,HNr,L5,i4e,UNr,JNr,SK,YNr,KNr,ZNr,x5,d4e,ejr,ojr,RK,rjr,tjr,ajr,$5,yje,Zc,k5,c4e,sx,njr,f4e,sjr,Lje,vr,lx,ljr,ef,ijr,PK,djr,cjr,BK,fjr,mjr,gjr,ix,hjr,m4e,pjr,ujr,_jr,Ut,dx,bjr,g4e,vjr,Fjr,of,Tjr,h4e,Mjr,Ejr,IK,Cjr,wjr,Ajr,S5,yjr,Qr,cx,Ljr,p4e,xjr,$jr,Mn,kjr,u4e,Sjr,Rjr,_4e,Pjr,Bjr,b4e,Ijr,qjr,Njr,Ge,R5,v4e,jjr,Djr,qK,Gjr,Ojr,Vjr,P5,F4e,Xjr,zjr,NK,Wjr,Qjr,Hjr,B5,T4e,Ujr,Jjr,jK,Yjr,Kjr,Zjr,I5,M4e,eDr,oDr,DK,rDr,tDr,aDr,q5,E4e,nDr,sDr,GK,lDr,iDr,dDr,N5,C4e,cDr,fDr,OK,mDr,gDr,hDr,j5,w4e,pDr,uDr,VK,_Dr,bDr,vDr,D5,A4e,FDr,TDr,XK,MDr,EDr,CDr,G5,xje,rf,O5,y4e,fx,wDr,L4e,ADr,$je,Fr,mx,yDr,tf,LDr,zK,xDr,$Dr,WK,kDr,SDr,RDr,gx,PDr,x4e,BDr,IDr,qDr,Jt,hx,NDr,$4e,jDr,DDr,af,GDr,k4e,ODr,VDr,QK,XDr,zDr,WDr,V5,QDr,Hr,px,HDr,S4e,UDr,JDr,En,YDr,R4e,KDr,ZDr,P4e,eGr,oGr,B4e,rGr,tGr,aGr,I4e,X5,q4e,nGr,sGr,HK,lGr,iGr,dGr,z5,kje,nf,W5,N4e,ux,cGr,j4e,fGr,Sje,Tr,_x,mGr,sf,gGr,UK,hGr,pGr,JK,uGr,_Gr,bGr,bx,vGr,D4e,FGr,TGr,MGr,Yt,vx,EGr,G4e,CGr,wGr,lf,AGr,O4e,yGr,LGr,YK,xGr,$Gr,kGr,Q5,SGr,Ur,Fx,RGr,V4e,PGr,BGr,Cn,IGr,X4e,qGr,NGr,z4e,jGr,DGr,W4e,GGr,OGr,VGr,Tx,H5,Q4e,XGr,zGr,KK,WGr,QGr,HGr,U5,H4e,UGr,JGr,ZK,YGr,KGr,ZGr,J5,Rje,df,Y5,U4e,Mx,eOr,J4e,oOr,Pje,Mr,Ex,rOr,cf,tOr,eZ,aOr,nOr,oZ,sOr,lOr,iOr,Cx,dOr,Y4e,cOr,fOr,mOr,Kt,wx,gOr,K4e,hOr,pOr,ff,uOr,Z4e,_Or,bOr,rZ,vOr,FOr,TOr,K5,MOr,Jr,Ax,EOr,eEe,COr,wOr,wn,AOr,oEe,yOr,LOr,rEe,xOr,$Or,tEe,kOr,SOr,ROr,aEe,Z5,nEe,POr,BOr,tZ,IOr,qOr,NOr,e3,Bje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),MA=new re({}),EA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new jOr({props:{warning:!0,$$slots:{default:[cxt]},$$scope:{ctx:L}}}),CA=new re({}),wA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L581"}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),xA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/configuration_auto.py#L727"}}),$A=new re({}),kA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L389"}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17060/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L403"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),BA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/tokenization_auto.py#L599"}}),IA=new re({}),qA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17060/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Rh=new jOr({props:{$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Ph=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),GA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),OA=new re({}),VA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L88"}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L102"}}),ep=new jOr({props:{$$slots:{default:[pxt]},$$scope:{ctx:L}}}),op=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),QA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/processing_auto.py#L255"}}),HA=new re({}),UA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L733"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),ap=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),ZA=new re({}),ey=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L740"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),e_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L755"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L762"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),p1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L769"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),_1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L778"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Sb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L812"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Pb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),f2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L819"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),g2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L805"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L787"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L794"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L828"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L867"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L874"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L897"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),pL=new re({}),uL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L881"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L888"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),AL=new re({}),yL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L906"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L913"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),IL=new re({}),qL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L860"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L835"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L842"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_auto.py#L851"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),g7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),p7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),N8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),U8=new re({}),J8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),E9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),ux=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17060/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17060/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17060/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),bA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),vA=o("AutoConfig"),Ln=o(", "),xn=a("a"),FA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),TA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),D$=o("will create a model that is an instance of "),_i=a("a"),G$=o("BertModel"),O$=o("."),Eo=l(),wa=a("p"),V$=o("There is one class of "),bf=a("code"),X$=o("AutoModel"),VGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Sqe=l(),bi=a("h2"),vf=a("a"),Jee=a("span"),F(MA.$$.fragment),XGe=l(),Yee=a("span"),zGe=o("Extending the Auto Classes"),Rqe=l(),kn=a("p"),WGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kee=a("code"),QGe=o("NewModel"),HGe=o(", make sure you have a "),Zee=a("code"),UGe=o("NewModelConfig"),JGe=o(` then you can add those to the auto
classes like this:`),Pqe=l(),F(EA.$$.fragment),Bqe=l(),z$=a("p"),YGe=o("You will then be able to use the auto classes like you would usually do!"),Iqe=l(),F(Ff.$$.fragment),qqe=l(),vi=a("h2"),Tf=a("a"),eoe=a("span"),F(CA.$$.fragment),KGe=l(),ooe=a("span"),ZGe=o("AutoConfig"),Nqe=l(),Co=a("div"),F(wA.$$.fragment),eOe=l(),AA=a("p"),oOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W$=a("a"),rOe=o("from_pretrained()"),tOe=o(" class method."),aOe=l(),yA=a("p"),nOe=o("This class cannot be instantiated directly using "),roe=a("code"),sOe=o("__init__()"),lOe=o(" (throws an error)."),iOe=l(),Er=a("div"),F(LA.$$.fragment),dOe=l(),toe=a("p"),cOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),fOe=l(),Fi=a("p"),mOe=o("The configuration class to instantiate is selected based on the "),aoe=a("code"),gOe=o("model_type"),hOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),noe=a("code"),pOe=o("pretrained_model_name_or_path"),uOe=o(":"),_Oe=l(),A=a("ul"),Mf=a("li"),soe=a("strong"),bOe=o("albert"),vOe=o(" \u2014 "),Q$=a("a"),FOe=o("AlbertConfig"),TOe=o(" (ALBERT model)"),MOe=l(),Ef=a("li"),loe=a("strong"),EOe=o("bart"),COe=o(" \u2014 "),H$=a("a"),wOe=o("BartConfig"),AOe=o(" (BART model)"),yOe=l(),Cf=a("li"),ioe=a("strong"),LOe=o("beit"),xOe=o(" \u2014 "),U$=a("a"),$Oe=o("BeitConfig"),kOe=o(" (BEiT model)"),SOe=l(),wf=a("li"),doe=a("strong"),ROe=o("bert"),POe=o(" \u2014 "),J$=a("a"),BOe=o("BertConfig"),IOe=o(" (BERT model)"),qOe=l(),Af=a("li"),coe=a("strong"),NOe=o("bert-generation"),jOe=o(" \u2014 "),Y$=a("a"),DOe=o("BertGenerationConfig"),GOe=o(" (Bert Generation model)"),OOe=l(),yf=a("li"),foe=a("strong"),VOe=o("big_bird"),XOe=o(" \u2014 "),K$=a("a"),zOe=o("BigBirdConfig"),WOe=o(" (BigBird model)"),QOe=l(),Lf=a("li"),moe=a("strong"),HOe=o("bigbird_pegasus"),UOe=o(" \u2014 "),Z$=a("a"),JOe=o("BigBirdPegasusConfig"),YOe=o(" (BigBirdPegasus model)"),KOe=l(),xf=a("li"),goe=a("strong"),ZOe=o("blenderbot"),eVe=o(" \u2014 "),ek=a("a"),oVe=o("BlenderbotConfig"),rVe=o(" (Blenderbot model)"),tVe=l(),$f=a("li"),hoe=a("strong"),aVe=o("blenderbot-small"),nVe=o(" \u2014 "),ok=a("a"),sVe=o("BlenderbotSmallConfig"),lVe=o(" (BlenderbotSmall model)"),iVe=l(),kf=a("li"),poe=a("strong"),dVe=o("camembert"),cVe=o(" \u2014 "),rk=a("a"),fVe=o("CamembertConfig"),mVe=o(" (CamemBERT model)"),gVe=l(),Sf=a("li"),uoe=a("strong"),hVe=o("canine"),pVe=o(" \u2014 "),tk=a("a"),uVe=o("CanineConfig"),_Ve=o(" (Canine model)"),bVe=l(),Rf=a("li"),_oe=a("strong"),vVe=o("clip"),FVe=o(" \u2014 "),ak=a("a"),TVe=o("CLIPConfig"),MVe=o(" (CLIP model)"),EVe=l(),Pf=a("li"),boe=a("strong"),CVe=o("convbert"),wVe=o(" \u2014 "),nk=a("a"),AVe=o("ConvBertConfig"),yVe=o(" (ConvBERT model)"),LVe=l(),Bf=a("li"),voe=a("strong"),xVe=o("convnext"),$Ve=o(" \u2014 "),sk=a("a"),kVe=o("ConvNextConfig"),SVe=o(" (ConvNext model)"),RVe=l(),If=a("li"),Foe=a("strong"),PVe=o("ctrl"),BVe=o(" \u2014 "),lk=a("a"),IVe=o("CTRLConfig"),qVe=o(" (CTRL model)"),NVe=l(),qf=a("li"),Toe=a("strong"),jVe=o("cvt"),DVe=o(" \u2014 "),ik=a("a"),GVe=o("CvtConfig"),OVe=o(" (CvT model)"),VVe=l(),Nf=a("li"),Moe=a("strong"),XVe=o("data2vec-audio"),zVe=o(" \u2014 "),dk=a("a"),WVe=o("Data2VecAudioConfig"),QVe=o(" (Data2VecAudio model)"),HVe=l(),jf=a("li"),Eoe=a("strong"),UVe=o("data2vec-text"),JVe=o(" \u2014 "),ck=a("a"),YVe=o("Data2VecTextConfig"),KVe=o(" (Data2VecText model)"),ZVe=l(),Df=a("li"),Coe=a("strong"),eXe=o("data2vec-vision"),oXe=o(" \u2014 "),fk=a("a"),rXe=o("Data2VecVisionConfig"),tXe=o(" (Data2VecVision model)"),aXe=l(),Gf=a("li"),woe=a("strong"),nXe=o("deberta"),sXe=o(" \u2014 "),mk=a("a"),lXe=o("DebertaConfig"),iXe=o(" (DeBERTa model)"),dXe=l(),Of=a("li"),Aoe=a("strong"),cXe=o("deberta-v2"),fXe=o(" \u2014 "),gk=a("a"),mXe=o("DebertaV2Config"),gXe=o(" (DeBERTa-v2 model)"),hXe=l(),Vf=a("li"),yoe=a("strong"),pXe=o("decision_transformer"),uXe=o(" \u2014 "),hk=a("a"),_Xe=o("DecisionTransformerConfig"),bXe=o(" (Decision Transformer model)"),vXe=l(),Xf=a("li"),Loe=a("strong"),FXe=o("deit"),TXe=o(" \u2014 "),pk=a("a"),MXe=o("DeiTConfig"),EXe=o(" (DeiT model)"),CXe=l(),zf=a("li"),xoe=a("strong"),wXe=o("detr"),AXe=o(" \u2014 "),uk=a("a"),yXe=o("DetrConfig"),LXe=o(" (DETR model)"),xXe=l(),Wf=a("li"),$oe=a("strong"),$Xe=o("distilbert"),kXe=o(" \u2014 "),_k=a("a"),SXe=o("DistilBertConfig"),RXe=o(" (DistilBERT model)"),PXe=l(),Qf=a("li"),koe=a("strong"),BXe=o("dpr"),IXe=o(" \u2014 "),bk=a("a"),qXe=o("DPRConfig"),NXe=o(" (DPR model)"),jXe=l(),Hf=a("li"),Soe=a("strong"),DXe=o("dpt"),GXe=o(" \u2014 "),vk=a("a"),OXe=o("DPTConfig"),VXe=o(" (DPT model)"),XXe=l(),Uf=a("li"),Roe=a("strong"),zXe=o("electra"),WXe=o(" \u2014 "),Fk=a("a"),QXe=o("ElectraConfig"),HXe=o(" (ELECTRA model)"),UXe=l(),Jf=a("li"),Poe=a("strong"),JXe=o("encoder-decoder"),YXe=o(" \u2014 "),Tk=a("a"),KXe=o("EncoderDecoderConfig"),ZXe=o(" (Encoder decoder model)"),eze=l(),Yf=a("li"),Boe=a("strong"),oze=o("flaubert"),rze=o(" \u2014 "),Mk=a("a"),tze=o("FlaubertConfig"),aze=o(" (FlauBERT model)"),nze=l(),Kf=a("li"),Ioe=a("strong"),sze=o("flava"),lze=o(" \u2014 "),Ek=a("a"),ize=o("FlavaConfig"),dze=o(" (Flava model)"),cze=l(),Zf=a("li"),qoe=a("strong"),fze=o("fnet"),mze=o(" \u2014 "),Ck=a("a"),gze=o("FNetConfig"),hze=o(" (FNet model)"),pze=l(),em=a("li"),Noe=a("strong"),uze=o("fsmt"),_ze=o(" \u2014 "),wk=a("a"),bze=o("FSMTConfig"),vze=o(" (FairSeq Machine-Translation model)"),Fze=l(),om=a("li"),joe=a("strong"),Tze=o("funnel"),Mze=o(" \u2014 "),Ak=a("a"),Eze=o("FunnelConfig"),Cze=o(" (Funnel Transformer model)"),wze=l(),rm=a("li"),Doe=a("strong"),Aze=o("glpn"),yze=o(" \u2014 "),yk=a("a"),Lze=o("GLPNConfig"),xze=o(" (GLPN model)"),$ze=l(),tm=a("li"),Goe=a("strong"),kze=o("gpt2"),Sze=o(" \u2014 "),Lk=a("a"),Rze=o("GPT2Config"),Pze=o(" (OpenAI GPT-2 model)"),Bze=l(),am=a("li"),Ooe=a("strong"),Ize=o("gpt_neo"),qze=o(" \u2014 "),xk=a("a"),Nze=o("GPTNeoConfig"),jze=o(" (GPT Neo model)"),Dze=l(),nm=a("li"),Voe=a("strong"),Gze=o("gptj"),Oze=o(" \u2014 "),$k=a("a"),Vze=o("GPTJConfig"),Xze=o(" (GPT-J model)"),zze=l(),sm=a("li"),Xoe=a("strong"),Wze=o("hubert"),Qze=o(" \u2014 "),kk=a("a"),Hze=o("HubertConfig"),Uze=o(" (Hubert model)"),Jze=l(),lm=a("li"),zoe=a("strong"),Yze=o("ibert"),Kze=o(" \u2014 "),Sk=a("a"),Zze=o("IBertConfig"),eWe=o(" (I-BERT model)"),oWe=l(),im=a("li"),Woe=a("strong"),rWe=o("imagegpt"),tWe=o(" \u2014 "),Rk=a("a"),aWe=o("ImageGPTConfig"),nWe=o(" (ImageGPT model)"),sWe=l(),dm=a("li"),Qoe=a("strong"),lWe=o("layoutlm"),iWe=o(" \u2014 "),Pk=a("a"),dWe=o("LayoutLMConfig"),cWe=o(" (LayoutLM model)"),fWe=l(),cm=a("li"),Hoe=a("strong"),mWe=o("layoutlmv2"),gWe=o(" \u2014 "),Bk=a("a"),hWe=o("LayoutLMv2Config"),pWe=o(" (LayoutLMv2 model)"),uWe=l(),fm=a("li"),Uoe=a("strong"),_We=o("layoutlmv3"),bWe=o(" \u2014 "),Ik=a("a"),vWe=o("LayoutLMv3Config"),FWe=o(" (LayoutLMv3 model)"),TWe=l(),mm=a("li"),Joe=a("strong"),MWe=o("led"),EWe=o(" \u2014 "),qk=a("a"),CWe=o("LEDConfig"),wWe=o(" (LED model)"),AWe=l(),gm=a("li"),Yoe=a("strong"),yWe=o("longformer"),LWe=o(" \u2014 "),Nk=a("a"),xWe=o("LongformerConfig"),$We=o(" (Longformer model)"),kWe=l(),hm=a("li"),Koe=a("strong"),SWe=o("luke"),RWe=o(" \u2014 "),jk=a("a"),PWe=o("LukeConfig"),BWe=o(" (LUKE model)"),IWe=l(),pm=a("li"),Zoe=a("strong"),qWe=o("lxmert"),NWe=o(" \u2014 "),Dk=a("a"),jWe=o("LxmertConfig"),DWe=o(" (LXMERT model)"),GWe=l(),um=a("li"),ere=a("strong"),OWe=o("m2m_100"),VWe=o(" \u2014 "),Gk=a("a"),XWe=o("M2M100Config"),zWe=o(" (M2M100 model)"),WWe=l(),_m=a("li"),ore=a("strong"),QWe=o("marian"),HWe=o(" \u2014 "),Ok=a("a"),UWe=o("MarianConfig"),JWe=o(" (Marian model)"),YWe=l(),bm=a("li"),rre=a("strong"),KWe=o("maskformer"),ZWe=o(" \u2014 "),Vk=a("a"),eQe=o("MaskFormerConfig"),oQe=o(" (MaskFormer model)"),rQe=l(),vm=a("li"),tre=a("strong"),tQe=o("mbart"),aQe=o(" \u2014 "),Xk=a("a"),nQe=o("MBartConfig"),sQe=o(" (mBART model)"),lQe=l(),Fm=a("li"),are=a("strong"),iQe=o("megatron-bert"),dQe=o(" \u2014 "),zk=a("a"),cQe=o("MegatronBertConfig"),fQe=o(" (MegatronBert model)"),mQe=l(),Tm=a("li"),nre=a("strong"),gQe=o("mobilebert"),hQe=o(" \u2014 "),Wk=a("a"),pQe=o("MobileBertConfig"),uQe=o(" (MobileBERT model)"),_Qe=l(),Mm=a("li"),sre=a("strong"),bQe=o("mpnet"),vQe=o(" \u2014 "),Qk=a("a"),FQe=o("MPNetConfig"),TQe=o(" (MPNet model)"),MQe=l(),Em=a("li"),lre=a("strong"),EQe=o("mt5"),CQe=o(" \u2014 "),Hk=a("a"),wQe=o("MT5Config"),AQe=o(" (mT5 model)"),yQe=l(),Cm=a("li"),ire=a("strong"),LQe=o("nystromformer"),xQe=o(" \u2014 "),Uk=a("a"),$Qe=o("NystromformerConfig"),kQe=o(" (Nystromformer model)"),SQe=l(),wm=a("li"),dre=a("strong"),RQe=o("openai-gpt"),PQe=o(" \u2014 "),Jk=a("a"),BQe=o("OpenAIGPTConfig"),IQe=o(" (OpenAI GPT model)"),qQe=l(),Am=a("li"),cre=a("strong"),NQe=o("opt"),jQe=o(" \u2014 "),Yk=a("a"),DQe=o("OPTConfig"),GQe=o(" (OPT model)"),OQe=l(),ym=a("li"),fre=a("strong"),VQe=o("pegasus"),XQe=o(" \u2014 "),Kk=a("a"),zQe=o("PegasusConfig"),WQe=o(" (Pegasus model)"),QQe=l(),Lm=a("li"),mre=a("strong"),HQe=o("perceiver"),UQe=o(" \u2014 "),Zk=a("a"),JQe=o("PerceiverConfig"),YQe=o(" (Perceiver model)"),KQe=l(),xm=a("li"),gre=a("strong"),ZQe=o("plbart"),eHe=o(" \u2014 "),eS=a("a"),oHe=o("PLBartConfig"),rHe=o(" (PLBart model)"),tHe=l(),$m=a("li"),hre=a("strong"),aHe=o("poolformer"),nHe=o(" \u2014 "),oS=a("a"),sHe=o("PoolFormerConfig"),lHe=o(" (PoolFormer model)"),iHe=l(),km=a("li"),pre=a("strong"),dHe=o("prophetnet"),cHe=o(" \u2014 "),rS=a("a"),fHe=o("ProphetNetConfig"),mHe=o(" (ProphetNet model)"),gHe=l(),Sm=a("li"),ure=a("strong"),hHe=o("qdqbert"),pHe=o(" \u2014 "),tS=a("a"),uHe=o("QDQBertConfig"),_He=o(" (QDQBert model)"),bHe=l(),Rm=a("li"),_re=a("strong"),vHe=o("rag"),FHe=o(" \u2014 "),aS=a("a"),THe=o("RagConfig"),MHe=o(" (RAG model)"),EHe=l(),Pm=a("li"),bre=a("strong"),CHe=o("realm"),wHe=o(" \u2014 "),nS=a("a"),AHe=o("RealmConfig"),yHe=o(" (Realm model)"),LHe=l(),Bm=a("li"),vre=a("strong"),xHe=o("reformer"),$He=o(" \u2014 "),sS=a("a"),kHe=o("ReformerConfig"),SHe=o(" (Reformer model)"),RHe=l(),Im=a("li"),Fre=a("strong"),PHe=o("regnet"),BHe=o(" \u2014 "),lS=a("a"),IHe=o("RegNetConfig"),qHe=o(" (RegNet model)"),NHe=l(),qm=a("li"),Tre=a("strong"),jHe=o("rembert"),DHe=o(" \u2014 "),iS=a("a"),GHe=o("RemBertConfig"),OHe=o(" (RemBERT model)"),VHe=l(),Nm=a("li"),Mre=a("strong"),XHe=o("resnet"),zHe=o(" \u2014 "),dS=a("a"),WHe=o("ResNetConfig"),QHe=o(" (ResNet model)"),HHe=l(),jm=a("li"),Ere=a("strong"),UHe=o("retribert"),JHe=o(" \u2014 "),cS=a("a"),YHe=o("RetriBertConfig"),KHe=o(" (RetriBERT model)"),ZHe=l(),Dm=a("li"),Cre=a("strong"),eUe=o("roberta"),oUe=o(" \u2014 "),fS=a("a"),rUe=o("RobertaConfig"),tUe=o(" (RoBERTa model)"),aUe=l(),Gm=a("li"),wre=a("strong"),nUe=o("roformer"),sUe=o(" \u2014 "),mS=a("a"),lUe=o("RoFormerConfig"),iUe=o(" (RoFormer model)"),dUe=l(),Om=a("li"),Are=a("strong"),cUe=o("segformer"),fUe=o(" \u2014 "),gS=a("a"),mUe=o("SegformerConfig"),gUe=o(" (SegFormer model)"),hUe=l(),Vm=a("li"),yre=a("strong"),pUe=o("sew"),uUe=o(" \u2014 "),hS=a("a"),_Ue=o("SEWConfig"),bUe=o(" (SEW model)"),vUe=l(),Xm=a("li"),Lre=a("strong"),FUe=o("sew-d"),TUe=o(" \u2014 "),pS=a("a"),MUe=o("SEWDConfig"),EUe=o(" (SEW-D model)"),CUe=l(),zm=a("li"),xre=a("strong"),wUe=o("speech-encoder-decoder"),AUe=o(" \u2014 "),uS=a("a"),yUe=o("SpeechEncoderDecoderConfig"),LUe=o(" (Speech Encoder decoder model)"),xUe=l(),Wm=a("li"),$re=a("strong"),$Ue=o("speech_to_text"),kUe=o(" \u2014 "),_S=a("a"),SUe=o("Speech2TextConfig"),RUe=o(" (Speech2Text model)"),PUe=l(),Qm=a("li"),kre=a("strong"),BUe=o("speech_to_text_2"),IUe=o(" \u2014 "),bS=a("a"),qUe=o("Speech2Text2Config"),NUe=o(" (Speech2Text2 model)"),jUe=l(),Hm=a("li"),Sre=a("strong"),DUe=o("splinter"),GUe=o(" \u2014 "),vS=a("a"),OUe=o("SplinterConfig"),VUe=o(" (Splinter model)"),XUe=l(),Um=a("li"),Rre=a("strong"),zUe=o("squeezebert"),WUe=o(" \u2014 "),FS=a("a"),QUe=o("SqueezeBertConfig"),HUe=o(" (SqueezeBERT model)"),UUe=l(),Jm=a("li"),Pre=a("strong"),JUe=o("swin"),YUe=o(" \u2014 "),TS=a("a"),KUe=o("SwinConfig"),ZUe=o(" (Swin model)"),eJe=l(),Ym=a("li"),Bre=a("strong"),oJe=o("t5"),rJe=o(" \u2014 "),MS=a("a"),tJe=o("T5Config"),aJe=o(" (T5 model)"),nJe=l(),Km=a("li"),Ire=a("strong"),sJe=o("tapas"),lJe=o(" \u2014 "),ES=a("a"),iJe=o("TapasConfig"),dJe=o(" (TAPAS model)"),cJe=l(),Zm=a("li"),qre=a("strong"),fJe=o("trajectory_transformer"),mJe=o(" \u2014 "),CS=a("a"),gJe=o("TrajectoryTransformerConfig"),hJe=o(" (Trajectory Transformer model)"),pJe=l(),eg=a("li"),Nre=a("strong"),uJe=o("transfo-xl"),_Je=o(" \u2014 "),wS=a("a"),bJe=o("TransfoXLConfig"),vJe=o(" (Transformer-XL model)"),FJe=l(),og=a("li"),jre=a("strong"),TJe=o("trocr"),MJe=o(" \u2014 "),AS=a("a"),EJe=o("TrOCRConfig"),CJe=o(" (TrOCR model)"),wJe=l(),rg=a("li"),Dre=a("strong"),AJe=o("unispeech"),yJe=o(" \u2014 "),yS=a("a"),LJe=o("UniSpeechConfig"),xJe=o(" (UniSpeech model)"),$Je=l(),tg=a("li"),Gre=a("strong"),kJe=o("unispeech-sat"),SJe=o(" \u2014 "),LS=a("a"),RJe=o("UniSpeechSatConfig"),PJe=o(" (UniSpeechSat model)"),BJe=l(),ag=a("li"),Ore=a("strong"),IJe=o("van"),qJe=o(" \u2014 "),xS=a("a"),NJe=o("VanConfig"),jJe=o(" (VAN model)"),DJe=l(),ng=a("li"),Vre=a("strong"),GJe=o("vilt"),OJe=o(" \u2014 "),$S=a("a"),VJe=o("ViltConfig"),XJe=o(" (ViLT model)"),zJe=l(),sg=a("li"),Xre=a("strong"),WJe=o("vision-encoder-decoder"),QJe=o(" \u2014 "),kS=a("a"),HJe=o("VisionEncoderDecoderConfig"),UJe=o(" (Vision Encoder decoder model)"),JJe=l(),lg=a("li"),zre=a("strong"),YJe=o("vision-text-dual-encoder"),KJe=o(" \u2014 "),SS=a("a"),ZJe=o("VisionTextDualEncoderConfig"),eYe=o(" (VisionTextDualEncoder model)"),oYe=l(),ig=a("li"),Wre=a("strong"),rYe=o("visual_bert"),tYe=o(" \u2014 "),RS=a("a"),aYe=o("VisualBertConfig"),nYe=o(" (VisualBert model)"),sYe=l(),dg=a("li"),Qre=a("strong"),lYe=o("vit"),iYe=o(" \u2014 "),PS=a("a"),dYe=o("ViTConfig"),cYe=o(" (ViT model)"),fYe=l(),cg=a("li"),Hre=a("strong"),mYe=o("vit_mae"),gYe=o(" \u2014 "),BS=a("a"),hYe=o("ViTMAEConfig"),pYe=o(" (ViTMAE model)"),uYe=l(),fg=a("li"),Ure=a("strong"),_Ye=o("wav2vec2"),bYe=o(" \u2014 "),IS=a("a"),vYe=o("Wav2Vec2Config"),FYe=o(" (Wav2Vec2 model)"),TYe=l(),mg=a("li"),Jre=a("strong"),MYe=o("wav2vec2-conformer"),EYe=o(" \u2014 "),qS=a("a"),CYe=o("Wav2Vec2ConformerConfig"),wYe=o(" (Wav2Vec2-Conformer model)"),AYe=l(),gg=a("li"),Yre=a("strong"),yYe=o("wavlm"),LYe=o(" \u2014 "),NS=a("a"),xYe=o("WavLMConfig"),$Ye=o(" (WavLM model)"),kYe=l(),hg=a("li"),Kre=a("strong"),SYe=o("xglm"),RYe=o(" \u2014 "),jS=a("a"),PYe=o("XGLMConfig"),BYe=o(" (XGLM model)"),IYe=l(),pg=a("li"),Zre=a("strong"),qYe=o("xlm"),NYe=o(" \u2014 "),DS=a("a"),jYe=o("XLMConfig"),DYe=o(" (XLM model)"),GYe=l(),ug=a("li"),ete=a("strong"),OYe=o("xlm-prophetnet"),VYe=o(" \u2014 "),GS=a("a"),XYe=o("XLMProphetNetConfig"),zYe=o(" (XLMProphetNet model)"),WYe=l(),_g=a("li"),ote=a("strong"),QYe=o("xlm-roberta"),HYe=o(" \u2014 "),OS=a("a"),UYe=o("XLMRobertaConfig"),JYe=o(" (XLM-RoBERTa model)"),YYe=l(),bg=a("li"),rte=a("strong"),KYe=o("xlm-roberta-xl"),ZYe=o(" \u2014 "),VS=a("a"),eKe=o("XLMRobertaXLConfig"),oKe=o(" (XLM-RoBERTa-XL model)"),rKe=l(),vg=a("li"),tte=a("strong"),tKe=o("xlnet"),aKe=o(" \u2014 "),XS=a("a"),nKe=o("XLNetConfig"),sKe=o(" (XLNet model)"),lKe=l(),Fg=a("li"),ate=a("strong"),iKe=o("yolos"),dKe=o(" \u2014 "),zS=a("a"),cKe=o("YolosConfig"),fKe=o(" (YOLOS model)"),mKe=l(),Tg=a("li"),nte=a("strong"),gKe=o("yoso"),hKe=o(" \u2014 "),WS=a("a"),pKe=o("YosoConfig"),uKe=o(" (YOSO model)"),_Ke=l(),F(Mg.$$.fragment),bKe=l(),Eg=a("div"),F(xA.$$.fragment),vKe=l(),ste=a("p"),FKe=o("Register a new configuration for this class."),jqe=l(),Ti=a("h2"),Cg=a("a"),lte=a("span"),F($A.$$.fragment),TKe=l(),ite=a("span"),MKe=o("AutoTokenizer"),Dqe=l(),wo=a("div"),F(kA.$$.fragment),EKe=l(),SA=a("p"),CKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),QS=a("a"),wKe=o("AutoTokenizer.from_pretrained()"),AKe=o(" class method."),yKe=l(),RA=a("p"),LKe=o("This class cannot be instantiated directly using "),dte=a("code"),xKe=o("__init__()"),$Ke=o(" (throws an error)."),kKe=l(),Cr=a("div"),F(PA.$$.fragment),SKe=l(),cte=a("p"),RKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),PKe=l(),Aa=a("p"),BKe=o("The tokenizer class to instantiate is selected based on the "),fte=a("code"),IKe=o("model_type"),qKe=o(` property of the config object (either
passed as an argument or loaded from `),mte=a("code"),NKe=o("pretrained_model_name_or_path"),jKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=a("code"),DKe=o("pretrained_model_name_or_path"),GKe=o(":"),OKe=l(),k=a("ul"),Sn=a("li"),hte=a("strong"),VKe=o("albert"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("AlbertTokenizer"),WKe=o(" or "),US=a("a"),QKe=o("AlbertTokenizerFast"),HKe=o(" (ALBERT model)"),UKe=l(),Rn=a("li"),pte=a("strong"),JKe=o("bart"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("BartTokenizer"),ZKe=o(" or "),YS=a("a"),eZe=o("BartTokenizerFast"),oZe=o(" (BART model)"),rZe=l(),Pn=a("li"),ute=a("strong"),tZe=o("barthez"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("BarthezTokenizer"),sZe=o(" or "),ZS=a("a"),lZe=o("BarthezTokenizerFast"),iZe=o(" (BARThez model)"),dZe=l(),wg=a("li"),_te=a("strong"),cZe=o("bartpho"),fZe=o(" \u2014 "),eR=a("a"),mZe=o("BartphoTokenizer"),gZe=o(" (BARTpho model)"),hZe=l(),Bn=a("li"),bte=a("strong"),pZe=o("bert"),uZe=o(" \u2014 "),oR=a("a"),_Ze=o("BertTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("BertTokenizerFast"),FZe=o(" (BERT model)"),TZe=l(),Ag=a("li"),vte=a("strong"),MZe=o("bert-generation"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("BertGenerationTokenizer"),wZe=o(" (Bert Generation model)"),AZe=l(),yg=a("li"),Fte=a("strong"),yZe=o("bert-japanese"),LZe=o(" \u2014 "),aR=a("a"),xZe=o("BertJapaneseTokenizer"),$Ze=o(" (BertJapanese model)"),kZe=l(),Lg=a("li"),Tte=a("strong"),SZe=o("bertweet"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("BertweetTokenizer"),BZe=o(" (Bertweet model)"),IZe=l(),In=a("li"),Mte=a("strong"),qZe=o("big_bird"),NZe=o(" \u2014 "),sR=a("a"),jZe=o("BigBirdTokenizer"),DZe=o(" or "),lR=a("a"),GZe=o("BigBirdTokenizerFast"),OZe=o(" (BigBird model)"),VZe=l(),qn=a("li"),Ete=a("strong"),XZe=o("bigbird_pegasus"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("PegasusTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("PegasusTokenizerFast"),UZe=o(" (BigBirdPegasus model)"),JZe=l(),Nn=a("li"),Cte=a("strong"),YZe=o("blenderbot"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("BlenderbotTokenizer"),eeo=o(" or "),fR=a("a"),oeo=o("BlenderbotTokenizerFast"),reo=o(" (Blenderbot model)"),teo=l(),xg=a("li"),wte=a("strong"),aeo=o("blenderbot-small"),neo=o(" \u2014 "),mR=a("a"),seo=o("BlenderbotSmallTokenizer"),leo=o(" (BlenderbotSmall model)"),ieo=l(),$g=a("li"),Ate=a("strong"),deo=o("byt5"),ceo=o(" \u2014 "),gR=a("a"),feo=o("ByT5Tokenizer"),meo=o(" (ByT5 model)"),geo=l(),jn=a("li"),yte=a("strong"),heo=o("camembert"),peo=o(" \u2014 "),hR=a("a"),ueo=o("CamembertTokenizer"),_eo=o(" or "),pR=a("a"),beo=o("CamembertTokenizerFast"),veo=o(" (CamemBERT model)"),Feo=l(),kg=a("li"),Lte=a("strong"),Teo=o("canine"),Meo=o(" \u2014 "),uR=a("a"),Eeo=o("CanineTokenizer"),Ceo=o(" (Canine model)"),weo=l(),Dn=a("li"),xte=a("strong"),Aeo=o("clip"),yeo=o(" \u2014 "),_R=a("a"),Leo=o("CLIPTokenizer"),xeo=o(" or "),bR=a("a"),$eo=o("CLIPTokenizerFast"),keo=o(" (CLIP model)"),Seo=l(),Gn=a("li"),$te=a("strong"),Reo=o("convbert"),Peo=o(" \u2014 "),vR=a("a"),Beo=o("ConvBertTokenizer"),Ieo=o(" or "),FR=a("a"),qeo=o("ConvBertTokenizerFast"),Neo=o(" (ConvBERT model)"),jeo=l(),On=a("li"),kte=a("strong"),Deo=o("cpm"),Geo=o(" \u2014 "),TR=a("a"),Oeo=o("CpmTokenizer"),Veo=o(" or "),MR=a("a"),Xeo=o("CpmTokenizerFast"),zeo=o(" (CPM model)"),Weo=l(),Sg=a("li"),Ste=a("strong"),Qeo=o("ctrl"),Heo=o(" \u2014 "),ER=a("a"),Ueo=o("CTRLTokenizer"),Jeo=o(" (CTRL model)"),Yeo=l(),Vn=a("li"),Rte=a("strong"),Keo=o("data2vec-text"),Zeo=o(" \u2014 "),CR=a("a"),eoo=o("RobertaTokenizer"),ooo=o(" or "),wR=a("a"),roo=o("RobertaTokenizerFast"),too=o(" (Data2VecText model)"),aoo=l(),Xn=a("li"),Pte=a("strong"),noo=o("deberta"),soo=o(" \u2014 "),AR=a("a"),loo=o("DebertaTokenizer"),ioo=o(" or "),yR=a("a"),doo=o("DebertaTokenizerFast"),coo=o(" (DeBERTa model)"),foo=l(),zn=a("li"),Bte=a("strong"),moo=o("deberta-v2"),goo=o(" \u2014 "),LR=a("a"),hoo=o("DebertaV2Tokenizer"),poo=o(" or "),xR=a("a"),uoo=o("DebertaV2TokenizerFast"),_oo=o(" (DeBERTa-v2 model)"),boo=l(),Wn=a("li"),Ite=a("strong"),voo=o("distilbert"),Foo=o(" \u2014 "),$R=a("a"),Too=o("DistilBertTokenizer"),Moo=o(" or "),kR=a("a"),Eoo=o("DistilBertTokenizerFast"),Coo=o(" (DistilBERT model)"),woo=l(),Qn=a("li"),qte=a("strong"),Aoo=o("dpr"),yoo=o(" \u2014 "),SR=a("a"),Loo=o("DPRQuestionEncoderTokenizer"),xoo=o(" or "),RR=a("a"),$oo=o("DPRQuestionEncoderTokenizerFast"),koo=o(" (DPR model)"),Soo=l(),Hn=a("li"),Nte=a("strong"),Roo=o("electra"),Poo=o(" \u2014 "),PR=a("a"),Boo=o("ElectraTokenizer"),Ioo=o(" or "),BR=a("a"),qoo=o("ElectraTokenizerFast"),Noo=o(" (ELECTRA model)"),joo=l(),Rg=a("li"),jte=a("strong"),Doo=o("flaubert"),Goo=o(" \u2014 "),IR=a("a"),Ooo=o("FlaubertTokenizer"),Voo=o(" (FlauBERT model)"),Xoo=l(),Un=a("li"),Dte=a("strong"),zoo=o("fnet"),Woo=o(" \u2014 "),qR=a("a"),Qoo=o("FNetTokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("FNetTokenizerFast"),Joo=o(" (FNet model)"),Yoo=l(),Pg=a("li"),Gte=a("strong"),Koo=o("fsmt"),Zoo=o(" \u2014 "),jR=a("a"),ero=o("FSMTTokenizer"),oro=o(" (FairSeq Machine-Translation model)"),rro=l(),Jn=a("li"),Ote=a("strong"),tro=o("funnel"),aro=o(" \u2014 "),DR=a("a"),nro=o("FunnelTokenizer"),sro=o(" or "),GR=a("a"),lro=o("FunnelTokenizerFast"),iro=o(" (Funnel Transformer model)"),dro=l(),Yn=a("li"),Vte=a("strong"),cro=o("gpt2"),fro=o(" \u2014 "),OR=a("a"),mro=o("GPT2Tokenizer"),gro=o(" or "),VR=a("a"),hro=o("GPT2TokenizerFast"),pro=o(" (OpenAI GPT-2 model)"),uro=l(),Kn=a("li"),Xte=a("strong"),_ro=o("gpt_neo"),bro=o(" \u2014 "),XR=a("a"),vro=o("GPT2Tokenizer"),Fro=o(" or "),zR=a("a"),Tro=o("GPT2TokenizerFast"),Mro=o(" (GPT Neo model)"),Ero=l(),Zn=a("li"),zte=a("strong"),Cro=o("gptj"),wro=o(" \u2014 "),WR=a("a"),Aro=o("GPT2Tokenizer"),yro=o(" or "),QR=a("a"),Lro=o("GPT2TokenizerFast"),xro=o(" (GPT-J model)"),$ro=l(),es=a("li"),Wte=a("strong"),kro=o("herbert"),Sro=o(" \u2014 "),HR=a("a"),Rro=o("HerbertTokenizer"),Pro=o(" or "),UR=a("a"),Bro=o("HerbertTokenizerFast"),Iro=o(" (HerBERT model)"),qro=l(),Bg=a("li"),Qte=a("strong"),Nro=o("hubert"),jro=o(" \u2014 "),JR=a("a"),Dro=o("Wav2Vec2CTCTokenizer"),Gro=o(" (Hubert model)"),Oro=l(),os=a("li"),Hte=a("strong"),Vro=o("ibert"),Xro=o(" \u2014 "),YR=a("a"),zro=o("RobertaTokenizer"),Wro=o(" or "),KR=a("a"),Qro=o("RobertaTokenizerFast"),Hro=o(" (I-BERT model)"),Uro=l(),rs=a("li"),Ute=a("strong"),Jro=o("layoutlm"),Yro=o(" \u2014 "),ZR=a("a"),Kro=o("LayoutLMTokenizer"),Zro=o(" or "),eP=a("a"),eto=o("LayoutLMTokenizerFast"),oto=o(" (LayoutLM model)"),rto=l(),ts=a("li"),Jte=a("strong"),tto=o("layoutlmv2"),ato=o(" \u2014 "),oP=a("a"),nto=o("LayoutLMv2Tokenizer"),sto=o(" or "),rP=a("a"),lto=o("LayoutLMv2TokenizerFast"),ito=o(" (LayoutLMv2 model)"),dto=l(),as=a("li"),Yte=a("strong"),cto=o("layoutlmv3"),fto=o(" \u2014 "),tP=a("a"),mto=o("LayoutLMv3Tokenizer"),gto=o(" or "),aP=a("a"),hto=o("LayoutLMv3TokenizerFast"),pto=o(" (LayoutLMv3 model)"),uto=l(),ns=a("li"),Kte=a("strong"),_to=o("layoutxlm"),bto=o(" \u2014 "),nP=a("a"),vto=o("LayoutXLMTokenizer"),Fto=o(" or "),sP=a("a"),Tto=o("LayoutXLMTokenizerFast"),Mto=o(" (LayoutXLM model)"),Eto=l(),ss=a("li"),Zte=a("strong"),Cto=o("led"),wto=o(" \u2014 "),lP=a("a"),Ato=o("LEDTokenizer"),yto=o(" or "),iP=a("a"),Lto=o("LEDTokenizerFast"),xto=o(" (LED model)"),$to=l(),ls=a("li"),eae=a("strong"),kto=o("longformer"),Sto=o(" \u2014 "),dP=a("a"),Rto=o("LongformerTokenizer"),Pto=o(" or "),cP=a("a"),Bto=o("LongformerTokenizerFast"),Ito=o(" (Longformer model)"),qto=l(),Ig=a("li"),oae=a("strong"),Nto=o("luke"),jto=o(" \u2014 "),fP=a("a"),Dto=o("LukeTokenizer"),Gto=o(" (LUKE model)"),Oto=l(),is=a("li"),rae=a("strong"),Vto=o("lxmert"),Xto=o(" \u2014 "),mP=a("a"),zto=o("LxmertTokenizer"),Wto=o(" or "),gP=a("a"),Qto=o("LxmertTokenizerFast"),Hto=o(" (LXMERT model)"),Uto=l(),qg=a("li"),tae=a("strong"),Jto=o("m2m_100"),Yto=o(" \u2014 "),hP=a("a"),Kto=o("M2M100Tokenizer"),Zto=o(" (M2M100 model)"),eao=l(),Ng=a("li"),aae=a("strong"),oao=o("marian"),rao=o(" \u2014 "),pP=a("a"),tao=o("MarianTokenizer"),aao=o(" (Marian model)"),nao=l(),ds=a("li"),nae=a("strong"),sao=o("mbart"),lao=o(" \u2014 "),uP=a("a"),iao=o("MBartTokenizer"),dao=o(" or "),_P=a("a"),cao=o("MBartTokenizerFast"),fao=o(" (mBART model)"),mao=l(),cs=a("li"),sae=a("strong"),gao=o("mbart50"),hao=o(" \u2014 "),bP=a("a"),pao=o("MBart50Tokenizer"),uao=o(" or "),vP=a("a"),_ao=o("MBart50TokenizerFast"),bao=o(" (mBART-50 model)"),vao=l(),fs=a("li"),lae=a("strong"),Fao=o("megatron-bert"),Tao=o(" \u2014 "),FP=a("a"),Mao=o("BertTokenizer"),Eao=o(" or "),TP=a("a"),Cao=o("BertTokenizerFast"),wao=o(" (MegatronBert model)"),Aao=l(),jg=a("li"),iae=a("strong"),yao=o("mluke"),Lao=o(" \u2014 "),MP=a("a"),xao=o("MLukeTokenizer"),$ao=o(" (mLUKE model)"),kao=l(),ms=a("li"),dae=a("strong"),Sao=o("mobilebert"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("MobileBertTokenizer"),Bao=o(" or "),CP=a("a"),Iao=o("MobileBertTokenizerFast"),qao=o(" (MobileBERT model)"),Nao=l(),gs=a("li"),cae=a("strong"),jao=o("mpnet"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("MPNetTokenizer"),Oao=o(" or "),AP=a("a"),Vao=o("MPNetTokenizerFast"),Xao=o(" (MPNet model)"),zao=l(),hs=a("li"),fae=a("strong"),Wao=o("mt5"),Qao=o(" \u2014 "),yP=a("a"),Hao=o("MT5Tokenizer"),Uao=o(" or "),LP=a("a"),Jao=o("MT5TokenizerFast"),Yao=o(" (mT5 model)"),Kao=l(),ps=a("li"),mae=a("strong"),Zao=o("nystromformer"),eno=o(" \u2014 "),xP=a("a"),ono=o("AlbertTokenizer"),rno=o(" or "),$P=a("a"),tno=o("AlbertTokenizerFast"),ano=o(" (Nystromformer model)"),nno=l(),us=a("li"),gae=a("strong"),sno=o("openai-gpt"),lno=o(" \u2014 "),kP=a("a"),ino=o("OpenAIGPTTokenizer"),dno=o(" or "),SP=a("a"),cno=o("OpenAIGPTTokenizerFast"),fno=o(" (OpenAI GPT model)"),mno=l(),Dg=a("li"),hae=a("strong"),gno=o("opt"),hno=o(" \u2014 "),RP=a("a"),pno=o("GPT2Tokenizer"),uno=o(" (OPT model)"),_no=l(),_s=a("li"),pae=a("strong"),bno=o("pegasus"),vno=o(" \u2014 "),PP=a("a"),Fno=o("PegasusTokenizer"),Tno=o(" or "),BP=a("a"),Mno=o("PegasusTokenizerFast"),Eno=o(" (Pegasus model)"),Cno=l(),Gg=a("li"),uae=a("strong"),wno=o("perceiver"),Ano=o(" \u2014 "),IP=a("a"),yno=o("PerceiverTokenizer"),Lno=o(" (Perceiver model)"),xno=l(),Og=a("li"),_ae=a("strong"),$no=o("phobert"),kno=o(" \u2014 "),qP=a("a"),Sno=o("PhobertTokenizer"),Rno=o(" (PhoBERT model)"),Pno=l(),Vg=a("li"),bae=a("strong"),Bno=o("plbart"),Ino=o(" \u2014 "),NP=a("a"),qno=o("PLBartTokenizer"),Nno=o(" (PLBart model)"),jno=l(),Xg=a("li"),vae=a("strong"),Dno=o("prophetnet"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("ProphetNetTokenizer"),Vno=o(" (ProphetNet model)"),Xno=l(),bs=a("li"),Fae=a("strong"),zno=o("qdqbert"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("BertTokenizer"),Hno=o(" or "),GP=a("a"),Uno=o("BertTokenizerFast"),Jno=o(" (QDQBert model)"),Yno=l(),zg=a("li"),Tae=a("strong"),Kno=o("rag"),Zno=o(" \u2014 "),OP=a("a"),eso=o("RagTokenizer"),oso=o(" (RAG model)"),rso=l(),vs=a("li"),Mae=a("strong"),tso=o("realm"),aso=o(" \u2014 "),VP=a("a"),nso=o("RealmTokenizer"),sso=o(" or "),XP=a("a"),lso=o("RealmTokenizerFast"),iso=o(" (Realm model)"),dso=l(),Fs=a("li"),Eae=a("strong"),cso=o("reformer"),fso=o(" \u2014 "),zP=a("a"),mso=o("ReformerTokenizer"),gso=o(" or "),WP=a("a"),hso=o("ReformerTokenizerFast"),pso=o(" (Reformer model)"),uso=l(),Ts=a("li"),Cae=a("strong"),_so=o("rembert"),bso=o(" \u2014 "),QP=a("a"),vso=o("RemBertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("RemBertTokenizerFast"),Mso=o(" (RemBERT model)"),Eso=l(),Ms=a("li"),wae=a("strong"),Cso=o("retribert"),wso=o(" \u2014 "),UP=a("a"),Aso=o("RetriBertTokenizer"),yso=o(" or "),JP=a("a"),Lso=o("RetriBertTokenizerFast"),xso=o(" (RetriBERT model)"),$so=l(),Es=a("li"),Aae=a("strong"),kso=o("roberta"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("RobertaTokenizer"),Pso=o(" or "),KP=a("a"),Bso=o("RobertaTokenizerFast"),Iso=o(" (RoBERTa model)"),qso=l(),Cs=a("li"),yae=a("strong"),Nso=o("roformer"),jso=o(" \u2014 "),ZP=a("a"),Dso=o("RoFormerTokenizer"),Gso=o(" or "),eB=a("a"),Oso=o("RoFormerTokenizerFast"),Vso=o(" (RoFormer model)"),Xso=l(),Wg=a("li"),Lae=a("strong"),zso=o("speech_to_text"),Wso=o(" \u2014 "),oB=a("a"),Qso=o("Speech2TextTokenizer"),Hso=o(" (Speech2Text model)"),Uso=l(),Qg=a("li"),xae=a("strong"),Jso=o("speech_to_text_2"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("Speech2Text2Tokenizer"),Zso=o(" (Speech2Text2 model)"),elo=l(),ws=a("li"),$ae=a("strong"),olo=o("splinter"),rlo=o(" \u2014 "),tB=a("a"),tlo=o("SplinterTokenizer"),alo=o(" or "),aB=a("a"),nlo=o("SplinterTokenizerFast"),slo=o(" (Splinter model)"),llo=l(),As=a("li"),kae=a("strong"),ilo=o("squeezebert"),dlo=o(" \u2014 "),nB=a("a"),clo=o("SqueezeBertTokenizer"),flo=o(" or "),sB=a("a"),mlo=o("SqueezeBertTokenizerFast"),glo=o(" (SqueezeBERT model)"),hlo=l(),ys=a("li"),Sae=a("strong"),plo=o("t5"),ulo=o(" \u2014 "),lB=a("a"),_lo=o("T5Tokenizer"),blo=o(" or "),iB=a("a"),vlo=o("T5TokenizerFast"),Flo=o(" (T5 model)"),Tlo=l(),Hg=a("li"),Rae=a("strong"),Mlo=o("tapas"),Elo=o(" \u2014 "),dB=a("a"),Clo=o("TapasTokenizer"),wlo=o(" (TAPAS model)"),Alo=l(),Ug=a("li"),Pae=a("strong"),ylo=o("tapex"),Llo=o(" \u2014 "),cB=a("a"),xlo=o("TapexTokenizer"),$lo=o(" (TAPEX model)"),klo=l(),Jg=a("li"),Bae=a("strong"),Slo=o("transfo-xl"),Rlo=o(" \u2014 "),fB=a("a"),Plo=o("TransfoXLTokenizer"),Blo=o(" (Transformer-XL model)"),Ilo=l(),Ls=a("li"),Iae=a("strong"),qlo=o("visual_bert"),Nlo=o(" \u2014 "),mB=a("a"),jlo=o("BertTokenizer"),Dlo=o(" or "),gB=a("a"),Glo=o("BertTokenizerFast"),Olo=o(" (VisualBert model)"),Vlo=l(),Yg=a("li"),qae=a("strong"),Xlo=o("wav2vec2"),zlo=o(" \u2014 "),hB=a("a"),Wlo=o("Wav2Vec2CTCTokenizer"),Qlo=o(" (Wav2Vec2 model)"),Hlo=l(),Kg=a("li"),Nae=a("strong"),Ulo=o("wav2vec2-conformer"),Jlo=o(" \u2014 "),pB=a("a"),Ylo=o("Wav2Vec2CTCTokenizer"),Klo=o(" (Wav2Vec2-Conformer model)"),Zlo=l(),Zg=a("li"),jae=a("strong"),eio=o("wav2vec2_phoneme"),oio=o(" \u2014 "),uB=a("a"),rio=o("Wav2Vec2PhonemeCTCTokenizer"),tio=o(" (Wav2Vec2Phoneme model)"),aio=l(),xs=a("li"),Dae=a("strong"),nio=o("xglm"),sio=o(" \u2014 "),_B=a("a"),lio=o("XGLMTokenizer"),iio=o(" or "),bB=a("a"),dio=o("XGLMTokenizerFast"),cio=o(" (XGLM model)"),fio=l(),eh=a("li"),Gae=a("strong"),mio=o("xlm"),gio=o(" \u2014 "),vB=a("a"),hio=o("XLMTokenizer"),pio=o(" (XLM model)"),uio=l(),oh=a("li"),Oae=a("strong"),_io=o("xlm-prophetnet"),bio=o(" \u2014 "),FB=a("a"),vio=o("XLMProphetNetTokenizer"),Fio=o(" (XLMProphetNet model)"),Tio=l(),$s=a("li"),Vae=a("strong"),Mio=o("xlm-roberta"),Eio=o(" \u2014 "),TB=a("a"),Cio=o("XLMRobertaTokenizer"),wio=o(" or "),MB=a("a"),Aio=o("XLMRobertaTokenizerFast"),yio=o(" (XLM-RoBERTa model)"),Lio=l(),ks=a("li"),Xae=a("strong"),xio=o("xlm-roberta-xl"),$io=o(" \u2014 "),EB=a("a"),kio=o("RobertaTokenizer"),Sio=o(" or "),CB=a("a"),Rio=o("RobertaTokenizerFast"),Pio=o(" (XLM-RoBERTa-XL model)"),Bio=l(),Ss=a("li"),zae=a("strong"),Iio=o("xlnet"),qio=o(" \u2014 "),wB=a("a"),Nio=o("XLNetTokenizer"),jio=o(" or "),AB=a("a"),Dio=o("XLNetTokenizerFast"),Gio=o(" (XLNet model)"),Oio=l(),Rs=a("li"),Wae=a("strong"),Vio=o("yoso"),Xio=o(" \u2014 "),yB=a("a"),zio=o("AlbertTokenizer"),Wio=o(" or "),LB=a("a"),Qio=o("AlbertTokenizerFast"),Hio=o(" (YOSO model)"),Uio=l(),F(rh.$$.fragment),Jio=l(),th=a("div"),F(BA.$$.fragment),Yio=l(),Qae=a("p"),Kio=o("Register a new tokenizer in this mapping."),Gqe=l(),Mi=a("h2"),ah=a("a"),Hae=a("span"),F(IA.$$.fragment),Zio=l(),Uae=a("span"),edo=o("AutoFeatureExtractor"),Oqe=l(),Ao=a("div"),F(qA.$$.fragment),odo=l(),NA=a("p"),rdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xB=a("a"),tdo=o("AutoFeatureExtractor.from_pretrained()"),ado=o(" class method."),ndo=l(),jA=a("p"),sdo=o("This class cannot be instantiated directly using "),Jae=a("code"),ldo=o("__init__()"),ido=o(" (throws an error)."),ddo=l(),He=a("div"),F(DA.$$.fragment),cdo=l(),Yae=a("p"),fdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mdo=l(),ya=a("p"),gdo=o("The feature extractor class to instantiate is selected based on the "),Kae=a("code"),hdo=o("model_type"),pdo=o(` property of the config object
(either passed as an argument or loaded from `),Zae=a("code"),udo=o("pretrained_model_name_or_path"),_do=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ene=a("code"),bdo=o("pretrained_model_name_or_path"),vdo=o(":"),Fdo=l(),K=a("ul"),nh=a("li"),one=a("strong"),Tdo=o("beit"),Mdo=o(" \u2014 "),$B=a("a"),Edo=o("BeitFeatureExtractor"),Cdo=o(" (BEiT model)"),wdo=l(),sh=a("li"),rne=a("strong"),Ado=o("clip"),ydo=o(" \u2014 "),kB=a("a"),Ldo=o("CLIPFeatureExtractor"),xdo=o(" (CLIP model)"),$do=l(),lh=a("li"),tne=a("strong"),kdo=o("convnext"),Sdo=o(" \u2014 "),SB=a("a"),Rdo=o("ConvNextFeatureExtractor"),Pdo=o(" (ConvNext model)"),Bdo=l(),ih=a("li"),ane=a("strong"),Ido=o("cvt"),qdo=o(" \u2014 "),RB=a("a"),Ndo=o("ConvNextFeatureExtractor"),jdo=o(" (CvT model)"),Ddo=l(),dh=a("li"),nne=a("strong"),Gdo=o("data2vec-audio"),Odo=o(" \u2014 "),PB=a("a"),Vdo=o("Wav2Vec2FeatureExtractor"),Xdo=o(" (Data2VecAudio model)"),zdo=l(),ch=a("li"),sne=a("strong"),Wdo=o("data2vec-vision"),Qdo=o(" \u2014 "),BB=a("a"),Hdo=o("BeitFeatureExtractor"),Udo=o(" (Data2VecVision model)"),Jdo=l(),fh=a("li"),lne=a("strong"),Ydo=o("deit"),Kdo=o(" \u2014 "),IB=a("a"),Zdo=o("DeiTFeatureExtractor"),eco=o(" (DeiT model)"),oco=l(),mh=a("li"),ine=a("strong"),rco=o("detr"),tco=o(" \u2014 "),qB=a("a"),aco=o("DetrFeatureExtractor"),nco=o(" (DETR model)"),sco=l(),gh=a("li"),dne=a("strong"),lco=o("dpt"),ico=o(" \u2014 "),NB=a("a"),dco=o("DPTFeatureExtractor"),cco=o(" (DPT model)"),fco=l(),hh=a("li"),cne=a("strong"),mco=o("flava"),gco=o(" \u2014 "),jB=a("a"),hco=o("FlavaFeatureExtractor"),pco=o(" (Flava model)"),uco=l(),ph=a("li"),fne=a("strong"),_co=o("glpn"),bco=o(" \u2014 "),DB=a("a"),vco=o("GLPNFeatureExtractor"),Fco=o(" (GLPN model)"),Tco=l(),uh=a("li"),mne=a("strong"),Mco=o("hubert"),Eco=o(" \u2014 "),GB=a("a"),Cco=o("Wav2Vec2FeatureExtractor"),wco=o(" (Hubert model)"),Aco=l(),_h=a("li"),gne=a("strong"),yco=o("layoutlmv2"),Lco=o(" \u2014 "),OB=a("a"),xco=o("LayoutLMv2FeatureExtractor"),$co=o(" (LayoutLMv2 model)"),kco=l(),bh=a("li"),hne=a("strong"),Sco=o("layoutlmv3"),Rco=o(" \u2014 "),VB=a("a"),Pco=o("LayoutLMv3FeatureExtractor"),Bco=o(" (LayoutLMv3 model)"),Ico=l(),vh=a("li"),pne=a("strong"),qco=o("maskformer"),Nco=o(" \u2014 "),XB=a("a"),jco=o("MaskFormerFeatureExtractor"),Dco=o(" (MaskFormer model)"),Gco=l(),Fh=a("li"),une=a("strong"),Oco=o("perceiver"),Vco=o(" \u2014 "),zB=a("a"),Xco=o("PerceiverFeatureExtractor"),zco=o(" (Perceiver model)"),Wco=l(),Th=a("li"),_ne=a("strong"),Qco=o("poolformer"),Hco=o(" \u2014 "),WB=a("a"),Uco=o("PoolFormerFeatureExtractor"),Jco=o(" (PoolFormer model)"),Yco=l(),Mh=a("li"),bne=a("strong"),Kco=o("regnet"),Zco=o(" \u2014 "),QB=a("a"),efo=o("ConvNextFeatureExtractor"),ofo=o(" (RegNet model)"),rfo=l(),Eh=a("li"),vne=a("strong"),tfo=o("resnet"),afo=o(" \u2014 "),HB=a("a"),nfo=o("ConvNextFeatureExtractor"),sfo=o(" (ResNet model)"),lfo=l(),Ch=a("li"),Fne=a("strong"),ifo=o("segformer"),dfo=o(" \u2014 "),UB=a("a"),cfo=o("SegformerFeatureExtractor"),ffo=o(" (SegFormer model)"),mfo=l(),wh=a("li"),Tne=a("strong"),gfo=o("speech_to_text"),hfo=o(" \u2014 "),JB=a("a"),pfo=o("Speech2TextFeatureExtractor"),ufo=o(" (Speech2Text model)"),_fo=l(),Ah=a("li"),Mne=a("strong"),bfo=o("swin"),vfo=o(" \u2014 "),YB=a("a"),Ffo=o("ViTFeatureExtractor"),Tfo=o(" (Swin model)"),Mfo=l(),yh=a("li"),Ene=a("strong"),Efo=o("van"),Cfo=o(" \u2014 "),KB=a("a"),wfo=o("ConvNextFeatureExtractor"),Afo=o(" (VAN model)"),yfo=l(),Lh=a("li"),Cne=a("strong"),Lfo=o("vit"),xfo=o(" \u2014 "),ZB=a("a"),$fo=o("ViTFeatureExtractor"),kfo=o(" (ViT model)"),Sfo=l(),xh=a("li"),wne=a("strong"),Rfo=o("vit_mae"),Pfo=o(" \u2014 "),eI=a("a"),Bfo=o("ViTFeatureExtractor"),Ifo=o(" (ViTMAE model)"),qfo=l(),$h=a("li"),Ane=a("strong"),Nfo=o("wav2vec2"),jfo=o(" \u2014 "),oI=a("a"),Dfo=o("Wav2Vec2FeatureExtractor"),Gfo=o(" (Wav2Vec2 model)"),Ofo=l(),kh=a("li"),yne=a("strong"),Vfo=o("wav2vec2-conformer"),Xfo=o(" \u2014 "),rI=a("a"),zfo=o("Wav2Vec2FeatureExtractor"),Wfo=o(" (Wav2Vec2-Conformer model)"),Qfo=l(),Sh=a("li"),Lne=a("strong"),Hfo=o("yolos"),Ufo=o(" \u2014 "),tI=a("a"),Jfo=o("YolosFeatureExtractor"),Yfo=o(" (YOLOS model)"),Kfo=l(),F(Rh.$$.fragment),Zfo=l(),F(Ph.$$.fragment),emo=l(),Bh=a("div"),F(GA.$$.fragment),omo=l(),xne=a("p"),rmo=o("Register a new feature extractor for this class."),Vqe=l(),Ei=a("h2"),Ih=a("a"),$ne=a("span"),F(OA.$$.fragment),tmo=l(),kne=a("span"),amo=o("AutoProcessor"),Xqe=l(),yo=a("div"),F(VA.$$.fragment),nmo=l(),XA=a("p"),smo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aI=a("a"),lmo=o("AutoProcessor.from_pretrained()"),imo=o(" class method."),dmo=l(),zA=a("p"),cmo=o("This class cannot be instantiated directly using "),Sne=a("code"),fmo=o("__init__()"),mmo=o(" (throws an error)."),gmo=l(),Ue=a("div"),F(WA.$$.fragment),hmo=l(),Rne=a("p"),pmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),umo=l(),Ci=a("p"),_mo=o("The processor class to instantiate is selected based on the "),Pne=a("code"),bmo=o("model_type"),vmo=o(` property of the config object (either
passed as an argument or loaded from `),Bne=a("code"),Fmo=o("pretrained_model_name_or_path"),Tmo=o(" if possible):"),Mmo=l(),he=a("ul"),qh=a("li"),Ine=a("strong"),Emo=o("clip"),Cmo=o(" \u2014 "),nI=a("a"),wmo=o("CLIPProcessor"),Amo=o(" (CLIP model)"),ymo=l(),Nh=a("li"),qne=a("strong"),Lmo=o("flava"),xmo=o(" \u2014 "),Nne=a("code"),$mo=o("FLAVAProcessor"),kmo=o(" (Flava model)"),Smo=l(),jh=a("li"),jne=a("strong"),Rmo=o("layoutlmv2"),Pmo=o(" \u2014 "),sI=a("a"),Bmo=o("LayoutLMv2Processor"),Imo=o(" (LayoutLMv2 model)"),qmo=l(),Dh=a("li"),Dne=a("strong"),Nmo=o("layoutlmv3"),jmo=o(" \u2014 "),lI=a("a"),Dmo=o("LayoutLMv3Processor"),Gmo=o(" (LayoutLMv3 model)"),Omo=l(),Gh=a("li"),Gne=a("strong"),Vmo=o("layoutxlm"),Xmo=o(" \u2014 "),iI=a("a"),zmo=o("LayoutXLMProcessor"),Wmo=o(" (LayoutXLM model)"),Qmo=l(),Oh=a("li"),One=a("strong"),Hmo=o("sew"),Umo=o(" \u2014 "),dI=a("a"),Jmo=o("Wav2Vec2Processor"),Ymo=o(" (SEW model)"),Kmo=l(),Vh=a("li"),Vne=a("strong"),Zmo=o("sew-d"),ego=o(" \u2014 "),cI=a("a"),ogo=o("Wav2Vec2Processor"),rgo=o(" (SEW-D model)"),tgo=l(),Xh=a("li"),Xne=a("strong"),ago=o("speech_to_text"),ngo=o(" \u2014 "),fI=a("a"),sgo=o("Speech2TextProcessor"),lgo=o(" (Speech2Text model)"),igo=l(),zh=a("li"),zne=a("strong"),dgo=o("speech_to_text_2"),cgo=o(" \u2014 "),mI=a("a"),fgo=o("Speech2Text2Processor"),mgo=o(" (Speech2Text2 model)"),ggo=l(),Wh=a("li"),Wne=a("strong"),hgo=o("trocr"),pgo=o(" \u2014 "),gI=a("a"),ugo=o("TrOCRProcessor"),_go=o(" (TrOCR model)"),bgo=l(),Qh=a("li"),Qne=a("strong"),vgo=o("unispeech"),Fgo=o(" \u2014 "),hI=a("a"),Tgo=o("Wav2Vec2Processor"),Mgo=o(" (UniSpeech model)"),Ego=l(),Hh=a("li"),Hne=a("strong"),Cgo=o("unispeech-sat"),wgo=o(" \u2014 "),pI=a("a"),Ago=o("Wav2Vec2Processor"),ygo=o(" (UniSpeechSat model)"),Lgo=l(),Uh=a("li"),Une=a("strong"),xgo=o("vilt"),$go=o(" \u2014 "),uI=a("a"),kgo=o("ViltProcessor"),Sgo=o(" (ViLT model)"),Rgo=l(),Jh=a("li"),Jne=a("strong"),Pgo=o("vision-text-dual-encoder"),Bgo=o(" \u2014 "),_I=a("a"),Igo=o("VisionTextDualEncoderProcessor"),qgo=o(" (VisionTextDualEncoder model)"),Ngo=l(),Yh=a("li"),Yne=a("strong"),jgo=o("wav2vec2"),Dgo=o(" \u2014 "),bI=a("a"),Ggo=o("Wav2Vec2Processor"),Ogo=o(" (Wav2Vec2 model)"),Vgo=l(),Kh=a("li"),Kne=a("strong"),Xgo=o("wav2vec2-conformer"),zgo=o(" \u2014 "),vI=a("a"),Wgo=o("Wav2Vec2Processor"),Qgo=o(" (Wav2Vec2-Conformer model)"),Hgo=l(),Zh=a("li"),Zne=a("strong"),Ugo=o("wavlm"),Jgo=o(" \u2014 "),FI=a("a"),Ygo=o("Wav2Vec2Processor"),Kgo=o(" (WavLM model)"),Zgo=l(),F(ep.$$.fragment),eho=l(),F(op.$$.fragment),oho=l(),rp=a("div"),F(QA.$$.fragment),rho=l(),ese=a("p"),tho=o("Register a new processor for this class."),zqe=l(),wi=a("h2"),tp=a("a"),ose=a("span"),F(HA.$$.fragment),aho=l(),rse=a("span"),nho=o("AutoModel"),Wqe=l(),Lo=a("div"),F(UA.$$.fragment),sho=l(),Ai=a("p"),lho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TI=a("a"),iho=o("from_pretrained()"),dho=o(" class method or the "),MI=a("a"),cho=o("from_config()"),fho=o(` class
method.`),mho=l(),JA=a("p"),gho=o("This class cannot be instantiated directly using "),tse=a("code"),hho=o("__init__()"),pho=o(" (throws an error)."),uho=l(),tt=a("div"),F(YA.$$.fragment),_ho=l(),ase=a("p"),bho=o("Instantiates one of the base model classes of the library from a configuration."),vho=l(),yi=a("p"),Fho=o(`Note:
Loading a model from its configuration file does `),nse=a("strong"),Tho=o("not"),Mho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=a("a"),Eho=o("from_pretrained()"),Cho=o(" to load the model weights."),who=l(),F(ap.$$.fragment),Aho=l(),Je=a("div"),F(KA.$$.fragment),yho=l(),sse=a("p"),Lho=o("Instantiate one of the base model classes of the library from a pretrained model."),xho=l(),La=a("p"),$ho=o("The model class to instantiate is selected based on the "),lse=a("code"),kho=o("model_type"),Sho=o(` property of the config object (either
passed as an argument or loaded from `),ise=a("code"),Rho=o("pretrained_model_name_or_path"),Pho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=a("code"),Bho=o("pretrained_model_name_or_path"),Iho=o(":"),qho=l(),x=a("ul"),np=a("li"),cse=a("strong"),Nho=o("albert"),jho=o(" \u2014 "),CI=a("a"),Dho=o("AlbertModel"),Gho=o(" (ALBERT model)"),Oho=l(),sp=a("li"),fse=a("strong"),Vho=o("bart"),Xho=o(" \u2014 "),wI=a("a"),zho=o("BartModel"),Who=o(" (BART model)"),Qho=l(),lp=a("li"),mse=a("strong"),Hho=o("beit"),Uho=o(" \u2014 "),AI=a("a"),Jho=o("BeitModel"),Yho=o(" (BEiT model)"),Kho=l(),ip=a("li"),gse=a("strong"),Zho=o("bert"),epo=o(" \u2014 "),yI=a("a"),opo=o("BertModel"),rpo=o(" (BERT model)"),tpo=l(),dp=a("li"),hse=a("strong"),apo=o("bert-generation"),npo=o(" \u2014 "),LI=a("a"),spo=o("BertGenerationEncoder"),lpo=o(" (Bert Generation model)"),ipo=l(),cp=a("li"),pse=a("strong"),dpo=o("big_bird"),cpo=o(" \u2014 "),xI=a("a"),fpo=o("BigBirdModel"),mpo=o(" (BigBird model)"),gpo=l(),fp=a("li"),use=a("strong"),hpo=o("bigbird_pegasus"),ppo=o(" \u2014 "),$I=a("a"),upo=o("BigBirdPegasusModel"),_po=o(" (BigBirdPegasus model)"),bpo=l(),mp=a("li"),_se=a("strong"),vpo=o("blenderbot"),Fpo=o(" \u2014 "),kI=a("a"),Tpo=o("BlenderbotModel"),Mpo=o(" (Blenderbot model)"),Epo=l(),gp=a("li"),bse=a("strong"),Cpo=o("blenderbot-small"),wpo=o(" \u2014 "),SI=a("a"),Apo=o("BlenderbotSmallModel"),ypo=o(" (BlenderbotSmall model)"),Lpo=l(),hp=a("li"),vse=a("strong"),xpo=o("camembert"),$po=o(" \u2014 "),RI=a("a"),kpo=o("CamembertModel"),Spo=o(" (CamemBERT model)"),Rpo=l(),pp=a("li"),Fse=a("strong"),Ppo=o("canine"),Bpo=o(" \u2014 "),PI=a("a"),Ipo=o("CanineModel"),qpo=o(" (Canine model)"),Npo=l(),up=a("li"),Tse=a("strong"),jpo=o("clip"),Dpo=o(" \u2014 "),BI=a("a"),Gpo=o("CLIPModel"),Opo=o(" (CLIP model)"),Vpo=l(),_p=a("li"),Mse=a("strong"),Xpo=o("convbert"),zpo=o(" \u2014 "),II=a("a"),Wpo=o("ConvBertModel"),Qpo=o(" (ConvBERT model)"),Hpo=l(),bp=a("li"),Ese=a("strong"),Upo=o("convnext"),Jpo=o(" \u2014 "),qI=a("a"),Ypo=o("ConvNextModel"),Kpo=o(" (ConvNext model)"),Zpo=l(),vp=a("li"),Cse=a("strong"),euo=o("ctrl"),ouo=o(" \u2014 "),NI=a("a"),ruo=o("CTRLModel"),tuo=o(" (CTRL model)"),auo=l(),Fp=a("li"),wse=a("strong"),nuo=o("cvt"),suo=o(" \u2014 "),jI=a("a"),luo=o("CvtModel"),iuo=o(" (CvT model)"),duo=l(),Tp=a("li"),Ase=a("strong"),cuo=o("data2vec-audio"),fuo=o(" \u2014 "),DI=a("a"),muo=o("Data2VecAudioModel"),guo=o(" (Data2VecAudio model)"),huo=l(),Mp=a("li"),yse=a("strong"),puo=o("data2vec-text"),uuo=o(" \u2014 "),GI=a("a"),_uo=o("Data2VecTextModel"),buo=o(" (Data2VecText model)"),vuo=l(),Ep=a("li"),Lse=a("strong"),Fuo=o("data2vec-vision"),Tuo=o(" \u2014 "),OI=a("a"),Muo=o("Data2VecVisionModel"),Euo=o(" (Data2VecVision model)"),Cuo=l(),Cp=a("li"),xse=a("strong"),wuo=o("deberta"),Auo=o(" \u2014 "),VI=a("a"),yuo=o("DebertaModel"),Luo=o(" (DeBERTa model)"),xuo=l(),wp=a("li"),$se=a("strong"),$uo=o("deberta-v2"),kuo=o(" \u2014 "),XI=a("a"),Suo=o("DebertaV2Model"),Ruo=o(" (DeBERTa-v2 model)"),Puo=l(),Ap=a("li"),kse=a("strong"),Buo=o("decision_transformer"),Iuo=o(" \u2014 "),zI=a("a"),quo=o("DecisionTransformerModel"),Nuo=o(" (Decision Transformer model)"),juo=l(),yp=a("li"),Sse=a("strong"),Duo=o("deit"),Guo=o(" \u2014 "),WI=a("a"),Ouo=o("DeiTModel"),Vuo=o(" (DeiT model)"),Xuo=l(),Lp=a("li"),Rse=a("strong"),zuo=o("detr"),Wuo=o(" \u2014 "),QI=a("a"),Quo=o("DetrModel"),Huo=o(" (DETR model)"),Uuo=l(),xp=a("li"),Pse=a("strong"),Juo=o("distilbert"),Yuo=o(" \u2014 "),HI=a("a"),Kuo=o("DistilBertModel"),Zuo=o(" (DistilBERT model)"),e_o=l(),$p=a("li"),Bse=a("strong"),o_o=o("dpr"),r_o=o(" \u2014 "),UI=a("a"),t_o=o("DPRQuestionEncoder"),a_o=o(" (DPR model)"),n_o=l(),kp=a("li"),Ise=a("strong"),s_o=o("dpt"),l_o=o(" \u2014 "),JI=a("a"),i_o=o("DPTModel"),d_o=o(" (DPT model)"),c_o=l(),Sp=a("li"),qse=a("strong"),f_o=o("electra"),m_o=o(" \u2014 "),YI=a("a"),g_o=o("ElectraModel"),h_o=o(" (ELECTRA model)"),p_o=l(),Rp=a("li"),Nse=a("strong"),u_o=o("flaubert"),__o=o(" \u2014 "),KI=a("a"),b_o=o("FlaubertModel"),v_o=o(" (FlauBERT model)"),F_o=l(),Pp=a("li"),jse=a("strong"),T_o=o("flava"),M_o=o(" \u2014 "),ZI=a("a"),E_o=o("FlavaModel"),C_o=o(" (Flava model)"),w_o=l(),Bp=a("li"),Dse=a("strong"),A_o=o("fnet"),y_o=o(" \u2014 "),eq=a("a"),L_o=o("FNetModel"),x_o=o(" (FNet model)"),$_o=l(),Ip=a("li"),Gse=a("strong"),k_o=o("fsmt"),S_o=o(" \u2014 "),oq=a("a"),R_o=o("FSMTModel"),P_o=o(" (FairSeq Machine-Translation model)"),B_o=l(),Ps=a("li"),Ose=a("strong"),I_o=o("funnel"),q_o=o(" \u2014 "),rq=a("a"),N_o=o("FunnelModel"),j_o=o(" or "),tq=a("a"),D_o=o("FunnelBaseModel"),G_o=o(" (Funnel Transformer model)"),O_o=l(),qp=a("li"),Vse=a("strong"),V_o=o("glpn"),X_o=o(" \u2014 "),aq=a("a"),z_o=o("GLPNModel"),W_o=o(" (GLPN model)"),Q_o=l(),Np=a("li"),Xse=a("strong"),H_o=o("gpt2"),U_o=o(" \u2014 "),nq=a("a"),J_o=o("GPT2Model"),Y_o=o(" (OpenAI GPT-2 model)"),K_o=l(),jp=a("li"),zse=a("strong"),Z_o=o("gpt_neo"),e0o=o(" \u2014 "),sq=a("a"),o0o=o("GPTNeoModel"),r0o=o(" (GPT Neo model)"),t0o=l(),Dp=a("li"),Wse=a("strong"),a0o=o("gptj"),n0o=o(" \u2014 "),lq=a("a"),s0o=o("GPTJModel"),l0o=o(" (GPT-J model)"),i0o=l(),Gp=a("li"),Qse=a("strong"),d0o=o("hubert"),c0o=o(" \u2014 "),iq=a("a"),f0o=o("HubertModel"),m0o=o(" (Hubert model)"),g0o=l(),Op=a("li"),Hse=a("strong"),h0o=o("ibert"),p0o=o(" \u2014 "),dq=a("a"),u0o=o("IBertModel"),_0o=o(" (I-BERT model)"),b0o=l(),Vp=a("li"),Use=a("strong"),v0o=o("imagegpt"),F0o=o(" \u2014 "),cq=a("a"),T0o=o("ImageGPTModel"),M0o=o(" (ImageGPT model)"),E0o=l(),Xp=a("li"),Jse=a("strong"),C0o=o("layoutlm"),w0o=o(" \u2014 "),fq=a("a"),A0o=o("LayoutLMModel"),y0o=o(" (LayoutLM model)"),L0o=l(),zp=a("li"),Yse=a("strong"),x0o=o("layoutlmv2"),$0o=o(" \u2014 "),mq=a("a"),k0o=o("LayoutLMv2Model"),S0o=o(" (LayoutLMv2 model)"),R0o=l(),Wp=a("li"),Kse=a("strong"),P0o=o("layoutlmv3"),B0o=o(" \u2014 "),gq=a("a"),I0o=o("LayoutLMv3Model"),q0o=o(" (LayoutLMv3 model)"),N0o=l(),Qp=a("li"),Zse=a("strong"),j0o=o("led"),D0o=o(" \u2014 "),hq=a("a"),G0o=o("LEDModel"),O0o=o(" (LED model)"),V0o=l(),Hp=a("li"),ele=a("strong"),X0o=o("longformer"),z0o=o(" \u2014 "),pq=a("a"),W0o=o("LongformerModel"),Q0o=o(" (Longformer model)"),H0o=l(),Up=a("li"),ole=a("strong"),U0o=o("luke"),J0o=o(" \u2014 "),uq=a("a"),Y0o=o("LukeModel"),K0o=o(" (LUKE model)"),Z0o=l(),Jp=a("li"),rle=a("strong"),e1o=o("lxmert"),o1o=o(" \u2014 "),_q=a("a"),r1o=o("LxmertModel"),t1o=o(" (LXMERT model)"),a1o=l(),Yp=a("li"),tle=a("strong"),n1o=o("m2m_100"),s1o=o(" \u2014 "),bq=a("a"),l1o=o("M2M100Model"),i1o=o(" (M2M100 model)"),d1o=l(),Kp=a("li"),ale=a("strong"),c1o=o("marian"),f1o=o(" \u2014 "),vq=a("a"),m1o=o("MarianModel"),g1o=o(" (Marian model)"),h1o=l(),Zp=a("li"),nle=a("strong"),p1o=o("maskformer"),u1o=o(" \u2014 "),Fq=a("a"),_1o=o("MaskFormerModel"),b1o=o(" (MaskFormer model)"),v1o=l(),eu=a("li"),sle=a("strong"),F1o=o("mbart"),T1o=o(" \u2014 "),Tq=a("a"),M1o=o("MBartModel"),E1o=o(" (mBART model)"),C1o=l(),ou=a("li"),lle=a("strong"),w1o=o("megatron-bert"),A1o=o(" \u2014 "),Mq=a("a"),y1o=o("MegatronBertModel"),L1o=o(" (MegatronBert model)"),x1o=l(),ru=a("li"),ile=a("strong"),$1o=o("mobilebert"),k1o=o(" \u2014 "),Eq=a("a"),S1o=o("MobileBertModel"),R1o=o(" (MobileBERT model)"),P1o=l(),tu=a("li"),dle=a("strong"),B1o=o("mpnet"),I1o=o(" \u2014 "),Cq=a("a"),q1o=o("MPNetModel"),N1o=o(" (MPNet model)"),j1o=l(),au=a("li"),cle=a("strong"),D1o=o("mt5"),G1o=o(" \u2014 "),wq=a("a"),O1o=o("MT5Model"),V1o=o(" (mT5 model)"),X1o=l(),nu=a("li"),fle=a("strong"),z1o=o("nystromformer"),W1o=o(" \u2014 "),Aq=a("a"),Q1o=o("NystromformerModel"),H1o=o(" (Nystromformer model)"),U1o=l(),su=a("li"),mle=a("strong"),J1o=o("openai-gpt"),Y1o=o(" \u2014 "),yq=a("a"),K1o=o("OpenAIGPTModel"),Z1o=o(" (OpenAI GPT model)"),ebo=l(),lu=a("li"),gle=a("strong"),obo=o("opt"),rbo=o(" \u2014 "),Lq=a("a"),tbo=o("OPTModel"),abo=o(" (OPT model)"),nbo=l(),iu=a("li"),hle=a("strong"),sbo=o("pegasus"),lbo=o(" \u2014 "),xq=a("a"),ibo=o("PegasusModel"),dbo=o(" (Pegasus model)"),cbo=l(),du=a("li"),ple=a("strong"),fbo=o("perceiver"),mbo=o(" \u2014 "),$q=a("a"),gbo=o("PerceiverModel"),hbo=o(" (Perceiver model)"),pbo=l(),cu=a("li"),ule=a("strong"),ubo=o("plbart"),_bo=o(" \u2014 "),kq=a("a"),bbo=o("PLBartModel"),vbo=o(" (PLBart model)"),Fbo=l(),fu=a("li"),_le=a("strong"),Tbo=o("poolformer"),Mbo=o(" \u2014 "),Sq=a("a"),Ebo=o("PoolFormerModel"),Cbo=o(" (PoolFormer model)"),wbo=l(),mu=a("li"),ble=a("strong"),Abo=o("prophetnet"),ybo=o(" \u2014 "),Rq=a("a"),Lbo=o("ProphetNetModel"),xbo=o(" (ProphetNet model)"),$bo=l(),gu=a("li"),vle=a("strong"),kbo=o("qdqbert"),Sbo=o(" \u2014 "),Pq=a("a"),Rbo=o("QDQBertModel"),Pbo=o(" (QDQBert model)"),Bbo=l(),hu=a("li"),Fle=a("strong"),Ibo=o("reformer"),qbo=o(" \u2014 "),Bq=a("a"),Nbo=o("ReformerModel"),jbo=o(" (Reformer model)"),Dbo=l(),pu=a("li"),Tle=a("strong"),Gbo=o("regnet"),Obo=o(" \u2014 "),Iq=a("a"),Vbo=o("RegNetModel"),Xbo=o(" (RegNet model)"),zbo=l(),uu=a("li"),Mle=a("strong"),Wbo=o("rembert"),Qbo=o(" \u2014 "),qq=a("a"),Hbo=o("RemBertModel"),Ubo=o(" (RemBERT model)"),Jbo=l(),_u=a("li"),Ele=a("strong"),Ybo=o("resnet"),Kbo=o(" \u2014 "),Nq=a("a"),Zbo=o("ResNetModel"),e2o=o(" (ResNet model)"),o2o=l(),bu=a("li"),Cle=a("strong"),r2o=o("retribert"),t2o=o(" \u2014 "),jq=a("a"),a2o=o("RetriBertModel"),n2o=o(" (RetriBERT model)"),s2o=l(),vu=a("li"),wle=a("strong"),l2o=o("roberta"),i2o=o(" \u2014 "),Dq=a("a"),d2o=o("RobertaModel"),c2o=o(" (RoBERTa model)"),f2o=l(),Fu=a("li"),Ale=a("strong"),m2o=o("roformer"),g2o=o(" \u2014 "),Gq=a("a"),h2o=o("RoFormerModel"),p2o=o(" (RoFormer model)"),u2o=l(),Tu=a("li"),yle=a("strong"),_2o=o("segformer"),b2o=o(" \u2014 "),Oq=a("a"),v2o=o("SegformerModel"),F2o=o(" (SegFormer model)"),T2o=l(),Mu=a("li"),Lle=a("strong"),M2o=o("sew"),E2o=o(" \u2014 "),Vq=a("a"),C2o=o("SEWModel"),w2o=o(" (SEW model)"),A2o=l(),Eu=a("li"),xle=a("strong"),y2o=o("sew-d"),L2o=o(" \u2014 "),Xq=a("a"),x2o=o("SEWDModel"),$2o=o(" (SEW-D model)"),k2o=l(),Cu=a("li"),$le=a("strong"),S2o=o("speech_to_text"),R2o=o(" \u2014 "),zq=a("a"),P2o=o("Speech2TextModel"),B2o=o(" (Speech2Text model)"),I2o=l(),wu=a("li"),kle=a("strong"),q2o=o("splinter"),N2o=o(" \u2014 "),Wq=a("a"),j2o=o("SplinterModel"),D2o=o(" (Splinter model)"),G2o=l(),Au=a("li"),Sle=a("strong"),O2o=o("squeezebert"),V2o=o(" \u2014 "),Qq=a("a"),X2o=o("SqueezeBertModel"),z2o=o(" (SqueezeBERT model)"),W2o=l(),yu=a("li"),Rle=a("strong"),Q2o=o("swin"),H2o=o(" \u2014 "),Hq=a("a"),U2o=o("SwinModel"),J2o=o(" (Swin model)"),Y2o=l(),Lu=a("li"),Ple=a("strong"),K2o=o("t5"),Z2o=o(" \u2014 "),Uq=a("a"),evo=o("T5Model"),ovo=o(" (T5 model)"),rvo=l(),xu=a("li"),Ble=a("strong"),tvo=o("tapas"),avo=o(" \u2014 "),Jq=a("a"),nvo=o("TapasModel"),svo=o(" (TAPAS model)"),lvo=l(),$u=a("li"),Ile=a("strong"),ivo=o("trajectory_transformer"),dvo=o(" \u2014 "),Yq=a("a"),cvo=o("TrajectoryTransformerModel"),fvo=o(" (Trajectory Transformer model)"),mvo=l(),ku=a("li"),qle=a("strong"),gvo=o("transfo-xl"),hvo=o(" \u2014 "),Kq=a("a"),pvo=o("TransfoXLModel"),uvo=o(" (Transformer-XL model)"),_vo=l(),Su=a("li"),Nle=a("strong"),bvo=o("unispeech"),vvo=o(" \u2014 "),Zq=a("a"),Fvo=o("UniSpeechModel"),Tvo=o(" (UniSpeech model)"),Mvo=l(),Ru=a("li"),jle=a("strong"),Evo=o("unispeech-sat"),Cvo=o(" \u2014 "),eN=a("a"),wvo=o("UniSpeechSatModel"),Avo=o(" (UniSpeechSat model)"),yvo=l(),Pu=a("li"),Dle=a("strong"),Lvo=o("van"),xvo=o(" \u2014 "),oN=a("a"),$vo=o("VanModel"),kvo=o(" (VAN model)"),Svo=l(),Bu=a("li"),Gle=a("strong"),Rvo=o("vilt"),Pvo=o(" \u2014 "),rN=a("a"),Bvo=o("ViltModel"),Ivo=o(" (ViLT model)"),qvo=l(),Iu=a("li"),Ole=a("strong"),Nvo=o("vision-text-dual-encoder"),jvo=o(" \u2014 "),tN=a("a"),Dvo=o("VisionTextDualEncoderModel"),Gvo=o(" (VisionTextDualEncoder model)"),Ovo=l(),qu=a("li"),Vle=a("strong"),Vvo=o("visual_bert"),Xvo=o(" \u2014 "),aN=a("a"),zvo=o("VisualBertModel"),Wvo=o(" (VisualBert model)"),Qvo=l(),Nu=a("li"),Xle=a("strong"),Hvo=o("vit"),Uvo=o(" \u2014 "),nN=a("a"),Jvo=o("ViTModel"),Yvo=o(" (ViT model)"),Kvo=l(),ju=a("li"),zle=a("strong"),Zvo=o("vit_mae"),eFo=o(" \u2014 "),sN=a("a"),oFo=o("ViTMAEModel"),rFo=o(" (ViTMAE model)"),tFo=l(),Du=a("li"),Wle=a("strong"),aFo=o("wav2vec2"),nFo=o(" \u2014 "),lN=a("a"),sFo=o("Wav2Vec2Model"),lFo=o(" (Wav2Vec2 model)"),iFo=l(),Gu=a("li"),Qle=a("strong"),dFo=o("wav2vec2-conformer"),cFo=o(" \u2014 "),iN=a("a"),fFo=o("Wav2Vec2ConformerModel"),mFo=o(" (Wav2Vec2-Conformer model)"),gFo=l(),Ou=a("li"),Hle=a("strong"),hFo=o("wavlm"),pFo=o(" \u2014 "),dN=a("a"),uFo=o("WavLMModel"),_Fo=o(" (WavLM model)"),bFo=l(),Vu=a("li"),Ule=a("strong"),vFo=o("xglm"),FFo=o(" \u2014 "),cN=a("a"),TFo=o("XGLMModel"),MFo=o(" (XGLM model)"),EFo=l(),Xu=a("li"),Jle=a("strong"),CFo=o("xlm"),wFo=o(" \u2014 "),fN=a("a"),AFo=o("XLMModel"),yFo=o(" (XLM model)"),LFo=l(),zu=a("li"),Yle=a("strong"),xFo=o("xlm-prophetnet"),$Fo=o(" \u2014 "),mN=a("a"),kFo=o("XLMProphetNetModel"),SFo=o(" (XLMProphetNet model)"),RFo=l(),Wu=a("li"),Kle=a("strong"),PFo=o("xlm-roberta"),BFo=o(" \u2014 "),gN=a("a"),IFo=o("XLMRobertaModel"),qFo=o(" (XLM-RoBERTa model)"),NFo=l(),Qu=a("li"),Zle=a("strong"),jFo=o("xlm-roberta-xl"),DFo=o(" \u2014 "),hN=a("a"),GFo=o("XLMRobertaXLModel"),OFo=o(" (XLM-RoBERTa-XL model)"),VFo=l(),Hu=a("li"),eie=a("strong"),XFo=o("xlnet"),zFo=o(" \u2014 "),pN=a("a"),WFo=o("XLNetModel"),QFo=o(" (XLNet model)"),HFo=l(),Uu=a("li"),oie=a("strong"),UFo=o("yolos"),JFo=o(" \u2014 "),uN=a("a"),YFo=o("YolosModel"),KFo=o(" (YOLOS model)"),ZFo=l(),Ju=a("li"),rie=a("strong"),e6o=o("yoso"),o6o=o(" \u2014 "),_N=a("a"),r6o=o("YosoModel"),t6o=o(" (YOSO model)"),a6o=l(),Yu=a("p"),n6o=o("The model is set in evaluation mode by default using "),tie=a("code"),s6o=o("model.eval()"),l6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),i6o=o("model.train()"),d6o=l(),F(Ku.$$.fragment),Qqe=l(),Li=a("h2"),Zu=a("a"),nie=a("span"),F(ZA.$$.fragment),c6o=l(),sie=a("span"),f6o=o("AutoModelForPreTraining"),Hqe=l(),xo=a("div"),F(ey.$$.fragment),m6o=l(),xi=a("p"),g6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bN=a("a"),h6o=o("from_pretrained()"),p6o=o(" class method or the "),vN=a("a"),u6o=o("from_config()"),_6o=o(` class
method.`),b6o=l(),oy=a("p"),v6o=o("This class cannot be instantiated directly using "),lie=a("code"),F6o=o("__init__()"),T6o=o(" (throws an error)."),M6o=l(),at=a("div"),F(ry.$$.fragment),E6o=l(),iie=a("p"),C6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w6o=l(),$i=a("p"),A6o=o(`Note:
Loading a model from its configuration file does `),die=a("strong"),y6o=o("not"),L6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=a("a"),x6o=o("from_pretrained()"),$6o=o(" to load the model weights."),k6o=l(),F(e_.$$.fragment),S6o=l(),Ye=a("div"),F(ty.$$.fragment),R6o=l(),cie=a("p"),P6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),B6o=l(),xa=a("p"),I6o=o("The model class to instantiate is selected based on the "),fie=a("code"),q6o=o("model_type"),N6o=o(` property of the config object (either
passed as an argument or loaded from `),mie=a("code"),j6o=o("pretrained_model_name_or_path"),D6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=a("code"),G6o=o("pretrained_model_name_or_path"),O6o=o(":"),V6o=l(),G=a("ul"),o_=a("li"),hie=a("strong"),X6o=o("albert"),z6o=o(" \u2014 "),TN=a("a"),W6o=o("AlbertForPreTraining"),Q6o=o(" (ALBERT model)"),H6o=l(),r_=a("li"),pie=a("strong"),U6o=o("bart"),J6o=o(" \u2014 "),MN=a("a"),Y6o=o("BartForConditionalGeneration"),K6o=o(" (BART model)"),Z6o=l(),t_=a("li"),uie=a("strong"),eTo=o("bert"),oTo=o(" \u2014 "),EN=a("a"),rTo=o("BertForPreTraining"),tTo=o(" (BERT model)"),aTo=l(),a_=a("li"),_ie=a("strong"),nTo=o("big_bird"),sTo=o(" \u2014 "),CN=a("a"),lTo=o("BigBirdForPreTraining"),iTo=o(" (BigBird model)"),dTo=l(),n_=a("li"),bie=a("strong"),cTo=o("camembert"),fTo=o(" \u2014 "),wN=a("a"),mTo=o("CamembertForMaskedLM"),gTo=o(" (CamemBERT model)"),hTo=l(),s_=a("li"),vie=a("strong"),pTo=o("ctrl"),uTo=o(" \u2014 "),AN=a("a"),_To=o("CTRLLMHeadModel"),bTo=o(" (CTRL model)"),vTo=l(),l_=a("li"),Fie=a("strong"),FTo=o("data2vec-text"),TTo=o(" \u2014 "),yN=a("a"),MTo=o("Data2VecTextForMaskedLM"),ETo=o(" (Data2VecText model)"),CTo=l(),i_=a("li"),Tie=a("strong"),wTo=o("deberta"),ATo=o(" \u2014 "),LN=a("a"),yTo=o("DebertaForMaskedLM"),LTo=o(" (DeBERTa model)"),xTo=l(),d_=a("li"),Mie=a("strong"),$To=o("deberta-v2"),kTo=o(" \u2014 "),xN=a("a"),STo=o("DebertaV2ForMaskedLM"),RTo=o(" (DeBERTa-v2 model)"),PTo=l(),c_=a("li"),Eie=a("strong"),BTo=o("distilbert"),ITo=o(" \u2014 "),$N=a("a"),qTo=o("DistilBertForMaskedLM"),NTo=o(" (DistilBERT model)"),jTo=l(),f_=a("li"),Cie=a("strong"),DTo=o("electra"),GTo=o(" \u2014 "),kN=a("a"),OTo=o("ElectraForPreTraining"),VTo=o(" (ELECTRA model)"),XTo=l(),m_=a("li"),wie=a("strong"),zTo=o("flaubert"),WTo=o(" \u2014 "),SN=a("a"),QTo=o("FlaubertWithLMHeadModel"),HTo=o(" (FlauBERT model)"),UTo=l(),g_=a("li"),Aie=a("strong"),JTo=o("flava"),YTo=o(" \u2014 "),RN=a("a"),KTo=o("FlavaForPreTraining"),ZTo=o(" (Flava model)"),e7o=l(),h_=a("li"),yie=a("strong"),o7o=o("fnet"),r7o=o(" \u2014 "),PN=a("a"),t7o=o("FNetForPreTraining"),a7o=o(" (FNet model)"),n7o=l(),p_=a("li"),Lie=a("strong"),s7o=o("fsmt"),l7o=o(" \u2014 "),BN=a("a"),i7o=o("FSMTForConditionalGeneration"),d7o=o(" (FairSeq Machine-Translation model)"),c7o=l(),u_=a("li"),xie=a("strong"),f7o=o("funnel"),m7o=o(" \u2014 "),IN=a("a"),g7o=o("FunnelForPreTraining"),h7o=o(" (Funnel Transformer model)"),p7o=l(),__=a("li"),$ie=a("strong"),u7o=o("gpt2"),_7o=o(" \u2014 "),qN=a("a"),b7o=o("GPT2LMHeadModel"),v7o=o(" (OpenAI GPT-2 model)"),F7o=l(),b_=a("li"),kie=a("strong"),T7o=o("ibert"),M7o=o(" \u2014 "),NN=a("a"),E7o=o("IBertForMaskedLM"),C7o=o(" (I-BERT model)"),w7o=l(),v_=a("li"),Sie=a("strong"),A7o=o("layoutlm"),y7o=o(" \u2014 "),jN=a("a"),L7o=o("LayoutLMForMaskedLM"),x7o=o(" (LayoutLM model)"),$7o=l(),F_=a("li"),Rie=a("strong"),k7o=o("longformer"),S7o=o(" \u2014 "),DN=a("a"),R7o=o("LongformerForMaskedLM"),P7o=o(" (Longformer model)"),B7o=l(),T_=a("li"),Pie=a("strong"),I7o=o("lxmert"),q7o=o(" \u2014 "),GN=a("a"),N7o=o("LxmertForPreTraining"),j7o=o(" (LXMERT model)"),D7o=l(),M_=a("li"),Bie=a("strong"),G7o=o("megatron-bert"),O7o=o(" \u2014 "),ON=a("a"),V7o=o("MegatronBertForPreTraining"),X7o=o(" (MegatronBert model)"),z7o=l(),E_=a("li"),Iie=a("strong"),W7o=o("mobilebert"),Q7o=o(" \u2014 "),VN=a("a"),H7o=o("MobileBertForPreTraining"),U7o=o(" (MobileBERT model)"),J7o=l(),C_=a("li"),qie=a("strong"),Y7o=o("mpnet"),K7o=o(" \u2014 "),XN=a("a"),Z7o=o("MPNetForMaskedLM"),eMo=o(" (MPNet model)"),oMo=l(),w_=a("li"),Nie=a("strong"),rMo=o("openai-gpt"),tMo=o(" \u2014 "),zN=a("a"),aMo=o("OpenAIGPTLMHeadModel"),nMo=o(" (OpenAI GPT model)"),sMo=l(),A_=a("li"),jie=a("strong"),lMo=o("retribert"),iMo=o(" \u2014 "),WN=a("a"),dMo=o("RetriBertModel"),cMo=o(" (RetriBERT model)"),fMo=l(),y_=a("li"),Die=a("strong"),mMo=o("roberta"),gMo=o(" \u2014 "),QN=a("a"),hMo=o("RobertaForMaskedLM"),pMo=o(" (RoBERTa model)"),uMo=l(),L_=a("li"),Gie=a("strong"),_Mo=o("splinter"),bMo=o(" \u2014 "),HN=a("a"),vMo=o("SplinterForPreTraining"),FMo=o(" (Splinter model)"),TMo=l(),x_=a("li"),Oie=a("strong"),MMo=o("squeezebert"),EMo=o(" \u2014 "),UN=a("a"),CMo=o("SqueezeBertForMaskedLM"),wMo=o(" (SqueezeBERT model)"),AMo=l(),$_=a("li"),Vie=a("strong"),yMo=o("t5"),LMo=o(" \u2014 "),JN=a("a"),xMo=o("T5ForConditionalGeneration"),$Mo=o(" (T5 model)"),kMo=l(),k_=a("li"),Xie=a("strong"),SMo=o("tapas"),RMo=o(" \u2014 "),YN=a("a"),PMo=o("TapasForMaskedLM"),BMo=o(" (TAPAS model)"),IMo=l(),S_=a("li"),zie=a("strong"),qMo=o("transfo-xl"),NMo=o(" \u2014 "),KN=a("a"),jMo=o("TransfoXLLMHeadModel"),DMo=o(" (Transformer-XL model)"),GMo=l(),R_=a("li"),Wie=a("strong"),OMo=o("unispeech"),VMo=o(" \u2014 "),ZN=a("a"),XMo=o("UniSpeechForPreTraining"),zMo=o(" (UniSpeech model)"),WMo=l(),P_=a("li"),Qie=a("strong"),QMo=o("unispeech-sat"),HMo=o(" \u2014 "),ej=a("a"),UMo=o("UniSpeechSatForPreTraining"),JMo=o(" (UniSpeechSat model)"),YMo=l(),B_=a("li"),Hie=a("strong"),KMo=o("visual_bert"),ZMo=o(" \u2014 "),oj=a("a"),e4o=o("VisualBertForPreTraining"),o4o=o(" (VisualBert model)"),r4o=l(),I_=a("li"),Uie=a("strong"),t4o=o("vit_mae"),a4o=o(" \u2014 "),rj=a("a"),n4o=o("ViTMAEForPreTraining"),s4o=o(" (ViTMAE model)"),l4o=l(),q_=a("li"),Jie=a("strong"),i4o=o("wav2vec2"),d4o=o(" \u2014 "),tj=a("a"),c4o=o("Wav2Vec2ForPreTraining"),f4o=o(" (Wav2Vec2 model)"),m4o=l(),N_=a("li"),Yie=a("strong"),g4o=o("wav2vec2-conformer"),h4o=o(" \u2014 "),aj=a("a"),p4o=o("Wav2Vec2ConformerForPreTraining"),u4o=o(" (Wav2Vec2-Conformer model)"),_4o=l(),j_=a("li"),Kie=a("strong"),b4o=o("xlm"),v4o=o(" \u2014 "),nj=a("a"),F4o=o("XLMWithLMHeadModel"),T4o=o(" (XLM model)"),M4o=l(),D_=a("li"),Zie=a("strong"),E4o=o("xlm-roberta"),C4o=o(" \u2014 "),sj=a("a"),w4o=o("XLMRobertaForMaskedLM"),A4o=o(" (XLM-RoBERTa model)"),y4o=l(),G_=a("li"),ede=a("strong"),L4o=o("xlm-roberta-xl"),x4o=o(" \u2014 "),lj=a("a"),$4o=o("XLMRobertaXLForMaskedLM"),k4o=o(" (XLM-RoBERTa-XL model)"),S4o=l(),O_=a("li"),ode=a("strong"),R4o=o("xlnet"),P4o=o(" \u2014 "),ij=a("a"),B4o=o("XLNetLMHeadModel"),I4o=o(" (XLNet model)"),q4o=l(),V_=a("p"),N4o=o("The model is set in evaluation mode by default using "),rde=a("code"),j4o=o("model.eval()"),D4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),G4o=o("model.train()"),O4o=l(),F(X_.$$.fragment),Uqe=l(),ki=a("h2"),z_=a("a"),ade=a("span"),F(ay.$$.fragment),V4o=l(),nde=a("span"),X4o=o("AutoModelForCausalLM"),Jqe=l(),$o=a("div"),F(ny.$$.fragment),z4o=l(),Si=a("p"),W4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dj=a("a"),Q4o=o("from_pretrained()"),H4o=o(" class method or the "),cj=a("a"),U4o=o("from_config()"),J4o=o(` class
method.`),Y4o=l(),sy=a("p"),K4o=o("This class cannot be instantiated directly using "),sde=a("code"),Z4o=o("__init__()"),eEo=o(" (throws an error)."),oEo=l(),nt=a("div"),F(ly.$$.fragment),rEo=l(),lde=a("p"),tEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aEo=l(),Ri=a("p"),nEo=o(`Note:
Loading a model from its configuration file does `),ide=a("strong"),sEo=o("not"),lEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),iEo=o("from_pretrained()"),dEo=o(" to load the model weights."),cEo=l(),F(W_.$$.fragment),fEo=l(),Ke=a("div"),F(iy.$$.fragment),mEo=l(),dde=a("p"),gEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hEo=l(),$a=a("p"),pEo=o("The model class to instantiate is selected based on the "),cde=a("code"),uEo=o("model_type"),_Eo=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),bEo=o("pretrained_model_name_or_path"),vEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=a("code"),FEo=o("pretrained_model_name_or_path"),TEo=o(":"),MEo=l(),z=a("ul"),Q_=a("li"),gde=a("strong"),EEo=o("bart"),CEo=o(" \u2014 "),mj=a("a"),wEo=o("BartForCausalLM"),AEo=o(" (BART model)"),yEo=l(),H_=a("li"),hde=a("strong"),LEo=o("bert"),xEo=o(" \u2014 "),gj=a("a"),$Eo=o("BertLMHeadModel"),kEo=o(" (BERT model)"),SEo=l(),U_=a("li"),pde=a("strong"),REo=o("bert-generation"),PEo=o(" \u2014 "),hj=a("a"),BEo=o("BertGenerationDecoder"),IEo=o(" (Bert Generation model)"),qEo=l(),J_=a("li"),ude=a("strong"),NEo=o("big_bird"),jEo=o(" \u2014 "),pj=a("a"),DEo=o("BigBirdForCausalLM"),GEo=o(" (BigBird model)"),OEo=l(),Y_=a("li"),_de=a("strong"),VEo=o("bigbird_pegasus"),XEo=o(" \u2014 "),uj=a("a"),zEo=o("BigBirdPegasusForCausalLM"),WEo=o(" (BigBirdPegasus model)"),QEo=l(),K_=a("li"),bde=a("strong"),HEo=o("blenderbot"),UEo=o(" \u2014 "),_j=a("a"),JEo=o("BlenderbotForCausalLM"),YEo=o(" (Blenderbot model)"),KEo=l(),Z_=a("li"),vde=a("strong"),ZEo=o("blenderbot-small"),eCo=o(" \u2014 "),bj=a("a"),oCo=o("BlenderbotSmallForCausalLM"),rCo=o(" (BlenderbotSmall model)"),tCo=l(),e0=a("li"),Fde=a("strong"),aCo=o("camembert"),nCo=o(" \u2014 "),vj=a("a"),sCo=o("CamembertForCausalLM"),lCo=o(" (CamemBERT model)"),iCo=l(),o0=a("li"),Tde=a("strong"),dCo=o("ctrl"),cCo=o(" \u2014 "),Fj=a("a"),fCo=o("CTRLLMHeadModel"),mCo=o(" (CTRL model)"),gCo=l(),r0=a("li"),Mde=a("strong"),hCo=o("data2vec-text"),pCo=o(" \u2014 "),Tj=a("a"),uCo=o("Data2VecTextForCausalLM"),_Co=o(" (Data2VecText model)"),bCo=l(),t0=a("li"),Ede=a("strong"),vCo=o("electra"),FCo=o(" \u2014 "),Mj=a("a"),TCo=o("ElectraForCausalLM"),MCo=o(" (ELECTRA model)"),ECo=l(),a0=a("li"),Cde=a("strong"),CCo=o("gpt2"),wCo=o(" \u2014 "),Ej=a("a"),ACo=o("GPT2LMHeadModel"),yCo=o(" (OpenAI GPT-2 model)"),LCo=l(),n0=a("li"),wde=a("strong"),xCo=o("gpt_neo"),$Co=o(" \u2014 "),Cj=a("a"),kCo=o("GPTNeoForCausalLM"),SCo=o(" (GPT Neo model)"),RCo=l(),s0=a("li"),Ade=a("strong"),PCo=o("gptj"),BCo=o(" \u2014 "),wj=a("a"),ICo=o("GPTJForCausalLM"),qCo=o(" (GPT-J model)"),NCo=l(),l0=a("li"),yde=a("strong"),jCo=o("marian"),DCo=o(" \u2014 "),Aj=a("a"),GCo=o("MarianForCausalLM"),OCo=o(" (Marian model)"),VCo=l(),i0=a("li"),Lde=a("strong"),XCo=o("mbart"),zCo=o(" \u2014 "),yj=a("a"),WCo=o("MBartForCausalLM"),QCo=o(" (mBART model)"),HCo=l(),d0=a("li"),xde=a("strong"),UCo=o("megatron-bert"),JCo=o(" \u2014 "),Lj=a("a"),YCo=o("MegatronBertForCausalLM"),KCo=o(" (MegatronBert model)"),ZCo=l(),c0=a("li"),$de=a("strong"),e5o=o("openai-gpt"),o5o=o(" \u2014 "),xj=a("a"),r5o=o("OpenAIGPTLMHeadModel"),t5o=o(" (OpenAI GPT model)"),a5o=l(),f0=a("li"),kde=a("strong"),n5o=o("opt"),s5o=o(" \u2014 "),$j=a("a"),l5o=o("OPTForCausalLM"),i5o=o(" (OPT model)"),d5o=l(),m0=a("li"),Sde=a("strong"),c5o=o("pegasus"),f5o=o(" \u2014 "),kj=a("a"),m5o=o("PegasusForCausalLM"),g5o=o(" (Pegasus model)"),h5o=l(),g0=a("li"),Rde=a("strong"),p5o=o("plbart"),u5o=o(" \u2014 "),Sj=a("a"),_5o=o("PLBartForCausalLM"),b5o=o(" (PLBart model)"),v5o=l(),h0=a("li"),Pde=a("strong"),F5o=o("prophetnet"),T5o=o(" \u2014 "),Rj=a("a"),M5o=o("ProphetNetForCausalLM"),E5o=o(" (ProphetNet model)"),C5o=l(),p0=a("li"),Bde=a("strong"),w5o=o("qdqbert"),A5o=o(" \u2014 "),Pj=a("a"),y5o=o("QDQBertLMHeadModel"),L5o=o(" (QDQBert model)"),x5o=l(),u0=a("li"),Ide=a("strong"),$5o=o("reformer"),k5o=o(" \u2014 "),Bj=a("a"),S5o=o("ReformerModelWithLMHead"),R5o=o(" (Reformer model)"),P5o=l(),_0=a("li"),qde=a("strong"),B5o=o("rembert"),I5o=o(" \u2014 "),Ij=a("a"),q5o=o("RemBertForCausalLM"),N5o=o(" (RemBERT model)"),j5o=l(),b0=a("li"),Nde=a("strong"),D5o=o("roberta"),G5o=o(" \u2014 "),qj=a("a"),O5o=o("RobertaForCausalLM"),V5o=o(" (RoBERTa model)"),X5o=l(),v0=a("li"),jde=a("strong"),z5o=o("roformer"),W5o=o(" \u2014 "),Nj=a("a"),Q5o=o("RoFormerForCausalLM"),H5o=o(" (RoFormer model)"),U5o=l(),F0=a("li"),Dde=a("strong"),J5o=o("speech_to_text_2"),Y5o=o(" \u2014 "),jj=a("a"),K5o=o("Speech2Text2ForCausalLM"),Z5o=o(" (Speech2Text2 model)"),e3o=l(),T0=a("li"),Gde=a("strong"),o3o=o("transfo-xl"),r3o=o(" \u2014 "),Dj=a("a"),t3o=o("TransfoXLLMHeadModel"),a3o=o(" (Transformer-XL model)"),n3o=l(),M0=a("li"),Ode=a("strong"),s3o=o("trocr"),l3o=o(" \u2014 "),Gj=a("a"),i3o=o("TrOCRForCausalLM"),d3o=o(" (TrOCR model)"),c3o=l(),E0=a("li"),Vde=a("strong"),f3o=o("xglm"),m3o=o(" \u2014 "),Oj=a("a"),g3o=o("XGLMForCausalLM"),h3o=o(" (XGLM model)"),p3o=l(),C0=a("li"),Xde=a("strong"),u3o=o("xlm"),_3o=o(" \u2014 "),Vj=a("a"),b3o=o("XLMWithLMHeadModel"),v3o=o(" (XLM model)"),F3o=l(),w0=a("li"),zde=a("strong"),T3o=o("xlm-prophetnet"),M3o=o(" \u2014 "),Xj=a("a"),E3o=o("XLMProphetNetForCausalLM"),C3o=o(" (XLMProphetNet model)"),w3o=l(),A0=a("li"),Wde=a("strong"),A3o=o("xlm-roberta"),y3o=o(" \u2014 "),zj=a("a"),L3o=o("XLMRobertaForCausalLM"),x3o=o(" (XLM-RoBERTa model)"),$3o=l(),y0=a("li"),Qde=a("strong"),k3o=o("xlm-roberta-xl"),S3o=o(" \u2014 "),Wj=a("a"),R3o=o("XLMRobertaXLForCausalLM"),P3o=o(" (XLM-RoBERTa-XL model)"),B3o=l(),L0=a("li"),Hde=a("strong"),I3o=o("xlnet"),q3o=o(" \u2014 "),Qj=a("a"),N3o=o("XLNetLMHeadModel"),j3o=o(" (XLNet model)"),D3o=l(),x0=a("p"),G3o=o("The model is set in evaluation mode by default using "),Ude=a("code"),O3o=o("model.eval()"),V3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),X3o=o("model.train()"),z3o=l(),F($0.$$.fragment),Yqe=l(),Pi=a("h2"),k0=a("a"),Yde=a("span"),F(dy.$$.fragment),W3o=l(),Kde=a("span"),Q3o=o("AutoModelForMaskedLM"),Kqe=l(),ko=a("div"),F(cy.$$.fragment),H3o=l(),Bi=a("p"),U3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hj=a("a"),J3o=o("from_pretrained()"),Y3o=o(" class method or the "),Uj=a("a"),K3o=o("from_config()"),Z3o=o(` class
method.`),ewo=l(),fy=a("p"),owo=o("This class cannot be instantiated directly using "),Zde=a("code"),rwo=o("__init__()"),two=o(" (throws an error)."),awo=l(),st=a("div"),F(my.$$.fragment),nwo=l(),ece=a("p"),swo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lwo=l(),Ii=a("p"),iwo=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),dwo=o("not"),cwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=a("a"),fwo=o("from_pretrained()"),mwo=o(" to load the model weights."),gwo=l(),F(S0.$$.fragment),hwo=l(),Ze=a("div"),F(gy.$$.fragment),pwo=l(),rce=a("p"),uwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_wo=l(),ka=a("p"),bwo=o("The model class to instantiate is selected based on the "),tce=a("code"),vwo=o("model_type"),Fwo=o(` property of the config object (either
passed as an argument or loaded from `),ace=a("code"),Two=o("pretrained_model_name_or_path"),Mwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),Ewo=o("pretrained_model_name_or_path"),Cwo=o(":"),wwo=l(),W=a("ul"),R0=a("li"),sce=a("strong"),Awo=o("albert"),ywo=o(" \u2014 "),Yj=a("a"),Lwo=o("AlbertForMaskedLM"),xwo=o(" (ALBERT model)"),$wo=l(),P0=a("li"),lce=a("strong"),kwo=o("bart"),Swo=o(" \u2014 "),Kj=a("a"),Rwo=o("BartForConditionalGeneration"),Pwo=o(" (BART model)"),Bwo=l(),B0=a("li"),ice=a("strong"),Iwo=o("bert"),qwo=o(" \u2014 "),Zj=a("a"),Nwo=o("BertForMaskedLM"),jwo=o(" (BERT model)"),Dwo=l(),I0=a("li"),dce=a("strong"),Gwo=o("big_bird"),Owo=o(" \u2014 "),eD=a("a"),Vwo=o("BigBirdForMaskedLM"),Xwo=o(" (BigBird model)"),zwo=l(),q0=a("li"),cce=a("strong"),Wwo=o("camembert"),Qwo=o(" \u2014 "),oD=a("a"),Hwo=o("CamembertForMaskedLM"),Uwo=o(" (CamemBERT model)"),Jwo=l(),N0=a("li"),fce=a("strong"),Ywo=o("convbert"),Kwo=o(" \u2014 "),rD=a("a"),Zwo=o("ConvBertForMaskedLM"),eAo=o(" (ConvBERT model)"),oAo=l(),j0=a("li"),mce=a("strong"),rAo=o("data2vec-text"),tAo=o(" \u2014 "),tD=a("a"),aAo=o("Data2VecTextForMaskedLM"),nAo=o(" (Data2VecText model)"),sAo=l(),D0=a("li"),gce=a("strong"),lAo=o("deberta"),iAo=o(" \u2014 "),aD=a("a"),dAo=o("DebertaForMaskedLM"),cAo=o(" (DeBERTa model)"),fAo=l(),G0=a("li"),hce=a("strong"),mAo=o("deberta-v2"),gAo=o(" \u2014 "),nD=a("a"),hAo=o("DebertaV2ForMaskedLM"),pAo=o(" (DeBERTa-v2 model)"),uAo=l(),O0=a("li"),pce=a("strong"),_Ao=o("distilbert"),bAo=o(" \u2014 "),sD=a("a"),vAo=o("DistilBertForMaskedLM"),FAo=o(" (DistilBERT model)"),TAo=l(),V0=a("li"),uce=a("strong"),MAo=o("electra"),EAo=o(" \u2014 "),lD=a("a"),CAo=o("ElectraForMaskedLM"),wAo=o(" (ELECTRA model)"),AAo=l(),X0=a("li"),_ce=a("strong"),yAo=o("flaubert"),LAo=o(" \u2014 "),iD=a("a"),xAo=o("FlaubertWithLMHeadModel"),$Ao=o(" (FlauBERT model)"),kAo=l(),z0=a("li"),bce=a("strong"),SAo=o("fnet"),RAo=o(" \u2014 "),dD=a("a"),PAo=o("FNetForMaskedLM"),BAo=o(" (FNet model)"),IAo=l(),W0=a("li"),vce=a("strong"),qAo=o("funnel"),NAo=o(" \u2014 "),cD=a("a"),jAo=o("FunnelForMaskedLM"),DAo=o(" (Funnel Transformer model)"),GAo=l(),Q0=a("li"),Fce=a("strong"),OAo=o("ibert"),VAo=o(" \u2014 "),fD=a("a"),XAo=o("IBertForMaskedLM"),zAo=o(" (I-BERT model)"),WAo=l(),H0=a("li"),Tce=a("strong"),QAo=o("layoutlm"),HAo=o(" \u2014 "),mD=a("a"),UAo=o("LayoutLMForMaskedLM"),JAo=o(" (LayoutLM model)"),YAo=l(),U0=a("li"),Mce=a("strong"),KAo=o("longformer"),ZAo=o(" \u2014 "),gD=a("a"),eyo=o("LongformerForMaskedLM"),oyo=o(" (Longformer model)"),ryo=l(),J0=a("li"),Ece=a("strong"),tyo=o("mbart"),ayo=o(" \u2014 "),hD=a("a"),nyo=o("MBartForConditionalGeneration"),syo=o(" (mBART model)"),lyo=l(),Y0=a("li"),Cce=a("strong"),iyo=o("megatron-bert"),dyo=o(" \u2014 "),pD=a("a"),cyo=o("MegatronBertForMaskedLM"),fyo=o(" (MegatronBert model)"),myo=l(),K0=a("li"),wce=a("strong"),gyo=o("mobilebert"),hyo=o(" \u2014 "),uD=a("a"),pyo=o("MobileBertForMaskedLM"),uyo=o(" (MobileBERT model)"),_yo=l(),Z0=a("li"),Ace=a("strong"),byo=o("mpnet"),vyo=o(" \u2014 "),_D=a("a"),Fyo=o("MPNetForMaskedLM"),Tyo=o(" (MPNet model)"),Myo=l(),e1=a("li"),yce=a("strong"),Eyo=o("nystromformer"),Cyo=o(" \u2014 "),bD=a("a"),wyo=o("NystromformerForMaskedLM"),Ayo=o(" (Nystromformer model)"),yyo=l(),o1=a("li"),Lce=a("strong"),Lyo=o("perceiver"),xyo=o(" \u2014 "),vD=a("a"),$yo=o("PerceiverForMaskedLM"),kyo=o(" (Perceiver model)"),Syo=l(),r1=a("li"),xce=a("strong"),Ryo=o("qdqbert"),Pyo=o(" \u2014 "),FD=a("a"),Byo=o("QDQBertForMaskedLM"),Iyo=o(" (QDQBert model)"),qyo=l(),t1=a("li"),$ce=a("strong"),Nyo=o("reformer"),jyo=o(" \u2014 "),TD=a("a"),Dyo=o("ReformerForMaskedLM"),Gyo=o(" (Reformer model)"),Oyo=l(),a1=a("li"),kce=a("strong"),Vyo=o("rembert"),Xyo=o(" \u2014 "),MD=a("a"),zyo=o("RemBertForMaskedLM"),Wyo=o(" (RemBERT model)"),Qyo=l(),n1=a("li"),Sce=a("strong"),Hyo=o("roberta"),Uyo=o(" \u2014 "),ED=a("a"),Jyo=o("RobertaForMaskedLM"),Yyo=o(" (RoBERTa model)"),Kyo=l(),s1=a("li"),Rce=a("strong"),Zyo=o("roformer"),eLo=o(" \u2014 "),CD=a("a"),oLo=o("RoFormerForMaskedLM"),rLo=o(" (RoFormer model)"),tLo=l(),l1=a("li"),Pce=a("strong"),aLo=o("squeezebert"),nLo=o(" \u2014 "),wD=a("a"),sLo=o("SqueezeBertForMaskedLM"),lLo=o(" (SqueezeBERT model)"),iLo=l(),i1=a("li"),Bce=a("strong"),dLo=o("tapas"),cLo=o(" \u2014 "),AD=a("a"),fLo=o("TapasForMaskedLM"),mLo=o(" (TAPAS model)"),gLo=l(),d1=a("li"),Ice=a("strong"),hLo=o("wav2vec2"),pLo=o(" \u2014 "),qce=a("code"),uLo=o("Wav2Vec2ForMaskedLM"),_Lo=o(" (Wav2Vec2 model)"),bLo=l(),c1=a("li"),Nce=a("strong"),vLo=o("xlm"),FLo=o(" \u2014 "),yD=a("a"),TLo=o("XLMWithLMHeadModel"),MLo=o(" (XLM model)"),ELo=l(),f1=a("li"),jce=a("strong"),CLo=o("xlm-roberta"),wLo=o(" \u2014 "),LD=a("a"),ALo=o("XLMRobertaForMaskedLM"),yLo=o(" (XLM-RoBERTa model)"),LLo=l(),m1=a("li"),Dce=a("strong"),xLo=o("xlm-roberta-xl"),$Lo=o(" \u2014 "),xD=a("a"),kLo=o("XLMRobertaXLForMaskedLM"),SLo=o(" (XLM-RoBERTa-XL model)"),RLo=l(),g1=a("li"),Gce=a("strong"),PLo=o("yoso"),BLo=o(" \u2014 "),$D=a("a"),ILo=o("YosoForMaskedLM"),qLo=o(" (YOSO model)"),NLo=l(),h1=a("p"),jLo=o("The model is set in evaluation mode by default using "),Oce=a("code"),DLo=o("model.eval()"),GLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=a("code"),OLo=o("model.train()"),VLo=l(),F(p1.$$.fragment),Zqe=l(),qi=a("h2"),u1=a("a"),Xce=a("span"),F(hy.$$.fragment),XLo=l(),zce=a("span"),zLo=o("AutoModelForSeq2SeqLM"),eNe=l(),So=a("div"),F(py.$$.fragment),WLo=l(),Ni=a("p"),QLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kD=a("a"),HLo=o("from_pretrained()"),ULo=o(" class method or the "),SD=a("a"),JLo=o("from_config()"),YLo=o(` class
method.`),KLo=l(),uy=a("p"),ZLo=o("This class cannot be instantiated directly using "),Wce=a("code"),e8o=o("__init__()"),o8o=o(" (throws an error)."),r8o=l(),lt=a("div"),F(_y.$$.fragment),t8o=l(),Qce=a("p"),a8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n8o=l(),ji=a("p"),s8o=o(`Note:
Loading a model from its configuration file does `),Hce=a("strong"),l8o=o("not"),i8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=a("a"),d8o=o("from_pretrained()"),c8o=o(" to load the model weights."),f8o=l(),F(_1.$$.fragment),m8o=l(),eo=a("div"),F(by.$$.fragment),g8o=l(),Uce=a("p"),h8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p8o=l(),Sa=a("p"),u8o=o("The model class to instantiate is selected based on the "),Jce=a("code"),_8o=o("model_type"),b8o=o(` property of the config object (either
passed as an argument or loaded from `),Yce=a("code"),v8o=o("pretrained_model_name_or_path"),F8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=a("code"),T8o=o("pretrained_model_name_or_path"),M8o=o(":"),E8o=l(),ue=a("ul"),b1=a("li"),Zce=a("strong"),C8o=o("bart"),w8o=o(" \u2014 "),PD=a("a"),A8o=o("BartForConditionalGeneration"),y8o=o(" (BART model)"),L8o=l(),v1=a("li"),efe=a("strong"),x8o=o("bigbird_pegasus"),$8o=o(" \u2014 "),BD=a("a"),k8o=o("BigBirdPegasusForConditionalGeneration"),S8o=o(" (BigBirdPegasus model)"),R8o=l(),F1=a("li"),ofe=a("strong"),P8o=o("blenderbot"),B8o=o(" \u2014 "),ID=a("a"),I8o=o("BlenderbotForConditionalGeneration"),q8o=o(" (Blenderbot model)"),N8o=l(),T1=a("li"),rfe=a("strong"),j8o=o("blenderbot-small"),D8o=o(" \u2014 "),qD=a("a"),G8o=o("BlenderbotSmallForConditionalGeneration"),O8o=o(" (BlenderbotSmall model)"),V8o=l(),M1=a("li"),tfe=a("strong"),X8o=o("encoder-decoder"),z8o=o(" \u2014 "),ND=a("a"),W8o=o("EncoderDecoderModel"),Q8o=o(" (Encoder decoder model)"),H8o=l(),E1=a("li"),afe=a("strong"),U8o=o("fsmt"),J8o=o(" \u2014 "),jD=a("a"),Y8o=o("FSMTForConditionalGeneration"),K8o=o(" (FairSeq Machine-Translation model)"),Z8o=l(),C1=a("li"),nfe=a("strong"),e9o=o("led"),o9o=o(" \u2014 "),DD=a("a"),r9o=o("LEDForConditionalGeneration"),t9o=o(" (LED model)"),a9o=l(),w1=a("li"),sfe=a("strong"),n9o=o("m2m_100"),s9o=o(" \u2014 "),GD=a("a"),l9o=o("M2M100ForConditionalGeneration"),i9o=o(" (M2M100 model)"),d9o=l(),A1=a("li"),lfe=a("strong"),c9o=o("marian"),f9o=o(" \u2014 "),OD=a("a"),m9o=o("MarianMTModel"),g9o=o(" (Marian model)"),h9o=l(),y1=a("li"),ife=a("strong"),p9o=o("mbart"),u9o=o(" \u2014 "),VD=a("a"),_9o=o("MBartForConditionalGeneration"),b9o=o(" (mBART model)"),v9o=l(),L1=a("li"),dfe=a("strong"),F9o=o("mt5"),T9o=o(" \u2014 "),XD=a("a"),M9o=o("MT5ForConditionalGeneration"),E9o=o(" (mT5 model)"),C9o=l(),x1=a("li"),cfe=a("strong"),w9o=o("pegasus"),A9o=o(" \u2014 "),zD=a("a"),y9o=o("PegasusForConditionalGeneration"),L9o=o(" (Pegasus model)"),x9o=l(),$1=a("li"),ffe=a("strong"),$9o=o("plbart"),k9o=o(" \u2014 "),WD=a("a"),S9o=o("PLBartForConditionalGeneration"),R9o=o(" (PLBart model)"),P9o=l(),k1=a("li"),mfe=a("strong"),B9o=o("prophetnet"),I9o=o(" \u2014 "),QD=a("a"),q9o=o("ProphetNetForConditionalGeneration"),N9o=o(" (ProphetNet model)"),j9o=l(),S1=a("li"),gfe=a("strong"),D9o=o("t5"),G9o=o(" \u2014 "),HD=a("a"),O9o=o("T5ForConditionalGeneration"),V9o=o(" (T5 model)"),X9o=l(),R1=a("li"),hfe=a("strong"),z9o=o("xlm-prophetnet"),W9o=o(" \u2014 "),UD=a("a"),Q9o=o("XLMProphetNetForConditionalGeneration"),H9o=o(" (XLMProphetNet model)"),U9o=l(),P1=a("p"),J9o=o("The model is set in evaluation mode by default using "),pfe=a("code"),Y9o=o("model.eval()"),K9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),Z9o=o("model.train()"),exo=l(),F(B1.$$.fragment),oNe=l(),Di=a("h2"),I1=a("a"),_fe=a("span"),F(vy.$$.fragment),oxo=l(),bfe=a("span"),rxo=o("AutoModelForSequenceClassification"),rNe=l(),Ro=a("div"),F(Fy.$$.fragment),txo=l(),Gi=a("p"),axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=a("a"),nxo=o("from_pretrained()"),sxo=o(" class method or the "),YD=a("a"),lxo=o("from_config()"),ixo=o(` class
method.`),dxo=l(),Ty=a("p"),cxo=o("This class cannot be instantiated directly using "),vfe=a("code"),fxo=o("__init__()"),mxo=o(" (throws an error)."),gxo=l(),it=a("div"),F(My.$$.fragment),hxo=l(),Ffe=a("p"),pxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uxo=l(),Oi=a("p"),_xo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),bxo=o("not"),vxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),Fxo=o("from_pretrained()"),Txo=o(" to load the model weights."),Mxo=l(),F(q1.$$.fragment),Exo=l(),oo=a("div"),F(Ey.$$.fragment),Cxo=l(),Mfe=a("p"),wxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Axo=l(),Ra=a("p"),yxo=o("The model class to instantiate is selected based on the "),Efe=a("code"),Lxo=o("model_type"),xxo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),$xo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),Sxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Pxo=l(),q=a("ul"),N1=a("li"),Afe=a("strong"),Bxo=o("albert"),Ixo=o(" \u2014 "),ZD=a("a"),qxo=o("AlbertForSequenceClassification"),Nxo=o(" (ALBERT model)"),jxo=l(),j1=a("li"),yfe=a("strong"),Dxo=o("bart"),Gxo=o(" \u2014 "),eG=a("a"),Oxo=o("BartForSequenceClassification"),Vxo=o(" (BART model)"),Xxo=l(),D1=a("li"),Lfe=a("strong"),zxo=o("bert"),Wxo=o(" \u2014 "),oG=a("a"),Qxo=o("BertForSequenceClassification"),Hxo=o(" (BERT model)"),Uxo=l(),G1=a("li"),xfe=a("strong"),Jxo=o("big_bird"),Yxo=o(" \u2014 "),rG=a("a"),Kxo=o("BigBirdForSequenceClassification"),Zxo=o(" (BigBird model)"),e$o=l(),O1=a("li"),$fe=a("strong"),o$o=o("bigbird_pegasus"),r$o=o(" \u2014 "),tG=a("a"),t$o=o("BigBirdPegasusForSequenceClassification"),a$o=o(" (BigBirdPegasus model)"),n$o=l(),V1=a("li"),kfe=a("strong"),s$o=o("camembert"),l$o=o(" \u2014 "),aG=a("a"),i$o=o("CamembertForSequenceClassification"),d$o=o(" (CamemBERT model)"),c$o=l(),X1=a("li"),Sfe=a("strong"),f$o=o("canine"),m$o=o(" \u2014 "),nG=a("a"),g$o=o("CanineForSequenceClassification"),h$o=o(" (Canine model)"),p$o=l(),z1=a("li"),Rfe=a("strong"),u$o=o("convbert"),_$o=o(" \u2014 "),sG=a("a"),b$o=o("ConvBertForSequenceClassification"),v$o=o(" (ConvBERT model)"),F$o=l(),W1=a("li"),Pfe=a("strong"),T$o=o("ctrl"),M$o=o(" \u2014 "),lG=a("a"),E$o=o("CTRLForSequenceClassification"),C$o=o(" (CTRL model)"),w$o=l(),Q1=a("li"),Bfe=a("strong"),A$o=o("data2vec-text"),y$o=o(" \u2014 "),iG=a("a"),L$o=o("Data2VecTextForSequenceClassification"),x$o=o(" (Data2VecText model)"),$$o=l(),H1=a("li"),Ife=a("strong"),k$o=o("deberta"),S$o=o(" \u2014 "),dG=a("a"),R$o=o("DebertaForSequenceClassification"),P$o=o(" (DeBERTa model)"),B$o=l(),U1=a("li"),qfe=a("strong"),I$o=o("deberta-v2"),q$o=o(" \u2014 "),cG=a("a"),N$o=o("DebertaV2ForSequenceClassification"),j$o=o(" (DeBERTa-v2 model)"),D$o=l(),J1=a("li"),Nfe=a("strong"),G$o=o("distilbert"),O$o=o(" \u2014 "),fG=a("a"),V$o=o("DistilBertForSequenceClassification"),X$o=o(" (DistilBERT model)"),z$o=l(),Y1=a("li"),jfe=a("strong"),W$o=o("electra"),Q$o=o(" \u2014 "),mG=a("a"),H$o=o("ElectraForSequenceClassification"),U$o=o(" (ELECTRA model)"),J$o=l(),K1=a("li"),Dfe=a("strong"),Y$o=o("flaubert"),K$o=o(" \u2014 "),gG=a("a"),Z$o=o("FlaubertForSequenceClassification"),eko=o(" (FlauBERT model)"),oko=l(),Z1=a("li"),Gfe=a("strong"),rko=o("fnet"),tko=o(" \u2014 "),hG=a("a"),ako=o("FNetForSequenceClassification"),nko=o(" (FNet model)"),sko=l(),eb=a("li"),Ofe=a("strong"),lko=o("funnel"),iko=o(" \u2014 "),pG=a("a"),dko=o("FunnelForSequenceClassification"),cko=o(" (Funnel Transformer model)"),fko=l(),ob=a("li"),Vfe=a("strong"),mko=o("gpt2"),gko=o(" \u2014 "),uG=a("a"),hko=o("GPT2ForSequenceClassification"),pko=o(" (OpenAI GPT-2 model)"),uko=l(),rb=a("li"),Xfe=a("strong"),_ko=o("gpt_neo"),bko=o(" \u2014 "),_G=a("a"),vko=o("GPTNeoForSequenceClassification"),Fko=o(" (GPT Neo model)"),Tko=l(),tb=a("li"),zfe=a("strong"),Mko=o("gptj"),Eko=o(" \u2014 "),bG=a("a"),Cko=o("GPTJForSequenceClassification"),wko=o(" (GPT-J model)"),Ako=l(),ab=a("li"),Wfe=a("strong"),yko=o("ibert"),Lko=o(" \u2014 "),vG=a("a"),xko=o("IBertForSequenceClassification"),$ko=o(" (I-BERT model)"),kko=l(),nb=a("li"),Qfe=a("strong"),Sko=o("layoutlm"),Rko=o(" \u2014 "),FG=a("a"),Pko=o("LayoutLMForSequenceClassification"),Bko=o(" (LayoutLM model)"),Iko=l(),sb=a("li"),Hfe=a("strong"),qko=o("layoutlmv2"),Nko=o(" \u2014 "),TG=a("a"),jko=o("LayoutLMv2ForSequenceClassification"),Dko=o(" (LayoutLMv2 model)"),Gko=l(),lb=a("li"),Ufe=a("strong"),Oko=o("layoutlmv3"),Vko=o(" \u2014 "),MG=a("a"),Xko=o("LayoutLMv3ForSequenceClassification"),zko=o(" (LayoutLMv3 model)"),Wko=l(),ib=a("li"),Jfe=a("strong"),Qko=o("led"),Hko=o(" \u2014 "),EG=a("a"),Uko=o("LEDForSequenceClassification"),Jko=o(" (LED model)"),Yko=l(),db=a("li"),Yfe=a("strong"),Kko=o("longformer"),Zko=o(" \u2014 "),CG=a("a"),eSo=o("LongformerForSequenceClassification"),oSo=o(" (Longformer model)"),rSo=l(),cb=a("li"),Kfe=a("strong"),tSo=o("mbart"),aSo=o(" \u2014 "),wG=a("a"),nSo=o("MBartForSequenceClassification"),sSo=o(" (mBART model)"),lSo=l(),fb=a("li"),Zfe=a("strong"),iSo=o("megatron-bert"),dSo=o(" \u2014 "),AG=a("a"),cSo=o("MegatronBertForSequenceClassification"),fSo=o(" (MegatronBert model)"),mSo=l(),mb=a("li"),eme=a("strong"),gSo=o("mobilebert"),hSo=o(" \u2014 "),yG=a("a"),pSo=o("MobileBertForSequenceClassification"),uSo=o(" (MobileBERT model)"),_So=l(),gb=a("li"),ome=a("strong"),bSo=o("mpnet"),vSo=o(" \u2014 "),LG=a("a"),FSo=o("MPNetForSequenceClassification"),TSo=o(" (MPNet model)"),MSo=l(),hb=a("li"),rme=a("strong"),ESo=o("nystromformer"),CSo=o(" \u2014 "),xG=a("a"),wSo=o("NystromformerForSequenceClassification"),ASo=o(" (Nystromformer model)"),ySo=l(),pb=a("li"),tme=a("strong"),LSo=o("openai-gpt"),xSo=o(" \u2014 "),$G=a("a"),$So=o("OpenAIGPTForSequenceClassification"),kSo=o(" (OpenAI GPT model)"),SSo=l(),ub=a("li"),ame=a("strong"),RSo=o("perceiver"),PSo=o(" \u2014 "),kG=a("a"),BSo=o("PerceiverForSequenceClassification"),ISo=o(" (Perceiver model)"),qSo=l(),_b=a("li"),nme=a("strong"),NSo=o("plbart"),jSo=o(" \u2014 "),SG=a("a"),DSo=o("PLBartForSequenceClassification"),GSo=o(" (PLBart model)"),OSo=l(),bb=a("li"),sme=a("strong"),VSo=o("qdqbert"),XSo=o(" \u2014 "),RG=a("a"),zSo=o("QDQBertForSequenceClassification"),WSo=o(" (QDQBert model)"),QSo=l(),vb=a("li"),lme=a("strong"),HSo=o("reformer"),USo=o(" \u2014 "),PG=a("a"),JSo=o("ReformerForSequenceClassification"),YSo=o(" (Reformer model)"),KSo=l(),Fb=a("li"),ime=a("strong"),ZSo=o("rembert"),eRo=o(" \u2014 "),BG=a("a"),oRo=o("RemBertForSequenceClassification"),rRo=o(" (RemBERT model)"),tRo=l(),Tb=a("li"),dme=a("strong"),aRo=o("roberta"),nRo=o(" \u2014 "),IG=a("a"),sRo=o("RobertaForSequenceClassification"),lRo=o(" (RoBERTa model)"),iRo=l(),Mb=a("li"),cme=a("strong"),dRo=o("roformer"),cRo=o(" \u2014 "),qG=a("a"),fRo=o("RoFormerForSequenceClassification"),mRo=o(" (RoFormer model)"),gRo=l(),Eb=a("li"),fme=a("strong"),hRo=o("squeezebert"),pRo=o(" \u2014 "),NG=a("a"),uRo=o("SqueezeBertForSequenceClassification"),_Ro=o(" (SqueezeBERT model)"),bRo=l(),Cb=a("li"),mme=a("strong"),vRo=o("tapas"),FRo=o(" \u2014 "),jG=a("a"),TRo=o("TapasForSequenceClassification"),MRo=o(" (TAPAS model)"),ERo=l(),wb=a("li"),gme=a("strong"),CRo=o("transfo-xl"),wRo=o(" \u2014 "),DG=a("a"),ARo=o("TransfoXLForSequenceClassification"),yRo=o(" (Transformer-XL model)"),LRo=l(),Ab=a("li"),hme=a("strong"),xRo=o("xlm"),$Ro=o(" \u2014 "),GG=a("a"),kRo=o("XLMForSequenceClassification"),SRo=o(" (XLM model)"),RRo=l(),yb=a("li"),pme=a("strong"),PRo=o("xlm-roberta"),BRo=o(" \u2014 "),OG=a("a"),IRo=o("XLMRobertaForSequenceClassification"),qRo=o(" (XLM-RoBERTa model)"),NRo=l(),Lb=a("li"),ume=a("strong"),jRo=o("xlm-roberta-xl"),DRo=o(" \u2014 "),VG=a("a"),GRo=o("XLMRobertaXLForSequenceClassification"),ORo=o(" (XLM-RoBERTa-XL model)"),VRo=l(),xb=a("li"),_me=a("strong"),XRo=o("xlnet"),zRo=o(" \u2014 "),XG=a("a"),WRo=o("XLNetForSequenceClassification"),QRo=o(" (XLNet model)"),HRo=l(),$b=a("li"),bme=a("strong"),URo=o("yoso"),JRo=o(" \u2014 "),zG=a("a"),YRo=o("YosoForSequenceClassification"),KRo=o(" (YOSO model)"),ZRo=l(),kb=a("p"),ePo=o("The model is set in evaluation mode by default using "),vme=a("code"),oPo=o("model.eval()"),rPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),tPo=o("model.train()"),aPo=l(),F(Sb.$$.fragment),tNe=l(),Vi=a("h2"),Rb=a("a"),Tme=a("span"),F(Cy.$$.fragment),nPo=l(),Mme=a("span"),sPo=o("AutoModelForMultipleChoice"),aNe=l(),Po=a("div"),F(wy.$$.fragment),lPo=l(),Xi=a("p"),iPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WG=a("a"),dPo=o("from_pretrained()"),cPo=o(" class method or the "),QG=a("a"),fPo=o("from_config()"),mPo=o(` class
method.`),gPo=l(),Ay=a("p"),hPo=o("This class cannot be instantiated directly using "),Eme=a("code"),pPo=o("__init__()"),uPo=o(" (throws an error)."),_Po=l(),dt=a("div"),F(yy.$$.fragment),bPo=l(),Cme=a("p"),vPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FPo=l(),zi=a("p"),TPo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),MPo=o("not"),EPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),CPo=o("from_pretrained()"),wPo=o(" to load the model weights."),APo=l(),F(Pb.$$.fragment),yPo=l(),ro=a("div"),F(Ly.$$.fragment),LPo=l(),Ame=a("p"),xPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Po=l(),Pa=a("p"),kPo=o("The model class to instantiate is selected based on the "),yme=a("code"),SPo=o("model_type"),RPo=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),PPo=o("pretrained_model_name_or_path"),BPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),IPo=o("pretrained_model_name_or_path"),qPo=o(":"),NPo=l(),Y=a("ul"),Bb=a("li"),$me=a("strong"),jPo=o("albert"),DPo=o(" \u2014 "),UG=a("a"),GPo=o("AlbertForMultipleChoice"),OPo=o(" (ALBERT model)"),VPo=l(),Ib=a("li"),kme=a("strong"),XPo=o("bert"),zPo=o(" \u2014 "),JG=a("a"),WPo=o("BertForMultipleChoice"),QPo=o(" (BERT model)"),HPo=l(),qb=a("li"),Sme=a("strong"),UPo=o("big_bird"),JPo=o(" \u2014 "),YG=a("a"),YPo=o("BigBirdForMultipleChoice"),KPo=o(" (BigBird model)"),ZPo=l(),Nb=a("li"),Rme=a("strong"),eBo=o("camembert"),oBo=o(" \u2014 "),KG=a("a"),rBo=o("CamembertForMultipleChoice"),tBo=o(" (CamemBERT model)"),aBo=l(),jb=a("li"),Pme=a("strong"),nBo=o("canine"),sBo=o(" \u2014 "),ZG=a("a"),lBo=o("CanineForMultipleChoice"),iBo=o(" (Canine model)"),dBo=l(),Db=a("li"),Bme=a("strong"),cBo=o("convbert"),fBo=o(" \u2014 "),eO=a("a"),mBo=o("ConvBertForMultipleChoice"),gBo=o(" (ConvBERT model)"),hBo=l(),Gb=a("li"),Ime=a("strong"),pBo=o("data2vec-text"),uBo=o(" \u2014 "),oO=a("a"),_Bo=o("Data2VecTextForMultipleChoice"),bBo=o(" (Data2VecText model)"),vBo=l(),Ob=a("li"),qme=a("strong"),FBo=o("deberta-v2"),TBo=o(" \u2014 "),rO=a("a"),MBo=o("DebertaV2ForMultipleChoice"),EBo=o(" (DeBERTa-v2 model)"),CBo=l(),Vb=a("li"),Nme=a("strong"),wBo=o("distilbert"),ABo=o(" \u2014 "),tO=a("a"),yBo=o("DistilBertForMultipleChoice"),LBo=o(" (DistilBERT model)"),xBo=l(),Xb=a("li"),jme=a("strong"),$Bo=o("electra"),kBo=o(" \u2014 "),aO=a("a"),SBo=o("ElectraForMultipleChoice"),RBo=o(" (ELECTRA model)"),PBo=l(),zb=a("li"),Dme=a("strong"),BBo=o("flaubert"),IBo=o(" \u2014 "),nO=a("a"),qBo=o("FlaubertForMultipleChoice"),NBo=o(" (FlauBERT model)"),jBo=l(),Wb=a("li"),Gme=a("strong"),DBo=o("fnet"),GBo=o(" \u2014 "),sO=a("a"),OBo=o("FNetForMultipleChoice"),VBo=o(" (FNet model)"),XBo=l(),Qb=a("li"),Ome=a("strong"),zBo=o("funnel"),WBo=o(" \u2014 "),lO=a("a"),QBo=o("FunnelForMultipleChoice"),HBo=o(" (Funnel Transformer model)"),UBo=l(),Hb=a("li"),Vme=a("strong"),JBo=o("ibert"),YBo=o(" \u2014 "),iO=a("a"),KBo=o("IBertForMultipleChoice"),ZBo=o(" (I-BERT model)"),eIo=l(),Ub=a("li"),Xme=a("strong"),oIo=o("longformer"),rIo=o(" \u2014 "),dO=a("a"),tIo=o("LongformerForMultipleChoice"),aIo=o(" (Longformer model)"),nIo=l(),Jb=a("li"),zme=a("strong"),sIo=o("megatron-bert"),lIo=o(" \u2014 "),cO=a("a"),iIo=o("MegatronBertForMultipleChoice"),dIo=o(" (MegatronBert model)"),cIo=l(),Yb=a("li"),Wme=a("strong"),fIo=o("mobilebert"),mIo=o(" \u2014 "),fO=a("a"),gIo=o("MobileBertForMultipleChoice"),hIo=o(" (MobileBERT model)"),pIo=l(),Kb=a("li"),Qme=a("strong"),uIo=o("mpnet"),_Io=o(" \u2014 "),mO=a("a"),bIo=o("MPNetForMultipleChoice"),vIo=o(" (MPNet model)"),FIo=l(),Zb=a("li"),Hme=a("strong"),TIo=o("nystromformer"),MIo=o(" \u2014 "),gO=a("a"),EIo=o("NystromformerForMultipleChoice"),CIo=o(" (Nystromformer model)"),wIo=l(),e2=a("li"),Ume=a("strong"),AIo=o("qdqbert"),yIo=o(" \u2014 "),hO=a("a"),LIo=o("QDQBertForMultipleChoice"),xIo=o(" (QDQBert model)"),$Io=l(),o2=a("li"),Jme=a("strong"),kIo=o("rembert"),SIo=o(" \u2014 "),pO=a("a"),RIo=o("RemBertForMultipleChoice"),PIo=o(" (RemBERT model)"),BIo=l(),r2=a("li"),Yme=a("strong"),IIo=o("roberta"),qIo=o(" \u2014 "),uO=a("a"),NIo=o("RobertaForMultipleChoice"),jIo=o(" (RoBERTa model)"),DIo=l(),t2=a("li"),Kme=a("strong"),GIo=o("roformer"),OIo=o(" \u2014 "),_O=a("a"),VIo=o("RoFormerForMultipleChoice"),XIo=o(" (RoFormer model)"),zIo=l(),a2=a("li"),Zme=a("strong"),WIo=o("squeezebert"),QIo=o(" \u2014 "),bO=a("a"),HIo=o("SqueezeBertForMultipleChoice"),UIo=o(" (SqueezeBERT model)"),JIo=l(),n2=a("li"),ege=a("strong"),YIo=o("xlm"),KIo=o(" \u2014 "),vO=a("a"),ZIo=o("XLMForMultipleChoice"),eqo=o(" (XLM model)"),oqo=l(),s2=a("li"),oge=a("strong"),rqo=o("xlm-roberta"),tqo=o(" \u2014 "),FO=a("a"),aqo=o("XLMRobertaForMultipleChoice"),nqo=o(" (XLM-RoBERTa model)"),sqo=l(),l2=a("li"),rge=a("strong"),lqo=o("xlm-roberta-xl"),iqo=o(" \u2014 "),TO=a("a"),dqo=o("XLMRobertaXLForMultipleChoice"),cqo=o(" (XLM-RoBERTa-XL model)"),fqo=l(),i2=a("li"),tge=a("strong"),mqo=o("xlnet"),gqo=o(" \u2014 "),MO=a("a"),hqo=o("XLNetForMultipleChoice"),pqo=o(" (XLNet model)"),uqo=l(),d2=a("li"),age=a("strong"),_qo=o("yoso"),bqo=o(" \u2014 "),EO=a("a"),vqo=o("YosoForMultipleChoice"),Fqo=o(" (YOSO model)"),Tqo=l(),c2=a("p"),Mqo=o("The model is set in evaluation mode by default using "),nge=a("code"),Eqo=o("model.eval()"),Cqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),wqo=o("model.train()"),Aqo=l(),F(f2.$$.fragment),nNe=l(),Wi=a("h2"),m2=a("a"),lge=a("span"),F(xy.$$.fragment),yqo=l(),ige=a("span"),Lqo=o("AutoModelForNextSentencePrediction"),sNe=l(),Bo=a("div"),F($y.$$.fragment),xqo=l(),Qi=a("p"),$qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CO=a("a"),kqo=o("from_pretrained()"),Sqo=o(" class method or the "),wO=a("a"),Rqo=o("from_config()"),Pqo=o(` class
method.`),Bqo=l(),ky=a("p"),Iqo=o("This class cannot be instantiated directly using "),dge=a("code"),qqo=o("__init__()"),Nqo=o(" (throws an error)."),jqo=l(),ct=a("div"),F(Sy.$$.fragment),Dqo=l(),cge=a("p"),Gqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oqo=l(),Hi=a("p"),Vqo=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),Xqo=o("not"),zqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),Wqo=o("from_pretrained()"),Qqo=o(" to load the model weights."),Hqo=l(),F(g2.$$.fragment),Uqo=l(),to=a("div"),F(Ry.$$.fragment),Jqo=l(),mge=a("p"),Yqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kqo=l(),Ba=a("p"),Zqo=o("The model class to instantiate is selected based on the "),gge=a("code"),eNo=o("model_type"),oNo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),rNo=o("pretrained_model_name_or_path"),tNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),aNo=o("pretrained_model_name_or_path"),nNo=o(":"),sNo=l(),Yr=a("ul"),h2=a("li"),uge=a("strong"),lNo=o("bert"),iNo=o(" \u2014 "),yO=a("a"),dNo=o("BertForNextSentencePrediction"),cNo=o(" (BERT model)"),fNo=l(),p2=a("li"),_ge=a("strong"),mNo=o("fnet"),gNo=o(" \u2014 "),LO=a("a"),hNo=o("FNetForNextSentencePrediction"),pNo=o(" (FNet model)"),uNo=l(),u2=a("li"),bge=a("strong"),_No=o("megatron-bert"),bNo=o(" \u2014 "),xO=a("a"),vNo=o("MegatronBertForNextSentencePrediction"),FNo=o(" (MegatronBert model)"),TNo=l(),_2=a("li"),vge=a("strong"),MNo=o("mobilebert"),ENo=o(" \u2014 "),$O=a("a"),CNo=o("MobileBertForNextSentencePrediction"),wNo=o(" (MobileBERT model)"),ANo=l(),b2=a("li"),Fge=a("strong"),yNo=o("qdqbert"),LNo=o(" \u2014 "),kO=a("a"),xNo=o("QDQBertForNextSentencePrediction"),$No=o(" (QDQBert model)"),kNo=l(),v2=a("p"),SNo=o("The model is set in evaluation mode by default using "),Tge=a("code"),RNo=o("model.eval()"),PNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),BNo=o("model.train()"),INo=l(),F(F2.$$.fragment),lNe=l(),Ui=a("h2"),T2=a("a"),Ege=a("span"),F(Py.$$.fragment),qNo=l(),Cge=a("span"),NNo=o("AutoModelForTokenClassification"),iNe=l(),Io=a("div"),F(By.$$.fragment),jNo=l(),Ji=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SO=a("a"),GNo=o("from_pretrained()"),ONo=o(" class method or the "),RO=a("a"),VNo=o("from_config()"),XNo=o(` class
method.`),zNo=l(),Iy=a("p"),WNo=o("This class cannot be instantiated directly using "),wge=a("code"),QNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),ft=a("div"),F(qy.$$.fragment),JNo=l(),Age=a("p"),YNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KNo=l(),Yi=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),ejo=o("not"),ojo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),rjo=o("from_pretrained()"),tjo=o(" to load the model weights."),ajo=l(),F(M2.$$.fragment),njo=l(),ao=a("div"),F(Ny.$$.fragment),sjo=l(),Lge=a("p"),ljo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ijo=l(),Ia=a("p"),djo=o("The model class to instantiate is selected based on the "),xge=a("code"),cjo=o("model_type"),fjo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),mjo=o("pretrained_model_name_or_path"),gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),hjo=o("pretrained_model_name_or_path"),pjo=o(":"),ujo=l(),H=a("ul"),E2=a("li"),Sge=a("strong"),_jo=o("albert"),bjo=o(" \u2014 "),BO=a("a"),vjo=o("AlbertForTokenClassification"),Fjo=o(" (ALBERT model)"),Tjo=l(),C2=a("li"),Rge=a("strong"),Mjo=o("bert"),Ejo=o(" \u2014 "),IO=a("a"),Cjo=o("BertForTokenClassification"),wjo=o(" (BERT model)"),Ajo=l(),w2=a("li"),Pge=a("strong"),yjo=o("big_bird"),Ljo=o(" \u2014 "),qO=a("a"),xjo=o("BigBirdForTokenClassification"),$jo=o(" (BigBird model)"),kjo=l(),A2=a("li"),Bge=a("strong"),Sjo=o("camembert"),Rjo=o(" \u2014 "),NO=a("a"),Pjo=o("CamembertForTokenClassification"),Bjo=o(" (CamemBERT model)"),Ijo=l(),y2=a("li"),Ige=a("strong"),qjo=o("canine"),Njo=o(" \u2014 "),jO=a("a"),jjo=o("CanineForTokenClassification"),Djo=o(" (Canine model)"),Gjo=l(),L2=a("li"),qge=a("strong"),Ojo=o("convbert"),Vjo=o(" \u2014 "),DO=a("a"),Xjo=o("ConvBertForTokenClassification"),zjo=o(" (ConvBERT model)"),Wjo=l(),x2=a("li"),Nge=a("strong"),Qjo=o("data2vec-text"),Hjo=o(" \u2014 "),GO=a("a"),Ujo=o("Data2VecTextForTokenClassification"),Jjo=o(" (Data2VecText model)"),Yjo=l(),$2=a("li"),jge=a("strong"),Kjo=o("deberta"),Zjo=o(" \u2014 "),OO=a("a"),eDo=o("DebertaForTokenClassification"),oDo=o(" (DeBERTa model)"),rDo=l(),k2=a("li"),Dge=a("strong"),tDo=o("deberta-v2"),aDo=o(" \u2014 "),VO=a("a"),nDo=o("DebertaV2ForTokenClassification"),sDo=o(" (DeBERTa-v2 model)"),lDo=l(),S2=a("li"),Gge=a("strong"),iDo=o("distilbert"),dDo=o(" \u2014 "),XO=a("a"),cDo=o("DistilBertForTokenClassification"),fDo=o(" (DistilBERT model)"),mDo=l(),R2=a("li"),Oge=a("strong"),gDo=o("electra"),hDo=o(" \u2014 "),zO=a("a"),pDo=o("ElectraForTokenClassification"),uDo=o(" (ELECTRA model)"),_Do=l(),P2=a("li"),Vge=a("strong"),bDo=o("flaubert"),vDo=o(" \u2014 "),WO=a("a"),FDo=o("FlaubertForTokenClassification"),TDo=o(" (FlauBERT model)"),MDo=l(),B2=a("li"),Xge=a("strong"),EDo=o("fnet"),CDo=o(" \u2014 "),QO=a("a"),wDo=o("FNetForTokenClassification"),ADo=o(" (FNet model)"),yDo=l(),I2=a("li"),zge=a("strong"),LDo=o("funnel"),xDo=o(" \u2014 "),HO=a("a"),$Do=o("FunnelForTokenClassification"),kDo=o(" (Funnel Transformer model)"),SDo=l(),q2=a("li"),Wge=a("strong"),RDo=o("gpt2"),PDo=o(" \u2014 "),UO=a("a"),BDo=o("GPT2ForTokenClassification"),IDo=o(" (OpenAI GPT-2 model)"),qDo=l(),N2=a("li"),Qge=a("strong"),NDo=o("ibert"),jDo=o(" \u2014 "),JO=a("a"),DDo=o("IBertForTokenClassification"),GDo=o(" (I-BERT model)"),ODo=l(),j2=a("li"),Hge=a("strong"),VDo=o("layoutlm"),XDo=o(" \u2014 "),YO=a("a"),zDo=o("LayoutLMForTokenClassification"),WDo=o(" (LayoutLM model)"),QDo=l(),D2=a("li"),Uge=a("strong"),HDo=o("layoutlmv2"),UDo=o(" \u2014 "),KO=a("a"),JDo=o("LayoutLMv2ForTokenClassification"),YDo=o(" (LayoutLMv2 model)"),KDo=l(),G2=a("li"),Jge=a("strong"),ZDo=o("layoutlmv3"),eGo=o(" \u2014 "),ZO=a("a"),oGo=o("LayoutLMv3ForTokenClassification"),rGo=o(" (LayoutLMv3 model)"),tGo=l(),O2=a("li"),Yge=a("strong"),aGo=o("longformer"),nGo=o(" \u2014 "),eV=a("a"),sGo=o("LongformerForTokenClassification"),lGo=o(" (Longformer model)"),iGo=l(),V2=a("li"),Kge=a("strong"),dGo=o("megatron-bert"),cGo=o(" \u2014 "),oV=a("a"),fGo=o("MegatronBertForTokenClassification"),mGo=o(" (MegatronBert model)"),gGo=l(),X2=a("li"),Zge=a("strong"),hGo=o("mobilebert"),pGo=o(" \u2014 "),rV=a("a"),uGo=o("MobileBertForTokenClassification"),_Go=o(" (MobileBERT model)"),bGo=l(),z2=a("li"),ehe=a("strong"),vGo=o("mpnet"),FGo=o(" \u2014 "),tV=a("a"),TGo=o("MPNetForTokenClassification"),MGo=o(" (MPNet model)"),EGo=l(),W2=a("li"),ohe=a("strong"),CGo=o("nystromformer"),wGo=o(" \u2014 "),aV=a("a"),AGo=o("NystromformerForTokenClassification"),yGo=o(" (Nystromformer model)"),LGo=l(),Q2=a("li"),rhe=a("strong"),xGo=o("qdqbert"),$Go=o(" \u2014 "),nV=a("a"),kGo=o("QDQBertForTokenClassification"),SGo=o(" (QDQBert model)"),RGo=l(),H2=a("li"),the=a("strong"),PGo=o("rembert"),BGo=o(" \u2014 "),sV=a("a"),IGo=o("RemBertForTokenClassification"),qGo=o(" (RemBERT model)"),NGo=l(),U2=a("li"),ahe=a("strong"),jGo=o("roberta"),DGo=o(" \u2014 "),lV=a("a"),GGo=o("RobertaForTokenClassification"),OGo=o(" (RoBERTa model)"),VGo=l(),J2=a("li"),nhe=a("strong"),XGo=o("roformer"),zGo=o(" \u2014 "),iV=a("a"),WGo=o("RoFormerForTokenClassification"),QGo=o(" (RoFormer model)"),HGo=l(),Y2=a("li"),she=a("strong"),UGo=o("squeezebert"),JGo=o(" \u2014 "),dV=a("a"),YGo=o("SqueezeBertForTokenClassification"),KGo=o(" (SqueezeBERT model)"),ZGo=l(),K2=a("li"),lhe=a("strong"),eOo=o("xlm"),oOo=o(" \u2014 "),cV=a("a"),rOo=o("XLMForTokenClassification"),tOo=o(" (XLM model)"),aOo=l(),Z2=a("li"),ihe=a("strong"),nOo=o("xlm-roberta"),sOo=o(" \u2014 "),fV=a("a"),lOo=o("XLMRobertaForTokenClassification"),iOo=o(" (XLM-RoBERTa model)"),dOo=l(),ev=a("li"),dhe=a("strong"),cOo=o("xlm-roberta-xl"),fOo=o(" \u2014 "),mV=a("a"),mOo=o("XLMRobertaXLForTokenClassification"),gOo=o(" (XLM-RoBERTa-XL model)"),hOo=l(),ov=a("li"),che=a("strong"),pOo=o("xlnet"),uOo=o(" \u2014 "),gV=a("a"),_Oo=o("XLNetForTokenClassification"),bOo=o(" (XLNet model)"),vOo=l(),rv=a("li"),fhe=a("strong"),FOo=o("yoso"),TOo=o(" \u2014 "),hV=a("a"),MOo=o("YosoForTokenClassification"),EOo=o(" (YOSO model)"),COo=l(),tv=a("p"),wOo=o("The model is set in evaluation mode by default using "),mhe=a("code"),AOo=o("model.eval()"),yOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),LOo=o("model.train()"),xOo=l(),F(av.$$.fragment),dNe=l(),Ki=a("h2"),nv=a("a"),hhe=a("span"),F(jy.$$.fragment),$Oo=l(),phe=a("span"),kOo=o("AutoModelForQuestionAnswering"),cNe=l(),qo=a("div"),F(Dy.$$.fragment),SOo=l(),Zi=a("p"),ROo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pV=a("a"),POo=o("from_pretrained()"),BOo=o(" class method or the "),uV=a("a"),IOo=o("from_config()"),qOo=o(` class
method.`),NOo=l(),Gy=a("p"),jOo=o("This class cannot be instantiated directly using "),uhe=a("code"),DOo=o("__init__()"),GOo=o(" (throws an error)."),OOo=l(),mt=a("div"),F(Oy.$$.fragment),VOo=l(),_he=a("p"),XOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zOo=l(),ed=a("p"),WOo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),QOo=o("not"),HOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),UOo=o("from_pretrained()"),JOo=o(" to load the model weights."),YOo=l(),F(sv.$$.fragment),KOo=l(),no=a("div"),F(Vy.$$.fragment),ZOo=l(),vhe=a("p"),eVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oVo=l(),qa=a("p"),rVo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),tVo=o("model_type"),aVo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),nVo=o("pretrained_model_name_or_path"),sVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),lVo=o("pretrained_model_name_or_path"),iVo=o(":"),dVo=l(),V=a("ul"),lv=a("li"),Ehe=a("strong"),cVo=o("albert"),fVo=o(" \u2014 "),bV=a("a"),mVo=o("AlbertForQuestionAnswering"),gVo=o(" (ALBERT model)"),hVo=l(),iv=a("li"),Che=a("strong"),pVo=o("bart"),uVo=o(" \u2014 "),vV=a("a"),_Vo=o("BartForQuestionAnswering"),bVo=o(" (BART model)"),vVo=l(),dv=a("li"),whe=a("strong"),FVo=o("bert"),TVo=o(" \u2014 "),FV=a("a"),MVo=o("BertForQuestionAnswering"),EVo=o(" (BERT model)"),CVo=l(),cv=a("li"),Ahe=a("strong"),wVo=o("big_bird"),AVo=o(" \u2014 "),TV=a("a"),yVo=o("BigBirdForQuestionAnswering"),LVo=o(" (BigBird model)"),xVo=l(),fv=a("li"),yhe=a("strong"),$Vo=o("bigbird_pegasus"),kVo=o(" \u2014 "),MV=a("a"),SVo=o("BigBirdPegasusForQuestionAnswering"),RVo=o(" (BigBirdPegasus model)"),PVo=l(),mv=a("li"),Lhe=a("strong"),BVo=o("camembert"),IVo=o(" \u2014 "),EV=a("a"),qVo=o("CamembertForQuestionAnswering"),NVo=o(" (CamemBERT model)"),jVo=l(),gv=a("li"),xhe=a("strong"),DVo=o("canine"),GVo=o(" \u2014 "),CV=a("a"),OVo=o("CanineForQuestionAnswering"),VVo=o(" (Canine model)"),XVo=l(),hv=a("li"),$he=a("strong"),zVo=o("convbert"),WVo=o(" \u2014 "),wV=a("a"),QVo=o("ConvBertForQuestionAnswering"),HVo=o(" (ConvBERT model)"),UVo=l(),pv=a("li"),khe=a("strong"),JVo=o("data2vec-text"),YVo=o(" \u2014 "),AV=a("a"),KVo=o("Data2VecTextForQuestionAnswering"),ZVo=o(" (Data2VecText model)"),eXo=l(),uv=a("li"),She=a("strong"),oXo=o("deberta"),rXo=o(" \u2014 "),yV=a("a"),tXo=o("DebertaForQuestionAnswering"),aXo=o(" (DeBERTa model)"),nXo=l(),_v=a("li"),Rhe=a("strong"),sXo=o("deberta-v2"),lXo=o(" \u2014 "),LV=a("a"),iXo=o("DebertaV2ForQuestionAnswering"),dXo=o(" (DeBERTa-v2 model)"),cXo=l(),bv=a("li"),Phe=a("strong"),fXo=o("distilbert"),mXo=o(" \u2014 "),xV=a("a"),gXo=o("DistilBertForQuestionAnswering"),hXo=o(" (DistilBERT model)"),pXo=l(),vv=a("li"),Bhe=a("strong"),uXo=o("electra"),_Xo=o(" \u2014 "),$V=a("a"),bXo=o("ElectraForQuestionAnswering"),vXo=o(" (ELECTRA model)"),FXo=l(),Fv=a("li"),Ihe=a("strong"),TXo=o("flaubert"),MXo=o(" \u2014 "),kV=a("a"),EXo=o("FlaubertForQuestionAnsweringSimple"),CXo=o(" (FlauBERT model)"),wXo=l(),Tv=a("li"),qhe=a("strong"),AXo=o("fnet"),yXo=o(" \u2014 "),SV=a("a"),LXo=o("FNetForQuestionAnswering"),xXo=o(" (FNet model)"),$Xo=l(),Mv=a("li"),Nhe=a("strong"),kXo=o("funnel"),SXo=o(" \u2014 "),RV=a("a"),RXo=o("FunnelForQuestionAnswering"),PXo=o(" (Funnel Transformer model)"),BXo=l(),Ev=a("li"),jhe=a("strong"),IXo=o("gptj"),qXo=o(" \u2014 "),PV=a("a"),NXo=o("GPTJForQuestionAnswering"),jXo=o(" (GPT-J model)"),DXo=l(),Cv=a("li"),Dhe=a("strong"),GXo=o("ibert"),OXo=o(" \u2014 "),BV=a("a"),VXo=o("IBertForQuestionAnswering"),XXo=o(" (I-BERT model)"),zXo=l(),wv=a("li"),Ghe=a("strong"),WXo=o("layoutlmv2"),QXo=o(" \u2014 "),IV=a("a"),HXo=o("LayoutLMv2ForQuestionAnswering"),UXo=o(" (LayoutLMv2 model)"),JXo=l(),Av=a("li"),Ohe=a("strong"),YXo=o("layoutlmv3"),KXo=o(" \u2014 "),qV=a("a"),ZXo=o("LayoutLMv3ForQuestionAnswering"),ezo=o(" (LayoutLMv3 model)"),ozo=l(),yv=a("li"),Vhe=a("strong"),rzo=o("led"),tzo=o(" \u2014 "),NV=a("a"),azo=o("LEDForQuestionAnswering"),nzo=o(" (LED model)"),szo=l(),Lv=a("li"),Xhe=a("strong"),lzo=o("longformer"),izo=o(" \u2014 "),jV=a("a"),dzo=o("LongformerForQuestionAnswering"),czo=o(" (Longformer model)"),fzo=l(),xv=a("li"),zhe=a("strong"),mzo=o("lxmert"),gzo=o(" \u2014 "),DV=a("a"),hzo=o("LxmertForQuestionAnswering"),pzo=o(" (LXMERT model)"),uzo=l(),$v=a("li"),Whe=a("strong"),_zo=o("mbart"),bzo=o(" \u2014 "),GV=a("a"),vzo=o("MBartForQuestionAnswering"),Fzo=o(" (mBART model)"),Tzo=l(),kv=a("li"),Qhe=a("strong"),Mzo=o("megatron-bert"),Ezo=o(" \u2014 "),OV=a("a"),Czo=o("MegatronBertForQuestionAnswering"),wzo=o(" (MegatronBert model)"),Azo=l(),Sv=a("li"),Hhe=a("strong"),yzo=o("mobilebert"),Lzo=o(" \u2014 "),VV=a("a"),xzo=o("MobileBertForQuestionAnswering"),$zo=o(" (MobileBERT model)"),kzo=l(),Rv=a("li"),Uhe=a("strong"),Szo=o("mpnet"),Rzo=o(" \u2014 "),XV=a("a"),Pzo=o("MPNetForQuestionAnswering"),Bzo=o(" (MPNet model)"),Izo=l(),Pv=a("li"),Jhe=a("strong"),qzo=o("nystromformer"),Nzo=o(" \u2014 "),zV=a("a"),jzo=o("NystromformerForQuestionAnswering"),Dzo=o(" (Nystromformer model)"),Gzo=l(),Bv=a("li"),Yhe=a("strong"),Ozo=o("qdqbert"),Vzo=o(" \u2014 "),WV=a("a"),Xzo=o("QDQBertForQuestionAnswering"),zzo=o(" (QDQBert model)"),Wzo=l(),Iv=a("li"),Khe=a("strong"),Qzo=o("reformer"),Hzo=o(" \u2014 "),QV=a("a"),Uzo=o("ReformerForQuestionAnswering"),Jzo=o(" (Reformer model)"),Yzo=l(),qv=a("li"),Zhe=a("strong"),Kzo=o("rembert"),Zzo=o(" \u2014 "),HV=a("a"),eWo=o("RemBertForQuestionAnswering"),oWo=o(" (RemBERT model)"),rWo=l(),Nv=a("li"),epe=a("strong"),tWo=o("roberta"),aWo=o(" \u2014 "),UV=a("a"),nWo=o("RobertaForQuestionAnswering"),sWo=o(" (RoBERTa model)"),lWo=l(),jv=a("li"),ope=a("strong"),iWo=o("roformer"),dWo=o(" \u2014 "),JV=a("a"),cWo=o("RoFormerForQuestionAnswering"),fWo=o(" (RoFormer model)"),mWo=l(),Dv=a("li"),rpe=a("strong"),gWo=o("splinter"),hWo=o(" \u2014 "),YV=a("a"),pWo=o("SplinterForQuestionAnswering"),uWo=o(" (Splinter model)"),_Wo=l(),Gv=a("li"),tpe=a("strong"),bWo=o("squeezebert"),vWo=o(" \u2014 "),KV=a("a"),FWo=o("SqueezeBertForQuestionAnswering"),TWo=o(" (SqueezeBERT model)"),MWo=l(),Ov=a("li"),ape=a("strong"),EWo=o("xlm"),CWo=o(" \u2014 "),ZV=a("a"),wWo=o("XLMForQuestionAnsweringSimple"),AWo=o(" (XLM model)"),yWo=l(),Vv=a("li"),npe=a("strong"),LWo=o("xlm-roberta"),xWo=o(" \u2014 "),eX=a("a"),$Wo=o("XLMRobertaForQuestionAnswering"),kWo=o(" (XLM-RoBERTa model)"),SWo=l(),Xv=a("li"),spe=a("strong"),RWo=o("xlm-roberta-xl"),PWo=o(" \u2014 "),oX=a("a"),BWo=o("XLMRobertaXLForQuestionAnswering"),IWo=o(" (XLM-RoBERTa-XL model)"),qWo=l(),zv=a("li"),lpe=a("strong"),NWo=o("xlnet"),jWo=o(" \u2014 "),rX=a("a"),DWo=o("XLNetForQuestionAnsweringSimple"),GWo=o(" (XLNet model)"),OWo=l(),Wv=a("li"),ipe=a("strong"),VWo=o("yoso"),XWo=o(" \u2014 "),tX=a("a"),zWo=o("YosoForQuestionAnswering"),WWo=o(" (YOSO model)"),QWo=l(),Qv=a("p"),HWo=o("The model is set in evaluation mode by default using "),dpe=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),YWo=o("model.train()"),KWo=l(),F(Hv.$$.fragment),fNe=l(),od=a("h2"),Uv=a("a"),fpe=a("span"),F(Xy.$$.fragment),ZWo=l(),mpe=a("span"),eQo=o("AutoModelForTableQuestionAnswering"),mNe=l(),No=a("div"),F(zy.$$.fragment),oQo=l(),rd=a("p"),rQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aX=a("a"),tQo=o("from_pretrained()"),aQo=o(" class method or the "),nX=a("a"),nQo=o("from_config()"),sQo=o(` class
method.`),lQo=l(),Wy=a("p"),iQo=o("This class cannot be instantiated directly using "),gpe=a("code"),dQo=o("__init__()"),cQo=o(" (throws an error)."),fQo=l(),gt=a("div"),F(Qy.$$.fragment),mQo=l(),hpe=a("p"),gQo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hQo=l(),td=a("p"),pQo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),uQo=o("not"),_Qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),bQo=o("from_pretrained()"),vQo=o(" to load the model weights."),FQo=l(),F(Jv.$$.fragment),TQo=l(),so=a("div"),F(Hy.$$.fragment),MQo=l(),upe=a("p"),EQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CQo=l(),Na=a("p"),wQo=o("The model class to instantiate is selected based on the "),_pe=a("code"),AQo=o("model_type"),yQo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),LQo=o("pretrained_model_name_or_path"),xQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),$Qo=o("pretrained_model_name_or_path"),kQo=o(":"),SQo=l(),Fpe=a("ul"),Yv=a("li"),Tpe=a("strong"),RQo=o("tapas"),PQo=o(" \u2014 "),lX=a("a"),BQo=o("TapasForQuestionAnswering"),IQo=o(" (TAPAS model)"),qQo=l(),Kv=a("p"),NQo=o("The model is set in evaluation mode by default using "),Mpe=a("code"),jQo=o("model.eval()"),DQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=a("code"),GQo=o("model.train()"),OQo=l(),F(Zv.$$.fragment),gNe=l(),ad=a("h2"),eF=a("a"),Cpe=a("span"),F(Uy.$$.fragment),VQo=l(),wpe=a("span"),XQo=o("AutoModelForImageClassification"),hNe=l(),jo=a("div"),F(Jy.$$.fragment),zQo=l(),nd=a("p"),WQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=a("a"),QQo=o("from_pretrained()"),HQo=o(" class method or the "),dX=a("a"),UQo=o("from_config()"),JQo=o(` class
method.`),YQo=l(),Yy=a("p"),KQo=o("This class cannot be instantiated directly using "),Ape=a("code"),ZQo=o("__init__()"),eHo=o(" (throws an error)."),oHo=l(),ht=a("div"),F(Ky.$$.fragment),rHo=l(),ype=a("p"),tHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aHo=l(),sd=a("p"),nHo=o(`Note:
Loading a model from its configuration file does `),Lpe=a("strong"),sHo=o("not"),lHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),iHo=o("from_pretrained()"),dHo=o(" to load the model weights."),cHo=l(),F(oF.$$.fragment),fHo=l(),lo=a("div"),F(Zy.$$.fragment),mHo=l(),xpe=a("p"),gHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hHo=l(),ja=a("p"),pHo=o("The model class to instantiate is selected based on the "),$pe=a("code"),uHo=o("model_type"),_Ho=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),bHo=o("pretrained_model_name_or_path"),vHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=a("code"),FHo=o("pretrained_model_name_or_path"),THo=o(":"),MHo=l(),Fe=a("ul"),rF=a("li"),Rpe=a("strong"),EHo=o("beit"),CHo=o(" \u2014 "),fX=a("a"),wHo=o("BeitForImageClassification"),AHo=o(" (BEiT model)"),yHo=l(),tF=a("li"),Ppe=a("strong"),LHo=o("convnext"),xHo=o(" \u2014 "),mX=a("a"),$Ho=o("ConvNextForImageClassification"),kHo=o(" (ConvNext model)"),SHo=l(),aF=a("li"),Bpe=a("strong"),RHo=o("cvt"),PHo=o(" \u2014 "),gX=a("a"),BHo=o("CvtForImageClassification"),IHo=o(" (CvT model)"),qHo=l(),nF=a("li"),Ipe=a("strong"),NHo=o("data2vec-vision"),jHo=o(" \u2014 "),hX=a("a"),DHo=o("Data2VecVisionForImageClassification"),GHo=o(" (Data2VecVision model)"),OHo=l(),Bs=a("li"),qpe=a("strong"),VHo=o("deit"),XHo=o(" \u2014 "),pX=a("a"),zHo=o("DeiTForImageClassification"),WHo=o(" or "),uX=a("a"),QHo=o("DeiTForImageClassificationWithTeacher"),HHo=o(" (DeiT model)"),UHo=l(),sF=a("li"),Npe=a("strong"),JHo=o("imagegpt"),YHo=o(" \u2014 "),_X=a("a"),KHo=o("ImageGPTForImageClassification"),ZHo=o(" (ImageGPT model)"),eUo=l(),pt=a("li"),jpe=a("strong"),oUo=o("perceiver"),rUo=o(" \u2014 "),bX=a("a"),tUo=o("PerceiverForImageClassificationLearned"),aUo=o(" or "),vX=a("a"),nUo=o("PerceiverForImageClassificationFourier"),sUo=o(" or "),FX=a("a"),lUo=o("PerceiverForImageClassificationConvProcessing"),iUo=o(" (Perceiver model)"),dUo=l(),lF=a("li"),Dpe=a("strong"),cUo=o("poolformer"),fUo=o(" \u2014 "),TX=a("a"),mUo=o("PoolFormerForImageClassification"),gUo=o(" (PoolFormer model)"),hUo=l(),iF=a("li"),Gpe=a("strong"),pUo=o("regnet"),uUo=o(" \u2014 "),MX=a("a"),_Uo=o("RegNetForImageClassification"),bUo=o(" (RegNet model)"),vUo=l(),dF=a("li"),Ope=a("strong"),FUo=o("resnet"),TUo=o(" \u2014 "),EX=a("a"),MUo=o("ResNetForImageClassification"),EUo=o(" (ResNet model)"),CUo=l(),cF=a("li"),Vpe=a("strong"),wUo=o("segformer"),AUo=o(" \u2014 "),CX=a("a"),yUo=o("SegformerForImageClassification"),LUo=o(" (SegFormer model)"),xUo=l(),fF=a("li"),Xpe=a("strong"),$Uo=o("swin"),kUo=o(" \u2014 "),wX=a("a"),SUo=o("SwinForImageClassification"),RUo=o(" (Swin model)"),PUo=l(),mF=a("li"),zpe=a("strong"),BUo=o("van"),IUo=o(" \u2014 "),AX=a("a"),qUo=o("VanForImageClassification"),NUo=o(" (VAN model)"),jUo=l(),gF=a("li"),Wpe=a("strong"),DUo=o("vit"),GUo=o(" \u2014 "),yX=a("a"),OUo=o("ViTForImageClassification"),VUo=o(" (ViT model)"),XUo=l(),hF=a("p"),zUo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),WUo=o("model.eval()"),QUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),HUo=o("model.train()"),UUo=l(),F(pF.$$.fragment),pNe=l(),ld=a("h2"),uF=a("a"),Upe=a("span"),F(eL.$$.fragment),JUo=l(),Jpe=a("span"),YUo=o("AutoModelForVision2Seq"),uNe=l(),Do=a("div"),F(oL.$$.fragment),KUo=l(),id=a("p"),ZUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LX=a("a"),eJo=o("from_pretrained()"),oJo=o(" class method or the "),xX=a("a"),rJo=o("from_config()"),tJo=o(` class
method.`),aJo=l(),rL=a("p"),nJo=o("This class cannot be instantiated directly using "),Ype=a("code"),sJo=o("__init__()"),lJo=o(" (throws an error)."),iJo=l(),ut=a("div"),F(tL.$$.fragment),dJo=l(),Kpe=a("p"),cJo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fJo=l(),dd=a("p"),mJo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),gJo=o("not"),hJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),pJo=o("from_pretrained()"),uJo=o(" to load the model weights."),_Jo=l(),F(_F.$$.fragment),bJo=l(),io=a("div"),F(aL.$$.fragment),vJo=l(),eue=a("p"),FJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TJo=l(),Da=a("p"),MJo=o("The model class to instantiate is selected based on the "),oue=a("code"),EJo=o("model_type"),CJo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),wJo=o("pretrained_model_name_or_path"),AJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),yJo=o("pretrained_model_name_or_path"),LJo=o(":"),xJo=l(),aue=a("ul"),bF=a("li"),nue=a("strong"),$Jo=o("vision-encoder-decoder"),kJo=o(" \u2014 "),kX=a("a"),SJo=o("VisionEncoderDecoderModel"),RJo=o(" (Vision Encoder decoder model)"),PJo=l(),vF=a("p"),BJo=o("The model is set in evaluation mode by default using "),sue=a("code"),IJo=o("model.eval()"),qJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),NJo=o("model.train()"),jJo=l(),F(FF.$$.fragment),_Ne=l(),cd=a("h2"),TF=a("a"),iue=a("span"),F(nL.$$.fragment),DJo=l(),due=a("span"),GJo=o("AutoModelForAudioClassification"),bNe=l(),Go=a("div"),F(sL.$$.fragment),OJo=l(),fd=a("p"),VJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SX=a("a"),XJo=o("from_pretrained()"),zJo=o(" class method or the "),RX=a("a"),WJo=o("from_config()"),QJo=o(` class
method.`),HJo=l(),lL=a("p"),UJo=o("This class cannot be instantiated directly using "),cue=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),_t=a("div"),F(iL.$$.fragment),ZJo=l(),fue=a("p"),eYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oYo=l(),md=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),nYo=o("from_pretrained()"),sYo=o(" to load the model weights."),lYo=l(),F(MF.$$.fragment),iYo=l(),co=a("div"),F(dL.$$.fragment),dYo=l(),gue=a("p"),cYo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fYo=l(),Ga=a("p"),mYo=o("The model class to instantiate is selected based on the "),hue=a("code"),gYo=o("model_type"),hYo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),pYo=o("pretrained_model_name_or_path"),uYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),_Yo=o("pretrained_model_name_or_path"),bYo=o(":"),vYo=l(),ke=a("ul"),EF=a("li"),_ue=a("strong"),FYo=o("data2vec-audio"),TYo=o(" \u2014 "),BX=a("a"),MYo=o("Data2VecAudioForSequenceClassification"),EYo=o(" (Data2VecAudio model)"),CYo=l(),CF=a("li"),bue=a("strong"),wYo=o("hubert"),AYo=o(" \u2014 "),IX=a("a"),yYo=o("HubertForSequenceClassification"),LYo=o(" (Hubert model)"),xYo=l(),wF=a("li"),vue=a("strong"),$Yo=o("sew"),kYo=o(" \u2014 "),qX=a("a"),SYo=o("SEWForSequenceClassification"),RYo=o(" (SEW model)"),PYo=l(),AF=a("li"),Fue=a("strong"),BYo=o("sew-d"),IYo=o(" \u2014 "),NX=a("a"),qYo=o("SEWDForSequenceClassification"),NYo=o(" (SEW-D model)"),jYo=l(),yF=a("li"),Tue=a("strong"),DYo=o("unispeech"),GYo=o(" \u2014 "),jX=a("a"),OYo=o("UniSpeechForSequenceClassification"),VYo=o(" (UniSpeech model)"),XYo=l(),LF=a("li"),Mue=a("strong"),zYo=o("unispeech-sat"),WYo=o(" \u2014 "),DX=a("a"),QYo=o("UniSpeechSatForSequenceClassification"),HYo=o(" (UniSpeechSat model)"),UYo=l(),xF=a("li"),Eue=a("strong"),JYo=o("wav2vec2"),YYo=o(" \u2014 "),GX=a("a"),KYo=o("Wav2Vec2ForSequenceClassification"),ZYo=o(" (Wav2Vec2 model)"),eKo=l(),$F=a("li"),Cue=a("strong"),oKo=o("wav2vec2-conformer"),rKo=o(" \u2014 "),OX=a("a"),tKo=o("Wav2Vec2ConformerForSequenceClassification"),aKo=o(" (Wav2Vec2-Conformer model)"),nKo=l(),kF=a("li"),wue=a("strong"),sKo=o("wavlm"),lKo=o(" \u2014 "),VX=a("a"),iKo=o("WavLMForSequenceClassification"),dKo=o(" (WavLM model)"),cKo=l(),SF=a("p"),fKo=o("The model is set in evaluation mode by default using "),Aue=a("code"),mKo=o("model.eval()"),gKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),hKo=o("model.train()"),pKo=l(),F(RF.$$.fragment),vNe=l(),gd=a("h2"),PF=a("a"),Lue=a("span"),F(cL.$$.fragment),uKo=l(),xue=a("span"),_Ko=o("AutoModelForAudioFrameClassification"),FNe=l(),Oo=a("div"),F(fL.$$.fragment),bKo=l(),hd=a("p"),vKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XX=a("a"),FKo=o("from_pretrained()"),TKo=o(" class method or the "),zX=a("a"),MKo=o("from_config()"),EKo=o(` class
method.`),CKo=l(),mL=a("p"),wKo=o("This class cannot be instantiated directly using "),$ue=a("code"),AKo=o("__init__()"),yKo=o(" (throws an error)."),LKo=l(),bt=a("div"),F(gL.$$.fragment),xKo=l(),kue=a("p"),$Ko=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kKo=l(),pd=a("p"),SKo=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),RKo=o("not"),PKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),BKo=o("from_pretrained()"),IKo=o(" to load the model weights."),qKo=l(),F(BF.$$.fragment),NKo=l(),fo=a("div"),F(hL.$$.fragment),jKo=l(),Rue=a("p"),DKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),GKo=l(),Oa=a("p"),OKo=o("The model class to instantiate is selected based on the "),Pue=a("code"),VKo=o("model_type"),XKo=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),zKo=o("pretrained_model_name_or_path"),WKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),QKo=o("pretrained_model_name_or_path"),HKo=o(":"),UKo=l(),Kr=a("ul"),IF=a("li"),que=a("strong"),JKo=o("data2vec-audio"),YKo=o(" \u2014 "),QX=a("a"),KKo=o("Data2VecAudioForAudioFrameClassification"),ZKo=o(" (Data2VecAudio model)"),eZo=l(),qF=a("li"),Nue=a("strong"),oZo=o("unispeech-sat"),rZo=o(" \u2014 "),HX=a("a"),tZo=o("UniSpeechSatForAudioFrameClassification"),aZo=o(" (UniSpeechSat model)"),nZo=l(),NF=a("li"),jue=a("strong"),sZo=o("wav2vec2"),lZo=o(" \u2014 "),UX=a("a"),iZo=o("Wav2Vec2ForAudioFrameClassification"),dZo=o(" (Wav2Vec2 model)"),cZo=l(),jF=a("li"),Due=a("strong"),fZo=o("wav2vec2-conformer"),mZo=o(" \u2014 "),JX=a("a"),gZo=o("Wav2Vec2ConformerForAudioFrameClassification"),hZo=o(" (Wav2Vec2-Conformer model)"),pZo=l(),DF=a("li"),Gue=a("strong"),uZo=o("wavlm"),_Zo=o(" \u2014 "),YX=a("a"),bZo=o("WavLMForAudioFrameClassification"),vZo=o(" (WavLM model)"),FZo=l(),GF=a("p"),TZo=o("The model is set in evaluation mode by default using "),Oue=a("code"),MZo=o("model.eval()"),EZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),CZo=o("model.train()"),wZo=l(),F(OF.$$.fragment),TNe=l(),ud=a("h2"),VF=a("a"),Xue=a("span"),F(pL.$$.fragment),AZo=l(),zue=a("span"),yZo=o("AutoModelForCTC"),MNe=l(),Vo=a("div"),F(uL.$$.fragment),LZo=l(),_d=a("p"),xZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KX=a("a"),$Zo=o("from_pretrained()"),kZo=o(" class method or the "),ZX=a("a"),SZo=o("from_config()"),RZo=o(` class
method.`),PZo=l(),_L=a("p"),BZo=o("This class cannot be instantiated directly using "),Wue=a("code"),IZo=o("__init__()"),qZo=o(" (throws an error)."),NZo=l(),vt=a("div"),F(bL.$$.fragment),jZo=l(),Que=a("p"),DZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),GZo=l(),bd=a("p"),OZo=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),VZo=o("not"),XZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),zZo=o("from_pretrained()"),WZo=o(" to load the model weights."),QZo=l(),F(XF.$$.fragment),HZo=l(),mo=a("div"),F(vL.$$.fragment),UZo=l(),Uue=a("p"),JZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),YZo=l(),Va=a("p"),KZo=o("The model class to instantiate is selected based on the "),Jue=a("code"),ZZo=o("model_type"),eer=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),ter=o("pretrained_model_name_or_path"),aer=o(":"),ner=l(),Se=a("ul"),zF=a("li"),Zue=a("strong"),ser=o("data2vec-audio"),ler=o(" \u2014 "),oz=a("a"),ier=o("Data2VecAudioForCTC"),der=o(" (Data2VecAudio model)"),cer=l(),WF=a("li"),e_e=a("strong"),fer=o("hubert"),mer=o(" \u2014 "),rz=a("a"),ger=o("HubertForCTC"),her=o(" (Hubert model)"),per=l(),QF=a("li"),o_e=a("strong"),uer=o("sew"),_er=o(" \u2014 "),tz=a("a"),ber=o("SEWForCTC"),ver=o(" (SEW model)"),Fer=l(),HF=a("li"),r_e=a("strong"),Ter=o("sew-d"),Mer=o(" \u2014 "),az=a("a"),Eer=o("SEWDForCTC"),Cer=o(" (SEW-D model)"),wer=l(),UF=a("li"),t_e=a("strong"),Aer=o("unispeech"),yer=o(" \u2014 "),nz=a("a"),Ler=o("UniSpeechForCTC"),xer=o(" (UniSpeech model)"),$er=l(),JF=a("li"),a_e=a("strong"),ker=o("unispeech-sat"),Ser=o(" \u2014 "),sz=a("a"),Rer=o("UniSpeechSatForCTC"),Per=o(" (UniSpeechSat model)"),Ber=l(),YF=a("li"),n_e=a("strong"),Ier=o("wav2vec2"),qer=o(" \u2014 "),lz=a("a"),Ner=o("Wav2Vec2ForCTC"),jer=o(" (Wav2Vec2 model)"),Der=l(),KF=a("li"),s_e=a("strong"),Ger=o("wav2vec2-conformer"),Oer=o(" \u2014 "),iz=a("a"),Ver=o("Wav2Vec2ConformerForCTC"),Xer=o(" (Wav2Vec2-Conformer model)"),zer=l(),ZF=a("li"),l_e=a("strong"),Wer=o("wavlm"),Qer=o(" \u2014 "),dz=a("a"),Her=o("WavLMForCTC"),Uer=o(" (WavLM model)"),Jer=l(),e6=a("p"),Yer=o("The model is set in evaluation mode by default using "),i_e=a("code"),Ker=o("model.eval()"),Zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),eor=o("model.train()"),oor=l(),F(o6.$$.fragment),ENe=l(),vd=a("h2"),r6=a("a"),c_e=a("span"),F(FL.$$.fragment),ror=l(),f_e=a("span"),tor=o("AutoModelForSpeechSeq2Seq"),CNe=l(),Xo=a("div"),F(TL.$$.fragment),aor=l(),Fd=a("p"),nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cz=a("a"),sor=o("from_pretrained()"),lor=o(" class method or the "),fz=a("a"),ior=o("from_config()"),dor=o(` class
method.`),cor=l(),ML=a("p"),mor=o("This class cannot be instantiated directly using "),m_e=a("code"),gor=o("__init__()"),hor=o(" (throws an error)."),por=l(),Ft=a("div"),F(EL.$$.fragment),uor=l(),g_e=a("p"),_or=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bor=l(),Td=a("p"),vor=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),For=o("not"),Tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),Mor=o("from_pretrained()"),Eor=o(" to load the model weights."),Cor=l(),F(t6.$$.fragment),wor=l(),go=a("div"),F(CL.$$.fragment),Aor=l(),p_e=a("p"),yor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lor=l(),Xa=a("p"),xor=o("The model class to instantiate is selected based on the "),u_e=a("code"),$or=o("model_type"),kor=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),Sor=o("pretrained_model_name_or_path"),Ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(":"),Ior=l(),wL=a("ul"),a6=a("li"),v_e=a("strong"),qor=o("speech-encoder-decoder"),Nor=o(" \u2014 "),gz=a("a"),jor=o("SpeechEncoderDecoderModel"),Dor=o(" (Speech Encoder decoder model)"),Gor=l(),n6=a("li"),F_e=a("strong"),Oor=o("speech_to_text"),Vor=o(" \u2014 "),hz=a("a"),Xor=o("Speech2TextForConditionalGeneration"),zor=o(" (Speech2Text model)"),Wor=l(),s6=a("p"),Qor=o("The model is set in evaluation mode by default using "),T_e=a("code"),Hor=o("model.eval()"),Uor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),Jor=o("model.train()"),Yor=l(),F(l6.$$.fragment),wNe=l(),Md=a("h2"),i6=a("a"),E_e=a("span"),F(AL.$$.fragment),Kor=l(),C_e=a("span"),Zor=o("AutoModelForAudioXVector"),ANe=l(),zo=a("div"),F(yL.$$.fragment),err=l(),Ed=a("p"),orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pz=a("a"),rrr=o("from_pretrained()"),trr=o(" class method or the "),uz=a("a"),arr=o("from_config()"),nrr=o(` class
method.`),srr=l(),LL=a("p"),lrr=o("This class cannot be instantiated directly using "),w_e=a("code"),irr=o("__init__()"),drr=o(" (throws an error)."),crr=l(),Tt=a("div"),F(xL.$$.fragment),frr=l(),A_e=a("p"),mrr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),grr=l(),Cd=a("p"),hrr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),prr=o("not"),urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),_rr=o("from_pretrained()"),brr=o(" to load the model weights."),vrr=l(),F(d6.$$.fragment),Frr=l(),ho=a("div"),F($L.$$.fragment),Trr=l(),L_e=a("p"),Mrr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Err=l(),za=a("p"),Crr=o("The model class to instantiate is selected based on the "),x_e=a("code"),wrr=o("model_type"),Arr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),yrr=o("pretrained_model_name_or_path"),Lrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),xrr=o("pretrained_model_name_or_path"),$rr=o(":"),krr=l(),Zr=a("ul"),c6=a("li"),S_e=a("strong"),Srr=o("data2vec-audio"),Rrr=o(" \u2014 "),bz=a("a"),Prr=o("Data2VecAudioForXVector"),Brr=o(" (Data2VecAudio model)"),Irr=l(),f6=a("li"),R_e=a("strong"),qrr=o("unispeech-sat"),Nrr=o(" \u2014 "),vz=a("a"),jrr=o("UniSpeechSatForXVector"),Drr=o(" (UniSpeechSat model)"),Grr=l(),m6=a("li"),P_e=a("strong"),Orr=o("wav2vec2"),Vrr=o(" \u2014 "),Fz=a("a"),Xrr=o("Wav2Vec2ForXVector"),zrr=o(" (Wav2Vec2 model)"),Wrr=l(),g6=a("li"),B_e=a("strong"),Qrr=o("wav2vec2-conformer"),Hrr=o(" \u2014 "),Tz=a("a"),Urr=o("Wav2Vec2ConformerForXVector"),Jrr=o(" (Wav2Vec2-Conformer model)"),Yrr=l(),h6=a("li"),I_e=a("strong"),Krr=o("wavlm"),Zrr=o(" \u2014 "),Mz=a("a"),etr=o("WavLMForXVector"),otr=o(" (WavLM model)"),rtr=l(),p6=a("p"),ttr=o("The model is set in evaluation mode by default using "),q_e=a("code"),atr=o("model.eval()"),ntr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),str=o("model.train()"),ltr=l(),F(u6.$$.fragment),yNe=l(),wd=a("h2"),_6=a("a"),j_e=a("span"),F(kL.$$.fragment),itr=l(),D_e=a("span"),dtr=o("AutoModelForMaskedImageModeling"),LNe=l(),Wo=a("div"),F(SL.$$.fragment),ctr=l(),Ad=a("p"),ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ez=a("a"),mtr=o("from_pretrained()"),gtr=o(" class method or the "),Cz=a("a"),htr=o("from_config()"),ptr=o(` class
method.`),utr=l(),RL=a("p"),_tr=o("This class cannot be instantiated directly using "),G_e=a("code"),btr=o("__init__()"),vtr=o(" (throws an error)."),Ftr=l(),Mt=a("div"),F(PL.$$.fragment),Ttr=l(),O_e=a("p"),Mtr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Etr=l(),yd=a("p"),Ctr=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),wtr=o("not"),Atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),ytr=o("from_pretrained()"),Ltr=o(" to load the model weights."),xtr=l(),F(b6.$$.fragment),$tr=l(),po=a("div"),F(BL.$$.fragment),ktr=l(),X_e=a("p"),Str=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Rtr=l(),Wa=a("p"),Ptr=o("The model class to instantiate is selected based on the "),z_e=a("code"),Btr=o("model_type"),Itr=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),qtr=o("pretrained_model_name_or_path"),Ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),jtr=o("pretrained_model_name_or_path"),Dtr=o(":"),Gtr=l(),Ld=a("ul"),v6=a("li"),H_e=a("strong"),Otr=o("deit"),Vtr=o(" \u2014 "),Az=a("a"),Xtr=o("DeiTForMaskedImageModeling"),ztr=o(" (DeiT model)"),Wtr=l(),F6=a("li"),U_e=a("strong"),Qtr=o("swin"),Htr=o(" \u2014 "),yz=a("a"),Utr=o("SwinForMaskedImageModeling"),Jtr=o(" (Swin model)"),Ytr=l(),T6=a("li"),J_e=a("strong"),Ktr=o("vit"),Ztr=o(" \u2014 "),Lz=a("a"),ear=o("ViTForMaskedImageModeling"),oar=o(" (ViT model)"),rar=l(),M6=a("p"),tar=o("The model is set in evaluation mode by default using "),Y_e=a("code"),aar=o("model.eval()"),nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),sar=o("model.train()"),lar=l(),F(E6.$$.fragment),xNe=l(),xd=a("h2"),C6=a("a"),Z_e=a("span"),F(IL.$$.fragment),iar=l(),e0e=a("span"),dar=o("AutoModelForObjectDetection"),$Ne=l(),Qo=a("div"),F(qL.$$.fragment),car=l(),$d=a("p"),far=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),xz=a("a"),mar=o("from_pretrained()"),gar=o(" class method or the "),$z=a("a"),har=o("from_config()"),par=o(` class
method.`),uar=l(),NL=a("p"),_ar=o("This class cannot be instantiated directly using "),o0e=a("code"),bar=o("__init__()"),Far=o(" (throws an error)."),Tar=l(),Et=a("div"),F(jL.$$.fragment),Mar=l(),r0e=a("p"),Ear=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Car=l(),kd=a("p"),war=o(`Note:
Loading a model from its configuration file does `),t0e=a("strong"),Aar=o("not"),yar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Lar=o("from_pretrained()"),xar=o(" to load the model weights."),$ar=l(),F(w6.$$.fragment),kar=l(),uo=a("div"),F(DL.$$.fragment),Sar=l(),a0e=a("p"),Rar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Par=l(),Qa=a("p"),Bar=o("The model class to instantiate is selected based on the "),n0e=a("code"),Iar=o("model_type"),qar=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),Nar=o("pretrained_model_name_or_path"),jar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),Dar=o("pretrained_model_name_or_path"),Gar=o(":"),Oar=l(),GL=a("ul"),A6=a("li"),i0e=a("strong"),Var=o("detr"),Xar=o(" \u2014 "),Sz=a("a"),zar=o("DetrForObjectDetection"),War=o(" (DETR model)"),Qar=l(),y6=a("li"),d0e=a("strong"),Har=o("yolos"),Uar=o(" \u2014 "),Rz=a("a"),Jar=o("YolosForObjectDetection"),Yar=o(" (YOLOS model)"),Kar=l(),L6=a("p"),Zar=o("The model is set in evaluation mode by default using "),c0e=a("code"),enr=o("model.eval()"),onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f0e=a("code"),rnr=o("model.train()"),tnr=l(),F(x6.$$.fragment),kNe=l(),Sd=a("h2"),$6=a("a"),m0e=a("span"),F(OL.$$.fragment),anr=l(),g0e=a("span"),nnr=o("AutoModelForImageSegmentation"),SNe=l(),Ho=a("div"),F(VL.$$.fragment),snr=l(),Rd=a("p"),lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Pz=a("a"),inr=o("from_pretrained()"),dnr=o(" class method or the "),Bz=a("a"),cnr=o("from_config()"),fnr=o(` class
method.`),mnr=l(),XL=a("p"),gnr=o("This class cannot be instantiated directly using "),h0e=a("code"),hnr=o("__init__()"),pnr=o(" (throws an error)."),unr=l(),Ct=a("div"),F(zL.$$.fragment),_nr=l(),p0e=a("p"),bnr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vnr=l(),Pd=a("p"),Fnr=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),Tnr=o("not"),Mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Enr=o("from_pretrained()"),Cnr=o(" to load the model weights."),wnr=l(),F(k6.$$.fragment),Anr=l(),_o=a("div"),F(WL.$$.fragment),ynr=l(),_0e=a("p"),Lnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xnr=l(),Ha=a("p"),$nr=o("The model class to instantiate is selected based on the "),b0e=a("code"),knr=o("model_type"),Snr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),Rnr=o("pretrained_model_name_or_path"),Pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(":"),qnr=l(),T0e=a("ul"),S6=a("li"),M0e=a("strong"),Nnr=o("detr"),jnr=o(" \u2014 "),qz=a("a"),Dnr=o("DetrForSegmentation"),Gnr=o(" (DETR model)"),Onr=l(),R6=a("p"),Vnr=o("The model is set in evaluation mode by default using "),E0e=a("code"),Xnr=o("model.eval()"),znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C0e=a("code"),Wnr=o("model.train()"),Qnr=l(),F(P6.$$.fragment),RNe=l(),Bd=a("h2"),B6=a("a"),w0e=a("span"),F(QL.$$.fragment),Hnr=l(),A0e=a("span"),Unr=o("AutoModelForSemanticSegmentation"),PNe=l(),Uo=a("div"),F(HL.$$.fragment),Jnr=l(),Id=a("p"),Ynr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nz=a("a"),Knr=o("from_pretrained()"),Znr=o(" class method or the "),jz=a("a"),esr=o("from_config()"),osr=o(` class
method.`),rsr=l(),UL=a("p"),tsr=o("This class cannot be instantiated directly using "),y0e=a("code"),asr=o("__init__()"),nsr=o(" (throws an error)."),ssr=l(),wt=a("div"),F(JL.$$.fragment),lsr=l(),L0e=a("p"),isr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dsr=l(),qd=a("p"),csr=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),fsr=o("not"),msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),gsr=o("from_pretrained()"),hsr=o(" to load the model weights."),psr=l(),F(I6.$$.fragment),usr=l(),bo=a("div"),F(YL.$$.fragment),_sr=l(),$0e=a("p"),bsr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vsr=l(),Ua=a("p"),Fsr=o("The model class to instantiate is selected based on the "),k0e=a("code"),Tsr=o("model_type"),Msr=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(":"),ysr=l(),Ja=a("ul"),q6=a("li"),P0e=a("strong"),Lsr=o("beit"),xsr=o(" \u2014 "),Gz=a("a"),$sr=o("BeitForSemanticSegmentation"),ksr=o(" (BEiT model)"),Ssr=l(),N6=a("li"),B0e=a("strong"),Rsr=o("data2vec-vision"),Psr=o(" \u2014 "),Oz=a("a"),Bsr=o("Data2VecVisionForSemanticSegmentation"),Isr=o(" (Data2VecVision model)"),qsr=l(),j6=a("li"),I0e=a("strong"),Nsr=o("dpt"),jsr=o(" \u2014 "),Vz=a("a"),Dsr=o("DPTForSemanticSegmentation"),Gsr=o(" (DPT model)"),Osr=l(),D6=a("li"),q0e=a("strong"),Vsr=o("segformer"),Xsr=o(" \u2014 "),Xz=a("a"),zsr=o("SegformerForSemanticSegmentation"),Wsr=o(" (SegFormer model)"),Qsr=l(),G6=a("p"),Hsr=o("The model is set in evaluation mode by default using "),N0e=a("code"),Usr=o("model.eval()"),Jsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=a("code"),Ysr=o("model.train()"),Ksr=l(),F(O6.$$.fragment),BNe=l(),Nd=a("h2"),V6=a("a"),D0e=a("span"),F(KL.$$.fragment),Zsr=l(),G0e=a("span"),elr=o("AutoModelForInstanceSegmentation"),INe=l(),Jo=a("div"),F(ZL.$$.fragment),olr=l(),jd=a("p"),rlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zz=a("a"),tlr=o("from_pretrained()"),alr=o(" class method or the "),Wz=a("a"),nlr=o("from_config()"),slr=o(` class
method.`),llr=l(),e8=a("p"),ilr=o("This class cannot be instantiated directly using "),O0e=a("code"),dlr=o("__init__()"),clr=o(" (throws an error)."),flr=l(),At=a("div"),F(o8.$$.fragment),mlr=l(),V0e=a("p"),glr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hlr=l(),Dd=a("p"),plr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),ulr=o("not"),_lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),blr=o("from_pretrained()"),vlr=o(" to load the model weights."),Flr=l(),F(X6.$$.fragment),Tlr=l(),vo=a("div"),F(r8.$$.fragment),Mlr=l(),z0e=a("p"),Elr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Clr=l(),Ya=a("p"),wlr=o("The model class to instantiate is selected based on the "),W0e=a("code"),Alr=o("model_type"),ylr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),Llr=o("pretrained_model_name_or_path"),xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(":"),Slr=l(),U0e=a("ul"),z6=a("li"),J0e=a("strong"),Rlr=o("maskformer"),Plr=o(" \u2014 "),Hz=a("a"),Blr=o("MaskFormerForInstanceSegmentation"),Ilr=o(" (MaskFormer model)"),qlr=l(),W6=a("p"),Nlr=o("The model is set in evaluation mode by default using "),Y0e=a("code"),jlr=o("model.eval()"),Dlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K0e=a("code"),Glr=o("model.train()"),Olr=l(),F(Q6.$$.fragment),qNe=l(),Gd=a("h2"),H6=a("a"),Z0e=a("span"),F(t8.$$.fragment),Vlr=l(),e1e=a("span"),Xlr=o("TFAutoModel"),NNe=l(),Yo=a("div"),F(a8.$$.fragment),zlr=l(),Od=a("p"),Wlr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uz=a("a"),Qlr=o("from_pretrained()"),Hlr=o(" class method or the "),Jz=a("a"),Ulr=o("from_config()"),Jlr=o(` class
method.`),Ylr=l(),n8=a("p"),Klr=o("This class cannot be instantiated directly using "),o1e=a("code"),Zlr=o("__init__()"),eir=o(" (throws an error)."),oir=l(),yt=a("div"),F(s8.$$.fragment),rir=l(),r1e=a("p"),tir=o("Instantiates one of the base model classes of the library from a configuration."),air=l(),Vd=a("p"),nir=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),sir=o("not"),lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),iir=o("from_pretrained()"),dir=o(" to load the model weights."),cir=l(),F(U6.$$.fragment),fir=l(),wr=a("div"),F(l8.$$.fragment),mir=l(),a1e=a("p"),gir=o("Instantiate one of the base model classes of the library from a pretrained model."),hir=l(),Ka=a("p"),pir=o("The model class to instantiate is selected based on the "),n1e=a("code"),uir=o("model_type"),_ir=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(":"),Mir=l(),N=a("ul"),J6=a("li"),i1e=a("strong"),Eir=o("albert"),Cir=o(" \u2014 "),Kz=a("a"),wir=o("TFAlbertModel"),Air=o(" (ALBERT model)"),yir=l(),Y6=a("li"),d1e=a("strong"),Lir=o("bart"),xir=o(" \u2014 "),Zz=a("a"),$ir=o("TFBartModel"),kir=o(" (BART model)"),Sir=l(),K6=a("li"),c1e=a("strong"),Rir=o("bert"),Pir=o(" \u2014 "),eW=a("a"),Bir=o("TFBertModel"),Iir=o(" (BERT model)"),qir=l(),Z6=a("li"),f1e=a("strong"),Nir=o("blenderbot"),jir=o(" \u2014 "),oW=a("a"),Dir=o("TFBlenderbotModel"),Gir=o(" (Blenderbot model)"),Oir=l(),eT=a("li"),m1e=a("strong"),Vir=o("blenderbot-small"),Xir=o(" \u2014 "),rW=a("a"),zir=o("TFBlenderbotSmallModel"),Wir=o(" (BlenderbotSmall model)"),Qir=l(),oT=a("li"),g1e=a("strong"),Hir=o("camembert"),Uir=o(" \u2014 "),tW=a("a"),Jir=o("TFCamembertModel"),Yir=o(" (CamemBERT model)"),Kir=l(),rT=a("li"),h1e=a("strong"),Zir=o("clip"),edr=o(" \u2014 "),aW=a("a"),odr=o("TFCLIPModel"),rdr=o(" (CLIP model)"),tdr=l(),tT=a("li"),p1e=a("strong"),adr=o("convbert"),ndr=o(" \u2014 "),nW=a("a"),sdr=o("TFConvBertModel"),ldr=o(" (ConvBERT model)"),idr=l(),aT=a("li"),u1e=a("strong"),ddr=o("convnext"),cdr=o(" \u2014 "),sW=a("a"),fdr=o("TFConvNextModel"),mdr=o(" (ConvNext model)"),gdr=l(),nT=a("li"),_1e=a("strong"),hdr=o("ctrl"),pdr=o(" \u2014 "),lW=a("a"),udr=o("TFCTRLModel"),_dr=o(" (CTRL model)"),bdr=l(),sT=a("li"),b1e=a("strong"),vdr=o("data2vec-vision"),Fdr=o(" \u2014 "),iW=a("a"),Tdr=o("TFData2VecVisionModel"),Mdr=o(" (Data2VecVision model)"),Edr=l(),lT=a("li"),v1e=a("strong"),Cdr=o("deberta"),wdr=o(" \u2014 "),dW=a("a"),Adr=o("TFDebertaModel"),ydr=o(" (DeBERTa model)"),Ldr=l(),iT=a("li"),F1e=a("strong"),xdr=o("deberta-v2"),$dr=o(" \u2014 "),cW=a("a"),kdr=o("TFDebertaV2Model"),Sdr=o(" (DeBERTa-v2 model)"),Rdr=l(),dT=a("li"),T1e=a("strong"),Pdr=o("distilbert"),Bdr=o(" \u2014 "),fW=a("a"),Idr=o("TFDistilBertModel"),qdr=o(" (DistilBERT model)"),Ndr=l(),cT=a("li"),M1e=a("strong"),jdr=o("dpr"),Ddr=o(" \u2014 "),mW=a("a"),Gdr=o("TFDPRQuestionEncoder"),Odr=o(" (DPR model)"),Vdr=l(),fT=a("li"),E1e=a("strong"),Xdr=o("electra"),zdr=o(" \u2014 "),gW=a("a"),Wdr=o("TFElectraModel"),Qdr=o(" (ELECTRA model)"),Hdr=l(),mT=a("li"),C1e=a("strong"),Udr=o("flaubert"),Jdr=o(" \u2014 "),hW=a("a"),Ydr=o("TFFlaubertModel"),Kdr=o(" (FlauBERT model)"),Zdr=l(),Is=a("li"),w1e=a("strong"),ecr=o("funnel"),ocr=o(" \u2014 "),pW=a("a"),rcr=o("TFFunnelModel"),tcr=o(" or "),uW=a("a"),acr=o("TFFunnelBaseModel"),ncr=o(" (Funnel Transformer model)"),scr=l(),gT=a("li"),A1e=a("strong"),lcr=o("gpt2"),icr=o(" \u2014 "),_W=a("a"),dcr=o("TFGPT2Model"),ccr=o(" (OpenAI GPT-2 model)"),fcr=l(),hT=a("li"),y1e=a("strong"),mcr=o("gptj"),gcr=o(" \u2014 "),bW=a("a"),hcr=o("TFGPTJModel"),pcr=o(" (GPT-J model)"),ucr=l(),pT=a("li"),L1e=a("strong"),_cr=o("hubert"),bcr=o(" \u2014 "),vW=a("a"),vcr=o("TFHubertModel"),Fcr=o(" (Hubert model)"),Tcr=l(),uT=a("li"),x1e=a("strong"),Mcr=o("layoutlm"),Ecr=o(" \u2014 "),FW=a("a"),Ccr=o("TFLayoutLMModel"),wcr=o(" (LayoutLM model)"),Acr=l(),_T=a("li"),$1e=a("strong"),ycr=o("led"),Lcr=o(" \u2014 "),TW=a("a"),xcr=o("TFLEDModel"),$cr=o(" (LED model)"),kcr=l(),bT=a("li"),k1e=a("strong"),Scr=o("longformer"),Rcr=o(" \u2014 "),MW=a("a"),Pcr=o("TFLongformerModel"),Bcr=o(" (Longformer model)"),Icr=l(),vT=a("li"),S1e=a("strong"),qcr=o("lxmert"),Ncr=o(" \u2014 "),EW=a("a"),jcr=o("TFLxmertModel"),Dcr=o(" (LXMERT model)"),Gcr=l(),FT=a("li"),R1e=a("strong"),Ocr=o("marian"),Vcr=o(" \u2014 "),CW=a("a"),Xcr=o("TFMarianModel"),zcr=o(" (Marian model)"),Wcr=l(),TT=a("li"),P1e=a("strong"),Qcr=o("mbart"),Hcr=o(" \u2014 "),wW=a("a"),Ucr=o("TFMBartModel"),Jcr=o(" (mBART model)"),Ycr=l(),MT=a("li"),B1e=a("strong"),Kcr=o("mobilebert"),Zcr=o(" \u2014 "),AW=a("a"),efr=o("TFMobileBertModel"),ofr=o(" (MobileBERT model)"),rfr=l(),ET=a("li"),I1e=a("strong"),tfr=o("mpnet"),afr=o(" \u2014 "),yW=a("a"),nfr=o("TFMPNetModel"),sfr=o(" (MPNet model)"),lfr=l(),CT=a("li"),q1e=a("strong"),ifr=o("mt5"),dfr=o(" \u2014 "),LW=a("a"),cfr=o("TFMT5Model"),ffr=o(" (mT5 model)"),mfr=l(),wT=a("li"),N1e=a("strong"),gfr=o("openai-gpt"),hfr=o(" \u2014 "),xW=a("a"),pfr=o("TFOpenAIGPTModel"),ufr=o(" (OpenAI GPT model)"),_fr=l(),AT=a("li"),j1e=a("strong"),bfr=o("pegasus"),vfr=o(" \u2014 "),$W=a("a"),Ffr=o("TFPegasusModel"),Tfr=o(" (Pegasus model)"),Mfr=l(),yT=a("li"),D1e=a("strong"),Efr=o("rembert"),Cfr=o(" \u2014 "),kW=a("a"),wfr=o("TFRemBertModel"),Afr=o(" (RemBERT model)"),yfr=l(),LT=a("li"),G1e=a("strong"),Lfr=o("roberta"),xfr=o(" \u2014 "),SW=a("a"),$fr=o("TFRobertaModel"),kfr=o(" (RoBERTa model)"),Sfr=l(),xT=a("li"),O1e=a("strong"),Rfr=o("roformer"),Pfr=o(" \u2014 "),RW=a("a"),Bfr=o("TFRoFormerModel"),Ifr=o(" (RoFormer model)"),qfr=l(),$T=a("li"),V1e=a("strong"),Nfr=o("speech_to_text"),jfr=o(" \u2014 "),PW=a("a"),Dfr=o("TFSpeech2TextModel"),Gfr=o(" (Speech2Text model)"),Ofr=l(),kT=a("li"),X1e=a("strong"),Vfr=o("swin"),Xfr=o(" \u2014 "),BW=a("a"),zfr=o("TFSwinModel"),Wfr=o(" (Swin model)"),Qfr=l(),ST=a("li"),z1e=a("strong"),Hfr=o("t5"),Ufr=o(" \u2014 "),IW=a("a"),Jfr=o("TFT5Model"),Yfr=o(" (T5 model)"),Kfr=l(),RT=a("li"),W1e=a("strong"),Zfr=o("tapas"),emr=o(" \u2014 "),qW=a("a"),omr=o("TFTapasModel"),rmr=o(" (TAPAS model)"),tmr=l(),PT=a("li"),Q1e=a("strong"),amr=o("transfo-xl"),nmr=o(" \u2014 "),NW=a("a"),smr=o("TFTransfoXLModel"),lmr=o(" (Transformer-XL model)"),imr=l(),BT=a("li"),H1e=a("strong"),dmr=o("vit"),cmr=o(" \u2014 "),jW=a("a"),fmr=o("TFViTModel"),mmr=o(" (ViT model)"),gmr=l(),IT=a("li"),U1e=a("strong"),hmr=o("vit_mae"),pmr=o(" \u2014 "),DW=a("a"),umr=o("TFViTMAEModel"),_mr=o(" (ViTMAE model)"),bmr=l(),qT=a("li"),J1e=a("strong"),vmr=o("wav2vec2"),Fmr=o(" \u2014 "),GW=a("a"),Tmr=o("TFWav2Vec2Model"),Mmr=o(" (Wav2Vec2 model)"),Emr=l(),NT=a("li"),Y1e=a("strong"),Cmr=o("xlm"),wmr=o(" \u2014 "),OW=a("a"),Amr=o("TFXLMModel"),ymr=o(" (XLM model)"),Lmr=l(),jT=a("li"),K1e=a("strong"),xmr=o("xlm-roberta"),$mr=o(" \u2014 "),VW=a("a"),kmr=o("TFXLMRobertaModel"),Smr=o(" (XLM-RoBERTa model)"),Rmr=l(),DT=a("li"),Z1e=a("strong"),Pmr=o("xlnet"),Bmr=o(" \u2014 "),XW=a("a"),Imr=o("TFXLNetModel"),qmr=o(" (XLNet model)"),Nmr=l(),F(GT.$$.fragment),jNe=l(),Xd=a("h2"),OT=a("a"),ebe=a("span"),F(i8.$$.fragment),jmr=l(),obe=a("span"),Dmr=o("TFAutoModelForPreTraining"),DNe=l(),Ko=a("div"),F(d8.$$.fragment),Gmr=l(),zd=a("p"),Omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zW=a("a"),Vmr=o("from_pretrained()"),Xmr=o(" class method or the "),WW=a("a"),zmr=o("from_config()"),Wmr=o(` class
method.`),Qmr=l(),c8=a("p"),Hmr=o("This class cannot be instantiated directly using "),rbe=a("code"),Umr=o("__init__()"),Jmr=o(" (throws an error)."),Ymr=l(),Lt=a("div"),F(f8.$$.fragment),Kmr=l(),tbe=a("p"),Zmr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),egr=l(),Wd=a("p"),ogr=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),rgr=o("not"),tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),agr=o("from_pretrained()"),ngr=o(" to load the model weights."),sgr=l(),F(VT.$$.fragment),lgr=l(),Ar=a("div"),F(m8.$$.fragment),igr=l(),nbe=a("p"),dgr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cgr=l(),Za=a("p"),fgr=o("The model class to instantiate is selected based on the "),sbe=a("code"),mgr=o("model_type"),ggr=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),hgr=o("pretrained_model_name_or_path"),pgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),ugr=o("pretrained_model_name_or_path"),_gr=o(":"),bgr=l(),se=a("ul"),XT=a("li"),dbe=a("strong"),vgr=o("albert"),Fgr=o(" \u2014 "),HW=a("a"),Tgr=o("TFAlbertForPreTraining"),Mgr=o(" (ALBERT model)"),Egr=l(),zT=a("li"),cbe=a("strong"),Cgr=o("bart"),wgr=o(" \u2014 "),UW=a("a"),Agr=o("TFBartForConditionalGeneration"),ygr=o(" (BART model)"),Lgr=l(),WT=a("li"),fbe=a("strong"),xgr=o("bert"),$gr=o(" \u2014 "),JW=a("a"),kgr=o("TFBertForPreTraining"),Sgr=o(" (BERT model)"),Rgr=l(),QT=a("li"),mbe=a("strong"),Pgr=o("camembert"),Bgr=o(" \u2014 "),YW=a("a"),Igr=o("TFCamembertForMaskedLM"),qgr=o(" (CamemBERT model)"),Ngr=l(),HT=a("li"),gbe=a("strong"),jgr=o("ctrl"),Dgr=o(" \u2014 "),KW=a("a"),Ggr=o("TFCTRLLMHeadModel"),Ogr=o(" (CTRL model)"),Vgr=l(),UT=a("li"),hbe=a("strong"),Xgr=o("distilbert"),zgr=o(" \u2014 "),ZW=a("a"),Wgr=o("TFDistilBertForMaskedLM"),Qgr=o(" (DistilBERT model)"),Hgr=l(),JT=a("li"),pbe=a("strong"),Ugr=o("electra"),Jgr=o(" \u2014 "),eQ=a("a"),Ygr=o("TFElectraForPreTraining"),Kgr=o(" (ELECTRA model)"),Zgr=l(),YT=a("li"),ube=a("strong"),ehr=o("flaubert"),ohr=o(" \u2014 "),oQ=a("a"),rhr=o("TFFlaubertWithLMHeadModel"),thr=o(" (FlauBERT model)"),ahr=l(),KT=a("li"),_be=a("strong"),nhr=o("funnel"),shr=o(" \u2014 "),rQ=a("a"),lhr=o("TFFunnelForPreTraining"),ihr=o(" (Funnel Transformer model)"),dhr=l(),ZT=a("li"),bbe=a("strong"),chr=o("gpt2"),fhr=o(" \u2014 "),tQ=a("a"),mhr=o("TFGPT2LMHeadModel"),ghr=o(" (OpenAI GPT-2 model)"),hhr=l(),e7=a("li"),vbe=a("strong"),phr=o("layoutlm"),uhr=o(" \u2014 "),aQ=a("a"),_hr=o("TFLayoutLMForMaskedLM"),bhr=o(" (LayoutLM model)"),vhr=l(),o7=a("li"),Fbe=a("strong"),Fhr=o("lxmert"),Thr=o(" \u2014 "),nQ=a("a"),Mhr=o("TFLxmertForPreTraining"),Ehr=o(" (LXMERT model)"),Chr=l(),r7=a("li"),Tbe=a("strong"),whr=o("mobilebert"),Ahr=o(" \u2014 "),sQ=a("a"),yhr=o("TFMobileBertForPreTraining"),Lhr=o(" (MobileBERT model)"),xhr=l(),t7=a("li"),Mbe=a("strong"),$hr=o("mpnet"),khr=o(" \u2014 "),lQ=a("a"),Shr=o("TFMPNetForMaskedLM"),Rhr=o(" (MPNet model)"),Phr=l(),a7=a("li"),Ebe=a("strong"),Bhr=o("openai-gpt"),Ihr=o(" \u2014 "),iQ=a("a"),qhr=o("TFOpenAIGPTLMHeadModel"),Nhr=o(" (OpenAI GPT model)"),jhr=l(),n7=a("li"),Cbe=a("strong"),Dhr=o("roberta"),Ghr=o(" \u2014 "),dQ=a("a"),Ohr=o("TFRobertaForMaskedLM"),Vhr=o(" (RoBERTa model)"),Xhr=l(),s7=a("li"),wbe=a("strong"),zhr=o("t5"),Whr=o(" \u2014 "),cQ=a("a"),Qhr=o("TFT5ForConditionalGeneration"),Hhr=o(" (T5 model)"),Uhr=l(),l7=a("li"),Abe=a("strong"),Jhr=o("tapas"),Yhr=o(" \u2014 "),fQ=a("a"),Khr=o("TFTapasForMaskedLM"),Zhr=o(" (TAPAS model)"),epr=l(),i7=a("li"),ybe=a("strong"),opr=o("transfo-xl"),rpr=o(" \u2014 "),mQ=a("a"),tpr=o("TFTransfoXLLMHeadModel"),apr=o(" (Transformer-XL model)"),npr=l(),d7=a("li"),Lbe=a("strong"),spr=o("vit_mae"),lpr=o(" \u2014 "),gQ=a("a"),ipr=o("TFViTMAEForPreTraining"),dpr=o(" (ViTMAE model)"),cpr=l(),c7=a("li"),xbe=a("strong"),fpr=o("xlm"),mpr=o(" \u2014 "),hQ=a("a"),gpr=o("TFXLMWithLMHeadModel"),hpr=o(" (XLM model)"),ppr=l(),f7=a("li"),$be=a("strong"),upr=o("xlm-roberta"),_pr=o(" \u2014 "),pQ=a("a"),bpr=o("TFXLMRobertaForMaskedLM"),vpr=o(" (XLM-RoBERTa model)"),Fpr=l(),m7=a("li"),kbe=a("strong"),Tpr=o("xlnet"),Mpr=o(" \u2014 "),uQ=a("a"),Epr=o("TFXLNetLMHeadModel"),Cpr=o(" (XLNet model)"),wpr=l(),F(g7.$$.fragment),GNe=l(),Qd=a("h2"),h7=a("a"),Sbe=a("span"),F(g8.$$.fragment),Apr=l(),Rbe=a("span"),ypr=o("TFAutoModelForCausalLM"),ONe=l(),Zo=a("div"),F(h8.$$.fragment),Lpr=l(),Hd=a("p"),xpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=a("a"),$pr=o("from_pretrained()"),kpr=o(" class method or the "),bQ=a("a"),Spr=o("from_config()"),Rpr=o(` class
method.`),Ppr=l(),p8=a("p"),Bpr=o("This class cannot be instantiated directly using "),Pbe=a("code"),Ipr=o("__init__()"),qpr=o(" (throws an error)."),Npr=l(),xt=a("div"),F(u8.$$.fragment),jpr=l(),Bbe=a("p"),Dpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gpr=l(),Ud=a("p"),Opr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),Vpr=o("not"),Xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),zpr=o("from_pretrained()"),Wpr=o(" to load the model weights."),Qpr=l(),F(p7.$$.fragment),Hpr=l(),yr=a("div"),F(_8.$$.fragment),Upr=l(),qbe=a("p"),Jpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ypr=l(),en=a("p"),Kpr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Zpr=o("model_type"),eur=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),our=o("pretrained_model_name_or_path"),rur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),tur=o("pretrained_model_name_or_path"),aur=o(":"),nur=l(),Me=a("ul"),u7=a("li"),Gbe=a("strong"),sur=o("bert"),lur=o(" \u2014 "),FQ=a("a"),iur=o("TFBertLMHeadModel"),dur=o(" (BERT model)"),cur=l(),_7=a("li"),Obe=a("strong"),fur=o("camembert"),mur=o(" \u2014 "),TQ=a("a"),gur=o("TFCamembertForCausalLM"),hur=o(" (CamemBERT model)"),pur=l(),b7=a("li"),Vbe=a("strong"),uur=o("ctrl"),_ur=o(" \u2014 "),MQ=a("a"),bur=o("TFCTRLLMHeadModel"),vur=o(" (CTRL model)"),Fur=l(),v7=a("li"),Xbe=a("strong"),Tur=o("gpt2"),Mur=o(" \u2014 "),EQ=a("a"),Eur=o("TFGPT2LMHeadModel"),Cur=o(" (OpenAI GPT-2 model)"),wur=l(),F7=a("li"),zbe=a("strong"),Aur=o("gptj"),yur=o(" \u2014 "),CQ=a("a"),Lur=o("TFGPTJForCausalLM"),xur=o(" (GPT-J model)"),$ur=l(),T7=a("li"),Wbe=a("strong"),kur=o("openai-gpt"),Sur=o(" \u2014 "),wQ=a("a"),Rur=o("TFOpenAIGPTLMHeadModel"),Pur=o(" (OpenAI GPT model)"),Bur=l(),M7=a("li"),Qbe=a("strong"),Iur=o("rembert"),qur=o(" \u2014 "),AQ=a("a"),Nur=o("TFRemBertForCausalLM"),jur=o(" (RemBERT model)"),Dur=l(),E7=a("li"),Hbe=a("strong"),Gur=o("roberta"),Our=o(" \u2014 "),yQ=a("a"),Vur=o("TFRobertaForCausalLM"),Xur=o(" (RoBERTa model)"),zur=l(),C7=a("li"),Ube=a("strong"),Wur=o("roformer"),Qur=o(" \u2014 "),LQ=a("a"),Hur=o("TFRoFormerForCausalLM"),Uur=o(" (RoFormer model)"),Jur=l(),w7=a("li"),Jbe=a("strong"),Yur=o("transfo-xl"),Kur=o(" \u2014 "),xQ=a("a"),Zur=o("TFTransfoXLLMHeadModel"),e_r=o(" (Transformer-XL model)"),o_r=l(),A7=a("li"),Ybe=a("strong"),r_r=o("xlm"),t_r=o(" \u2014 "),$Q=a("a"),a_r=o("TFXLMWithLMHeadModel"),n_r=o(" (XLM model)"),s_r=l(),y7=a("li"),Kbe=a("strong"),l_r=o("xlnet"),i_r=o(" \u2014 "),kQ=a("a"),d_r=o("TFXLNetLMHeadModel"),c_r=o(" (XLNet model)"),f_r=l(),F(L7.$$.fragment),VNe=l(),Jd=a("h2"),x7=a("a"),Zbe=a("span"),F(b8.$$.fragment),m_r=l(),e2e=a("span"),g_r=o("TFAutoModelForImageClassification"),XNe=l(),er=a("div"),F(v8.$$.fragment),h_r=l(),Yd=a("p"),p_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=a("a"),u_r=o("from_pretrained()"),__r=o(" class method or the "),RQ=a("a"),b_r=o("from_config()"),v_r=o(` class
method.`),F_r=l(),F8=a("p"),T_r=o("This class cannot be instantiated directly using "),o2e=a("code"),M_r=o("__init__()"),E_r=o(" (throws an error)."),C_r=l(),$t=a("div"),F(T8.$$.fragment),w_r=l(),r2e=a("p"),A_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),y_r=l(),Kd=a("p"),L_r=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),x_r=o("not"),$_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),k_r=o("from_pretrained()"),S_r=o(" to load the model weights."),R_r=l(),F($7.$$.fragment),P_r=l(),Lr=a("div"),F(M8.$$.fragment),B_r=l(),a2e=a("p"),I_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q_r=l(),on=a("p"),N_r=o("The model class to instantiate is selected based on the "),n2e=a("code"),j_r=o("model_type"),D_r=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),G_r=o("pretrained_model_name_or_path"),O_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),V_r=o("pretrained_model_name_or_path"),X_r=o(":"),z_r=l(),rn=a("ul"),k7=a("li"),i2e=a("strong"),W_r=o("convnext"),Q_r=o(" \u2014 "),BQ=a("a"),H_r=o("TFConvNextForImageClassification"),U_r=o(" (ConvNext model)"),J_r=l(),S7=a("li"),d2e=a("strong"),Y_r=o("data2vec-vision"),K_r=o(" \u2014 "),IQ=a("a"),Z_r=o("TFData2VecVisionForImageClassification"),e0r=o(" (Data2VecVision model)"),o0r=l(),R7=a("li"),c2e=a("strong"),r0r=o("swin"),t0r=o(" \u2014 "),qQ=a("a"),a0r=o("TFSwinForImageClassification"),n0r=o(" (Swin model)"),s0r=l(),P7=a("li"),f2e=a("strong"),l0r=o("vit"),i0r=o(" \u2014 "),NQ=a("a"),d0r=o("TFViTForImageClassification"),c0r=o(" (ViT model)"),f0r=l(),F(B7.$$.fragment),zNe=l(),Zd=a("h2"),I7=a("a"),m2e=a("span"),F(E8.$$.fragment),m0r=l(),g2e=a("span"),g0r=o("TFAutoModelForMaskedLM"),WNe=l(),or=a("div"),F(C8.$$.fragment),h0r=l(),ec=a("p"),p0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=a("a"),u0r=o("from_pretrained()"),_0r=o(" class method or the "),DQ=a("a"),b0r=o("from_config()"),v0r=o(` class
method.`),F0r=l(),w8=a("p"),T0r=o("This class cannot be instantiated directly using "),h2e=a("code"),M0r=o("__init__()"),E0r=o(" (throws an error)."),C0r=l(),kt=a("div"),F(A8.$$.fragment),w0r=l(),p2e=a("p"),A0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y0r=l(),oc=a("p"),L0r=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),x0r=o("not"),$0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),k0r=o("from_pretrained()"),S0r=o(" to load the model weights."),R0r=l(),F(q7.$$.fragment),P0r=l(),xr=a("div"),F(y8.$$.fragment),B0r=l(),_2e=a("p"),I0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q0r=l(),tn=a("p"),N0r=o("The model class to instantiate is selected based on the "),b2e=a("code"),j0r=o("model_type"),D0r=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(":"),z0r=l(),ie=a("ul"),N7=a("li"),T2e=a("strong"),W0r=o("albert"),Q0r=o(" \u2014 "),OQ=a("a"),H0r=o("TFAlbertForMaskedLM"),U0r=o(" (ALBERT model)"),J0r=l(),j7=a("li"),M2e=a("strong"),Y0r=o("bert"),K0r=o(" \u2014 "),VQ=a("a"),Z0r=o("TFBertForMaskedLM"),e1r=o(" (BERT model)"),o1r=l(),D7=a("li"),E2e=a("strong"),r1r=o("camembert"),t1r=o(" \u2014 "),XQ=a("a"),a1r=o("TFCamembertForMaskedLM"),n1r=o(" (CamemBERT model)"),s1r=l(),G7=a("li"),C2e=a("strong"),l1r=o("convbert"),i1r=o(" \u2014 "),zQ=a("a"),d1r=o("TFConvBertForMaskedLM"),c1r=o(" (ConvBERT model)"),f1r=l(),O7=a("li"),w2e=a("strong"),m1r=o("deberta"),g1r=o(" \u2014 "),WQ=a("a"),h1r=o("TFDebertaForMaskedLM"),p1r=o(" (DeBERTa model)"),u1r=l(),V7=a("li"),A2e=a("strong"),_1r=o("deberta-v2"),b1r=o(" \u2014 "),QQ=a("a"),v1r=o("TFDebertaV2ForMaskedLM"),F1r=o(" (DeBERTa-v2 model)"),T1r=l(),X7=a("li"),y2e=a("strong"),M1r=o("distilbert"),E1r=o(" \u2014 "),HQ=a("a"),C1r=o("TFDistilBertForMaskedLM"),w1r=o(" (DistilBERT model)"),A1r=l(),z7=a("li"),L2e=a("strong"),y1r=o("electra"),L1r=o(" \u2014 "),UQ=a("a"),x1r=o("TFElectraForMaskedLM"),$1r=o(" (ELECTRA model)"),k1r=l(),W7=a("li"),x2e=a("strong"),S1r=o("flaubert"),R1r=o(" \u2014 "),JQ=a("a"),P1r=o("TFFlaubertWithLMHeadModel"),B1r=o(" (FlauBERT model)"),I1r=l(),Q7=a("li"),$2e=a("strong"),q1r=o("funnel"),N1r=o(" \u2014 "),YQ=a("a"),j1r=o("TFFunnelForMaskedLM"),D1r=o(" (Funnel Transformer model)"),G1r=l(),H7=a("li"),k2e=a("strong"),O1r=o("layoutlm"),V1r=o(" \u2014 "),KQ=a("a"),X1r=o("TFLayoutLMForMaskedLM"),z1r=o(" (LayoutLM model)"),W1r=l(),U7=a("li"),S2e=a("strong"),Q1r=o("longformer"),H1r=o(" \u2014 "),ZQ=a("a"),U1r=o("TFLongformerForMaskedLM"),J1r=o(" (Longformer model)"),Y1r=l(),J7=a("li"),R2e=a("strong"),K1r=o("mobilebert"),Z1r=o(" \u2014 "),eH=a("a"),ebr=o("TFMobileBertForMaskedLM"),obr=o(" (MobileBERT model)"),rbr=l(),Y7=a("li"),P2e=a("strong"),tbr=o("mpnet"),abr=o(" \u2014 "),oH=a("a"),nbr=o("TFMPNetForMaskedLM"),sbr=o(" (MPNet model)"),lbr=l(),K7=a("li"),B2e=a("strong"),ibr=o("rembert"),dbr=o(" \u2014 "),rH=a("a"),cbr=o("TFRemBertForMaskedLM"),fbr=o(" (RemBERT model)"),mbr=l(),Z7=a("li"),I2e=a("strong"),gbr=o("roberta"),hbr=o(" \u2014 "),tH=a("a"),pbr=o("TFRobertaForMaskedLM"),ubr=o(" (RoBERTa model)"),_br=l(),eM=a("li"),q2e=a("strong"),bbr=o("roformer"),vbr=o(" \u2014 "),aH=a("a"),Fbr=o("TFRoFormerForMaskedLM"),Tbr=o(" (RoFormer model)"),Mbr=l(),oM=a("li"),N2e=a("strong"),Ebr=o("tapas"),Cbr=o(" \u2014 "),nH=a("a"),wbr=o("TFTapasForMaskedLM"),Abr=o(" (TAPAS model)"),ybr=l(),rM=a("li"),j2e=a("strong"),Lbr=o("xlm"),xbr=o(" \u2014 "),sH=a("a"),$br=o("TFXLMWithLMHeadModel"),kbr=o(" (XLM model)"),Sbr=l(),tM=a("li"),D2e=a("strong"),Rbr=o("xlm-roberta"),Pbr=o(" \u2014 "),lH=a("a"),Bbr=o("TFXLMRobertaForMaskedLM"),Ibr=o(" (XLM-RoBERTa model)"),qbr=l(),F(aM.$$.fragment),QNe=l(),rc=a("h2"),nM=a("a"),G2e=a("span"),F(L8.$$.fragment),Nbr=l(),O2e=a("span"),jbr=o("TFAutoModelForSeq2SeqLM"),HNe=l(),rr=a("div"),F(x8.$$.fragment),Dbr=l(),tc=a("p"),Gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=a("a"),Obr=o("from_pretrained()"),Vbr=o(" class method or the "),dH=a("a"),Xbr=o("from_config()"),zbr=o(` class
method.`),Wbr=l(),$8=a("p"),Qbr=o("This class cannot be instantiated directly using "),V2e=a("code"),Hbr=o("__init__()"),Ubr=o(" (throws an error)."),Jbr=l(),St=a("div"),F(k8.$$.fragment),Ybr=l(),X2e=a("p"),Kbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zbr=l(),ac=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),t2r=o("from_pretrained()"),a2r=o(" to load the model weights."),n2r=l(),F(sM.$$.fragment),s2r=l(),$r=a("div"),F(S8.$$.fragment),l2r=l(),W2e=a("p"),i2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d2r=l(),an=a("p"),c2r=o("The model class to instantiate is selected based on the "),Q2e=a("code"),f2r=o("model_type"),m2r=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),p2r=o("pretrained_model_name_or_path"),u2r=o(":"),_2r=l(),ye=a("ul"),lM=a("li"),J2e=a("strong"),b2r=o("bart"),v2r=o(" \u2014 "),fH=a("a"),F2r=o("TFBartForConditionalGeneration"),T2r=o(" (BART model)"),M2r=l(),iM=a("li"),Y2e=a("strong"),E2r=o("blenderbot"),C2r=o(" \u2014 "),mH=a("a"),w2r=o("TFBlenderbotForConditionalGeneration"),A2r=o(" (Blenderbot model)"),y2r=l(),dM=a("li"),K2e=a("strong"),L2r=o("blenderbot-small"),x2r=o(" \u2014 "),gH=a("a"),$2r=o("TFBlenderbotSmallForConditionalGeneration"),k2r=o(" (BlenderbotSmall model)"),S2r=l(),cM=a("li"),Z2e=a("strong"),R2r=o("encoder-decoder"),P2r=o(" \u2014 "),hH=a("a"),B2r=o("TFEncoderDecoderModel"),I2r=o(" (Encoder decoder model)"),q2r=l(),fM=a("li"),eve=a("strong"),N2r=o("led"),j2r=o(" \u2014 "),pH=a("a"),D2r=o("TFLEDForConditionalGeneration"),G2r=o(" (LED model)"),O2r=l(),mM=a("li"),ove=a("strong"),V2r=o("marian"),X2r=o(" \u2014 "),uH=a("a"),z2r=o("TFMarianMTModel"),W2r=o(" (Marian model)"),Q2r=l(),gM=a("li"),rve=a("strong"),H2r=o("mbart"),U2r=o(" \u2014 "),_H=a("a"),J2r=o("TFMBartForConditionalGeneration"),Y2r=o(" (mBART model)"),K2r=l(),hM=a("li"),tve=a("strong"),Z2r=o("mt5"),evr=o(" \u2014 "),bH=a("a"),ovr=o("TFMT5ForConditionalGeneration"),rvr=o(" (mT5 model)"),tvr=l(),pM=a("li"),ave=a("strong"),avr=o("pegasus"),nvr=o(" \u2014 "),vH=a("a"),svr=o("TFPegasusForConditionalGeneration"),lvr=o(" (Pegasus model)"),ivr=l(),uM=a("li"),nve=a("strong"),dvr=o("t5"),cvr=o(" \u2014 "),FH=a("a"),fvr=o("TFT5ForConditionalGeneration"),mvr=o(" (T5 model)"),gvr=l(),F(_M.$$.fragment),UNe=l(),nc=a("h2"),bM=a("a"),sve=a("span"),F(R8.$$.fragment),hvr=l(),lve=a("span"),pvr=o("TFAutoModelForSequenceClassification"),JNe=l(),tr=a("div"),F(P8.$$.fragment),uvr=l(),sc=a("p"),_vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TH=a("a"),bvr=o("from_pretrained()"),vvr=o(" class method or the "),MH=a("a"),Fvr=o("from_config()"),Tvr=o(` class
method.`),Mvr=l(),B8=a("p"),Evr=o("This class cannot be instantiated directly using "),ive=a("code"),Cvr=o("__init__()"),wvr=o(" (throws an error)."),Avr=l(),Rt=a("div"),F(I8.$$.fragment),yvr=l(),dve=a("p"),Lvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xvr=l(),lc=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),kvr=o("not"),Svr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Rvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Bvr=l(),F(vM.$$.fragment),Ivr=l(),kr=a("div"),F(q8.$$.fragment),qvr=l(),fve=a("p"),Nvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jvr=l(),nn=a("p"),Dvr=o("The model class to instantiate is selected based on the "),mve=a("code"),Gvr=o("model_type"),Ovr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),Vvr=o("pretrained_model_name_or_path"),Xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),zvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Qvr=l(),oe=a("ul"),FM=a("li"),pve=a("strong"),Hvr=o("albert"),Uvr=o(" \u2014 "),CH=a("a"),Jvr=o("TFAlbertForSequenceClassification"),Yvr=o(" (ALBERT model)"),Kvr=l(),TM=a("li"),uve=a("strong"),Zvr=o("bert"),eFr=o(" \u2014 "),wH=a("a"),oFr=o("TFBertForSequenceClassification"),rFr=o(" (BERT model)"),tFr=l(),MM=a("li"),_ve=a("strong"),aFr=o("camembert"),nFr=o(" \u2014 "),AH=a("a"),sFr=o("TFCamembertForSequenceClassification"),lFr=o(" (CamemBERT model)"),iFr=l(),EM=a("li"),bve=a("strong"),dFr=o("convbert"),cFr=o(" \u2014 "),yH=a("a"),fFr=o("TFConvBertForSequenceClassification"),mFr=o(" (ConvBERT model)"),gFr=l(),CM=a("li"),vve=a("strong"),hFr=o("ctrl"),pFr=o(" \u2014 "),LH=a("a"),uFr=o("TFCTRLForSequenceClassification"),_Fr=o(" (CTRL model)"),bFr=l(),wM=a("li"),Fve=a("strong"),vFr=o("deberta"),FFr=o(" \u2014 "),xH=a("a"),TFr=o("TFDebertaForSequenceClassification"),MFr=o(" (DeBERTa model)"),EFr=l(),AM=a("li"),Tve=a("strong"),CFr=o("deberta-v2"),wFr=o(" \u2014 "),$H=a("a"),AFr=o("TFDebertaV2ForSequenceClassification"),yFr=o(" (DeBERTa-v2 model)"),LFr=l(),yM=a("li"),Mve=a("strong"),xFr=o("distilbert"),$Fr=o(" \u2014 "),kH=a("a"),kFr=o("TFDistilBertForSequenceClassification"),SFr=o(" (DistilBERT model)"),RFr=l(),LM=a("li"),Eve=a("strong"),PFr=o("electra"),BFr=o(" \u2014 "),SH=a("a"),IFr=o("TFElectraForSequenceClassification"),qFr=o(" (ELECTRA model)"),NFr=l(),xM=a("li"),Cve=a("strong"),jFr=o("flaubert"),DFr=o(" \u2014 "),RH=a("a"),GFr=o("TFFlaubertForSequenceClassification"),OFr=o(" (FlauBERT model)"),VFr=l(),$M=a("li"),wve=a("strong"),XFr=o("funnel"),zFr=o(" \u2014 "),PH=a("a"),WFr=o("TFFunnelForSequenceClassification"),QFr=o(" (Funnel Transformer model)"),HFr=l(),kM=a("li"),Ave=a("strong"),UFr=o("gpt2"),JFr=o(" \u2014 "),BH=a("a"),YFr=o("TFGPT2ForSequenceClassification"),KFr=o(" (OpenAI GPT-2 model)"),ZFr=l(),SM=a("li"),yve=a("strong"),e6r=o("gptj"),o6r=o(" \u2014 "),IH=a("a"),r6r=o("TFGPTJForSequenceClassification"),t6r=o(" (GPT-J model)"),a6r=l(),RM=a("li"),Lve=a("strong"),n6r=o("layoutlm"),s6r=o(" \u2014 "),qH=a("a"),l6r=o("TFLayoutLMForSequenceClassification"),i6r=o(" (LayoutLM model)"),d6r=l(),PM=a("li"),xve=a("strong"),c6r=o("longformer"),f6r=o(" \u2014 "),NH=a("a"),m6r=o("TFLongformerForSequenceClassification"),g6r=o(" (Longformer model)"),h6r=l(),BM=a("li"),$ve=a("strong"),p6r=o("mobilebert"),u6r=o(" \u2014 "),jH=a("a"),_6r=o("TFMobileBertForSequenceClassification"),b6r=o(" (MobileBERT model)"),v6r=l(),IM=a("li"),kve=a("strong"),F6r=o("mpnet"),T6r=o(" \u2014 "),DH=a("a"),M6r=o("TFMPNetForSequenceClassification"),E6r=o(" (MPNet model)"),C6r=l(),qM=a("li"),Sve=a("strong"),w6r=o("openai-gpt"),A6r=o(" \u2014 "),GH=a("a"),y6r=o("TFOpenAIGPTForSequenceClassification"),L6r=o(" (OpenAI GPT model)"),x6r=l(),NM=a("li"),Rve=a("strong"),$6r=o("rembert"),k6r=o(" \u2014 "),OH=a("a"),S6r=o("TFRemBertForSequenceClassification"),R6r=o(" (RemBERT model)"),P6r=l(),jM=a("li"),Pve=a("strong"),B6r=o("roberta"),I6r=o(" \u2014 "),VH=a("a"),q6r=o("TFRobertaForSequenceClassification"),N6r=o(" (RoBERTa model)"),j6r=l(),DM=a("li"),Bve=a("strong"),D6r=o("roformer"),G6r=o(" \u2014 "),XH=a("a"),O6r=o("TFRoFormerForSequenceClassification"),V6r=o(" (RoFormer model)"),X6r=l(),GM=a("li"),Ive=a("strong"),z6r=o("tapas"),W6r=o(" \u2014 "),zH=a("a"),Q6r=o("TFTapasForSequenceClassification"),H6r=o(" (TAPAS model)"),U6r=l(),OM=a("li"),qve=a("strong"),J6r=o("transfo-xl"),Y6r=o(" \u2014 "),WH=a("a"),K6r=o("TFTransfoXLForSequenceClassification"),Z6r=o(" (Transformer-XL model)"),eTr=l(),VM=a("li"),Nve=a("strong"),oTr=o("xlm"),rTr=o(" \u2014 "),QH=a("a"),tTr=o("TFXLMForSequenceClassification"),aTr=o(" (XLM model)"),nTr=l(),XM=a("li"),jve=a("strong"),sTr=o("xlm-roberta"),lTr=o(" \u2014 "),HH=a("a"),iTr=o("TFXLMRobertaForSequenceClassification"),dTr=o(" (XLM-RoBERTa model)"),cTr=l(),zM=a("li"),Dve=a("strong"),fTr=o("xlnet"),mTr=o(" \u2014 "),UH=a("a"),gTr=o("TFXLNetForSequenceClassification"),hTr=o(" (XLNet model)"),pTr=l(),F(WM.$$.fragment),YNe=l(),ic=a("h2"),QM=a("a"),Gve=a("span"),F(N8.$$.fragment),uTr=l(),Ove=a("span"),_Tr=o("TFAutoModelForMultipleChoice"),KNe=l(),ar=a("div"),F(j8.$$.fragment),bTr=l(),dc=a("p"),vTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JH=a("a"),FTr=o("from_pretrained()"),TTr=o(" class method or the "),YH=a("a"),MTr=o("from_config()"),ETr=o(` class
method.`),CTr=l(),D8=a("p"),wTr=o("This class cannot be instantiated directly using "),Vve=a("code"),ATr=o("__init__()"),yTr=o(" (throws an error)."),LTr=l(),Pt=a("div"),F(G8.$$.fragment),xTr=l(),Xve=a("p"),$Tr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kTr=l(),cc=a("p"),STr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),RTr=o("not"),PTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),BTr=o("from_pretrained()"),ITr=o(" to load the model weights."),qTr=l(),F(HM.$$.fragment),NTr=l(),Sr=a("div"),F(O8.$$.fragment),jTr=l(),Wve=a("p"),DTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GTr=l(),sn=a("p"),OTr=o("The model class to instantiate is selected based on the "),Qve=a("code"),VTr=o("model_type"),XTr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),zTr=o("pretrained_model_name_or_path"),WTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),QTr=o("pretrained_model_name_or_path"),HTr=o(":"),UTr=l(),pe=a("ul"),UM=a("li"),Jve=a("strong"),JTr=o("albert"),YTr=o(" \u2014 "),ZH=a("a"),KTr=o("TFAlbertForMultipleChoice"),ZTr=o(" (ALBERT model)"),e7r=l(),JM=a("li"),Yve=a("strong"),o7r=o("bert"),r7r=o(" \u2014 "),eU=a("a"),t7r=o("TFBertForMultipleChoice"),a7r=o(" (BERT model)"),n7r=l(),YM=a("li"),Kve=a("strong"),s7r=o("camembert"),l7r=o(" \u2014 "),oU=a("a"),i7r=o("TFCamembertForMultipleChoice"),d7r=o(" (CamemBERT model)"),c7r=l(),KM=a("li"),Zve=a("strong"),f7r=o("convbert"),m7r=o(" \u2014 "),rU=a("a"),g7r=o("TFConvBertForMultipleChoice"),h7r=o(" (ConvBERT model)"),p7r=l(),ZM=a("li"),eFe=a("strong"),u7r=o("distilbert"),_7r=o(" \u2014 "),tU=a("a"),b7r=o("TFDistilBertForMultipleChoice"),v7r=o(" (DistilBERT model)"),F7r=l(),e4=a("li"),oFe=a("strong"),T7r=o("electra"),M7r=o(" \u2014 "),aU=a("a"),E7r=o("TFElectraForMultipleChoice"),C7r=o(" (ELECTRA model)"),w7r=l(),o4=a("li"),rFe=a("strong"),A7r=o("flaubert"),y7r=o(" \u2014 "),nU=a("a"),L7r=o("TFFlaubertForMultipleChoice"),x7r=o(" (FlauBERT model)"),$7r=l(),r4=a("li"),tFe=a("strong"),k7r=o("funnel"),S7r=o(" \u2014 "),sU=a("a"),R7r=o("TFFunnelForMultipleChoice"),P7r=o(" (Funnel Transformer model)"),B7r=l(),t4=a("li"),aFe=a("strong"),I7r=o("longformer"),q7r=o(" \u2014 "),lU=a("a"),N7r=o("TFLongformerForMultipleChoice"),j7r=o(" (Longformer model)"),D7r=l(),a4=a("li"),nFe=a("strong"),G7r=o("mobilebert"),O7r=o(" \u2014 "),iU=a("a"),V7r=o("TFMobileBertForMultipleChoice"),X7r=o(" (MobileBERT model)"),z7r=l(),n4=a("li"),sFe=a("strong"),W7r=o("mpnet"),Q7r=o(" \u2014 "),dU=a("a"),H7r=o("TFMPNetForMultipleChoice"),U7r=o(" (MPNet model)"),J7r=l(),s4=a("li"),lFe=a("strong"),Y7r=o("rembert"),K7r=o(" \u2014 "),cU=a("a"),Z7r=o("TFRemBertForMultipleChoice"),eMr=o(" (RemBERT model)"),oMr=l(),l4=a("li"),iFe=a("strong"),rMr=o("roberta"),tMr=o(" \u2014 "),fU=a("a"),aMr=o("TFRobertaForMultipleChoice"),nMr=o(" (RoBERTa model)"),sMr=l(),i4=a("li"),dFe=a("strong"),lMr=o("roformer"),iMr=o(" \u2014 "),mU=a("a"),dMr=o("TFRoFormerForMultipleChoice"),cMr=o(" (RoFormer model)"),fMr=l(),d4=a("li"),cFe=a("strong"),mMr=o("xlm"),gMr=o(" \u2014 "),gU=a("a"),hMr=o("TFXLMForMultipleChoice"),pMr=o(" (XLM model)"),uMr=l(),c4=a("li"),fFe=a("strong"),_Mr=o("xlm-roberta"),bMr=o(" \u2014 "),hU=a("a"),vMr=o("TFXLMRobertaForMultipleChoice"),FMr=o(" (XLM-RoBERTa model)"),TMr=l(),f4=a("li"),mFe=a("strong"),MMr=o("xlnet"),EMr=o(" \u2014 "),pU=a("a"),CMr=o("TFXLNetForMultipleChoice"),wMr=o(" (XLNet model)"),AMr=l(),F(m4.$$.fragment),ZNe=l(),fc=a("h2"),g4=a("a"),gFe=a("span"),F(V8.$$.fragment),yMr=l(),hFe=a("span"),LMr=o("TFAutoModelForNextSentencePrediction"),eje=l(),nr=a("div"),F(X8.$$.fragment),xMr=l(),mc=a("p"),$Mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uU=a("a"),kMr=o("from_pretrained()"),SMr=o(" class method or the "),_U=a("a"),RMr=o("from_config()"),PMr=o(` class
method.`),BMr=l(),z8=a("p"),IMr=o("This class cannot be instantiated directly using "),pFe=a("code"),qMr=o("__init__()"),NMr=o(" (throws an error)."),jMr=l(),Bt=a("div"),F(W8.$$.fragment),DMr=l(),uFe=a("p"),GMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OMr=l(),gc=a("p"),VMr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),XMr=o("not"),zMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),WMr=o("from_pretrained()"),QMr=o(" to load the model weights."),HMr=l(),F(h4.$$.fragment),UMr=l(),Rr=a("div"),F(Q8.$$.fragment),JMr=l(),bFe=a("p"),YMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KMr=l(),ln=a("p"),ZMr=o("The model class to instantiate is selected based on the "),vFe=a("code"),e4r=o("model_type"),o4r=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),r4r=o("pretrained_model_name_or_path"),t4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(":"),s4r=l(),H8=a("ul"),p4=a("li"),MFe=a("strong"),l4r=o("bert"),i4r=o(" \u2014 "),vU=a("a"),d4r=o("TFBertForNextSentencePrediction"),c4r=o(" (BERT model)"),f4r=l(),u4=a("li"),EFe=a("strong"),m4r=o("mobilebert"),g4r=o(" \u2014 "),FU=a("a"),h4r=o("TFMobileBertForNextSentencePrediction"),p4r=o(" (MobileBERT model)"),u4r=l(),F(_4.$$.fragment),oje=l(),hc=a("h2"),b4=a("a"),CFe=a("span"),F(U8.$$.fragment),_4r=l(),wFe=a("span"),b4r=o("TFAutoModelForTableQuestionAnswering"),rje=l(),sr=a("div"),F(J8.$$.fragment),v4r=l(),pc=a("p"),F4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TU=a("a"),T4r=o("from_pretrained()"),M4r=o(" class method or the "),MU=a("a"),E4r=o("from_config()"),C4r=o(` class
method.`),w4r=l(),Y8=a("p"),A4r=o("This class cannot be instantiated directly using "),AFe=a("code"),y4r=o("__init__()"),L4r=o(" (throws an error)."),x4r=l(),It=a("div"),F(K8.$$.fragment),$4r=l(),yFe=a("p"),k4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),S4r=l(),uc=a("p"),R4r=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),P4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),I4r=o("from_pretrained()"),q4r=o(" to load the model weights."),N4r=l(),F(v4.$$.fragment),j4r=l(),Pr=a("div"),F(Z8.$$.fragment),D4r=l(),xFe=a("p"),G4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O4r=l(),dn=a("p"),V4r=o("The model class to instantiate is selected based on the "),$Fe=a("code"),X4r=o("model_type"),z4r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),W4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(":"),J4r=l(),RFe=a("ul"),F4=a("li"),PFe=a("strong"),Y4r=o("tapas"),K4r=o(" \u2014 "),CU=a("a"),Z4r=o("TFTapasForQuestionAnswering"),eEr=o(" (TAPAS model)"),oEr=l(),F(T4.$$.fragment),tje=l(),_c=a("h2"),M4=a("a"),BFe=a("span"),F(e9.$$.fragment),rEr=l(),IFe=a("span"),tEr=o("TFAutoModelForTokenClassification"),aje=l(),lr=a("div"),F(o9.$$.fragment),aEr=l(),bc=a("p"),nEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wU=a("a"),sEr=o("from_pretrained()"),lEr=o(" class method or the "),AU=a("a"),iEr=o("from_config()"),dEr=o(` class
method.`),cEr=l(),r9=a("p"),fEr=o("This class cannot be instantiated directly using "),qFe=a("code"),mEr=o("__init__()"),gEr=o(" (throws an error)."),hEr=l(),qt=a("div"),F(t9.$$.fragment),pEr=l(),NFe=a("p"),uEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Er=l(),vc=a("p"),bEr=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),vEr=o("not"),FEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),TEr=o("from_pretrained()"),MEr=o(" to load the model weights."),EEr=l(),F(E4.$$.fragment),CEr=l(),Br=a("div"),F(a9.$$.fragment),wEr=l(),DFe=a("p"),AEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yEr=l(),cn=a("p"),LEr=o("The model class to instantiate is selected based on the "),GFe=a("code"),xEr=o("model_type"),$Er=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),kEr=o("pretrained_model_name_or_path"),SEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),REr=o("pretrained_model_name_or_path"),PEr=o(":"),BEr=l(),de=a("ul"),C4=a("li"),XFe=a("strong"),IEr=o("albert"),qEr=o(" \u2014 "),LU=a("a"),NEr=o("TFAlbertForTokenClassification"),jEr=o(" (ALBERT model)"),DEr=l(),w4=a("li"),zFe=a("strong"),GEr=o("bert"),OEr=o(" \u2014 "),xU=a("a"),VEr=o("TFBertForTokenClassification"),XEr=o(" (BERT model)"),zEr=l(),A4=a("li"),WFe=a("strong"),WEr=o("camembert"),QEr=o(" \u2014 "),$U=a("a"),HEr=o("TFCamembertForTokenClassification"),UEr=o(" (CamemBERT model)"),JEr=l(),y4=a("li"),QFe=a("strong"),YEr=o("convbert"),KEr=o(" \u2014 "),kU=a("a"),ZEr=o("TFConvBertForTokenClassification"),eCr=o(" (ConvBERT model)"),oCr=l(),L4=a("li"),HFe=a("strong"),rCr=o("deberta"),tCr=o(" \u2014 "),SU=a("a"),aCr=o("TFDebertaForTokenClassification"),nCr=o(" (DeBERTa model)"),sCr=l(),x4=a("li"),UFe=a("strong"),lCr=o("deberta-v2"),iCr=o(" \u2014 "),RU=a("a"),dCr=o("TFDebertaV2ForTokenClassification"),cCr=o(" (DeBERTa-v2 model)"),fCr=l(),$4=a("li"),JFe=a("strong"),mCr=o("distilbert"),gCr=o(" \u2014 "),PU=a("a"),hCr=o("TFDistilBertForTokenClassification"),pCr=o(" (DistilBERT model)"),uCr=l(),k4=a("li"),YFe=a("strong"),_Cr=o("electra"),bCr=o(" \u2014 "),BU=a("a"),vCr=o("TFElectraForTokenClassification"),FCr=o(" (ELECTRA model)"),TCr=l(),S4=a("li"),KFe=a("strong"),MCr=o("flaubert"),ECr=o(" \u2014 "),IU=a("a"),CCr=o("TFFlaubertForTokenClassification"),wCr=o(" (FlauBERT model)"),ACr=l(),R4=a("li"),ZFe=a("strong"),yCr=o("funnel"),LCr=o(" \u2014 "),qU=a("a"),xCr=o("TFFunnelForTokenClassification"),$Cr=o(" (Funnel Transformer model)"),kCr=l(),P4=a("li"),e6e=a("strong"),SCr=o("layoutlm"),RCr=o(" \u2014 "),NU=a("a"),PCr=o("TFLayoutLMForTokenClassification"),BCr=o(" (LayoutLM model)"),ICr=l(),B4=a("li"),o6e=a("strong"),qCr=o("longformer"),NCr=o(" \u2014 "),jU=a("a"),jCr=o("TFLongformerForTokenClassification"),DCr=o(" (Longformer model)"),GCr=l(),I4=a("li"),r6e=a("strong"),OCr=o("mobilebert"),VCr=o(" \u2014 "),DU=a("a"),XCr=o("TFMobileBertForTokenClassification"),zCr=o(" (MobileBERT model)"),WCr=l(),q4=a("li"),t6e=a("strong"),QCr=o("mpnet"),HCr=o(" \u2014 "),GU=a("a"),UCr=o("TFMPNetForTokenClassification"),JCr=o(" (MPNet model)"),YCr=l(),N4=a("li"),a6e=a("strong"),KCr=o("rembert"),ZCr=o(" \u2014 "),OU=a("a"),e5r=o("TFRemBertForTokenClassification"),o5r=o(" (RemBERT model)"),r5r=l(),j4=a("li"),n6e=a("strong"),t5r=o("roberta"),a5r=o(" \u2014 "),VU=a("a"),n5r=o("TFRobertaForTokenClassification"),s5r=o(" (RoBERTa model)"),l5r=l(),D4=a("li"),s6e=a("strong"),i5r=o("roformer"),d5r=o(" \u2014 "),XU=a("a"),c5r=o("TFRoFormerForTokenClassification"),f5r=o(" (RoFormer model)"),m5r=l(),G4=a("li"),l6e=a("strong"),g5r=o("xlm"),h5r=o(" \u2014 "),zU=a("a"),p5r=o("TFXLMForTokenClassification"),u5r=o(" (XLM model)"),_5r=l(),O4=a("li"),i6e=a("strong"),b5r=o("xlm-roberta"),v5r=o(" \u2014 "),WU=a("a"),F5r=o("TFXLMRobertaForTokenClassification"),T5r=o(" (XLM-RoBERTa model)"),M5r=l(),V4=a("li"),d6e=a("strong"),E5r=o("xlnet"),C5r=o(" \u2014 "),QU=a("a"),w5r=o("TFXLNetForTokenClassification"),A5r=o(" (XLNet model)"),y5r=l(),F(X4.$$.fragment),nje=l(),Fc=a("h2"),z4=a("a"),c6e=a("span"),F(n9.$$.fragment),L5r=l(),f6e=a("span"),x5r=o("TFAutoModelForQuestionAnswering"),sje=l(),ir=a("div"),F(s9.$$.fragment),$5r=l(),Tc=a("p"),k5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HU=a("a"),S5r=o("from_pretrained()"),R5r=o(" class method or the "),UU=a("a"),P5r=o("from_config()"),B5r=o(` class
method.`),I5r=l(),l9=a("p"),q5r=o("This class cannot be instantiated directly using "),m6e=a("code"),N5r=o("__init__()"),j5r=o(" (throws an error)."),D5r=l(),Nt=a("div"),F(i9.$$.fragment),G5r=l(),g6e=a("p"),O5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),V5r=l(),Mc=a("p"),X5r=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),z5r=o("not"),W5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=a("a"),Q5r=o("from_pretrained()"),H5r=o(" to load the model weights."),U5r=l(),F(W4.$$.fragment),J5r=l(),Ir=a("div"),F(d9.$$.fragment),Y5r=l(),p6e=a("p"),K5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z5r=l(),fn=a("p"),e3r=o("The model class to instantiate is selected based on the "),u6e=a("code"),o3r=o("model_type"),r3r=o(` property of the config object (either
passed as an argument or loaded from `),_6e=a("code"),t3r=o("pretrained_model_name_or_path"),a3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),n3r=o("pretrained_model_name_or_path"),s3r=o(":"),l3r=l(),ce=a("ul"),Q4=a("li"),v6e=a("strong"),i3r=o("albert"),d3r=o(" \u2014 "),YU=a("a"),c3r=o("TFAlbertForQuestionAnswering"),f3r=o(" (ALBERT model)"),m3r=l(),H4=a("li"),F6e=a("strong"),g3r=o("bert"),h3r=o(" \u2014 "),KU=a("a"),p3r=o("TFBertForQuestionAnswering"),u3r=o(" (BERT model)"),_3r=l(),U4=a("li"),T6e=a("strong"),b3r=o("camembert"),v3r=o(" \u2014 "),ZU=a("a"),F3r=o("TFCamembertForQuestionAnswering"),T3r=o(" (CamemBERT model)"),M3r=l(),J4=a("li"),M6e=a("strong"),E3r=o("convbert"),C3r=o(" \u2014 "),eJ=a("a"),w3r=o("TFConvBertForQuestionAnswering"),A3r=o(" (ConvBERT model)"),y3r=l(),Y4=a("li"),E6e=a("strong"),L3r=o("deberta"),x3r=o(" \u2014 "),oJ=a("a"),$3r=o("TFDebertaForQuestionAnswering"),k3r=o(" (DeBERTa model)"),S3r=l(),K4=a("li"),C6e=a("strong"),R3r=o("deberta-v2"),P3r=o(" \u2014 "),rJ=a("a"),B3r=o("TFDebertaV2ForQuestionAnswering"),I3r=o(" (DeBERTa-v2 model)"),q3r=l(),Z4=a("li"),w6e=a("strong"),N3r=o("distilbert"),j3r=o(" \u2014 "),tJ=a("a"),D3r=o("TFDistilBertForQuestionAnswering"),G3r=o(" (DistilBERT model)"),O3r=l(),eE=a("li"),A6e=a("strong"),V3r=o("electra"),X3r=o(" \u2014 "),aJ=a("a"),z3r=o("TFElectraForQuestionAnswering"),W3r=o(" (ELECTRA model)"),Q3r=l(),oE=a("li"),y6e=a("strong"),H3r=o("flaubert"),U3r=o(" \u2014 "),nJ=a("a"),J3r=o("TFFlaubertForQuestionAnsweringSimple"),Y3r=o(" (FlauBERT model)"),K3r=l(),rE=a("li"),L6e=a("strong"),Z3r=o("funnel"),ewr=o(" \u2014 "),sJ=a("a"),owr=o("TFFunnelForQuestionAnswering"),rwr=o(" (Funnel Transformer model)"),twr=l(),tE=a("li"),x6e=a("strong"),awr=o("gptj"),nwr=o(" \u2014 "),lJ=a("a"),swr=o("TFGPTJForQuestionAnswering"),lwr=o(" (GPT-J model)"),iwr=l(),aE=a("li"),$6e=a("strong"),dwr=o("longformer"),cwr=o(" \u2014 "),iJ=a("a"),fwr=o("TFLongformerForQuestionAnswering"),mwr=o(" (Longformer model)"),gwr=l(),nE=a("li"),k6e=a("strong"),hwr=o("mobilebert"),pwr=o(" \u2014 "),dJ=a("a"),uwr=o("TFMobileBertForQuestionAnswering"),_wr=o(" (MobileBERT model)"),bwr=l(),sE=a("li"),S6e=a("strong"),vwr=o("mpnet"),Fwr=o(" \u2014 "),cJ=a("a"),Twr=o("TFMPNetForQuestionAnswering"),Mwr=o(" (MPNet model)"),Ewr=l(),lE=a("li"),R6e=a("strong"),Cwr=o("rembert"),wwr=o(" \u2014 "),fJ=a("a"),Awr=o("TFRemBertForQuestionAnswering"),ywr=o(" (RemBERT model)"),Lwr=l(),iE=a("li"),P6e=a("strong"),xwr=o("roberta"),$wr=o(" \u2014 "),mJ=a("a"),kwr=o("TFRobertaForQuestionAnswering"),Swr=o(" (RoBERTa model)"),Rwr=l(),dE=a("li"),B6e=a("strong"),Pwr=o("roformer"),Bwr=o(" \u2014 "),gJ=a("a"),Iwr=o("TFRoFormerForQuestionAnswering"),qwr=o(" (RoFormer model)"),Nwr=l(),cE=a("li"),I6e=a("strong"),jwr=o("xlm"),Dwr=o(" \u2014 "),hJ=a("a"),Gwr=o("TFXLMForQuestionAnsweringSimple"),Owr=o(" (XLM model)"),Vwr=l(),fE=a("li"),q6e=a("strong"),Xwr=o("xlm-roberta"),zwr=o(" \u2014 "),pJ=a("a"),Wwr=o("TFXLMRobertaForQuestionAnswering"),Qwr=o(" (XLM-RoBERTa model)"),Hwr=l(),mE=a("li"),N6e=a("strong"),Uwr=o("xlnet"),Jwr=o(" \u2014 "),uJ=a("a"),Ywr=o("TFXLNetForQuestionAnsweringSimple"),Kwr=o(" (XLNet model)"),Zwr=l(),F(gE.$$.fragment),lje=l(),Ec=a("h2"),hE=a("a"),j6e=a("span"),F(c9.$$.fragment),eAr=l(),D6e=a("span"),oAr=o("TFAutoModelForVision2Seq"),ije=l(),dr=a("div"),F(f9.$$.fragment),rAr=l(),Cc=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_J=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),bJ=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),m9=a("p"),dAr=o("This class cannot be instantiated directly using "),G6e=a("code"),cAr=o("__init__()"),fAr=o(" (throws an error)."),mAr=l(),jt=a("div"),F(g9.$$.fragment),gAr=l(),O6e=a("p"),hAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pAr=l(),wc=a("p"),uAr=o(`Note:
Loading a model from its configuration file does `),V6e=a("strong"),_Ar=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(pE.$$.fragment),MAr=l(),qr=a("div"),F(h9.$$.fragment),EAr=l(),X6e=a("p"),CAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wAr=l(),mn=a("p"),AAr=o("The model class to instantiate is selected based on the "),z6e=a("code"),yAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),H6e=a("ul"),uE=a("li"),U6e=a("strong"),PAr=o("vision-encoder-decoder"),BAr=o(" \u2014 "),FJ=a("a"),IAr=o("TFVisionEncoderDecoderModel"),qAr=o(" (Vision Encoder decoder model)"),NAr=l(),F(_E.$$.fragment),dje=l(),Ac=a("h2"),bE=a("a"),J6e=a("span"),F(p9.$$.fragment),jAr=l(),Y6e=a("span"),DAr=o("TFAutoModelForSpeechSeq2Seq"),cje=l(),cr=a("div"),F(u9.$$.fragment),GAr=l(),yc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TJ=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),MJ=a("a"),zAr=o("from_config()"),WAr=o(` class
method.`),QAr=l(),_9=a("p"),HAr=o("This class cannot be instantiated directly using "),K6e=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),Dt=a("div"),F(b9.$$.fragment),KAr=l(),Z6e=a("p"),ZAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eyr=l(),Lc=a("p"),oyr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),ryr=o("not"),tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),ayr=o("from_pretrained()"),nyr=o(" to load the model weights."),syr=l(),F(vE.$$.fragment),lyr=l(),Nr=a("div"),F(v9.$$.fragment),iyr=l(),oTe=a("p"),dyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cyr=l(),gn=a("p"),fyr=o("The model class to instantiate is selected based on the "),rTe=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),uyr=o("pretrained_model_name_or_path"),_yr=o(":"),byr=l(),nTe=a("ul"),FE=a("li"),sTe=a("strong"),vyr=o("speech_to_text"),Fyr=o(" \u2014 "),CJ=a("a"),Tyr=o("TFSpeech2TextForConditionalGeneration"),Myr=o(" (Speech2Text model)"),Eyr=l(),F(TE.$$.fragment),fje=l(),xc=a("h2"),ME=a("a"),lTe=a("span"),F(F9.$$.fragment),Cyr=l(),iTe=a("span"),wyr=o("FlaxAutoModel"),mje=l(),fr=a("div"),F(T9.$$.fragment),Ayr=l(),$c=a("p"),yyr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wJ=a("a"),Lyr=o("from_pretrained()"),xyr=o(" class method or the "),AJ=a("a"),$yr=o("from_config()"),kyr=o(` class
method.`),Syr=l(),M9=a("p"),Ryr=o("This class cannot be instantiated directly using "),dTe=a("code"),Pyr=o("__init__()"),Byr=o(" (throws an error)."),Iyr=l(),Gt=a("div"),F(E9.$$.fragment),qyr=l(),cTe=a("p"),Nyr=o("Instantiates one of the base model classes of the library from a configuration."),jyr=l(),kc=a("p"),Dyr=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),Gyr=o("not"),Oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),Vyr=o("from_pretrained()"),Xyr=o(" to load the model weights."),zyr=l(),F(EE.$$.fragment),Wyr=l(),jr=a("div"),F(C9.$$.fragment),Qyr=l(),mTe=a("p"),Hyr=o("Instantiate one of the base model classes of the library from a pretrained model."),Uyr=l(),hn=a("p"),Jyr=o("The model class to instantiate is selected based on the "),gTe=a("code"),Yyr=o("model_type"),Kyr=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),Zyr=o("pretrained_model_name_or_path"),eLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),oLr=o("pretrained_model_name_or_path"),rLr=o(":"),tLr=l(),te=a("ul"),CE=a("li"),uTe=a("strong"),aLr=o("albert"),nLr=o(" \u2014 "),LJ=a("a"),sLr=o("FlaxAlbertModel"),lLr=o(" (ALBERT model)"),iLr=l(),wE=a("li"),_Te=a("strong"),dLr=o("bart"),cLr=o(" \u2014 "),xJ=a("a"),fLr=o("FlaxBartModel"),mLr=o(" (BART model)"),gLr=l(),AE=a("li"),bTe=a("strong"),hLr=o("beit"),pLr=o(" \u2014 "),$J=a("a"),uLr=o("FlaxBeitModel"),_Lr=o(" (BEiT model)"),bLr=l(),yE=a("li"),vTe=a("strong"),vLr=o("bert"),FLr=o(" \u2014 "),kJ=a("a"),TLr=o("FlaxBertModel"),MLr=o(" (BERT model)"),ELr=l(),LE=a("li"),FTe=a("strong"),CLr=o("big_bird"),wLr=o(" \u2014 "),SJ=a("a"),ALr=o("FlaxBigBirdModel"),yLr=o(" (BigBird model)"),LLr=l(),xE=a("li"),TTe=a("strong"),xLr=o("blenderbot"),$Lr=o(" \u2014 "),RJ=a("a"),kLr=o("FlaxBlenderbotModel"),SLr=o(" (Blenderbot model)"),RLr=l(),$E=a("li"),MTe=a("strong"),PLr=o("blenderbot-small"),BLr=o(" \u2014 "),PJ=a("a"),ILr=o("FlaxBlenderbotSmallModel"),qLr=o(" (BlenderbotSmall model)"),NLr=l(),kE=a("li"),ETe=a("strong"),jLr=o("clip"),DLr=o(" \u2014 "),BJ=a("a"),GLr=o("FlaxCLIPModel"),OLr=o(" (CLIP model)"),VLr=l(),SE=a("li"),CTe=a("strong"),XLr=o("distilbert"),zLr=o(" \u2014 "),IJ=a("a"),WLr=o("FlaxDistilBertModel"),QLr=o(" (DistilBERT model)"),HLr=l(),RE=a("li"),wTe=a("strong"),ULr=o("electra"),JLr=o(" \u2014 "),qJ=a("a"),YLr=o("FlaxElectraModel"),KLr=o(" (ELECTRA model)"),ZLr=l(),PE=a("li"),ATe=a("strong"),e8r=o("gpt2"),o8r=o(" \u2014 "),NJ=a("a"),r8r=o("FlaxGPT2Model"),t8r=o(" (OpenAI GPT-2 model)"),a8r=l(),BE=a("li"),yTe=a("strong"),n8r=o("gpt_neo"),s8r=o(" \u2014 "),jJ=a("a"),l8r=o("FlaxGPTNeoModel"),i8r=o(" (GPT Neo model)"),d8r=l(),IE=a("li"),LTe=a("strong"),c8r=o("gptj"),f8r=o(" \u2014 "),DJ=a("a"),m8r=o("FlaxGPTJModel"),g8r=o(" (GPT-J model)"),h8r=l(),qE=a("li"),xTe=a("strong"),p8r=o("marian"),u8r=o(" \u2014 "),GJ=a("a"),_8r=o("FlaxMarianModel"),b8r=o(" (Marian model)"),v8r=l(),NE=a("li"),$Te=a("strong"),F8r=o("mbart"),T8r=o(" \u2014 "),OJ=a("a"),M8r=o("FlaxMBartModel"),E8r=o(" (mBART model)"),C8r=l(),jE=a("li"),kTe=a("strong"),w8r=o("mt5"),A8r=o(" \u2014 "),VJ=a("a"),y8r=o("FlaxMT5Model"),L8r=o(" (mT5 model)"),x8r=l(),DE=a("li"),STe=a("strong"),$8r=o("pegasus"),k8r=o(" \u2014 "),XJ=a("a"),S8r=o("FlaxPegasusModel"),R8r=o(" (Pegasus model)"),P8r=l(),GE=a("li"),RTe=a("strong"),B8r=o("roberta"),I8r=o(" \u2014 "),zJ=a("a"),q8r=o("FlaxRobertaModel"),N8r=o(" (RoBERTa model)"),j8r=l(),OE=a("li"),PTe=a("strong"),D8r=o("roformer"),G8r=o(" \u2014 "),WJ=a("a"),O8r=o("FlaxRoFormerModel"),V8r=o(" (RoFormer model)"),X8r=l(),VE=a("li"),BTe=a("strong"),z8r=o("t5"),W8r=o(" \u2014 "),QJ=a("a"),Q8r=o("FlaxT5Model"),H8r=o(" (T5 model)"),U8r=l(),XE=a("li"),ITe=a("strong"),J8r=o("vision-text-dual-encoder"),Y8r=o(" \u2014 "),HJ=a("a"),K8r=o("FlaxVisionTextDualEncoderModel"),Z8r=o(" (VisionTextDualEncoder model)"),e9r=l(),zE=a("li"),qTe=a("strong"),o9r=o("vit"),r9r=o(" \u2014 "),UJ=a("a"),t9r=o("FlaxViTModel"),a9r=o(" (ViT model)"),n9r=l(),WE=a("li"),NTe=a("strong"),s9r=o("wav2vec2"),l9r=o(" \u2014 "),JJ=a("a"),i9r=o("FlaxWav2Vec2Model"),d9r=o(" (Wav2Vec2 model)"),c9r=l(),QE=a("li"),jTe=a("strong"),f9r=o("xglm"),m9r=o(" \u2014 "),YJ=a("a"),g9r=o("FlaxXGLMModel"),h9r=o(" (XGLM model)"),p9r=l(),HE=a("li"),DTe=a("strong"),u9r=o("xlm-roberta"),_9r=o(" \u2014 "),KJ=a("a"),b9r=o("FlaxXLMRobertaModel"),v9r=o(" (XLM-RoBERTa model)"),F9r=l(),F(UE.$$.fragment),gje=l(),Sc=a("h2"),JE=a("a"),GTe=a("span"),F(w9.$$.fragment),T9r=l(),OTe=a("span"),M9r=o("FlaxAutoModelForCausalLM"),hje=l(),mr=a("div"),F(A9.$$.fragment),E9r=l(),Rc=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=a("a"),w9r=o("from_pretrained()"),A9r=o(" class method or the "),eY=a("a"),y9r=o("from_config()"),L9r=o(` class
method.`),x9r=l(),y9=a("p"),$9r=o("This class cannot be instantiated directly using "),VTe=a("code"),k9r=o("__init__()"),S9r=o(" (throws an error)."),R9r=l(),Ot=a("div"),F(L9.$$.fragment),P9r=l(),XTe=a("p"),B9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I9r=l(),Pc=a("p"),q9r=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),N9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),D9r=o("from_pretrained()"),G9r=o(" to load the model weights."),O9r=l(),F(YE.$$.fragment),V9r=l(),Dr=a("div"),F(x9.$$.fragment),X9r=l(),WTe=a("p"),z9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W9r=l(),pn=a("p"),Q9r=o("The model class to instantiate is selected based on the "),QTe=a("code"),H9r=o("model_type"),U9r=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(":"),exr=l(),Re=a("ul"),KE=a("li"),JTe=a("strong"),oxr=o("bart"),rxr=o(" \u2014 "),rY=a("a"),txr=o("FlaxBartForCausalLM"),axr=o(" (BART model)"),nxr=l(),ZE=a("li"),YTe=a("strong"),sxr=o("bert"),lxr=o(" \u2014 "),tY=a("a"),ixr=o("FlaxBertForCausalLM"),dxr=o(" (BERT model)"),cxr=l(),eC=a("li"),KTe=a("strong"),fxr=o("big_bird"),mxr=o(" \u2014 "),aY=a("a"),gxr=o("FlaxBigBirdForCausalLM"),hxr=o(" (BigBird model)"),pxr=l(),oC=a("li"),ZTe=a("strong"),uxr=o("electra"),_xr=o(" \u2014 "),nY=a("a"),bxr=o("FlaxElectraForCausalLM"),vxr=o(" (ELECTRA model)"),Fxr=l(),rC=a("li"),e7e=a("strong"),Txr=o("gpt2"),Mxr=o(" \u2014 "),sY=a("a"),Exr=o("FlaxGPT2LMHeadModel"),Cxr=o(" (OpenAI GPT-2 model)"),wxr=l(),tC=a("li"),o7e=a("strong"),Axr=o("gpt_neo"),yxr=o(" \u2014 "),lY=a("a"),Lxr=o("FlaxGPTNeoForCausalLM"),xxr=o(" (GPT Neo model)"),$xr=l(),aC=a("li"),r7e=a("strong"),kxr=o("gptj"),Sxr=o(" \u2014 "),iY=a("a"),Rxr=o("FlaxGPTJForCausalLM"),Pxr=o(" (GPT-J model)"),Bxr=l(),nC=a("li"),t7e=a("strong"),Ixr=o("roberta"),qxr=o(" \u2014 "),dY=a("a"),Nxr=o("FlaxRobertaForCausalLM"),jxr=o(" (RoBERTa model)"),Dxr=l(),sC=a("li"),a7e=a("strong"),Gxr=o("xglm"),Oxr=o(" \u2014 "),cY=a("a"),Vxr=o("FlaxXGLMForCausalLM"),Xxr=o(" (XGLM model)"),zxr=l(),F(lC.$$.fragment),pje=l(),Bc=a("h2"),iC=a("a"),n7e=a("span"),F($9.$$.fragment),Wxr=l(),s7e=a("span"),Qxr=o("FlaxAutoModelForPreTraining"),uje=l(),gr=a("div"),F(k9.$$.fragment),Hxr=l(),Ic=a("p"),Uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fY=a("a"),Jxr=o("from_pretrained()"),Yxr=o(" class method or the "),mY=a("a"),Kxr=o("from_config()"),Zxr=o(` class
method.`),e$r=l(),S9=a("p"),o$r=o("This class cannot be instantiated directly using "),l7e=a("code"),r$r=o("__init__()"),t$r=o(" (throws an error)."),a$r=l(),Vt=a("div"),F(R9.$$.fragment),n$r=l(),i7e=a("p"),s$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l$r=l(),qc=a("p"),i$r=o(`Note:
Loading a model from its configuration file does `),d7e=a("strong"),d$r=o("not"),c$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),f$r=o("from_pretrained()"),m$r=o(" to load the model weights."),g$r=l(),F(dC.$$.fragment),h$r=l(),Gr=a("div"),F(P9.$$.fragment),p$r=l(),c7e=a("p"),u$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_$r=l(),un=a("p"),b$r=o("The model class to instantiate is selected based on the "),f7e=a("code"),v$r=o("model_type"),F$r=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),T$r=o("pretrained_model_name_or_path"),M$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=a("code"),E$r=o("pretrained_model_name_or_path"),C$r=o(":"),w$r=l(),Ee=a("ul"),cC=a("li"),h7e=a("strong"),A$r=o("albert"),y$r=o(" \u2014 "),hY=a("a"),L$r=o("FlaxAlbertForPreTraining"),x$r=o(" (ALBERT model)"),$$r=l(),fC=a("li"),p7e=a("strong"),k$r=o("bart"),S$r=o(" \u2014 "),pY=a("a"),R$r=o("FlaxBartForConditionalGeneration"),P$r=o(" (BART model)"),B$r=l(),mC=a("li"),u7e=a("strong"),I$r=o("bert"),q$r=o(" \u2014 "),uY=a("a"),N$r=o("FlaxBertForPreTraining"),j$r=o(" (BERT model)"),D$r=l(),gC=a("li"),_7e=a("strong"),G$r=o("big_bird"),O$r=o(" \u2014 "),_Y=a("a"),V$r=o("FlaxBigBirdForPreTraining"),X$r=o(" (BigBird model)"),z$r=l(),hC=a("li"),b7e=a("strong"),W$r=o("electra"),Q$r=o(" \u2014 "),bY=a("a"),H$r=o("FlaxElectraForPreTraining"),U$r=o(" (ELECTRA model)"),J$r=l(),pC=a("li"),v7e=a("strong"),Y$r=o("mbart"),K$r=o(" \u2014 "),vY=a("a"),Z$r=o("FlaxMBartForConditionalGeneration"),ekr=o(" (mBART model)"),okr=l(),uC=a("li"),F7e=a("strong"),rkr=o("mt5"),tkr=o(" \u2014 "),FY=a("a"),akr=o("FlaxMT5ForConditionalGeneration"),nkr=o(" (mT5 model)"),skr=l(),_C=a("li"),T7e=a("strong"),lkr=o("roberta"),ikr=o(" \u2014 "),TY=a("a"),dkr=o("FlaxRobertaForMaskedLM"),ckr=o(" (RoBERTa model)"),fkr=l(),bC=a("li"),M7e=a("strong"),mkr=o("roformer"),gkr=o(" \u2014 "),MY=a("a"),hkr=o("FlaxRoFormerForMaskedLM"),pkr=o(" (RoFormer model)"),ukr=l(),vC=a("li"),E7e=a("strong"),_kr=o("t5"),bkr=o(" \u2014 "),EY=a("a"),vkr=o("FlaxT5ForConditionalGeneration"),Fkr=o(" (T5 model)"),Tkr=l(),FC=a("li"),C7e=a("strong"),Mkr=o("wav2vec2"),Ekr=o(" \u2014 "),CY=a("a"),Ckr=o("FlaxWav2Vec2ForPreTraining"),wkr=o(" (Wav2Vec2 model)"),Akr=l(),TC=a("li"),w7e=a("strong"),ykr=o("xlm-roberta"),Lkr=o(" \u2014 "),wY=a("a"),xkr=o("FlaxXLMRobertaForMaskedLM"),$kr=o(" (XLM-RoBERTa model)"),kkr=l(),F(MC.$$.fragment),_je=l(),Nc=a("h2"),EC=a("a"),A7e=a("span"),F(B9.$$.fragment),Skr=l(),y7e=a("span"),Rkr=o("FlaxAutoModelForMaskedLM"),bje=l(),hr=a("div"),F(I9.$$.fragment),Pkr=l(),jc=a("p"),Bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=a("a"),Ikr=o("from_pretrained()"),qkr=o(" class method or the "),yY=a("a"),Nkr=o("from_config()"),jkr=o(` class
method.`),Dkr=l(),q9=a("p"),Gkr=o("This class cannot be instantiated directly using "),L7e=a("code"),Okr=o("__init__()"),Vkr=o(" (throws an error)."),Xkr=l(),Xt=a("div"),F(N9.$$.fragment),zkr=l(),x7e=a("p"),Wkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qkr=l(),Dc=a("p"),Hkr=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),Ukr=o("not"),Jkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),Ykr=o("from_pretrained()"),Kkr=o(" to load the model weights."),Zkr=l(),F(CC.$$.fragment),eSr=l(),Or=a("div"),F(j9.$$.fragment),oSr=l(),k7e=a("p"),rSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tSr=l(),_n=a("p"),aSr=o("The model class to instantiate is selected based on the "),S7e=a("code"),nSr=o("model_type"),sSr=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),lSr=o("pretrained_model_name_or_path"),iSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),dSr=o("pretrained_model_name_or_path"),cSr=o(":"),fSr=l(),Le=a("ul"),wC=a("li"),B7e=a("strong"),mSr=o("albert"),gSr=o(" \u2014 "),xY=a("a"),hSr=o("FlaxAlbertForMaskedLM"),pSr=o(" (ALBERT model)"),uSr=l(),AC=a("li"),I7e=a("strong"),_Sr=o("bart"),bSr=o(" \u2014 "),$Y=a("a"),vSr=o("FlaxBartForConditionalGeneration"),FSr=o(" (BART model)"),TSr=l(),yC=a("li"),q7e=a("strong"),MSr=o("bert"),ESr=o(" \u2014 "),kY=a("a"),CSr=o("FlaxBertForMaskedLM"),wSr=o(" (BERT model)"),ASr=l(),LC=a("li"),N7e=a("strong"),ySr=o("big_bird"),LSr=o(" \u2014 "),SY=a("a"),xSr=o("FlaxBigBirdForMaskedLM"),$Sr=o(" (BigBird model)"),kSr=l(),xC=a("li"),j7e=a("strong"),SSr=o("distilbert"),RSr=o(" \u2014 "),RY=a("a"),PSr=o("FlaxDistilBertForMaskedLM"),BSr=o(" (DistilBERT model)"),ISr=l(),$C=a("li"),D7e=a("strong"),qSr=o("electra"),NSr=o(" \u2014 "),PY=a("a"),jSr=o("FlaxElectraForMaskedLM"),DSr=o(" (ELECTRA model)"),GSr=l(),kC=a("li"),G7e=a("strong"),OSr=o("mbart"),VSr=o(" \u2014 "),BY=a("a"),XSr=o("FlaxMBartForConditionalGeneration"),zSr=o(" (mBART model)"),WSr=l(),SC=a("li"),O7e=a("strong"),QSr=o("roberta"),HSr=o(" \u2014 "),IY=a("a"),USr=o("FlaxRobertaForMaskedLM"),JSr=o(" (RoBERTa model)"),YSr=l(),RC=a("li"),V7e=a("strong"),KSr=o("roformer"),ZSr=o(" \u2014 "),qY=a("a"),eRr=o("FlaxRoFormerForMaskedLM"),oRr=o(" (RoFormer model)"),rRr=l(),PC=a("li"),X7e=a("strong"),tRr=o("xlm-roberta"),aRr=o(" \u2014 "),NY=a("a"),nRr=o("FlaxXLMRobertaForMaskedLM"),sRr=o(" (XLM-RoBERTa model)"),lRr=l(),F(BC.$$.fragment),vje=l(),Gc=a("h2"),IC=a("a"),z7e=a("span"),F(D9.$$.fragment),iRr=l(),W7e=a("span"),dRr=o("FlaxAutoModelForSeq2SeqLM"),Fje=l(),pr=a("div"),F(G9.$$.fragment),cRr=l(),Oc=a("p"),fRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=a("a"),mRr=o("from_pretrained()"),gRr=o(" class method or the "),DY=a("a"),hRr=o("from_config()"),pRr=o(` class
method.`),uRr=l(),O9=a("p"),_Rr=o("This class cannot be instantiated directly using "),Q7e=a("code"),bRr=o("__init__()"),vRr=o(" (throws an error)."),FRr=l(),zt=a("div"),F(V9.$$.fragment),TRr=l(),H7e=a("p"),MRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ERr=l(),Vc=a("p"),CRr=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),wRr=o("not"),ARr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),yRr=o("from_pretrained()"),LRr=o(" to load the model weights."),xRr=l(),F(qC.$$.fragment),$Rr=l(),Vr=a("div"),F(X9.$$.fragment),kRr=l(),J7e=a("p"),SRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RRr=l(),bn=a("p"),PRr=o("The model class to instantiate is selected based on the "),Y7e=a("code"),BRr=o("model_type"),IRr=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),qRr=o("pretrained_model_name_or_path"),NRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),jRr=o("pretrained_model_name_or_path"),DRr=o(":"),GRr=l(),Pe=a("ul"),NC=a("li"),eMe=a("strong"),ORr=o("bart"),VRr=o(" \u2014 "),OY=a("a"),XRr=o("FlaxBartForConditionalGeneration"),zRr=o(" (BART model)"),WRr=l(),jC=a("li"),oMe=a("strong"),QRr=o("blenderbot"),HRr=o(" \u2014 "),VY=a("a"),URr=o("FlaxBlenderbotForConditionalGeneration"),JRr=o(" (Blenderbot model)"),YRr=l(),DC=a("li"),rMe=a("strong"),KRr=o("blenderbot-small"),ZRr=o(" \u2014 "),XY=a("a"),ePr=o("FlaxBlenderbotSmallForConditionalGeneration"),oPr=o(" (BlenderbotSmall model)"),rPr=l(),GC=a("li"),tMe=a("strong"),tPr=o("encoder-decoder"),aPr=o(" \u2014 "),zY=a("a"),nPr=o("FlaxEncoderDecoderModel"),sPr=o(" (Encoder decoder model)"),lPr=l(),OC=a("li"),aMe=a("strong"),iPr=o("marian"),dPr=o(" \u2014 "),WY=a("a"),cPr=o("FlaxMarianMTModel"),fPr=o(" (Marian model)"),mPr=l(),VC=a("li"),nMe=a("strong"),gPr=o("mbart"),hPr=o(" \u2014 "),QY=a("a"),pPr=o("FlaxMBartForConditionalGeneration"),uPr=o(" (mBART model)"),_Pr=l(),XC=a("li"),sMe=a("strong"),bPr=o("mt5"),vPr=o(" \u2014 "),HY=a("a"),FPr=o("FlaxMT5ForConditionalGeneration"),TPr=o(" (mT5 model)"),MPr=l(),zC=a("li"),lMe=a("strong"),EPr=o("pegasus"),CPr=o(" \u2014 "),UY=a("a"),wPr=o("FlaxPegasusForConditionalGeneration"),APr=o(" (Pegasus model)"),yPr=l(),WC=a("li"),iMe=a("strong"),LPr=o("t5"),xPr=o(" \u2014 "),JY=a("a"),$Pr=o("FlaxT5ForConditionalGeneration"),kPr=o(" (T5 model)"),SPr=l(),F(QC.$$.fragment),Tje=l(),Xc=a("h2"),HC=a("a"),dMe=a("span"),F(z9.$$.fragment),RPr=l(),cMe=a("span"),PPr=o("FlaxAutoModelForSequenceClassification"),Mje=l(),ur=a("div"),F(W9.$$.fragment),BPr=l(),zc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=a("a"),qPr=o("from_pretrained()"),NPr=o(" class method or the "),KY=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),Q9=a("p"),OPr=o("This class cannot be instantiated directly using "),fMe=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),Wt=a("div"),F(H9.$$.fragment),WPr=l(),mMe=a("p"),QPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HPr=l(),Wc=a("p"),UPr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(UC.$$.fragment),oBr=l(),Xr=a("div"),F(U9.$$.fragment),rBr=l(),hMe=a("p"),tBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aBr=l(),vn=a("p"),nBr=o("The model class to instantiate is selected based on the "),pMe=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(":"),mBr=l(),xe=a("ul"),JC=a("li"),bMe=a("strong"),gBr=o("albert"),hBr=o(" \u2014 "),eK=a("a"),pBr=o("FlaxAlbertForSequenceClassification"),uBr=o(" (ALBERT model)"),_Br=l(),YC=a("li"),vMe=a("strong"),bBr=o("bart"),vBr=o(" \u2014 "),oK=a("a"),FBr=o("FlaxBartForSequenceClassification"),TBr=o(" (BART model)"),MBr=l(),KC=a("li"),FMe=a("strong"),EBr=o("bert"),CBr=o(" \u2014 "),rK=a("a"),wBr=o("FlaxBertForSequenceClassification"),ABr=o(" (BERT model)"),yBr=l(),ZC=a("li"),TMe=a("strong"),LBr=o("big_bird"),xBr=o(" \u2014 "),tK=a("a"),$Br=o("FlaxBigBirdForSequenceClassification"),kBr=o(" (BigBird model)"),SBr=l(),e5=a("li"),MMe=a("strong"),RBr=o("distilbert"),PBr=o(" \u2014 "),aK=a("a"),BBr=o("FlaxDistilBertForSequenceClassification"),IBr=o(" (DistilBERT model)"),qBr=l(),o5=a("li"),EMe=a("strong"),NBr=o("electra"),jBr=o(" \u2014 "),nK=a("a"),DBr=o("FlaxElectraForSequenceClassification"),GBr=o(" (ELECTRA model)"),OBr=l(),r5=a("li"),CMe=a("strong"),VBr=o("mbart"),XBr=o(" \u2014 "),sK=a("a"),zBr=o("FlaxMBartForSequenceClassification"),WBr=o(" (mBART model)"),QBr=l(),t5=a("li"),wMe=a("strong"),HBr=o("roberta"),UBr=o(" \u2014 "),lK=a("a"),JBr=o("FlaxRobertaForSequenceClassification"),YBr=o(" (RoBERTa model)"),KBr=l(),a5=a("li"),AMe=a("strong"),ZBr=o("roformer"),eIr=o(" \u2014 "),iK=a("a"),oIr=o("FlaxRoFormerForSequenceClassification"),rIr=o(" (RoFormer model)"),tIr=l(),n5=a("li"),yMe=a("strong"),aIr=o("xlm-roberta"),nIr=o(" \u2014 "),dK=a("a"),sIr=o("FlaxXLMRobertaForSequenceClassification"),lIr=o(" (XLM-RoBERTa model)"),iIr=l(),F(s5.$$.fragment),Eje=l(),Qc=a("h2"),l5=a("a"),LMe=a("span"),F(J9.$$.fragment),dIr=l(),xMe=a("span"),cIr=o("FlaxAutoModelForQuestionAnswering"),Cje=l(),_r=a("div"),F(Y9.$$.fragment),fIr=l(),Hc=a("p"),mIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=a("a"),gIr=o("from_pretrained()"),hIr=o(" class method or the "),fK=a("a"),pIr=o("from_config()"),uIr=o(` class
method.`),_Ir=l(),K9=a("p"),bIr=o("This class cannot be instantiated directly using "),$Me=a("code"),vIr=o("__init__()"),FIr=o(" (throws an error)."),TIr=l(),Qt=a("div"),F(Z9.$$.fragment),MIr=l(),kMe=a("p"),EIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CIr=l(),Uc=a("p"),wIr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),AIr=o("not"),yIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),LIr=o("from_pretrained()"),xIr=o(" to load the model weights."),$Ir=l(),F(i5.$$.fragment),kIr=l(),zr=a("div"),F(ex.$$.fragment),SIr=l(),RMe=a("p"),RIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PIr=l(),Fn=a("p"),BIr=o("The model class to instantiate is selected based on the "),PMe=a("code"),IIr=o("model_type"),qIr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),NIr=o("pretrained_model_name_or_path"),jIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(":"),OIr=l(),$e=a("ul"),d5=a("li"),qMe=a("strong"),VIr=o("albert"),XIr=o(" \u2014 "),gK=a("a"),zIr=o("FlaxAlbertForQuestionAnswering"),WIr=o(" (ALBERT model)"),QIr=l(),c5=a("li"),NMe=a("strong"),HIr=o("bart"),UIr=o(" \u2014 "),hK=a("a"),JIr=o("FlaxBartForQuestionAnswering"),YIr=o(" (BART model)"),KIr=l(),f5=a("li"),jMe=a("strong"),ZIr=o("bert"),eqr=o(" \u2014 "),pK=a("a"),oqr=o("FlaxBertForQuestionAnswering"),rqr=o(" (BERT model)"),tqr=l(),m5=a("li"),DMe=a("strong"),aqr=o("big_bird"),nqr=o(" \u2014 "),uK=a("a"),sqr=o("FlaxBigBirdForQuestionAnswering"),lqr=o(" (BigBird model)"),iqr=l(),g5=a("li"),GMe=a("strong"),dqr=o("distilbert"),cqr=o(" \u2014 "),_K=a("a"),fqr=o("FlaxDistilBertForQuestionAnswering"),mqr=o(" (DistilBERT model)"),gqr=l(),h5=a("li"),OMe=a("strong"),hqr=o("electra"),pqr=o(" \u2014 "),bK=a("a"),uqr=o("FlaxElectraForQuestionAnswering"),_qr=o(" (ELECTRA model)"),bqr=l(),p5=a("li"),VMe=a("strong"),vqr=o("mbart"),Fqr=o(" \u2014 "),vK=a("a"),Tqr=o("FlaxMBartForQuestionAnswering"),Mqr=o(" (mBART model)"),Eqr=l(),u5=a("li"),XMe=a("strong"),Cqr=o("roberta"),wqr=o(" \u2014 "),FK=a("a"),Aqr=o("FlaxRobertaForQuestionAnswering"),yqr=o(" (RoBERTa model)"),Lqr=l(),_5=a("li"),zMe=a("strong"),xqr=o("roformer"),$qr=o(" \u2014 "),TK=a("a"),kqr=o("FlaxRoFormerForQuestionAnswering"),Sqr=o(" (RoFormer model)"),Rqr=l(),b5=a("li"),WMe=a("strong"),Pqr=o("xlm-roberta"),Bqr=o(" \u2014 "),MK=a("a"),Iqr=o("FlaxXLMRobertaForQuestionAnswering"),qqr=o(" (XLM-RoBERTa model)"),Nqr=l(),F(v5.$$.fragment),wje=l(),Jc=a("h2"),F5=a("a"),QMe=a("span"),F(ox.$$.fragment),jqr=l(),HMe=a("span"),Dqr=o("FlaxAutoModelForTokenClassification"),Aje=l(),br=a("div"),F(rx.$$.fragment),Gqr=l(),Yc=a("p"),Oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=a("a"),Vqr=o("from_pretrained()"),Xqr=o(" class method or the "),CK=a("a"),zqr=o("from_config()"),Wqr=o(` class
method.`),Qqr=l(),tx=a("p"),Hqr=o("This class cannot be instantiated directly using "),UMe=a("code"),Uqr=o("__init__()"),Jqr=o(" (throws an error)."),Yqr=l(),Ht=a("div"),F(ax.$$.fragment),Kqr=l(),JMe=a("p"),Zqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eNr=l(),Kc=a("p"),oNr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),rNr=o("not"),tNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),aNr=o("from_pretrained()"),nNr=o(" to load the model weights."),sNr=l(),F(T5.$$.fragment),lNr=l(),Wr=a("div"),F(nx.$$.fragment),iNr=l(),KMe=a("p"),dNr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cNr=l(),Tn=a("p"),fNr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),mNr=o("model_type"),gNr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),hNr=o("pretrained_model_name_or_path"),pNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),uNr=o("pretrained_model_name_or_path"),_Nr=o(":"),bNr=l(),De=a("ul"),M5=a("li"),r4e=a("strong"),vNr=o("albert"),FNr=o(" \u2014 "),AK=a("a"),TNr=o("FlaxAlbertForTokenClassification"),MNr=o(" (ALBERT model)"),ENr=l(),E5=a("li"),t4e=a("strong"),CNr=o("bert"),wNr=o(" \u2014 "),yK=a("a"),ANr=o("FlaxBertForTokenClassification"),yNr=o(" (BERT model)"),LNr=l(),C5=a("li"),a4e=a("strong"),xNr=o("big_bird"),$Nr=o(" \u2014 "),LK=a("a"),kNr=o("FlaxBigBirdForTokenClassification"),SNr=o(" (BigBird model)"),RNr=l(),w5=a("li"),n4e=a("strong"),PNr=o("distilbert"),BNr=o(" \u2014 "),xK=a("a"),INr=o("FlaxDistilBertForTokenClassification"),qNr=o(" (DistilBERT model)"),NNr=l(),A5=a("li"),s4e=a("strong"),jNr=o("electra"),DNr=o(" \u2014 "),$K=a("a"),GNr=o("FlaxElectraForTokenClassification"),ONr=o(" (ELECTRA model)"),VNr=l(),y5=a("li"),l4e=a("strong"),XNr=o("roberta"),zNr=o(" \u2014 "),kK=a("a"),WNr=o("FlaxRobertaForTokenClassification"),QNr=o(" (RoBERTa model)"),HNr=l(),L5=a("li"),i4e=a("strong"),UNr=o("roformer"),JNr=o(" \u2014 "),SK=a("a"),YNr=o("FlaxRoFormerForTokenClassification"),KNr=o(" (RoFormer model)"),ZNr=l(),x5=a("li"),d4e=a("strong"),ejr=o("xlm-roberta"),ojr=o(" \u2014 "),RK=a("a"),rjr=o("FlaxXLMRobertaForTokenClassification"),tjr=o(" (XLM-RoBERTa model)"),ajr=l(),F($5.$$.fragment),yje=l(),Zc=a("h2"),k5=a("a"),c4e=a("span"),F(sx.$$.fragment),njr=l(),f4e=a("span"),sjr=o("FlaxAutoModelForMultipleChoice"),Lje=l(),vr=a("div"),F(lx.$$.fragment),ljr=l(),ef=a("p"),ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=a("a"),djr=o("from_pretrained()"),cjr=o(" class method or the "),BK=a("a"),fjr=o("from_config()"),mjr=o(` class
method.`),gjr=l(),ix=a("p"),hjr=o("This class cannot be instantiated directly using "),m4e=a("code"),pjr=o("__init__()"),ujr=o(" (throws an error)."),_jr=l(),Ut=a("div"),F(dx.$$.fragment),bjr=l(),g4e=a("p"),vjr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fjr=l(),of=a("p"),Tjr=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),Mjr=o("not"),Ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),Cjr=o("from_pretrained()"),wjr=o(" to load the model weights."),Ajr=l(),F(S5.$$.fragment),yjr=l(),Qr=a("div"),F(cx.$$.fragment),Ljr=l(),p4e=a("p"),xjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$jr=l(),Mn=a("p"),kjr=o("The model class to instantiate is selected based on the "),u4e=a("code"),Sjr=o("model_type"),Rjr=o(` property of the config object (either
passed as an argument or loaded from `),_4e=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(":"),Njr=l(),Ge=a("ul"),R5=a("li"),v4e=a("strong"),jjr=o("albert"),Djr=o(" \u2014 "),qK=a("a"),Gjr=o("FlaxAlbertForMultipleChoice"),Ojr=o(" (ALBERT model)"),Vjr=l(),P5=a("li"),F4e=a("strong"),Xjr=o("bert"),zjr=o(" \u2014 "),NK=a("a"),Wjr=o("FlaxBertForMultipleChoice"),Qjr=o(" (BERT model)"),Hjr=l(),B5=a("li"),T4e=a("strong"),Ujr=o("big_bird"),Jjr=o(" \u2014 "),jK=a("a"),Yjr=o("FlaxBigBirdForMultipleChoice"),Kjr=o(" (BigBird model)"),Zjr=l(),I5=a("li"),M4e=a("strong"),eDr=o("distilbert"),oDr=o(" \u2014 "),DK=a("a"),rDr=o("FlaxDistilBertForMultipleChoice"),tDr=o(" (DistilBERT model)"),aDr=l(),q5=a("li"),E4e=a("strong"),nDr=o("electra"),sDr=o(" \u2014 "),GK=a("a"),lDr=o("FlaxElectraForMultipleChoice"),iDr=o(" (ELECTRA model)"),dDr=l(),N5=a("li"),C4e=a("strong"),cDr=o("roberta"),fDr=o(" \u2014 "),OK=a("a"),mDr=o("FlaxRobertaForMultipleChoice"),gDr=o(" (RoBERTa model)"),hDr=l(),j5=a("li"),w4e=a("strong"),pDr=o("roformer"),uDr=o(" \u2014 "),VK=a("a"),_Dr=o("FlaxRoFormerForMultipleChoice"),bDr=o(" (RoFormer model)"),vDr=l(),D5=a("li"),A4e=a("strong"),FDr=o("xlm-roberta"),TDr=o(" \u2014 "),XK=a("a"),MDr=o("FlaxXLMRobertaForMultipleChoice"),EDr=o(" (XLM-RoBERTa model)"),CDr=l(),F(G5.$$.fragment),xje=l(),rf=a("h2"),O5=a("a"),y4e=a("span"),F(fx.$$.fragment),wDr=l(),L4e=a("span"),ADr=o("FlaxAutoModelForNextSentencePrediction"),$je=l(),Fr=a("div"),F(mx.$$.fragment),yDr=l(),tf=a("p"),LDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=a("a"),xDr=o("from_pretrained()"),$Dr=o(" class method or the "),WK=a("a"),kDr=o("from_config()"),SDr=o(` class
method.`),RDr=l(),gx=a("p"),PDr=o("This class cannot be instantiated directly using "),x4e=a("code"),BDr=o("__init__()"),IDr=o(" (throws an error)."),qDr=l(),Jt=a("div"),F(hx.$$.fragment),NDr=l(),$4e=a("p"),jDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DDr=l(),af=a("p"),GDr=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),ODr=o("not"),VDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),XDr=o("from_pretrained()"),zDr=o(" to load the model weights."),WDr=l(),F(V5.$$.fragment),QDr=l(),Hr=a("div"),F(px.$$.fragment),HDr=l(),S4e=a("p"),UDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JDr=l(),En=a("p"),YDr=o("The model class to instantiate is selected based on the "),R4e=a("code"),KDr=o("model_type"),ZDr=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),eGr=o("pretrained_model_name_or_path"),oGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(":"),aGr=l(),I4e=a("ul"),X5=a("li"),q4e=a("strong"),nGr=o("bert"),sGr=o(" \u2014 "),HK=a("a"),lGr=o("FlaxBertForNextSentencePrediction"),iGr=o(" (BERT model)"),dGr=l(),F(z5.$$.fragment),kje=l(),nf=a("h2"),W5=a("a"),N4e=a("span"),F(ux.$$.fragment),cGr=l(),j4e=a("span"),fGr=o("FlaxAutoModelForImageClassification"),Sje=l(),Tr=a("div"),F(_x.$$.fragment),mGr=l(),sf=a("p"),gGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=a("a"),hGr=o("from_pretrained()"),pGr=o(" class method or the "),JK=a("a"),uGr=o("from_config()"),_Gr=o(` class
method.`),bGr=l(),bx=a("p"),vGr=o("This class cannot be instantiated directly using "),D4e=a("code"),FGr=o("__init__()"),TGr=o(" (throws an error)."),MGr=l(),Yt=a("div"),F(vx.$$.fragment),EGr=l(),G4e=a("p"),CGr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wGr=l(),lf=a("p"),AGr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),yGr=o("not"),LGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),xGr=o("from_pretrained()"),$Gr=o(" to load the model weights."),kGr=l(),F(Q5.$$.fragment),SGr=l(),Ur=a("div"),F(Fx.$$.fragment),RGr=l(),V4e=a("p"),PGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BGr=l(),Cn=a("p"),IGr=o("The model class to instantiate is selected based on the "),X4e=a("code"),qGr=o("model_type"),NGr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),jGr=o("pretrained_model_name_or_path"),DGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(":"),VGr=l(),Tx=a("ul"),H5=a("li"),Q4e=a("strong"),XGr=o("beit"),zGr=o(" \u2014 "),KK=a("a"),WGr=o("FlaxBeitForImageClassification"),QGr=o(" (BEiT model)"),HGr=l(),U5=a("li"),H4e=a("strong"),UGr=o("vit"),JGr=o(" \u2014 "),ZK=a("a"),YGr=o("FlaxViTForImageClassification"),KGr=o(" (ViT model)"),ZGr=l(),F(J5.$$.fragment),Rje=l(),df=a("h2"),Y5=a("a"),U4e=a("span"),F(Mx.$$.fragment),eOr=l(),J4e=a("span"),oOr=o("FlaxAutoModelForVision2Seq"),Pje=l(),Mr=a("div"),F(Ex.$$.fragment),rOr=l(),cf=a("p"),tOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=a("a"),aOr=o("from_pretrained()"),nOr=o(" class method or the "),oZ=a("a"),sOr=o("from_config()"),lOr=o(` class
method.`),iOr=l(),Cx=a("p"),dOr=o("This class cannot be instantiated directly using "),Y4e=a("code"),cOr=o("__init__()"),fOr=o(" (throws an error)."),mOr=l(),Kt=a("div"),F(wx.$$.fragment),gOr=l(),K4e=a("p"),hOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pOr=l(),ff=a("p"),uOr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),_Or=o("not"),bOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),vOr=o("from_pretrained()"),FOr=o(" to load the model weights."),TOr=l(),F(K5.$$.fragment),MOr=l(),Jr=a("div"),F(Ax.$$.fragment),EOr=l(),eEe=a("p"),COr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wOr=l(),wn=a("p"),AOr=o("The model class to instantiate is selected based on the "),oEe=a("code"),yOr=o("model_type"),LOr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),xOr=o("pretrained_model_name_or_path"),$Or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),kOr=o("pretrained_model_name_or_path"),SOr=o(":"),ROr=l(),aEe=a("ul"),Z5=a("li"),nEe=a("strong"),POr=o("vision-encoder-decoder"),BOr=o(" \u2014 "),tZ=a("a"),IOr=o("FlaxVisionEncoderDecoderModel"),qOr=o(" (Vision Encoder decoder model)"),NOr=l(),F(e3.$$.fragment),this.h()},l(f){const _=ixt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var yx=s(p);m=n(yx,"A",{id:!0,class:!0,href:!0});var sEe=s(m);u=n(sEe,"SPAN",{});var lEe=s(u);T(d.$$.fragment,lEe),lEe.forEach(t),sEe.forEach(t),h=i(yx),Mo=n(yx,"SPAN",{});var iEe=s(Mo);fi=r(iEe,"Auto Classes"),iEe.forEach(t),yx.forEach(t),pf=i(f),rt=n(f,"P",{});var Lx=s(rt);mi=r(Lx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Lx,"CODE",{});var dEe=s(gi);bA=r(dEe,"from_pretrained()"),dEe.forEach(t),uf=r(Lx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Lx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var cEe=s(yn);vA=r(cEe,"AutoConfig"),cEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var fEe=s(xn);FA=r(fEe,"AutoModel"),fEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var mEe=s($n);TA=r(mEe,"AutoTokenizer"),mEe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var xx=s(Ae);D$=r(xx,"will create a model that is an instance of "),_i=n(xx,"A",{href:!0});var gEe=s(_i);G$=r(gEe,"BertModel"),gEe.forEach(t),O$=r(xx,"."),xx.forEach(t),Eo=i(f),wa=n(f,"P",{});var $x=s(wa);V$=r($x,"There is one class of "),bf=n($x,"CODE",{});var hEe=s(bf);X$=r(hEe,"AutoModel"),hEe.forEach(t),VGe=r($x," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$x.forEach(t),Sqe=i(f),bi=n(f,"H2",{class:!0});var kx=s(bi);vf=n(kx,"A",{id:!0,class:!0,href:!0});var pEe=s(vf);Jee=n(pEe,"SPAN",{});var uEe=s(Jee);T(MA.$$.fragment,uEe),uEe.forEach(t),pEe.forEach(t),XGe=i(kx),Yee=n(kx,"SPAN",{});var _Ee=s(Yee);zGe=r(_Ee,"Extending the Auto Classes"),_Ee.forEach(t),kx.forEach(t),Rqe=i(f),kn=n(f,"P",{});var mf=s(kn);WGe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kee=n(mf,"CODE",{});var bEe=s(Kee);QGe=r(bEe,"NewModel"),bEe.forEach(t),HGe=r(mf,", make sure you have a "),Zee=n(mf,"CODE",{});var vEe=s(Zee);UGe=r(vEe,"NewModelConfig"),vEe.forEach(t),JGe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Pqe=i(f),T(EA.$$.fragment,f),Bqe=i(f),z$=n(f,"P",{});var FEe=s(z$);YGe=r(FEe,"You will then be able to use the auto classes like you would usually do!"),FEe.forEach(t),Iqe=i(f),T(Ff.$$.fragment,f),qqe=i(f),vi=n(f,"H2",{class:!0});var Sx=s(vi);Tf=n(Sx,"A",{id:!0,class:!0,href:!0});var TEe=s(Tf);eoe=n(TEe,"SPAN",{});var MEe=s(eoe);T(CA.$$.fragment,MEe),MEe.forEach(t),TEe.forEach(t),KGe=i(Sx),ooe=n(Sx,"SPAN",{});var EEe=s(ooe);ZGe=r(EEe,"AutoConfig"),EEe.forEach(t),Sx.forEach(t),Nqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(wA.$$.fragment,et),eOe=i(et),AA=n(et,"P",{});var Rx=s(AA);oOe=r(Rx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W$=n(Rx,"A",{href:!0});var CEe=s(W$);rOe=r(CEe,"from_pretrained()"),CEe.forEach(t),tOe=r(Rx," class method."),Rx.forEach(t),aOe=i(et),yA=n(et,"P",{});var Px=s(yA);nOe=r(Px,"This class cannot be instantiated directly using "),roe=n(Px,"CODE",{});var wEe=s(roe);sOe=r(wEe,"__init__()"),wEe.forEach(t),lOe=r(Px," (throws an error)."),Px.forEach(t),iOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(LA.$$.fragment,ot),dOe=i(ot),toe=n(ot,"P",{});var AEe=s(toe);cOe=r(AEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),AEe.forEach(t),fOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);mOe=r(gf,"The configuration class to instantiate is selected based on the "),aoe=n(gf,"CODE",{});var yEe=s(aoe);gOe=r(yEe,"model_type"),yEe.forEach(t),hOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),noe=n(gf,"CODE",{});var LEe=s(noe);pOe=r(LEe,"pretrained_model_name_or_path"),LEe.forEach(t),uOe=r(gf,":"),gf.forEach(t),_Oe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var o3=s(Mf);soe=n(o3,"STRONG",{});var xEe=s(soe);bOe=r(xEe,"albert"),xEe.forEach(t),vOe=r(o3," \u2014 "),Q$=n(o3,"A",{href:!0});var $Ee=s(Q$);FOe=r($Ee,"AlbertConfig"),$Ee.forEach(t),TOe=r(o3," (ALBERT model)"),o3.forEach(t),MOe=i(y),Ef=n(y,"LI",{});var r3=s(Ef);loe=n(r3,"STRONG",{});var kEe=s(loe);EOe=r(kEe,"bart"),kEe.forEach(t),COe=r(r3," \u2014 "),H$=n(r3,"A",{href:!0});var SEe=s(H$);wOe=r(SEe,"BartConfig"),SEe.forEach(t),AOe=r(r3," (BART model)"),r3.forEach(t),yOe=i(y),Cf=n(y,"LI",{});var t3=s(Cf);ioe=n(t3,"STRONG",{});var REe=s(ioe);LOe=r(REe,"beit"),REe.forEach(t),xOe=r(t3," \u2014 "),U$=n(t3,"A",{href:!0});var PEe=s(U$);$Oe=r(PEe,"BeitConfig"),PEe.forEach(t),kOe=r(t3," (BEiT model)"),t3.forEach(t),SOe=i(y),wf=n(y,"LI",{});var a3=s(wf);doe=n(a3,"STRONG",{});var BEe=s(doe);ROe=r(BEe,"bert"),BEe.forEach(t),POe=r(a3," \u2014 "),J$=n(a3,"A",{href:!0});var IEe=s(J$);BOe=r(IEe,"BertConfig"),IEe.forEach(t),IOe=r(a3," (BERT model)"),a3.forEach(t),qOe=i(y),Af=n(y,"LI",{});var n3=s(Af);coe=n(n3,"STRONG",{});var qEe=s(coe);NOe=r(qEe,"bert-generation"),qEe.forEach(t),jOe=r(n3," \u2014 "),Y$=n(n3,"A",{href:!0});var NEe=s(Y$);DOe=r(NEe,"BertGenerationConfig"),NEe.forEach(t),GOe=r(n3," (Bert Generation model)"),n3.forEach(t),OOe=i(y),yf=n(y,"LI",{});var s3=s(yf);foe=n(s3,"STRONG",{});var jEe=s(foe);VOe=r(jEe,"big_bird"),jEe.forEach(t),XOe=r(s3," \u2014 "),K$=n(s3,"A",{href:!0});var DEe=s(K$);zOe=r(DEe,"BigBirdConfig"),DEe.forEach(t),WOe=r(s3," (BigBird model)"),s3.forEach(t),QOe=i(y),Lf=n(y,"LI",{});var l3=s(Lf);moe=n(l3,"STRONG",{});var GEe=s(moe);HOe=r(GEe,"bigbird_pegasus"),GEe.forEach(t),UOe=r(l3," \u2014 "),Z$=n(l3,"A",{href:!0});var OEe=s(Z$);JOe=r(OEe,"BigBirdPegasusConfig"),OEe.forEach(t),YOe=r(l3," (BigBirdPegasus model)"),l3.forEach(t),KOe=i(y),xf=n(y,"LI",{});var i3=s(xf);goe=n(i3,"STRONG",{});var VEe=s(goe);ZOe=r(VEe,"blenderbot"),VEe.forEach(t),eVe=r(i3," \u2014 "),ek=n(i3,"A",{href:!0});var XEe=s(ek);oVe=r(XEe,"BlenderbotConfig"),XEe.forEach(t),rVe=r(i3," (Blenderbot model)"),i3.forEach(t),tVe=i(y),$f=n(y,"LI",{});var d3=s($f);hoe=n(d3,"STRONG",{});var zEe=s(hoe);aVe=r(zEe,"blenderbot-small"),zEe.forEach(t),nVe=r(d3," \u2014 "),ok=n(d3,"A",{href:!0});var WEe=s(ok);sVe=r(WEe,"BlenderbotSmallConfig"),WEe.forEach(t),lVe=r(d3," (BlenderbotSmall model)"),d3.forEach(t),iVe=i(y),kf=n(y,"LI",{});var c3=s(kf);poe=n(c3,"STRONG",{});var QEe=s(poe);dVe=r(QEe,"camembert"),QEe.forEach(t),cVe=r(c3," \u2014 "),rk=n(c3,"A",{href:!0});var HEe=s(rk);fVe=r(HEe,"CamembertConfig"),HEe.forEach(t),mVe=r(c3," (CamemBERT model)"),c3.forEach(t),gVe=i(y),Sf=n(y,"LI",{});var f3=s(Sf);uoe=n(f3,"STRONG",{});var UEe=s(uoe);hVe=r(UEe,"canine"),UEe.forEach(t),pVe=r(f3," \u2014 "),tk=n(f3,"A",{href:!0});var JEe=s(tk);uVe=r(JEe,"CanineConfig"),JEe.forEach(t),_Ve=r(f3," (Canine model)"),f3.forEach(t),bVe=i(y),Rf=n(y,"LI",{});var m3=s(Rf);_oe=n(m3,"STRONG",{});var YEe=s(_oe);vVe=r(YEe,"clip"),YEe.forEach(t),FVe=r(m3," \u2014 "),ak=n(m3,"A",{href:!0});var KEe=s(ak);TVe=r(KEe,"CLIPConfig"),KEe.forEach(t),MVe=r(m3," (CLIP model)"),m3.forEach(t),EVe=i(y),Pf=n(y,"LI",{});var g3=s(Pf);boe=n(g3,"STRONG",{});var ZEe=s(boe);CVe=r(ZEe,"convbert"),ZEe.forEach(t),wVe=r(g3," \u2014 "),nk=n(g3,"A",{href:!0});var eCe=s(nk);AVe=r(eCe,"ConvBertConfig"),eCe.forEach(t),yVe=r(g3," (ConvBERT model)"),g3.forEach(t),LVe=i(y),Bf=n(y,"LI",{});var h3=s(Bf);voe=n(h3,"STRONG",{});var oCe=s(voe);xVe=r(oCe,"convnext"),oCe.forEach(t),$Ve=r(h3," \u2014 "),sk=n(h3,"A",{href:!0});var rCe=s(sk);kVe=r(rCe,"ConvNextConfig"),rCe.forEach(t),SVe=r(h3," (ConvNext model)"),h3.forEach(t),RVe=i(y),If=n(y,"LI",{});var p3=s(If);Foe=n(p3,"STRONG",{});var tCe=s(Foe);PVe=r(tCe,"ctrl"),tCe.forEach(t),BVe=r(p3," \u2014 "),lk=n(p3,"A",{href:!0});var aCe=s(lk);IVe=r(aCe,"CTRLConfig"),aCe.forEach(t),qVe=r(p3," (CTRL model)"),p3.forEach(t),NVe=i(y),qf=n(y,"LI",{});var u3=s(qf);Toe=n(u3,"STRONG",{});var nCe=s(Toe);jVe=r(nCe,"cvt"),nCe.forEach(t),DVe=r(u3," \u2014 "),ik=n(u3,"A",{href:!0});var sCe=s(ik);GVe=r(sCe,"CvtConfig"),sCe.forEach(t),OVe=r(u3," (CvT model)"),u3.forEach(t),VVe=i(y),Nf=n(y,"LI",{});var _3=s(Nf);Moe=n(_3,"STRONG",{});var lCe=s(Moe);XVe=r(lCe,"data2vec-audio"),lCe.forEach(t),zVe=r(_3," \u2014 "),dk=n(_3,"A",{href:!0});var iCe=s(dk);WVe=r(iCe,"Data2VecAudioConfig"),iCe.forEach(t),QVe=r(_3," (Data2VecAudio model)"),_3.forEach(t),HVe=i(y),jf=n(y,"LI",{});var b3=s(jf);Eoe=n(b3,"STRONG",{});var dCe=s(Eoe);UVe=r(dCe,"data2vec-text"),dCe.forEach(t),JVe=r(b3," \u2014 "),ck=n(b3,"A",{href:!0});var cCe=s(ck);YVe=r(cCe,"Data2VecTextConfig"),cCe.forEach(t),KVe=r(b3," (Data2VecText model)"),b3.forEach(t),ZVe=i(y),Df=n(y,"LI",{});var v3=s(Df);Coe=n(v3,"STRONG",{});var fCe=s(Coe);eXe=r(fCe,"data2vec-vision"),fCe.forEach(t),oXe=r(v3," \u2014 "),fk=n(v3,"A",{href:!0});var mCe=s(fk);rXe=r(mCe,"Data2VecVisionConfig"),mCe.forEach(t),tXe=r(v3," (Data2VecVision model)"),v3.forEach(t),aXe=i(y),Gf=n(y,"LI",{});var F3=s(Gf);woe=n(F3,"STRONG",{});var gCe=s(woe);nXe=r(gCe,"deberta"),gCe.forEach(t),sXe=r(F3," \u2014 "),mk=n(F3,"A",{href:!0});var hCe=s(mk);lXe=r(hCe,"DebertaConfig"),hCe.forEach(t),iXe=r(F3," (DeBERTa model)"),F3.forEach(t),dXe=i(y),Of=n(y,"LI",{});var T3=s(Of);Aoe=n(T3,"STRONG",{});var pCe=s(Aoe);cXe=r(pCe,"deberta-v2"),pCe.forEach(t),fXe=r(T3," \u2014 "),gk=n(T3,"A",{href:!0});var uCe=s(gk);mXe=r(uCe,"DebertaV2Config"),uCe.forEach(t),gXe=r(T3," (DeBERTa-v2 model)"),T3.forEach(t),hXe=i(y),Vf=n(y,"LI",{});var M3=s(Vf);yoe=n(M3,"STRONG",{});var _Ce=s(yoe);pXe=r(_Ce,"decision_transformer"),_Ce.forEach(t),uXe=r(M3," \u2014 "),hk=n(M3,"A",{href:!0});var bCe=s(hk);_Xe=r(bCe,"DecisionTransformerConfig"),bCe.forEach(t),bXe=r(M3," (Decision Transformer model)"),M3.forEach(t),vXe=i(y),Xf=n(y,"LI",{});var E3=s(Xf);Loe=n(E3,"STRONG",{});var vCe=s(Loe);FXe=r(vCe,"deit"),vCe.forEach(t),TXe=r(E3," \u2014 "),pk=n(E3,"A",{href:!0});var DOr=s(pk);MXe=r(DOr,"DeiTConfig"),DOr.forEach(t),EXe=r(E3," (DeiT model)"),E3.forEach(t),CXe=i(y),zf=n(y,"LI",{});var FCe=s(zf);xoe=n(FCe,"STRONG",{});var GOr=s(xoe);wXe=r(GOr,"detr"),GOr.forEach(t),AXe=r(FCe," \u2014 "),uk=n(FCe,"A",{href:!0});var OOr=s(uk);yXe=r(OOr,"DetrConfig"),OOr.forEach(t),LXe=r(FCe," (DETR model)"),FCe.forEach(t),xXe=i(y),Wf=n(y,"LI",{});var TCe=s(Wf);$oe=n(TCe,"STRONG",{});var VOr=s($oe);$Xe=r(VOr,"distilbert"),VOr.forEach(t),kXe=r(TCe," \u2014 "),_k=n(TCe,"A",{href:!0});var XOr=s(_k);SXe=r(XOr,"DistilBertConfig"),XOr.forEach(t),RXe=r(TCe," (DistilBERT model)"),TCe.forEach(t),PXe=i(y),Qf=n(y,"LI",{});var MCe=s(Qf);koe=n(MCe,"STRONG",{});var zOr=s(koe);BXe=r(zOr,"dpr"),zOr.forEach(t),IXe=r(MCe," \u2014 "),bk=n(MCe,"A",{href:!0});var WOr=s(bk);qXe=r(WOr,"DPRConfig"),WOr.forEach(t),NXe=r(MCe," (DPR model)"),MCe.forEach(t),jXe=i(y),Hf=n(y,"LI",{});var ECe=s(Hf);Soe=n(ECe,"STRONG",{});var QOr=s(Soe);DXe=r(QOr,"dpt"),QOr.forEach(t),GXe=r(ECe," \u2014 "),vk=n(ECe,"A",{href:!0});var HOr=s(vk);OXe=r(HOr,"DPTConfig"),HOr.forEach(t),VXe=r(ECe," (DPT model)"),ECe.forEach(t),XXe=i(y),Uf=n(y,"LI",{});var CCe=s(Uf);Roe=n(CCe,"STRONG",{});var UOr=s(Roe);zXe=r(UOr,"electra"),UOr.forEach(t),WXe=r(CCe," \u2014 "),Fk=n(CCe,"A",{href:!0});var JOr=s(Fk);QXe=r(JOr,"ElectraConfig"),JOr.forEach(t),HXe=r(CCe," (ELECTRA model)"),CCe.forEach(t),UXe=i(y),Jf=n(y,"LI",{});var wCe=s(Jf);Poe=n(wCe,"STRONG",{});var YOr=s(Poe);JXe=r(YOr,"encoder-decoder"),YOr.forEach(t),YXe=r(wCe," \u2014 "),Tk=n(wCe,"A",{href:!0});var KOr=s(Tk);KXe=r(KOr,"EncoderDecoderConfig"),KOr.forEach(t),ZXe=r(wCe," (Encoder decoder model)"),wCe.forEach(t),eze=i(y),Yf=n(y,"LI",{});var ACe=s(Yf);Boe=n(ACe,"STRONG",{});var ZOr=s(Boe);oze=r(ZOr,"flaubert"),ZOr.forEach(t),rze=r(ACe," \u2014 "),Mk=n(ACe,"A",{href:!0});var eVr=s(Mk);tze=r(eVr,"FlaubertConfig"),eVr.forEach(t),aze=r(ACe," (FlauBERT model)"),ACe.forEach(t),nze=i(y),Kf=n(y,"LI",{});var yCe=s(Kf);Ioe=n(yCe,"STRONG",{});var oVr=s(Ioe);sze=r(oVr,"flava"),oVr.forEach(t),lze=r(yCe," \u2014 "),Ek=n(yCe,"A",{href:!0});var rVr=s(Ek);ize=r(rVr,"FlavaConfig"),rVr.forEach(t),dze=r(yCe," (Flava model)"),yCe.forEach(t),cze=i(y),Zf=n(y,"LI",{});var LCe=s(Zf);qoe=n(LCe,"STRONG",{});var tVr=s(qoe);fze=r(tVr,"fnet"),tVr.forEach(t),mze=r(LCe," \u2014 "),Ck=n(LCe,"A",{href:!0});var aVr=s(Ck);gze=r(aVr,"FNetConfig"),aVr.forEach(t),hze=r(LCe," (FNet model)"),LCe.forEach(t),pze=i(y),em=n(y,"LI",{});var xCe=s(em);Noe=n(xCe,"STRONG",{});var nVr=s(Noe);uze=r(nVr,"fsmt"),nVr.forEach(t),_ze=r(xCe," \u2014 "),wk=n(xCe,"A",{href:!0});var sVr=s(wk);bze=r(sVr,"FSMTConfig"),sVr.forEach(t),vze=r(xCe," (FairSeq Machine-Translation model)"),xCe.forEach(t),Fze=i(y),om=n(y,"LI",{});var $Ce=s(om);joe=n($Ce,"STRONG",{});var lVr=s(joe);Tze=r(lVr,"funnel"),lVr.forEach(t),Mze=r($Ce," \u2014 "),Ak=n($Ce,"A",{href:!0});var iVr=s(Ak);Eze=r(iVr,"FunnelConfig"),iVr.forEach(t),Cze=r($Ce," (Funnel Transformer model)"),$Ce.forEach(t),wze=i(y),rm=n(y,"LI",{});var kCe=s(rm);Doe=n(kCe,"STRONG",{});var dVr=s(Doe);Aze=r(dVr,"glpn"),dVr.forEach(t),yze=r(kCe," \u2014 "),yk=n(kCe,"A",{href:!0});var cVr=s(yk);Lze=r(cVr,"GLPNConfig"),cVr.forEach(t),xze=r(kCe," (GLPN model)"),kCe.forEach(t),$ze=i(y),tm=n(y,"LI",{});var SCe=s(tm);Goe=n(SCe,"STRONG",{});var fVr=s(Goe);kze=r(fVr,"gpt2"),fVr.forEach(t),Sze=r(SCe," \u2014 "),Lk=n(SCe,"A",{href:!0});var mVr=s(Lk);Rze=r(mVr,"GPT2Config"),mVr.forEach(t),Pze=r(SCe," (OpenAI GPT-2 model)"),SCe.forEach(t),Bze=i(y),am=n(y,"LI",{});var RCe=s(am);Ooe=n(RCe,"STRONG",{});var gVr=s(Ooe);Ize=r(gVr,"gpt_neo"),gVr.forEach(t),qze=r(RCe," \u2014 "),xk=n(RCe,"A",{href:!0});var hVr=s(xk);Nze=r(hVr,"GPTNeoConfig"),hVr.forEach(t),jze=r(RCe," (GPT Neo model)"),RCe.forEach(t),Dze=i(y),nm=n(y,"LI",{});var PCe=s(nm);Voe=n(PCe,"STRONG",{});var pVr=s(Voe);Gze=r(pVr,"gptj"),pVr.forEach(t),Oze=r(PCe," \u2014 "),$k=n(PCe,"A",{href:!0});var uVr=s($k);Vze=r(uVr,"GPTJConfig"),uVr.forEach(t),Xze=r(PCe," (GPT-J model)"),PCe.forEach(t),zze=i(y),sm=n(y,"LI",{});var BCe=s(sm);Xoe=n(BCe,"STRONG",{});var _Vr=s(Xoe);Wze=r(_Vr,"hubert"),_Vr.forEach(t),Qze=r(BCe," \u2014 "),kk=n(BCe,"A",{href:!0});var bVr=s(kk);Hze=r(bVr,"HubertConfig"),bVr.forEach(t),Uze=r(BCe," (Hubert model)"),BCe.forEach(t),Jze=i(y),lm=n(y,"LI",{});var ICe=s(lm);zoe=n(ICe,"STRONG",{});var vVr=s(zoe);Yze=r(vVr,"ibert"),vVr.forEach(t),Kze=r(ICe," \u2014 "),Sk=n(ICe,"A",{href:!0});var FVr=s(Sk);Zze=r(FVr,"IBertConfig"),FVr.forEach(t),eWe=r(ICe," (I-BERT model)"),ICe.forEach(t),oWe=i(y),im=n(y,"LI",{});var qCe=s(im);Woe=n(qCe,"STRONG",{});var TVr=s(Woe);rWe=r(TVr,"imagegpt"),TVr.forEach(t),tWe=r(qCe," \u2014 "),Rk=n(qCe,"A",{href:!0});var MVr=s(Rk);aWe=r(MVr,"ImageGPTConfig"),MVr.forEach(t),nWe=r(qCe," (ImageGPT model)"),qCe.forEach(t),sWe=i(y),dm=n(y,"LI",{});var NCe=s(dm);Qoe=n(NCe,"STRONG",{});var EVr=s(Qoe);lWe=r(EVr,"layoutlm"),EVr.forEach(t),iWe=r(NCe," \u2014 "),Pk=n(NCe,"A",{href:!0});var CVr=s(Pk);dWe=r(CVr,"LayoutLMConfig"),CVr.forEach(t),cWe=r(NCe," (LayoutLM model)"),NCe.forEach(t),fWe=i(y),cm=n(y,"LI",{});var jCe=s(cm);Hoe=n(jCe,"STRONG",{});var wVr=s(Hoe);mWe=r(wVr,"layoutlmv2"),wVr.forEach(t),gWe=r(jCe," \u2014 "),Bk=n(jCe,"A",{href:!0});var AVr=s(Bk);hWe=r(AVr,"LayoutLMv2Config"),AVr.forEach(t),pWe=r(jCe," (LayoutLMv2 model)"),jCe.forEach(t),uWe=i(y),fm=n(y,"LI",{});var DCe=s(fm);Uoe=n(DCe,"STRONG",{});var yVr=s(Uoe);_We=r(yVr,"layoutlmv3"),yVr.forEach(t),bWe=r(DCe," \u2014 "),Ik=n(DCe,"A",{href:!0});var LVr=s(Ik);vWe=r(LVr,"LayoutLMv3Config"),LVr.forEach(t),FWe=r(DCe," (LayoutLMv3 model)"),DCe.forEach(t),TWe=i(y),mm=n(y,"LI",{});var GCe=s(mm);Joe=n(GCe,"STRONG",{});var xVr=s(Joe);MWe=r(xVr,"led"),xVr.forEach(t),EWe=r(GCe," \u2014 "),qk=n(GCe,"A",{href:!0});var $Vr=s(qk);CWe=r($Vr,"LEDConfig"),$Vr.forEach(t),wWe=r(GCe," (LED model)"),GCe.forEach(t),AWe=i(y),gm=n(y,"LI",{});var OCe=s(gm);Yoe=n(OCe,"STRONG",{});var kVr=s(Yoe);yWe=r(kVr,"longformer"),kVr.forEach(t),LWe=r(OCe," \u2014 "),Nk=n(OCe,"A",{href:!0});var SVr=s(Nk);xWe=r(SVr,"LongformerConfig"),SVr.forEach(t),$We=r(OCe," (Longformer model)"),OCe.forEach(t),kWe=i(y),hm=n(y,"LI",{});var VCe=s(hm);Koe=n(VCe,"STRONG",{});var RVr=s(Koe);SWe=r(RVr,"luke"),RVr.forEach(t),RWe=r(VCe," \u2014 "),jk=n(VCe,"A",{href:!0});var PVr=s(jk);PWe=r(PVr,"LukeConfig"),PVr.forEach(t),BWe=r(VCe," (LUKE model)"),VCe.forEach(t),IWe=i(y),pm=n(y,"LI",{});var XCe=s(pm);Zoe=n(XCe,"STRONG",{});var BVr=s(Zoe);qWe=r(BVr,"lxmert"),BVr.forEach(t),NWe=r(XCe," \u2014 "),Dk=n(XCe,"A",{href:!0});var IVr=s(Dk);jWe=r(IVr,"LxmertConfig"),IVr.forEach(t),DWe=r(XCe," (LXMERT model)"),XCe.forEach(t),GWe=i(y),um=n(y,"LI",{});var zCe=s(um);ere=n(zCe,"STRONG",{});var qVr=s(ere);OWe=r(qVr,"m2m_100"),qVr.forEach(t),VWe=r(zCe," \u2014 "),Gk=n(zCe,"A",{href:!0});var NVr=s(Gk);XWe=r(NVr,"M2M100Config"),NVr.forEach(t),zWe=r(zCe," (M2M100 model)"),zCe.forEach(t),WWe=i(y),_m=n(y,"LI",{});var WCe=s(_m);ore=n(WCe,"STRONG",{});var jVr=s(ore);QWe=r(jVr,"marian"),jVr.forEach(t),HWe=r(WCe," \u2014 "),Ok=n(WCe,"A",{href:!0});var DVr=s(Ok);UWe=r(DVr,"MarianConfig"),DVr.forEach(t),JWe=r(WCe," (Marian model)"),WCe.forEach(t),YWe=i(y),bm=n(y,"LI",{});var QCe=s(bm);rre=n(QCe,"STRONG",{});var GVr=s(rre);KWe=r(GVr,"maskformer"),GVr.forEach(t),ZWe=r(QCe," \u2014 "),Vk=n(QCe,"A",{href:!0});var OVr=s(Vk);eQe=r(OVr,"MaskFormerConfig"),OVr.forEach(t),oQe=r(QCe," (MaskFormer model)"),QCe.forEach(t),rQe=i(y),vm=n(y,"LI",{});var HCe=s(vm);tre=n(HCe,"STRONG",{});var VVr=s(tre);tQe=r(VVr,"mbart"),VVr.forEach(t),aQe=r(HCe," \u2014 "),Xk=n(HCe,"A",{href:!0});var XVr=s(Xk);nQe=r(XVr,"MBartConfig"),XVr.forEach(t),sQe=r(HCe," (mBART model)"),HCe.forEach(t),lQe=i(y),Fm=n(y,"LI",{});var UCe=s(Fm);are=n(UCe,"STRONG",{});var zVr=s(are);iQe=r(zVr,"megatron-bert"),zVr.forEach(t),dQe=r(UCe," \u2014 "),zk=n(UCe,"A",{href:!0});var WVr=s(zk);cQe=r(WVr,"MegatronBertConfig"),WVr.forEach(t),fQe=r(UCe," (MegatronBert model)"),UCe.forEach(t),mQe=i(y),Tm=n(y,"LI",{});var JCe=s(Tm);nre=n(JCe,"STRONG",{});var QVr=s(nre);gQe=r(QVr,"mobilebert"),QVr.forEach(t),hQe=r(JCe," \u2014 "),Wk=n(JCe,"A",{href:!0});var HVr=s(Wk);pQe=r(HVr,"MobileBertConfig"),HVr.forEach(t),uQe=r(JCe," (MobileBERT model)"),JCe.forEach(t),_Qe=i(y),Mm=n(y,"LI",{});var YCe=s(Mm);sre=n(YCe,"STRONG",{});var UVr=s(sre);bQe=r(UVr,"mpnet"),UVr.forEach(t),vQe=r(YCe," \u2014 "),Qk=n(YCe,"A",{href:!0});var JVr=s(Qk);FQe=r(JVr,"MPNetConfig"),JVr.forEach(t),TQe=r(YCe," (MPNet model)"),YCe.forEach(t),MQe=i(y),Em=n(y,"LI",{});var KCe=s(Em);lre=n(KCe,"STRONG",{});var YVr=s(lre);EQe=r(YVr,"mt5"),YVr.forEach(t),CQe=r(KCe," \u2014 "),Hk=n(KCe,"A",{href:!0});var KVr=s(Hk);wQe=r(KVr,"MT5Config"),KVr.forEach(t),AQe=r(KCe," (mT5 model)"),KCe.forEach(t),yQe=i(y),Cm=n(y,"LI",{});var ZCe=s(Cm);ire=n(ZCe,"STRONG",{});var ZVr=s(ire);LQe=r(ZVr,"nystromformer"),ZVr.forEach(t),xQe=r(ZCe," \u2014 "),Uk=n(ZCe,"A",{href:!0});var eXr=s(Uk);$Qe=r(eXr,"NystromformerConfig"),eXr.forEach(t),kQe=r(ZCe," (Nystromformer model)"),ZCe.forEach(t),SQe=i(y),wm=n(y,"LI",{});var e5e=s(wm);dre=n(e5e,"STRONG",{});var oXr=s(dre);RQe=r(oXr,"openai-gpt"),oXr.forEach(t),PQe=r(e5e," \u2014 "),Jk=n(e5e,"A",{href:!0});var rXr=s(Jk);BQe=r(rXr,"OpenAIGPTConfig"),rXr.forEach(t),IQe=r(e5e," (OpenAI GPT model)"),e5e.forEach(t),qQe=i(y),Am=n(y,"LI",{});var o5e=s(Am);cre=n(o5e,"STRONG",{});var tXr=s(cre);NQe=r(tXr,"opt"),tXr.forEach(t),jQe=r(o5e," \u2014 "),Yk=n(o5e,"A",{href:!0});var aXr=s(Yk);DQe=r(aXr,"OPTConfig"),aXr.forEach(t),GQe=r(o5e," (OPT model)"),o5e.forEach(t),OQe=i(y),ym=n(y,"LI",{});var r5e=s(ym);fre=n(r5e,"STRONG",{});var nXr=s(fre);VQe=r(nXr,"pegasus"),nXr.forEach(t),XQe=r(r5e," \u2014 "),Kk=n(r5e,"A",{href:!0});var sXr=s(Kk);zQe=r(sXr,"PegasusConfig"),sXr.forEach(t),WQe=r(r5e," (Pegasus model)"),r5e.forEach(t),QQe=i(y),Lm=n(y,"LI",{});var t5e=s(Lm);mre=n(t5e,"STRONG",{});var lXr=s(mre);HQe=r(lXr,"perceiver"),lXr.forEach(t),UQe=r(t5e," \u2014 "),Zk=n(t5e,"A",{href:!0});var iXr=s(Zk);JQe=r(iXr,"PerceiverConfig"),iXr.forEach(t),YQe=r(t5e," (Perceiver model)"),t5e.forEach(t),KQe=i(y),xm=n(y,"LI",{});var a5e=s(xm);gre=n(a5e,"STRONG",{});var dXr=s(gre);ZQe=r(dXr,"plbart"),dXr.forEach(t),eHe=r(a5e," \u2014 "),eS=n(a5e,"A",{href:!0});var cXr=s(eS);oHe=r(cXr,"PLBartConfig"),cXr.forEach(t),rHe=r(a5e," (PLBart model)"),a5e.forEach(t),tHe=i(y),$m=n(y,"LI",{});var n5e=s($m);hre=n(n5e,"STRONG",{});var fXr=s(hre);aHe=r(fXr,"poolformer"),fXr.forEach(t),nHe=r(n5e," \u2014 "),oS=n(n5e,"A",{href:!0});var mXr=s(oS);sHe=r(mXr,"PoolFormerConfig"),mXr.forEach(t),lHe=r(n5e," (PoolFormer model)"),n5e.forEach(t),iHe=i(y),km=n(y,"LI",{});var s5e=s(km);pre=n(s5e,"STRONG",{});var gXr=s(pre);dHe=r(gXr,"prophetnet"),gXr.forEach(t),cHe=r(s5e," \u2014 "),rS=n(s5e,"A",{href:!0});var hXr=s(rS);fHe=r(hXr,"ProphetNetConfig"),hXr.forEach(t),mHe=r(s5e," (ProphetNet model)"),s5e.forEach(t),gHe=i(y),Sm=n(y,"LI",{});var l5e=s(Sm);ure=n(l5e,"STRONG",{});var pXr=s(ure);hHe=r(pXr,"qdqbert"),pXr.forEach(t),pHe=r(l5e," \u2014 "),tS=n(l5e,"A",{href:!0});var uXr=s(tS);uHe=r(uXr,"QDQBertConfig"),uXr.forEach(t),_He=r(l5e," (QDQBert model)"),l5e.forEach(t),bHe=i(y),Rm=n(y,"LI",{});var i5e=s(Rm);_re=n(i5e,"STRONG",{});var _Xr=s(_re);vHe=r(_Xr,"rag"),_Xr.forEach(t),FHe=r(i5e," \u2014 "),aS=n(i5e,"A",{href:!0});var bXr=s(aS);THe=r(bXr,"RagConfig"),bXr.forEach(t),MHe=r(i5e," (RAG model)"),i5e.forEach(t),EHe=i(y),Pm=n(y,"LI",{});var d5e=s(Pm);bre=n(d5e,"STRONG",{});var vXr=s(bre);CHe=r(vXr,"realm"),vXr.forEach(t),wHe=r(d5e," \u2014 "),nS=n(d5e,"A",{href:!0});var FXr=s(nS);AHe=r(FXr,"RealmConfig"),FXr.forEach(t),yHe=r(d5e," (Realm model)"),d5e.forEach(t),LHe=i(y),Bm=n(y,"LI",{});var c5e=s(Bm);vre=n(c5e,"STRONG",{});var TXr=s(vre);xHe=r(TXr,"reformer"),TXr.forEach(t),$He=r(c5e," \u2014 "),sS=n(c5e,"A",{href:!0});var MXr=s(sS);kHe=r(MXr,"ReformerConfig"),MXr.forEach(t),SHe=r(c5e," (Reformer model)"),c5e.forEach(t),RHe=i(y),Im=n(y,"LI",{});var f5e=s(Im);Fre=n(f5e,"STRONG",{});var EXr=s(Fre);PHe=r(EXr,"regnet"),EXr.forEach(t),BHe=r(f5e," \u2014 "),lS=n(f5e,"A",{href:!0});var CXr=s(lS);IHe=r(CXr,"RegNetConfig"),CXr.forEach(t),qHe=r(f5e," (RegNet model)"),f5e.forEach(t),NHe=i(y),qm=n(y,"LI",{});var m5e=s(qm);Tre=n(m5e,"STRONG",{});var wXr=s(Tre);jHe=r(wXr,"rembert"),wXr.forEach(t),DHe=r(m5e," \u2014 "),iS=n(m5e,"A",{href:!0});var AXr=s(iS);GHe=r(AXr,"RemBertConfig"),AXr.forEach(t),OHe=r(m5e," (RemBERT model)"),m5e.forEach(t),VHe=i(y),Nm=n(y,"LI",{});var g5e=s(Nm);Mre=n(g5e,"STRONG",{});var yXr=s(Mre);XHe=r(yXr,"resnet"),yXr.forEach(t),zHe=r(g5e," \u2014 "),dS=n(g5e,"A",{href:!0});var LXr=s(dS);WHe=r(LXr,"ResNetConfig"),LXr.forEach(t),QHe=r(g5e," (ResNet model)"),g5e.forEach(t),HHe=i(y),jm=n(y,"LI",{});var h5e=s(jm);Ere=n(h5e,"STRONG",{});var xXr=s(Ere);UHe=r(xXr,"retribert"),xXr.forEach(t),JHe=r(h5e," \u2014 "),cS=n(h5e,"A",{href:!0});var $Xr=s(cS);YHe=r($Xr,"RetriBertConfig"),$Xr.forEach(t),KHe=r(h5e," (RetriBERT model)"),h5e.forEach(t),ZHe=i(y),Dm=n(y,"LI",{});var p5e=s(Dm);Cre=n(p5e,"STRONG",{});var kXr=s(Cre);eUe=r(kXr,"roberta"),kXr.forEach(t),oUe=r(p5e," \u2014 "),fS=n(p5e,"A",{href:!0});var SXr=s(fS);rUe=r(SXr,"RobertaConfig"),SXr.forEach(t),tUe=r(p5e," (RoBERTa model)"),p5e.forEach(t),aUe=i(y),Gm=n(y,"LI",{});var u5e=s(Gm);wre=n(u5e,"STRONG",{});var RXr=s(wre);nUe=r(RXr,"roformer"),RXr.forEach(t),sUe=r(u5e," \u2014 "),mS=n(u5e,"A",{href:!0});var PXr=s(mS);lUe=r(PXr,"RoFormerConfig"),PXr.forEach(t),iUe=r(u5e," (RoFormer model)"),u5e.forEach(t),dUe=i(y),Om=n(y,"LI",{});var _5e=s(Om);Are=n(_5e,"STRONG",{});var BXr=s(Are);cUe=r(BXr,"segformer"),BXr.forEach(t),fUe=r(_5e," \u2014 "),gS=n(_5e,"A",{href:!0});var IXr=s(gS);mUe=r(IXr,"SegformerConfig"),IXr.forEach(t),gUe=r(_5e," (SegFormer model)"),_5e.forEach(t),hUe=i(y),Vm=n(y,"LI",{});var b5e=s(Vm);yre=n(b5e,"STRONG",{});var qXr=s(yre);pUe=r(qXr,"sew"),qXr.forEach(t),uUe=r(b5e," \u2014 "),hS=n(b5e,"A",{href:!0});var NXr=s(hS);_Ue=r(NXr,"SEWConfig"),NXr.forEach(t),bUe=r(b5e," (SEW model)"),b5e.forEach(t),vUe=i(y),Xm=n(y,"LI",{});var v5e=s(Xm);Lre=n(v5e,"STRONG",{});var jXr=s(Lre);FUe=r(jXr,"sew-d"),jXr.forEach(t),TUe=r(v5e," \u2014 "),pS=n(v5e,"A",{href:!0});var DXr=s(pS);MUe=r(DXr,"SEWDConfig"),DXr.forEach(t),EUe=r(v5e," (SEW-D model)"),v5e.forEach(t),CUe=i(y),zm=n(y,"LI",{});var F5e=s(zm);xre=n(F5e,"STRONG",{});var GXr=s(xre);wUe=r(GXr,"speech-encoder-decoder"),GXr.forEach(t),AUe=r(F5e," \u2014 "),uS=n(F5e,"A",{href:!0});var OXr=s(uS);yUe=r(OXr,"SpeechEncoderDecoderConfig"),OXr.forEach(t),LUe=r(F5e," (Speech Encoder decoder model)"),F5e.forEach(t),xUe=i(y),Wm=n(y,"LI",{});var T5e=s(Wm);$re=n(T5e,"STRONG",{});var VXr=s($re);$Ue=r(VXr,"speech_to_text"),VXr.forEach(t),kUe=r(T5e," \u2014 "),_S=n(T5e,"A",{href:!0});var XXr=s(_S);SUe=r(XXr,"Speech2TextConfig"),XXr.forEach(t),RUe=r(T5e," (Speech2Text model)"),T5e.forEach(t),PUe=i(y),Qm=n(y,"LI",{});var M5e=s(Qm);kre=n(M5e,"STRONG",{});var zXr=s(kre);BUe=r(zXr,"speech_to_text_2"),zXr.forEach(t),IUe=r(M5e," \u2014 "),bS=n(M5e,"A",{href:!0});var WXr=s(bS);qUe=r(WXr,"Speech2Text2Config"),WXr.forEach(t),NUe=r(M5e," (Speech2Text2 model)"),M5e.forEach(t),jUe=i(y),Hm=n(y,"LI",{});var E5e=s(Hm);Sre=n(E5e,"STRONG",{});var QXr=s(Sre);DUe=r(QXr,"splinter"),QXr.forEach(t),GUe=r(E5e," \u2014 "),vS=n(E5e,"A",{href:!0});var HXr=s(vS);OUe=r(HXr,"SplinterConfig"),HXr.forEach(t),VUe=r(E5e," (Splinter model)"),E5e.forEach(t),XUe=i(y),Um=n(y,"LI",{});var C5e=s(Um);Rre=n(C5e,"STRONG",{});var UXr=s(Rre);zUe=r(UXr,"squeezebert"),UXr.forEach(t),WUe=r(C5e," \u2014 "),FS=n(C5e,"A",{href:!0});var JXr=s(FS);QUe=r(JXr,"SqueezeBertConfig"),JXr.forEach(t),HUe=r(C5e," (SqueezeBERT model)"),C5e.forEach(t),UUe=i(y),Jm=n(y,"LI",{});var w5e=s(Jm);Pre=n(w5e,"STRONG",{});var YXr=s(Pre);JUe=r(YXr,"swin"),YXr.forEach(t),YUe=r(w5e," \u2014 "),TS=n(w5e,"A",{href:!0});var KXr=s(TS);KUe=r(KXr,"SwinConfig"),KXr.forEach(t),ZUe=r(w5e," (Swin model)"),w5e.forEach(t),eJe=i(y),Ym=n(y,"LI",{});var A5e=s(Ym);Bre=n(A5e,"STRONG",{});var ZXr=s(Bre);oJe=r(ZXr,"t5"),ZXr.forEach(t),rJe=r(A5e," \u2014 "),MS=n(A5e,"A",{href:!0});var ezr=s(MS);tJe=r(ezr,"T5Config"),ezr.forEach(t),aJe=r(A5e," (T5 model)"),A5e.forEach(t),nJe=i(y),Km=n(y,"LI",{});var y5e=s(Km);Ire=n(y5e,"STRONG",{});var ozr=s(Ire);sJe=r(ozr,"tapas"),ozr.forEach(t),lJe=r(y5e," \u2014 "),ES=n(y5e,"A",{href:!0});var rzr=s(ES);iJe=r(rzr,"TapasConfig"),rzr.forEach(t),dJe=r(y5e," (TAPAS model)"),y5e.forEach(t),cJe=i(y),Zm=n(y,"LI",{});var L5e=s(Zm);qre=n(L5e,"STRONG",{});var tzr=s(qre);fJe=r(tzr,"trajectory_transformer"),tzr.forEach(t),mJe=r(L5e," \u2014 "),CS=n(L5e,"A",{href:!0});var azr=s(CS);gJe=r(azr,"TrajectoryTransformerConfig"),azr.forEach(t),hJe=r(L5e," (Trajectory Transformer model)"),L5e.forEach(t),pJe=i(y),eg=n(y,"LI",{});var x5e=s(eg);Nre=n(x5e,"STRONG",{});var nzr=s(Nre);uJe=r(nzr,"transfo-xl"),nzr.forEach(t),_Je=r(x5e," \u2014 "),wS=n(x5e,"A",{href:!0});var szr=s(wS);bJe=r(szr,"TransfoXLConfig"),szr.forEach(t),vJe=r(x5e," (Transformer-XL model)"),x5e.forEach(t),FJe=i(y),og=n(y,"LI",{});var $5e=s(og);jre=n($5e,"STRONG",{});var lzr=s(jre);TJe=r(lzr,"trocr"),lzr.forEach(t),MJe=r($5e," \u2014 "),AS=n($5e,"A",{href:!0});var izr=s(AS);EJe=r(izr,"TrOCRConfig"),izr.forEach(t),CJe=r($5e," (TrOCR model)"),$5e.forEach(t),wJe=i(y),rg=n(y,"LI",{});var k5e=s(rg);Dre=n(k5e,"STRONG",{});var dzr=s(Dre);AJe=r(dzr,"unispeech"),dzr.forEach(t),yJe=r(k5e," \u2014 "),yS=n(k5e,"A",{href:!0});var czr=s(yS);LJe=r(czr,"UniSpeechConfig"),czr.forEach(t),xJe=r(k5e," (UniSpeech model)"),k5e.forEach(t),$Je=i(y),tg=n(y,"LI",{});var S5e=s(tg);Gre=n(S5e,"STRONG",{});var fzr=s(Gre);kJe=r(fzr,"unispeech-sat"),fzr.forEach(t),SJe=r(S5e," \u2014 "),LS=n(S5e,"A",{href:!0});var mzr=s(LS);RJe=r(mzr,"UniSpeechSatConfig"),mzr.forEach(t),PJe=r(S5e," (UniSpeechSat model)"),S5e.forEach(t),BJe=i(y),ag=n(y,"LI",{});var R5e=s(ag);Ore=n(R5e,"STRONG",{});var gzr=s(Ore);IJe=r(gzr,"van"),gzr.forEach(t),qJe=r(R5e," \u2014 "),xS=n(R5e,"A",{href:!0});var hzr=s(xS);NJe=r(hzr,"VanConfig"),hzr.forEach(t),jJe=r(R5e," (VAN model)"),R5e.forEach(t),DJe=i(y),ng=n(y,"LI",{});var P5e=s(ng);Vre=n(P5e,"STRONG",{});var pzr=s(Vre);GJe=r(pzr,"vilt"),pzr.forEach(t),OJe=r(P5e," \u2014 "),$S=n(P5e,"A",{href:!0});var uzr=s($S);VJe=r(uzr,"ViltConfig"),uzr.forEach(t),XJe=r(P5e," (ViLT model)"),P5e.forEach(t),zJe=i(y),sg=n(y,"LI",{});var B5e=s(sg);Xre=n(B5e,"STRONG",{});var _zr=s(Xre);WJe=r(_zr,"vision-encoder-decoder"),_zr.forEach(t),QJe=r(B5e," \u2014 "),kS=n(B5e,"A",{href:!0});var bzr=s(kS);HJe=r(bzr,"VisionEncoderDecoderConfig"),bzr.forEach(t),UJe=r(B5e," (Vision Encoder decoder model)"),B5e.forEach(t),JJe=i(y),lg=n(y,"LI",{});var I5e=s(lg);zre=n(I5e,"STRONG",{});var vzr=s(zre);YJe=r(vzr,"vision-text-dual-encoder"),vzr.forEach(t),KJe=r(I5e," \u2014 "),SS=n(I5e,"A",{href:!0});var Fzr=s(SS);ZJe=r(Fzr,"VisionTextDualEncoderConfig"),Fzr.forEach(t),eYe=r(I5e," (VisionTextDualEncoder model)"),I5e.forEach(t),oYe=i(y),ig=n(y,"LI",{});var q5e=s(ig);Wre=n(q5e,"STRONG",{});var Tzr=s(Wre);rYe=r(Tzr,"visual_bert"),Tzr.forEach(t),tYe=r(q5e," \u2014 "),RS=n(q5e,"A",{href:!0});var Mzr=s(RS);aYe=r(Mzr,"VisualBertConfig"),Mzr.forEach(t),nYe=r(q5e," (VisualBert model)"),q5e.forEach(t),sYe=i(y),dg=n(y,"LI",{});var N5e=s(dg);Qre=n(N5e,"STRONG",{});var Ezr=s(Qre);lYe=r(Ezr,"vit"),Ezr.forEach(t),iYe=r(N5e," \u2014 "),PS=n(N5e,"A",{href:!0});var Czr=s(PS);dYe=r(Czr,"ViTConfig"),Czr.forEach(t),cYe=r(N5e," (ViT model)"),N5e.forEach(t),fYe=i(y),cg=n(y,"LI",{});var j5e=s(cg);Hre=n(j5e,"STRONG",{});var wzr=s(Hre);mYe=r(wzr,"vit_mae"),wzr.forEach(t),gYe=r(j5e," \u2014 "),BS=n(j5e,"A",{href:!0});var Azr=s(BS);hYe=r(Azr,"ViTMAEConfig"),Azr.forEach(t),pYe=r(j5e," (ViTMAE model)"),j5e.forEach(t),uYe=i(y),fg=n(y,"LI",{});var D5e=s(fg);Ure=n(D5e,"STRONG",{});var yzr=s(Ure);_Ye=r(yzr,"wav2vec2"),yzr.forEach(t),bYe=r(D5e," \u2014 "),IS=n(D5e,"A",{href:!0});var Lzr=s(IS);vYe=r(Lzr,"Wav2Vec2Config"),Lzr.forEach(t),FYe=r(D5e," (Wav2Vec2 model)"),D5e.forEach(t),TYe=i(y),mg=n(y,"LI",{});var G5e=s(mg);Jre=n(G5e,"STRONG",{});var xzr=s(Jre);MYe=r(xzr,"wav2vec2-conformer"),xzr.forEach(t),EYe=r(G5e," \u2014 "),qS=n(G5e,"A",{href:!0});var $zr=s(qS);CYe=r($zr,"Wav2Vec2ConformerConfig"),$zr.forEach(t),wYe=r(G5e," (Wav2Vec2-Conformer model)"),G5e.forEach(t),AYe=i(y),gg=n(y,"LI",{});var O5e=s(gg);Yre=n(O5e,"STRONG",{});var kzr=s(Yre);yYe=r(kzr,"wavlm"),kzr.forEach(t),LYe=r(O5e," \u2014 "),NS=n(O5e,"A",{href:!0});var Szr=s(NS);xYe=r(Szr,"WavLMConfig"),Szr.forEach(t),$Ye=r(O5e," (WavLM model)"),O5e.forEach(t),kYe=i(y),hg=n(y,"LI",{});var V5e=s(hg);Kre=n(V5e,"STRONG",{});var Rzr=s(Kre);SYe=r(Rzr,"xglm"),Rzr.forEach(t),RYe=r(V5e," \u2014 "),jS=n(V5e,"A",{href:!0});var Pzr=s(jS);PYe=r(Pzr,"XGLMConfig"),Pzr.forEach(t),BYe=r(V5e," (XGLM model)"),V5e.forEach(t),IYe=i(y),pg=n(y,"LI",{});var X5e=s(pg);Zre=n(X5e,"STRONG",{});var Bzr=s(Zre);qYe=r(Bzr,"xlm"),Bzr.forEach(t),NYe=r(X5e," \u2014 "),DS=n(X5e,"A",{href:!0});var Izr=s(DS);jYe=r(Izr,"XLMConfig"),Izr.forEach(t),DYe=r(X5e," (XLM model)"),X5e.forEach(t),GYe=i(y),ug=n(y,"LI",{});var z5e=s(ug);ete=n(z5e,"STRONG",{});var qzr=s(ete);OYe=r(qzr,"xlm-prophetnet"),qzr.forEach(t),VYe=r(z5e," \u2014 "),GS=n(z5e,"A",{href:!0});var Nzr=s(GS);XYe=r(Nzr,"XLMProphetNetConfig"),Nzr.forEach(t),zYe=r(z5e," (XLMProphetNet model)"),z5e.forEach(t),WYe=i(y),_g=n(y,"LI",{});var W5e=s(_g);ote=n(W5e,"STRONG",{});var jzr=s(ote);QYe=r(jzr,"xlm-roberta"),jzr.forEach(t),HYe=r(W5e," \u2014 "),OS=n(W5e,"A",{href:!0});var Dzr=s(OS);UYe=r(Dzr,"XLMRobertaConfig"),Dzr.forEach(t),JYe=r(W5e," (XLM-RoBERTa model)"),W5e.forEach(t),YYe=i(y),bg=n(y,"LI",{});var Q5e=s(bg);rte=n(Q5e,"STRONG",{});var Gzr=s(rte);KYe=r(Gzr,"xlm-roberta-xl"),Gzr.forEach(t),ZYe=r(Q5e," \u2014 "),VS=n(Q5e,"A",{href:!0});var Ozr=s(VS);eKe=r(Ozr,"XLMRobertaXLConfig"),Ozr.forEach(t),oKe=r(Q5e," (XLM-RoBERTa-XL model)"),Q5e.forEach(t),rKe=i(y),vg=n(y,"LI",{});var H5e=s(vg);tte=n(H5e,"STRONG",{});var Vzr=s(tte);tKe=r(Vzr,"xlnet"),Vzr.forEach(t),aKe=r(H5e," \u2014 "),XS=n(H5e,"A",{href:!0});var Xzr=s(XS);nKe=r(Xzr,"XLNetConfig"),Xzr.forEach(t),sKe=r(H5e," (XLNet model)"),H5e.forEach(t),lKe=i(y),Fg=n(y,"LI",{});var U5e=s(Fg);ate=n(U5e,"STRONG",{});var zzr=s(ate);iKe=r(zzr,"yolos"),zzr.forEach(t),dKe=r(U5e," \u2014 "),zS=n(U5e,"A",{href:!0});var Wzr=s(zS);cKe=r(Wzr,"YolosConfig"),Wzr.forEach(t),fKe=r(U5e," (YOLOS model)"),U5e.forEach(t),mKe=i(y),Tg=n(y,"LI",{});var J5e=s(Tg);nte=n(J5e,"STRONG",{});var Qzr=s(nte);gKe=r(Qzr,"yoso"),Qzr.forEach(t),hKe=r(J5e," \u2014 "),WS=n(J5e,"A",{href:!0});var Hzr=s(WS);pKe=r(Hzr,"YosoConfig"),Hzr.forEach(t),uKe=r(J5e," (YOSO model)"),J5e.forEach(t),y.forEach(t),_Ke=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),bKe=i(et),Eg=n(et,"DIV",{class:!0});var Ije=s(Eg);T(xA.$$.fragment,Ije),vKe=i(Ije),ste=n(Ije,"P",{});var Uzr=s(ste);FKe=r(Uzr,"Register a new configuration for this class."),Uzr.forEach(t),Ije.forEach(t),et.forEach(t),jqe=i(f),Ti=n(f,"H2",{class:!0});var qje=s(Ti);Cg=n(qje,"A",{id:!0,class:!0,href:!0});var Jzr=s(Cg);lte=n(Jzr,"SPAN",{});var Yzr=s(lte);T($A.$$.fragment,Yzr),Yzr.forEach(t),Jzr.forEach(t),TKe=i(qje),ite=n(qje,"SPAN",{});var Kzr=s(ite);MKe=r(Kzr,"AutoTokenizer"),Kzr.forEach(t),qje.forEach(t),Dqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(kA.$$.fragment,qs),EKe=i(qs),SA=n(qs,"P",{});var Nje=s(SA);CKe=r(Nje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),QS=n(Nje,"A",{href:!0});var Zzr=s(QS);wKe=r(Zzr,"AutoTokenizer.from_pretrained()"),Zzr.forEach(t),AKe=r(Nje," class method."),Nje.forEach(t),yKe=i(qs),RA=n(qs,"P",{});var jje=s(RA);LKe=r(jje,"This class cannot be instantiated directly using "),dte=n(jje,"CODE",{});var eWr=s(dte);xKe=r(eWr,"__init__()"),eWr.forEach(t),$Ke=r(jje," (throws an error)."),jje.forEach(t),kKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(PA.$$.fragment,Ns),SKe=i(Ns),cte=n(Ns,"P",{});var oWr=s(cte);RKe=r(oWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oWr.forEach(t),PKe=i(Ns),Aa=n(Ns,"P",{});var C3=s(Aa);BKe=r(C3,"The tokenizer class to instantiate is selected based on the "),fte=n(C3,"CODE",{});var rWr=s(fte);IKe=r(rWr,"model_type"),rWr.forEach(t),qKe=r(C3,` property of the config object (either
passed as an argument or loaded from `),mte=n(C3,"CODE",{});var tWr=s(mte);NKe=r(tWr,"pretrained_model_name_or_path"),tWr.forEach(t),jKe=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=n(C3,"CODE",{});var aWr=s(gte);DKe=r(aWr,"pretrained_model_name_or_path"),aWr.forEach(t),GKe=r(C3,":"),C3.forEach(t),OKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Bx=s(Sn);hte=n(Bx,"STRONG",{});var nWr=s(hte);VKe=r(nWr,"albert"),nWr.forEach(t),XKe=r(Bx," \u2014 "),HS=n(Bx,"A",{href:!0});var sWr=s(HS);zKe=r(sWr,"AlbertTokenizer"),sWr.forEach(t),WKe=r(Bx," or "),US=n(Bx,"A",{href:!0});var lWr=s(US);QKe=r(lWr,"AlbertTokenizerFast"),lWr.forEach(t),HKe=r(Bx," (ALBERT model)"),Bx.forEach(t),UKe=i(S),Rn=n(S,"LI",{});var Ix=s(Rn);pte=n(Ix,"STRONG",{});var iWr=s(pte);JKe=r(iWr,"bart"),iWr.forEach(t),YKe=r(Ix," \u2014 "),JS=n(Ix,"A",{href:!0});var dWr=s(JS);KKe=r(dWr,"BartTokenizer"),dWr.forEach(t),ZKe=r(Ix," or "),YS=n(Ix,"A",{href:!0});var cWr=s(YS);eZe=r(cWr,"BartTokenizerFast"),cWr.forEach(t),oZe=r(Ix," (BART model)"),Ix.forEach(t),rZe=i(S),Pn=n(S,"LI",{});var qx=s(Pn);ute=n(qx,"STRONG",{});var fWr=s(ute);tZe=r(fWr,"barthez"),fWr.forEach(t),aZe=r(qx," \u2014 "),KS=n(qx,"A",{href:!0});var mWr=s(KS);nZe=r(mWr,"BarthezTokenizer"),mWr.forEach(t),sZe=r(qx," or "),ZS=n(qx,"A",{href:!0});var gWr=s(ZS);lZe=r(gWr,"BarthezTokenizerFast"),gWr.forEach(t),iZe=r(qx," (BARThez model)"),qx.forEach(t),dZe=i(S),wg=n(S,"LI",{});var Y5e=s(wg);_te=n(Y5e,"STRONG",{});var hWr=s(_te);cZe=r(hWr,"bartpho"),hWr.forEach(t),fZe=r(Y5e," \u2014 "),eR=n(Y5e,"A",{href:!0});var pWr=s(eR);mZe=r(pWr,"BartphoTokenizer"),pWr.forEach(t),gZe=r(Y5e," (BARTpho model)"),Y5e.forEach(t),hZe=i(S),Bn=n(S,"LI",{});var Nx=s(Bn);bte=n(Nx,"STRONG",{});var uWr=s(bte);pZe=r(uWr,"bert"),uWr.forEach(t),uZe=r(Nx," \u2014 "),oR=n(Nx,"A",{href:!0});var _Wr=s(oR);_Ze=r(_Wr,"BertTokenizer"),_Wr.forEach(t),bZe=r(Nx," or "),rR=n(Nx,"A",{href:!0});var bWr=s(rR);vZe=r(bWr,"BertTokenizerFast"),bWr.forEach(t),FZe=r(Nx," (BERT model)"),Nx.forEach(t),TZe=i(S),Ag=n(S,"LI",{});var K5e=s(Ag);vte=n(K5e,"STRONG",{});var vWr=s(vte);MZe=r(vWr,"bert-generation"),vWr.forEach(t),EZe=r(K5e," \u2014 "),tR=n(K5e,"A",{href:!0});var FWr=s(tR);CZe=r(FWr,"BertGenerationTokenizer"),FWr.forEach(t),wZe=r(K5e," (Bert Generation model)"),K5e.forEach(t),AZe=i(S),yg=n(S,"LI",{});var Z5e=s(yg);Fte=n(Z5e,"STRONG",{});var TWr=s(Fte);yZe=r(TWr,"bert-japanese"),TWr.forEach(t),LZe=r(Z5e," \u2014 "),aR=n(Z5e,"A",{href:!0});var MWr=s(aR);xZe=r(MWr,"BertJapaneseTokenizer"),MWr.forEach(t),$Ze=r(Z5e," (BertJapanese model)"),Z5e.forEach(t),kZe=i(S),Lg=n(S,"LI",{});var e3e=s(Lg);Tte=n(e3e,"STRONG",{});var EWr=s(Tte);SZe=r(EWr,"bertweet"),EWr.forEach(t),RZe=r(e3e," \u2014 "),nR=n(e3e,"A",{href:!0});var CWr=s(nR);PZe=r(CWr,"BertweetTokenizer"),CWr.forEach(t),BZe=r(e3e," (Bertweet model)"),e3e.forEach(t),IZe=i(S),In=n(S,"LI",{});var jx=s(In);Mte=n(jx,"STRONG",{});var wWr=s(Mte);qZe=r(wWr,"big_bird"),wWr.forEach(t),NZe=r(jx," \u2014 "),sR=n(jx,"A",{href:!0});var AWr=s(sR);jZe=r(AWr,"BigBirdTokenizer"),AWr.forEach(t),DZe=r(jx," or "),lR=n(jx,"A",{href:!0});var yWr=s(lR);GZe=r(yWr,"BigBirdTokenizerFast"),yWr.forEach(t),OZe=r(jx," (BigBird model)"),jx.forEach(t),VZe=i(S),qn=n(S,"LI",{});var Dx=s(qn);Ete=n(Dx,"STRONG",{});var LWr=s(Ete);XZe=r(LWr,"bigbird_pegasus"),LWr.forEach(t),zZe=r(Dx," \u2014 "),iR=n(Dx,"A",{href:!0});var xWr=s(iR);WZe=r(xWr,"PegasusTokenizer"),xWr.forEach(t),QZe=r(Dx," or "),dR=n(Dx,"A",{href:!0});var $Wr=s(dR);HZe=r($Wr,"PegasusTokenizerFast"),$Wr.forEach(t),UZe=r(Dx," (BigBirdPegasus model)"),Dx.forEach(t),JZe=i(S),Nn=n(S,"LI",{});var Gx=s(Nn);Cte=n(Gx,"STRONG",{});var kWr=s(Cte);YZe=r(kWr,"blenderbot"),kWr.forEach(t),KZe=r(Gx," \u2014 "),cR=n(Gx,"A",{href:!0});var SWr=s(cR);ZZe=r(SWr,"BlenderbotTokenizer"),SWr.forEach(t),eeo=r(Gx," or "),fR=n(Gx,"A",{href:!0});var RWr=s(fR);oeo=r(RWr,"BlenderbotTokenizerFast"),RWr.forEach(t),reo=r(Gx," (Blenderbot model)"),Gx.forEach(t),teo=i(S),xg=n(S,"LI",{});var o3e=s(xg);wte=n(o3e,"STRONG",{});var PWr=s(wte);aeo=r(PWr,"blenderbot-small"),PWr.forEach(t),neo=r(o3e," \u2014 "),mR=n(o3e,"A",{href:!0});var BWr=s(mR);seo=r(BWr,"BlenderbotSmallTokenizer"),BWr.forEach(t),leo=r(o3e," (BlenderbotSmall model)"),o3e.forEach(t),ieo=i(S),$g=n(S,"LI",{});var r3e=s($g);Ate=n(r3e,"STRONG",{});var IWr=s(Ate);deo=r(IWr,"byt5"),IWr.forEach(t),ceo=r(r3e," \u2014 "),gR=n(r3e,"A",{href:!0});var qWr=s(gR);feo=r(qWr,"ByT5Tokenizer"),qWr.forEach(t),meo=r(r3e," (ByT5 model)"),r3e.forEach(t),geo=i(S),jn=n(S,"LI",{});var Ox=s(jn);yte=n(Ox,"STRONG",{});var NWr=s(yte);heo=r(NWr,"camembert"),NWr.forEach(t),peo=r(Ox," \u2014 "),hR=n(Ox,"A",{href:!0});var jWr=s(hR);ueo=r(jWr,"CamembertTokenizer"),jWr.forEach(t),_eo=r(Ox," or "),pR=n(Ox,"A",{href:!0});var DWr=s(pR);beo=r(DWr,"CamembertTokenizerFast"),DWr.forEach(t),veo=r(Ox," (CamemBERT model)"),Ox.forEach(t),Feo=i(S),kg=n(S,"LI",{});var t3e=s(kg);Lte=n(t3e,"STRONG",{});var GWr=s(Lte);Teo=r(GWr,"canine"),GWr.forEach(t),Meo=r(t3e," \u2014 "),uR=n(t3e,"A",{href:!0});var OWr=s(uR);Eeo=r(OWr,"CanineTokenizer"),OWr.forEach(t),Ceo=r(t3e," (Canine model)"),t3e.forEach(t),weo=i(S),Dn=n(S,"LI",{});var Vx=s(Dn);xte=n(Vx,"STRONG",{});var VWr=s(xte);Aeo=r(VWr,"clip"),VWr.forEach(t),yeo=r(Vx," \u2014 "),_R=n(Vx,"A",{href:!0});var XWr=s(_R);Leo=r(XWr,"CLIPTokenizer"),XWr.forEach(t),xeo=r(Vx," or "),bR=n(Vx,"A",{href:!0});var zWr=s(bR);$eo=r(zWr,"CLIPTokenizerFast"),zWr.forEach(t),keo=r(Vx," (CLIP model)"),Vx.forEach(t),Seo=i(S),Gn=n(S,"LI",{});var Xx=s(Gn);$te=n(Xx,"STRONG",{});var WWr=s($te);Reo=r(WWr,"convbert"),WWr.forEach(t),Peo=r(Xx," \u2014 "),vR=n(Xx,"A",{href:!0});var QWr=s(vR);Beo=r(QWr,"ConvBertTokenizer"),QWr.forEach(t),Ieo=r(Xx," or "),FR=n(Xx,"A",{href:!0});var HWr=s(FR);qeo=r(HWr,"ConvBertTokenizerFast"),HWr.forEach(t),Neo=r(Xx," (ConvBERT model)"),Xx.forEach(t),jeo=i(S),On=n(S,"LI",{});var zx=s(On);kte=n(zx,"STRONG",{});var UWr=s(kte);Deo=r(UWr,"cpm"),UWr.forEach(t),Geo=r(zx," \u2014 "),TR=n(zx,"A",{href:!0});var JWr=s(TR);Oeo=r(JWr,"CpmTokenizer"),JWr.forEach(t),Veo=r(zx," or "),MR=n(zx,"A",{href:!0});var YWr=s(MR);Xeo=r(YWr,"CpmTokenizerFast"),YWr.forEach(t),zeo=r(zx," (CPM model)"),zx.forEach(t),Weo=i(S),Sg=n(S,"LI",{});var a3e=s(Sg);Ste=n(a3e,"STRONG",{});var KWr=s(Ste);Qeo=r(KWr,"ctrl"),KWr.forEach(t),Heo=r(a3e," \u2014 "),ER=n(a3e,"A",{href:!0});var ZWr=s(ER);Ueo=r(ZWr,"CTRLTokenizer"),ZWr.forEach(t),Jeo=r(a3e," (CTRL model)"),a3e.forEach(t),Yeo=i(S),Vn=n(S,"LI",{});var Wx=s(Vn);Rte=n(Wx,"STRONG",{});var eQr=s(Rte);Keo=r(eQr,"data2vec-text"),eQr.forEach(t),Zeo=r(Wx," \u2014 "),CR=n(Wx,"A",{href:!0});var oQr=s(CR);eoo=r(oQr,"RobertaTokenizer"),oQr.forEach(t),ooo=r(Wx," or "),wR=n(Wx,"A",{href:!0});var rQr=s(wR);roo=r(rQr,"RobertaTokenizerFast"),rQr.forEach(t),too=r(Wx," (Data2VecText model)"),Wx.forEach(t),aoo=i(S),Xn=n(S,"LI",{});var Qx=s(Xn);Pte=n(Qx,"STRONG",{});var tQr=s(Pte);noo=r(tQr,"deberta"),tQr.forEach(t),soo=r(Qx," \u2014 "),AR=n(Qx,"A",{href:!0});var aQr=s(AR);loo=r(aQr,"DebertaTokenizer"),aQr.forEach(t),ioo=r(Qx," or "),yR=n(Qx,"A",{href:!0});var nQr=s(yR);doo=r(nQr,"DebertaTokenizerFast"),nQr.forEach(t),coo=r(Qx," (DeBERTa model)"),Qx.forEach(t),foo=i(S),zn=n(S,"LI",{});var Hx=s(zn);Bte=n(Hx,"STRONG",{});var sQr=s(Bte);moo=r(sQr,"deberta-v2"),sQr.forEach(t),goo=r(Hx," \u2014 "),LR=n(Hx,"A",{href:!0});var lQr=s(LR);hoo=r(lQr,"DebertaV2Tokenizer"),lQr.forEach(t),poo=r(Hx," or "),xR=n(Hx,"A",{href:!0});var iQr=s(xR);uoo=r(iQr,"DebertaV2TokenizerFast"),iQr.forEach(t),_oo=r(Hx," (DeBERTa-v2 model)"),Hx.forEach(t),boo=i(S),Wn=n(S,"LI",{});var Ux=s(Wn);Ite=n(Ux,"STRONG",{});var dQr=s(Ite);voo=r(dQr,"distilbert"),dQr.forEach(t),Foo=r(Ux," \u2014 "),$R=n(Ux,"A",{href:!0});var cQr=s($R);Too=r(cQr,"DistilBertTokenizer"),cQr.forEach(t),Moo=r(Ux," or "),kR=n(Ux,"A",{href:!0});var fQr=s(kR);Eoo=r(fQr,"DistilBertTokenizerFast"),fQr.forEach(t),Coo=r(Ux," (DistilBERT model)"),Ux.forEach(t),woo=i(S),Qn=n(S,"LI",{});var Jx=s(Qn);qte=n(Jx,"STRONG",{});var mQr=s(qte);Aoo=r(mQr,"dpr"),mQr.forEach(t),yoo=r(Jx," \u2014 "),SR=n(Jx,"A",{href:!0});var gQr=s(SR);Loo=r(gQr,"DPRQuestionEncoderTokenizer"),gQr.forEach(t),xoo=r(Jx," or "),RR=n(Jx,"A",{href:!0});var hQr=s(RR);$oo=r(hQr,"DPRQuestionEncoderTokenizerFast"),hQr.forEach(t),koo=r(Jx," (DPR model)"),Jx.forEach(t),Soo=i(S),Hn=n(S,"LI",{});var Yx=s(Hn);Nte=n(Yx,"STRONG",{});var pQr=s(Nte);Roo=r(pQr,"electra"),pQr.forEach(t),Poo=r(Yx," \u2014 "),PR=n(Yx,"A",{href:!0});var uQr=s(PR);Boo=r(uQr,"ElectraTokenizer"),uQr.forEach(t),Ioo=r(Yx," or "),BR=n(Yx,"A",{href:!0});var _Qr=s(BR);qoo=r(_Qr,"ElectraTokenizerFast"),_Qr.forEach(t),Noo=r(Yx," (ELECTRA model)"),Yx.forEach(t),joo=i(S),Rg=n(S,"LI",{});var n3e=s(Rg);jte=n(n3e,"STRONG",{});var bQr=s(jte);Doo=r(bQr,"flaubert"),bQr.forEach(t),Goo=r(n3e," \u2014 "),IR=n(n3e,"A",{href:!0});var vQr=s(IR);Ooo=r(vQr,"FlaubertTokenizer"),vQr.forEach(t),Voo=r(n3e," (FlauBERT model)"),n3e.forEach(t),Xoo=i(S),Un=n(S,"LI",{});var Kx=s(Un);Dte=n(Kx,"STRONG",{});var FQr=s(Dte);zoo=r(FQr,"fnet"),FQr.forEach(t),Woo=r(Kx," \u2014 "),qR=n(Kx,"A",{href:!0});var TQr=s(qR);Qoo=r(TQr,"FNetTokenizer"),TQr.forEach(t),Hoo=r(Kx," or "),NR=n(Kx,"A",{href:!0});var MQr=s(NR);Uoo=r(MQr,"FNetTokenizerFast"),MQr.forEach(t),Joo=r(Kx," (FNet model)"),Kx.forEach(t),Yoo=i(S),Pg=n(S,"LI",{});var s3e=s(Pg);Gte=n(s3e,"STRONG",{});var EQr=s(Gte);Koo=r(EQr,"fsmt"),EQr.forEach(t),Zoo=r(s3e," \u2014 "),jR=n(s3e,"A",{href:!0});var CQr=s(jR);ero=r(CQr,"FSMTTokenizer"),CQr.forEach(t),oro=r(s3e," (FairSeq Machine-Translation model)"),s3e.forEach(t),rro=i(S),Jn=n(S,"LI",{});var Zx=s(Jn);Ote=n(Zx,"STRONG",{});var wQr=s(Ote);tro=r(wQr,"funnel"),wQr.forEach(t),aro=r(Zx," \u2014 "),DR=n(Zx,"A",{href:!0});var AQr=s(DR);nro=r(AQr,"FunnelTokenizer"),AQr.forEach(t),sro=r(Zx," or "),GR=n(Zx,"A",{href:!0});var yQr=s(GR);lro=r(yQr,"FunnelTokenizerFast"),yQr.forEach(t),iro=r(Zx," (Funnel Transformer model)"),Zx.forEach(t),dro=i(S),Yn=n(S,"LI",{});var e$=s(Yn);Vte=n(e$,"STRONG",{});var LQr=s(Vte);cro=r(LQr,"gpt2"),LQr.forEach(t),fro=r(e$," \u2014 "),OR=n(e$,"A",{href:!0});var xQr=s(OR);mro=r(xQr,"GPT2Tokenizer"),xQr.forEach(t),gro=r(e$," or "),VR=n(e$,"A",{href:!0});var $Qr=s(VR);hro=r($Qr,"GPT2TokenizerFast"),$Qr.forEach(t),pro=r(e$," (OpenAI GPT-2 model)"),e$.forEach(t),uro=i(S),Kn=n(S,"LI",{});var o$=s(Kn);Xte=n(o$,"STRONG",{});var kQr=s(Xte);_ro=r(kQr,"gpt_neo"),kQr.forEach(t),bro=r(o$," \u2014 "),XR=n(o$,"A",{href:!0});var SQr=s(XR);vro=r(SQr,"GPT2Tokenizer"),SQr.forEach(t),Fro=r(o$," or "),zR=n(o$,"A",{href:!0});var RQr=s(zR);Tro=r(RQr,"GPT2TokenizerFast"),RQr.forEach(t),Mro=r(o$," (GPT Neo model)"),o$.forEach(t),Ero=i(S),Zn=n(S,"LI",{});var r$=s(Zn);zte=n(r$,"STRONG",{});var PQr=s(zte);Cro=r(PQr,"gptj"),PQr.forEach(t),wro=r(r$," \u2014 "),WR=n(r$,"A",{href:!0});var BQr=s(WR);Aro=r(BQr,"GPT2Tokenizer"),BQr.forEach(t),yro=r(r$," or "),QR=n(r$,"A",{href:!0});var IQr=s(QR);Lro=r(IQr,"GPT2TokenizerFast"),IQr.forEach(t),xro=r(r$," (GPT-J model)"),r$.forEach(t),$ro=i(S),es=n(S,"LI",{});var t$=s(es);Wte=n(t$,"STRONG",{});var qQr=s(Wte);kro=r(qQr,"herbert"),qQr.forEach(t),Sro=r(t$," \u2014 "),HR=n(t$,"A",{href:!0});var NQr=s(HR);Rro=r(NQr,"HerbertTokenizer"),NQr.forEach(t),Pro=r(t$," or "),UR=n(t$,"A",{href:!0});var jQr=s(UR);Bro=r(jQr,"HerbertTokenizerFast"),jQr.forEach(t),Iro=r(t$," (HerBERT model)"),t$.forEach(t),qro=i(S),Bg=n(S,"LI",{});var l3e=s(Bg);Qte=n(l3e,"STRONG",{});var DQr=s(Qte);Nro=r(DQr,"hubert"),DQr.forEach(t),jro=r(l3e," \u2014 "),JR=n(l3e,"A",{href:!0});var GQr=s(JR);Dro=r(GQr,"Wav2Vec2CTCTokenizer"),GQr.forEach(t),Gro=r(l3e," (Hubert model)"),l3e.forEach(t),Oro=i(S),os=n(S,"LI",{});var a$=s(os);Hte=n(a$,"STRONG",{});var OQr=s(Hte);Vro=r(OQr,"ibert"),OQr.forEach(t),Xro=r(a$," \u2014 "),YR=n(a$,"A",{href:!0});var VQr=s(YR);zro=r(VQr,"RobertaTokenizer"),VQr.forEach(t),Wro=r(a$," or "),KR=n(a$,"A",{href:!0});var XQr=s(KR);Qro=r(XQr,"RobertaTokenizerFast"),XQr.forEach(t),Hro=r(a$," (I-BERT model)"),a$.forEach(t),Uro=i(S),rs=n(S,"LI",{});var n$=s(rs);Ute=n(n$,"STRONG",{});var zQr=s(Ute);Jro=r(zQr,"layoutlm"),zQr.forEach(t),Yro=r(n$," \u2014 "),ZR=n(n$,"A",{href:!0});var WQr=s(ZR);Kro=r(WQr,"LayoutLMTokenizer"),WQr.forEach(t),Zro=r(n$," or "),eP=n(n$,"A",{href:!0});var QQr=s(eP);eto=r(QQr,"LayoutLMTokenizerFast"),QQr.forEach(t),oto=r(n$," (LayoutLM model)"),n$.forEach(t),rto=i(S),ts=n(S,"LI",{});var s$=s(ts);Jte=n(s$,"STRONG",{});var HQr=s(Jte);tto=r(HQr,"layoutlmv2"),HQr.forEach(t),ato=r(s$," \u2014 "),oP=n(s$,"A",{href:!0});var UQr=s(oP);nto=r(UQr,"LayoutLMv2Tokenizer"),UQr.forEach(t),sto=r(s$," or "),rP=n(s$,"A",{href:!0});var JQr=s(rP);lto=r(JQr,"LayoutLMv2TokenizerFast"),JQr.forEach(t),ito=r(s$," (LayoutLMv2 model)"),s$.forEach(t),dto=i(S),as=n(S,"LI",{});var l$=s(as);Yte=n(l$,"STRONG",{});var YQr=s(Yte);cto=r(YQr,"layoutlmv3"),YQr.forEach(t),fto=r(l$," \u2014 "),tP=n(l$,"A",{href:!0});var KQr=s(tP);mto=r(KQr,"LayoutLMv3Tokenizer"),KQr.forEach(t),gto=r(l$," or "),aP=n(l$,"A",{href:!0});var ZQr=s(aP);hto=r(ZQr,"LayoutLMv3TokenizerFast"),ZQr.forEach(t),pto=r(l$," (LayoutLMv3 model)"),l$.forEach(t),uto=i(S),ns=n(S,"LI",{});var i$=s(ns);Kte=n(i$,"STRONG",{});var eHr=s(Kte);_to=r(eHr,"layoutxlm"),eHr.forEach(t),bto=r(i$," \u2014 "),nP=n(i$,"A",{href:!0});var oHr=s(nP);vto=r(oHr,"LayoutXLMTokenizer"),oHr.forEach(t),Fto=r(i$," or "),sP=n(i$,"A",{href:!0});var rHr=s(sP);Tto=r(rHr,"LayoutXLMTokenizerFast"),rHr.forEach(t),Mto=r(i$," (LayoutXLM model)"),i$.forEach(t),Eto=i(S),ss=n(S,"LI",{});var d$=s(ss);Zte=n(d$,"STRONG",{});var tHr=s(Zte);Cto=r(tHr,"led"),tHr.forEach(t),wto=r(d$," \u2014 "),lP=n(d$,"A",{href:!0});var aHr=s(lP);Ato=r(aHr,"LEDTokenizer"),aHr.forEach(t),yto=r(d$," or "),iP=n(d$,"A",{href:!0});var nHr=s(iP);Lto=r(nHr,"LEDTokenizerFast"),nHr.forEach(t),xto=r(d$," (LED model)"),d$.forEach(t),$to=i(S),ls=n(S,"LI",{});var c$=s(ls);eae=n(c$,"STRONG",{});var sHr=s(eae);kto=r(sHr,"longformer"),sHr.forEach(t),Sto=r(c$," \u2014 "),dP=n(c$,"A",{href:!0});var lHr=s(dP);Rto=r(lHr,"LongformerTokenizer"),lHr.forEach(t),Pto=r(c$," or "),cP=n(c$,"A",{href:!0});var iHr=s(cP);Bto=r(iHr,"LongformerTokenizerFast"),iHr.forEach(t),Ito=r(c$," (Longformer model)"),c$.forEach(t),qto=i(S),Ig=n(S,"LI",{});var i3e=s(Ig);oae=n(i3e,"STRONG",{});var dHr=s(oae);Nto=r(dHr,"luke"),dHr.forEach(t),jto=r(i3e," \u2014 "),fP=n(i3e,"A",{href:!0});var cHr=s(fP);Dto=r(cHr,"LukeTokenizer"),cHr.forEach(t),Gto=r(i3e," (LUKE model)"),i3e.forEach(t),Oto=i(S),is=n(S,"LI",{});var f$=s(is);rae=n(f$,"STRONG",{});var fHr=s(rae);Vto=r(fHr,"lxmert"),fHr.forEach(t),Xto=r(f$," \u2014 "),mP=n(f$,"A",{href:!0});var mHr=s(mP);zto=r(mHr,"LxmertTokenizer"),mHr.forEach(t),Wto=r(f$," or "),gP=n(f$,"A",{href:!0});var gHr=s(gP);Qto=r(gHr,"LxmertTokenizerFast"),gHr.forEach(t),Hto=r(f$," (LXMERT model)"),f$.forEach(t),Uto=i(S),qg=n(S,"LI",{});var d3e=s(qg);tae=n(d3e,"STRONG",{});var hHr=s(tae);Jto=r(hHr,"m2m_100"),hHr.forEach(t),Yto=r(d3e," \u2014 "),hP=n(d3e,"A",{href:!0});var pHr=s(hP);Kto=r(pHr,"M2M100Tokenizer"),pHr.forEach(t),Zto=r(d3e," (M2M100 model)"),d3e.forEach(t),eao=i(S),Ng=n(S,"LI",{});var c3e=s(Ng);aae=n(c3e,"STRONG",{});var uHr=s(aae);oao=r(uHr,"marian"),uHr.forEach(t),rao=r(c3e," \u2014 "),pP=n(c3e,"A",{href:!0});var _Hr=s(pP);tao=r(_Hr,"MarianTokenizer"),_Hr.forEach(t),aao=r(c3e," (Marian model)"),c3e.forEach(t),nao=i(S),ds=n(S,"LI",{});var m$=s(ds);nae=n(m$,"STRONG",{});var bHr=s(nae);sao=r(bHr,"mbart"),bHr.forEach(t),lao=r(m$," \u2014 "),uP=n(m$,"A",{href:!0});var vHr=s(uP);iao=r(vHr,"MBartTokenizer"),vHr.forEach(t),dao=r(m$," or "),_P=n(m$,"A",{href:!0});var FHr=s(_P);cao=r(FHr,"MBartTokenizerFast"),FHr.forEach(t),fao=r(m$," (mBART model)"),m$.forEach(t),mao=i(S),cs=n(S,"LI",{});var g$=s(cs);sae=n(g$,"STRONG",{});var THr=s(sae);gao=r(THr,"mbart50"),THr.forEach(t),hao=r(g$," \u2014 "),bP=n(g$,"A",{href:!0});var MHr=s(bP);pao=r(MHr,"MBart50Tokenizer"),MHr.forEach(t),uao=r(g$," or "),vP=n(g$,"A",{href:!0});var EHr=s(vP);_ao=r(EHr,"MBart50TokenizerFast"),EHr.forEach(t),bao=r(g$," (mBART-50 model)"),g$.forEach(t),vao=i(S),fs=n(S,"LI",{});var h$=s(fs);lae=n(h$,"STRONG",{});var CHr=s(lae);Fao=r(CHr,"megatron-bert"),CHr.forEach(t),Tao=r(h$," \u2014 "),FP=n(h$,"A",{href:!0});var wHr=s(FP);Mao=r(wHr,"BertTokenizer"),wHr.forEach(t),Eao=r(h$," or "),TP=n(h$,"A",{href:!0});var AHr=s(TP);Cao=r(AHr,"BertTokenizerFast"),AHr.forEach(t),wao=r(h$," (MegatronBert model)"),h$.forEach(t),Aao=i(S),jg=n(S,"LI",{});var f3e=s(jg);iae=n(f3e,"STRONG",{});var yHr=s(iae);yao=r(yHr,"mluke"),yHr.forEach(t),Lao=r(f3e," \u2014 "),MP=n(f3e,"A",{href:!0});var LHr=s(MP);xao=r(LHr,"MLukeTokenizer"),LHr.forEach(t),$ao=r(f3e," (mLUKE model)"),f3e.forEach(t),kao=i(S),ms=n(S,"LI",{});var p$=s(ms);dae=n(p$,"STRONG",{});var xHr=s(dae);Sao=r(xHr,"mobilebert"),xHr.forEach(t),Rao=r(p$," \u2014 "),EP=n(p$,"A",{href:!0});var $Hr=s(EP);Pao=r($Hr,"MobileBertTokenizer"),$Hr.forEach(t),Bao=r(p$," or "),CP=n(p$,"A",{href:!0});var kHr=s(CP);Iao=r(kHr,"MobileBertTokenizerFast"),kHr.forEach(t),qao=r(p$," (MobileBERT model)"),p$.forEach(t),Nao=i(S),gs=n(S,"LI",{});var u$=s(gs);cae=n(u$,"STRONG",{});var SHr=s(cae);jao=r(SHr,"mpnet"),SHr.forEach(t),Dao=r(u$," \u2014 "),wP=n(u$,"A",{href:!0});var RHr=s(wP);Gao=r(RHr,"MPNetTokenizer"),RHr.forEach(t),Oao=r(u$," or "),AP=n(u$,"A",{href:!0});var PHr=s(AP);Vao=r(PHr,"MPNetTokenizerFast"),PHr.forEach(t),Xao=r(u$," (MPNet model)"),u$.forEach(t),zao=i(S),hs=n(S,"LI",{});var _$=s(hs);fae=n(_$,"STRONG",{});var BHr=s(fae);Wao=r(BHr,"mt5"),BHr.forEach(t),Qao=r(_$," \u2014 "),yP=n(_$,"A",{href:!0});var IHr=s(yP);Hao=r(IHr,"MT5Tokenizer"),IHr.forEach(t),Uao=r(_$," or "),LP=n(_$,"A",{href:!0});var qHr=s(LP);Jao=r(qHr,"MT5TokenizerFast"),qHr.forEach(t),Yao=r(_$," (mT5 model)"),_$.forEach(t),Kao=i(S),ps=n(S,"LI",{});var b$=s(ps);mae=n(b$,"STRONG",{});var NHr=s(mae);Zao=r(NHr,"nystromformer"),NHr.forEach(t),eno=r(b$," \u2014 "),xP=n(b$,"A",{href:!0});var jHr=s(xP);ono=r(jHr,"AlbertTokenizer"),jHr.forEach(t),rno=r(b$," or "),$P=n(b$,"A",{href:!0});var DHr=s($P);tno=r(DHr,"AlbertTokenizerFast"),DHr.forEach(t),ano=r(b$," (Nystromformer model)"),b$.forEach(t),nno=i(S),us=n(S,"LI",{});var v$=s(us);gae=n(v$,"STRONG",{});var GHr=s(gae);sno=r(GHr,"openai-gpt"),GHr.forEach(t),lno=r(v$," \u2014 "),kP=n(v$,"A",{href:!0});var OHr=s(kP);ino=r(OHr,"OpenAIGPTTokenizer"),OHr.forEach(t),dno=r(v$," or "),SP=n(v$,"A",{href:!0});var VHr=s(SP);cno=r(VHr,"OpenAIGPTTokenizerFast"),VHr.forEach(t),fno=r(v$," (OpenAI GPT model)"),v$.forEach(t),mno=i(S),Dg=n(S,"LI",{});var m3e=s(Dg);hae=n(m3e,"STRONG",{});var XHr=s(hae);gno=r(XHr,"opt"),XHr.forEach(t),hno=r(m3e," \u2014 "),RP=n(m3e,"A",{href:!0});var zHr=s(RP);pno=r(zHr,"GPT2Tokenizer"),zHr.forEach(t),uno=r(m3e," (OPT model)"),m3e.forEach(t),_no=i(S),_s=n(S,"LI",{});var F$=s(_s);pae=n(F$,"STRONG",{});var WHr=s(pae);bno=r(WHr,"pegasus"),WHr.forEach(t),vno=r(F$," \u2014 "),PP=n(F$,"A",{href:!0});var QHr=s(PP);Fno=r(QHr,"PegasusTokenizer"),QHr.forEach(t),Tno=r(F$," or "),BP=n(F$,"A",{href:!0});var HHr=s(BP);Mno=r(HHr,"PegasusTokenizerFast"),HHr.forEach(t),Eno=r(F$," (Pegasus model)"),F$.forEach(t),Cno=i(S),Gg=n(S,"LI",{});var g3e=s(Gg);uae=n(g3e,"STRONG",{});var UHr=s(uae);wno=r(UHr,"perceiver"),UHr.forEach(t),Ano=r(g3e," \u2014 "),IP=n(g3e,"A",{href:!0});var JHr=s(IP);yno=r(JHr,"PerceiverTokenizer"),JHr.forEach(t),Lno=r(g3e," (Perceiver model)"),g3e.forEach(t),xno=i(S),Og=n(S,"LI",{});var h3e=s(Og);_ae=n(h3e,"STRONG",{});var YHr=s(_ae);$no=r(YHr,"phobert"),YHr.forEach(t),kno=r(h3e," \u2014 "),qP=n(h3e,"A",{href:!0});var KHr=s(qP);Sno=r(KHr,"PhobertTokenizer"),KHr.forEach(t),Rno=r(h3e," (PhoBERT model)"),h3e.forEach(t),Pno=i(S),Vg=n(S,"LI",{});var p3e=s(Vg);bae=n(p3e,"STRONG",{});var ZHr=s(bae);Bno=r(ZHr,"plbart"),ZHr.forEach(t),Ino=r(p3e," \u2014 "),NP=n(p3e,"A",{href:!0});var eUr=s(NP);qno=r(eUr,"PLBartTokenizer"),eUr.forEach(t),Nno=r(p3e," (PLBart model)"),p3e.forEach(t),jno=i(S),Xg=n(S,"LI",{});var u3e=s(Xg);vae=n(u3e,"STRONG",{});var oUr=s(vae);Dno=r(oUr,"prophetnet"),oUr.forEach(t),Gno=r(u3e," \u2014 "),jP=n(u3e,"A",{href:!0});var rUr=s(jP);Ono=r(rUr,"ProphetNetTokenizer"),rUr.forEach(t),Vno=r(u3e," (ProphetNet model)"),u3e.forEach(t),Xno=i(S),bs=n(S,"LI",{});var T$=s(bs);Fae=n(T$,"STRONG",{});var tUr=s(Fae);zno=r(tUr,"qdqbert"),tUr.forEach(t),Wno=r(T$," \u2014 "),DP=n(T$,"A",{href:!0});var aUr=s(DP);Qno=r(aUr,"BertTokenizer"),aUr.forEach(t),Hno=r(T$," or "),GP=n(T$,"A",{href:!0});var nUr=s(GP);Uno=r(nUr,"BertTokenizerFast"),nUr.forEach(t),Jno=r(T$," (QDQBert model)"),T$.forEach(t),Yno=i(S),zg=n(S,"LI",{});var _3e=s(zg);Tae=n(_3e,"STRONG",{});var sUr=s(Tae);Kno=r(sUr,"rag"),sUr.forEach(t),Zno=r(_3e," \u2014 "),OP=n(_3e,"A",{href:!0});var lUr=s(OP);eso=r(lUr,"RagTokenizer"),lUr.forEach(t),oso=r(_3e," (RAG model)"),_3e.forEach(t),rso=i(S),vs=n(S,"LI",{});var M$=s(vs);Mae=n(M$,"STRONG",{});var iUr=s(Mae);tso=r(iUr,"realm"),iUr.forEach(t),aso=r(M$," \u2014 "),VP=n(M$,"A",{href:!0});var dUr=s(VP);nso=r(dUr,"RealmTokenizer"),dUr.forEach(t),sso=r(M$," or "),XP=n(M$,"A",{href:!0});var cUr=s(XP);lso=r(cUr,"RealmTokenizerFast"),cUr.forEach(t),iso=r(M$," (Realm model)"),M$.forEach(t),dso=i(S),Fs=n(S,"LI",{});var E$=s(Fs);Eae=n(E$,"STRONG",{});var fUr=s(Eae);cso=r(fUr,"reformer"),fUr.forEach(t),fso=r(E$," \u2014 "),zP=n(E$,"A",{href:!0});var mUr=s(zP);mso=r(mUr,"ReformerTokenizer"),mUr.forEach(t),gso=r(E$," or "),WP=n(E$,"A",{href:!0});var gUr=s(WP);hso=r(gUr,"ReformerTokenizerFast"),gUr.forEach(t),pso=r(E$," (Reformer model)"),E$.forEach(t),uso=i(S),Ts=n(S,"LI",{});var C$=s(Ts);Cae=n(C$,"STRONG",{});var hUr=s(Cae);_so=r(hUr,"rembert"),hUr.forEach(t),bso=r(C$," \u2014 "),QP=n(C$,"A",{href:!0});var pUr=s(QP);vso=r(pUr,"RemBertTokenizer"),pUr.forEach(t),Fso=r(C$," or "),HP=n(C$,"A",{href:!0});var uUr=s(HP);Tso=r(uUr,"RemBertTokenizerFast"),uUr.forEach(t),Mso=r(C$," (RemBERT model)"),C$.forEach(t),Eso=i(S),Ms=n(S,"LI",{});var w$=s(Ms);wae=n(w$,"STRONG",{});var _Ur=s(wae);Cso=r(_Ur,"retribert"),_Ur.forEach(t),wso=r(w$," \u2014 "),UP=n(w$,"A",{href:!0});var bUr=s(UP);Aso=r(bUr,"RetriBertTokenizer"),bUr.forEach(t),yso=r(w$," or "),JP=n(w$,"A",{href:!0});var vUr=s(JP);Lso=r(vUr,"RetriBertTokenizerFast"),vUr.forEach(t),xso=r(w$," (RetriBERT model)"),w$.forEach(t),$so=i(S),Es=n(S,"LI",{});var A$=s(Es);Aae=n(A$,"STRONG",{});var FUr=s(Aae);kso=r(FUr,"roberta"),FUr.forEach(t),Sso=r(A$," \u2014 "),YP=n(A$,"A",{href:!0});var TUr=s(YP);Rso=r(TUr,"RobertaTokenizer"),TUr.forEach(t),Pso=r(A$," or "),KP=n(A$,"A",{href:!0});var MUr=s(KP);Bso=r(MUr,"RobertaTokenizerFast"),MUr.forEach(t),Iso=r(A$," (RoBERTa model)"),A$.forEach(t),qso=i(S),Cs=n(S,"LI",{});var y$=s(Cs);yae=n(y$,"STRONG",{});var EUr=s(yae);Nso=r(EUr,"roformer"),EUr.forEach(t),jso=r(y$," \u2014 "),ZP=n(y$,"A",{href:!0});var CUr=s(ZP);Dso=r(CUr,"RoFormerTokenizer"),CUr.forEach(t),Gso=r(y$," or "),eB=n(y$,"A",{href:!0});var wUr=s(eB);Oso=r(wUr,"RoFormerTokenizerFast"),wUr.forEach(t),Vso=r(y$," (RoFormer model)"),y$.forEach(t),Xso=i(S),Wg=n(S,"LI",{});var b3e=s(Wg);Lae=n(b3e,"STRONG",{});var AUr=s(Lae);zso=r(AUr,"speech_to_text"),AUr.forEach(t),Wso=r(b3e," \u2014 "),oB=n(b3e,"A",{href:!0});var yUr=s(oB);Qso=r(yUr,"Speech2TextTokenizer"),yUr.forEach(t),Hso=r(b3e," (Speech2Text model)"),b3e.forEach(t),Uso=i(S),Qg=n(S,"LI",{});var v3e=s(Qg);xae=n(v3e,"STRONG",{});var LUr=s(xae);Jso=r(LUr,"speech_to_text_2"),LUr.forEach(t),Yso=r(v3e," \u2014 "),rB=n(v3e,"A",{href:!0});var xUr=s(rB);Kso=r(xUr,"Speech2Text2Tokenizer"),xUr.forEach(t),Zso=r(v3e," (Speech2Text2 model)"),v3e.forEach(t),elo=i(S),ws=n(S,"LI",{});var L$=s(ws);$ae=n(L$,"STRONG",{});var $Ur=s($ae);olo=r($Ur,"splinter"),$Ur.forEach(t),rlo=r(L$," \u2014 "),tB=n(L$,"A",{href:!0});var kUr=s(tB);tlo=r(kUr,"SplinterTokenizer"),kUr.forEach(t),alo=r(L$," or "),aB=n(L$,"A",{href:!0});var SUr=s(aB);nlo=r(SUr,"SplinterTokenizerFast"),SUr.forEach(t),slo=r(L$," (Splinter model)"),L$.forEach(t),llo=i(S),As=n(S,"LI",{});var x$=s(As);kae=n(x$,"STRONG",{});var RUr=s(kae);ilo=r(RUr,"squeezebert"),RUr.forEach(t),dlo=r(x$," \u2014 "),nB=n(x$,"A",{href:!0});var PUr=s(nB);clo=r(PUr,"SqueezeBertTokenizer"),PUr.forEach(t),flo=r(x$," or "),sB=n(x$,"A",{href:!0});var BUr=s(sB);mlo=r(BUr,"SqueezeBertTokenizerFast"),BUr.forEach(t),glo=r(x$," (SqueezeBERT model)"),x$.forEach(t),hlo=i(S),ys=n(S,"LI",{});var $$=s(ys);Sae=n($$,"STRONG",{});var IUr=s(Sae);plo=r(IUr,"t5"),IUr.forEach(t),ulo=r($$," \u2014 "),lB=n($$,"A",{href:!0});var qUr=s(lB);_lo=r(qUr,"T5Tokenizer"),qUr.forEach(t),blo=r($$," or "),iB=n($$,"A",{href:!0});var NUr=s(iB);vlo=r(NUr,"T5TokenizerFast"),NUr.forEach(t),Flo=r($$," (T5 model)"),$$.forEach(t),Tlo=i(S),Hg=n(S,"LI",{});var F3e=s(Hg);Rae=n(F3e,"STRONG",{});var jUr=s(Rae);Mlo=r(jUr,"tapas"),jUr.forEach(t),Elo=r(F3e," \u2014 "),dB=n(F3e,"A",{href:!0});var DUr=s(dB);Clo=r(DUr,"TapasTokenizer"),DUr.forEach(t),wlo=r(F3e," (TAPAS model)"),F3e.forEach(t),Alo=i(S),Ug=n(S,"LI",{});var T3e=s(Ug);Pae=n(T3e,"STRONG",{});var GUr=s(Pae);ylo=r(GUr,"tapex"),GUr.forEach(t),Llo=r(T3e," \u2014 "),cB=n(T3e,"A",{href:!0});var OUr=s(cB);xlo=r(OUr,"TapexTokenizer"),OUr.forEach(t),$lo=r(T3e," (TAPEX model)"),T3e.forEach(t),klo=i(S),Jg=n(S,"LI",{});var M3e=s(Jg);Bae=n(M3e,"STRONG",{});var VUr=s(Bae);Slo=r(VUr,"transfo-xl"),VUr.forEach(t),Rlo=r(M3e," \u2014 "),fB=n(M3e,"A",{href:!0});var XUr=s(fB);Plo=r(XUr,"TransfoXLTokenizer"),XUr.forEach(t),Blo=r(M3e," (Transformer-XL model)"),M3e.forEach(t),Ilo=i(S),Ls=n(S,"LI",{});var k$=s(Ls);Iae=n(k$,"STRONG",{});var zUr=s(Iae);qlo=r(zUr,"visual_bert"),zUr.forEach(t),Nlo=r(k$," \u2014 "),mB=n(k$,"A",{href:!0});var WUr=s(mB);jlo=r(WUr,"BertTokenizer"),WUr.forEach(t),Dlo=r(k$," or "),gB=n(k$,"A",{href:!0});var QUr=s(gB);Glo=r(QUr,"BertTokenizerFast"),QUr.forEach(t),Olo=r(k$," (VisualBert model)"),k$.forEach(t),Vlo=i(S),Yg=n(S,"LI",{});var E3e=s(Yg);qae=n(E3e,"STRONG",{});var HUr=s(qae);Xlo=r(HUr,"wav2vec2"),HUr.forEach(t),zlo=r(E3e," \u2014 "),hB=n(E3e,"A",{href:!0});var UUr=s(hB);Wlo=r(UUr,"Wav2Vec2CTCTokenizer"),UUr.forEach(t),Qlo=r(E3e," (Wav2Vec2 model)"),E3e.forEach(t),Hlo=i(S),Kg=n(S,"LI",{});var C3e=s(Kg);Nae=n(C3e,"STRONG",{});var JUr=s(Nae);Ulo=r(JUr,"wav2vec2-conformer"),JUr.forEach(t),Jlo=r(C3e," \u2014 "),pB=n(C3e,"A",{href:!0});var YUr=s(pB);Ylo=r(YUr,"Wav2Vec2CTCTokenizer"),YUr.forEach(t),Klo=r(C3e," (Wav2Vec2-Conformer model)"),C3e.forEach(t),Zlo=i(S),Zg=n(S,"LI",{});var w3e=s(Zg);jae=n(w3e,"STRONG",{});var KUr=s(jae);eio=r(KUr,"wav2vec2_phoneme"),KUr.forEach(t),oio=r(w3e," \u2014 "),uB=n(w3e,"A",{href:!0});var ZUr=s(uB);rio=r(ZUr,"Wav2Vec2PhonemeCTCTokenizer"),ZUr.forEach(t),tio=r(w3e," (Wav2Vec2Phoneme model)"),w3e.forEach(t),aio=i(S),xs=n(S,"LI",{});var S$=s(xs);Dae=n(S$,"STRONG",{});var eJr=s(Dae);nio=r(eJr,"xglm"),eJr.forEach(t),sio=r(S$," \u2014 "),_B=n(S$,"A",{href:!0});var oJr=s(_B);lio=r(oJr,"XGLMTokenizer"),oJr.forEach(t),iio=r(S$," or "),bB=n(S$,"A",{href:!0});var rJr=s(bB);dio=r(rJr,"XGLMTokenizerFast"),rJr.forEach(t),cio=r(S$," (XGLM model)"),S$.forEach(t),fio=i(S),eh=n(S,"LI",{});var A3e=s(eh);Gae=n(A3e,"STRONG",{});var tJr=s(Gae);mio=r(tJr,"xlm"),tJr.forEach(t),gio=r(A3e," \u2014 "),vB=n(A3e,"A",{href:!0});var aJr=s(vB);hio=r(aJr,"XLMTokenizer"),aJr.forEach(t),pio=r(A3e," (XLM model)"),A3e.forEach(t),uio=i(S),oh=n(S,"LI",{});var y3e=s(oh);Oae=n(y3e,"STRONG",{});var nJr=s(Oae);_io=r(nJr,"xlm-prophetnet"),nJr.forEach(t),bio=r(y3e," \u2014 "),FB=n(y3e,"A",{href:!0});var sJr=s(FB);vio=r(sJr,"XLMProphetNetTokenizer"),sJr.forEach(t),Fio=r(y3e," (XLMProphetNet model)"),y3e.forEach(t),Tio=i(S),$s=n(S,"LI",{});var R$=s($s);Vae=n(R$,"STRONG",{});var lJr=s(Vae);Mio=r(lJr,"xlm-roberta"),lJr.forEach(t),Eio=r(R$," \u2014 "),TB=n(R$,"A",{href:!0});var iJr=s(TB);Cio=r(iJr,"XLMRobertaTokenizer"),iJr.forEach(t),wio=r(R$," or "),MB=n(R$,"A",{href:!0});var dJr=s(MB);Aio=r(dJr,"XLMRobertaTokenizerFast"),dJr.forEach(t),yio=r(R$," (XLM-RoBERTa model)"),R$.forEach(t),Lio=i(S),ks=n(S,"LI",{});var P$=s(ks);Xae=n(P$,"STRONG",{});var cJr=s(Xae);xio=r(cJr,"xlm-roberta-xl"),cJr.forEach(t),$io=r(P$," \u2014 "),EB=n(P$,"A",{href:!0});var fJr=s(EB);kio=r(fJr,"RobertaTokenizer"),fJr.forEach(t),Sio=r(P$," or "),CB=n(P$,"A",{href:!0});var mJr=s(CB);Rio=r(mJr,"RobertaTokenizerFast"),mJr.forEach(t),Pio=r(P$," (XLM-RoBERTa-XL model)"),P$.forEach(t),Bio=i(S),Ss=n(S,"LI",{});var B$=s(Ss);zae=n(B$,"STRONG",{});var gJr=s(zae);Iio=r(gJr,"xlnet"),gJr.forEach(t),qio=r(B$," \u2014 "),wB=n(B$,"A",{href:!0});var hJr=s(wB);Nio=r(hJr,"XLNetTokenizer"),hJr.forEach(t),jio=r(B$," or "),AB=n(B$,"A",{href:!0});var pJr=s(AB);Dio=r(pJr,"XLNetTokenizerFast"),pJr.forEach(t),Gio=r(B$," (XLNet model)"),B$.forEach(t),Oio=i(S),Rs=n(S,"LI",{});var I$=s(Rs);Wae=n(I$,"STRONG",{});var uJr=s(Wae);Vio=r(uJr,"yoso"),uJr.forEach(t),Xio=r(I$," \u2014 "),yB=n(I$,"A",{href:!0});var _Jr=s(yB);zio=r(_Jr,"AlbertTokenizer"),_Jr.forEach(t),Wio=r(I$," or "),LB=n(I$,"A",{href:!0});var bJr=s(LB);Qio=r(bJr,"AlbertTokenizerFast"),bJr.forEach(t),Hio=r(I$," (YOSO model)"),I$.forEach(t),S.forEach(t),Uio=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),Jio=i(qs),th=n(qs,"DIV",{class:!0});var Dje=s(th);T(BA.$$.fragment,Dje),Yio=i(Dje),Qae=n(Dje,"P",{});var vJr=s(Qae);Kio=r(vJr,"Register a new tokenizer in this mapping."),vJr.forEach(t),Dje.forEach(t),qs.forEach(t),Gqe=i(f),Mi=n(f,"H2",{class:!0});var Gje=s(Mi);ah=n(Gje,"A",{id:!0,class:!0,href:!0});var FJr=s(ah);Hae=n(FJr,"SPAN",{});var TJr=s(Hae);T(IA.$$.fragment,TJr),TJr.forEach(t),FJr.forEach(t),Zio=i(Gje),Uae=n(Gje,"SPAN",{});var MJr=s(Uae);edo=r(MJr,"AutoFeatureExtractor"),MJr.forEach(t),Gje.forEach(t),Oqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(qA.$$.fragment,js),odo=i(js),NA=n(js,"P",{});var Oje=s(NA);rdo=r(Oje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xB=n(Oje,"A",{href:!0});var EJr=s(xB);tdo=r(EJr,"AutoFeatureExtractor.from_pretrained()"),EJr.forEach(t),ado=r(Oje," class method."),Oje.forEach(t),ndo=i(js),jA=n(js,"P",{});var Vje=s(jA);sdo=r(Vje,"This class cannot be instantiated directly using "),Jae=n(Vje,"CODE",{});var CJr=s(Jae);ldo=r(CJr,"__init__()"),CJr.forEach(t),ido=r(Vje," (throws an error)."),Vje.forEach(t),ddo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(DA.$$.fragment,Zt),cdo=i(Zt),Yae=n(Zt,"P",{});var wJr=s(Yae);fdo=r(wJr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wJr.forEach(t),mdo=i(Zt),ya=n(Zt,"P",{});var w3=s(ya);gdo=r(w3,"The feature extractor class to instantiate is selected based on the "),Kae=n(w3,"CODE",{});var AJr=s(Kae);hdo=r(AJr,"model_type"),AJr.forEach(t),pdo=r(w3,` property of the config object
(either passed as an argument or loaded from `),Zae=n(w3,"CODE",{});var yJr=s(Zae);udo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),_do=r(w3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ene=n(w3,"CODE",{});var LJr=s(ene);bdo=r(LJr,"pretrained_model_name_or_path"),LJr.forEach(t),vdo=r(w3,":"),w3.forEach(t),Fdo=i(Zt),K=n(Zt,"UL",{});var ee=s(K);nh=n(ee,"LI",{});var L3e=s(nh);one=n(L3e,"STRONG",{});var xJr=s(one);Tdo=r(xJr,"beit"),xJr.forEach(t),Mdo=r(L3e," \u2014 "),$B=n(L3e,"A",{href:!0});var $Jr=s($B);Edo=r($Jr,"BeitFeatureExtractor"),$Jr.forEach(t),Cdo=r(L3e," (BEiT model)"),L3e.forEach(t),wdo=i(ee),sh=n(ee,"LI",{});var x3e=s(sh);rne=n(x3e,"STRONG",{});var kJr=s(rne);Ado=r(kJr,"clip"),kJr.forEach(t),ydo=r(x3e," \u2014 "),kB=n(x3e,"A",{href:!0});var SJr=s(kB);Ldo=r(SJr,"CLIPFeatureExtractor"),SJr.forEach(t),xdo=r(x3e," (CLIP model)"),x3e.forEach(t),$do=i(ee),lh=n(ee,"LI",{});var $3e=s(lh);tne=n($3e,"STRONG",{});var RJr=s(tne);kdo=r(RJr,"convnext"),RJr.forEach(t),Sdo=r($3e," \u2014 "),SB=n($3e,"A",{href:!0});var PJr=s(SB);Rdo=r(PJr,"ConvNextFeatureExtractor"),PJr.forEach(t),Pdo=r($3e," (ConvNext model)"),$3e.forEach(t),Bdo=i(ee),ih=n(ee,"LI",{});var k3e=s(ih);ane=n(k3e,"STRONG",{});var BJr=s(ane);Ido=r(BJr,"cvt"),BJr.forEach(t),qdo=r(k3e," \u2014 "),RB=n(k3e,"A",{href:!0});var IJr=s(RB);Ndo=r(IJr,"ConvNextFeatureExtractor"),IJr.forEach(t),jdo=r(k3e," (CvT model)"),k3e.forEach(t),Ddo=i(ee),dh=n(ee,"LI",{});var S3e=s(dh);nne=n(S3e,"STRONG",{});var qJr=s(nne);Gdo=r(qJr,"data2vec-audio"),qJr.forEach(t),Odo=r(S3e," \u2014 "),PB=n(S3e,"A",{href:!0});var NJr=s(PB);Vdo=r(NJr,"Wav2Vec2FeatureExtractor"),NJr.forEach(t),Xdo=r(S3e," (Data2VecAudio model)"),S3e.forEach(t),zdo=i(ee),ch=n(ee,"LI",{});var R3e=s(ch);sne=n(R3e,"STRONG",{});var jJr=s(sne);Wdo=r(jJr,"data2vec-vision"),jJr.forEach(t),Qdo=r(R3e," \u2014 "),BB=n(R3e,"A",{href:!0});var DJr=s(BB);Hdo=r(DJr,"BeitFeatureExtractor"),DJr.forEach(t),Udo=r(R3e," (Data2VecVision model)"),R3e.forEach(t),Jdo=i(ee),fh=n(ee,"LI",{});var P3e=s(fh);lne=n(P3e,"STRONG",{});var GJr=s(lne);Ydo=r(GJr,"deit"),GJr.forEach(t),Kdo=r(P3e," \u2014 "),IB=n(P3e,"A",{href:!0});var OJr=s(IB);Zdo=r(OJr,"DeiTFeatureExtractor"),OJr.forEach(t),eco=r(P3e," (DeiT model)"),P3e.forEach(t),oco=i(ee),mh=n(ee,"LI",{});var B3e=s(mh);ine=n(B3e,"STRONG",{});var VJr=s(ine);rco=r(VJr,"detr"),VJr.forEach(t),tco=r(B3e," \u2014 "),qB=n(B3e,"A",{href:!0});var XJr=s(qB);aco=r(XJr,"DetrFeatureExtractor"),XJr.forEach(t),nco=r(B3e," (DETR model)"),B3e.forEach(t),sco=i(ee),gh=n(ee,"LI",{});var I3e=s(gh);dne=n(I3e,"STRONG",{});var zJr=s(dne);lco=r(zJr,"dpt"),zJr.forEach(t),ico=r(I3e," \u2014 "),NB=n(I3e,"A",{href:!0});var WJr=s(NB);dco=r(WJr,"DPTFeatureExtractor"),WJr.forEach(t),cco=r(I3e," (DPT model)"),I3e.forEach(t),fco=i(ee),hh=n(ee,"LI",{});var q3e=s(hh);cne=n(q3e,"STRONG",{});var QJr=s(cne);mco=r(QJr,"flava"),QJr.forEach(t),gco=r(q3e," \u2014 "),jB=n(q3e,"A",{href:!0});var HJr=s(jB);hco=r(HJr,"FlavaFeatureExtractor"),HJr.forEach(t),pco=r(q3e," (Flava model)"),q3e.forEach(t),uco=i(ee),ph=n(ee,"LI",{});var N3e=s(ph);fne=n(N3e,"STRONG",{});var UJr=s(fne);_co=r(UJr,"glpn"),UJr.forEach(t),bco=r(N3e," \u2014 "),DB=n(N3e,"A",{href:!0});var JJr=s(DB);vco=r(JJr,"GLPNFeatureExtractor"),JJr.forEach(t),Fco=r(N3e," (GLPN model)"),N3e.forEach(t),Tco=i(ee),uh=n(ee,"LI",{});var j3e=s(uh);mne=n(j3e,"STRONG",{});var YJr=s(mne);Mco=r(YJr,"hubert"),YJr.forEach(t),Eco=r(j3e," \u2014 "),GB=n(j3e,"A",{href:!0});var KJr=s(GB);Cco=r(KJr,"Wav2Vec2FeatureExtractor"),KJr.forEach(t),wco=r(j3e," (Hubert model)"),j3e.forEach(t),Aco=i(ee),_h=n(ee,"LI",{});var D3e=s(_h);gne=n(D3e,"STRONG",{});var ZJr=s(gne);yco=r(ZJr,"layoutlmv2"),ZJr.forEach(t),Lco=r(D3e," \u2014 "),OB=n(D3e,"A",{href:!0});var eYr=s(OB);xco=r(eYr,"LayoutLMv2FeatureExtractor"),eYr.forEach(t),$co=r(D3e," (LayoutLMv2 model)"),D3e.forEach(t),kco=i(ee),bh=n(ee,"LI",{});var G3e=s(bh);hne=n(G3e,"STRONG",{});var oYr=s(hne);Sco=r(oYr,"layoutlmv3"),oYr.forEach(t),Rco=r(G3e," \u2014 "),VB=n(G3e,"A",{href:!0});var rYr=s(VB);Pco=r(rYr,"LayoutLMv3FeatureExtractor"),rYr.forEach(t),Bco=r(G3e," (LayoutLMv3 model)"),G3e.forEach(t),Ico=i(ee),vh=n(ee,"LI",{});var O3e=s(vh);pne=n(O3e,"STRONG",{});var tYr=s(pne);qco=r(tYr,"maskformer"),tYr.forEach(t),Nco=r(O3e," \u2014 "),XB=n(O3e,"A",{href:!0});var aYr=s(XB);jco=r(aYr,"MaskFormerFeatureExtractor"),aYr.forEach(t),Dco=r(O3e," (MaskFormer model)"),O3e.forEach(t),Gco=i(ee),Fh=n(ee,"LI",{});var V3e=s(Fh);une=n(V3e,"STRONG",{});var nYr=s(une);Oco=r(nYr,"perceiver"),nYr.forEach(t),Vco=r(V3e," \u2014 "),zB=n(V3e,"A",{href:!0});var sYr=s(zB);Xco=r(sYr,"PerceiverFeatureExtractor"),sYr.forEach(t),zco=r(V3e," (Perceiver model)"),V3e.forEach(t),Wco=i(ee),Th=n(ee,"LI",{});var X3e=s(Th);_ne=n(X3e,"STRONG",{});var lYr=s(_ne);Qco=r(lYr,"poolformer"),lYr.forEach(t),Hco=r(X3e," \u2014 "),WB=n(X3e,"A",{href:!0});var iYr=s(WB);Uco=r(iYr,"PoolFormerFeatureExtractor"),iYr.forEach(t),Jco=r(X3e," (PoolFormer model)"),X3e.forEach(t),Yco=i(ee),Mh=n(ee,"LI",{});var z3e=s(Mh);bne=n(z3e,"STRONG",{});var dYr=s(bne);Kco=r(dYr,"regnet"),dYr.forEach(t),Zco=r(z3e," \u2014 "),QB=n(z3e,"A",{href:!0});var cYr=s(QB);efo=r(cYr,"ConvNextFeatureExtractor"),cYr.forEach(t),ofo=r(z3e," (RegNet model)"),z3e.forEach(t),rfo=i(ee),Eh=n(ee,"LI",{});var W3e=s(Eh);vne=n(W3e,"STRONG",{});var fYr=s(vne);tfo=r(fYr,"resnet"),fYr.forEach(t),afo=r(W3e," \u2014 "),HB=n(W3e,"A",{href:!0});var mYr=s(HB);nfo=r(mYr,"ConvNextFeatureExtractor"),mYr.forEach(t),sfo=r(W3e," (ResNet model)"),W3e.forEach(t),lfo=i(ee),Ch=n(ee,"LI",{});var Q3e=s(Ch);Fne=n(Q3e,"STRONG",{});var gYr=s(Fne);ifo=r(gYr,"segformer"),gYr.forEach(t),dfo=r(Q3e," \u2014 "),UB=n(Q3e,"A",{href:!0});var hYr=s(UB);cfo=r(hYr,"SegformerFeatureExtractor"),hYr.forEach(t),ffo=r(Q3e," (SegFormer model)"),Q3e.forEach(t),mfo=i(ee),wh=n(ee,"LI",{});var H3e=s(wh);Tne=n(H3e,"STRONG",{});var pYr=s(Tne);gfo=r(pYr,"speech_to_text"),pYr.forEach(t),hfo=r(H3e," \u2014 "),JB=n(H3e,"A",{href:!0});var uYr=s(JB);pfo=r(uYr,"Speech2TextFeatureExtractor"),uYr.forEach(t),ufo=r(H3e," (Speech2Text model)"),H3e.forEach(t),_fo=i(ee),Ah=n(ee,"LI",{});var U3e=s(Ah);Mne=n(U3e,"STRONG",{});var _Yr=s(Mne);bfo=r(_Yr,"swin"),_Yr.forEach(t),vfo=r(U3e," \u2014 "),YB=n(U3e,"A",{href:!0});var bYr=s(YB);Ffo=r(bYr,"ViTFeatureExtractor"),bYr.forEach(t),Tfo=r(U3e," (Swin model)"),U3e.forEach(t),Mfo=i(ee),yh=n(ee,"LI",{});var J3e=s(yh);Ene=n(J3e,"STRONG",{});var vYr=s(Ene);Efo=r(vYr,"van"),vYr.forEach(t),Cfo=r(J3e," \u2014 "),KB=n(J3e,"A",{href:!0});var FYr=s(KB);wfo=r(FYr,"ConvNextFeatureExtractor"),FYr.forEach(t),Afo=r(J3e," (VAN model)"),J3e.forEach(t),yfo=i(ee),Lh=n(ee,"LI",{});var Y3e=s(Lh);Cne=n(Y3e,"STRONG",{});var TYr=s(Cne);Lfo=r(TYr,"vit"),TYr.forEach(t),xfo=r(Y3e," \u2014 "),ZB=n(Y3e,"A",{href:!0});var MYr=s(ZB);$fo=r(MYr,"ViTFeatureExtractor"),MYr.forEach(t),kfo=r(Y3e," (ViT model)"),Y3e.forEach(t),Sfo=i(ee),xh=n(ee,"LI",{});var K3e=s(xh);wne=n(K3e,"STRONG",{});var EYr=s(wne);Rfo=r(EYr,"vit_mae"),EYr.forEach(t),Pfo=r(K3e," \u2014 "),eI=n(K3e,"A",{href:!0});var CYr=s(eI);Bfo=r(CYr,"ViTFeatureExtractor"),CYr.forEach(t),Ifo=r(K3e," (ViTMAE model)"),K3e.forEach(t),qfo=i(ee),$h=n(ee,"LI",{});var Z3e=s($h);Ane=n(Z3e,"STRONG",{});var wYr=s(Ane);Nfo=r(wYr,"wav2vec2"),wYr.forEach(t),jfo=r(Z3e," \u2014 "),oI=n(Z3e,"A",{href:!0});var AYr=s(oI);Dfo=r(AYr,"Wav2Vec2FeatureExtractor"),AYr.forEach(t),Gfo=r(Z3e," (Wav2Vec2 model)"),Z3e.forEach(t),Ofo=i(ee),kh=n(ee,"LI",{});var ewe=s(kh);yne=n(ewe,"STRONG",{});var yYr=s(yne);Vfo=r(yYr,"wav2vec2-conformer"),yYr.forEach(t),Xfo=r(ewe," \u2014 "),rI=n(ewe,"A",{href:!0});var LYr=s(rI);zfo=r(LYr,"Wav2Vec2FeatureExtractor"),LYr.forEach(t),Wfo=r(ewe," (Wav2Vec2-Conformer model)"),ewe.forEach(t),Qfo=i(ee),Sh=n(ee,"LI",{});var owe=s(Sh);Lne=n(owe,"STRONG",{});var xYr=s(Lne);Hfo=r(xYr,"yolos"),xYr.forEach(t),Ufo=r(owe," \u2014 "),tI=n(owe,"A",{href:!0});var $Yr=s(tI);Jfo=r($Yr,"YolosFeatureExtractor"),$Yr.forEach(t),Yfo=r(owe," (YOLOS model)"),owe.forEach(t),ee.forEach(t),Kfo=i(Zt),T(Rh.$$.fragment,Zt),Zfo=i(Zt),T(Ph.$$.fragment,Zt),Zt.forEach(t),emo=i(js),Bh=n(js,"DIV",{class:!0});var Xje=s(Bh);T(GA.$$.fragment,Xje),omo=i(Xje),xne=n(Xje,"P",{});var kYr=s(xne);rmo=r(kYr,"Register a new feature extractor for this class."),kYr.forEach(t),Xje.forEach(t),js.forEach(t),Vqe=i(f),Ei=n(f,"H2",{class:!0});var zje=s(Ei);Ih=n(zje,"A",{id:!0,class:!0,href:!0});var SYr=s(Ih);$ne=n(SYr,"SPAN",{});var RYr=s($ne);T(OA.$$.fragment,RYr),RYr.forEach(t),SYr.forEach(t),tmo=i(zje),kne=n(zje,"SPAN",{});var PYr=s(kne);amo=r(PYr,"AutoProcessor"),PYr.forEach(t),zje.forEach(t),Xqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(VA.$$.fragment,Ds),nmo=i(Ds),XA=n(Ds,"P",{});var Wje=s(XA);smo=r(Wje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aI=n(Wje,"A",{href:!0});var BYr=s(aI);lmo=r(BYr,"AutoProcessor.from_pretrained()"),BYr.forEach(t),imo=r(Wje," class method."),Wje.forEach(t),dmo=i(Ds),zA=n(Ds,"P",{});var Qje=s(zA);cmo=r(Qje,"This class cannot be instantiated directly using "),Sne=n(Qje,"CODE",{});var IYr=s(Sne);fmo=r(IYr,"__init__()"),IYr.forEach(t),mmo=r(Qje," (throws an error)."),Qje.forEach(t),gmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(WA.$$.fragment,ea),hmo=i(ea),Rne=n(ea,"P",{});var qYr=s(Rne);pmo=r(qYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qYr.forEach(t),umo=i(ea),Ci=n(ea,"P",{});var aZ=s(Ci);_mo=r(aZ,"The processor class to instantiate is selected based on the "),Pne=n(aZ,"CODE",{});var NYr=s(Pne);bmo=r(NYr,"model_type"),NYr.forEach(t),vmo=r(aZ,` property of the config object (either
passed as an argument or loaded from `),Bne=n(aZ,"CODE",{});var jYr=s(Bne);Fmo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),Tmo=r(aZ," if possible):"),aZ.forEach(t),Mmo=i(ea),he=n(ea,"UL",{});var _e=s(he);qh=n(_e,"LI",{});var rwe=s(qh);Ine=n(rwe,"STRONG",{});var DYr=s(Ine);Emo=r(DYr,"clip"),DYr.forEach(t),Cmo=r(rwe," \u2014 "),nI=n(rwe,"A",{href:!0});var GYr=s(nI);wmo=r(GYr,"CLIPProcessor"),GYr.forEach(t),Amo=r(rwe," (CLIP model)"),rwe.forEach(t),ymo=i(_e),Nh=n(_e,"LI",{});var twe=s(Nh);qne=n(twe,"STRONG",{});var OYr=s(qne);Lmo=r(OYr,"flava"),OYr.forEach(t),xmo=r(twe," \u2014 "),Nne=n(twe,"CODE",{});var VYr=s(Nne);$mo=r(VYr,"FLAVAProcessor"),VYr.forEach(t),kmo=r(twe," (Flava model)"),twe.forEach(t),Smo=i(_e),jh=n(_e,"LI",{});var awe=s(jh);jne=n(awe,"STRONG",{});var XYr=s(jne);Rmo=r(XYr,"layoutlmv2"),XYr.forEach(t),Pmo=r(awe," \u2014 "),sI=n(awe,"A",{href:!0});var zYr=s(sI);Bmo=r(zYr,"LayoutLMv2Processor"),zYr.forEach(t),Imo=r(awe," (LayoutLMv2 model)"),awe.forEach(t),qmo=i(_e),Dh=n(_e,"LI",{});var nwe=s(Dh);Dne=n(nwe,"STRONG",{});var WYr=s(Dne);Nmo=r(WYr,"layoutlmv3"),WYr.forEach(t),jmo=r(nwe," \u2014 "),lI=n(nwe,"A",{href:!0});var QYr=s(lI);Dmo=r(QYr,"LayoutLMv3Processor"),QYr.forEach(t),Gmo=r(nwe," (LayoutLMv3 model)"),nwe.forEach(t),Omo=i(_e),Gh=n(_e,"LI",{});var swe=s(Gh);Gne=n(swe,"STRONG",{});var HYr=s(Gne);Vmo=r(HYr,"layoutxlm"),HYr.forEach(t),Xmo=r(swe," \u2014 "),iI=n(swe,"A",{href:!0});var UYr=s(iI);zmo=r(UYr,"LayoutXLMProcessor"),UYr.forEach(t),Wmo=r(swe," (LayoutXLM model)"),swe.forEach(t),Qmo=i(_e),Oh=n(_e,"LI",{});var lwe=s(Oh);One=n(lwe,"STRONG",{});var JYr=s(One);Hmo=r(JYr,"sew"),JYr.forEach(t),Umo=r(lwe," \u2014 "),dI=n(lwe,"A",{href:!0});var YYr=s(dI);Jmo=r(YYr,"Wav2Vec2Processor"),YYr.forEach(t),Ymo=r(lwe," (SEW model)"),lwe.forEach(t),Kmo=i(_e),Vh=n(_e,"LI",{});var iwe=s(Vh);Vne=n(iwe,"STRONG",{});var KYr=s(Vne);Zmo=r(KYr,"sew-d"),KYr.forEach(t),ego=r(iwe," \u2014 "),cI=n(iwe,"A",{href:!0});var ZYr=s(cI);ogo=r(ZYr,"Wav2Vec2Processor"),ZYr.forEach(t),rgo=r(iwe," (SEW-D model)"),iwe.forEach(t),tgo=i(_e),Xh=n(_e,"LI",{});var dwe=s(Xh);Xne=n(dwe,"STRONG",{});var eKr=s(Xne);ago=r(eKr,"speech_to_text"),eKr.forEach(t),ngo=r(dwe," \u2014 "),fI=n(dwe,"A",{href:!0});var oKr=s(fI);sgo=r(oKr,"Speech2TextProcessor"),oKr.forEach(t),lgo=r(dwe," (Speech2Text model)"),dwe.forEach(t),igo=i(_e),zh=n(_e,"LI",{});var cwe=s(zh);zne=n(cwe,"STRONG",{});var rKr=s(zne);dgo=r(rKr,"speech_to_text_2"),rKr.forEach(t),cgo=r(cwe," \u2014 "),mI=n(cwe,"A",{href:!0});var tKr=s(mI);fgo=r(tKr,"Speech2Text2Processor"),tKr.forEach(t),mgo=r(cwe," (Speech2Text2 model)"),cwe.forEach(t),ggo=i(_e),Wh=n(_e,"LI",{});var fwe=s(Wh);Wne=n(fwe,"STRONG",{});var aKr=s(Wne);hgo=r(aKr,"trocr"),aKr.forEach(t),pgo=r(fwe," \u2014 "),gI=n(fwe,"A",{href:!0});var nKr=s(gI);ugo=r(nKr,"TrOCRProcessor"),nKr.forEach(t),_go=r(fwe," (TrOCR model)"),fwe.forEach(t),bgo=i(_e),Qh=n(_e,"LI",{});var mwe=s(Qh);Qne=n(mwe,"STRONG",{});var sKr=s(Qne);vgo=r(sKr,"unispeech"),sKr.forEach(t),Fgo=r(mwe," \u2014 "),hI=n(mwe,"A",{href:!0});var lKr=s(hI);Tgo=r(lKr,"Wav2Vec2Processor"),lKr.forEach(t),Mgo=r(mwe," (UniSpeech model)"),mwe.forEach(t),Ego=i(_e),Hh=n(_e,"LI",{});var gwe=s(Hh);Hne=n(gwe,"STRONG",{});var iKr=s(Hne);Cgo=r(iKr,"unispeech-sat"),iKr.forEach(t),wgo=r(gwe," \u2014 "),pI=n(gwe,"A",{href:!0});var dKr=s(pI);Ago=r(dKr,"Wav2Vec2Processor"),dKr.forEach(t),ygo=r(gwe," (UniSpeechSat model)"),gwe.forEach(t),Lgo=i(_e),Uh=n(_e,"LI",{});var hwe=s(Uh);Une=n(hwe,"STRONG",{});var cKr=s(Une);xgo=r(cKr,"vilt"),cKr.forEach(t),$go=r(hwe," \u2014 "),uI=n(hwe,"A",{href:!0});var fKr=s(uI);kgo=r(fKr,"ViltProcessor"),fKr.forEach(t),Sgo=r(hwe," (ViLT model)"),hwe.forEach(t),Rgo=i(_e),Jh=n(_e,"LI",{});var pwe=s(Jh);Jne=n(pwe,"STRONG",{});var mKr=s(Jne);Pgo=r(mKr,"vision-text-dual-encoder"),mKr.forEach(t),Bgo=r(pwe," \u2014 "),_I=n(pwe,"A",{href:!0});var gKr=s(_I);Igo=r(gKr,"VisionTextDualEncoderProcessor"),gKr.forEach(t),qgo=r(pwe," (VisionTextDualEncoder model)"),pwe.forEach(t),Ngo=i(_e),Yh=n(_e,"LI",{});var uwe=s(Yh);Yne=n(uwe,"STRONG",{});var hKr=s(Yne);jgo=r(hKr,"wav2vec2"),hKr.forEach(t),Dgo=r(uwe," \u2014 "),bI=n(uwe,"A",{href:!0});var pKr=s(bI);Ggo=r(pKr,"Wav2Vec2Processor"),pKr.forEach(t),Ogo=r(uwe," (Wav2Vec2 model)"),uwe.forEach(t),Vgo=i(_e),Kh=n(_e,"LI",{});var _we=s(Kh);Kne=n(_we,"STRONG",{});var uKr=s(Kne);Xgo=r(uKr,"wav2vec2-conformer"),uKr.forEach(t),zgo=r(_we," \u2014 "),vI=n(_we,"A",{href:!0});var _Kr=s(vI);Wgo=r(_Kr,"Wav2Vec2Processor"),_Kr.forEach(t),Qgo=r(_we," (Wav2Vec2-Conformer model)"),_we.forEach(t),Hgo=i(_e),Zh=n(_e,"LI",{});var bwe=s(Zh);Zne=n(bwe,"STRONG",{});var bKr=s(Zne);Ugo=r(bKr,"wavlm"),bKr.forEach(t),Jgo=r(bwe," \u2014 "),FI=n(bwe,"A",{href:!0});var vKr=s(FI);Ygo=r(vKr,"Wav2Vec2Processor"),vKr.forEach(t),Kgo=r(bwe," (WavLM model)"),bwe.forEach(t),_e.forEach(t),Zgo=i(ea),T(ep.$$.fragment,ea),eho=i(ea),T(op.$$.fragment,ea),ea.forEach(t),oho=i(Ds),rp=n(Ds,"DIV",{class:!0});var Hje=s(rp);T(QA.$$.fragment,Hje),rho=i(Hje),ese=n(Hje,"P",{});var FKr=s(ese);tho=r(FKr,"Register a new processor for this class."),FKr.forEach(t),Hje.forEach(t),Ds.forEach(t),zqe=i(f),wi=n(f,"H2",{class:!0});var Uje=s(wi);tp=n(Uje,"A",{id:!0,class:!0,href:!0});var TKr=s(tp);ose=n(TKr,"SPAN",{});var MKr=s(ose);T(HA.$$.fragment,MKr),MKr.forEach(t),TKr.forEach(t),aho=i(Uje),rse=n(Uje,"SPAN",{});var EKr=s(rse);nho=r(EKr,"AutoModel"),EKr.forEach(t),Uje.forEach(t),Wqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(UA.$$.fragment,Gs),sho=i(Gs),Ai=n(Gs,"P",{});var nZ=s(Ai);lho=r(nZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TI=n(nZ,"A",{href:!0});var CKr=s(TI);iho=r(CKr,"from_pretrained()"),CKr.forEach(t),dho=r(nZ," class method or the "),MI=n(nZ,"A",{href:!0});var wKr=s(MI);cho=r(wKr,"from_config()"),wKr.forEach(t),fho=r(nZ,` class
method.`),nZ.forEach(t),mho=i(Gs),JA=n(Gs,"P",{});var Jje=s(JA);gho=r(Jje,"This class cannot be instantiated directly using "),tse=n(Jje,"CODE",{});var AKr=s(tse);hho=r(AKr,"__init__()"),AKr.forEach(t),pho=r(Jje," (throws an error)."),Jje.forEach(t),uho=i(Gs),tt=n(Gs,"DIV",{class:!0});var A3=s(tt);T(YA.$$.fragment,A3),_ho=i(A3),ase=n(A3,"P",{});var yKr=s(ase);bho=r(yKr,"Instantiates one of the base model classes of the library from a configuration."),yKr.forEach(t),vho=i(A3),yi=n(A3,"P",{});var sZ=s(yi);Fho=r(sZ,`Note:
Loading a model from its configuration file does `),nse=n(sZ,"STRONG",{});var LKr=s(nse);Tho=r(LKr,"not"),LKr.forEach(t),Mho=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=n(sZ,"A",{href:!0});var xKr=s(EI);Eho=r(xKr,"from_pretrained()"),xKr.forEach(t),Cho=r(sZ," to load the model weights."),sZ.forEach(t),who=i(A3),T(ap.$$.fragment,A3),A3.forEach(t),Aho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(KA.$$.fragment,oa),yho=i(oa),sse=n(oa,"P",{});var $Kr=s(sse);Lho=r($Kr,"Instantiate one of the base model classes of the library from a pretrained model."),$Kr.forEach(t),xho=i(oa),La=n(oa,"P",{});var y3=s(La);$ho=r(y3,"The model class to instantiate is selected based on the "),lse=n(y3,"CODE",{});var kKr=s(lse);kho=r(kKr,"model_type"),kKr.forEach(t),Sho=r(y3,` property of the config object (either
passed as an argument or loaded from `),ise=n(y3,"CODE",{});var SKr=s(ise);Rho=r(SKr,"pretrained_model_name_or_path"),SKr.forEach(t),Pho=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=n(y3,"CODE",{});var RKr=s(dse);Bho=r(RKr,"pretrained_model_name_or_path"),RKr.forEach(t),Iho=r(y3,":"),y3.forEach(t),qho=i(oa),x=n(oa,"UL",{});var $=s(x);np=n($,"LI",{});var vwe=s(np);cse=n(vwe,"STRONG",{});var PKr=s(cse);Nho=r(PKr,"albert"),PKr.forEach(t),jho=r(vwe," \u2014 "),CI=n(vwe,"A",{href:!0});var BKr=s(CI);Dho=r(BKr,"AlbertModel"),BKr.forEach(t),Gho=r(vwe," (ALBERT model)"),vwe.forEach(t),Oho=i($),sp=n($,"LI",{});var Fwe=s(sp);fse=n(Fwe,"STRONG",{});var IKr=s(fse);Vho=r(IKr,"bart"),IKr.forEach(t),Xho=r(Fwe," \u2014 "),wI=n(Fwe,"A",{href:!0});var qKr=s(wI);zho=r(qKr,"BartModel"),qKr.forEach(t),Who=r(Fwe," (BART model)"),Fwe.forEach(t),Qho=i($),lp=n($,"LI",{});var Twe=s(lp);mse=n(Twe,"STRONG",{});var NKr=s(mse);Hho=r(NKr,"beit"),NKr.forEach(t),Uho=r(Twe," \u2014 "),AI=n(Twe,"A",{href:!0});var jKr=s(AI);Jho=r(jKr,"BeitModel"),jKr.forEach(t),Yho=r(Twe," (BEiT model)"),Twe.forEach(t),Kho=i($),ip=n($,"LI",{});var Mwe=s(ip);gse=n(Mwe,"STRONG",{});var DKr=s(gse);Zho=r(DKr,"bert"),DKr.forEach(t),epo=r(Mwe," \u2014 "),yI=n(Mwe,"A",{href:!0});var GKr=s(yI);opo=r(GKr,"BertModel"),GKr.forEach(t),rpo=r(Mwe," (BERT model)"),Mwe.forEach(t),tpo=i($),dp=n($,"LI",{});var Ewe=s(dp);hse=n(Ewe,"STRONG",{});var OKr=s(hse);apo=r(OKr,"bert-generation"),OKr.forEach(t),npo=r(Ewe," \u2014 "),LI=n(Ewe,"A",{href:!0});var VKr=s(LI);spo=r(VKr,"BertGenerationEncoder"),VKr.forEach(t),lpo=r(Ewe," (Bert Generation model)"),Ewe.forEach(t),ipo=i($),cp=n($,"LI",{});var Cwe=s(cp);pse=n(Cwe,"STRONG",{});var XKr=s(pse);dpo=r(XKr,"big_bird"),XKr.forEach(t),cpo=r(Cwe," \u2014 "),xI=n(Cwe,"A",{href:!0});var zKr=s(xI);fpo=r(zKr,"BigBirdModel"),zKr.forEach(t),mpo=r(Cwe," (BigBird model)"),Cwe.forEach(t),gpo=i($),fp=n($,"LI",{});var wwe=s(fp);use=n(wwe,"STRONG",{});var WKr=s(use);hpo=r(WKr,"bigbird_pegasus"),WKr.forEach(t),ppo=r(wwe," \u2014 "),$I=n(wwe,"A",{href:!0});var QKr=s($I);upo=r(QKr,"BigBirdPegasusModel"),QKr.forEach(t),_po=r(wwe," (BigBirdPegasus model)"),wwe.forEach(t),bpo=i($),mp=n($,"LI",{});var Awe=s(mp);_se=n(Awe,"STRONG",{});var HKr=s(_se);vpo=r(HKr,"blenderbot"),HKr.forEach(t),Fpo=r(Awe," \u2014 "),kI=n(Awe,"A",{href:!0});var UKr=s(kI);Tpo=r(UKr,"BlenderbotModel"),UKr.forEach(t),Mpo=r(Awe," (Blenderbot model)"),Awe.forEach(t),Epo=i($),gp=n($,"LI",{});var ywe=s(gp);bse=n(ywe,"STRONG",{});var JKr=s(bse);Cpo=r(JKr,"blenderbot-small"),JKr.forEach(t),wpo=r(ywe," \u2014 "),SI=n(ywe,"A",{href:!0});var YKr=s(SI);Apo=r(YKr,"BlenderbotSmallModel"),YKr.forEach(t),ypo=r(ywe," (BlenderbotSmall model)"),ywe.forEach(t),Lpo=i($),hp=n($,"LI",{});var Lwe=s(hp);vse=n(Lwe,"STRONG",{});var KKr=s(vse);xpo=r(KKr,"camembert"),KKr.forEach(t),$po=r(Lwe," \u2014 "),RI=n(Lwe,"A",{href:!0});var ZKr=s(RI);kpo=r(ZKr,"CamembertModel"),ZKr.forEach(t),Spo=r(Lwe," (CamemBERT model)"),Lwe.forEach(t),Rpo=i($),pp=n($,"LI",{});var xwe=s(pp);Fse=n(xwe,"STRONG",{});var eZr=s(Fse);Ppo=r(eZr,"canine"),eZr.forEach(t),Bpo=r(xwe," \u2014 "),PI=n(xwe,"A",{href:!0});var oZr=s(PI);Ipo=r(oZr,"CanineModel"),oZr.forEach(t),qpo=r(xwe," (Canine model)"),xwe.forEach(t),Npo=i($),up=n($,"LI",{});var $we=s(up);Tse=n($we,"STRONG",{});var rZr=s(Tse);jpo=r(rZr,"clip"),rZr.forEach(t),Dpo=r($we," \u2014 "),BI=n($we,"A",{href:!0});var tZr=s(BI);Gpo=r(tZr,"CLIPModel"),tZr.forEach(t),Opo=r($we," (CLIP model)"),$we.forEach(t),Vpo=i($),_p=n($,"LI",{});var kwe=s(_p);Mse=n(kwe,"STRONG",{});var aZr=s(Mse);Xpo=r(aZr,"convbert"),aZr.forEach(t),zpo=r(kwe," \u2014 "),II=n(kwe,"A",{href:!0});var nZr=s(II);Wpo=r(nZr,"ConvBertModel"),nZr.forEach(t),Qpo=r(kwe," (ConvBERT model)"),kwe.forEach(t),Hpo=i($),bp=n($,"LI",{});var Swe=s(bp);Ese=n(Swe,"STRONG",{});var sZr=s(Ese);Upo=r(sZr,"convnext"),sZr.forEach(t),Jpo=r(Swe," \u2014 "),qI=n(Swe,"A",{href:!0});var lZr=s(qI);Ypo=r(lZr,"ConvNextModel"),lZr.forEach(t),Kpo=r(Swe," (ConvNext model)"),Swe.forEach(t),Zpo=i($),vp=n($,"LI",{});var Rwe=s(vp);Cse=n(Rwe,"STRONG",{});var iZr=s(Cse);euo=r(iZr,"ctrl"),iZr.forEach(t),ouo=r(Rwe," \u2014 "),NI=n(Rwe,"A",{href:!0});var dZr=s(NI);ruo=r(dZr,"CTRLModel"),dZr.forEach(t),tuo=r(Rwe," (CTRL model)"),Rwe.forEach(t),auo=i($),Fp=n($,"LI",{});var Pwe=s(Fp);wse=n(Pwe,"STRONG",{});var cZr=s(wse);nuo=r(cZr,"cvt"),cZr.forEach(t),suo=r(Pwe," \u2014 "),jI=n(Pwe,"A",{href:!0});var fZr=s(jI);luo=r(fZr,"CvtModel"),fZr.forEach(t),iuo=r(Pwe," (CvT model)"),Pwe.forEach(t),duo=i($),Tp=n($,"LI",{});var Bwe=s(Tp);Ase=n(Bwe,"STRONG",{});var mZr=s(Ase);cuo=r(mZr,"data2vec-audio"),mZr.forEach(t),fuo=r(Bwe," \u2014 "),DI=n(Bwe,"A",{href:!0});var gZr=s(DI);muo=r(gZr,"Data2VecAudioModel"),gZr.forEach(t),guo=r(Bwe," (Data2VecAudio model)"),Bwe.forEach(t),huo=i($),Mp=n($,"LI",{});var Iwe=s(Mp);yse=n(Iwe,"STRONG",{});var hZr=s(yse);puo=r(hZr,"data2vec-text"),hZr.forEach(t),uuo=r(Iwe," \u2014 "),GI=n(Iwe,"A",{href:!0});var pZr=s(GI);_uo=r(pZr,"Data2VecTextModel"),pZr.forEach(t),buo=r(Iwe," (Data2VecText model)"),Iwe.forEach(t),vuo=i($),Ep=n($,"LI",{});var qwe=s(Ep);Lse=n(qwe,"STRONG",{});var uZr=s(Lse);Fuo=r(uZr,"data2vec-vision"),uZr.forEach(t),Tuo=r(qwe," \u2014 "),OI=n(qwe,"A",{href:!0});var _Zr=s(OI);Muo=r(_Zr,"Data2VecVisionModel"),_Zr.forEach(t),Euo=r(qwe," (Data2VecVision model)"),qwe.forEach(t),Cuo=i($),Cp=n($,"LI",{});var Nwe=s(Cp);xse=n(Nwe,"STRONG",{});var bZr=s(xse);wuo=r(bZr,"deberta"),bZr.forEach(t),Auo=r(Nwe," \u2014 "),VI=n(Nwe,"A",{href:!0});var vZr=s(VI);yuo=r(vZr,"DebertaModel"),vZr.forEach(t),Luo=r(Nwe," (DeBERTa model)"),Nwe.forEach(t),xuo=i($),wp=n($,"LI",{});var jwe=s(wp);$se=n(jwe,"STRONG",{});var FZr=s($se);$uo=r(FZr,"deberta-v2"),FZr.forEach(t),kuo=r(jwe," \u2014 "),XI=n(jwe,"A",{href:!0});var TZr=s(XI);Suo=r(TZr,"DebertaV2Model"),TZr.forEach(t),Ruo=r(jwe," (DeBERTa-v2 model)"),jwe.forEach(t),Puo=i($),Ap=n($,"LI",{});var Dwe=s(Ap);kse=n(Dwe,"STRONG",{});var MZr=s(kse);Buo=r(MZr,"decision_transformer"),MZr.forEach(t),Iuo=r(Dwe," \u2014 "),zI=n(Dwe,"A",{href:!0});var EZr=s(zI);quo=r(EZr,"DecisionTransformerModel"),EZr.forEach(t),Nuo=r(Dwe," (Decision Transformer model)"),Dwe.forEach(t),juo=i($),yp=n($,"LI",{});var Gwe=s(yp);Sse=n(Gwe,"STRONG",{});var CZr=s(Sse);Duo=r(CZr,"deit"),CZr.forEach(t),Guo=r(Gwe," \u2014 "),WI=n(Gwe,"A",{href:!0});var wZr=s(WI);Ouo=r(wZr,"DeiTModel"),wZr.forEach(t),Vuo=r(Gwe," (DeiT model)"),Gwe.forEach(t),Xuo=i($),Lp=n($,"LI",{});var Owe=s(Lp);Rse=n(Owe,"STRONG",{});var AZr=s(Rse);zuo=r(AZr,"detr"),AZr.forEach(t),Wuo=r(Owe," \u2014 "),QI=n(Owe,"A",{href:!0});var yZr=s(QI);Quo=r(yZr,"DetrModel"),yZr.forEach(t),Huo=r(Owe," (DETR model)"),Owe.forEach(t),Uuo=i($),xp=n($,"LI",{});var Vwe=s(xp);Pse=n(Vwe,"STRONG",{});var LZr=s(Pse);Juo=r(LZr,"distilbert"),LZr.forEach(t),Yuo=r(Vwe," \u2014 "),HI=n(Vwe,"A",{href:!0});var xZr=s(HI);Kuo=r(xZr,"DistilBertModel"),xZr.forEach(t),Zuo=r(Vwe," (DistilBERT model)"),Vwe.forEach(t),e_o=i($),$p=n($,"LI",{});var Xwe=s($p);Bse=n(Xwe,"STRONG",{});var $Zr=s(Bse);o_o=r($Zr,"dpr"),$Zr.forEach(t),r_o=r(Xwe," \u2014 "),UI=n(Xwe,"A",{href:!0});var kZr=s(UI);t_o=r(kZr,"DPRQuestionEncoder"),kZr.forEach(t),a_o=r(Xwe," (DPR model)"),Xwe.forEach(t),n_o=i($),kp=n($,"LI",{});var zwe=s(kp);Ise=n(zwe,"STRONG",{});var SZr=s(Ise);s_o=r(SZr,"dpt"),SZr.forEach(t),l_o=r(zwe," \u2014 "),JI=n(zwe,"A",{href:!0});var RZr=s(JI);i_o=r(RZr,"DPTModel"),RZr.forEach(t),d_o=r(zwe," (DPT model)"),zwe.forEach(t),c_o=i($),Sp=n($,"LI",{});var Wwe=s(Sp);qse=n(Wwe,"STRONG",{});var PZr=s(qse);f_o=r(PZr,"electra"),PZr.forEach(t),m_o=r(Wwe," \u2014 "),YI=n(Wwe,"A",{href:!0});var BZr=s(YI);g_o=r(BZr,"ElectraModel"),BZr.forEach(t),h_o=r(Wwe," (ELECTRA model)"),Wwe.forEach(t),p_o=i($),Rp=n($,"LI",{});var Qwe=s(Rp);Nse=n(Qwe,"STRONG",{});var IZr=s(Nse);u_o=r(IZr,"flaubert"),IZr.forEach(t),__o=r(Qwe," \u2014 "),KI=n(Qwe,"A",{href:!0});var qZr=s(KI);b_o=r(qZr,"FlaubertModel"),qZr.forEach(t),v_o=r(Qwe," (FlauBERT model)"),Qwe.forEach(t),F_o=i($),Pp=n($,"LI",{});var Hwe=s(Pp);jse=n(Hwe,"STRONG",{});var NZr=s(jse);T_o=r(NZr,"flava"),NZr.forEach(t),M_o=r(Hwe," \u2014 "),ZI=n(Hwe,"A",{href:!0});var jZr=s(ZI);E_o=r(jZr,"FlavaModel"),jZr.forEach(t),C_o=r(Hwe," (Flava model)"),Hwe.forEach(t),w_o=i($),Bp=n($,"LI",{});var Uwe=s(Bp);Dse=n(Uwe,"STRONG",{});var DZr=s(Dse);A_o=r(DZr,"fnet"),DZr.forEach(t),y_o=r(Uwe," \u2014 "),eq=n(Uwe,"A",{href:!0});var GZr=s(eq);L_o=r(GZr,"FNetModel"),GZr.forEach(t),x_o=r(Uwe," (FNet model)"),Uwe.forEach(t),$_o=i($),Ip=n($,"LI",{});var Jwe=s(Ip);Gse=n(Jwe,"STRONG",{});var OZr=s(Gse);k_o=r(OZr,"fsmt"),OZr.forEach(t),S_o=r(Jwe," \u2014 "),oq=n(Jwe,"A",{href:!0});var VZr=s(oq);R_o=r(VZr,"FSMTModel"),VZr.forEach(t),P_o=r(Jwe," (FairSeq Machine-Translation model)"),Jwe.forEach(t),B_o=i($),Ps=n($,"LI",{});var q$=s(Ps);Ose=n(q$,"STRONG",{});var XZr=s(Ose);I_o=r(XZr,"funnel"),XZr.forEach(t),q_o=r(q$," \u2014 "),rq=n(q$,"A",{href:!0});var zZr=s(rq);N_o=r(zZr,"FunnelModel"),zZr.forEach(t),j_o=r(q$," or "),tq=n(q$,"A",{href:!0});var WZr=s(tq);D_o=r(WZr,"FunnelBaseModel"),WZr.forEach(t),G_o=r(q$," (Funnel Transformer model)"),q$.forEach(t),O_o=i($),qp=n($,"LI",{});var Ywe=s(qp);Vse=n(Ywe,"STRONG",{});var QZr=s(Vse);V_o=r(QZr,"glpn"),QZr.forEach(t),X_o=r(Ywe," \u2014 "),aq=n(Ywe,"A",{href:!0});var HZr=s(aq);z_o=r(HZr,"GLPNModel"),HZr.forEach(t),W_o=r(Ywe," (GLPN model)"),Ywe.forEach(t),Q_o=i($),Np=n($,"LI",{});var Kwe=s(Np);Xse=n(Kwe,"STRONG",{});var UZr=s(Xse);H_o=r(UZr,"gpt2"),UZr.forEach(t),U_o=r(Kwe," \u2014 "),nq=n(Kwe,"A",{href:!0});var JZr=s(nq);J_o=r(JZr,"GPT2Model"),JZr.forEach(t),Y_o=r(Kwe," (OpenAI GPT-2 model)"),Kwe.forEach(t),K_o=i($),jp=n($,"LI",{});var Zwe=s(jp);zse=n(Zwe,"STRONG",{});var YZr=s(zse);Z_o=r(YZr,"gpt_neo"),YZr.forEach(t),e0o=r(Zwe," \u2014 "),sq=n(Zwe,"A",{href:!0});var KZr=s(sq);o0o=r(KZr,"GPTNeoModel"),KZr.forEach(t),r0o=r(Zwe," (GPT Neo model)"),Zwe.forEach(t),t0o=i($),Dp=n($,"LI",{});var eAe=s(Dp);Wse=n(eAe,"STRONG",{});var ZZr=s(Wse);a0o=r(ZZr,"gptj"),ZZr.forEach(t),n0o=r(eAe," \u2014 "),lq=n(eAe,"A",{href:!0});var eet=s(lq);s0o=r(eet,"GPTJModel"),eet.forEach(t),l0o=r(eAe," (GPT-J model)"),eAe.forEach(t),i0o=i($),Gp=n($,"LI",{});var oAe=s(Gp);Qse=n(oAe,"STRONG",{});var oet=s(Qse);d0o=r(oet,"hubert"),oet.forEach(t),c0o=r(oAe," \u2014 "),iq=n(oAe,"A",{href:!0});var ret=s(iq);f0o=r(ret,"HubertModel"),ret.forEach(t),m0o=r(oAe," (Hubert model)"),oAe.forEach(t),g0o=i($),Op=n($,"LI",{});var rAe=s(Op);Hse=n(rAe,"STRONG",{});var tet=s(Hse);h0o=r(tet,"ibert"),tet.forEach(t),p0o=r(rAe," \u2014 "),dq=n(rAe,"A",{href:!0});var aet=s(dq);u0o=r(aet,"IBertModel"),aet.forEach(t),_0o=r(rAe," (I-BERT model)"),rAe.forEach(t),b0o=i($),Vp=n($,"LI",{});var tAe=s(Vp);Use=n(tAe,"STRONG",{});var net=s(Use);v0o=r(net,"imagegpt"),net.forEach(t),F0o=r(tAe," \u2014 "),cq=n(tAe,"A",{href:!0});var set=s(cq);T0o=r(set,"ImageGPTModel"),set.forEach(t),M0o=r(tAe," (ImageGPT model)"),tAe.forEach(t),E0o=i($),Xp=n($,"LI",{});var aAe=s(Xp);Jse=n(aAe,"STRONG",{});var iet=s(Jse);C0o=r(iet,"layoutlm"),iet.forEach(t),w0o=r(aAe," \u2014 "),fq=n(aAe,"A",{href:!0});var det=s(fq);A0o=r(det,"LayoutLMModel"),det.forEach(t),y0o=r(aAe," (LayoutLM model)"),aAe.forEach(t),L0o=i($),zp=n($,"LI",{});var nAe=s(zp);Yse=n(nAe,"STRONG",{});var cet=s(Yse);x0o=r(cet,"layoutlmv2"),cet.forEach(t),$0o=r(nAe," \u2014 "),mq=n(nAe,"A",{href:!0});var fet=s(mq);k0o=r(fet,"LayoutLMv2Model"),fet.forEach(t),S0o=r(nAe," (LayoutLMv2 model)"),nAe.forEach(t),R0o=i($),Wp=n($,"LI",{});var sAe=s(Wp);Kse=n(sAe,"STRONG",{});var met=s(Kse);P0o=r(met,"layoutlmv3"),met.forEach(t),B0o=r(sAe," \u2014 "),gq=n(sAe,"A",{href:!0});var get=s(gq);I0o=r(get,"LayoutLMv3Model"),get.forEach(t),q0o=r(sAe," (LayoutLMv3 model)"),sAe.forEach(t),N0o=i($),Qp=n($,"LI",{});var lAe=s(Qp);Zse=n(lAe,"STRONG",{});var het=s(Zse);j0o=r(het,"led"),het.forEach(t),D0o=r(lAe," \u2014 "),hq=n(lAe,"A",{href:!0});var pet=s(hq);G0o=r(pet,"LEDModel"),pet.forEach(t),O0o=r(lAe," (LED model)"),lAe.forEach(t),V0o=i($),Hp=n($,"LI",{});var iAe=s(Hp);ele=n(iAe,"STRONG",{});var uet=s(ele);X0o=r(uet,"longformer"),uet.forEach(t),z0o=r(iAe," \u2014 "),pq=n(iAe,"A",{href:!0});var _et=s(pq);W0o=r(_et,"LongformerModel"),_et.forEach(t),Q0o=r(iAe," (Longformer model)"),iAe.forEach(t),H0o=i($),Up=n($,"LI",{});var dAe=s(Up);ole=n(dAe,"STRONG",{});var bet=s(ole);U0o=r(bet,"luke"),bet.forEach(t),J0o=r(dAe," \u2014 "),uq=n(dAe,"A",{href:!0});var vet=s(uq);Y0o=r(vet,"LukeModel"),vet.forEach(t),K0o=r(dAe," (LUKE model)"),dAe.forEach(t),Z0o=i($),Jp=n($,"LI",{});var cAe=s(Jp);rle=n(cAe,"STRONG",{});var Fet=s(rle);e1o=r(Fet,"lxmert"),Fet.forEach(t),o1o=r(cAe," \u2014 "),_q=n(cAe,"A",{href:!0});var Tet=s(_q);r1o=r(Tet,"LxmertModel"),Tet.forEach(t),t1o=r(cAe," (LXMERT model)"),cAe.forEach(t),a1o=i($),Yp=n($,"LI",{});var fAe=s(Yp);tle=n(fAe,"STRONG",{});var Met=s(tle);n1o=r(Met,"m2m_100"),Met.forEach(t),s1o=r(fAe," \u2014 "),bq=n(fAe,"A",{href:!0});var Eet=s(bq);l1o=r(Eet,"M2M100Model"),Eet.forEach(t),i1o=r(fAe," (M2M100 model)"),fAe.forEach(t),d1o=i($),Kp=n($,"LI",{});var mAe=s(Kp);ale=n(mAe,"STRONG",{});var Cet=s(ale);c1o=r(Cet,"marian"),Cet.forEach(t),f1o=r(mAe," \u2014 "),vq=n(mAe,"A",{href:!0});var wet=s(vq);m1o=r(wet,"MarianModel"),wet.forEach(t),g1o=r(mAe," (Marian model)"),mAe.forEach(t),h1o=i($),Zp=n($,"LI",{});var gAe=s(Zp);nle=n(gAe,"STRONG",{});var Aet=s(nle);p1o=r(Aet,"maskformer"),Aet.forEach(t),u1o=r(gAe," \u2014 "),Fq=n(gAe,"A",{href:!0});var yet=s(Fq);_1o=r(yet,"MaskFormerModel"),yet.forEach(t),b1o=r(gAe," (MaskFormer model)"),gAe.forEach(t),v1o=i($),eu=n($,"LI",{});var hAe=s(eu);sle=n(hAe,"STRONG",{});var Let=s(sle);F1o=r(Let,"mbart"),Let.forEach(t),T1o=r(hAe," \u2014 "),Tq=n(hAe,"A",{href:!0});var xet=s(Tq);M1o=r(xet,"MBartModel"),xet.forEach(t),E1o=r(hAe," (mBART model)"),hAe.forEach(t),C1o=i($),ou=n($,"LI",{});var pAe=s(ou);lle=n(pAe,"STRONG",{});var $et=s(lle);w1o=r($et,"megatron-bert"),$et.forEach(t),A1o=r(pAe," \u2014 "),Mq=n(pAe,"A",{href:!0});var ket=s(Mq);y1o=r(ket,"MegatronBertModel"),ket.forEach(t),L1o=r(pAe," (MegatronBert model)"),pAe.forEach(t),x1o=i($),ru=n($,"LI",{});var uAe=s(ru);ile=n(uAe,"STRONG",{});var Set=s(ile);$1o=r(Set,"mobilebert"),Set.forEach(t),k1o=r(uAe," \u2014 "),Eq=n(uAe,"A",{href:!0});var Ret=s(Eq);S1o=r(Ret,"MobileBertModel"),Ret.forEach(t),R1o=r(uAe," (MobileBERT model)"),uAe.forEach(t),P1o=i($),tu=n($,"LI",{});var _Ae=s(tu);dle=n(_Ae,"STRONG",{});var Pet=s(dle);B1o=r(Pet,"mpnet"),Pet.forEach(t),I1o=r(_Ae," \u2014 "),Cq=n(_Ae,"A",{href:!0});var Bet=s(Cq);q1o=r(Bet,"MPNetModel"),Bet.forEach(t),N1o=r(_Ae," (MPNet model)"),_Ae.forEach(t),j1o=i($),au=n($,"LI",{});var bAe=s(au);cle=n(bAe,"STRONG",{});var Iet=s(cle);D1o=r(Iet,"mt5"),Iet.forEach(t),G1o=r(bAe," \u2014 "),wq=n(bAe,"A",{href:!0});var qet=s(wq);O1o=r(qet,"MT5Model"),qet.forEach(t),V1o=r(bAe," (mT5 model)"),bAe.forEach(t),X1o=i($),nu=n($,"LI",{});var vAe=s(nu);fle=n(vAe,"STRONG",{});var Net=s(fle);z1o=r(Net,"nystromformer"),Net.forEach(t),W1o=r(vAe," \u2014 "),Aq=n(vAe,"A",{href:!0});var jet=s(Aq);Q1o=r(jet,"NystromformerModel"),jet.forEach(t),H1o=r(vAe," (Nystromformer model)"),vAe.forEach(t),U1o=i($),su=n($,"LI",{});var FAe=s(su);mle=n(FAe,"STRONG",{});var Det=s(mle);J1o=r(Det,"openai-gpt"),Det.forEach(t),Y1o=r(FAe," \u2014 "),yq=n(FAe,"A",{href:!0});var Get=s(yq);K1o=r(Get,"OpenAIGPTModel"),Get.forEach(t),Z1o=r(FAe," (OpenAI GPT model)"),FAe.forEach(t),ebo=i($),lu=n($,"LI",{});var TAe=s(lu);gle=n(TAe,"STRONG",{});var Oet=s(gle);obo=r(Oet,"opt"),Oet.forEach(t),rbo=r(TAe," \u2014 "),Lq=n(TAe,"A",{href:!0});var Vet=s(Lq);tbo=r(Vet,"OPTModel"),Vet.forEach(t),abo=r(TAe," (OPT model)"),TAe.forEach(t),nbo=i($),iu=n($,"LI",{});var MAe=s(iu);hle=n(MAe,"STRONG",{});var Xet=s(hle);sbo=r(Xet,"pegasus"),Xet.forEach(t),lbo=r(MAe," \u2014 "),xq=n(MAe,"A",{href:!0});var zet=s(xq);ibo=r(zet,"PegasusModel"),zet.forEach(t),dbo=r(MAe," (Pegasus model)"),MAe.forEach(t),cbo=i($),du=n($,"LI",{});var EAe=s(du);ple=n(EAe,"STRONG",{});var Wet=s(ple);fbo=r(Wet,"perceiver"),Wet.forEach(t),mbo=r(EAe," \u2014 "),$q=n(EAe,"A",{href:!0});var Qet=s($q);gbo=r(Qet,"PerceiverModel"),Qet.forEach(t),hbo=r(EAe," (Perceiver model)"),EAe.forEach(t),pbo=i($),cu=n($,"LI",{});var CAe=s(cu);ule=n(CAe,"STRONG",{});var Het=s(ule);ubo=r(Het,"plbart"),Het.forEach(t),_bo=r(CAe," \u2014 "),kq=n(CAe,"A",{href:!0});var Uet=s(kq);bbo=r(Uet,"PLBartModel"),Uet.forEach(t),vbo=r(CAe," (PLBart model)"),CAe.forEach(t),Fbo=i($),fu=n($,"LI",{});var wAe=s(fu);_le=n(wAe,"STRONG",{});var Jet=s(_le);Tbo=r(Jet,"poolformer"),Jet.forEach(t),Mbo=r(wAe," \u2014 "),Sq=n(wAe,"A",{href:!0});var Yet=s(Sq);Ebo=r(Yet,"PoolFormerModel"),Yet.forEach(t),Cbo=r(wAe," (PoolFormer model)"),wAe.forEach(t),wbo=i($),mu=n($,"LI",{});var AAe=s(mu);ble=n(AAe,"STRONG",{});var Ket=s(ble);Abo=r(Ket,"prophetnet"),Ket.forEach(t),ybo=r(AAe," \u2014 "),Rq=n(AAe,"A",{href:!0});var Zet=s(Rq);Lbo=r(Zet,"ProphetNetModel"),Zet.forEach(t),xbo=r(AAe," (ProphetNet model)"),AAe.forEach(t),$bo=i($),gu=n($,"LI",{});var yAe=s(gu);vle=n(yAe,"STRONG",{});var eot=s(vle);kbo=r(eot,"qdqbert"),eot.forEach(t),Sbo=r(yAe," \u2014 "),Pq=n(yAe,"A",{href:!0});var oot=s(Pq);Rbo=r(oot,"QDQBertModel"),oot.forEach(t),Pbo=r(yAe," (QDQBert model)"),yAe.forEach(t),Bbo=i($),hu=n($,"LI",{});var LAe=s(hu);Fle=n(LAe,"STRONG",{});var rot=s(Fle);Ibo=r(rot,"reformer"),rot.forEach(t),qbo=r(LAe," \u2014 "),Bq=n(LAe,"A",{href:!0});var tot=s(Bq);Nbo=r(tot,"ReformerModel"),tot.forEach(t),jbo=r(LAe," (Reformer model)"),LAe.forEach(t),Dbo=i($),pu=n($,"LI",{});var xAe=s(pu);Tle=n(xAe,"STRONG",{});var aot=s(Tle);Gbo=r(aot,"regnet"),aot.forEach(t),Obo=r(xAe," \u2014 "),Iq=n(xAe,"A",{href:!0});var not=s(Iq);Vbo=r(not,"RegNetModel"),not.forEach(t),Xbo=r(xAe," (RegNet model)"),xAe.forEach(t),zbo=i($),uu=n($,"LI",{});var $Ae=s(uu);Mle=n($Ae,"STRONG",{});var sot=s(Mle);Wbo=r(sot,"rembert"),sot.forEach(t),Qbo=r($Ae," \u2014 "),qq=n($Ae,"A",{href:!0});var lot=s(qq);Hbo=r(lot,"RemBertModel"),lot.forEach(t),Ubo=r($Ae," (RemBERT model)"),$Ae.forEach(t),Jbo=i($),_u=n($,"LI",{});var kAe=s(_u);Ele=n(kAe,"STRONG",{});var iot=s(Ele);Ybo=r(iot,"resnet"),iot.forEach(t),Kbo=r(kAe," \u2014 "),Nq=n(kAe,"A",{href:!0});var dot=s(Nq);Zbo=r(dot,"ResNetModel"),dot.forEach(t),e2o=r(kAe," (ResNet model)"),kAe.forEach(t),o2o=i($),bu=n($,"LI",{});var SAe=s(bu);Cle=n(SAe,"STRONG",{});var cot=s(Cle);r2o=r(cot,"retribert"),cot.forEach(t),t2o=r(SAe," \u2014 "),jq=n(SAe,"A",{href:!0});var fot=s(jq);a2o=r(fot,"RetriBertModel"),fot.forEach(t),n2o=r(SAe," (RetriBERT model)"),SAe.forEach(t),s2o=i($),vu=n($,"LI",{});var RAe=s(vu);wle=n(RAe,"STRONG",{});var mot=s(wle);l2o=r(mot,"roberta"),mot.forEach(t),i2o=r(RAe," \u2014 "),Dq=n(RAe,"A",{href:!0});var got=s(Dq);d2o=r(got,"RobertaModel"),got.forEach(t),c2o=r(RAe," (RoBERTa model)"),RAe.forEach(t),f2o=i($),Fu=n($,"LI",{});var PAe=s(Fu);Ale=n(PAe,"STRONG",{});var hot=s(Ale);m2o=r(hot,"roformer"),hot.forEach(t),g2o=r(PAe," \u2014 "),Gq=n(PAe,"A",{href:!0});var pot=s(Gq);h2o=r(pot,"RoFormerModel"),pot.forEach(t),p2o=r(PAe," (RoFormer model)"),PAe.forEach(t),u2o=i($),Tu=n($,"LI",{});var BAe=s(Tu);yle=n(BAe,"STRONG",{});var uot=s(yle);_2o=r(uot,"segformer"),uot.forEach(t),b2o=r(BAe," \u2014 "),Oq=n(BAe,"A",{href:!0});var _ot=s(Oq);v2o=r(_ot,"SegformerModel"),_ot.forEach(t),F2o=r(BAe," (SegFormer model)"),BAe.forEach(t),T2o=i($),Mu=n($,"LI",{});var IAe=s(Mu);Lle=n(IAe,"STRONG",{});var bot=s(Lle);M2o=r(bot,"sew"),bot.forEach(t),E2o=r(IAe," \u2014 "),Vq=n(IAe,"A",{href:!0});var vot=s(Vq);C2o=r(vot,"SEWModel"),vot.forEach(t),w2o=r(IAe," (SEW model)"),IAe.forEach(t),A2o=i($),Eu=n($,"LI",{});var qAe=s(Eu);xle=n(qAe,"STRONG",{});var Fot=s(xle);y2o=r(Fot,"sew-d"),Fot.forEach(t),L2o=r(qAe," \u2014 "),Xq=n(qAe,"A",{href:!0});var Tot=s(Xq);x2o=r(Tot,"SEWDModel"),Tot.forEach(t),$2o=r(qAe," (SEW-D model)"),qAe.forEach(t),k2o=i($),Cu=n($,"LI",{});var NAe=s(Cu);$le=n(NAe,"STRONG",{});var Mot=s($le);S2o=r(Mot,"speech_to_text"),Mot.forEach(t),R2o=r(NAe," \u2014 "),zq=n(NAe,"A",{href:!0});var Eot=s(zq);P2o=r(Eot,"Speech2TextModel"),Eot.forEach(t),B2o=r(NAe," (Speech2Text model)"),NAe.forEach(t),I2o=i($),wu=n($,"LI",{});var jAe=s(wu);kle=n(jAe,"STRONG",{});var Cot=s(kle);q2o=r(Cot,"splinter"),Cot.forEach(t),N2o=r(jAe," \u2014 "),Wq=n(jAe,"A",{href:!0});var wot=s(Wq);j2o=r(wot,"SplinterModel"),wot.forEach(t),D2o=r(jAe," (Splinter model)"),jAe.forEach(t),G2o=i($),Au=n($,"LI",{});var DAe=s(Au);Sle=n(DAe,"STRONG",{});var Aot=s(Sle);O2o=r(Aot,"squeezebert"),Aot.forEach(t),V2o=r(DAe," \u2014 "),Qq=n(DAe,"A",{href:!0});var yot=s(Qq);X2o=r(yot,"SqueezeBertModel"),yot.forEach(t),z2o=r(DAe," (SqueezeBERT model)"),DAe.forEach(t),W2o=i($),yu=n($,"LI",{});var GAe=s(yu);Rle=n(GAe,"STRONG",{});var Lot=s(Rle);Q2o=r(Lot,"swin"),Lot.forEach(t),H2o=r(GAe," \u2014 "),Hq=n(GAe,"A",{href:!0});var xot=s(Hq);U2o=r(xot,"SwinModel"),xot.forEach(t),J2o=r(GAe," (Swin model)"),GAe.forEach(t),Y2o=i($),Lu=n($,"LI",{});var OAe=s(Lu);Ple=n(OAe,"STRONG",{});var $ot=s(Ple);K2o=r($ot,"t5"),$ot.forEach(t),Z2o=r(OAe," \u2014 "),Uq=n(OAe,"A",{href:!0});var kot=s(Uq);evo=r(kot,"T5Model"),kot.forEach(t),ovo=r(OAe," (T5 model)"),OAe.forEach(t),rvo=i($),xu=n($,"LI",{});var VAe=s(xu);Ble=n(VAe,"STRONG",{});var Sot=s(Ble);tvo=r(Sot,"tapas"),Sot.forEach(t),avo=r(VAe," \u2014 "),Jq=n(VAe,"A",{href:!0});var Rot=s(Jq);nvo=r(Rot,"TapasModel"),Rot.forEach(t),svo=r(VAe," (TAPAS model)"),VAe.forEach(t),lvo=i($),$u=n($,"LI",{});var XAe=s($u);Ile=n(XAe,"STRONG",{});var Pot=s(Ile);ivo=r(Pot,"trajectory_transformer"),Pot.forEach(t),dvo=r(XAe," \u2014 "),Yq=n(XAe,"A",{href:!0});var Bot=s(Yq);cvo=r(Bot,"TrajectoryTransformerModel"),Bot.forEach(t),fvo=r(XAe," (Trajectory Transformer model)"),XAe.forEach(t),mvo=i($),ku=n($,"LI",{});var zAe=s(ku);qle=n(zAe,"STRONG",{});var Iot=s(qle);gvo=r(Iot,"transfo-xl"),Iot.forEach(t),hvo=r(zAe," \u2014 "),Kq=n(zAe,"A",{href:!0});var qot=s(Kq);pvo=r(qot,"TransfoXLModel"),qot.forEach(t),uvo=r(zAe," (Transformer-XL model)"),zAe.forEach(t),_vo=i($),Su=n($,"LI",{});var WAe=s(Su);Nle=n(WAe,"STRONG",{});var Not=s(Nle);bvo=r(Not,"unispeech"),Not.forEach(t),vvo=r(WAe," \u2014 "),Zq=n(WAe,"A",{href:!0});var jot=s(Zq);Fvo=r(jot,"UniSpeechModel"),jot.forEach(t),Tvo=r(WAe," (UniSpeech model)"),WAe.forEach(t),Mvo=i($),Ru=n($,"LI",{});var QAe=s(Ru);jle=n(QAe,"STRONG",{});var Dot=s(jle);Evo=r(Dot,"unispeech-sat"),Dot.forEach(t),Cvo=r(QAe," \u2014 "),eN=n(QAe,"A",{href:!0});var Got=s(eN);wvo=r(Got,"UniSpeechSatModel"),Got.forEach(t),Avo=r(QAe," (UniSpeechSat model)"),QAe.forEach(t),yvo=i($),Pu=n($,"LI",{});var HAe=s(Pu);Dle=n(HAe,"STRONG",{});var Oot=s(Dle);Lvo=r(Oot,"van"),Oot.forEach(t),xvo=r(HAe," \u2014 "),oN=n(HAe,"A",{href:!0});var Vot=s(oN);$vo=r(Vot,"VanModel"),Vot.forEach(t),kvo=r(HAe," (VAN model)"),HAe.forEach(t),Svo=i($),Bu=n($,"LI",{});var UAe=s(Bu);Gle=n(UAe,"STRONG",{});var Xot=s(Gle);Rvo=r(Xot,"vilt"),Xot.forEach(t),Pvo=r(UAe," \u2014 "),rN=n(UAe,"A",{href:!0});var zot=s(rN);Bvo=r(zot,"ViltModel"),zot.forEach(t),Ivo=r(UAe," (ViLT model)"),UAe.forEach(t),qvo=i($),Iu=n($,"LI",{});var JAe=s(Iu);Ole=n(JAe,"STRONG",{});var Wot=s(Ole);Nvo=r(Wot,"vision-text-dual-encoder"),Wot.forEach(t),jvo=r(JAe," \u2014 "),tN=n(JAe,"A",{href:!0});var Qot=s(tN);Dvo=r(Qot,"VisionTextDualEncoderModel"),Qot.forEach(t),Gvo=r(JAe," (VisionTextDualEncoder model)"),JAe.forEach(t),Ovo=i($),qu=n($,"LI",{});var YAe=s(qu);Vle=n(YAe,"STRONG",{});var Hot=s(Vle);Vvo=r(Hot,"visual_bert"),Hot.forEach(t),Xvo=r(YAe," \u2014 "),aN=n(YAe,"A",{href:!0});var Uot=s(aN);zvo=r(Uot,"VisualBertModel"),Uot.forEach(t),Wvo=r(YAe," (VisualBert model)"),YAe.forEach(t),Qvo=i($),Nu=n($,"LI",{});var KAe=s(Nu);Xle=n(KAe,"STRONG",{});var Jot=s(Xle);Hvo=r(Jot,"vit"),Jot.forEach(t),Uvo=r(KAe," \u2014 "),nN=n(KAe,"A",{href:!0});var Yot=s(nN);Jvo=r(Yot,"ViTModel"),Yot.forEach(t),Yvo=r(KAe," (ViT model)"),KAe.forEach(t),Kvo=i($),ju=n($,"LI",{});var ZAe=s(ju);zle=n(ZAe,"STRONG",{});var Kot=s(zle);Zvo=r(Kot,"vit_mae"),Kot.forEach(t),eFo=r(ZAe," \u2014 "),sN=n(ZAe,"A",{href:!0});var Zot=s(sN);oFo=r(Zot,"ViTMAEModel"),Zot.forEach(t),rFo=r(ZAe," (ViTMAE model)"),ZAe.forEach(t),tFo=i($),Du=n($,"LI",{});var eye=s(Du);Wle=n(eye,"STRONG",{});var ert=s(Wle);aFo=r(ert,"wav2vec2"),ert.forEach(t),nFo=r(eye," \u2014 "),lN=n(eye,"A",{href:!0});var ort=s(lN);sFo=r(ort,"Wav2Vec2Model"),ort.forEach(t),lFo=r(eye," (Wav2Vec2 model)"),eye.forEach(t),iFo=i($),Gu=n($,"LI",{});var oye=s(Gu);Qle=n(oye,"STRONG",{});var rrt=s(Qle);dFo=r(rrt,"wav2vec2-conformer"),rrt.forEach(t),cFo=r(oye," \u2014 "),iN=n(oye,"A",{href:!0});var trt=s(iN);fFo=r(trt,"Wav2Vec2ConformerModel"),trt.forEach(t),mFo=r(oye," (Wav2Vec2-Conformer model)"),oye.forEach(t),gFo=i($),Ou=n($,"LI",{});var rye=s(Ou);Hle=n(rye,"STRONG",{});var art=s(Hle);hFo=r(art,"wavlm"),art.forEach(t),pFo=r(rye," \u2014 "),dN=n(rye,"A",{href:!0});var nrt=s(dN);uFo=r(nrt,"WavLMModel"),nrt.forEach(t),_Fo=r(rye," (WavLM model)"),rye.forEach(t),bFo=i($),Vu=n($,"LI",{});var tye=s(Vu);Ule=n(tye,"STRONG",{});var srt=s(Ule);vFo=r(srt,"xglm"),srt.forEach(t),FFo=r(tye," \u2014 "),cN=n(tye,"A",{href:!0});var lrt=s(cN);TFo=r(lrt,"XGLMModel"),lrt.forEach(t),MFo=r(tye," (XGLM model)"),tye.forEach(t),EFo=i($),Xu=n($,"LI",{});var aye=s(Xu);Jle=n(aye,"STRONG",{});var irt=s(Jle);CFo=r(irt,"xlm"),irt.forEach(t),wFo=r(aye," \u2014 "),fN=n(aye,"A",{href:!0});var drt=s(fN);AFo=r(drt,"XLMModel"),drt.forEach(t),yFo=r(aye," (XLM model)"),aye.forEach(t),LFo=i($),zu=n($,"LI",{});var nye=s(zu);Yle=n(nye,"STRONG",{});var crt=s(Yle);xFo=r(crt,"xlm-prophetnet"),crt.forEach(t),$Fo=r(nye," \u2014 "),mN=n(nye,"A",{href:!0});var frt=s(mN);kFo=r(frt,"XLMProphetNetModel"),frt.forEach(t),SFo=r(nye," (XLMProphetNet model)"),nye.forEach(t),RFo=i($),Wu=n($,"LI",{});var sye=s(Wu);Kle=n(sye,"STRONG",{});var mrt=s(Kle);PFo=r(mrt,"xlm-roberta"),mrt.forEach(t),BFo=r(sye," \u2014 "),gN=n(sye,"A",{href:!0});var grt=s(gN);IFo=r(grt,"XLMRobertaModel"),grt.forEach(t),qFo=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),NFo=i($),Qu=n($,"LI",{});var lye=s(Qu);Zle=n(lye,"STRONG",{});var hrt=s(Zle);jFo=r(hrt,"xlm-roberta-xl"),hrt.forEach(t),DFo=r(lye," \u2014 "),hN=n(lye,"A",{href:!0});var prt=s(hN);GFo=r(prt,"XLMRobertaXLModel"),prt.forEach(t),OFo=r(lye," (XLM-RoBERTa-XL model)"),lye.forEach(t),VFo=i($),Hu=n($,"LI",{});var iye=s(Hu);eie=n(iye,"STRONG",{});var urt=s(eie);XFo=r(urt,"xlnet"),urt.forEach(t),zFo=r(iye," \u2014 "),pN=n(iye,"A",{href:!0});var _rt=s(pN);WFo=r(_rt,"XLNetModel"),_rt.forEach(t),QFo=r(iye," (XLNet model)"),iye.forEach(t),HFo=i($),Uu=n($,"LI",{});var dye=s(Uu);oie=n(dye,"STRONG",{});var brt=s(oie);UFo=r(brt,"yolos"),brt.forEach(t),JFo=r(dye," \u2014 "),uN=n(dye,"A",{href:!0});var vrt=s(uN);YFo=r(vrt,"YolosModel"),vrt.forEach(t),KFo=r(dye," (YOLOS model)"),dye.forEach(t),ZFo=i($),Ju=n($,"LI",{});var cye=s(Ju);rie=n(cye,"STRONG",{});var Frt=s(rie);e6o=r(Frt,"yoso"),Frt.forEach(t),o6o=r(cye," \u2014 "),_N=n(cye,"A",{href:!0});var Trt=s(_N);r6o=r(Trt,"YosoModel"),Trt.forEach(t),t6o=r(cye," (YOSO model)"),cye.forEach(t),$.forEach(t),a6o=i(oa),Yu=n(oa,"P",{});var fye=s(Yu);n6o=r(fye,"The model is set in evaluation mode by default using "),tie=n(fye,"CODE",{});var Mrt=s(tie);s6o=r(Mrt,"model.eval()"),Mrt.forEach(t),l6o=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(fye,"CODE",{});var Ert=s(aie);i6o=r(Ert,"model.train()"),Ert.forEach(t),fye.forEach(t),d6o=i(oa),T(Ku.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Qqe=i(f),Li=n(f,"H2",{class:!0});var Yje=s(Li);Zu=n(Yje,"A",{id:!0,class:!0,href:!0});var Crt=s(Zu);nie=n(Crt,"SPAN",{});var wrt=s(nie);T(ZA.$$.fragment,wrt),wrt.forEach(t),Crt.forEach(t),c6o=i(Yje),sie=n(Yje,"SPAN",{});var Art=s(sie);f6o=r(Art,"AutoModelForPreTraining"),Art.forEach(t),Yje.forEach(t),Hqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(ey.$$.fragment,Os),m6o=i(Os),xi=n(Os,"P",{});var lZ=s(xi);g6o=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bN=n(lZ,"A",{href:!0});var yrt=s(bN);h6o=r(yrt,"from_pretrained()"),yrt.forEach(t),p6o=r(lZ," class method or the "),vN=n(lZ,"A",{href:!0});var Lrt=s(vN);u6o=r(Lrt,"from_config()"),Lrt.forEach(t),_6o=r(lZ,` class
method.`),lZ.forEach(t),b6o=i(Os),oy=n(Os,"P",{});var Kje=s(oy);v6o=r(Kje,"This class cannot be instantiated directly using "),lie=n(Kje,"CODE",{});var xrt=s(lie);F6o=r(xrt,"__init__()"),xrt.forEach(t),T6o=r(Kje," (throws an error)."),Kje.forEach(t),M6o=i(Os),at=n(Os,"DIV",{class:!0});var L3=s(at);T(ry.$$.fragment,L3),E6o=i(L3),iie=n(L3,"P",{});var $rt=s(iie);C6o=r($rt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$rt.forEach(t),w6o=i(L3),$i=n(L3,"P",{});var iZ=s($i);A6o=r(iZ,`Note:
Loading a model from its configuration file does `),die=n(iZ,"STRONG",{});var krt=s(die);y6o=r(krt,"not"),krt.forEach(t),L6o=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=n(iZ,"A",{href:!0});var Srt=s(FN);x6o=r(Srt,"from_pretrained()"),Srt.forEach(t),$6o=r(iZ," to load the model weights."),iZ.forEach(t),k6o=i(L3),T(e_.$$.fragment,L3),L3.forEach(t),S6o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(ty.$$.fragment,ra),R6o=i(ra),cie=n(ra,"P",{});var Rrt=s(cie);P6o=r(Rrt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rrt.forEach(t),B6o=i(ra),xa=n(ra,"P",{});var x3=s(xa);I6o=r(x3,"The model class to instantiate is selected based on the "),fie=n(x3,"CODE",{});var Prt=s(fie);q6o=r(Prt,"model_type"),Prt.forEach(t),N6o=r(x3,` property of the config object (either
passed as an argument or loaded from `),mie=n(x3,"CODE",{});var Brt=s(mie);j6o=r(Brt,"pretrained_model_name_or_path"),Brt.forEach(t),D6o=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=n(x3,"CODE",{});var Irt=s(gie);G6o=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),O6o=r(x3,":"),x3.forEach(t),V6o=i(ra),G=n(ra,"UL",{});var O=s(G);o_=n(O,"LI",{});var mye=s(o_);hie=n(mye,"STRONG",{});var qrt=s(hie);X6o=r(qrt,"albert"),qrt.forEach(t),z6o=r(mye," \u2014 "),TN=n(mye,"A",{href:!0});var Nrt=s(TN);W6o=r(Nrt,"AlbertForPreTraining"),Nrt.forEach(t),Q6o=r(mye," (ALBERT model)"),mye.forEach(t),H6o=i(O),r_=n(O,"LI",{});var gye=s(r_);pie=n(gye,"STRONG",{});var jrt=s(pie);U6o=r(jrt,"bart"),jrt.forEach(t),J6o=r(gye," \u2014 "),MN=n(gye,"A",{href:!0});var Drt=s(MN);Y6o=r(Drt,"BartForConditionalGeneration"),Drt.forEach(t),K6o=r(gye," (BART model)"),gye.forEach(t),Z6o=i(O),t_=n(O,"LI",{});var hye=s(t_);uie=n(hye,"STRONG",{});var Grt=s(uie);eTo=r(Grt,"bert"),Grt.forEach(t),oTo=r(hye," \u2014 "),EN=n(hye,"A",{href:!0});var Ort=s(EN);rTo=r(Ort,"BertForPreTraining"),Ort.forEach(t),tTo=r(hye," (BERT model)"),hye.forEach(t),aTo=i(O),a_=n(O,"LI",{});var pye=s(a_);_ie=n(pye,"STRONG",{});var Vrt=s(_ie);nTo=r(Vrt,"big_bird"),Vrt.forEach(t),sTo=r(pye," \u2014 "),CN=n(pye,"A",{href:!0});var Xrt=s(CN);lTo=r(Xrt,"BigBirdForPreTraining"),Xrt.forEach(t),iTo=r(pye," (BigBird model)"),pye.forEach(t),dTo=i(O),n_=n(O,"LI",{});var uye=s(n_);bie=n(uye,"STRONG",{});var zrt=s(bie);cTo=r(zrt,"camembert"),zrt.forEach(t),fTo=r(uye," \u2014 "),wN=n(uye,"A",{href:!0});var Wrt=s(wN);mTo=r(Wrt,"CamembertForMaskedLM"),Wrt.forEach(t),gTo=r(uye," (CamemBERT model)"),uye.forEach(t),hTo=i(O),s_=n(O,"LI",{});var _ye=s(s_);vie=n(_ye,"STRONG",{});var Qrt=s(vie);pTo=r(Qrt,"ctrl"),Qrt.forEach(t),uTo=r(_ye," \u2014 "),AN=n(_ye,"A",{href:!0});var Hrt=s(AN);_To=r(Hrt,"CTRLLMHeadModel"),Hrt.forEach(t),bTo=r(_ye," (CTRL model)"),_ye.forEach(t),vTo=i(O),l_=n(O,"LI",{});var bye=s(l_);Fie=n(bye,"STRONG",{});var Urt=s(Fie);FTo=r(Urt,"data2vec-text"),Urt.forEach(t),TTo=r(bye," \u2014 "),yN=n(bye,"A",{href:!0});var Jrt=s(yN);MTo=r(Jrt,"Data2VecTextForMaskedLM"),Jrt.forEach(t),ETo=r(bye," (Data2VecText model)"),bye.forEach(t),CTo=i(O),i_=n(O,"LI",{});var vye=s(i_);Tie=n(vye,"STRONG",{});var Yrt=s(Tie);wTo=r(Yrt,"deberta"),Yrt.forEach(t),ATo=r(vye," \u2014 "),LN=n(vye,"A",{href:!0});var Krt=s(LN);yTo=r(Krt,"DebertaForMaskedLM"),Krt.forEach(t),LTo=r(vye," (DeBERTa model)"),vye.forEach(t),xTo=i(O),d_=n(O,"LI",{});var Fye=s(d_);Mie=n(Fye,"STRONG",{});var Zrt=s(Mie);$To=r(Zrt,"deberta-v2"),Zrt.forEach(t),kTo=r(Fye," \u2014 "),xN=n(Fye,"A",{href:!0});var ett=s(xN);STo=r(ett,"DebertaV2ForMaskedLM"),ett.forEach(t),RTo=r(Fye," (DeBERTa-v2 model)"),Fye.forEach(t),PTo=i(O),c_=n(O,"LI",{});var Tye=s(c_);Eie=n(Tye,"STRONG",{});var ott=s(Eie);BTo=r(ott,"distilbert"),ott.forEach(t),ITo=r(Tye," \u2014 "),$N=n(Tye,"A",{href:!0});var rtt=s($N);qTo=r(rtt,"DistilBertForMaskedLM"),rtt.forEach(t),NTo=r(Tye," (DistilBERT model)"),Tye.forEach(t),jTo=i(O),f_=n(O,"LI",{});var Mye=s(f_);Cie=n(Mye,"STRONG",{});var ttt=s(Cie);DTo=r(ttt,"electra"),ttt.forEach(t),GTo=r(Mye," \u2014 "),kN=n(Mye,"A",{href:!0});var att=s(kN);OTo=r(att,"ElectraForPreTraining"),att.forEach(t),VTo=r(Mye," (ELECTRA model)"),Mye.forEach(t),XTo=i(O),m_=n(O,"LI",{});var Eye=s(m_);wie=n(Eye,"STRONG",{});var ntt=s(wie);zTo=r(ntt,"flaubert"),ntt.forEach(t),WTo=r(Eye," \u2014 "),SN=n(Eye,"A",{href:!0});var stt=s(SN);QTo=r(stt,"FlaubertWithLMHeadModel"),stt.forEach(t),HTo=r(Eye," (FlauBERT model)"),Eye.forEach(t),UTo=i(O),g_=n(O,"LI",{});var Cye=s(g_);Aie=n(Cye,"STRONG",{});var ltt=s(Aie);JTo=r(ltt,"flava"),ltt.forEach(t),YTo=r(Cye," \u2014 "),RN=n(Cye,"A",{href:!0});var itt=s(RN);KTo=r(itt,"FlavaForPreTraining"),itt.forEach(t),ZTo=r(Cye," (Flava model)"),Cye.forEach(t),e7o=i(O),h_=n(O,"LI",{});var wye=s(h_);yie=n(wye,"STRONG",{});var dtt=s(yie);o7o=r(dtt,"fnet"),dtt.forEach(t),r7o=r(wye," \u2014 "),PN=n(wye,"A",{href:!0});var ctt=s(PN);t7o=r(ctt,"FNetForPreTraining"),ctt.forEach(t),a7o=r(wye," (FNet model)"),wye.forEach(t),n7o=i(O),p_=n(O,"LI",{});var Aye=s(p_);Lie=n(Aye,"STRONG",{});var ftt=s(Lie);s7o=r(ftt,"fsmt"),ftt.forEach(t),l7o=r(Aye," \u2014 "),BN=n(Aye,"A",{href:!0});var mtt=s(BN);i7o=r(mtt,"FSMTForConditionalGeneration"),mtt.forEach(t),d7o=r(Aye," (FairSeq Machine-Translation model)"),Aye.forEach(t),c7o=i(O),u_=n(O,"LI",{});var yye=s(u_);xie=n(yye,"STRONG",{});var gtt=s(xie);f7o=r(gtt,"funnel"),gtt.forEach(t),m7o=r(yye," \u2014 "),IN=n(yye,"A",{href:!0});var htt=s(IN);g7o=r(htt,"FunnelForPreTraining"),htt.forEach(t),h7o=r(yye," (Funnel Transformer model)"),yye.forEach(t),p7o=i(O),__=n(O,"LI",{});var Lye=s(__);$ie=n(Lye,"STRONG",{});var ptt=s($ie);u7o=r(ptt,"gpt2"),ptt.forEach(t),_7o=r(Lye," \u2014 "),qN=n(Lye,"A",{href:!0});var utt=s(qN);b7o=r(utt,"GPT2LMHeadModel"),utt.forEach(t),v7o=r(Lye," (OpenAI GPT-2 model)"),Lye.forEach(t),F7o=i(O),b_=n(O,"LI",{});var xye=s(b_);kie=n(xye,"STRONG",{});var _tt=s(kie);T7o=r(_tt,"ibert"),_tt.forEach(t),M7o=r(xye," \u2014 "),NN=n(xye,"A",{href:!0});var btt=s(NN);E7o=r(btt,"IBertForMaskedLM"),btt.forEach(t),C7o=r(xye," (I-BERT model)"),xye.forEach(t),w7o=i(O),v_=n(O,"LI",{});var $ye=s(v_);Sie=n($ye,"STRONG",{});var vtt=s(Sie);A7o=r(vtt,"layoutlm"),vtt.forEach(t),y7o=r($ye," \u2014 "),jN=n($ye,"A",{href:!0});var Ftt=s(jN);L7o=r(Ftt,"LayoutLMForMaskedLM"),Ftt.forEach(t),x7o=r($ye," (LayoutLM model)"),$ye.forEach(t),$7o=i(O),F_=n(O,"LI",{});var kye=s(F_);Rie=n(kye,"STRONG",{});var Ttt=s(Rie);k7o=r(Ttt,"longformer"),Ttt.forEach(t),S7o=r(kye," \u2014 "),DN=n(kye,"A",{href:!0});var Mtt=s(DN);R7o=r(Mtt,"LongformerForMaskedLM"),Mtt.forEach(t),P7o=r(kye," (Longformer model)"),kye.forEach(t),B7o=i(O),T_=n(O,"LI",{});var Sye=s(T_);Pie=n(Sye,"STRONG",{});var Ett=s(Pie);I7o=r(Ett,"lxmert"),Ett.forEach(t),q7o=r(Sye," \u2014 "),GN=n(Sye,"A",{href:!0});var Ctt=s(GN);N7o=r(Ctt,"LxmertForPreTraining"),Ctt.forEach(t),j7o=r(Sye," (LXMERT model)"),Sye.forEach(t),D7o=i(O),M_=n(O,"LI",{});var Rye=s(M_);Bie=n(Rye,"STRONG",{});var wtt=s(Bie);G7o=r(wtt,"megatron-bert"),wtt.forEach(t),O7o=r(Rye," \u2014 "),ON=n(Rye,"A",{href:!0});var Att=s(ON);V7o=r(Att,"MegatronBertForPreTraining"),Att.forEach(t),X7o=r(Rye," (MegatronBert model)"),Rye.forEach(t),z7o=i(O),E_=n(O,"LI",{});var Pye=s(E_);Iie=n(Pye,"STRONG",{});var ytt=s(Iie);W7o=r(ytt,"mobilebert"),ytt.forEach(t),Q7o=r(Pye," \u2014 "),VN=n(Pye,"A",{href:!0});var Ltt=s(VN);H7o=r(Ltt,"MobileBertForPreTraining"),Ltt.forEach(t),U7o=r(Pye," (MobileBERT model)"),Pye.forEach(t),J7o=i(O),C_=n(O,"LI",{});var Bye=s(C_);qie=n(Bye,"STRONG",{});var xtt=s(qie);Y7o=r(xtt,"mpnet"),xtt.forEach(t),K7o=r(Bye," \u2014 "),XN=n(Bye,"A",{href:!0});var $tt=s(XN);Z7o=r($tt,"MPNetForMaskedLM"),$tt.forEach(t),eMo=r(Bye," (MPNet model)"),Bye.forEach(t),oMo=i(O),w_=n(O,"LI",{});var Iye=s(w_);Nie=n(Iye,"STRONG",{});var ktt=s(Nie);rMo=r(ktt,"openai-gpt"),ktt.forEach(t),tMo=r(Iye," \u2014 "),zN=n(Iye,"A",{href:!0});var Stt=s(zN);aMo=r(Stt,"OpenAIGPTLMHeadModel"),Stt.forEach(t),nMo=r(Iye," (OpenAI GPT model)"),Iye.forEach(t),sMo=i(O),A_=n(O,"LI",{});var qye=s(A_);jie=n(qye,"STRONG",{});var Rtt=s(jie);lMo=r(Rtt,"retribert"),Rtt.forEach(t),iMo=r(qye," \u2014 "),WN=n(qye,"A",{href:!0});var Ptt=s(WN);dMo=r(Ptt,"RetriBertModel"),Ptt.forEach(t),cMo=r(qye," (RetriBERT model)"),qye.forEach(t),fMo=i(O),y_=n(O,"LI",{});var Nye=s(y_);Die=n(Nye,"STRONG",{});var Btt=s(Die);mMo=r(Btt,"roberta"),Btt.forEach(t),gMo=r(Nye," \u2014 "),QN=n(Nye,"A",{href:!0});var Itt=s(QN);hMo=r(Itt,"RobertaForMaskedLM"),Itt.forEach(t),pMo=r(Nye," (RoBERTa model)"),Nye.forEach(t),uMo=i(O),L_=n(O,"LI",{});var jye=s(L_);Gie=n(jye,"STRONG",{});var qtt=s(Gie);_Mo=r(qtt,"splinter"),qtt.forEach(t),bMo=r(jye," \u2014 "),HN=n(jye,"A",{href:!0});var Ntt=s(HN);vMo=r(Ntt,"SplinterForPreTraining"),Ntt.forEach(t),FMo=r(jye," (Splinter model)"),jye.forEach(t),TMo=i(O),x_=n(O,"LI",{});var Dye=s(x_);Oie=n(Dye,"STRONG",{});var jtt=s(Oie);MMo=r(jtt,"squeezebert"),jtt.forEach(t),EMo=r(Dye," \u2014 "),UN=n(Dye,"A",{href:!0});var Dtt=s(UN);CMo=r(Dtt,"SqueezeBertForMaskedLM"),Dtt.forEach(t),wMo=r(Dye," (SqueezeBERT model)"),Dye.forEach(t),AMo=i(O),$_=n(O,"LI",{});var Gye=s($_);Vie=n(Gye,"STRONG",{});var Gtt=s(Vie);yMo=r(Gtt,"t5"),Gtt.forEach(t),LMo=r(Gye," \u2014 "),JN=n(Gye,"A",{href:!0});var Ott=s(JN);xMo=r(Ott,"T5ForConditionalGeneration"),Ott.forEach(t),$Mo=r(Gye," (T5 model)"),Gye.forEach(t),kMo=i(O),k_=n(O,"LI",{});var Oye=s(k_);Xie=n(Oye,"STRONG",{});var Vtt=s(Xie);SMo=r(Vtt,"tapas"),Vtt.forEach(t),RMo=r(Oye," \u2014 "),YN=n(Oye,"A",{href:!0});var Xtt=s(YN);PMo=r(Xtt,"TapasForMaskedLM"),Xtt.forEach(t),BMo=r(Oye," (TAPAS model)"),Oye.forEach(t),IMo=i(O),S_=n(O,"LI",{});var Vye=s(S_);zie=n(Vye,"STRONG",{});var ztt=s(zie);qMo=r(ztt,"transfo-xl"),ztt.forEach(t),NMo=r(Vye," \u2014 "),KN=n(Vye,"A",{href:!0});var Wtt=s(KN);jMo=r(Wtt,"TransfoXLLMHeadModel"),Wtt.forEach(t),DMo=r(Vye," (Transformer-XL model)"),Vye.forEach(t),GMo=i(O),R_=n(O,"LI",{});var Xye=s(R_);Wie=n(Xye,"STRONG",{});var Qtt=s(Wie);OMo=r(Qtt,"unispeech"),Qtt.forEach(t),VMo=r(Xye," \u2014 "),ZN=n(Xye,"A",{href:!0});var Htt=s(ZN);XMo=r(Htt,"UniSpeechForPreTraining"),Htt.forEach(t),zMo=r(Xye," (UniSpeech model)"),Xye.forEach(t),WMo=i(O),P_=n(O,"LI",{});var zye=s(P_);Qie=n(zye,"STRONG",{});var Utt=s(Qie);QMo=r(Utt,"unispeech-sat"),Utt.forEach(t),HMo=r(zye," \u2014 "),ej=n(zye,"A",{href:!0});var Jtt=s(ej);UMo=r(Jtt,"UniSpeechSatForPreTraining"),Jtt.forEach(t),JMo=r(zye," (UniSpeechSat model)"),zye.forEach(t),YMo=i(O),B_=n(O,"LI",{});var Wye=s(B_);Hie=n(Wye,"STRONG",{});var Ytt=s(Hie);KMo=r(Ytt,"visual_bert"),Ytt.forEach(t),ZMo=r(Wye," \u2014 "),oj=n(Wye,"A",{href:!0});var Ktt=s(oj);e4o=r(Ktt,"VisualBertForPreTraining"),Ktt.forEach(t),o4o=r(Wye," (VisualBert model)"),Wye.forEach(t),r4o=i(O),I_=n(O,"LI",{});var Qye=s(I_);Uie=n(Qye,"STRONG",{});var Ztt=s(Uie);t4o=r(Ztt,"vit_mae"),Ztt.forEach(t),a4o=r(Qye," \u2014 "),rj=n(Qye,"A",{href:!0});var eat=s(rj);n4o=r(eat,"ViTMAEForPreTraining"),eat.forEach(t),s4o=r(Qye," (ViTMAE model)"),Qye.forEach(t),l4o=i(O),q_=n(O,"LI",{});var Hye=s(q_);Jie=n(Hye,"STRONG",{});var oat=s(Jie);i4o=r(oat,"wav2vec2"),oat.forEach(t),d4o=r(Hye," \u2014 "),tj=n(Hye,"A",{href:!0});var rat=s(tj);c4o=r(rat,"Wav2Vec2ForPreTraining"),rat.forEach(t),f4o=r(Hye," (Wav2Vec2 model)"),Hye.forEach(t),m4o=i(O),N_=n(O,"LI",{});var Uye=s(N_);Yie=n(Uye,"STRONG",{});var tat=s(Yie);g4o=r(tat,"wav2vec2-conformer"),tat.forEach(t),h4o=r(Uye," \u2014 "),aj=n(Uye,"A",{href:!0});var aat=s(aj);p4o=r(aat,"Wav2Vec2ConformerForPreTraining"),aat.forEach(t),u4o=r(Uye," (Wav2Vec2-Conformer model)"),Uye.forEach(t),_4o=i(O),j_=n(O,"LI",{});var Jye=s(j_);Kie=n(Jye,"STRONG",{});var nat=s(Kie);b4o=r(nat,"xlm"),nat.forEach(t),v4o=r(Jye," \u2014 "),nj=n(Jye,"A",{href:!0});var sat=s(nj);F4o=r(sat,"XLMWithLMHeadModel"),sat.forEach(t),T4o=r(Jye," (XLM model)"),Jye.forEach(t),M4o=i(O),D_=n(O,"LI",{});var Yye=s(D_);Zie=n(Yye,"STRONG",{});var lat=s(Zie);E4o=r(lat,"xlm-roberta"),lat.forEach(t),C4o=r(Yye," \u2014 "),sj=n(Yye,"A",{href:!0});var iat=s(sj);w4o=r(iat,"XLMRobertaForMaskedLM"),iat.forEach(t),A4o=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),y4o=i(O),G_=n(O,"LI",{});var Kye=s(G_);ede=n(Kye,"STRONG",{});var dat=s(ede);L4o=r(dat,"xlm-roberta-xl"),dat.forEach(t),x4o=r(Kye," \u2014 "),lj=n(Kye,"A",{href:!0});var cat=s(lj);$4o=r(cat,"XLMRobertaXLForMaskedLM"),cat.forEach(t),k4o=r(Kye," (XLM-RoBERTa-XL model)"),Kye.forEach(t),S4o=i(O),O_=n(O,"LI",{});var Zye=s(O_);ode=n(Zye,"STRONG",{});var fat=s(ode);R4o=r(fat,"xlnet"),fat.forEach(t),P4o=r(Zye," \u2014 "),ij=n(Zye,"A",{href:!0});var mat=s(ij);B4o=r(mat,"XLNetLMHeadModel"),mat.forEach(t),I4o=r(Zye," (XLNet model)"),Zye.forEach(t),O.forEach(t),q4o=i(ra),V_=n(ra,"P",{});var eLe=s(V_);N4o=r(eLe,"The model is set in evaluation mode by default using "),rde=n(eLe,"CODE",{});var gat=s(rde);j4o=r(gat,"model.eval()"),gat.forEach(t),D4o=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(eLe,"CODE",{});var hat=s(tde);G4o=r(hat,"model.train()"),hat.forEach(t),eLe.forEach(t),O4o=i(ra),T(X_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Uqe=i(f),ki=n(f,"H2",{class:!0});var Zje=s(ki);z_=n(Zje,"A",{id:!0,class:!0,href:!0});var pat=s(z_);ade=n(pat,"SPAN",{});var uat=s(ade);T(ay.$$.fragment,uat),uat.forEach(t),pat.forEach(t),V4o=i(Zje),nde=n(Zje,"SPAN",{});var _at=s(nde);X4o=r(_at,"AutoModelForCausalLM"),_at.forEach(t),Zje.forEach(t),Jqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(ny.$$.fragment,Vs),z4o=i(Vs),Si=n(Vs,"P",{});var dZ=s(Si);W4o=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dj=n(dZ,"A",{href:!0});var bat=s(dj);Q4o=r(bat,"from_pretrained()"),bat.forEach(t),H4o=r(dZ," class method or the "),cj=n(dZ,"A",{href:!0});var vat=s(cj);U4o=r(vat,"from_config()"),vat.forEach(t),J4o=r(dZ,` class
method.`),dZ.forEach(t),Y4o=i(Vs),sy=n(Vs,"P",{});var eDe=s(sy);K4o=r(eDe,"This class cannot be instantiated directly using "),sde=n(eDe,"CODE",{});var Fat=s(sde);Z4o=r(Fat,"__init__()"),Fat.forEach(t),eEo=r(eDe," (throws an error)."),eDe.forEach(t),oEo=i(Vs),nt=n(Vs,"DIV",{class:!0});var $3=s(nt);T(ly.$$.fragment,$3),rEo=i($3),lde=n($3,"P",{});var Tat=s(lde);tEo=r(Tat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Tat.forEach(t),aEo=i($3),Ri=n($3,"P",{});var cZ=s(Ri);nEo=r(cZ,`Note:
Loading a model from its configuration file does `),ide=n(cZ,"STRONG",{});var Mat=s(ide);sEo=r(Mat,"not"),Mat.forEach(t),lEo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(cZ,"A",{href:!0});var Eat=s(fj);iEo=r(Eat,"from_pretrained()"),Eat.forEach(t),dEo=r(cZ," to load the model weights."),cZ.forEach(t),cEo=i($3),T(W_.$$.fragment,$3),$3.forEach(t),fEo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(iy.$$.fragment,ta),mEo=i(ta),dde=n(ta,"P",{});var Cat=s(dde);gEo=r(Cat,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cat.forEach(t),hEo=i(ta),$a=n(ta,"P",{});var k3=s($a);pEo=r(k3,"The model class to instantiate is selected based on the "),cde=n(k3,"CODE",{});var wat=s(cde);uEo=r(wat,"model_type"),wat.forEach(t),_Eo=r(k3,` property of the config object (either
passed as an argument or loaded from `),fde=n(k3,"CODE",{});var Aat=s(fde);bEo=r(Aat,"pretrained_model_name_or_path"),Aat.forEach(t),vEo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=n(k3,"CODE",{});var yat=s(mde);FEo=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),TEo=r(k3,":"),k3.forEach(t),MEo=i(ta),z=n(ta,"UL",{});var Q=s(z);Q_=n(Q,"LI",{});var oLe=s(Q_);gde=n(oLe,"STRONG",{});var Lat=s(gde);EEo=r(Lat,"bart"),Lat.forEach(t),CEo=r(oLe," \u2014 "),mj=n(oLe,"A",{href:!0});var xat=s(mj);wEo=r(xat,"BartForCausalLM"),xat.forEach(t),AEo=r(oLe," (BART model)"),oLe.forEach(t),yEo=i(Q),H_=n(Q,"LI",{});var rLe=s(H_);hde=n(rLe,"STRONG",{});var $at=s(hde);LEo=r($at,"bert"),$at.forEach(t),xEo=r(rLe," \u2014 "),gj=n(rLe,"A",{href:!0});var kat=s(gj);$Eo=r(kat,"BertLMHeadModel"),kat.forEach(t),kEo=r(rLe," (BERT model)"),rLe.forEach(t),SEo=i(Q),U_=n(Q,"LI",{});var tLe=s(U_);pde=n(tLe,"STRONG",{});var Sat=s(pde);REo=r(Sat,"bert-generation"),Sat.forEach(t),PEo=r(tLe," \u2014 "),hj=n(tLe,"A",{href:!0});var Rat=s(hj);BEo=r(Rat,"BertGenerationDecoder"),Rat.forEach(t),IEo=r(tLe," (Bert Generation model)"),tLe.forEach(t),qEo=i(Q),J_=n(Q,"LI",{});var aLe=s(J_);ude=n(aLe,"STRONG",{});var Pat=s(ude);NEo=r(Pat,"big_bird"),Pat.forEach(t),jEo=r(aLe," \u2014 "),pj=n(aLe,"A",{href:!0});var Bat=s(pj);DEo=r(Bat,"BigBirdForCausalLM"),Bat.forEach(t),GEo=r(aLe," (BigBird model)"),aLe.forEach(t),OEo=i(Q),Y_=n(Q,"LI",{});var nLe=s(Y_);_de=n(nLe,"STRONG",{});var Iat=s(_de);VEo=r(Iat,"bigbird_pegasus"),Iat.forEach(t),XEo=r(nLe," \u2014 "),uj=n(nLe,"A",{href:!0});var qat=s(uj);zEo=r(qat,"BigBirdPegasusForCausalLM"),qat.forEach(t),WEo=r(nLe," (BigBirdPegasus model)"),nLe.forEach(t),QEo=i(Q),K_=n(Q,"LI",{});var sLe=s(K_);bde=n(sLe,"STRONG",{});var Nat=s(bde);HEo=r(Nat,"blenderbot"),Nat.forEach(t),UEo=r(sLe," \u2014 "),_j=n(sLe,"A",{href:!0});var jat=s(_j);JEo=r(jat,"BlenderbotForCausalLM"),jat.forEach(t),YEo=r(sLe," (Blenderbot model)"),sLe.forEach(t),KEo=i(Q),Z_=n(Q,"LI",{});var lLe=s(Z_);vde=n(lLe,"STRONG",{});var Dat=s(vde);ZEo=r(Dat,"blenderbot-small"),Dat.forEach(t),eCo=r(lLe," \u2014 "),bj=n(lLe,"A",{href:!0});var Gat=s(bj);oCo=r(Gat,"BlenderbotSmallForCausalLM"),Gat.forEach(t),rCo=r(lLe," (BlenderbotSmall model)"),lLe.forEach(t),tCo=i(Q),e0=n(Q,"LI",{});var iLe=s(e0);Fde=n(iLe,"STRONG",{});var Oat=s(Fde);aCo=r(Oat,"camembert"),Oat.forEach(t),nCo=r(iLe," \u2014 "),vj=n(iLe,"A",{href:!0});var Vat=s(vj);sCo=r(Vat,"CamembertForCausalLM"),Vat.forEach(t),lCo=r(iLe," (CamemBERT model)"),iLe.forEach(t),iCo=i(Q),o0=n(Q,"LI",{});var dLe=s(o0);Tde=n(dLe,"STRONG",{});var Xat=s(Tde);dCo=r(Xat,"ctrl"),Xat.forEach(t),cCo=r(dLe," \u2014 "),Fj=n(dLe,"A",{href:!0});var zat=s(Fj);fCo=r(zat,"CTRLLMHeadModel"),zat.forEach(t),mCo=r(dLe," (CTRL model)"),dLe.forEach(t),gCo=i(Q),r0=n(Q,"LI",{});var cLe=s(r0);Mde=n(cLe,"STRONG",{});var Wat=s(Mde);hCo=r(Wat,"data2vec-text"),Wat.forEach(t),pCo=r(cLe," \u2014 "),Tj=n(cLe,"A",{href:!0});var Qat=s(Tj);uCo=r(Qat,"Data2VecTextForCausalLM"),Qat.forEach(t),_Co=r(cLe," (Data2VecText model)"),cLe.forEach(t),bCo=i(Q),t0=n(Q,"LI",{});var fLe=s(t0);Ede=n(fLe,"STRONG",{});var Hat=s(Ede);vCo=r(Hat,"electra"),Hat.forEach(t),FCo=r(fLe," \u2014 "),Mj=n(fLe,"A",{href:!0});var Uat=s(Mj);TCo=r(Uat,"ElectraForCausalLM"),Uat.forEach(t),MCo=r(fLe," (ELECTRA model)"),fLe.forEach(t),ECo=i(Q),a0=n(Q,"LI",{});var mLe=s(a0);Cde=n(mLe,"STRONG",{});var Jat=s(Cde);CCo=r(Jat,"gpt2"),Jat.forEach(t),wCo=r(mLe," \u2014 "),Ej=n(mLe,"A",{href:!0});var Yat=s(Ej);ACo=r(Yat,"GPT2LMHeadModel"),Yat.forEach(t),yCo=r(mLe," (OpenAI GPT-2 model)"),mLe.forEach(t),LCo=i(Q),n0=n(Q,"LI",{});var gLe=s(n0);wde=n(gLe,"STRONG",{});var Kat=s(wde);xCo=r(Kat,"gpt_neo"),Kat.forEach(t),$Co=r(gLe," \u2014 "),Cj=n(gLe,"A",{href:!0});var Zat=s(Cj);kCo=r(Zat,"GPTNeoForCausalLM"),Zat.forEach(t),SCo=r(gLe," (GPT Neo model)"),gLe.forEach(t),RCo=i(Q),s0=n(Q,"LI",{});var hLe=s(s0);Ade=n(hLe,"STRONG",{});var ent=s(Ade);PCo=r(ent,"gptj"),ent.forEach(t),BCo=r(hLe," \u2014 "),wj=n(hLe,"A",{href:!0});var ont=s(wj);ICo=r(ont,"GPTJForCausalLM"),ont.forEach(t),qCo=r(hLe," (GPT-J model)"),hLe.forEach(t),NCo=i(Q),l0=n(Q,"LI",{});var pLe=s(l0);yde=n(pLe,"STRONG",{});var rnt=s(yde);jCo=r(rnt,"marian"),rnt.forEach(t),DCo=r(pLe," \u2014 "),Aj=n(pLe,"A",{href:!0});var tnt=s(Aj);GCo=r(tnt,"MarianForCausalLM"),tnt.forEach(t),OCo=r(pLe," (Marian model)"),pLe.forEach(t),VCo=i(Q),i0=n(Q,"LI",{});var uLe=s(i0);Lde=n(uLe,"STRONG",{});var ant=s(Lde);XCo=r(ant,"mbart"),ant.forEach(t),zCo=r(uLe," \u2014 "),yj=n(uLe,"A",{href:!0});var nnt=s(yj);WCo=r(nnt,"MBartForCausalLM"),nnt.forEach(t),QCo=r(uLe," (mBART model)"),uLe.forEach(t),HCo=i(Q),d0=n(Q,"LI",{});var _Le=s(d0);xde=n(_Le,"STRONG",{});var snt=s(xde);UCo=r(snt,"megatron-bert"),snt.forEach(t),JCo=r(_Le," \u2014 "),Lj=n(_Le,"A",{href:!0});var lnt=s(Lj);YCo=r(lnt,"MegatronBertForCausalLM"),lnt.forEach(t),KCo=r(_Le," (MegatronBert model)"),_Le.forEach(t),ZCo=i(Q),c0=n(Q,"LI",{});var bLe=s(c0);$de=n(bLe,"STRONG",{});var int=s($de);e5o=r(int,"openai-gpt"),int.forEach(t),o5o=r(bLe," \u2014 "),xj=n(bLe,"A",{href:!0});var dnt=s(xj);r5o=r(dnt,"OpenAIGPTLMHeadModel"),dnt.forEach(t),t5o=r(bLe," (OpenAI GPT model)"),bLe.forEach(t),a5o=i(Q),f0=n(Q,"LI",{});var vLe=s(f0);kde=n(vLe,"STRONG",{});var cnt=s(kde);n5o=r(cnt,"opt"),cnt.forEach(t),s5o=r(vLe," \u2014 "),$j=n(vLe,"A",{href:!0});var fnt=s($j);l5o=r(fnt,"OPTForCausalLM"),fnt.forEach(t),i5o=r(vLe," (OPT model)"),vLe.forEach(t),d5o=i(Q),m0=n(Q,"LI",{});var FLe=s(m0);Sde=n(FLe,"STRONG",{});var mnt=s(Sde);c5o=r(mnt,"pegasus"),mnt.forEach(t),f5o=r(FLe," \u2014 "),kj=n(FLe,"A",{href:!0});var gnt=s(kj);m5o=r(gnt,"PegasusForCausalLM"),gnt.forEach(t),g5o=r(FLe," (Pegasus model)"),FLe.forEach(t),h5o=i(Q),g0=n(Q,"LI",{});var TLe=s(g0);Rde=n(TLe,"STRONG",{});var hnt=s(Rde);p5o=r(hnt,"plbart"),hnt.forEach(t),u5o=r(TLe," \u2014 "),Sj=n(TLe,"A",{href:!0});var pnt=s(Sj);_5o=r(pnt,"PLBartForCausalLM"),pnt.forEach(t),b5o=r(TLe," (PLBart model)"),TLe.forEach(t),v5o=i(Q),h0=n(Q,"LI",{});var MLe=s(h0);Pde=n(MLe,"STRONG",{});var unt=s(Pde);F5o=r(unt,"prophetnet"),unt.forEach(t),T5o=r(MLe," \u2014 "),Rj=n(MLe,"A",{href:!0});var _nt=s(Rj);M5o=r(_nt,"ProphetNetForCausalLM"),_nt.forEach(t),E5o=r(MLe," (ProphetNet model)"),MLe.forEach(t),C5o=i(Q),p0=n(Q,"LI",{});var ELe=s(p0);Bde=n(ELe,"STRONG",{});var bnt=s(Bde);w5o=r(bnt,"qdqbert"),bnt.forEach(t),A5o=r(ELe," \u2014 "),Pj=n(ELe,"A",{href:!0});var vnt=s(Pj);y5o=r(vnt,"QDQBertLMHeadModel"),vnt.forEach(t),L5o=r(ELe," (QDQBert model)"),ELe.forEach(t),x5o=i(Q),u0=n(Q,"LI",{});var CLe=s(u0);Ide=n(CLe,"STRONG",{});var Fnt=s(Ide);$5o=r(Fnt,"reformer"),Fnt.forEach(t),k5o=r(CLe," \u2014 "),Bj=n(CLe,"A",{href:!0});var Tnt=s(Bj);S5o=r(Tnt,"ReformerModelWithLMHead"),Tnt.forEach(t),R5o=r(CLe," (Reformer model)"),CLe.forEach(t),P5o=i(Q),_0=n(Q,"LI",{});var wLe=s(_0);qde=n(wLe,"STRONG",{});var Mnt=s(qde);B5o=r(Mnt,"rembert"),Mnt.forEach(t),I5o=r(wLe," \u2014 "),Ij=n(wLe,"A",{href:!0});var Ent=s(Ij);q5o=r(Ent,"RemBertForCausalLM"),Ent.forEach(t),N5o=r(wLe," (RemBERT model)"),wLe.forEach(t),j5o=i(Q),b0=n(Q,"LI",{});var ALe=s(b0);Nde=n(ALe,"STRONG",{});var Cnt=s(Nde);D5o=r(Cnt,"roberta"),Cnt.forEach(t),G5o=r(ALe," \u2014 "),qj=n(ALe,"A",{href:!0});var wnt=s(qj);O5o=r(wnt,"RobertaForCausalLM"),wnt.forEach(t),V5o=r(ALe," (RoBERTa model)"),ALe.forEach(t),X5o=i(Q),v0=n(Q,"LI",{});var yLe=s(v0);jde=n(yLe,"STRONG",{});var Ant=s(jde);z5o=r(Ant,"roformer"),Ant.forEach(t),W5o=r(yLe," \u2014 "),Nj=n(yLe,"A",{href:!0});var ynt=s(Nj);Q5o=r(ynt,"RoFormerForCausalLM"),ynt.forEach(t),H5o=r(yLe," (RoFormer model)"),yLe.forEach(t),U5o=i(Q),F0=n(Q,"LI",{});var LLe=s(F0);Dde=n(LLe,"STRONG",{});var Lnt=s(Dde);J5o=r(Lnt,"speech_to_text_2"),Lnt.forEach(t),Y5o=r(LLe," \u2014 "),jj=n(LLe,"A",{href:!0});var xnt=s(jj);K5o=r(xnt,"Speech2Text2ForCausalLM"),xnt.forEach(t),Z5o=r(LLe," (Speech2Text2 model)"),LLe.forEach(t),e3o=i(Q),T0=n(Q,"LI",{});var xLe=s(T0);Gde=n(xLe,"STRONG",{});var $nt=s(Gde);o3o=r($nt,"transfo-xl"),$nt.forEach(t),r3o=r(xLe," \u2014 "),Dj=n(xLe,"A",{href:!0});var knt=s(Dj);t3o=r(knt,"TransfoXLLMHeadModel"),knt.forEach(t),a3o=r(xLe," (Transformer-XL model)"),xLe.forEach(t),n3o=i(Q),M0=n(Q,"LI",{});var $Le=s(M0);Ode=n($Le,"STRONG",{});var Snt=s(Ode);s3o=r(Snt,"trocr"),Snt.forEach(t),l3o=r($Le," \u2014 "),Gj=n($Le,"A",{href:!0});var Rnt=s(Gj);i3o=r(Rnt,"TrOCRForCausalLM"),Rnt.forEach(t),d3o=r($Le," (TrOCR model)"),$Le.forEach(t),c3o=i(Q),E0=n(Q,"LI",{});var kLe=s(E0);Vde=n(kLe,"STRONG",{});var Pnt=s(Vde);f3o=r(Pnt,"xglm"),Pnt.forEach(t),m3o=r(kLe," \u2014 "),Oj=n(kLe,"A",{href:!0});var Bnt=s(Oj);g3o=r(Bnt,"XGLMForCausalLM"),Bnt.forEach(t),h3o=r(kLe," (XGLM model)"),kLe.forEach(t),p3o=i(Q),C0=n(Q,"LI",{});var SLe=s(C0);Xde=n(SLe,"STRONG",{});var Int=s(Xde);u3o=r(Int,"xlm"),Int.forEach(t),_3o=r(SLe," \u2014 "),Vj=n(SLe,"A",{href:!0});var qnt=s(Vj);b3o=r(qnt,"XLMWithLMHeadModel"),qnt.forEach(t),v3o=r(SLe," (XLM model)"),SLe.forEach(t),F3o=i(Q),w0=n(Q,"LI",{});var RLe=s(w0);zde=n(RLe,"STRONG",{});var Nnt=s(zde);T3o=r(Nnt,"xlm-prophetnet"),Nnt.forEach(t),M3o=r(RLe," \u2014 "),Xj=n(RLe,"A",{href:!0});var jnt=s(Xj);E3o=r(jnt,"XLMProphetNetForCausalLM"),jnt.forEach(t),C3o=r(RLe," (XLMProphetNet model)"),RLe.forEach(t),w3o=i(Q),A0=n(Q,"LI",{});var PLe=s(A0);Wde=n(PLe,"STRONG",{});var Dnt=s(Wde);A3o=r(Dnt,"xlm-roberta"),Dnt.forEach(t),y3o=r(PLe," \u2014 "),zj=n(PLe,"A",{href:!0});var Gnt=s(zj);L3o=r(Gnt,"XLMRobertaForCausalLM"),Gnt.forEach(t),x3o=r(PLe," (XLM-RoBERTa model)"),PLe.forEach(t),$3o=i(Q),y0=n(Q,"LI",{});var BLe=s(y0);Qde=n(BLe,"STRONG",{});var Ont=s(Qde);k3o=r(Ont,"xlm-roberta-xl"),Ont.forEach(t),S3o=r(BLe," \u2014 "),Wj=n(BLe,"A",{href:!0});var Vnt=s(Wj);R3o=r(Vnt,"XLMRobertaXLForCausalLM"),Vnt.forEach(t),P3o=r(BLe," (XLM-RoBERTa-XL model)"),BLe.forEach(t),B3o=i(Q),L0=n(Q,"LI",{});var ILe=s(L0);Hde=n(ILe,"STRONG",{});var Xnt=s(Hde);I3o=r(Xnt,"xlnet"),Xnt.forEach(t),q3o=r(ILe," \u2014 "),Qj=n(ILe,"A",{href:!0});var znt=s(Qj);N3o=r(znt,"XLNetLMHeadModel"),znt.forEach(t),j3o=r(ILe," (XLNet model)"),ILe.forEach(t),Q.forEach(t),D3o=i(ta),x0=n(ta,"P",{});var qLe=s(x0);G3o=r(qLe,"The model is set in evaluation mode by default using "),Ude=n(qLe,"CODE",{});var Wnt=s(Ude);O3o=r(Wnt,"model.eval()"),Wnt.forEach(t),V3o=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(qLe,"CODE",{});var Qnt=s(Jde);X3o=r(Qnt,"model.train()"),Qnt.forEach(t),qLe.forEach(t),z3o=i(ta),T($0.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Yqe=i(f),Pi=n(f,"H2",{class:!0});var oDe=s(Pi);k0=n(oDe,"A",{id:!0,class:!0,href:!0});var Hnt=s(k0);Yde=n(Hnt,"SPAN",{});var Unt=s(Yde);T(dy.$$.fragment,Unt),Unt.forEach(t),Hnt.forEach(t),W3o=i(oDe),Kde=n(oDe,"SPAN",{});var Jnt=s(Kde);Q3o=r(Jnt,"AutoModelForMaskedLM"),Jnt.forEach(t),oDe.forEach(t),Kqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(cy.$$.fragment,Xs),H3o=i(Xs),Bi=n(Xs,"P",{});var fZ=s(Bi);U3o=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hj=n(fZ,"A",{href:!0});var Ynt=s(Hj);J3o=r(Ynt,"from_pretrained()"),Ynt.forEach(t),Y3o=r(fZ," class method or the "),Uj=n(fZ,"A",{href:!0});var Knt=s(Uj);K3o=r(Knt,"from_config()"),Knt.forEach(t),Z3o=r(fZ,` class
method.`),fZ.forEach(t),ewo=i(Xs),fy=n(Xs,"P",{});var rDe=s(fy);owo=r(rDe,"This class cannot be instantiated directly using "),Zde=n(rDe,"CODE",{});var Znt=s(Zde);rwo=r(Znt,"__init__()"),Znt.forEach(t),two=r(rDe," (throws an error)."),rDe.forEach(t),awo=i(Xs),st=n(Xs,"DIV",{class:!0});var S3=s(st);T(my.$$.fragment,S3),nwo=i(S3),ece=n(S3,"P",{});var est=s(ece);swo=r(est,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),est.forEach(t),lwo=i(S3),Ii=n(S3,"P",{});var mZ=s(Ii);iwo=r(mZ,`Note:
Loading a model from its configuration file does `),oce=n(mZ,"STRONG",{});var ost=s(oce);dwo=r(ost,"not"),ost.forEach(t),cwo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=n(mZ,"A",{href:!0});var rst=s(Jj);fwo=r(rst,"from_pretrained()"),rst.forEach(t),mwo=r(mZ," to load the model weights."),mZ.forEach(t),gwo=i(S3),T(S0.$$.fragment,S3),S3.forEach(t),hwo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(gy.$$.fragment,aa),pwo=i(aa),rce=n(aa,"P",{});var tst=s(rce);uwo=r(tst,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tst.forEach(t),_wo=i(aa),ka=n(aa,"P",{});var R3=s(ka);bwo=r(R3,"The model class to instantiate is selected based on the "),tce=n(R3,"CODE",{});var ast=s(tce);vwo=r(ast,"model_type"),ast.forEach(t),Fwo=r(R3,` property of the config object (either
passed as an argument or loaded from `),ace=n(R3,"CODE",{});var nst=s(ace);Two=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),Mwo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=n(R3,"CODE",{});var sst=s(nce);Ewo=r(sst,"pretrained_model_name_or_path"),sst.forEach(t),Cwo=r(R3,":"),R3.forEach(t),wwo=i(aa),W=n(aa,"UL",{});var U=s(W);R0=n(U,"LI",{});var NLe=s(R0);sce=n(NLe,"STRONG",{});var lst=s(sce);Awo=r(lst,"albert"),lst.forEach(t),ywo=r(NLe," \u2014 "),Yj=n(NLe,"A",{href:!0});var ist=s(Yj);Lwo=r(ist,"AlbertForMaskedLM"),ist.forEach(t),xwo=r(NLe," (ALBERT model)"),NLe.forEach(t),$wo=i(U),P0=n(U,"LI",{});var jLe=s(P0);lce=n(jLe,"STRONG",{});var dst=s(lce);kwo=r(dst,"bart"),dst.forEach(t),Swo=r(jLe," \u2014 "),Kj=n(jLe,"A",{href:!0});var cst=s(Kj);Rwo=r(cst,"BartForConditionalGeneration"),cst.forEach(t),Pwo=r(jLe," (BART model)"),jLe.forEach(t),Bwo=i(U),B0=n(U,"LI",{});var DLe=s(B0);ice=n(DLe,"STRONG",{});var fst=s(ice);Iwo=r(fst,"bert"),fst.forEach(t),qwo=r(DLe," \u2014 "),Zj=n(DLe,"A",{href:!0});var mst=s(Zj);Nwo=r(mst,"BertForMaskedLM"),mst.forEach(t),jwo=r(DLe," (BERT model)"),DLe.forEach(t),Dwo=i(U),I0=n(U,"LI",{});var GLe=s(I0);dce=n(GLe,"STRONG",{});var gst=s(dce);Gwo=r(gst,"big_bird"),gst.forEach(t),Owo=r(GLe," \u2014 "),eD=n(GLe,"A",{href:!0});var hst=s(eD);Vwo=r(hst,"BigBirdForMaskedLM"),hst.forEach(t),Xwo=r(GLe," (BigBird model)"),GLe.forEach(t),zwo=i(U),q0=n(U,"LI",{});var OLe=s(q0);cce=n(OLe,"STRONG",{});var pst=s(cce);Wwo=r(pst,"camembert"),pst.forEach(t),Qwo=r(OLe," \u2014 "),oD=n(OLe,"A",{href:!0});var ust=s(oD);Hwo=r(ust,"CamembertForMaskedLM"),ust.forEach(t),Uwo=r(OLe," (CamemBERT model)"),OLe.forEach(t),Jwo=i(U),N0=n(U,"LI",{});var VLe=s(N0);fce=n(VLe,"STRONG",{});var _st=s(fce);Ywo=r(_st,"convbert"),_st.forEach(t),Kwo=r(VLe," \u2014 "),rD=n(VLe,"A",{href:!0});var bst=s(rD);Zwo=r(bst,"ConvBertForMaskedLM"),bst.forEach(t),eAo=r(VLe," (ConvBERT model)"),VLe.forEach(t),oAo=i(U),j0=n(U,"LI",{});var XLe=s(j0);mce=n(XLe,"STRONG",{});var vst=s(mce);rAo=r(vst,"data2vec-text"),vst.forEach(t),tAo=r(XLe," \u2014 "),tD=n(XLe,"A",{href:!0});var Fst=s(tD);aAo=r(Fst,"Data2VecTextForMaskedLM"),Fst.forEach(t),nAo=r(XLe," (Data2VecText model)"),XLe.forEach(t),sAo=i(U),D0=n(U,"LI",{});var zLe=s(D0);gce=n(zLe,"STRONG",{});var Tst=s(gce);lAo=r(Tst,"deberta"),Tst.forEach(t),iAo=r(zLe," \u2014 "),aD=n(zLe,"A",{href:!0});var Mst=s(aD);dAo=r(Mst,"DebertaForMaskedLM"),Mst.forEach(t),cAo=r(zLe," (DeBERTa model)"),zLe.forEach(t),fAo=i(U),G0=n(U,"LI",{});var WLe=s(G0);hce=n(WLe,"STRONG",{});var Est=s(hce);mAo=r(Est,"deberta-v2"),Est.forEach(t),gAo=r(WLe," \u2014 "),nD=n(WLe,"A",{href:!0});var Cst=s(nD);hAo=r(Cst,"DebertaV2ForMaskedLM"),Cst.forEach(t),pAo=r(WLe," (DeBERTa-v2 model)"),WLe.forEach(t),uAo=i(U),O0=n(U,"LI",{});var QLe=s(O0);pce=n(QLe,"STRONG",{});var wst=s(pce);_Ao=r(wst,"distilbert"),wst.forEach(t),bAo=r(QLe," \u2014 "),sD=n(QLe,"A",{href:!0});var Ast=s(sD);vAo=r(Ast,"DistilBertForMaskedLM"),Ast.forEach(t),FAo=r(QLe," (DistilBERT model)"),QLe.forEach(t),TAo=i(U),V0=n(U,"LI",{});var HLe=s(V0);uce=n(HLe,"STRONG",{});var yst=s(uce);MAo=r(yst,"electra"),yst.forEach(t),EAo=r(HLe," \u2014 "),lD=n(HLe,"A",{href:!0});var Lst=s(lD);CAo=r(Lst,"ElectraForMaskedLM"),Lst.forEach(t),wAo=r(HLe," (ELECTRA model)"),HLe.forEach(t),AAo=i(U),X0=n(U,"LI",{});var ULe=s(X0);_ce=n(ULe,"STRONG",{});var xst=s(_ce);yAo=r(xst,"flaubert"),xst.forEach(t),LAo=r(ULe," \u2014 "),iD=n(ULe,"A",{href:!0});var $st=s(iD);xAo=r($st,"FlaubertWithLMHeadModel"),$st.forEach(t),$Ao=r(ULe," (FlauBERT model)"),ULe.forEach(t),kAo=i(U),z0=n(U,"LI",{});var JLe=s(z0);bce=n(JLe,"STRONG",{});var kst=s(bce);SAo=r(kst,"fnet"),kst.forEach(t),RAo=r(JLe," \u2014 "),dD=n(JLe,"A",{href:!0});var Sst=s(dD);PAo=r(Sst,"FNetForMaskedLM"),Sst.forEach(t),BAo=r(JLe," (FNet model)"),JLe.forEach(t),IAo=i(U),W0=n(U,"LI",{});var YLe=s(W0);vce=n(YLe,"STRONG",{});var Rst=s(vce);qAo=r(Rst,"funnel"),Rst.forEach(t),NAo=r(YLe," \u2014 "),cD=n(YLe,"A",{href:!0});var Pst=s(cD);jAo=r(Pst,"FunnelForMaskedLM"),Pst.forEach(t),DAo=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),GAo=i(U),Q0=n(U,"LI",{});var KLe=s(Q0);Fce=n(KLe,"STRONG",{});var Bst=s(Fce);OAo=r(Bst,"ibert"),Bst.forEach(t),VAo=r(KLe," \u2014 "),fD=n(KLe,"A",{href:!0});var Ist=s(fD);XAo=r(Ist,"IBertForMaskedLM"),Ist.forEach(t),zAo=r(KLe," (I-BERT model)"),KLe.forEach(t),WAo=i(U),H0=n(U,"LI",{});var ZLe=s(H0);Tce=n(ZLe,"STRONG",{});var qst=s(Tce);QAo=r(qst,"layoutlm"),qst.forEach(t),HAo=r(ZLe," \u2014 "),mD=n(ZLe,"A",{href:!0});var Nst=s(mD);UAo=r(Nst,"LayoutLMForMaskedLM"),Nst.forEach(t),JAo=r(ZLe," (LayoutLM model)"),ZLe.forEach(t),YAo=i(U),U0=n(U,"LI",{});var e8e=s(U0);Mce=n(e8e,"STRONG",{});var jst=s(Mce);KAo=r(jst,"longformer"),jst.forEach(t),ZAo=r(e8e," \u2014 "),gD=n(e8e,"A",{href:!0});var Dst=s(gD);eyo=r(Dst,"LongformerForMaskedLM"),Dst.forEach(t),oyo=r(e8e," (Longformer model)"),e8e.forEach(t),ryo=i(U),J0=n(U,"LI",{});var o8e=s(J0);Ece=n(o8e,"STRONG",{});var Gst=s(Ece);tyo=r(Gst,"mbart"),Gst.forEach(t),ayo=r(o8e," \u2014 "),hD=n(o8e,"A",{href:!0});var Ost=s(hD);nyo=r(Ost,"MBartForConditionalGeneration"),Ost.forEach(t),syo=r(o8e," (mBART model)"),o8e.forEach(t),lyo=i(U),Y0=n(U,"LI",{});var r8e=s(Y0);Cce=n(r8e,"STRONG",{});var Vst=s(Cce);iyo=r(Vst,"megatron-bert"),Vst.forEach(t),dyo=r(r8e," \u2014 "),pD=n(r8e,"A",{href:!0});var Xst=s(pD);cyo=r(Xst,"MegatronBertForMaskedLM"),Xst.forEach(t),fyo=r(r8e," (MegatronBert model)"),r8e.forEach(t),myo=i(U),K0=n(U,"LI",{});var t8e=s(K0);wce=n(t8e,"STRONG",{});var zst=s(wce);gyo=r(zst,"mobilebert"),zst.forEach(t),hyo=r(t8e," \u2014 "),uD=n(t8e,"A",{href:!0});var Wst=s(uD);pyo=r(Wst,"MobileBertForMaskedLM"),Wst.forEach(t),uyo=r(t8e," (MobileBERT model)"),t8e.forEach(t),_yo=i(U),Z0=n(U,"LI",{});var a8e=s(Z0);Ace=n(a8e,"STRONG",{});var Qst=s(Ace);byo=r(Qst,"mpnet"),Qst.forEach(t),vyo=r(a8e," \u2014 "),_D=n(a8e,"A",{href:!0});var Hst=s(_D);Fyo=r(Hst,"MPNetForMaskedLM"),Hst.forEach(t),Tyo=r(a8e," (MPNet model)"),a8e.forEach(t),Myo=i(U),e1=n(U,"LI",{});var n8e=s(e1);yce=n(n8e,"STRONG",{});var Ust=s(yce);Eyo=r(Ust,"nystromformer"),Ust.forEach(t),Cyo=r(n8e," \u2014 "),bD=n(n8e,"A",{href:!0});var Jst=s(bD);wyo=r(Jst,"NystromformerForMaskedLM"),Jst.forEach(t),Ayo=r(n8e," (Nystromformer model)"),n8e.forEach(t),yyo=i(U),o1=n(U,"LI",{});var s8e=s(o1);Lce=n(s8e,"STRONG",{});var Yst=s(Lce);Lyo=r(Yst,"perceiver"),Yst.forEach(t),xyo=r(s8e," \u2014 "),vD=n(s8e,"A",{href:!0});var Kst=s(vD);$yo=r(Kst,"PerceiverForMaskedLM"),Kst.forEach(t),kyo=r(s8e," (Perceiver model)"),s8e.forEach(t),Syo=i(U),r1=n(U,"LI",{});var l8e=s(r1);xce=n(l8e,"STRONG",{});var Zst=s(xce);Ryo=r(Zst,"qdqbert"),Zst.forEach(t),Pyo=r(l8e," \u2014 "),FD=n(l8e,"A",{href:!0});var elt=s(FD);Byo=r(elt,"QDQBertForMaskedLM"),elt.forEach(t),Iyo=r(l8e," (QDQBert model)"),l8e.forEach(t),qyo=i(U),t1=n(U,"LI",{});var i8e=s(t1);$ce=n(i8e,"STRONG",{});var olt=s($ce);Nyo=r(olt,"reformer"),olt.forEach(t),jyo=r(i8e," \u2014 "),TD=n(i8e,"A",{href:!0});var rlt=s(TD);Dyo=r(rlt,"ReformerForMaskedLM"),rlt.forEach(t),Gyo=r(i8e," (Reformer model)"),i8e.forEach(t),Oyo=i(U),a1=n(U,"LI",{});var d8e=s(a1);kce=n(d8e,"STRONG",{});var tlt=s(kce);Vyo=r(tlt,"rembert"),tlt.forEach(t),Xyo=r(d8e," \u2014 "),MD=n(d8e,"A",{href:!0});var alt=s(MD);zyo=r(alt,"RemBertForMaskedLM"),alt.forEach(t),Wyo=r(d8e," (RemBERT model)"),d8e.forEach(t),Qyo=i(U),n1=n(U,"LI",{});var c8e=s(n1);Sce=n(c8e,"STRONG",{});var nlt=s(Sce);Hyo=r(nlt,"roberta"),nlt.forEach(t),Uyo=r(c8e," \u2014 "),ED=n(c8e,"A",{href:!0});var slt=s(ED);Jyo=r(slt,"RobertaForMaskedLM"),slt.forEach(t),Yyo=r(c8e," (RoBERTa model)"),c8e.forEach(t),Kyo=i(U),s1=n(U,"LI",{});var f8e=s(s1);Rce=n(f8e,"STRONG",{});var llt=s(Rce);Zyo=r(llt,"roformer"),llt.forEach(t),eLo=r(f8e," \u2014 "),CD=n(f8e,"A",{href:!0});var ilt=s(CD);oLo=r(ilt,"RoFormerForMaskedLM"),ilt.forEach(t),rLo=r(f8e," (RoFormer model)"),f8e.forEach(t),tLo=i(U),l1=n(U,"LI",{});var m8e=s(l1);Pce=n(m8e,"STRONG",{});var dlt=s(Pce);aLo=r(dlt,"squeezebert"),dlt.forEach(t),nLo=r(m8e," \u2014 "),wD=n(m8e,"A",{href:!0});var clt=s(wD);sLo=r(clt,"SqueezeBertForMaskedLM"),clt.forEach(t),lLo=r(m8e," (SqueezeBERT model)"),m8e.forEach(t),iLo=i(U),i1=n(U,"LI",{});var g8e=s(i1);Bce=n(g8e,"STRONG",{});var flt=s(Bce);dLo=r(flt,"tapas"),flt.forEach(t),cLo=r(g8e," \u2014 "),AD=n(g8e,"A",{href:!0});var mlt=s(AD);fLo=r(mlt,"TapasForMaskedLM"),mlt.forEach(t),mLo=r(g8e," (TAPAS model)"),g8e.forEach(t),gLo=i(U),d1=n(U,"LI",{});var h8e=s(d1);Ice=n(h8e,"STRONG",{});var glt=s(Ice);hLo=r(glt,"wav2vec2"),glt.forEach(t),pLo=r(h8e," \u2014 "),qce=n(h8e,"CODE",{});var hlt=s(qce);uLo=r(hlt,"Wav2Vec2ForMaskedLM"),hlt.forEach(t),_Lo=r(h8e," (Wav2Vec2 model)"),h8e.forEach(t),bLo=i(U),c1=n(U,"LI",{});var p8e=s(c1);Nce=n(p8e,"STRONG",{});var plt=s(Nce);vLo=r(plt,"xlm"),plt.forEach(t),FLo=r(p8e," \u2014 "),yD=n(p8e,"A",{href:!0});var ult=s(yD);TLo=r(ult,"XLMWithLMHeadModel"),ult.forEach(t),MLo=r(p8e," (XLM model)"),p8e.forEach(t),ELo=i(U),f1=n(U,"LI",{});var u8e=s(f1);jce=n(u8e,"STRONG",{});var _lt=s(jce);CLo=r(_lt,"xlm-roberta"),_lt.forEach(t),wLo=r(u8e," \u2014 "),LD=n(u8e,"A",{href:!0});var blt=s(LD);ALo=r(blt,"XLMRobertaForMaskedLM"),blt.forEach(t),yLo=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),LLo=i(U),m1=n(U,"LI",{});var _8e=s(m1);Dce=n(_8e,"STRONG",{});var vlt=s(Dce);xLo=r(vlt,"xlm-roberta-xl"),vlt.forEach(t),$Lo=r(_8e," \u2014 "),xD=n(_8e,"A",{href:!0});var Flt=s(xD);kLo=r(Flt,"XLMRobertaXLForMaskedLM"),Flt.forEach(t),SLo=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),RLo=i(U),g1=n(U,"LI",{});var b8e=s(g1);Gce=n(b8e,"STRONG",{});var Tlt=s(Gce);PLo=r(Tlt,"yoso"),Tlt.forEach(t),BLo=r(b8e," \u2014 "),$D=n(b8e,"A",{href:!0});var Mlt=s($D);ILo=r(Mlt,"YosoForMaskedLM"),Mlt.forEach(t),qLo=r(b8e," (YOSO model)"),b8e.forEach(t),U.forEach(t),NLo=i(aa),h1=n(aa,"P",{});var v8e=s(h1);jLo=r(v8e,"The model is set in evaluation mode by default using "),Oce=n(v8e,"CODE",{});var Elt=s(Oce);DLo=r(Elt,"model.eval()"),Elt.forEach(t),GLo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=n(v8e,"CODE",{});var Clt=s(Vce);OLo=r(Clt,"model.train()"),Clt.forEach(t),v8e.forEach(t),VLo=i(aa),T(p1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Zqe=i(f),qi=n(f,"H2",{class:!0});var tDe=s(qi);u1=n(tDe,"A",{id:!0,class:!0,href:!0});var wlt=s(u1);Xce=n(wlt,"SPAN",{});var Alt=s(Xce);T(hy.$$.fragment,Alt),Alt.forEach(t),wlt.forEach(t),XLo=i(tDe),zce=n(tDe,"SPAN",{});var ylt=s(zce);zLo=r(ylt,"AutoModelForSeq2SeqLM"),ylt.forEach(t),tDe.forEach(t),eNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(py.$$.fragment,zs),WLo=i(zs),Ni=n(zs,"P",{});var gZ=s(Ni);QLo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kD=n(gZ,"A",{href:!0});var Llt=s(kD);HLo=r(Llt,"from_pretrained()"),Llt.forEach(t),ULo=r(gZ," class method or the "),SD=n(gZ,"A",{href:!0});var xlt=s(SD);JLo=r(xlt,"from_config()"),xlt.forEach(t),YLo=r(gZ,` class
method.`),gZ.forEach(t),KLo=i(zs),uy=n(zs,"P",{});var aDe=s(uy);ZLo=r(aDe,"This class cannot be instantiated directly using "),Wce=n(aDe,"CODE",{});var $lt=s(Wce);e8o=r($lt,"__init__()"),$lt.forEach(t),o8o=r(aDe," (throws an error)."),aDe.forEach(t),r8o=i(zs),lt=n(zs,"DIV",{class:!0});var P3=s(lt);T(_y.$$.fragment,P3),t8o=i(P3),Qce=n(P3,"P",{});var klt=s(Qce);a8o=r(klt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),klt.forEach(t),n8o=i(P3),ji=n(P3,"P",{});var hZ=s(ji);s8o=r(hZ,`Note:
Loading a model from its configuration file does `),Hce=n(hZ,"STRONG",{});var Slt=s(Hce);l8o=r(Slt,"not"),Slt.forEach(t),i8o=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=n(hZ,"A",{href:!0});var Rlt=s(RD);d8o=r(Rlt,"from_pretrained()"),Rlt.forEach(t),c8o=r(hZ," to load the model weights."),hZ.forEach(t),f8o=i(P3),T(_1.$$.fragment,P3),P3.forEach(t),m8o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(by.$$.fragment,na),g8o=i(na),Uce=n(na,"P",{});var Plt=s(Uce);h8o=r(Plt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Plt.forEach(t),p8o=i(na),Sa=n(na,"P",{});var B3=s(Sa);u8o=r(B3,"The model class to instantiate is selected based on the "),Jce=n(B3,"CODE",{});var Blt=s(Jce);_8o=r(Blt,"model_type"),Blt.forEach(t),b8o=r(B3,` property of the config object (either
passed as an argument or loaded from `),Yce=n(B3,"CODE",{});var Ilt=s(Yce);v8o=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),F8o=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=n(B3,"CODE",{});var qlt=s(Kce);T8o=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),M8o=r(B3,":"),B3.forEach(t),E8o=i(na),ue=n(na,"UL",{});var ve=s(ue);b1=n(ve,"LI",{});var F8e=s(b1);Zce=n(F8e,"STRONG",{});var Nlt=s(Zce);C8o=r(Nlt,"bart"),Nlt.forEach(t),w8o=r(F8e," \u2014 "),PD=n(F8e,"A",{href:!0});var jlt=s(PD);A8o=r(jlt,"BartForConditionalGeneration"),jlt.forEach(t),y8o=r(F8e," (BART model)"),F8e.forEach(t),L8o=i(ve),v1=n(ve,"LI",{});var T8e=s(v1);efe=n(T8e,"STRONG",{});var Dlt=s(efe);x8o=r(Dlt,"bigbird_pegasus"),Dlt.forEach(t),$8o=r(T8e," \u2014 "),BD=n(T8e,"A",{href:!0});var Glt=s(BD);k8o=r(Glt,"BigBirdPegasusForConditionalGeneration"),Glt.forEach(t),S8o=r(T8e," (BigBirdPegasus model)"),T8e.forEach(t),R8o=i(ve),F1=n(ve,"LI",{});var M8e=s(F1);ofe=n(M8e,"STRONG",{});var Olt=s(ofe);P8o=r(Olt,"blenderbot"),Olt.forEach(t),B8o=r(M8e," \u2014 "),ID=n(M8e,"A",{href:!0});var Vlt=s(ID);I8o=r(Vlt,"BlenderbotForConditionalGeneration"),Vlt.forEach(t),q8o=r(M8e," (Blenderbot model)"),M8e.forEach(t),N8o=i(ve),T1=n(ve,"LI",{});var E8e=s(T1);rfe=n(E8e,"STRONG",{});var Xlt=s(rfe);j8o=r(Xlt,"blenderbot-small"),Xlt.forEach(t),D8o=r(E8e," \u2014 "),qD=n(E8e,"A",{href:!0});var zlt=s(qD);G8o=r(zlt,"BlenderbotSmallForConditionalGeneration"),zlt.forEach(t),O8o=r(E8e," (BlenderbotSmall model)"),E8e.forEach(t),V8o=i(ve),M1=n(ve,"LI",{});var C8e=s(M1);tfe=n(C8e,"STRONG",{});var Wlt=s(tfe);X8o=r(Wlt,"encoder-decoder"),Wlt.forEach(t),z8o=r(C8e," \u2014 "),ND=n(C8e,"A",{href:!0});var Qlt=s(ND);W8o=r(Qlt,"EncoderDecoderModel"),Qlt.forEach(t),Q8o=r(C8e," (Encoder decoder model)"),C8e.forEach(t),H8o=i(ve),E1=n(ve,"LI",{});var w8e=s(E1);afe=n(w8e,"STRONG",{});var Hlt=s(afe);U8o=r(Hlt,"fsmt"),Hlt.forEach(t),J8o=r(w8e," \u2014 "),jD=n(w8e,"A",{href:!0});var Ult=s(jD);Y8o=r(Ult,"FSMTForConditionalGeneration"),Ult.forEach(t),K8o=r(w8e," (FairSeq Machine-Translation model)"),w8e.forEach(t),Z8o=i(ve),C1=n(ve,"LI",{});var A8e=s(C1);nfe=n(A8e,"STRONG",{});var Jlt=s(nfe);e9o=r(Jlt,"led"),Jlt.forEach(t),o9o=r(A8e," \u2014 "),DD=n(A8e,"A",{href:!0});var Ylt=s(DD);r9o=r(Ylt,"LEDForConditionalGeneration"),Ylt.forEach(t),t9o=r(A8e," (LED model)"),A8e.forEach(t),a9o=i(ve),w1=n(ve,"LI",{});var y8e=s(w1);sfe=n(y8e,"STRONG",{});var Klt=s(sfe);n9o=r(Klt,"m2m_100"),Klt.forEach(t),s9o=r(y8e," \u2014 "),GD=n(y8e,"A",{href:!0});var Zlt=s(GD);l9o=r(Zlt,"M2M100ForConditionalGeneration"),Zlt.forEach(t),i9o=r(y8e," (M2M100 model)"),y8e.forEach(t),d9o=i(ve),A1=n(ve,"LI",{});var L8e=s(A1);lfe=n(L8e,"STRONG",{});var eit=s(lfe);c9o=r(eit,"marian"),eit.forEach(t),f9o=r(L8e," \u2014 "),OD=n(L8e,"A",{href:!0});var oit=s(OD);m9o=r(oit,"MarianMTModel"),oit.forEach(t),g9o=r(L8e," (Marian model)"),L8e.forEach(t),h9o=i(ve),y1=n(ve,"LI",{});var x8e=s(y1);ife=n(x8e,"STRONG",{});var rit=s(ife);p9o=r(rit,"mbart"),rit.forEach(t),u9o=r(x8e," \u2014 "),VD=n(x8e,"A",{href:!0});var tit=s(VD);_9o=r(tit,"MBartForConditionalGeneration"),tit.forEach(t),b9o=r(x8e," (mBART model)"),x8e.forEach(t),v9o=i(ve),L1=n(ve,"LI",{});var $8e=s(L1);dfe=n($8e,"STRONG",{});var ait=s(dfe);F9o=r(ait,"mt5"),ait.forEach(t),T9o=r($8e," \u2014 "),XD=n($8e,"A",{href:!0});var nit=s(XD);M9o=r(nit,"MT5ForConditionalGeneration"),nit.forEach(t),E9o=r($8e," (mT5 model)"),$8e.forEach(t),C9o=i(ve),x1=n(ve,"LI",{});var k8e=s(x1);cfe=n(k8e,"STRONG",{});var sit=s(cfe);w9o=r(sit,"pegasus"),sit.forEach(t),A9o=r(k8e," \u2014 "),zD=n(k8e,"A",{href:!0});var lit=s(zD);y9o=r(lit,"PegasusForConditionalGeneration"),lit.forEach(t),L9o=r(k8e," (Pegasus model)"),k8e.forEach(t),x9o=i(ve),$1=n(ve,"LI",{});var S8e=s($1);ffe=n(S8e,"STRONG",{});var iit=s(ffe);$9o=r(iit,"plbart"),iit.forEach(t),k9o=r(S8e," \u2014 "),WD=n(S8e,"A",{href:!0});var dit=s(WD);S9o=r(dit,"PLBartForConditionalGeneration"),dit.forEach(t),R9o=r(S8e," (PLBart model)"),S8e.forEach(t),P9o=i(ve),k1=n(ve,"LI",{});var R8e=s(k1);mfe=n(R8e,"STRONG",{});var cit=s(mfe);B9o=r(cit,"prophetnet"),cit.forEach(t),I9o=r(R8e," \u2014 "),QD=n(R8e,"A",{href:!0});var fit=s(QD);q9o=r(fit,"ProphetNetForConditionalGeneration"),fit.forEach(t),N9o=r(R8e," (ProphetNet model)"),R8e.forEach(t),j9o=i(ve),S1=n(ve,"LI",{});var P8e=s(S1);gfe=n(P8e,"STRONG",{});var mit=s(gfe);D9o=r(mit,"t5"),mit.forEach(t),G9o=r(P8e," \u2014 "),HD=n(P8e,"A",{href:!0});var git=s(HD);O9o=r(git,"T5ForConditionalGeneration"),git.forEach(t),V9o=r(P8e," (T5 model)"),P8e.forEach(t),X9o=i(ve),R1=n(ve,"LI",{});var B8e=s(R1);hfe=n(B8e,"STRONG",{});var hit=s(hfe);z9o=r(hit,"xlm-prophetnet"),hit.forEach(t),W9o=r(B8e," \u2014 "),UD=n(B8e,"A",{href:!0});var pit=s(UD);Q9o=r(pit,"XLMProphetNetForConditionalGeneration"),pit.forEach(t),H9o=r(B8e," (XLMProphetNet model)"),B8e.forEach(t),ve.forEach(t),U9o=i(na),P1=n(na,"P",{});var I8e=s(P1);J9o=r(I8e,"The model is set in evaluation mode by default using "),pfe=n(I8e,"CODE",{});var uit=s(pfe);Y9o=r(uit,"model.eval()"),uit.forEach(t),K9o=r(I8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(I8e,"CODE",{});var _it=s(ufe);Z9o=r(_it,"model.train()"),_it.forEach(t),I8e.forEach(t),exo=i(na),T(B1.$$.fragment,na),na.forEach(t),zs.forEach(t),oNe=i(f),Di=n(f,"H2",{class:!0});var nDe=s(Di);I1=n(nDe,"A",{id:!0,class:!0,href:!0});var bit=s(I1);_fe=n(bit,"SPAN",{});var vit=s(_fe);T(vy.$$.fragment,vit),vit.forEach(t),bit.forEach(t),oxo=i(nDe),bfe=n(nDe,"SPAN",{});var Fit=s(bfe);rxo=r(Fit,"AutoModelForSequenceClassification"),Fit.forEach(t),nDe.forEach(t),rNe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(Fy.$$.fragment,Ws),txo=i(Ws),Gi=n(Ws,"P",{});var pZ=s(Gi);axo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=n(pZ,"A",{href:!0});var Tit=s(JD);nxo=r(Tit,"from_pretrained()"),Tit.forEach(t),sxo=r(pZ," class method or the "),YD=n(pZ,"A",{href:!0});var Mit=s(YD);lxo=r(Mit,"from_config()"),Mit.forEach(t),ixo=r(pZ,` class
method.`),pZ.forEach(t),dxo=i(Ws),Ty=n(Ws,"P",{});var sDe=s(Ty);cxo=r(sDe,"This class cannot be instantiated directly using "),vfe=n(sDe,"CODE",{});var Eit=s(vfe);fxo=r(Eit,"__init__()"),Eit.forEach(t),mxo=r(sDe," (throws an error)."),sDe.forEach(t),gxo=i(Ws),it=n(Ws,"DIV",{class:!0});var I3=s(it);T(My.$$.fragment,I3),hxo=i(I3),Ffe=n(I3,"P",{});var Cit=s(Ffe);pxo=r(Cit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cit.forEach(t),uxo=i(I3),Oi=n(I3,"P",{});var uZ=s(Oi);_xo=r(uZ,`Note:
Loading a model from its configuration file does `),Tfe=n(uZ,"STRONG",{});var wit=s(Tfe);bxo=r(wit,"not"),wit.forEach(t),vxo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(uZ,"A",{href:!0});var Ait=s(KD);Fxo=r(Ait,"from_pretrained()"),Ait.forEach(t),Txo=r(uZ," to load the model weights."),uZ.forEach(t),Mxo=i(I3),T(q1.$$.fragment,I3),I3.forEach(t),Exo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Ey.$$.fragment,sa),Cxo=i(sa),Mfe=n(sa,"P",{});var yit=s(Mfe);wxo=r(yit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yit.forEach(t),Axo=i(sa),Ra=n(sa,"P",{});var q3=s(Ra);yxo=r(q3,"The model class to instantiate is selected based on the "),Efe=n(q3,"CODE",{});var Lit=s(Efe);Lxo=r(Lit,"model_type"),Lit.forEach(t),xxo=r(q3,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(q3,"CODE",{});var xit=s(Cfe);$xo=r(xit,"pretrained_model_name_or_path"),xit.forEach(t),kxo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(q3,"CODE",{});var $it=s(wfe);Sxo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),Rxo=r(q3,":"),q3.forEach(t),Pxo=i(sa),q=n(sa,"UL",{});var j=s(q);N1=n(j,"LI",{});var q8e=s(N1);Afe=n(q8e,"STRONG",{});var kit=s(Afe);Bxo=r(kit,"albert"),kit.forEach(t),Ixo=r(q8e," \u2014 "),ZD=n(q8e,"A",{href:!0});var Sit=s(ZD);qxo=r(Sit,"AlbertForSequenceClassification"),Sit.forEach(t),Nxo=r(q8e," (ALBERT model)"),q8e.forEach(t),jxo=i(j),j1=n(j,"LI",{});var N8e=s(j1);yfe=n(N8e,"STRONG",{});var Rit=s(yfe);Dxo=r(Rit,"bart"),Rit.forEach(t),Gxo=r(N8e," \u2014 "),eG=n(N8e,"A",{href:!0});var Pit=s(eG);Oxo=r(Pit,"BartForSequenceClassification"),Pit.forEach(t),Vxo=r(N8e," (BART model)"),N8e.forEach(t),Xxo=i(j),D1=n(j,"LI",{});var j8e=s(D1);Lfe=n(j8e,"STRONG",{});var Bit=s(Lfe);zxo=r(Bit,"bert"),Bit.forEach(t),Wxo=r(j8e," \u2014 "),oG=n(j8e,"A",{href:!0});var Iit=s(oG);Qxo=r(Iit,"BertForSequenceClassification"),Iit.forEach(t),Hxo=r(j8e," (BERT model)"),j8e.forEach(t),Uxo=i(j),G1=n(j,"LI",{});var D8e=s(G1);xfe=n(D8e,"STRONG",{});var qit=s(xfe);Jxo=r(qit,"big_bird"),qit.forEach(t),Yxo=r(D8e," \u2014 "),rG=n(D8e,"A",{href:!0});var Nit=s(rG);Kxo=r(Nit,"BigBirdForSequenceClassification"),Nit.forEach(t),Zxo=r(D8e," (BigBird model)"),D8e.forEach(t),e$o=i(j),O1=n(j,"LI",{});var G8e=s(O1);$fe=n(G8e,"STRONG",{});var jit=s($fe);o$o=r(jit,"bigbird_pegasus"),jit.forEach(t),r$o=r(G8e," \u2014 "),tG=n(G8e,"A",{href:!0});var Dit=s(tG);t$o=r(Dit,"BigBirdPegasusForSequenceClassification"),Dit.forEach(t),a$o=r(G8e," (BigBirdPegasus model)"),G8e.forEach(t),n$o=i(j),V1=n(j,"LI",{});var O8e=s(V1);kfe=n(O8e,"STRONG",{});var Git=s(kfe);s$o=r(Git,"camembert"),Git.forEach(t),l$o=r(O8e," \u2014 "),aG=n(O8e,"A",{href:!0});var Oit=s(aG);i$o=r(Oit,"CamembertForSequenceClassification"),Oit.forEach(t),d$o=r(O8e," (CamemBERT model)"),O8e.forEach(t),c$o=i(j),X1=n(j,"LI",{});var V8e=s(X1);Sfe=n(V8e,"STRONG",{});var Vit=s(Sfe);f$o=r(Vit,"canine"),Vit.forEach(t),m$o=r(V8e," \u2014 "),nG=n(V8e,"A",{href:!0});var Xit=s(nG);g$o=r(Xit,"CanineForSequenceClassification"),Xit.forEach(t),h$o=r(V8e," (Canine model)"),V8e.forEach(t),p$o=i(j),z1=n(j,"LI",{});var X8e=s(z1);Rfe=n(X8e,"STRONG",{});var zit=s(Rfe);u$o=r(zit,"convbert"),zit.forEach(t),_$o=r(X8e," \u2014 "),sG=n(X8e,"A",{href:!0});var Wit=s(sG);b$o=r(Wit,"ConvBertForSequenceClassification"),Wit.forEach(t),v$o=r(X8e," (ConvBERT model)"),X8e.forEach(t),F$o=i(j),W1=n(j,"LI",{});var z8e=s(W1);Pfe=n(z8e,"STRONG",{});var Qit=s(Pfe);T$o=r(Qit,"ctrl"),Qit.forEach(t),M$o=r(z8e," \u2014 "),lG=n(z8e,"A",{href:!0});var Hit=s(lG);E$o=r(Hit,"CTRLForSequenceClassification"),Hit.forEach(t),C$o=r(z8e," (CTRL model)"),z8e.forEach(t),w$o=i(j),Q1=n(j,"LI",{});var W8e=s(Q1);Bfe=n(W8e,"STRONG",{});var Uit=s(Bfe);A$o=r(Uit,"data2vec-text"),Uit.forEach(t),y$o=r(W8e," \u2014 "),iG=n(W8e,"A",{href:!0});var Jit=s(iG);L$o=r(Jit,"Data2VecTextForSequenceClassification"),Jit.forEach(t),x$o=r(W8e," (Data2VecText model)"),W8e.forEach(t),$$o=i(j),H1=n(j,"LI",{});var Q8e=s(H1);Ife=n(Q8e,"STRONG",{});var Yit=s(Ife);k$o=r(Yit,"deberta"),Yit.forEach(t),S$o=r(Q8e," \u2014 "),dG=n(Q8e,"A",{href:!0});var Kit=s(dG);R$o=r(Kit,"DebertaForSequenceClassification"),Kit.forEach(t),P$o=r(Q8e," (DeBERTa model)"),Q8e.forEach(t),B$o=i(j),U1=n(j,"LI",{});var H8e=s(U1);qfe=n(H8e,"STRONG",{});var Zit=s(qfe);I$o=r(Zit,"deberta-v2"),Zit.forEach(t),q$o=r(H8e," \u2014 "),cG=n(H8e,"A",{href:!0});var edt=s(cG);N$o=r(edt,"DebertaV2ForSequenceClassification"),edt.forEach(t),j$o=r(H8e," (DeBERTa-v2 model)"),H8e.forEach(t),D$o=i(j),J1=n(j,"LI",{});var U8e=s(J1);Nfe=n(U8e,"STRONG",{});var odt=s(Nfe);G$o=r(odt,"distilbert"),odt.forEach(t),O$o=r(U8e," \u2014 "),fG=n(U8e,"A",{href:!0});var rdt=s(fG);V$o=r(rdt,"DistilBertForSequenceClassification"),rdt.forEach(t),X$o=r(U8e," (DistilBERT model)"),U8e.forEach(t),z$o=i(j),Y1=n(j,"LI",{});var J8e=s(Y1);jfe=n(J8e,"STRONG",{});var tdt=s(jfe);W$o=r(tdt,"electra"),tdt.forEach(t),Q$o=r(J8e," \u2014 "),mG=n(J8e,"A",{href:!0});var adt=s(mG);H$o=r(adt,"ElectraForSequenceClassification"),adt.forEach(t),U$o=r(J8e," (ELECTRA model)"),J8e.forEach(t),J$o=i(j),K1=n(j,"LI",{});var Y8e=s(K1);Dfe=n(Y8e,"STRONG",{});var ndt=s(Dfe);Y$o=r(ndt,"flaubert"),ndt.forEach(t),K$o=r(Y8e," \u2014 "),gG=n(Y8e,"A",{href:!0});var sdt=s(gG);Z$o=r(sdt,"FlaubertForSequenceClassification"),sdt.forEach(t),eko=r(Y8e," (FlauBERT model)"),Y8e.forEach(t),oko=i(j),Z1=n(j,"LI",{});var K8e=s(Z1);Gfe=n(K8e,"STRONG",{});var ldt=s(Gfe);rko=r(ldt,"fnet"),ldt.forEach(t),tko=r(K8e," \u2014 "),hG=n(K8e,"A",{href:!0});var idt=s(hG);ako=r(idt,"FNetForSequenceClassification"),idt.forEach(t),nko=r(K8e," (FNet model)"),K8e.forEach(t),sko=i(j),eb=n(j,"LI",{});var Z8e=s(eb);Ofe=n(Z8e,"STRONG",{});var ddt=s(Ofe);lko=r(ddt,"funnel"),ddt.forEach(t),iko=r(Z8e," \u2014 "),pG=n(Z8e,"A",{href:!0});var cdt=s(pG);dko=r(cdt,"FunnelForSequenceClassification"),cdt.forEach(t),cko=r(Z8e," (Funnel Transformer model)"),Z8e.forEach(t),fko=i(j),ob=n(j,"LI",{});var e9e=s(ob);Vfe=n(e9e,"STRONG",{});var fdt=s(Vfe);mko=r(fdt,"gpt2"),fdt.forEach(t),gko=r(e9e," \u2014 "),uG=n(e9e,"A",{href:!0});var mdt=s(uG);hko=r(mdt,"GPT2ForSequenceClassification"),mdt.forEach(t),pko=r(e9e," (OpenAI GPT-2 model)"),e9e.forEach(t),uko=i(j),rb=n(j,"LI",{});var o9e=s(rb);Xfe=n(o9e,"STRONG",{});var gdt=s(Xfe);_ko=r(gdt,"gpt_neo"),gdt.forEach(t),bko=r(o9e," \u2014 "),_G=n(o9e,"A",{href:!0});var hdt=s(_G);vko=r(hdt,"GPTNeoForSequenceClassification"),hdt.forEach(t),Fko=r(o9e," (GPT Neo model)"),o9e.forEach(t),Tko=i(j),tb=n(j,"LI",{});var r9e=s(tb);zfe=n(r9e,"STRONG",{});var pdt=s(zfe);Mko=r(pdt,"gptj"),pdt.forEach(t),Eko=r(r9e," \u2014 "),bG=n(r9e,"A",{href:!0});var udt=s(bG);Cko=r(udt,"GPTJForSequenceClassification"),udt.forEach(t),wko=r(r9e," (GPT-J model)"),r9e.forEach(t),Ako=i(j),ab=n(j,"LI",{});var t9e=s(ab);Wfe=n(t9e,"STRONG",{});var _dt=s(Wfe);yko=r(_dt,"ibert"),_dt.forEach(t),Lko=r(t9e," \u2014 "),vG=n(t9e,"A",{href:!0});var bdt=s(vG);xko=r(bdt,"IBertForSequenceClassification"),bdt.forEach(t),$ko=r(t9e," (I-BERT model)"),t9e.forEach(t),kko=i(j),nb=n(j,"LI",{});var a9e=s(nb);Qfe=n(a9e,"STRONG",{});var vdt=s(Qfe);Sko=r(vdt,"layoutlm"),vdt.forEach(t),Rko=r(a9e," \u2014 "),FG=n(a9e,"A",{href:!0});var Fdt=s(FG);Pko=r(Fdt,"LayoutLMForSequenceClassification"),Fdt.forEach(t),Bko=r(a9e," (LayoutLM model)"),a9e.forEach(t),Iko=i(j),sb=n(j,"LI",{});var n9e=s(sb);Hfe=n(n9e,"STRONG",{});var Tdt=s(Hfe);qko=r(Tdt,"layoutlmv2"),Tdt.forEach(t),Nko=r(n9e," \u2014 "),TG=n(n9e,"A",{href:!0});var Mdt=s(TG);jko=r(Mdt,"LayoutLMv2ForSequenceClassification"),Mdt.forEach(t),Dko=r(n9e," (LayoutLMv2 model)"),n9e.forEach(t),Gko=i(j),lb=n(j,"LI",{});var s9e=s(lb);Ufe=n(s9e,"STRONG",{});var Edt=s(Ufe);Oko=r(Edt,"layoutlmv3"),Edt.forEach(t),Vko=r(s9e," \u2014 "),MG=n(s9e,"A",{href:!0});var Cdt=s(MG);Xko=r(Cdt,"LayoutLMv3ForSequenceClassification"),Cdt.forEach(t),zko=r(s9e," (LayoutLMv3 model)"),s9e.forEach(t),Wko=i(j),ib=n(j,"LI",{});var l9e=s(ib);Jfe=n(l9e,"STRONG",{});var wdt=s(Jfe);Qko=r(wdt,"led"),wdt.forEach(t),Hko=r(l9e," \u2014 "),EG=n(l9e,"A",{href:!0});var Adt=s(EG);Uko=r(Adt,"LEDForSequenceClassification"),Adt.forEach(t),Jko=r(l9e," (LED model)"),l9e.forEach(t),Yko=i(j),db=n(j,"LI",{});var i9e=s(db);Yfe=n(i9e,"STRONG",{});var ydt=s(Yfe);Kko=r(ydt,"longformer"),ydt.forEach(t),Zko=r(i9e," \u2014 "),CG=n(i9e,"A",{href:!0});var Ldt=s(CG);eSo=r(Ldt,"LongformerForSequenceClassification"),Ldt.forEach(t),oSo=r(i9e," (Longformer model)"),i9e.forEach(t),rSo=i(j),cb=n(j,"LI",{});var d9e=s(cb);Kfe=n(d9e,"STRONG",{});var xdt=s(Kfe);tSo=r(xdt,"mbart"),xdt.forEach(t),aSo=r(d9e," \u2014 "),wG=n(d9e,"A",{href:!0});var $dt=s(wG);nSo=r($dt,"MBartForSequenceClassification"),$dt.forEach(t),sSo=r(d9e," (mBART model)"),d9e.forEach(t),lSo=i(j),fb=n(j,"LI",{});var c9e=s(fb);Zfe=n(c9e,"STRONG",{});var kdt=s(Zfe);iSo=r(kdt,"megatron-bert"),kdt.forEach(t),dSo=r(c9e," \u2014 "),AG=n(c9e,"A",{href:!0});var Sdt=s(AG);cSo=r(Sdt,"MegatronBertForSequenceClassification"),Sdt.forEach(t),fSo=r(c9e," (MegatronBert model)"),c9e.forEach(t),mSo=i(j),mb=n(j,"LI",{});var f9e=s(mb);eme=n(f9e,"STRONG",{});var Rdt=s(eme);gSo=r(Rdt,"mobilebert"),Rdt.forEach(t),hSo=r(f9e," \u2014 "),yG=n(f9e,"A",{href:!0});var Pdt=s(yG);pSo=r(Pdt,"MobileBertForSequenceClassification"),Pdt.forEach(t),uSo=r(f9e," (MobileBERT model)"),f9e.forEach(t),_So=i(j),gb=n(j,"LI",{});var m9e=s(gb);ome=n(m9e,"STRONG",{});var Bdt=s(ome);bSo=r(Bdt,"mpnet"),Bdt.forEach(t),vSo=r(m9e," \u2014 "),LG=n(m9e,"A",{href:!0});var Idt=s(LG);FSo=r(Idt,"MPNetForSequenceClassification"),Idt.forEach(t),TSo=r(m9e," (MPNet model)"),m9e.forEach(t),MSo=i(j),hb=n(j,"LI",{});var g9e=s(hb);rme=n(g9e,"STRONG",{});var qdt=s(rme);ESo=r(qdt,"nystromformer"),qdt.forEach(t),CSo=r(g9e," \u2014 "),xG=n(g9e,"A",{href:!0});var Ndt=s(xG);wSo=r(Ndt,"NystromformerForSequenceClassification"),Ndt.forEach(t),ASo=r(g9e," (Nystromformer model)"),g9e.forEach(t),ySo=i(j),pb=n(j,"LI",{});var h9e=s(pb);tme=n(h9e,"STRONG",{});var jdt=s(tme);LSo=r(jdt,"openai-gpt"),jdt.forEach(t),xSo=r(h9e," \u2014 "),$G=n(h9e,"A",{href:!0});var Ddt=s($G);$So=r(Ddt,"OpenAIGPTForSequenceClassification"),Ddt.forEach(t),kSo=r(h9e," (OpenAI GPT model)"),h9e.forEach(t),SSo=i(j),ub=n(j,"LI",{});var p9e=s(ub);ame=n(p9e,"STRONG",{});var Gdt=s(ame);RSo=r(Gdt,"perceiver"),Gdt.forEach(t),PSo=r(p9e," \u2014 "),kG=n(p9e,"A",{href:!0});var Odt=s(kG);BSo=r(Odt,"PerceiverForSequenceClassification"),Odt.forEach(t),ISo=r(p9e," (Perceiver model)"),p9e.forEach(t),qSo=i(j),_b=n(j,"LI",{});var u9e=s(_b);nme=n(u9e,"STRONG",{});var Vdt=s(nme);NSo=r(Vdt,"plbart"),Vdt.forEach(t),jSo=r(u9e," \u2014 "),SG=n(u9e,"A",{href:!0});var Xdt=s(SG);DSo=r(Xdt,"PLBartForSequenceClassification"),Xdt.forEach(t),GSo=r(u9e," (PLBart model)"),u9e.forEach(t),OSo=i(j),bb=n(j,"LI",{});var _9e=s(bb);sme=n(_9e,"STRONG",{});var zdt=s(sme);VSo=r(zdt,"qdqbert"),zdt.forEach(t),XSo=r(_9e," \u2014 "),RG=n(_9e,"A",{href:!0});var Wdt=s(RG);zSo=r(Wdt,"QDQBertForSequenceClassification"),Wdt.forEach(t),WSo=r(_9e," (QDQBert model)"),_9e.forEach(t),QSo=i(j),vb=n(j,"LI",{});var b9e=s(vb);lme=n(b9e,"STRONG",{});var Qdt=s(lme);HSo=r(Qdt,"reformer"),Qdt.forEach(t),USo=r(b9e," \u2014 "),PG=n(b9e,"A",{href:!0});var Hdt=s(PG);JSo=r(Hdt,"ReformerForSequenceClassification"),Hdt.forEach(t),YSo=r(b9e," (Reformer model)"),b9e.forEach(t),KSo=i(j),Fb=n(j,"LI",{});var v9e=s(Fb);ime=n(v9e,"STRONG",{});var Udt=s(ime);ZSo=r(Udt,"rembert"),Udt.forEach(t),eRo=r(v9e," \u2014 "),BG=n(v9e,"A",{href:!0});var Jdt=s(BG);oRo=r(Jdt,"RemBertForSequenceClassification"),Jdt.forEach(t),rRo=r(v9e," (RemBERT model)"),v9e.forEach(t),tRo=i(j),Tb=n(j,"LI",{});var F9e=s(Tb);dme=n(F9e,"STRONG",{});var Ydt=s(dme);aRo=r(Ydt,"roberta"),Ydt.forEach(t),nRo=r(F9e," \u2014 "),IG=n(F9e,"A",{href:!0});var Kdt=s(IG);sRo=r(Kdt,"RobertaForSequenceClassification"),Kdt.forEach(t),lRo=r(F9e," (RoBERTa model)"),F9e.forEach(t),iRo=i(j),Mb=n(j,"LI",{});var T9e=s(Mb);cme=n(T9e,"STRONG",{});var Zdt=s(cme);dRo=r(Zdt,"roformer"),Zdt.forEach(t),cRo=r(T9e," \u2014 "),qG=n(T9e,"A",{href:!0});var ect=s(qG);fRo=r(ect,"RoFormerForSequenceClassification"),ect.forEach(t),mRo=r(T9e," (RoFormer model)"),T9e.forEach(t),gRo=i(j),Eb=n(j,"LI",{});var M9e=s(Eb);fme=n(M9e,"STRONG",{});var oct=s(fme);hRo=r(oct,"squeezebert"),oct.forEach(t),pRo=r(M9e," \u2014 "),NG=n(M9e,"A",{href:!0});var rct=s(NG);uRo=r(rct,"SqueezeBertForSequenceClassification"),rct.forEach(t),_Ro=r(M9e," (SqueezeBERT model)"),M9e.forEach(t),bRo=i(j),Cb=n(j,"LI",{});var E9e=s(Cb);mme=n(E9e,"STRONG",{});var tct=s(mme);vRo=r(tct,"tapas"),tct.forEach(t),FRo=r(E9e," \u2014 "),jG=n(E9e,"A",{href:!0});var act=s(jG);TRo=r(act,"TapasForSequenceClassification"),act.forEach(t),MRo=r(E9e," (TAPAS model)"),E9e.forEach(t),ERo=i(j),wb=n(j,"LI",{});var C9e=s(wb);gme=n(C9e,"STRONG",{});var nct=s(gme);CRo=r(nct,"transfo-xl"),nct.forEach(t),wRo=r(C9e," \u2014 "),DG=n(C9e,"A",{href:!0});var sct=s(DG);ARo=r(sct,"TransfoXLForSequenceClassification"),sct.forEach(t),yRo=r(C9e," (Transformer-XL model)"),C9e.forEach(t),LRo=i(j),Ab=n(j,"LI",{});var w9e=s(Ab);hme=n(w9e,"STRONG",{});var lct=s(hme);xRo=r(lct,"xlm"),lct.forEach(t),$Ro=r(w9e," \u2014 "),GG=n(w9e,"A",{href:!0});var ict=s(GG);kRo=r(ict,"XLMForSequenceClassification"),ict.forEach(t),SRo=r(w9e," (XLM model)"),w9e.forEach(t),RRo=i(j),yb=n(j,"LI",{});var A9e=s(yb);pme=n(A9e,"STRONG",{});var dct=s(pme);PRo=r(dct,"xlm-roberta"),dct.forEach(t),BRo=r(A9e," \u2014 "),OG=n(A9e,"A",{href:!0});var cct=s(OG);IRo=r(cct,"XLMRobertaForSequenceClassification"),cct.forEach(t),qRo=r(A9e," (XLM-RoBERTa model)"),A9e.forEach(t),NRo=i(j),Lb=n(j,"LI",{});var y9e=s(Lb);ume=n(y9e,"STRONG",{});var fct=s(ume);jRo=r(fct,"xlm-roberta-xl"),fct.forEach(t),DRo=r(y9e," \u2014 "),VG=n(y9e,"A",{href:!0});var mct=s(VG);GRo=r(mct,"XLMRobertaXLForSequenceClassification"),mct.forEach(t),ORo=r(y9e," (XLM-RoBERTa-XL model)"),y9e.forEach(t),VRo=i(j),xb=n(j,"LI",{});var L9e=s(xb);_me=n(L9e,"STRONG",{});var gct=s(_me);XRo=r(gct,"xlnet"),gct.forEach(t),zRo=r(L9e," \u2014 "),XG=n(L9e,"A",{href:!0});var hct=s(XG);WRo=r(hct,"XLNetForSequenceClassification"),hct.forEach(t),QRo=r(L9e," (XLNet model)"),L9e.forEach(t),HRo=i(j),$b=n(j,"LI",{});var x9e=s($b);bme=n(x9e,"STRONG",{});var pct=s(bme);URo=r(pct,"yoso"),pct.forEach(t),JRo=r(x9e," \u2014 "),zG=n(x9e,"A",{href:!0});var uct=s(zG);YRo=r(uct,"YosoForSequenceClassification"),uct.forEach(t),KRo=r(x9e," (YOSO model)"),x9e.forEach(t),j.forEach(t),ZRo=i(sa),kb=n(sa,"P",{});var $9e=s(kb);ePo=r($9e,"The model is set in evaluation mode by default using "),vme=n($9e,"CODE",{});var _ct=s(vme);oPo=r(_ct,"model.eval()"),_ct.forEach(t),rPo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n($9e,"CODE",{});var bct=s(Fme);tPo=r(bct,"model.train()"),bct.forEach(t),$9e.forEach(t),aPo=i(sa),T(Sb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),tNe=i(f),Vi=n(f,"H2",{class:!0});var lDe=s(Vi);Rb=n(lDe,"A",{id:!0,class:!0,href:!0});var vct=s(Rb);Tme=n(vct,"SPAN",{});var Fct=s(Tme);T(Cy.$$.fragment,Fct),Fct.forEach(t),vct.forEach(t),nPo=i(lDe),Mme=n(lDe,"SPAN",{});var Tct=s(Mme);sPo=r(Tct,"AutoModelForMultipleChoice"),Tct.forEach(t),lDe.forEach(t),aNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(wy.$$.fragment,Qs),lPo=i(Qs),Xi=n(Qs,"P",{});var _Z=s(Xi);iPo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WG=n(_Z,"A",{href:!0});var Mct=s(WG);dPo=r(Mct,"from_pretrained()"),Mct.forEach(t),cPo=r(_Z," class method or the "),QG=n(_Z,"A",{href:!0});var Ect=s(QG);fPo=r(Ect,"from_config()"),Ect.forEach(t),mPo=r(_Z,` class
method.`),_Z.forEach(t),gPo=i(Qs),Ay=n(Qs,"P",{});var iDe=s(Ay);hPo=r(iDe,"This class cannot be instantiated directly using "),Eme=n(iDe,"CODE",{});var Cct=s(Eme);pPo=r(Cct,"__init__()"),Cct.forEach(t),uPo=r(iDe," (throws an error)."),iDe.forEach(t),_Po=i(Qs),dt=n(Qs,"DIV",{class:!0});var N3=s(dt);T(yy.$$.fragment,N3),bPo=i(N3),Cme=n(N3,"P",{});var wct=s(Cme);vPo=r(wct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wct.forEach(t),FPo=i(N3),zi=n(N3,"P",{});var bZ=s(zi);TPo=r(bZ,`Note:
Loading a model from its configuration file does `),wme=n(bZ,"STRONG",{});var Act=s(wme);MPo=r(Act,"not"),Act.forEach(t),EPo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(bZ,"A",{href:!0});var yct=s(HG);CPo=r(yct,"from_pretrained()"),yct.forEach(t),wPo=r(bZ," to load the model weights."),bZ.forEach(t),APo=i(N3),T(Pb.$$.fragment,N3),N3.forEach(t),yPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(Ly.$$.fragment,la),LPo=i(la),Ame=n(la,"P",{});var Lct=s(Ame);xPo=r(Lct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lct.forEach(t),$Po=i(la),Pa=n(la,"P",{});var j3=s(Pa);kPo=r(j3,"The model class to instantiate is selected based on the "),yme=n(j3,"CODE",{});var xct=s(yme);SPo=r(xct,"model_type"),xct.forEach(t),RPo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Lme=n(j3,"CODE",{});var $ct=s(Lme);PPo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),BPo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n(j3,"CODE",{});var kct=s(xme);IPo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),qPo=r(j3,":"),j3.forEach(t),NPo=i(la),Y=n(la,"UL",{});var Z=s(Y);Bb=n(Z,"LI",{});var k9e=s(Bb);$me=n(k9e,"STRONG",{});var Sct=s($me);jPo=r(Sct,"albert"),Sct.forEach(t),DPo=r(k9e," \u2014 "),UG=n(k9e,"A",{href:!0});var Rct=s(UG);GPo=r(Rct,"AlbertForMultipleChoice"),Rct.forEach(t),OPo=r(k9e," (ALBERT model)"),k9e.forEach(t),VPo=i(Z),Ib=n(Z,"LI",{});var S9e=s(Ib);kme=n(S9e,"STRONG",{});var Pct=s(kme);XPo=r(Pct,"bert"),Pct.forEach(t),zPo=r(S9e," \u2014 "),JG=n(S9e,"A",{href:!0});var Bct=s(JG);WPo=r(Bct,"BertForMultipleChoice"),Bct.forEach(t),QPo=r(S9e," (BERT model)"),S9e.forEach(t),HPo=i(Z),qb=n(Z,"LI",{});var R9e=s(qb);Sme=n(R9e,"STRONG",{});var Ict=s(Sme);UPo=r(Ict,"big_bird"),Ict.forEach(t),JPo=r(R9e," \u2014 "),YG=n(R9e,"A",{href:!0});var qct=s(YG);YPo=r(qct,"BigBirdForMultipleChoice"),qct.forEach(t),KPo=r(R9e," (BigBird model)"),R9e.forEach(t),ZPo=i(Z),Nb=n(Z,"LI",{});var P9e=s(Nb);Rme=n(P9e,"STRONG",{});var Nct=s(Rme);eBo=r(Nct,"camembert"),Nct.forEach(t),oBo=r(P9e," \u2014 "),KG=n(P9e,"A",{href:!0});var jct=s(KG);rBo=r(jct,"CamembertForMultipleChoice"),jct.forEach(t),tBo=r(P9e," (CamemBERT model)"),P9e.forEach(t),aBo=i(Z),jb=n(Z,"LI",{});var B9e=s(jb);Pme=n(B9e,"STRONG",{});var Dct=s(Pme);nBo=r(Dct,"canine"),Dct.forEach(t),sBo=r(B9e," \u2014 "),ZG=n(B9e,"A",{href:!0});var Gct=s(ZG);lBo=r(Gct,"CanineForMultipleChoice"),Gct.forEach(t),iBo=r(B9e," (Canine model)"),B9e.forEach(t),dBo=i(Z),Db=n(Z,"LI",{});var I9e=s(Db);Bme=n(I9e,"STRONG",{});var Oct=s(Bme);cBo=r(Oct,"convbert"),Oct.forEach(t),fBo=r(I9e," \u2014 "),eO=n(I9e,"A",{href:!0});var Vct=s(eO);mBo=r(Vct,"ConvBertForMultipleChoice"),Vct.forEach(t),gBo=r(I9e," (ConvBERT model)"),I9e.forEach(t),hBo=i(Z),Gb=n(Z,"LI",{});var q9e=s(Gb);Ime=n(q9e,"STRONG",{});var Xct=s(Ime);pBo=r(Xct,"data2vec-text"),Xct.forEach(t),uBo=r(q9e," \u2014 "),oO=n(q9e,"A",{href:!0});var zct=s(oO);_Bo=r(zct,"Data2VecTextForMultipleChoice"),zct.forEach(t),bBo=r(q9e," (Data2VecText model)"),q9e.forEach(t),vBo=i(Z),Ob=n(Z,"LI",{});var N9e=s(Ob);qme=n(N9e,"STRONG",{});var Wct=s(qme);FBo=r(Wct,"deberta-v2"),Wct.forEach(t),TBo=r(N9e," \u2014 "),rO=n(N9e,"A",{href:!0});var Qct=s(rO);MBo=r(Qct,"DebertaV2ForMultipleChoice"),Qct.forEach(t),EBo=r(N9e," (DeBERTa-v2 model)"),N9e.forEach(t),CBo=i(Z),Vb=n(Z,"LI",{});var j9e=s(Vb);Nme=n(j9e,"STRONG",{});var Hct=s(Nme);wBo=r(Hct,"distilbert"),Hct.forEach(t),ABo=r(j9e," \u2014 "),tO=n(j9e,"A",{href:!0});var Uct=s(tO);yBo=r(Uct,"DistilBertForMultipleChoice"),Uct.forEach(t),LBo=r(j9e," (DistilBERT model)"),j9e.forEach(t),xBo=i(Z),Xb=n(Z,"LI",{});var D9e=s(Xb);jme=n(D9e,"STRONG",{});var Jct=s(jme);$Bo=r(Jct,"electra"),Jct.forEach(t),kBo=r(D9e," \u2014 "),aO=n(D9e,"A",{href:!0});var Yct=s(aO);SBo=r(Yct,"ElectraForMultipleChoice"),Yct.forEach(t),RBo=r(D9e," (ELECTRA model)"),D9e.forEach(t),PBo=i(Z),zb=n(Z,"LI",{});var G9e=s(zb);Dme=n(G9e,"STRONG",{});var Kct=s(Dme);BBo=r(Kct,"flaubert"),Kct.forEach(t),IBo=r(G9e," \u2014 "),nO=n(G9e,"A",{href:!0});var Zct=s(nO);qBo=r(Zct,"FlaubertForMultipleChoice"),Zct.forEach(t),NBo=r(G9e," (FlauBERT model)"),G9e.forEach(t),jBo=i(Z),Wb=n(Z,"LI",{});var O9e=s(Wb);Gme=n(O9e,"STRONG",{});var eft=s(Gme);DBo=r(eft,"fnet"),eft.forEach(t),GBo=r(O9e," \u2014 "),sO=n(O9e,"A",{href:!0});var oft=s(sO);OBo=r(oft,"FNetForMultipleChoice"),oft.forEach(t),VBo=r(O9e," (FNet model)"),O9e.forEach(t),XBo=i(Z),Qb=n(Z,"LI",{});var V9e=s(Qb);Ome=n(V9e,"STRONG",{});var rft=s(Ome);zBo=r(rft,"funnel"),rft.forEach(t),WBo=r(V9e," \u2014 "),lO=n(V9e,"A",{href:!0});var tft=s(lO);QBo=r(tft,"FunnelForMultipleChoice"),tft.forEach(t),HBo=r(V9e," (Funnel Transformer model)"),V9e.forEach(t),UBo=i(Z),Hb=n(Z,"LI",{});var X9e=s(Hb);Vme=n(X9e,"STRONG",{});var aft=s(Vme);JBo=r(aft,"ibert"),aft.forEach(t),YBo=r(X9e," \u2014 "),iO=n(X9e,"A",{href:!0});var nft=s(iO);KBo=r(nft,"IBertForMultipleChoice"),nft.forEach(t),ZBo=r(X9e," (I-BERT model)"),X9e.forEach(t),eIo=i(Z),Ub=n(Z,"LI",{});var z9e=s(Ub);Xme=n(z9e,"STRONG",{});var sft=s(Xme);oIo=r(sft,"longformer"),sft.forEach(t),rIo=r(z9e," \u2014 "),dO=n(z9e,"A",{href:!0});var lft=s(dO);tIo=r(lft,"LongformerForMultipleChoice"),lft.forEach(t),aIo=r(z9e," (Longformer model)"),z9e.forEach(t),nIo=i(Z),Jb=n(Z,"LI",{});var W9e=s(Jb);zme=n(W9e,"STRONG",{});var ift=s(zme);sIo=r(ift,"megatron-bert"),ift.forEach(t),lIo=r(W9e," \u2014 "),cO=n(W9e,"A",{href:!0});var dft=s(cO);iIo=r(dft,"MegatronBertForMultipleChoice"),dft.forEach(t),dIo=r(W9e," (MegatronBert model)"),W9e.forEach(t),cIo=i(Z),Yb=n(Z,"LI",{});var Q9e=s(Yb);Wme=n(Q9e,"STRONG",{});var cft=s(Wme);fIo=r(cft,"mobilebert"),cft.forEach(t),mIo=r(Q9e," \u2014 "),fO=n(Q9e,"A",{href:!0});var fft=s(fO);gIo=r(fft,"MobileBertForMultipleChoice"),fft.forEach(t),hIo=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),pIo=i(Z),Kb=n(Z,"LI",{});var H9e=s(Kb);Qme=n(H9e,"STRONG",{});var mft=s(Qme);uIo=r(mft,"mpnet"),mft.forEach(t),_Io=r(H9e," \u2014 "),mO=n(H9e,"A",{href:!0});var gft=s(mO);bIo=r(gft,"MPNetForMultipleChoice"),gft.forEach(t),vIo=r(H9e," (MPNet model)"),H9e.forEach(t),FIo=i(Z),Zb=n(Z,"LI",{});var U9e=s(Zb);Hme=n(U9e,"STRONG",{});var hft=s(Hme);TIo=r(hft,"nystromformer"),hft.forEach(t),MIo=r(U9e," \u2014 "),gO=n(U9e,"A",{href:!0});var pft=s(gO);EIo=r(pft,"NystromformerForMultipleChoice"),pft.forEach(t),CIo=r(U9e," (Nystromformer model)"),U9e.forEach(t),wIo=i(Z),e2=n(Z,"LI",{});var J9e=s(e2);Ume=n(J9e,"STRONG",{});var uft=s(Ume);AIo=r(uft,"qdqbert"),uft.forEach(t),yIo=r(J9e," \u2014 "),hO=n(J9e,"A",{href:!0});var _ft=s(hO);LIo=r(_ft,"QDQBertForMultipleChoice"),_ft.forEach(t),xIo=r(J9e," (QDQBert model)"),J9e.forEach(t),$Io=i(Z),o2=n(Z,"LI",{});var Y9e=s(o2);Jme=n(Y9e,"STRONG",{});var bft=s(Jme);kIo=r(bft,"rembert"),bft.forEach(t),SIo=r(Y9e," \u2014 "),pO=n(Y9e,"A",{href:!0});var vft=s(pO);RIo=r(vft,"RemBertForMultipleChoice"),vft.forEach(t),PIo=r(Y9e," (RemBERT model)"),Y9e.forEach(t),BIo=i(Z),r2=n(Z,"LI",{});var K9e=s(r2);Yme=n(K9e,"STRONG",{});var Fft=s(Yme);IIo=r(Fft,"roberta"),Fft.forEach(t),qIo=r(K9e," \u2014 "),uO=n(K9e,"A",{href:!0});var Tft=s(uO);NIo=r(Tft,"RobertaForMultipleChoice"),Tft.forEach(t),jIo=r(K9e," (RoBERTa model)"),K9e.forEach(t),DIo=i(Z),t2=n(Z,"LI",{});var Z9e=s(t2);Kme=n(Z9e,"STRONG",{});var Mft=s(Kme);GIo=r(Mft,"roformer"),Mft.forEach(t),OIo=r(Z9e," \u2014 "),_O=n(Z9e,"A",{href:!0});var Eft=s(_O);VIo=r(Eft,"RoFormerForMultipleChoice"),Eft.forEach(t),XIo=r(Z9e," (RoFormer model)"),Z9e.forEach(t),zIo=i(Z),a2=n(Z,"LI",{});var exe=s(a2);Zme=n(exe,"STRONG",{});var Cft=s(Zme);WIo=r(Cft,"squeezebert"),Cft.forEach(t),QIo=r(exe," \u2014 "),bO=n(exe,"A",{href:!0});var wft=s(bO);HIo=r(wft,"SqueezeBertForMultipleChoice"),wft.forEach(t),UIo=r(exe," (SqueezeBERT model)"),exe.forEach(t),JIo=i(Z),n2=n(Z,"LI",{});var oxe=s(n2);ege=n(oxe,"STRONG",{});var Aft=s(ege);YIo=r(Aft,"xlm"),Aft.forEach(t),KIo=r(oxe," \u2014 "),vO=n(oxe,"A",{href:!0});var yft=s(vO);ZIo=r(yft,"XLMForMultipleChoice"),yft.forEach(t),eqo=r(oxe," (XLM model)"),oxe.forEach(t),oqo=i(Z),s2=n(Z,"LI",{});var rxe=s(s2);oge=n(rxe,"STRONG",{});var Lft=s(oge);rqo=r(Lft,"xlm-roberta"),Lft.forEach(t),tqo=r(rxe," \u2014 "),FO=n(rxe,"A",{href:!0});var xft=s(FO);aqo=r(xft,"XLMRobertaForMultipleChoice"),xft.forEach(t),nqo=r(rxe," (XLM-RoBERTa model)"),rxe.forEach(t),sqo=i(Z),l2=n(Z,"LI",{});var txe=s(l2);rge=n(txe,"STRONG",{});var $ft=s(rge);lqo=r($ft,"xlm-roberta-xl"),$ft.forEach(t),iqo=r(txe," \u2014 "),TO=n(txe,"A",{href:!0});var kft=s(TO);dqo=r(kft,"XLMRobertaXLForMultipleChoice"),kft.forEach(t),cqo=r(txe," (XLM-RoBERTa-XL model)"),txe.forEach(t),fqo=i(Z),i2=n(Z,"LI",{});var axe=s(i2);tge=n(axe,"STRONG",{});var Sft=s(tge);mqo=r(Sft,"xlnet"),Sft.forEach(t),gqo=r(axe," \u2014 "),MO=n(axe,"A",{href:!0});var Rft=s(MO);hqo=r(Rft,"XLNetForMultipleChoice"),Rft.forEach(t),pqo=r(axe," (XLNet model)"),axe.forEach(t),uqo=i(Z),d2=n(Z,"LI",{});var nxe=s(d2);age=n(nxe,"STRONG",{});var Pft=s(age);_qo=r(Pft,"yoso"),Pft.forEach(t),bqo=r(nxe," \u2014 "),EO=n(nxe,"A",{href:!0});var Bft=s(EO);vqo=r(Bft,"YosoForMultipleChoice"),Bft.forEach(t),Fqo=r(nxe," (YOSO model)"),nxe.forEach(t),Z.forEach(t),Tqo=i(la),c2=n(la,"P",{});var sxe=s(c2);Mqo=r(sxe,"The model is set in evaluation mode by default using "),nge=n(sxe,"CODE",{});var Ift=s(nge);Eqo=r(Ift,"model.eval()"),Ift.forEach(t),Cqo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(sxe,"CODE",{});var qft=s(sge);wqo=r(qft,"model.train()"),qft.forEach(t),sxe.forEach(t),Aqo=i(la),T(f2.$$.fragment,la),la.forEach(t),Qs.forEach(t),nNe=i(f),Wi=n(f,"H2",{class:!0});var dDe=s(Wi);m2=n(dDe,"A",{id:!0,class:!0,href:!0});var Nft=s(m2);lge=n(Nft,"SPAN",{});var jft=s(lge);T(xy.$$.fragment,jft),jft.forEach(t),Nft.forEach(t),yqo=i(dDe),ige=n(dDe,"SPAN",{});var Dft=s(ige);Lqo=r(Dft,"AutoModelForNextSentencePrediction"),Dft.forEach(t),dDe.forEach(t),sNe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T($y.$$.fragment,Hs),xqo=i(Hs),Qi=n(Hs,"P",{});var vZ=s(Qi);$qo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CO=n(vZ,"A",{href:!0});var Gft=s(CO);kqo=r(Gft,"from_pretrained()"),Gft.forEach(t),Sqo=r(vZ," class method or the "),wO=n(vZ,"A",{href:!0});var Oft=s(wO);Rqo=r(Oft,"from_config()"),Oft.forEach(t),Pqo=r(vZ,` class
method.`),vZ.forEach(t),Bqo=i(Hs),ky=n(Hs,"P",{});var cDe=s(ky);Iqo=r(cDe,"This class cannot be instantiated directly using "),dge=n(cDe,"CODE",{});var Vft=s(dge);qqo=r(Vft,"__init__()"),Vft.forEach(t),Nqo=r(cDe," (throws an error)."),cDe.forEach(t),jqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var D3=s(ct);T(Sy.$$.fragment,D3),Dqo=i(D3),cge=n(D3,"P",{});var Xft=s(cge);Gqo=r(Xft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xft.forEach(t),Oqo=i(D3),Hi=n(D3,"P",{});var FZ=s(Hi);Vqo=r(FZ,`Note:
Loading a model from its configuration file does `),fge=n(FZ,"STRONG",{});var zft=s(fge);Xqo=r(zft,"not"),zft.forEach(t),zqo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(FZ,"A",{href:!0});var Wft=s(AO);Wqo=r(Wft,"from_pretrained()"),Wft.forEach(t),Qqo=r(FZ," to load the model weights."),FZ.forEach(t),Hqo=i(D3),T(g2.$$.fragment,D3),D3.forEach(t),Uqo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Ry.$$.fragment,ia),Jqo=i(ia),mge=n(ia,"P",{});var Qft=s(mge);Yqo=r(Qft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qft.forEach(t),Kqo=i(ia),Ba=n(ia,"P",{});var G3=s(Ba);Zqo=r(G3,"The model class to instantiate is selected based on the "),gge=n(G3,"CODE",{});var Hft=s(gge);eNo=r(Hft,"model_type"),Hft.forEach(t),oNo=r(G3,` property of the config object (either
passed as an argument or loaded from `),hge=n(G3,"CODE",{});var Uft=s(hge);rNo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),tNo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(G3,"CODE",{});var Jft=s(pge);aNo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),nNo=r(G3,":"),G3.forEach(t),sNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);h2=n(Us,"LI",{});var lxe=s(h2);uge=n(lxe,"STRONG",{});var Yft=s(uge);lNo=r(Yft,"bert"),Yft.forEach(t),iNo=r(lxe," \u2014 "),yO=n(lxe,"A",{href:!0});var Kft=s(yO);dNo=r(Kft,"BertForNextSentencePrediction"),Kft.forEach(t),cNo=r(lxe," (BERT model)"),lxe.forEach(t),fNo=i(Us),p2=n(Us,"LI",{});var ixe=s(p2);_ge=n(ixe,"STRONG",{});var Zft=s(_ge);mNo=r(Zft,"fnet"),Zft.forEach(t),gNo=r(ixe," \u2014 "),LO=n(ixe,"A",{href:!0});var emt=s(LO);hNo=r(emt,"FNetForNextSentencePrediction"),emt.forEach(t),pNo=r(ixe," (FNet model)"),ixe.forEach(t),uNo=i(Us),u2=n(Us,"LI",{});var dxe=s(u2);bge=n(dxe,"STRONG",{});var omt=s(bge);_No=r(omt,"megatron-bert"),omt.forEach(t),bNo=r(dxe," \u2014 "),xO=n(dxe,"A",{href:!0});var rmt=s(xO);vNo=r(rmt,"MegatronBertForNextSentencePrediction"),rmt.forEach(t),FNo=r(dxe," (MegatronBert model)"),dxe.forEach(t),TNo=i(Us),_2=n(Us,"LI",{});var cxe=s(_2);vge=n(cxe,"STRONG",{});var tmt=s(vge);MNo=r(tmt,"mobilebert"),tmt.forEach(t),ENo=r(cxe," \u2014 "),$O=n(cxe,"A",{href:!0});var amt=s($O);CNo=r(amt,"MobileBertForNextSentencePrediction"),amt.forEach(t),wNo=r(cxe," (MobileBERT model)"),cxe.forEach(t),ANo=i(Us),b2=n(Us,"LI",{});var fxe=s(b2);Fge=n(fxe,"STRONG",{});var nmt=s(Fge);yNo=r(nmt,"qdqbert"),nmt.forEach(t),LNo=r(fxe," \u2014 "),kO=n(fxe,"A",{href:!0});var smt=s(kO);xNo=r(smt,"QDQBertForNextSentencePrediction"),smt.forEach(t),$No=r(fxe," (QDQBert model)"),fxe.forEach(t),Us.forEach(t),kNo=i(ia),v2=n(ia,"P",{});var mxe=s(v2);SNo=r(mxe,"The model is set in evaluation mode by default using "),Tge=n(mxe,"CODE",{});var lmt=s(Tge);RNo=r(lmt,"model.eval()"),lmt.forEach(t),PNo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(mxe,"CODE",{});var imt=s(Mge);BNo=r(imt,"model.train()"),imt.forEach(t),mxe.forEach(t),INo=i(ia),T(F2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),lNe=i(f),Ui=n(f,"H2",{class:!0});var fDe=s(Ui);T2=n(fDe,"A",{id:!0,class:!0,href:!0});var dmt=s(T2);Ege=n(dmt,"SPAN",{});var cmt=s(Ege);T(Py.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),qNo=i(fDe),Cge=n(fDe,"SPAN",{});var fmt=s(Cge);NNo=r(fmt,"AutoModelForTokenClassification"),fmt.forEach(t),fDe.forEach(t),iNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(By.$$.fragment,Js),jNo=i(Js),Ji=n(Js,"P",{});var TZ=s(Ji);DNo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SO=n(TZ,"A",{href:!0});var mmt=s(SO);GNo=r(mmt,"from_pretrained()"),mmt.forEach(t),ONo=r(TZ," class method or the "),RO=n(TZ,"A",{href:!0});var gmt=s(RO);VNo=r(gmt,"from_config()"),gmt.forEach(t),XNo=r(TZ,` class
method.`),TZ.forEach(t),zNo=i(Js),Iy=n(Js,"P",{});var mDe=s(Iy);WNo=r(mDe,"This class cannot be instantiated directly using "),wge=n(mDe,"CODE",{});var hmt=s(wge);QNo=r(hmt,"__init__()"),hmt.forEach(t),HNo=r(mDe," (throws an error)."),mDe.forEach(t),UNo=i(Js),ft=n(Js,"DIV",{class:!0});var O3=s(ft);T(qy.$$.fragment,O3),JNo=i(O3),Age=n(O3,"P",{});var pmt=s(Age);YNo=r(pmt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pmt.forEach(t),KNo=i(O3),Yi=n(O3,"P",{});var MZ=s(Yi);ZNo=r(MZ,`Note:
Loading a model from its configuration file does `),yge=n(MZ,"STRONG",{});var umt=s(yge);ejo=r(umt,"not"),umt.forEach(t),ojo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(MZ,"A",{href:!0});var _mt=s(PO);rjo=r(_mt,"from_pretrained()"),_mt.forEach(t),tjo=r(MZ," to load the model weights."),MZ.forEach(t),ajo=i(O3),T(M2.$$.fragment,O3),O3.forEach(t),njo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Ny.$$.fragment,da),sjo=i(da),Lge=n(da,"P",{});var bmt=s(Lge);ljo=r(bmt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bmt.forEach(t),ijo=i(da),Ia=n(da,"P",{});var V3=s(Ia);djo=r(V3,"The model class to instantiate is selected based on the "),xge=n(V3,"CODE",{});var vmt=s(xge);cjo=r(vmt,"model_type"),vmt.forEach(t),fjo=r(V3,` property of the config object (either
passed as an argument or loaded from `),$ge=n(V3,"CODE",{});var Fmt=s($ge);mjo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),gjo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(V3,"CODE",{});var Tmt=s(kge);hjo=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),pjo=r(V3,":"),V3.forEach(t),ujo=i(da),H=n(da,"UL",{});var J=s(H);E2=n(J,"LI",{});var gxe=s(E2);Sge=n(gxe,"STRONG",{});var Mmt=s(Sge);_jo=r(Mmt,"albert"),Mmt.forEach(t),bjo=r(gxe," \u2014 "),BO=n(gxe,"A",{href:!0});var Emt=s(BO);vjo=r(Emt,"AlbertForTokenClassification"),Emt.forEach(t),Fjo=r(gxe," (ALBERT model)"),gxe.forEach(t),Tjo=i(J),C2=n(J,"LI",{});var hxe=s(C2);Rge=n(hxe,"STRONG",{});var Cmt=s(Rge);Mjo=r(Cmt,"bert"),Cmt.forEach(t),Ejo=r(hxe," \u2014 "),IO=n(hxe,"A",{href:!0});var wmt=s(IO);Cjo=r(wmt,"BertForTokenClassification"),wmt.forEach(t),wjo=r(hxe," (BERT model)"),hxe.forEach(t),Ajo=i(J),w2=n(J,"LI",{});var pxe=s(w2);Pge=n(pxe,"STRONG",{});var Amt=s(Pge);yjo=r(Amt,"big_bird"),Amt.forEach(t),Ljo=r(pxe," \u2014 "),qO=n(pxe,"A",{href:!0});var ymt=s(qO);xjo=r(ymt,"BigBirdForTokenClassification"),ymt.forEach(t),$jo=r(pxe," (BigBird model)"),pxe.forEach(t),kjo=i(J),A2=n(J,"LI",{});var uxe=s(A2);Bge=n(uxe,"STRONG",{});var Lmt=s(Bge);Sjo=r(Lmt,"camembert"),Lmt.forEach(t),Rjo=r(uxe," \u2014 "),NO=n(uxe,"A",{href:!0});var xmt=s(NO);Pjo=r(xmt,"CamembertForTokenClassification"),xmt.forEach(t),Bjo=r(uxe," (CamemBERT model)"),uxe.forEach(t),Ijo=i(J),y2=n(J,"LI",{});var _xe=s(y2);Ige=n(_xe,"STRONG",{});var $mt=s(Ige);qjo=r($mt,"canine"),$mt.forEach(t),Njo=r(_xe," \u2014 "),jO=n(_xe,"A",{href:!0});var kmt=s(jO);jjo=r(kmt,"CanineForTokenClassification"),kmt.forEach(t),Djo=r(_xe," (Canine model)"),_xe.forEach(t),Gjo=i(J),L2=n(J,"LI",{});var bxe=s(L2);qge=n(bxe,"STRONG",{});var Smt=s(qge);Ojo=r(Smt,"convbert"),Smt.forEach(t),Vjo=r(bxe," \u2014 "),DO=n(bxe,"A",{href:!0});var Rmt=s(DO);Xjo=r(Rmt,"ConvBertForTokenClassification"),Rmt.forEach(t),zjo=r(bxe," (ConvBERT model)"),bxe.forEach(t),Wjo=i(J),x2=n(J,"LI",{});var vxe=s(x2);Nge=n(vxe,"STRONG",{});var Pmt=s(Nge);Qjo=r(Pmt,"data2vec-text"),Pmt.forEach(t),Hjo=r(vxe," \u2014 "),GO=n(vxe,"A",{href:!0});var Bmt=s(GO);Ujo=r(Bmt,"Data2VecTextForTokenClassification"),Bmt.forEach(t),Jjo=r(vxe," (Data2VecText model)"),vxe.forEach(t),Yjo=i(J),$2=n(J,"LI",{});var Fxe=s($2);jge=n(Fxe,"STRONG",{});var Imt=s(jge);Kjo=r(Imt,"deberta"),Imt.forEach(t),Zjo=r(Fxe," \u2014 "),OO=n(Fxe,"A",{href:!0});var qmt=s(OO);eDo=r(qmt,"DebertaForTokenClassification"),qmt.forEach(t),oDo=r(Fxe," (DeBERTa model)"),Fxe.forEach(t),rDo=i(J),k2=n(J,"LI",{});var Txe=s(k2);Dge=n(Txe,"STRONG",{});var Nmt=s(Dge);tDo=r(Nmt,"deberta-v2"),Nmt.forEach(t),aDo=r(Txe," \u2014 "),VO=n(Txe,"A",{href:!0});var jmt=s(VO);nDo=r(jmt,"DebertaV2ForTokenClassification"),jmt.forEach(t),sDo=r(Txe," (DeBERTa-v2 model)"),Txe.forEach(t),lDo=i(J),S2=n(J,"LI",{});var Mxe=s(S2);Gge=n(Mxe,"STRONG",{});var Dmt=s(Gge);iDo=r(Dmt,"distilbert"),Dmt.forEach(t),dDo=r(Mxe," \u2014 "),XO=n(Mxe,"A",{href:!0});var Gmt=s(XO);cDo=r(Gmt,"DistilBertForTokenClassification"),Gmt.forEach(t),fDo=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),mDo=i(J),R2=n(J,"LI",{});var Exe=s(R2);Oge=n(Exe,"STRONG",{});var Omt=s(Oge);gDo=r(Omt,"electra"),Omt.forEach(t),hDo=r(Exe," \u2014 "),zO=n(Exe,"A",{href:!0});var Vmt=s(zO);pDo=r(Vmt,"ElectraForTokenClassification"),Vmt.forEach(t),uDo=r(Exe," (ELECTRA model)"),Exe.forEach(t),_Do=i(J),P2=n(J,"LI",{});var Cxe=s(P2);Vge=n(Cxe,"STRONG",{});var Xmt=s(Vge);bDo=r(Xmt,"flaubert"),Xmt.forEach(t),vDo=r(Cxe," \u2014 "),WO=n(Cxe,"A",{href:!0});var zmt=s(WO);FDo=r(zmt,"FlaubertForTokenClassification"),zmt.forEach(t),TDo=r(Cxe," (FlauBERT model)"),Cxe.forEach(t),MDo=i(J),B2=n(J,"LI",{});var wxe=s(B2);Xge=n(wxe,"STRONG",{});var Wmt=s(Xge);EDo=r(Wmt,"fnet"),Wmt.forEach(t),CDo=r(wxe," \u2014 "),QO=n(wxe,"A",{href:!0});var Qmt=s(QO);wDo=r(Qmt,"FNetForTokenClassification"),Qmt.forEach(t),ADo=r(wxe," (FNet model)"),wxe.forEach(t),yDo=i(J),I2=n(J,"LI",{});var Axe=s(I2);zge=n(Axe,"STRONG",{});var Hmt=s(zge);LDo=r(Hmt,"funnel"),Hmt.forEach(t),xDo=r(Axe," \u2014 "),HO=n(Axe,"A",{href:!0});var Umt=s(HO);$Do=r(Umt,"FunnelForTokenClassification"),Umt.forEach(t),kDo=r(Axe," (Funnel Transformer model)"),Axe.forEach(t),SDo=i(J),q2=n(J,"LI",{});var yxe=s(q2);Wge=n(yxe,"STRONG",{});var Jmt=s(Wge);RDo=r(Jmt,"gpt2"),Jmt.forEach(t),PDo=r(yxe," \u2014 "),UO=n(yxe,"A",{href:!0});var Ymt=s(UO);BDo=r(Ymt,"GPT2ForTokenClassification"),Ymt.forEach(t),IDo=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),qDo=i(J),N2=n(J,"LI",{});var Lxe=s(N2);Qge=n(Lxe,"STRONG",{});var Kmt=s(Qge);NDo=r(Kmt,"ibert"),Kmt.forEach(t),jDo=r(Lxe," \u2014 "),JO=n(Lxe,"A",{href:!0});var Zmt=s(JO);DDo=r(Zmt,"IBertForTokenClassification"),Zmt.forEach(t),GDo=r(Lxe," (I-BERT model)"),Lxe.forEach(t),ODo=i(J),j2=n(J,"LI",{});var xxe=s(j2);Hge=n(xxe,"STRONG",{});var egt=s(Hge);VDo=r(egt,"layoutlm"),egt.forEach(t),XDo=r(xxe," \u2014 "),YO=n(xxe,"A",{href:!0});var ogt=s(YO);zDo=r(ogt,"LayoutLMForTokenClassification"),ogt.forEach(t),WDo=r(xxe," (LayoutLM model)"),xxe.forEach(t),QDo=i(J),D2=n(J,"LI",{});var $xe=s(D2);Uge=n($xe,"STRONG",{});var rgt=s(Uge);HDo=r(rgt,"layoutlmv2"),rgt.forEach(t),UDo=r($xe," \u2014 "),KO=n($xe,"A",{href:!0});var tgt=s(KO);JDo=r(tgt,"LayoutLMv2ForTokenClassification"),tgt.forEach(t),YDo=r($xe," (LayoutLMv2 model)"),$xe.forEach(t),KDo=i(J),G2=n(J,"LI",{});var kxe=s(G2);Jge=n(kxe,"STRONG",{});var agt=s(Jge);ZDo=r(agt,"layoutlmv3"),agt.forEach(t),eGo=r(kxe," \u2014 "),ZO=n(kxe,"A",{href:!0});var ngt=s(ZO);oGo=r(ngt,"LayoutLMv3ForTokenClassification"),ngt.forEach(t),rGo=r(kxe," (LayoutLMv3 model)"),kxe.forEach(t),tGo=i(J),O2=n(J,"LI",{});var Sxe=s(O2);Yge=n(Sxe,"STRONG",{});var sgt=s(Yge);aGo=r(sgt,"longformer"),sgt.forEach(t),nGo=r(Sxe," \u2014 "),eV=n(Sxe,"A",{href:!0});var lgt=s(eV);sGo=r(lgt,"LongformerForTokenClassification"),lgt.forEach(t),lGo=r(Sxe," (Longformer model)"),Sxe.forEach(t),iGo=i(J),V2=n(J,"LI",{});var Rxe=s(V2);Kge=n(Rxe,"STRONG",{});var igt=s(Kge);dGo=r(igt,"megatron-bert"),igt.forEach(t),cGo=r(Rxe," \u2014 "),oV=n(Rxe,"A",{href:!0});var dgt=s(oV);fGo=r(dgt,"MegatronBertForTokenClassification"),dgt.forEach(t),mGo=r(Rxe," (MegatronBert model)"),Rxe.forEach(t),gGo=i(J),X2=n(J,"LI",{});var Pxe=s(X2);Zge=n(Pxe,"STRONG",{});var cgt=s(Zge);hGo=r(cgt,"mobilebert"),cgt.forEach(t),pGo=r(Pxe," \u2014 "),rV=n(Pxe,"A",{href:!0});var fgt=s(rV);uGo=r(fgt,"MobileBertForTokenClassification"),fgt.forEach(t),_Go=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),bGo=i(J),z2=n(J,"LI",{});var Bxe=s(z2);ehe=n(Bxe,"STRONG",{});var mgt=s(ehe);vGo=r(mgt,"mpnet"),mgt.forEach(t),FGo=r(Bxe," \u2014 "),tV=n(Bxe,"A",{href:!0});var ggt=s(tV);TGo=r(ggt,"MPNetForTokenClassification"),ggt.forEach(t),MGo=r(Bxe," (MPNet model)"),Bxe.forEach(t),EGo=i(J),W2=n(J,"LI",{});var Ixe=s(W2);ohe=n(Ixe,"STRONG",{});var hgt=s(ohe);CGo=r(hgt,"nystromformer"),hgt.forEach(t),wGo=r(Ixe," \u2014 "),aV=n(Ixe,"A",{href:!0});var pgt=s(aV);AGo=r(pgt,"NystromformerForTokenClassification"),pgt.forEach(t),yGo=r(Ixe," (Nystromformer model)"),Ixe.forEach(t),LGo=i(J),Q2=n(J,"LI",{});var qxe=s(Q2);rhe=n(qxe,"STRONG",{});var ugt=s(rhe);xGo=r(ugt,"qdqbert"),ugt.forEach(t),$Go=r(qxe," \u2014 "),nV=n(qxe,"A",{href:!0});var _gt=s(nV);kGo=r(_gt,"QDQBertForTokenClassification"),_gt.forEach(t),SGo=r(qxe," (QDQBert model)"),qxe.forEach(t),RGo=i(J),H2=n(J,"LI",{});var Nxe=s(H2);the=n(Nxe,"STRONG",{});var bgt=s(the);PGo=r(bgt,"rembert"),bgt.forEach(t),BGo=r(Nxe," \u2014 "),sV=n(Nxe,"A",{href:!0});var vgt=s(sV);IGo=r(vgt,"RemBertForTokenClassification"),vgt.forEach(t),qGo=r(Nxe," (RemBERT model)"),Nxe.forEach(t),NGo=i(J),U2=n(J,"LI",{});var jxe=s(U2);ahe=n(jxe,"STRONG",{});var Fgt=s(ahe);jGo=r(Fgt,"roberta"),Fgt.forEach(t),DGo=r(jxe," \u2014 "),lV=n(jxe,"A",{href:!0});var Tgt=s(lV);GGo=r(Tgt,"RobertaForTokenClassification"),Tgt.forEach(t),OGo=r(jxe," (RoBERTa model)"),jxe.forEach(t),VGo=i(J),J2=n(J,"LI",{});var Dxe=s(J2);nhe=n(Dxe,"STRONG",{});var Mgt=s(nhe);XGo=r(Mgt,"roformer"),Mgt.forEach(t),zGo=r(Dxe," \u2014 "),iV=n(Dxe,"A",{href:!0});var Egt=s(iV);WGo=r(Egt,"RoFormerForTokenClassification"),Egt.forEach(t),QGo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),HGo=i(J),Y2=n(J,"LI",{});var Gxe=s(Y2);she=n(Gxe,"STRONG",{});var Cgt=s(she);UGo=r(Cgt,"squeezebert"),Cgt.forEach(t),JGo=r(Gxe," \u2014 "),dV=n(Gxe,"A",{href:!0});var wgt=s(dV);YGo=r(wgt,"SqueezeBertForTokenClassification"),wgt.forEach(t),KGo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),ZGo=i(J),K2=n(J,"LI",{});var Oxe=s(K2);lhe=n(Oxe,"STRONG",{});var Agt=s(lhe);eOo=r(Agt,"xlm"),Agt.forEach(t),oOo=r(Oxe," \u2014 "),cV=n(Oxe,"A",{href:!0});var ygt=s(cV);rOo=r(ygt,"XLMForTokenClassification"),ygt.forEach(t),tOo=r(Oxe," (XLM model)"),Oxe.forEach(t),aOo=i(J),Z2=n(J,"LI",{});var Vxe=s(Z2);ihe=n(Vxe,"STRONG",{});var Lgt=s(ihe);nOo=r(Lgt,"xlm-roberta"),Lgt.forEach(t),sOo=r(Vxe," \u2014 "),fV=n(Vxe,"A",{href:!0});var xgt=s(fV);lOo=r(xgt,"XLMRobertaForTokenClassification"),xgt.forEach(t),iOo=r(Vxe," (XLM-RoBERTa model)"),Vxe.forEach(t),dOo=i(J),ev=n(J,"LI",{});var Xxe=s(ev);dhe=n(Xxe,"STRONG",{});var $gt=s(dhe);cOo=r($gt,"xlm-roberta-xl"),$gt.forEach(t),fOo=r(Xxe," \u2014 "),mV=n(Xxe,"A",{href:!0});var kgt=s(mV);mOo=r(kgt,"XLMRobertaXLForTokenClassification"),kgt.forEach(t),gOo=r(Xxe," (XLM-RoBERTa-XL model)"),Xxe.forEach(t),hOo=i(J),ov=n(J,"LI",{});var zxe=s(ov);che=n(zxe,"STRONG",{});var Sgt=s(che);pOo=r(Sgt,"xlnet"),Sgt.forEach(t),uOo=r(zxe," \u2014 "),gV=n(zxe,"A",{href:!0});var Rgt=s(gV);_Oo=r(Rgt,"XLNetForTokenClassification"),Rgt.forEach(t),bOo=r(zxe," (XLNet model)"),zxe.forEach(t),vOo=i(J),rv=n(J,"LI",{});var Wxe=s(rv);fhe=n(Wxe,"STRONG",{});var Pgt=s(fhe);FOo=r(Pgt,"yoso"),Pgt.forEach(t),TOo=r(Wxe," \u2014 "),hV=n(Wxe,"A",{href:!0});var Bgt=s(hV);MOo=r(Bgt,"YosoForTokenClassification"),Bgt.forEach(t),EOo=r(Wxe," (YOSO model)"),Wxe.forEach(t),J.forEach(t),COo=i(da),tv=n(da,"P",{});var Qxe=s(tv);wOo=r(Qxe,"The model is set in evaluation mode by default using "),mhe=n(Qxe,"CODE",{});var Igt=s(mhe);AOo=r(Igt,"model.eval()"),Igt.forEach(t),yOo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(Qxe,"CODE",{});var qgt=s(ghe);LOo=r(qgt,"model.train()"),qgt.forEach(t),Qxe.forEach(t),xOo=i(da),T(av.$$.fragment,da),da.forEach(t),Js.forEach(t),dNe=i(f),Ki=n(f,"H2",{class:!0});var gDe=s(Ki);nv=n(gDe,"A",{id:!0,class:!0,href:!0});var Ngt=s(nv);hhe=n(Ngt,"SPAN",{});var jgt=s(hhe);T(jy.$$.fragment,jgt),jgt.forEach(t),Ngt.forEach(t),$Oo=i(gDe),phe=n(gDe,"SPAN",{});var Dgt=s(phe);kOo=r(Dgt,"AutoModelForQuestionAnswering"),Dgt.forEach(t),gDe.forEach(t),cNe=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(Dy.$$.fragment,Ys),SOo=i(Ys),Zi=n(Ys,"P",{});var EZ=s(Zi);ROo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pV=n(EZ,"A",{href:!0});var Ggt=s(pV);POo=r(Ggt,"from_pretrained()"),Ggt.forEach(t),BOo=r(EZ," class method or the "),uV=n(EZ,"A",{href:!0});var Ogt=s(uV);IOo=r(Ogt,"from_config()"),Ogt.forEach(t),qOo=r(EZ,` class
method.`),EZ.forEach(t),NOo=i(Ys),Gy=n(Ys,"P",{});var hDe=s(Gy);jOo=r(hDe,"This class cannot be instantiated directly using "),uhe=n(hDe,"CODE",{});var Vgt=s(uhe);DOo=r(Vgt,"__init__()"),Vgt.forEach(t),GOo=r(hDe," (throws an error)."),hDe.forEach(t),OOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var X3=s(mt);T(Oy.$$.fragment,X3),VOo=i(X3),_he=n(X3,"P",{});var Xgt=s(_he);XOo=r(Xgt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xgt.forEach(t),zOo=i(X3),ed=n(X3,"P",{});var CZ=s(ed);WOo=r(CZ,`Note:
Loading a model from its configuration file does `),bhe=n(CZ,"STRONG",{});var zgt=s(bhe);QOo=r(zgt,"not"),zgt.forEach(t),HOo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(CZ,"A",{href:!0});var Wgt=s(_V);UOo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),JOo=r(CZ," to load the model weights."),CZ.forEach(t),YOo=i(X3),T(sv.$$.fragment,X3),X3.forEach(t),KOo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Vy.$$.fragment,ca),ZOo=i(ca),vhe=n(ca,"P",{});var Qgt=s(vhe);eVo=r(Qgt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qgt.forEach(t),oVo=i(ca),qa=n(ca,"P",{});var z3=s(qa);rVo=r(z3,"The model class to instantiate is selected based on the "),Fhe=n(z3,"CODE",{});var Hgt=s(Fhe);tVo=r(Hgt,"model_type"),Hgt.forEach(t),aVo=r(z3,` property of the config object (either
passed as an argument or loaded from `),The=n(z3,"CODE",{});var Ugt=s(The);nVo=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),sVo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(z3,"CODE",{});var Jgt=s(Mhe);lVo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),iVo=r(z3,":"),z3.forEach(t),dVo=i(ca),V=n(ca,"UL",{});var X=s(V);lv=n(X,"LI",{});var Hxe=s(lv);Ehe=n(Hxe,"STRONG",{});var Ygt=s(Ehe);cVo=r(Ygt,"albert"),Ygt.forEach(t),fVo=r(Hxe," \u2014 "),bV=n(Hxe,"A",{href:!0});var Kgt=s(bV);mVo=r(Kgt,"AlbertForQuestionAnswering"),Kgt.forEach(t),gVo=r(Hxe," (ALBERT model)"),Hxe.forEach(t),hVo=i(X),iv=n(X,"LI",{});var Uxe=s(iv);Che=n(Uxe,"STRONG",{});var Zgt=s(Che);pVo=r(Zgt,"bart"),Zgt.forEach(t),uVo=r(Uxe," \u2014 "),vV=n(Uxe,"A",{href:!0});var eht=s(vV);_Vo=r(eht,"BartForQuestionAnswering"),eht.forEach(t),bVo=r(Uxe," (BART model)"),Uxe.forEach(t),vVo=i(X),dv=n(X,"LI",{});var Jxe=s(dv);whe=n(Jxe,"STRONG",{});var oht=s(whe);FVo=r(oht,"bert"),oht.forEach(t),TVo=r(Jxe," \u2014 "),FV=n(Jxe,"A",{href:!0});var rht=s(FV);MVo=r(rht,"BertForQuestionAnswering"),rht.forEach(t),EVo=r(Jxe," (BERT model)"),Jxe.forEach(t),CVo=i(X),cv=n(X,"LI",{});var Yxe=s(cv);Ahe=n(Yxe,"STRONG",{});var tht=s(Ahe);wVo=r(tht,"big_bird"),tht.forEach(t),AVo=r(Yxe," \u2014 "),TV=n(Yxe,"A",{href:!0});var aht=s(TV);yVo=r(aht,"BigBirdForQuestionAnswering"),aht.forEach(t),LVo=r(Yxe," (BigBird model)"),Yxe.forEach(t),xVo=i(X),fv=n(X,"LI",{});var Kxe=s(fv);yhe=n(Kxe,"STRONG",{});var nht=s(yhe);$Vo=r(nht,"bigbird_pegasus"),nht.forEach(t),kVo=r(Kxe," \u2014 "),MV=n(Kxe,"A",{href:!0});var sht=s(MV);SVo=r(sht,"BigBirdPegasusForQuestionAnswering"),sht.forEach(t),RVo=r(Kxe," (BigBirdPegasus model)"),Kxe.forEach(t),PVo=i(X),mv=n(X,"LI",{});var Zxe=s(mv);Lhe=n(Zxe,"STRONG",{});var lht=s(Lhe);BVo=r(lht,"camembert"),lht.forEach(t),IVo=r(Zxe," \u2014 "),EV=n(Zxe,"A",{href:!0});var iht=s(EV);qVo=r(iht,"CamembertForQuestionAnswering"),iht.forEach(t),NVo=r(Zxe," (CamemBERT model)"),Zxe.forEach(t),jVo=i(X),gv=n(X,"LI",{});var e$e=s(gv);xhe=n(e$e,"STRONG",{});var dht=s(xhe);DVo=r(dht,"canine"),dht.forEach(t),GVo=r(e$e," \u2014 "),CV=n(e$e,"A",{href:!0});var cht=s(CV);OVo=r(cht,"CanineForQuestionAnswering"),cht.forEach(t),VVo=r(e$e," (Canine model)"),e$e.forEach(t),XVo=i(X),hv=n(X,"LI",{});var o$e=s(hv);$he=n(o$e,"STRONG",{});var fht=s($he);zVo=r(fht,"convbert"),fht.forEach(t),WVo=r(o$e," \u2014 "),wV=n(o$e,"A",{href:!0});var mht=s(wV);QVo=r(mht,"ConvBertForQuestionAnswering"),mht.forEach(t),HVo=r(o$e," (ConvBERT model)"),o$e.forEach(t),UVo=i(X),pv=n(X,"LI",{});var r$e=s(pv);khe=n(r$e,"STRONG",{});var ght=s(khe);JVo=r(ght,"data2vec-text"),ght.forEach(t),YVo=r(r$e," \u2014 "),AV=n(r$e,"A",{href:!0});var hht=s(AV);KVo=r(hht,"Data2VecTextForQuestionAnswering"),hht.forEach(t),ZVo=r(r$e," (Data2VecText model)"),r$e.forEach(t),eXo=i(X),uv=n(X,"LI",{});var t$e=s(uv);She=n(t$e,"STRONG",{});var pht=s(She);oXo=r(pht,"deberta"),pht.forEach(t),rXo=r(t$e," \u2014 "),yV=n(t$e,"A",{href:!0});var uht=s(yV);tXo=r(uht,"DebertaForQuestionAnswering"),uht.forEach(t),aXo=r(t$e," (DeBERTa model)"),t$e.forEach(t),nXo=i(X),_v=n(X,"LI",{});var a$e=s(_v);Rhe=n(a$e,"STRONG",{});var _ht=s(Rhe);sXo=r(_ht,"deberta-v2"),_ht.forEach(t),lXo=r(a$e," \u2014 "),LV=n(a$e,"A",{href:!0});var bht=s(LV);iXo=r(bht,"DebertaV2ForQuestionAnswering"),bht.forEach(t),dXo=r(a$e," (DeBERTa-v2 model)"),a$e.forEach(t),cXo=i(X),bv=n(X,"LI",{});var n$e=s(bv);Phe=n(n$e,"STRONG",{});var vht=s(Phe);fXo=r(vht,"distilbert"),vht.forEach(t),mXo=r(n$e," \u2014 "),xV=n(n$e,"A",{href:!0});var Fht=s(xV);gXo=r(Fht,"DistilBertForQuestionAnswering"),Fht.forEach(t),hXo=r(n$e," (DistilBERT model)"),n$e.forEach(t),pXo=i(X),vv=n(X,"LI",{});var s$e=s(vv);Bhe=n(s$e,"STRONG",{});var Tht=s(Bhe);uXo=r(Tht,"electra"),Tht.forEach(t),_Xo=r(s$e," \u2014 "),$V=n(s$e,"A",{href:!0});var Mht=s($V);bXo=r(Mht,"ElectraForQuestionAnswering"),Mht.forEach(t),vXo=r(s$e," (ELECTRA model)"),s$e.forEach(t),FXo=i(X),Fv=n(X,"LI",{});var l$e=s(Fv);Ihe=n(l$e,"STRONG",{});var Eht=s(Ihe);TXo=r(Eht,"flaubert"),Eht.forEach(t),MXo=r(l$e," \u2014 "),kV=n(l$e,"A",{href:!0});var Cht=s(kV);EXo=r(Cht,"FlaubertForQuestionAnsweringSimple"),Cht.forEach(t),CXo=r(l$e," (FlauBERT model)"),l$e.forEach(t),wXo=i(X),Tv=n(X,"LI",{});var i$e=s(Tv);qhe=n(i$e,"STRONG",{});var wht=s(qhe);AXo=r(wht,"fnet"),wht.forEach(t),yXo=r(i$e," \u2014 "),SV=n(i$e,"A",{href:!0});var Aht=s(SV);LXo=r(Aht,"FNetForQuestionAnswering"),Aht.forEach(t),xXo=r(i$e," (FNet model)"),i$e.forEach(t),$Xo=i(X),Mv=n(X,"LI",{});var d$e=s(Mv);Nhe=n(d$e,"STRONG",{});var yht=s(Nhe);kXo=r(yht,"funnel"),yht.forEach(t),SXo=r(d$e," \u2014 "),RV=n(d$e,"A",{href:!0});var Lht=s(RV);RXo=r(Lht,"FunnelForQuestionAnswering"),Lht.forEach(t),PXo=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),BXo=i(X),Ev=n(X,"LI",{});var c$e=s(Ev);jhe=n(c$e,"STRONG",{});var xht=s(jhe);IXo=r(xht,"gptj"),xht.forEach(t),qXo=r(c$e," \u2014 "),PV=n(c$e,"A",{href:!0});var $ht=s(PV);NXo=r($ht,"GPTJForQuestionAnswering"),$ht.forEach(t),jXo=r(c$e," (GPT-J model)"),c$e.forEach(t),DXo=i(X),Cv=n(X,"LI",{});var f$e=s(Cv);Dhe=n(f$e,"STRONG",{});var kht=s(Dhe);GXo=r(kht,"ibert"),kht.forEach(t),OXo=r(f$e," \u2014 "),BV=n(f$e,"A",{href:!0});var Sht=s(BV);VXo=r(Sht,"IBertForQuestionAnswering"),Sht.forEach(t),XXo=r(f$e," (I-BERT model)"),f$e.forEach(t),zXo=i(X),wv=n(X,"LI",{});var m$e=s(wv);Ghe=n(m$e,"STRONG",{});var Rht=s(Ghe);WXo=r(Rht,"layoutlmv2"),Rht.forEach(t),QXo=r(m$e," \u2014 "),IV=n(m$e,"A",{href:!0});var Pht=s(IV);HXo=r(Pht,"LayoutLMv2ForQuestionAnswering"),Pht.forEach(t),UXo=r(m$e," (LayoutLMv2 model)"),m$e.forEach(t),JXo=i(X),Av=n(X,"LI",{});var g$e=s(Av);Ohe=n(g$e,"STRONG",{});var Bht=s(Ohe);YXo=r(Bht,"layoutlmv3"),Bht.forEach(t),KXo=r(g$e," \u2014 "),qV=n(g$e,"A",{href:!0});var Iht=s(qV);ZXo=r(Iht,"LayoutLMv3ForQuestionAnswering"),Iht.forEach(t),ezo=r(g$e," (LayoutLMv3 model)"),g$e.forEach(t),ozo=i(X),yv=n(X,"LI",{});var h$e=s(yv);Vhe=n(h$e,"STRONG",{});var qht=s(Vhe);rzo=r(qht,"led"),qht.forEach(t),tzo=r(h$e," \u2014 "),NV=n(h$e,"A",{href:!0});var Nht=s(NV);azo=r(Nht,"LEDForQuestionAnswering"),Nht.forEach(t),nzo=r(h$e," (LED model)"),h$e.forEach(t),szo=i(X),Lv=n(X,"LI",{});var p$e=s(Lv);Xhe=n(p$e,"STRONG",{});var jht=s(Xhe);lzo=r(jht,"longformer"),jht.forEach(t),izo=r(p$e," \u2014 "),jV=n(p$e,"A",{href:!0});var Dht=s(jV);dzo=r(Dht,"LongformerForQuestionAnswering"),Dht.forEach(t),czo=r(p$e," (Longformer model)"),p$e.forEach(t),fzo=i(X),xv=n(X,"LI",{});var u$e=s(xv);zhe=n(u$e,"STRONG",{});var Ght=s(zhe);mzo=r(Ght,"lxmert"),Ght.forEach(t),gzo=r(u$e," \u2014 "),DV=n(u$e,"A",{href:!0});var Oht=s(DV);hzo=r(Oht,"LxmertForQuestionAnswering"),Oht.forEach(t),pzo=r(u$e," (LXMERT model)"),u$e.forEach(t),uzo=i(X),$v=n(X,"LI",{});var _$e=s($v);Whe=n(_$e,"STRONG",{});var Vht=s(Whe);_zo=r(Vht,"mbart"),Vht.forEach(t),bzo=r(_$e," \u2014 "),GV=n(_$e,"A",{href:!0});var Xht=s(GV);vzo=r(Xht,"MBartForQuestionAnswering"),Xht.forEach(t),Fzo=r(_$e," (mBART model)"),_$e.forEach(t),Tzo=i(X),kv=n(X,"LI",{});var b$e=s(kv);Qhe=n(b$e,"STRONG",{});var zht=s(Qhe);Mzo=r(zht,"megatron-bert"),zht.forEach(t),Ezo=r(b$e," \u2014 "),OV=n(b$e,"A",{href:!0});var Wht=s(OV);Czo=r(Wht,"MegatronBertForQuestionAnswering"),Wht.forEach(t),wzo=r(b$e," (MegatronBert model)"),b$e.forEach(t),Azo=i(X),Sv=n(X,"LI",{});var v$e=s(Sv);Hhe=n(v$e,"STRONG",{});var Qht=s(Hhe);yzo=r(Qht,"mobilebert"),Qht.forEach(t),Lzo=r(v$e," \u2014 "),VV=n(v$e,"A",{href:!0});var Hht=s(VV);xzo=r(Hht,"MobileBertForQuestionAnswering"),Hht.forEach(t),$zo=r(v$e," (MobileBERT model)"),v$e.forEach(t),kzo=i(X),Rv=n(X,"LI",{});var F$e=s(Rv);Uhe=n(F$e,"STRONG",{});var Uht=s(Uhe);Szo=r(Uht,"mpnet"),Uht.forEach(t),Rzo=r(F$e," \u2014 "),XV=n(F$e,"A",{href:!0});var Jht=s(XV);Pzo=r(Jht,"MPNetForQuestionAnswering"),Jht.forEach(t),Bzo=r(F$e," (MPNet model)"),F$e.forEach(t),Izo=i(X),Pv=n(X,"LI",{});var T$e=s(Pv);Jhe=n(T$e,"STRONG",{});var Yht=s(Jhe);qzo=r(Yht,"nystromformer"),Yht.forEach(t),Nzo=r(T$e," \u2014 "),zV=n(T$e,"A",{href:!0});var Kht=s(zV);jzo=r(Kht,"NystromformerForQuestionAnswering"),Kht.forEach(t),Dzo=r(T$e," (Nystromformer model)"),T$e.forEach(t),Gzo=i(X),Bv=n(X,"LI",{});var M$e=s(Bv);Yhe=n(M$e,"STRONG",{});var Zht=s(Yhe);Ozo=r(Zht,"qdqbert"),Zht.forEach(t),Vzo=r(M$e," \u2014 "),WV=n(M$e,"A",{href:!0});var ept=s(WV);Xzo=r(ept,"QDQBertForQuestionAnswering"),ept.forEach(t),zzo=r(M$e," (QDQBert model)"),M$e.forEach(t),Wzo=i(X),Iv=n(X,"LI",{});var E$e=s(Iv);Khe=n(E$e,"STRONG",{});var opt=s(Khe);Qzo=r(opt,"reformer"),opt.forEach(t),Hzo=r(E$e," \u2014 "),QV=n(E$e,"A",{href:!0});var rpt=s(QV);Uzo=r(rpt,"ReformerForQuestionAnswering"),rpt.forEach(t),Jzo=r(E$e," (Reformer model)"),E$e.forEach(t),Yzo=i(X),qv=n(X,"LI",{});var C$e=s(qv);Zhe=n(C$e,"STRONG",{});var tpt=s(Zhe);Kzo=r(tpt,"rembert"),tpt.forEach(t),Zzo=r(C$e," \u2014 "),HV=n(C$e,"A",{href:!0});var apt=s(HV);eWo=r(apt,"RemBertForQuestionAnswering"),apt.forEach(t),oWo=r(C$e," (RemBERT model)"),C$e.forEach(t),rWo=i(X),Nv=n(X,"LI",{});var w$e=s(Nv);epe=n(w$e,"STRONG",{});var npt=s(epe);tWo=r(npt,"roberta"),npt.forEach(t),aWo=r(w$e," \u2014 "),UV=n(w$e,"A",{href:!0});var spt=s(UV);nWo=r(spt,"RobertaForQuestionAnswering"),spt.forEach(t),sWo=r(w$e," (RoBERTa model)"),w$e.forEach(t),lWo=i(X),jv=n(X,"LI",{});var A$e=s(jv);ope=n(A$e,"STRONG",{});var lpt=s(ope);iWo=r(lpt,"roformer"),lpt.forEach(t),dWo=r(A$e," \u2014 "),JV=n(A$e,"A",{href:!0});var ipt=s(JV);cWo=r(ipt,"RoFormerForQuestionAnswering"),ipt.forEach(t),fWo=r(A$e," (RoFormer model)"),A$e.forEach(t),mWo=i(X),Dv=n(X,"LI",{});var y$e=s(Dv);rpe=n(y$e,"STRONG",{});var dpt=s(rpe);gWo=r(dpt,"splinter"),dpt.forEach(t),hWo=r(y$e," \u2014 "),YV=n(y$e,"A",{href:!0});var cpt=s(YV);pWo=r(cpt,"SplinterForQuestionAnswering"),cpt.forEach(t),uWo=r(y$e," (Splinter model)"),y$e.forEach(t),_Wo=i(X),Gv=n(X,"LI",{});var L$e=s(Gv);tpe=n(L$e,"STRONG",{});var fpt=s(tpe);bWo=r(fpt,"squeezebert"),fpt.forEach(t),vWo=r(L$e," \u2014 "),KV=n(L$e,"A",{href:!0});var mpt=s(KV);FWo=r(mpt,"SqueezeBertForQuestionAnswering"),mpt.forEach(t),TWo=r(L$e," (SqueezeBERT model)"),L$e.forEach(t),MWo=i(X),Ov=n(X,"LI",{});var x$e=s(Ov);ape=n(x$e,"STRONG",{});var gpt=s(ape);EWo=r(gpt,"xlm"),gpt.forEach(t),CWo=r(x$e," \u2014 "),ZV=n(x$e,"A",{href:!0});var hpt=s(ZV);wWo=r(hpt,"XLMForQuestionAnsweringSimple"),hpt.forEach(t),AWo=r(x$e," (XLM model)"),x$e.forEach(t),yWo=i(X),Vv=n(X,"LI",{});var $$e=s(Vv);npe=n($$e,"STRONG",{});var ppt=s(npe);LWo=r(ppt,"xlm-roberta"),ppt.forEach(t),xWo=r($$e," \u2014 "),eX=n($$e,"A",{href:!0});var upt=s(eX);$Wo=r(upt,"XLMRobertaForQuestionAnswering"),upt.forEach(t),kWo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),SWo=i(X),Xv=n(X,"LI",{});var k$e=s(Xv);spe=n(k$e,"STRONG",{});var _pt=s(spe);RWo=r(_pt,"xlm-roberta-xl"),_pt.forEach(t),PWo=r(k$e," \u2014 "),oX=n(k$e,"A",{href:!0});var bpt=s(oX);BWo=r(bpt,"XLMRobertaXLForQuestionAnswering"),bpt.forEach(t),IWo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),qWo=i(X),zv=n(X,"LI",{});var S$e=s(zv);lpe=n(S$e,"STRONG",{});var vpt=s(lpe);NWo=r(vpt,"xlnet"),vpt.forEach(t),jWo=r(S$e," \u2014 "),rX=n(S$e,"A",{href:!0});var Fpt=s(rX);DWo=r(Fpt,"XLNetForQuestionAnsweringSimple"),Fpt.forEach(t),GWo=r(S$e," (XLNet model)"),S$e.forEach(t),OWo=i(X),Wv=n(X,"LI",{});var R$e=s(Wv);ipe=n(R$e,"STRONG",{});var Tpt=s(ipe);VWo=r(Tpt,"yoso"),Tpt.forEach(t),XWo=r(R$e," \u2014 "),tX=n(R$e,"A",{href:!0});var Mpt=s(tX);zWo=r(Mpt,"YosoForQuestionAnswering"),Mpt.forEach(t),WWo=r(R$e," (YOSO model)"),R$e.forEach(t),X.forEach(t),QWo=i(ca),Qv=n(ca,"P",{});var P$e=s(Qv);HWo=r(P$e,"The model is set in evaluation mode by default using "),dpe=n(P$e,"CODE",{});var Ept=s(dpe);UWo=r(Ept,"model.eval()"),Ept.forEach(t),JWo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(P$e,"CODE",{});var Cpt=s(cpe);YWo=r(Cpt,"model.train()"),Cpt.forEach(t),P$e.forEach(t),KWo=i(ca),T(Hv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),fNe=i(f),od=n(f,"H2",{class:!0});var pDe=s(od);Uv=n(pDe,"A",{id:!0,class:!0,href:!0});var wpt=s(Uv);fpe=n(wpt,"SPAN",{});var Apt=s(fpe);T(Xy.$$.fragment,Apt),Apt.forEach(t),wpt.forEach(t),ZWo=i(pDe),mpe=n(pDe,"SPAN",{});var ypt=s(mpe);eQo=r(ypt,"AutoModelForTableQuestionAnswering"),ypt.forEach(t),pDe.forEach(t),mNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(zy.$$.fragment,Ks),oQo=i(Ks),rd=n(Ks,"P",{});var wZ=s(rd);rQo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aX=n(wZ,"A",{href:!0});var Lpt=s(aX);tQo=r(Lpt,"from_pretrained()"),Lpt.forEach(t),aQo=r(wZ," class method or the "),nX=n(wZ,"A",{href:!0});var xpt=s(nX);nQo=r(xpt,"from_config()"),xpt.forEach(t),sQo=r(wZ,` class
method.`),wZ.forEach(t),lQo=i(Ks),Wy=n(Ks,"P",{});var uDe=s(Wy);iQo=r(uDe,"This class cannot be instantiated directly using "),gpe=n(uDe,"CODE",{});var $pt=s(gpe);dQo=r($pt,"__init__()"),$pt.forEach(t),cQo=r(uDe," (throws an error)."),uDe.forEach(t),fQo=i(Ks),gt=n(Ks,"DIV",{class:!0});var W3=s(gt);T(Qy.$$.fragment,W3),mQo=i(W3),hpe=n(W3,"P",{});var kpt=s(hpe);gQo=r(kpt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kpt.forEach(t),hQo=i(W3),td=n(W3,"P",{});var AZ=s(td);pQo=r(AZ,`Note:
Loading a model from its configuration file does `),ppe=n(AZ,"STRONG",{});var Spt=s(ppe);uQo=r(Spt,"not"),Spt.forEach(t),_Qo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(AZ,"A",{href:!0});var Rpt=s(sX);bQo=r(Rpt,"from_pretrained()"),Rpt.forEach(t),vQo=r(AZ," to load the model weights."),AZ.forEach(t),FQo=i(W3),T(Jv.$$.fragment,W3),W3.forEach(t),TQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Hy.$$.fragment,fa),MQo=i(fa),upe=n(fa,"P",{});var Ppt=s(upe);EQo=r(Ppt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ppt.forEach(t),CQo=i(fa),Na=n(fa,"P",{});var Q3=s(Na);wQo=r(Q3,"The model class to instantiate is selected based on the "),_pe=n(Q3,"CODE",{});var Bpt=s(_pe);AQo=r(Bpt,"model_type"),Bpt.forEach(t),yQo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),bpe=n(Q3,"CODE",{});var Ipt=s(bpe);LQo=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),xQo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(Q3,"CODE",{});var qpt=s(vpe);$Qo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),kQo=r(Q3,":"),Q3.forEach(t),SQo=i(fa),Fpe=n(fa,"UL",{});var Npt=s(Fpe);Yv=n(Npt,"LI",{});var B$e=s(Yv);Tpe=n(B$e,"STRONG",{});var jpt=s(Tpe);RQo=r(jpt,"tapas"),jpt.forEach(t),PQo=r(B$e," \u2014 "),lX=n(B$e,"A",{href:!0});var Dpt=s(lX);BQo=r(Dpt,"TapasForQuestionAnswering"),Dpt.forEach(t),IQo=r(B$e," (TAPAS model)"),B$e.forEach(t),Npt.forEach(t),qQo=i(fa),Kv=n(fa,"P",{});var I$e=s(Kv);NQo=r(I$e,"The model is set in evaluation mode by default using "),Mpe=n(I$e,"CODE",{});var Gpt=s(Mpe);jQo=r(Gpt,"model.eval()"),Gpt.forEach(t),DQo=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=n(I$e,"CODE",{});var Opt=s(Epe);GQo=r(Opt,"model.train()"),Opt.forEach(t),I$e.forEach(t),OQo=i(fa),T(Zv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),gNe=i(f),ad=n(f,"H2",{class:!0});var _De=s(ad);eF=n(_De,"A",{id:!0,class:!0,href:!0});var Vpt=s(eF);Cpe=n(Vpt,"SPAN",{});var Xpt=s(Cpe);T(Uy.$$.fragment,Xpt),Xpt.forEach(t),Vpt.forEach(t),VQo=i(_De),wpe=n(_De,"SPAN",{});var zpt=s(wpe);XQo=r(zpt,"AutoModelForImageClassification"),zpt.forEach(t),_De.forEach(t),hNe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(Jy.$$.fragment,Zs),zQo=i(Zs),nd=n(Zs,"P",{});var yZ=s(nd);WQo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=n(yZ,"A",{href:!0});var Wpt=s(iX);QQo=r(Wpt,"from_pretrained()"),Wpt.forEach(t),HQo=r(yZ," class method or the "),dX=n(yZ,"A",{href:!0});var Qpt=s(dX);UQo=r(Qpt,"from_config()"),Qpt.forEach(t),JQo=r(yZ,` class
method.`),yZ.forEach(t),YQo=i(Zs),Yy=n(Zs,"P",{});var bDe=s(Yy);KQo=r(bDe,"This class cannot be instantiated directly using "),Ape=n(bDe,"CODE",{});var Hpt=s(Ape);ZQo=r(Hpt,"__init__()"),Hpt.forEach(t),eHo=r(bDe," (throws an error)."),bDe.forEach(t),oHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var H3=s(ht);T(Ky.$$.fragment,H3),rHo=i(H3),ype=n(H3,"P",{});var Upt=s(ype);tHo=r(Upt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Upt.forEach(t),aHo=i(H3),sd=n(H3,"P",{});var LZ=s(sd);nHo=r(LZ,`Note:
Loading a model from its configuration file does `),Lpe=n(LZ,"STRONG",{});var Jpt=s(Lpe);sHo=r(Jpt,"not"),Jpt.forEach(t),lHo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(LZ,"A",{href:!0});var Ypt=s(cX);iHo=r(Ypt,"from_pretrained()"),Ypt.forEach(t),dHo=r(LZ," to load the model weights."),LZ.forEach(t),cHo=i(H3),T(oF.$$.fragment,H3),H3.forEach(t),fHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Zy.$$.fragment,ma),mHo=i(ma),xpe=n(ma,"P",{});var Kpt=s(xpe);gHo=r(Kpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kpt.forEach(t),hHo=i(ma),ja=n(ma,"P",{});var U3=s(ja);pHo=r(U3,"The model class to instantiate is selected based on the "),$pe=n(U3,"CODE",{});var Zpt=s($pe);uHo=r(Zpt,"model_type"),Zpt.forEach(t),_Ho=r(U3,` property of the config object (either
passed as an argument or loaded from `),kpe=n(U3,"CODE",{});var eut=s(kpe);bHo=r(eut,"pretrained_model_name_or_path"),eut.forEach(t),vHo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=n(U3,"CODE",{});var out=s(Spe);FHo=r(out,"pretrained_model_name_or_path"),out.forEach(t),THo=r(U3,":"),U3.forEach(t),MHo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);rF=n(Te,"LI",{});var q$e=s(rF);Rpe=n(q$e,"STRONG",{});var rut=s(Rpe);EHo=r(rut,"beit"),rut.forEach(t),CHo=r(q$e," \u2014 "),fX=n(q$e,"A",{href:!0});var tut=s(fX);wHo=r(tut,"BeitForImageClassification"),tut.forEach(t),AHo=r(q$e," (BEiT model)"),q$e.forEach(t),yHo=i(Te),tF=n(Te,"LI",{});var N$e=s(tF);Ppe=n(N$e,"STRONG",{});var aut=s(Ppe);LHo=r(aut,"convnext"),aut.forEach(t),xHo=r(N$e," \u2014 "),mX=n(N$e,"A",{href:!0});var nut=s(mX);$Ho=r(nut,"ConvNextForImageClassification"),nut.forEach(t),kHo=r(N$e," (ConvNext model)"),N$e.forEach(t),SHo=i(Te),aF=n(Te,"LI",{});var j$e=s(aF);Bpe=n(j$e,"STRONG",{});var sut=s(Bpe);RHo=r(sut,"cvt"),sut.forEach(t),PHo=r(j$e," \u2014 "),gX=n(j$e,"A",{href:!0});var lut=s(gX);BHo=r(lut,"CvtForImageClassification"),lut.forEach(t),IHo=r(j$e," (CvT model)"),j$e.forEach(t),qHo=i(Te),nF=n(Te,"LI",{});var D$e=s(nF);Ipe=n(D$e,"STRONG",{});var iut=s(Ipe);NHo=r(iut,"data2vec-vision"),iut.forEach(t),jHo=r(D$e," \u2014 "),hX=n(D$e,"A",{href:!0});var dut=s(hX);DHo=r(dut,"Data2VecVisionForImageClassification"),dut.forEach(t),GHo=r(D$e," (Data2VecVision model)"),D$e.forEach(t),OHo=i(Te),Bs=n(Te,"LI",{});var N$=s(Bs);qpe=n(N$,"STRONG",{});var cut=s(qpe);VHo=r(cut,"deit"),cut.forEach(t),XHo=r(N$," \u2014 "),pX=n(N$,"A",{href:!0});var fut=s(pX);zHo=r(fut,"DeiTForImageClassification"),fut.forEach(t),WHo=r(N$," or "),uX=n(N$,"A",{href:!0});var mut=s(uX);QHo=r(mut,"DeiTForImageClassificationWithTeacher"),mut.forEach(t),HHo=r(N$," (DeiT model)"),N$.forEach(t),UHo=i(Te),sF=n(Te,"LI",{});var G$e=s(sF);Npe=n(G$e,"STRONG",{});var gut=s(Npe);JHo=r(gut,"imagegpt"),gut.forEach(t),YHo=r(G$e," \u2014 "),_X=n(G$e,"A",{href:!0});var hut=s(_X);KHo=r(hut,"ImageGPTForImageClassification"),hut.forEach(t),ZHo=r(G$e," (ImageGPT model)"),G$e.forEach(t),eUo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);jpe=n(hf,"STRONG",{});var put=s(jpe);oUo=r(put,"perceiver"),put.forEach(t),rUo=r(hf," \u2014 "),bX=n(hf,"A",{href:!0});var uut=s(bX);tUo=r(uut,"PerceiverForImageClassificationLearned"),uut.forEach(t),aUo=r(hf," or "),vX=n(hf,"A",{href:!0});var _ut=s(vX);nUo=r(_ut,"PerceiverForImageClassificationFourier"),_ut.forEach(t),sUo=r(hf," or "),FX=n(hf,"A",{href:!0});var but=s(FX);lUo=r(but,"PerceiverForImageClassificationConvProcessing"),but.forEach(t),iUo=r(hf," (Perceiver model)"),hf.forEach(t),dUo=i(Te),lF=n(Te,"LI",{});var O$e=s(lF);Dpe=n(O$e,"STRONG",{});var vut=s(Dpe);cUo=r(vut,"poolformer"),vut.forEach(t),fUo=r(O$e," \u2014 "),TX=n(O$e,"A",{href:!0});var Fut=s(TX);mUo=r(Fut,"PoolFormerForImageClassification"),Fut.forEach(t),gUo=r(O$e," (PoolFormer model)"),O$e.forEach(t),hUo=i(Te),iF=n(Te,"LI",{});var V$e=s(iF);Gpe=n(V$e,"STRONG",{});var Tut=s(Gpe);pUo=r(Tut,"regnet"),Tut.forEach(t),uUo=r(V$e," \u2014 "),MX=n(V$e,"A",{href:!0});var Mut=s(MX);_Uo=r(Mut,"RegNetForImageClassification"),Mut.forEach(t),bUo=r(V$e," (RegNet model)"),V$e.forEach(t),vUo=i(Te),dF=n(Te,"LI",{});var X$e=s(dF);Ope=n(X$e,"STRONG",{});var Eut=s(Ope);FUo=r(Eut,"resnet"),Eut.forEach(t),TUo=r(X$e," \u2014 "),EX=n(X$e,"A",{href:!0});var Cut=s(EX);MUo=r(Cut,"ResNetForImageClassification"),Cut.forEach(t),EUo=r(X$e," (ResNet model)"),X$e.forEach(t),CUo=i(Te),cF=n(Te,"LI",{});var z$e=s(cF);Vpe=n(z$e,"STRONG",{});var wut=s(Vpe);wUo=r(wut,"segformer"),wut.forEach(t),AUo=r(z$e," \u2014 "),CX=n(z$e,"A",{href:!0});var Aut=s(CX);yUo=r(Aut,"SegformerForImageClassification"),Aut.forEach(t),LUo=r(z$e," (SegFormer model)"),z$e.forEach(t),xUo=i(Te),fF=n(Te,"LI",{});var W$e=s(fF);Xpe=n(W$e,"STRONG",{});var yut=s(Xpe);$Uo=r(yut,"swin"),yut.forEach(t),kUo=r(W$e," \u2014 "),wX=n(W$e,"A",{href:!0});var Lut=s(wX);SUo=r(Lut,"SwinForImageClassification"),Lut.forEach(t),RUo=r(W$e," (Swin model)"),W$e.forEach(t),PUo=i(Te),mF=n(Te,"LI",{});var Q$e=s(mF);zpe=n(Q$e,"STRONG",{});var xut=s(zpe);BUo=r(xut,"van"),xut.forEach(t),IUo=r(Q$e," \u2014 "),AX=n(Q$e,"A",{href:!0});var $ut=s(AX);qUo=r($ut,"VanForImageClassification"),$ut.forEach(t),NUo=r(Q$e," (VAN model)"),Q$e.forEach(t),jUo=i(Te),gF=n(Te,"LI",{});var H$e=s(gF);Wpe=n(H$e,"STRONG",{});var kut=s(Wpe);DUo=r(kut,"vit"),kut.forEach(t),GUo=r(H$e," \u2014 "),yX=n(H$e,"A",{href:!0});var Sut=s(yX);OUo=r(Sut,"ViTForImageClassification"),Sut.forEach(t),VUo=r(H$e," (ViT model)"),H$e.forEach(t),Te.forEach(t),XUo=i(ma),hF=n(ma,"P",{});var U$e=s(hF);zUo=r(U$e,"The model is set in evaluation mode by default using "),Qpe=n(U$e,"CODE",{});var Rut=s(Qpe);WUo=r(Rut,"model.eval()"),Rut.forEach(t),QUo=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(U$e,"CODE",{});var Put=s(Hpe);HUo=r(Put,"model.train()"),Put.forEach(t),U$e.forEach(t),UUo=i(ma),T(pF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),pNe=i(f),ld=n(f,"H2",{class:!0});var vDe=s(ld);uF=n(vDe,"A",{id:!0,class:!0,href:!0});var But=s(uF);Upe=n(But,"SPAN",{});var Iut=s(Upe);T(eL.$$.fragment,Iut),Iut.forEach(t),But.forEach(t),JUo=i(vDe),Jpe=n(vDe,"SPAN",{});var qut=s(Jpe);YUo=r(qut,"AutoModelForVision2Seq"),qut.forEach(t),vDe.forEach(t),uNe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(oL.$$.fragment,el),KUo=i(el),id=n(el,"P",{});var xZ=s(id);ZUo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LX=n(xZ,"A",{href:!0});var Nut=s(LX);eJo=r(Nut,"from_pretrained()"),Nut.forEach(t),oJo=r(xZ," class method or the "),xX=n(xZ,"A",{href:!0});var jut=s(xX);rJo=r(jut,"from_config()"),jut.forEach(t),tJo=r(xZ,` class
method.`),xZ.forEach(t),aJo=i(el),rL=n(el,"P",{});var FDe=s(rL);nJo=r(FDe,"This class cannot be instantiated directly using "),Ype=n(FDe,"CODE",{});var Dut=s(Ype);sJo=r(Dut,"__init__()"),Dut.forEach(t),lJo=r(FDe," (throws an error)."),FDe.forEach(t),iJo=i(el),ut=n(el,"DIV",{class:!0});var J3=s(ut);T(tL.$$.fragment,J3),dJo=i(J3),Kpe=n(J3,"P",{});var Gut=s(Kpe);cJo=r(Gut,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gut.forEach(t),fJo=i(J3),dd=n(J3,"P",{});var $Z=s(dd);mJo=r($Z,`Note:
Loading a model from its configuration file does `),Zpe=n($Z,"STRONG",{});var Out=s(Zpe);gJo=r(Out,"not"),Out.forEach(t),hJo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n($Z,"A",{href:!0});var Vut=s($X);pJo=r(Vut,"from_pretrained()"),Vut.forEach(t),uJo=r($Z," to load the model weights."),$Z.forEach(t),_Jo=i(J3),T(_F.$$.fragment,J3),J3.forEach(t),bJo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(aL.$$.fragment,ga),vJo=i(ga),eue=n(ga,"P",{});var Xut=s(eue);FJo=r(Xut,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xut.forEach(t),TJo=i(ga),Da=n(ga,"P",{});var Y3=s(Da);MJo=r(Y3,"The model class to instantiate is selected based on the "),oue=n(Y3,"CODE",{});var zut=s(oue);EJo=r(zut,"model_type"),zut.forEach(t),CJo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),rue=n(Y3,"CODE",{});var Wut=s(rue);wJo=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),AJo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(Y3,"CODE",{});var Qut=s(tue);yJo=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),LJo=r(Y3,":"),Y3.forEach(t),xJo=i(ga),aue=n(ga,"UL",{});var Hut=s(aue);bF=n(Hut,"LI",{});var J$e=s(bF);nue=n(J$e,"STRONG",{});var Uut=s(nue);$Jo=r(Uut,"vision-encoder-decoder"),Uut.forEach(t),kJo=r(J$e," \u2014 "),kX=n(J$e,"A",{href:!0});var Jut=s(kX);SJo=r(Jut,"VisionEncoderDecoderModel"),Jut.forEach(t),RJo=r(J$e," (Vision Encoder decoder model)"),J$e.forEach(t),Hut.forEach(t),PJo=i(ga),vF=n(ga,"P",{});var Y$e=s(vF);BJo=r(Y$e,"The model is set in evaluation mode by default using "),sue=n(Y$e,"CODE",{});var Yut=s(sue);IJo=r(Yut,"model.eval()"),Yut.forEach(t),qJo=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(Y$e,"CODE",{});var Kut=s(lue);NJo=r(Kut,"model.train()"),Kut.forEach(t),Y$e.forEach(t),jJo=i(ga),T(FF.$$.fragment,ga),ga.forEach(t),el.forEach(t),_Ne=i(f),cd=n(f,"H2",{class:!0});var TDe=s(cd);TF=n(TDe,"A",{id:!0,class:!0,href:!0});var Zut=s(TF);iue=n(Zut,"SPAN",{});var e_t=s(iue);T(nL.$$.fragment,e_t),e_t.forEach(t),Zut.forEach(t),DJo=i(TDe),due=n(TDe,"SPAN",{});var o_t=s(due);GJo=r(o_t,"AutoModelForAudioClassification"),o_t.forEach(t),TDe.forEach(t),bNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(sL.$$.fragment,ol),OJo=i(ol),fd=n(ol,"P",{});var kZ=s(fd);VJo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SX=n(kZ,"A",{href:!0});var r_t=s(SX);XJo=r(r_t,"from_pretrained()"),r_t.forEach(t),zJo=r(kZ," class method or the "),RX=n(kZ,"A",{href:!0});var t_t=s(RX);WJo=r(t_t,"from_config()"),t_t.forEach(t),QJo=r(kZ,` class
method.`),kZ.forEach(t),HJo=i(ol),lL=n(ol,"P",{});var MDe=s(lL);UJo=r(MDe,"This class cannot be instantiated directly using "),cue=n(MDe,"CODE",{});var a_t=s(cue);JJo=r(a_t,"__init__()"),a_t.forEach(t),YJo=r(MDe," (throws an error)."),MDe.forEach(t),KJo=i(ol),_t=n(ol,"DIV",{class:!0});var K3=s(_t);T(iL.$$.fragment,K3),ZJo=i(K3),fue=n(K3,"P",{});var n_t=s(fue);eYo=r(n_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),n_t.forEach(t),oYo=i(K3),md=n(K3,"P",{});var SZ=s(md);rYo=r(SZ,`Note:
Loading a model from its configuration file does `),mue=n(SZ,"STRONG",{});var s_t=s(mue);tYo=r(s_t,"not"),s_t.forEach(t),aYo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(SZ,"A",{href:!0});var l_t=s(PX);nYo=r(l_t,"from_pretrained()"),l_t.forEach(t),sYo=r(SZ," to load the model weights."),SZ.forEach(t),lYo=i(K3),T(MF.$$.fragment,K3),K3.forEach(t),iYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(dL.$$.fragment,ha),dYo=i(ha),gue=n(ha,"P",{});var i_t=s(gue);cYo=r(i_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),i_t.forEach(t),fYo=i(ha),Ga=n(ha,"P",{});var Z3=s(Ga);mYo=r(Z3,"The model class to instantiate is selected based on the "),hue=n(Z3,"CODE",{});var d_t=s(hue);gYo=r(d_t,"model_type"),d_t.forEach(t),hYo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),pue=n(Z3,"CODE",{});var c_t=s(pue);pYo=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),uYo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(Z3,"CODE",{});var f_t=s(uue);_Yo=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),bYo=r(Z3,":"),Z3.forEach(t),vYo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);EF=n(Oe,"LI",{});var K$e=s(EF);_ue=n(K$e,"STRONG",{});var m_t=s(_ue);FYo=r(m_t,"data2vec-audio"),m_t.forEach(t),TYo=r(K$e," \u2014 "),BX=n(K$e,"A",{href:!0});var g_t=s(BX);MYo=r(g_t,"Data2VecAudioForSequenceClassification"),g_t.forEach(t),EYo=r(K$e," (Data2VecAudio model)"),K$e.forEach(t),CYo=i(Oe),CF=n(Oe,"LI",{});var Z$e=s(CF);bue=n(Z$e,"STRONG",{});var h_t=s(bue);wYo=r(h_t,"hubert"),h_t.forEach(t),AYo=r(Z$e," \u2014 "),IX=n(Z$e,"A",{href:!0});var p_t=s(IX);yYo=r(p_t,"HubertForSequenceClassification"),p_t.forEach(t),LYo=r(Z$e," (Hubert model)"),Z$e.forEach(t),xYo=i(Oe),wF=n(Oe,"LI",{});var eke=s(wF);vue=n(eke,"STRONG",{});var u_t=s(vue);$Yo=r(u_t,"sew"),u_t.forEach(t),kYo=r(eke," \u2014 "),qX=n(eke,"A",{href:!0});var __t=s(qX);SYo=r(__t,"SEWForSequenceClassification"),__t.forEach(t),RYo=r(eke," (SEW model)"),eke.forEach(t),PYo=i(Oe),AF=n(Oe,"LI",{});var oke=s(AF);Fue=n(oke,"STRONG",{});var b_t=s(Fue);BYo=r(b_t,"sew-d"),b_t.forEach(t),IYo=r(oke," \u2014 "),NX=n(oke,"A",{href:!0});var v_t=s(NX);qYo=r(v_t,"SEWDForSequenceClassification"),v_t.forEach(t),NYo=r(oke," (SEW-D model)"),oke.forEach(t),jYo=i(Oe),yF=n(Oe,"LI",{});var rke=s(yF);Tue=n(rke,"STRONG",{});var F_t=s(Tue);DYo=r(F_t,"unispeech"),F_t.forEach(t),GYo=r(rke," \u2014 "),jX=n(rke,"A",{href:!0});var T_t=s(jX);OYo=r(T_t,"UniSpeechForSequenceClassification"),T_t.forEach(t),VYo=r(rke," (UniSpeech model)"),rke.forEach(t),XYo=i(Oe),LF=n(Oe,"LI",{});var tke=s(LF);Mue=n(tke,"STRONG",{});var M_t=s(Mue);zYo=r(M_t,"unispeech-sat"),M_t.forEach(t),WYo=r(tke," \u2014 "),DX=n(tke,"A",{href:!0});var E_t=s(DX);QYo=r(E_t,"UniSpeechSatForSequenceClassification"),E_t.forEach(t),HYo=r(tke," (UniSpeechSat model)"),tke.forEach(t),UYo=i(Oe),xF=n(Oe,"LI",{});var ake=s(xF);Eue=n(ake,"STRONG",{});var C_t=s(Eue);JYo=r(C_t,"wav2vec2"),C_t.forEach(t),YYo=r(ake," \u2014 "),GX=n(ake,"A",{href:!0});var w_t=s(GX);KYo=r(w_t,"Wav2Vec2ForSequenceClassification"),w_t.forEach(t),ZYo=r(ake," (Wav2Vec2 model)"),ake.forEach(t),eKo=i(Oe),$F=n(Oe,"LI",{});var nke=s($F);Cue=n(nke,"STRONG",{});var A_t=s(Cue);oKo=r(A_t,"wav2vec2-conformer"),A_t.forEach(t),rKo=r(nke," \u2014 "),OX=n(nke,"A",{href:!0});var y_t=s(OX);tKo=r(y_t,"Wav2Vec2ConformerForSequenceClassification"),y_t.forEach(t),aKo=r(nke," (Wav2Vec2-Conformer model)"),nke.forEach(t),nKo=i(Oe),kF=n(Oe,"LI",{});var ske=s(kF);wue=n(ske,"STRONG",{});var L_t=s(wue);sKo=r(L_t,"wavlm"),L_t.forEach(t),lKo=r(ske," \u2014 "),VX=n(ske,"A",{href:!0});var x_t=s(VX);iKo=r(x_t,"WavLMForSequenceClassification"),x_t.forEach(t),dKo=r(ske," (WavLM model)"),ske.forEach(t),Oe.forEach(t),cKo=i(ha),SF=n(ha,"P",{});var lke=s(SF);fKo=r(lke,"The model is set in evaluation mode by default using "),Aue=n(lke,"CODE",{});var $_t=s(Aue);mKo=r($_t,"model.eval()"),$_t.forEach(t),gKo=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(lke,"CODE",{});var k_t=s(yue);hKo=r(k_t,"model.train()"),k_t.forEach(t),lke.forEach(t),pKo=i(ha),T(RF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),vNe=i(f),gd=n(f,"H2",{class:!0});var EDe=s(gd);PF=n(EDe,"A",{id:!0,class:!0,href:!0});var S_t=s(PF);Lue=n(S_t,"SPAN",{});var R_t=s(Lue);T(cL.$$.fragment,R_t),R_t.forEach(t),S_t.forEach(t),uKo=i(EDe),xue=n(EDe,"SPAN",{});var P_t=s(xue);_Ko=r(P_t,"AutoModelForAudioFrameClassification"),P_t.forEach(t),EDe.forEach(t),FNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(fL.$$.fragment,rl),bKo=i(rl),hd=n(rl,"P",{});var RZ=s(hd);vKo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XX=n(RZ,"A",{href:!0});var B_t=s(XX);FKo=r(B_t,"from_pretrained()"),B_t.forEach(t),TKo=r(RZ," class method or the "),zX=n(RZ,"A",{href:!0});var I_t=s(zX);MKo=r(I_t,"from_config()"),I_t.forEach(t),EKo=r(RZ,` class
method.`),RZ.forEach(t),CKo=i(rl),mL=n(rl,"P",{});var CDe=s(mL);wKo=r(CDe,"This class cannot be instantiated directly using "),$ue=n(CDe,"CODE",{});var q_t=s($ue);AKo=r(q_t,"__init__()"),q_t.forEach(t),yKo=r(CDe," (throws an error)."),CDe.forEach(t),LKo=i(rl),bt=n(rl,"DIV",{class:!0});var ew=s(bt);T(gL.$$.fragment,ew),xKo=i(ew),kue=n(ew,"P",{});var N_t=s(kue);$Ko=r(N_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),N_t.forEach(t),kKo=i(ew),pd=n(ew,"P",{});var PZ=s(pd);SKo=r(PZ,`Note:
Loading a model from its configuration file does `),Sue=n(PZ,"STRONG",{});var j_t=s(Sue);RKo=r(j_t,"not"),j_t.forEach(t),PKo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(PZ,"A",{href:!0});var D_t=s(WX);BKo=r(D_t,"from_pretrained()"),D_t.forEach(t),IKo=r(PZ," to load the model weights."),PZ.forEach(t),qKo=i(ew),T(BF.$$.fragment,ew),ew.forEach(t),NKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(hL.$$.fragment,pa),jKo=i(pa),Rue=n(pa,"P",{});var G_t=s(Rue);DKo=r(G_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),G_t.forEach(t),GKo=i(pa),Oa=n(pa,"P",{});var ow=s(Oa);OKo=r(ow,"The model class to instantiate is selected based on the "),Pue=n(ow,"CODE",{});var O_t=s(Pue);VKo=r(O_t,"model_type"),O_t.forEach(t),XKo=r(ow,` property of the config object (either
passed as an argument or loaded from `),Bue=n(ow,"CODE",{});var V_t=s(Bue);zKo=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),WKo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(ow,"CODE",{});var X_t=s(Iue);QKo=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),HKo=r(ow,":"),ow.forEach(t),UKo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);IF=n(tl,"LI",{});var ike=s(IF);que=n(ike,"STRONG",{});var z_t=s(que);JKo=r(z_t,"data2vec-audio"),z_t.forEach(t),YKo=r(ike," \u2014 "),QX=n(ike,"A",{href:!0});var W_t=s(QX);KKo=r(W_t,"Data2VecAudioForAudioFrameClassification"),W_t.forEach(t),ZKo=r(ike," (Data2VecAudio model)"),ike.forEach(t),eZo=i(tl),qF=n(tl,"LI",{});var dke=s(qF);Nue=n(dke,"STRONG",{});var Q_t=s(Nue);oZo=r(Q_t,"unispeech-sat"),Q_t.forEach(t),rZo=r(dke," \u2014 "),HX=n(dke,"A",{href:!0});var H_t=s(HX);tZo=r(H_t,"UniSpeechSatForAudioFrameClassification"),H_t.forEach(t),aZo=r(dke," (UniSpeechSat model)"),dke.forEach(t),nZo=i(tl),NF=n(tl,"LI",{});var cke=s(NF);jue=n(cke,"STRONG",{});var U_t=s(jue);sZo=r(U_t,"wav2vec2"),U_t.forEach(t),lZo=r(cke," \u2014 "),UX=n(cke,"A",{href:!0});var J_t=s(UX);iZo=r(J_t,"Wav2Vec2ForAudioFrameClassification"),J_t.forEach(t),dZo=r(cke," (Wav2Vec2 model)"),cke.forEach(t),cZo=i(tl),jF=n(tl,"LI",{});var fke=s(jF);Due=n(fke,"STRONG",{});var Y_t=s(Due);fZo=r(Y_t,"wav2vec2-conformer"),Y_t.forEach(t),mZo=r(fke," \u2014 "),JX=n(fke,"A",{href:!0});var K_t=s(JX);gZo=r(K_t,"Wav2Vec2ConformerForAudioFrameClassification"),K_t.forEach(t),hZo=r(fke," (Wav2Vec2-Conformer model)"),fke.forEach(t),pZo=i(tl),DF=n(tl,"LI",{});var mke=s(DF);Gue=n(mke,"STRONG",{});var Z_t=s(Gue);uZo=r(Z_t,"wavlm"),Z_t.forEach(t),_Zo=r(mke," \u2014 "),YX=n(mke,"A",{href:!0});var e0t=s(YX);bZo=r(e0t,"WavLMForAudioFrameClassification"),e0t.forEach(t),vZo=r(mke," (WavLM model)"),mke.forEach(t),tl.forEach(t),FZo=i(pa),GF=n(pa,"P",{});var gke=s(GF);TZo=r(gke,"The model is set in evaluation mode by default using "),Oue=n(gke,"CODE",{});var o0t=s(Oue);MZo=r(o0t,"model.eval()"),o0t.forEach(t),EZo=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(gke,"CODE",{});var r0t=s(Vue);CZo=r(r0t,"model.train()"),r0t.forEach(t),gke.forEach(t),wZo=i(pa),T(OF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),TNe=i(f),ud=n(f,"H2",{class:!0});var wDe=s(ud);VF=n(wDe,"A",{id:!0,class:!0,href:!0});var t0t=s(VF);Xue=n(t0t,"SPAN",{});var a0t=s(Xue);T(pL.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),AZo=i(wDe),zue=n(wDe,"SPAN",{});var n0t=s(zue);yZo=r(n0t,"AutoModelForCTC"),n0t.forEach(t),wDe.forEach(t),MNe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(uL.$$.fragment,al),LZo=i(al),_d=n(al,"P",{});var BZ=s(_d);xZo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KX=n(BZ,"A",{href:!0});var s0t=s(KX);$Zo=r(s0t,"from_pretrained()"),s0t.forEach(t),kZo=r(BZ," class method or the "),ZX=n(BZ,"A",{href:!0});var l0t=s(ZX);SZo=r(l0t,"from_config()"),l0t.forEach(t),RZo=r(BZ,` class
method.`),BZ.forEach(t),PZo=i(al),_L=n(al,"P",{});var ADe=s(_L);BZo=r(ADe,"This class cannot be instantiated directly using "),Wue=n(ADe,"CODE",{});var i0t=s(Wue);IZo=r(i0t,"__init__()"),i0t.forEach(t),qZo=r(ADe," (throws an error)."),ADe.forEach(t),NZo=i(al),vt=n(al,"DIV",{class:!0});var rw=s(vt);T(bL.$$.fragment,rw),jZo=i(rw),Que=n(rw,"P",{});var d0t=s(Que);DZo=r(d0t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),d0t.forEach(t),GZo=i(rw),bd=n(rw,"P",{});var IZ=s(bd);OZo=r(IZ,`Note:
Loading a model from its configuration file does `),Hue=n(IZ,"STRONG",{});var c0t=s(Hue);VZo=r(c0t,"not"),c0t.forEach(t),XZo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(IZ,"A",{href:!0});var f0t=s(ez);zZo=r(f0t,"from_pretrained()"),f0t.forEach(t),WZo=r(IZ," to load the model weights."),IZ.forEach(t),QZo=i(rw),T(XF.$$.fragment,rw),rw.forEach(t),HZo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(vL.$$.fragment,ua),UZo=i(ua),Uue=n(ua,"P",{});var m0t=s(Uue);JZo=r(m0t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),m0t.forEach(t),YZo=i(ua),Va=n(ua,"P",{});var tw=s(Va);KZo=r(tw,"The model class to instantiate is selected based on the "),Jue=n(tw,"CODE",{});var g0t=s(Jue);ZZo=r(g0t,"model_type"),g0t.forEach(t),eer=r(tw,` property of the config object (either
passed as an argument or loaded from `),Yue=n(tw,"CODE",{});var h0t=s(Yue);oer=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),rer=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(tw,"CODE",{});var p0t=s(Kue);ter=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),aer=r(tw,":"),tw.forEach(t),ner=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);zF=n(Ve,"LI",{});var hke=s(zF);Zue=n(hke,"STRONG",{});var u0t=s(Zue);ser=r(u0t,"data2vec-audio"),u0t.forEach(t),ler=r(hke," \u2014 "),oz=n(hke,"A",{href:!0});var _0t=s(oz);ier=r(_0t,"Data2VecAudioForCTC"),_0t.forEach(t),der=r(hke," (Data2VecAudio model)"),hke.forEach(t),cer=i(Ve),WF=n(Ve,"LI",{});var pke=s(WF);e_e=n(pke,"STRONG",{});var b0t=s(e_e);fer=r(b0t,"hubert"),b0t.forEach(t),mer=r(pke," \u2014 "),rz=n(pke,"A",{href:!0});var v0t=s(rz);ger=r(v0t,"HubertForCTC"),v0t.forEach(t),her=r(pke," (Hubert model)"),pke.forEach(t),per=i(Ve),QF=n(Ve,"LI",{});var uke=s(QF);o_e=n(uke,"STRONG",{});var F0t=s(o_e);uer=r(F0t,"sew"),F0t.forEach(t),_er=r(uke," \u2014 "),tz=n(uke,"A",{href:!0});var T0t=s(tz);ber=r(T0t,"SEWForCTC"),T0t.forEach(t),ver=r(uke," (SEW model)"),uke.forEach(t),Fer=i(Ve),HF=n(Ve,"LI",{});var _ke=s(HF);r_e=n(_ke,"STRONG",{});var M0t=s(r_e);Ter=r(M0t,"sew-d"),M0t.forEach(t),Mer=r(_ke," \u2014 "),az=n(_ke,"A",{href:!0});var E0t=s(az);Eer=r(E0t,"SEWDForCTC"),E0t.forEach(t),Cer=r(_ke," (SEW-D model)"),_ke.forEach(t),wer=i(Ve),UF=n(Ve,"LI",{});var bke=s(UF);t_e=n(bke,"STRONG",{});var C0t=s(t_e);Aer=r(C0t,"unispeech"),C0t.forEach(t),yer=r(bke," \u2014 "),nz=n(bke,"A",{href:!0});var w0t=s(nz);Ler=r(w0t,"UniSpeechForCTC"),w0t.forEach(t),xer=r(bke," (UniSpeech model)"),bke.forEach(t),$er=i(Ve),JF=n(Ve,"LI",{});var vke=s(JF);a_e=n(vke,"STRONG",{});var A0t=s(a_e);ker=r(A0t,"unispeech-sat"),A0t.forEach(t),Ser=r(vke," \u2014 "),sz=n(vke,"A",{href:!0});var y0t=s(sz);Rer=r(y0t,"UniSpeechSatForCTC"),y0t.forEach(t),Per=r(vke," (UniSpeechSat model)"),vke.forEach(t),Ber=i(Ve),YF=n(Ve,"LI",{});var Fke=s(YF);n_e=n(Fke,"STRONG",{});var L0t=s(n_e);Ier=r(L0t,"wav2vec2"),L0t.forEach(t),qer=r(Fke," \u2014 "),lz=n(Fke,"A",{href:!0});var x0t=s(lz);Ner=r(x0t,"Wav2Vec2ForCTC"),x0t.forEach(t),jer=r(Fke," (Wav2Vec2 model)"),Fke.forEach(t),Der=i(Ve),KF=n(Ve,"LI",{});var Tke=s(KF);s_e=n(Tke,"STRONG",{});var $0t=s(s_e);Ger=r($0t,"wav2vec2-conformer"),$0t.forEach(t),Oer=r(Tke," \u2014 "),iz=n(Tke,"A",{href:!0});var k0t=s(iz);Ver=r(k0t,"Wav2Vec2ConformerForCTC"),k0t.forEach(t),Xer=r(Tke," (Wav2Vec2-Conformer model)"),Tke.forEach(t),zer=i(Ve),ZF=n(Ve,"LI",{});var Mke=s(ZF);l_e=n(Mke,"STRONG",{});var S0t=s(l_e);Wer=r(S0t,"wavlm"),S0t.forEach(t),Qer=r(Mke," \u2014 "),dz=n(Mke,"A",{href:!0});var R0t=s(dz);Her=r(R0t,"WavLMForCTC"),R0t.forEach(t),Uer=r(Mke," (WavLM model)"),Mke.forEach(t),Ve.forEach(t),Jer=i(ua),e6=n(ua,"P",{});var Eke=s(e6);Yer=r(Eke,"The model is set in evaluation mode by default using "),i_e=n(Eke,"CODE",{});var P0t=s(i_e);Ker=r(P0t,"model.eval()"),P0t.forEach(t),Zer=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(Eke,"CODE",{});var B0t=s(d_e);eor=r(B0t,"model.train()"),B0t.forEach(t),Eke.forEach(t),oor=i(ua),T(o6.$$.fragment,ua),ua.forEach(t),al.forEach(t),ENe=i(f),vd=n(f,"H2",{class:!0});var yDe=s(vd);r6=n(yDe,"A",{id:!0,class:!0,href:!0});var I0t=s(r6);c_e=n(I0t,"SPAN",{});var q0t=s(c_e);T(FL.$$.fragment,q0t),q0t.forEach(t),I0t.forEach(t),ror=i(yDe),f_e=n(yDe,"SPAN",{});var N0t=s(f_e);tor=r(N0t,"AutoModelForSpeechSeq2Seq"),N0t.forEach(t),yDe.forEach(t),CNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(TL.$$.fragment,nl),aor=i(nl),Fd=n(nl,"P",{});var qZ=s(Fd);nor=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cz=n(qZ,"A",{href:!0});var j0t=s(cz);sor=r(j0t,"from_pretrained()"),j0t.forEach(t),lor=r(qZ," class method or the "),fz=n(qZ,"A",{href:!0});var D0t=s(fz);ior=r(D0t,"from_config()"),D0t.forEach(t),dor=r(qZ,` class
method.`),qZ.forEach(t),cor=i(nl),ML=n(nl,"P",{});var LDe=s(ML);mor=r(LDe,"This class cannot be instantiated directly using "),m_e=n(LDe,"CODE",{});var G0t=s(m_e);gor=r(G0t,"__init__()"),G0t.forEach(t),hor=r(LDe," (throws an error)."),LDe.forEach(t),por=i(nl),Ft=n(nl,"DIV",{class:!0});var aw=s(Ft);T(EL.$$.fragment,aw),uor=i(aw),g_e=n(aw,"P",{});var O0t=s(g_e);_or=r(O0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O0t.forEach(t),bor=i(aw),Td=n(aw,"P",{});var NZ=s(Td);vor=r(NZ,`Note:
Loading a model from its configuration file does `),h_e=n(NZ,"STRONG",{});var V0t=s(h_e);For=r(V0t,"not"),V0t.forEach(t),Tor=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(NZ,"A",{href:!0});var X0t=s(mz);Mor=r(X0t,"from_pretrained()"),X0t.forEach(t),Eor=r(NZ," to load the model weights."),NZ.forEach(t),Cor=i(aw),T(t6.$$.fragment,aw),aw.forEach(t),wor=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(CL.$$.fragment,_a),Aor=i(_a),p_e=n(_a,"P",{});var z0t=s(p_e);yor=r(z0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z0t.forEach(t),Lor=i(_a),Xa=n(_a,"P",{});var nw=s(Xa);xor=r(nw,"The model class to instantiate is selected based on the "),u_e=n(nw,"CODE",{});var W0t=s(u_e);$or=r(W0t,"model_type"),W0t.forEach(t),kor=r(nw,` property of the config object (either
passed as an argument or loaded from `),__e=n(nw,"CODE",{});var Q0t=s(__e);Sor=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),Ror=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(nw,"CODE",{});var H0t=s(b_e);Por=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),Bor=r(nw,":"),nw.forEach(t),Ior=i(_a),wL=n(_a,"UL",{});var xDe=s(wL);a6=n(xDe,"LI",{});var Cke=s(a6);v_e=n(Cke,"STRONG",{});var U0t=s(v_e);qor=r(U0t,"speech-encoder-decoder"),U0t.forEach(t),Nor=r(Cke," \u2014 "),gz=n(Cke,"A",{href:!0});var J0t=s(gz);jor=r(J0t,"SpeechEncoderDecoderModel"),J0t.forEach(t),Dor=r(Cke," (Speech Encoder decoder model)"),Cke.forEach(t),Gor=i(xDe),n6=n(xDe,"LI",{});var wke=s(n6);F_e=n(wke,"STRONG",{});var Y0t=s(F_e);Oor=r(Y0t,"speech_to_text"),Y0t.forEach(t),Vor=r(wke," \u2014 "),hz=n(wke,"A",{href:!0});var K0t=s(hz);Xor=r(K0t,"Speech2TextForConditionalGeneration"),K0t.forEach(t),zor=r(wke," (Speech2Text model)"),wke.forEach(t),xDe.forEach(t),Wor=i(_a),s6=n(_a,"P",{});var Ake=s(s6);Qor=r(Ake,"The model is set in evaluation mode by default using "),T_e=n(Ake,"CODE",{});var Z0t=s(T_e);Hor=r(Z0t,"model.eval()"),Z0t.forEach(t),Uor=r(Ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(Ake,"CODE",{});var e1t=s(M_e);Jor=r(e1t,"model.train()"),e1t.forEach(t),Ake.forEach(t),Yor=i(_a),T(l6.$$.fragment,_a),_a.forEach(t),nl.forEach(t),wNe=i(f),Md=n(f,"H2",{class:!0});var $De=s(Md);i6=n($De,"A",{id:!0,class:!0,href:!0});var o1t=s(i6);E_e=n(o1t,"SPAN",{});var r1t=s(E_e);T(AL.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),Kor=i($De),C_e=n($De,"SPAN",{});var t1t=s(C_e);Zor=r(t1t,"AutoModelForAudioXVector"),t1t.forEach(t),$De.forEach(t),ANe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(yL.$$.fragment,sl),err=i(sl),Ed=n(sl,"P",{});var jZ=s(Ed);orr=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),pz=n(jZ,"A",{href:!0});var a1t=s(pz);rrr=r(a1t,"from_pretrained()"),a1t.forEach(t),trr=r(jZ," class method or the "),uz=n(jZ,"A",{href:!0});var n1t=s(uz);arr=r(n1t,"from_config()"),n1t.forEach(t),nrr=r(jZ,` class
method.`),jZ.forEach(t),srr=i(sl),LL=n(sl,"P",{});var kDe=s(LL);lrr=r(kDe,"This class cannot be instantiated directly using "),w_e=n(kDe,"CODE",{});var s1t=s(w_e);irr=r(s1t,"__init__()"),s1t.forEach(t),drr=r(kDe," (throws an error)."),kDe.forEach(t),crr=i(sl),Tt=n(sl,"DIV",{class:!0});var sw=s(Tt);T(xL.$$.fragment,sw),frr=i(sw),A_e=n(sw,"P",{});var l1t=s(A_e);mrr=r(l1t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),l1t.forEach(t),grr=i(sw),Cd=n(sw,"P",{});var DZ=s(Cd);hrr=r(DZ,`Note:
Loading a model from its configuration file does `),y_e=n(DZ,"STRONG",{});var i1t=s(y_e);prr=r(i1t,"not"),i1t.forEach(t),urr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(DZ,"A",{href:!0});var d1t=s(_z);_rr=r(d1t,"from_pretrained()"),d1t.forEach(t),brr=r(DZ," to load the model weights."),DZ.forEach(t),vrr=i(sw),T(d6.$$.fragment,sw),sw.forEach(t),Frr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T($L.$$.fragment,ba),Trr=i(ba),L_e=n(ba,"P",{});var c1t=s(L_e);Mrr=r(c1t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),c1t.forEach(t),Err=i(ba),za=n(ba,"P",{});var lw=s(za);Crr=r(lw,"The model class to instantiate is selected based on the "),x_e=n(lw,"CODE",{});var f1t=s(x_e);wrr=r(f1t,"model_type"),f1t.forEach(t),Arr=r(lw,` property of the config object (either
passed as an argument or loaded from `),$_e=n(lw,"CODE",{});var m1t=s($_e);yrr=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),Lrr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(lw,"CODE",{});var g1t=s(k_e);xrr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),$rr=r(lw,":"),lw.forEach(t),krr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);c6=n(ll,"LI",{});var yke=s(c6);S_e=n(yke,"STRONG",{});var h1t=s(S_e);Srr=r(h1t,"data2vec-audio"),h1t.forEach(t),Rrr=r(yke," \u2014 "),bz=n(yke,"A",{href:!0});var p1t=s(bz);Prr=r(p1t,"Data2VecAudioForXVector"),p1t.forEach(t),Brr=r(yke," (Data2VecAudio model)"),yke.forEach(t),Irr=i(ll),f6=n(ll,"LI",{});var Lke=s(f6);R_e=n(Lke,"STRONG",{});var u1t=s(R_e);qrr=r(u1t,"unispeech-sat"),u1t.forEach(t),Nrr=r(Lke," \u2014 "),vz=n(Lke,"A",{href:!0});var _1t=s(vz);jrr=r(_1t,"UniSpeechSatForXVector"),_1t.forEach(t),Drr=r(Lke," (UniSpeechSat model)"),Lke.forEach(t),Grr=i(ll),m6=n(ll,"LI",{});var xke=s(m6);P_e=n(xke,"STRONG",{});var b1t=s(P_e);Orr=r(b1t,"wav2vec2"),b1t.forEach(t),Vrr=r(xke," \u2014 "),Fz=n(xke,"A",{href:!0});var v1t=s(Fz);Xrr=r(v1t,"Wav2Vec2ForXVector"),v1t.forEach(t),zrr=r(xke," (Wav2Vec2 model)"),xke.forEach(t),Wrr=i(ll),g6=n(ll,"LI",{});var $ke=s(g6);B_e=n($ke,"STRONG",{});var F1t=s(B_e);Qrr=r(F1t,"wav2vec2-conformer"),F1t.forEach(t),Hrr=r($ke," \u2014 "),Tz=n($ke,"A",{href:!0});var T1t=s(Tz);Urr=r(T1t,"Wav2Vec2ConformerForXVector"),T1t.forEach(t),Jrr=r($ke," (Wav2Vec2-Conformer model)"),$ke.forEach(t),Yrr=i(ll),h6=n(ll,"LI",{});var kke=s(h6);I_e=n(kke,"STRONG",{});var M1t=s(I_e);Krr=r(M1t,"wavlm"),M1t.forEach(t),Zrr=r(kke," \u2014 "),Mz=n(kke,"A",{href:!0});var E1t=s(Mz);etr=r(E1t,"WavLMForXVector"),E1t.forEach(t),otr=r(kke," (WavLM model)"),kke.forEach(t),ll.forEach(t),rtr=i(ba),p6=n(ba,"P",{});var Ske=s(p6);ttr=r(Ske,"The model is set in evaluation mode by default using "),q_e=n(Ske,"CODE",{});var C1t=s(q_e);atr=r(C1t,"model.eval()"),C1t.forEach(t),ntr=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(Ske,"CODE",{});var w1t=s(N_e);str=r(w1t,"model.train()"),w1t.forEach(t),Ske.forEach(t),ltr=i(ba),T(u6.$$.fragment,ba),ba.forEach(t),sl.forEach(t),yNe=i(f),wd=n(f,"H2",{class:!0});var SDe=s(wd);_6=n(SDe,"A",{id:!0,class:!0,href:!0});var A1t=s(_6);j_e=n(A1t,"SPAN",{});var y1t=s(j_e);T(kL.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),itr=i(SDe),D_e=n(SDe,"SPAN",{});var L1t=s(D_e);dtr=r(L1t,"AutoModelForMaskedImageModeling"),L1t.forEach(t),SDe.forEach(t),LNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(SL.$$.fragment,il),ctr=i(il),Ad=n(il,"P",{});var GZ=s(Ad);ftr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ez=n(GZ,"A",{href:!0});var x1t=s(Ez);mtr=r(x1t,"from_pretrained()"),x1t.forEach(t),gtr=r(GZ," class method or the "),Cz=n(GZ,"A",{href:!0});var $1t=s(Cz);htr=r($1t,"from_config()"),$1t.forEach(t),ptr=r(GZ,` class
method.`),GZ.forEach(t),utr=i(il),RL=n(il,"P",{});var RDe=s(RL);_tr=r(RDe,"This class cannot be instantiated directly using "),G_e=n(RDe,"CODE",{});var k1t=s(G_e);btr=r(k1t,"__init__()"),k1t.forEach(t),vtr=r(RDe," (throws an error)."),RDe.forEach(t),Ftr=i(il),Mt=n(il,"DIV",{class:!0});var iw=s(Mt);T(PL.$$.fragment,iw),Ttr=i(iw),O_e=n(iw,"P",{});var S1t=s(O_e);Mtr=r(S1t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),S1t.forEach(t),Etr=i(iw),yd=n(iw,"P",{});var OZ=s(yd);Ctr=r(OZ,`Note:
Loading a model from its configuration file does `),V_e=n(OZ,"STRONG",{});var R1t=s(V_e);wtr=r(R1t,"not"),R1t.forEach(t),Atr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(OZ,"A",{href:!0});var P1t=s(wz);ytr=r(P1t,"from_pretrained()"),P1t.forEach(t),Ltr=r(OZ," to load the model weights."),OZ.forEach(t),xtr=i(iw),T(b6.$$.fragment,iw),iw.forEach(t),$tr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(BL.$$.fragment,va),ktr=i(va),X_e=n(va,"P",{});var B1t=s(X_e);Str=r(B1t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),B1t.forEach(t),Rtr=i(va),Wa=n(va,"P",{});var dw=s(Wa);Ptr=r(dw,"The model class to instantiate is selected based on the "),z_e=n(dw,"CODE",{});var I1t=s(z_e);Btr=r(I1t,"model_type"),I1t.forEach(t),Itr=r(dw,` property of the config object (either
passed as an argument or loaded from `),W_e=n(dw,"CODE",{});var q1t=s(W_e);qtr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),Ntr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(dw,"CODE",{});var N1t=s(Q_e);jtr=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),Dtr=r(dw,":"),dw.forEach(t),Gtr=i(va),Ld=n(va,"UL",{});var VZ=s(Ld);v6=n(VZ,"LI",{});var Rke=s(v6);H_e=n(Rke,"STRONG",{});var j1t=s(H_e);Otr=r(j1t,"deit"),j1t.forEach(t),Vtr=r(Rke," \u2014 "),Az=n(Rke,"A",{href:!0});var D1t=s(Az);Xtr=r(D1t,"DeiTForMaskedImageModeling"),D1t.forEach(t),ztr=r(Rke," (DeiT model)"),Rke.forEach(t),Wtr=i(VZ),F6=n(VZ,"LI",{});var Pke=s(F6);U_e=n(Pke,"STRONG",{});var G1t=s(U_e);Qtr=r(G1t,"swin"),G1t.forEach(t),Htr=r(Pke," \u2014 "),yz=n(Pke,"A",{href:!0});var O1t=s(yz);Utr=r(O1t,"SwinForMaskedImageModeling"),O1t.forEach(t),Jtr=r(Pke," (Swin model)"),Pke.forEach(t),Ytr=i(VZ),T6=n(VZ,"LI",{});var Bke=s(T6);J_e=n(Bke,"STRONG",{});var V1t=s(J_e);Ktr=r(V1t,"vit"),V1t.forEach(t),Ztr=r(Bke," \u2014 "),Lz=n(Bke,"A",{href:!0});var X1t=s(Lz);ear=r(X1t,"ViTForMaskedImageModeling"),X1t.forEach(t),oar=r(Bke," (ViT model)"),Bke.forEach(t),VZ.forEach(t),rar=i(va),M6=n(va,"P",{});var Ike=s(M6);tar=r(Ike,"The model is set in evaluation mode by default using "),Y_e=n(Ike,"CODE",{});var z1t=s(Y_e);aar=r(z1t,"model.eval()"),z1t.forEach(t),nar=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(Ike,"CODE",{});var W1t=s(K_e);sar=r(W1t,"model.train()"),W1t.forEach(t),Ike.forEach(t),lar=i(va),T(E6.$$.fragment,va),va.forEach(t),il.forEach(t),xNe=i(f),xd=n(f,"H2",{class:!0});var PDe=s(xd);C6=n(PDe,"A",{id:!0,class:!0,href:!0});var Q1t=s(C6);Z_e=n(Q1t,"SPAN",{});var H1t=s(Z_e);T(IL.$$.fragment,H1t),H1t.forEach(t),Q1t.forEach(t),iar=i(PDe),e0e=n(PDe,"SPAN",{});var U1t=s(e0e);dar=r(U1t,"AutoModelForObjectDetection"),U1t.forEach(t),PDe.forEach(t),$Ne=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(qL.$$.fragment,dl),car=i(dl),$d=n(dl,"P",{});var XZ=s($d);far=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),xz=n(XZ,"A",{href:!0});var J1t=s(xz);mar=r(J1t,"from_pretrained()"),J1t.forEach(t),gar=r(XZ," class method or the "),$z=n(XZ,"A",{href:!0});var Y1t=s($z);har=r(Y1t,"from_config()"),Y1t.forEach(t),par=r(XZ,` class
method.`),XZ.forEach(t),uar=i(dl),NL=n(dl,"P",{});var BDe=s(NL);_ar=r(BDe,"This class cannot be instantiated directly using "),o0e=n(BDe,"CODE",{});var K1t=s(o0e);bar=r(K1t,"__init__()"),K1t.forEach(t),Far=r(BDe," (throws an error)."),BDe.forEach(t),Tar=i(dl),Et=n(dl,"DIV",{class:!0});var cw=s(Et);T(jL.$$.fragment,cw),Mar=i(cw),r0e=n(cw,"P",{});var Z1t=s(r0e);Ear=r(Z1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Z1t.forEach(t),Car=i(cw),kd=n(cw,"P",{});var zZ=s(kd);war=r(zZ,`Note:
Loading a model from its configuration file does `),t0e=n(zZ,"STRONG",{});var ebt=s(t0e);Aar=r(ebt,"not"),ebt.forEach(t),yar=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(zZ,"A",{href:!0});var obt=s(kz);Lar=r(obt,"from_pretrained()"),obt.forEach(t),xar=r(zZ," to load the model weights."),zZ.forEach(t),$ar=i(cw),T(w6.$$.fragment,cw),cw.forEach(t),kar=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(DL.$$.fragment,Fa),Sar=i(Fa),a0e=n(Fa,"P",{});var rbt=s(a0e);Rar=r(rbt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),rbt.forEach(t),Par=i(Fa),Qa=n(Fa,"P",{});var fw=s(Qa);Bar=r(fw,"The model class to instantiate is selected based on the "),n0e=n(fw,"CODE",{});var tbt=s(n0e);Iar=r(tbt,"model_type"),tbt.forEach(t),qar=r(fw,` property of the config object (either
passed as an argument or loaded from `),s0e=n(fw,"CODE",{});var abt=s(s0e);Nar=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),jar=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(fw,"CODE",{});var nbt=s(l0e);Dar=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),Gar=r(fw,":"),fw.forEach(t),Oar=i(Fa),GL=n(Fa,"UL",{});var IDe=s(GL);A6=n(IDe,"LI",{});var qke=s(A6);i0e=n(qke,"STRONG",{});var sbt=s(i0e);Var=r(sbt,"detr"),sbt.forEach(t),Xar=r(qke," \u2014 "),Sz=n(qke,"A",{href:!0});var lbt=s(Sz);zar=r(lbt,"DetrForObjectDetection"),lbt.forEach(t),War=r(qke," (DETR model)"),qke.forEach(t),Qar=i(IDe),y6=n(IDe,"LI",{});var Nke=s(y6);d0e=n(Nke,"STRONG",{});var ibt=s(d0e);Har=r(ibt,"yolos"),ibt.forEach(t),Uar=r(Nke," \u2014 "),Rz=n(Nke,"A",{href:!0});var dbt=s(Rz);Jar=r(dbt,"YolosForObjectDetection"),dbt.forEach(t),Yar=r(Nke," (YOLOS model)"),Nke.forEach(t),IDe.forEach(t),Kar=i(Fa),L6=n(Fa,"P",{});var jke=s(L6);Zar=r(jke,"The model is set in evaluation mode by default using "),c0e=n(jke,"CODE",{});var cbt=s(c0e);enr=r(cbt,"model.eval()"),cbt.forEach(t),onr=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f0e=n(jke,"CODE",{});var fbt=s(f0e);rnr=r(fbt,"model.train()"),fbt.forEach(t),jke.forEach(t),tnr=i(Fa),T(x6.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),kNe=i(f),Sd=n(f,"H2",{class:!0});var qDe=s(Sd);$6=n(qDe,"A",{id:!0,class:!0,href:!0});var mbt=s($6);m0e=n(mbt,"SPAN",{});var gbt=s(m0e);T(OL.$$.fragment,gbt),gbt.forEach(t),mbt.forEach(t),anr=i(qDe),g0e=n(qDe,"SPAN",{});var hbt=s(g0e);nnr=r(hbt,"AutoModelForImageSegmentation"),hbt.forEach(t),qDe.forEach(t),SNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(VL.$$.fragment,cl),snr=i(cl),Rd=n(cl,"P",{});var WZ=s(Rd);lnr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Pz=n(WZ,"A",{href:!0});var pbt=s(Pz);inr=r(pbt,"from_pretrained()"),pbt.forEach(t),dnr=r(WZ," class method or the "),Bz=n(WZ,"A",{href:!0});var ubt=s(Bz);cnr=r(ubt,"from_config()"),ubt.forEach(t),fnr=r(WZ,` class
method.`),WZ.forEach(t),mnr=i(cl),XL=n(cl,"P",{});var NDe=s(XL);gnr=r(NDe,"This class cannot be instantiated directly using "),h0e=n(NDe,"CODE",{});var _bt=s(h0e);hnr=r(_bt,"__init__()"),_bt.forEach(t),pnr=r(NDe," (throws an error)."),NDe.forEach(t),unr=i(cl),Ct=n(cl,"DIV",{class:!0});var mw=s(Ct);T(zL.$$.fragment,mw),_nr=i(mw),p0e=n(mw,"P",{});var bbt=s(p0e);bnr=r(bbt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),bbt.forEach(t),vnr=i(mw),Pd=n(mw,"P",{});var QZ=s(Pd);Fnr=r(QZ,`Note:
Loading a model from its configuration file does `),u0e=n(QZ,"STRONG",{});var vbt=s(u0e);Tnr=r(vbt,"not"),vbt.forEach(t),Mnr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(QZ,"A",{href:!0});var Fbt=s(Iz);Enr=r(Fbt,"from_pretrained()"),Fbt.forEach(t),Cnr=r(QZ," to load the model weights."),QZ.forEach(t),wnr=i(mw),T(k6.$$.fragment,mw),mw.forEach(t),Anr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(WL.$$.fragment,Ta),ynr=i(Ta),_0e=n(Ta,"P",{});var Tbt=s(_0e);Lnr=r(Tbt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tbt.forEach(t),xnr=i(Ta),Ha=n(Ta,"P",{});var gw=s(Ha);$nr=r(gw,"The model class to instantiate is selected based on the "),b0e=n(gw,"CODE",{});var Mbt=s(b0e);knr=r(Mbt,"model_type"),Mbt.forEach(t),Snr=r(gw,` property of the config object (either
passed as an argument or loaded from `),v0e=n(gw,"CODE",{});var Ebt=s(v0e);Rnr=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),Pnr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(gw,"CODE",{});var Cbt=s(F0e);Bnr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Inr=r(gw,":"),gw.forEach(t),qnr=i(Ta),T0e=n(Ta,"UL",{});var wbt=s(T0e);S6=n(wbt,"LI",{});var Dke=s(S6);M0e=n(Dke,"STRONG",{});var Abt=s(M0e);Nnr=r(Abt,"detr"),Abt.forEach(t),jnr=r(Dke," \u2014 "),qz=n(Dke,"A",{href:!0});var ybt=s(qz);Dnr=r(ybt,"DetrForSegmentation"),ybt.forEach(t),Gnr=r(Dke," (DETR model)"),Dke.forEach(t),wbt.forEach(t),Onr=i(Ta),R6=n(Ta,"P",{});var Gke=s(R6);Vnr=r(Gke,"The model is set in evaluation mode by default using "),E0e=n(Gke,"CODE",{});var Lbt=s(E0e);Xnr=r(Lbt,"model.eval()"),Lbt.forEach(t),znr=r(Gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C0e=n(Gke,"CODE",{});var xbt=s(C0e);Wnr=r(xbt,"model.train()"),xbt.forEach(t),Gke.forEach(t),Qnr=i(Ta),T(P6.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),RNe=i(f),Bd=n(f,"H2",{class:!0});var jDe=s(Bd);B6=n(jDe,"A",{id:!0,class:!0,href:!0});var $bt=s(B6);w0e=n($bt,"SPAN",{});var kbt=s(w0e);T(QL.$$.fragment,kbt),kbt.forEach(t),$bt.forEach(t),Hnr=i(jDe),A0e=n(jDe,"SPAN",{});var Sbt=s(A0e);Unr=r(Sbt,"AutoModelForSemanticSegmentation"),Sbt.forEach(t),jDe.forEach(t),PNe=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(HL.$$.fragment,fl),Jnr=i(fl),Id=n(fl,"P",{});var HZ=s(Id);Ynr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nz=n(HZ,"A",{href:!0});var Rbt=s(Nz);Knr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),Znr=r(HZ," class method or the "),jz=n(HZ,"A",{href:!0});var Pbt=s(jz);esr=r(Pbt,"from_config()"),Pbt.forEach(t),osr=r(HZ,` class
method.`),HZ.forEach(t),rsr=i(fl),UL=n(fl,"P",{});var DDe=s(UL);tsr=r(DDe,"This class cannot be instantiated directly using "),y0e=n(DDe,"CODE",{});var Bbt=s(y0e);asr=r(Bbt,"__init__()"),Bbt.forEach(t),nsr=r(DDe," (throws an error)."),DDe.forEach(t),ssr=i(fl),wt=n(fl,"DIV",{class:!0});var hw=s(wt);T(JL.$$.fragment,hw),lsr=i(hw),L0e=n(hw,"P",{});var Ibt=s(L0e);isr=r(Ibt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ibt.forEach(t),dsr=i(hw),qd=n(hw,"P",{});var UZ=s(qd);csr=r(UZ,`Note:
Loading a model from its configuration file does `),x0e=n(UZ,"STRONG",{});var qbt=s(x0e);fsr=r(qbt,"not"),qbt.forEach(t),msr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(UZ,"A",{href:!0});var Nbt=s(Dz);gsr=r(Nbt,"from_pretrained()"),Nbt.forEach(t),hsr=r(UZ," to load the model weights."),UZ.forEach(t),psr=i(hw),T(I6.$$.fragment,hw),hw.forEach(t),usr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(YL.$$.fragment,Ma),_sr=i(Ma),$0e=n(Ma,"P",{});var jbt=s($0e);bsr=r(jbt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jbt.forEach(t),vsr=i(Ma),Ua=n(Ma,"P",{});var pw=s(Ua);Fsr=r(pw,"The model class to instantiate is selected based on the "),k0e=n(pw,"CODE",{});var Dbt=s(k0e);Tsr=r(Dbt,"model_type"),Dbt.forEach(t),Msr=r(pw,` property of the config object (either
passed as an argument or loaded from `),S0e=n(pw,"CODE",{});var Gbt=s(S0e);Esr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),Csr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(pw,"CODE",{});var Obt=s(R0e);wsr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),Asr=r(pw,":"),pw.forEach(t),ysr=i(Ma),Ja=n(Ma,"UL",{});var uw=s(Ja);q6=n(uw,"LI",{});var Oke=s(q6);P0e=n(Oke,"STRONG",{});var Vbt=s(P0e);Lsr=r(Vbt,"beit"),Vbt.forEach(t),xsr=r(Oke," \u2014 "),Gz=n(Oke,"A",{href:!0});var Xbt=s(Gz);$sr=r(Xbt,"BeitForSemanticSegmentation"),Xbt.forEach(t),ksr=r(Oke," (BEiT model)"),Oke.forEach(t),Ssr=i(uw),N6=n(uw,"LI",{});var Vke=s(N6);B0e=n(Vke,"STRONG",{});var zbt=s(B0e);Rsr=r(zbt,"data2vec-vision"),zbt.forEach(t),Psr=r(Vke," \u2014 "),Oz=n(Vke,"A",{href:!0});var Wbt=s(Oz);Bsr=r(Wbt,"Data2VecVisionForSemanticSegmentation"),Wbt.forEach(t),Isr=r(Vke," (Data2VecVision model)"),Vke.forEach(t),qsr=i(uw),j6=n(uw,"LI",{});var Xke=s(j6);I0e=n(Xke,"STRONG",{});var Qbt=s(I0e);Nsr=r(Qbt,"dpt"),Qbt.forEach(t),jsr=r(Xke," \u2014 "),Vz=n(Xke,"A",{href:!0});var Hbt=s(Vz);Dsr=r(Hbt,"DPTForSemanticSegmentation"),Hbt.forEach(t),Gsr=r(Xke," (DPT model)"),Xke.forEach(t),Osr=i(uw),D6=n(uw,"LI",{});var zke=s(D6);q0e=n(zke,"STRONG",{});var Ubt=s(q0e);Vsr=r(Ubt,"segformer"),Ubt.forEach(t),Xsr=r(zke," \u2014 "),Xz=n(zke,"A",{href:!0});var Jbt=s(Xz);zsr=r(Jbt,"SegformerForSemanticSegmentation"),Jbt.forEach(t),Wsr=r(zke," (SegFormer model)"),zke.forEach(t),uw.forEach(t),Qsr=i(Ma),G6=n(Ma,"P",{});var Wke=s(G6);Hsr=r(Wke,"The model is set in evaluation mode by default using "),N0e=n(Wke,"CODE",{});var Ybt=s(N0e);Usr=r(Ybt,"model.eval()"),Ybt.forEach(t),Jsr=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=n(Wke,"CODE",{});var Kbt=s(j0e);Ysr=r(Kbt,"model.train()"),Kbt.forEach(t),Wke.forEach(t),Ksr=i(Ma),T(O6.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),BNe=i(f),Nd=n(f,"H2",{class:!0});var GDe=s(Nd);V6=n(GDe,"A",{id:!0,class:!0,href:!0});var Zbt=s(V6);D0e=n(Zbt,"SPAN",{});var e2t=s(D0e);T(KL.$$.fragment,e2t),e2t.forEach(t),Zbt.forEach(t),Zsr=i(GDe),G0e=n(GDe,"SPAN",{});var o2t=s(G0e);elr=r(o2t,"AutoModelForInstanceSegmentation"),o2t.forEach(t),GDe.forEach(t),INe=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(ZL.$$.fragment,ml),olr=i(ml),jd=n(ml,"P",{});var JZ=s(jd);rlr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zz=n(JZ,"A",{href:!0});var r2t=s(zz);tlr=r(r2t,"from_pretrained()"),r2t.forEach(t),alr=r(JZ," class method or the "),Wz=n(JZ,"A",{href:!0});var t2t=s(Wz);nlr=r(t2t,"from_config()"),t2t.forEach(t),slr=r(JZ,` class
method.`),JZ.forEach(t),llr=i(ml),e8=n(ml,"P",{});var ODe=s(e8);ilr=r(ODe,"This class cannot be instantiated directly using "),O0e=n(ODe,"CODE",{});var a2t=s(O0e);dlr=r(a2t,"__init__()"),a2t.forEach(t),clr=r(ODe," (throws an error)."),ODe.forEach(t),flr=i(ml),At=n(ml,"DIV",{class:!0});var _w=s(At);T(o8.$$.fragment,_w),mlr=i(_w),V0e=n(_w,"P",{});var n2t=s(V0e);glr=r(n2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),n2t.forEach(t),hlr=i(_w),Dd=n(_w,"P",{});var YZ=s(Dd);plr=r(YZ,`Note:
Loading a model from its configuration file does `),X0e=n(YZ,"STRONG",{});var s2t=s(X0e);ulr=r(s2t,"not"),s2t.forEach(t),_lr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(YZ,"A",{href:!0});var l2t=s(Qz);blr=r(l2t,"from_pretrained()"),l2t.forEach(t),vlr=r(YZ," to load the model weights."),YZ.forEach(t),Flr=i(_w),T(X6.$$.fragment,_w),_w.forEach(t),Tlr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(r8.$$.fragment,Ea),Mlr=i(Ea),z0e=n(Ea,"P",{});var i2t=s(z0e);Elr=r(i2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),i2t.forEach(t),Clr=i(Ea),Ya=n(Ea,"P",{});var bw=s(Ya);wlr=r(bw,"The model class to instantiate is selected based on the "),W0e=n(bw,"CODE",{});var d2t=s(W0e);Alr=r(d2t,"model_type"),d2t.forEach(t),ylr=r(bw,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(bw,"CODE",{});var c2t=s(Q0e);Llr=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),xlr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(bw,"CODE",{});var f2t=s(H0e);$lr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),klr=r(bw,":"),bw.forEach(t),Slr=i(Ea),U0e=n(Ea,"UL",{});var m2t=s(U0e);z6=n(m2t,"LI",{});var Qke=s(z6);J0e=n(Qke,"STRONG",{});var g2t=s(J0e);Rlr=r(g2t,"maskformer"),g2t.forEach(t),Plr=r(Qke," \u2014 "),Hz=n(Qke,"A",{href:!0});var h2t=s(Hz);Blr=r(h2t,"MaskFormerForInstanceSegmentation"),h2t.forEach(t),Ilr=r(Qke," (MaskFormer model)"),Qke.forEach(t),m2t.forEach(t),qlr=i(Ea),W6=n(Ea,"P",{});var Hke=s(W6);Nlr=r(Hke,"The model is set in evaluation mode by default using "),Y0e=n(Hke,"CODE",{});var p2t=s(Y0e);jlr=r(p2t,"model.eval()"),p2t.forEach(t),Dlr=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K0e=n(Hke,"CODE",{});var u2t=s(K0e);Glr=r(u2t,"model.train()"),u2t.forEach(t),Hke.forEach(t),Olr=i(Ea),T(Q6.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),qNe=i(f),Gd=n(f,"H2",{class:!0});var VDe=s(Gd);H6=n(VDe,"A",{id:!0,class:!0,href:!0});var _2t=s(H6);Z0e=n(_2t,"SPAN",{});var b2t=s(Z0e);T(t8.$$.fragment,b2t),b2t.forEach(t),_2t.forEach(t),Vlr=i(VDe),e1e=n(VDe,"SPAN",{});var v2t=s(e1e);Xlr=r(v2t,"TFAutoModel"),v2t.forEach(t),VDe.forEach(t),NNe=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(a8.$$.fragment,gl),zlr=i(gl),Od=n(gl,"P",{});var KZ=s(Od);Wlr=r(KZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uz=n(KZ,"A",{href:!0});var F2t=s(Uz);Qlr=r(F2t,"from_pretrained()"),F2t.forEach(t),Hlr=r(KZ," class method or the "),Jz=n(KZ,"A",{href:!0});var T2t=s(Jz);Ulr=r(T2t,"from_config()"),T2t.forEach(t),Jlr=r(KZ,` class
method.`),KZ.forEach(t),Ylr=i(gl),n8=n(gl,"P",{});var XDe=s(n8);Klr=r(XDe,"This class cannot be instantiated directly using "),o1e=n(XDe,"CODE",{});var M2t=s(o1e);Zlr=r(M2t,"__init__()"),M2t.forEach(t),eir=r(XDe," (throws an error)."),XDe.forEach(t),oir=i(gl),yt=n(gl,"DIV",{class:!0});var vw=s(yt);T(s8.$$.fragment,vw),rir=i(vw),r1e=n(vw,"P",{});var E2t=s(r1e);tir=r(E2t,"Instantiates one of the base model classes of the library from a configuration."),E2t.forEach(t),air=i(vw),Vd=n(vw,"P",{});var ZZ=s(Vd);nir=r(ZZ,`Note:
Loading a model from its configuration file does `),t1e=n(ZZ,"STRONG",{});var C2t=s(t1e);sir=r(C2t,"not"),C2t.forEach(t),lir=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(ZZ,"A",{href:!0});var w2t=s(Yz);iir=r(w2t,"from_pretrained()"),w2t.forEach(t),dir=r(ZZ," to load the model weights."),ZZ.forEach(t),cir=i(vw),T(U6.$$.fragment,vw),vw.forEach(t),fir=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(l8.$$.fragment,hl),mir=i(hl),a1e=n(hl,"P",{});var A2t=s(a1e);gir=r(A2t,"Instantiate one of the base model classes of the library from a pretrained model."),A2t.forEach(t),hir=i(hl),Ka=n(hl,"P",{});var Fw=s(Ka);pir=r(Fw,"The model class to instantiate is selected based on the "),n1e=n(Fw,"CODE",{});var y2t=s(n1e);uir=r(y2t,"model_type"),y2t.forEach(t),_ir=r(Fw,` property of the config object (either
passed as an argument or loaded from `),s1e=n(Fw,"CODE",{});var L2t=s(s1e);bir=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),vir=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(Fw,"CODE",{});var x2t=s(l1e);Fir=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),Tir=r(Fw,":"),Fw.forEach(t),Mir=i(hl),N=n(hl,"UL",{});var D=s(N);J6=n(D,"LI",{});var Uke=s(J6);i1e=n(Uke,"STRONG",{});var $2t=s(i1e);Eir=r($2t,"albert"),$2t.forEach(t),Cir=r(Uke," \u2014 "),Kz=n(Uke,"A",{href:!0});var k2t=s(Kz);wir=r(k2t,"TFAlbertModel"),k2t.forEach(t),Air=r(Uke," (ALBERT model)"),Uke.forEach(t),yir=i(D),Y6=n(D,"LI",{});var Jke=s(Y6);d1e=n(Jke,"STRONG",{});var S2t=s(d1e);Lir=r(S2t,"bart"),S2t.forEach(t),xir=r(Jke," \u2014 "),Zz=n(Jke,"A",{href:!0});var R2t=s(Zz);$ir=r(R2t,"TFBartModel"),R2t.forEach(t),kir=r(Jke," (BART model)"),Jke.forEach(t),Sir=i(D),K6=n(D,"LI",{});var Yke=s(K6);c1e=n(Yke,"STRONG",{});var P2t=s(c1e);Rir=r(P2t,"bert"),P2t.forEach(t),Pir=r(Yke," \u2014 "),eW=n(Yke,"A",{href:!0});var B2t=s(eW);Bir=r(B2t,"TFBertModel"),B2t.forEach(t),Iir=r(Yke," (BERT model)"),Yke.forEach(t),qir=i(D),Z6=n(D,"LI",{});var Kke=s(Z6);f1e=n(Kke,"STRONG",{});var I2t=s(f1e);Nir=r(I2t,"blenderbot"),I2t.forEach(t),jir=r(Kke," \u2014 "),oW=n(Kke,"A",{href:!0});var q2t=s(oW);Dir=r(q2t,"TFBlenderbotModel"),q2t.forEach(t),Gir=r(Kke," (Blenderbot model)"),Kke.forEach(t),Oir=i(D),eT=n(D,"LI",{});var Zke=s(eT);m1e=n(Zke,"STRONG",{});var N2t=s(m1e);Vir=r(N2t,"blenderbot-small"),N2t.forEach(t),Xir=r(Zke," \u2014 "),rW=n(Zke,"A",{href:!0});var j2t=s(rW);zir=r(j2t,"TFBlenderbotSmallModel"),j2t.forEach(t),Wir=r(Zke," (BlenderbotSmall model)"),Zke.forEach(t),Qir=i(D),oT=n(D,"LI",{});var eSe=s(oT);g1e=n(eSe,"STRONG",{});var D2t=s(g1e);Hir=r(D2t,"camembert"),D2t.forEach(t),Uir=r(eSe," \u2014 "),tW=n(eSe,"A",{href:!0});var G2t=s(tW);Jir=r(G2t,"TFCamembertModel"),G2t.forEach(t),Yir=r(eSe," (CamemBERT model)"),eSe.forEach(t),Kir=i(D),rT=n(D,"LI",{});var oSe=s(rT);h1e=n(oSe,"STRONG",{});var O2t=s(h1e);Zir=r(O2t,"clip"),O2t.forEach(t),edr=r(oSe," \u2014 "),aW=n(oSe,"A",{href:!0});var V2t=s(aW);odr=r(V2t,"TFCLIPModel"),V2t.forEach(t),rdr=r(oSe," (CLIP model)"),oSe.forEach(t),tdr=i(D),tT=n(D,"LI",{});var rSe=s(tT);p1e=n(rSe,"STRONG",{});var X2t=s(p1e);adr=r(X2t,"convbert"),X2t.forEach(t),ndr=r(rSe," \u2014 "),nW=n(rSe,"A",{href:!0});var z2t=s(nW);sdr=r(z2t,"TFConvBertModel"),z2t.forEach(t),ldr=r(rSe," (ConvBERT model)"),rSe.forEach(t),idr=i(D),aT=n(D,"LI",{});var tSe=s(aT);u1e=n(tSe,"STRONG",{});var W2t=s(u1e);ddr=r(W2t,"convnext"),W2t.forEach(t),cdr=r(tSe," \u2014 "),sW=n(tSe,"A",{href:!0});var Q2t=s(sW);fdr=r(Q2t,"TFConvNextModel"),Q2t.forEach(t),mdr=r(tSe," (ConvNext model)"),tSe.forEach(t),gdr=i(D),nT=n(D,"LI",{});var aSe=s(nT);_1e=n(aSe,"STRONG",{});var H2t=s(_1e);hdr=r(H2t,"ctrl"),H2t.forEach(t),pdr=r(aSe," \u2014 "),lW=n(aSe,"A",{href:!0});var U2t=s(lW);udr=r(U2t,"TFCTRLModel"),U2t.forEach(t),_dr=r(aSe," (CTRL model)"),aSe.forEach(t),bdr=i(D),sT=n(D,"LI",{});var nSe=s(sT);b1e=n(nSe,"STRONG",{});var J2t=s(b1e);vdr=r(J2t,"data2vec-vision"),J2t.forEach(t),Fdr=r(nSe," \u2014 "),iW=n(nSe,"A",{href:!0});var Y2t=s(iW);Tdr=r(Y2t,"TFData2VecVisionModel"),Y2t.forEach(t),Mdr=r(nSe," (Data2VecVision model)"),nSe.forEach(t),Edr=i(D),lT=n(D,"LI",{});var sSe=s(lT);v1e=n(sSe,"STRONG",{});var K2t=s(v1e);Cdr=r(K2t,"deberta"),K2t.forEach(t),wdr=r(sSe," \u2014 "),dW=n(sSe,"A",{href:!0});var Z2t=s(dW);Adr=r(Z2t,"TFDebertaModel"),Z2t.forEach(t),ydr=r(sSe," (DeBERTa model)"),sSe.forEach(t),Ldr=i(D),iT=n(D,"LI",{});var lSe=s(iT);F1e=n(lSe,"STRONG",{});var evt=s(F1e);xdr=r(evt,"deberta-v2"),evt.forEach(t),$dr=r(lSe," \u2014 "),cW=n(lSe,"A",{href:!0});var ovt=s(cW);kdr=r(ovt,"TFDebertaV2Model"),ovt.forEach(t),Sdr=r(lSe," (DeBERTa-v2 model)"),lSe.forEach(t),Rdr=i(D),dT=n(D,"LI",{});var iSe=s(dT);T1e=n(iSe,"STRONG",{});var rvt=s(T1e);Pdr=r(rvt,"distilbert"),rvt.forEach(t),Bdr=r(iSe," \u2014 "),fW=n(iSe,"A",{href:!0});var tvt=s(fW);Idr=r(tvt,"TFDistilBertModel"),tvt.forEach(t),qdr=r(iSe," (DistilBERT model)"),iSe.forEach(t),Ndr=i(D),cT=n(D,"LI",{});var dSe=s(cT);M1e=n(dSe,"STRONG",{});var avt=s(M1e);jdr=r(avt,"dpr"),avt.forEach(t),Ddr=r(dSe," \u2014 "),mW=n(dSe,"A",{href:!0});var nvt=s(mW);Gdr=r(nvt,"TFDPRQuestionEncoder"),nvt.forEach(t),Odr=r(dSe," (DPR model)"),dSe.forEach(t),Vdr=i(D),fT=n(D,"LI",{});var cSe=s(fT);E1e=n(cSe,"STRONG",{});var svt=s(E1e);Xdr=r(svt,"electra"),svt.forEach(t),zdr=r(cSe," \u2014 "),gW=n(cSe,"A",{href:!0});var lvt=s(gW);Wdr=r(lvt,"TFElectraModel"),lvt.forEach(t),Qdr=r(cSe," (ELECTRA model)"),cSe.forEach(t),Hdr=i(D),mT=n(D,"LI",{});var fSe=s(mT);C1e=n(fSe,"STRONG",{});var ivt=s(C1e);Udr=r(ivt,"flaubert"),ivt.forEach(t),Jdr=r(fSe," \u2014 "),hW=n(fSe,"A",{href:!0});var dvt=s(hW);Ydr=r(dvt,"TFFlaubertModel"),dvt.forEach(t),Kdr=r(fSe," (FlauBERT model)"),fSe.forEach(t),Zdr=i(D),Is=n(D,"LI",{});var j$=s(Is);w1e=n(j$,"STRONG",{});var cvt=s(w1e);ecr=r(cvt,"funnel"),cvt.forEach(t),ocr=r(j$," \u2014 "),pW=n(j$,"A",{href:!0});var fvt=s(pW);rcr=r(fvt,"TFFunnelModel"),fvt.forEach(t),tcr=r(j$," or "),uW=n(j$,"A",{href:!0});var mvt=s(uW);acr=r(mvt,"TFFunnelBaseModel"),mvt.forEach(t),ncr=r(j$," (Funnel Transformer model)"),j$.forEach(t),scr=i(D),gT=n(D,"LI",{});var mSe=s(gT);A1e=n(mSe,"STRONG",{});var gvt=s(A1e);lcr=r(gvt,"gpt2"),gvt.forEach(t),icr=r(mSe," \u2014 "),_W=n(mSe,"A",{href:!0});var hvt=s(_W);dcr=r(hvt,"TFGPT2Model"),hvt.forEach(t),ccr=r(mSe," (OpenAI GPT-2 model)"),mSe.forEach(t),fcr=i(D),hT=n(D,"LI",{});var gSe=s(hT);y1e=n(gSe,"STRONG",{});var pvt=s(y1e);mcr=r(pvt,"gptj"),pvt.forEach(t),gcr=r(gSe," \u2014 "),bW=n(gSe,"A",{href:!0});var uvt=s(bW);hcr=r(uvt,"TFGPTJModel"),uvt.forEach(t),pcr=r(gSe," (GPT-J model)"),gSe.forEach(t),ucr=i(D),pT=n(D,"LI",{});var hSe=s(pT);L1e=n(hSe,"STRONG",{});var _vt=s(L1e);_cr=r(_vt,"hubert"),_vt.forEach(t),bcr=r(hSe," \u2014 "),vW=n(hSe,"A",{href:!0});var bvt=s(vW);vcr=r(bvt,"TFHubertModel"),bvt.forEach(t),Fcr=r(hSe," (Hubert model)"),hSe.forEach(t),Tcr=i(D),uT=n(D,"LI",{});var pSe=s(uT);x1e=n(pSe,"STRONG",{});var vvt=s(x1e);Mcr=r(vvt,"layoutlm"),vvt.forEach(t),Ecr=r(pSe," \u2014 "),FW=n(pSe,"A",{href:!0});var Fvt=s(FW);Ccr=r(Fvt,"TFLayoutLMModel"),Fvt.forEach(t),wcr=r(pSe," (LayoutLM model)"),pSe.forEach(t),Acr=i(D),_T=n(D,"LI",{});var uSe=s(_T);$1e=n(uSe,"STRONG",{});var Tvt=s($1e);ycr=r(Tvt,"led"),Tvt.forEach(t),Lcr=r(uSe," \u2014 "),TW=n(uSe,"A",{href:!0});var Mvt=s(TW);xcr=r(Mvt,"TFLEDModel"),Mvt.forEach(t),$cr=r(uSe," (LED model)"),uSe.forEach(t),kcr=i(D),bT=n(D,"LI",{});var _Se=s(bT);k1e=n(_Se,"STRONG",{});var Evt=s(k1e);Scr=r(Evt,"longformer"),Evt.forEach(t),Rcr=r(_Se," \u2014 "),MW=n(_Se,"A",{href:!0});var Cvt=s(MW);Pcr=r(Cvt,"TFLongformerModel"),Cvt.forEach(t),Bcr=r(_Se," (Longformer model)"),_Se.forEach(t),Icr=i(D),vT=n(D,"LI",{});var bSe=s(vT);S1e=n(bSe,"STRONG",{});var wvt=s(S1e);qcr=r(wvt,"lxmert"),wvt.forEach(t),Ncr=r(bSe," \u2014 "),EW=n(bSe,"A",{href:!0});var Avt=s(EW);jcr=r(Avt,"TFLxmertModel"),Avt.forEach(t),Dcr=r(bSe," (LXMERT model)"),bSe.forEach(t),Gcr=i(D),FT=n(D,"LI",{});var vSe=s(FT);R1e=n(vSe,"STRONG",{});var yvt=s(R1e);Ocr=r(yvt,"marian"),yvt.forEach(t),Vcr=r(vSe," \u2014 "),CW=n(vSe,"A",{href:!0});var Lvt=s(CW);Xcr=r(Lvt,"TFMarianModel"),Lvt.forEach(t),zcr=r(vSe," (Marian model)"),vSe.forEach(t),Wcr=i(D),TT=n(D,"LI",{});var FSe=s(TT);P1e=n(FSe,"STRONG",{});var xvt=s(P1e);Qcr=r(xvt,"mbart"),xvt.forEach(t),Hcr=r(FSe," \u2014 "),wW=n(FSe,"A",{href:!0});var $vt=s(wW);Ucr=r($vt,"TFMBartModel"),$vt.forEach(t),Jcr=r(FSe," (mBART model)"),FSe.forEach(t),Ycr=i(D),MT=n(D,"LI",{});var TSe=s(MT);B1e=n(TSe,"STRONG",{});var kvt=s(B1e);Kcr=r(kvt,"mobilebert"),kvt.forEach(t),Zcr=r(TSe," \u2014 "),AW=n(TSe,"A",{href:!0});var Svt=s(AW);efr=r(Svt,"TFMobileBertModel"),Svt.forEach(t),ofr=r(TSe," (MobileBERT model)"),TSe.forEach(t),rfr=i(D),ET=n(D,"LI",{});var MSe=s(ET);I1e=n(MSe,"STRONG",{});var Rvt=s(I1e);tfr=r(Rvt,"mpnet"),Rvt.forEach(t),afr=r(MSe," \u2014 "),yW=n(MSe,"A",{href:!0});var Pvt=s(yW);nfr=r(Pvt,"TFMPNetModel"),Pvt.forEach(t),sfr=r(MSe," (MPNet model)"),MSe.forEach(t),lfr=i(D),CT=n(D,"LI",{});var ESe=s(CT);q1e=n(ESe,"STRONG",{});var Bvt=s(q1e);ifr=r(Bvt,"mt5"),Bvt.forEach(t),dfr=r(ESe," \u2014 "),LW=n(ESe,"A",{href:!0});var Ivt=s(LW);cfr=r(Ivt,"TFMT5Model"),Ivt.forEach(t),ffr=r(ESe," (mT5 model)"),ESe.forEach(t),mfr=i(D),wT=n(D,"LI",{});var CSe=s(wT);N1e=n(CSe,"STRONG",{});var qvt=s(N1e);gfr=r(qvt,"openai-gpt"),qvt.forEach(t),hfr=r(CSe," \u2014 "),xW=n(CSe,"A",{href:!0});var Nvt=s(xW);pfr=r(Nvt,"TFOpenAIGPTModel"),Nvt.forEach(t),ufr=r(CSe," (OpenAI GPT model)"),CSe.forEach(t),_fr=i(D),AT=n(D,"LI",{});var wSe=s(AT);j1e=n(wSe,"STRONG",{});var jvt=s(j1e);bfr=r(jvt,"pegasus"),jvt.forEach(t),vfr=r(wSe," \u2014 "),$W=n(wSe,"A",{href:!0});var Dvt=s($W);Ffr=r(Dvt,"TFPegasusModel"),Dvt.forEach(t),Tfr=r(wSe," (Pegasus model)"),wSe.forEach(t),Mfr=i(D),yT=n(D,"LI",{});var ASe=s(yT);D1e=n(ASe,"STRONG",{});var Gvt=s(D1e);Efr=r(Gvt,"rembert"),Gvt.forEach(t),Cfr=r(ASe," \u2014 "),kW=n(ASe,"A",{href:!0});var Ovt=s(kW);wfr=r(Ovt,"TFRemBertModel"),Ovt.forEach(t),Afr=r(ASe," (RemBERT model)"),ASe.forEach(t),yfr=i(D),LT=n(D,"LI",{});var ySe=s(LT);G1e=n(ySe,"STRONG",{});var Vvt=s(G1e);Lfr=r(Vvt,"roberta"),Vvt.forEach(t),xfr=r(ySe," \u2014 "),SW=n(ySe,"A",{href:!0});var Xvt=s(SW);$fr=r(Xvt,"TFRobertaModel"),Xvt.forEach(t),kfr=r(ySe," (RoBERTa model)"),ySe.forEach(t),Sfr=i(D),xT=n(D,"LI",{});var LSe=s(xT);O1e=n(LSe,"STRONG",{});var zvt=s(O1e);Rfr=r(zvt,"roformer"),zvt.forEach(t),Pfr=r(LSe," \u2014 "),RW=n(LSe,"A",{href:!0});var Wvt=s(RW);Bfr=r(Wvt,"TFRoFormerModel"),Wvt.forEach(t),Ifr=r(LSe," (RoFormer model)"),LSe.forEach(t),qfr=i(D),$T=n(D,"LI",{});var xSe=s($T);V1e=n(xSe,"STRONG",{});var Qvt=s(V1e);Nfr=r(Qvt,"speech_to_text"),Qvt.forEach(t),jfr=r(xSe," \u2014 "),PW=n(xSe,"A",{href:!0});var Hvt=s(PW);Dfr=r(Hvt,"TFSpeech2TextModel"),Hvt.forEach(t),Gfr=r(xSe," (Speech2Text model)"),xSe.forEach(t),Ofr=i(D),kT=n(D,"LI",{});var $Se=s(kT);X1e=n($Se,"STRONG",{});var Uvt=s(X1e);Vfr=r(Uvt,"swin"),Uvt.forEach(t),Xfr=r($Se," \u2014 "),BW=n($Se,"A",{href:!0});var Jvt=s(BW);zfr=r(Jvt,"TFSwinModel"),Jvt.forEach(t),Wfr=r($Se," (Swin model)"),$Se.forEach(t),Qfr=i(D),ST=n(D,"LI",{});var kSe=s(ST);z1e=n(kSe,"STRONG",{});var Yvt=s(z1e);Hfr=r(Yvt,"t5"),Yvt.forEach(t),Ufr=r(kSe," \u2014 "),IW=n(kSe,"A",{href:!0});var Kvt=s(IW);Jfr=r(Kvt,"TFT5Model"),Kvt.forEach(t),Yfr=r(kSe," (T5 model)"),kSe.forEach(t),Kfr=i(D),RT=n(D,"LI",{});var SSe=s(RT);W1e=n(SSe,"STRONG",{});var Zvt=s(W1e);Zfr=r(Zvt,"tapas"),Zvt.forEach(t),emr=r(SSe," \u2014 "),qW=n(SSe,"A",{href:!0});var eFt=s(qW);omr=r(eFt,"TFTapasModel"),eFt.forEach(t),rmr=r(SSe," (TAPAS model)"),SSe.forEach(t),tmr=i(D),PT=n(D,"LI",{});var RSe=s(PT);Q1e=n(RSe,"STRONG",{});var oFt=s(Q1e);amr=r(oFt,"transfo-xl"),oFt.forEach(t),nmr=r(RSe," \u2014 "),NW=n(RSe,"A",{href:!0});var rFt=s(NW);smr=r(rFt,"TFTransfoXLModel"),rFt.forEach(t),lmr=r(RSe," (Transformer-XL model)"),RSe.forEach(t),imr=i(D),BT=n(D,"LI",{});var PSe=s(BT);H1e=n(PSe,"STRONG",{});var tFt=s(H1e);dmr=r(tFt,"vit"),tFt.forEach(t),cmr=r(PSe," \u2014 "),jW=n(PSe,"A",{href:!0});var aFt=s(jW);fmr=r(aFt,"TFViTModel"),aFt.forEach(t),mmr=r(PSe," (ViT model)"),PSe.forEach(t),gmr=i(D),IT=n(D,"LI",{});var BSe=s(IT);U1e=n(BSe,"STRONG",{});var nFt=s(U1e);hmr=r(nFt,"vit_mae"),nFt.forEach(t),pmr=r(BSe," \u2014 "),DW=n(BSe,"A",{href:!0});var sFt=s(DW);umr=r(sFt,"TFViTMAEModel"),sFt.forEach(t),_mr=r(BSe," (ViTMAE model)"),BSe.forEach(t),bmr=i(D),qT=n(D,"LI",{});var ISe=s(qT);J1e=n(ISe,"STRONG",{});var lFt=s(J1e);vmr=r(lFt,"wav2vec2"),lFt.forEach(t),Fmr=r(ISe," \u2014 "),GW=n(ISe,"A",{href:!0});var iFt=s(GW);Tmr=r(iFt,"TFWav2Vec2Model"),iFt.forEach(t),Mmr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),Emr=i(D),NT=n(D,"LI",{});var qSe=s(NT);Y1e=n(qSe,"STRONG",{});var dFt=s(Y1e);Cmr=r(dFt,"xlm"),dFt.forEach(t),wmr=r(qSe," \u2014 "),OW=n(qSe,"A",{href:!0});var cFt=s(OW);Amr=r(cFt,"TFXLMModel"),cFt.forEach(t),ymr=r(qSe," (XLM model)"),qSe.forEach(t),Lmr=i(D),jT=n(D,"LI",{});var NSe=s(jT);K1e=n(NSe,"STRONG",{});var fFt=s(K1e);xmr=r(fFt,"xlm-roberta"),fFt.forEach(t),$mr=r(NSe," \u2014 "),VW=n(NSe,"A",{href:!0});var mFt=s(VW);kmr=r(mFt,"TFXLMRobertaModel"),mFt.forEach(t),Smr=r(NSe," (XLM-RoBERTa model)"),NSe.forEach(t),Rmr=i(D),DT=n(D,"LI",{});var jSe=s(DT);Z1e=n(jSe,"STRONG",{});var gFt=s(Z1e);Pmr=r(gFt,"xlnet"),gFt.forEach(t),Bmr=r(jSe," \u2014 "),XW=n(jSe,"A",{href:!0});var hFt=s(XW);Imr=r(hFt,"TFXLNetModel"),hFt.forEach(t),qmr=r(jSe," (XLNet model)"),jSe.forEach(t),D.forEach(t),Nmr=i(hl),T(GT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),jNe=i(f),Xd=n(f,"H2",{class:!0});var zDe=s(Xd);OT=n(zDe,"A",{id:!0,class:!0,href:!0});var pFt=s(OT);ebe=n(pFt,"SPAN",{});var uFt=s(ebe);T(i8.$$.fragment,uFt),uFt.forEach(t),pFt.forEach(t),jmr=i(zDe),obe=n(zDe,"SPAN",{});var _Ft=s(obe);Dmr=r(_Ft,"TFAutoModelForPreTraining"),_Ft.forEach(t),zDe.forEach(t),DNe=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(d8.$$.fragment,pl),Gmr=i(pl),zd=n(pl,"P",{});var eee=s(zd);Omr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zW=n(eee,"A",{href:!0});var bFt=s(zW);Vmr=r(bFt,"from_pretrained()"),bFt.forEach(t),Xmr=r(eee," class method or the "),WW=n(eee,"A",{href:!0});var vFt=s(WW);zmr=r(vFt,"from_config()"),vFt.forEach(t),Wmr=r(eee,` class
method.`),eee.forEach(t),Qmr=i(pl),c8=n(pl,"P",{});var WDe=s(c8);Hmr=r(WDe,"This class cannot be instantiated directly using "),rbe=n(WDe,"CODE",{});var FFt=s(rbe);Umr=r(FFt,"__init__()"),FFt.forEach(t),Jmr=r(WDe," (throws an error)."),WDe.forEach(t),Ymr=i(pl),Lt=n(pl,"DIV",{class:!0});var Tw=s(Lt);T(f8.$$.fragment,Tw),Kmr=i(Tw),tbe=n(Tw,"P",{});var TFt=s(tbe);Zmr=r(TFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TFt.forEach(t),egr=i(Tw),Wd=n(Tw,"P",{});var oee=s(Wd);ogr=r(oee,`Note:
Loading a model from its configuration file does `),abe=n(oee,"STRONG",{});var MFt=s(abe);rgr=r(MFt,"not"),MFt.forEach(t),tgr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(oee,"A",{href:!0});var EFt=s(QW);agr=r(EFt,"from_pretrained()"),EFt.forEach(t),ngr=r(oee," to load the model weights."),oee.forEach(t),sgr=i(Tw),T(VT.$$.fragment,Tw),Tw.forEach(t),lgr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(m8.$$.fragment,ul),igr=i(ul),nbe=n(ul,"P",{});var CFt=s(nbe);dgr=r(CFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CFt.forEach(t),cgr=i(ul),Za=n(ul,"P",{});var Mw=s(Za);fgr=r(Mw,"The model class to instantiate is selected based on the "),sbe=n(Mw,"CODE",{});var wFt=s(sbe);mgr=r(wFt,"model_type"),wFt.forEach(t),ggr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),lbe=n(Mw,"CODE",{});var AFt=s(lbe);hgr=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),pgr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(Mw,"CODE",{});var yFt=s(ibe);ugr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),_gr=r(Mw,":"),Mw.forEach(t),bgr=i(ul),se=n(ul,"UL",{});var le=s(se);XT=n(le,"LI",{});var DSe=s(XT);dbe=n(DSe,"STRONG",{});var LFt=s(dbe);vgr=r(LFt,"albert"),LFt.forEach(t),Fgr=r(DSe," \u2014 "),HW=n(DSe,"A",{href:!0});var xFt=s(HW);Tgr=r(xFt,"TFAlbertForPreTraining"),xFt.forEach(t),Mgr=r(DSe," (ALBERT model)"),DSe.forEach(t),Egr=i(le),zT=n(le,"LI",{});var GSe=s(zT);cbe=n(GSe,"STRONG",{});var $Ft=s(cbe);Cgr=r($Ft,"bart"),$Ft.forEach(t),wgr=r(GSe," \u2014 "),UW=n(GSe,"A",{href:!0});var kFt=s(UW);Agr=r(kFt,"TFBartForConditionalGeneration"),kFt.forEach(t),ygr=r(GSe," (BART model)"),GSe.forEach(t),Lgr=i(le),WT=n(le,"LI",{});var OSe=s(WT);fbe=n(OSe,"STRONG",{});var SFt=s(fbe);xgr=r(SFt,"bert"),SFt.forEach(t),$gr=r(OSe," \u2014 "),JW=n(OSe,"A",{href:!0});var RFt=s(JW);kgr=r(RFt,"TFBertForPreTraining"),RFt.forEach(t),Sgr=r(OSe," (BERT model)"),OSe.forEach(t),Rgr=i(le),QT=n(le,"LI",{});var VSe=s(QT);mbe=n(VSe,"STRONG",{});var PFt=s(mbe);Pgr=r(PFt,"camembert"),PFt.forEach(t),Bgr=r(VSe," \u2014 "),YW=n(VSe,"A",{href:!0});var BFt=s(YW);Igr=r(BFt,"TFCamembertForMaskedLM"),BFt.forEach(t),qgr=r(VSe," (CamemBERT model)"),VSe.forEach(t),Ngr=i(le),HT=n(le,"LI",{});var XSe=s(HT);gbe=n(XSe,"STRONG",{});var IFt=s(gbe);jgr=r(IFt,"ctrl"),IFt.forEach(t),Dgr=r(XSe," \u2014 "),KW=n(XSe,"A",{href:!0});var qFt=s(KW);Ggr=r(qFt,"TFCTRLLMHeadModel"),qFt.forEach(t),Ogr=r(XSe," (CTRL model)"),XSe.forEach(t),Vgr=i(le),UT=n(le,"LI",{});var zSe=s(UT);hbe=n(zSe,"STRONG",{});var NFt=s(hbe);Xgr=r(NFt,"distilbert"),NFt.forEach(t),zgr=r(zSe," \u2014 "),ZW=n(zSe,"A",{href:!0});var jFt=s(ZW);Wgr=r(jFt,"TFDistilBertForMaskedLM"),jFt.forEach(t),Qgr=r(zSe," (DistilBERT model)"),zSe.forEach(t),Hgr=i(le),JT=n(le,"LI",{});var WSe=s(JT);pbe=n(WSe,"STRONG",{});var DFt=s(pbe);Ugr=r(DFt,"electra"),DFt.forEach(t),Jgr=r(WSe," \u2014 "),eQ=n(WSe,"A",{href:!0});var GFt=s(eQ);Ygr=r(GFt,"TFElectraForPreTraining"),GFt.forEach(t),Kgr=r(WSe," (ELECTRA model)"),WSe.forEach(t),Zgr=i(le),YT=n(le,"LI",{});var QSe=s(YT);ube=n(QSe,"STRONG",{});var OFt=s(ube);ehr=r(OFt,"flaubert"),OFt.forEach(t),ohr=r(QSe," \u2014 "),oQ=n(QSe,"A",{href:!0});var VFt=s(oQ);rhr=r(VFt,"TFFlaubertWithLMHeadModel"),VFt.forEach(t),thr=r(QSe," (FlauBERT model)"),QSe.forEach(t),ahr=i(le),KT=n(le,"LI",{});var HSe=s(KT);_be=n(HSe,"STRONG",{});var XFt=s(_be);nhr=r(XFt,"funnel"),XFt.forEach(t),shr=r(HSe," \u2014 "),rQ=n(HSe,"A",{href:!0});var zFt=s(rQ);lhr=r(zFt,"TFFunnelForPreTraining"),zFt.forEach(t),ihr=r(HSe," (Funnel Transformer model)"),HSe.forEach(t),dhr=i(le),ZT=n(le,"LI",{});var USe=s(ZT);bbe=n(USe,"STRONG",{});var WFt=s(bbe);chr=r(WFt,"gpt2"),WFt.forEach(t),fhr=r(USe," \u2014 "),tQ=n(USe,"A",{href:!0});var QFt=s(tQ);mhr=r(QFt,"TFGPT2LMHeadModel"),QFt.forEach(t),ghr=r(USe," (OpenAI GPT-2 model)"),USe.forEach(t),hhr=i(le),e7=n(le,"LI",{});var JSe=s(e7);vbe=n(JSe,"STRONG",{});var HFt=s(vbe);phr=r(HFt,"layoutlm"),HFt.forEach(t),uhr=r(JSe," \u2014 "),aQ=n(JSe,"A",{href:!0});var UFt=s(aQ);_hr=r(UFt,"TFLayoutLMForMaskedLM"),UFt.forEach(t),bhr=r(JSe," (LayoutLM model)"),JSe.forEach(t),vhr=i(le),o7=n(le,"LI",{});var YSe=s(o7);Fbe=n(YSe,"STRONG",{});var JFt=s(Fbe);Fhr=r(JFt,"lxmert"),JFt.forEach(t),Thr=r(YSe," \u2014 "),nQ=n(YSe,"A",{href:!0});var YFt=s(nQ);Mhr=r(YFt,"TFLxmertForPreTraining"),YFt.forEach(t),Ehr=r(YSe," (LXMERT model)"),YSe.forEach(t),Chr=i(le),r7=n(le,"LI",{});var KSe=s(r7);Tbe=n(KSe,"STRONG",{});var KFt=s(Tbe);whr=r(KFt,"mobilebert"),KFt.forEach(t),Ahr=r(KSe," \u2014 "),sQ=n(KSe,"A",{href:!0});var ZFt=s(sQ);yhr=r(ZFt,"TFMobileBertForPreTraining"),ZFt.forEach(t),Lhr=r(KSe," (MobileBERT model)"),KSe.forEach(t),xhr=i(le),t7=n(le,"LI",{});var ZSe=s(t7);Mbe=n(ZSe,"STRONG",{});var e6t=s(Mbe);$hr=r(e6t,"mpnet"),e6t.forEach(t),khr=r(ZSe," \u2014 "),lQ=n(ZSe,"A",{href:!0});var o6t=s(lQ);Shr=r(o6t,"TFMPNetForMaskedLM"),o6t.forEach(t),Rhr=r(ZSe," (MPNet model)"),ZSe.forEach(t),Phr=i(le),a7=n(le,"LI",{});var eRe=s(a7);Ebe=n(eRe,"STRONG",{});var r6t=s(Ebe);Bhr=r(r6t,"openai-gpt"),r6t.forEach(t),Ihr=r(eRe," \u2014 "),iQ=n(eRe,"A",{href:!0});var t6t=s(iQ);qhr=r(t6t,"TFOpenAIGPTLMHeadModel"),t6t.forEach(t),Nhr=r(eRe," (OpenAI GPT model)"),eRe.forEach(t),jhr=i(le),n7=n(le,"LI",{});var oRe=s(n7);Cbe=n(oRe,"STRONG",{});var a6t=s(Cbe);Dhr=r(a6t,"roberta"),a6t.forEach(t),Ghr=r(oRe," \u2014 "),dQ=n(oRe,"A",{href:!0});var n6t=s(dQ);Ohr=r(n6t,"TFRobertaForMaskedLM"),n6t.forEach(t),Vhr=r(oRe," (RoBERTa model)"),oRe.forEach(t),Xhr=i(le),s7=n(le,"LI",{});var rRe=s(s7);wbe=n(rRe,"STRONG",{});var s6t=s(wbe);zhr=r(s6t,"t5"),s6t.forEach(t),Whr=r(rRe," \u2014 "),cQ=n(rRe,"A",{href:!0});var l6t=s(cQ);Qhr=r(l6t,"TFT5ForConditionalGeneration"),l6t.forEach(t),Hhr=r(rRe," (T5 model)"),rRe.forEach(t),Uhr=i(le),l7=n(le,"LI",{});var tRe=s(l7);Abe=n(tRe,"STRONG",{});var i6t=s(Abe);Jhr=r(i6t,"tapas"),i6t.forEach(t),Yhr=r(tRe," \u2014 "),fQ=n(tRe,"A",{href:!0});var d6t=s(fQ);Khr=r(d6t,"TFTapasForMaskedLM"),d6t.forEach(t),Zhr=r(tRe," (TAPAS model)"),tRe.forEach(t),epr=i(le),i7=n(le,"LI",{});var aRe=s(i7);ybe=n(aRe,"STRONG",{});var c6t=s(ybe);opr=r(c6t,"transfo-xl"),c6t.forEach(t),rpr=r(aRe," \u2014 "),mQ=n(aRe,"A",{href:!0});var f6t=s(mQ);tpr=r(f6t,"TFTransfoXLLMHeadModel"),f6t.forEach(t),apr=r(aRe," (Transformer-XL model)"),aRe.forEach(t),npr=i(le),d7=n(le,"LI",{});var nRe=s(d7);Lbe=n(nRe,"STRONG",{});var m6t=s(Lbe);spr=r(m6t,"vit_mae"),m6t.forEach(t),lpr=r(nRe," \u2014 "),gQ=n(nRe,"A",{href:!0});var g6t=s(gQ);ipr=r(g6t,"TFViTMAEForPreTraining"),g6t.forEach(t),dpr=r(nRe," (ViTMAE model)"),nRe.forEach(t),cpr=i(le),c7=n(le,"LI",{});var sRe=s(c7);xbe=n(sRe,"STRONG",{});var h6t=s(xbe);fpr=r(h6t,"xlm"),h6t.forEach(t),mpr=r(sRe," \u2014 "),hQ=n(sRe,"A",{href:!0});var p6t=s(hQ);gpr=r(p6t,"TFXLMWithLMHeadModel"),p6t.forEach(t),hpr=r(sRe," (XLM model)"),sRe.forEach(t),ppr=i(le),f7=n(le,"LI",{});var lRe=s(f7);$be=n(lRe,"STRONG",{});var u6t=s($be);upr=r(u6t,"xlm-roberta"),u6t.forEach(t),_pr=r(lRe," \u2014 "),pQ=n(lRe,"A",{href:!0});var _6t=s(pQ);bpr=r(_6t,"TFXLMRobertaForMaskedLM"),_6t.forEach(t),vpr=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),Fpr=i(le),m7=n(le,"LI",{});var iRe=s(m7);kbe=n(iRe,"STRONG",{});var b6t=s(kbe);Tpr=r(b6t,"xlnet"),b6t.forEach(t),Mpr=r(iRe," \u2014 "),uQ=n(iRe,"A",{href:!0});var v6t=s(uQ);Epr=r(v6t,"TFXLNetLMHeadModel"),v6t.forEach(t),Cpr=r(iRe," (XLNet model)"),iRe.forEach(t),le.forEach(t),wpr=i(ul),T(g7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),GNe=i(f),Qd=n(f,"H2",{class:!0});var QDe=s(Qd);h7=n(QDe,"A",{id:!0,class:!0,href:!0});var F6t=s(h7);Sbe=n(F6t,"SPAN",{});var T6t=s(Sbe);T(g8.$$.fragment,T6t),T6t.forEach(t),F6t.forEach(t),Apr=i(QDe),Rbe=n(QDe,"SPAN",{});var M6t=s(Rbe);ypr=r(M6t,"TFAutoModelForCausalLM"),M6t.forEach(t),QDe.forEach(t),ONe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(h8.$$.fragment,_l),Lpr=i(_l),Hd=n(_l,"P",{});var ree=s(Hd);xpr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=n(ree,"A",{href:!0});var E6t=s(_Q);$pr=r(E6t,"from_pretrained()"),E6t.forEach(t),kpr=r(ree," class method or the "),bQ=n(ree,"A",{href:!0});var C6t=s(bQ);Spr=r(C6t,"from_config()"),C6t.forEach(t),Rpr=r(ree,` class
method.`),ree.forEach(t),Ppr=i(_l),p8=n(_l,"P",{});var HDe=s(p8);Bpr=r(HDe,"This class cannot be instantiated directly using "),Pbe=n(HDe,"CODE",{});var w6t=s(Pbe);Ipr=r(w6t,"__init__()"),w6t.forEach(t),qpr=r(HDe," (throws an error)."),HDe.forEach(t),Npr=i(_l),xt=n(_l,"DIV",{class:!0});var Ew=s(xt);T(u8.$$.fragment,Ew),jpr=i(Ew),Bbe=n(Ew,"P",{});var A6t=s(Bbe);Dpr=r(A6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),A6t.forEach(t),Gpr=i(Ew),Ud=n(Ew,"P",{});var tee=s(Ud);Opr=r(tee,`Note:
Loading a model from its configuration file does `),Ibe=n(tee,"STRONG",{});var y6t=s(Ibe);Vpr=r(y6t,"not"),y6t.forEach(t),Xpr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(tee,"A",{href:!0});var L6t=s(vQ);zpr=r(L6t,"from_pretrained()"),L6t.forEach(t),Wpr=r(tee," to load the model weights."),tee.forEach(t),Qpr=i(Ew),T(p7.$$.fragment,Ew),Ew.forEach(t),Hpr=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(_8.$$.fragment,bl),Upr=i(bl),qbe=n(bl,"P",{});var x6t=s(qbe);Jpr=r(x6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x6t.forEach(t),Ypr=i(bl),en=n(bl,"P",{});var Cw=s(en);Kpr=r(Cw,"The model class to instantiate is selected based on the "),Nbe=n(Cw,"CODE",{});var $6t=s(Nbe);Zpr=r($6t,"model_type"),$6t.forEach(t),eur=r(Cw,` property of the config object (either
passed as an argument or loaded from `),jbe=n(Cw,"CODE",{});var k6t=s(jbe);our=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),rur=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(Cw,"CODE",{});var S6t=s(Dbe);tur=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),aur=r(Cw,":"),Cw.forEach(t),nur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);u7=n(Ce,"LI",{});var dRe=s(u7);Gbe=n(dRe,"STRONG",{});var R6t=s(Gbe);sur=r(R6t,"bert"),R6t.forEach(t),lur=r(dRe," \u2014 "),FQ=n(dRe,"A",{href:!0});var P6t=s(FQ);iur=r(P6t,"TFBertLMHeadModel"),P6t.forEach(t),dur=r(dRe," (BERT model)"),dRe.forEach(t),cur=i(Ce),_7=n(Ce,"LI",{});var cRe=s(_7);Obe=n(cRe,"STRONG",{});var B6t=s(Obe);fur=r(B6t,"camembert"),B6t.forEach(t),mur=r(cRe," \u2014 "),TQ=n(cRe,"A",{href:!0});var I6t=s(TQ);gur=r(I6t,"TFCamembertForCausalLM"),I6t.forEach(t),hur=r(cRe," (CamemBERT model)"),cRe.forEach(t),pur=i(Ce),b7=n(Ce,"LI",{});var fRe=s(b7);Vbe=n(fRe,"STRONG",{});var q6t=s(Vbe);uur=r(q6t,"ctrl"),q6t.forEach(t),_ur=r(fRe," \u2014 "),MQ=n(fRe,"A",{href:!0});var N6t=s(MQ);bur=r(N6t,"TFCTRLLMHeadModel"),N6t.forEach(t),vur=r(fRe," (CTRL model)"),fRe.forEach(t),Fur=i(Ce),v7=n(Ce,"LI",{});var mRe=s(v7);Xbe=n(mRe,"STRONG",{});var j6t=s(Xbe);Tur=r(j6t,"gpt2"),j6t.forEach(t),Mur=r(mRe," \u2014 "),EQ=n(mRe,"A",{href:!0});var D6t=s(EQ);Eur=r(D6t,"TFGPT2LMHeadModel"),D6t.forEach(t),Cur=r(mRe," (OpenAI GPT-2 model)"),mRe.forEach(t),wur=i(Ce),F7=n(Ce,"LI",{});var gRe=s(F7);zbe=n(gRe,"STRONG",{});var G6t=s(zbe);Aur=r(G6t,"gptj"),G6t.forEach(t),yur=r(gRe," \u2014 "),CQ=n(gRe,"A",{href:!0});var O6t=s(CQ);Lur=r(O6t,"TFGPTJForCausalLM"),O6t.forEach(t),xur=r(gRe," (GPT-J model)"),gRe.forEach(t),$ur=i(Ce),T7=n(Ce,"LI",{});var hRe=s(T7);Wbe=n(hRe,"STRONG",{});var V6t=s(Wbe);kur=r(V6t,"openai-gpt"),V6t.forEach(t),Sur=r(hRe," \u2014 "),wQ=n(hRe,"A",{href:!0});var X6t=s(wQ);Rur=r(X6t,"TFOpenAIGPTLMHeadModel"),X6t.forEach(t),Pur=r(hRe," (OpenAI GPT model)"),hRe.forEach(t),Bur=i(Ce),M7=n(Ce,"LI",{});var pRe=s(M7);Qbe=n(pRe,"STRONG",{});var z6t=s(Qbe);Iur=r(z6t,"rembert"),z6t.forEach(t),qur=r(pRe," \u2014 "),AQ=n(pRe,"A",{href:!0});var W6t=s(AQ);Nur=r(W6t,"TFRemBertForCausalLM"),W6t.forEach(t),jur=r(pRe," (RemBERT model)"),pRe.forEach(t),Dur=i(Ce),E7=n(Ce,"LI",{});var uRe=s(E7);Hbe=n(uRe,"STRONG",{});var Q6t=s(Hbe);Gur=r(Q6t,"roberta"),Q6t.forEach(t),Our=r(uRe," \u2014 "),yQ=n(uRe,"A",{href:!0});var H6t=s(yQ);Vur=r(H6t,"TFRobertaForCausalLM"),H6t.forEach(t),Xur=r(uRe," (RoBERTa model)"),uRe.forEach(t),zur=i(Ce),C7=n(Ce,"LI",{});var _Re=s(C7);Ube=n(_Re,"STRONG",{});var U6t=s(Ube);Wur=r(U6t,"roformer"),U6t.forEach(t),Qur=r(_Re," \u2014 "),LQ=n(_Re,"A",{href:!0});var J6t=s(LQ);Hur=r(J6t,"TFRoFormerForCausalLM"),J6t.forEach(t),Uur=r(_Re," (RoFormer model)"),_Re.forEach(t),Jur=i(Ce),w7=n(Ce,"LI",{});var bRe=s(w7);Jbe=n(bRe,"STRONG",{});var Y6t=s(Jbe);Yur=r(Y6t,"transfo-xl"),Y6t.forEach(t),Kur=r(bRe," \u2014 "),xQ=n(bRe,"A",{href:!0});var K6t=s(xQ);Zur=r(K6t,"TFTransfoXLLMHeadModel"),K6t.forEach(t),e_r=r(bRe," (Transformer-XL model)"),bRe.forEach(t),o_r=i(Ce),A7=n(Ce,"LI",{});var vRe=s(A7);Ybe=n(vRe,"STRONG",{});var Z6t=s(Ybe);r_r=r(Z6t,"xlm"),Z6t.forEach(t),t_r=r(vRe," \u2014 "),$Q=n(vRe,"A",{href:!0});var eTt=s($Q);a_r=r(eTt,"TFXLMWithLMHeadModel"),eTt.forEach(t),n_r=r(vRe," (XLM model)"),vRe.forEach(t),s_r=i(Ce),y7=n(Ce,"LI",{});var FRe=s(y7);Kbe=n(FRe,"STRONG",{});var oTt=s(Kbe);l_r=r(oTt,"xlnet"),oTt.forEach(t),i_r=r(FRe," \u2014 "),kQ=n(FRe,"A",{href:!0});var rTt=s(kQ);d_r=r(rTt,"TFXLNetLMHeadModel"),rTt.forEach(t),c_r=r(FRe," (XLNet model)"),FRe.forEach(t),Ce.forEach(t),f_r=i(bl),T(L7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),VNe=i(f),Jd=n(f,"H2",{class:!0});var UDe=s(Jd);x7=n(UDe,"A",{id:!0,class:!0,href:!0});var tTt=s(x7);Zbe=n(tTt,"SPAN",{});var aTt=s(Zbe);T(b8.$$.fragment,aTt),aTt.forEach(t),tTt.forEach(t),m_r=i(UDe),e2e=n(UDe,"SPAN",{});var nTt=s(e2e);g_r=r(nTt,"TFAutoModelForImageClassification"),nTt.forEach(t),UDe.forEach(t),XNe=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(v8.$$.fragment,vl),h_r=i(vl),Yd=n(vl,"P",{});var aee=s(Yd);p_r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=n(aee,"A",{href:!0});var sTt=s(SQ);u_r=r(sTt,"from_pretrained()"),sTt.forEach(t),__r=r(aee," class method or the "),RQ=n(aee,"A",{href:!0});var lTt=s(RQ);b_r=r(lTt,"from_config()"),lTt.forEach(t),v_r=r(aee,` class
method.`),aee.forEach(t),F_r=i(vl),F8=n(vl,"P",{});var JDe=s(F8);T_r=r(JDe,"This class cannot be instantiated directly using "),o2e=n(JDe,"CODE",{});var iTt=s(o2e);M_r=r(iTt,"__init__()"),iTt.forEach(t),E_r=r(JDe," (throws an error)."),JDe.forEach(t),C_r=i(vl),$t=n(vl,"DIV",{class:!0});var ww=s($t);T(T8.$$.fragment,ww),w_r=i(ww),r2e=n(ww,"P",{});var dTt=s(r2e);A_r=r(dTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dTt.forEach(t),y_r=i(ww),Kd=n(ww,"P",{});var nee=s(Kd);L_r=r(nee,`Note:
Loading a model from its configuration file does `),t2e=n(nee,"STRONG",{});var cTt=s(t2e);x_r=r(cTt,"not"),cTt.forEach(t),$_r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(nee,"A",{href:!0});var fTt=s(PQ);k_r=r(fTt,"from_pretrained()"),fTt.forEach(t),S_r=r(nee," to load the model weights."),nee.forEach(t),R_r=i(ww),T($7.$$.fragment,ww),ww.forEach(t),P_r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(M8.$$.fragment,Fl),B_r=i(Fl),a2e=n(Fl,"P",{});var mTt=s(a2e);I_r=r(mTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mTt.forEach(t),q_r=i(Fl),on=n(Fl,"P",{});var Aw=s(on);N_r=r(Aw,"The model class to instantiate is selected based on the "),n2e=n(Aw,"CODE",{});var gTt=s(n2e);j_r=r(gTt,"model_type"),gTt.forEach(t),D_r=r(Aw,` property of the config object (either
passed as an argument or loaded from `),s2e=n(Aw,"CODE",{});var hTt=s(s2e);G_r=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),O_r=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(Aw,"CODE",{});var pTt=s(l2e);V_r=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),X_r=r(Aw,":"),Aw.forEach(t),z_r=i(Fl),rn=n(Fl,"UL",{});var yw=s(rn);k7=n(yw,"LI",{});var TRe=s(k7);i2e=n(TRe,"STRONG",{});var uTt=s(i2e);W_r=r(uTt,"convnext"),uTt.forEach(t),Q_r=r(TRe," \u2014 "),BQ=n(TRe,"A",{href:!0});var _Tt=s(BQ);H_r=r(_Tt,"TFConvNextForImageClassification"),_Tt.forEach(t),U_r=r(TRe," (ConvNext model)"),TRe.forEach(t),J_r=i(yw),S7=n(yw,"LI",{});var MRe=s(S7);d2e=n(MRe,"STRONG",{});var bTt=s(d2e);Y_r=r(bTt,"data2vec-vision"),bTt.forEach(t),K_r=r(MRe," \u2014 "),IQ=n(MRe,"A",{href:!0});var vTt=s(IQ);Z_r=r(vTt,"TFData2VecVisionForImageClassification"),vTt.forEach(t),e0r=r(MRe," (Data2VecVision model)"),MRe.forEach(t),o0r=i(yw),R7=n(yw,"LI",{});var ERe=s(R7);c2e=n(ERe,"STRONG",{});var FTt=s(c2e);r0r=r(FTt,"swin"),FTt.forEach(t),t0r=r(ERe," \u2014 "),qQ=n(ERe,"A",{href:!0});var TTt=s(qQ);a0r=r(TTt,"TFSwinForImageClassification"),TTt.forEach(t),n0r=r(ERe," (Swin model)"),ERe.forEach(t),s0r=i(yw),P7=n(yw,"LI",{});var CRe=s(P7);f2e=n(CRe,"STRONG",{});var MTt=s(f2e);l0r=r(MTt,"vit"),MTt.forEach(t),i0r=r(CRe," \u2014 "),NQ=n(CRe,"A",{href:!0});var ETt=s(NQ);d0r=r(ETt,"TFViTForImageClassification"),ETt.forEach(t),c0r=r(CRe," (ViT model)"),CRe.forEach(t),yw.forEach(t),f0r=i(Fl),T(B7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),zNe=i(f),Zd=n(f,"H2",{class:!0});var YDe=s(Zd);I7=n(YDe,"A",{id:!0,class:!0,href:!0});var CTt=s(I7);m2e=n(CTt,"SPAN",{});var wTt=s(m2e);T(E8.$$.fragment,wTt),wTt.forEach(t),CTt.forEach(t),m0r=i(YDe),g2e=n(YDe,"SPAN",{});var ATt=s(g2e);g0r=r(ATt,"TFAutoModelForMaskedLM"),ATt.forEach(t),YDe.forEach(t),WNe=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(C8.$$.fragment,Tl),h0r=i(Tl),ec=n(Tl,"P",{});var see=s(ec);p0r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=n(see,"A",{href:!0});var yTt=s(jQ);u0r=r(yTt,"from_pretrained()"),yTt.forEach(t),_0r=r(see," class method or the "),DQ=n(see,"A",{href:!0});var LTt=s(DQ);b0r=r(LTt,"from_config()"),LTt.forEach(t),v0r=r(see,` class
method.`),see.forEach(t),F0r=i(Tl),w8=n(Tl,"P",{});var KDe=s(w8);T0r=r(KDe,"This class cannot be instantiated directly using "),h2e=n(KDe,"CODE",{});var xTt=s(h2e);M0r=r(xTt,"__init__()"),xTt.forEach(t),E0r=r(KDe," (throws an error)."),KDe.forEach(t),C0r=i(Tl),kt=n(Tl,"DIV",{class:!0});var Lw=s(kt);T(A8.$$.fragment,Lw),w0r=i(Lw),p2e=n(Lw,"P",{});var $Tt=s(p2e);A0r=r($Tt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Tt.forEach(t),y0r=i(Lw),oc=n(Lw,"P",{});var lee=s(oc);L0r=r(lee,`Note:
Loading a model from its configuration file does `),u2e=n(lee,"STRONG",{});var kTt=s(u2e);x0r=r(kTt,"not"),kTt.forEach(t),$0r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(lee,"A",{href:!0});var STt=s(GQ);k0r=r(STt,"from_pretrained()"),STt.forEach(t),S0r=r(lee," to load the model weights."),lee.forEach(t),R0r=i(Lw),T(q7.$$.fragment,Lw),Lw.forEach(t),P0r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(y8.$$.fragment,Ml),B0r=i(Ml),_2e=n(Ml,"P",{});var RTt=s(_2e);I0r=r(RTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RTt.forEach(t),q0r=i(Ml),tn=n(Ml,"P",{});var xw=s(tn);N0r=r(xw,"The model class to instantiate is selected based on the "),b2e=n(xw,"CODE",{});var PTt=s(b2e);j0r=r(PTt,"model_type"),PTt.forEach(t),D0r=r(xw,` property of the config object (either
passed as an argument or loaded from `),v2e=n(xw,"CODE",{});var BTt=s(v2e);G0r=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),O0r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(xw,"CODE",{});var ITt=s(F2e);V0r=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),X0r=r(xw,":"),xw.forEach(t),z0r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);N7=n(fe,"LI",{});var wRe=s(N7);T2e=n(wRe,"STRONG",{});var qTt=s(T2e);W0r=r(qTt,"albert"),qTt.forEach(t),Q0r=r(wRe," \u2014 "),OQ=n(wRe,"A",{href:!0});var NTt=s(OQ);H0r=r(NTt,"TFAlbertForMaskedLM"),NTt.forEach(t),U0r=r(wRe," (ALBERT model)"),wRe.forEach(t),J0r=i(fe),j7=n(fe,"LI",{});var ARe=s(j7);M2e=n(ARe,"STRONG",{});var jTt=s(M2e);Y0r=r(jTt,"bert"),jTt.forEach(t),K0r=r(ARe," \u2014 "),VQ=n(ARe,"A",{href:!0});var DTt=s(VQ);Z0r=r(DTt,"TFBertForMaskedLM"),DTt.forEach(t),e1r=r(ARe," (BERT model)"),ARe.forEach(t),o1r=i(fe),D7=n(fe,"LI",{});var yRe=s(D7);E2e=n(yRe,"STRONG",{});var GTt=s(E2e);r1r=r(GTt,"camembert"),GTt.forEach(t),t1r=r(yRe," \u2014 "),XQ=n(yRe,"A",{href:!0});var OTt=s(XQ);a1r=r(OTt,"TFCamembertForMaskedLM"),OTt.forEach(t),n1r=r(yRe," (CamemBERT model)"),yRe.forEach(t),s1r=i(fe),G7=n(fe,"LI",{});var LRe=s(G7);C2e=n(LRe,"STRONG",{});var VTt=s(C2e);l1r=r(VTt,"convbert"),VTt.forEach(t),i1r=r(LRe," \u2014 "),zQ=n(LRe,"A",{href:!0});var XTt=s(zQ);d1r=r(XTt,"TFConvBertForMaskedLM"),XTt.forEach(t),c1r=r(LRe," (ConvBERT model)"),LRe.forEach(t),f1r=i(fe),O7=n(fe,"LI",{});var xRe=s(O7);w2e=n(xRe,"STRONG",{});var zTt=s(w2e);m1r=r(zTt,"deberta"),zTt.forEach(t),g1r=r(xRe," \u2014 "),WQ=n(xRe,"A",{href:!0});var WTt=s(WQ);h1r=r(WTt,"TFDebertaForMaskedLM"),WTt.forEach(t),p1r=r(xRe," (DeBERTa model)"),xRe.forEach(t),u1r=i(fe),V7=n(fe,"LI",{});var $Re=s(V7);A2e=n($Re,"STRONG",{});var QTt=s(A2e);_1r=r(QTt,"deberta-v2"),QTt.forEach(t),b1r=r($Re," \u2014 "),QQ=n($Re,"A",{href:!0});var HTt=s(QQ);v1r=r(HTt,"TFDebertaV2ForMaskedLM"),HTt.forEach(t),F1r=r($Re," (DeBERTa-v2 model)"),$Re.forEach(t),T1r=i(fe),X7=n(fe,"LI",{});var kRe=s(X7);y2e=n(kRe,"STRONG",{});var UTt=s(y2e);M1r=r(UTt,"distilbert"),UTt.forEach(t),E1r=r(kRe," \u2014 "),HQ=n(kRe,"A",{href:!0});var JTt=s(HQ);C1r=r(JTt,"TFDistilBertForMaskedLM"),JTt.forEach(t),w1r=r(kRe," (DistilBERT model)"),kRe.forEach(t),A1r=i(fe),z7=n(fe,"LI",{});var SRe=s(z7);L2e=n(SRe,"STRONG",{});var YTt=s(L2e);y1r=r(YTt,"electra"),YTt.forEach(t),L1r=r(SRe," \u2014 "),UQ=n(SRe,"A",{href:!0});var KTt=s(UQ);x1r=r(KTt,"TFElectraForMaskedLM"),KTt.forEach(t),$1r=r(SRe," (ELECTRA model)"),SRe.forEach(t),k1r=i(fe),W7=n(fe,"LI",{});var RRe=s(W7);x2e=n(RRe,"STRONG",{});var ZTt=s(x2e);S1r=r(ZTt,"flaubert"),ZTt.forEach(t),R1r=r(RRe," \u2014 "),JQ=n(RRe,"A",{href:!0});var e7t=s(JQ);P1r=r(e7t,"TFFlaubertWithLMHeadModel"),e7t.forEach(t),B1r=r(RRe," (FlauBERT model)"),RRe.forEach(t),I1r=i(fe),Q7=n(fe,"LI",{});var PRe=s(Q7);$2e=n(PRe,"STRONG",{});var o7t=s($2e);q1r=r(o7t,"funnel"),o7t.forEach(t),N1r=r(PRe," \u2014 "),YQ=n(PRe,"A",{href:!0});var r7t=s(YQ);j1r=r(r7t,"TFFunnelForMaskedLM"),r7t.forEach(t),D1r=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),G1r=i(fe),H7=n(fe,"LI",{});var BRe=s(H7);k2e=n(BRe,"STRONG",{});var t7t=s(k2e);O1r=r(t7t,"layoutlm"),t7t.forEach(t),V1r=r(BRe," \u2014 "),KQ=n(BRe,"A",{href:!0});var a7t=s(KQ);X1r=r(a7t,"TFLayoutLMForMaskedLM"),a7t.forEach(t),z1r=r(BRe," (LayoutLM model)"),BRe.forEach(t),W1r=i(fe),U7=n(fe,"LI",{});var IRe=s(U7);S2e=n(IRe,"STRONG",{});var n7t=s(S2e);Q1r=r(n7t,"longformer"),n7t.forEach(t),H1r=r(IRe," \u2014 "),ZQ=n(IRe,"A",{href:!0});var s7t=s(ZQ);U1r=r(s7t,"TFLongformerForMaskedLM"),s7t.forEach(t),J1r=r(IRe," (Longformer model)"),IRe.forEach(t),Y1r=i(fe),J7=n(fe,"LI",{});var qRe=s(J7);R2e=n(qRe,"STRONG",{});var l7t=s(R2e);K1r=r(l7t,"mobilebert"),l7t.forEach(t),Z1r=r(qRe," \u2014 "),eH=n(qRe,"A",{href:!0});var i7t=s(eH);ebr=r(i7t,"TFMobileBertForMaskedLM"),i7t.forEach(t),obr=r(qRe," (MobileBERT model)"),qRe.forEach(t),rbr=i(fe),Y7=n(fe,"LI",{});var NRe=s(Y7);P2e=n(NRe,"STRONG",{});var d7t=s(P2e);tbr=r(d7t,"mpnet"),d7t.forEach(t),abr=r(NRe," \u2014 "),oH=n(NRe,"A",{href:!0});var c7t=s(oH);nbr=r(c7t,"TFMPNetForMaskedLM"),c7t.forEach(t),sbr=r(NRe," (MPNet model)"),NRe.forEach(t),lbr=i(fe),K7=n(fe,"LI",{});var jRe=s(K7);B2e=n(jRe,"STRONG",{});var f7t=s(B2e);ibr=r(f7t,"rembert"),f7t.forEach(t),dbr=r(jRe," \u2014 "),rH=n(jRe,"A",{href:!0});var m7t=s(rH);cbr=r(m7t,"TFRemBertForMaskedLM"),m7t.forEach(t),fbr=r(jRe," (RemBERT model)"),jRe.forEach(t),mbr=i(fe),Z7=n(fe,"LI",{});var DRe=s(Z7);I2e=n(DRe,"STRONG",{});var g7t=s(I2e);gbr=r(g7t,"roberta"),g7t.forEach(t),hbr=r(DRe," \u2014 "),tH=n(DRe,"A",{href:!0});var h7t=s(tH);pbr=r(h7t,"TFRobertaForMaskedLM"),h7t.forEach(t),ubr=r(DRe," (RoBERTa model)"),DRe.forEach(t),_br=i(fe),eM=n(fe,"LI",{});var GRe=s(eM);q2e=n(GRe,"STRONG",{});var p7t=s(q2e);bbr=r(p7t,"roformer"),p7t.forEach(t),vbr=r(GRe," \u2014 "),aH=n(GRe,"A",{href:!0});var u7t=s(aH);Fbr=r(u7t,"TFRoFormerForMaskedLM"),u7t.forEach(t),Tbr=r(GRe," (RoFormer model)"),GRe.forEach(t),Mbr=i(fe),oM=n(fe,"LI",{});var ORe=s(oM);N2e=n(ORe,"STRONG",{});var _7t=s(N2e);Ebr=r(_7t,"tapas"),_7t.forEach(t),Cbr=r(ORe," \u2014 "),nH=n(ORe,"A",{href:!0});var b7t=s(nH);wbr=r(b7t,"TFTapasForMaskedLM"),b7t.forEach(t),Abr=r(ORe," (TAPAS model)"),ORe.forEach(t),ybr=i(fe),rM=n(fe,"LI",{});var VRe=s(rM);j2e=n(VRe,"STRONG",{});var v7t=s(j2e);Lbr=r(v7t,"xlm"),v7t.forEach(t),xbr=r(VRe," \u2014 "),sH=n(VRe,"A",{href:!0});var F7t=s(sH);$br=r(F7t,"TFXLMWithLMHeadModel"),F7t.forEach(t),kbr=r(VRe," (XLM model)"),VRe.forEach(t),Sbr=i(fe),tM=n(fe,"LI",{});var XRe=s(tM);D2e=n(XRe,"STRONG",{});var T7t=s(D2e);Rbr=r(T7t,"xlm-roberta"),T7t.forEach(t),Pbr=r(XRe," \u2014 "),lH=n(XRe,"A",{href:!0});var M7t=s(lH);Bbr=r(M7t,"TFXLMRobertaForMaskedLM"),M7t.forEach(t),Ibr=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),fe.forEach(t),qbr=i(Ml),T(aM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),QNe=i(f),rc=n(f,"H2",{class:!0});var ZDe=s(rc);nM=n(ZDe,"A",{id:!0,class:!0,href:!0});var E7t=s(nM);G2e=n(E7t,"SPAN",{});var C7t=s(G2e);T(L8.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),Nbr=i(ZDe),O2e=n(ZDe,"SPAN",{});var w7t=s(O2e);jbr=r(w7t,"TFAutoModelForSeq2SeqLM"),w7t.forEach(t),ZDe.forEach(t),HNe=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(x8.$$.fragment,El),Dbr=i(El),tc=n(El,"P",{});var iee=s(tc);Gbr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=n(iee,"A",{href:!0});var A7t=s(iH);Obr=r(A7t,"from_pretrained()"),A7t.forEach(t),Vbr=r(iee," class method or the "),dH=n(iee,"A",{href:!0});var y7t=s(dH);Xbr=r(y7t,"from_config()"),y7t.forEach(t),zbr=r(iee,` class
method.`),iee.forEach(t),Wbr=i(El),$8=n(El,"P",{});var eGe=s($8);Qbr=r(eGe,"This class cannot be instantiated directly using "),V2e=n(eGe,"CODE",{});var L7t=s(V2e);Hbr=r(L7t,"__init__()"),L7t.forEach(t),Ubr=r(eGe," (throws an error)."),eGe.forEach(t),Jbr=i(El),St=n(El,"DIV",{class:!0});var $w=s(St);T(k8.$$.fragment,$w),Ybr=i($w),X2e=n($w,"P",{});var x7t=s(X2e);Kbr=r(x7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x7t.forEach(t),Zbr=i($w),ac=n($w,"P",{});var dee=s(ac);e2r=r(dee,`Note:
Loading a model from its configuration file does `),z2e=n(dee,"STRONG",{});var $7t=s(z2e);o2r=r($7t,"not"),$7t.forEach(t),r2r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(dee,"A",{href:!0});var k7t=s(cH);t2r=r(k7t,"from_pretrained()"),k7t.forEach(t),a2r=r(dee," to load the model weights."),dee.forEach(t),n2r=i($w),T(sM.$$.fragment,$w),$w.forEach(t),s2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(S8.$$.fragment,Cl),l2r=i(Cl),W2e=n(Cl,"P",{});var S7t=s(W2e);i2r=r(S7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S7t.forEach(t),d2r=i(Cl),an=n(Cl,"P",{});var kw=s(an);c2r=r(kw,"The model class to instantiate is selected based on the "),Q2e=n(kw,"CODE",{});var R7t=s(Q2e);f2r=r(R7t,"model_type"),R7t.forEach(t),m2r=r(kw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(kw,"CODE",{});var P7t=s(H2e);g2r=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),h2r=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(kw,"CODE",{});var B7t=s(U2e);p2r=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),u2r=r(kw,":"),kw.forEach(t),_2r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);lM=n(Be,"LI",{});var zRe=s(lM);J2e=n(zRe,"STRONG",{});var I7t=s(J2e);b2r=r(I7t,"bart"),I7t.forEach(t),v2r=r(zRe," \u2014 "),fH=n(zRe,"A",{href:!0});var q7t=s(fH);F2r=r(q7t,"TFBartForConditionalGeneration"),q7t.forEach(t),T2r=r(zRe," (BART model)"),zRe.forEach(t),M2r=i(Be),iM=n(Be,"LI",{});var WRe=s(iM);Y2e=n(WRe,"STRONG",{});var N7t=s(Y2e);E2r=r(N7t,"blenderbot"),N7t.forEach(t),C2r=r(WRe," \u2014 "),mH=n(WRe,"A",{href:!0});var j7t=s(mH);w2r=r(j7t,"TFBlenderbotForConditionalGeneration"),j7t.forEach(t),A2r=r(WRe," (Blenderbot model)"),WRe.forEach(t),y2r=i(Be),dM=n(Be,"LI",{});var QRe=s(dM);K2e=n(QRe,"STRONG",{});var D7t=s(K2e);L2r=r(D7t,"blenderbot-small"),D7t.forEach(t),x2r=r(QRe," \u2014 "),gH=n(QRe,"A",{href:!0});var G7t=s(gH);$2r=r(G7t,"TFBlenderbotSmallForConditionalGeneration"),G7t.forEach(t),k2r=r(QRe," (BlenderbotSmall model)"),QRe.forEach(t),S2r=i(Be),cM=n(Be,"LI",{});var HRe=s(cM);Z2e=n(HRe,"STRONG",{});var O7t=s(Z2e);R2r=r(O7t,"encoder-decoder"),O7t.forEach(t),P2r=r(HRe," \u2014 "),hH=n(HRe,"A",{href:!0});var V7t=s(hH);B2r=r(V7t,"TFEncoderDecoderModel"),V7t.forEach(t),I2r=r(HRe," (Encoder decoder model)"),HRe.forEach(t),q2r=i(Be),fM=n(Be,"LI",{});var URe=s(fM);eve=n(URe,"STRONG",{});var X7t=s(eve);N2r=r(X7t,"led"),X7t.forEach(t),j2r=r(URe," \u2014 "),pH=n(URe,"A",{href:!0});var z7t=s(pH);D2r=r(z7t,"TFLEDForConditionalGeneration"),z7t.forEach(t),G2r=r(URe," (LED model)"),URe.forEach(t),O2r=i(Be),mM=n(Be,"LI",{});var JRe=s(mM);ove=n(JRe,"STRONG",{});var W7t=s(ove);V2r=r(W7t,"marian"),W7t.forEach(t),X2r=r(JRe," \u2014 "),uH=n(JRe,"A",{href:!0});var Q7t=s(uH);z2r=r(Q7t,"TFMarianMTModel"),Q7t.forEach(t),W2r=r(JRe," (Marian model)"),JRe.forEach(t),Q2r=i(Be),gM=n(Be,"LI",{});var YRe=s(gM);rve=n(YRe,"STRONG",{});var H7t=s(rve);H2r=r(H7t,"mbart"),H7t.forEach(t),U2r=r(YRe," \u2014 "),_H=n(YRe,"A",{href:!0});var U7t=s(_H);J2r=r(U7t,"TFMBartForConditionalGeneration"),U7t.forEach(t),Y2r=r(YRe," (mBART model)"),YRe.forEach(t),K2r=i(Be),hM=n(Be,"LI",{});var KRe=s(hM);tve=n(KRe,"STRONG",{});var J7t=s(tve);Z2r=r(J7t,"mt5"),J7t.forEach(t),evr=r(KRe," \u2014 "),bH=n(KRe,"A",{href:!0});var Y7t=s(bH);ovr=r(Y7t,"TFMT5ForConditionalGeneration"),Y7t.forEach(t),rvr=r(KRe," (mT5 model)"),KRe.forEach(t),tvr=i(Be),pM=n(Be,"LI",{});var ZRe=s(pM);ave=n(ZRe,"STRONG",{});var K7t=s(ave);avr=r(K7t,"pegasus"),K7t.forEach(t),nvr=r(ZRe," \u2014 "),vH=n(ZRe,"A",{href:!0});var Z7t=s(vH);svr=r(Z7t,"TFPegasusForConditionalGeneration"),Z7t.forEach(t),lvr=r(ZRe," (Pegasus model)"),ZRe.forEach(t),ivr=i(Be),uM=n(Be,"LI",{});var ePe=s(uM);nve=n(ePe,"STRONG",{});var eMt=s(nve);dvr=r(eMt,"t5"),eMt.forEach(t),cvr=r(ePe," \u2014 "),FH=n(ePe,"A",{href:!0});var oMt=s(FH);fvr=r(oMt,"TFT5ForConditionalGeneration"),oMt.forEach(t),mvr=r(ePe," (T5 model)"),ePe.forEach(t),Be.forEach(t),gvr=i(Cl),T(_M.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),UNe=i(f),nc=n(f,"H2",{class:!0});var oGe=s(nc);bM=n(oGe,"A",{id:!0,class:!0,href:!0});var rMt=s(bM);sve=n(rMt,"SPAN",{});var tMt=s(sve);T(R8.$$.fragment,tMt),tMt.forEach(t),rMt.forEach(t),hvr=i(oGe),lve=n(oGe,"SPAN",{});var aMt=s(lve);pvr=r(aMt,"TFAutoModelForSequenceClassification"),aMt.forEach(t),oGe.forEach(t),JNe=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(P8.$$.fragment,wl),uvr=i(wl),sc=n(wl,"P",{});var cee=s(sc);_vr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TH=n(cee,"A",{href:!0});var nMt=s(TH);bvr=r(nMt,"from_pretrained()"),nMt.forEach(t),vvr=r(cee," class method or the "),MH=n(cee,"A",{href:!0});var sMt=s(MH);Fvr=r(sMt,"from_config()"),sMt.forEach(t),Tvr=r(cee,` class
method.`),cee.forEach(t),Mvr=i(wl),B8=n(wl,"P",{});var rGe=s(B8);Evr=r(rGe,"This class cannot be instantiated directly using "),ive=n(rGe,"CODE",{});var lMt=s(ive);Cvr=r(lMt,"__init__()"),lMt.forEach(t),wvr=r(rGe," (throws an error)."),rGe.forEach(t),Avr=i(wl),Rt=n(wl,"DIV",{class:!0});var Sw=s(Rt);T(I8.$$.fragment,Sw),yvr=i(Sw),dve=n(Sw,"P",{});var iMt=s(dve);Lvr=r(iMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iMt.forEach(t),xvr=i(Sw),lc=n(Sw,"P",{});var fee=s(lc);$vr=r(fee,`Note:
Loading a model from its configuration file does `),cve=n(fee,"STRONG",{});var dMt=s(cve);kvr=r(dMt,"not"),dMt.forEach(t),Svr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(fee,"A",{href:!0});var cMt=s(EH);Rvr=r(cMt,"from_pretrained()"),cMt.forEach(t),Pvr=r(fee," to load the model weights."),fee.forEach(t),Bvr=i(Sw),T(vM.$$.fragment,Sw),Sw.forEach(t),Ivr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(q8.$$.fragment,Al),qvr=i(Al),fve=n(Al,"P",{});var fMt=s(fve);Nvr=r(fMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fMt.forEach(t),jvr=i(Al),nn=n(Al,"P",{});var Rw=s(nn);Dvr=r(Rw,"The model class to instantiate is selected based on the "),mve=n(Rw,"CODE",{});var mMt=s(mve);Gvr=r(mMt,"model_type"),mMt.forEach(t),Ovr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),gve=n(Rw,"CODE",{});var gMt=s(gve);Vvr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),Xvr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(Rw,"CODE",{});var hMt=s(hve);zvr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),Wvr=r(Rw,":"),Rw.forEach(t),Qvr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);FM=n(ae,"LI",{});var oPe=s(FM);pve=n(oPe,"STRONG",{});var pMt=s(pve);Hvr=r(pMt,"albert"),pMt.forEach(t),Uvr=r(oPe," \u2014 "),CH=n(oPe,"A",{href:!0});var uMt=s(CH);Jvr=r(uMt,"TFAlbertForSequenceClassification"),uMt.forEach(t),Yvr=r(oPe," (ALBERT model)"),oPe.forEach(t),Kvr=i(ae),TM=n(ae,"LI",{});var rPe=s(TM);uve=n(rPe,"STRONG",{});var _Mt=s(uve);Zvr=r(_Mt,"bert"),_Mt.forEach(t),eFr=r(rPe," \u2014 "),wH=n(rPe,"A",{href:!0});var bMt=s(wH);oFr=r(bMt,"TFBertForSequenceClassification"),bMt.forEach(t),rFr=r(rPe," (BERT model)"),rPe.forEach(t),tFr=i(ae),MM=n(ae,"LI",{});var tPe=s(MM);_ve=n(tPe,"STRONG",{});var vMt=s(_ve);aFr=r(vMt,"camembert"),vMt.forEach(t),nFr=r(tPe," \u2014 "),AH=n(tPe,"A",{href:!0});var FMt=s(AH);sFr=r(FMt,"TFCamembertForSequenceClassification"),FMt.forEach(t),lFr=r(tPe," (CamemBERT model)"),tPe.forEach(t),iFr=i(ae),EM=n(ae,"LI",{});var aPe=s(EM);bve=n(aPe,"STRONG",{});var TMt=s(bve);dFr=r(TMt,"convbert"),TMt.forEach(t),cFr=r(aPe," \u2014 "),yH=n(aPe,"A",{href:!0});var MMt=s(yH);fFr=r(MMt,"TFConvBertForSequenceClassification"),MMt.forEach(t),mFr=r(aPe," (ConvBERT model)"),aPe.forEach(t),gFr=i(ae),CM=n(ae,"LI",{});var nPe=s(CM);vve=n(nPe,"STRONG",{});var EMt=s(vve);hFr=r(EMt,"ctrl"),EMt.forEach(t),pFr=r(nPe," \u2014 "),LH=n(nPe,"A",{href:!0});var CMt=s(LH);uFr=r(CMt,"TFCTRLForSequenceClassification"),CMt.forEach(t),_Fr=r(nPe," (CTRL model)"),nPe.forEach(t),bFr=i(ae),wM=n(ae,"LI",{});var sPe=s(wM);Fve=n(sPe,"STRONG",{});var wMt=s(Fve);vFr=r(wMt,"deberta"),wMt.forEach(t),FFr=r(sPe," \u2014 "),xH=n(sPe,"A",{href:!0});var AMt=s(xH);TFr=r(AMt,"TFDebertaForSequenceClassification"),AMt.forEach(t),MFr=r(sPe," (DeBERTa model)"),sPe.forEach(t),EFr=i(ae),AM=n(ae,"LI",{});var lPe=s(AM);Tve=n(lPe,"STRONG",{});var yMt=s(Tve);CFr=r(yMt,"deberta-v2"),yMt.forEach(t),wFr=r(lPe," \u2014 "),$H=n(lPe,"A",{href:!0});var LMt=s($H);AFr=r(LMt,"TFDebertaV2ForSequenceClassification"),LMt.forEach(t),yFr=r(lPe," (DeBERTa-v2 model)"),lPe.forEach(t),LFr=i(ae),yM=n(ae,"LI",{});var iPe=s(yM);Mve=n(iPe,"STRONG",{});var xMt=s(Mve);xFr=r(xMt,"distilbert"),xMt.forEach(t),$Fr=r(iPe," \u2014 "),kH=n(iPe,"A",{href:!0});var $Mt=s(kH);kFr=r($Mt,"TFDistilBertForSequenceClassification"),$Mt.forEach(t),SFr=r(iPe," (DistilBERT model)"),iPe.forEach(t),RFr=i(ae),LM=n(ae,"LI",{});var dPe=s(LM);Eve=n(dPe,"STRONG",{});var kMt=s(Eve);PFr=r(kMt,"electra"),kMt.forEach(t),BFr=r(dPe," \u2014 "),SH=n(dPe,"A",{href:!0});var SMt=s(SH);IFr=r(SMt,"TFElectraForSequenceClassification"),SMt.forEach(t),qFr=r(dPe," (ELECTRA model)"),dPe.forEach(t),NFr=i(ae),xM=n(ae,"LI",{});var cPe=s(xM);Cve=n(cPe,"STRONG",{});var RMt=s(Cve);jFr=r(RMt,"flaubert"),RMt.forEach(t),DFr=r(cPe," \u2014 "),RH=n(cPe,"A",{href:!0});var PMt=s(RH);GFr=r(PMt,"TFFlaubertForSequenceClassification"),PMt.forEach(t),OFr=r(cPe," (FlauBERT model)"),cPe.forEach(t),VFr=i(ae),$M=n(ae,"LI",{});var fPe=s($M);wve=n(fPe,"STRONG",{});var BMt=s(wve);XFr=r(BMt,"funnel"),BMt.forEach(t),zFr=r(fPe," \u2014 "),PH=n(fPe,"A",{href:!0});var IMt=s(PH);WFr=r(IMt,"TFFunnelForSequenceClassification"),IMt.forEach(t),QFr=r(fPe," (Funnel Transformer model)"),fPe.forEach(t),HFr=i(ae),kM=n(ae,"LI",{});var mPe=s(kM);Ave=n(mPe,"STRONG",{});var qMt=s(Ave);UFr=r(qMt,"gpt2"),qMt.forEach(t),JFr=r(mPe," \u2014 "),BH=n(mPe,"A",{href:!0});var NMt=s(BH);YFr=r(NMt,"TFGPT2ForSequenceClassification"),NMt.forEach(t),KFr=r(mPe," (OpenAI GPT-2 model)"),mPe.forEach(t),ZFr=i(ae),SM=n(ae,"LI",{});var gPe=s(SM);yve=n(gPe,"STRONG",{});var jMt=s(yve);e6r=r(jMt,"gptj"),jMt.forEach(t),o6r=r(gPe," \u2014 "),IH=n(gPe,"A",{href:!0});var DMt=s(IH);r6r=r(DMt,"TFGPTJForSequenceClassification"),DMt.forEach(t),t6r=r(gPe," (GPT-J model)"),gPe.forEach(t),a6r=i(ae),RM=n(ae,"LI",{});var hPe=s(RM);Lve=n(hPe,"STRONG",{});var GMt=s(Lve);n6r=r(GMt,"layoutlm"),GMt.forEach(t),s6r=r(hPe," \u2014 "),qH=n(hPe,"A",{href:!0});var OMt=s(qH);l6r=r(OMt,"TFLayoutLMForSequenceClassification"),OMt.forEach(t),i6r=r(hPe," (LayoutLM model)"),hPe.forEach(t),d6r=i(ae),PM=n(ae,"LI",{});var pPe=s(PM);xve=n(pPe,"STRONG",{});var VMt=s(xve);c6r=r(VMt,"longformer"),VMt.forEach(t),f6r=r(pPe," \u2014 "),NH=n(pPe,"A",{href:!0});var XMt=s(NH);m6r=r(XMt,"TFLongformerForSequenceClassification"),XMt.forEach(t),g6r=r(pPe," (Longformer model)"),pPe.forEach(t),h6r=i(ae),BM=n(ae,"LI",{});var uPe=s(BM);$ve=n(uPe,"STRONG",{});var zMt=s($ve);p6r=r(zMt,"mobilebert"),zMt.forEach(t),u6r=r(uPe," \u2014 "),jH=n(uPe,"A",{href:!0});var WMt=s(jH);_6r=r(WMt,"TFMobileBertForSequenceClassification"),WMt.forEach(t),b6r=r(uPe," (MobileBERT model)"),uPe.forEach(t),v6r=i(ae),IM=n(ae,"LI",{});var _Pe=s(IM);kve=n(_Pe,"STRONG",{});var QMt=s(kve);F6r=r(QMt,"mpnet"),QMt.forEach(t),T6r=r(_Pe," \u2014 "),DH=n(_Pe,"A",{href:!0});var HMt=s(DH);M6r=r(HMt,"TFMPNetForSequenceClassification"),HMt.forEach(t),E6r=r(_Pe," (MPNet model)"),_Pe.forEach(t),C6r=i(ae),qM=n(ae,"LI",{});var bPe=s(qM);Sve=n(bPe,"STRONG",{});var UMt=s(Sve);w6r=r(UMt,"openai-gpt"),UMt.forEach(t),A6r=r(bPe," \u2014 "),GH=n(bPe,"A",{href:!0});var JMt=s(GH);y6r=r(JMt,"TFOpenAIGPTForSequenceClassification"),JMt.forEach(t),L6r=r(bPe," (OpenAI GPT model)"),bPe.forEach(t),x6r=i(ae),NM=n(ae,"LI",{});var vPe=s(NM);Rve=n(vPe,"STRONG",{});var YMt=s(Rve);$6r=r(YMt,"rembert"),YMt.forEach(t),k6r=r(vPe," \u2014 "),OH=n(vPe,"A",{href:!0});var KMt=s(OH);S6r=r(KMt,"TFRemBertForSequenceClassification"),KMt.forEach(t),R6r=r(vPe," (RemBERT model)"),vPe.forEach(t),P6r=i(ae),jM=n(ae,"LI",{});var FPe=s(jM);Pve=n(FPe,"STRONG",{});var ZMt=s(Pve);B6r=r(ZMt,"roberta"),ZMt.forEach(t),I6r=r(FPe," \u2014 "),VH=n(FPe,"A",{href:!0});var e4t=s(VH);q6r=r(e4t,"TFRobertaForSequenceClassification"),e4t.forEach(t),N6r=r(FPe," (RoBERTa model)"),FPe.forEach(t),j6r=i(ae),DM=n(ae,"LI",{});var TPe=s(DM);Bve=n(TPe,"STRONG",{});var o4t=s(Bve);D6r=r(o4t,"roformer"),o4t.forEach(t),G6r=r(TPe," \u2014 "),XH=n(TPe,"A",{href:!0});var r4t=s(XH);O6r=r(r4t,"TFRoFormerForSequenceClassification"),r4t.forEach(t),V6r=r(TPe," (RoFormer model)"),TPe.forEach(t),X6r=i(ae),GM=n(ae,"LI",{});var MPe=s(GM);Ive=n(MPe,"STRONG",{});var t4t=s(Ive);z6r=r(t4t,"tapas"),t4t.forEach(t),W6r=r(MPe," \u2014 "),zH=n(MPe,"A",{href:!0});var a4t=s(zH);Q6r=r(a4t,"TFTapasForSequenceClassification"),a4t.forEach(t),H6r=r(MPe," (TAPAS model)"),MPe.forEach(t),U6r=i(ae),OM=n(ae,"LI",{});var EPe=s(OM);qve=n(EPe,"STRONG",{});var n4t=s(qve);J6r=r(n4t,"transfo-xl"),n4t.forEach(t),Y6r=r(EPe," \u2014 "),WH=n(EPe,"A",{href:!0});var s4t=s(WH);K6r=r(s4t,"TFTransfoXLForSequenceClassification"),s4t.forEach(t),Z6r=r(EPe," (Transformer-XL model)"),EPe.forEach(t),eTr=i(ae),VM=n(ae,"LI",{});var CPe=s(VM);Nve=n(CPe,"STRONG",{});var l4t=s(Nve);oTr=r(l4t,"xlm"),l4t.forEach(t),rTr=r(CPe," \u2014 "),QH=n(CPe,"A",{href:!0});var i4t=s(QH);tTr=r(i4t,"TFXLMForSequenceClassification"),i4t.forEach(t),aTr=r(CPe," (XLM model)"),CPe.forEach(t),nTr=i(ae),XM=n(ae,"LI",{});var wPe=s(XM);jve=n(wPe,"STRONG",{});var d4t=s(jve);sTr=r(d4t,"xlm-roberta"),d4t.forEach(t),lTr=r(wPe," \u2014 "),HH=n(wPe,"A",{href:!0});var c4t=s(HH);iTr=r(c4t,"TFXLMRobertaForSequenceClassification"),c4t.forEach(t),dTr=r(wPe," (XLM-RoBERTa model)"),wPe.forEach(t),cTr=i(ae),zM=n(ae,"LI",{});var APe=s(zM);Dve=n(APe,"STRONG",{});var f4t=s(Dve);fTr=r(f4t,"xlnet"),f4t.forEach(t),mTr=r(APe," \u2014 "),UH=n(APe,"A",{href:!0});var m4t=s(UH);gTr=r(m4t,"TFXLNetForSequenceClassification"),m4t.forEach(t),hTr=r(APe," (XLNet model)"),APe.forEach(t),ae.forEach(t),pTr=i(Al),T(WM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),YNe=i(f),ic=n(f,"H2",{class:!0});var tGe=s(ic);QM=n(tGe,"A",{id:!0,class:!0,href:!0});var g4t=s(QM);Gve=n(g4t,"SPAN",{});var h4t=s(Gve);T(N8.$$.fragment,h4t),h4t.forEach(t),g4t.forEach(t),uTr=i(tGe),Ove=n(tGe,"SPAN",{});var p4t=s(Ove);_Tr=r(p4t,"TFAutoModelForMultipleChoice"),p4t.forEach(t),tGe.forEach(t),KNe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(j8.$$.fragment,yl),bTr=i(yl),dc=n(yl,"P",{});var mee=s(dc);vTr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JH=n(mee,"A",{href:!0});var u4t=s(JH);FTr=r(u4t,"from_pretrained()"),u4t.forEach(t),TTr=r(mee," class method or the "),YH=n(mee,"A",{href:!0});var _4t=s(YH);MTr=r(_4t,"from_config()"),_4t.forEach(t),ETr=r(mee,` class
method.`),mee.forEach(t),CTr=i(yl),D8=n(yl,"P",{});var aGe=s(D8);wTr=r(aGe,"This class cannot be instantiated directly using "),Vve=n(aGe,"CODE",{});var b4t=s(Vve);ATr=r(b4t,"__init__()"),b4t.forEach(t),yTr=r(aGe," (throws an error)."),aGe.forEach(t),LTr=i(yl),Pt=n(yl,"DIV",{class:!0});var Pw=s(Pt);T(G8.$$.fragment,Pw),xTr=i(Pw),Xve=n(Pw,"P",{});var v4t=s(Xve);$Tr=r(v4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v4t.forEach(t),kTr=i(Pw),cc=n(Pw,"P",{});var gee=s(cc);STr=r(gee,`Note:
Loading a model from its configuration file does `),zve=n(gee,"STRONG",{});var F4t=s(zve);RTr=r(F4t,"not"),F4t.forEach(t),PTr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(gee,"A",{href:!0});var T4t=s(KH);BTr=r(T4t,"from_pretrained()"),T4t.forEach(t),ITr=r(gee," to load the model weights."),gee.forEach(t),qTr=i(Pw),T(HM.$$.fragment,Pw),Pw.forEach(t),NTr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(O8.$$.fragment,Ll),jTr=i(Ll),Wve=n(Ll,"P",{});var M4t=s(Wve);DTr=r(M4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M4t.forEach(t),GTr=i(Ll),sn=n(Ll,"P",{});var Bw=s(sn);OTr=r(Bw,"The model class to instantiate is selected based on the "),Qve=n(Bw,"CODE",{});var E4t=s(Qve);VTr=r(E4t,"model_type"),E4t.forEach(t),XTr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Hve=n(Bw,"CODE",{});var C4t=s(Hve);zTr=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),WTr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(Bw,"CODE",{});var w4t=s(Uve);QTr=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),HTr=r(Bw,":"),Bw.forEach(t),UTr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);UM=n(be,"LI",{});var yPe=s(UM);Jve=n(yPe,"STRONG",{});var A4t=s(Jve);JTr=r(A4t,"albert"),A4t.forEach(t),YTr=r(yPe," \u2014 "),ZH=n(yPe,"A",{href:!0});var y4t=s(ZH);KTr=r(y4t,"TFAlbertForMultipleChoice"),y4t.forEach(t),ZTr=r(yPe," (ALBERT model)"),yPe.forEach(t),e7r=i(be),JM=n(be,"LI",{});var LPe=s(JM);Yve=n(LPe,"STRONG",{});var L4t=s(Yve);o7r=r(L4t,"bert"),L4t.forEach(t),r7r=r(LPe," \u2014 "),eU=n(LPe,"A",{href:!0});var x4t=s(eU);t7r=r(x4t,"TFBertForMultipleChoice"),x4t.forEach(t),a7r=r(LPe," (BERT model)"),LPe.forEach(t),n7r=i(be),YM=n(be,"LI",{});var xPe=s(YM);Kve=n(xPe,"STRONG",{});var $4t=s(Kve);s7r=r($4t,"camembert"),$4t.forEach(t),l7r=r(xPe," \u2014 "),oU=n(xPe,"A",{href:!0});var k4t=s(oU);i7r=r(k4t,"TFCamembertForMultipleChoice"),k4t.forEach(t),d7r=r(xPe," (CamemBERT model)"),xPe.forEach(t),c7r=i(be),KM=n(be,"LI",{});var $Pe=s(KM);Zve=n($Pe,"STRONG",{});var S4t=s(Zve);f7r=r(S4t,"convbert"),S4t.forEach(t),m7r=r($Pe," \u2014 "),rU=n($Pe,"A",{href:!0});var R4t=s(rU);g7r=r(R4t,"TFConvBertForMultipleChoice"),R4t.forEach(t),h7r=r($Pe," (ConvBERT model)"),$Pe.forEach(t),p7r=i(be),ZM=n(be,"LI",{});var kPe=s(ZM);eFe=n(kPe,"STRONG",{});var P4t=s(eFe);u7r=r(P4t,"distilbert"),P4t.forEach(t),_7r=r(kPe," \u2014 "),tU=n(kPe,"A",{href:!0});var B4t=s(tU);b7r=r(B4t,"TFDistilBertForMultipleChoice"),B4t.forEach(t),v7r=r(kPe," (DistilBERT model)"),kPe.forEach(t),F7r=i(be),e4=n(be,"LI",{});var SPe=s(e4);oFe=n(SPe,"STRONG",{});var I4t=s(oFe);T7r=r(I4t,"electra"),I4t.forEach(t),M7r=r(SPe," \u2014 "),aU=n(SPe,"A",{href:!0});var q4t=s(aU);E7r=r(q4t,"TFElectraForMultipleChoice"),q4t.forEach(t),C7r=r(SPe," (ELECTRA model)"),SPe.forEach(t),w7r=i(be),o4=n(be,"LI",{});var RPe=s(o4);rFe=n(RPe,"STRONG",{});var N4t=s(rFe);A7r=r(N4t,"flaubert"),N4t.forEach(t),y7r=r(RPe," \u2014 "),nU=n(RPe,"A",{href:!0});var j4t=s(nU);L7r=r(j4t,"TFFlaubertForMultipleChoice"),j4t.forEach(t),x7r=r(RPe," (FlauBERT model)"),RPe.forEach(t),$7r=i(be),r4=n(be,"LI",{});var PPe=s(r4);tFe=n(PPe,"STRONG",{});var D4t=s(tFe);k7r=r(D4t,"funnel"),D4t.forEach(t),S7r=r(PPe," \u2014 "),sU=n(PPe,"A",{href:!0});var G4t=s(sU);R7r=r(G4t,"TFFunnelForMultipleChoice"),G4t.forEach(t),P7r=r(PPe," (Funnel Transformer model)"),PPe.forEach(t),B7r=i(be),t4=n(be,"LI",{});var BPe=s(t4);aFe=n(BPe,"STRONG",{});var O4t=s(aFe);I7r=r(O4t,"longformer"),O4t.forEach(t),q7r=r(BPe," \u2014 "),lU=n(BPe,"A",{href:!0});var V4t=s(lU);N7r=r(V4t,"TFLongformerForMultipleChoice"),V4t.forEach(t),j7r=r(BPe," (Longformer model)"),BPe.forEach(t),D7r=i(be),a4=n(be,"LI",{});var IPe=s(a4);nFe=n(IPe,"STRONG",{});var X4t=s(nFe);G7r=r(X4t,"mobilebert"),X4t.forEach(t),O7r=r(IPe," \u2014 "),iU=n(IPe,"A",{href:!0});var z4t=s(iU);V7r=r(z4t,"TFMobileBertForMultipleChoice"),z4t.forEach(t),X7r=r(IPe," (MobileBERT model)"),IPe.forEach(t),z7r=i(be),n4=n(be,"LI",{});var qPe=s(n4);sFe=n(qPe,"STRONG",{});var W4t=s(sFe);W7r=r(W4t,"mpnet"),W4t.forEach(t),Q7r=r(qPe," \u2014 "),dU=n(qPe,"A",{href:!0});var Q4t=s(dU);H7r=r(Q4t,"TFMPNetForMultipleChoice"),Q4t.forEach(t),U7r=r(qPe," (MPNet model)"),qPe.forEach(t),J7r=i(be),s4=n(be,"LI",{});var NPe=s(s4);lFe=n(NPe,"STRONG",{});var H4t=s(lFe);Y7r=r(H4t,"rembert"),H4t.forEach(t),K7r=r(NPe," \u2014 "),cU=n(NPe,"A",{href:!0});var U4t=s(cU);Z7r=r(U4t,"TFRemBertForMultipleChoice"),U4t.forEach(t),eMr=r(NPe," (RemBERT model)"),NPe.forEach(t),oMr=i(be),l4=n(be,"LI",{});var jPe=s(l4);iFe=n(jPe,"STRONG",{});var J4t=s(iFe);rMr=r(J4t,"roberta"),J4t.forEach(t),tMr=r(jPe," \u2014 "),fU=n(jPe,"A",{href:!0});var Y4t=s(fU);aMr=r(Y4t,"TFRobertaForMultipleChoice"),Y4t.forEach(t),nMr=r(jPe," (RoBERTa model)"),jPe.forEach(t),sMr=i(be),i4=n(be,"LI",{});var DPe=s(i4);dFe=n(DPe,"STRONG",{});var K4t=s(dFe);lMr=r(K4t,"roformer"),K4t.forEach(t),iMr=r(DPe," \u2014 "),mU=n(DPe,"A",{href:!0});var Z4t=s(mU);dMr=r(Z4t,"TFRoFormerForMultipleChoice"),Z4t.forEach(t),cMr=r(DPe," (RoFormer model)"),DPe.forEach(t),fMr=i(be),d4=n(be,"LI",{});var GPe=s(d4);cFe=n(GPe,"STRONG",{});var eEt=s(cFe);mMr=r(eEt,"xlm"),eEt.forEach(t),gMr=r(GPe," \u2014 "),gU=n(GPe,"A",{href:!0});var oEt=s(gU);hMr=r(oEt,"TFXLMForMultipleChoice"),oEt.forEach(t),pMr=r(GPe," (XLM model)"),GPe.forEach(t),uMr=i(be),c4=n(be,"LI",{});var OPe=s(c4);fFe=n(OPe,"STRONG",{});var rEt=s(fFe);_Mr=r(rEt,"xlm-roberta"),rEt.forEach(t),bMr=r(OPe," \u2014 "),hU=n(OPe,"A",{href:!0});var tEt=s(hU);vMr=r(tEt,"TFXLMRobertaForMultipleChoice"),tEt.forEach(t),FMr=r(OPe," (XLM-RoBERTa model)"),OPe.forEach(t),TMr=i(be),f4=n(be,"LI",{});var VPe=s(f4);mFe=n(VPe,"STRONG",{});var aEt=s(mFe);MMr=r(aEt,"xlnet"),aEt.forEach(t),EMr=r(VPe," \u2014 "),pU=n(VPe,"A",{href:!0});var nEt=s(pU);CMr=r(nEt,"TFXLNetForMultipleChoice"),nEt.forEach(t),wMr=r(VPe," (XLNet model)"),VPe.forEach(t),be.forEach(t),AMr=i(Ll),T(m4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),ZNe=i(f),fc=n(f,"H2",{class:!0});var nGe=s(fc);g4=n(nGe,"A",{id:!0,class:!0,href:!0});var sEt=s(g4);gFe=n(sEt,"SPAN",{});var lEt=s(gFe);T(V8.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),yMr=i(nGe),hFe=n(nGe,"SPAN",{});var iEt=s(hFe);LMr=r(iEt,"TFAutoModelForNextSentencePrediction"),iEt.forEach(t),nGe.forEach(t),eje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(X8.$$.fragment,xl),xMr=i(xl),mc=n(xl,"P",{});var hee=s(mc);$Mr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uU=n(hee,"A",{href:!0});var dEt=s(uU);kMr=r(dEt,"from_pretrained()"),dEt.forEach(t),SMr=r(hee," class method or the "),_U=n(hee,"A",{href:!0});var cEt=s(_U);RMr=r(cEt,"from_config()"),cEt.forEach(t),PMr=r(hee,` class
method.`),hee.forEach(t),BMr=i(xl),z8=n(xl,"P",{});var sGe=s(z8);IMr=r(sGe,"This class cannot be instantiated directly using "),pFe=n(sGe,"CODE",{});var fEt=s(pFe);qMr=r(fEt,"__init__()"),fEt.forEach(t),NMr=r(sGe," (throws an error)."),sGe.forEach(t),jMr=i(xl),Bt=n(xl,"DIV",{class:!0});var Iw=s(Bt);T(W8.$$.fragment,Iw),DMr=i(Iw),uFe=n(Iw,"P",{});var mEt=s(uFe);GMr=r(mEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mEt.forEach(t),OMr=i(Iw),gc=n(Iw,"P",{});var pee=s(gc);VMr=r(pee,`Note:
Loading a model from its configuration file does `),_Fe=n(pee,"STRONG",{});var gEt=s(_Fe);XMr=r(gEt,"not"),gEt.forEach(t),zMr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(pee,"A",{href:!0});var hEt=s(bU);WMr=r(hEt,"from_pretrained()"),hEt.forEach(t),QMr=r(pee," to load the model weights."),pee.forEach(t),HMr=i(Iw),T(h4.$$.fragment,Iw),Iw.forEach(t),UMr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(Q8.$$.fragment,$l),JMr=i($l),bFe=n($l,"P",{});var pEt=s(bFe);YMr=r(pEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pEt.forEach(t),KMr=i($l),ln=n($l,"P",{});var qw=s(ln);ZMr=r(qw,"The model class to instantiate is selected based on the "),vFe=n(qw,"CODE",{});var uEt=s(vFe);e4r=r(uEt,"model_type"),uEt.forEach(t),o4r=r(qw,` property of the config object (either
passed as an argument or loaded from `),FFe=n(qw,"CODE",{});var _Et=s(FFe);r4r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),t4r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(qw,"CODE",{});var bEt=s(TFe);a4r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),n4r=r(qw,":"),qw.forEach(t),s4r=i($l),H8=n($l,"UL",{});var lGe=s(H8);p4=n(lGe,"LI",{});var XPe=s(p4);MFe=n(XPe,"STRONG",{});var vEt=s(MFe);l4r=r(vEt,"bert"),vEt.forEach(t),i4r=r(XPe," \u2014 "),vU=n(XPe,"A",{href:!0});var FEt=s(vU);d4r=r(FEt,"TFBertForNextSentencePrediction"),FEt.forEach(t),c4r=r(XPe," (BERT model)"),XPe.forEach(t),f4r=i(lGe),u4=n(lGe,"LI",{});var zPe=s(u4);EFe=n(zPe,"STRONG",{});var TEt=s(EFe);m4r=r(TEt,"mobilebert"),TEt.forEach(t),g4r=r(zPe," \u2014 "),FU=n(zPe,"A",{href:!0});var MEt=s(FU);h4r=r(MEt,"TFMobileBertForNextSentencePrediction"),MEt.forEach(t),p4r=r(zPe," (MobileBERT model)"),zPe.forEach(t),lGe.forEach(t),u4r=i($l),T(_4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),oje=i(f),hc=n(f,"H2",{class:!0});var iGe=s(hc);b4=n(iGe,"A",{id:!0,class:!0,href:!0});var EEt=s(b4);CFe=n(EEt,"SPAN",{});var CEt=s(CFe);T(U8.$$.fragment,CEt),CEt.forEach(t),EEt.forEach(t),_4r=i(iGe),wFe=n(iGe,"SPAN",{});var wEt=s(wFe);b4r=r(wEt,"TFAutoModelForTableQuestionAnswering"),wEt.forEach(t),iGe.forEach(t),rje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(J8.$$.fragment,kl),v4r=i(kl),pc=n(kl,"P",{});var uee=s(pc);F4r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TU=n(uee,"A",{href:!0});var AEt=s(TU);T4r=r(AEt,"from_pretrained()"),AEt.forEach(t),M4r=r(uee," class method or the "),MU=n(uee,"A",{href:!0});var yEt=s(MU);E4r=r(yEt,"from_config()"),yEt.forEach(t),C4r=r(uee,` class
method.`),uee.forEach(t),w4r=i(kl),Y8=n(kl,"P",{});var dGe=s(Y8);A4r=r(dGe,"This class cannot be instantiated directly using "),AFe=n(dGe,"CODE",{});var LEt=s(AFe);y4r=r(LEt,"__init__()"),LEt.forEach(t),L4r=r(dGe," (throws an error)."),dGe.forEach(t),x4r=i(kl),It=n(kl,"DIV",{class:!0});var Nw=s(It);T(K8.$$.fragment,Nw),$4r=i(Nw),yFe=n(Nw,"P",{});var xEt=s(yFe);k4r=r(xEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xEt.forEach(t),S4r=i(Nw),uc=n(Nw,"P",{});var _ee=s(uc);R4r=r(_ee,`Note:
Loading a model from its configuration file does `),LFe=n(_ee,"STRONG",{});var $Et=s(LFe);P4r=r($Et,"not"),$Et.forEach(t),B4r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(_ee,"A",{href:!0});var kEt=s(EU);I4r=r(kEt,"from_pretrained()"),kEt.forEach(t),q4r=r(_ee," to load the model weights."),_ee.forEach(t),N4r=i(Nw),T(v4.$$.fragment,Nw),Nw.forEach(t),j4r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(Z8.$$.fragment,Sl),D4r=i(Sl),xFe=n(Sl,"P",{});var SEt=s(xFe);G4r=r(SEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SEt.forEach(t),O4r=i(Sl),dn=n(Sl,"P",{});var jw=s(dn);V4r=r(jw,"The model class to instantiate is selected based on the "),$Fe=n(jw,"CODE",{});var REt=s($Fe);X4r=r(REt,"model_type"),REt.forEach(t),z4r=r(jw,` property of the config object (either
passed as an argument or loaded from `),kFe=n(jw,"CODE",{});var PEt=s(kFe);W4r=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),Q4r=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(jw,"CODE",{});var BEt=s(SFe);H4r=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),U4r=r(jw,":"),jw.forEach(t),J4r=i(Sl),RFe=n(Sl,"UL",{});var IEt=s(RFe);F4=n(IEt,"LI",{});var WPe=s(F4);PFe=n(WPe,"STRONG",{});var qEt=s(PFe);Y4r=r(qEt,"tapas"),qEt.forEach(t),K4r=r(WPe," \u2014 "),CU=n(WPe,"A",{href:!0});var NEt=s(CU);Z4r=r(NEt,"TFTapasForQuestionAnswering"),NEt.forEach(t),eEr=r(WPe," (TAPAS model)"),WPe.forEach(t),IEt.forEach(t),oEr=i(Sl),T(T4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),tje=i(f),_c=n(f,"H2",{class:!0});var cGe=s(_c);M4=n(cGe,"A",{id:!0,class:!0,href:!0});var jEt=s(M4);BFe=n(jEt,"SPAN",{});var DEt=s(BFe);T(e9.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),rEr=i(cGe),IFe=n(cGe,"SPAN",{});var GEt=s(IFe);tEr=r(GEt,"TFAutoModelForTokenClassification"),GEt.forEach(t),cGe.forEach(t),aje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(o9.$$.fragment,Rl),aEr=i(Rl),bc=n(Rl,"P",{});var bee=s(bc);nEr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wU=n(bee,"A",{href:!0});var OEt=s(wU);sEr=r(OEt,"from_pretrained()"),OEt.forEach(t),lEr=r(bee," class method or the "),AU=n(bee,"A",{href:!0});var VEt=s(AU);iEr=r(VEt,"from_config()"),VEt.forEach(t),dEr=r(bee,` class
method.`),bee.forEach(t),cEr=i(Rl),r9=n(Rl,"P",{});var fGe=s(r9);fEr=r(fGe,"This class cannot be instantiated directly using "),qFe=n(fGe,"CODE",{});var XEt=s(qFe);mEr=r(XEt,"__init__()"),XEt.forEach(t),gEr=r(fGe," (throws an error)."),fGe.forEach(t),hEr=i(Rl),qt=n(Rl,"DIV",{class:!0});var Dw=s(qt);T(t9.$$.fragment,Dw),pEr=i(Dw),NFe=n(Dw,"P",{});var zEt=s(NFe);uEr=r(zEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zEt.forEach(t),_Er=i(Dw),vc=n(Dw,"P",{});var vee=s(vc);bEr=r(vee,`Note:
Loading a model from its configuration file does `),jFe=n(vee,"STRONG",{});var WEt=s(jFe);vEr=r(WEt,"not"),WEt.forEach(t),FEr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(vee,"A",{href:!0});var QEt=s(yU);TEr=r(QEt,"from_pretrained()"),QEt.forEach(t),MEr=r(vee," to load the model weights."),vee.forEach(t),EEr=i(Dw),T(E4.$$.fragment,Dw),Dw.forEach(t),CEr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(a9.$$.fragment,Pl),wEr=i(Pl),DFe=n(Pl,"P",{});var HEt=s(DFe);AEr=r(HEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HEt.forEach(t),yEr=i(Pl),cn=n(Pl,"P",{});var Gw=s(cn);LEr=r(Gw,"The model class to instantiate is selected based on the "),GFe=n(Gw,"CODE",{});var UEt=s(GFe);xEr=r(UEt,"model_type"),UEt.forEach(t),$Er=r(Gw,` property of the config object (either
passed as an argument or loaded from `),OFe=n(Gw,"CODE",{});var JEt=s(OFe);kEr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),SEr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(Gw,"CODE",{});var YEt=s(VFe);REr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),PEr=r(Gw,":"),Gw.forEach(t),BEr=i(Pl),de=n(Pl,"UL",{});var me=s(de);C4=n(me,"LI",{});var QPe=s(C4);XFe=n(QPe,"STRONG",{});var KEt=s(XFe);IEr=r(KEt,"albert"),KEt.forEach(t),qEr=r(QPe," \u2014 "),LU=n(QPe,"A",{href:!0});var ZEt=s(LU);NEr=r(ZEt,"TFAlbertForTokenClassification"),ZEt.forEach(t),jEr=r(QPe," (ALBERT model)"),QPe.forEach(t),DEr=i(me),w4=n(me,"LI",{});var HPe=s(w4);zFe=n(HPe,"STRONG",{});var eCt=s(zFe);GEr=r(eCt,"bert"),eCt.forEach(t),OEr=r(HPe," \u2014 "),xU=n(HPe,"A",{href:!0});var oCt=s(xU);VEr=r(oCt,"TFBertForTokenClassification"),oCt.forEach(t),XEr=r(HPe," (BERT model)"),HPe.forEach(t),zEr=i(me),A4=n(me,"LI",{});var UPe=s(A4);WFe=n(UPe,"STRONG",{});var rCt=s(WFe);WEr=r(rCt,"camembert"),rCt.forEach(t),QEr=r(UPe," \u2014 "),$U=n(UPe,"A",{href:!0});var tCt=s($U);HEr=r(tCt,"TFCamembertForTokenClassification"),tCt.forEach(t),UEr=r(UPe," (CamemBERT model)"),UPe.forEach(t),JEr=i(me),y4=n(me,"LI",{});var JPe=s(y4);QFe=n(JPe,"STRONG",{});var aCt=s(QFe);YEr=r(aCt,"convbert"),aCt.forEach(t),KEr=r(JPe," \u2014 "),kU=n(JPe,"A",{href:!0});var nCt=s(kU);ZEr=r(nCt,"TFConvBertForTokenClassification"),nCt.forEach(t),eCr=r(JPe," (ConvBERT model)"),JPe.forEach(t),oCr=i(me),L4=n(me,"LI",{});var YPe=s(L4);HFe=n(YPe,"STRONG",{});var sCt=s(HFe);rCr=r(sCt,"deberta"),sCt.forEach(t),tCr=r(YPe," \u2014 "),SU=n(YPe,"A",{href:!0});var lCt=s(SU);aCr=r(lCt,"TFDebertaForTokenClassification"),lCt.forEach(t),nCr=r(YPe," (DeBERTa model)"),YPe.forEach(t),sCr=i(me),x4=n(me,"LI",{});var KPe=s(x4);UFe=n(KPe,"STRONG",{});var iCt=s(UFe);lCr=r(iCt,"deberta-v2"),iCt.forEach(t),iCr=r(KPe," \u2014 "),RU=n(KPe,"A",{href:!0});var dCt=s(RU);dCr=r(dCt,"TFDebertaV2ForTokenClassification"),dCt.forEach(t),cCr=r(KPe," (DeBERTa-v2 model)"),KPe.forEach(t),fCr=i(me),$4=n(me,"LI",{});var ZPe=s($4);JFe=n(ZPe,"STRONG",{});var cCt=s(JFe);mCr=r(cCt,"distilbert"),cCt.forEach(t),gCr=r(ZPe," \u2014 "),PU=n(ZPe,"A",{href:!0});var fCt=s(PU);hCr=r(fCt,"TFDistilBertForTokenClassification"),fCt.forEach(t),pCr=r(ZPe," (DistilBERT model)"),ZPe.forEach(t),uCr=i(me),k4=n(me,"LI",{});var eBe=s(k4);YFe=n(eBe,"STRONG",{});var mCt=s(YFe);_Cr=r(mCt,"electra"),mCt.forEach(t),bCr=r(eBe," \u2014 "),BU=n(eBe,"A",{href:!0});var gCt=s(BU);vCr=r(gCt,"TFElectraForTokenClassification"),gCt.forEach(t),FCr=r(eBe," (ELECTRA model)"),eBe.forEach(t),TCr=i(me),S4=n(me,"LI",{});var oBe=s(S4);KFe=n(oBe,"STRONG",{});var hCt=s(KFe);MCr=r(hCt,"flaubert"),hCt.forEach(t),ECr=r(oBe," \u2014 "),IU=n(oBe,"A",{href:!0});var pCt=s(IU);CCr=r(pCt,"TFFlaubertForTokenClassification"),pCt.forEach(t),wCr=r(oBe," (FlauBERT model)"),oBe.forEach(t),ACr=i(me),R4=n(me,"LI",{});var rBe=s(R4);ZFe=n(rBe,"STRONG",{});var uCt=s(ZFe);yCr=r(uCt,"funnel"),uCt.forEach(t),LCr=r(rBe," \u2014 "),qU=n(rBe,"A",{href:!0});var _Ct=s(qU);xCr=r(_Ct,"TFFunnelForTokenClassification"),_Ct.forEach(t),$Cr=r(rBe," (Funnel Transformer model)"),rBe.forEach(t),kCr=i(me),P4=n(me,"LI",{});var tBe=s(P4);e6e=n(tBe,"STRONG",{});var bCt=s(e6e);SCr=r(bCt,"layoutlm"),bCt.forEach(t),RCr=r(tBe," \u2014 "),NU=n(tBe,"A",{href:!0});var vCt=s(NU);PCr=r(vCt,"TFLayoutLMForTokenClassification"),vCt.forEach(t),BCr=r(tBe," (LayoutLM model)"),tBe.forEach(t),ICr=i(me),B4=n(me,"LI",{});var aBe=s(B4);o6e=n(aBe,"STRONG",{});var FCt=s(o6e);qCr=r(FCt,"longformer"),FCt.forEach(t),NCr=r(aBe," \u2014 "),jU=n(aBe,"A",{href:!0});var TCt=s(jU);jCr=r(TCt,"TFLongformerForTokenClassification"),TCt.forEach(t),DCr=r(aBe," (Longformer model)"),aBe.forEach(t),GCr=i(me),I4=n(me,"LI",{});var nBe=s(I4);r6e=n(nBe,"STRONG",{});var MCt=s(r6e);OCr=r(MCt,"mobilebert"),MCt.forEach(t),VCr=r(nBe," \u2014 "),DU=n(nBe,"A",{href:!0});var ECt=s(DU);XCr=r(ECt,"TFMobileBertForTokenClassification"),ECt.forEach(t),zCr=r(nBe," (MobileBERT model)"),nBe.forEach(t),WCr=i(me),q4=n(me,"LI",{});var sBe=s(q4);t6e=n(sBe,"STRONG",{});var CCt=s(t6e);QCr=r(CCt,"mpnet"),CCt.forEach(t),HCr=r(sBe," \u2014 "),GU=n(sBe,"A",{href:!0});var wCt=s(GU);UCr=r(wCt,"TFMPNetForTokenClassification"),wCt.forEach(t),JCr=r(sBe," (MPNet model)"),sBe.forEach(t),YCr=i(me),N4=n(me,"LI",{});var lBe=s(N4);a6e=n(lBe,"STRONG",{});var ACt=s(a6e);KCr=r(ACt,"rembert"),ACt.forEach(t),ZCr=r(lBe," \u2014 "),OU=n(lBe,"A",{href:!0});var yCt=s(OU);e5r=r(yCt,"TFRemBertForTokenClassification"),yCt.forEach(t),o5r=r(lBe," (RemBERT model)"),lBe.forEach(t),r5r=i(me),j4=n(me,"LI",{});var iBe=s(j4);n6e=n(iBe,"STRONG",{});var LCt=s(n6e);t5r=r(LCt,"roberta"),LCt.forEach(t),a5r=r(iBe," \u2014 "),VU=n(iBe,"A",{href:!0});var xCt=s(VU);n5r=r(xCt,"TFRobertaForTokenClassification"),xCt.forEach(t),s5r=r(iBe," (RoBERTa model)"),iBe.forEach(t),l5r=i(me),D4=n(me,"LI",{});var dBe=s(D4);s6e=n(dBe,"STRONG",{});var $Ct=s(s6e);i5r=r($Ct,"roformer"),$Ct.forEach(t),d5r=r(dBe," \u2014 "),XU=n(dBe,"A",{href:!0});var kCt=s(XU);c5r=r(kCt,"TFRoFormerForTokenClassification"),kCt.forEach(t),f5r=r(dBe," (RoFormer model)"),dBe.forEach(t),m5r=i(me),G4=n(me,"LI",{});var cBe=s(G4);l6e=n(cBe,"STRONG",{});var SCt=s(l6e);g5r=r(SCt,"xlm"),SCt.forEach(t),h5r=r(cBe," \u2014 "),zU=n(cBe,"A",{href:!0});var RCt=s(zU);p5r=r(RCt,"TFXLMForTokenClassification"),RCt.forEach(t),u5r=r(cBe," (XLM model)"),cBe.forEach(t),_5r=i(me),O4=n(me,"LI",{});var fBe=s(O4);i6e=n(fBe,"STRONG",{});var PCt=s(i6e);b5r=r(PCt,"xlm-roberta"),PCt.forEach(t),v5r=r(fBe," \u2014 "),WU=n(fBe,"A",{href:!0});var BCt=s(WU);F5r=r(BCt,"TFXLMRobertaForTokenClassification"),BCt.forEach(t),T5r=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),M5r=i(me),V4=n(me,"LI",{});var mBe=s(V4);d6e=n(mBe,"STRONG",{});var ICt=s(d6e);E5r=r(ICt,"xlnet"),ICt.forEach(t),C5r=r(mBe," \u2014 "),QU=n(mBe,"A",{href:!0});var qCt=s(QU);w5r=r(qCt,"TFXLNetForTokenClassification"),qCt.forEach(t),A5r=r(mBe," (XLNet model)"),mBe.forEach(t),me.forEach(t),y5r=i(Pl),T(X4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),nje=i(f),Fc=n(f,"H2",{class:!0});var mGe=s(Fc);z4=n(mGe,"A",{id:!0,class:!0,href:!0});var NCt=s(z4);c6e=n(NCt,"SPAN",{});var jCt=s(c6e);T(n9.$$.fragment,jCt),jCt.forEach(t),NCt.forEach(t),L5r=i(mGe),f6e=n(mGe,"SPAN",{});var DCt=s(f6e);x5r=r(DCt,"TFAutoModelForQuestionAnswering"),DCt.forEach(t),mGe.forEach(t),sje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(s9.$$.fragment,Bl),$5r=i(Bl),Tc=n(Bl,"P",{});var Fee=s(Tc);k5r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HU=n(Fee,"A",{href:!0});var GCt=s(HU);S5r=r(GCt,"from_pretrained()"),GCt.forEach(t),R5r=r(Fee," class method or the "),UU=n(Fee,"A",{href:!0});var OCt=s(UU);P5r=r(OCt,"from_config()"),OCt.forEach(t),B5r=r(Fee,` class
method.`),Fee.forEach(t),I5r=i(Bl),l9=n(Bl,"P",{});var gGe=s(l9);q5r=r(gGe,"This class cannot be instantiated directly using "),m6e=n(gGe,"CODE",{});var VCt=s(m6e);N5r=r(VCt,"__init__()"),VCt.forEach(t),j5r=r(gGe," (throws an error)."),gGe.forEach(t),D5r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var Ow=s(Nt);T(i9.$$.fragment,Ow),G5r=i(Ow),g6e=n(Ow,"P",{});var XCt=s(g6e);O5r=r(XCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XCt.forEach(t),V5r=i(Ow),Mc=n(Ow,"P",{});var Tee=s(Mc);X5r=r(Tee,`Note:
Loading a model from its configuration file does `),h6e=n(Tee,"STRONG",{});var zCt=s(h6e);z5r=r(zCt,"not"),zCt.forEach(t),W5r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=n(Tee,"A",{href:!0});var WCt=s(JU);Q5r=r(WCt,"from_pretrained()"),WCt.forEach(t),H5r=r(Tee," to load the model weights."),Tee.forEach(t),U5r=i(Ow),T(W4.$$.fragment,Ow),Ow.forEach(t),J5r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(d9.$$.fragment,Il),Y5r=i(Il),p6e=n(Il,"P",{});var QCt=s(p6e);K5r=r(QCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QCt.forEach(t),Z5r=i(Il),fn=n(Il,"P",{});var Vw=s(fn);e3r=r(Vw,"The model class to instantiate is selected based on the "),u6e=n(Vw,"CODE",{});var HCt=s(u6e);o3r=r(HCt,"model_type"),HCt.forEach(t),r3r=r(Vw,` property of the config object (either
passed as an argument or loaded from `),_6e=n(Vw,"CODE",{});var UCt=s(_6e);t3r=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),a3r=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(Vw,"CODE",{});var JCt=s(b6e);n3r=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),s3r=r(Vw,":"),Vw.forEach(t),l3r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);Q4=n(ge,"LI",{});var gBe=s(Q4);v6e=n(gBe,"STRONG",{});var YCt=s(v6e);i3r=r(YCt,"albert"),YCt.forEach(t),d3r=r(gBe," \u2014 "),YU=n(gBe,"A",{href:!0});var KCt=s(YU);c3r=r(KCt,"TFAlbertForQuestionAnswering"),KCt.forEach(t),f3r=r(gBe," (ALBERT model)"),gBe.forEach(t),m3r=i(ge),H4=n(ge,"LI",{});var hBe=s(H4);F6e=n(hBe,"STRONG",{});var ZCt=s(F6e);g3r=r(ZCt,"bert"),ZCt.forEach(t),h3r=r(hBe," \u2014 "),KU=n(hBe,"A",{href:!0});var e5t=s(KU);p3r=r(e5t,"TFBertForQuestionAnswering"),e5t.forEach(t),u3r=r(hBe," (BERT model)"),hBe.forEach(t),_3r=i(ge),U4=n(ge,"LI",{});var pBe=s(U4);T6e=n(pBe,"STRONG",{});var o5t=s(T6e);b3r=r(o5t,"camembert"),o5t.forEach(t),v3r=r(pBe," \u2014 "),ZU=n(pBe,"A",{href:!0});var r5t=s(ZU);F3r=r(r5t,"TFCamembertForQuestionAnswering"),r5t.forEach(t),T3r=r(pBe," (CamemBERT model)"),pBe.forEach(t),M3r=i(ge),J4=n(ge,"LI",{});var uBe=s(J4);M6e=n(uBe,"STRONG",{});var t5t=s(M6e);E3r=r(t5t,"convbert"),t5t.forEach(t),C3r=r(uBe," \u2014 "),eJ=n(uBe,"A",{href:!0});var a5t=s(eJ);w3r=r(a5t,"TFConvBertForQuestionAnswering"),a5t.forEach(t),A3r=r(uBe," (ConvBERT model)"),uBe.forEach(t),y3r=i(ge),Y4=n(ge,"LI",{});var _Be=s(Y4);E6e=n(_Be,"STRONG",{});var n5t=s(E6e);L3r=r(n5t,"deberta"),n5t.forEach(t),x3r=r(_Be," \u2014 "),oJ=n(_Be,"A",{href:!0});var s5t=s(oJ);$3r=r(s5t,"TFDebertaForQuestionAnswering"),s5t.forEach(t),k3r=r(_Be," (DeBERTa model)"),_Be.forEach(t),S3r=i(ge),K4=n(ge,"LI",{});var bBe=s(K4);C6e=n(bBe,"STRONG",{});var l5t=s(C6e);R3r=r(l5t,"deberta-v2"),l5t.forEach(t),P3r=r(bBe," \u2014 "),rJ=n(bBe,"A",{href:!0});var i5t=s(rJ);B3r=r(i5t,"TFDebertaV2ForQuestionAnswering"),i5t.forEach(t),I3r=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),q3r=i(ge),Z4=n(ge,"LI",{});var vBe=s(Z4);w6e=n(vBe,"STRONG",{});var d5t=s(w6e);N3r=r(d5t,"distilbert"),d5t.forEach(t),j3r=r(vBe," \u2014 "),tJ=n(vBe,"A",{href:!0});var c5t=s(tJ);D3r=r(c5t,"TFDistilBertForQuestionAnswering"),c5t.forEach(t),G3r=r(vBe," (DistilBERT model)"),vBe.forEach(t),O3r=i(ge),eE=n(ge,"LI",{});var FBe=s(eE);A6e=n(FBe,"STRONG",{});var f5t=s(A6e);V3r=r(f5t,"electra"),f5t.forEach(t),X3r=r(FBe," \u2014 "),aJ=n(FBe,"A",{href:!0});var m5t=s(aJ);z3r=r(m5t,"TFElectraForQuestionAnswering"),m5t.forEach(t),W3r=r(FBe," (ELECTRA model)"),FBe.forEach(t),Q3r=i(ge),oE=n(ge,"LI",{});var TBe=s(oE);y6e=n(TBe,"STRONG",{});var g5t=s(y6e);H3r=r(g5t,"flaubert"),g5t.forEach(t),U3r=r(TBe," \u2014 "),nJ=n(TBe,"A",{href:!0});var h5t=s(nJ);J3r=r(h5t,"TFFlaubertForQuestionAnsweringSimple"),h5t.forEach(t),Y3r=r(TBe," (FlauBERT model)"),TBe.forEach(t),K3r=i(ge),rE=n(ge,"LI",{});var MBe=s(rE);L6e=n(MBe,"STRONG",{});var p5t=s(L6e);Z3r=r(p5t,"funnel"),p5t.forEach(t),ewr=r(MBe," \u2014 "),sJ=n(MBe,"A",{href:!0});var u5t=s(sJ);owr=r(u5t,"TFFunnelForQuestionAnswering"),u5t.forEach(t),rwr=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),twr=i(ge),tE=n(ge,"LI",{});var EBe=s(tE);x6e=n(EBe,"STRONG",{});var _5t=s(x6e);awr=r(_5t,"gptj"),_5t.forEach(t),nwr=r(EBe," \u2014 "),lJ=n(EBe,"A",{href:!0});var b5t=s(lJ);swr=r(b5t,"TFGPTJForQuestionAnswering"),b5t.forEach(t),lwr=r(EBe," (GPT-J model)"),EBe.forEach(t),iwr=i(ge),aE=n(ge,"LI",{});var CBe=s(aE);$6e=n(CBe,"STRONG",{});var v5t=s($6e);dwr=r(v5t,"longformer"),v5t.forEach(t),cwr=r(CBe," \u2014 "),iJ=n(CBe,"A",{href:!0});var F5t=s(iJ);fwr=r(F5t,"TFLongformerForQuestionAnswering"),F5t.forEach(t),mwr=r(CBe," (Longformer model)"),CBe.forEach(t),gwr=i(ge),nE=n(ge,"LI",{});var wBe=s(nE);k6e=n(wBe,"STRONG",{});var T5t=s(k6e);hwr=r(T5t,"mobilebert"),T5t.forEach(t),pwr=r(wBe," \u2014 "),dJ=n(wBe,"A",{href:!0});var M5t=s(dJ);uwr=r(M5t,"TFMobileBertForQuestionAnswering"),M5t.forEach(t),_wr=r(wBe," (MobileBERT model)"),wBe.forEach(t),bwr=i(ge),sE=n(ge,"LI",{});var ABe=s(sE);S6e=n(ABe,"STRONG",{});var E5t=s(S6e);vwr=r(E5t,"mpnet"),E5t.forEach(t),Fwr=r(ABe," \u2014 "),cJ=n(ABe,"A",{href:!0});var C5t=s(cJ);Twr=r(C5t,"TFMPNetForQuestionAnswering"),C5t.forEach(t),Mwr=r(ABe," (MPNet model)"),ABe.forEach(t),Ewr=i(ge),lE=n(ge,"LI",{});var yBe=s(lE);R6e=n(yBe,"STRONG",{});var w5t=s(R6e);Cwr=r(w5t,"rembert"),w5t.forEach(t),wwr=r(yBe," \u2014 "),fJ=n(yBe,"A",{href:!0});var A5t=s(fJ);Awr=r(A5t,"TFRemBertForQuestionAnswering"),A5t.forEach(t),ywr=r(yBe," (RemBERT model)"),yBe.forEach(t),Lwr=i(ge),iE=n(ge,"LI",{});var LBe=s(iE);P6e=n(LBe,"STRONG",{});var y5t=s(P6e);xwr=r(y5t,"roberta"),y5t.forEach(t),$wr=r(LBe," \u2014 "),mJ=n(LBe,"A",{href:!0});var L5t=s(mJ);kwr=r(L5t,"TFRobertaForQuestionAnswering"),L5t.forEach(t),Swr=r(LBe," (RoBERTa model)"),LBe.forEach(t),Rwr=i(ge),dE=n(ge,"LI",{});var xBe=s(dE);B6e=n(xBe,"STRONG",{});var x5t=s(B6e);Pwr=r(x5t,"roformer"),x5t.forEach(t),Bwr=r(xBe," \u2014 "),gJ=n(xBe,"A",{href:!0});var $5t=s(gJ);Iwr=r($5t,"TFRoFormerForQuestionAnswering"),$5t.forEach(t),qwr=r(xBe," (RoFormer model)"),xBe.forEach(t),Nwr=i(ge),cE=n(ge,"LI",{});var $Be=s(cE);I6e=n($Be,"STRONG",{});var k5t=s(I6e);jwr=r(k5t,"xlm"),k5t.forEach(t),Dwr=r($Be," \u2014 "),hJ=n($Be,"A",{href:!0});var S5t=s(hJ);Gwr=r(S5t,"TFXLMForQuestionAnsweringSimple"),S5t.forEach(t),Owr=r($Be," (XLM model)"),$Be.forEach(t),Vwr=i(ge),fE=n(ge,"LI",{});var kBe=s(fE);q6e=n(kBe,"STRONG",{});var R5t=s(q6e);Xwr=r(R5t,"xlm-roberta"),R5t.forEach(t),zwr=r(kBe," \u2014 "),pJ=n(kBe,"A",{href:!0});var P5t=s(pJ);Wwr=r(P5t,"TFXLMRobertaForQuestionAnswering"),P5t.forEach(t),Qwr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Hwr=i(ge),mE=n(ge,"LI",{});var SBe=s(mE);N6e=n(SBe,"STRONG",{});var B5t=s(N6e);Uwr=r(B5t,"xlnet"),B5t.forEach(t),Jwr=r(SBe," \u2014 "),uJ=n(SBe,"A",{href:!0});var I5t=s(uJ);Ywr=r(I5t,"TFXLNetForQuestionAnsweringSimple"),I5t.forEach(t),Kwr=r(SBe," (XLNet model)"),SBe.forEach(t),ge.forEach(t),Zwr=i(Il),T(gE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),lje=i(f),Ec=n(f,"H2",{class:!0});var hGe=s(Ec);hE=n(hGe,"A",{id:!0,class:!0,href:!0});var q5t=s(hE);j6e=n(q5t,"SPAN",{});var N5t=s(j6e);T(c9.$$.fragment,N5t),N5t.forEach(t),q5t.forEach(t),eAr=i(hGe),D6e=n(hGe,"SPAN",{});var j5t=s(D6e);oAr=r(j5t,"TFAutoModelForVision2Seq"),j5t.forEach(t),hGe.forEach(t),ije=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(f9.$$.fragment,ql),rAr=i(ql),Cc=n(ql,"P",{});var Mee=s(Cc);tAr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_J=n(Mee,"A",{href:!0});var D5t=s(_J);aAr=r(D5t,"from_pretrained()"),D5t.forEach(t),nAr=r(Mee," class method or the "),bJ=n(Mee,"A",{href:!0});var G5t=s(bJ);sAr=r(G5t,"from_config()"),G5t.forEach(t),lAr=r(Mee,` class
method.`),Mee.forEach(t),iAr=i(ql),m9=n(ql,"P",{});var pGe=s(m9);dAr=r(pGe,"This class cannot be instantiated directly using "),G6e=n(pGe,"CODE",{});var O5t=s(G6e);cAr=r(O5t,"__init__()"),O5t.forEach(t),fAr=r(pGe," (throws an error)."),pGe.forEach(t),mAr=i(ql),jt=n(ql,"DIV",{class:!0});var Xw=s(jt);T(g9.$$.fragment,Xw),gAr=i(Xw),O6e=n(Xw,"P",{});var V5t=s(O6e);hAr=r(V5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),V5t.forEach(t),pAr=i(Xw),wc=n(Xw,"P",{});var Eee=s(wc);uAr=r(Eee,`Note:
Loading a model from its configuration file does `),V6e=n(Eee,"STRONG",{});var X5t=s(V6e);_Ar=r(X5t,"not"),X5t.forEach(t),bAr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(Eee,"A",{href:!0});var z5t=s(vJ);vAr=r(z5t,"from_pretrained()"),z5t.forEach(t),FAr=r(Eee," to load the model weights."),Eee.forEach(t),TAr=i(Xw),T(pE.$$.fragment,Xw),Xw.forEach(t),MAr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(h9.$$.fragment,Nl),EAr=i(Nl),X6e=n(Nl,"P",{});var W5t=s(X6e);CAr=r(W5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W5t.forEach(t),wAr=i(Nl),mn=n(Nl,"P",{});var zw=s(mn);AAr=r(zw,"The model class to instantiate is selected based on the "),z6e=n(zw,"CODE",{});var Q5t=s(z6e);yAr=r(Q5t,"model_type"),Q5t.forEach(t),LAr=r(zw,` property of the config object (either
passed as an argument or loaded from `),W6e=n(zw,"CODE",{});var H5t=s(W6e);xAr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),$Ar=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=n(zw,"CODE",{});var U5t=s(Q6e);kAr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),SAr=r(zw,":"),zw.forEach(t),RAr=i(Nl),H6e=n(Nl,"UL",{});var J5t=s(H6e);uE=n(J5t,"LI",{});var RBe=s(uE);U6e=n(RBe,"STRONG",{});var Y5t=s(U6e);PAr=r(Y5t,"vision-encoder-decoder"),Y5t.forEach(t),BAr=r(RBe," \u2014 "),FJ=n(RBe,"A",{href:!0});var K5t=s(FJ);IAr=r(K5t,"TFVisionEncoderDecoderModel"),K5t.forEach(t),qAr=r(RBe," (Vision Encoder decoder model)"),RBe.forEach(t),J5t.forEach(t),NAr=i(Nl),T(_E.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),dje=i(f),Ac=n(f,"H2",{class:!0});var uGe=s(Ac);bE=n(uGe,"A",{id:!0,class:!0,href:!0});var Z5t=s(bE);J6e=n(Z5t,"SPAN",{});var e3t=s(J6e);T(p9.$$.fragment,e3t),e3t.forEach(t),Z5t.forEach(t),jAr=i(uGe),Y6e=n(uGe,"SPAN",{});var o3t=s(Y6e);DAr=r(o3t,"TFAutoModelForSpeechSeq2Seq"),o3t.forEach(t),uGe.forEach(t),cje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(u9.$$.fragment,jl),GAr=i(jl),yc=n(jl,"P",{});var Cee=s(yc);OAr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TJ=n(Cee,"A",{href:!0});var r3t=s(TJ);VAr=r(r3t,"from_pretrained()"),r3t.forEach(t),XAr=r(Cee," class method or the "),MJ=n(Cee,"A",{href:!0});var t3t=s(MJ);zAr=r(t3t,"from_config()"),t3t.forEach(t),WAr=r(Cee,` class
method.`),Cee.forEach(t),QAr=i(jl),_9=n(jl,"P",{});var _Ge=s(_9);HAr=r(_Ge,"This class cannot be instantiated directly using "),K6e=n(_Ge,"CODE",{});var a3t=s(K6e);UAr=r(a3t,"__init__()"),a3t.forEach(t),JAr=r(_Ge," (throws an error)."),_Ge.forEach(t),YAr=i(jl),Dt=n(jl,"DIV",{class:!0});var Ww=s(Dt);T(b9.$$.fragment,Ww),KAr=i(Ww),Z6e=n(Ww,"P",{});var n3t=s(Z6e);ZAr=r(n3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n3t.forEach(t),eyr=i(Ww),Lc=n(Ww,"P",{});var wee=s(Lc);oyr=r(wee,`Note:
Loading a model from its configuration file does `),eTe=n(wee,"STRONG",{});var s3t=s(eTe);ryr=r(s3t,"not"),s3t.forEach(t),tyr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(wee,"A",{href:!0});var l3t=s(EJ);ayr=r(l3t,"from_pretrained()"),l3t.forEach(t),nyr=r(wee," to load the model weights."),wee.forEach(t),syr=i(Ww),T(vE.$$.fragment,Ww),Ww.forEach(t),lyr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(v9.$$.fragment,Dl),iyr=i(Dl),oTe=n(Dl,"P",{});var i3t=s(oTe);dyr=r(i3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),i3t.forEach(t),cyr=i(Dl),gn=n(Dl,"P",{});var Qw=s(gn);fyr=r(Qw,"The model class to instantiate is selected based on the "),rTe=n(Qw,"CODE",{});var d3t=s(rTe);myr=r(d3t,"model_type"),d3t.forEach(t),gyr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),tTe=n(Qw,"CODE",{});var c3t=s(tTe);hyr=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),pyr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(Qw,"CODE",{});var f3t=s(aTe);uyr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),_yr=r(Qw,":"),Qw.forEach(t),byr=i(Dl),nTe=n(Dl,"UL",{});var m3t=s(nTe);FE=n(m3t,"LI",{});var PBe=s(FE);sTe=n(PBe,"STRONG",{});var g3t=s(sTe);vyr=r(g3t,"speech_to_text"),g3t.forEach(t),Fyr=r(PBe," \u2014 "),CJ=n(PBe,"A",{href:!0});var h3t=s(CJ);Tyr=r(h3t,"TFSpeech2TextForConditionalGeneration"),h3t.forEach(t),Myr=r(PBe," (Speech2Text model)"),PBe.forEach(t),m3t.forEach(t),Eyr=i(Dl),T(TE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),fje=i(f),xc=n(f,"H2",{class:!0});var bGe=s(xc);ME=n(bGe,"A",{id:!0,class:!0,href:!0});var p3t=s(ME);lTe=n(p3t,"SPAN",{});var u3t=s(lTe);T(F9.$$.fragment,u3t),u3t.forEach(t),p3t.forEach(t),Cyr=i(bGe),iTe=n(bGe,"SPAN",{});var _3t=s(iTe);wyr=r(_3t,"FlaxAutoModel"),_3t.forEach(t),bGe.forEach(t),mje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(T9.$$.fragment,Gl),Ayr=i(Gl),$c=n(Gl,"P",{});var Aee=s($c);yyr=r(Aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wJ=n(Aee,"A",{href:!0});var b3t=s(wJ);Lyr=r(b3t,"from_pretrained()"),b3t.forEach(t),xyr=r(Aee," class method or the "),AJ=n(Aee,"A",{href:!0});var v3t=s(AJ);$yr=r(v3t,"from_config()"),v3t.forEach(t),kyr=r(Aee,` class
method.`),Aee.forEach(t),Syr=i(Gl),M9=n(Gl,"P",{});var vGe=s(M9);Ryr=r(vGe,"This class cannot be instantiated directly using "),dTe=n(vGe,"CODE",{});var F3t=s(dTe);Pyr=r(F3t,"__init__()"),F3t.forEach(t),Byr=r(vGe," (throws an error)."),vGe.forEach(t),Iyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var Hw=s(Gt);T(E9.$$.fragment,Hw),qyr=i(Hw),cTe=n(Hw,"P",{});var T3t=s(cTe);Nyr=r(T3t,"Instantiates one of the base model classes of the library from a configuration."),T3t.forEach(t),jyr=i(Hw),kc=n(Hw,"P",{});var yee=s(kc);Dyr=r(yee,`Note:
Loading a model from its configuration file does `),fTe=n(yee,"STRONG",{});var M3t=s(fTe);Gyr=r(M3t,"not"),M3t.forEach(t),Oyr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(yee,"A",{href:!0});var E3t=s(yJ);Vyr=r(E3t,"from_pretrained()"),E3t.forEach(t),Xyr=r(yee," to load the model weights."),yee.forEach(t),zyr=i(Hw),T(EE.$$.fragment,Hw),Hw.forEach(t),Wyr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(C9.$$.fragment,Ol),Qyr=i(Ol),mTe=n(Ol,"P",{});var C3t=s(mTe);Hyr=r(C3t,"Instantiate one of the base model classes of the library from a pretrained model."),C3t.forEach(t),Uyr=i(Ol),hn=n(Ol,"P",{});var Uw=s(hn);Jyr=r(Uw,"The model class to instantiate is selected based on the "),gTe=n(Uw,"CODE",{});var w3t=s(gTe);Yyr=r(w3t,"model_type"),w3t.forEach(t),Kyr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),hTe=n(Uw,"CODE",{});var A3t=s(hTe);Zyr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),eLr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(Uw,"CODE",{});var y3t=s(pTe);oLr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),rLr=r(Uw,":"),Uw.forEach(t),tLr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);CE=n(ne,"LI",{});var BBe=s(CE);uTe=n(BBe,"STRONG",{});var L3t=s(uTe);aLr=r(L3t,"albert"),L3t.forEach(t),nLr=r(BBe," \u2014 "),LJ=n(BBe,"A",{href:!0});var x3t=s(LJ);sLr=r(x3t,"FlaxAlbertModel"),x3t.forEach(t),lLr=r(BBe," (ALBERT model)"),BBe.forEach(t),iLr=i(ne),wE=n(ne,"LI",{});var IBe=s(wE);_Te=n(IBe,"STRONG",{});var $3t=s(_Te);dLr=r($3t,"bart"),$3t.forEach(t),cLr=r(IBe," \u2014 "),xJ=n(IBe,"A",{href:!0});var k3t=s(xJ);fLr=r(k3t,"FlaxBartModel"),k3t.forEach(t),mLr=r(IBe," (BART model)"),IBe.forEach(t),gLr=i(ne),AE=n(ne,"LI",{});var qBe=s(AE);bTe=n(qBe,"STRONG",{});var S3t=s(bTe);hLr=r(S3t,"beit"),S3t.forEach(t),pLr=r(qBe," \u2014 "),$J=n(qBe,"A",{href:!0});var R3t=s($J);uLr=r(R3t,"FlaxBeitModel"),R3t.forEach(t),_Lr=r(qBe," (BEiT model)"),qBe.forEach(t),bLr=i(ne),yE=n(ne,"LI",{});var NBe=s(yE);vTe=n(NBe,"STRONG",{});var P3t=s(vTe);vLr=r(P3t,"bert"),P3t.forEach(t),FLr=r(NBe," \u2014 "),kJ=n(NBe,"A",{href:!0});var B3t=s(kJ);TLr=r(B3t,"FlaxBertModel"),B3t.forEach(t),MLr=r(NBe," (BERT model)"),NBe.forEach(t),ELr=i(ne),LE=n(ne,"LI",{});var jBe=s(LE);FTe=n(jBe,"STRONG",{});var I3t=s(FTe);CLr=r(I3t,"big_bird"),I3t.forEach(t),wLr=r(jBe," \u2014 "),SJ=n(jBe,"A",{href:!0});var q3t=s(SJ);ALr=r(q3t,"FlaxBigBirdModel"),q3t.forEach(t),yLr=r(jBe," (BigBird model)"),jBe.forEach(t),LLr=i(ne),xE=n(ne,"LI",{});var DBe=s(xE);TTe=n(DBe,"STRONG",{});var N3t=s(TTe);xLr=r(N3t,"blenderbot"),N3t.forEach(t),$Lr=r(DBe," \u2014 "),RJ=n(DBe,"A",{href:!0});var j3t=s(RJ);kLr=r(j3t,"FlaxBlenderbotModel"),j3t.forEach(t),SLr=r(DBe," (Blenderbot model)"),DBe.forEach(t),RLr=i(ne),$E=n(ne,"LI",{});var GBe=s($E);MTe=n(GBe,"STRONG",{});var D3t=s(MTe);PLr=r(D3t,"blenderbot-small"),D3t.forEach(t),BLr=r(GBe," \u2014 "),PJ=n(GBe,"A",{href:!0});var G3t=s(PJ);ILr=r(G3t,"FlaxBlenderbotSmallModel"),G3t.forEach(t),qLr=r(GBe," (BlenderbotSmall model)"),GBe.forEach(t),NLr=i(ne),kE=n(ne,"LI",{});var OBe=s(kE);ETe=n(OBe,"STRONG",{});var O3t=s(ETe);jLr=r(O3t,"clip"),O3t.forEach(t),DLr=r(OBe," \u2014 "),BJ=n(OBe,"A",{href:!0});var V3t=s(BJ);GLr=r(V3t,"FlaxCLIPModel"),V3t.forEach(t),OLr=r(OBe," (CLIP model)"),OBe.forEach(t),VLr=i(ne),SE=n(ne,"LI",{});var VBe=s(SE);CTe=n(VBe,"STRONG",{});var X3t=s(CTe);XLr=r(X3t,"distilbert"),X3t.forEach(t),zLr=r(VBe," \u2014 "),IJ=n(VBe,"A",{href:!0});var z3t=s(IJ);WLr=r(z3t,"FlaxDistilBertModel"),z3t.forEach(t),QLr=r(VBe," (DistilBERT model)"),VBe.forEach(t),HLr=i(ne),RE=n(ne,"LI",{});var XBe=s(RE);wTe=n(XBe,"STRONG",{});var W3t=s(wTe);ULr=r(W3t,"electra"),W3t.forEach(t),JLr=r(XBe," \u2014 "),qJ=n(XBe,"A",{href:!0});var Q3t=s(qJ);YLr=r(Q3t,"FlaxElectraModel"),Q3t.forEach(t),KLr=r(XBe," (ELECTRA model)"),XBe.forEach(t),ZLr=i(ne),PE=n(ne,"LI",{});var zBe=s(PE);ATe=n(zBe,"STRONG",{});var H3t=s(ATe);e8r=r(H3t,"gpt2"),H3t.forEach(t),o8r=r(zBe," \u2014 "),NJ=n(zBe,"A",{href:!0});var U3t=s(NJ);r8r=r(U3t,"FlaxGPT2Model"),U3t.forEach(t),t8r=r(zBe," (OpenAI GPT-2 model)"),zBe.forEach(t),a8r=i(ne),BE=n(ne,"LI",{});var WBe=s(BE);yTe=n(WBe,"STRONG",{});var J3t=s(yTe);n8r=r(J3t,"gpt_neo"),J3t.forEach(t),s8r=r(WBe," \u2014 "),jJ=n(WBe,"A",{href:!0});var Y3t=s(jJ);l8r=r(Y3t,"FlaxGPTNeoModel"),Y3t.forEach(t),i8r=r(WBe," (GPT Neo model)"),WBe.forEach(t),d8r=i(ne),IE=n(ne,"LI",{});var QBe=s(IE);LTe=n(QBe,"STRONG",{});var K3t=s(LTe);c8r=r(K3t,"gptj"),K3t.forEach(t),f8r=r(QBe," \u2014 "),DJ=n(QBe,"A",{href:!0});var Z3t=s(DJ);m8r=r(Z3t,"FlaxGPTJModel"),Z3t.forEach(t),g8r=r(QBe," (GPT-J model)"),QBe.forEach(t),h8r=i(ne),qE=n(ne,"LI",{});var HBe=s(qE);xTe=n(HBe,"STRONG",{});var ewt=s(xTe);p8r=r(ewt,"marian"),ewt.forEach(t),u8r=r(HBe," \u2014 "),GJ=n(HBe,"A",{href:!0});var owt=s(GJ);_8r=r(owt,"FlaxMarianModel"),owt.forEach(t),b8r=r(HBe," (Marian model)"),HBe.forEach(t),v8r=i(ne),NE=n(ne,"LI",{});var UBe=s(NE);$Te=n(UBe,"STRONG",{});var rwt=s($Te);F8r=r(rwt,"mbart"),rwt.forEach(t),T8r=r(UBe," \u2014 "),OJ=n(UBe,"A",{href:!0});var twt=s(OJ);M8r=r(twt,"FlaxMBartModel"),twt.forEach(t),E8r=r(UBe," (mBART model)"),UBe.forEach(t),C8r=i(ne),jE=n(ne,"LI",{});var JBe=s(jE);kTe=n(JBe,"STRONG",{});var awt=s(kTe);w8r=r(awt,"mt5"),awt.forEach(t),A8r=r(JBe," \u2014 "),VJ=n(JBe,"A",{href:!0});var nwt=s(VJ);y8r=r(nwt,"FlaxMT5Model"),nwt.forEach(t),L8r=r(JBe," (mT5 model)"),JBe.forEach(t),x8r=i(ne),DE=n(ne,"LI",{});var YBe=s(DE);STe=n(YBe,"STRONG",{});var swt=s(STe);$8r=r(swt,"pegasus"),swt.forEach(t),k8r=r(YBe," \u2014 "),XJ=n(YBe,"A",{href:!0});var lwt=s(XJ);S8r=r(lwt,"FlaxPegasusModel"),lwt.forEach(t),R8r=r(YBe," (Pegasus model)"),YBe.forEach(t),P8r=i(ne),GE=n(ne,"LI",{});var KBe=s(GE);RTe=n(KBe,"STRONG",{});var iwt=s(RTe);B8r=r(iwt,"roberta"),iwt.forEach(t),I8r=r(KBe," \u2014 "),zJ=n(KBe,"A",{href:!0});var dwt=s(zJ);q8r=r(dwt,"FlaxRobertaModel"),dwt.forEach(t),N8r=r(KBe," (RoBERTa model)"),KBe.forEach(t),j8r=i(ne),OE=n(ne,"LI",{});var ZBe=s(OE);PTe=n(ZBe,"STRONG",{});var cwt=s(PTe);D8r=r(cwt,"roformer"),cwt.forEach(t),G8r=r(ZBe," \u2014 "),WJ=n(ZBe,"A",{href:!0});var fwt=s(WJ);O8r=r(fwt,"FlaxRoFormerModel"),fwt.forEach(t),V8r=r(ZBe," (RoFormer model)"),ZBe.forEach(t),X8r=i(ne),VE=n(ne,"LI",{});var eIe=s(VE);BTe=n(eIe,"STRONG",{});var mwt=s(BTe);z8r=r(mwt,"t5"),mwt.forEach(t),W8r=r(eIe," \u2014 "),QJ=n(eIe,"A",{href:!0});var gwt=s(QJ);Q8r=r(gwt,"FlaxT5Model"),gwt.forEach(t),H8r=r(eIe," (T5 model)"),eIe.forEach(t),U8r=i(ne),XE=n(ne,"LI",{});var oIe=s(XE);ITe=n(oIe,"STRONG",{});var hwt=s(ITe);J8r=r(hwt,"vision-text-dual-encoder"),hwt.forEach(t),Y8r=r(oIe," \u2014 "),HJ=n(oIe,"A",{href:!0});var pwt=s(HJ);K8r=r(pwt,"FlaxVisionTextDualEncoderModel"),pwt.forEach(t),Z8r=r(oIe," (VisionTextDualEncoder model)"),oIe.forEach(t),e9r=i(ne),zE=n(ne,"LI",{});var rIe=s(zE);qTe=n(rIe,"STRONG",{});var uwt=s(qTe);o9r=r(uwt,"vit"),uwt.forEach(t),r9r=r(rIe," \u2014 "),UJ=n(rIe,"A",{href:!0});var _wt=s(UJ);t9r=r(_wt,"FlaxViTModel"),_wt.forEach(t),a9r=r(rIe," (ViT model)"),rIe.forEach(t),n9r=i(ne),WE=n(ne,"LI",{});var tIe=s(WE);NTe=n(tIe,"STRONG",{});var bwt=s(NTe);s9r=r(bwt,"wav2vec2"),bwt.forEach(t),l9r=r(tIe," \u2014 "),JJ=n(tIe,"A",{href:!0});var vwt=s(JJ);i9r=r(vwt,"FlaxWav2Vec2Model"),vwt.forEach(t),d9r=r(tIe," (Wav2Vec2 model)"),tIe.forEach(t),c9r=i(ne),QE=n(ne,"LI",{});var aIe=s(QE);jTe=n(aIe,"STRONG",{});var Fwt=s(jTe);f9r=r(Fwt,"xglm"),Fwt.forEach(t),m9r=r(aIe," \u2014 "),YJ=n(aIe,"A",{href:!0});var Twt=s(YJ);g9r=r(Twt,"FlaxXGLMModel"),Twt.forEach(t),h9r=r(aIe," (XGLM model)"),aIe.forEach(t),p9r=i(ne),HE=n(ne,"LI",{});var nIe=s(HE);DTe=n(nIe,"STRONG",{});var Mwt=s(DTe);u9r=r(Mwt,"xlm-roberta"),Mwt.forEach(t),_9r=r(nIe," \u2014 "),KJ=n(nIe,"A",{href:!0});var Ewt=s(KJ);b9r=r(Ewt,"FlaxXLMRobertaModel"),Ewt.forEach(t),v9r=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),ne.forEach(t),F9r=i(Ol),T(UE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),gje=i(f),Sc=n(f,"H2",{class:!0});var FGe=s(Sc);JE=n(FGe,"A",{id:!0,class:!0,href:!0});var Cwt=s(JE);GTe=n(Cwt,"SPAN",{});var wwt=s(GTe);T(w9.$$.fragment,wwt),wwt.forEach(t),Cwt.forEach(t),T9r=i(FGe),OTe=n(FGe,"SPAN",{});var Awt=s(OTe);M9r=r(Awt,"FlaxAutoModelForCausalLM"),Awt.forEach(t),FGe.forEach(t),hje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(A9.$$.fragment,Vl),E9r=i(Vl),Rc=n(Vl,"P",{});var Lee=s(Rc);C9r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=n(Lee,"A",{href:!0});var ywt=s(ZJ);w9r=r(ywt,"from_pretrained()"),ywt.forEach(t),A9r=r(Lee," class method or the "),eY=n(Lee,"A",{href:!0});var Lwt=s(eY);y9r=r(Lwt,"from_config()"),Lwt.forEach(t),L9r=r(Lee,` class
method.`),Lee.forEach(t),x9r=i(Vl),y9=n(Vl,"P",{});var TGe=s(y9);$9r=r(TGe,"This class cannot be instantiated directly using "),VTe=n(TGe,"CODE",{});var xwt=s(VTe);k9r=r(xwt,"__init__()"),xwt.forEach(t),S9r=r(TGe," (throws an error)."),TGe.forEach(t),R9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var Jw=s(Ot);T(L9.$$.fragment,Jw),P9r=i(Jw),XTe=n(Jw,"P",{});var $wt=s(XTe);B9r=r($wt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$wt.forEach(t),I9r=i(Jw),Pc=n(Jw,"P",{});var xee=s(Pc);q9r=r(xee,`Note:
Loading a model from its configuration file does `),zTe=n(xee,"STRONG",{});var kwt=s(zTe);N9r=r(kwt,"not"),kwt.forEach(t),j9r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(xee,"A",{href:!0});var Swt=s(oY);D9r=r(Swt,"from_pretrained()"),Swt.forEach(t),G9r=r(xee," to load the model weights."),xee.forEach(t),O9r=i(Jw),T(YE.$$.fragment,Jw),Jw.forEach(t),V9r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(x9.$$.fragment,Xl),X9r=i(Xl),WTe=n(Xl,"P",{});var Rwt=s(WTe);z9r=r(Rwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rwt.forEach(t),W9r=i(Xl),pn=n(Xl,"P",{});var Yw=s(pn);Q9r=r(Yw,"The model class to instantiate is selected based on the "),QTe=n(Yw,"CODE",{});var Pwt=s(QTe);H9r=r(Pwt,"model_type"),Pwt.forEach(t),U9r=r(Yw,` property of the config object (either
passed as an argument or loaded from `),HTe=n(Yw,"CODE",{});var Bwt=s(HTe);J9r=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),Y9r=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(Yw,"CODE",{});var Iwt=s(UTe);K9r=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),Z9r=r(Yw,":"),Yw.forEach(t),exr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);KE=n(Xe,"LI",{});var sIe=s(KE);JTe=n(sIe,"STRONG",{});var qwt=s(JTe);oxr=r(qwt,"bart"),qwt.forEach(t),rxr=r(sIe," \u2014 "),rY=n(sIe,"A",{href:!0});var Nwt=s(rY);txr=r(Nwt,"FlaxBartForCausalLM"),Nwt.forEach(t),axr=r(sIe," (BART model)"),sIe.forEach(t),nxr=i(Xe),ZE=n(Xe,"LI",{});var lIe=s(ZE);YTe=n(lIe,"STRONG",{});var jwt=s(YTe);sxr=r(jwt,"bert"),jwt.forEach(t),lxr=r(lIe," \u2014 "),tY=n(lIe,"A",{href:!0});var Dwt=s(tY);ixr=r(Dwt,"FlaxBertForCausalLM"),Dwt.forEach(t),dxr=r(lIe," (BERT model)"),lIe.forEach(t),cxr=i(Xe),eC=n(Xe,"LI",{});var iIe=s(eC);KTe=n(iIe,"STRONG",{});var Gwt=s(KTe);fxr=r(Gwt,"big_bird"),Gwt.forEach(t),mxr=r(iIe," \u2014 "),aY=n(iIe,"A",{href:!0});var Owt=s(aY);gxr=r(Owt,"FlaxBigBirdForCausalLM"),Owt.forEach(t),hxr=r(iIe," (BigBird model)"),iIe.forEach(t),pxr=i(Xe),oC=n(Xe,"LI",{});var dIe=s(oC);ZTe=n(dIe,"STRONG",{});var Vwt=s(ZTe);uxr=r(Vwt,"electra"),Vwt.forEach(t),_xr=r(dIe," \u2014 "),nY=n(dIe,"A",{href:!0});var Xwt=s(nY);bxr=r(Xwt,"FlaxElectraForCausalLM"),Xwt.forEach(t),vxr=r(dIe," (ELECTRA model)"),dIe.forEach(t),Fxr=i(Xe),rC=n(Xe,"LI",{});var cIe=s(rC);e7e=n(cIe,"STRONG",{});var zwt=s(e7e);Txr=r(zwt,"gpt2"),zwt.forEach(t),Mxr=r(cIe," \u2014 "),sY=n(cIe,"A",{href:!0});var Wwt=s(sY);Exr=r(Wwt,"FlaxGPT2LMHeadModel"),Wwt.forEach(t),Cxr=r(cIe," (OpenAI GPT-2 model)"),cIe.forEach(t),wxr=i(Xe),tC=n(Xe,"LI",{});var fIe=s(tC);o7e=n(fIe,"STRONG",{});var Qwt=s(o7e);Axr=r(Qwt,"gpt_neo"),Qwt.forEach(t),yxr=r(fIe," \u2014 "),lY=n(fIe,"A",{href:!0});var Hwt=s(lY);Lxr=r(Hwt,"FlaxGPTNeoForCausalLM"),Hwt.forEach(t),xxr=r(fIe," (GPT Neo model)"),fIe.forEach(t),$xr=i(Xe),aC=n(Xe,"LI",{});var mIe=s(aC);r7e=n(mIe,"STRONG",{});var Uwt=s(r7e);kxr=r(Uwt,"gptj"),Uwt.forEach(t),Sxr=r(mIe," \u2014 "),iY=n(mIe,"A",{href:!0});var Jwt=s(iY);Rxr=r(Jwt,"FlaxGPTJForCausalLM"),Jwt.forEach(t),Pxr=r(mIe," (GPT-J model)"),mIe.forEach(t),Bxr=i(Xe),nC=n(Xe,"LI",{});var gIe=s(nC);t7e=n(gIe,"STRONG",{});var Ywt=s(t7e);Ixr=r(Ywt,"roberta"),Ywt.forEach(t),qxr=r(gIe," \u2014 "),dY=n(gIe,"A",{href:!0});var Kwt=s(dY);Nxr=r(Kwt,"FlaxRobertaForCausalLM"),Kwt.forEach(t),jxr=r(gIe," (RoBERTa model)"),gIe.forEach(t),Dxr=i(Xe),sC=n(Xe,"LI",{});var hIe=s(sC);a7e=n(hIe,"STRONG",{});var Zwt=s(a7e);Gxr=r(Zwt,"xglm"),Zwt.forEach(t),Oxr=r(hIe," \u2014 "),cY=n(hIe,"A",{href:!0});var eAt=s(cY);Vxr=r(eAt,"FlaxXGLMForCausalLM"),eAt.forEach(t),Xxr=r(hIe," (XGLM model)"),hIe.forEach(t),Xe.forEach(t),zxr=i(Xl),T(lC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),pje=i(f),Bc=n(f,"H2",{class:!0});var MGe=s(Bc);iC=n(MGe,"A",{id:!0,class:!0,href:!0});var oAt=s(iC);n7e=n(oAt,"SPAN",{});var rAt=s(n7e);T($9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),Wxr=i(MGe),s7e=n(MGe,"SPAN",{});var tAt=s(s7e);Qxr=r(tAt,"FlaxAutoModelForPreTraining"),tAt.forEach(t),MGe.forEach(t),uje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(k9.$$.fragment,zl),Hxr=i(zl),Ic=n(zl,"P",{});var $ee=s(Ic);Uxr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fY=n($ee,"A",{href:!0});var aAt=s(fY);Jxr=r(aAt,"from_pretrained()"),aAt.forEach(t),Yxr=r($ee," class method or the "),mY=n($ee,"A",{href:!0});var nAt=s(mY);Kxr=r(nAt,"from_config()"),nAt.forEach(t),Zxr=r($ee,` class
method.`),$ee.forEach(t),e$r=i(zl),S9=n(zl,"P",{});var EGe=s(S9);o$r=r(EGe,"This class cannot be instantiated directly using "),l7e=n(EGe,"CODE",{});var sAt=s(l7e);r$r=r(sAt,"__init__()"),sAt.forEach(t),t$r=r(EGe," (throws an error)."),EGe.forEach(t),a$r=i(zl),Vt=n(zl,"DIV",{class:!0});var Kw=s(Vt);T(R9.$$.fragment,Kw),n$r=i(Kw),i7e=n(Kw,"P",{});var lAt=s(i7e);s$r=r(lAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lAt.forEach(t),l$r=i(Kw),qc=n(Kw,"P",{});var kee=s(qc);i$r=r(kee,`Note:
Loading a model from its configuration file does `),d7e=n(kee,"STRONG",{});var iAt=s(d7e);d$r=r(iAt,"not"),iAt.forEach(t),c$r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(kee,"A",{href:!0});var dAt=s(gY);f$r=r(dAt,"from_pretrained()"),dAt.forEach(t),m$r=r(kee," to load the model weights."),kee.forEach(t),g$r=i(Kw),T(dC.$$.fragment,Kw),Kw.forEach(t),h$r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(P9.$$.fragment,Wl),p$r=i(Wl),c7e=n(Wl,"P",{});var cAt=s(c7e);u$r=r(cAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cAt.forEach(t),_$r=i(Wl),un=n(Wl,"P",{});var Zw=s(un);b$r=r(Zw,"The model class to instantiate is selected based on the "),f7e=n(Zw,"CODE",{});var fAt=s(f7e);v$r=r(fAt,"model_type"),fAt.forEach(t),F$r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),m7e=n(Zw,"CODE",{});var mAt=s(m7e);T$r=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),M$r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=n(Zw,"CODE",{});var gAt=s(g7e);E$r=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),C$r=r(Zw,":"),Zw.forEach(t),w$r=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);cC=n(we,"LI",{});var pIe=s(cC);h7e=n(pIe,"STRONG",{});var hAt=s(h7e);A$r=r(hAt,"albert"),hAt.forEach(t),y$r=r(pIe," \u2014 "),hY=n(pIe,"A",{href:!0});var pAt=s(hY);L$r=r(pAt,"FlaxAlbertForPreTraining"),pAt.forEach(t),x$r=r(pIe," (ALBERT model)"),pIe.forEach(t),$$r=i(we),fC=n(we,"LI",{});var uIe=s(fC);p7e=n(uIe,"STRONG",{});var uAt=s(p7e);k$r=r(uAt,"bart"),uAt.forEach(t),S$r=r(uIe," \u2014 "),pY=n(uIe,"A",{href:!0});var _At=s(pY);R$r=r(_At,"FlaxBartForConditionalGeneration"),_At.forEach(t),P$r=r(uIe," (BART model)"),uIe.forEach(t),B$r=i(we),mC=n(we,"LI",{});var _Ie=s(mC);u7e=n(_Ie,"STRONG",{});var bAt=s(u7e);I$r=r(bAt,"bert"),bAt.forEach(t),q$r=r(_Ie," \u2014 "),uY=n(_Ie,"A",{href:!0});var vAt=s(uY);N$r=r(vAt,"FlaxBertForPreTraining"),vAt.forEach(t),j$r=r(_Ie," (BERT model)"),_Ie.forEach(t),D$r=i(we),gC=n(we,"LI",{});var bIe=s(gC);_7e=n(bIe,"STRONG",{});var FAt=s(_7e);G$r=r(FAt,"big_bird"),FAt.forEach(t),O$r=r(bIe," \u2014 "),_Y=n(bIe,"A",{href:!0});var TAt=s(_Y);V$r=r(TAt,"FlaxBigBirdForPreTraining"),TAt.forEach(t),X$r=r(bIe," (BigBird model)"),bIe.forEach(t),z$r=i(we),hC=n(we,"LI",{});var vIe=s(hC);b7e=n(vIe,"STRONG",{});var MAt=s(b7e);W$r=r(MAt,"electra"),MAt.forEach(t),Q$r=r(vIe," \u2014 "),bY=n(vIe,"A",{href:!0});var EAt=s(bY);H$r=r(EAt,"FlaxElectraForPreTraining"),EAt.forEach(t),U$r=r(vIe," (ELECTRA model)"),vIe.forEach(t),J$r=i(we),pC=n(we,"LI",{});var FIe=s(pC);v7e=n(FIe,"STRONG",{});var CAt=s(v7e);Y$r=r(CAt,"mbart"),CAt.forEach(t),K$r=r(FIe," \u2014 "),vY=n(FIe,"A",{href:!0});var wAt=s(vY);Z$r=r(wAt,"FlaxMBartForConditionalGeneration"),wAt.forEach(t),ekr=r(FIe," (mBART model)"),FIe.forEach(t),okr=i(we),uC=n(we,"LI",{});var TIe=s(uC);F7e=n(TIe,"STRONG",{});var AAt=s(F7e);rkr=r(AAt,"mt5"),AAt.forEach(t),tkr=r(TIe," \u2014 "),FY=n(TIe,"A",{href:!0});var yAt=s(FY);akr=r(yAt,"FlaxMT5ForConditionalGeneration"),yAt.forEach(t),nkr=r(TIe," (mT5 model)"),TIe.forEach(t),skr=i(we),_C=n(we,"LI",{});var MIe=s(_C);T7e=n(MIe,"STRONG",{});var LAt=s(T7e);lkr=r(LAt,"roberta"),LAt.forEach(t),ikr=r(MIe," \u2014 "),TY=n(MIe,"A",{href:!0});var xAt=s(TY);dkr=r(xAt,"FlaxRobertaForMaskedLM"),xAt.forEach(t),ckr=r(MIe," (RoBERTa model)"),MIe.forEach(t),fkr=i(we),bC=n(we,"LI",{});var EIe=s(bC);M7e=n(EIe,"STRONG",{});var $At=s(M7e);mkr=r($At,"roformer"),$At.forEach(t),gkr=r(EIe," \u2014 "),MY=n(EIe,"A",{href:!0});var kAt=s(MY);hkr=r(kAt,"FlaxRoFormerForMaskedLM"),kAt.forEach(t),pkr=r(EIe," (RoFormer model)"),EIe.forEach(t),ukr=i(we),vC=n(we,"LI",{});var CIe=s(vC);E7e=n(CIe,"STRONG",{});var SAt=s(E7e);_kr=r(SAt,"t5"),SAt.forEach(t),bkr=r(CIe," \u2014 "),EY=n(CIe,"A",{href:!0});var RAt=s(EY);vkr=r(RAt,"FlaxT5ForConditionalGeneration"),RAt.forEach(t),Fkr=r(CIe," (T5 model)"),CIe.forEach(t),Tkr=i(we),FC=n(we,"LI",{});var wIe=s(FC);C7e=n(wIe,"STRONG",{});var PAt=s(C7e);Mkr=r(PAt,"wav2vec2"),PAt.forEach(t),Ekr=r(wIe," \u2014 "),CY=n(wIe,"A",{href:!0});var BAt=s(CY);Ckr=r(BAt,"FlaxWav2Vec2ForPreTraining"),BAt.forEach(t),wkr=r(wIe," (Wav2Vec2 model)"),wIe.forEach(t),Akr=i(we),TC=n(we,"LI",{});var AIe=s(TC);w7e=n(AIe,"STRONG",{});var IAt=s(w7e);ykr=r(IAt,"xlm-roberta"),IAt.forEach(t),Lkr=r(AIe," \u2014 "),wY=n(AIe,"A",{href:!0});var qAt=s(wY);xkr=r(qAt,"FlaxXLMRobertaForMaskedLM"),qAt.forEach(t),$kr=r(AIe," (XLM-RoBERTa model)"),AIe.forEach(t),we.forEach(t),kkr=i(Wl),T(MC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),_je=i(f),Nc=n(f,"H2",{class:!0});var CGe=s(Nc);EC=n(CGe,"A",{id:!0,class:!0,href:!0});var NAt=s(EC);A7e=n(NAt,"SPAN",{});var jAt=s(A7e);T(B9.$$.fragment,jAt),jAt.forEach(t),NAt.forEach(t),Skr=i(CGe),y7e=n(CGe,"SPAN",{});var DAt=s(y7e);Rkr=r(DAt,"FlaxAutoModelForMaskedLM"),DAt.forEach(t),CGe.forEach(t),bje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(I9.$$.fragment,Ql),Pkr=i(Ql),jc=n(Ql,"P",{});var See=s(jc);Bkr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=n(See,"A",{href:!0});var GAt=s(AY);Ikr=r(GAt,"from_pretrained()"),GAt.forEach(t),qkr=r(See," class method or the "),yY=n(See,"A",{href:!0});var OAt=s(yY);Nkr=r(OAt,"from_config()"),OAt.forEach(t),jkr=r(See,` class
method.`),See.forEach(t),Dkr=i(Ql),q9=n(Ql,"P",{});var wGe=s(q9);Gkr=r(wGe,"This class cannot be instantiated directly using "),L7e=n(wGe,"CODE",{});var VAt=s(L7e);Okr=r(VAt,"__init__()"),VAt.forEach(t),Vkr=r(wGe," (throws an error)."),wGe.forEach(t),Xkr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var eA=s(Xt);T(N9.$$.fragment,eA),zkr=i(eA),x7e=n(eA,"P",{});var XAt=s(x7e);Wkr=r(XAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XAt.forEach(t),Qkr=i(eA),Dc=n(eA,"P",{});var Ree=s(Dc);Hkr=r(Ree,`Note:
Loading a model from its configuration file does `),$7e=n(Ree,"STRONG",{});var zAt=s($7e);Ukr=r(zAt,"not"),zAt.forEach(t),Jkr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(Ree,"A",{href:!0});var WAt=s(LY);Ykr=r(WAt,"from_pretrained()"),WAt.forEach(t),Kkr=r(Ree," to load the model weights."),Ree.forEach(t),Zkr=i(eA),T(CC.$$.fragment,eA),eA.forEach(t),eSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(j9.$$.fragment,Hl),oSr=i(Hl),k7e=n(Hl,"P",{});var QAt=s(k7e);rSr=r(QAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QAt.forEach(t),tSr=i(Hl),_n=n(Hl,"P",{});var oA=s(_n);aSr=r(oA,"The model class to instantiate is selected based on the "),S7e=n(oA,"CODE",{});var HAt=s(S7e);nSr=r(HAt,"model_type"),HAt.forEach(t),sSr=r(oA,` property of the config object (either
passed as an argument or loaded from `),R7e=n(oA,"CODE",{});var UAt=s(R7e);lSr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),iSr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(oA,"CODE",{});var JAt=s(P7e);dSr=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),cSr=r(oA,":"),oA.forEach(t),fSr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);wC=n(Ie,"LI",{});var yIe=s(wC);B7e=n(yIe,"STRONG",{});var YAt=s(B7e);mSr=r(YAt,"albert"),YAt.forEach(t),gSr=r(yIe," \u2014 "),xY=n(yIe,"A",{href:!0});var KAt=s(xY);hSr=r(KAt,"FlaxAlbertForMaskedLM"),KAt.forEach(t),pSr=r(yIe," (ALBERT model)"),yIe.forEach(t),uSr=i(Ie),AC=n(Ie,"LI",{});var LIe=s(AC);I7e=n(LIe,"STRONG",{});var ZAt=s(I7e);_Sr=r(ZAt,"bart"),ZAt.forEach(t),bSr=r(LIe," \u2014 "),$Y=n(LIe,"A",{href:!0});var eyt=s($Y);vSr=r(eyt,"FlaxBartForConditionalGeneration"),eyt.forEach(t),FSr=r(LIe," (BART model)"),LIe.forEach(t),TSr=i(Ie),yC=n(Ie,"LI",{});var xIe=s(yC);q7e=n(xIe,"STRONG",{});var oyt=s(q7e);MSr=r(oyt,"bert"),oyt.forEach(t),ESr=r(xIe," \u2014 "),kY=n(xIe,"A",{href:!0});var ryt=s(kY);CSr=r(ryt,"FlaxBertForMaskedLM"),ryt.forEach(t),wSr=r(xIe," (BERT model)"),xIe.forEach(t),ASr=i(Ie),LC=n(Ie,"LI",{});var $Ie=s(LC);N7e=n($Ie,"STRONG",{});var tyt=s(N7e);ySr=r(tyt,"big_bird"),tyt.forEach(t),LSr=r($Ie," \u2014 "),SY=n($Ie,"A",{href:!0});var ayt=s(SY);xSr=r(ayt,"FlaxBigBirdForMaskedLM"),ayt.forEach(t),$Sr=r($Ie," (BigBird model)"),$Ie.forEach(t),kSr=i(Ie),xC=n(Ie,"LI",{});var kIe=s(xC);j7e=n(kIe,"STRONG",{});var nyt=s(j7e);SSr=r(nyt,"distilbert"),nyt.forEach(t),RSr=r(kIe," \u2014 "),RY=n(kIe,"A",{href:!0});var syt=s(RY);PSr=r(syt,"FlaxDistilBertForMaskedLM"),syt.forEach(t),BSr=r(kIe," (DistilBERT model)"),kIe.forEach(t),ISr=i(Ie),$C=n(Ie,"LI",{});var SIe=s($C);D7e=n(SIe,"STRONG",{});var lyt=s(D7e);qSr=r(lyt,"electra"),lyt.forEach(t),NSr=r(SIe," \u2014 "),PY=n(SIe,"A",{href:!0});var iyt=s(PY);jSr=r(iyt,"FlaxElectraForMaskedLM"),iyt.forEach(t),DSr=r(SIe," (ELECTRA model)"),SIe.forEach(t),GSr=i(Ie),kC=n(Ie,"LI",{});var RIe=s(kC);G7e=n(RIe,"STRONG",{});var dyt=s(G7e);OSr=r(dyt,"mbart"),dyt.forEach(t),VSr=r(RIe," \u2014 "),BY=n(RIe,"A",{href:!0});var cyt=s(BY);XSr=r(cyt,"FlaxMBartForConditionalGeneration"),cyt.forEach(t),zSr=r(RIe," (mBART model)"),RIe.forEach(t),WSr=i(Ie),SC=n(Ie,"LI",{});var PIe=s(SC);O7e=n(PIe,"STRONG",{});var fyt=s(O7e);QSr=r(fyt,"roberta"),fyt.forEach(t),HSr=r(PIe," \u2014 "),IY=n(PIe,"A",{href:!0});var myt=s(IY);USr=r(myt,"FlaxRobertaForMaskedLM"),myt.forEach(t),JSr=r(PIe," (RoBERTa model)"),PIe.forEach(t),YSr=i(Ie),RC=n(Ie,"LI",{});var BIe=s(RC);V7e=n(BIe,"STRONG",{});var gyt=s(V7e);KSr=r(gyt,"roformer"),gyt.forEach(t),ZSr=r(BIe," \u2014 "),qY=n(BIe,"A",{href:!0});var hyt=s(qY);eRr=r(hyt,"FlaxRoFormerForMaskedLM"),hyt.forEach(t),oRr=r(BIe," (RoFormer model)"),BIe.forEach(t),rRr=i(Ie),PC=n(Ie,"LI",{});var IIe=s(PC);X7e=n(IIe,"STRONG",{});var pyt=s(X7e);tRr=r(pyt,"xlm-roberta"),pyt.forEach(t),aRr=r(IIe," \u2014 "),NY=n(IIe,"A",{href:!0});var uyt=s(NY);nRr=r(uyt,"FlaxXLMRobertaForMaskedLM"),uyt.forEach(t),sRr=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),Ie.forEach(t),lRr=i(Hl),T(BC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),vje=i(f),Gc=n(f,"H2",{class:!0});var AGe=s(Gc);IC=n(AGe,"A",{id:!0,class:!0,href:!0});var _yt=s(IC);z7e=n(_yt,"SPAN",{});var byt=s(z7e);T(D9.$$.fragment,byt),byt.forEach(t),_yt.forEach(t),iRr=i(AGe),W7e=n(AGe,"SPAN",{});var vyt=s(W7e);dRr=r(vyt,"FlaxAutoModelForSeq2SeqLM"),vyt.forEach(t),AGe.forEach(t),Fje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(G9.$$.fragment,Ul),cRr=i(Ul),Oc=n(Ul,"P",{});var Pee=s(Oc);fRr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=n(Pee,"A",{href:!0});var Fyt=s(jY);mRr=r(Fyt,"from_pretrained()"),Fyt.forEach(t),gRr=r(Pee," class method or the "),DY=n(Pee,"A",{href:!0});var Tyt=s(DY);hRr=r(Tyt,"from_config()"),Tyt.forEach(t),pRr=r(Pee,` class
method.`),Pee.forEach(t),uRr=i(Ul),O9=n(Ul,"P",{});var yGe=s(O9);_Rr=r(yGe,"This class cannot be instantiated directly using "),Q7e=n(yGe,"CODE",{});var Myt=s(Q7e);bRr=r(Myt,"__init__()"),Myt.forEach(t),vRr=r(yGe," (throws an error)."),yGe.forEach(t),FRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var rA=s(zt);T(V9.$$.fragment,rA),TRr=i(rA),H7e=n(rA,"P",{});var Eyt=s(H7e);MRr=r(Eyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Eyt.forEach(t),ERr=i(rA),Vc=n(rA,"P",{});var Bee=s(Vc);CRr=r(Bee,`Note:
Loading a model from its configuration file does `),U7e=n(Bee,"STRONG",{});var Cyt=s(U7e);wRr=r(Cyt,"not"),Cyt.forEach(t),ARr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(Bee,"A",{href:!0});var wyt=s(GY);yRr=r(wyt,"from_pretrained()"),wyt.forEach(t),LRr=r(Bee," to load the model weights."),Bee.forEach(t),xRr=i(rA),T(qC.$$.fragment,rA),rA.forEach(t),$Rr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(X9.$$.fragment,Jl),kRr=i(Jl),J7e=n(Jl,"P",{});var Ayt=s(J7e);SRr=r(Ayt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ayt.forEach(t),RRr=i(Jl),bn=n(Jl,"P",{});var tA=s(bn);PRr=r(tA,"The model class to instantiate is selected based on the "),Y7e=n(tA,"CODE",{});var yyt=s(Y7e);BRr=r(yyt,"model_type"),yyt.forEach(t),IRr=r(tA,` property of the config object (either
passed as an argument or loaded from `),K7e=n(tA,"CODE",{});var Lyt=s(K7e);qRr=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),NRr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(tA,"CODE",{});var xyt=s(Z7e);jRr=r(xyt,"pretrained_model_name_or_path"),xyt.forEach(t),DRr=r(tA,":"),tA.forEach(t),GRr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);NC=n(ze,"LI",{});var qIe=s(NC);eMe=n(qIe,"STRONG",{});var $yt=s(eMe);ORr=r($yt,"bart"),$yt.forEach(t),VRr=r(qIe," \u2014 "),OY=n(qIe,"A",{href:!0});var kyt=s(OY);XRr=r(kyt,"FlaxBartForConditionalGeneration"),kyt.forEach(t),zRr=r(qIe," (BART model)"),qIe.forEach(t),WRr=i(ze),jC=n(ze,"LI",{});var NIe=s(jC);oMe=n(NIe,"STRONG",{});var Syt=s(oMe);QRr=r(Syt,"blenderbot"),Syt.forEach(t),HRr=r(NIe," \u2014 "),VY=n(NIe,"A",{href:!0});var Ryt=s(VY);URr=r(Ryt,"FlaxBlenderbotForConditionalGeneration"),Ryt.forEach(t),JRr=r(NIe," (Blenderbot model)"),NIe.forEach(t),YRr=i(ze),DC=n(ze,"LI",{});var jIe=s(DC);rMe=n(jIe,"STRONG",{});var Pyt=s(rMe);KRr=r(Pyt,"blenderbot-small"),Pyt.forEach(t),ZRr=r(jIe," \u2014 "),XY=n(jIe,"A",{href:!0});var Byt=s(XY);ePr=r(Byt,"FlaxBlenderbotSmallForConditionalGeneration"),Byt.forEach(t),oPr=r(jIe," (BlenderbotSmall model)"),jIe.forEach(t),rPr=i(ze),GC=n(ze,"LI",{});var DIe=s(GC);tMe=n(DIe,"STRONG",{});var Iyt=s(tMe);tPr=r(Iyt,"encoder-decoder"),Iyt.forEach(t),aPr=r(DIe," \u2014 "),zY=n(DIe,"A",{href:!0});var qyt=s(zY);nPr=r(qyt,"FlaxEncoderDecoderModel"),qyt.forEach(t),sPr=r(DIe," (Encoder decoder model)"),DIe.forEach(t),lPr=i(ze),OC=n(ze,"LI",{});var GIe=s(OC);aMe=n(GIe,"STRONG",{});var Nyt=s(aMe);iPr=r(Nyt,"marian"),Nyt.forEach(t),dPr=r(GIe," \u2014 "),WY=n(GIe,"A",{href:!0});var jyt=s(WY);cPr=r(jyt,"FlaxMarianMTModel"),jyt.forEach(t),fPr=r(GIe," (Marian model)"),GIe.forEach(t),mPr=i(ze),VC=n(ze,"LI",{});var OIe=s(VC);nMe=n(OIe,"STRONG",{});var Dyt=s(nMe);gPr=r(Dyt,"mbart"),Dyt.forEach(t),hPr=r(OIe," \u2014 "),QY=n(OIe,"A",{href:!0});var Gyt=s(QY);pPr=r(Gyt,"FlaxMBartForConditionalGeneration"),Gyt.forEach(t),uPr=r(OIe," (mBART model)"),OIe.forEach(t),_Pr=i(ze),XC=n(ze,"LI",{});var VIe=s(XC);sMe=n(VIe,"STRONG",{});var Oyt=s(sMe);bPr=r(Oyt,"mt5"),Oyt.forEach(t),vPr=r(VIe," \u2014 "),HY=n(VIe,"A",{href:!0});var Vyt=s(HY);FPr=r(Vyt,"FlaxMT5ForConditionalGeneration"),Vyt.forEach(t),TPr=r(VIe," (mT5 model)"),VIe.forEach(t),MPr=i(ze),zC=n(ze,"LI",{});var XIe=s(zC);lMe=n(XIe,"STRONG",{});var Xyt=s(lMe);EPr=r(Xyt,"pegasus"),Xyt.forEach(t),CPr=r(XIe," \u2014 "),UY=n(XIe,"A",{href:!0});var zyt=s(UY);wPr=r(zyt,"FlaxPegasusForConditionalGeneration"),zyt.forEach(t),APr=r(XIe," (Pegasus model)"),XIe.forEach(t),yPr=i(ze),WC=n(ze,"LI",{});var zIe=s(WC);iMe=n(zIe,"STRONG",{});var Wyt=s(iMe);LPr=r(Wyt,"t5"),Wyt.forEach(t),xPr=r(zIe," \u2014 "),JY=n(zIe,"A",{href:!0});var Qyt=s(JY);$Pr=r(Qyt,"FlaxT5ForConditionalGeneration"),Qyt.forEach(t),kPr=r(zIe," (T5 model)"),zIe.forEach(t),ze.forEach(t),SPr=i(Jl),T(QC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Tje=i(f),Xc=n(f,"H2",{class:!0});var LGe=s(Xc);HC=n(LGe,"A",{id:!0,class:!0,href:!0});var Hyt=s(HC);dMe=n(Hyt,"SPAN",{});var Uyt=s(dMe);T(z9.$$.fragment,Uyt),Uyt.forEach(t),Hyt.forEach(t),RPr=i(LGe),cMe=n(LGe,"SPAN",{});var Jyt=s(cMe);PPr=r(Jyt,"FlaxAutoModelForSequenceClassification"),Jyt.forEach(t),LGe.forEach(t),Mje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(W9.$$.fragment,Yl),BPr=i(Yl),zc=n(Yl,"P",{});var Iee=s(zc);IPr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=n(Iee,"A",{href:!0});var Yyt=s(YY);qPr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),NPr=r(Iee," class method or the "),KY=n(Iee,"A",{href:!0});var Kyt=s(KY);jPr=r(Kyt,"from_config()"),Kyt.forEach(t),DPr=r(Iee,` class
method.`),Iee.forEach(t),GPr=i(Yl),Q9=n(Yl,"P",{});var xGe=s(Q9);OPr=r(xGe,"This class cannot be instantiated directly using "),fMe=n(xGe,"CODE",{});var Zyt=s(fMe);VPr=r(Zyt,"__init__()"),Zyt.forEach(t),XPr=r(xGe," (throws an error)."),xGe.forEach(t),zPr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var aA=s(Wt);T(H9.$$.fragment,aA),WPr=i(aA),mMe=n(aA,"P",{});var eLt=s(mMe);QPr=r(eLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eLt.forEach(t),HPr=i(aA),Wc=n(aA,"P",{});var qee=s(Wc);UPr=r(qee,`Note:
Loading a model from its configuration file does `),gMe=n(qee,"STRONG",{});var oLt=s(gMe);JPr=r(oLt,"not"),oLt.forEach(t),YPr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(qee,"A",{href:!0});var rLt=s(ZY);KPr=r(rLt,"from_pretrained()"),rLt.forEach(t),ZPr=r(qee," to load the model weights."),qee.forEach(t),eBr=i(aA),T(UC.$$.fragment,aA),aA.forEach(t),oBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(U9.$$.fragment,Kl),rBr=i(Kl),hMe=n(Kl,"P",{});var tLt=s(hMe);tBr=r(tLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tLt.forEach(t),aBr=i(Kl),vn=n(Kl,"P",{});var nA=s(vn);nBr=r(nA,"The model class to instantiate is selected based on the "),pMe=n(nA,"CODE",{});var aLt=s(pMe);sBr=r(aLt,"model_type"),aLt.forEach(t),lBr=r(nA,` property of the config object (either
passed as an argument or loaded from `),uMe=n(nA,"CODE",{});var nLt=s(uMe);iBr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),dBr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(nA,"CODE",{});var sLt=s(_Me);cBr=r(sLt,"pretrained_model_name_or_path"),sLt.forEach(t),fBr=r(nA,":"),nA.forEach(t),mBr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);JC=n(qe,"LI",{});var WIe=s(JC);bMe=n(WIe,"STRONG",{});var lLt=s(bMe);gBr=r(lLt,"albert"),lLt.forEach(t),hBr=r(WIe," \u2014 "),eK=n(WIe,"A",{href:!0});var iLt=s(eK);pBr=r(iLt,"FlaxAlbertForSequenceClassification"),iLt.forEach(t),uBr=r(WIe," (ALBERT model)"),WIe.forEach(t),_Br=i(qe),YC=n(qe,"LI",{});var QIe=s(YC);vMe=n(QIe,"STRONG",{});var dLt=s(vMe);bBr=r(dLt,"bart"),dLt.forEach(t),vBr=r(QIe," \u2014 "),oK=n(QIe,"A",{href:!0});var cLt=s(oK);FBr=r(cLt,"FlaxBartForSequenceClassification"),cLt.forEach(t),TBr=r(QIe," (BART model)"),QIe.forEach(t),MBr=i(qe),KC=n(qe,"LI",{});var HIe=s(KC);FMe=n(HIe,"STRONG",{});var fLt=s(FMe);EBr=r(fLt,"bert"),fLt.forEach(t),CBr=r(HIe," \u2014 "),rK=n(HIe,"A",{href:!0});var mLt=s(rK);wBr=r(mLt,"FlaxBertForSequenceClassification"),mLt.forEach(t),ABr=r(HIe," (BERT model)"),HIe.forEach(t),yBr=i(qe),ZC=n(qe,"LI",{});var UIe=s(ZC);TMe=n(UIe,"STRONG",{});var gLt=s(TMe);LBr=r(gLt,"big_bird"),gLt.forEach(t),xBr=r(UIe," \u2014 "),tK=n(UIe,"A",{href:!0});var hLt=s(tK);$Br=r(hLt,"FlaxBigBirdForSequenceClassification"),hLt.forEach(t),kBr=r(UIe," (BigBird model)"),UIe.forEach(t),SBr=i(qe),e5=n(qe,"LI",{});var JIe=s(e5);MMe=n(JIe,"STRONG",{});var pLt=s(MMe);RBr=r(pLt,"distilbert"),pLt.forEach(t),PBr=r(JIe," \u2014 "),aK=n(JIe,"A",{href:!0});var uLt=s(aK);BBr=r(uLt,"FlaxDistilBertForSequenceClassification"),uLt.forEach(t),IBr=r(JIe," (DistilBERT model)"),JIe.forEach(t),qBr=i(qe),o5=n(qe,"LI",{});var YIe=s(o5);EMe=n(YIe,"STRONG",{});var _Lt=s(EMe);NBr=r(_Lt,"electra"),_Lt.forEach(t),jBr=r(YIe," \u2014 "),nK=n(YIe,"A",{href:!0});var bLt=s(nK);DBr=r(bLt,"FlaxElectraForSequenceClassification"),bLt.forEach(t),GBr=r(YIe," (ELECTRA model)"),YIe.forEach(t),OBr=i(qe),r5=n(qe,"LI",{});var KIe=s(r5);CMe=n(KIe,"STRONG",{});var vLt=s(CMe);VBr=r(vLt,"mbart"),vLt.forEach(t),XBr=r(KIe," \u2014 "),sK=n(KIe,"A",{href:!0});var FLt=s(sK);zBr=r(FLt,"FlaxMBartForSequenceClassification"),FLt.forEach(t),WBr=r(KIe," (mBART model)"),KIe.forEach(t),QBr=i(qe),t5=n(qe,"LI",{});var ZIe=s(t5);wMe=n(ZIe,"STRONG",{});var TLt=s(wMe);HBr=r(TLt,"roberta"),TLt.forEach(t),UBr=r(ZIe," \u2014 "),lK=n(ZIe,"A",{href:!0});var MLt=s(lK);JBr=r(MLt,"FlaxRobertaForSequenceClassification"),MLt.forEach(t),YBr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),KBr=i(qe),a5=n(qe,"LI",{});var eqe=s(a5);AMe=n(eqe,"STRONG",{});var ELt=s(AMe);ZBr=r(ELt,"roformer"),ELt.forEach(t),eIr=r(eqe," \u2014 "),iK=n(eqe,"A",{href:!0});var CLt=s(iK);oIr=r(CLt,"FlaxRoFormerForSequenceClassification"),CLt.forEach(t),rIr=r(eqe," (RoFormer model)"),eqe.forEach(t),tIr=i(qe),n5=n(qe,"LI",{});var oqe=s(n5);yMe=n(oqe,"STRONG",{});var wLt=s(yMe);aIr=r(wLt,"xlm-roberta"),wLt.forEach(t),nIr=r(oqe," \u2014 "),dK=n(oqe,"A",{href:!0});var ALt=s(dK);sIr=r(ALt,"FlaxXLMRobertaForSequenceClassification"),ALt.forEach(t),lIr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),qe.forEach(t),iIr=i(Kl),T(s5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Eje=i(f),Qc=n(f,"H2",{class:!0});var $Ge=s(Qc);l5=n($Ge,"A",{id:!0,class:!0,href:!0});var yLt=s(l5);LMe=n(yLt,"SPAN",{});var LLt=s(LMe);T(J9.$$.fragment,LLt),LLt.forEach(t),yLt.forEach(t),dIr=i($Ge),xMe=n($Ge,"SPAN",{});var xLt=s(xMe);cIr=r(xLt,"FlaxAutoModelForQuestionAnswering"),xLt.forEach(t),$Ge.forEach(t),Cje=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(Y9.$$.fragment,Zl),fIr=i(Zl),Hc=n(Zl,"P",{});var Nee=s(Hc);mIr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=n(Nee,"A",{href:!0});var $Lt=s(cK);gIr=r($Lt,"from_pretrained()"),$Lt.forEach(t),hIr=r(Nee," class method or the "),fK=n(Nee,"A",{href:!0});var kLt=s(fK);pIr=r(kLt,"from_config()"),kLt.forEach(t),uIr=r(Nee,` class
method.`),Nee.forEach(t),_Ir=i(Zl),K9=n(Zl,"P",{});var kGe=s(K9);bIr=r(kGe,"This class cannot be instantiated directly using "),$Me=n(kGe,"CODE",{});var SLt=s($Me);vIr=r(SLt,"__init__()"),SLt.forEach(t),FIr=r(kGe," (throws an error)."),kGe.forEach(t),TIr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var sA=s(Qt);T(Z9.$$.fragment,sA),MIr=i(sA),kMe=n(sA,"P",{});var RLt=s(kMe);EIr=r(RLt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RLt.forEach(t),CIr=i(sA),Uc=n(sA,"P",{});var jee=s(Uc);wIr=r(jee,`Note:
Loading a model from its configuration file does `),SMe=n(jee,"STRONG",{});var PLt=s(SMe);AIr=r(PLt,"not"),PLt.forEach(t),yIr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(jee,"A",{href:!0});var BLt=s(mK);LIr=r(BLt,"from_pretrained()"),BLt.forEach(t),xIr=r(jee," to load the model weights."),jee.forEach(t),$Ir=i(sA),T(i5.$$.fragment,sA),sA.forEach(t),kIr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(ex.$$.fragment,ei),SIr=i(ei),RMe=n(ei,"P",{});var ILt=s(RMe);RIr=r(ILt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ILt.forEach(t),PIr=i(ei),Fn=n(ei,"P",{});var lA=s(Fn);BIr=r(lA,"The model class to instantiate is selected based on the "),PMe=n(lA,"CODE",{});var qLt=s(PMe);IIr=r(qLt,"model_type"),qLt.forEach(t),qIr=r(lA,` property of the config object (either
passed as an argument or loaded from `),BMe=n(lA,"CODE",{});var NLt=s(BMe);NIr=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),jIr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(lA,"CODE",{});var jLt=s(IMe);DIr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),GIr=r(lA,":"),lA.forEach(t),OIr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);d5=n(Ne,"LI",{});var rqe=s(d5);qMe=n(rqe,"STRONG",{});var DLt=s(qMe);VIr=r(DLt,"albert"),DLt.forEach(t),XIr=r(rqe," \u2014 "),gK=n(rqe,"A",{href:!0});var GLt=s(gK);zIr=r(GLt,"FlaxAlbertForQuestionAnswering"),GLt.forEach(t),WIr=r(rqe," (ALBERT model)"),rqe.forEach(t),QIr=i(Ne),c5=n(Ne,"LI",{});var tqe=s(c5);NMe=n(tqe,"STRONG",{});var OLt=s(NMe);HIr=r(OLt,"bart"),OLt.forEach(t),UIr=r(tqe," \u2014 "),hK=n(tqe,"A",{href:!0});var VLt=s(hK);JIr=r(VLt,"FlaxBartForQuestionAnswering"),VLt.forEach(t),YIr=r(tqe," (BART model)"),tqe.forEach(t),KIr=i(Ne),f5=n(Ne,"LI",{});var aqe=s(f5);jMe=n(aqe,"STRONG",{});var XLt=s(jMe);ZIr=r(XLt,"bert"),XLt.forEach(t),eqr=r(aqe," \u2014 "),pK=n(aqe,"A",{href:!0});var zLt=s(pK);oqr=r(zLt,"FlaxBertForQuestionAnswering"),zLt.forEach(t),rqr=r(aqe," (BERT model)"),aqe.forEach(t),tqr=i(Ne),m5=n(Ne,"LI",{});var nqe=s(m5);DMe=n(nqe,"STRONG",{});var WLt=s(DMe);aqr=r(WLt,"big_bird"),WLt.forEach(t),nqr=r(nqe," \u2014 "),uK=n(nqe,"A",{href:!0});var QLt=s(uK);sqr=r(QLt,"FlaxBigBirdForQuestionAnswering"),QLt.forEach(t),lqr=r(nqe," (BigBird model)"),nqe.forEach(t),iqr=i(Ne),g5=n(Ne,"LI",{});var sqe=s(g5);GMe=n(sqe,"STRONG",{});var HLt=s(GMe);dqr=r(HLt,"distilbert"),HLt.forEach(t),cqr=r(sqe," \u2014 "),_K=n(sqe,"A",{href:!0});var ULt=s(_K);fqr=r(ULt,"FlaxDistilBertForQuestionAnswering"),ULt.forEach(t),mqr=r(sqe," (DistilBERT model)"),sqe.forEach(t),gqr=i(Ne),h5=n(Ne,"LI",{});var lqe=s(h5);OMe=n(lqe,"STRONG",{});var JLt=s(OMe);hqr=r(JLt,"electra"),JLt.forEach(t),pqr=r(lqe," \u2014 "),bK=n(lqe,"A",{href:!0});var YLt=s(bK);uqr=r(YLt,"FlaxElectraForQuestionAnswering"),YLt.forEach(t),_qr=r(lqe," (ELECTRA model)"),lqe.forEach(t),bqr=i(Ne),p5=n(Ne,"LI",{});var iqe=s(p5);VMe=n(iqe,"STRONG",{});var KLt=s(VMe);vqr=r(KLt,"mbart"),KLt.forEach(t),Fqr=r(iqe," \u2014 "),vK=n(iqe,"A",{href:!0});var ZLt=s(vK);Tqr=r(ZLt,"FlaxMBartForQuestionAnswering"),ZLt.forEach(t),Mqr=r(iqe," (mBART model)"),iqe.forEach(t),Eqr=i(Ne),u5=n(Ne,"LI",{});var dqe=s(u5);XMe=n(dqe,"STRONG",{});var e8t=s(XMe);Cqr=r(e8t,"roberta"),e8t.forEach(t),wqr=r(dqe," \u2014 "),FK=n(dqe,"A",{href:!0});var o8t=s(FK);Aqr=r(o8t,"FlaxRobertaForQuestionAnswering"),o8t.forEach(t),yqr=r(dqe," (RoBERTa model)"),dqe.forEach(t),Lqr=i(Ne),_5=n(Ne,"LI",{});var cqe=s(_5);zMe=n(cqe,"STRONG",{});var r8t=s(zMe);xqr=r(r8t,"roformer"),r8t.forEach(t),$qr=r(cqe," \u2014 "),TK=n(cqe,"A",{href:!0});var t8t=s(TK);kqr=r(t8t,"FlaxRoFormerForQuestionAnswering"),t8t.forEach(t),Sqr=r(cqe," (RoFormer model)"),cqe.forEach(t),Rqr=i(Ne),b5=n(Ne,"LI",{});var fqe=s(b5);WMe=n(fqe,"STRONG",{});var a8t=s(WMe);Pqr=r(a8t,"xlm-roberta"),a8t.forEach(t),Bqr=r(fqe," \u2014 "),MK=n(fqe,"A",{href:!0});var n8t=s(MK);Iqr=r(n8t,"FlaxXLMRobertaForQuestionAnswering"),n8t.forEach(t),qqr=r(fqe," (XLM-RoBERTa model)"),fqe.forEach(t),Ne.forEach(t),Nqr=i(ei),T(v5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),wje=i(f),Jc=n(f,"H2",{class:!0});var SGe=s(Jc);F5=n(SGe,"A",{id:!0,class:!0,href:!0});var s8t=s(F5);QMe=n(s8t,"SPAN",{});var l8t=s(QMe);T(ox.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),jqr=i(SGe),HMe=n(SGe,"SPAN",{});var i8t=s(HMe);Dqr=r(i8t,"FlaxAutoModelForTokenClassification"),i8t.forEach(t),SGe.forEach(t),Aje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(rx.$$.fragment,oi),Gqr=i(oi),Yc=n(oi,"P",{});var Dee=s(Yc);Oqr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=n(Dee,"A",{href:!0});var d8t=s(EK);Vqr=r(d8t,"from_pretrained()"),d8t.forEach(t),Xqr=r(Dee," class method or the "),CK=n(Dee,"A",{href:!0});var c8t=s(CK);zqr=r(c8t,"from_config()"),c8t.forEach(t),Wqr=r(Dee,` class
method.`),Dee.forEach(t),Qqr=i(oi),tx=n(oi,"P",{});var RGe=s(tx);Hqr=r(RGe,"This class cannot be instantiated directly using "),UMe=n(RGe,"CODE",{});var f8t=s(UMe);Uqr=r(f8t,"__init__()"),f8t.forEach(t),Jqr=r(RGe," (throws an error)."),RGe.forEach(t),Yqr=i(oi),Ht=n(oi,"DIV",{class:!0});var iA=s(Ht);T(ax.$$.fragment,iA),Kqr=i(iA),JMe=n(iA,"P",{});var m8t=s(JMe);Zqr=r(m8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m8t.forEach(t),eNr=i(iA),Kc=n(iA,"P",{});var Gee=s(Kc);oNr=r(Gee,`Note:
Loading a model from its configuration file does `),YMe=n(Gee,"STRONG",{});var g8t=s(YMe);rNr=r(g8t,"not"),g8t.forEach(t),tNr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Gee,"A",{href:!0});var h8t=s(wK);aNr=r(h8t,"from_pretrained()"),h8t.forEach(t),nNr=r(Gee," to load the model weights."),Gee.forEach(t),sNr=i(iA),T(T5.$$.fragment,iA),iA.forEach(t),lNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(nx.$$.fragment,ri),iNr=i(ri),KMe=n(ri,"P",{});var p8t=s(KMe);dNr=r(p8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p8t.forEach(t),cNr=i(ri),Tn=n(ri,"P",{});var dA=s(Tn);fNr=r(dA,"The model class to instantiate is selected based on the "),ZMe=n(dA,"CODE",{});var u8t=s(ZMe);mNr=r(u8t,"model_type"),u8t.forEach(t),gNr=r(dA,` property of the config object (either
passed as an argument or loaded from `),e4e=n(dA,"CODE",{});var _8t=s(e4e);hNr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),pNr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(dA,"CODE",{});var b8t=s(o4e);uNr=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),_Nr=r(dA,":"),dA.forEach(t),bNr=i(ri),De=n(ri,"UL",{});var Fo=s(De);M5=n(Fo,"LI",{});var mqe=s(M5);r4e=n(mqe,"STRONG",{});var v8t=s(r4e);vNr=r(v8t,"albert"),v8t.forEach(t),FNr=r(mqe," \u2014 "),AK=n(mqe,"A",{href:!0});var F8t=s(AK);TNr=r(F8t,"FlaxAlbertForTokenClassification"),F8t.forEach(t),MNr=r(mqe," (ALBERT model)"),mqe.forEach(t),ENr=i(Fo),E5=n(Fo,"LI",{});var gqe=s(E5);t4e=n(gqe,"STRONG",{});var T8t=s(t4e);CNr=r(T8t,"bert"),T8t.forEach(t),wNr=r(gqe," \u2014 "),yK=n(gqe,"A",{href:!0});var M8t=s(yK);ANr=r(M8t,"FlaxBertForTokenClassification"),M8t.forEach(t),yNr=r(gqe," (BERT model)"),gqe.forEach(t),LNr=i(Fo),C5=n(Fo,"LI",{});var hqe=s(C5);a4e=n(hqe,"STRONG",{});var E8t=s(a4e);xNr=r(E8t,"big_bird"),E8t.forEach(t),$Nr=r(hqe," \u2014 "),LK=n(hqe,"A",{href:!0});var C8t=s(LK);kNr=r(C8t,"FlaxBigBirdForTokenClassification"),C8t.forEach(t),SNr=r(hqe," (BigBird model)"),hqe.forEach(t),RNr=i(Fo),w5=n(Fo,"LI",{});var pqe=s(w5);n4e=n(pqe,"STRONG",{});var w8t=s(n4e);PNr=r(w8t,"distilbert"),w8t.forEach(t),BNr=r(pqe," \u2014 "),xK=n(pqe,"A",{href:!0});var A8t=s(xK);INr=r(A8t,"FlaxDistilBertForTokenClassification"),A8t.forEach(t),qNr=r(pqe," (DistilBERT model)"),pqe.forEach(t),NNr=i(Fo),A5=n(Fo,"LI",{});var uqe=s(A5);s4e=n(uqe,"STRONG",{});var y8t=s(s4e);jNr=r(y8t,"electra"),y8t.forEach(t),DNr=r(uqe," \u2014 "),$K=n(uqe,"A",{href:!0});var L8t=s($K);GNr=r(L8t,"FlaxElectraForTokenClassification"),L8t.forEach(t),ONr=r(uqe," (ELECTRA model)"),uqe.forEach(t),VNr=i(Fo),y5=n(Fo,"LI",{});var _qe=s(y5);l4e=n(_qe,"STRONG",{});var x8t=s(l4e);XNr=r(x8t,"roberta"),x8t.forEach(t),zNr=r(_qe," \u2014 "),kK=n(_qe,"A",{href:!0});var $8t=s(kK);WNr=r($8t,"FlaxRobertaForTokenClassification"),$8t.forEach(t),QNr=r(_qe," (RoBERTa model)"),_qe.forEach(t),HNr=i(Fo),L5=n(Fo,"LI",{});var bqe=s(L5);i4e=n(bqe,"STRONG",{});var k8t=s(i4e);UNr=r(k8t,"roformer"),k8t.forEach(t),JNr=r(bqe," \u2014 "),SK=n(bqe,"A",{href:!0});var S8t=s(SK);YNr=r(S8t,"FlaxRoFormerForTokenClassification"),S8t.forEach(t),KNr=r(bqe," (RoFormer model)"),bqe.forEach(t),ZNr=i(Fo),x5=n(Fo,"LI",{});var vqe=s(x5);d4e=n(vqe,"STRONG",{});var R8t=s(d4e);ejr=r(R8t,"xlm-roberta"),R8t.forEach(t),ojr=r(vqe," \u2014 "),RK=n(vqe,"A",{href:!0});var P8t=s(RK);rjr=r(P8t,"FlaxXLMRobertaForTokenClassification"),P8t.forEach(t),tjr=r(vqe," (XLM-RoBERTa model)"),vqe.forEach(t),Fo.forEach(t),ajr=i(ri),T($5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),yje=i(f),Zc=n(f,"H2",{class:!0});var PGe=s(Zc);k5=n(PGe,"A",{id:!0,class:!0,href:!0});var B8t=s(k5);c4e=n(B8t,"SPAN",{});var I8t=s(c4e);T(sx.$$.fragment,I8t),I8t.forEach(t),B8t.forEach(t),njr=i(PGe),f4e=n(PGe,"SPAN",{});var q8t=s(f4e);sjr=r(q8t,"FlaxAutoModelForMultipleChoice"),q8t.forEach(t),PGe.forEach(t),Lje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(lx.$$.fragment,ti),ljr=i(ti),ef=n(ti,"P",{});var Oee=s(ef);ijr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=n(Oee,"A",{href:!0});var N8t=s(PK);djr=r(N8t,"from_pretrained()"),N8t.forEach(t),cjr=r(Oee," class method or the "),BK=n(Oee,"A",{href:!0});var j8t=s(BK);fjr=r(j8t,"from_config()"),j8t.forEach(t),mjr=r(Oee,` class
method.`),Oee.forEach(t),gjr=i(ti),ix=n(ti,"P",{});var BGe=s(ix);hjr=r(BGe,"This class cannot be instantiated directly using "),m4e=n(BGe,"CODE",{});var D8t=s(m4e);pjr=r(D8t,"__init__()"),D8t.forEach(t),ujr=r(BGe," (throws an error)."),BGe.forEach(t),_jr=i(ti),Ut=n(ti,"DIV",{class:!0});var cA=s(Ut);T(dx.$$.fragment,cA),bjr=i(cA),g4e=n(cA,"P",{});var G8t=s(g4e);vjr=r(G8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),G8t.forEach(t),Fjr=i(cA),of=n(cA,"P",{});var Vee=s(of);Tjr=r(Vee,`Note:
Loading a model from its configuration file does `),h4e=n(Vee,"STRONG",{});var O8t=s(h4e);Mjr=r(O8t,"not"),O8t.forEach(t),Ejr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(Vee,"A",{href:!0});var V8t=s(IK);Cjr=r(V8t,"from_pretrained()"),V8t.forEach(t),wjr=r(Vee," to load the model weights."),Vee.forEach(t),Ajr=i(cA),T(S5.$$.fragment,cA),cA.forEach(t),yjr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(cx.$$.fragment,ai),Ljr=i(ai),p4e=n(ai,"P",{});var X8t=s(p4e);xjr=r(X8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X8t.forEach(t),$jr=i(ai),Mn=n(ai,"P",{});var fA=s(Mn);kjr=r(fA,"The model class to instantiate is selected based on the "),u4e=n(fA,"CODE",{});var z8t=s(u4e);Sjr=r(z8t,"model_type"),z8t.forEach(t),Rjr=r(fA,` property of the config object (either
passed as an argument or loaded from `),_4e=n(fA,"CODE",{});var W8t=s(_4e);Pjr=r(W8t,"pretrained_model_name_or_path"),W8t.forEach(t),Bjr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(fA,"CODE",{});var Q8t=s(b4e);Ijr=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),qjr=r(fA,":"),fA.forEach(t),Njr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);R5=n(To,"LI",{});var Fqe=s(R5);v4e=n(Fqe,"STRONG",{});var H8t=s(v4e);jjr=r(H8t,"albert"),H8t.forEach(t),Djr=r(Fqe," \u2014 "),qK=n(Fqe,"A",{href:!0});var U8t=s(qK);Gjr=r(U8t,"FlaxAlbertForMultipleChoice"),U8t.forEach(t),Ojr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),Vjr=i(To),P5=n(To,"LI",{});var Tqe=s(P5);F4e=n(Tqe,"STRONG",{});var J8t=s(F4e);Xjr=r(J8t,"bert"),J8t.forEach(t),zjr=r(Tqe," \u2014 "),NK=n(Tqe,"A",{href:!0});var Y8t=s(NK);Wjr=r(Y8t,"FlaxBertForMultipleChoice"),Y8t.forEach(t),Qjr=r(Tqe," (BERT model)"),Tqe.forEach(t),Hjr=i(To),B5=n(To,"LI",{});var Mqe=s(B5);T4e=n(Mqe,"STRONG",{});var K8t=s(T4e);Ujr=r(K8t,"big_bird"),K8t.forEach(t),Jjr=r(Mqe," \u2014 "),jK=n(Mqe,"A",{href:!0});var Z8t=s(jK);Yjr=r(Z8t,"FlaxBigBirdForMultipleChoice"),Z8t.forEach(t),Kjr=r(Mqe," (BigBird model)"),Mqe.forEach(t),Zjr=i(To),I5=n(To,"LI",{});var Eqe=s(I5);M4e=n(Eqe,"STRONG",{});var e9t=s(M4e);eDr=r(e9t,"distilbert"),e9t.forEach(t),oDr=r(Eqe," \u2014 "),DK=n(Eqe,"A",{href:!0});var o9t=s(DK);rDr=r(o9t,"FlaxDistilBertForMultipleChoice"),o9t.forEach(t),tDr=r(Eqe," (DistilBERT model)"),Eqe.forEach(t),aDr=i(To),q5=n(To,"LI",{});var Cqe=s(q5);E4e=n(Cqe,"STRONG",{});var r9t=s(E4e);nDr=r(r9t,"electra"),r9t.forEach(t),sDr=r(Cqe," \u2014 "),GK=n(Cqe,"A",{href:!0});var t9t=s(GK);lDr=r(t9t,"FlaxElectraForMultipleChoice"),t9t.forEach(t),iDr=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),dDr=i(To),N5=n(To,"LI",{});var wqe=s(N5);C4e=n(wqe,"STRONG",{});var a9t=s(C4e);cDr=r(a9t,"roberta"),a9t.forEach(t),fDr=r(wqe," \u2014 "),OK=n(wqe,"A",{href:!0});var n9t=s(OK);mDr=r(n9t,"FlaxRobertaForMultipleChoice"),n9t.forEach(t),gDr=r(wqe," (RoBERTa model)"),wqe.forEach(t),hDr=i(To),j5=n(To,"LI",{});var Aqe=s(j5);w4e=n(Aqe,"STRONG",{});var s9t=s(w4e);pDr=r(s9t,"roformer"),s9t.forEach(t),uDr=r(Aqe," \u2014 "),VK=n(Aqe,"A",{href:!0});var l9t=s(VK);_Dr=r(l9t,"FlaxRoFormerForMultipleChoice"),l9t.forEach(t),bDr=r(Aqe," (RoFormer model)"),Aqe.forEach(t),vDr=i(To),D5=n(To,"LI",{});var yqe=s(D5);A4e=n(yqe,"STRONG",{});var i9t=s(A4e);FDr=r(i9t,"xlm-roberta"),i9t.forEach(t),TDr=r(yqe," \u2014 "),XK=n(yqe,"A",{href:!0});var d9t=s(XK);MDr=r(d9t,"FlaxXLMRobertaForMultipleChoice"),d9t.forEach(t),EDr=r(yqe," (XLM-RoBERTa model)"),yqe.forEach(t),To.forEach(t),CDr=i(ai),T(G5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),xje=i(f),rf=n(f,"H2",{class:!0});var IGe=s(rf);O5=n(IGe,"A",{id:!0,class:!0,href:!0});var c9t=s(O5);y4e=n(c9t,"SPAN",{});var f9t=s(y4e);T(fx.$$.fragment,f9t),f9t.forEach(t),c9t.forEach(t),wDr=i(IGe),L4e=n(IGe,"SPAN",{});var m9t=s(L4e);ADr=r(m9t,"FlaxAutoModelForNextSentencePrediction"),m9t.forEach(t),IGe.forEach(t),$je=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(mx.$$.fragment,ni),yDr=i(ni),tf=n(ni,"P",{});var Xee=s(tf);LDr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=n(Xee,"A",{href:!0});var g9t=s(zK);xDr=r(g9t,"from_pretrained()"),g9t.forEach(t),$Dr=r(Xee," class method or the "),WK=n(Xee,"A",{href:!0});var h9t=s(WK);kDr=r(h9t,"from_config()"),h9t.forEach(t),SDr=r(Xee,` class
method.`),Xee.forEach(t),RDr=i(ni),gx=n(ni,"P",{});var qGe=s(gx);PDr=r(qGe,"This class cannot be instantiated directly using "),x4e=n(qGe,"CODE",{});var p9t=s(x4e);BDr=r(p9t,"__init__()"),p9t.forEach(t),IDr=r(qGe," (throws an error)."),qGe.forEach(t),qDr=i(ni),Jt=n(ni,"DIV",{class:!0});var mA=s(Jt);T(hx.$$.fragment,mA),NDr=i(mA),$4e=n(mA,"P",{});var u9t=s($4e);jDr=r(u9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u9t.forEach(t),DDr=i(mA),af=n(mA,"P",{});var zee=s(af);GDr=r(zee,`Note:
Loading a model from its configuration file does `),k4e=n(zee,"STRONG",{});var _9t=s(k4e);ODr=r(_9t,"not"),_9t.forEach(t),VDr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(zee,"A",{href:!0});var b9t=s(QK);XDr=r(b9t,"from_pretrained()"),b9t.forEach(t),zDr=r(zee," to load the model weights."),zee.forEach(t),WDr=i(mA),T(V5.$$.fragment,mA),mA.forEach(t),QDr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(px.$$.fragment,si),HDr=i(si),S4e=n(si,"P",{});var v9t=s(S4e);UDr=r(v9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v9t.forEach(t),JDr=i(si),En=n(si,"P",{});var gA=s(En);YDr=r(gA,"The model class to instantiate is selected based on the "),R4e=n(gA,"CODE",{});var F9t=s(R4e);KDr=r(F9t,"model_type"),F9t.forEach(t),ZDr=r(gA,` property of the config object (either
passed as an argument or loaded from `),P4e=n(gA,"CODE",{});var T9t=s(P4e);eGr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),oGr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(gA,"CODE",{});var M9t=s(B4e);rGr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),tGr=r(gA,":"),gA.forEach(t),aGr=i(si),I4e=n(si,"UL",{});var E9t=s(I4e);X5=n(E9t,"LI",{});var Lqe=s(X5);q4e=n(Lqe,"STRONG",{});var C9t=s(q4e);nGr=r(C9t,"bert"),C9t.forEach(t),sGr=r(Lqe," \u2014 "),HK=n(Lqe,"A",{href:!0});var w9t=s(HK);lGr=r(w9t,"FlaxBertForNextSentencePrediction"),w9t.forEach(t),iGr=r(Lqe," (BERT model)"),Lqe.forEach(t),E9t.forEach(t),dGr=i(si),T(z5.$$.fragment,si),si.forEach(t),ni.forEach(t),kje=i(f),nf=n(f,"H2",{class:!0});var NGe=s(nf);W5=n(NGe,"A",{id:!0,class:!0,href:!0});var A9t=s(W5);N4e=n(A9t,"SPAN",{});var y9t=s(N4e);T(ux.$$.fragment,y9t),y9t.forEach(t),A9t.forEach(t),cGr=i(NGe),j4e=n(NGe,"SPAN",{});var L9t=s(j4e);fGr=r(L9t,"FlaxAutoModelForImageClassification"),L9t.forEach(t),NGe.forEach(t),Sje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(_x.$$.fragment,li),mGr=i(li),sf=n(li,"P",{});var Wee=s(sf);gGr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=n(Wee,"A",{href:!0});var x9t=s(UK);hGr=r(x9t,"from_pretrained()"),x9t.forEach(t),pGr=r(Wee," class method or the "),JK=n(Wee,"A",{href:!0});var $9t=s(JK);uGr=r($9t,"from_config()"),$9t.forEach(t),_Gr=r(Wee,` class
method.`),Wee.forEach(t),bGr=i(li),bx=n(li,"P",{});var jGe=s(bx);vGr=r(jGe,"This class cannot be instantiated directly using "),D4e=n(jGe,"CODE",{});var k9t=s(D4e);FGr=r(k9t,"__init__()"),k9t.forEach(t),TGr=r(jGe," (throws an error)."),jGe.forEach(t),MGr=i(li),Yt=n(li,"DIV",{class:!0});var hA=s(Yt);T(vx.$$.fragment,hA),EGr=i(hA),G4e=n(hA,"P",{});var S9t=s(G4e);CGr=r(S9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S9t.forEach(t),wGr=i(hA),lf=n(hA,"P",{});var Qee=s(lf);AGr=r(Qee,`Note:
Loading a model from its configuration file does `),O4e=n(Qee,"STRONG",{});var R9t=s(O4e);yGr=r(R9t,"not"),R9t.forEach(t),LGr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(Qee,"A",{href:!0});var P9t=s(YK);xGr=r(P9t,"from_pretrained()"),P9t.forEach(t),$Gr=r(Qee," to load the model weights."),Qee.forEach(t),kGr=i(hA),T(Q5.$$.fragment,hA),hA.forEach(t),SGr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Fx.$$.fragment,ii),RGr=i(ii),V4e=n(ii,"P",{});var B9t=s(V4e);PGr=r(B9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B9t.forEach(t),BGr=i(ii),Cn=n(ii,"P",{});var pA=s(Cn);IGr=r(pA,"The model class to instantiate is selected based on the "),X4e=n(pA,"CODE",{});var I9t=s(X4e);qGr=r(I9t,"model_type"),I9t.forEach(t),NGr=r(pA,` property of the config object (either
passed as an argument or loaded from `),z4e=n(pA,"CODE",{});var q9t=s(z4e);jGr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),DGr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(pA,"CODE",{});var N9t=s(W4e);GGr=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),OGr=r(pA,":"),pA.forEach(t),VGr=i(ii),Tx=n(ii,"UL",{});var DGe=s(Tx);H5=n(DGe,"LI",{});var xqe=s(H5);Q4e=n(xqe,"STRONG",{});var j9t=s(Q4e);XGr=r(j9t,"beit"),j9t.forEach(t),zGr=r(xqe," \u2014 "),KK=n(xqe,"A",{href:!0});var D9t=s(KK);WGr=r(D9t,"FlaxBeitForImageClassification"),D9t.forEach(t),QGr=r(xqe," (BEiT model)"),xqe.forEach(t),HGr=i(DGe),U5=n(DGe,"LI",{});var $qe=s(U5);H4e=n($qe,"STRONG",{});var G9t=s(H4e);UGr=r(G9t,"vit"),G9t.forEach(t),JGr=r($qe," \u2014 "),ZK=n($qe,"A",{href:!0});var O9t=s(ZK);YGr=r(O9t,"FlaxViTForImageClassification"),O9t.forEach(t),KGr=r($qe," (ViT model)"),$qe.forEach(t),DGe.forEach(t),ZGr=i(ii),T(J5.$$.fragment,ii),ii.forEach(t),li.forEach(t),Rje=i(f),df=n(f,"H2",{class:!0});var GGe=s(df);Y5=n(GGe,"A",{id:!0,class:!0,href:!0});var V9t=s(Y5);U4e=n(V9t,"SPAN",{});var X9t=s(U4e);T(Mx.$$.fragment,X9t),X9t.forEach(t),V9t.forEach(t),eOr=i(GGe),J4e=n(GGe,"SPAN",{});var z9t=s(J4e);oOr=r(z9t,"FlaxAutoModelForVision2Seq"),z9t.forEach(t),GGe.forEach(t),Pje=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Ex.$$.fragment,di),rOr=i(di),cf=n(di,"P",{});var Hee=s(cf);tOr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=n(Hee,"A",{href:!0});var W9t=s(eZ);aOr=r(W9t,"from_pretrained()"),W9t.forEach(t),nOr=r(Hee," class method or the "),oZ=n(Hee,"A",{href:!0});var Q9t=s(oZ);sOr=r(Q9t,"from_config()"),Q9t.forEach(t),lOr=r(Hee,` class
method.`),Hee.forEach(t),iOr=i(di),Cx=n(di,"P",{});var OGe=s(Cx);dOr=r(OGe,"This class cannot be instantiated directly using "),Y4e=n(OGe,"CODE",{});var H9t=s(Y4e);cOr=r(H9t,"__init__()"),H9t.forEach(t),fOr=r(OGe," (throws an error)."),OGe.forEach(t),mOr=i(di),Kt=n(di,"DIV",{class:!0});var uA=s(Kt);T(wx.$$.fragment,uA),gOr=i(uA),K4e=n(uA,"P",{});var U9t=s(K4e);hOr=r(U9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U9t.forEach(t),pOr=i(uA),ff=n(uA,"P",{});var Uee=s(ff);uOr=r(Uee,`Note:
Loading a model from its configuration file does `),Z4e=n(Uee,"STRONG",{});var J9t=s(Z4e);_Or=r(J9t,"not"),J9t.forEach(t),bOr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(Uee,"A",{href:!0});var Y9t=s(rZ);vOr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),FOr=r(Uee," to load the model weights."),Uee.forEach(t),TOr=i(uA),T(K5.$$.fragment,uA),uA.forEach(t),MOr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ax.$$.fragment,ci),EOr=i(ci),eEe=n(ci,"P",{});var K9t=s(eEe);COr=r(K9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K9t.forEach(t),wOr=i(ci),wn=n(ci,"P",{});var _A=s(wn);AOr=r(_A,"The model class to instantiate is selected based on the "),oEe=n(_A,"CODE",{});var Z9t=s(oEe);yOr=r(Z9t,"model_type"),Z9t.forEach(t),LOr=r(_A,` property of the config object (either
passed as an argument or loaded from `),rEe=n(_A,"CODE",{});var ext=s(rEe);xOr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),$Or=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(_A,"CODE",{});var oxt=s(tEe);kOr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),SOr=r(_A,":"),_A.forEach(t),ROr=i(ci),aEe=n(ci,"UL",{});var rxt=s(aEe);Z5=n(rxt,"LI",{});var kqe=s(Z5);nEe=n(kqe,"STRONG",{});var txt=s(nEe);POr=r(txt,"vision-encoder-decoder"),txt.forEach(t),BOr=r(kqe," \u2014 "),tZ=n(kqe,"A",{href:!0});var axt=s(tZ);IOr=r(axt,"FlaxVisionEncoderDecoderModel"),axt.forEach(t),qOr=r(kqe," (Vision Encoder decoder model)"),kqe.forEach(t),rxt.forEach(t),NOr=i(ci),T(e3.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ikt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(W$,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Q$,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertConfig"),c(H$,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartConfig"),c(U$,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitConfig"),c(J$,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertConfig"),c(Y$,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(K$,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Z$,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ek,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ok,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(rk,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertConfig"),c(tk,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineConfig"),c(ak,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPConfig"),c(nk,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertConfig"),c(sk,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextConfig"),c(lk,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLConfig"),c(ik,"href","/docs/transformers/pr_17060/en/model_doc/cvt#transformers.CvtConfig"),c(dk,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ck,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(fk,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(mk,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaConfig"),c(gk,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(hk,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(pk,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTConfig"),c(uk,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrConfig"),c(_k,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertConfig"),c(bk,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRConfig"),c(vk,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTConfig"),c(Fk,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraConfig"),c(Tk,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Mk,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ek,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaConfig"),c(Ck,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetConfig"),c(wk,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ak,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelConfig"),c(yk,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNConfig"),c(Lk,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Config"),c(xk,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($k,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJConfig"),c(kk,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertConfig"),c(Sk,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertConfig"),c(Rk,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Pk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Bk,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ik,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(qk,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDConfig"),c(Nk,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerConfig"),c(jk,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeConfig"),c(Dk,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertConfig"),c(Gk,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ok,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianConfig"),c(Vk,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Xk,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartConfig"),c(zk,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Wk,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Qk,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetConfig"),c(Hk,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Config"),c(Uk,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Jk,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Yk,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTConfig"),c(Kk,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusConfig"),c(Zk,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverConfig"),c(eS,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartConfig"),c(oS,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(rS,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(tS,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(aS,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagConfig"),c(nS,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmConfig"),c(sS,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerConfig"),c(lS,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetConfig"),c(iS,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertConfig"),c(dS,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetConfig"),c(cS,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertConfig"),c(fS,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaConfig"),c(mS,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerConfig"),c(gS,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerConfig"),c(hS,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWConfig"),c(pS,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDConfig"),c(uS,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(_S,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(bS,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(vS,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterConfig"),c(FS,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(TS,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinConfig"),c(MS,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Config"),c(ES,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasConfig"),c(CS,"href","/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(wS,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(AS,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRConfig"),c(yS,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(LS,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xS,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanConfig"),c($S,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltConfig"),c(kS,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(SS,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(RS,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(PS,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTConfig"),c(BS,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(IS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(qS,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(NS,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMConfig"),c(jS,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMConfig"),c(DS,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMConfig"),c(GS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(OS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(VS,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(XS,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetConfig"),c(zS,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosConfig"),c(WS,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(QS,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(HS,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(US,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizer"),c(YS,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartTokenizerFast"),c(KS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ZS,"href","/docs/transformers/pr_17060/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(eR,"href","/docs/transformers/pr_17060/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(oR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(rR,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(tR,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(aR,"href","/docs/transformers/pr_17060/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(nR,"href","/docs/transformers/pr_17060/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(sR,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(lR,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(iR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dR,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(fR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(mR,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(gR,"href","/docs/transformers/pr_17060/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(hR,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizer"),c(pR,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(uR,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineTokenizer"),c(_R,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizer"),c(bR,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(vR,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FR,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(TR,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizer"),c(MR,"href","/docs/transformers/pr_17060/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ER,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(CR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AR,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yR,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(LR,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(xR,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c($R,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(kR,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(RR,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(PR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizer"),c(BR,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(IR,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(qR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizer"),c(NR,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(jR,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizer"),c(GR,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(OR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QR,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizer"),c(UR,"href","/docs/transformers/pr_17060/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KR,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(eP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(oP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(aP,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(nP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(sP,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(lP,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizer"),c(iP,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDTokenizerFast"),c(dP,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizer"),c(cP,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(fP,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeTokenizer"),c(mP,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(gP,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(hP,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(pP,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianTokenizer"),c(uP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizer"),c(_P,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(bP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(vP,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(FP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(TP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(MP,"href","/docs/transformers/pr_17060/en/model_doc/mluke#transformers.MLukeTokenizer"),c(EP,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(CP,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(wP,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(AP,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(yP,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Tokenizer"),c(LP,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5TokenizerFast"),c(xP,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c($P,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(SP,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(RP,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PP,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BP,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(IP,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(qP,"href","/docs/transformers/pr_17060/en/model_doc/phobert#transformers.PhobertTokenizer"),c(NP,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartTokenizer"),c(jP,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(DP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(GP,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17060/en/model_doc/rag#transformers.RagTokenizer"),c(VP,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizer"),c(XP,"href","/docs/transformers/pr_17060/en/model_doc/realm#transformers.RealmTokenizerFast"),c(zP,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizer"),c(WP,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(QP,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizer"),c(HP,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(JP,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KP,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(eB,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(oB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(rB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(tB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizer"),c(aB,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(nB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(sB,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Tokenizer"),c(iB,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5TokenizerFast"),c(dB,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasTokenizer"),c(cB,"href","/docs/transformers/pr_17060/en/model_doc/tapex#transformers.TapexTokenizer"),c(fB,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(mB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(_B,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizer"),c(bB,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(vB,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMTokenizer"),c(FB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(TB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(MB,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CB,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(AB,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(yB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizer"),c(LB,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(xB,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c($B,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(VB,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(XB,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tI,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoProcessor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(aI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(nI,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPProcessor"),c(sI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(lI,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(iI,"href","/docs/transformers/pr_17060/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(dI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fI,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(mI,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(gI,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRProcessor"),c(hI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uI,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltProcessor"),c(_I,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(bI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"id","transformers.AutoModel"),c(tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(TI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EI,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CI,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertModel"),c(wI,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartModel"),c(AI,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitModel"),c(yI,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertModel"),c(LI,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(xI,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdModel"),c($I,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(kI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(SI,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(RI,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertModel"),c(PI,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineModel"),c(BI,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.CLIPModel"),c(II,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertModel"),c(qI,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextModel"),c(NI,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLModel"),c(jI,"href","/docs/transformers/pr_17060/en/model_doc/cvt#transformers.CvtModel"),c(DI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(GI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(OI,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(VI,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaModel"),c(XI,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(zI,"href","/docs/transformers/pr_17060/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(WI,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTModel"),c(QI,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrModel"),c(HI,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertModel"),c(UI,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(JI,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTModel"),c(YI,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraModel"),c(KI,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertModel"),c(ZI,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaModel"),c(eq,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetModel"),c(oq,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTModel"),c(rq,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelModel"),c(tq,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelBaseModel"),c(aq,"href","/docs/transformers/pr_17060/en/model_doc/glpn#transformers.GLPNModel"),c(nq,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2Model"),c(sq,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(lq,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJModel"),c(iq,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertModel"),c(dq,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertModel"),c(cq,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(fq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(mq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(gq,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(hq,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDModel"),c(pq,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerModel"),c(uq,"href","/docs/transformers/pr_17060/en/model_doc/luke#transformers.LukeModel"),c(_q,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertModel"),c(bq,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100Model"),c(vq,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianModel"),c(Fq,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Tq,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartModel"),c(Mq,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Eq,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Cq,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetModel"),c(wq,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5Model"),c(Aq,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerModel"),c(yq,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Lq,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTModel"),c(xq,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusModel"),c($q,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverModel"),c(kq,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartModel"),c(Sq,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Rq,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Pq,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Bq,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModel"),c(Iq,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetModel"),c(qq,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertModel"),c(Nq,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetModel"),c(jq,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(Dq,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaModel"),c(Gq,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerModel"),c(Oq,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerModel"),c(Vq,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWModel"),c(Xq,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDModel"),c(zq,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Wq,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterModel"),c(Qq,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Hq,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinModel"),c(Uq,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5Model"),c(Jq,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasModel"),c(Yq,"href","/docs/transformers/pr_17060/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Kq,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Zq,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechModel"),c(eN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(oN,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanModel"),c(rN,"href","/docs/transformers/pr_17060/en/model_doc/vilt#transformers.ViltModel"),c(tN,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(aN,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertModel"),c(nN,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTModel"),c(sN,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(lN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(iN,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(dN,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMModel"),c(cN,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMModel"),c(fN,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMModel"),c(mN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(gN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(hN,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(pN,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetModel"),c(uN,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosModel"),c(_N,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForPreTraining"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(bN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FN,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TN,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForPreTraining"),c(MN,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(EN,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForPreTraining"),c(CN,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(wN,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(AN,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(yN,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LN,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xN,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($N,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kN,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForPreTraining"),c(SN,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(RN,"href","/docs/transformers/pr_17060/en/model_doc/flava#transformers.FlavaForPreTraining"),c(PN,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForPreTraining"),c(BN,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(IN,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(qN,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(NN,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(DN,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(GN,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(ON,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(VN,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(XN,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(zN,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(WN,"href","/docs/transformers/pr_17060/en/model_doc/retribert#transformers.RetriBertModel"),c(QN,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HN,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(UN,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JN,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(KN,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(ej,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(oj,"href","/docs/transformers/pr_17060/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(rj,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(tj,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(aj,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(nj,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ij,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForCausalLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(dj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForCausalLM"),c(gj,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertLMHeadModel"),c(hj,"href","/docs/transformers/pr_17060/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(pj,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(uj,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_j,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(bj,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(vj,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Fj,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Mj,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Ej,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Cj,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(wj,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Aj,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianForCausalLM"),c(yj,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Lj,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(xj,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($j,"href","/docs/transformers/pr_17060/en/model_doc/opt#transformers.OPTForCausalLM"),c(kj,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Sj,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Rj,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Pj,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Ij,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(qj,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Nj,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jj,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Dj,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Gj,"href","/docs/transformers/pr_17060/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Oj,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Vj,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Wj,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Qj,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.AutoModelForMaskedLM"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Hj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jj,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yj,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oD,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aD,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nD,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sD,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iD,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dD,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cD,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(fD,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gD,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bD,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vD,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(FD,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(MD,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CD,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wD,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yD,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($D,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u1,"id","transformers.AutoModelForSeq2SeqLM"),c(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(kD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PD,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jD,"href","/docs/transformers/pr_17060/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17060/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.MarianMTModel"),c(VD,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17060/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17060/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForSequenceClassification"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(JD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($G,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17060/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rb,"id","transformers.AutoModelForMultipleChoice"),c(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(WG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m2,"id","transformers.AutoModelForNextSentencePrediction"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(CO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(LO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xO,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($O,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kO,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForTokenClassification"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(SO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BO,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(IO,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(NO,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jO,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForTokenClassification"),c(DO,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(OO,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(VO,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(XO,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zO,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(WO,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(HO,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(UO,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(JO,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(KO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eV,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oV,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(rV,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(aV,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(nV,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(sV,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(iV,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(dV,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(cV,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(fV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(mV,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(gV,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(hV,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(pV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17060/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17060/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SV,"href","/docs/transformers/pr_17060/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17060/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17060/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17060/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17060/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17060/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17060/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17060/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17060/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eX,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tX,"href","/docs/transformers/pr_17060/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(aX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForImageClassification"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(iX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForImageClassification"),c(mX,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gX,"href","/docs/transformers/pr_17060/en/model_doc/cvt#transformers.CvtForImageClassification"),c(hX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(pX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassification"),c(uX,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(_X,"href","/docs/transformers/pr_17060/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(vX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(FX,"href","/docs/transformers/pr_17060/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(TX,"href","/docs/transformers/pr_17060/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(MX,"href","/docs/transformers/pr_17060/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(EX,"href","/docs/transformers/pr_17060/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(CX,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(wX,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForImageClassification"),c(AX,"href","/docs/transformers/pr_17060/en/model_doc/van#transformers.VanForImageClassification"),c(yX,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForVision2Seq"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(LX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForAudioClassification"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForAudioFrameClassification"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(HX,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(UX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(JX,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(YX,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForCTC"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(KX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(rz,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.HubertForCTC"),c(tz,"href","/docs/transformers/pr_17060/en/model_doc/sew#transformers.SEWForCTC"),c(az,"href","/docs/transformers/pr_17060/en/model_doc/sew-d#transformers.SEWDForCTC"),c(nz,"href","/docs/transformers/pr_17060/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(sz,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(lz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(iz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(dz,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17060/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(hz,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.AutoModelForAudioXVector"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(pz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(vz,"href","/docs/transformers/pr_17060/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Fz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Tz,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Mz,"href","/docs/transformers/pr_17060/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_6,"id","transformers.AutoModelForMaskedImageModeling"),c(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_6,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17060/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(yz,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Lz,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.AutoModelForObjectDetection"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(xz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Rz,"href","/docs/transformers/pr_17060/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.AutoModelForImageSegmentation"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17060/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.AutoModelForSemanticSegmentation"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Oz,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Vz,"href","/docs/transformers/pr_17060/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Xz,"href","/docs/transformers/pr_17060/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V6,"id","transformers.AutoModelForInstanceSegmentation"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(zz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/pr_17060/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.TFAutoModel"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertModel"),c(Zz,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartModel"),c(eW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertModel"),c(oW,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(rW,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(tW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertModel"),c(aW,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.TFCLIPModel"),c(nW,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertModel"),c(sW,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextModel"),c(lW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLModel"),c(iW,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(dW,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaModel"),c(cW,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(fW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mW,"href","/docs/transformers/pr_17060/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gW,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraModel"),c(hW,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(pW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelModel"),c(uW,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(_W,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bW,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJModel"),c(vW,"href","/docs/transformers/pr_17060/en/model_doc/hubert#transformers.TFHubertModel"),c(FW,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(TW,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDModel"),c(MW,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerModel"),c(EW,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertModel"),c(CW,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianModel"),c(wW,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartModel"),c(AW,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(yW,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetModel"),c(LW,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5Model"),c(xW,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c($W,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusModel"),c(kW,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertModel"),c(SW,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaModel"),c(RW,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerModel"),c(PW,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(BW,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinModel"),c(IW,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5Model"),c(qW,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasModel"),c(NW,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jW,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTModel"),c(DW,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(GW,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(OW,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMModel"),c(VW,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(XW,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.TFAutoModelForPreTraining"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(zW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(UW,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JW,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForPreTraining"),c(YW,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KW,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(oQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(tQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17060/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(sQ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(fQ,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17060/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(hQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h7,"id","transformers.TFAutoModelForCausalLM"),c(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(MQ,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CQ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(wQ,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(yQ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(LQ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(xQ,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($Q,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForImageClassification"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17060/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(IQ,"href","/docs/transformers/pr_17060/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(qQ,"href","/docs/transformers/pr_17060/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(NQ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModelForMaskedLM"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(jQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(eH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(nH,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(iH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mH,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(gH,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(hH,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(pH,"href","/docs/transformers/pr_17060/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(uH,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.TFMarianMTModel"),c(_H,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(bH,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(vH,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(FH,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.TFAutoModelForSequenceClassification"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(TH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17060/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c($H,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17060/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17060/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForMultipleChoice"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(JH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(iU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(dU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(cU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(fU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(FU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(TU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17060/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForTokenClassification"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(wU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForTokenClassification"),c($U,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(kU,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(SU,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(RU,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(PU,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(BU,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(IU,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qU,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(NU,"href","/docs/transformers/pr_17060/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(jU,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(DU,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(OU,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(XU,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zU,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(WU,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(QU,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForQuestionAnswering"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(HU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JU,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YU,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17060/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17060/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17060/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17060/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17060/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(sJ,"href","/docs/transformers/pr_17060/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17060/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_17060/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17060/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17060/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17060/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForVision2Seq"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(_J,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17060/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.FlaxAutoModel"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xJ,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartModel"),c($J,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitModel"),c(kJ,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertModel"),c(SJ,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(PJ,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(BJ,"href","/docs/transformers/pr_17060/en/model_doc/clip#transformers.FlaxCLIPModel"),c(IJ,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qJ,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraModel"),c(NJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jJ,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DJ,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GJ,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianModel"),c(OJ,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VJ,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XJ,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(zJ,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(WJ,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(QJ,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5Model"),c(HJ,"href","/docs/transformers/pr_17060/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(UJ,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTModel"),c(JJ,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(YJ,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(KJ,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForCausalLM"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(tY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(aY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(nY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(sY,"href","/docs/transformers/pr_17060/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(lY,"href","/docs/transformers/pr_17060/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(iY,"href","/docs/transformers/pr_17060/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(dY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(cY,"href","/docs/transformers/pr_17060/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.FlaxAutoModelForPreTraining"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(pY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(_Y,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(bY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(vY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17060/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(wY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModelForMaskedLM"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(AY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c($Y,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(SY,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(RY,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(PY,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(BY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qY,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17060/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17060/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(WY,"href","/docs/transformers/pr_17060/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(QY,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17060/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17060/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17060/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(cK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17060/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(pK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(uK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17060/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.FlaxAutoModelForTokenClassification"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(EK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(yK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(LK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(xK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c($K,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(SK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(RK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(PK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_17060/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17060/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17060/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17060/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17060/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17060/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17060/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(zK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/pr_17060/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForImageClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(UK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/pr_17060/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ZK,"href","/docs/transformers/pr_17060/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.FlaxAutoModelForVision2Seq"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17060/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17060/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,bA),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,vA),e(We,Ln),e(We,xn),e(xn,FA),e(We,pi),e(We,$n),e($n,TA),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,D$),e(Ae,_i),e(_i,G$),e(Ae,O$),b(f,Eo,_),b(f,wa,_),e(wa,V$),e(wa,bf),e(bf,X$),e(wa,VGe),b(f,Sqe,_),b(f,bi,_),e(bi,vf),e(vf,Jee),M(MA,Jee,null),e(bi,XGe),e(bi,Yee),e(Yee,zGe),b(f,Rqe,_),b(f,kn,_),e(kn,WGe),e(kn,Kee),e(Kee,QGe),e(kn,HGe),e(kn,Zee),e(Zee,UGe),e(kn,JGe),b(f,Pqe,_),M(EA,f,_),b(f,Bqe,_),b(f,z$,_),e(z$,YGe),b(f,Iqe,_),M(Ff,f,_),b(f,qqe,_),b(f,vi,_),e(vi,Tf),e(Tf,eoe),M(CA,eoe,null),e(vi,KGe),e(vi,ooe),e(ooe,ZGe),b(f,Nqe,_),b(f,Co,_),M(wA,Co,null),e(Co,eOe),e(Co,AA),e(AA,oOe),e(AA,W$),e(W$,rOe),e(AA,tOe),e(Co,aOe),e(Co,yA),e(yA,nOe),e(yA,roe),e(roe,sOe),e(yA,lOe),e(Co,iOe),e(Co,Er),M(LA,Er,null),e(Er,dOe),e(Er,toe),e(toe,cOe),e(Er,fOe),e(Er,Fi),e(Fi,mOe),e(Fi,aoe),e(aoe,gOe),e(Fi,hOe),e(Fi,noe),e(noe,pOe),e(Fi,uOe),e(Er,_Oe),e(Er,A),e(A,Mf),e(Mf,soe),e(soe,bOe),e(Mf,vOe),e(Mf,Q$),e(Q$,FOe),e(Mf,TOe),e(A,MOe),e(A,Ef),e(Ef,loe),e(loe,EOe),e(Ef,COe),e(Ef,H$),e(H$,wOe),e(Ef,AOe),e(A,yOe),e(A,Cf),e(Cf,ioe),e(ioe,LOe),e(Cf,xOe),e(Cf,U$),e(U$,$Oe),e(Cf,kOe),e(A,SOe),e(A,wf),e(wf,doe),e(doe,ROe),e(wf,POe),e(wf,J$),e(J$,BOe),e(wf,IOe),e(A,qOe),e(A,Af),e(Af,coe),e(coe,NOe),e(Af,jOe),e(Af,Y$),e(Y$,DOe),e(Af,GOe),e(A,OOe),e(A,yf),e(yf,foe),e(foe,VOe),e(yf,XOe),e(yf,K$),e(K$,zOe),e(yf,WOe),e(A,QOe),e(A,Lf),e(Lf,moe),e(moe,HOe),e(Lf,UOe),e(Lf,Z$),e(Z$,JOe),e(Lf,YOe),e(A,KOe),e(A,xf),e(xf,goe),e(goe,ZOe),e(xf,eVe),e(xf,ek),e(ek,oVe),e(xf,rVe),e(A,tVe),e(A,$f),e($f,hoe),e(hoe,aVe),e($f,nVe),e($f,ok),e(ok,sVe),e($f,lVe),e(A,iVe),e(A,kf),e(kf,poe),e(poe,dVe),e(kf,cVe),e(kf,rk),e(rk,fVe),e(kf,mVe),e(A,gVe),e(A,Sf),e(Sf,uoe),e(uoe,hVe),e(Sf,pVe),e(Sf,tk),e(tk,uVe),e(Sf,_Ve),e(A,bVe),e(A,Rf),e(Rf,_oe),e(_oe,vVe),e(Rf,FVe),e(Rf,ak),e(ak,TVe),e(Rf,MVe),e(A,EVe),e(A,Pf),e(Pf,boe),e(boe,CVe),e(Pf,wVe),e(Pf,nk),e(nk,AVe),e(Pf,yVe),e(A,LVe),e(A,Bf),e(Bf,voe),e(voe,xVe),e(Bf,$Ve),e(Bf,sk),e(sk,kVe),e(Bf,SVe),e(A,RVe),e(A,If),e(If,Foe),e(Foe,PVe),e(If,BVe),e(If,lk),e(lk,IVe),e(If,qVe),e(A,NVe),e(A,qf),e(qf,Toe),e(Toe,jVe),e(qf,DVe),e(qf,ik),e(ik,GVe),e(qf,OVe),e(A,VVe),e(A,Nf),e(Nf,Moe),e(Moe,XVe),e(Nf,zVe),e(Nf,dk),e(dk,WVe),e(Nf,QVe),e(A,HVe),e(A,jf),e(jf,Eoe),e(Eoe,UVe),e(jf,JVe),e(jf,ck),e(ck,YVe),e(jf,KVe),e(A,ZVe),e(A,Df),e(Df,Coe),e(Coe,eXe),e(Df,oXe),e(Df,fk),e(fk,rXe),e(Df,tXe),e(A,aXe),e(A,Gf),e(Gf,woe),e(woe,nXe),e(Gf,sXe),e(Gf,mk),e(mk,lXe),e(Gf,iXe),e(A,dXe),e(A,Of),e(Of,Aoe),e(Aoe,cXe),e(Of,fXe),e(Of,gk),e(gk,mXe),e(Of,gXe),e(A,hXe),e(A,Vf),e(Vf,yoe),e(yoe,pXe),e(Vf,uXe),e(Vf,hk),e(hk,_Xe),e(Vf,bXe),e(A,vXe),e(A,Xf),e(Xf,Loe),e(Loe,FXe),e(Xf,TXe),e(Xf,pk),e(pk,MXe),e(Xf,EXe),e(A,CXe),e(A,zf),e(zf,xoe),e(xoe,wXe),e(zf,AXe),e(zf,uk),e(uk,yXe),e(zf,LXe),e(A,xXe),e(A,Wf),e(Wf,$oe),e($oe,$Xe),e(Wf,kXe),e(Wf,_k),e(_k,SXe),e(Wf,RXe),e(A,PXe),e(A,Qf),e(Qf,koe),e(koe,BXe),e(Qf,IXe),e(Qf,bk),e(bk,qXe),e(Qf,NXe),e(A,jXe),e(A,Hf),e(Hf,Soe),e(Soe,DXe),e(Hf,GXe),e(Hf,vk),e(vk,OXe),e(Hf,VXe),e(A,XXe),e(A,Uf),e(Uf,Roe),e(Roe,zXe),e(Uf,WXe),e(Uf,Fk),e(Fk,QXe),e(Uf,HXe),e(A,UXe),e(A,Jf),e(Jf,Poe),e(Poe,JXe),e(Jf,YXe),e(Jf,Tk),e(Tk,KXe),e(Jf,ZXe),e(A,eze),e(A,Yf),e(Yf,Boe),e(Boe,oze),e(Yf,rze),e(Yf,Mk),e(Mk,tze),e(Yf,aze),e(A,nze),e(A,Kf),e(Kf,Ioe),e(Ioe,sze),e(Kf,lze),e(Kf,Ek),e(Ek,ize),e(Kf,dze),e(A,cze),e(A,Zf),e(Zf,qoe),e(qoe,fze),e(Zf,mze),e(Zf,Ck),e(Ck,gze),e(Zf,hze),e(A,pze),e(A,em),e(em,Noe),e(Noe,uze),e(em,_ze),e(em,wk),e(wk,bze),e(em,vze),e(A,Fze),e(A,om),e(om,joe),e(joe,Tze),e(om,Mze),e(om,Ak),e(Ak,Eze),e(om,Cze),e(A,wze),e(A,rm),e(rm,Doe),e(Doe,Aze),e(rm,yze),e(rm,yk),e(yk,Lze),e(rm,xze),e(A,$ze),e(A,tm),e(tm,Goe),e(Goe,kze),e(tm,Sze),e(tm,Lk),e(Lk,Rze),e(tm,Pze),e(A,Bze),e(A,am),e(am,Ooe),e(Ooe,Ize),e(am,qze),e(am,xk),e(xk,Nze),e(am,jze),e(A,Dze),e(A,nm),e(nm,Voe),e(Voe,Gze),e(nm,Oze),e(nm,$k),e($k,Vze),e(nm,Xze),e(A,zze),e(A,sm),e(sm,Xoe),e(Xoe,Wze),e(sm,Qze),e(sm,kk),e(kk,Hze),e(sm,Uze),e(A,Jze),e(A,lm),e(lm,zoe),e(zoe,Yze),e(lm,Kze),e(lm,Sk),e(Sk,Zze),e(lm,eWe),e(A,oWe),e(A,im),e(im,Woe),e(Woe,rWe),e(im,tWe),e(im,Rk),e(Rk,aWe),e(im,nWe),e(A,sWe),e(A,dm),e(dm,Qoe),e(Qoe,lWe),e(dm,iWe),e(dm,Pk),e(Pk,dWe),e(dm,cWe),e(A,fWe),e(A,cm),e(cm,Hoe),e(Hoe,mWe),e(cm,gWe),e(cm,Bk),e(Bk,hWe),e(cm,pWe),e(A,uWe),e(A,fm),e(fm,Uoe),e(Uoe,_We),e(fm,bWe),e(fm,Ik),e(Ik,vWe),e(fm,FWe),e(A,TWe),e(A,mm),e(mm,Joe),e(Joe,MWe),e(mm,EWe),e(mm,qk),e(qk,CWe),e(mm,wWe),e(A,AWe),e(A,gm),e(gm,Yoe),e(Yoe,yWe),e(gm,LWe),e(gm,Nk),e(Nk,xWe),e(gm,$We),e(A,kWe),e(A,hm),e(hm,Koe),e(Koe,SWe),e(hm,RWe),e(hm,jk),e(jk,PWe),e(hm,BWe),e(A,IWe),e(A,pm),e(pm,Zoe),e(Zoe,qWe),e(pm,NWe),e(pm,Dk),e(Dk,jWe),e(pm,DWe),e(A,GWe),e(A,um),e(um,ere),e(ere,OWe),e(um,VWe),e(um,Gk),e(Gk,XWe),e(um,zWe),e(A,WWe),e(A,_m),e(_m,ore),e(ore,QWe),e(_m,HWe),e(_m,Ok),e(Ok,UWe),e(_m,JWe),e(A,YWe),e(A,bm),e(bm,rre),e(rre,KWe),e(bm,ZWe),e(bm,Vk),e(Vk,eQe),e(bm,oQe),e(A,rQe),e(A,vm),e(vm,tre),e(tre,tQe),e(vm,aQe),e(vm,Xk),e(Xk,nQe),e(vm,sQe),e(A,lQe),e(A,Fm),e(Fm,are),e(are,iQe),e(Fm,dQe),e(Fm,zk),e(zk,cQe),e(Fm,fQe),e(A,mQe),e(A,Tm),e(Tm,nre),e(nre,gQe),e(Tm,hQe),e(Tm,Wk),e(Wk,pQe),e(Tm,uQe),e(A,_Qe),e(A,Mm),e(Mm,sre),e(sre,bQe),e(Mm,vQe),e(Mm,Qk),e(Qk,FQe),e(Mm,TQe),e(A,MQe),e(A,Em),e(Em,lre),e(lre,EQe),e(Em,CQe),e(Em,Hk),e(Hk,wQe),e(Em,AQe),e(A,yQe),e(A,Cm),e(Cm,ire),e(ire,LQe),e(Cm,xQe),e(Cm,Uk),e(Uk,$Qe),e(Cm,kQe),e(A,SQe),e(A,wm),e(wm,dre),e(dre,RQe),e(wm,PQe),e(wm,Jk),e(Jk,BQe),e(wm,IQe),e(A,qQe),e(A,Am),e(Am,cre),e(cre,NQe),e(Am,jQe),e(Am,Yk),e(Yk,DQe),e(Am,GQe),e(A,OQe),e(A,ym),e(ym,fre),e(fre,VQe),e(ym,XQe),e(ym,Kk),e(Kk,zQe),e(ym,WQe),e(A,QQe),e(A,Lm),e(Lm,mre),e(mre,HQe),e(Lm,UQe),e(Lm,Zk),e(Zk,JQe),e(Lm,YQe),e(A,KQe),e(A,xm),e(xm,gre),e(gre,ZQe),e(xm,eHe),e(xm,eS),e(eS,oHe),e(xm,rHe),e(A,tHe),e(A,$m),e($m,hre),e(hre,aHe),e($m,nHe),e($m,oS),e(oS,sHe),e($m,lHe),e(A,iHe),e(A,km),e(km,pre),e(pre,dHe),e(km,cHe),e(km,rS),e(rS,fHe),e(km,mHe),e(A,gHe),e(A,Sm),e(Sm,ure),e(ure,hHe),e(Sm,pHe),e(Sm,tS),e(tS,uHe),e(Sm,_He),e(A,bHe),e(A,Rm),e(Rm,_re),e(_re,vHe),e(Rm,FHe),e(Rm,aS),e(aS,THe),e(Rm,MHe),e(A,EHe),e(A,Pm),e(Pm,bre),e(bre,CHe),e(Pm,wHe),e(Pm,nS),e(nS,AHe),e(Pm,yHe),e(A,LHe),e(A,Bm),e(Bm,vre),e(vre,xHe),e(Bm,$He),e(Bm,sS),e(sS,kHe),e(Bm,SHe),e(A,RHe),e(A,Im),e(Im,Fre),e(Fre,PHe),e(Im,BHe),e(Im,lS),e(lS,IHe),e(Im,qHe),e(A,NHe),e(A,qm),e(qm,Tre),e(Tre,jHe),e(qm,DHe),e(qm,iS),e(iS,GHe),e(qm,OHe),e(A,VHe),e(A,Nm),e(Nm,Mre),e(Mre,XHe),e(Nm,zHe),e(Nm,dS),e(dS,WHe),e(Nm,QHe),e(A,HHe),e(A,jm),e(jm,Ere),e(Ere,UHe),e(jm,JHe),e(jm,cS),e(cS,YHe),e(jm,KHe),e(A,ZHe),e(A,Dm),e(Dm,Cre),e(Cre,eUe),e(Dm,oUe),e(Dm,fS),e(fS,rUe),e(Dm,tUe),e(A,aUe),e(A,Gm),e(Gm,wre),e(wre,nUe),e(Gm,sUe),e(Gm,mS),e(mS,lUe),e(Gm,iUe),e(A,dUe),e(A,Om),e(Om,Are),e(Are,cUe),e(Om,fUe),e(Om,gS),e(gS,mUe),e(Om,gUe),e(A,hUe),e(A,Vm),e(Vm,yre),e(yre,pUe),e(Vm,uUe),e(Vm,hS),e(hS,_Ue),e(Vm,bUe),e(A,vUe),e(A,Xm),e(Xm,Lre),e(Lre,FUe),e(Xm,TUe),e(Xm,pS),e(pS,MUe),e(Xm,EUe),e(A,CUe),e(A,zm),e(zm,xre),e(xre,wUe),e(zm,AUe),e(zm,uS),e(uS,yUe),e(zm,LUe),e(A,xUe),e(A,Wm),e(Wm,$re),e($re,$Ue),e(Wm,kUe),e(Wm,_S),e(_S,SUe),e(Wm,RUe),e(A,PUe),e(A,Qm),e(Qm,kre),e(kre,BUe),e(Qm,IUe),e(Qm,bS),e(bS,qUe),e(Qm,NUe),e(A,jUe),e(A,Hm),e(Hm,Sre),e(Sre,DUe),e(Hm,GUe),e(Hm,vS),e(vS,OUe),e(Hm,VUe),e(A,XUe),e(A,Um),e(Um,Rre),e(Rre,zUe),e(Um,WUe),e(Um,FS),e(FS,QUe),e(Um,HUe),e(A,UUe),e(A,Jm),e(Jm,Pre),e(Pre,JUe),e(Jm,YUe),e(Jm,TS),e(TS,KUe),e(Jm,ZUe),e(A,eJe),e(A,Ym),e(Ym,Bre),e(Bre,oJe),e(Ym,rJe),e(Ym,MS),e(MS,tJe),e(Ym,aJe),e(A,nJe),e(A,Km),e(Km,Ire),e(Ire,sJe),e(Km,lJe),e(Km,ES),e(ES,iJe),e(Km,dJe),e(A,cJe),e(A,Zm),e(Zm,qre),e(qre,fJe),e(Zm,mJe),e(Zm,CS),e(CS,gJe),e(Zm,hJe),e(A,pJe),e(A,eg),e(eg,Nre),e(Nre,uJe),e(eg,_Je),e(eg,wS),e(wS,bJe),e(eg,vJe),e(A,FJe),e(A,og),e(og,jre),e(jre,TJe),e(og,MJe),e(og,AS),e(AS,EJe),e(og,CJe),e(A,wJe),e(A,rg),e(rg,Dre),e(Dre,AJe),e(rg,yJe),e(rg,yS),e(yS,LJe),e(rg,xJe),e(A,$Je),e(A,tg),e(tg,Gre),e(Gre,kJe),e(tg,SJe),e(tg,LS),e(LS,RJe),e(tg,PJe),e(A,BJe),e(A,ag),e(ag,Ore),e(Ore,IJe),e(ag,qJe),e(ag,xS),e(xS,NJe),e(ag,jJe),e(A,DJe),e(A,ng),e(ng,Vre),e(Vre,GJe),e(ng,OJe),e(ng,$S),e($S,VJe),e(ng,XJe),e(A,zJe),e(A,sg),e(sg,Xre),e(Xre,WJe),e(sg,QJe),e(sg,kS),e(kS,HJe),e(sg,UJe),e(A,JJe),e(A,lg),e(lg,zre),e(zre,YJe),e(lg,KJe),e(lg,SS),e(SS,ZJe),e(lg,eYe),e(A,oYe),e(A,ig),e(ig,Wre),e(Wre,rYe),e(ig,tYe),e(ig,RS),e(RS,aYe),e(ig,nYe),e(A,sYe),e(A,dg),e(dg,Qre),e(Qre,lYe),e(dg,iYe),e(dg,PS),e(PS,dYe),e(dg,cYe),e(A,fYe),e(A,cg),e(cg,Hre),e(Hre,mYe),e(cg,gYe),e(cg,BS),e(BS,hYe),e(cg,pYe),e(A,uYe),e(A,fg),e(fg,Ure),e(Ure,_Ye),e(fg,bYe),e(fg,IS),e(IS,vYe),e(fg,FYe),e(A,TYe),e(A,mg),e(mg,Jre),e(Jre,MYe),e(mg,EYe),e(mg,qS),e(qS,CYe),e(mg,wYe),e(A,AYe),e(A,gg),e(gg,Yre),e(Yre,yYe),e(gg,LYe),e(gg,NS),e(NS,xYe),e(gg,$Ye),e(A,kYe),e(A,hg),e(hg,Kre),e(Kre,SYe),e(hg,RYe),e(hg,jS),e(jS,PYe),e(hg,BYe),e(A,IYe),e(A,pg),e(pg,Zre),e(Zre,qYe),e(pg,NYe),e(pg,DS),e(DS,jYe),e(pg,DYe),e(A,GYe),e(A,ug),e(ug,ete),e(ete,OYe),e(ug,VYe),e(ug,GS),e(GS,XYe),e(ug,zYe),e(A,WYe),e(A,_g),e(_g,ote),e(ote,QYe),e(_g,HYe),e(_g,OS),e(OS,UYe),e(_g,JYe),e(A,YYe),e(A,bg),e(bg,rte),e(rte,KYe),e(bg,ZYe),e(bg,VS),e(VS,eKe),e(bg,oKe),e(A,rKe),e(A,vg),e(vg,tte),e(tte,tKe),e(vg,aKe),e(vg,XS),e(XS,nKe),e(vg,sKe),e(A,lKe),e(A,Fg),e(Fg,ate),e(ate,iKe),e(Fg,dKe),e(Fg,zS),e(zS,cKe),e(Fg,fKe),e(A,mKe),e(A,Tg),e(Tg,nte),e(nte,gKe),e(Tg,hKe),e(Tg,WS),e(WS,pKe),e(Tg,uKe),e(Er,_Ke),M(Mg,Er,null),e(Co,bKe),e(Co,Eg),M(xA,Eg,null),e(Eg,vKe),e(Eg,ste),e(ste,FKe),b(f,jqe,_),b(f,Ti,_),e(Ti,Cg),e(Cg,lte),M($A,lte,null),e(Ti,TKe),e(Ti,ite),e(ite,MKe),b(f,Dqe,_),b(f,wo,_),M(kA,wo,null),e(wo,EKe),e(wo,SA),e(SA,CKe),e(SA,QS),e(QS,wKe),e(SA,AKe),e(wo,yKe),e(wo,RA),e(RA,LKe),e(RA,dte),e(dte,xKe),e(RA,$Ke),e(wo,kKe),e(wo,Cr),M(PA,Cr,null),e(Cr,SKe),e(Cr,cte),e(cte,RKe),e(Cr,PKe),e(Cr,Aa),e(Aa,BKe),e(Aa,fte),e(fte,IKe),e(Aa,qKe),e(Aa,mte),e(mte,NKe),e(Aa,jKe),e(Aa,gte),e(gte,DKe),e(Aa,GKe),e(Cr,OKe),e(Cr,k),e(k,Sn),e(Sn,hte),e(hte,VKe),e(Sn,XKe),e(Sn,HS),e(HS,zKe),e(Sn,WKe),e(Sn,US),e(US,QKe),e(Sn,HKe),e(k,UKe),e(k,Rn),e(Rn,pte),e(pte,JKe),e(Rn,YKe),e(Rn,JS),e(JS,KKe),e(Rn,ZKe),e(Rn,YS),e(YS,eZe),e(Rn,oZe),e(k,rZe),e(k,Pn),e(Pn,ute),e(ute,tZe),e(Pn,aZe),e(Pn,KS),e(KS,nZe),e(Pn,sZe),e(Pn,ZS),e(ZS,lZe),e(Pn,iZe),e(k,dZe),e(k,wg),e(wg,_te),e(_te,cZe),e(wg,fZe),e(wg,eR),e(eR,mZe),e(wg,gZe),e(k,hZe),e(k,Bn),e(Bn,bte),e(bte,pZe),e(Bn,uZe),e(Bn,oR),e(oR,_Ze),e(Bn,bZe),e(Bn,rR),e(rR,vZe),e(Bn,FZe),e(k,TZe),e(k,Ag),e(Ag,vte),e(vte,MZe),e(Ag,EZe),e(Ag,tR),e(tR,CZe),e(Ag,wZe),e(k,AZe),e(k,yg),e(yg,Fte),e(Fte,yZe),e(yg,LZe),e(yg,aR),e(aR,xZe),e(yg,$Ze),e(k,kZe),e(k,Lg),e(Lg,Tte),e(Tte,SZe),e(Lg,RZe),e(Lg,nR),e(nR,PZe),e(Lg,BZe),e(k,IZe),e(k,In),e(In,Mte),e(Mte,qZe),e(In,NZe),e(In,sR),e(sR,jZe),e(In,DZe),e(In,lR),e(lR,GZe),e(In,OZe),e(k,VZe),e(k,qn),e(qn,Ete),e(Ete,XZe),e(qn,zZe),e(qn,iR),e(iR,WZe),e(qn,QZe),e(qn,dR),e(dR,HZe),e(qn,UZe),e(k,JZe),e(k,Nn),e(Nn,Cte),e(Cte,YZe),e(Nn,KZe),e(Nn,cR),e(cR,ZZe),e(Nn,eeo),e(Nn,fR),e(fR,oeo),e(Nn,reo),e(k,teo),e(k,xg),e(xg,wte),e(wte,aeo),e(xg,neo),e(xg,mR),e(mR,seo),e(xg,leo),e(k,ieo),e(k,$g),e($g,Ate),e(Ate,deo),e($g,ceo),e($g,gR),e(gR,feo),e($g,meo),e(k,geo),e(k,jn),e(jn,yte),e(yte,heo),e(jn,peo),e(jn,hR),e(hR,ueo),e(jn,_eo),e(jn,pR),e(pR,beo),e(jn,veo),e(k,Feo),e(k,kg),e(kg,Lte),e(Lte,Teo),e(kg,Meo),e(kg,uR),e(uR,Eeo),e(kg,Ceo),e(k,weo),e(k,Dn),e(Dn,xte),e(xte,Aeo),e(Dn,yeo),e(Dn,_R),e(_R,Leo),e(Dn,xeo),e(Dn,bR),e(bR,$eo),e(Dn,keo),e(k,Seo),e(k,Gn),e(Gn,$te),e($te,Reo),e(Gn,Peo),e(Gn,vR),e(vR,Beo),e(Gn,Ieo),e(Gn,FR),e(FR,qeo),e(Gn,Neo),e(k,jeo),e(k,On),e(On,kte),e(kte,Deo),e(On,Geo),e(On,TR),e(TR,Oeo),e(On,Veo),e(On,MR),e(MR,Xeo),e(On,zeo),e(k,Weo),e(k,Sg),e(Sg,Ste),e(Ste,Qeo),e(Sg,Heo),e(Sg,ER),e(ER,Ueo),e(Sg,Jeo),e(k,Yeo),e(k,Vn),e(Vn,Rte),e(Rte,Keo),e(Vn,Zeo),e(Vn,CR),e(CR,eoo),e(Vn,ooo),e(Vn,wR),e(wR,roo),e(Vn,too),e(k,aoo),e(k,Xn),e(Xn,Pte),e(Pte,noo),e(Xn,soo),e(Xn,AR),e(AR,loo),e(Xn,ioo),e(Xn,yR),e(yR,doo),e(Xn,coo),e(k,foo),e(k,zn),e(zn,Bte),e(Bte,moo),e(zn,goo),e(zn,LR),e(LR,hoo),e(zn,poo),e(zn,xR),e(xR,uoo),e(zn,_oo),e(k,boo),e(k,Wn),e(Wn,Ite),e(Ite,voo),e(Wn,Foo),e(Wn,$R),e($R,Too),e(Wn,Moo),e(Wn,kR),e(kR,Eoo),e(Wn,Coo),e(k,woo),e(k,Qn),e(Qn,qte),e(qte,Aoo),e(Qn,yoo),e(Qn,SR),e(SR,Loo),e(Qn,xoo),e(Qn,RR),e(RR,$oo),e(Qn,koo),e(k,Soo),e(k,Hn),e(Hn,Nte),e(Nte,Roo),e(Hn,Poo),e(Hn,PR),e(PR,Boo),e(Hn,Ioo),e(Hn,BR),e(BR,qoo),e(Hn,Noo),e(k,joo),e(k,Rg),e(Rg,jte),e(jte,Doo),e(Rg,Goo),e(Rg,IR),e(IR,Ooo),e(Rg,Voo),e(k,Xoo),e(k,Un),e(Un,Dte),e(Dte,zoo),e(Un,Woo),e(Un,qR),e(qR,Qoo),e(Un,Hoo),e(Un,NR),e(NR,Uoo),e(Un,Joo),e(k,Yoo),e(k,Pg),e(Pg,Gte),e(Gte,Koo),e(Pg,Zoo),e(Pg,jR),e(jR,ero),e(Pg,oro),e(k,rro),e(k,Jn),e(Jn,Ote),e(Ote,tro),e(Jn,aro),e(Jn,DR),e(DR,nro),e(Jn,sro),e(Jn,GR),e(GR,lro),e(Jn,iro),e(k,dro),e(k,Yn),e(Yn,Vte),e(Vte,cro),e(Yn,fro),e(Yn,OR),e(OR,mro),e(Yn,gro),e(Yn,VR),e(VR,hro),e(Yn,pro),e(k,uro),e(k,Kn),e(Kn,Xte),e(Xte,_ro),e(Kn,bro),e(Kn,XR),e(XR,vro),e(Kn,Fro),e(Kn,zR),e(zR,Tro),e(Kn,Mro),e(k,Ero),e(k,Zn),e(Zn,zte),e(zte,Cro),e(Zn,wro),e(Zn,WR),e(WR,Aro),e(Zn,yro),e(Zn,QR),e(QR,Lro),e(Zn,xro),e(k,$ro),e(k,es),e(es,Wte),e(Wte,kro),e(es,Sro),e(es,HR),e(HR,Rro),e(es,Pro),e(es,UR),e(UR,Bro),e(es,Iro),e(k,qro),e(k,Bg),e(Bg,Qte),e(Qte,Nro),e(Bg,jro),e(Bg,JR),e(JR,Dro),e(Bg,Gro),e(k,Oro),e(k,os),e(os,Hte),e(Hte,Vro),e(os,Xro),e(os,YR),e(YR,zro),e(os,Wro),e(os,KR),e(KR,Qro),e(os,Hro),e(k,Uro),e(k,rs),e(rs,Ute),e(Ute,Jro),e(rs,Yro),e(rs,ZR),e(ZR,Kro),e(rs,Zro),e(rs,eP),e(eP,eto),e(rs,oto),e(k,rto),e(k,ts),e(ts,Jte),e(Jte,tto),e(ts,ato),e(ts,oP),e(oP,nto),e(ts,sto),e(ts,rP),e(rP,lto),e(ts,ito),e(k,dto),e(k,as),e(as,Yte),e(Yte,cto),e(as,fto),e(as,tP),e(tP,mto),e(as,gto),e(as,aP),e(aP,hto),e(as,pto),e(k,uto),e(k,ns),e(ns,Kte),e(Kte,_to),e(ns,bto),e(ns,nP),e(nP,vto),e(ns,Fto),e(ns,sP),e(sP,Tto),e(ns,Mto),e(k,Eto),e(k,ss),e(ss,Zte),e(Zte,Cto),e(ss,wto),e(ss,lP),e(lP,Ato),e(ss,yto),e(ss,iP),e(iP,Lto),e(ss,xto),e(k,$to),e(k,ls),e(ls,eae),e(eae,kto),e(ls,Sto),e(ls,dP),e(dP,Rto),e(ls,Pto),e(ls,cP),e(cP,Bto),e(ls,Ito),e(k,qto),e(k,Ig),e(Ig,oae),e(oae,Nto),e(Ig,jto),e(Ig,fP),e(fP,Dto),e(Ig,Gto),e(k,Oto),e(k,is),e(is,rae),e(rae,Vto),e(is,Xto),e(is,mP),e(mP,zto),e(is,Wto),e(is,gP),e(gP,Qto),e(is,Hto),e(k,Uto),e(k,qg),e(qg,tae),e(tae,Jto),e(qg,Yto),e(qg,hP),e(hP,Kto),e(qg,Zto),e(k,eao),e(k,Ng),e(Ng,aae),e(aae,oao),e(Ng,rao),e(Ng,pP),e(pP,tao),e(Ng,aao),e(k,nao),e(k,ds),e(ds,nae),e(nae,sao),e(ds,lao),e(ds,uP),e(uP,iao),e(ds,dao),e(ds,_P),e(_P,cao),e(ds,fao),e(k,mao),e(k,cs),e(cs,sae),e(sae,gao),e(cs,hao),e(cs,bP),e(bP,pao),e(cs,uao),e(cs,vP),e(vP,_ao),e(cs,bao),e(k,vao),e(k,fs),e(fs,lae),e(lae,Fao),e(fs,Tao),e(fs,FP),e(FP,Mao),e(fs,Eao),e(fs,TP),e(TP,Cao),e(fs,wao),e(k,Aao),e(k,jg),e(jg,iae),e(iae,yao),e(jg,Lao),e(jg,MP),e(MP,xao),e(jg,$ao),e(k,kao),e(k,ms),e(ms,dae),e(dae,Sao),e(ms,Rao),e(ms,EP),e(EP,Pao),e(ms,Bao),e(ms,CP),e(CP,Iao),e(ms,qao),e(k,Nao),e(k,gs),e(gs,cae),e(cae,jao),e(gs,Dao),e(gs,wP),e(wP,Gao),e(gs,Oao),e(gs,AP),e(AP,Vao),e(gs,Xao),e(k,zao),e(k,hs),e(hs,fae),e(fae,Wao),e(hs,Qao),e(hs,yP),e(yP,Hao),e(hs,Uao),e(hs,LP),e(LP,Jao),e(hs,Yao),e(k,Kao),e(k,ps),e(ps,mae),e(mae,Zao),e(ps,eno),e(ps,xP),e(xP,ono),e(ps,rno),e(ps,$P),e($P,tno),e(ps,ano),e(k,nno),e(k,us),e(us,gae),e(gae,sno),e(us,lno),e(us,kP),e(kP,ino),e(us,dno),e(us,SP),e(SP,cno),e(us,fno),e(k,mno),e(k,Dg),e(Dg,hae),e(hae,gno),e(Dg,hno),e(Dg,RP),e(RP,pno),e(Dg,uno),e(k,_no),e(k,_s),e(_s,pae),e(pae,bno),e(_s,vno),e(_s,PP),e(PP,Fno),e(_s,Tno),e(_s,BP),e(BP,Mno),e(_s,Eno),e(k,Cno),e(k,Gg),e(Gg,uae),e(uae,wno),e(Gg,Ano),e(Gg,IP),e(IP,yno),e(Gg,Lno),e(k,xno),e(k,Og),e(Og,_ae),e(_ae,$no),e(Og,kno),e(Og,qP),e(qP,Sno),e(Og,Rno),e(k,Pno),e(k,Vg),e(Vg,bae),e(bae,Bno),e(Vg,Ino),e(Vg,NP),e(NP,qno),e(Vg,Nno),e(k,jno),e(k,Xg),e(Xg,vae),e(vae,Dno),e(Xg,Gno),e(Xg,jP),e(jP,Ono),e(Xg,Vno),e(k,Xno),e(k,bs),e(bs,Fae),e(Fae,zno),e(bs,Wno),e(bs,DP),e(DP,Qno),e(bs,Hno),e(bs,GP),e(GP,Uno),e(bs,Jno),e(k,Yno),e(k,zg),e(zg,Tae),e(Tae,Kno),e(zg,Zno),e(zg,OP),e(OP,eso),e(zg,oso),e(k,rso),e(k,vs),e(vs,Mae),e(Mae,tso),e(vs,aso),e(vs,VP),e(VP,nso),e(vs,sso),e(vs,XP),e(XP,lso),e(vs,iso),e(k,dso),e(k,Fs),e(Fs,Eae),e(Eae,cso),e(Fs,fso),e(Fs,zP),e(zP,mso),e(Fs,gso),e(Fs,WP),e(WP,hso),e(Fs,pso),e(k,uso),e(k,Ts),e(Ts,Cae),e(Cae,_so),e(Ts,bso),e(Ts,QP),e(QP,vso),e(Ts,Fso),e(Ts,HP),e(HP,Tso),e(Ts,Mso),e(k,Eso),e(k,Ms),e(Ms,wae),e(wae,Cso),e(Ms,wso),e(Ms,UP),e(UP,Aso),e(Ms,yso),e(Ms,JP),e(JP,Lso),e(Ms,xso),e(k,$so),e(k,Es),e(Es,Aae),e(Aae,kso),e(Es,Sso),e(Es,YP),e(YP,Rso),e(Es,Pso),e(Es,KP),e(KP,Bso),e(Es,Iso),e(k,qso),e(k,Cs),e(Cs,yae),e(yae,Nso),e(Cs,jso),e(Cs,ZP),e(ZP,Dso),e(Cs,Gso),e(Cs,eB),e(eB,Oso),e(Cs,Vso),e(k,Xso),e(k,Wg),e(Wg,Lae),e(Lae,zso),e(Wg,Wso),e(Wg,oB),e(oB,Qso),e(Wg,Hso),e(k,Uso),e(k,Qg),e(Qg,xae),e(xae,Jso),e(Qg,Yso),e(Qg,rB),e(rB,Kso),e(Qg,Zso),e(k,elo),e(k,ws),e(ws,$ae),e($ae,olo),e(ws,rlo),e(ws,tB),e(tB,tlo),e(ws,alo),e(ws,aB),e(aB,nlo),e(ws,slo),e(k,llo),e(k,As),e(As,kae),e(kae,ilo),e(As,dlo),e(As,nB),e(nB,clo),e(As,flo),e(As,sB),e(sB,mlo),e(As,glo),e(k,hlo),e(k,ys),e(ys,Sae),e(Sae,plo),e(ys,ulo),e(ys,lB),e(lB,_lo),e(ys,blo),e(ys,iB),e(iB,vlo),e(ys,Flo),e(k,Tlo),e(k,Hg),e(Hg,Rae),e(Rae,Mlo),e(Hg,Elo),e(Hg,dB),e(dB,Clo),e(Hg,wlo),e(k,Alo),e(k,Ug),e(Ug,Pae),e(Pae,ylo),e(Ug,Llo),e(Ug,cB),e(cB,xlo),e(Ug,$lo),e(k,klo),e(k,Jg),e(Jg,Bae),e(Bae,Slo),e(Jg,Rlo),e(Jg,fB),e(fB,Plo),e(Jg,Blo),e(k,Ilo),e(k,Ls),e(Ls,Iae),e(Iae,qlo),e(Ls,Nlo),e(Ls,mB),e(mB,jlo),e(Ls,Dlo),e(Ls,gB),e(gB,Glo),e(Ls,Olo),e(k,Vlo),e(k,Yg),e(Yg,qae),e(qae,Xlo),e(Yg,zlo),e(Yg,hB),e(hB,Wlo),e(Yg,Qlo),e(k,Hlo),e(k,Kg),e(Kg,Nae),e(Nae,Ulo),e(Kg,Jlo),e(Kg,pB),e(pB,Ylo),e(Kg,Klo),e(k,Zlo),e(k,Zg),e(Zg,jae),e(jae,eio),e(Zg,oio),e(Zg,uB),e(uB,rio),e(Zg,tio),e(k,aio),e(k,xs),e(xs,Dae),e(Dae,nio),e(xs,sio),e(xs,_B),e(_B,lio),e(xs,iio),e(xs,bB),e(bB,dio),e(xs,cio),e(k,fio),e(k,eh),e(eh,Gae),e(Gae,mio),e(eh,gio),e(eh,vB),e(vB,hio),e(eh,pio),e(k,uio),e(k,oh),e(oh,Oae),e(Oae,_io),e(oh,bio),e(oh,FB),e(FB,vio),e(oh,Fio),e(k,Tio),e(k,$s),e($s,Vae),e(Vae,Mio),e($s,Eio),e($s,TB),e(TB,Cio),e($s,wio),e($s,MB),e(MB,Aio),e($s,yio),e(k,Lio),e(k,ks),e(ks,Xae),e(Xae,xio),e(ks,$io),e(ks,EB),e(EB,kio),e(ks,Sio),e(ks,CB),e(CB,Rio),e(ks,Pio),e(k,Bio),e(k,Ss),e(Ss,zae),e(zae,Iio),e(Ss,qio),e(Ss,wB),e(wB,Nio),e(Ss,jio),e(Ss,AB),e(AB,Dio),e(Ss,Gio),e(k,Oio),e(k,Rs),e(Rs,Wae),e(Wae,Vio),e(Rs,Xio),e(Rs,yB),e(yB,zio),e(Rs,Wio),e(Rs,LB),e(LB,Qio),e(Rs,Hio),e(Cr,Uio),M(rh,Cr,null),e(wo,Jio),e(wo,th),M(BA,th,null),e(th,Yio),e(th,Qae),e(Qae,Kio),b(f,Gqe,_),b(f,Mi,_),e(Mi,ah),e(ah,Hae),M(IA,Hae,null),e(Mi,Zio),e(Mi,Uae),e(Uae,edo),b(f,Oqe,_),b(f,Ao,_),M(qA,Ao,null),e(Ao,odo),e(Ao,NA),e(NA,rdo),e(NA,xB),e(xB,tdo),e(NA,ado),e(Ao,ndo),e(Ao,jA),e(jA,sdo),e(jA,Jae),e(Jae,ldo),e(jA,ido),e(Ao,ddo),e(Ao,He),M(DA,He,null),e(He,cdo),e(He,Yae),e(Yae,fdo),e(He,mdo),e(He,ya),e(ya,gdo),e(ya,Kae),e(Kae,hdo),e(ya,pdo),e(ya,Zae),e(Zae,udo),e(ya,_do),e(ya,ene),e(ene,bdo),e(ya,vdo),e(He,Fdo),e(He,K),e(K,nh),e(nh,one),e(one,Tdo),e(nh,Mdo),e(nh,$B),e($B,Edo),e(nh,Cdo),e(K,wdo),e(K,sh),e(sh,rne),e(rne,Ado),e(sh,ydo),e(sh,kB),e(kB,Ldo),e(sh,xdo),e(K,$do),e(K,lh),e(lh,tne),e(tne,kdo),e(lh,Sdo),e(lh,SB),e(SB,Rdo),e(lh,Pdo),e(K,Bdo),e(K,ih),e(ih,ane),e(ane,Ido),e(ih,qdo),e(ih,RB),e(RB,Ndo),e(ih,jdo),e(K,Ddo),e(K,dh),e(dh,nne),e(nne,Gdo),e(dh,Odo),e(dh,PB),e(PB,Vdo),e(dh,Xdo),e(K,zdo),e(K,ch),e(ch,sne),e(sne,Wdo),e(ch,Qdo),e(ch,BB),e(BB,Hdo),e(ch,Udo),e(K,Jdo),e(K,fh),e(fh,lne),e(lne,Ydo),e(fh,Kdo),e(fh,IB),e(IB,Zdo),e(fh,eco),e(K,oco),e(K,mh),e(mh,ine),e(ine,rco),e(mh,tco),e(mh,qB),e(qB,aco),e(mh,nco),e(K,sco),e(K,gh),e(gh,dne),e(dne,lco),e(gh,ico),e(gh,NB),e(NB,dco),e(gh,cco),e(K,fco),e(K,hh),e(hh,cne),e(cne,mco),e(hh,gco),e(hh,jB),e(jB,hco),e(hh,pco),e(K,uco),e(K,ph),e(ph,fne),e(fne,_co),e(ph,bco),e(ph,DB),e(DB,vco),e(ph,Fco),e(K,Tco),e(K,uh),e(uh,mne),e(mne,Mco),e(uh,Eco),e(uh,GB),e(GB,Cco),e(uh,wco),e(K,Aco),e(K,_h),e(_h,gne),e(gne,yco),e(_h,Lco),e(_h,OB),e(OB,xco),e(_h,$co),e(K,kco),e(K,bh),e(bh,hne),e(hne,Sco),e(bh,Rco),e(bh,VB),e(VB,Pco),e(bh,Bco),e(K,Ico),e(K,vh),e(vh,pne),e(pne,qco),e(vh,Nco),e(vh,XB),e(XB,jco),e(vh,Dco),e(K,Gco),e(K,Fh),e(Fh,une),e(une,Oco),e(Fh,Vco),e(Fh,zB),e(zB,Xco),e(Fh,zco),e(K,Wco),e(K,Th),e(Th,_ne),e(_ne,Qco),e(Th,Hco),e(Th,WB),e(WB,Uco),e(Th,Jco),e(K,Yco),e(K,Mh),e(Mh,bne),e(bne,Kco),e(Mh,Zco),e(Mh,QB),e(QB,efo),e(Mh,ofo),e(K,rfo),e(K,Eh),e(Eh,vne),e(vne,tfo),e(Eh,afo),e(Eh,HB),e(HB,nfo),e(Eh,sfo),e(K,lfo),e(K,Ch),e(Ch,Fne),e(Fne,ifo),e(Ch,dfo),e(Ch,UB),e(UB,cfo),e(Ch,ffo),e(K,mfo),e(K,wh),e(wh,Tne),e(Tne,gfo),e(wh,hfo),e(wh,JB),e(JB,pfo),e(wh,ufo),e(K,_fo),e(K,Ah),e(Ah,Mne),e(Mne,bfo),e(Ah,vfo),e(Ah,YB),e(YB,Ffo),e(Ah,Tfo),e(K,Mfo),e(K,yh),e(yh,Ene),e(Ene,Efo),e(yh,Cfo),e(yh,KB),e(KB,wfo),e(yh,Afo),e(K,yfo),e(K,Lh),e(Lh,Cne),e(Cne,Lfo),e(Lh,xfo),e(Lh,ZB),e(ZB,$fo),e(Lh,kfo),e(K,Sfo),e(K,xh),e(xh,wne),e(wne,Rfo),e(xh,Pfo),e(xh,eI),e(eI,Bfo),e(xh,Ifo),e(K,qfo),e(K,$h),e($h,Ane),e(Ane,Nfo),e($h,jfo),e($h,oI),e(oI,Dfo),e($h,Gfo),e(K,Ofo),e(K,kh),e(kh,yne),e(yne,Vfo),e(kh,Xfo),e(kh,rI),e(rI,zfo),e(kh,Wfo),e(K,Qfo),e(K,Sh),e(Sh,Lne),e(Lne,Hfo),e(Sh,Ufo),e(Sh,tI),e(tI,Jfo),e(Sh,Yfo),e(He,Kfo),M(Rh,He,null),e(He,Zfo),M(Ph,He,null),e(Ao,emo),e(Ao,Bh),M(GA,Bh,null),e(Bh,omo),e(Bh,xne),e(xne,rmo),b(f,Vqe,_),b(f,Ei,_),e(Ei,Ih),e(Ih,$ne),M(OA,$ne,null),e(Ei,tmo),e(Ei,kne),e(kne,amo),b(f,Xqe,_),b(f,yo,_),M(VA,yo,null),e(yo,nmo),e(yo,XA),e(XA,smo),e(XA,aI),e(aI,lmo),e(XA,imo),e(yo,dmo),e(yo,zA),e(zA,cmo),e(zA,Sne),e(Sne,fmo),e(zA,mmo),e(yo,gmo),e(yo,Ue),M(WA,Ue,null),e(Ue,hmo),e(Ue,Rne),e(Rne,pmo),e(Ue,umo),e(Ue,Ci),e(Ci,_mo),e(Ci,Pne),e(Pne,bmo),e(Ci,vmo),e(Ci,Bne),e(Bne,Fmo),e(Ci,Tmo),e(Ue,Mmo),e(Ue,he),e(he,qh),e(qh,Ine),e(Ine,Emo),e(qh,Cmo),e(qh,nI),e(nI,wmo),e(qh,Amo),e(he,ymo),e(he,Nh),e(Nh,qne),e(qne,Lmo),e(Nh,xmo),e(Nh,Nne),e(Nne,$mo),e(Nh,kmo),e(he,Smo),e(he,jh),e(jh,jne),e(jne,Rmo),e(jh,Pmo),e(jh,sI),e(sI,Bmo),e(jh,Imo),e(he,qmo),e(he,Dh),e(Dh,Dne),e(Dne,Nmo),e(Dh,jmo),e(Dh,lI),e(lI,Dmo),e(Dh,Gmo),e(he,Omo),e(he,Gh),e(Gh,Gne),e(Gne,Vmo),e(Gh,Xmo),e(Gh,iI),e(iI,zmo),e(Gh,Wmo),e(he,Qmo),e(he,Oh),e(Oh,One),e(One,Hmo),e(Oh,Umo),e(Oh,dI),e(dI,Jmo),e(Oh,Ymo),e(he,Kmo),e(he,Vh),e(Vh,Vne),e(Vne,Zmo),e(Vh,ego),e(Vh,cI),e(cI,ogo),e(Vh,rgo),e(he,tgo),e(he,Xh),e(Xh,Xne),e(Xne,ago),e(Xh,ngo),e(Xh,fI),e(fI,sgo),e(Xh,lgo),e(he,igo),e(he,zh),e(zh,zne),e(zne,dgo),e(zh,cgo),e(zh,mI),e(mI,fgo),e(zh,mgo),e(he,ggo),e(he,Wh),e(Wh,Wne),e(Wne,hgo),e(Wh,pgo),e(Wh,gI),e(gI,ugo),e(Wh,_go),e(he,bgo),e(he,Qh),e(Qh,Qne),e(Qne,vgo),e(Qh,Fgo),e(Qh,hI),e(hI,Tgo),e(Qh,Mgo),e(he,Ego),e(he,Hh),e(Hh,Hne),e(Hne,Cgo),e(Hh,wgo),e(Hh,pI),e(pI,Ago),e(Hh,ygo),e(he,Lgo),e(he,Uh),e(Uh,Une),e(Une,xgo),e(Uh,$go),e(Uh,uI),e(uI,kgo),e(Uh,Sgo),e(he,Rgo),e(he,Jh),e(Jh,Jne),e(Jne,Pgo),e(Jh,Bgo),e(Jh,_I),e(_I,Igo),e(Jh,qgo),e(he,Ngo),e(he,Yh),e(Yh,Yne),e(Yne,jgo),e(Yh,Dgo),e(Yh,bI),e(bI,Ggo),e(Yh,Ogo),e(he,Vgo),e(he,Kh),e(Kh,Kne),e(Kne,Xgo),e(Kh,zgo),e(Kh,vI),e(vI,Wgo),e(Kh,Qgo),e(he,Hgo),e(he,Zh),e(Zh,Zne),e(Zne,Ugo),e(Zh,Jgo),e(Zh,FI),e(FI,Ygo),e(Zh,Kgo),e(Ue,Zgo),M(ep,Ue,null),e(Ue,eho),M(op,Ue,null),e(yo,oho),e(yo,rp),M(QA,rp,null),e(rp,rho),e(rp,ese),e(ese,tho),b(f,zqe,_),b(f,wi,_),e(wi,tp),e(tp,ose),M(HA,ose,null),e(wi,aho),e(wi,rse),e(rse,nho),b(f,Wqe,_),b(f,Lo,_),M(UA,Lo,null),e(Lo,sho),e(Lo,Ai),e(Ai,lho),e(Ai,TI),e(TI,iho),e(Ai,dho),e(Ai,MI),e(MI,cho),e(Ai,fho),e(Lo,mho),e(Lo,JA),e(JA,gho),e(JA,tse),e(tse,hho),e(JA,pho),e(Lo,uho),e(Lo,tt),M(YA,tt,null),e(tt,_ho),e(tt,ase),e(ase,bho),e(tt,vho),e(tt,yi),e(yi,Fho),e(yi,nse),e(nse,Tho),e(yi,Mho),e(yi,EI),e(EI,Eho),e(yi,Cho),e(tt,who),M(ap,tt,null),e(Lo,Aho),e(Lo,Je),M(KA,Je,null),e(Je,yho),e(Je,sse),e(sse,Lho),e(Je,xho),e(Je,La),e(La,$ho),e(La,lse),e(lse,kho),e(La,Sho),e(La,ise),e(ise,Rho),e(La,Pho),e(La,dse),e(dse,Bho),e(La,Iho),e(Je,qho),e(Je,x),e(x,np),e(np,cse),e(cse,Nho),e(np,jho),e(np,CI),e(CI,Dho),e(np,Gho),e(x,Oho),e(x,sp),e(sp,fse),e(fse,Vho),e(sp,Xho),e(sp,wI),e(wI,zho),e(sp,Who),e(x,Qho),e(x,lp),e(lp,mse),e(mse,Hho),e(lp,Uho),e(lp,AI),e(AI,Jho),e(lp,Yho),e(x,Kho),e(x,ip),e(ip,gse),e(gse,Zho),e(ip,epo),e(ip,yI),e(yI,opo),e(ip,rpo),e(x,tpo),e(x,dp),e(dp,hse),e(hse,apo),e(dp,npo),e(dp,LI),e(LI,spo),e(dp,lpo),e(x,ipo),e(x,cp),e(cp,pse),e(pse,dpo),e(cp,cpo),e(cp,xI),e(xI,fpo),e(cp,mpo),e(x,gpo),e(x,fp),e(fp,use),e(use,hpo),e(fp,ppo),e(fp,$I),e($I,upo),e(fp,_po),e(x,bpo),e(x,mp),e(mp,_se),e(_se,vpo),e(mp,Fpo),e(mp,kI),e(kI,Tpo),e(mp,Mpo),e(x,Epo),e(x,gp),e(gp,bse),e(bse,Cpo),e(gp,wpo),e(gp,SI),e(SI,Apo),e(gp,ypo),e(x,Lpo),e(x,hp),e(hp,vse),e(vse,xpo),e(hp,$po),e(hp,RI),e(RI,kpo),e(hp,Spo),e(x,Rpo),e(x,pp),e(pp,Fse),e(Fse,Ppo),e(pp,Bpo),e(pp,PI),e(PI,Ipo),e(pp,qpo),e(x,Npo),e(x,up),e(up,Tse),e(Tse,jpo),e(up,Dpo),e(up,BI),e(BI,Gpo),e(up,Opo),e(x,Vpo),e(x,_p),e(_p,Mse),e(Mse,Xpo),e(_p,zpo),e(_p,II),e(II,Wpo),e(_p,Qpo),e(x,Hpo),e(x,bp),e(bp,Ese),e(Ese,Upo),e(bp,Jpo),e(bp,qI),e(qI,Ypo),e(bp,Kpo),e(x,Zpo),e(x,vp),e(vp,Cse),e(Cse,euo),e(vp,ouo),e(vp,NI),e(NI,ruo),e(vp,tuo),e(x,auo),e(x,Fp),e(Fp,wse),e(wse,nuo),e(Fp,suo),e(Fp,jI),e(jI,luo),e(Fp,iuo),e(x,duo),e(x,Tp),e(Tp,Ase),e(Ase,cuo),e(Tp,fuo),e(Tp,DI),e(DI,muo),e(Tp,guo),e(x,huo),e(x,Mp),e(Mp,yse),e(yse,puo),e(Mp,uuo),e(Mp,GI),e(GI,_uo),e(Mp,buo),e(x,vuo),e(x,Ep),e(Ep,Lse),e(Lse,Fuo),e(Ep,Tuo),e(Ep,OI),e(OI,Muo),e(Ep,Euo),e(x,Cuo),e(x,Cp),e(Cp,xse),e(xse,wuo),e(Cp,Auo),e(Cp,VI),e(VI,yuo),e(Cp,Luo),e(x,xuo),e(x,wp),e(wp,$se),e($se,$uo),e(wp,kuo),e(wp,XI),e(XI,Suo),e(wp,Ruo),e(x,Puo),e(x,Ap),e(Ap,kse),e(kse,Buo),e(Ap,Iuo),e(Ap,zI),e(zI,quo),e(Ap,Nuo),e(x,juo),e(x,yp),e(yp,Sse),e(Sse,Duo),e(yp,Guo),e(yp,WI),e(WI,Ouo),e(yp,Vuo),e(x,Xuo),e(x,Lp),e(Lp,Rse),e(Rse,zuo),e(Lp,Wuo),e(Lp,QI),e(QI,Quo),e(Lp,Huo),e(x,Uuo),e(x,xp),e(xp,Pse),e(Pse,Juo),e(xp,Yuo),e(xp,HI),e(HI,Kuo),e(xp,Zuo),e(x,e_o),e(x,$p),e($p,Bse),e(Bse,o_o),e($p,r_o),e($p,UI),e(UI,t_o),e($p,a_o),e(x,n_o),e(x,kp),e(kp,Ise),e(Ise,s_o),e(kp,l_o),e(kp,JI),e(JI,i_o),e(kp,d_o),e(x,c_o),e(x,Sp),e(Sp,qse),e(qse,f_o),e(Sp,m_o),e(Sp,YI),e(YI,g_o),e(Sp,h_o),e(x,p_o),e(x,Rp),e(Rp,Nse),e(Nse,u_o),e(Rp,__o),e(Rp,KI),e(KI,b_o),e(Rp,v_o),e(x,F_o),e(x,Pp),e(Pp,jse),e(jse,T_o),e(Pp,M_o),e(Pp,ZI),e(ZI,E_o),e(Pp,C_o),e(x,w_o),e(x,Bp),e(Bp,Dse),e(Dse,A_o),e(Bp,y_o),e(Bp,eq),e(eq,L_o),e(Bp,x_o),e(x,$_o),e(x,Ip),e(Ip,Gse),e(Gse,k_o),e(Ip,S_o),e(Ip,oq),e(oq,R_o),e(Ip,P_o),e(x,B_o),e(x,Ps),e(Ps,Ose),e(Ose,I_o),e(Ps,q_o),e(Ps,rq),e(rq,N_o),e(Ps,j_o),e(Ps,tq),e(tq,D_o),e(Ps,G_o),e(x,O_o),e(x,qp),e(qp,Vse),e(Vse,V_o),e(qp,X_o),e(qp,aq),e(aq,z_o),e(qp,W_o),e(x,Q_o),e(x,Np),e(Np,Xse),e(Xse,H_o),e(Np,U_o),e(Np,nq),e(nq,J_o),e(Np,Y_o),e(x,K_o),e(x,jp),e(jp,zse),e(zse,Z_o),e(jp,e0o),e(jp,sq),e(sq,o0o),e(jp,r0o),e(x,t0o),e(x,Dp),e(Dp,Wse),e(Wse,a0o),e(Dp,n0o),e(Dp,lq),e(lq,s0o),e(Dp,l0o),e(x,i0o),e(x,Gp),e(Gp,Qse),e(Qse,d0o),e(Gp,c0o),e(Gp,iq),e(iq,f0o),e(Gp,m0o),e(x,g0o),e(x,Op),e(Op,Hse),e(Hse,h0o),e(Op,p0o),e(Op,dq),e(dq,u0o),e(Op,_0o),e(x,b0o),e(x,Vp),e(Vp,Use),e(Use,v0o),e(Vp,F0o),e(Vp,cq),e(cq,T0o),e(Vp,M0o),e(x,E0o),e(x,Xp),e(Xp,Jse),e(Jse,C0o),e(Xp,w0o),e(Xp,fq),e(fq,A0o),e(Xp,y0o),e(x,L0o),e(x,zp),e(zp,Yse),e(Yse,x0o),e(zp,$0o),e(zp,mq),e(mq,k0o),e(zp,S0o),e(x,R0o),e(x,Wp),e(Wp,Kse),e(Kse,P0o),e(Wp,B0o),e(Wp,gq),e(gq,I0o),e(Wp,q0o),e(x,N0o),e(x,Qp),e(Qp,Zse),e(Zse,j0o),e(Qp,D0o),e(Qp,hq),e(hq,G0o),e(Qp,O0o),e(x,V0o),e(x,Hp),e(Hp,ele),e(ele,X0o),e(Hp,z0o),e(Hp,pq),e(pq,W0o),e(Hp,Q0o),e(x,H0o),e(x,Up),e(Up,ole),e(ole,U0o),e(Up,J0o),e(Up,uq),e(uq,Y0o),e(Up,K0o),e(x,Z0o),e(x,Jp),e(Jp,rle),e(rle,e1o),e(Jp,o1o),e(Jp,_q),e(_q,r1o),e(Jp,t1o),e(x,a1o),e(x,Yp),e(Yp,tle),e(tle,n1o),e(Yp,s1o),e(Yp,bq),e(bq,l1o),e(Yp,i1o),e(x,d1o),e(x,Kp),e(Kp,ale),e(ale,c1o),e(Kp,f1o),e(Kp,vq),e(vq,m1o),e(Kp,g1o),e(x,h1o),e(x,Zp),e(Zp,nle),e(nle,p1o),e(Zp,u1o),e(Zp,Fq),e(Fq,_1o),e(Zp,b1o),e(x,v1o),e(x,eu),e(eu,sle),e(sle,F1o),e(eu,T1o),e(eu,Tq),e(Tq,M1o),e(eu,E1o),e(x,C1o),e(x,ou),e(ou,lle),e(lle,w1o),e(ou,A1o),e(ou,Mq),e(Mq,y1o),e(ou,L1o),e(x,x1o),e(x,ru),e(ru,ile),e(ile,$1o),e(ru,k1o),e(ru,Eq),e(Eq,S1o),e(ru,R1o),e(x,P1o),e(x,tu),e(tu,dle),e(dle,B1o),e(tu,I1o),e(tu,Cq),e(Cq,q1o),e(tu,N1o),e(x,j1o),e(x,au),e(au,cle),e(cle,D1o),e(au,G1o),e(au,wq),e(wq,O1o),e(au,V1o),e(x,X1o),e(x,nu),e(nu,fle),e(fle,z1o),e(nu,W1o),e(nu,Aq),e(Aq,Q1o),e(nu,H1o),e(x,U1o),e(x,su),e(su,mle),e(mle,J1o),e(su,Y1o),e(su,yq),e(yq,K1o),e(su,Z1o),e(x,ebo),e(x,lu),e(lu,gle),e(gle,obo),e(lu,rbo),e(lu,Lq),e(Lq,tbo),e(lu,abo),e(x,nbo),e(x,iu),e(iu,hle),e(hle,sbo),e(iu,lbo),e(iu,xq),e(xq,ibo),e(iu,dbo),e(x,cbo),e(x,du),e(du,ple),e(ple,fbo),e(du,mbo),e(du,$q),e($q,gbo),e(du,hbo),e(x,pbo),e(x,cu),e(cu,ule),e(ule,ubo),e(cu,_bo),e(cu,kq),e(kq,bbo),e(cu,vbo),e(x,Fbo),e(x,fu),e(fu,_le),e(_le,Tbo),e(fu,Mbo),e(fu,Sq),e(Sq,Ebo),e(fu,Cbo),e(x,wbo),e(x,mu),e(mu,ble),e(ble,Abo),e(mu,ybo),e(mu,Rq),e(Rq,Lbo),e(mu,xbo),e(x,$bo),e(x,gu),e(gu,vle),e(vle,kbo),e(gu,Sbo),e(gu,Pq),e(Pq,Rbo),e(gu,Pbo),e(x,Bbo),e(x,hu),e(hu,Fle),e(Fle,Ibo),e(hu,qbo),e(hu,Bq),e(Bq,Nbo),e(hu,jbo),e(x,Dbo),e(x,pu),e(pu,Tle),e(Tle,Gbo),e(pu,Obo),e(pu,Iq),e(Iq,Vbo),e(pu,Xbo),e(x,zbo),e(x,uu),e(uu,Mle),e(Mle,Wbo),e(uu,Qbo),e(uu,qq),e(qq,Hbo),e(uu,Ubo),e(x,Jbo),e(x,_u),e(_u,Ele),e(Ele,Ybo),e(_u,Kbo),e(_u,Nq),e(Nq,Zbo),e(_u,e2o),e(x,o2o),e(x,bu),e(bu,Cle),e(Cle,r2o),e(bu,t2o),e(bu,jq),e(jq,a2o),e(bu,n2o),e(x,s2o),e(x,vu),e(vu,wle),e(wle,l2o),e(vu,i2o),e(vu,Dq),e(Dq,d2o),e(vu,c2o),e(x,f2o),e(x,Fu),e(Fu,Ale),e(Ale,m2o),e(Fu,g2o),e(Fu,Gq),e(Gq,h2o),e(Fu,p2o),e(x,u2o),e(x,Tu),e(Tu,yle),e(yle,_2o),e(Tu,b2o),e(Tu,Oq),e(Oq,v2o),e(Tu,F2o),e(x,T2o),e(x,Mu),e(Mu,Lle),e(Lle,M2o),e(Mu,E2o),e(Mu,Vq),e(Vq,C2o),e(Mu,w2o),e(x,A2o),e(x,Eu),e(Eu,xle),e(xle,y2o),e(Eu,L2o),e(Eu,Xq),e(Xq,x2o),e(Eu,$2o),e(x,k2o),e(x,Cu),e(Cu,$le),e($le,S2o),e(Cu,R2o),e(Cu,zq),e(zq,P2o),e(Cu,B2o),e(x,I2o),e(x,wu),e(wu,kle),e(kle,q2o),e(wu,N2o),e(wu,Wq),e(Wq,j2o),e(wu,D2o),e(x,G2o),e(x,Au),e(Au,Sle),e(Sle,O2o),e(Au,V2o),e(Au,Qq),e(Qq,X2o),e(Au,z2o),e(x,W2o),e(x,yu),e(yu,Rle),e(Rle,Q2o),e(yu,H2o),e(yu,Hq),e(Hq,U2o),e(yu,J2o),e(x,Y2o),e(x,Lu),e(Lu,Ple),e(Ple,K2o),e(Lu,Z2o),e(Lu,Uq),e(Uq,evo),e(Lu,ovo),e(x,rvo),e(x,xu),e(xu,Ble),e(Ble,tvo),e(xu,avo),e(xu,Jq),e(Jq,nvo),e(xu,svo),e(x,lvo),e(x,$u),e($u,Ile),e(Ile,ivo),e($u,dvo),e($u,Yq),e(Yq,cvo),e($u,fvo),e(x,mvo),e(x,ku),e(ku,qle),e(qle,gvo),e(ku,hvo),e(ku,Kq),e(Kq,pvo),e(ku,uvo),e(x,_vo),e(x,Su),e(Su,Nle),e(Nle,bvo),e(Su,vvo),e(Su,Zq),e(Zq,Fvo),e(Su,Tvo),e(x,Mvo),e(x,Ru),e(Ru,jle),e(jle,Evo),e(Ru,Cvo),e(Ru,eN),e(eN,wvo),e(Ru,Avo),e(x,yvo),e(x,Pu),e(Pu,Dle),e(Dle,Lvo),e(Pu,xvo),e(Pu,oN),e(oN,$vo),e(Pu,kvo),e(x,Svo),e(x,Bu),e(Bu,Gle),e(Gle,Rvo),e(Bu,Pvo),e(Bu,rN),e(rN,Bvo),e(Bu,Ivo),e(x,qvo),e(x,Iu),e(Iu,Ole),e(Ole,Nvo),e(Iu,jvo),e(Iu,tN),e(tN,Dvo),e(Iu,Gvo),e(x,Ovo),e(x,qu),e(qu,Vle),e(Vle,Vvo),e(qu,Xvo),e(qu,aN),e(aN,zvo),e(qu,Wvo),e(x,Qvo),e(x,Nu),e(Nu,Xle),e(Xle,Hvo),e(Nu,Uvo),e(Nu,nN),e(nN,Jvo),e(Nu,Yvo),e(x,Kvo),e(x,ju),e(ju,zle),e(zle,Zvo),e(ju,eFo),e(ju,sN),e(sN,oFo),e(ju,rFo),e(x,tFo),e(x,Du),e(Du,Wle),e(Wle,aFo),e(Du,nFo),e(Du,lN),e(lN,sFo),e(Du,lFo),e(x,iFo),e(x,Gu),e(Gu,Qle),e(Qle,dFo),e(Gu,cFo),e(Gu,iN),e(iN,fFo),e(Gu,mFo),e(x,gFo),e(x,Ou),e(Ou,Hle),e(Hle,hFo),e(Ou,pFo),e(Ou,dN),e(dN,uFo),e(Ou,_Fo),e(x,bFo),e(x,Vu),e(Vu,Ule),e(Ule,vFo),e(Vu,FFo),e(Vu,cN),e(cN,TFo),e(Vu,MFo),e(x,EFo),e(x,Xu),e(Xu,Jle),e(Jle,CFo),e(Xu,wFo),e(Xu,fN),e(fN,AFo),e(Xu,yFo),e(x,LFo),e(x,zu),e(zu,Yle),e(Yle,xFo),e(zu,$Fo),e(zu,mN),e(mN,kFo),e(zu,SFo),e(x,RFo),e(x,Wu),e(Wu,Kle),e(Kle,PFo),e(Wu,BFo),e(Wu,gN),e(gN,IFo),e(Wu,qFo),e(x,NFo),e(x,Qu),e(Qu,Zle),e(Zle,jFo),e(Qu,DFo),e(Qu,hN),e(hN,GFo),e(Qu,OFo),e(x,VFo),e(x,Hu),e(Hu,eie),e(eie,XFo),e(Hu,zFo),e(Hu,pN),e(pN,WFo),e(Hu,QFo),e(x,HFo),e(x,Uu),e(Uu,oie),e(oie,UFo),e(Uu,JFo),e(Uu,uN),e(uN,YFo),e(Uu,KFo),e(x,ZFo),e(x,Ju),e(Ju,rie),e(rie,e6o),e(Ju,o6o),e(Ju,_N),e(_N,r6o),e(Ju,t6o),e(Je,a6o),e(Je,Yu),e(Yu,n6o),e(Yu,tie),e(tie,s6o),e(Yu,l6o),e(Yu,aie),e(aie,i6o),e(Je,d6o),M(Ku,Je,null),b(f,Qqe,_),b(f,Li,_),e(Li,Zu),e(Zu,nie),M(ZA,nie,null),e(Li,c6o),e(Li,sie),e(sie,f6o),b(f,Hqe,_),b(f,xo,_),M(ey,xo,null),e(xo,m6o),e(xo,xi),e(xi,g6o),e(xi,bN),e(bN,h6o),e(xi,p6o),e(xi,vN),e(vN,u6o),e(xi,_6o),e(xo,b6o),e(xo,oy),e(oy,v6o),e(oy,lie),e(lie,F6o),e(oy,T6o),e(xo,M6o),e(xo,at),M(ry,at,null),e(at,E6o),e(at,iie),e(iie,C6o),e(at,w6o),e(at,$i),e($i,A6o),e($i,die),e(die,y6o),e($i,L6o),e($i,FN),e(FN,x6o),e($i,$6o),e(at,k6o),M(e_,at,null),e(xo,S6o),e(xo,Ye),M(ty,Ye,null),e(Ye,R6o),e(Ye,cie),e(cie,P6o),e(Ye,B6o),e(Ye,xa),e(xa,I6o),e(xa,fie),e(fie,q6o),e(xa,N6o),e(xa,mie),e(mie,j6o),e(xa,D6o),e(xa,gie),e(gie,G6o),e(xa,O6o),e(Ye,V6o),e(Ye,G),e(G,o_),e(o_,hie),e(hie,X6o),e(o_,z6o),e(o_,TN),e(TN,W6o),e(o_,Q6o),e(G,H6o),e(G,r_),e(r_,pie),e(pie,U6o),e(r_,J6o),e(r_,MN),e(MN,Y6o),e(r_,K6o),e(G,Z6o),e(G,t_),e(t_,uie),e(uie,eTo),e(t_,oTo),e(t_,EN),e(EN,rTo),e(t_,tTo),e(G,aTo),e(G,a_),e(a_,_ie),e(_ie,nTo),e(a_,sTo),e(a_,CN),e(CN,lTo),e(a_,iTo),e(G,dTo),e(G,n_),e(n_,bie),e(bie,cTo),e(n_,fTo),e(n_,wN),e(wN,mTo),e(n_,gTo),e(G,hTo),e(G,s_),e(s_,vie),e(vie,pTo),e(s_,uTo),e(s_,AN),e(AN,_To),e(s_,bTo),e(G,vTo),e(G,l_),e(l_,Fie),e(Fie,FTo),e(l_,TTo),e(l_,yN),e(yN,MTo),e(l_,ETo),e(G,CTo),e(G,i_),e(i_,Tie),e(Tie,wTo),e(i_,ATo),e(i_,LN),e(LN,yTo),e(i_,LTo),e(G,xTo),e(G,d_),e(d_,Mie),e(Mie,$To),e(d_,kTo),e(d_,xN),e(xN,STo),e(d_,RTo),e(G,PTo),e(G,c_),e(c_,Eie),e(Eie,BTo),e(c_,ITo),e(c_,$N),e($N,qTo),e(c_,NTo),e(G,jTo),e(G,f_),e(f_,Cie),e(Cie,DTo),e(f_,GTo),e(f_,kN),e(kN,OTo),e(f_,VTo),e(G,XTo),e(G,m_),e(m_,wie),e(wie,zTo),e(m_,WTo),e(m_,SN),e(SN,QTo),e(m_,HTo),e(G,UTo),e(G,g_),e(g_,Aie),e(Aie,JTo),e(g_,YTo),e(g_,RN),e(RN,KTo),e(g_,ZTo),e(G,e7o),e(G,h_),e(h_,yie),e(yie,o7o),e(h_,r7o),e(h_,PN),e(PN,t7o),e(h_,a7o),e(G,n7o),e(G,p_),e(p_,Lie),e(Lie,s7o),e(p_,l7o),e(p_,BN),e(BN,i7o),e(p_,d7o),e(G,c7o),e(G,u_),e(u_,xie),e(xie,f7o),e(u_,m7o),e(u_,IN),e(IN,g7o),e(u_,h7o),e(G,p7o),e(G,__),e(__,$ie),e($ie,u7o),e(__,_7o),e(__,qN),e(qN,b7o),e(__,v7o),e(G,F7o),e(G,b_),e(b_,kie),e(kie,T7o),e(b_,M7o),e(b_,NN),e(NN,E7o),e(b_,C7o),e(G,w7o),e(G,v_),e(v_,Sie),e(Sie,A7o),e(v_,y7o),e(v_,jN),e(jN,L7o),e(v_,x7o),e(G,$7o),e(G,F_),e(F_,Rie),e(Rie,k7o),e(F_,S7o),e(F_,DN),e(DN,R7o),e(F_,P7o),e(G,B7o),e(G,T_),e(T_,Pie),e(Pie,I7o),e(T_,q7o),e(T_,GN),e(GN,N7o),e(T_,j7o),e(G,D7o),e(G,M_),e(M_,Bie),e(Bie,G7o),e(M_,O7o),e(M_,ON),e(ON,V7o),e(M_,X7o),e(G,z7o),e(G,E_),e(E_,Iie),e(Iie,W7o),e(E_,Q7o),e(E_,VN),e(VN,H7o),e(E_,U7o),e(G,J7o),e(G,C_),e(C_,qie),e(qie,Y7o),e(C_,K7o),e(C_,XN),e(XN,Z7o),e(C_,eMo),e(G,oMo),e(G,w_),e(w_,Nie),e(Nie,rMo),e(w_,tMo),e(w_,zN),e(zN,aMo),e(w_,nMo),e(G,sMo),e(G,A_),e(A_,jie),e(jie,lMo),e(A_,iMo),e(A_,WN),e(WN,dMo),e(A_,cMo),e(G,fMo),e(G,y_),e(y_,Die),e(Die,mMo),e(y_,gMo),e(y_,QN),e(QN,hMo),e(y_,pMo),e(G,uMo),e(G,L_),e(L_,Gie),e(Gie,_Mo),e(L_,bMo),e(L_,HN),e(HN,vMo),e(L_,FMo),e(G,TMo),e(G,x_),e(x_,Oie),e(Oie,MMo),e(x_,EMo),e(x_,UN),e(UN,CMo),e(x_,wMo),e(G,AMo),e(G,$_),e($_,Vie),e(Vie,yMo),e($_,LMo),e($_,JN),e(JN,xMo),e($_,$Mo),e(G,kMo),e(G,k_),e(k_,Xie),e(Xie,SMo),e(k_,RMo),e(k_,YN),e(YN,PMo),e(k_,BMo),e(G,IMo),e(G,S_),e(S_,zie),e(zie,qMo),e(S_,NMo),e(S_,KN),e(KN,jMo),e(S_,DMo),e(G,GMo),e(G,R_),e(R_,Wie),e(Wie,OMo),e(R_,VMo),e(R_,ZN),e(ZN,XMo),e(R_,zMo),e(G,WMo),e(G,P_),e(P_,Qie),e(Qie,QMo),e(P_,HMo),e(P_,ej),e(ej,UMo),e(P_,JMo),e(G,YMo),e(G,B_),e(B_,Hie),e(Hie,KMo),e(B_,ZMo),e(B_,oj),e(oj,e4o),e(B_,o4o),e(G,r4o),e(G,I_),e(I_,Uie),e(Uie,t4o),e(I_,a4o),e(I_,rj),e(rj,n4o),e(I_,s4o),e(G,l4o),e(G,q_),e(q_,Jie),e(Jie,i4o),e(q_,d4o),e(q_,tj),e(tj,c4o),e(q_,f4o),e(G,m4o),e(G,N_),e(N_,Yie),e(Yie,g4o),e(N_,h4o),e(N_,aj),e(aj,p4o),e(N_,u4o),e(G,_4o),e(G,j_),e(j_,Kie),e(Kie,b4o),e(j_,v4o),e(j_,nj),e(nj,F4o),e(j_,T4o),e(G,M4o),e(G,D_),e(D_,Zie),e(Zie,E4o),e(D_,C4o),e(D_,sj),e(sj,w4o),e(D_,A4o),e(G,y4o),e(G,G_),e(G_,ede),e(ede,L4o),e(G_,x4o),e(G_,lj),e(lj,$4o),e(G_,k4o),e(G,S4o),e(G,O_),e(O_,ode),e(ode,R4o),e(O_,P4o),e(O_,ij),e(ij,B4o),e(O_,I4o),e(Ye,q4o),e(Ye,V_),e(V_,N4o),e(V_,rde),e(rde,j4o),e(V_,D4o),e(V_,tde),e(tde,G4o),e(Ye,O4o),M(X_,Ye,null),b(f,Uqe,_),b(f,ki,_),e(ki,z_),e(z_,ade),M(ay,ade,null),e(ki,V4o),e(ki,nde),e(nde,X4o),b(f,Jqe,_),b(f,$o,_),M(ny,$o,null),e($o,z4o),e($o,Si),e(Si,W4o),e(Si,dj),e(dj,Q4o),e(Si,H4o),e(Si,cj),e(cj,U4o),e(Si,J4o),e($o,Y4o),e($o,sy),e(sy,K4o),e(sy,sde),e(sde,Z4o),e(sy,eEo),e($o,oEo),e($o,nt),M(ly,nt,null),e(nt,rEo),e(nt,lde),e(lde,tEo),e(nt,aEo),e(nt,Ri),e(Ri,nEo),e(Ri,ide),e(ide,sEo),e(Ri,lEo),e(Ri,fj),e(fj,iEo),e(Ri,dEo),e(nt,cEo),M(W_,nt,null),e($o,fEo),e($o,Ke),M(iy,Ke,null),e(Ke,mEo),e(Ke,dde),e(dde,gEo),e(Ke,hEo),e(Ke,$a),e($a,pEo),e($a,cde),e(cde,uEo),e($a,_Eo),e($a,fde),e(fde,bEo),e($a,vEo),e($a,mde),e(mde,FEo),e($a,TEo),e(Ke,MEo),e(Ke,z),e(z,Q_),e(Q_,gde),e(gde,EEo),e(Q_,CEo),e(Q_,mj),e(mj,wEo),e(Q_,AEo),e(z,yEo),e(z,H_),e(H_,hde),e(hde,LEo),e(H_,xEo),e(H_,gj),e(gj,$Eo),e(H_,kEo),e(z,SEo),e(z,U_),e(U_,pde),e(pde,REo),e(U_,PEo),e(U_,hj),e(hj,BEo),e(U_,IEo),e(z,qEo),e(z,J_),e(J_,ude),e(ude,NEo),e(J_,jEo),e(J_,pj),e(pj,DEo),e(J_,GEo),e(z,OEo),e(z,Y_),e(Y_,_de),e(_de,VEo),e(Y_,XEo),e(Y_,uj),e(uj,zEo),e(Y_,WEo),e(z,QEo),e(z,K_),e(K_,bde),e(bde,HEo),e(K_,UEo),e(K_,_j),e(_j,JEo),e(K_,YEo),e(z,KEo),e(z,Z_),e(Z_,vde),e(vde,ZEo),e(Z_,eCo),e(Z_,bj),e(bj,oCo),e(Z_,rCo),e(z,tCo),e(z,e0),e(e0,Fde),e(Fde,aCo),e(e0,nCo),e(e0,vj),e(vj,sCo),e(e0,lCo),e(z,iCo),e(z,o0),e(o0,Tde),e(Tde,dCo),e(o0,cCo),e(o0,Fj),e(Fj,fCo),e(o0,mCo),e(z,gCo),e(z,r0),e(r0,Mde),e(Mde,hCo),e(r0,pCo),e(r0,Tj),e(Tj,uCo),e(r0,_Co),e(z,bCo),e(z,t0),e(t0,Ede),e(Ede,vCo),e(t0,FCo),e(t0,Mj),e(Mj,TCo),e(t0,MCo),e(z,ECo),e(z,a0),e(a0,Cde),e(Cde,CCo),e(a0,wCo),e(a0,Ej),e(Ej,ACo),e(a0,yCo),e(z,LCo),e(z,n0),e(n0,wde),e(wde,xCo),e(n0,$Co),e(n0,Cj),e(Cj,kCo),e(n0,SCo),e(z,RCo),e(z,s0),e(s0,Ade),e(Ade,PCo),e(s0,BCo),e(s0,wj),e(wj,ICo),e(s0,qCo),e(z,NCo),e(z,l0),e(l0,yde),e(yde,jCo),e(l0,DCo),e(l0,Aj),e(Aj,GCo),e(l0,OCo),e(z,VCo),e(z,i0),e(i0,Lde),e(Lde,XCo),e(i0,zCo),e(i0,yj),e(yj,WCo),e(i0,QCo),e(z,HCo),e(z,d0),e(d0,xde),e(xde,UCo),e(d0,JCo),e(d0,Lj),e(Lj,YCo),e(d0,KCo),e(z,ZCo),e(z,c0),e(c0,$de),e($de,e5o),e(c0,o5o),e(c0,xj),e(xj,r5o),e(c0,t5o),e(z,a5o),e(z,f0),e(f0,kde),e(kde,n5o),e(f0,s5o),e(f0,$j),e($j,l5o),e(f0,i5o),e(z,d5o),e(z,m0),e(m0,Sde),e(Sde,c5o),e(m0,f5o),e(m0,kj),e(kj,m5o),e(m0,g5o),e(z,h5o),e(z,g0),e(g0,Rde),e(Rde,p5o),e(g0,u5o),e(g0,Sj),e(Sj,_5o),e(g0,b5o),e(z,v5o),e(z,h0),e(h0,Pde),e(Pde,F5o),e(h0,T5o),e(h0,Rj),e(Rj,M5o),e(h0,E5o),e(z,C5o),e(z,p0),e(p0,Bde),e(Bde,w5o),e(p0,A5o),e(p0,Pj),e(Pj,y5o),e(p0,L5o),e(z,x5o),e(z,u0),e(u0,Ide),e(Ide,$5o),e(u0,k5o),e(u0,Bj),e(Bj,S5o),e(u0,R5o),e(z,P5o),e(z,_0),e(_0,qde),e(qde,B5o),e(_0,I5o),e(_0,Ij),e(Ij,q5o),e(_0,N5o),e(z,j5o),e(z,b0),e(b0,Nde),e(Nde,D5o),e(b0,G5o),e(b0,qj),e(qj,O5o),e(b0,V5o),e(z,X5o),e(z,v0),e(v0,jde),e(jde,z5o),e(v0,W5o),e(v0,Nj),e(Nj,Q5o),e(v0,H5o),e(z,U5o),e(z,F0),e(F0,Dde),e(Dde,J5o),e(F0,Y5o),e(F0,jj),e(jj,K5o),e(F0,Z5o),e(z,e3o),e(z,T0),e(T0,Gde),e(Gde,o3o),e(T0,r3o),e(T0,Dj),e(Dj,t3o),e(T0,a3o),e(z,n3o),e(z,M0),e(M0,Ode),e(Ode,s3o),e(M0,l3o),e(M0,Gj),e(Gj,i3o),e(M0,d3o),e(z,c3o),e(z,E0),e(E0,Vde),e(Vde,f3o),e(E0,m3o),e(E0,Oj),e(Oj,g3o),e(E0,h3o),e(z,p3o),e(z,C0),e(C0,Xde),e(Xde,u3o),e(C0,_3o),e(C0,Vj),e(Vj,b3o),e(C0,v3o),e(z,F3o),e(z,w0),e(w0,zde),e(zde,T3o),e(w0,M3o),e(w0,Xj),e(Xj,E3o),e(w0,C3o),e(z,w3o),e(z,A0),e(A0,Wde),e(Wde,A3o),e(A0,y3o),e(A0,zj),e(zj,L3o),e(A0,x3o),e(z,$3o),e(z,y0),e(y0,Qde),e(Qde,k3o),e(y0,S3o),e(y0,Wj),e(Wj,R3o),e(y0,P3o),e(z,B3o),e(z,L0),e(L0,Hde),e(Hde,I3o),e(L0,q3o),e(L0,Qj),e(Qj,N3o),e(L0,j3o),e(Ke,D3o),e(Ke,x0),e(x0,G3o),e(x0,Ude),e(Ude,O3o),e(x0,V3o),e(x0,Jde),e(Jde,X3o),e(Ke,z3o),M($0,Ke,null),b(f,Yqe,_),b(f,Pi,_),e(Pi,k0),e(k0,Yde),M(dy,Yde,null),e(Pi,W3o),e(Pi,Kde),e(Kde,Q3o),b(f,Kqe,_),b(f,ko,_),M(cy,ko,null),e(ko,H3o),e(ko,Bi),e(Bi,U3o),e(Bi,Hj),e(Hj,J3o),e(Bi,Y3o),e(Bi,Uj),e(Uj,K3o),e(Bi,Z3o),e(ko,ewo),e(ko,fy),e(fy,owo),e(fy,Zde),e(Zde,rwo),e(fy,two),e(ko,awo),e(ko,st),M(my,st,null),e(st,nwo),e(st,ece),e(ece,swo),e(st,lwo),e(st,Ii),e(Ii,iwo),e(Ii,oce),e(oce,dwo),e(Ii,cwo),e(Ii,Jj),e(Jj,fwo),e(Ii,mwo),e(st,gwo),M(S0,st,null),e(ko,hwo),e(ko,Ze),M(gy,Ze,null),e(Ze,pwo),e(Ze,rce),e(rce,uwo),e(Ze,_wo),e(Ze,ka),e(ka,bwo),e(ka,tce),e(tce,vwo),e(ka,Fwo),e(ka,ace),e(ace,Two),e(ka,Mwo),e(ka,nce),e(nce,Ewo),e(ka,Cwo),e(Ze,wwo),e(Ze,W),e(W,R0),e(R0,sce),e(sce,Awo),e(R0,ywo),e(R0,Yj),e(Yj,Lwo),e(R0,xwo),e(W,$wo),e(W,P0),e(P0,lce),e(lce,kwo),e(P0,Swo),e(P0,Kj),e(Kj,Rwo),e(P0,Pwo),e(W,Bwo),e(W,B0),e(B0,ice),e(ice,Iwo),e(B0,qwo),e(B0,Zj),e(Zj,Nwo),e(B0,jwo),e(W,Dwo),e(W,I0),e(I0,dce),e(dce,Gwo),e(I0,Owo),e(I0,eD),e(eD,Vwo),e(I0,Xwo),e(W,zwo),e(W,q0),e(q0,cce),e(cce,Wwo),e(q0,Qwo),e(q0,oD),e(oD,Hwo),e(q0,Uwo),e(W,Jwo),e(W,N0),e(N0,fce),e(fce,Ywo),e(N0,Kwo),e(N0,rD),e(rD,Zwo),e(N0,eAo),e(W,oAo),e(W,j0),e(j0,mce),e(mce,rAo),e(j0,tAo),e(j0,tD),e(tD,aAo),e(j0,nAo),e(W,sAo),e(W,D0),e(D0,gce),e(gce,lAo),e(D0,iAo),e(D0,aD),e(aD,dAo),e(D0,cAo),e(W,fAo),e(W,G0),e(G0,hce),e(hce,mAo),e(G0,gAo),e(G0,nD),e(nD,hAo),e(G0,pAo),e(W,uAo),e(W,O0),e(O0,pce),e(pce,_Ao),e(O0,bAo),e(O0,sD),e(sD,vAo),e(O0,FAo),e(W,TAo),e(W,V0),e(V0,uce),e(uce,MAo),e(V0,EAo),e(V0,lD),e(lD,CAo),e(V0,wAo),e(W,AAo),e(W,X0),e(X0,_ce),e(_ce,yAo),e(X0,LAo),e(X0,iD),e(iD,xAo),e(X0,$Ao),e(W,kAo),e(W,z0),e(z0,bce),e(bce,SAo),e(z0,RAo),e(z0,dD),e(dD,PAo),e(z0,BAo),e(W,IAo),e(W,W0),e(W0,vce),e(vce,qAo),e(W0,NAo),e(W0,cD),e(cD,jAo),e(W0,DAo),e(W,GAo),e(W,Q0),e(Q0,Fce),e(Fce,OAo),e(Q0,VAo),e(Q0,fD),e(fD,XAo),e(Q0,zAo),e(W,WAo),e(W,H0),e(H0,Tce),e(Tce,QAo),e(H0,HAo),e(H0,mD),e(mD,UAo),e(H0,JAo),e(W,YAo),e(W,U0),e(U0,Mce),e(Mce,KAo),e(U0,ZAo),e(U0,gD),e(gD,eyo),e(U0,oyo),e(W,ryo),e(W,J0),e(J0,Ece),e(Ece,tyo),e(J0,ayo),e(J0,hD),e(hD,nyo),e(J0,syo),e(W,lyo),e(W,Y0),e(Y0,Cce),e(Cce,iyo),e(Y0,dyo),e(Y0,pD),e(pD,cyo),e(Y0,fyo),e(W,myo),e(W,K0),e(K0,wce),e(wce,gyo),e(K0,hyo),e(K0,uD),e(uD,pyo),e(K0,uyo),e(W,_yo),e(W,Z0),e(Z0,Ace),e(Ace,byo),e(Z0,vyo),e(Z0,_D),e(_D,Fyo),e(Z0,Tyo),e(W,Myo),e(W,e1),e(e1,yce),e(yce,Eyo),e(e1,Cyo),e(e1,bD),e(bD,wyo),e(e1,Ayo),e(W,yyo),e(W,o1),e(o1,Lce),e(Lce,Lyo),e(o1,xyo),e(o1,vD),e(vD,$yo),e(o1,kyo),e(W,Syo),e(W,r1),e(r1,xce),e(xce,Ryo),e(r1,Pyo),e(r1,FD),e(FD,Byo),e(r1,Iyo),e(W,qyo),e(W,t1),e(t1,$ce),e($ce,Nyo),e(t1,jyo),e(t1,TD),e(TD,Dyo),e(t1,Gyo),e(W,Oyo),e(W,a1),e(a1,kce),e(kce,Vyo),e(a1,Xyo),e(a1,MD),e(MD,zyo),e(a1,Wyo),e(W,Qyo),e(W,n1),e(n1,Sce),e(Sce,Hyo),e(n1,Uyo),e(n1,ED),e(ED,Jyo),e(n1,Yyo),e(W,Kyo),e(W,s1),e(s1,Rce),e(Rce,Zyo),e(s1,eLo),e(s1,CD),e(CD,oLo),e(s1,rLo),e(W,tLo),e(W,l1),e(l1,Pce),e(Pce,aLo),e(l1,nLo),e(l1,wD),e(wD,sLo),e(l1,lLo),e(W,iLo),e(W,i1),e(i1,Bce),e(Bce,dLo),e(i1,cLo),e(i1,AD),e(AD,fLo),e(i1,mLo),e(W,gLo),e(W,d1),e(d1,Ice),e(Ice,hLo),e(d1,pLo),e(d1,qce),e(qce,uLo),e(d1,_Lo),e(W,bLo),e(W,c1),e(c1,Nce),e(Nce,vLo),e(c1,FLo),e(c1,yD),e(yD,TLo),e(c1,MLo),e(W,ELo),e(W,f1),e(f1,jce),e(jce,CLo),e(f1,wLo),e(f1,LD),e(LD,ALo),e(f1,yLo),e(W,LLo),e(W,m1),e(m1,Dce),e(Dce,xLo),e(m1,$Lo),e(m1,xD),e(xD,kLo),e(m1,SLo),e(W,RLo),e(W,g1),e(g1,Gce),e(Gce,PLo),e(g1,BLo),e(g1,$D),e($D,ILo),e(g1,qLo),e(Ze,NLo),e(Ze,h1),e(h1,jLo),e(h1,Oce),e(Oce,DLo),e(h1,GLo),e(h1,Vce),e(Vce,OLo),e(Ze,VLo),M(p1,Ze,null),b(f,Zqe,_),b(f,qi,_),e(qi,u1),e(u1,Xce),M(hy,Xce,null),e(qi,XLo),e(qi,zce),e(zce,zLo),b(f,eNe,_),b(f,So,_),M(py,So,null),e(So,WLo),e(So,Ni),e(Ni,QLo),e(Ni,kD),e(kD,HLo),e(Ni,ULo),e(Ni,SD),e(SD,JLo),e(Ni,YLo),e(So,KLo),e(So,uy),e(uy,ZLo),e(uy,Wce),e(Wce,e8o),e(uy,o8o),e(So,r8o),e(So,lt),M(_y,lt,null),e(lt,t8o),e(lt,Qce),e(Qce,a8o),e(lt,n8o),e(lt,ji),e(ji,s8o),e(ji,Hce),e(Hce,l8o),e(ji,i8o),e(ji,RD),e(RD,d8o),e(ji,c8o),e(lt,f8o),M(_1,lt,null),e(So,m8o),e(So,eo),M(by,eo,null),e(eo,g8o),e(eo,Uce),e(Uce,h8o),e(eo,p8o),e(eo,Sa),e(Sa,u8o),e(Sa,Jce),e(Jce,_8o),e(Sa,b8o),e(Sa,Yce),e(Yce,v8o),e(Sa,F8o),e(Sa,Kce),e(Kce,T8o),e(Sa,M8o),e(eo,E8o),e(eo,ue),e(ue,b1),e(b1,Zce),e(Zce,C8o),e(b1,w8o),e(b1,PD),e(PD,A8o),e(b1,y8o),e(ue,L8o),e(ue,v1),e(v1,efe),e(efe,x8o),e(v1,$8o),e(v1,BD),e(BD,k8o),e(v1,S8o),e(ue,R8o),e(ue,F1),e(F1,ofe),e(ofe,P8o),e(F1,B8o),e(F1,ID),e(ID,I8o),e(F1,q8o),e(ue,N8o),e(ue,T1),e(T1,rfe),e(rfe,j8o),e(T1,D8o),e(T1,qD),e(qD,G8o),e(T1,O8o),e(ue,V8o),e(ue,M1),e(M1,tfe),e(tfe,X8o),e(M1,z8o),e(M1,ND),e(ND,W8o),e(M1,Q8o),e(ue,H8o),e(ue,E1),e(E1,afe),e(afe,U8o),e(E1,J8o),e(E1,jD),e(jD,Y8o),e(E1,K8o),e(ue,Z8o),e(ue,C1),e(C1,nfe),e(nfe,e9o),e(C1,o9o),e(C1,DD),e(DD,r9o),e(C1,t9o),e(ue,a9o),e(ue,w1),e(w1,sfe),e(sfe,n9o),e(w1,s9o),e(w1,GD),e(GD,l9o),e(w1,i9o),e(ue,d9o),e(ue,A1),e(A1,lfe),e(lfe,c9o),e(A1,f9o),e(A1,OD),e(OD,m9o),e(A1,g9o),e(ue,h9o),e(ue,y1),e(y1,ife),e(ife,p9o),e(y1,u9o),e(y1,VD),e(VD,_9o),e(y1,b9o),e(ue,v9o),e(ue,L1),e(L1,dfe),e(dfe,F9o),e(L1,T9o),e(L1,XD),e(XD,M9o),e(L1,E9o),e(ue,C9o),e(ue,x1),e(x1,cfe),e(cfe,w9o),e(x1,A9o),e(x1,zD),e(zD,y9o),e(x1,L9o),e(ue,x9o),e(ue,$1),e($1,ffe),e(ffe,$9o),e($1,k9o),e($1,WD),e(WD,S9o),e($1,R9o),e(ue,P9o),e(ue,k1),e(k1,mfe),e(mfe,B9o),e(k1,I9o),e(k1,QD),e(QD,q9o),e(k1,N9o),e(ue,j9o),e(ue,S1),e(S1,gfe),e(gfe,D9o),e(S1,G9o),e(S1,HD),e(HD,O9o),e(S1,V9o),e(ue,X9o),e(ue,R1),e(R1,hfe),e(hfe,z9o),e(R1,W9o),e(R1,UD),e(UD,Q9o),e(R1,H9o),e(eo,U9o),e(eo,P1),e(P1,J9o),e(P1,pfe),e(pfe,Y9o),e(P1,K9o),e(P1,ufe),e(ufe,Z9o),e(eo,exo),M(B1,eo,null),b(f,oNe,_),b(f,Di,_),e(Di,I1),e(I1,_fe),M(vy,_fe,null),e(Di,oxo),e(Di,bfe),e(bfe,rxo),b(f,rNe,_),b(f,Ro,_),M(Fy,Ro,null),e(Ro,txo),e(Ro,Gi),e(Gi,axo),e(Gi,JD),e(JD,nxo),e(Gi,sxo),e(Gi,YD),e(YD,lxo),e(Gi,ixo),e(Ro,dxo),e(Ro,Ty),e(Ty,cxo),e(Ty,vfe),e(vfe,fxo),e(Ty,mxo),e(Ro,gxo),e(Ro,it),M(My,it,null),e(it,hxo),e(it,Ffe),e(Ffe,pxo),e(it,uxo),e(it,Oi),e(Oi,_xo),e(Oi,Tfe),e(Tfe,bxo),e(Oi,vxo),e(Oi,KD),e(KD,Fxo),e(Oi,Txo),e(it,Mxo),M(q1,it,null),e(Ro,Exo),e(Ro,oo),M(Ey,oo,null),e(oo,Cxo),e(oo,Mfe),e(Mfe,wxo),e(oo,Axo),e(oo,Ra),e(Ra,yxo),e(Ra,Efe),e(Efe,Lxo),e(Ra,xxo),e(Ra,Cfe),e(Cfe,$xo),e(Ra,kxo),e(Ra,wfe),e(wfe,Sxo),e(Ra,Rxo),e(oo,Pxo),e(oo,q),e(q,N1),e(N1,Afe),e(Afe,Bxo),e(N1,Ixo),e(N1,ZD),e(ZD,qxo),e(N1,Nxo),e(q,jxo),e(q,j1),e(j1,yfe),e(yfe,Dxo),e(j1,Gxo),e(j1,eG),e(eG,Oxo),e(j1,Vxo),e(q,Xxo),e(q,D1),e(D1,Lfe),e(Lfe,zxo),e(D1,Wxo),e(D1,oG),e(oG,Qxo),e(D1,Hxo),e(q,Uxo),e(q,G1),e(G1,xfe),e(xfe,Jxo),e(G1,Yxo),e(G1,rG),e(rG,Kxo),e(G1,Zxo),e(q,e$o),e(q,O1),e(O1,$fe),e($fe,o$o),e(O1,r$o),e(O1,tG),e(tG,t$o),e(O1,a$o),e(q,n$o),e(q,V1),e(V1,kfe),e(kfe,s$o),e(V1,l$o),e(V1,aG),e(aG,i$o),e(V1,d$o),e(q,c$o),e(q,X1),e(X1,Sfe),e(Sfe,f$o),e(X1,m$o),e(X1,nG),e(nG,g$o),e(X1,h$o),e(q,p$o),e(q,z1),e(z1,Rfe),e(Rfe,u$o),e(z1,_$o),e(z1,sG),e(sG,b$o),e(z1,v$o),e(q,F$o),e(q,W1),e(W1,Pfe),e(Pfe,T$o),e(W1,M$o),e(W1,lG),e(lG,E$o),e(W1,C$o),e(q,w$o),e(q,Q1),e(Q1,Bfe),e(Bfe,A$o),e(Q1,y$o),e(Q1,iG),e(iG,L$o),e(Q1,x$o),e(q,$$o),e(q,H1),e(H1,Ife),e(Ife,k$o),e(H1,S$o),e(H1,dG),e(dG,R$o),e(H1,P$o),e(q,B$o),e(q,U1),e(U1,qfe),e(qfe,I$o),e(U1,q$o),e(U1,cG),e(cG,N$o),e(U1,j$o),e(q,D$o),e(q,J1),e(J1,Nfe),e(Nfe,G$o),e(J1,O$o),e(J1,fG),e(fG,V$o),e(J1,X$o),e(q,z$o),e(q,Y1),e(Y1,jfe),e(jfe,W$o),e(Y1,Q$o),e(Y1,mG),e(mG,H$o),e(Y1,U$o),e(q,J$o),e(q,K1),e(K1,Dfe),e(Dfe,Y$o),e(K1,K$o),e(K1,gG),e(gG,Z$o),e(K1,eko),e(q,oko),e(q,Z1),e(Z1,Gfe),e(Gfe,rko),e(Z1,tko),e(Z1,hG),e(hG,ako),e(Z1,nko),e(q,sko),e(q,eb),e(eb,Ofe),e(Ofe,lko),e(eb,iko),e(eb,pG),e(pG,dko),e(eb,cko),e(q,fko),e(q,ob),e(ob,Vfe),e(Vfe,mko),e(ob,gko),e(ob,uG),e(uG,hko),e(ob,pko),e(q,uko),e(q,rb),e(rb,Xfe),e(Xfe,_ko),e(rb,bko),e(rb,_G),e(_G,vko),e(rb,Fko),e(q,Tko),e(q,tb),e(tb,zfe),e(zfe,Mko),e(tb,Eko),e(tb,bG),e(bG,Cko),e(tb,wko),e(q,Ako),e(q,ab),e(ab,Wfe),e(Wfe,yko),e(ab,Lko),e(ab,vG),e(vG,xko),e(ab,$ko),e(q,kko),e(q,nb),e(nb,Qfe),e(Qfe,Sko),e(nb,Rko),e(nb,FG),e(FG,Pko),e(nb,Bko),e(q,Iko),e(q,sb),e(sb,Hfe),e(Hfe,qko),e(sb,Nko),e(sb,TG),e(TG,jko),e(sb,Dko),e(q,Gko),e(q,lb),e(lb,Ufe),e(Ufe,Oko),e(lb,Vko),e(lb,MG),e(MG,Xko),e(lb,zko),e(q,Wko),e(q,ib),e(ib,Jfe),e(Jfe,Qko),e(ib,Hko),e(ib,EG),e(EG,Uko),e(ib,Jko),e(q,Yko),e(q,db),e(db,Yfe),e(Yfe,Kko),e(db,Zko),e(db,CG),e(CG,eSo),e(db,oSo),e(q,rSo),e(q,cb),e(cb,Kfe),e(Kfe,tSo),e(cb,aSo),e(cb,wG),e(wG,nSo),e(cb,sSo),e(q,lSo),e(q,fb),e(fb,Zfe),e(Zfe,iSo),e(fb,dSo),e(fb,AG),e(AG,cSo),e(fb,fSo),e(q,mSo),e(q,mb),e(mb,eme),e(eme,gSo),e(mb,hSo),e(mb,yG),e(yG,pSo),e(mb,uSo),e(q,_So),e(q,gb),e(gb,ome),e(ome,bSo),e(gb,vSo),e(gb,LG),e(LG,FSo),e(gb,TSo),e(q,MSo),e(q,hb),e(hb,rme),e(rme,ESo),e(hb,CSo),e(hb,xG),e(xG,wSo),e(hb,ASo),e(q,ySo),e(q,pb),e(pb,tme),e(tme,LSo),e(pb,xSo),e(pb,$G),e($G,$So),e(pb,kSo),e(q,SSo),e(q,ub),e(ub,ame),e(ame,RSo),e(ub,PSo),e(ub,kG),e(kG,BSo),e(ub,ISo),e(q,qSo),e(q,_b),e(_b,nme),e(nme,NSo),e(_b,jSo),e(_b,SG),e(SG,DSo),e(_b,GSo),e(q,OSo),e(q,bb),e(bb,sme),e(sme,VSo),e(bb,XSo),e(bb,RG),e(RG,zSo),e(bb,WSo),e(q,QSo),e(q,vb),e(vb,lme),e(lme,HSo),e(vb,USo),e(vb,PG),e(PG,JSo),e(vb,YSo),e(q,KSo),e(q,Fb),e(Fb,ime),e(ime,ZSo),e(Fb,eRo),e(Fb,BG),e(BG,oRo),e(Fb,rRo),e(q,tRo),e(q,Tb),e(Tb,dme),e(dme,aRo),e(Tb,nRo),e(Tb,IG),e(IG,sRo),e(Tb,lRo),e(q,iRo),e(q,Mb),e(Mb,cme),e(cme,dRo),e(Mb,cRo),e(Mb,qG),e(qG,fRo),e(Mb,mRo),e(q,gRo),e(q,Eb),e(Eb,fme),e(fme,hRo),e(Eb,pRo),e(Eb,NG),e(NG,uRo),e(Eb,_Ro),e(q,bRo),e(q,Cb),e(Cb,mme),e(mme,vRo),e(Cb,FRo),e(Cb,jG),e(jG,TRo),e(Cb,MRo),e(q,ERo),e(q,wb),e(wb,gme),e(gme,CRo),e(wb,wRo),e(wb,DG),e(DG,ARo),e(wb,yRo),e(q,LRo),e(q,Ab),e(Ab,hme),e(hme,xRo),e(Ab,$Ro),e(Ab,GG),e(GG,kRo),e(Ab,SRo),e(q,RRo),e(q,yb),e(yb,pme),e(pme,PRo),e(yb,BRo),e(yb,OG),e(OG,IRo),e(yb,qRo),e(q,NRo),e(q,Lb),e(Lb,ume),e(ume,jRo),e(Lb,DRo),e(Lb,VG),e(VG,GRo),e(Lb,ORo),e(q,VRo),e(q,xb),e(xb,_me),e(_me,XRo),e(xb,zRo),e(xb,XG),e(XG,WRo),e(xb,QRo),e(q,HRo),e(q,$b),e($b,bme),e(bme,URo),e($b,JRo),e($b,zG),e(zG,YRo),e($b,KRo),e(oo,ZRo),e(oo,kb),e(kb,ePo),e(kb,vme),e(vme,oPo),e(kb,rPo),e(kb,Fme),e(Fme,tPo),e(oo,aPo),M(Sb,oo,null),b(f,tNe,_),b(f,Vi,_),e(Vi,Rb),e(Rb,Tme),M(Cy,Tme,null),e(Vi,nPo),e(Vi,Mme),e(Mme,sPo),b(f,aNe,_),b(f,Po,_),M(wy,Po,null),e(Po,lPo),e(Po,Xi),e(Xi,iPo),e(Xi,WG),e(WG,dPo),e(Xi,cPo),e(Xi,QG),e(QG,fPo),e(Xi,mPo),e(Po,gPo),e(Po,Ay),e(Ay,hPo),e(Ay,Eme),e(Eme,pPo),e(Ay,uPo),e(Po,_Po),e(Po,dt),M(yy,dt,null),e(dt,bPo),e(dt,Cme),e(Cme,vPo),e(dt,FPo),e(dt,zi),e(zi,TPo),e(zi,wme),e(wme,MPo),e(zi,EPo),e(zi,HG),e(HG,CPo),e(zi,wPo),e(dt,APo),M(Pb,dt,null),e(Po,yPo),e(Po,ro),M(Ly,ro,null),e(ro,LPo),e(ro,Ame),e(Ame,xPo),e(ro,$Po),e(ro,Pa),e(Pa,kPo),e(Pa,yme),e(yme,SPo),e(Pa,RPo),e(Pa,Lme),e(Lme,PPo),e(Pa,BPo),e(Pa,xme),e(xme,IPo),e(Pa,qPo),e(ro,NPo),e(ro,Y),e(Y,Bb),e(Bb,$me),e($me,jPo),e(Bb,DPo),e(Bb,UG),e(UG,GPo),e(Bb,OPo),e(Y,VPo),e(Y,Ib),e(Ib,kme),e(kme,XPo),e(Ib,zPo),e(Ib,JG),e(JG,WPo),e(Ib,QPo),e(Y,HPo),e(Y,qb),e(qb,Sme),e(Sme,UPo),e(qb,JPo),e(qb,YG),e(YG,YPo),e(qb,KPo),e(Y,ZPo),e(Y,Nb),e(Nb,Rme),e(Rme,eBo),e(Nb,oBo),e(Nb,KG),e(KG,rBo),e(Nb,tBo),e(Y,aBo),e(Y,jb),e(jb,Pme),e(Pme,nBo),e(jb,sBo),e(jb,ZG),e(ZG,lBo),e(jb,iBo),e(Y,dBo),e(Y,Db),e(Db,Bme),e(Bme,cBo),e(Db,fBo),e(Db,eO),e(eO,mBo),e(Db,gBo),e(Y,hBo),e(Y,Gb),e(Gb,Ime),e(Ime,pBo),e(Gb,uBo),e(Gb,oO),e(oO,_Bo),e(Gb,bBo),e(Y,vBo),e(Y,Ob),e(Ob,qme),e(qme,FBo),e(Ob,TBo),e(Ob,rO),e(rO,MBo),e(Ob,EBo),e(Y,CBo),e(Y,Vb),e(Vb,Nme),e(Nme,wBo),e(Vb,ABo),e(Vb,tO),e(tO,yBo),e(Vb,LBo),e(Y,xBo),e(Y,Xb),e(Xb,jme),e(jme,$Bo),e(Xb,kBo),e(Xb,aO),e(aO,SBo),e(Xb,RBo),e(Y,PBo),e(Y,zb),e(zb,Dme),e(Dme,BBo),e(zb,IBo),e(zb,nO),e(nO,qBo),e(zb,NBo),e(Y,jBo),e(Y,Wb),e(Wb,Gme),e(Gme,DBo),e(Wb,GBo),e(Wb,sO),e(sO,OBo),e(Wb,VBo),e(Y,XBo),e(Y,Qb),e(Qb,Ome),e(Ome,zBo),e(Qb,WBo),e(Qb,lO),e(lO,QBo),e(Qb,HBo),e(Y,UBo),e(Y,Hb),e(Hb,Vme),e(Vme,JBo),e(Hb,YBo),e(Hb,iO),e(iO,KBo),e(Hb,ZBo),e(Y,eIo),e(Y,Ub),e(Ub,Xme),e(Xme,oIo),e(Ub,rIo),e(Ub,dO),e(dO,tIo),e(Ub,aIo),e(Y,nIo),e(Y,Jb),e(Jb,zme),e(zme,sIo),e(Jb,lIo),e(Jb,cO),e(cO,iIo),e(Jb,dIo),e(Y,cIo),e(Y,Yb),e(Yb,Wme),e(Wme,fIo),e(Yb,mIo),e(Yb,fO),e(fO,gIo),e(Yb,hIo),e(Y,pIo),e(Y,Kb),e(Kb,Qme),e(Qme,uIo),e(Kb,_Io),e(Kb,mO),e(mO,bIo),e(Kb,vIo),e(Y,FIo),e(Y,Zb),e(Zb,Hme),e(Hme,TIo),e(Zb,MIo),e(Zb,gO),e(gO,EIo),e(Zb,CIo),e(Y,wIo),e(Y,e2),e(e2,Ume),e(Ume,AIo),e(e2,yIo),e(e2,hO),e(hO,LIo),e(e2,xIo),e(Y,$Io),e(Y,o2),e(o2,Jme),e(Jme,kIo),e(o2,SIo),e(o2,pO),e(pO,RIo),e(o2,PIo),e(Y,BIo),e(Y,r2),e(r2,Yme),e(Yme,IIo),e(r2,qIo),e(r2,uO),e(uO,NIo),e(r2,jIo),e(Y,DIo),e(Y,t2),e(t2,Kme),e(Kme,GIo),e(t2,OIo),e(t2,_O),e(_O,VIo),e(t2,XIo),e(Y,zIo),e(Y,a2),e(a2,Zme),e(Zme,WIo),e(a2,QIo),e(a2,bO),e(bO,HIo),e(a2,UIo),e(Y,JIo),e(Y,n2),e(n2,ege),e(ege,YIo),e(n2,KIo),e(n2,vO),e(vO,ZIo),e(n2,eqo),e(Y,oqo),e(Y,s2),e(s2,oge),e(oge,rqo),e(s2,tqo),e(s2,FO),e(FO,aqo),e(s2,nqo),e(Y,sqo),e(Y,l2),e(l2,rge),e(rge,lqo),e(l2,iqo),e(l2,TO),e(TO,dqo),e(l2,cqo),e(Y,fqo),e(Y,i2),e(i2,tge),e(tge,mqo),e(i2,gqo),e(i2,MO),e(MO,hqo),e(i2,pqo),e(Y,uqo),e(Y,d2),e(d2,age),e(age,_qo),e(d2,bqo),e(d2,EO),e(EO,vqo),e(d2,Fqo),e(ro,Tqo),e(ro,c2),e(c2,Mqo),e(c2,nge),e(nge,Eqo),e(c2,Cqo),e(c2,sge),e(sge,wqo),e(ro,Aqo),M(f2,ro,null),b(f,nNe,_),b(f,Wi,_),e(Wi,m2),e(m2,lge),M(xy,lge,null),e(Wi,yqo),e(Wi,ige),e(ige,Lqo),b(f,sNe,_),b(f,Bo,_),M($y,Bo,null),e(Bo,xqo),e(Bo,Qi),e(Qi,$qo),e(Qi,CO),e(CO,kqo),e(Qi,Sqo),e(Qi,wO),e(wO,Rqo),e(Qi,Pqo),e(Bo,Bqo),e(Bo,ky),e(ky,Iqo),e(ky,dge),e(dge,qqo),e(ky,Nqo),e(Bo,jqo),e(Bo,ct),M(Sy,ct,null),e(ct,Dqo),e(ct,cge),e(cge,Gqo),e(ct,Oqo),e(ct,Hi),e(Hi,Vqo),e(Hi,fge),e(fge,Xqo),e(Hi,zqo),e(Hi,AO),e(AO,Wqo),e(Hi,Qqo),e(ct,Hqo),M(g2,ct,null),e(Bo,Uqo),e(Bo,to),M(Ry,to,null),e(to,Jqo),e(to,mge),e(mge,Yqo),e(to,Kqo),e(to,Ba),e(Ba,Zqo),e(Ba,gge),e(gge,eNo),e(Ba,oNo),e(Ba,hge),e(hge,rNo),e(Ba,tNo),e(Ba,pge),e(pge,aNo),e(Ba,nNo),e(to,sNo),e(to,Yr),e(Yr,h2),e(h2,uge),e(uge,lNo),e(h2,iNo),e(h2,yO),e(yO,dNo),e(h2,cNo),e(Yr,fNo),e(Yr,p2),e(p2,_ge),e(_ge,mNo),e(p2,gNo),e(p2,LO),e(LO,hNo),e(p2,pNo),e(Yr,uNo),e(Yr,u2),e(u2,bge),e(bge,_No),e(u2,bNo),e(u2,xO),e(xO,vNo),e(u2,FNo),e(Yr,TNo),e(Yr,_2),e(_2,vge),e(vge,MNo),e(_2,ENo),e(_2,$O),e($O,CNo),e(_2,wNo),e(Yr,ANo),e(Yr,b2),e(b2,Fge),e(Fge,yNo),e(b2,LNo),e(b2,kO),e(kO,xNo),e(b2,$No),e(to,kNo),e(to,v2),e(v2,SNo),e(v2,Tge),e(Tge,RNo),e(v2,PNo),e(v2,Mge),e(Mge,BNo),e(to,INo),M(F2,to,null),b(f,lNe,_),b(f,Ui,_),e(Ui,T2),e(T2,Ege),M(Py,Ege,null),e(Ui,qNo),e(Ui,Cge),e(Cge,NNo),b(f,iNe,_),b(f,Io,_),M(By,Io,null),e(Io,jNo),e(Io,Ji),e(Ji,DNo),e(Ji,SO),e(SO,GNo),e(Ji,ONo),e(Ji,RO),e(RO,VNo),e(Ji,XNo),e(Io,zNo),e(Io,Iy),e(Iy,WNo),e(Iy,wge),e(wge,QNo),e(Iy,HNo),e(Io,UNo),e(Io,ft),M(qy,ft,null),e(ft,JNo),e(ft,Age),e(Age,YNo),e(ft,KNo),e(ft,Yi),e(Yi,ZNo),e(Yi,yge),e(yge,ejo),e(Yi,ojo),e(Yi,PO),e(PO,rjo),e(Yi,tjo),e(ft,ajo),M(M2,ft,null),e(Io,njo),e(Io,ao),M(Ny,ao,null),e(ao,sjo),e(ao,Lge),e(Lge,ljo),e(ao,ijo),e(ao,Ia),e(Ia,djo),e(Ia,xge),e(xge,cjo),e(Ia,fjo),e(Ia,$ge),e($ge,mjo),e(Ia,gjo),e(Ia,kge),e(kge,hjo),e(Ia,pjo),e(ao,ujo),e(ao,H),e(H,E2),e(E2,Sge),e(Sge,_jo),e(E2,bjo),e(E2,BO),e(BO,vjo),e(E2,Fjo),e(H,Tjo),e(H,C2),e(C2,Rge),e(Rge,Mjo),e(C2,Ejo),e(C2,IO),e(IO,Cjo),e(C2,wjo),e(H,Ajo),e(H,w2),e(w2,Pge),e(Pge,yjo),e(w2,Ljo),e(w2,qO),e(qO,xjo),e(w2,$jo),e(H,kjo),e(H,A2),e(A2,Bge),e(Bge,Sjo),e(A2,Rjo),e(A2,NO),e(NO,Pjo),e(A2,Bjo),e(H,Ijo),e(H,y2),e(y2,Ige),e(Ige,qjo),e(y2,Njo),e(y2,jO),e(jO,jjo),e(y2,Djo),e(H,Gjo),e(H,L2),e(L2,qge),e(qge,Ojo),e(L2,Vjo),e(L2,DO),e(DO,Xjo),e(L2,zjo),e(H,Wjo),e(H,x2),e(x2,Nge),e(Nge,Qjo),e(x2,Hjo),e(x2,GO),e(GO,Ujo),e(x2,Jjo),e(H,Yjo),e(H,$2),e($2,jge),e(jge,Kjo),e($2,Zjo),e($2,OO),e(OO,eDo),e($2,oDo),e(H,rDo),e(H,k2),e(k2,Dge),e(Dge,tDo),e(k2,aDo),e(k2,VO),e(VO,nDo),e(k2,sDo),e(H,lDo),e(H,S2),e(S2,Gge),e(Gge,iDo),e(S2,dDo),e(S2,XO),e(XO,cDo),e(S2,fDo),e(H,mDo),e(H,R2),e(R2,Oge),e(Oge,gDo),e(R2,hDo),e(R2,zO),e(zO,pDo),e(R2,uDo),e(H,_Do),e(H,P2),e(P2,Vge),e(Vge,bDo),e(P2,vDo),e(P2,WO),e(WO,FDo),e(P2,TDo),e(H,MDo),e(H,B2),e(B2,Xge),e(Xge,EDo),e(B2,CDo),e(B2,QO),e(QO,wDo),e(B2,ADo),e(H,yDo),e(H,I2),e(I2,zge),e(zge,LDo),e(I2,xDo),e(I2,HO),e(HO,$Do),e(I2,kDo),e(H,SDo),e(H,q2),e(q2,Wge),e(Wge,RDo),e(q2,PDo),e(q2,UO),e(UO,BDo),e(q2,IDo),e(H,qDo),e(H,N2),e(N2,Qge),e(Qge,NDo),e(N2,jDo),e(N2,JO),e(JO,DDo),e(N2,GDo),e(H,ODo),e(H,j2),e(j2,Hge),e(Hge,VDo),e(j2,XDo),e(j2,YO),e(YO,zDo),e(j2,WDo),e(H,QDo),e(H,D2),e(D2,Uge),e(Uge,HDo),e(D2,UDo),e(D2,KO),e(KO,JDo),e(D2,YDo),e(H,KDo),e(H,G2),e(G2,Jge),e(Jge,ZDo),e(G2,eGo),e(G2,ZO),e(ZO,oGo),e(G2,rGo),e(H,tGo),e(H,O2),e(O2,Yge),e(Yge,aGo),e(O2,nGo),e(O2,eV),e(eV,sGo),e(O2,lGo),e(H,iGo),e(H,V2),e(V2,Kge),e(Kge,dGo),e(V2,cGo),e(V2,oV),e(oV,fGo),e(V2,mGo),e(H,gGo),e(H,X2),e(X2,Zge),e(Zge,hGo),e(X2,pGo),e(X2,rV),e(rV,uGo),e(X2,_Go),e(H,bGo),e(H,z2),e(z2,ehe),e(ehe,vGo),e(z2,FGo),e(z2,tV),e(tV,TGo),e(z2,MGo),e(H,EGo),e(H,W2),e(W2,ohe),e(ohe,CGo),e(W2,wGo),e(W2,aV),e(aV,AGo),e(W2,yGo),e(H,LGo),e(H,Q2),e(Q2,rhe),e(rhe,xGo),e(Q2,$Go),e(Q2,nV),e(nV,kGo),e(Q2,SGo),e(H,RGo),e(H,H2),e(H2,the),e(the,PGo),e(H2,BGo),e(H2,sV),e(sV,IGo),e(H2,qGo),e(H,NGo),e(H,U2),e(U2,ahe),e(ahe,jGo),e(U2,DGo),e(U2,lV),e(lV,GGo),e(U2,OGo),e(H,VGo),e(H,J2),e(J2,nhe),e(nhe,XGo),e(J2,zGo),e(J2,iV),e(iV,WGo),e(J2,QGo),e(H,HGo),e(H,Y2),e(Y2,she),e(she,UGo),e(Y2,JGo),e(Y2,dV),e(dV,YGo),e(Y2,KGo),e(H,ZGo),e(H,K2),e(K2,lhe),e(lhe,eOo),e(K2,oOo),e(K2,cV),e(cV,rOo),e(K2,tOo),e(H,aOo),e(H,Z2),e(Z2,ihe),e(ihe,nOo),e(Z2,sOo),e(Z2,fV),e(fV,lOo),e(Z2,iOo),e(H,dOo),e(H,ev),e(ev,dhe),e(dhe,cOo),e(ev,fOo),e(ev,mV),e(mV,mOo),e(ev,gOo),e(H,hOo),e(H,ov),e(ov,che),e(che,pOo),e(ov,uOo),e(ov,gV),e(gV,_Oo),e(ov,bOo),e(H,vOo),e(H,rv),e(rv,fhe),e(fhe,FOo),e(rv,TOo),e(rv,hV),e(hV,MOo),e(rv,EOo),e(ao,COo),e(ao,tv),e(tv,wOo),e(tv,mhe),e(mhe,AOo),e(tv,yOo),e(tv,ghe),e(ghe,LOo),e(ao,xOo),M(av,ao,null),b(f,dNe,_),b(f,Ki,_),e(Ki,nv),e(nv,hhe),M(jy,hhe,null),e(Ki,$Oo),e(Ki,phe),e(phe,kOo),b(f,cNe,_),b(f,qo,_),M(Dy,qo,null),e(qo,SOo),e(qo,Zi),e(Zi,ROo),e(Zi,pV),e(pV,POo),e(Zi,BOo),e(Zi,uV),e(uV,IOo),e(Zi,qOo),e(qo,NOo),e(qo,Gy),e(Gy,jOo),e(Gy,uhe),e(uhe,DOo),e(Gy,GOo),e(qo,OOo),e(qo,mt),M(Oy,mt,null),e(mt,VOo),e(mt,_he),e(_he,XOo),e(mt,zOo),e(mt,ed),e(ed,WOo),e(ed,bhe),e(bhe,QOo),e(ed,HOo),e(ed,_V),e(_V,UOo),e(ed,JOo),e(mt,YOo),M(sv,mt,null),e(qo,KOo),e(qo,no),M(Vy,no,null),e(no,ZOo),e(no,vhe),e(vhe,eVo),e(no,oVo),e(no,qa),e(qa,rVo),e(qa,Fhe),e(Fhe,tVo),e(qa,aVo),e(qa,The),e(The,nVo),e(qa,sVo),e(qa,Mhe),e(Mhe,lVo),e(qa,iVo),e(no,dVo),e(no,V),e(V,lv),e(lv,Ehe),e(Ehe,cVo),e(lv,fVo),e(lv,bV),e(bV,mVo),e(lv,gVo),e(V,hVo),e(V,iv),e(iv,Che),e(Che,pVo),e(iv,uVo),e(iv,vV),e(vV,_Vo),e(iv,bVo),e(V,vVo),e(V,dv),e(dv,whe),e(whe,FVo),e(dv,TVo),e(dv,FV),e(FV,MVo),e(dv,EVo),e(V,CVo),e(V,cv),e(cv,Ahe),e(Ahe,wVo),e(cv,AVo),e(cv,TV),e(TV,yVo),e(cv,LVo),e(V,xVo),e(V,fv),e(fv,yhe),e(yhe,$Vo),e(fv,kVo),e(fv,MV),e(MV,SVo),e(fv,RVo),e(V,PVo),e(V,mv),e(mv,Lhe),e(Lhe,BVo),e(mv,IVo),e(mv,EV),e(EV,qVo),e(mv,NVo),e(V,jVo),e(V,gv),e(gv,xhe),e(xhe,DVo),e(gv,GVo),e(gv,CV),e(CV,OVo),e(gv,VVo),e(V,XVo),e(V,hv),e(hv,$he),e($he,zVo),e(hv,WVo),e(hv,wV),e(wV,QVo),e(hv,HVo),e(V,UVo),e(V,pv),e(pv,khe),e(khe,JVo),e(pv,YVo),e(pv,AV),e(AV,KVo),e(pv,ZVo),e(V,eXo),e(V,uv),e(uv,She),e(She,oXo),e(uv,rXo),e(uv,yV),e(yV,tXo),e(uv,aXo),e(V,nXo),e(V,_v),e(_v,Rhe),e(Rhe,sXo),e(_v,lXo),e(_v,LV),e(LV,iXo),e(_v,dXo),e(V,cXo),e(V,bv),e(bv,Phe),e(Phe,fXo),e(bv,mXo),e(bv,xV),e(xV,gXo),e(bv,hXo),e(V,pXo),e(V,vv),e(vv,Bhe),e(Bhe,uXo),e(vv,_Xo),e(vv,$V),e($V,bXo),e(vv,vXo),e(V,FXo),e(V,Fv),e(Fv,Ihe),e(Ihe,TXo),e(Fv,MXo),e(Fv,kV),e(kV,EXo),e(Fv,CXo),e(V,wXo),e(V,Tv),e(Tv,qhe),e(qhe,AXo),e(Tv,yXo),e(Tv,SV),e(SV,LXo),e(Tv,xXo),e(V,$Xo),e(V,Mv),e(Mv,Nhe),e(Nhe,kXo),e(Mv,SXo),e(Mv,RV),e(RV,RXo),e(Mv,PXo),e(V,BXo),e(V,Ev),e(Ev,jhe),e(jhe,IXo),e(Ev,qXo),e(Ev,PV),e(PV,NXo),e(Ev,jXo),e(V,DXo),e(V,Cv),e(Cv,Dhe),e(Dhe,GXo),e(Cv,OXo),e(Cv,BV),e(BV,VXo),e(Cv,XXo),e(V,zXo),e(V,wv),e(wv,Ghe),e(Ghe,WXo),e(wv,QXo),e(wv,IV),e(IV,HXo),e(wv,UXo),e(V,JXo),e(V,Av),e(Av,Ohe),e(Ohe,YXo),e(Av,KXo),e(Av,qV),e(qV,ZXo),e(Av,ezo),e(V,ozo),e(V,yv),e(yv,Vhe),e(Vhe,rzo),e(yv,tzo),e(yv,NV),e(NV,azo),e(yv,nzo),e(V,szo),e(V,Lv),e(Lv,Xhe),e(Xhe,lzo),e(Lv,izo),e(Lv,jV),e(jV,dzo),e(Lv,czo),e(V,fzo),e(V,xv),e(xv,zhe),e(zhe,mzo),e(xv,gzo),e(xv,DV),e(DV,hzo),e(xv,pzo),e(V,uzo),e(V,$v),e($v,Whe),e(Whe,_zo),e($v,bzo),e($v,GV),e(GV,vzo),e($v,Fzo),e(V,Tzo),e(V,kv),e(kv,Qhe),e(Qhe,Mzo),e(kv,Ezo),e(kv,OV),e(OV,Czo),e(kv,wzo),e(V,Azo),e(V,Sv),e(Sv,Hhe),e(Hhe,yzo),e(Sv,Lzo),e(Sv,VV),e(VV,xzo),e(Sv,$zo),e(V,kzo),e(V,Rv),e(Rv,Uhe),e(Uhe,Szo),e(Rv,Rzo),e(Rv,XV),e(XV,Pzo),e(Rv,Bzo),e(V,Izo),e(V,Pv),e(Pv,Jhe),e(Jhe,qzo),e(Pv,Nzo),e(Pv,zV),e(zV,jzo),e(Pv,Dzo),e(V,Gzo),e(V,Bv),e(Bv,Yhe),e(Yhe,Ozo),e(Bv,Vzo),e(Bv,WV),e(WV,Xzo),e(Bv,zzo),e(V,Wzo),e(V,Iv),e(Iv,Khe),e(Khe,Qzo),e(Iv,Hzo),e(Iv,QV),e(QV,Uzo),e(Iv,Jzo),e(V,Yzo),e(V,qv),e(qv,Zhe),e(Zhe,Kzo),e(qv,Zzo),e(qv,HV),e(HV,eWo),e(qv,oWo),e(V,rWo),e(V,Nv),e(Nv,epe),e(epe,tWo),e(Nv,aWo),e(Nv,UV),e(UV,nWo),e(Nv,sWo),e(V,lWo),e(V,jv),e(jv,ope),e(ope,iWo),e(jv,dWo),e(jv,JV),e(JV,cWo),e(jv,fWo),e(V,mWo),e(V,Dv),e(Dv,rpe),e(rpe,gWo),e(Dv,hWo),e(Dv,YV),e(YV,pWo),e(Dv,uWo),e(V,_Wo),e(V,Gv),e(Gv,tpe),e(tpe,bWo),e(Gv,vWo),e(Gv,KV),e(KV,FWo),e(Gv,TWo),e(V,MWo),e(V,Ov),e(Ov,ape),e(ape,EWo),e(Ov,CWo),e(Ov,ZV),e(ZV,wWo),e(Ov,AWo),e(V,yWo),e(V,Vv),e(Vv,npe),e(npe,LWo),e(Vv,xWo),e(Vv,eX),e(eX,$Wo),e(Vv,kWo),e(V,SWo),e(V,Xv),e(Xv,spe),e(spe,RWo),e(Xv,PWo),e(Xv,oX),e(oX,BWo),e(Xv,IWo),e(V,qWo),e(V,zv),e(zv,lpe),e(lpe,NWo),e(zv,jWo),e(zv,rX),e(rX,DWo),e(zv,GWo),e(V,OWo),e(V,Wv),e(Wv,ipe),e(ipe,VWo),e(Wv,XWo),e(Wv,tX),e(tX,zWo),e(Wv,WWo),e(no,QWo),e(no,Qv),e(Qv,HWo),e(Qv,dpe),e(dpe,UWo),e(Qv,JWo),e(Qv,cpe),e(cpe,YWo),e(no,KWo),M(Hv,no,null),b(f,fNe,_),b(f,od,_),e(od,Uv),e(Uv,fpe),M(Xy,fpe,null),e(od,ZWo),e(od,mpe),e(mpe,eQo),b(f,mNe,_),b(f,No,_),M(zy,No,null),e(No,oQo),e(No,rd),e(rd,rQo),e(rd,aX),e(aX,tQo),e(rd,aQo),e(rd,nX),e(nX,nQo),e(rd,sQo),e(No,lQo),e(No,Wy),e(Wy,iQo),e(Wy,gpe),e(gpe,dQo),e(Wy,cQo),e(No,fQo),e(No,gt),M(Qy,gt,null),e(gt,mQo),e(gt,hpe),e(hpe,gQo),e(gt,hQo),e(gt,td),e(td,pQo),e(td,ppe),e(ppe,uQo),e(td,_Qo),e(td,sX),e(sX,bQo),e(td,vQo),e(gt,FQo),M(Jv,gt,null),e(No,TQo),e(No,so),M(Hy,so,null),e(so,MQo),e(so,upe),e(upe,EQo),e(so,CQo),e(so,Na),e(Na,wQo),e(Na,_pe),e(_pe,AQo),e(Na,yQo),e(Na,bpe),e(bpe,LQo),e(Na,xQo),e(Na,vpe),e(vpe,$Qo),e(Na,kQo),e(so,SQo),e(so,Fpe),e(Fpe,Yv),e(Yv,Tpe),e(Tpe,RQo),e(Yv,PQo),e(Yv,lX),e(lX,BQo),e(Yv,IQo),e(so,qQo),e(so,Kv),e(Kv,NQo),e(Kv,Mpe),e(Mpe,jQo),e(Kv,DQo),e(Kv,Epe),e(Epe,GQo),e(so,OQo),M(Zv,so,null),b(f,gNe,_),b(f,ad,_),e(ad,eF),e(eF,Cpe),M(Uy,Cpe,null),e(ad,VQo),e(ad,wpe),e(wpe,XQo),b(f,hNe,_),b(f,jo,_),M(Jy,jo,null),e(jo,zQo),e(jo,nd),e(nd,WQo),e(nd,iX),e(iX,QQo),e(nd,HQo),e(nd,dX),e(dX,UQo),e(nd,JQo),e(jo,YQo),e(jo,Yy),e(Yy,KQo),e(Yy,Ape),e(Ape,ZQo),e(Yy,eHo),e(jo,oHo),e(jo,ht),M(Ky,ht,null),e(ht,rHo),e(ht,ype),e(ype,tHo),e(ht,aHo),e(ht,sd),e(sd,nHo),e(sd,Lpe),e(Lpe,sHo),e(sd,lHo),e(sd,cX),e(cX,iHo),e(sd,dHo),e(ht,cHo),M(oF,ht,null),e(jo,fHo),e(jo,lo),M(Zy,lo,null),e(lo,mHo),e(lo,xpe),e(xpe,gHo),e(lo,hHo),e(lo,ja),e(ja,pHo),e(ja,$pe),e($pe,uHo),e(ja,_Ho),e(ja,kpe),e(kpe,bHo),e(ja,vHo),e(ja,Spe),e(Spe,FHo),e(ja,THo),e(lo,MHo),e(lo,Fe),e(Fe,rF),e(rF,Rpe),e(Rpe,EHo),e(rF,CHo),e(rF,fX),e(fX,wHo),e(rF,AHo),e(Fe,yHo),e(Fe,tF),e(tF,Ppe),e(Ppe,LHo),e(tF,xHo),e(tF,mX),e(mX,$Ho),e(tF,kHo),e(Fe,SHo),e(Fe,aF),e(aF,Bpe),e(Bpe,RHo),e(aF,PHo),e(aF,gX),e(gX,BHo),e(aF,IHo),e(Fe,qHo),e(Fe,nF),e(nF,Ipe),e(Ipe,NHo),e(nF,jHo),e(nF,hX),e(hX,DHo),e(nF,GHo),e(Fe,OHo),e(Fe,Bs),e(Bs,qpe),e(qpe,VHo),e(Bs,XHo),e(Bs,pX),e(pX,zHo),e(Bs,WHo),e(Bs,uX),e(uX,QHo),e(Bs,HHo),e(Fe,UHo),e(Fe,sF),e(sF,Npe),e(Npe,JHo),e(sF,YHo),e(sF,_X),e(_X,KHo),e(sF,ZHo),e(Fe,eUo),e(Fe,pt),e(pt,jpe),e(jpe,oUo),e(pt,rUo),e(pt,bX),e(bX,tUo),e(pt,aUo),e(pt,vX),e(vX,nUo),e(pt,sUo),e(pt,FX),e(FX,lUo),e(pt,iUo),e(Fe,dUo),e(Fe,lF),e(lF,Dpe),e(Dpe,cUo),e(lF,fUo),e(lF,TX),e(TX,mUo),e(lF,gUo),e(Fe,hUo),e(Fe,iF),e(iF,Gpe),e(Gpe,pUo),e(iF,uUo),e(iF,MX),e(MX,_Uo),e(iF,bUo),e(Fe,vUo),e(Fe,dF),e(dF,Ope),e(Ope,FUo),e(dF,TUo),e(dF,EX),e(EX,MUo),e(dF,EUo),e(Fe,CUo),e(Fe,cF),e(cF,Vpe),e(Vpe,wUo),e(cF,AUo),e(cF,CX),e(CX,yUo),e(cF,LUo),e(Fe,xUo),e(Fe,fF),e(fF,Xpe),e(Xpe,$Uo),e(fF,kUo),e(fF,wX),e(wX,SUo),e(fF,RUo),e(Fe,PUo),e(Fe,mF),e(mF,zpe),e(zpe,BUo),e(mF,IUo),e(mF,AX),e(AX,qUo),e(mF,NUo),e(Fe,jUo),e(Fe,gF),e(gF,Wpe),e(Wpe,DUo),e(gF,GUo),e(gF,yX),e(yX,OUo),e(gF,VUo),e(lo,XUo),e(lo,hF),e(hF,zUo),e(hF,Qpe),e(Qpe,WUo),e(hF,QUo),e(hF,Hpe),e(Hpe,HUo),e(lo,UUo),M(pF,lo,null),b(f,pNe,_),b(f,ld,_),e(ld,uF),e(uF,Upe),M(eL,Upe,null),e(ld,JUo),e(ld,Jpe),e(Jpe,YUo),b(f,uNe,_),b(f,Do,_),M(oL,Do,null),e(Do,KUo),e(Do,id),e(id,ZUo),e(id,LX),e(LX,eJo),e(id,oJo),e(id,xX),e(xX,rJo),e(id,tJo),e(Do,aJo),e(Do,rL),e(rL,nJo),e(rL,Ype),e(Ype,sJo),e(rL,lJo),e(Do,iJo),e(Do,ut),M(tL,ut,null),e(ut,dJo),e(ut,Kpe),e(Kpe,cJo),e(ut,fJo),e(ut,dd),e(dd,mJo),e(dd,Zpe),e(Zpe,gJo),e(dd,hJo),e(dd,$X),e($X,pJo),e(dd,uJo),e(ut,_Jo),M(_F,ut,null),e(Do,bJo),e(Do,io),M(aL,io,null),e(io,vJo),e(io,eue),e(eue,FJo),e(io,TJo),e(io,Da),e(Da,MJo),e(Da,oue),e(oue,EJo),e(Da,CJo),e(Da,rue),e(rue,wJo),e(Da,AJo),e(Da,tue),e(tue,yJo),e(Da,LJo),e(io,xJo),e(io,aue),e(aue,bF),e(bF,nue),e(nue,$Jo),e(bF,kJo),e(bF,kX),e(kX,SJo),e(bF,RJo),e(io,PJo),e(io,vF),e(vF,BJo),e(vF,sue),e(sue,IJo),e(vF,qJo),e(vF,lue),e(lue,NJo),e(io,jJo),M(FF,io,null),b(f,_Ne,_),b(f,cd,_),e(cd,TF),e(TF,iue),M(nL,iue,null),e(cd,DJo),e(cd,due),e(due,GJo),b(f,bNe,_),b(f,Go,_),M(sL,Go,null),e(Go,OJo),e(Go,fd),e(fd,VJo),e(fd,SX),e(SX,XJo),e(fd,zJo),e(fd,RX),e(RX,WJo),e(fd,QJo),e(Go,HJo),e(Go,lL),e(lL,UJo),e(lL,cue),e(cue,JJo),e(lL,YJo),e(Go,KJo),e(Go,_t),M(iL,_t,null),e(_t,ZJo),e(_t,fue),e(fue,eYo),e(_t,oYo),e(_t,md),e(md,rYo),e(md,mue),e(mue,tYo),e(md,aYo),e(md,PX),e(PX,nYo),e(md,sYo),e(_t,lYo),M(MF,_t,null),e(Go,iYo),e(Go,co),M(dL,co,null),e(co,dYo),e(co,gue),e(gue,cYo),e(co,fYo),e(co,Ga),e(Ga,mYo),e(Ga,hue),e(hue,gYo),e(Ga,hYo),e(Ga,pue),e(pue,pYo),e(Ga,uYo),e(Ga,uue),e(uue,_Yo),e(Ga,bYo),e(co,vYo),e(co,ke),e(ke,EF),e(EF,_ue),e(_ue,FYo),e(EF,TYo),e(EF,BX),e(BX,MYo),e(EF,EYo),e(ke,CYo),e(ke,CF),e(CF,bue),e(bue,wYo),e(CF,AYo),e(CF,IX),e(IX,yYo),e(CF,LYo),e(ke,xYo),e(ke,wF),e(wF,vue),e(vue,$Yo),e(wF,kYo),e(wF,qX),e(qX,SYo),e(wF,RYo),e(ke,PYo),e(ke,AF),e(AF,Fue),e(Fue,BYo),e(AF,IYo),e(AF,NX),e(NX,qYo),e(AF,NYo),e(ke,jYo),e(ke,yF),e(yF,Tue),e(Tue,DYo),e(yF,GYo),e(yF,jX),e(jX,OYo),e(yF,VYo),e(ke,XYo),e(ke,LF),e(LF,Mue),e(Mue,zYo),e(LF,WYo),e(LF,DX),e(DX,QYo),e(LF,HYo),e(ke,UYo),e(ke,xF),e(xF,Eue),e(Eue,JYo),e(xF,YYo),e(xF,GX),e(GX,KYo),e(xF,ZYo),e(ke,eKo),e(ke,$F),e($F,Cue),e(Cue,oKo),e($F,rKo),e($F,OX),e(OX,tKo),e($F,aKo),e(ke,nKo),e(ke,kF),e(kF,wue),e(wue,sKo),e(kF,lKo),e(kF,VX),e(VX,iKo),e(kF,dKo),e(co,cKo),e(co,SF),e(SF,fKo),e(SF,Aue),e(Aue,mKo),e(SF,gKo),e(SF,yue),e(yue,hKo),e(co,pKo),M(RF,co,null),b(f,vNe,_),b(f,gd,_),e(gd,PF),e(PF,Lue),M(cL,Lue,null),e(gd,uKo),e(gd,xue),e(xue,_Ko),b(f,FNe,_),b(f,Oo,_),M(fL,Oo,null),e(Oo,bKo),e(Oo,hd),e(hd,vKo),e(hd,XX),e(XX,FKo),e(hd,TKo),e(hd,zX),e(zX,MKo),e(hd,EKo),e(Oo,CKo),e(Oo,mL),e(mL,wKo),e(mL,$ue),e($ue,AKo),e(mL,yKo),e(Oo,LKo),e(Oo,bt),M(gL,bt,null),e(bt,xKo),e(bt,kue),e(kue,$Ko),e(bt,kKo),e(bt,pd),e(pd,SKo),e(pd,Sue),e(Sue,RKo),e(pd,PKo),e(pd,WX),e(WX,BKo),e(pd,IKo),e(bt,qKo),M(BF,bt,null),e(Oo,NKo),e(Oo,fo),M(hL,fo,null),e(fo,jKo),e(fo,Rue),e(Rue,DKo),e(fo,GKo),e(fo,Oa),e(Oa,OKo),e(Oa,Pue),e(Pue,VKo),e(Oa,XKo),e(Oa,Bue),e(Bue,zKo),e(Oa,WKo),e(Oa,Iue),e(Iue,QKo),e(Oa,HKo),e(fo,UKo),e(fo,Kr),e(Kr,IF),e(IF,que),e(que,JKo),e(IF,YKo),e(IF,QX),e(QX,KKo),e(IF,ZKo),e(Kr,eZo),e(Kr,qF),e(qF,Nue),e(Nue,oZo),e(qF,rZo),e(qF,HX),e(HX,tZo),e(qF,aZo),e(Kr,nZo),e(Kr,NF),e(NF,jue),e(jue,sZo),e(NF,lZo),e(NF,UX),e(UX,iZo),e(NF,dZo),e(Kr,cZo),e(Kr,jF),e(jF,Due),e(Due,fZo),e(jF,mZo),e(jF,JX),e(JX,gZo),e(jF,hZo),e(Kr,pZo),e(Kr,DF),e(DF,Gue),e(Gue,uZo),e(DF,_Zo),e(DF,YX),e(YX,bZo),e(DF,vZo),e(fo,FZo),e(fo,GF),e(GF,TZo),e(GF,Oue),e(Oue,MZo),e(GF,EZo),e(GF,Vue),e(Vue,CZo),e(fo,wZo),M(OF,fo,null),b(f,TNe,_),b(f,ud,_),e(ud,VF),e(VF,Xue),M(pL,Xue,null),e(ud,AZo),e(ud,zue),e(zue,yZo),b(f,MNe,_),b(f,Vo,_),M(uL,Vo,null),e(Vo,LZo),e(Vo,_d),e(_d,xZo),e(_d,KX),e(KX,$Zo),e(_d,kZo),e(_d,ZX),e(ZX,SZo),e(_d,RZo),e(Vo,PZo),e(Vo,_L),e(_L,BZo),e(_L,Wue),e(Wue,IZo),e(_L,qZo),e(Vo,NZo),e(Vo,vt),M(bL,vt,null),e(vt,jZo),e(vt,Que),e(Que,DZo),e(vt,GZo),e(vt,bd),e(bd,OZo),e(bd,Hue),e(Hue,VZo),e(bd,XZo),e(bd,ez),e(ez,zZo),e(bd,WZo),e(vt,QZo),M(XF,vt,null),e(Vo,HZo),e(Vo,mo),M(vL,mo,null),e(mo,UZo),e(mo,Uue),e(Uue,JZo),e(mo,YZo),e(mo,Va),e(Va,KZo),e(Va,Jue),e(Jue,ZZo),e(Va,eer),e(Va,Yue),e(Yue,oer),e(Va,rer),e(Va,Kue),e(Kue,ter),e(Va,aer),e(mo,ner),e(mo,Se),e(Se,zF),e(zF,Zue),e(Zue,ser),e(zF,ler),e(zF,oz),e(oz,ier),e(zF,der),e(Se,cer),e(Se,WF),e(WF,e_e),e(e_e,fer),e(WF,mer),e(WF,rz),e(rz,ger),e(WF,her),e(Se,per),e(Se,QF),e(QF,o_e),e(o_e,uer),e(QF,_er),e(QF,tz),e(tz,ber),e(QF,ver),e(Se,Fer),e(Se,HF),e(HF,r_e),e(r_e,Ter),e(HF,Mer),e(HF,az),e(az,Eer),e(HF,Cer),e(Se,wer),e(Se,UF),e(UF,t_e),e(t_e,Aer),e(UF,yer),e(UF,nz),e(nz,Ler),e(UF,xer),e(Se,$er),e(Se,JF),e(JF,a_e),e(a_e,ker),e(JF,Ser),e(JF,sz),e(sz,Rer),e(JF,Per),e(Se,Ber),e(Se,YF),e(YF,n_e),e(n_e,Ier),e(YF,qer),e(YF,lz),e(lz,Ner),e(YF,jer),e(Se,Der),e(Se,KF),e(KF,s_e),e(s_e,Ger),e(KF,Oer),e(KF,iz),e(iz,Ver),e(KF,Xer),e(Se,zer),e(Se,ZF),e(ZF,l_e),e(l_e,Wer),e(ZF,Qer),e(ZF,dz),e(dz,Her),e(ZF,Uer),e(mo,Jer),e(mo,e6),e(e6,Yer),e(e6,i_e),e(i_e,Ker),e(e6,Zer),e(e6,d_e),e(d_e,eor),e(mo,oor),M(o6,mo,null),b(f,ENe,_),b(f,vd,_),e(vd,r6),e(r6,c_e),M(FL,c_e,null),e(vd,ror),e(vd,f_e),e(f_e,tor),b(f,CNe,_),b(f,Xo,_),M(TL,Xo,null),e(Xo,aor),e(Xo,Fd),e(Fd,nor),e(Fd,cz),e(cz,sor),e(Fd,lor),e(Fd,fz),e(fz,ior),e(Fd,dor),e(Xo,cor),e(Xo,ML),e(ML,mor),e(ML,m_e),e(m_e,gor),e(ML,hor),e(Xo,por),e(Xo,Ft),M(EL,Ft,null),e(Ft,uor),e(Ft,g_e),e(g_e,_or),e(Ft,bor),e(Ft,Td),e(Td,vor),e(Td,h_e),e(h_e,For),e(Td,Tor),e(Td,mz),e(mz,Mor),e(Td,Eor),e(Ft,Cor),M(t6,Ft,null),e(Xo,wor),e(Xo,go),M(CL,go,null),e(go,Aor),e(go,p_e),e(p_e,yor),e(go,Lor),e(go,Xa),e(Xa,xor),e(Xa,u_e),e(u_e,$or),e(Xa,kor),e(Xa,__e),e(__e,Sor),e(Xa,Ror),e(Xa,b_e),e(b_e,Por),e(Xa,Bor),e(go,Ior),e(go,wL),e(wL,a6),e(a6,v_e),e(v_e,qor),e(a6,Nor),e(a6,gz),e(gz,jor),e(a6,Dor),e(wL,Gor),e(wL,n6),e(n6,F_e),e(F_e,Oor),e(n6,Vor),e(n6,hz),e(hz,Xor),e(n6,zor),e(go,Wor),e(go,s6),e(s6,Qor),e(s6,T_e),e(T_e,Hor),e(s6,Uor),e(s6,M_e),e(M_e,Jor),e(go,Yor),M(l6,go,null),b(f,wNe,_),b(f,Md,_),e(Md,i6),e(i6,E_e),M(AL,E_e,null),e(Md,Kor),e(Md,C_e),e(C_e,Zor),b(f,ANe,_),b(f,zo,_),M(yL,zo,null),e(zo,err),e(zo,Ed),e(Ed,orr),e(Ed,pz),e(pz,rrr),e(Ed,trr),e(Ed,uz),e(uz,arr),e(Ed,nrr),e(zo,srr),e(zo,LL),e(LL,lrr),e(LL,w_e),e(w_e,irr),e(LL,drr),e(zo,crr),e(zo,Tt),M(xL,Tt,null),e(Tt,frr),e(Tt,A_e),e(A_e,mrr),e(Tt,grr),e(Tt,Cd),e(Cd,hrr),e(Cd,y_e),e(y_e,prr),e(Cd,urr),e(Cd,_z),e(_z,_rr),e(Cd,brr),e(Tt,vrr),M(d6,Tt,null),e(zo,Frr),e(zo,ho),M($L,ho,null),e(ho,Trr),e(ho,L_e),e(L_e,Mrr),e(ho,Err),e(ho,za),e(za,Crr),e(za,x_e),e(x_e,wrr),e(za,Arr),e(za,$_e),e($_e,yrr),e(za,Lrr),e(za,k_e),e(k_e,xrr),e(za,$rr),e(ho,krr),e(ho,Zr),e(Zr,c6),e(c6,S_e),e(S_e,Srr),e(c6,Rrr),e(c6,bz),e(bz,Prr),e(c6,Brr),e(Zr,Irr),e(Zr,f6),e(f6,R_e),e(R_e,qrr),e(f6,Nrr),e(f6,vz),e(vz,jrr),e(f6,Drr),e(Zr,Grr),e(Zr,m6),e(m6,P_e),e(P_e,Orr),e(m6,Vrr),e(m6,Fz),e(Fz,Xrr),e(m6,zrr),e(Zr,Wrr),e(Zr,g6),e(g6,B_e),e(B_e,Qrr),e(g6,Hrr),e(g6,Tz),e(Tz,Urr),e(g6,Jrr),e(Zr,Yrr),e(Zr,h6),e(h6,I_e),e(I_e,Krr),e(h6,Zrr),e(h6,Mz),e(Mz,etr),e(h6,otr),e(ho,rtr),e(ho,p6),e(p6,ttr),e(p6,q_e),e(q_e,atr),e(p6,ntr),e(p6,N_e),e(N_e,str),e(ho,ltr),M(u6,ho,null),b(f,yNe,_),b(f,wd,_),e(wd,_6),e(_6,j_e),M(kL,j_e,null),e(wd,itr),e(wd,D_e),e(D_e,dtr),b(f,LNe,_),b(f,Wo,_),M(SL,Wo,null),e(Wo,ctr),e(Wo,Ad),e(Ad,ftr),e(Ad,Ez),e(Ez,mtr),e(Ad,gtr),e(Ad,Cz),e(Cz,htr),e(Ad,ptr),e(Wo,utr),e(Wo,RL),e(RL,_tr),e(RL,G_e),e(G_e,btr),e(RL,vtr),e(Wo,Ftr),e(Wo,Mt),M(PL,Mt,null),e(Mt,Ttr),e(Mt,O_e),e(O_e,Mtr),e(Mt,Etr),e(Mt,yd),e(yd,Ctr),e(yd,V_e),e(V_e,wtr),e(yd,Atr),e(yd,wz),e(wz,ytr),e(yd,Ltr),e(Mt,xtr),M(b6,Mt,null),e(Wo,$tr),e(Wo,po),M(BL,po,null),e(po,ktr),e(po,X_e),e(X_e,Str),e(po,Rtr),e(po,Wa),e(Wa,Ptr),e(Wa,z_e),e(z_e,Btr),e(Wa,Itr),e(Wa,W_e),e(W_e,qtr),e(Wa,Ntr),e(Wa,Q_e),e(Q_e,jtr),e(Wa,Dtr),e(po,Gtr),e(po,Ld),e(Ld,v6),e(v6,H_e),e(H_e,Otr),e(v6,Vtr),e(v6,Az),e(Az,Xtr),e(v6,ztr),e(Ld,Wtr),e(Ld,F6),e(F6,U_e),e(U_e,Qtr),e(F6,Htr),e(F6,yz),e(yz,Utr),e(F6,Jtr),e(Ld,Ytr),e(Ld,T6),e(T6,J_e),e(J_e,Ktr),e(T6,Ztr),e(T6,Lz),e(Lz,ear),e(T6,oar),e(po,rar),e(po,M6),e(M6,tar),e(M6,Y_e),e(Y_e,aar),e(M6,nar),e(M6,K_e),e(K_e,sar),e(po,lar),M(E6,po,null),b(f,xNe,_),b(f,xd,_),e(xd,C6),e(C6,Z_e),M(IL,Z_e,null),e(xd,iar),e(xd,e0e),e(e0e,dar),b(f,$Ne,_),b(f,Qo,_),M(qL,Qo,null),e(Qo,car),e(Qo,$d),e($d,far),e($d,xz),e(xz,mar),e($d,gar),e($d,$z),e($z,har),e($d,par),e(Qo,uar),e(Qo,NL),e(NL,_ar),e(NL,o0e),e(o0e,bar),e(NL,Far),e(Qo,Tar),e(Qo,Et),M(jL,Et,null),e(Et,Mar),e(Et,r0e),e(r0e,Ear),e(Et,Car),e(Et,kd),e(kd,war),e(kd,t0e),e(t0e,Aar),e(kd,yar),e(kd,kz),e(kz,Lar),e(kd,xar),e(Et,$ar),M(w6,Et,null),e(Qo,kar),e(Qo,uo),M(DL,uo,null),e(uo,Sar),e(uo,a0e),e(a0e,Rar),e(uo,Par),e(uo,Qa),e(Qa,Bar),e(Qa,n0e),e(n0e,Iar),e(Qa,qar),e(Qa,s0e),e(s0e,Nar),e(Qa,jar),e(Qa,l0e),e(l0e,Dar),e(Qa,Gar),e(uo,Oar),e(uo,GL),e(GL,A6),e(A6,i0e),e(i0e,Var),e(A6,Xar),e(A6,Sz),e(Sz,zar),e(A6,War),e(GL,Qar),e(GL,y6),e(y6,d0e),e(d0e,Har),e(y6,Uar),e(y6,Rz),e(Rz,Jar),e(y6,Yar),e(uo,Kar),e(uo,L6),e(L6,Zar),e(L6,c0e),e(c0e,enr),e(L6,onr),e(L6,f0e),e(f0e,rnr),e(uo,tnr),M(x6,uo,null),b(f,kNe,_),b(f,Sd,_),e(Sd,$6),e($6,m0e),M(OL,m0e,null),e(Sd,anr),e(Sd,g0e),e(g0e,nnr),b(f,SNe,_),b(f,Ho,_),M(VL,Ho,null),e(Ho,snr),e(Ho,Rd),e(Rd,lnr),e(Rd,Pz),e(Pz,inr),e(Rd,dnr),e(Rd,Bz),e(Bz,cnr),e(Rd,fnr),e(Ho,mnr),e(Ho,XL),e(XL,gnr),e(XL,h0e),e(h0e,hnr),e(XL,pnr),e(Ho,unr),e(Ho,Ct),M(zL,Ct,null),e(Ct,_nr),e(Ct,p0e),e(p0e,bnr),e(Ct,vnr),e(Ct,Pd),e(Pd,Fnr),e(Pd,u0e),e(u0e,Tnr),e(Pd,Mnr),e(Pd,Iz),e(Iz,Enr),e(Pd,Cnr),e(Ct,wnr),M(k6,Ct,null),e(Ho,Anr),e(Ho,_o),M(WL,_o,null),e(_o,ynr),e(_o,_0e),e(_0e,Lnr),e(_o,xnr),e(_o,Ha),e(Ha,$nr),e(Ha,b0e),e(b0e,knr),e(Ha,Snr),e(Ha,v0e),e(v0e,Rnr),e(Ha,Pnr),e(Ha,F0e),e(F0e,Bnr),e(Ha,Inr),e(_o,qnr),e(_o,T0e),e(T0e,S6),e(S6,M0e),e(M0e,Nnr),e(S6,jnr),e(S6,qz),e(qz,Dnr),e(S6,Gnr),e(_o,Onr),e(_o,R6),e(R6,Vnr),e(R6,E0e),e(E0e,Xnr),e(R6,znr),e(R6,C0e),e(C0e,Wnr),e(_o,Qnr),M(P6,_o,null),b(f,RNe,_),b(f,Bd,_),e(Bd,B6),e(B6,w0e),M(QL,w0e,null),e(Bd,Hnr),e(Bd,A0e),e(A0e,Unr),b(f,PNe,_),b(f,Uo,_),M(HL,Uo,null),e(Uo,Jnr),e(Uo,Id),e(Id,Ynr),e(Id,Nz),e(Nz,Knr),e(Id,Znr),e(Id,jz),e(jz,esr),e(Id,osr),e(Uo,rsr),e(Uo,UL),e(UL,tsr),e(UL,y0e),e(y0e,asr),e(UL,nsr),e(Uo,ssr),e(Uo,wt),M(JL,wt,null),e(wt,lsr),e(wt,L0e),e(L0e,isr),e(wt,dsr),e(wt,qd),e(qd,csr),e(qd,x0e),e(x0e,fsr),e(qd,msr),e(qd,Dz),e(Dz,gsr),e(qd,hsr),e(wt,psr),M(I6,wt,null),e(Uo,usr),e(Uo,bo),M(YL,bo,null),e(bo,_sr),e(bo,$0e),e($0e,bsr),e(bo,vsr),e(bo,Ua),e(Ua,Fsr),e(Ua,k0e),e(k0e,Tsr),e(Ua,Msr),e(Ua,S0e),e(S0e,Esr),e(Ua,Csr),e(Ua,R0e),e(R0e,wsr),e(Ua,Asr),e(bo,ysr),e(bo,Ja),e(Ja,q6),e(q6,P0e),e(P0e,Lsr),e(q6,xsr),e(q6,Gz),e(Gz,$sr),e(q6,ksr),e(Ja,Ssr),e(Ja,N6),e(N6,B0e),e(B0e,Rsr),e(N6,Psr),e(N6,Oz),e(Oz,Bsr),e(N6,Isr),e(Ja,qsr),e(Ja,j6),e(j6,I0e),e(I0e,Nsr),e(j6,jsr),e(j6,Vz),e(Vz,Dsr),e(j6,Gsr),e(Ja,Osr),e(Ja,D6),e(D6,q0e),e(q0e,Vsr),e(D6,Xsr),e(D6,Xz),e(Xz,zsr),e(D6,Wsr),e(bo,Qsr),e(bo,G6),e(G6,Hsr),e(G6,N0e),e(N0e,Usr),e(G6,Jsr),e(G6,j0e),e(j0e,Ysr),e(bo,Ksr),M(O6,bo,null),b(f,BNe,_),b(f,Nd,_),e(Nd,V6),e(V6,D0e),M(KL,D0e,null),e(Nd,Zsr),e(Nd,G0e),e(G0e,elr),b(f,INe,_),b(f,Jo,_),M(ZL,Jo,null),e(Jo,olr),e(Jo,jd),e(jd,rlr),e(jd,zz),e(zz,tlr),e(jd,alr),e(jd,Wz),e(Wz,nlr),e(jd,slr),e(Jo,llr),e(Jo,e8),e(e8,ilr),e(e8,O0e),e(O0e,dlr),e(e8,clr),e(Jo,flr),e(Jo,At),M(o8,At,null),e(At,mlr),e(At,V0e),e(V0e,glr),e(At,hlr),e(At,Dd),e(Dd,plr),e(Dd,X0e),e(X0e,ulr),e(Dd,_lr),e(Dd,Qz),e(Qz,blr),e(Dd,vlr),e(At,Flr),M(X6,At,null),e(Jo,Tlr),e(Jo,vo),M(r8,vo,null),e(vo,Mlr),e(vo,z0e),e(z0e,Elr),e(vo,Clr),e(vo,Ya),e(Ya,wlr),e(Ya,W0e),e(W0e,Alr),e(Ya,ylr),e(Ya,Q0e),e(Q0e,Llr),e(Ya,xlr),e(Ya,H0e),e(H0e,$lr),e(Ya,klr),e(vo,Slr),e(vo,U0e),e(U0e,z6),e(z6,J0e),e(J0e,Rlr),e(z6,Plr),e(z6,Hz),e(Hz,Blr),e(z6,Ilr),e(vo,qlr),e(vo,W6),e(W6,Nlr),e(W6,Y0e),e(Y0e,jlr),e(W6,Dlr),e(W6,K0e),e(K0e,Glr),e(vo,Olr),M(Q6,vo,null),b(f,qNe,_),b(f,Gd,_),e(Gd,H6),e(H6,Z0e),M(t8,Z0e,null),e(Gd,Vlr),e(Gd,e1e),e(e1e,Xlr),b(f,NNe,_),b(f,Yo,_),M(a8,Yo,null),e(Yo,zlr),e(Yo,Od),e(Od,Wlr),e(Od,Uz),e(Uz,Qlr),e(Od,Hlr),e(Od,Jz),e(Jz,Ulr),e(Od,Jlr),e(Yo,Ylr),e(Yo,n8),e(n8,Klr),e(n8,o1e),e(o1e,Zlr),e(n8,eir),e(Yo,oir),e(Yo,yt),M(s8,yt,null),e(yt,rir),e(yt,r1e),e(r1e,tir),e(yt,air),e(yt,Vd),e(Vd,nir),e(Vd,t1e),e(t1e,sir),e(Vd,lir),e(Vd,Yz),e(Yz,iir),e(Vd,dir),e(yt,cir),M(U6,yt,null),e(Yo,fir),e(Yo,wr),M(l8,wr,null),e(wr,mir),e(wr,a1e),e(a1e,gir),e(wr,hir),e(wr,Ka),e(Ka,pir),e(Ka,n1e),e(n1e,uir),e(Ka,_ir),e(Ka,s1e),e(s1e,bir),e(Ka,vir),e(Ka,l1e),e(l1e,Fir),e(Ka,Tir),e(wr,Mir),e(wr,N),e(N,J6),e(J6,i1e),e(i1e,Eir),e(J6,Cir),e(J6,Kz),e(Kz,wir),e(J6,Air),e(N,yir),e(N,Y6),e(Y6,d1e),e(d1e,Lir),e(Y6,xir),e(Y6,Zz),e(Zz,$ir),e(Y6,kir),e(N,Sir),e(N,K6),e(K6,c1e),e(c1e,Rir),e(K6,Pir),e(K6,eW),e(eW,Bir),e(K6,Iir),e(N,qir),e(N,Z6),e(Z6,f1e),e(f1e,Nir),e(Z6,jir),e(Z6,oW),e(oW,Dir),e(Z6,Gir),e(N,Oir),e(N,eT),e(eT,m1e),e(m1e,Vir),e(eT,Xir),e(eT,rW),e(rW,zir),e(eT,Wir),e(N,Qir),e(N,oT),e(oT,g1e),e(g1e,Hir),e(oT,Uir),e(oT,tW),e(tW,Jir),e(oT,Yir),e(N,Kir),e(N,rT),e(rT,h1e),e(h1e,Zir),e(rT,edr),e(rT,aW),e(aW,odr),e(rT,rdr),e(N,tdr),e(N,tT),e(tT,p1e),e(p1e,adr),e(tT,ndr),e(tT,nW),e(nW,sdr),e(tT,ldr),e(N,idr),e(N,aT),e(aT,u1e),e(u1e,ddr),e(aT,cdr),e(aT,sW),e(sW,fdr),e(aT,mdr),e(N,gdr),e(N,nT),e(nT,_1e),e(_1e,hdr),e(nT,pdr),e(nT,lW),e(lW,udr),e(nT,_dr),e(N,bdr),e(N,sT),e(sT,b1e),e(b1e,vdr),e(sT,Fdr),e(sT,iW),e(iW,Tdr),e(sT,Mdr),e(N,Edr),e(N,lT),e(lT,v1e),e(v1e,Cdr),e(lT,wdr),e(lT,dW),e(dW,Adr),e(lT,ydr),e(N,Ldr),e(N,iT),e(iT,F1e),e(F1e,xdr),e(iT,$dr),e(iT,cW),e(cW,kdr),e(iT,Sdr),e(N,Rdr),e(N,dT),e(dT,T1e),e(T1e,Pdr),e(dT,Bdr),e(dT,fW),e(fW,Idr),e(dT,qdr),e(N,Ndr),e(N,cT),e(cT,M1e),e(M1e,jdr),e(cT,Ddr),e(cT,mW),e(mW,Gdr),e(cT,Odr),e(N,Vdr),e(N,fT),e(fT,E1e),e(E1e,Xdr),e(fT,zdr),e(fT,gW),e(gW,Wdr),e(fT,Qdr),e(N,Hdr),e(N,mT),e(mT,C1e),e(C1e,Udr),e(mT,Jdr),e(mT,hW),e(hW,Ydr),e(mT,Kdr),e(N,Zdr),e(N,Is),e(Is,w1e),e(w1e,ecr),e(Is,ocr),e(Is,pW),e(pW,rcr),e(Is,tcr),e(Is,uW),e(uW,acr),e(Is,ncr),e(N,scr),e(N,gT),e(gT,A1e),e(A1e,lcr),e(gT,icr),e(gT,_W),e(_W,dcr),e(gT,ccr),e(N,fcr),e(N,hT),e(hT,y1e),e(y1e,mcr),e(hT,gcr),e(hT,bW),e(bW,hcr),e(hT,pcr),e(N,ucr),e(N,pT),e(pT,L1e),e(L1e,_cr),e(pT,bcr),e(pT,vW),e(vW,vcr),e(pT,Fcr),e(N,Tcr),e(N,uT),e(uT,x1e),e(x1e,Mcr),e(uT,Ecr),e(uT,FW),e(FW,Ccr),e(uT,wcr),e(N,Acr),e(N,_T),e(_T,$1e),e($1e,ycr),e(_T,Lcr),e(_T,TW),e(TW,xcr),e(_T,$cr),e(N,kcr),e(N,bT),e(bT,k1e),e(k1e,Scr),e(bT,Rcr),e(bT,MW),e(MW,Pcr),e(bT,Bcr),e(N,Icr),e(N,vT),e(vT,S1e),e(S1e,qcr),e(vT,Ncr),e(vT,EW),e(EW,jcr),e(vT,Dcr),e(N,Gcr),e(N,FT),e(FT,R1e),e(R1e,Ocr),e(FT,Vcr),e(FT,CW),e(CW,Xcr),e(FT,zcr),e(N,Wcr),e(N,TT),e(TT,P1e),e(P1e,Qcr),e(TT,Hcr),e(TT,wW),e(wW,Ucr),e(TT,Jcr),e(N,Ycr),e(N,MT),e(MT,B1e),e(B1e,Kcr),e(MT,Zcr),e(MT,AW),e(AW,efr),e(MT,ofr),e(N,rfr),e(N,ET),e(ET,I1e),e(I1e,tfr),e(ET,afr),e(ET,yW),e(yW,nfr),e(ET,sfr),e(N,lfr),e(N,CT),e(CT,q1e),e(q1e,ifr),e(CT,dfr),e(CT,LW),e(LW,cfr),e(CT,ffr),e(N,mfr),e(N,wT),e(wT,N1e),e(N1e,gfr),e(wT,hfr),e(wT,xW),e(xW,pfr),e(wT,ufr),e(N,_fr),e(N,AT),e(AT,j1e),e(j1e,bfr),e(AT,vfr),e(AT,$W),e($W,Ffr),e(AT,Tfr),e(N,Mfr),e(N,yT),e(yT,D1e),e(D1e,Efr),e(yT,Cfr),e(yT,kW),e(kW,wfr),e(yT,Afr),e(N,yfr),e(N,LT),e(LT,G1e),e(G1e,Lfr),e(LT,xfr),e(LT,SW),e(SW,$fr),e(LT,kfr),e(N,Sfr),e(N,xT),e(xT,O1e),e(O1e,Rfr),e(xT,Pfr),e(xT,RW),e(RW,Bfr),e(xT,Ifr),e(N,qfr),e(N,$T),e($T,V1e),e(V1e,Nfr),e($T,jfr),e($T,PW),e(PW,Dfr),e($T,Gfr),e(N,Ofr),e(N,kT),e(kT,X1e),e(X1e,Vfr),e(kT,Xfr),e(kT,BW),e(BW,zfr),e(kT,Wfr),e(N,Qfr),e(N,ST),e(ST,z1e),e(z1e,Hfr),e(ST,Ufr),e(ST,IW),e(IW,Jfr),e(ST,Yfr),e(N,Kfr),e(N,RT),e(RT,W1e),e(W1e,Zfr),e(RT,emr),e(RT,qW),e(qW,omr),e(RT,rmr),e(N,tmr),e(N,PT),e(PT,Q1e),e(Q1e,amr),e(PT,nmr),e(PT,NW),e(NW,smr),e(PT,lmr),e(N,imr),e(N,BT),e(BT,H1e),e(H1e,dmr),e(BT,cmr),e(BT,jW),e(jW,fmr),e(BT,mmr),e(N,gmr),e(N,IT),e(IT,U1e),e(U1e,hmr),e(IT,pmr),e(IT,DW),e(DW,umr),e(IT,_mr),e(N,bmr),e(N,qT),e(qT,J1e),e(J1e,vmr),e(qT,Fmr),e(qT,GW),e(GW,Tmr),e(qT,Mmr),e(N,Emr),e(N,NT),e(NT,Y1e),e(Y1e,Cmr),e(NT,wmr),e(NT,OW),e(OW,Amr),e(NT,ymr),e(N,Lmr),e(N,jT),e(jT,K1e),e(K1e,xmr),e(jT,$mr),e(jT,VW),e(VW,kmr),e(jT,Smr),e(N,Rmr),e(N,DT),e(DT,Z1e),e(Z1e,Pmr),e(DT,Bmr),e(DT,XW),e(XW,Imr),e(DT,qmr),e(wr,Nmr),M(GT,wr,null),b(f,jNe,_),b(f,Xd,_),e(Xd,OT),e(OT,ebe),M(i8,ebe,null),e(Xd,jmr),e(Xd,obe),e(obe,Dmr),b(f,DNe,_),b(f,Ko,_),M(d8,Ko,null),e(Ko,Gmr),e(Ko,zd),e(zd,Omr),e(zd,zW),e(zW,Vmr),e(zd,Xmr),e(zd,WW),e(WW,zmr),e(zd,Wmr),e(Ko,Qmr),e(Ko,c8),e(c8,Hmr),e(c8,rbe),e(rbe,Umr),e(c8,Jmr),e(Ko,Ymr),e(Ko,Lt),M(f8,Lt,null),e(Lt,Kmr),e(Lt,tbe),e(tbe,Zmr),e(Lt,egr),e(Lt,Wd),e(Wd,ogr),e(Wd,abe),e(abe,rgr),e(Wd,tgr),e(Wd,QW),e(QW,agr),e(Wd,ngr),e(Lt,sgr),M(VT,Lt,null),e(Ko,lgr),e(Ko,Ar),M(m8,Ar,null),e(Ar,igr),e(Ar,nbe),e(nbe,dgr),e(Ar,cgr),e(Ar,Za),e(Za,fgr),e(Za,sbe),e(sbe,mgr),e(Za,ggr),e(Za,lbe),e(lbe,hgr),e(Za,pgr),e(Za,ibe),e(ibe,ugr),e(Za,_gr),e(Ar,bgr),e(Ar,se),e(se,XT),e(XT,dbe),e(dbe,vgr),e(XT,Fgr),e(XT,HW),e(HW,Tgr),e(XT,Mgr),e(se,Egr),e(se,zT),e(zT,cbe),e(cbe,Cgr),e(zT,wgr),e(zT,UW),e(UW,Agr),e(zT,ygr),e(se,Lgr),e(se,WT),e(WT,fbe),e(fbe,xgr),e(WT,$gr),e(WT,JW),e(JW,kgr),e(WT,Sgr),e(se,Rgr),e(se,QT),e(QT,mbe),e(mbe,Pgr),e(QT,Bgr),e(QT,YW),e(YW,Igr),e(QT,qgr),e(se,Ngr),e(se,HT),e(HT,gbe),e(gbe,jgr),e(HT,Dgr),e(HT,KW),e(KW,Ggr),e(HT,Ogr),e(se,Vgr),e(se,UT),e(UT,hbe),e(hbe,Xgr),e(UT,zgr),e(UT,ZW),e(ZW,Wgr),e(UT,Qgr),e(se,Hgr),e(se,JT),e(JT,pbe),e(pbe,Ugr),e(JT,Jgr),e(JT,eQ),e(eQ,Ygr),e(JT,Kgr),e(se,Zgr),e(se,YT),e(YT,ube),e(ube,ehr),e(YT,ohr),e(YT,oQ),e(oQ,rhr),e(YT,thr),e(se,ahr),e(se,KT),e(KT,_be),e(_be,nhr),e(KT,shr),e(KT,rQ),e(rQ,lhr),e(KT,ihr),e(se,dhr),e(se,ZT),e(ZT,bbe),e(bbe,chr),e(ZT,fhr),e(ZT,tQ),e(tQ,mhr),e(ZT,ghr),e(se,hhr),e(se,e7),e(e7,vbe),e(vbe,phr),e(e7,uhr),e(e7,aQ),e(aQ,_hr),e(e7,bhr),e(se,vhr),e(se,o7),e(o7,Fbe),e(Fbe,Fhr),e(o7,Thr),e(o7,nQ),e(nQ,Mhr),e(o7,Ehr),e(se,Chr),e(se,r7),e(r7,Tbe),e(Tbe,whr),e(r7,Ahr),e(r7,sQ),e(sQ,yhr),e(r7,Lhr),e(se,xhr),e(se,t7),e(t7,Mbe),e(Mbe,$hr),e(t7,khr),e(t7,lQ),e(lQ,Shr),e(t7,Rhr),e(se,Phr),e(se,a7),e(a7,Ebe),e(Ebe,Bhr),e(a7,Ihr),e(a7,iQ),e(iQ,qhr),e(a7,Nhr),e(se,jhr),e(se,n7),e(n7,Cbe),e(Cbe,Dhr),e(n7,Ghr),e(n7,dQ),e(dQ,Ohr),e(n7,Vhr),e(se,Xhr),e(se,s7),e(s7,wbe),e(wbe,zhr),e(s7,Whr),e(s7,cQ),e(cQ,Qhr),e(s7,Hhr),e(se,Uhr),e(se,l7),e(l7,Abe),e(Abe,Jhr),e(l7,Yhr),e(l7,fQ),e(fQ,Khr),e(l7,Zhr),e(se,epr),e(se,i7),e(i7,ybe),e(ybe,opr),e(i7,rpr),e(i7,mQ),e(mQ,tpr),e(i7,apr),e(se,npr),e(se,d7),e(d7,Lbe),e(Lbe,spr),e(d7,lpr),e(d7,gQ),e(gQ,ipr),e(d7,dpr),e(se,cpr),e(se,c7),e(c7,xbe),e(xbe,fpr),e(c7,mpr),e(c7,hQ),e(hQ,gpr),e(c7,hpr),e(se,ppr),e(se,f7),e(f7,$be),e($be,upr),e(f7,_pr),e(f7,pQ),e(pQ,bpr),e(f7,vpr),e(se,Fpr),e(se,m7),e(m7,kbe),e(kbe,Tpr),e(m7,Mpr),e(m7,uQ),e(uQ,Epr),e(m7,Cpr),e(Ar,wpr),M(g7,Ar,null),b(f,GNe,_),b(f,Qd,_),e(Qd,h7),e(h7,Sbe),M(g8,Sbe,null),e(Qd,Apr),e(Qd,Rbe),e(Rbe,ypr),b(f,ONe,_),b(f,Zo,_),M(h8,Zo,null),e(Zo,Lpr),e(Zo,Hd),e(Hd,xpr),e(Hd,_Q),e(_Q,$pr),e(Hd,kpr),e(Hd,bQ),e(bQ,Spr),e(Hd,Rpr),e(Zo,Ppr),e(Zo,p8),e(p8,Bpr),e(p8,Pbe),e(Pbe,Ipr),e(p8,qpr),e(Zo,Npr),e(Zo,xt),M(u8,xt,null),e(xt,jpr),e(xt,Bbe),e(Bbe,Dpr),e(xt,Gpr),e(xt,Ud),e(Ud,Opr),e(Ud,Ibe),e(Ibe,Vpr),e(Ud,Xpr),e(Ud,vQ),e(vQ,zpr),e(Ud,Wpr),e(xt,Qpr),M(p7,xt,null),e(Zo,Hpr),e(Zo,yr),M(_8,yr,null),e(yr,Upr),e(yr,qbe),e(qbe,Jpr),e(yr,Ypr),e(yr,en),e(en,Kpr),e(en,Nbe),e(Nbe,Zpr),e(en,eur),e(en,jbe),e(jbe,our),e(en,rur),e(en,Dbe),e(Dbe,tur),e(en,aur),e(yr,nur),e(yr,Me),e(Me,u7),e(u7,Gbe),e(Gbe,sur),e(u7,lur),e(u7,FQ),e(FQ,iur),e(u7,dur),e(Me,cur),e(Me,_7),e(_7,Obe),e(Obe,fur),e(_7,mur),e(_7,TQ),e(TQ,gur),e(_7,hur),e(Me,pur),e(Me,b7),e(b7,Vbe),e(Vbe,uur),e(b7,_ur),e(b7,MQ),e(MQ,bur),e(b7,vur),e(Me,Fur),e(Me,v7),e(v7,Xbe),e(Xbe,Tur),e(v7,Mur),e(v7,EQ),e(EQ,Eur),e(v7,Cur),e(Me,wur),e(Me,F7),e(F7,zbe),e(zbe,Aur),e(F7,yur),e(F7,CQ),e(CQ,Lur),e(F7,xur),e(Me,$ur),e(Me,T7),e(T7,Wbe),e(Wbe,kur),e(T7,Sur),e(T7,wQ),e(wQ,Rur),e(T7,Pur),e(Me,Bur),e(Me,M7),e(M7,Qbe),e(Qbe,Iur),e(M7,qur),e(M7,AQ),e(AQ,Nur),e(M7,jur),e(Me,Dur),e(Me,E7),e(E7,Hbe),e(Hbe,Gur),e(E7,Our),e(E7,yQ),e(yQ,Vur),e(E7,Xur),e(Me,zur),e(Me,C7),e(C7,Ube),e(Ube,Wur),e(C7,Qur),e(C7,LQ),e(LQ,Hur),e(C7,Uur),e(Me,Jur),e(Me,w7),e(w7,Jbe),e(Jbe,Yur),e(w7,Kur),e(w7,xQ),e(xQ,Zur),e(w7,e_r),e(Me,o_r),e(Me,A7),e(A7,Ybe),e(Ybe,r_r),e(A7,t_r),e(A7,$Q),e($Q,a_r),e(A7,n_r),e(Me,s_r),e(Me,y7),e(y7,Kbe),e(Kbe,l_r),e(y7,i_r),e(y7,kQ),e(kQ,d_r),e(y7,c_r),e(yr,f_r),M(L7,yr,null),b(f,VNe,_),b(f,Jd,_),e(Jd,x7),e(x7,Zbe),M(b8,Zbe,null),e(Jd,m_r),e(Jd,e2e),e(e2e,g_r),b(f,XNe,_),b(f,er,_),M(v8,er,null),e(er,h_r),e(er,Yd),e(Yd,p_r),e(Yd,SQ),e(SQ,u_r),e(Yd,__r),e(Yd,RQ),e(RQ,b_r),e(Yd,v_r),e(er,F_r),e(er,F8),e(F8,T_r),e(F8,o2e),e(o2e,M_r),e(F8,E_r),e(er,C_r),e(er,$t),M(T8,$t,null),e($t,w_r),e($t,r2e),e(r2e,A_r),e($t,y_r),e($t,Kd),e(Kd,L_r),e(Kd,t2e),e(t2e,x_r),e(Kd,$_r),e(Kd,PQ),e(PQ,k_r),e(Kd,S_r),e($t,R_r),M($7,$t,null),e(er,P_r),e(er,Lr),M(M8,Lr,null),e(Lr,B_r),e(Lr,a2e),e(a2e,I_r),e(Lr,q_r),e(Lr,on),e(on,N_r),e(on,n2e),e(n2e,j_r),e(on,D_r),e(on,s2e),e(s2e,G_r),e(on,O_r),e(on,l2e),e(l2e,V_r),e(on,X_r),e(Lr,z_r),e(Lr,rn),e(rn,k7),e(k7,i2e),e(i2e,W_r),e(k7,Q_r),e(k7,BQ),e(BQ,H_r),e(k7,U_r),e(rn,J_r),e(rn,S7),e(S7,d2e),e(d2e,Y_r),e(S7,K_r),e(S7,IQ),e(IQ,Z_r),e(S7,e0r),e(rn,o0r),e(rn,R7),e(R7,c2e),e(c2e,r0r),e(R7,t0r),e(R7,qQ),e(qQ,a0r),e(R7,n0r),e(rn,s0r),e(rn,P7),e(P7,f2e),e(f2e,l0r),e(P7,i0r),e(P7,NQ),e(NQ,d0r),e(P7,c0r),e(Lr,f0r),M(B7,Lr,null),b(f,zNe,_),b(f,Zd,_),e(Zd,I7),e(I7,m2e),M(E8,m2e,null),e(Zd,m0r),e(Zd,g2e),e(g2e,g0r),b(f,WNe,_),b(f,or,_),M(C8,or,null),e(or,h0r),e(or,ec),e(ec,p0r),e(ec,jQ),e(jQ,u0r),e(ec,_0r),e(ec,DQ),e(DQ,b0r),e(ec,v0r),e(or,F0r),e(or,w8),e(w8,T0r),e(w8,h2e),e(h2e,M0r),e(w8,E0r),e(or,C0r),e(or,kt),M(A8,kt,null),e(kt,w0r),e(kt,p2e),e(p2e,A0r),e(kt,y0r),e(kt,oc),e(oc,L0r),e(oc,u2e),e(u2e,x0r),e(oc,$0r),e(oc,GQ),e(GQ,k0r),e(oc,S0r),e(kt,R0r),M(q7,kt,null),e(or,P0r),e(or,xr),M(y8,xr,null),e(xr,B0r),e(xr,_2e),e(_2e,I0r),e(xr,q0r),e(xr,tn),e(tn,N0r),e(tn,b2e),e(b2e,j0r),e(tn,D0r),e(tn,v2e),e(v2e,G0r),e(tn,O0r),e(tn,F2e),e(F2e,V0r),e(tn,X0r),e(xr,z0r),e(xr,ie),e(ie,N7),e(N7,T2e),e(T2e,W0r),e(N7,Q0r),e(N7,OQ),e(OQ,H0r),e(N7,U0r),e(ie,J0r),e(ie,j7),e(j7,M2e),e(M2e,Y0r),e(j7,K0r),e(j7,VQ),e(VQ,Z0r),e(j7,e1r),e(ie,o1r),e(ie,D7),e(D7,E2e),e(E2e,r1r),e(D7,t1r),e(D7,XQ),e(XQ,a1r),e(D7,n1r),e(ie,s1r),e(ie,G7),e(G7,C2e),e(C2e,l1r),e(G7,i1r),e(G7,zQ),e(zQ,d1r),e(G7,c1r),e(ie,f1r),e(ie,O7),e(O7,w2e),e(w2e,m1r),e(O7,g1r),e(O7,WQ),e(WQ,h1r),e(O7,p1r),e(ie,u1r),e(ie,V7),e(V7,A2e),e(A2e,_1r),e(V7,b1r),e(V7,QQ),e(QQ,v1r),e(V7,F1r),e(ie,T1r),e(ie,X7),e(X7,y2e),e(y2e,M1r),e(X7,E1r),e(X7,HQ),e(HQ,C1r),e(X7,w1r),e(ie,A1r),e(ie,z7),e(z7,L2e),e(L2e,y1r),e(z7,L1r),e(z7,UQ),e(UQ,x1r),e(z7,$1r),e(ie,k1r),e(ie,W7),e(W7,x2e),e(x2e,S1r),e(W7,R1r),e(W7,JQ),e(JQ,P1r),e(W7,B1r),e(ie,I1r),e(ie,Q7),e(Q7,$2e),e($2e,q1r),e(Q7,N1r),e(Q7,YQ),e(YQ,j1r),e(Q7,D1r),e(ie,G1r),e(ie,H7),e(H7,k2e),e(k2e,O1r),e(H7,V1r),e(H7,KQ),e(KQ,X1r),e(H7,z1r),e(ie,W1r),e(ie,U7),e(U7,S2e),e(S2e,Q1r),e(U7,H1r),e(U7,ZQ),e(ZQ,U1r),e(U7,J1r),e(ie,Y1r),e(ie,J7),e(J7,R2e),e(R2e,K1r),e(J7,Z1r),e(J7,eH),e(eH,ebr),e(J7,obr),e(ie,rbr),e(ie,Y7),e(Y7,P2e),e(P2e,tbr),e(Y7,abr),e(Y7,oH),e(oH,nbr),e(Y7,sbr),e(ie,lbr),e(ie,K7),e(K7,B2e),e(B2e,ibr),e(K7,dbr),e(K7,rH),e(rH,cbr),e(K7,fbr),e(ie,mbr),e(ie,Z7),e(Z7,I2e),e(I2e,gbr),e(Z7,hbr),e(Z7,tH),e(tH,pbr),e(Z7,ubr),e(ie,_br),e(ie,eM),e(eM,q2e),e(q2e,bbr),e(eM,vbr),e(eM,aH),e(aH,Fbr),e(eM,Tbr),e(ie,Mbr),e(ie,oM),e(oM,N2e),e(N2e,Ebr),e(oM,Cbr),e(oM,nH),e(nH,wbr),e(oM,Abr),e(ie,ybr),e(ie,rM),e(rM,j2e),e(j2e,Lbr),e(rM,xbr),e(rM,sH),e(sH,$br),e(rM,kbr),e(ie,Sbr),e(ie,tM),e(tM,D2e),e(D2e,Rbr),e(tM,Pbr),e(tM,lH),e(lH,Bbr),e(tM,Ibr),e(xr,qbr),M(aM,xr,null),b(f,QNe,_),b(f,rc,_),e(rc,nM),e(nM,G2e),M(L8,G2e,null),e(rc,Nbr),e(rc,O2e),e(O2e,jbr),b(f,HNe,_),b(f,rr,_),M(x8,rr,null),e(rr,Dbr),e(rr,tc),e(tc,Gbr),e(tc,iH),e(iH,Obr),e(tc,Vbr),e(tc,dH),e(dH,Xbr),e(tc,zbr),e(rr,Wbr),e(rr,$8),e($8,Qbr),e($8,V2e),e(V2e,Hbr),e($8,Ubr),e(rr,Jbr),e(rr,St),M(k8,St,null),e(St,Ybr),e(St,X2e),e(X2e,Kbr),e(St,Zbr),e(St,ac),e(ac,e2r),e(ac,z2e),e(z2e,o2r),e(ac,r2r),e(ac,cH),e(cH,t2r),e(ac,a2r),e(St,n2r),M(sM,St,null),e(rr,s2r),e(rr,$r),M(S8,$r,null),e($r,l2r),e($r,W2e),e(W2e,i2r),e($r,d2r),e($r,an),e(an,c2r),e(an,Q2e),e(Q2e,f2r),e(an,m2r),e(an,H2e),e(H2e,g2r),e(an,h2r),e(an,U2e),e(U2e,p2r),e(an,u2r),e($r,_2r),e($r,ye),e(ye,lM),e(lM,J2e),e(J2e,b2r),e(lM,v2r),e(lM,fH),e(fH,F2r),e(lM,T2r),e(ye,M2r),e(ye,iM),e(iM,Y2e),e(Y2e,E2r),e(iM,C2r),e(iM,mH),e(mH,w2r),e(iM,A2r),e(ye,y2r),e(ye,dM),e(dM,K2e),e(K2e,L2r),e(dM,x2r),e(dM,gH),e(gH,$2r),e(dM,k2r),e(ye,S2r),e(ye,cM),e(cM,Z2e),e(Z2e,R2r),e(cM,P2r),e(cM,hH),e(hH,B2r),e(cM,I2r),e(ye,q2r),e(ye,fM),e(fM,eve),e(eve,N2r),e(fM,j2r),e(fM,pH),e(pH,D2r),e(fM,G2r),e(ye,O2r),e(ye,mM),e(mM,ove),e(ove,V2r),e(mM,X2r),e(mM,uH),e(uH,z2r),e(mM,W2r),e(ye,Q2r),e(ye,gM),e(gM,rve),e(rve,H2r),e(gM,U2r),e(gM,_H),e(_H,J2r),e(gM,Y2r),e(ye,K2r),e(ye,hM),e(hM,tve),e(tve,Z2r),e(hM,evr),e(hM,bH),e(bH,ovr),e(hM,rvr),e(ye,tvr),e(ye,pM),e(pM,ave),e(ave,avr),e(pM,nvr),e(pM,vH),e(vH,svr),e(pM,lvr),e(ye,ivr),e(ye,uM),e(uM,nve),e(nve,dvr),e(uM,cvr),e(uM,FH),e(FH,fvr),e(uM,mvr),e($r,gvr),M(_M,$r,null),b(f,UNe,_),b(f,nc,_),e(nc,bM),e(bM,sve),M(R8,sve,null),e(nc,hvr),e(nc,lve),e(lve,pvr),b(f,JNe,_),b(f,tr,_),M(P8,tr,null),e(tr,uvr),e(tr,sc),e(sc,_vr),e(sc,TH),e(TH,bvr),e(sc,vvr),e(sc,MH),e(MH,Fvr),e(sc,Tvr),e(tr,Mvr),e(tr,B8),e(B8,Evr),e(B8,ive),e(ive,Cvr),e(B8,wvr),e(tr,Avr),e(tr,Rt),M(I8,Rt,null),e(Rt,yvr),e(Rt,dve),e(dve,Lvr),e(Rt,xvr),e(Rt,lc),e(lc,$vr),e(lc,cve),e(cve,kvr),e(lc,Svr),e(lc,EH),e(EH,Rvr),e(lc,Pvr),e(Rt,Bvr),M(vM,Rt,null),e(tr,Ivr),e(tr,kr),M(q8,kr,null),e(kr,qvr),e(kr,fve),e(fve,Nvr),e(kr,jvr),e(kr,nn),e(nn,Dvr),e(nn,mve),e(mve,Gvr),e(nn,Ovr),e(nn,gve),e(gve,Vvr),e(nn,Xvr),e(nn,hve),e(hve,zvr),e(nn,Wvr),e(kr,Qvr),e(kr,oe),e(oe,FM),e(FM,pve),e(pve,Hvr),e(FM,Uvr),e(FM,CH),e(CH,Jvr),e(FM,Yvr),e(oe,Kvr),e(oe,TM),e(TM,uve),e(uve,Zvr),e(TM,eFr),e(TM,wH),e(wH,oFr),e(TM,rFr),e(oe,tFr),e(oe,MM),e(MM,_ve),e(_ve,aFr),e(MM,nFr),e(MM,AH),e(AH,sFr),e(MM,lFr),e(oe,iFr),e(oe,EM),e(EM,bve),e(bve,dFr),e(EM,cFr),e(EM,yH),e(yH,fFr),e(EM,mFr),e(oe,gFr),e(oe,CM),e(CM,vve),e(vve,hFr),e(CM,pFr),e(CM,LH),e(LH,uFr),e(CM,_Fr),e(oe,bFr),e(oe,wM),e(wM,Fve),e(Fve,vFr),e(wM,FFr),e(wM,xH),e(xH,TFr),e(wM,MFr),e(oe,EFr),e(oe,AM),e(AM,Tve),e(Tve,CFr),e(AM,wFr),e(AM,$H),e($H,AFr),e(AM,yFr),e(oe,LFr),e(oe,yM),e(yM,Mve),e(Mve,xFr),e(yM,$Fr),e(yM,kH),e(kH,kFr),e(yM,SFr),e(oe,RFr),e(oe,LM),e(LM,Eve),e(Eve,PFr),e(LM,BFr),e(LM,SH),e(SH,IFr),e(LM,qFr),e(oe,NFr),e(oe,xM),e(xM,Cve),e(Cve,jFr),e(xM,DFr),e(xM,RH),e(RH,GFr),e(xM,OFr),e(oe,VFr),e(oe,$M),e($M,wve),e(wve,XFr),e($M,zFr),e($M,PH),e(PH,WFr),e($M,QFr),e(oe,HFr),e(oe,kM),e(kM,Ave),e(Ave,UFr),e(kM,JFr),e(kM,BH),e(BH,YFr),e(kM,KFr),e(oe,ZFr),e(oe,SM),e(SM,yve),e(yve,e6r),e(SM,o6r),e(SM,IH),e(IH,r6r),e(SM,t6r),e(oe,a6r),e(oe,RM),e(RM,Lve),e(Lve,n6r),e(RM,s6r),e(RM,qH),e(qH,l6r),e(RM,i6r),e(oe,d6r),e(oe,PM),e(PM,xve),e(xve,c6r),e(PM,f6r),e(PM,NH),e(NH,m6r),e(PM,g6r),e(oe,h6r),e(oe,BM),e(BM,$ve),e($ve,p6r),e(BM,u6r),e(BM,jH),e(jH,_6r),e(BM,b6r),e(oe,v6r),e(oe,IM),e(IM,kve),e(kve,F6r),e(IM,T6r),e(IM,DH),e(DH,M6r),e(IM,E6r),e(oe,C6r),e(oe,qM),e(qM,Sve),e(Sve,w6r),e(qM,A6r),e(qM,GH),e(GH,y6r),e(qM,L6r),e(oe,x6r),e(oe,NM),e(NM,Rve),e(Rve,$6r),e(NM,k6r),e(NM,OH),e(OH,S6r),e(NM,R6r),e(oe,P6r),e(oe,jM),e(jM,Pve),e(Pve,B6r),e(jM,I6r),e(jM,VH),e(VH,q6r),e(jM,N6r),e(oe,j6r),e(oe,DM),e(DM,Bve),e(Bve,D6r),e(DM,G6r),e(DM,XH),e(XH,O6r),e(DM,V6r),e(oe,X6r),e(oe,GM),e(GM,Ive),e(Ive,z6r),e(GM,W6r),e(GM,zH),e(zH,Q6r),e(GM,H6r),e(oe,U6r),e(oe,OM),e(OM,qve),e(qve,J6r),e(OM,Y6r),e(OM,WH),e(WH,K6r),e(OM,Z6r),e(oe,eTr),e(oe,VM),e(VM,Nve),e(Nve,oTr),e(VM,rTr),e(VM,QH),e(QH,tTr),e(VM,aTr),e(oe,nTr),e(oe,XM),e(XM,jve),e(jve,sTr),e(XM,lTr),e(XM,HH),e(HH,iTr),e(XM,dTr),e(oe,cTr),e(oe,zM),e(zM,Dve),e(Dve,fTr),e(zM,mTr),e(zM,UH),e(UH,gTr),e(zM,hTr),e(kr,pTr),M(WM,kr,null),b(f,YNe,_),b(f,ic,_),e(ic,QM),e(QM,Gve),M(N8,Gve,null),e(ic,uTr),e(ic,Ove),e(Ove,_Tr),b(f,KNe,_),b(f,ar,_),M(j8,ar,null),e(ar,bTr),e(ar,dc),e(dc,vTr),e(dc,JH),e(JH,FTr),e(dc,TTr),e(dc,YH),e(YH,MTr),e(dc,ETr),e(ar,CTr),e(ar,D8),e(D8,wTr),e(D8,Vve),e(Vve,ATr),e(D8,yTr),e(ar,LTr),e(ar,Pt),M(G8,Pt,null),e(Pt,xTr),e(Pt,Xve),e(Xve,$Tr),e(Pt,kTr),e(Pt,cc),e(cc,STr),e(cc,zve),e(zve,RTr),e(cc,PTr),e(cc,KH),e(KH,BTr),e(cc,ITr),e(Pt,qTr),M(HM,Pt,null),e(ar,NTr),e(ar,Sr),M(O8,Sr,null),e(Sr,jTr),e(Sr,Wve),e(Wve,DTr),e(Sr,GTr),e(Sr,sn),e(sn,OTr),e(sn,Qve),e(Qve,VTr),e(sn,XTr),e(sn,Hve),e(Hve,zTr),e(sn,WTr),e(sn,Uve),e(Uve,QTr),e(sn,HTr),e(Sr,UTr),e(Sr,pe),e(pe,UM),e(UM,Jve),e(Jve,JTr),e(UM,YTr),e(UM,ZH),e(ZH,KTr),e(UM,ZTr),e(pe,e7r),e(pe,JM),e(JM,Yve),e(Yve,o7r),e(JM,r7r),e(JM,eU),e(eU,t7r),e(JM,a7r),e(pe,n7r),e(pe,YM),e(YM,Kve),e(Kve,s7r),e(YM,l7r),e(YM,oU),e(oU,i7r),e(YM,d7r),e(pe,c7r),e(pe,KM),e(KM,Zve),e(Zve,f7r),e(KM,m7r),e(KM,rU),e(rU,g7r),e(KM,h7r),e(pe,p7r),e(pe,ZM),e(ZM,eFe),e(eFe,u7r),e(ZM,_7r),e(ZM,tU),e(tU,b7r),e(ZM,v7r),e(pe,F7r),e(pe,e4),e(e4,oFe),e(oFe,T7r),e(e4,M7r),e(e4,aU),e(aU,E7r),e(e4,C7r),e(pe,w7r),e(pe,o4),e(o4,rFe),e(rFe,A7r),e(o4,y7r),e(o4,nU),e(nU,L7r),e(o4,x7r),e(pe,$7r),e(pe,r4),e(r4,tFe),e(tFe,k7r),e(r4,S7r),e(r4,sU),e(sU,R7r),e(r4,P7r),e(pe,B7r),e(pe,t4),e(t4,aFe),e(aFe,I7r),e(t4,q7r),e(t4,lU),e(lU,N7r),e(t4,j7r),e(pe,D7r),e(pe,a4),e(a4,nFe),e(nFe,G7r),e(a4,O7r),e(a4,iU),e(iU,V7r),e(a4,X7r),e(pe,z7r),e(pe,n4),e(n4,sFe),e(sFe,W7r),e(n4,Q7r),e(n4,dU),e(dU,H7r),e(n4,U7r),e(pe,J7r),e(pe,s4),e(s4,lFe),e(lFe,Y7r),e(s4,K7r),e(s4,cU),e(cU,Z7r),e(s4,eMr),e(pe,oMr),e(pe,l4),e(l4,iFe),e(iFe,rMr),e(l4,tMr),e(l4,fU),e(fU,aMr),e(l4,nMr),e(pe,sMr),e(pe,i4),e(i4,dFe),e(dFe,lMr),e(i4,iMr),e(i4,mU),e(mU,dMr),e(i4,cMr),e(pe,fMr),e(pe,d4),e(d4,cFe),e(cFe,mMr),e(d4,gMr),e(d4,gU),e(gU,hMr),e(d4,pMr),e(pe,uMr),e(pe,c4),e(c4,fFe),e(fFe,_Mr),e(c4,bMr),e(c4,hU),e(hU,vMr),e(c4,FMr),e(pe,TMr),e(pe,f4),e(f4,mFe),e(mFe,MMr),e(f4,EMr),e(f4,pU),e(pU,CMr),e(f4,wMr),e(Sr,AMr),M(m4,Sr,null),b(f,ZNe,_),b(f,fc,_),e(fc,g4),e(g4,gFe),M(V8,gFe,null),e(fc,yMr),e(fc,hFe),e(hFe,LMr),b(f,eje,_),b(f,nr,_),M(X8,nr,null),e(nr,xMr),e(nr,mc),e(mc,$Mr),e(mc,uU),e(uU,kMr),e(mc,SMr),e(mc,_U),e(_U,RMr),e(mc,PMr),e(nr,BMr),e(nr,z8),e(z8,IMr),e(z8,pFe),e(pFe,qMr),e(z8,NMr),e(nr,jMr),e(nr,Bt),M(W8,Bt,null),e(Bt,DMr),e(Bt,uFe),e(uFe,GMr),e(Bt,OMr),e(Bt,gc),e(gc,VMr),e(gc,_Fe),e(_Fe,XMr),e(gc,zMr),e(gc,bU),e(bU,WMr),e(gc,QMr),e(Bt,HMr),M(h4,Bt,null),e(nr,UMr),e(nr,Rr),M(Q8,Rr,null),e(Rr,JMr),e(Rr,bFe),e(bFe,YMr),e(Rr,KMr),e(Rr,ln),e(ln,ZMr),e(ln,vFe),e(vFe,e4r),e(ln,o4r),e(ln,FFe),e(FFe,r4r),e(ln,t4r),e(ln,TFe),e(TFe,a4r),e(ln,n4r),e(Rr,s4r),e(Rr,H8),e(H8,p4),e(p4,MFe),e(MFe,l4r),e(p4,i4r),e(p4,vU),e(vU,d4r),e(p4,c4r),e(H8,f4r),e(H8,u4),e(u4,EFe),e(EFe,m4r),e(u4,g4r),e(u4,FU),e(FU,h4r),e(u4,p4r),e(Rr,u4r),M(_4,Rr,null),b(f,oje,_),b(f,hc,_),e(hc,b4),e(b4,CFe),M(U8,CFe,null),e(hc,_4r),e(hc,wFe),e(wFe,b4r),b(f,rje,_),b(f,sr,_),M(J8,sr,null),e(sr,v4r),e(sr,pc),e(pc,F4r),e(pc,TU),e(TU,T4r),e(pc,M4r),e(pc,MU),e(MU,E4r),e(pc,C4r),e(sr,w4r),e(sr,Y8),e(Y8,A4r),e(Y8,AFe),e(AFe,y4r),e(Y8,L4r),e(sr,x4r),e(sr,It),M(K8,It,null),e(It,$4r),e(It,yFe),e(yFe,k4r),e(It,S4r),e(It,uc),e(uc,R4r),e(uc,LFe),e(LFe,P4r),e(uc,B4r),e(uc,EU),e(EU,I4r),e(uc,q4r),e(It,N4r),M(v4,It,null),e(sr,j4r),e(sr,Pr),M(Z8,Pr,null),e(Pr,D4r),e(Pr,xFe),e(xFe,G4r),e(Pr,O4r),e(Pr,dn),e(dn,V4r),e(dn,$Fe),e($Fe,X4r),e(dn,z4r),e(dn,kFe),e(kFe,W4r),e(dn,Q4r),e(dn,SFe),e(SFe,H4r),e(dn,U4r),e(Pr,J4r),e(Pr,RFe),e(RFe,F4),e(F4,PFe),e(PFe,Y4r),e(F4,K4r),e(F4,CU),e(CU,Z4r),e(F4,eEr),e(Pr,oEr),M(T4,Pr,null),b(f,tje,_),b(f,_c,_),e(_c,M4),e(M4,BFe),M(e9,BFe,null),e(_c,rEr),e(_c,IFe),e(IFe,tEr),b(f,aje,_),b(f,lr,_),M(o9,lr,null),e(lr,aEr),e(lr,bc),e(bc,nEr),e(bc,wU),e(wU,sEr),e(bc,lEr),e(bc,AU),e(AU,iEr),e(bc,dEr),e(lr,cEr),e(lr,r9),e(r9,fEr),e(r9,qFe),e(qFe,mEr),e(r9,gEr),e(lr,hEr),e(lr,qt),M(t9,qt,null),e(qt,pEr),e(qt,NFe),e(NFe,uEr),e(qt,_Er),e(qt,vc),e(vc,bEr),e(vc,jFe),e(jFe,vEr),e(vc,FEr),e(vc,yU),e(yU,TEr),e(vc,MEr),e(qt,EEr),M(E4,qt,null),e(lr,CEr),e(lr,Br),M(a9,Br,null),e(Br,wEr),e(Br,DFe),e(DFe,AEr),e(Br,yEr),e(Br,cn),e(cn,LEr),e(cn,GFe),e(GFe,xEr),e(cn,$Er),e(cn,OFe),e(OFe,kEr),e(cn,SEr),e(cn,VFe),e(VFe,REr),e(cn,PEr),e(Br,BEr),e(Br,de),e(de,C4),e(C4,XFe),e(XFe,IEr),e(C4,qEr),e(C4,LU),e(LU,NEr),e(C4,jEr),e(de,DEr),e(de,w4),e(w4,zFe),e(zFe,GEr),e(w4,OEr),e(w4,xU),e(xU,VEr),e(w4,XEr),e(de,zEr),e(de,A4),e(A4,WFe),e(WFe,WEr),e(A4,QEr),e(A4,$U),e($U,HEr),e(A4,UEr),e(de,JEr),e(de,y4),e(y4,QFe),e(QFe,YEr),e(y4,KEr),e(y4,kU),e(kU,ZEr),e(y4,eCr),e(de,oCr),e(de,L4),e(L4,HFe),e(HFe,rCr),e(L4,tCr),e(L4,SU),e(SU,aCr),e(L4,nCr),e(de,sCr),e(de,x4),e(x4,UFe),e(UFe,lCr),e(x4,iCr),e(x4,RU),e(RU,dCr),e(x4,cCr),e(de,fCr),e(de,$4),e($4,JFe),e(JFe,mCr),e($4,gCr),e($4,PU),e(PU,hCr),e($4,pCr),e(de,uCr),e(de,k4),e(k4,YFe),e(YFe,_Cr),e(k4,bCr),e(k4,BU),e(BU,vCr),e(k4,FCr),e(de,TCr),e(de,S4),e(S4,KFe),e(KFe,MCr),e(S4,ECr),e(S4,IU),e(IU,CCr),e(S4,wCr),e(de,ACr),e(de,R4),e(R4,ZFe),e(ZFe,yCr),e(R4,LCr),e(R4,qU),e(qU,xCr),e(R4,$Cr),e(de,kCr),e(de,P4),e(P4,e6e),e(e6e,SCr),e(P4,RCr),e(P4,NU),e(NU,PCr),e(P4,BCr),e(de,ICr),e(de,B4),e(B4,o6e),e(o6e,qCr),e(B4,NCr),e(B4,jU),e(jU,jCr),e(B4,DCr),e(de,GCr),e(de,I4),e(I4,r6e),e(r6e,OCr),e(I4,VCr),e(I4,DU),e(DU,XCr),e(I4,zCr),e(de,WCr),e(de,q4),e(q4,t6e),e(t6e,QCr),e(q4,HCr),e(q4,GU),e(GU,UCr),e(q4,JCr),e(de,YCr),e(de,N4),e(N4,a6e),e(a6e,KCr),e(N4,ZCr),e(N4,OU),e(OU,e5r),e(N4,o5r),e(de,r5r),e(de,j4),e(j4,n6e),e(n6e,t5r),e(j4,a5r),e(j4,VU),e(VU,n5r),e(j4,s5r),e(de,l5r),e(de,D4),e(D4,s6e),e(s6e,i5r),e(D4,d5r),e(D4,XU),e(XU,c5r),e(D4,f5r),e(de,m5r),e(de,G4),e(G4,l6e),e(l6e,g5r),e(G4,h5r),e(G4,zU),e(zU,p5r),e(G4,u5r),e(de,_5r),e(de,O4),e(O4,i6e),e(i6e,b5r),e(O4,v5r),e(O4,WU),e(WU,F5r),e(O4,T5r),e(de,M5r),e(de,V4),e(V4,d6e),e(d6e,E5r),e(V4,C5r),e(V4,QU),e(QU,w5r),e(V4,A5r),e(Br,y5r),M(X4,Br,null),b(f,nje,_),b(f,Fc,_),e(Fc,z4),e(z4,c6e),M(n9,c6e,null),e(Fc,L5r),e(Fc,f6e),e(f6e,x5r),b(f,sje,_),b(f,ir,_),M(s9,ir,null),e(ir,$5r),e(ir,Tc),e(Tc,k5r),e(Tc,HU),e(HU,S5r),e(Tc,R5r),e(Tc,UU),e(UU,P5r),e(Tc,B5r),e(ir,I5r),e(ir,l9),e(l9,q5r),e(l9,m6e),e(m6e,N5r),e(l9,j5r),e(ir,D5r),e(ir,Nt),M(i9,Nt,null),e(Nt,G5r),e(Nt,g6e),e(g6e,O5r),e(Nt,V5r),e(Nt,Mc),e(Mc,X5r),e(Mc,h6e),e(h6e,z5r),e(Mc,W5r),e(Mc,JU),e(JU,Q5r),e(Mc,H5r),e(Nt,U5r),M(W4,Nt,null),e(ir,J5r),e(ir,Ir),M(d9,Ir,null),e(Ir,Y5r),e(Ir,p6e),e(p6e,K5r),e(Ir,Z5r),e(Ir,fn),e(fn,e3r),e(fn,u6e),e(u6e,o3r),e(fn,r3r),e(fn,_6e),e(_6e,t3r),e(fn,a3r),e(fn,b6e),e(b6e,n3r),e(fn,s3r),e(Ir,l3r),e(Ir,ce),e(ce,Q4),e(Q4,v6e),e(v6e,i3r),e(Q4,d3r),e(Q4,YU),e(YU,c3r),e(Q4,f3r),e(ce,m3r),e(ce,H4),e(H4,F6e),e(F6e,g3r),e(H4,h3r),e(H4,KU),e(KU,p3r),e(H4,u3r),e(ce,_3r),e(ce,U4),e(U4,T6e),e(T6e,b3r),e(U4,v3r),e(U4,ZU),e(ZU,F3r),e(U4,T3r),e(ce,M3r),e(ce,J4),e(J4,M6e),e(M6e,E3r),e(J4,C3r),e(J4,eJ),e(eJ,w3r),e(J4,A3r),e(ce,y3r),e(ce,Y4),e(Y4,E6e),e(E6e,L3r),e(Y4,x3r),e(Y4,oJ),e(oJ,$3r),e(Y4,k3r),e(ce,S3r),e(ce,K4),e(K4,C6e),e(C6e,R3r),e(K4,P3r),e(K4,rJ),e(rJ,B3r),e(K4,I3r),e(ce,q3r),e(ce,Z4),e(Z4,w6e),e(w6e,N3r),e(Z4,j3r),e(Z4,tJ),e(tJ,D3r),e(Z4,G3r),e(ce,O3r),e(ce,eE),e(eE,A6e),e(A6e,V3r),e(eE,X3r),e(eE,aJ),e(aJ,z3r),e(eE,W3r),e(ce,Q3r),e(ce,oE),e(oE,y6e),e(y6e,H3r),e(oE,U3r),e(oE,nJ),e(nJ,J3r),e(oE,Y3r),e(ce,K3r),e(ce,rE),e(rE,L6e),e(L6e,Z3r),e(rE,ewr),e(rE,sJ),e(sJ,owr),e(rE,rwr),e(ce,twr),e(ce,tE),e(tE,x6e),e(x6e,awr),e(tE,nwr),e(tE,lJ),e(lJ,swr),e(tE,lwr),e(ce,iwr),e(ce,aE),e(aE,$6e),e($6e,dwr),e(aE,cwr),e(aE,iJ),e(iJ,fwr),e(aE,mwr),e(ce,gwr),e(ce,nE),e(nE,k6e),e(k6e,hwr),e(nE,pwr),e(nE,dJ),e(dJ,uwr),e(nE,_wr),e(ce,bwr),e(ce,sE),e(sE,S6e),e(S6e,vwr),e(sE,Fwr),e(sE,cJ),e(cJ,Twr),e(sE,Mwr),e(ce,Ewr),e(ce,lE),e(lE,R6e),e(R6e,Cwr),e(lE,wwr),e(lE,fJ),e(fJ,Awr),e(lE,ywr),e(ce,Lwr),e(ce,iE),e(iE,P6e),e(P6e,xwr),e(iE,$wr),e(iE,mJ),e(mJ,kwr),e(iE,Swr),e(ce,Rwr),e(ce,dE),e(dE,B6e),e(B6e,Pwr),e(dE,Bwr),e(dE,gJ),e(gJ,Iwr),e(dE,qwr),e(ce,Nwr),e(ce,cE),e(cE,I6e),e(I6e,jwr),e(cE,Dwr),e(cE,hJ),e(hJ,Gwr),e(cE,Owr),e(ce,Vwr),e(ce,fE),e(fE,q6e),e(q6e,Xwr),e(fE,zwr),e(fE,pJ),e(pJ,Wwr),e(fE,Qwr),e(ce,Hwr),e(ce,mE),e(mE,N6e),e(N6e,Uwr),e(mE,Jwr),e(mE,uJ),e(uJ,Ywr),e(mE,Kwr),e(Ir,Zwr),M(gE,Ir,null),b(f,lje,_),b(f,Ec,_),e(Ec,hE),e(hE,j6e),M(c9,j6e,null),e(Ec,eAr),e(Ec,D6e),e(D6e,oAr),b(f,ije,_),b(f,dr,_),M(f9,dr,null),e(dr,rAr),e(dr,Cc),e(Cc,tAr),e(Cc,_J),e(_J,aAr),e(Cc,nAr),e(Cc,bJ),e(bJ,sAr),e(Cc,lAr),e(dr,iAr),e(dr,m9),e(m9,dAr),e(m9,G6e),e(G6e,cAr),e(m9,fAr),e(dr,mAr),e(dr,jt),M(g9,jt,null),e(jt,gAr),e(jt,O6e),e(O6e,hAr),e(jt,pAr),e(jt,wc),e(wc,uAr),e(wc,V6e),e(V6e,_Ar),e(wc,bAr),e(wc,vJ),e(vJ,vAr),e(wc,FAr),e(jt,TAr),M(pE,jt,null),e(dr,MAr),e(dr,qr),M(h9,qr,null),e(qr,EAr),e(qr,X6e),e(X6e,CAr),e(qr,wAr),e(qr,mn),e(mn,AAr),e(mn,z6e),e(z6e,yAr),e(mn,LAr),e(mn,W6e),e(W6e,xAr),e(mn,$Ar),e(mn,Q6e),e(Q6e,kAr),e(mn,SAr),e(qr,RAr),e(qr,H6e),e(H6e,uE),e(uE,U6e),e(U6e,PAr),e(uE,BAr),e(uE,FJ),e(FJ,IAr),e(uE,qAr),e(qr,NAr),M(_E,qr,null),b(f,dje,_),b(f,Ac,_),e(Ac,bE),e(bE,J6e),M(p9,J6e,null),e(Ac,jAr),e(Ac,Y6e),e(Y6e,DAr),b(f,cje,_),b(f,cr,_),M(u9,cr,null),e(cr,GAr),e(cr,yc),e(yc,OAr),e(yc,TJ),e(TJ,VAr),e(yc,XAr),e(yc,MJ),e(MJ,zAr),e(yc,WAr),e(cr,QAr),e(cr,_9),e(_9,HAr),e(_9,K6e),e(K6e,UAr),e(_9,JAr),e(cr,YAr),e(cr,Dt),M(b9,Dt,null),e(Dt,KAr),e(Dt,Z6e),e(Z6e,ZAr),e(Dt,eyr),e(Dt,Lc),e(Lc,oyr),e(Lc,eTe),e(eTe,ryr),e(Lc,tyr),e(Lc,EJ),e(EJ,ayr),e(Lc,nyr),e(Dt,syr),M(vE,Dt,null),e(cr,lyr),e(cr,Nr),M(v9,Nr,null),e(Nr,iyr),e(Nr,oTe),e(oTe,dyr),e(Nr,cyr),e(Nr,gn),e(gn,fyr),e(gn,rTe),e(rTe,myr),e(gn,gyr),e(gn,tTe),e(tTe,hyr),e(gn,pyr),e(gn,aTe),e(aTe,uyr),e(gn,_yr),e(Nr,byr),e(Nr,nTe),e(nTe,FE),e(FE,sTe),e(sTe,vyr),e(FE,Fyr),e(FE,CJ),e(CJ,Tyr),e(FE,Myr),e(Nr,Eyr),M(TE,Nr,null),b(f,fje,_),b(f,xc,_),e(xc,ME),e(ME,lTe),M(F9,lTe,null),e(xc,Cyr),e(xc,iTe),e(iTe,wyr),b(f,mje,_),b(f,fr,_),M(T9,fr,null),e(fr,Ayr),e(fr,$c),e($c,yyr),e($c,wJ),e(wJ,Lyr),e($c,xyr),e($c,AJ),e(AJ,$yr),e($c,kyr),e(fr,Syr),e(fr,M9),e(M9,Ryr),e(M9,dTe),e(dTe,Pyr),e(M9,Byr),e(fr,Iyr),e(fr,Gt),M(E9,Gt,null),e(Gt,qyr),e(Gt,cTe),e(cTe,Nyr),e(Gt,jyr),e(Gt,kc),e(kc,Dyr),e(kc,fTe),e(fTe,Gyr),e(kc,Oyr),e(kc,yJ),e(yJ,Vyr),e(kc,Xyr),e(Gt,zyr),M(EE,Gt,null),e(fr,Wyr),e(fr,jr),M(C9,jr,null),e(jr,Qyr),e(jr,mTe),e(mTe,Hyr),e(jr,Uyr),e(jr,hn),e(hn,Jyr),e(hn,gTe),e(gTe,Yyr),e(hn,Kyr),e(hn,hTe),e(hTe,Zyr),e(hn,eLr),e(hn,pTe),e(pTe,oLr),e(hn,rLr),e(jr,tLr),e(jr,te),e(te,CE),e(CE,uTe),e(uTe,aLr),e(CE,nLr),e(CE,LJ),e(LJ,sLr),e(CE,lLr),e(te,iLr),e(te,wE),e(wE,_Te),e(_Te,dLr),e(wE,cLr),e(wE,xJ),e(xJ,fLr),e(wE,mLr),e(te,gLr),e(te,AE),e(AE,bTe),e(bTe,hLr),e(AE,pLr),e(AE,$J),e($J,uLr),e(AE,_Lr),e(te,bLr),e(te,yE),e(yE,vTe),e(vTe,vLr),e(yE,FLr),e(yE,kJ),e(kJ,TLr),e(yE,MLr),e(te,ELr),e(te,LE),e(LE,FTe),e(FTe,CLr),e(LE,wLr),e(LE,SJ),e(SJ,ALr),e(LE,yLr),e(te,LLr),e(te,xE),e(xE,TTe),e(TTe,xLr),e(xE,$Lr),e(xE,RJ),e(RJ,kLr),e(xE,SLr),e(te,RLr),e(te,$E),e($E,MTe),e(MTe,PLr),e($E,BLr),e($E,PJ),e(PJ,ILr),e($E,qLr),e(te,NLr),e(te,kE),e(kE,ETe),e(ETe,jLr),e(kE,DLr),e(kE,BJ),e(BJ,GLr),e(kE,OLr),e(te,VLr),e(te,SE),e(SE,CTe),e(CTe,XLr),e(SE,zLr),e(SE,IJ),e(IJ,WLr),e(SE,QLr),e(te,HLr),e(te,RE),e(RE,wTe),e(wTe,ULr),e(RE,JLr),e(RE,qJ),e(qJ,YLr),e(RE,KLr),e(te,ZLr),e(te,PE),e(PE,ATe),e(ATe,e8r),e(PE,o8r),e(PE,NJ),e(NJ,r8r),e(PE,t8r),e(te,a8r),e(te,BE),e(BE,yTe),e(yTe,n8r),e(BE,s8r),e(BE,jJ),e(jJ,l8r),e(BE,i8r),e(te,d8r),e(te,IE),e(IE,LTe),e(LTe,c8r),e(IE,f8r),e(IE,DJ),e(DJ,m8r),e(IE,g8r),e(te,h8r),e(te,qE),e(qE,xTe),e(xTe,p8r),e(qE,u8r),e(qE,GJ),e(GJ,_8r),e(qE,b8r),e(te,v8r),e(te,NE),e(NE,$Te),e($Te,F8r),e(NE,T8r),e(NE,OJ),e(OJ,M8r),e(NE,E8r),e(te,C8r),e(te,jE),e(jE,kTe),e(kTe,w8r),e(jE,A8r),e(jE,VJ),e(VJ,y8r),e(jE,L8r),e(te,x8r),e(te,DE),e(DE,STe),e(STe,$8r),e(DE,k8r),e(DE,XJ),e(XJ,S8r),e(DE,R8r),e(te,P8r),e(te,GE),e(GE,RTe),e(RTe,B8r),e(GE,I8r),e(GE,zJ),e(zJ,q8r),e(GE,N8r),e(te,j8r),e(te,OE),e(OE,PTe),e(PTe,D8r),e(OE,G8r),e(OE,WJ),e(WJ,O8r),e(OE,V8r),e(te,X8r),e(te,VE),e(VE,BTe),e(BTe,z8r),e(VE,W8r),e(VE,QJ),e(QJ,Q8r),e(VE,H8r),e(te,U8r),e(te,XE),e(XE,ITe),e(ITe,J8r),e(XE,Y8r),e(XE,HJ),e(HJ,K8r),e(XE,Z8r),e(te,e9r),e(te,zE),e(zE,qTe),e(qTe,o9r),e(zE,r9r),e(zE,UJ),e(UJ,t9r),e(zE,a9r),e(te,n9r),e(te,WE),e(WE,NTe),e(NTe,s9r),e(WE,l9r),e(WE,JJ),e(JJ,i9r),e(WE,d9r),e(te,c9r),e(te,QE),e(QE,jTe),e(jTe,f9r),e(QE,m9r),e(QE,YJ),e(YJ,g9r),e(QE,h9r),e(te,p9r),e(te,HE),e(HE,DTe),e(DTe,u9r),e(HE,_9r),e(HE,KJ),e(KJ,b9r),e(HE,v9r),e(jr,F9r),M(UE,jr,null),b(f,gje,_),b(f,Sc,_),e(Sc,JE),e(JE,GTe),M(w9,GTe,null),e(Sc,T9r),e(Sc,OTe),e(OTe,M9r),b(f,hje,_),b(f,mr,_),M(A9,mr,null),e(mr,E9r),e(mr,Rc),e(Rc,C9r),e(Rc,ZJ),e(ZJ,w9r),e(Rc,A9r),e(Rc,eY),e(eY,y9r),e(Rc,L9r),e(mr,x9r),e(mr,y9),e(y9,$9r),e(y9,VTe),e(VTe,k9r),e(y9,S9r),e(mr,R9r),e(mr,Ot),M(L9,Ot,null),e(Ot,P9r),e(Ot,XTe),e(XTe,B9r),e(Ot,I9r),e(Ot,Pc),e(Pc,q9r),e(Pc,zTe),e(zTe,N9r),e(Pc,j9r),e(Pc,oY),e(oY,D9r),e(Pc,G9r),e(Ot,O9r),M(YE,Ot,null),e(mr,V9r),e(mr,Dr),M(x9,Dr,null),e(Dr,X9r),e(Dr,WTe),e(WTe,z9r),e(Dr,W9r),e(Dr,pn),e(pn,Q9r),e(pn,QTe),e(QTe,H9r),e(pn,U9r),e(pn,HTe),e(HTe,J9r),e(pn,Y9r),e(pn,UTe),e(UTe,K9r),e(pn,Z9r),e(Dr,exr),e(Dr,Re),e(Re,KE),e(KE,JTe),e(JTe,oxr),e(KE,rxr),e(KE,rY),e(rY,txr),e(KE,axr),e(Re,nxr),e(Re,ZE),e(ZE,YTe),e(YTe,sxr),e(ZE,lxr),e(ZE,tY),e(tY,ixr),e(ZE,dxr),e(Re,cxr),e(Re,eC),e(eC,KTe),e(KTe,fxr),e(eC,mxr),e(eC,aY),e(aY,gxr),e(eC,hxr),e(Re,pxr),e(Re,oC),e(oC,ZTe),e(ZTe,uxr),e(oC,_xr),e(oC,nY),e(nY,bxr),e(oC,vxr),e(Re,Fxr),e(Re,rC),e(rC,e7e),e(e7e,Txr),e(rC,Mxr),e(rC,sY),e(sY,Exr),e(rC,Cxr),e(Re,wxr),e(Re,tC),e(tC,o7e),e(o7e,Axr),e(tC,yxr),e(tC,lY),e(lY,Lxr),e(tC,xxr),e(Re,$xr),e(Re,aC),e(aC,r7e),e(r7e,kxr),e(aC,Sxr),e(aC,iY),e(iY,Rxr),e(aC,Pxr),e(Re,Bxr),e(Re,nC),e(nC,t7e),e(t7e,Ixr),e(nC,qxr),e(nC,dY),e(dY,Nxr),e(nC,jxr),e(Re,Dxr),e(Re,sC),e(sC,a7e),e(a7e,Gxr),e(sC,Oxr),e(sC,cY),e(cY,Vxr),e(sC,Xxr),e(Dr,zxr),M(lC,Dr,null),b(f,pje,_),b(f,Bc,_),e(Bc,iC),e(iC,n7e),M($9,n7e,null),e(Bc,Wxr),e(Bc,s7e),e(s7e,Qxr),b(f,uje,_),b(f,gr,_),M(k9,gr,null),e(gr,Hxr),e(gr,Ic),e(Ic,Uxr),e(Ic,fY),e(fY,Jxr),e(Ic,Yxr),e(Ic,mY),e(mY,Kxr),e(Ic,Zxr),e(gr,e$r),e(gr,S9),e(S9,o$r),e(S9,l7e),e(l7e,r$r),e(S9,t$r),e(gr,a$r),e(gr,Vt),M(R9,Vt,null),e(Vt,n$r),e(Vt,i7e),e(i7e,s$r),e(Vt,l$r),e(Vt,qc),e(qc,i$r),e(qc,d7e),e(d7e,d$r),e(qc,c$r),e(qc,gY),e(gY,f$r),e(qc,m$r),e(Vt,g$r),M(dC,Vt,null),e(gr,h$r),e(gr,Gr),M(P9,Gr,null),e(Gr,p$r),e(Gr,c7e),e(c7e,u$r),e(Gr,_$r),e(Gr,un),e(un,b$r),e(un,f7e),e(f7e,v$r),e(un,F$r),e(un,m7e),e(m7e,T$r),e(un,M$r),e(un,g7e),e(g7e,E$r),e(un,C$r),e(Gr,w$r),e(Gr,Ee),e(Ee,cC),e(cC,h7e),e(h7e,A$r),e(cC,y$r),e(cC,hY),e(hY,L$r),e(cC,x$r),e(Ee,$$r),e(Ee,fC),e(fC,p7e),e(p7e,k$r),e(fC,S$r),e(fC,pY),e(pY,R$r),e(fC,P$r),e(Ee,B$r),e(Ee,mC),e(mC,u7e),e(u7e,I$r),e(mC,q$r),e(mC,uY),e(uY,N$r),e(mC,j$r),e(Ee,D$r),e(Ee,gC),e(gC,_7e),e(_7e,G$r),e(gC,O$r),e(gC,_Y),e(_Y,V$r),e(gC,X$r),e(Ee,z$r),e(Ee,hC),e(hC,b7e),e(b7e,W$r),e(hC,Q$r),e(hC,bY),e(bY,H$r),e(hC,U$r),e(Ee,J$r),e(Ee,pC),e(pC,v7e),e(v7e,Y$r),e(pC,K$r),e(pC,vY),e(vY,Z$r),e(pC,ekr),e(Ee,okr),e(Ee,uC),e(uC,F7e),e(F7e,rkr),e(uC,tkr),e(uC,FY),e(FY,akr),e(uC,nkr),e(Ee,skr),e(Ee,_C),e(_C,T7e),e(T7e,lkr),e(_C,ikr),e(_C,TY),e(TY,dkr),e(_C,ckr),e(Ee,fkr),e(Ee,bC),e(bC,M7e),e(M7e,mkr),e(bC,gkr),e(bC,MY),e(MY,hkr),e(bC,pkr),e(Ee,ukr),e(Ee,vC),e(vC,E7e),e(E7e,_kr),e(vC,bkr),e(vC,EY),e(EY,vkr),e(vC,Fkr),e(Ee,Tkr),e(Ee,FC),e(FC,C7e),e(C7e,Mkr),e(FC,Ekr),e(FC,CY),e(CY,Ckr),e(FC,wkr),e(Ee,Akr),e(Ee,TC),e(TC,w7e),e(w7e,ykr),e(TC,Lkr),e(TC,wY),e(wY,xkr),e(TC,$kr),e(Gr,kkr),M(MC,Gr,null),b(f,_je,_),b(f,Nc,_),e(Nc,EC),e(EC,A7e),M(B9,A7e,null),e(Nc,Skr),e(Nc,y7e),e(y7e,Rkr),b(f,bje,_),b(f,hr,_),M(I9,hr,null),e(hr,Pkr),e(hr,jc),e(jc,Bkr),e(jc,AY),e(AY,Ikr),e(jc,qkr),e(jc,yY),e(yY,Nkr),e(jc,jkr),e(hr,Dkr),e(hr,q9),e(q9,Gkr),e(q9,L7e),e(L7e,Okr),e(q9,Vkr),e(hr,Xkr),e(hr,Xt),M(N9,Xt,null),e(Xt,zkr),e(Xt,x7e),e(x7e,Wkr),e(Xt,Qkr),e(Xt,Dc),e(Dc,Hkr),e(Dc,$7e),e($7e,Ukr),e(Dc,Jkr),e(Dc,LY),e(LY,Ykr),e(Dc,Kkr),e(Xt,Zkr),M(CC,Xt,null),e(hr,eSr),e(hr,Or),M(j9,Or,null),e(Or,oSr),e(Or,k7e),e(k7e,rSr),e(Or,tSr),e(Or,_n),e(_n,aSr),e(_n,S7e),e(S7e,nSr),e(_n,sSr),e(_n,R7e),e(R7e,lSr),e(_n,iSr),e(_n,P7e),e(P7e,dSr),e(_n,cSr),e(Or,fSr),e(Or,Le),e(Le,wC),e(wC,B7e),e(B7e,mSr),e(wC,gSr),e(wC,xY),e(xY,hSr),e(wC,pSr),e(Le,uSr),e(Le,AC),e(AC,I7e),e(I7e,_Sr),e(AC,bSr),e(AC,$Y),e($Y,vSr),e(AC,FSr),e(Le,TSr),e(Le,yC),e(yC,q7e),e(q7e,MSr),e(yC,ESr),e(yC,kY),e(kY,CSr),e(yC,wSr),e(Le,ASr),e(Le,LC),e(LC,N7e),e(N7e,ySr),e(LC,LSr),e(LC,SY),e(SY,xSr),e(LC,$Sr),e(Le,kSr),e(Le,xC),e(xC,j7e),e(j7e,SSr),e(xC,RSr),e(xC,RY),e(RY,PSr),e(xC,BSr),e(Le,ISr),e(Le,$C),e($C,D7e),e(D7e,qSr),e($C,NSr),e($C,PY),e(PY,jSr),e($C,DSr),e(Le,GSr),e(Le,kC),e(kC,G7e),e(G7e,OSr),e(kC,VSr),e(kC,BY),e(BY,XSr),e(kC,zSr),e(Le,WSr),e(Le,SC),e(SC,O7e),e(O7e,QSr),e(SC,HSr),e(SC,IY),e(IY,USr),e(SC,JSr),e(Le,YSr),e(Le,RC),e(RC,V7e),e(V7e,KSr),e(RC,ZSr),e(RC,qY),e(qY,eRr),e(RC,oRr),e(Le,rRr),e(Le,PC),e(PC,X7e),e(X7e,tRr),e(PC,aRr),e(PC,NY),e(NY,nRr),e(PC,sRr),e(Or,lRr),M(BC,Or,null),b(f,vje,_),b(f,Gc,_),e(Gc,IC),e(IC,z7e),M(D9,z7e,null),e(Gc,iRr),e(Gc,W7e),e(W7e,dRr),b(f,Fje,_),b(f,pr,_),M(G9,pr,null),e(pr,cRr),e(pr,Oc),e(Oc,fRr),e(Oc,jY),e(jY,mRr),e(Oc,gRr),e(Oc,DY),e(DY,hRr),e(Oc,pRr),e(pr,uRr),e(pr,O9),e(O9,_Rr),e(O9,Q7e),e(Q7e,bRr),e(O9,vRr),e(pr,FRr),e(pr,zt),M(V9,zt,null),e(zt,TRr),e(zt,H7e),e(H7e,MRr),e(zt,ERr),e(zt,Vc),e(Vc,CRr),e(Vc,U7e),e(U7e,wRr),e(Vc,ARr),e(Vc,GY),e(GY,yRr),e(Vc,LRr),e(zt,xRr),M(qC,zt,null),e(pr,$Rr),e(pr,Vr),M(X9,Vr,null),e(Vr,kRr),e(Vr,J7e),e(J7e,SRr),e(Vr,RRr),e(Vr,bn),e(bn,PRr),e(bn,Y7e),e(Y7e,BRr),e(bn,IRr),e(bn,K7e),e(K7e,qRr),e(bn,NRr),e(bn,Z7e),e(Z7e,jRr),e(bn,DRr),e(Vr,GRr),e(Vr,Pe),e(Pe,NC),e(NC,eMe),e(eMe,ORr),e(NC,VRr),e(NC,OY),e(OY,XRr),e(NC,zRr),e(Pe,WRr),e(Pe,jC),e(jC,oMe),e(oMe,QRr),e(jC,HRr),e(jC,VY),e(VY,URr),e(jC,JRr),e(Pe,YRr),e(Pe,DC),e(DC,rMe),e(rMe,KRr),e(DC,ZRr),e(DC,XY),e(XY,ePr),e(DC,oPr),e(Pe,rPr),e(Pe,GC),e(GC,tMe),e(tMe,tPr),e(GC,aPr),e(GC,zY),e(zY,nPr),e(GC,sPr),e(Pe,lPr),e(Pe,OC),e(OC,aMe),e(aMe,iPr),e(OC,dPr),e(OC,WY),e(WY,cPr),e(OC,fPr),e(Pe,mPr),e(Pe,VC),e(VC,nMe),e(nMe,gPr),e(VC,hPr),e(VC,QY),e(QY,pPr),e(VC,uPr),e(Pe,_Pr),e(Pe,XC),e(XC,sMe),e(sMe,bPr),e(XC,vPr),e(XC,HY),e(HY,FPr),e(XC,TPr),e(Pe,MPr),e(Pe,zC),e(zC,lMe),e(lMe,EPr),e(zC,CPr),e(zC,UY),e(UY,wPr),e(zC,APr),e(Pe,yPr),e(Pe,WC),e(WC,iMe),e(iMe,LPr),e(WC,xPr),e(WC,JY),e(JY,$Pr),e(WC,kPr),e(Vr,SPr),M(QC,Vr,null),b(f,Tje,_),b(f,Xc,_),e(Xc,HC),e(HC,dMe),M(z9,dMe,null),e(Xc,RPr),e(Xc,cMe),e(cMe,PPr),b(f,Mje,_),b(f,ur,_),M(W9,ur,null),e(ur,BPr),e(ur,zc),e(zc,IPr),e(zc,YY),e(YY,qPr),e(zc,NPr),e(zc,KY),e(KY,jPr),e(zc,DPr),e(ur,GPr),e(ur,Q9),e(Q9,OPr),e(Q9,fMe),e(fMe,VPr),e(Q9,XPr),e(ur,zPr),e(ur,Wt),M(H9,Wt,null),e(Wt,WPr),e(Wt,mMe),e(mMe,QPr),e(Wt,HPr),e(Wt,Wc),e(Wc,UPr),e(Wc,gMe),e(gMe,JPr),e(Wc,YPr),e(Wc,ZY),e(ZY,KPr),e(Wc,ZPr),e(Wt,eBr),M(UC,Wt,null),e(ur,oBr),e(ur,Xr),M(U9,Xr,null),e(Xr,rBr),e(Xr,hMe),e(hMe,tBr),e(Xr,aBr),e(Xr,vn),e(vn,nBr),e(vn,pMe),e(pMe,sBr),e(vn,lBr),e(vn,uMe),e(uMe,iBr),e(vn,dBr),e(vn,_Me),e(_Me,cBr),e(vn,fBr),e(Xr,mBr),e(Xr,xe),e(xe,JC),e(JC,bMe),e(bMe,gBr),e(JC,hBr),e(JC,eK),e(eK,pBr),e(JC,uBr),e(xe,_Br),e(xe,YC),e(YC,vMe),e(vMe,bBr),e(YC,vBr),e(YC,oK),e(oK,FBr),e(YC,TBr),e(xe,MBr),e(xe,KC),e(KC,FMe),e(FMe,EBr),e(KC,CBr),e(KC,rK),e(rK,wBr),e(KC,ABr),e(xe,yBr),e(xe,ZC),e(ZC,TMe),e(TMe,LBr),e(ZC,xBr),e(ZC,tK),e(tK,$Br),e(ZC,kBr),e(xe,SBr),e(xe,e5),e(e5,MMe),e(MMe,RBr),e(e5,PBr),e(e5,aK),e(aK,BBr),e(e5,IBr),e(xe,qBr),e(xe,o5),e(o5,EMe),e(EMe,NBr),e(o5,jBr),e(o5,nK),e(nK,DBr),e(o5,GBr),e(xe,OBr),e(xe,r5),e(r5,CMe),e(CMe,VBr),e(r5,XBr),e(r5,sK),e(sK,zBr),e(r5,WBr),e(xe,QBr),e(xe,t5),e(t5,wMe),e(wMe,HBr),e(t5,UBr),e(t5,lK),e(lK,JBr),e(t5,YBr),e(xe,KBr),e(xe,a5),e(a5,AMe),e(AMe,ZBr),e(a5,eIr),e(a5,iK),e(iK,oIr),e(a5,rIr),e(xe,tIr),e(xe,n5),e(n5,yMe),e(yMe,aIr),e(n5,nIr),e(n5,dK),e(dK,sIr),e(n5,lIr),e(Xr,iIr),M(s5,Xr,null),b(f,Eje,_),b(f,Qc,_),e(Qc,l5),e(l5,LMe),M(J9,LMe,null),e(Qc,dIr),e(Qc,xMe),e(xMe,cIr),b(f,Cje,_),b(f,_r,_),M(Y9,_r,null),e(_r,fIr),e(_r,Hc),e(Hc,mIr),e(Hc,cK),e(cK,gIr),e(Hc,hIr),e(Hc,fK),e(fK,pIr),e(Hc,uIr),e(_r,_Ir),e(_r,K9),e(K9,bIr),e(K9,$Me),e($Me,vIr),e(K9,FIr),e(_r,TIr),e(_r,Qt),M(Z9,Qt,null),e(Qt,MIr),e(Qt,kMe),e(kMe,EIr),e(Qt,CIr),e(Qt,Uc),e(Uc,wIr),e(Uc,SMe),e(SMe,AIr),e(Uc,yIr),e(Uc,mK),e(mK,LIr),e(Uc,xIr),e(Qt,$Ir),M(i5,Qt,null),e(_r,kIr),e(_r,zr),M(ex,zr,null),e(zr,SIr),e(zr,RMe),e(RMe,RIr),e(zr,PIr),e(zr,Fn),e(Fn,BIr),e(Fn,PMe),e(PMe,IIr),e(Fn,qIr),e(Fn,BMe),e(BMe,NIr),e(Fn,jIr),e(Fn,IMe),e(IMe,DIr),e(Fn,GIr),e(zr,OIr),e(zr,$e),e($e,d5),e(d5,qMe),e(qMe,VIr),e(d5,XIr),e(d5,gK),e(gK,zIr),e(d5,WIr),e($e,QIr),e($e,c5),e(c5,NMe),e(NMe,HIr),e(c5,UIr),e(c5,hK),e(hK,JIr),e(c5,YIr),e($e,KIr),e($e,f5),e(f5,jMe),e(jMe,ZIr),e(f5,eqr),e(f5,pK),e(pK,oqr),e(f5,rqr),e($e,tqr),e($e,m5),e(m5,DMe),e(DMe,aqr),e(m5,nqr),e(m5,uK),e(uK,sqr),e(m5,lqr),e($e,iqr),e($e,g5),e(g5,GMe),e(GMe,dqr),e(g5,cqr),e(g5,_K),e(_K,fqr),e(g5,mqr),e($e,gqr),e($e,h5),e(h5,OMe),e(OMe,hqr),e(h5,pqr),e(h5,bK),e(bK,uqr),e(h5,_qr),e($e,bqr),e($e,p5),e(p5,VMe),e(VMe,vqr),e(p5,Fqr),e(p5,vK),e(vK,Tqr),e(p5,Mqr),e($e,Eqr),e($e,u5),e(u5,XMe),e(XMe,Cqr),e(u5,wqr),e(u5,FK),e(FK,Aqr),e(u5,yqr),e($e,Lqr),e($e,_5),e(_5,zMe),e(zMe,xqr),e(_5,$qr),e(_5,TK),e(TK,kqr),e(_5,Sqr),e($e,Rqr),e($e,b5),e(b5,WMe),e(WMe,Pqr),e(b5,Bqr),e(b5,MK),e(MK,Iqr),e(b5,qqr),e(zr,Nqr),M(v5,zr,null),b(f,wje,_),b(f,Jc,_),e(Jc,F5),e(F5,QMe),M(ox,QMe,null),e(Jc,jqr),e(Jc,HMe),e(HMe,Dqr),b(f,Aje,_),b(f,br,_),M(rx,br,null),e(br,Gqr),e(br,Yc),e(Yc,Oqr),e(Yc,EK),e(EK,Vqr),e(Yc,Xqr),e(Yc,CK),e(CK,zqr),e(Yc,Wqr),e(br,Qqr),e(br,tx),e(tx,Hqr),e(tx,UMe),e(UMe,Uqr),e(tx,Jqr),e(br,Yqr),e(br,Ht),M(ax,Ht,null),e(Ht,Kqr),e(Ht,JMe),e(JMe,Zqr),e(Ht,eNr),e(Ht,Kc),e(Kc,oNr),e(Kc,YMe),e(YMe,rNr),e(Kc,tNr),e(Kc,wK),e(wK,aNr),e(Kc,nNr),e(Ht,sNr),M(T5,Ht,null),e(br,lNr),e(br,Wr),M(nx,Wr,null),e(Wr,iNr),e(Wr,KMe),e(KMe,dNr),e(Wr,cNr),e(Wr,Tn),e(Tn,fNr),e(Tn,ZMe),e(ZMe,mNr),e(Tn,gNr),e(Tn,e4e),e(e4e,hNr),e(Tn,pNr),e(Tn,o4e),e(o4e,uNr),e(Tn,_Nr),e(Wr,bNr),e(Wr,De),e(De,M5),e(M5,r4e),e(r4e,vNr),e(M5,FNr),e(M5,AK),e(AK,TNr),e(M5,MNr),e(De,ENr),e(De,E5),e(E5,t4e),e(t4e,CNr),e(E5,wNr),e(E5,yK),e(yK,ANr),e(E5,yNr),e(De,LNr),e(De,C5),e(C5,a4e),e(a4e,xNr),e(C5,$Nr),e(C5,LK),e(LK,kNr),e(C5,SNr),e(De,RNr),e(De,w5),e(w5,n4e),e(n4e,PNr),e(w5,BNr),e(w5,xK),e(xK,INr),e(w5,qNr),e(De,NNr),e(De,A5),e(A5,s4e),e(s4e,jNr),e(A5,DNr),e(A5,$K),e($K,GNr),e(A5,ONr),e(De,VNr),e(De,y5),e(y5,l4e),e(l4e,XNr),e(y5,zNr),e(y5,kK),e(kK,WNr),e(y5,QNr),e(De,HNr),e(De,L5),e(L5,i4e),e(i4e,UNr),e(L5,JNr),e(L5,SK),e(SK,YNr),e(L5,KNr),e(De,ZNr),e(De,x5),e(x5,d4e),e(d4e,ejr),e(x5,ojr),e(x5,RK),e(RK,rjr),e(x5,tjr),e(Wr,ajr),M($5,Wr,null),b(f,yje,_),b(f,Zc,_),e(Zc,k5),e(k5,c4e),M(sx,c4e,null),e(Zc,njr),e(Zc,f4e),e(f4e,sjr),b(f,Lje,_),b(f,vr,_),M(lx,vr,null),e(vr,ljr),e(vr,ef),e(ef,ijr),e(ef,PK),e(PK,djr),e(ef,cjr),e(ef,BK),e(BK,fjr),e(ef,mjr),e(vr,gjr),e(vr,ix),e(ix,hjr),e(ix,m4e),e(m4e,pjr),e(ix,ujr),e(vr,_jr),e(vr,Ut),M(dx,Ut,null),e(Ut,bjr),e(Ut,g4e),e(g4e,vjr),e(Ut,Fjr),e(Ut,of),e(of,Tjr),e(of,h4e),e(h4e,Mjr),e(of,Ejr),e(of,IK),e(IK,Cjr),e(of,wjr),e(Ut,Ajr),M(S5,Ut,null),e(vr,yjr),e(vr,Qr),M(cx,Qr,null),e(Qr,Ljr),e(Qr,p4e),e(p4e,xjr),e(Qr,$jr),e(Qr,Mn),e(Mn,kjr),e(Mn,u4e),e(u4e,Sjr),e(Mn,Rjr),e(Mn,_4e),e(_4e,Pjr),e(Mn,Bjr),e(Mn,b4e),e(b4e,Ijr),e(Mn,qjr),e(Qr,Njr),e(Qr,Ge),e(Ge,R5),e(R5,v4e),e(v4e,jjr),e(R5,Djr),e(R5,qK),e(qK,Gjr),e(R5,Ojr),e(Ge,Vjr),e(Ge,P5),e(P5,F4e),e(F4e,Xjr),e(P5,zjr),e(P5,NK),e(NK,Wjr),e(P5,Qjr),e(Ge,Hjr),e(Ge,B5),e(B5,T4e),e(T4e,Ujr),e(B5,Jjr),e(B5,jK),e(jK,Yjr),e(B5,Kjr),e(Ge,Zjr),e(Ge,I5),e(I5,M4e),e(M4e,eDr),e(I5,oDr),e(I5,DK),e(DK,rDr),e(I5,tDr),e(Ge,aDr),e(Ge,q5),e(q5,E4e),e(E4e,nDr),e(q5,sDr),e(q5,GK),e(GK,lDr),e(q5,iDr),e(Ge,dDr),e(Ge,N5),e(N5,C4e),e(C4e,cDr),e(N5,fDr),e(N5,OK),e(OK,mDr),e(N5,gDr),e(Ge,hDr),e(Ge,j5),e(j5,w4e),e(w4e,pDr),e(j5,uDr),e(j5,VK),e(VK,_Dr),e(j5,bDr),e(Ge,vDr),e(Ge,D5),e(D5,A4e),e(A4e,FDr),e(D5,TDr),e(D5,XK),e(XK,MDr),e(D5,EDr),e(Qr,CDr),M(G5,Qr,null),b(f,xje,_),b(f,rf,_),e(rf,O5),e(O5,y4e),M(fx,y4e,null),e(rf,wDr),e(rf,L4e),e(L4e,ADr),b(f,$je,_),b(f,Fr,_),M(mx,Fr,null),e(Fr,yDr),e(Fr,tf),e(tf,LDr),e(tf,zK),e(zK,xDr),e(tf,$Dr),e(tf,WK),e(WK,kDr),e(tf,SDr),e(Fr,RDr),e(Fr,gx),e(gx,PDr),e(gx,x4e),e(x4e,BDr),e(gx,IDr),e(Fr,qDr),e(Fr,Jt),M(hx,Jt,null),e(Jt,NDr),e(Jt,$4e),e($4e,jDr),e(Jt,DDr),e(Jt,af),e(af,GDr),e(af,k4e),e(k4e,ODr),e(af,VDr),e(af,QK),e(QK,XDr),e(af,zDr),e(Jt,WDr),M(V5,Jt,null),e(Fr,QDr),e(Fr,Hr),M(px,Hr,null),e(Hr,HDr),e(Hr,S4e),e(S4e,UDr),e(Hr,JDr),e(Hr,En),e(En,YDr),e(En,R4e),e(R4e,KDr),e(En,ZDr),e(En,P4e),e(P4e,eGr),e(En,oGr),e(En,B4e),e(B4e,rGr),e(En,tGr),e(Hr,aGr),e(Hr,I4e),e(I4e,X5),e(X5,q4e),e(q4e,nGr),e(X5,sGr),e(X5,HK),e(HK,lGr),e(X5,iGr),e(Hr,dGr),M(z5,Hr,null),b(f,kje,_),b(f,nf,_),e(nf,W5),e(W5,N4e),M(ux,N4e,null),e(nf,cGr),e(nf,j4e),e(j4e,fGr),b(f,Sje,_),b(f,Tr,_),M(_x,Tr,null),e(Tr,mGr),e(Tr,sf),e(sf,gGr),e(sf,UK),e(UK,hGr),e(sf,pGr),e(sf,JK),e(JK,uGr),e(sf,_Gr),e(Tr,bGr),e(Tr,bx),e(bx,vGr),e(bx,D4e),e(D4e,FGr),e(bx,TGr),e(Tr,MGr),e(Tr,Yt),M(vx,Yt,null),e(Yt,EGr),e(Yt,G4e),e(G4e,CGr),e(Yt,wGr),e(Yt,lf),e(lf,AGr),e(lf,O4e),e(O4e,yGr),e(lf,LGr),e(lf,YK),e(YK,xGr),e(lf,$Gr),e(Yt,kGr),M(Q5,Yt,null),e(Tr,SGr),e(Tr,Ur),M(Fx,Ur,null),e(Ur,RGr),e(Ur,V4e),e(V4e,PGr),e(Ur,BGr),e(Ur,Cn),e(Cn,IGr),e(Cn,X4e),e(X4e,qGr),e(Cn,NGr),e(Cn,z4e),e(z4e,jGr),e(Cn,DGr),e(Cn,W4e),e(W4e,GGr),e(Cn,OGr),e(Ur,VGr),e(Ur,Tx),e(Tx,H5),e(H5,Q4e),e(Q4e,XGr),e(H5,zGr),e(H5,KK),e(KK,WGr),e(H5,QGr),e(Tx,HGr),e(Tx,U5),e(U5,H4e),e(H4e,UGr),e(U5,JGr),e(U5,ZK),e(ZK,YGr),e(U5,KGr),e(Ur,ZGr),M(J5,Ur,null),b(f,Rje,_),b(f,df,_),e(df,Y5),e(Y5,U4e),M(Mx,U4e,null),e(df,eOr),e(df,J4e),e(J4e,oOr),b(f,Pje,_),b(f,Mr,_),M(Ex,Mr,null),e(Mr,rOr),e(Mr,cf),e(cf,tOr),e(cf,eZ),e(eZ,aOr),e(cf,nOr),e(cf,oZ),e(oZ,sOr),e(cf,lOr),e(Mr,iOr),e(Mr,Cx),e(Cx,dOr),e(Cx,Y4e),e(Y4e,cOr),e(Cx,fOr),e(Mr,mOr),e(Mr,Kt),M(wx,Kt,null),e(Kt,gOr),e(Kt,K4e),e(K4e,hOr),e(Kt,pOr),e(Kt,ff),e(ff,uOr),e(ff,Z4e),e(Z4e,_Or),e(ff,bOr),e(ff,rZ),e(rZ,vOr),e(ff,FOr),e(Kt,TOr),M(K5,Kt,null),e(Mr,MOr),e(Mr,Jr),M(Ax,Jr,null),e(Jr,EOr),e(Jr,eEe),e(eEe,COr),e(Jr,wOr),e(Jr,wn),e(wn,AOr),e(wn,oEe),e(oEe,yOr),e(wn,LOr),e(wn,rEe),e(rEe,xOr),e(wn,$Or),e(wn,tEe),e(tEe,kOr),e(wn,SOr),e(Jr,ROr),e(Jr,aEe),e(aEe,Z5),e(Z5,nEe),e(nEe,POr),e(Z5,BOr),e(Z5,tZ),e(tZ,IOr),e(Z5,qOr),e(Jr,NOr),M(e3,Jr,null),Bje=!0},p(f,[_]){const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),Ff.$set(yx);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),Mg.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),rh.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),Rh.$set(iEe);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),Ph.$set(Lx);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),ep.$set(dEe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),op.$set(An);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),ap.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),Ku.$set(fEe);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),e_.$set(mEe);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),X_.$set(xx);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),W_.$set(gEe);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),$0.$set($x);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),S0.$set(hEe);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),p1.$set(kx);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),_1.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),B1.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),q1.$set(_Ee);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),Sb.$set(mf);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),Pb.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),f2.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),g2.$set(FEe);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),F2.$set(Sx);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),M2.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),av.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),sv.$set(EEe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Hv.$set(et);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),Jv.$set(Rx);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),Zv.$set(CEe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),oF.$set(Px);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),pF.$set(wEe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),_F.$set(ot);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),FF.$set(AEe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),MF.$set(gf);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),RF.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),BF.$set(LEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),OF.$set(y);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),XF.$set(o3);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),o6.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),t6.$set($Ee);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),l6.$set(r3);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),d6.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),u6.$set(SEe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),b6.$set(t3);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),E6.$set(REe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),w6.$set(PEe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),x6.$set(a3);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),k6.$set(BEe);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),P6.$set(IEe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),I6.$set(n3);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),O6.$set(qEe);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),X6.$set(NEe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),Q6.$set(s3);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),U6.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),GT.$set(DEe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),VT.$set(l3);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),g7.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),p7.$set(OEe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),L7.$set(i3);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),$7.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),B7.$set(XEe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),q7.$set(d3);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),aM.$set(zEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),sM.$set(WEe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),_M.$set(c3);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),vM.$set(QEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),WM.$set(HEe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),HM.$set(f3);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),m4.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),h4.$set(JEe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),_4.$set(m3);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),v4.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),T4.$set(KEe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),E4.$set(g3);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),X4.$set(ZEe);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),W4.$set(eCe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),gE.$set(h3);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),pE.$set(oCe);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),_E.$set(rCe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),vE.$set(p3);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),TE.$set(tCe);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),EE.$set(aCe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),UE.$set(u3);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),YE.$set(nCe);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:f}),lC.$set(sCe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),dC.$set(_3);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:f}),MC.$set(lCe);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:f}),CC.$set(iCe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),BC.$set(b3);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:f}),qC.$set(dCe);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:f}),QC.$set(cCe);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),UC.$set(v3);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:f}),s5.$set(fCe);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:f}),i5.$set(mCe);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),v5.$set(F3);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:f}),T5.$set(gCe);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:f}),$5.$set(hCe);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),S5.$set(T3);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:f}),G5.$set(pCe);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:f}),V5.$set(uCe);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),z5.$set(M3);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:f}),Q5.$set(_Ce);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:f}),J5.$set(bCe);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),K5.$set(E3);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:f}),e3.$set(vCe)},i(f){Bje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(Ff.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(LA.$$.fragment,f),E(Mg.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(PA.$$.fragment,f),E(rh.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(DA.$$.fragment,f),E(Rh.$$.fragment,f),E(Ph.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(WA.$$.fragment,f),E(ep.$$.fragment,f),E(op.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(ap.$$.fragment,f),E(KA.$$.fragment,f),E(Ku.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(e_.$$.fragment,f),E(ty.$$.fragment,f),E(X_.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(W_.$$.fragment,f),E(iy.$$.fragment,f),E($0.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(S0.$$.fragment,f),E(gy.$$.fragment,f),E(p1.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(_1.$$.fragment,f),E(by.$$.fragment,f),E(B1.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(q1.$$.fragment,f),E(Ey.$$.fragment,f),E(Sb.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Pb.$$.fragment,f),E(Ly.$$.fragment,f),E(f2.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(g2.$$.fragment,f),E(Ry.$$.fragment,f),E(F2.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(M2.$$.fragment,f),E(Ny.$$.fragment,f),E(av.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(sv.$$.fragment,f),E(Vy.$$.fragment,f),E(Hv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Jv.$$.fragment,f),E(Hy.$$.fragment,f),E(Zv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(oF.$$.fragment,f),E(Zy.$$.fragment,f),E(pF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(_F.$$.fragment,f),E(aL.$$.fragment,f),E(FF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(MF.$$.fragment,f),E(dL.$$.fragment,f),E(RF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(BF.$$.fragment,f),E(hL.$$.fragment,f),E(OF.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(XF.$$.fragment,f),E(vL.$$.fragment,f),E(o6.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(t6.$$.fragment,f),E(CL.$$.fragment,f),E(l6.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(d6.$$.fragment,f),E($L.$$.fragment,f),E(u6.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(b6.$$.fragment,f),E(BL.$$.fragment,f),E(E6.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(w6.$$.fragment,f),E(DL.$$.fragment,f),E(x6.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(k6.$$.fragment,f),E(WL.$$.fragment,f),E(P6.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(I6.$$.fragment,f),E(YL.$$.fragment,f),E(O6.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(X6.$$.fragment,f),E(r8.$$.fragment,f),E(Q6.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(U6.$$.fragment,f),E(l8.$$.fragment,f),E(GT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(VT.$$.fragment,f),E(m8.$$.fragment,f),E(g7.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(p7.$$.fragment,f),E(_8.$$.fragment,f),E(L7.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E($7.$$.fragment,f),E(M8.$$.fragment,f),E(B7.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(q7.$$.fragment,f),E(y8.$$.fragment,f),E(aM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(sM.$$.fragment,f),E(S8.$$.fragment,f),E(_M.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(vM.$$.fragment,f),E(q8.$$.fragment,f),E(WM.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(HM.$$.fragment,f),E(O8.$$.fragment,f),E(m4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(h4.$$.fragment,f),E(Q8.$$.fragment,f),E(_4.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(v4.$$.fragment,f),E(Z8.$$.fragment,f),E(T4.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(E4.$$.fragment,f),E(a9.$$.fragment,f),E(X4.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(W4.$$.fragment,f),E(d9.$$.fragment,f),E(gE.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(pE.$$.fragment,f),E(h9.$$.fragment,f),E(_E.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(vE.$$.fragment,f),E(v9.$$.fragment,f),E(TE.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(EE.$$.fragment,f),E(C9.$$.fragment,f),E(UE.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(YE.$$.fragment,f),E(x9.$$.fragment,f),E(lC.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(dC.$$.fragment,f),E(P9.$$.fragment,f),E(MC.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(CC.$$.fragment,f),E(j9.$$.fragment,f),E(BC.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(qC.$$.fragment,f),E(X9.$$.fragment,f),E(QC.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(UC.$$.fragment,f),E(U9.$$.fragment,f),E(s5.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(i5.$$.fragment,f),E(ex.$$.fragment,f),E(v5.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(T5.$$.fragment,f),E(nx.$$.fragment,f),E($5.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(S5.$$.fragment,f),E(cx.$$.fragment,f),E(G5.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(V5.$$.fragment,f),E(px.$$.fragment,f),E(z5.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(Q5.$$.fragment,f),E(Fx.$$.fragment,f),E(J5.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(K5.$$.fragment,f),E(Ax.$$.fragment,f),E(e3.$$.fragment,f),Bje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(Ff.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(LA.$$.fragment,f),C(Mg.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(PA.$$.fragment,f),C(rh.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(DA.$$.fragment,f),C(Rh.$$.fragment,f),C(Ph.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(WA.$$.fragment,f),C(ep.$$.fragment,f),C(op.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(ap.$$.fragment,f),C(KA.$$.fragment,f),C(Ku.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(e_.$$.fragment,f),C(ty.$$.fragment,f),C(X_.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(W_.$$.fragment,f),C(iy.$$.fragment,f),C($0.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(S0.$$.fragment,f),C(gy.$$.fragment,f),C(p1.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(_1.$$.fragment,f),C(by.$$.fragment,f),C(B1.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(q1.$$.fragment,f),C(Ey.$$.fragment,f),C(Sb.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Pb.$$.fragment,f),C(Ly.$$.fragment,f),C(f2.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(g2.$$.fragment,f),C(Ry.$$.fragment,f),C(F2.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(M2.$$.fragment,f),C(Ny.$$.fragment,f),C(av.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(sv.$$.fragment,f),C(Vy.$$.fragment,f),C(Hv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Jv.$$.fragment,f),C(Hy.$$.fragment,f),C(Zv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(oF.$$.fragment,f),C(Zy.$$.fragment,f),C(pF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(_F.$$.fragment,f),C(aL.$$.fragment,f),C(FF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(MF.$$.fragment,f),C(dL.$$.fragment,f),C(RF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(BF.$$.fragment,f),C(hL.$$.fragment,f),C(OF.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(XF.$$.fragment,f),C(vL.$$.fragment,f),C(o6.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(t6.$$.fragment,f),C(CL.$$.fragment,f),C(l6.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(d6.$$.fragment,f),C($L.$$.fragment,f),C(u6.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(b6.$$.fragment,f),C(BL.$$.fragment,f),C(E6.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(w6.$$.fragment,f),C(DL.$$.fragment,f),C(x6.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(k6.$$.fragment,f),C(WL.$$.fragment,f),C(P6.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(I6.$$.fragment,f),C(YL.$$.fragment,f),C(O6.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(X6.$$.fragment,f),C(r8.$$.fragment,f),C(Q6.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(U6.$$.fragment,f),C(l8.$$.fragment,f),C(GT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(VT.$$.fragment,f),C(m8.$$.fragment,f),C(g7.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(p7.$$.fragment,f),C(_8.$$.fragment,f),C(L7.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C($7.$$.fragment,f),C(M8.$$.fragment,f),C(B7.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(q7.$$.fragment,f),C(y8.$$.fragment,f),C(aM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(sM.$$.fragment,f),C(S8.$$.fragment,f),C(_M.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(vM.$$.fragment,f),C(q8.$$.fragment,f),C(WM.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(HM.$$.fragment,f),C(O8.$$.fragment,f),C(m4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(h4.$$.fragment,f),C(Q8.$$.fragment,f),C(_4.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(v4.$$.fragment,f),C(Z8.$$.fragment,f),C(T4.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(E4.$$.fragment,f),C(a9.$$.fragment,f),C(X4.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(W4.$$.fragment,f),C(d9.$$.fragment,f),C(gE.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(pE.$$.fragment,f),C(h9.$$.fragment,f),C(_E.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(vE.$$.fragment,f),C(v9.$$.fragment,f),C(TE.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(EE.$$.fragment,f),C(C9.$$.fragment,f),C(UE.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(YE.$$.fragment,f),C(x9.$$.fragment,f),C(lC.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(dC.$$.fragment,f),C(P9.$$.fragment,f),C(MC.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(CC.$$.fragment,f),C(j9.$$.fragment,f),C(BC.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(qC.$$.fragment,f),C(X9.$$.fragment,f),C(QC.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(UC.$$.fragment,f),C(U9.$$.fragment,f),C(s5.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(i5.$$.fragment,f),C(ex.$$.fragment,f),C(v5.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(T5.$$.fragment,f),C(nx.$$.fragment,f),C($5.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(S5.$$.fragment,f),C(cx.$$.fragment,f),C(G5.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(V5.$$.fragment,f),C(px.$$.fragment,f),C(z5.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(Q5.$$.fragment,f),C(Fx.$$.fragment,f),C(J5.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(K5.$$.fragment,f),C(Ax.$$.fragment,f),C(e3.$$.fragment,f),Bje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Sqe),f&&t(bi),w(MA),f&&t(Rqe),f&&t(kn),f&&t(Pqe),w(EA,f),f&&t(Bqe),f&&t(z$),f&&t(Iqe),w(Ff,f),f&&t(qqe),f&&t(vi),w(CA),f&&t(Nqe),f&&t(Co),w(wA),w(LA),w(Mg),w(xA),f&&t(jqe),f&&t(Ti),w($A),f&&t(Dqe),f&&t(wo),w(kA),w(PA),w(rh),w(BA),f&&t(Gqe),f&&t(Mi),w(IA),f&&t(Oqe),f&&t(Ao),w(qA),w(DA),w(Rh),w(Ph),w(GA),f&&t(Vqe),f&&t(Ei),w(OA),f&&t(Xqe),f&&t(yo),w(VA),w(WA),w(ep),w(op),w(QA),f&&t(zqe),f&&t(wi),w(HA),f&&t(Wqe),f&&t(Lo),w(UA),w(YA),w(ap),w(KA),w(Ku),f&&t(Qqe),f&&t(Li),w(ZA),f&&t(Hqe),f&&t(xo),w(ey),w(ry),w(e_),w(ty),w(X_),f&&t(Uqe),f&&t(ki),w(ay),f&&t(Jqe),f&&t($o),w(ny),w(ly),w(W_),w(iy),w($0),f&&t(Yqe),f&&t(Pi),w(dy),f&&t(Kqe),f&&t(ko),w(cy),w(my),w(S0),w(gy),w(p1),f&&t(Zqe),f&&t(qi),w(hy),f&&t(eNe),f&&t(So),w(py),w(_y),w(_1),w(by),w(B1),f&&t(oNe),f&&t(Di),w(vy),f&&t(rNe),f&&t(Ro),w(Fy),w(My),w(q1),w(Ey),w(Sb),f&&t(tNe),f&&t(Vi),w(Cy),f&&t(aNe),f&&t(Po),w(wy),w(yy),w(Pb),w(Ly),w(f2),f&&t(nNe),f&&t(Wi),w(xy),f&&t(sNe),f&&t(Bo),w($y),w(Sy),w(g2),w(Ry),w(F2),f&&t(lNe),f&&t(Ui),w(Py),f&&t(iNe),f&&t(Io),w(By),w(qy),w(M2),w(Ny),w(av),f&&t(dNe),f&&t(Ki),w(jy),f&&t(cNe),f&&t(qo),w(Dy),w(Oy),w(sv),w(Vy),w(Hv),f&&t(fNe),f&&t(od),w(Xy),f&&t(mNe),f&&t(No),w(zy),w(Qy),w(Jv),w(Hy),w(Zv),f&&t(gNe),f&&t(ad),w(Uy),f&&t(hNe),f&&t(jo),w(Jy),w(Ky),w(oF),w(Zy),w(pF),f&&t(pNe),f&&t(ld),w(eL),f&&t(uNe),f&&t(Do),w(oL),w(tL),w(_F),w(aL),w(FF),f&&t(_Ne),f&&t(cd),w(nL),f&&t(bNe),f&&t(Go),w(sL),w(iL),w(MF),w(dL),w(RF),f&&t(vNe),f&&t(gd),w(cL),f&&t(FNe),f&&t(Oo),w(fL),w(gL),w(BF),w(hL),w(OF),f&&t(TNe),f&&t(ud),w(pL),f&&t(MNe),f&&t(Vo),w(uL),w(bL),w(XF),w(vL),w(o6),f&&t(ENe),f&&t(vd),w(FL),f&&t(CNe),f&&t(Xo),w(TL),w(EL),w(t6),w(CL),w(l6),f&&t(wNe),f&&t(Md),w(AL),f&&t(ANe),f&&t(zo),w(yL),w(xL),w(d6),w($L),w(u6),f&&t(yNe),f&&t(wd),w(kL),f&&t(LNe),f&&t(Wo),w(SL),w(PL),w(b6),w(BL),w(E6),f&&t(xNe),f&&t(xd),w(IL),f&&t($Ne),f&&t(Qo),w(qL),w(jL),w(w6),w(DL),w(x6),f&&t(kNe),f&&t(Sd),w(OL),f&&t(SNe),f&&t(Ho),w(VL),w(zL),w(k6),w(WL),w(P6),f&&t(RNe),f&&t(Bd),w(QL),f&&t(PNe),f&&t(Uo),w(HL),w(JL),w(I6),w(YL),w(O6),f&&t(BNe),f&&t(Nd),w(KL),f&&t(INe),f&&t(Jo),w(ZL),w(o8),w(X6),w(r8),w(Q6),f&&t(qNe),f&&t(Gd),w(t8),f&&t(NNe),f&&t(Yo),w(a8),w(s8),w(U6),w(l8),w(GT),f&&t(jNe),f&&t(Xd),w(i8),f&&t(DNe),f&&t(Ko),w(d8),w(f8),w(VT),w(m8),w(g7),f&&t(GNe),f&&t(Qd),w(g8),f&&t(ONe),f&&t(Zo),w(h8),w(u8),w(p7),w(_8),w(L7),f&&t(VNe),f&&t(Jd),w(b8),f&&t(XNe),f&&t(er),w(v8),w(T8),w($7),w(M8),w(B7),f&&t(zNe),f&&t(Zd),w(E8),f&&t(WNe),f&&t(or),w(C8),w(A8),w(q7),w(y8),w(aM),f&&t(QNe),f&&t(rc),w(L8),f&&t(HNe),f&&t(rr),w(x8),w(k8),w(sM),w(S8),w(_M),f&&t(UNe),f&&t(nc),w(R8),f&&t(JNe),f&&t(tr),w(P8),w(I8),w(vM),w(q8),w(WM),f&&t(YNe),f&&t(ic),w(N8),f&&t(KNe),f&&t(ar),w(j8),w(G8),w(HM),w(O8),w(m4),f&&t(ZNe),f&&t(fc),w(V8),f&&t(eje),f&&t(nr),w(X8),w(W8),w(h4),w(Q8),w(_4),f&&t(oje),f&&t(hc),w(U8),f&&t(rje),f&&t(sr),w(J8),w(K8),w(v4),w(Z8),w(T4),f&&t(tje),f&&t(_c),w(e9),f&&t(aje),f&&t(lr),w(o9),w(t9),w(E4),w(a9),w(X4),f&&t(nje),f&&t(Fc),w(n9),f&&t(sje),f&&t(ir),w(s9),w(i9),w(W4),w(d9),w(gE),f&&t(lje),f&&t(Ec),w(c9),f&&t(ije),f&&t(dr),w(f9),w(g9),w(pE),w(h9),w(_E),f&&t(dje),f&&t(Ac),w(p9),f&&t(cje),f&&t(cr),w(u9),w(b9),w(vE),w(v9),w(TE),f&&t(fje),f&&t(xc),w(F9),f&&t(mje),f&&t(fr),w(T9),w(E9),w(EE),w(C9),w(UE),f&&t(gje),f&&t(Sc),w(w9),f&&t(hje),f&&t(mr),w(A9),w(L9),w(YE),w(x9),w(lC),f&&t(pje),f&&t(Bc),w($9),f&&t(uje),f&&t(gr),w(k9),w(R9),w(dC),w(P9),w(MC),f&&t(_je),f&&t(Nc),w(B9),f&&t(bje),f&&t(hr),w(I9),w(N9),w(CC),w(j9),w(BC),f&&t(vje),f&&t(Gc),w(D9),f&&t(Fje),f&&t(pr),w(G9),w(V9),w(qC),w(X9),w(QC),f&&t(Tje),f&&t(Xc),w(z9),f&&t(Mje),f&&t(ur),w(W9),w(H9),w(UC),w(U9),w(s5),f&&t(Eje),f&&t(Qc),w(J9),f&&t(Cje),f&&t(_r),w(Y9),w(Z9),w(i5),w(ex),w(v5),f&&t(wje),f&&t(Jc),w(ox),f&&t(Aje),f&&t(br),w(rx),w(ax),w(T5),w(nx),w($5),f&&t(yje),f&&t(Zc),w(sx),f&&t(Lje),f&&t(vr),w(lx),w(dx),w(S5),w(cx),w(G5),f&&t(xje),f&&t(rf),w(fx),f&&t($je),f&&t(Fr),w(mx),w(hx),w(V5),w(px),w(z5),f&&t(kje),f&&t(nf),w(ux),f&&t(Sje),f&&t(Tr),w(_x),w(vx),w(Q5),w(Fx),w(J5),f&&t(Rje),f&&t(df),w(Mx),f&&t(Pje),f&&t(Mr),w(Ex),w(wx),w(K5),w(Ax),w(e3)}}}const ikt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function dkt(L){return dxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ukt extends nxt{constructor(g){super();sxt(this,g,dkt,lkt,lxt,{})}}export{ukt as default,ikt as metadata};
