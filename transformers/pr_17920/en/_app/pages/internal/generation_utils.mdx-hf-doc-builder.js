import{S as G4,i as j4,s as H4,e as o,k as c,w as f,t as a,M as R4,c as n,d as t,m as l,a as s,x as g,h as i,b as d,G as r,g as m,y as u,q as h,o as _,B as b,v as K4,L as U4}from"../../chunks/vendor-hf-doc-builder.js";import{D as v}from"../../chunks/Docstring-hf-doc-builder.js";import{C as $$}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ae}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Y4}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function X4(Fd){let w,Ke;return w=new $$({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),{c(){f(w.$$.fragment)},l(k){g(w.$$.fragment,k)},m(k,We){u(w,k,We),Ke=!0},p:U4,i(k){Ke||(h(w.$$.fragment,k),Ke=!0)},o(k){_(w.$$.fragment,k),Ke=!1},d(k){b(w,k)}}}function J4(Fd){let w,Ke,k,We,uc,ct,sf,hc,af,Dd,y,cf,Jn,lf,df,Qn,pf,mf,Zn,ff,gf,es,uf,hf,rs,_f,bf,ts,vf,$f,os,Tf,yf,Sd,ns,kf,zd,Ue,vr,_c,lt,xf,bc,wf,Od,V,Lf,ss,Ef,Pf,as,Ff,Df,is,Sf,zf,qd,cs,Of,Bd,dt,Id,Ne,qf,vc,Bf,If,ls,Cf,Af,Cd,M,ds,$c,Wf,Nf,Vf,ps,Tc,Mf,Gf,jf,ms,yc,Hf,Rf,Kf,fs,kc,Uf,Yf,Ad,x,Xf,xc,Jf,Qf,wc,Zf,eg,Lc,rg,tg,Ec,og,ng,Pc,sg,ag,Fc,ig,cg,Wd,S,lg,Dc,dg,pg,Sc,mg,fg,zc,gg,ug,Oc,hg,_g,Nd,z,bg,qc,vg,$g,Bc,Tg,yg,Ic,kg,xg,Cc,wg,Lg,Vd,pt,Md,$r,Eg,Ac,Pg,Fg,Gd,O,Dg,Wc,Sg,zg,Nc,Og,qg,Vc,Bg,Ig,Mc,Cg,Ag,jd,gs,Wg,Hd,Ye,Tr,Gc,mt,Ng,jc,Vg,Rd,Xe,ft,Mg,Hc,Gg,Kd,Je,gt,jg,Rc,Hg,Ud,R,ut,Rg,Kc,Kg,Ug,yr,ht,Yg,Uc,Xg,Yd,Qe,kr,Yc,_t,Jg,Xc,Qg,Xd,Ze,bt,Zg,Jc,eu,Jd,er,vt,ru,Qc,tu,Qd,K,$t,ou,Zc,nu,su,xr,Tt,au,el,iu,Zd,rr,wr,rl,yt,cu,tl,lu,ep,tr,kt,du,ol,pu,rp,or,xt,mu,nl,fu,tp,nr,Lr,sl,wt,gu,al,uu,op,sr,Lt,hu,il,_u,np,ar,Et,bu,cl,vu,sp,ir,Er,ll,Pt,$u,dl,Tu,ap,Pr,yu,us,ku,xu,ip,U,Ft,wu,pl,Lu,Eu,Fr,Dt,Pu,ml,Fu,cp,Y,St,Du,L,Su,hs,zu,Ou,_s,qu,Bu,fl,Iu,Cu,gl,ul,Au,Wu,bs,Nu,Vu,vs,Mu,Gu,ju,$s,zt,lp,X,Ot,Hu,hl,Ru,Ku,Dr,qt,Uu,_l,Yu,dp,J,Bt,Xu,Ts,ys,Ju,Qu,Zu,ks,It,pp,Q,Ct,eh,xs,ws,rh,th,oh,Ls,At,mp,Z,Wt,nh,Es,Ps,sh,ah,ih,Fs,Nt,fp,ee,Vt,ch,Ds,Ss,lh,dh,ph,zs,Mt,gp,re,Gt,mh,Os,qs,fh,gh,uh,Bs,jt,up,cr,Ht,hh,Is,Rt,hp,te,Kt,_h,Sr,Cs,bh,vh,Ut,$h,Th,yh,As,Yt,_p,oe,Xt,kh,Ws,Ns,xh,wh,Lh,Vs,Jt,bp,ne,Qt,Eh,zr,Ms,Ph,Fh,Zt,Dh,Sh,zh,Gs,eo,vp,se,ro,Oh,Ve,js,qh,Bh,Hs,Ih,Ch,to,Ah,Wh,Nh,Rs,oo,$p,ae,no,Vh,Ks,Us,Mh,Gh,jh,Ys,so,Tp,ie,ao,Hh,Or,Xs,Rh,Kh,bl,Uh,Yh,Xh,Js,io,yp,ce,co,Jh,G,Qs,Qh,Zh,vl,e_,r_,$l,t_,o_,Tl,n_,s_,a_,Zs,lo,kp,le,po,i_,yl,c_,l_,qr,mo,d_,kl,p_,xp,de,fo,m_,C,f_,ea,g_,u_,xl,h_,__,wl,Ll,b_,v_,ra,$_,T_,y_,ta,go,wp,pe,uo,k_,El,x_,w_,Br,ho,L_,Pl,E_,Lp,me,_o,P_,oa,na,F_,D_,S_,sa,bo,Ep,fe,vo,z_,aa,ia,O_,q_,B_,ca,$o,Pp,ge,To,I_,la,da,C_,A_,W_,pa,yo,Fp,ue,ko,N_,ma,fa,V_,M_,G_,ga,xo,Dp,he,wo,j_,ua,ha,H_,R_,K_,_a,Lo,Sp,_e,Eo,U_,Ir,ba,Y_,X_,Po,J_,Q_,Z_,va,Fo,zp,be,Do,eb,$a,Ta,rb,tb,ob,ya,So,Op,ve,zo,nb,ka,xa,sb,ab,ib,wa,Oo,qp,$e,qo,cb,Cr,La,lb,db,Fl,pb,mb,fb,Ea,Bo,Bp,Te,Io,gb,Dl,ub,hb,Ar,Co,_b,Sl,bb,Ip,ye,Ao,vb,E,$b,Pa,Tb,yb,Fa,kb,xb,zl,wb,Lb,Ol,ql,Eb,Pb,Da,Fb,Db,Sa,Sb,zb,Ob,za,Wo,Cp,ke,No,qb,Bl,Bb,Ib,Wr,Vo,Cb,Il,Ab,Ap,xe,Mo,Wb,Oa,qa,Nb,Vb,Mb,Ba,Go,Wp,we,jo,Gb,Ia,Ca,jb,Hb,Rb,Aa,Ho,Np,Le,Ro,Kb,Wa,Na,Ub,Yb,Xb,Va,Ko,Vp,Ee,Uo,Jb,Ma,Ga,Qb,Zb,ev,ja,Yo,Mp,Pe,Xo,rv,Nr,Ha,tv,ov,Cl,nv,sv,av,Ra,Jo,Gp,Fe,Qo,iv,Ka,Ua,cv,lv,dv,Ya,Zo,jp,lr,Vr,Al,en,pv,Wl,mv,Hp,Mr,fv,Xa,gv,uv,Rp,De,rn,hv,Nl,_v,bv,Ja,tn,Kp,dr,on,vv,Qa,nn,Up,Se,sn,$v,an,Tv,Vl,yv,kv,xv,Za,cn,Yp,ze,ln,wv,dn,Lv,Ml,Ev,Pv,Fv,ei,pn,Xp,pr,Gr,Gl,mn,Dv,jl,Sv,Jp,jr,zv,ri,Ov,qv,Qp,$,fn,Bv,Hl,Iv,Cv,Rl,Av,Wv,Hr,Nv,Kl,Vv,Mv,Rr,gn,Gv,Ul,jv,Hv,Kr,un,Rv,Yl,Kv,Uv,Ur,hn,Yv,Xl,Xv,Jv,Yr,_n,Qv,bn,Zv,Jl,e1,r1,t1,Xr,vn,o1,Ql,n1,s1,Jr,$n,a1,Zl,i1,c1,Me,Tn,l1,yn,d1,ed,p1,m1,f1,rd,g1,Zp,mr,kn,u1,ti,oi,h1,_1,em,fr,xn,b1,wn,v1,ni,$1,T1,rm,Oe,Ln,y1,En,k1,si,x1,w1,L1,qe,td,E1,P1,od,F1,D1,nd,S1,z1,sd,O1,tm,A,Pn,q1,ad,B1,I1,F,Fn,C1,id,A1,W1,gr,N1,cd,V1,M1,ld,G1,j1,H1,dd,pd,R1,K1,Be,U1,md,Y1,X1,fd,J1,Q1,gd,Z1,e2,r2,ud,t2,o2,Qr,Dn,n2,hd,s2,om,ur,Zr,_d,Sn,a2,bd,i2,nm,W,zn,c2,hr,l2,ai,d2,p2,ii,m2,f2,g2,ci,On,u2,li,qn,sm,P,Bn,h2,di,pi,_2,b2,v2,In,$2,Cn,T2,y2,k2,mi,x2,An,w2,L2,fi,Wn,E2,gi,Nn,am,N,Vn,P2,ui,hi,F2,D2,S2,_i,Mn,z2,bi,Gn,im,_r,et,vd,jn,O2,$d,q2,cm,Ie,Hn,B2,Td,I2,C2,vi,A2,Rn,W2,lm,Ce,Kn,N2,yd,V2,M2,$i,G2,Un,j2,dm;return ct=new Ae({}),lt=new Ae({}),dt=new $$({props:{code:`
`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),pt=new $$({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),mt=new Ae({}),ft=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L62"}}),gt=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L90"}}),ut=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_utils.py#L44"}}),ht=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/flax/struct.py#L109"}}),_t=new Ae({}),bt=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L132"}}),vt=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L161"}}),$t=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_utils.py#L58"}}),Tt=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/flax/struct.py#L109"}}),yt=new Ae({}),kt=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L204"}}),xt=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L239"}}),wt=new Ae({}),Lt=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L290"}}),Et=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>torch.LongTensor</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L325"}}),Pt=new Ae({}),Ft=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L51"}}),Dt=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),St=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L73"}}),zt=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Ot=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L62"}}),qt=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Bt=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L96"}}),It=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L117"}}),Ct=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L124"}}),At=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L139"}}),Wt=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L144"}}),Nt=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L160"}}),Vt=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L170"}}),Mt=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L193"}}),Gt=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L212"}}),jt=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L233"}}),Ht=new v({props:{name:"class transformers.TypicalLogitsWarper",anchor:"transformers.TypicalLogitsWarper",parameters:[{name:"mass",val:": float = 0.9"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L241"}}),Rt=new v({props:{name:"__call__",anchor:"transformers.TypicalLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L251"}}),Kt=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L312"}}),Yt=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L327"}}),Xt=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L379"}}),Jt=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L421"}}),Qt=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L507"}}),eo=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L524"}}),ro=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L533"}}),oo=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L564"}}),no=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L593"}}),so=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L605"}}),ao=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L614"}}),io=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L629"}}),co=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L638"}}),lo=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_logits_process.py#L645"}}),po=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L53"}}),mo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessor.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L56",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),fo=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L75"}}),go=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessorList.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L82",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),uo=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L64"}}),ho=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsWarper.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L67",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),_o=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L98"}}),bo=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L113"}}),vo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L147"}}),$o=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L169"}}),To=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L118"}}),yo=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L139"}}),ko=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L201"}}),xo=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L227"}}),wo=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L285"}}),Lo=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L362"}}),Eo=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L383"}}),Fo=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L422"}}),Do=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L237"}}),So=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L277"}}),zo=new v({props:{name:"class transformers.TFForcedBOSTokenLogitsProcessor",anchor:"transformers.TFForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L444"}}),Oo=new v({props:{name:"__call__",anchor:"transformers.TFForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L458"}}),qo=new v({props:{name:"class transformers.TFForcedEOSTokenLogitsProcessor",anchor:"transformers.TFForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L474"}}),Bo=new v({props:{name:"__call__",anchor:"transformers.TFForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_logits_process.py#L491"}}),Io=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L50"}}),Co=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Ao=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L72"}}),Wo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),No=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L61"}}),Vo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Mo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L95"}}),Go=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L110"}}),jo=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L115"}}),Ho=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L137"}}),Ro=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L157"}}),Ko=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L178"}}),Uo=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L193"}}),Yo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L205"}}),Xo=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L215"}}),Jo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L230"}}),Qo=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L240"}}),Zo=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_flax_logits_process.py#L261"}}),en=new Ae({}),rn=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L33"}}),tn=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),on=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L110"}}),nn=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),sn=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L41"}}),cn=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),ln=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L88"}}),pn=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17920/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),mn=new Ae({}),fn=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L8"}}),Hr=new Y4({props:{anchor:"transformers.Constraint.example",$$slots:{default:[X4]},$$scope:{ctx:Fd}}}),gn=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L51",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),un=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L116",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),hn=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L63"}}),_n=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L107"}}),vn=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L97"}}),$n=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L27"}}),Tn=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L72",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),kn=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L132"}}),xn=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L421"}}),Ln=new v({props:{name:"class transformers.ConjunctiveDisjunctiveConstraint",anchor:"transformers.ConjunctiveDisjunctiveConstraint",parameters:[{name:"force_words_ids",val:": typing.Iterable[typing.Union[typing.Iterable[int], typing.Iterable[typing.Iterable[int]]]]"}],parametersDescription:[{anchor:"transformers.ConjunctiveDisjunctiveConstraint.force_words_ids",description:`<strong>force_words_ids</strong> (<code>Iterable[Union[Iterable[int], Iterable[Iterable[int]]]]</code>) &#x2014;
List of constraints to be fulfilled. If given <code>Iterable[int]</code>, this is treated as a positive constraint. If
given <code>Iterable[Iterable[int]]</code>, this is treated as a disjunctive positive constraint where one can allow
different forms of each word.`,name:"force_words_ids"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L501"}}),Pn=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/pr_17920/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L552"}}),Fn=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L584"}}),Dn=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_constraints.py#L619"}}),Sn=new Ae({}),zn=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L88"}}),On=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),qn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),Bn=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L120"}}),Wn=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L207"}}),Nn=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L301"}}),Vn=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/pr_17920/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L389"}}),Mn=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_17920/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_17920/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L484",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Gn=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_beam_search.py#L766"}}),jn=new Ae({}),Hn=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_utils.py#L3322"}}),Kn=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17920/src/transformers/generation_tf_utils.py#L3087"}}),{c(){w=o("meta"),Ke=c(),k=o("h1"),We=o("a"),uc=o("span"),f(ct.$$.fragment),sf=c(),hc=o("span"),af=a("Utilities for Generation"),Dd=c(),y=o("p"),cf=a("This page lists all the utility functions used by "),Jn=o("a"),lf=a("generate()"),df=a(`,
`),Qn=o("a"),pf=a("greedy_search()"),mf=a(`,
`),Zn=o("a"),ff=a("sample()"),gf=a(`,
`),es=o("a"),uf=a("beam_search()"),hf=a(`,
`),rs=o("a"),_f=a("beam_sample()"),bf=a(`,
`),ts=o("a"),vf=a("group_beam_search()"),$f=a(`, and
`),os=o("a"),Tf=a("constrained_beam_search()"),yf=a("."),Sd=c(),ns=o("p"),kf=a("Most of those are only useful if you are studying the code of the generate methods in the library."),zd=c(),Ue=o("h2"),vr=o("a"),_c=o("span"),f(lt.$$.fragment),xf=c(),bc=o("span"),wf=a("Generate Outputs"),Od=c(),V=o("p"),Lf=a("The output of "),ss=o("a"),Ef=a("generate()"),Pf=a(` is an instance of a subclass of
`),as=o("a"),Ff=a("ModelOutput"),Df=a(`. This output is a data structure containing all the information returned
by `),is=o("a"),Sf=a("generate()"),zf=a(", but that can also be used as tuple or dictionary."),qd=c(),cs=o("p"),Of=a("Here\u2019s an example:"),Bd=c(),f(dt.$$.fragment),Id=c(),Ne=o("p"),qf=a("The "),vc=o("code"),Bf=a("generation_output"),If=a(" object is a "),ls=o("a"),Cf=a("GreedySearchDecoderOnlyOutput"),Af=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Cd=c(),M=o("ul"),ds=o("li"),$c=o("code"),Wf=a("sequences"),Nf=a(": the generated sequences of tokens"),Vf=c(),ps=o("li"),Tc=o("code"),Mf=a("scores"),Gf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),jf=c(),ms=o("li"),yc=o("code"),Hf=a("hidden_states"),Rf=a(" (optional): the hidden states of the model, for each generation step"),Kf=c(),fs=o("li"),kc=o("code"),Uf=a("attentions"),Yf=a(" (optional): the attention weights of the model, for each generation step"),Ad=c(),x=o("p"),Xf=a("Here we have the "),xc=o("code"),Jf=a("scores"),Qf=a(" since we passed along "),wc=o("code"),Zf=a("output_scores=True"),eg=a(", but we don\u2019t have "),Lc=o("code"),rg=a("hidden_states"),tg=a(` and
`),Ec=o("code"),og=a("attentions"),ng=a(" because we didn\u2019t pass "),Pc=o("code"),sg=a("output_hidden_states=True"),ag=a(" or "),Fc=o("code"),ig=a("output_attentions=True"),cg=a("."),Wd=c(),S=o("p"),lg=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Dc=o("code"),dg=a("None"),pg=a(". Here for instance "),Sc=o("code"),mg=a("generation_output.scores"),fg=a(` are all the generated prediction scores of the
language modeling head, and `),zc=o("code"),gg=a("generation_output.attentions"),ug=a(" is "),Oc=o("code"),hg=a("None"),_g=a("."),Nd=c(),z=o("p"),bg=a("When using our "),qc=o("code"),vg=a("generation_output"),$g=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),Bc=o("code"),Tg=a("None"),yg=a(` values.
Here, for instance, it has two elements, `),Ic=o("code"),kg=a("loss"),xg=a(" then "),Cc=o("code"),wg=a("logits"),Lg=a(", so"),Vd=c(),f(pt.$$.fragment),Md=c(),$r=o("p"),Eg=a("will return the tuple "),Ac=o("code"),Pg=a("(generation_output.sequences, generation_output.scores)"),Fg=a(" for instance."),Gd=c(),O=o("p"),Dg=a("When using our "),Wc=o("code"),Sg=a("generation_output"),zg=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),Nc=o("code"),Og=a("None"),qg=a(`
values. Here, for instance, it has two keys that are `),Vc=o("code"),Bg=a("sequences"),Ig=a(" and "),Mc=o("code"),Cg=a("scores"),Ag=a("."),jd=c(),gs=o("p"),Wg=a("We document here all output types."),Hd=c(),Ye=o("h3"),Tr=o("a"),Gc=o("span"),f(mt.$$.fragment),Ng=c(),jc=o("span"),Vg=a("GreedySearchOutput"),Rd=c(),Xe=o("div"),f(ft.$$.fragment),Mg=c(),Hc=o("p"),Gg=a("Base class for outputs of decoder-only generation models using greedy search."),Kd=c(),Je=o("div"),f(gt.$$.fragment),jg=c(),Rc=o("p"),Hg=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Ud=c(),R=o("div"),f(ut.$$.fragment),Rg=c(),Kc=o("p"),Kg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Ug=c(),yr=o("div"),f(ht.$$.fragment),Yg=c(),Uc=o("p"),Xg=a("\u201CReturns a new object replacing the specified fields with new values."),Yd=c(),Qe=o("h3"),kr=o("a"),Yc=o("span"),f(_t.$$.fragment),Jg=c(),Xc=o("span"),Qg=a("SampleOutput"),Xd=c(),Ze=o("div"),f(bt.$$.fragment),Zg=c(),Jc=o("p"),eu=a("Base class for outputs of decoder-only generation models using sampling."),Jd=c(),er=o("div"),f(vt.$$.fragment),ru=c(),Qc=o("p"),tu=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Qd=c(),K=o("div"),f($t.$$.fragment),ou=c(),Zc=o("p"),nu=a("Flax Base class for outputs of decoder-only generation models using sampling."),su=c(),xr=o("div"),f(Tt.$$.fragment),au=c(),el=o("p"),iu=a("\u201CReturns a new object replacing the specified fields with new values."),Zd=c(),rr=o("h3"),wr=o("a"),rl=o("span"),f(yt.$$.fragment),cu=c(),tl=o("span"),lu=a("BeamSearchOutput"),ep=c(),tr=o("div"),f(kt.$$.fragment),du=c(),ol=o("p"),pu=a("Base class for outputs of decoder-only generation models using beam search."),rp=c(),or=o("div"),f(xt.$$.fragment),mu=c(),nl=o("p"),fu=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),tp=c(),nr=o("h3"),Lr=o("a"),sl=o("span"),f(wt.$$.fragment),gu=c(),al=o("span"),uu=a("BeamSampleOutput"),op=c(),sr=o("div"),f(Lt.$$.fragment),hu=c(),il=o("p"),_u=a("Base class for outputs of decoder-only generation models using beam sample."),np=c(),ar=o("div"),f(Et.$$.fragment),bu=c(),cl=o("p"),vu=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),sp=c(),ir=o("h2"),Er=o("a"),ll=o("span"),f(Pt.$$.fragment),$u=c(),dl=o("span"),Tu=a("LogitsProcessor"),ap=c(),Pr=o("p"),yu=a("A "),us=o("a"),ku=a("LogitsProcessor"),xu=a(` can be used to modify the prediction scores of a language model head for
generation.`),ip=c(),U=o("div"),f(Ft.$$.fragment),wu=c(),pl=o("p"),Lu=a("Abstract base class for all logit processors that can be applied during generation."),Eu=c(),Fr=o("div"),f(Dt.$$.fragment),Pu=c(),ml=o("p"),Fu=a("Torch method for processing logits."),cp=c(),Y=o("div"),f(St.$$.fragment),Du=c(),L=o("p"),Su=a("This class can be used to create a list of "),hs=o("a"),zu=a("LogitsProcessor"),Ou=a(" or "),_s=o("a"),qu=a("LogitsWarper"),Bu=a(` to subsequently process a
`),fl=o("code"),Iu=a("scores"),Cu=a(" input tensor. This class inherits from list and adds a specific "),gl=o("em"),ul=o("strong"),Au=a("call"),Wu=a(` method to apply each
`),bs=o("a"),Nu=a("LogitsProcessor"),Vu=a(" or "),vs=o("a"),Mu=a("LogitsWarper"),Gu=a(" to the inputs."),ju=c(),$s=o("div"),f(zt.$$.fragment),lp=c(),X=o("div"),f(Ot.$$.fragment),Hu=c(),hl=o("p"),Ru=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Ku=c(),Dr=o("div"),f(qt.$$.fragment),Uu=c(),_l=o("p"),Yu=a("Torch method for warping logits."),dp=c(),J=o("div"),f(Bt.$$.fragment),Xu=c(),Ts=o("p"),ys=o("a"),Ju=a("LogitsProcessor"),Qu=a(" enforcing a min-length by setting EOS probability to 0."),Zu=c(),ks=o("div"),f(It.$$.fragment),pp=c(),Q=o("div"),f(Ct.$$.fragment),eh=c(),xs=o("p"),ws=o("a"),rh=a("LogitsWarper"),th=a(" for temperature (exponential scaling output probability distribution)."),oh=c(),Ls=o("div"),f(At.$$.fragment),mp=c(),Z=o("div"),f(Wt.$$.fragment),nh=c(),Es=o("p"),Ps=o("a"),sh=a("LogitsProcessor"),ah=a(" enforcing an exponential penalty on repeated sequences."),ih=c(),Fs=o("div"),f(Nt.$$.fragment),fp=c(),ee=o("div"),f(Vt.$$.fragment),ch=c(),Ds=o("p"),Ss=o("a"),lh=a("LogitsWarper"),dh=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),ph=c(),zs=o("div"),f(Mt.$$.fragment),gp=c(),re=o("div"),f(Gt.$$.fragment),mh=c(),Os=o("p"),qs=o("a"),fh=a("LogitsWarper"),gh=a(" that performs top-k, i.e. restricting to the k highest probability elements."),uh=c(),Bs=o("div"),f(jt.$$.fragment),up=c(),cr=o("div"),f(Ht.$$.fragment),hh=c(),Is=o("div"),f(Rt.$$.fragment),hp=c(),te=o("div"),f(Kt.$$.fragment),_h=c(),Sr=o("p"),Cs=o("a"),bh=a("LogitsProcessor"),vh=a(` that enforces no repetition of n-grams. See
`),Ut=o("a"),$h=a("Fairseq"),Th=a("."),yh=c(),As=o("div"),f(Yt.$$.fragment),_p=c(),oe=o("div"),f(Xt.$$.fragment),kh=c(),Ws=o("p"),Ns=o("a"),xh=a("LogitsProcessor"),wh=a(" that enforces that specified sequences will never be sampled."),Lh=c(),Vs=o("div"),f(Jt.$$.fragment),bp=c(),ne=o("div"),f(Qt.$$.fragment),Eh=c(),zr=o("p"),Ms=o("a"),Ph=a("LogitsProcessor"),Fh=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Zt=o("a"),Dh=a("Autoregressive Entity Retrieval"),Sh=a(" for more information."),zh=c(),Gs=o("div"),f(eo.$$.fragment),vp=c(),se=o("div"),f(ro.$$.fragment),Oh=c(),Ve=o("p"),js=o("a"),qh=a("LogitsProcessor"),Bh=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Hs=o("a"),Ih=a("PreTrainedModel.group_beam_search()"),Ch=a(". See "),to=o("a"),Ah=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),Wh=a(" for more details."),Nh=c(),Rs=o("div"),f(oo.$$.fragment),$p=c(),ae=o("div"),f(no.$$.fragment),Vh=c(),Ks=o("p"),Us=o("a"),Mh=a("LogitsProcessor"),Gh=a(" that enforces the specified token as the first generated token."),jh=c(),Ys=o("div"),f(so.$$.fragment),Tp=c(),ie=o("div"),f(ao.$$.fragment),Hh=c(),Or=o("p"),Xs=o("a"),Rh=a("LogitsProcessor"),Kh=a(" that enforces the specified token as the last generated token when "),bl=o("code"),Uh=a("max_length"),Yh=a(" is reached."),Xh=c(),Js=o("div"),f(io.$$.fragment),yp=c(),ce=o("div"),f(co.$$.fragment),Jh=c(),G=o("p"),Qs=o("a"),Qh=a("LogitsProcessor"),Zh=a(" that removes all "),vl=o("code"),e_=a("nan"),r_=a(" and "),$l=o("code"),t_=a("inf"),o_=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Tl=o("code"),n_=a("max_length"),s_=a(` is
reached.`),a_=c(),Zs=o("div"),f(lo.$$.fragment),kp=c(),le=o("div"),f(po.$$.fragment),i_=c(),yl=o("p"),c_=a("Abstract base class for all logit processors that can be applied during generation."),l_=c(),qr=o("div"),f(mo.$$.fragment),d_=c(),kl=o("p"),p_=a("TF method for processing logits."),xp=c(),de=o("div"),f(fo.$$.fragment),m_=c(),C=o("p"),f_=a("This class can be used to create a list of "),ea=o("a"),g_=a("TFLogitsProcessor"),u_=a(" to subsequently process a "),xl=o("code"),h_=a("scores"),__=a(` input tensor.
This class inherits from list and adds a specific `),wl=o("em"),Ll=o("strong"),b_=a("call"),v_=a(" method to apply each "),ra=o("a"),$_=a("TFLogitsProcessor"),T_=a(` to the
inputs.`),y_=c(),ta=o("div"),f(go.$$.fragment),wp=c(),pe=o("div"),f(uo.$$.fragment),k_=c(),El=o("p"),x_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),w_=c(),Br=o("div"),f(ho.$$.fragment),L_=c(),Pl=o("p"),E_=a("TF method for warping logits."),Lp=c(),me=o("div"),f(_o.$$.fragment),P_=c(),oa=o("p"),na=o("a"),F_=a("TFLogitsWarper"),D_=a(" for temperature (exponential scaling output probability distribution)."),S_=c(),sa=o("div"),f(bo.$$.fragment),Ep=c(),fe=o("div"),f(vo.$$.fragment),z_=c(),aa=o("p"),ia=o("a"),O_=a("TFLogitsWarper"),q_=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),B_=c(),ca=o("div"),f($o.$$.fragment),Pp=c(),ge=o("div"),f(To.$$.fragment),I_=c(),la=o("p"),da=o("a"),C_=a("TFLogitsWarper"),A_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),W_=c(),pa=o("div"),f(yo.$$.fragment),Fp=c(),ue=o("div"),f(ko.$$.fragment),N_=c(),ma=o("p"),fa=o("a"),V_=a("TFLogitsProcessor"),M_=a(" enforcing a min-length by setting EOS probability to 0."),G_=c(),ga=o("div"),f(xo.$$.fragment),Dp=c(),he=o("div"),f(wo.$$.fragment),j_=c(),ua=o("p"),ha=o("a"),H_=a("TFLogitsProcessor"),R_=a(" that enforces that specified sequences will never be sampled."),K_=c(),_a=o("div"),f(Lo.$$.fragment),Sp=c(),_e=o("div"),f(Eo.$$.fragment),U_=c(),Ir=o("p"),ba=o("a"),Y_=a("TFLogitsProcessor"),X_=a(` that enforces no repetition of n-grams. See
`),Po=o("a"),J_=a("Fairseq"),Q_=a("."),Z_=c(),va=o("div"),f(Fo.$$.fragment),zp=c(),be=o("div"),f(Do.$$.fragment),eb=c(),$a=o("p"),Ta=o("a"),rb=a("TFLogitsProcessor"),tb=a(" enforcing an exponential penalty on repeated sequences."),ob=c(),ya=o("div"),f(So.$$.fragment),Op=c(),ve=o("div"),f(zo.$$.fragment),nb=c(),ka=o("p"),xa=o("a"),sb=a("TFLogitsProcessor"),ab=a(" that enforces the specified token as the first generated token."),ib=c(),wa=o("div"),f(Oo.$$.fragment),qp=c(),$e=o("div"),f(qo.$$.fragment),cb=c(),Cr=o("p"),La=o("a"),lb=a("TFLogitsProcessor"),db=a(" that enforces the specified token as the last generated token when "),Fl=o("code"),pb=a("max_length"),mb=a(" is reached."),fb=c(),Ea=o("div"),f(Bo.$$.fragment),Bp=c(),Te=o("div"),f(Io.$$.fragment),gb=c(),Dl=o("p"),ub=a("Abstract base class for all logit processors that can be applied during generation."),hb=c(),Ar=o("div"),f(Co.$$.fragment),_b=c(),Sl=o("p"),bb=a("Flax method for processing logits."),Ip=c(),ye=o("div"),f(Ao.$$.fragment),vb=c(),E=o("p"),$b=a("This class can be used to create a list of "),Pa=o("a"),Tb=a("FlaxLogitsProcessor"),yb=a(" or "),Fa=o("a"),kb=a("FlaxLogitsWarper"),xb=a(` to subsequently process
a `),zl=o("code"),wb=a("scores"),Lb=a(" input tensor. This class inherits from list and adds a specific "),Ol=o("em"),ql=o("strong"),Eb=a("call"),Pb=a(` method to apply each
`),Da=o("a"),Fb=a("FlaxLogitsProcessor"),Db=a(" or "),Sa=o("a"),Sb=a("FlaxLogitsWarper"),zb=a(" to the inputs."),Ob=c(),za=o("div"),f(Wo.$$.fragment),Cp=c(),ke=o("div"),f(No.$$.fragment),qb=c(),Bl=o("p"),Bb=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Ib=c(),Wr=o("div"),f(Vo.$$.fragment),Cb=c(),Il=o("p"),Ab=a("Flax method for warping logits."),Ap=c(),xe=o("div"),f(Mo.$$.fragment),Wb=c(),Oa=o("p"),qa=o("a"),Nb=a("FlaxLogitsWarper"),Vb=a(" for temperature (exponential scaling output probability distribution)."),Mb=c(),Ba=o("div"),f(Go.$$.fragment),Wp=c(),we=o("div"),f(jo.$$.fragment),Gb=c(),Ia=o("p"),Ca=o("a"),jb=a("FlaxLogitsWarper"),Hb=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Rb=c(),Aa=o("div"),f(Ho.$$.fragment),Np=c(),Le=o("div"),f(Ro.$$.fragment),Kb=c(),Wa=o("p"),Na=o("a"),Ub=a("FlaxLogitsWarper"),Yb=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Xb=c(),Va=o("div"),f(Ko.$$.fragment),Vp=c(),Ee=o("div"),f(Uo.$$.fragment),Jb=c(),Ma=o("p"),Ga=o("a"),Qb=a("FlaxLogitsProcessor"),Zb=a(" that enforces the specified token as the first generated token."),ev=c(),ja=o("div"),f(Yo.$$.fragment),Mp=c(),Pe=o("div"),f(Xo.$$.fragment),rv=c(),Nr=o("p"),Ha=o("a"),tv=a("FlaxLogitsProcessor"),ov=a(" that enforces the specified token as the last generated token when "),Cl=o("code"),nv=a("max_length"),sv=a(" is reached."),av=c(),Ra=o("div"),f(Jo.$$.fragment),Gp=c(),Fe=o("div"),f(Qo.$$.fragment),iv=c(),Ka=o("p"),Ua=o("a"),cv=a("FlaxLogitsProcessor"),lv=a(" enforcing a min-length by setting EOS probability to 0."),dv=c(),Ya=o("div"),f(Zo.$$.fragment),jp=c(),lr=o("h2"),Vr=o("a"),Al=o("span"),f(en.$$.fragment),pv=c(),Wl=o("span"),mv=a("StoppingCriteria"),Hp=c(),Mr=o("p"),fv=a("A "),Xa=o("a"),gv=a("StoppingCriteria"),uv=a(" can be used to change when to stop generation (other than EOS token)."),Rp=c(),De=o("div"),f(rn.$$.fragment),hv=c(),Nl=o("p"),_v=a("Abstract base class for all stopping criteria that can be applied during generation."),bv=c(),Ja=o("div"),f(tn.$$.fragment),Kp=c(),dr=o("div"),f(on.$$.fragment),vv=c(),Qa=o("div"),f(nn.$$.fragment),Up=c(),Se=o("div"),f(sn.$$.fragment),$v=c(),an=o("p"),Tv=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),Vl=o("code"),yv=a("max_length"),kv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),xv=c(),Za=o("div"),f(cn.$$.fragment),Yp=c(),ze=o("div"),f(ln.$$.fragment),wv=c(),dn=o("p"),Lv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Ml=o("code"),Ev=a("initial_time"),Pv=a("."),Fv=c(),ei=o("div"),f(pn.$$.fragment),Xp=c(),pr=o("h2"),Gr=o("a"),Gl=o("span"),f(mn.$$.fragment),Dv=c(),jl=o("span"),Sv=a("Constraints"),Jp=c(),jr=o("p"),zv=a("A "),ri=o("a"),Ov=a("Constraint"),qv=a(" can be used to force the generation to include specific tokens or sequences in the output."),Qp=c(),$=o("div"),f(fn.$$.fragment),Bv=c(),Hl=o("p"),Iv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Cv=c(),Rl=o("p"),Av=a("All classes that inherit Constraint must follow the requirement that"),Wv=c(),f(Hr.$$.fragment),Nv=c(),Kl=o("p"),Vv=a("will always terminate (halt)."),Mv=c(),Rr=o("div"),f(gn.$$.fragment),Gv=c(),Ul=o("p"),jv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),Hv=c(),Kr=o("div"),f(un.$$.fragment),Rv=c(),Yl=o("p"),Kv=a("Creates a new instance of this constraint."),Uv=c(),Ur=o("div"),f(hn.$$.fragment),Yv=c(),Xl=o("p"),Xv=a("Reads in a token and returns whether it creates progress."),Jv=c(),Yr=o("div"),f(_n.$$.fragment),Qv=c(),bn=o("p"),Zv=a("Returns the number of remaining steps of "),Jl=o("code"),e1=a("advance()"),r1=a(" in order to complete this constraint."),t1=c(),Xr=o("div"),f(vn.$$.fragment),o1=c(),Ql=o("p"),n1=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),s1=c(),Jr=o("div"),f($n.$$.fragment),a1=c(),Zl=o("p"),i1=a("Tests whether this constraint has been properly defined."),c1=c(),Me=o("div"),f(Tn.$$.fragment),l1=c(),yn=o("p"),d1=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),ed=o("code"),p1=a("does_advance(self, token_id: int)"),m1=a("."),f1=c(),rd=o("p"),g1=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Zp=c(),mr=o("div"),f(kn.$$.fragment),u1=c(),ti=o("p"),oi=o("a"),h1=a("Constraint"),_1=a(" enforcing that an ordered sequence of tokens is included in the output."),em=c(),fr=o("div"),f(xn.$$.fragment),b1=c(),wn=o("p"),v1=a("A special "),ni=o("a"),$1=a("Constraint"),T1=a(" that is fulfilled by fulfilling just one of several constraints."),rm=c(),Oe=o("div"),f(Ln.$$.fragment),y1=c(),En=o("p"),k1=a("A special "),si=o("a"),x1=a("Constraint"),w1=a(` that is fulfilled by fulfilling a series of conjunctive and disjunctive constraints. It
handles multiple constraints simultaneously, even for edge cases.`),L1=c(),qe=o("ul"),td=o("li"),E1=a("allow [1,2,3] fulfill [[1,2],[2,3]], where words overlap"),P1=c(),od=o("li"),F1=a("allow [1,2,3,2,3,1] fulfill [[1],[2,3],[1,2,3]], where longest fulfills first"),D1=c(),nd=o("li"),S1=a("allow [1,2]/[1,3] fulfill [[[1],[2]],[[1],[3]]], where condition is ambiguous"),z1=c(),sd=o("li"),O1=a("allow [1,2]/[2] fulfill [[[1, 2, 3], [1, 2], [2]]], where redundant suffix shrinks"),tm=c(),A=o("div"),f(Pn.$$.fragment),q1=c(),ad=o("p"),B1=a("A class for beam scorers to track its progress through a list of constraints."),I1=c(),F=o("div"),f(Fn.$$.fragment),C1=c(),id=o("p"),A1=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),W1=c(),gr=o("p"),N1=a("Given constraints "),cd=o("code"),V1=a("c_i = {t_ij | j == # of tokens}"),M1=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),ld=o("code"),G1=a("c_i"),j1=a(", we return:"),H1=c(),dd=o("p"),pd=o("code"),R1=a("[t_k1 for k in indices of unfulfilled constraints]"),K1=c(),Be=o("p"),U1=a(`If we are in the middle of a constraint, then we return:
`),md=o("code"),Y1=a("[t_ij]"),X1=a(", where "),fd=o("code"),J1=a("i"),Q1=a(" is the index of the inprogress constraint, "),gd=o("code"),Z1=a("j"),e2=a(" is the next step for the constraint."),r2=c(),ud=o("p"),t2=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),o2=c(),Qr=o("div"),f(Dn.$$.fragment),n2=c(),hd=o("p"),s2=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),om=c(),ur=o("h2"),Zr=o("a"),_d=o("span"),f(Sn.$$.fragment),a2=c(),bd=o("span"),i2=a("BeamSearch"),nm=c(),W=o("div"),f(zn.$$.fragment),c2=c(),hr=o("p"),l2=a("Abstract base class for all beam scorers that are used for "),ai=o("a"),d2=a("beam_search()"),p2=a(` and
`),ii=o("a"),m2=a("beam_sample()"),f2=a("."),g2=c(),ci=o("div"),f(On.$$.fragment),u2=c(),li=o("div"),f(qn.$$.fragment),sm=c(),P=o("div"),f(Bn.$$.fragment),h2=c(),di=o("p"),pi=o("a"),_2=a("BeamScorer"),b2=a(" implementing standard beam search decoding."),v2=c(),In=o("p"),$2=a("Adapted in part from "),Cn=o("a"),T2=a(`Facebook\u2019s XLM beam search
code`),y2=a("."),k2=c(),mi=o("p"),x2=a("Reference for the diverse beam search algorithm and implementation "),An=o("a"),w2=a(`Ashwin Kalyan\u2019s DBS
implementation`),L2=c(),fi=o("div"),f(Wn.$$.fragment),E2=c(),gi=o("div"),f(Nn.$$.fragment),am=c(),N=o("div"),f(Vn.$$.fragment),P2=c(),ui=o("p"),hi=o("a"),F2=a("BeamScorer"),D2=a(" implementing constrained beam search decoding."),S2=c(),_i=o("div"),f(Mn.$$.fragment),z2=c(),bi=o("div"),f(Gn.$$.fragment),im=c(),_r=o("h2"),et=o("a"),vd=o("span"),f(jn.$$.fragment),O2=c(),$d=o("span"),q2=a("Utilities"),cm=c(),Ie=o("div"),f(Hn.$$.fragment),B2=c(),Td=o("p"),I2=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),C2=c(),vi=o("p"),A2=a("From: "),Rn=o("a"),W2=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),lm=c(),Ce=o("div"),f(Kn.$$.fragment),N2=c(),yd=o("p"),V2=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),M2=c(),$i=o("p"),G2=a("From: "),Un=o("a"),j2=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=R4('[data-svelte="svelte-1phssyn"]',document.head);w=n(p,"META",{name:!0,content:!0}),p.forEach(t),Ke=l(e),k=n(e,"H1",{class:!0});var Yn=s(k);We=n(Yn,"A",{id:!0,class:!0,href:!0});var T$=s(We);uc=n(T$,"SPAN",{});var y$=s(uc);g(ct.$$.fragment,y$),y$.forEach(t),T$.forEach(t),sf=l(Yn),hc=n(Yn,"SPAN",{});var k$=s(hc);af=i(k$,"Utilities for Generation"),k$.forEach(t),Yn.forEach(t),Dd=l(e),y=n(e,"P",{});var D=s(y);cf=i(D,"This page lists all the utility functions used by "),Jn=n(D,"A",{href:!0});var x$=s(Jn);lf=i(x$,"generate()"),x$.forEach(t),df=i(D,`,
`),Qn=n(D,"A",{href:!0});var w$=s(Qn);pf=i(w$,"greedy_search()"),w$.forEach(t),mf=i(D,`,
`),Zn=n(D,"A",{href:!0});var L$=s(Zn);ff=i(L$,"sample()"),L$.forEach(t),gf=i(D,`,
`),es=n(D,"A",{href:!0});var E$=s(es);uf=i(E$,"beam_search()"),E$.forEach(t),hf=i(D,`,
`),rs=n(D,"A",{href:!0});var P$=s(rs);_f=i(P$,"beam_sample()"),P$.forEach(t),bf=i(D,`,
`),ts=n(D,"A",{href:!0});var F$=s(ts);vf=i(F$,"group_beam_search()"),F$.forEach(t),$f=i(D,`, and
`),os=n(D,"A",{href:!0});var D$=s(os);Tf=i(D$,"constrained_beam_search()"),D$.forEach(t),yf=i(D,"."),D.forEach(t),Sd=l(e),ns=n(e,"P",{});var S$=s(ns);kf=i(S$,"Most of those are only useful if you are studying the code of the generate methods in the library."),S$.forEach(t),zd=l(e),Ue=n(e,"H2",{class:!0});var pm=s(Ue);vr=n(pm,"A",{id:!0,class:!0,href:!0});var z$=s(vr);_c=n(z$,"SPAN",{});var O$=s(_c);g(lt.$$.fragment,O$),O$.forEach(t),z$.forEach(t),xf=l(pm),bc=n(pm,"SPAN",{});var q$=s(bc);wf=i(q$,"Generate Outputs"),q$.forEach(t),pm.forEach(t),Od=l(e),V=n(e,"P",{});var rt=s(V);Lf=i(rt,"The output of "),ss=n(rt,"A",{href:!0});var B$=s(ss);Ef=i(B$,"generate()"),B$.forEach(t),Pf=i(rt,` is an instance of a subclass of
`),as=n(rt,"A",{href:!0});var I$=s(as);Ff=i(I$,"ModelOutput"),I$.forEach(t),Df=i(rt,`. This output is a data structure containing all the information returned
by `),is=n(rt,"A",{href:!0});var C$=s(is);Sf=i(C$,"generate()"),C$.forEach(t),zf=i(rt,", but that can also be used as tuple or dictionary."),rt.forEach(t),qd=l(e),cs=n(e,"P",{});var A$=s(cs);Of=i(A$,"Here\u2019s an example:"),A$.forEach(t),Bd=l(e),g(dt.$$.fragment,e),Id=l(e),Ne=n(e,"P",{});var Ti=s(Ne);qf=i(Ti,"The "),vc=n(Ti,"CODE",{});var W$=s(vc);Bf=i(W$,"generation_output"),W$.forEach(t),If=i(Ti," object is a "),ls=n(Ti,"A",{href:!0});var N$=s(ls);Cf=i(N$,"GreedySearchDecoderOnlyOutput"),N$.forEach(t),Af=i(Ti,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Ti.forEach(t),Cd=l(e),M=n(e,"UL",{});var tt=s(M);ds=n(tt,"LI",{});var H2=s(ds);$c=n(H2,"CODE",{});var V$=s($c);Wf=i(V$,"sequences"),V$.forEach(t),Nf=i(H2,": the generated sequences of tokens"),H2.forEach(t),Vf=l(tt),ps=n(tt,"LI",{});var R2=s(ps);Tc=n(R2,"CODE",{});var M$=s(Tc);Mf=i(M$,"scores"),M$.forEach(t),Gf=i(R2," (optional): the prediction scores of the language modelling head, for each generation step"),R2.forEach(t),jf=l(tt),ms=n(tt,"LI",{});var K2=s(ms);yc=n(K2,"CODE",{});var G$=s(yc);Hf=i(G$,"hidden_states"),G$.forEach(t),Rf=i(K2," (optional): the hidden states of the model, for each generation step"),K2.forEach(t),Kf=l(tt),fs=n(tt,"LI",{});var U2=s(fs);kc=n(U2,"CODE",{});var j$=s(kc);Uf=i(j$,"attentions"),j$.forEach(t),Yf=i(U2," (optional): the attention weights of the model, for each generation step"),U2.forEach(t),tt.forEach(t),Ad=l(e),x=n(e,"P",{});var q=s(x);Xf=i(q,"Here we have the "),xc=n(q,"CODE",{});var H$=s(xc);Jf=i(H$,"scores"),H$.forEach(t),Qf=i(q," since we passed along "),wc=n(q,"CODE",{});var R$=s(wc);Zf=i(R$,"output_scores=True"),R$.forEach(t),eg=i(q,", but we don\u2019t have "),Lc=n(q,"CODE",{});var K$=s(Lc);rg=i(K$,"hidden_states"),K$.forEach(t),tg=i(q,` and
`),Ec=n(q,"CODE",{});var U$=s(Ec);og=i(U$,"attentions"),U$.forEach(t),ng=i(q," because we didn\u2019t pass "),Pc=n(q,"CODE",{});var Y$=s(Pc);sg=i(Y$,"output_hidden_states=True"),Y$.forEach(t),ag=i(q," or "),Fc=n(q,"CODE",{});var X$=s(Fc);ig=i(X$,"output_attentions=True"),X$.forEach(t),cg=i(q,"."),q.forEach(t),Wd=l(e),S=n(e,"P",{});var Ge=s(S);lg=i(Ge,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Dc=n(Ge,"CODE",{});var J$=s(Dc);dg=i(J$,"None"),J$.forEach(t),pg=i(Ge,". Here for instance "),Sc=n(Ge,"CODE",{});var Q$=s(Sc);mg=i(Q$,"generation_output.scores"),Q$.forEach(t),fg=i(Ge,` are all the generated prediction scores of the
language modeling head, and `),zc=n(Ge,"CODE",{});var Z$=s(zc);gg=i(Z$,"generation_output.attentions"),Z$.forEach(t),ug=i(Ge," is "),Oc=n(Ge,"CODE",{});var e0=s(Oc);hg=i(e0,"None"),e0.forEach(t),_g=i(Ge,"."),Ge.forEach(t),Nd=l(e),z=n(e,"P",{});var je=s(z);bg=i(je,"When using our "),qc=n(je,"CODE",{});var r0=s(qc);vg=i(r0,"generation_output"),r0.forEach(t),$g=i(je," object as a tuple, it only keeps the attributes that don\u2019t have "),Bc=n(je,"CODE",{});var t0=s(Bc);Tg=i(t0,"None"),t0.forEach(t),yg=i(je,` values.
Here, for instance, it has two elements, `),Ic=n(je,"CODE",{});var o0=s(Ic);kg=i(o0,"loss"),o0.forEach(t),xg=i(je," then "),Cc=n(je,"CODE",{});var n0=s(Cc);wg=i(n0,"logits"),n0.forEach(t),Lg=i(je,", so"),je.forEach(t),Vd=l(e),g(pt.$$.fragment,e),Md=l(e),$r=n(e,"P",{});var mm=s($r);Eg=i(mm,"will return the tuple "),Ac=n(mm,"CODE",{});var s0=s(Ac);Pg=i(s0,"(generation_output.sequences, generation_output.scores)"),s0.forEach(t),Fg=i(mm," for instance."),mm.forEach(t),Gd=l(e),O=n(e,"P",{});var He=s(O);Dg=i(He,"When using our "),Wc=n(He,"CODE",{});var a0=s(Wc);Sg=i(a0,"generation_output"),a0.forEach(t),zg=i(He," object as a dictionary, it only keeps the attributes that don\u2019t have "),Nc=n(He,"CODE",{});var i0=s(Nc);Og=i(i0,"None"),i0.forEach(t),qg=i(He,`
values. Here, for instance, it has two keys that are `),Vc=n(He,"CODE",{});var c0=s(Vc);Bg=i(c0,"sequences"),c0.forEach(t),Ig=i(He," and "),Mc=n(He,"CODE",{});var l0=s(Mc);Cg=i(l0,"scores"),l0.forEach(t),Ag=i(He,"."),He.forEach(t),jd=l(e),gs=n(e,"P",{});var d0=s(gs);Wg=i(d0,"We document here all output types."),d0.forEach(t),Hd=l(e),Ye=n(e,"H3",{class:!0});var fm=s(Ye);Tr=n(fm,"A",{id:!0,class:!0,href:!0});var p0=s(Tr);Gc=n(p0,"SPAN",{});var m0=s(Gc);g(mt.$$.fragment,m0),m0.forEach(t),p0.forEach(t),Ng=l(fm),jc=n(fm,"SPAN",{});var f0=s(jc);Vg=i(f0,"GreedySearchOutput"),f0.forEach(t),fm.forEach(t),Rd=l(e),Xe=n(e,"DIV",{class:!0});var gm=s(Xe);g(ft.$$.fragment,gm),Mg=l(gm),Hc=n(gm,"P",{});var g0=s(Hc);Gg=i(g0,"Base class for outputs of decoder-only generation models using greedy search."),g0.forEach(t),gm.forEach(t),Kd=l(e),Je=n(e,"DIV",{class:!0});var um=s(Je);g(gt.$$.fragment,um),jg=l(um),Rc=n(um,"P",{});var u0=s(Rc);Hg=i(u0,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),u0.forEach(t),um.forEach(t),Ud=l(e),R=n(e,"DIV",{class:!0});var yi=s(R);g(ut.$$.fragment,yi),Rg=l(yi),Kc=n(yi,"P",{});var h0=s(Kc);Kg=i(h0,"Flax Base class for outputs of decoder-only generation models using greedy search."),h0.forEach(t),Ug=l(yi),yr=n(yi,"DIV",{class:!0});var hm=s(yr);g(ht.$$.fragment,hm),Yg=l(hm),Uc=n(hm,"P",{});var _0=s(Uc);Xg=i(_0,"\u201CReturns a new object replacing the specified fields with new values."),_0.forEach(t),hm.forEach(t),yi.forEach(t),Yd=l(e),Qe=n(e,"H3",{class:!0});var _m=s(Qe);kr=n(_m,"A",{id:!0,class:!0,href:!0});var b0=s(kr);Yc=n(b0,"SPAN",{});var v0=s(Yc);g(_t.$$.fragment,v0),v0.forEach(t),b0.forEach(t),Jg=l(_m),Xc=n(_m,"SPAN",{});var $0=s(Xc);Qg=i($0,"SampleOutput"),$0.forEach(t),_m.forEach(t),Xd=l(e),Ze=n(e,"DIV",{class:!0});var bm=s(Ze);g(bt.$$.fragment,bm),Zg=l(bm),Jc=n(bm,"P",{});var T0=s(Jc);eu=i(T0,"Base class for outputs of decoder-only generation models using sampling."),T0.forEach(t),bm.forEach(t),Jd=l(e),er=n(e,"DIV",{class:!0});var vm=s(er);g(vt.$$.fragment,vm),ru=l(vm),Qc=n(vm,"P",{});var y0=s(Qc);tu=i(y0,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),y0.forEach(t),vm.forEach(t),Qd=l(e),K=n(e,"DIV",{class:!0});var ki=s(K);g($t.$$.fragment,ki),ou=l(ki),Zc=n(ki,"P",{});var k0=s(Zc);nu=i(k0,"Flax Base class for outputs of decoder-only generation models using sampling."),k0.forEach(t),su=l(ki),xr=n(ki,"DIV",{class:!0});var $m=s(xr);g(Tt.$$.fragment,$m),au=l($m),el=n($m,"P",{});var x0=s(el);iu=i(x0,"\u201CReturns a new object replacing the specified fields with new values."),x0.forEach(t),$m.forEach(t),ki.forEach(t),Zd=l(e),rr=n(e,"H3",{class:!0});var Tm=s(rr);wr=n(Tm,"A",{id:!0,class:!0,href:!0});var w0=s(wr);rl=n(w0,"SPAN",{});var L0=s(rl);g(yt.$$.fragment,L0),L0.forEach(t),w0.forEach(t),cu=l(Tm),tl=n(Tm,"SPAN",{});var E0=s(tl);lu=i(E0,"BeamSearchOutput"),E0.forEach(t),Tm.forEach(t),ep=l(e),tr=n(e,"DIV",{class:!0});var ym=s(tr);g(kt.$$.fragment,ym),du=l(ym),ol=n(ym,"P",{});var P0=s(ol);pu=i(P0,"Base class for outputs of decoder-only generation models using beam search."),P0.forEach(t),ym.forEach(t),rp=l(e),or=n(e,"DIV",{class:!0});var km=s(or);g(xt.$$.fragment,km),mu=l(km),nl=n(km,"P",{});var F0=s(nl);fu=i(F0,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),F0.forEach(t),km.forEach(t),tp=l(e),nr=n(e,"H3",{class:!0});var xm=s(nr);Lr=n(xm,"A",{id:!0,class:!0,href:!0});var D0=s(Lr);sl=n(D0,"SPAN",{});var S0=s(sl);g(wt.$$.fragment,S0),S0.forEach(t),D0.forEach(t),gu=l(xm),al=n(xm,"SPAN",{});var z0=s(al);uu=i(z0,"BeamSampleOutput"),z0.forEach(t),xm.forEach(t),op=l(e),sr=n(e,"DIV",{class:!0});var wm=s(sr);g(Lt.$$.fragment,wm),hu=l(wm),il=n(wm,"P",{});var O0=s(il);_u=i(O0,"Base class for outputs of decoder-only generation models using beam sample."),O0.forEach(t),wm.forEach(t),np=l(e),ar=n(e,"DIV",{class:!0});var Lm=s(ar);g(Et.$$.fragment,Lm),bu=l(Lm),cl=n(Lm,"P",{});var q0=s(cl);vu=i(q0,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),q0.forEach(t),Lm.forEach(t),sp=l(e),ir=n(e,"H2",{class:!0});var Em=s(ir);Er=n(Em,"A",{id:!0,class:!0,href:!0});var B0=s(Er);ll=n(B0,"SPAN",{});var I0=s(ll);g(Pt.$$.fragment,I0),I0.forEach(t),B0.forEach(t),$u=l(Em),dl=n(Em,"SPAN",{});var C0=s(dl);Tu=i(C0,"LogitsProcessor"),C0.forEach(t),Em.forEach(t),ap=l(e),Pr=n(e,"P",{});var Pm=s(Pr);yu=i(Pm,"A "),us=n(Pm,"A",{href:!0});var A0=s(us);ku=i(A0,"LogitsProcessor"),A0.forEach(t),xu=i(Pm,` can be used to modify the prediction scores of a language model head for
generation.`),Pm.forEach(t),ip=l(e),U=n(e,"DIV",{class:!0});var xi=s(U);g(Ft.$$.fragment,xi),wu=l(xi),pl=n(xi,"P",{});var W0=s(pl);Lu=i(W0,"Abstract base class for all logit processors that can be applied during generation."),W0.forEach(t),Eu=l(xi),Fr=n(xi,"DIV",{class:!0});var Fm=s(Fr);g(Dt.$$.fragment,Fm),Pu=l(Fm),ml=n(Fm,"P",{});var N0=s(ml);Fu=i(N0,"Torch method for processing logits."),N0.forEach(t),Fm.forEach(t),xi.forEach(t),cp=l(e),Y=n(e,"DIV",{class:!0});var wi=s(Y);g(St.$$.fragment,wi),Du=l(wi),L=n(wi,"P",{});var B=s(L);Su=i(B,"This class can be used to create a list of "),hs=n(B,"A",{href:!0});var V0=s(hs);zu=i(V0,"LogitsProcessor"),V0.forEach(t),Ou=i(B," or "),_s=n(B,"A",{href:!0});var M0=s(_s);qu=i(M0,"LogitsWarper"),M0.forEach(t),Bu=i(B,` to subsequently process a
`),fl=n(B,"CODE",{});var G0=s(fl);Iu=i(G0,"scores"),G0.forEach(t),Cu=i(B," input tensor. This class inherits from list and adds a specific "),gl=n(B,"EM",{});var j0=s(gl);ul=n(j0,"STRONG",{});var H0=s(ul);Au=i(H0,"call"),H0.forEach(t),j0.forEach(t),Wu=i(B,` method to apply each
`),bs=n(B,"A",{href:!0});var R0=s(bs);Nu=i(R0,"LogitsProcessor"),R0.forEach(t),Vu=i(B," or "),vs=n(B,"A",{href:!0});var K0=s(vs);Mu=i(K0,"LogitsWarper"),K0.forEach(t),Gu=i(B," to the inputs."),B.forEach(t),ju=l(wi),$s=n(wi,"DIV",{class:!0});var U0=s($s);g(zt.$$.fragment,U0),U0.forEach(t),wi.forEach(t),lp=l(e),X=n(e,"DIV",{class:!0});var Li=s(X);g(Ot.$$.fragment,Li),Hu=l(Li),hl=n(Li,"P",{});var Y0=s(hl);Ru=i(Y0,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Y0.forEach(t),Ku=l(Li),Dr=n(Li,"DIV",{class:!0});var Dm=s(Dr);g(qt.$$.fragment,Dm),Uu=l(Dm),_l=n(Dm,"P",{});var X0=s(_l);Yu=i(X0,"Torch method for warping logits."),X0.forEach(t),Dm.forEach(t),Li.forEach(t),dp=l(e),J=n(e,"DIV",{class:!0});var Ei=s(J);g(Bt.$$.fragment,Ei),Xu=l(Ei),Ts=n(Ei,"P",{});var Y2=s(Ts);ys=n(Y2,"A",{href:!0});var J0=s(ys);Ju=i(J0,"LogitsProcessor"),J0.forEach(t),Qu=i(Y2," enforcing a min-length by setting EOS probability to 0."),Y2.forEach(t),Zu=l(Ei),ks=n(Ei,"DIV",{class:!0});var Q0=s(ks);g(It.$$.fragment,Q0),Q0.forEach(t),Ei.forEach(t),pp=l(e),Q=n(e,"DIV",{class:!0});var Pi=s(Q);g(Ct.$$.fragment,Pi),eh=l(Pi),xs=n(Pi,"P",{});var X2=s(xs);ws=n(X2,"A",{href:!0});var Z0=s(ws);rh=i(Z0,"LogitsWarper"),Z0.forEach(t),th=i(X2," for temperature (exponential scaling output probability distribution)."),X2.forEach(t),oh=l(Pi),Ls=n(Pi,"DIV",{class:!0});var eT=s(Ls);g(At.$$.fragment,eT),eT.forEach(t),Pi.forEach(t),mp=l(e),Z=n(e,"DIV",{class:!0});var Fi=s(Z);g(Wt.$$.fragment,Fi),nh=l(Fi),Es=n(Fi,"P",{});var J2=s(Es);Ps=n(J2,"A",{href:!0});var rT=s(Ps);sh=i(rT,"LogitsProcessor"),rT.forEach(t),ah=i(J2," enforcing an exponential penalty on repeated sequences."),J2.forEach(t),ih=l(Fi),Fs=n(Fi,"DIV",{class:!0});var tT=s(Fs);g(Nt.$$.fragment,tT),tT.forEach(t),Fi.forEach(t),fp=l(e),ee=n(e,"DIV",{class:!0});var Di=s(ee);g(Vt.$$.fragment,Di),ch=l(Di),Ds=n(Di,"P",{});var Q2=s(Ds);Ss=n(Q2,"A",{href:!0});var oT=s(Ss);lh=i(oT,"LogitsWarper"),oT.forEach(t),dh=i(Q2," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Q2.forEach(t),ph=l(Di),zs=n(Di,"DIV",{class:!0});var nT=s(zs);g(Mt.$$.fragment,nT),nT.forEach(t),Di.forEach(t),gp=l(e),re=n(e,"DIV",{class:!0});var Si=s(re);g(Gt.$$.fragment,Si),mh=l(Si),Os=n(Si,"P",{});var Z2=s(Os);qs=n(Z2,"A",{href:!0});var sT=s(qs);fh=i(sT,"LogitsWarper"),sT.forEach(t),gh=i(Z2," that performs top-k, i.e. restricting to the k highest probability elements."),Z2.forEach(t),uh=l(Si),Bs=n(Si,"DIV",{class:!0});var aT=s(Bs);g(jt.$$.fragment,aT),aT.forEach(t),Si.forEach(t),up=l(e),cr=n(e,"DIV",{class:!0});var Sm=s(cr);g(Ht.$$.fragment,Sm),hh=l(Sm),Is=n(Sm,"DIV",{class:!0});var iT=s(Is);g(Rt.$$.fragment,iT),iT.forEach(t),Sm.forEach(t),hp=l(e),te=n(e,"DIV",{class:!0});var zi=s(te);g(Kt.$$.fragment,zi),_h=l(zi),Sr=n(zi,"P",{});var kd=s(Sr);Cs=n(kd,"A",{href:!0});var cT=s(Cs);bh=i(cT,"LogitsProcessor"),cT.forEach(t),vh=i(kd,` that enforces no repetition of n-grams. See
`),Ut=n(kd,"A",{href:!0,rel:!0});var lT=s(Ut);$h=i(lT,"Fairseq"),lT.forEach(t),Th=i(kd,"."),kd.forEach(t),yh=l(zi),As=n(zi,"DIV",{class:!0});var dT=s(As);g(Yt.$$.fragment,dT),dT.forEach(t),zi.forEach(t),_p=l(e),oe=n(e,"DIV",{class:!0});var Oi=s(oe);g(Xt.$$.fragment,Oi),kh=l(Oi),Ws=n(Oi,"P",{});var e$=s(Ws);Ns=n(e$,"A",{href:!0});var pT=s(Ns);xh=i(pT,"LogitsProcessor"),pT.forEach(t),wh=i(e$," that enforces that specified sequences will never be sampled."),e$.forEach(t),Lh=l(Oi),Vs=n(Oi,"DIV",{class:!0});var mT=s(Vs);g(Jt.$$.fragment,mT),mT.forEach(t),Oi.forEach(t),bp=l(e),ne=n(e,"DIV",{class:!0});var qi=s(ne);g(Qt.$$.fragment,qi),Eh=l(qi),zr=n(qi,"P",{});var xd=s(zr);Ms=n(xd,"A",{href:!0});var fT=s(Ms);Ph=i(fT,"LogitsProcessor"),fT.forEach(t),Fh=i(xd,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Zt=n(xd,"A",{href:!0,rel:!0});var gT=s(Zt);Dh=i(gT,"Autoregressive Entity Retrieval"),gT.forEach(t),Sh=i(xd," for more information."),xd.forEach(t),zh=l(qi),Gs=n(qi,"DIV",{class:!0});var uT=s(Gs);g(eo.$$.fragment,uT),uT.forEach(t),qi.forEach(t),vp=l(e),se=n(e,"DIV",{class:!0});var Bi=s(se);g(ro.$$.fragment,Bi),Oh=l(Bi),Ve=n(Bi,"P",{});var Xn=s(Ve);js=n(Xn,"A",{href:!0});var hT=s(js);qh=i(hT,"LogitsProcessor"),hT.forEach(t),Bh=i(Xn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Hs=n(Xn,"A",{href:!0});var _T=s(Hs);Ih=i(_T,"PreTrainedModel.group_beam_search()"),_T.forEach(t),Ch=i(Xn,". See "),to=n(Xn,"A",{href:!0,rel:!0});var bT=s(to);Ah=i(bT,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),bT.forEach(t),Wh=i(Xn," for more details."),Xn.forEach(t),Nh=l(Bi),Rs=n(Bi,"DIV",{class:!0});var vT=s(Rs);g(oo.$$.fragment,vT),vT.forEach(t),Bi.forEach(t),$p=l(e),ae=n(e,"DIV",{class:!0});var Ii=s(ae);g(no.$$.fragment,Ii),Vh=l(Ii),Ks=n(Ii,"P",{});var r$=s(Ks);Us=n(r$,"A",{href:!0});var $T=s(Us);Mh=i($T,"LogitsProcessor"),$T.forEach(t),Gh=i(r$," that enforces the specified token as the first generated token."),r$.forEach(t),jh=l(Ii),Ys=n(Ii,"DIV",{class:!0});var TT=s(Ys);g(so.$$.fragment,TT),TT.forEach(t),Ii.forEach(t),Tp=l(e),ie=n(e,"DIV",{class:!0});var Ci=s(ie);g(ao.$$.fragment,Ci),Hh=l(Ci),Or=n(Ci,"P",{});var wd=s(Or);Xs=n(wd,"A",{href:!0});var yT=s(Xs);Rh=i(yT,"LogitsProcessor"),yT.forEach(t),Kh=i(wd," that enforces the specified token as the last generated token when "),bl=n(wd,"CODE",{});var kT=s(bl);Uh=i(kT,"max_length"),kT.forEach(t),Yh=i(wd," is reached."),wd.forEach(t),Xh=l(Ci),Js=n(Ci,"DIV",{class:!0});var xT=s(Js);g(io.$$.fragment,xT),xT.forEach(t),Ci.forEach(t),yp=l(e),ce=n(e,"DIV",{class:!0});var Ai=s(ce);g(co.$$.fragment,Ai),Jh=l(Ai),G=n(Ai,"P",{});var br=s(G);Qs=n(br,"A",{href:!0});var wT=s(Qs);Qh=i(wT,"LogitsProcessor"),wT.forEach(t),Zh=i(br," that removes all "),vl=n(br,"CODE",{});var LT=s(vl);e_=i(LT,"nan"),LT.forEach(t),r_=i(br," and "),$l=n(br,"CODE",{});var ET=s($l);t_=i(ET,"inf"),ET.forEach(t),o_=i(br,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Tl=n(br,"CODE",{});var PT=s(Tl);n_=i(PT,"max_length"),PT.forEach(t),s_=i(br,` is
reached.`),br.forEach(t),a_=l(Ai),Zs=n(Ai,"DIV",{class:!0});var FT=s(Zs);g(lo.$$.fragment,FT),FT.forEach(t),Ai.forEach(t),kp=l(e),le=n(e,"DIV",{class:!0});var Wi=s(le);g(po.$$.fragment,Wi),i_=l(Wi),yl=n(Wi,"P",{});var DT=s(yl);c_=i(DT,"Abstract base class for all logit processors that can be applied during generation."),DT.forEach(t),l_=l(Wi),qr=n(Wi,"DIV",{class:!0});var zm=s(qr);g(mo.$$.fragment,zm),d_=l(zm),kl=n(zm,"P",{});var ST=s(kl);p_=i(ST,"TF method for processing logits."),ST.forEach(t),zm.forEach(t),Wi.forEach(t),xp=l(e),de=n(e,"DIV",{class:!0});var Ni=s(de);g(fo.$$.fragment,Ni),m_=l(Ni),C=n(Ni,"P",{});var Re=s(C);f_=i(Re,"This class can be used to create a list of "),ea=n(Re,"A",{href:!0});var zT=s(ea);g_=i(zT,"TFLogitsProcessor"),zT.forEach(t),u_=i(Re," to subsequently process a "),xl=n(Re,"CODE",{});var OT=s(xl);h_=i(OT,"scores"),OT.forEach(t),__=i(Re,` input tensor.
This class inherits from list and adds a specific `),wl=n(Re,"EM",{});var qT=s(wl);Ll=n(qT,"STRONG",{});var BT=s(Ll);b_=i(BT,"call"),BT.forEach(t),qT.forEach(t),v_=i(Re," method to apply each "),ra=n(Re,"A",{href:!0});var IT=s(ra);$_=i(IT,"TFLogitsProcessor"),IT.forEach(t),T_=i(Re,` to the
inputs.`),Re.forEach(t),y_=l(Ni),ta=n(Ni,"DIV",{class:!0});var CT=s(ta);g(go.$$.fragment,CT),CT.forEach(t),Ni.forEach(t),wp=l(e),pe=n(e,"DIV",{class:!0});var Vi=s(pe);g(uo.$$.fragment,Vi),k_=l(Vi),El=n(Vi,"P",{});var AT=s(El);x_=i(AT,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),AT.forEach(t),w_=l(Vi),Br=n(Vi,"DIV",{class:!0});var Om=s(Br);g(ho.$$.fragment,Om),L_=l(Om),Pl=n(Om,"P",{});var WT=s(Pl);E_=i(WT,"TF method for warping logits."),WT.forEach(t),Om.forEach(t),Vi.forEach(t),Lp=l(e),me=n(e,"DIV",{class:!0});var Mi=s(me);g(_o.$$.fragment,Mi),P_=l(Mi),oa=n(Mi,"P",{});var t$=s(oa);na=n(t$,"A",{href:!0});var NT=s(na);F_=i(NT,"TFLogitsWarper"),NT.forEach(t),D_=i(t$," for temperature (exponential scaling output probability distribution)."),t$.forEach(t),S_=l(Mi),sa=n(Mi,"DIV",{class:!0});var VT=s(sa);g(bo.$$.fragment,VT),VT.forEach(t),Mi.forEach(t),Ep=l(e),fe=n(e,"DIV",{class:!0});var Gi=s(fe);g(vo.$$.fragment,Gi),z_=l(Gi),aa=n(Gi,"P",{});var o$=s(aa);ia=n(o$,"A",{href:!0});var MT=s(ia);O_=i(MT,"TFLogitsWarper"),MT.forEach(t),q_=i(o$," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),o$.forEach(t),B_=l(Gi),ca=n(Gi,"DIV",{class:!0});var GT=s(ca);g($o.$$.fragment,GT),GT.forEach(t),Gi.forEach(t),Pp=l(e),ge=n(e,"DIV",{class:!0});var ji=s(ge);g(To.$$.fragment,ji),I_=l(ji),la=n(ji,"P",{});var n$=s(la);da=n(n$,"A",{href:!0});var jT=s(da);C_=i(jT,"TFLogitsWarper"),jT.forEach(t),A_=i(n$," that performs top-k, i.e. restricting to the k highest probability elements."),n$.forEach(t),W_=l(ji),pa=n(ji,"DIV",{class:!0});var HT=s(pa);g(yo.$$.fragment,HT),HT.forEach(t),ji.forEach(t),Fp=l(e),ue=n(e,"DIV",{class:!0});var Hi=s(ue);g(ko.$$.fragment,Hi),N_=l(Hi),ma=n(Hi,"P",{});var s$=s(ma);fa=n(s$,"A",{href:!0});var RT=s(fa);V_=i(RT,"TFLogitsProcessor"),RT.forEach(t),M_=i(s$," enforcing a min-length by setting EOS probability to 0."),s$.forEach(t),G_=l(Hi),ga=n(Hi,"DIV",{class:!0});var KT=s(ga);g(xo.$$.fragment,KT),KT.forEach(t),Hi.forEach(t),Dp=l(e),he=n(e,"DIV",{class:!0});var Ri=s(he);g(wo.$$.fragment,Ri),j_=l(Ri),ua=n(Ri,"P",{});var a$=s(ua);ha=n(a$,"A",{href:!0});var UT=s(ha);H_=i(UT,"TFLogitsProcessor"),UT.forEach(t),R_=i(a$," that enforces that specified sequences will never be sampled."),a$.forEach(t),K_=l(Ri),_a=n(Ri,"DIV",{class:!0});var YT=s(_a);g(Lo.$$.fragment,YT),YT.forEach(t),Ri.forEach(t),Sp=l(e),_e=n(e,"DIV",{class:!0});var Ki=s(_e);g(Eo.$$.fragment,Ki),U_=l(Ki),Ir=n(Ki,"P",{});var Ld=s(Ir);ba=n(Ld,"A",{href:!0});var XT=s(ba);Y_=i(XT,"TFLogitsProcessor"),XT.forEach(t),X_=i(Ld,` that enforces no repetition of n-grams. See
`),Po=n(Ld,"A",{href:!0,rel:!0});var JT=s(Po);J_=i(JT,"Fairseq"),JT.forEach(t),Q_=i(Ld,"."),Ld.forEach(t),Z_=l(Ki),va=n(Ki,"DIV",{class:!0});var QT=s(va);g(Fo.$$.fragment,QT),QT.forEach(t),Ki.forEach(t),zp=l(e),be=n(e,"DIV",{class:!0});var Ui=s(be);g(Do.$$.fragment,Ui),eb=l(Ui),$a=n(Ui,"P",{});var i$=s($a);Ta=n(i$,"A",{href:!0});var ZT=s(Ta);rb=i(ZT,"TFLogitsProcessor"),ZT.forEach(t),tb=i(i$," enforcing an exponential penalty on repeated sequences."),i$.forEach(t),ob=l(Ui),ya=n(Ui,"DIV",{class:!0});var ey=s(ya);g(So.$$.fragment,ey),ey.forEach(t),Ui.forEach(t),Op=l(e),ve=n(e,"DIV",{class:!0});var Yi=s(ve);g(zo.$$.fragment,Yi),nb=l(Yi),ka=n(Yi,"P",{});var c$=s(ka);xa=n(c$,"A",{href:!0});var ry=s(xa);sb=i(ry,"TFLogitsProcessor"),ry.forEach(t),ab=i(c$," that enforces the specified token as the first generated token."),c$.forEach(t),ib=l(Yi),wa=n(Yi,"DIV",{class:!0});var ty=s(wa);g(Oo.$$.fragment,ty),ty.forEach(t),Yi.forEach(t),qp=l(e),$e=n(e,"DIV",{class:!0});var Xi=s($e);g(qo.$$.fragment,Xi),cb=l(Xi),Cr=n(Xi,"P",{});var Ed=s(Cr);La=n(Ed,"A",{href:!0});var oy=s(La);lb=i(oy,"TFLogitsProcessor"),oy.forEach(t),db=i(Ed," that enforces the specified token as the last generated token when "),Fl=n(Ed,"CODE",{});var ny=s(Fl);pb=i(ny,"max_length"),ny.forEach(t),mb=i(Ed," is reached."),Ed.forEach(t),fb=l(Xi),Ea=n(Xi,"DIV",{class:!0});var sy=s(Ea);g(Bo.$$.fragment,sy),sy.forEach(t),Xi.forEach(t),Bp=l(e),Te=n(e,"DIV",{class:!0});var Ji=s(Te);g(Io.$$.fragment,Ji),gb=l(Ji),Dl=n(Ji,"P",{});var ay=s(Dl);ub=i(ay,"Abstract base class for all logit processors that can be applied during generation."),ay.forEach(t),hb=l(Ji),Ar=n(Ji,"DIV",{class:!0});var qm=s(Ar);g(Co.$$.fragment,qm),_b=l(qm),Sl=n(qm,"P",{});var iy=s(Sl);bb=i(iy,"Flax method for processing logits."),iy.forEach(t),qm.forEach(t),Ji.forEach(t),Ip=l(e),ye=n(e,"DIV",{class:!0});var Qi=s(ye);g(Ao.$$.fragment,Qi),vb=l(Qi),E=n(Qi,"P",{});var I=s(E);$b=i(I,"This class can be used to create a list of "),Pa=n(I,"A",{href:!0});var cy=s(Pa);Tb=i(cy,"FlaxLogitsProcessor"),cy.forEach(t),yb=i(I," or "),Fa=n(I,"A",{href:!0});var ly=s(Fa);kb=i(ly,"FlaxLogitsWarper"),ly.forEach(t),xb=i(I,` to subsequently process
a `),zl=n(I,"CODE",{});var dy=s(zl);wb=i(dy,"scores"),dy.forEach(t),Lb=i(I," input tensor. This class inherits from list and adds a specific "),Ol=n(I,"EM",{});var py=s(Ol);ql=n(py,"STRONG",{});var my=s(ql);Eb=i(my,"call"),my.forEach(t),py.forEach(t),Pb=i(I,` method to apply each
`),Da=n(I,"A",{href:!0});var fy=s(Da);Fb=i(fy,"FlaxLogitsProcessor"),fy.forEach(t),Db=i(I," or "),Sa=n(I,"A",{href:!0});var gy=s(Sa);Sb=i(gy,"FlaxLogitsWarper"),gy.forEach(t),zb=i(I," to the inputs."),I.forEach(t),Ob=l(Qi),za=n(Qi,"DIV",{class:!0});var uy=s(za);g(Wo.$$.fragment,uy),uy.forEach(t),Qi.forEach(t),Cp=l(e),ke=n(e,"DIV",{class:!0});var Zi=s(ke);g(No.$$.fragment,Zi),qb=l(Zi),Bl=n(Zi,"P",{});var hy=s(Bl);Bb=i(hy,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),hy.forEach(t),Ib=l(Zi),Wr=n(Zi,"DIV",{class:!0});var Bm=s(Wr);g(Vo.$$.fragment,Bm),Cb=l(Bm),Il=n(Bm,"P",{});var _y=s(Il);Ab=i(_y,"Flax method for warping logits."),_y.forEach(t),Bm.forEach(t),Zi.forEach(t),Ap=l(e),xe=n(e,"DIV",{class:!0});var ec=s(xe);g(Mo.$$.fragment,ec),Wb=l(ec),Oa=n(ec,"P",{});var l$=s(Oa);qa=n(l$,"A",{href:!0});var by=s(qa);Nb=i(by,"FlaxLogitsWarper"),by.forEach(t),Vb=i(l$," for temperature (exponential scaling output probability distribution)."),l$.forEach(t),Mb=l(ec),Ba=n(ec,"DIV",{class:!0});var vy=s(Ba);g(Go.$$.fragment,vy),vy.forEach(t),ec.forEach(t),Wp=l(e),we=n(e,"DIV",{class:!0});var rc=s(we);g(jo.$$.fragment,rc),Gb=l(rc),Ia=n(rc,"P",{});var d$=s(Ia);Ca=n(d$,"A",{href:!0});var $y=s(Ca);jb=i($y,"FlaxLogitsWarper"),$y.forEach(t),Hb=i(d$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),d$.forEach(t),Rb=l(rc),Aa=n(rc,"DIV",{class:!0});var Ty=s(Aa);g(Ho.$$.fragment,Ty),Ty.forEach(t),rc.forEach(t),Np=l(e),Le=n(e,"DIV",{class:!0});var tc=s(Le);g(Ro.$$.fragment,tc),Kb=l(tc),Wa=n(tc,"P",{});var p$=s(Wa);Na=n(p$,"A",{href:!0});var yy=s(Na);Ub=i(yy,"FlaxLogitsWarper"),yy.forEach(t),Yb=i(p$," that performs top-k, i.e. restricting to the k highest probability elements."),p$.forEach(t),Xb=l(tc),Va=n(tc,"DIV",{class:!0});var ky=s(Va);g(Ko.$$.fragment,ky),ky.forEach(t),tc.forEach(t),Vp=l(e),Ee=n(e,"DIV",{class:!0});var oc=s(Ee);g(Uo.$$.fragment,oc),Jb=l(oc),Ma=n(oc,"P",{});var m$=s(Ma);Ga=n(m$,"A",{href:!0});var xy=s(Ga);Qb=i(xy,"FlaxLogitsProcessor"),xy.forEach(t),Zb=i(m$," that enforces the specified token as the first generated token."),m$.forEach(t),ev=l(oc),ja=n(oc,"DIV",{class:!0});var wy=s(ja);g(Yo.$$.fragment,wy),wy.forEach(t),oc.forEach(t),Mp=l(e),Pe=n(e,"DIV",{class:!0});var nc=s(Pe);g(Xo.$$.fragment,nc),rv=l(nc),Nr=n(nc,"P",{});var Pd=s(Nr);Ha=n(Pd,"A",{href:!0});var Ly=s(Ha);tv=i(Ly,"FlaxLogitsProcessor"),Ly.forEach(t),ov=i(Pd," that enforces the specified token as the last generated token when "),Cl=n(Pd,"CODE",{});var Ey=s(Cl);nv=i(Ey,"max_length"),Ey.forEach(t),sv=i(Pd," is reached."),Pd.forEach(t),av=l(nc),Ra=n(nc,"DIV",{class:!0});var Py=s(Ra);g(Jo.$$.fragment,Py),Py.forEach(t),nc.forEach(t),Gp=l(e),Fe=n(e,"DIV",{class:!0});var sc=s(Fe);g(Qo.$$.fragment,sc),iv=l(sc),Ka=n(sc,"P",{});var f$=s(Ka);Ua=n(f$,"A",{href:!0});var Fy=s(Ua);cv=i(Fy,"FlaxLogitsProcessor"),Fy.forEach(t),lv=i(f$," enforcing a min-length by setting EOS probability to 0."),f$.forEach(t),dv=l(sc),Ya=n(sc,"DIV",{class:!0});var Dy=s(Ya);g(Zo.$$.fragment,Dy),Dy.forEach(t),sc.forEach(t),jp=l(e),lr=n(e,"H2",{class:!0});var Im=s(lr);Vr=n(Im,"A",{id:!0,class:!0,href:!0});var Sy=s(Vr);Al=n(Sy,"SPAN",{});var zy=s(Al);g(en.$$.fragment,zy),zy.forEach(t),Sy.forEach(t),pv=l(Im),Wl=n(Im,"SPAN",{});var Oy=s(Wl);mv=i(Oy,"StoppingCriteria"),Oy.forEach(t),Im.forEach(t),Hp=l(e),Mr=n(e,"P",{});var Cm=s(Mr);fv=i(Cm,"A "),Xa=n(Cm,"A",{href:!0});var qy=s(Xa);gv=i(qy,"StoppingCriteria"),qy.forEach(t),uv=i(Cm," can be used to change when to stop generation (other than EOS token)."),Cm.forEach(t),Rp=l(e),De=n(e,"DIV",{class:!0});var ac=s(De);g(rn.$$.fragment,ac),hv=l(ac),Nl=n(ac,"P",{});var By=s(Nl);_v=i(By,"Abstract base class for all stopping criteria that can be applied during generation."),By.forEach(t),bv=l(ac),Ja=n(ac,"DIV",{class:!0});var Iy=s(Ja);g(tn.$$.fragment,Iy),Iy.forEach(t),ac.forEach(t),Kp=l(e),dr=n(e,"DIV",{class:!0});var Am=s(dr);g(on.$$.fragment,Am),vv=l(Am),Qa=n(Am,"DIV",{class:!0});var Cy=s(Qa);g(nn.$$.fragment,Cy),Cy.forEach(t),Am.forEach(t),Up=l(e),Se=n(e,"DIV",{class:!0});var ic=s(Se);g(sn.$$.fragment,ic),$v=l(ic),an=n(ic,"P",{});var Wm=s(an);Tv=i(Wm,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),Vl=n(Wm,"CODE",{});var Ay=s(Vl);yv=i(Ay,"max_length"),Ay.forEach(t),kv=i(Wm,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Wm.forEach(t),xv=l(ic),Za=n(ic,"DIV",{class:!0});var Wy=s(Za);g(cn.$$.fragment,Wy),Wy.forEach(t),ic.forEach(t),Yp=l(e),ze=n(e,"DIV",{class:!0});var cc=s(ze);g(ln.$$.fragment,cc),wv=l(cc),dn=n(cc,"P",{});var Nm=s(dn);Lv=i(Nm,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Ml=n(Nm,"CODE",{});var Ny=s(Ml);Ev=i(Ny,"initial_time"),Ny.forEach(t),Pv=i(Nm,"."),Nm.forEach(t),Fv=l(cc),ei=n(cc,"DIV",{class:!0});var Vy=s(ei);g(pn.$$.fragment,Vy),Vy.forEach(t),cc.forEach(t),Xp=l(e),pr=n(e,"H2",{class:!0});var Vm=s(pr);Gr=n(Vm,"A",{id:!0,class:!0,href:!0});var My=s(Gr);Gl=n(My,"SPAN",{});var Gy=s(Gl);g(mn.$$.fragment,Gy),Gy.forEach(t),My.forEach(t),Dv=l(Vm),jl=n(Vm,"SPAN",{});var jy=s(jl);Sv=i(jy,"Constraints"),jy.forEach(t),Vm.forEach(t),Jp=l(e),jr=n(e,"P",{});var Mm=s(jr);zv=i(Mm,"A "),ri=n(Mm,"A",{href:!0});var Hy=s(ri);Ov=i(Hy,"Constraint"),Hy.forEach(t),qv=i(Mm," can be used to force the generation to include specific tokens or sequences in the output."),Mm.forEach(t),Qp=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(fn.$$.fragment,T),Bv=l(T),Hl=n(T,"P",{});var Ry=s(Hl);Iv=i(Ry,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Ry.forEach(t),Cv=l(T),Rl=n(T,"P",{});var Ky=s(Rl);Av=i(Ky,"All classes that inherit Constraint must follow the requirement that"),Ky.forEach(t),Wv=l(T),g(Hr.$$.fragment,T),Nv=l(T),Kl=n(T,"P",{});var Uy=s(Kl);Vv=i(Uy,"will always terminate (halt)."),Uy.forEach(t),Mv=l(T),Rr=n(T,"DIV",{class:!0});var Gm=s(Rr);g(gn.$$.fragment,Gm),Gv=l(Gm),Ul=n(Gm,"P",{});var Yy=s(Ul);jv=i(Yy,"When called, returns the token that would take this constraint one step closer to being fulfilled."),Yy.forEach(t),Gm.forEach(t),Hv=l(T),Kr=n(T,"DIV",{class:!0});var jm=s(Kr);g(un.$$.fragment,jm),Rv=l(jm),Yl=n(jm,"P",{});var Xy=s(Yl);Kv=i(Xy,"Creates a new instance of this constraint."),Xy.forEach(t),jm.forEach(t),Uv=l(T),Ur=n(T,"DIV",{class:!0});var Hm=s(Ur);g(hn.$$.fragment,Hm),Yv=l(Hm),Xl=n(Hm,"P",{});var Jy=s(Xl);Xv=i(Jy,"Reads in a token and returns whether it creates progress."),Jy.forEach(t),Hm.forEach(t),Jv=l(T),Yr=n(T,"DIV",{class:!0});var Rm=s(Yr);g(_n.$$.fragment,Rm),Qv=l(Rm),bn=n(Rm,"P",{});var Km=s(bn);Zv=i(Km,"Returns the number of remaining steps of "),Jl=n(Km,"CODE",{});var Qy=s(Jl);e1=i(Qy,"advance()"),Qy.forEach(t),r1=i(Km," in order to complete this constraint."),Km.forEach(t),Rm.forEach(t),t1=l(T),Xr=n(T,"DIV",{class:!0});var Um=s(Xr);g(vn.$$.fragment,Um),o1=l(Um),Ql=n(Um,"P",{});var Zy=s(Ql);n1=i(Zy,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Zy.forEach(t),Um.forEach(t),s1=l(T),Jr=n(T,"DIV",{class:!0});var Ym=s(Jr);g($n.$$.fragment,Ym),a1=l(Ym),Zl=n(Ym,"P",{});var e4=s(Zl);i1=i(e4,"Tests whether this constraint has been properly defined."),e4.forEach(t),Ym.forEach(t),c1=l(T),Me=n(T,"DIV",{class:!0});var lc=s(Me);g(Tn.$$.fragment,lc),l1=l(lc),yn=n(lc,"P",{});var Xm=s(yn);d1=i(Xm,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),ed=n(Xm,"CODE",{});var r4=s(ed);p1=i(r4,"does_advance(self, token_id: int)"),r4.forEach(t),m1=i(Xm,"."),Xm.forEach(t),f1=l(lc),rd=n(lc,"P",{});var t4=s(rd);g1=i(t4,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),t4.forEach(t),lc.forEach(t),T.forEach(t),Zp=l(e),mr=n(e,"DIV",{class:!0});var Jm=s(mr);g(kn.$$.fragment,Jm),u1=l(Jm),ti=n(Jm,"P",{});var g$=s(ti);oi=n(g$,"A",{href:!0});var o4=s(oi);h1=i(o4,"Constraint"),o4.forEach(t),_1=i(g$," enforcing that an ordered sequence of tokens is included in the output."),g$.forEach(t),Jm.forEach(t),em=l(e),fr=n(e,"DIV",{class:!0});var Qm=s(fr);g(xn.$$.fragment,Qm),b1=l(Qm),wn=n(Qm,"P",{});var Zm=s(wn);v1=i(Zm,"A special "),ni=n(Zm,"A",{href:!0});var n4=s(ni);$1=i(n4,"Constraint"),n4.forEach(t),T1=i(Zm," that is fulfilled by fulfilling just one of several constraints."),Zm.forEach(t),Qm.forEach(t),rm=l(e),Oe=n(e,"DIV",{class:!0});var dc=s(Oe);g(Ln.$$.fragment,dc),y1=l(dc),En=n(dc,"P",{});var ef=s(En);k1=i(ef,"A special "),si=n(ef,"A",{href:!0});var s4=s(si);x1=i(s4,"Constraint"),s4.forEach(t),w1=i(ef,` that is fulfilled by fulfilling a series of conjunctive and disjunctive constraints. It
handles multiple constraints simultaneously, even for edge cases.`),ef.forEach(t),L1=l(dc),qe=n(dc,"UL",{});var ot=s(qe);td=n(ot,"LI",{});var a4=s(td);E1=i(a4,"allow [1,2,3] fulfill [[1,2],[2,3]], where words overlap"),a4.forEach(t),P1=l(ot),od=n(ot,"LI",{});var i4=s(od);F1=i(i4,"allow [1,2,3,2,3,1] fulfill [[1],[2,3],[1,2,3]], where longest fulfills first"),i4.forEach(t),D1=l(ot),nd=n(ot,"LI",{});var c4=s(nd);S1=i(c4,"allow [1,2]/[1,3] fulfill [[[1],[2]],[[1],[3]]], where condition is ambiguous"),c4.forEach(t),z1=l(ot),sd=n(ot,"LI",{});var l4=s(sd);O1=i(l4,"allow [1,2]/[2] fulfill [[[1, 2, 3], [1, 2], [2]]], where redundant suffix shrinks"),l4.forEach(t),ot.forEach(t),dc.forEach(t),tm=l(e),A=n(e,"DIV",{class:!0});var nt=s(A);g(Pn.$$.fragment,nt),q1=l(nt),ad=n(nt,"P",{});var d4=s(ad);B1=i(d4,"A class for beam scorers to track its progress through a list of constraints."),d4.forEach(t),I1=l(nt),F=n(nt,"DIV",{class:!0});var j=s(F);g(Fn.$$.fragment,j),C1=l(j),id=n(j,"P",{});var p4=s(id);A1=i(p4,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),p4.forEach(t),W1=l(j),gr=n(j,"P",{});var pc=s(gr);N1=i(pc,"Given constraints "),cd=n(pc,"CODE",{});var m4=s(cd);V1=i(m4,"c_i = {t_ij | j == # of tokens}"),m4.forEach(t),M1=i(pc,`, If we\u2019re not in the middle of progressing through a
specific constraint `),ld=n(pc,"CODE",{});var f4=s(ld);G1=i(f4,"c_i"),f4.forEach(t),j1=i(pc,", we return:"),pc.forEach(t),H1=l(j),dd=n(j,"P",{});var g4=s(dd);pd=n(g4,"CODE",{});var u4=s(pd);R1=i(u4,"[t_k1 for k in indices of unfulfilled constraints]"),u4.forEach(t),g4.forEach(t),K1=l(j),Be=n(j,"P",{});var st=s(Be);U1=i(st,`If we are in the middle of a constraint, then we return:
`),md=n(st,"CODE",{});var h4=s(md);Y1=i(h4,"[t_ij]"),h4.forEach(t),X1=i(st,", where "),fd=n(st,"CODE",{});var _4=s(fd);J1=i(_4,"i"),_4.forEach(t),Q1=i(st," is the index of the inprogress constraint, "),gd=n(st,"CODE",{});var b4=s(gd);Z1=i(b4,"j"),b4.forEach(t),e2=i(st," is the next step for the constraint."),st.forEach(t),r2=l(j),ud=n(j,"P",{});var v4=s(ud);t2=i(v4,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),v4.forEach(t),j.forEach(t),o2=l(nt),Qr=n(nt,"DIV",{class:!0});var rf=s(Qr);g(Dn.$$.fragment,rf),n2=l(rf),hd=n(rf,"P",{});var $4=s(hd);s2=i($4,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),$4.forEach(t),rf.forEach(t),nt.forEach(t),om=l(e),ur=n(e,"H2",{class:!0});var tf=s(ur);Zr=n(tf,"A",{id:!0,class:!0,href:!0});var T4=s(Zr);_d=n(T4,"SPAN",{});var y4=s(_d);g(Sn.$$.fragment,y4),y4.forEach(t),T4.forEach(t),a2=l(tf),bd=n(tf,"SPAN",{});var k4=s(bd);i2=i(k4,"BeamSearch"),k4.forEach(t),tf.forEach(t),nm=l(e),W=n(e,"DIV",{class:!0});var at=s(W);g(zn.$$.fragment,at),c2=l(at),hr=n(at,"P",{});var mc=s(hr);l2=i(mc,"Abstract base class for all beam scorers that are used for "),ai=n(mc,"A",{href:!0});var x4=s(ai);d2=i(x4,"beam_search()"),x4.forEach(t),p2=i(mc,` and
`),ii=n(mc,"A",{href:!0});var w4=s(ii);m2=i(w4,"beam_sample()"),w4.forEach(t),f2=i(mc,"."),mc.forEach(t),g2=l(at),ci=n(at,"DIV",{class:!0});var L4=s(ci);g(On.$$.fragment,L4),L4.forEach(t),u2=l(at),li=n(at,"DIV",{class:!0});var E4=s(li);g(qn.$$.fragment,E4),E4.forEach(t),at.forEach(t),sm=l(e),P=n(e,"DIV",{class:!0});var H=s(P);g(Bn.$$.fragment,H),h2=l(H),di=n(H,"P",{});var u$=s(di);pi=n(u$,"A",{href:!0});var P4=s(pi);_2=i(P4,"BeamScorer"),P4.forEach(t),b2=i(u$," implementing standard beam search decoding."),u$.forEach(t),v2=l(H),In=n(H,"P",{});var of=s(In);$2=i(of,"Adapted in part from "),Cn=n(of,"A",{href:!0,rel:!0});var F4=s(Cn);T2=i(F4,`Facebook\u2019s XLM beam search
code`),F4.forEach(t),y2=i(of,"."),of.forEach(t),k2=l(H),mi=n(H,"P",{});var h$=s(mi);x2=i(h$,"Reference for the diverse beam search algorithm and implementation "),An=n(h$,"A",{href:!0,rel:!0});var D4=s(An);w2=i(D4,`Ashwin Kalyan\u2019s DBS
implementation`),D4.forEach(t),h$.forEach(t),L2=l(H),fi=n(H,"DIV",{class:!0});var S4=s(fi);g(Wn.$$.fragment,S4),S4.forEach(t),E2=l(H),gi=n(H,"DIV",{class:!0});var z4=s(gi);g(Nn.$$.fragment,z4),z4.forEach(t),H.forEach(t),am=l(e),N=n(e,"DIV",{class:!0});var it=s(N);g(Vn.$$.fragment,it),P2=l(it),ui=n(it,"P",{});var _$=s(ui);hi=n(_$,"A",{href:!0});var O4=s(hi);F2=i(O4,"BeamScorer"),O4.forEach(t),D2=i(_$," implementing constrained beam search decoding."),_$.forEach(t),S2=l(it),_i=n(it,"DIV",{class:!0});var q4=s(_i);g(Mn.$$.fragment,q4),q4.forEach(t),z2=l(it),bi=n(it,"DIV",{class:!0});var B4=s(bi);g(Gn.$$.fragment,B4),B4.forEach(t),it.forEach(t),im=l(e),_r=n(e,"H2",{class:!0});var nf=s(_r);et=n(nf,"A",{id:!0,class:!0,href:!0});var I4=s(et);vd=n(I4,"SPAN",{});var C4=s(vd);g(jn.$$.fragment,C4),C4.forEach(t),I4.forEach(t),O2=l(nf),$d=n(nf,"SPAN",{});var A4=s($d);q2=i(A4,"Utilities"),A4.forEach(t),nf.forEach(t),cm=l(e),Ie=n(e,"DIV",{class:!0});var fc=s(Ie);g(Hn.$$.fragment,fc),B2=l(fc),Td=n(fc,"P",{});var W4=s(Td);I2=i(W4,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),W4.forEach(t),C2=l(fc),vi=n(fc,"P",{});var b$=s(vi);A2=i(b$,"From: "),Rn=n(b$,"A",{href:!0,rel:!0});var N4=s(Rn);W2=i(N4,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),N4.forEach(t),b$.forEach(t),fc.forEach(t),lm=l(e),Ce=n(e,"DIV",{class:!0});var gc=s(Ce);g(Kn.$$.fragment,gc),N2=l(gc),yd=n(gc,"P",{});var V4=s(yd);V2=i(V4,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),V4.forEach(t),M2=l(gc),$i=n(gc,"P",{});var v$=s($i);G2=i(v$,"From: "),Un=n(v$,"A",{href:!0,rel:!0});var M4=s(Un);j2=i(M4,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),M4.forEach(t),v$.forEach(t),gc.forEach(t),this.h()},h(){d(w,"name","hf:doc:metadata"),d(w,"content",JSON.stringify(Q4)),d(We,"id","utilities-for-generation"),d(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(We,"href","#utilities-for-generation"),d(k,"class","relative group"),d(Jn,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Qn,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(Zn,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(es,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(rs,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(ts,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(os,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(vr,"id","generate-outputs"),d(vr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vr,"href","#generate-outputs"),d(Ue,"class","relative group"),d(ss,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(as,"href","/docs/transformers/pr_17920/en/main_classes/output#transformers.utils.ModelOutput"),d(is,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(ls,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Tr,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Tr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tr,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Ye,"class","relative group"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(kr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kr,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Qe,"class","relative group"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(wr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wr,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(rr,"class","relative group"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(Lr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lr,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(nr,"class","relative group"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"id","transformers.LogitsProcessor"),d(Er,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Er,"href","#transformers.LogitsProcessor"),d(ir,"class","relative group"),d(us,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hs,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(_s,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsWarper"),d(bs,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(vs,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsWarper"),d($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ys,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ws,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsWarper"),d(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ps,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ss,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsWarper"),d(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qs,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsWarper"),d(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cs,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ut,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Ut,"rel","nofollow"),d(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ns,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ms,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Zt,"href","https://arxiv.org/abs/2010.00904"),d(Zt,"rel","nofollow"),d(Gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(js,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Hs,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(to,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(to,"rel","nofollow"),d(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Us,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xs,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qs,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.LogitsProcessor"),d(Zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ea,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ra,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(na,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsWarper"),d(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ia,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsWarper"),d(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(da,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsWarper"),d(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fa,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ha,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ba,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Po,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Po,"rel","nofollow"),d(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ta,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xa,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(La,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pa,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Fa,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Da,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Sa,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qa,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Na,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ha,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ua,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"id","transformers.StoppingCriteria"),d(Vr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vr,"href","#transformers.StoppingCriteria"),d(lr,"class","relative group"),d(Xa,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.StoppingCriteria"),d(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ei,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"id","transformers.Constraint"),d(Gr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gr,"href","#transformers.Constraint"),d(pr,"class","relative group"),d(ri,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.Constraint"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oi,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.Constraint"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ni,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.Constraint"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(si,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.Constraint"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zr,"id","transformers.BeamScorer"),d(Zr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zr,"href","#transformers.BeamScorer"),d(ur,"class","relative group"),d(ai,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(ii,"href","/docs/transformers/pr_17920/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pi,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.BeamScorer"),d(Cn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(Cn,"rel","nofollow"),d(An,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(An,"rel","nofollow"),d(fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hi,"href","/docs/transformers/pr_17920/en/internal/generation_utils#transformers.BeamScorer"),d(_i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(et,"id","transformers.top_k_top_p_filtering"),d(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(et,"href","#transformers.top_k_top_p_filtering"),d(_r,"class","relative group"),d(Rn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Rn,"rel","nofollow"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Un,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Un,"rel","nofollow"),d(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){r(document.head,w),m(e,Ke,p),m(e,k,p),r(k,We),r(We,uc),u(ct,uc,null),r(k,sf),r(k,hc),r(hc,af),m(e,Dd,p),m(e,y,p),r(y,cf),r(y,Jn),r(Jn,lf),r(y,df),r(y,Qn),r(Qn,pf),r(y,mf),r(y,Zn),r(Zn,ff),r(y,gf),r(y,es),r(es,uf),r(y,hf),r(y,rs),r(rs,_f),r(y,bf),r(y,ts),r(ts,vf),r(y,$f),r(y,os),r(os,Tf),r(y,yf),m(e,Sd,p),m(e,ns,p),r(ns,kf),m(e,zd,p),m(e,Ue,p),r(Ue,vr),r(vr,_c),u(lt,_c,null),r(Ue,xf),r(Ue,bc),r(bc,wf),m(e,Od,p),m(e,V,p),r(V,Lf),r(V,ss),r(ss,Ef),r(V,Pf),r(V,as),r(as,Ff),r(V,Df),r(V,is),r(is,Sf),r(V,zf),m(e,qd,p),m(e,cs,p),r(cs,Of),m(e,Bd,p),u(dt,e,p),m(e,Id,p),m(e,Ne,p),r(Ne,qf),r(Ne,vc),r(vc,Bf),r(Ne,If),r(Ne,ls),r(ls,Cf),r(Ne,Af),m(e,Cd,p),m(e,M,p),r(M,ds),r(ds,$c),r($c,Wf),r(ds,Nf),r(M,Vf),r(M,ps),r(ps,Tc),r(Tc,Mf),r(ps,Gf),r(M,jf),r(M,ms),r(ms,yc),r(yc,Hf),r(ms,Rf),r(M,Kf),r(M,fs),r(fs,kc),r(kc,Uf),r(fs,Yf),m(e,Ad,p),m(e,x,p),r(x,Xf),r(x,xc),r(xc,Jf),r(x,Qf),r(x,wc),r(wc,Zf),r(x,eg),r(x,Lc),r(Lc,rg),r(x,tg),r(x,Ec),r(Ec,og),r(x,ng),r(x,Pc),r(Pc,sg),r(x,ag),r(x,Fc),r(Fc,ig),r(x,cg),m(e,Wd,p),m(e,S,p),r(S,lg),r(S,Dc),r(Dc,dg),r(S,pg),r(S,Sc),r(Sc,mg),r(S,fg),r(S,zc),r(zc,gg),r(S,ug),r(S,Oc),r(Oc,hg),r(S,_g),m(e,Nd,p),m(e,z,p),r(z,bg),r(z,qc),r(qc,vg),r(z,$g),r(z,Bc),r(Bc,Tg),r(z,yg),r(z,Ic),r(Ic,kg),r(z,xg),r(z,Cc),r(Cc,wg),r(z,Lg),m(e,Vd,p),u(pt,e,p),m(e,Md,p),m(e,$r,p),r($r,Eg),r($r,Ac),r(Ac,Pg),r($r,Fg),m(e,Gd,p),m(e,O,p),r(O,Dg),r(O,Wc),r(Wc,Sg),r(O,zg),r(O,Nc),r(Nc,Og),r(O,qg),r(O,Vc),r(Vc,Bg),r(O,Ig),r(O,Mc),r(Mc,Cg),r(O,Ag),m(e,jd,p),m(e,gs,p),r(gs,Wg),m(e,Hd,p),m(e,Ye,p),r(Ye,Tr),r(Tr,Gc),u(mt,Gc,null),r(Ye,Ng),r(Ye,jc),r(jc,Vg),m(e,Rd,p),m(e,Xe,p),u(ft,Xe,null),r(Xe,Mg),r(Xe,Hc),r(Hc,Gg),m(e,Kd,p),m(e,Je,p),u(gt,Je,null),r(Je,jg),r(Je,Rc),r(Rc,Hg),m(e,Ud,p),m(e,R,p),u(ut,R,null),r(R,Rg),r(R,Kc),r(Kc,Kg),r(R,Ug),r(R,yr),u(ht,yr,null),r(yr,Yg),r(yr,Uc),r(Uc,Xg),m(e,Yd,p),m(e,Qe,p),r(Qe,kr),r(kr,Yc),u(_t,Yc,null),r(Qe,Jg),r(Qe,Xc),r(Xc,Qg),m(e,Xd,p),m(e,Ze,p),u(bt,Ze,null),r(Ze,Zg),r(Ze,Jc),r(Jc,eu),m(e,Jd,p),m(e,er,p),u(vt,er,null),r(er,ru),r(er,Qc),r(Qc,tu),m(e,Qd,p),m(e,K,p),u($t,K,null),r(K,ou),r(K,Zc),r(Zc,nu),r(K,su),r(K,xr),u(Tt,xr,null),r(xr,au),r(xr,el),r(el,iu),m(e,Zd,p),m(e,rr,p),r(rr,wr),r(wr,rl),u(yt,rl,null),r(rr,cu),r(rr,tl),r(tl,lu),m(e,ep,p),m(e,tr,p),u(kt,tr,null),r(tr,du),r(tr,ol),r(ol,pu),m(e,rp,p),m(e,or,p),u(xt,or,null),r(or,mu),r(or,nl),r(nl,fu),m(e,tp,p),m(e,nr,p),r(nr,Lr),r(Lr,sl),u(wt,sl,null),r(nr,gu),r(nr,al),r(al,uu),m(e,op,p),m(e,sr,p),u(Lt,sr,null),r(sr,hu),r(sr,il),r(il,_u),m(e,np,p),m(e,ar,p),u(Et,ar,null),r(ar,bu),r(ar,cl),r(cl,vu),m(e,sp,p),m(e,ir,p),r(ir,Er),r(Er,ll),u(Pt,ll,null),r(ir,$u),r(ir,dl),r(dl,Tu),m(e,ap,p),m(e,Pr,p),r(Pr,yu),r(Pr,us),r(us,ku),r(Pr,xu),m(e,ip,p),m(e,U,p),u(Ft,U,null),r(U,wu),r(U,pl),r(pl,Lu),r(U,Eu),r(U,Fr),u(Dt,Fr,null),r(Fr,Pu),r(Fr,ml),r(ml,Fu),m(e,cp,p),m(e,Y,p),u(St,Y,null),r(Y,Du),r(Y,L),r(L,Su),r(L,hs),r(hs,zu),r(L,Ou),r(L,_s),r(_s,qu),r(L,Bu),r(L,fl),r(fl,Iu),r(L,Cu),r(L,gl),r(gl,ul),r(ul,Au),r(L,Wu),r(L,bs),r(bs,Nu),r(L,Vu),r(L,vs),r(vs,Mu),r(L,Gu),r(Y,ju),r(Y,$s),u(zt,$s,null),m(e,lp,p),m(e,X,p),u(Ot,X,null),r(X,Hu),r(X,hl),r(hl,Ru),r(X,Ku),r(X,Dr),u(qt,Dr,null),r(Dr,Uu),r(Dr,_l),r(_l,Yu),m(e,dp,p),m(e,J,p),u(Bt,J,null),r(J,Xu),r(J,Ts),r(Ts,ys),r(ys,Ju),r(Ts,Qu),r(J,Zu),r(J,ks),u(It,ks,null),m(e,pp,p),m(e,Q,p),u(Ct,Q,null),r(Q,eh),r(Q,xs),r(xs,ws),r(ws,rh),r(xs,th),r(Q,oh),r(Q,Ls),u(At,Ls,null),m(e,mp,p),m(e,Z,p),u(Wt,Z,null),r(Z,nh),r(Z,Es),r(Es,Ps),r(Ps,sh),r(Es,ah),r(Z,ih),r(Z,Fs),u(Nt,Fs,null),m(e,fp,p),m(e,ee,p),u(Vt,ee,null),r(ee,ch),r(ee,Ds),r(Ds,Ss),r(Ss,lh),r(Ds,dh),r(ee,ph),r(ee,zs),u(Mt,zs,null),m(e,gp,p),m(e,re,p),u(Gt,re,null),r(re,mh),r(re,Os),r(Os,qs),r(qs,fh),r(Os,gh),r(re,uh),r(re,Bs),u(jt,Bs,null),m(e,up,p),m(e,cr,p),u(Ht,cr,null),r(cr,hh),r(cr,Is),u(Rt,Is,null),m(e,hp,p),m(e,te,p),u(Kt,te,null),r(te,_h),r(te,Sr),r(Sr,Cs),r(Cs,bh),r(Sr,vh),r(Sr,Ut),r(Ut,$h),r(Sr,Th),r(te,yh),r(te,As),u(Yt,As,null),m(e,_p,p),m(e,oe,p),u(Xt,oe,null),r(oe,kh),r(oe,Ws),r(Ws,Ns),r(Ns,xh),r(Ws,wh),r(oe,Lh),r(oe,Vs),u(Jt,Vs,null),m(e,bp,p),m(e,ne,p),u(Qt,ne,null),r(ne,Eh),r(ne,zr),r(zr,Ms),r(Ms,Ph),r(zr,Fh),r(zr,Zt),r(Zt,Dh),r(zr,Sh),r(ne,zh),r(ne,Gs),u(eo,Gs,null),m(e,vp,p),m(e,se,p),u(ro,se,null),r(se,Oh),r(se,Ve),r(Ve,js),r(js,qh),r(Ve,Bh),r(Ve,Hs),r(Hs,Ih),r(Ve,Ch),r(Ve,to),r(to,Ah),r(Ve,Wh),r(se,Nh),r(se,Rs),u(oo,Rs,null),m(e,$p,p),m(e,ae,p),u(no,ae,null),r(ae,Vh),r(ae,Ks),r(Ks,Us),r(Us,Mh),r(Ks,Gh),r(ae,jh),r(ae,Ys),u(so,Ys,null),m(e,Tp,p),m(e,ie,p),u(ao,ie,null),r(ie,Hh),r(ie,Or),r(Or,Xs),r(Xs,Rh),r(Or,Kh),r(Or,bl),r(bl,Uh),r(Or,Yh),r(ie,Xh),r(ie,Js),u(io,Js,null),m(e,yp,p),m(e,ce,p),u(co,ce,null),r(ce,Jh),r(ce,G),r(G,Qs),r(Qs,Qh),r(G,Zh),r(G,vl),r(vl,e_),r(G,r_),r(G,$l),r($l,t_),r(G,o_),r(G,Tl),r(Tl,n_),r(G,s_),r(ce,a_),r(ce,Zs),u(lo,Zs,null),m(e,kp,p),m(e,le,p),u(po,le,null),r(le,i_),r(le,yl),r(yl,c_),r(le,l_),r(le,qr),u(mo,qr,null),r(qr,d_),r(qr,kl),r(kl,p_),m(e,xp,p),m(e,de,p),u(fo,de,null),r(de,m_),r(de,C),r(C,f_),r(C,ea),r(ea,g_),r(C,u_),r(C,xl),r(xl,h_),r(C,__),r(C,wl),r(wl,Ll),r(Ll,b_),r(C,v_),r(C,ra),r(ra,$_),r(C,T_),r(de,y_),r(de,ta),u(go,ta,null),m(e,wp,p),m(e,pe,p),u(uo,pe,null),r(pe,k_),r(pe,El),r(El,x_),r(pe,w_),r(pe,Br),u(ho,Br,null),r(Br,L_),r(Br,Pl),r(Pl,E_),m(e,Lp,p),m(e,me,p),u(_o,me,null),r(me,P_),r(me,oa),r(oa,na),r(na,F_),r(oa,D_),r(me,S_),r(me,sa),u(bo,sa,null),m(e,Ep,p),m(e,fe,p),u(vo,fe,null),r(fe,z_),r(fe,aa),r(aa,ia),r(ia,O_),r(aa,q_),r(fe,B_),r(fe,ca),u($o,ca,null),m(e,Pp,p),m(e,ge,p),u(To,ge,null),r(ge,I_),r(ge,la),r(la,da),r(da,C_),r(la,A_),r(ge,W_),r(ge,pa),u(yo,pa,null),m(e,Fp,p),m(e,ue,p),u(ko,ue,null),r(ue,N_),r(ue,ma),r(ma,fa),r(fa,V_),r(ma,M_),r(ue,G_),r(ue,ga),u(xo,ga,null),m(e,Dp,p),m(e,he,p),u(wo,he,null),r(he,j_),r(he,ua),r(ua,ha),r(ha,H_),r(ua,R_),r(he,K_),r(he,_a),u(Lo,_a,null),m(e,Sp,p),m(e,_e,p),u(Eo,_e,null),r(_e,U_),r(_e,Ir),r(Ir,ba),r(ba,Y_),r(Ir,X_),r(Ir,Po),r(Po,J_),r(Ir,Q_),r(_e,Z_),r(_e,va),u(Fo,va,null),m(e,zp,p),m(e,be,p),u(Do,be,null),r(be,eb),r(be,$a),r($a,Ta),r(Ta,rb),r($a,tb),r(be,ob),r(be,ya),u(So,ya,null),m(e,Op,p),m(e,ve,p),u(zo,ve,null),r(ve,nb),r(ve,ka),r(ka,xa),r(xa,sb),r(ka,ab),r(ve,ib),r(ve,wa),u(Oo,wa,null),m(e,qp,p),m(e,$e,p),u(qo,$e,null),r($e,cb),r($e,Cr),r(Cr,La),r(La,lb),r(Cr,db),r(Cr,Fl),r(Fl,pb),r(Cr,mb),r($e,fb),r($e,Ea),u(Bo,Ea,null),m(e,Bp,p),m(e,Te,p),u(Io,Te,null),r(Te,gb),r(Te,Dl),r(Dl,ub),r(Te,hb),r(Te,Ar),u(Co,Ar,null),r(Ar,_b),r(Ar,Sl),r(Sl,bb),m(e,Ip,p),m(e,ye,p),u(Ao,ye,null),r(ye,vb),r(ye,E),r(E,$b),r(E,Pa),r(Pa,Tb),r(E,yb),r(E,Fa),r(Fa,kb),r(E,xb),r(E,zl),r(zl,wb),r(E,Lb),r(E,Ol),r(Ol,ql),r(ql,Eb),r(E,Pb),r(E,Da),r(Da,Fb),r(E,Db),r(E,Sa),r(Sa,Sb),r(E,zb),r(ye,Ob),r(ye,za),u(Wo,za,null),m(e,Cp,p),m(e,ke,p),u(No,ke,null),r(ke,qb),r(ke,Bl),r(Bl,Bb),r(ke,Ib),r(ke,Wr),u(Vo,Wr,null),r(Wr,Cb),r(Wr,Il),r(Il,Ab),m(e,Ap,p),m(e,xe,p),u(Mo,xe,null),r(xe,Wb),r(xe,Oa),r(Oa,qa),r(qa,Nb),r(Oa,Vb),r(xe,Mb),r(xe,Ba),u(Go,Ba,null),m(e,Wp,p),m(e,we,p),u(jo,we,null),r(we,Gb),r(we,Ia),r(Ia,Ca),r(Ca,jb),r(Ia,Hb),r(we,Rb),r(we,Aa),u(Ho,Aa,null),m(e,Np,p),m(e,Le,p),u(Ro,Le,null),r(Le,Kb),r(Le,Wa),r(Wa,Na),r(Na,Ub),r(Wa,Yb),r(Le,Xb),r(Le,Va),u(Ko,Va,null),m(e,Vp,p),m(e,Ee,p),u(Uo,Ee,null),r(Ee,Jb),r(Ee,Ma),r(Ma,Ga),r(Ga,Qb),r(Ma,Zb),r(Ee,ev),r(Ee,ja),u(Yo,ja,null),m(e,Mp,p),m(e,Pe,p),u(Xo,Pe,null),r(Pe,rv),r(Pe,Nr),r(Nr,Ha),r(Ha,tv),r(Nr,ov),r(Nr,Cl),r(Cl,nv),r(Nr,sv),r(Pe,av),r(Pe,Ra),u(Jo,Ra,null),m(e,Gp,p),m(e,Fe,p),u(Qo,Fe,null),r(Fe,iv),r(Fe,Ka),r(Ka,Ua),r(Ua,cv),r(Ka,lv),r(Fe,dv),r(Fe,Ya),u(Zo,Ya,null),m(e,jp,p),m(e,lr,p),r(lr,Vr),r(Vr,Al),u(en,Al,null),r(lr,pv),r(lr,Wl),r(Wl,mv),m(e,Hp,p),m(e,Mr,p),r(Mr,fv),r(Mr,Xa),r(Xa,gv),r(Mr,uv),m(e,Rp,p),m(e,De,p),u(rn,De,null),r(De,hv),r(De,Nl),r(Nl,_v),r(De,bv),r(De,Ja),u(tn,Ja,null),m(e,Kp,p),m(e,dr,p),u(on,dr,null),r(dr,vv),r(dr,Qa),u(nn,Qa,null),m(e,Up,p),m(e,Se,p),u(sn,Se,null),r(Se,$v),r(Se,an),r(an,Tv),r(an,Vl),r(Vl,yv),r(an,kv),r(Se,xv),r(Se,Za),u(cn,Za,null),m(e,Yp,p),m(e,ze,p),u(ln,ze,null),r(ze,wv),r(ze,dn),r(dn,Lv),r(dn,Ml),r(Ml,Ev),r(dn,Pv),r(ze,Fv),r(ze,ei),u(pn,ei,null),m(e,Xp,p),m(e,pr,p),r(pr,Gr),r(Gr,Gl),u(mn,Gl,null),r(pr,Dv),r(pr,jl),r(jl,Sv),m(e,Jp,p),m(e,jr,p),r(jr,zv),r(jr,ri),r(ri,Ov),r(jr,qv),m(e,Qp,p),m(e,$,p),u(fn,$,null),r($,Bv),r($,Hl),r(Hl,Iv),r($,Cv),r($,Rl),r(Rl,Av),r($,Wv),u(Hr,$,null),r($,Nv),r($,Kl),r(Kl,Vv),r($,Mv),r($,Rr),u(gn,Rr,null),r(Rr,Gv),r(Rr,Ul),r(Ul,jv),r($,Hv),r($,Kr),u(un,Kr,null),r(Kr,Rv),r(Kr,Yl),r(Yl,Kv),r($,Uv),r($,Ur),u(hn,Ur,null),r(Ur,Yv),r(Ur,Xl),r(Xl,Xv),r($,Jv),r($,Yr),u(_n,Yr,null),r(Yr,Qv),r(Yr,bn),r(bn,Zv),r(bn,Jl),r(Jl,e1),r(bn,r1),r($,t1),r($,Xr),u(vn,Xr,null),r(Xr,o1),r(Xr,Ql),r(Ql,n1),r($,s1),r($,Jr),u($n,Jr,null),r(Jr,a1),r(Jr,Zl),r(Zl,i1),r($,c1),r($,Me),u(Tn,Me,null),r(Me,l1),r(Me,yn),r(yn,d1),r(yn,ed),r(ed,p1),r(yn,m1),r(Me,f1),r(Me,rd),r(rd,g1),m(e,Zp,p),m(e,mr,p),u(kn,mr,null),r(mr,u1),r(mr,ti),r(ti,oi),r(oi,h1),r(ti,_1),m(e,em,p),m(e,fr,p),u(xn,fr,null),r(fr,b1),r(fr,wn),r(wn,v1),r(wn,ni),r(ni,$1),r(wn,T1),m(e,rm,p),m(e,Oe,p),u(Ln,Oe,null),r(Oe,y1),r(Oe,En),r(En,k1),r(En,si),r(si,x1),r(En,w1),r(Oe,L1),r(Oe,qe),r(qe,td),r(td,E1),r(qe,P1),r(qe,od),r(od,F1),r(qe,D1),r(qe,nd),r(nd,S1),r(qe,z1),r(qe,sd),r(sd,O1),m(e,tm,p),m(e,A,p),u(Pn,A,null),r(A,q1),r(A,ad),r(ad,B1),r(A,I1),r(A,F),u(Fn,F,null),r(F,C1),r(F,id),r(id,A1),r(F,W1),r(F,gr),r(gr,N1),r(gr,cd),r(cd,V1),r(gr,M1),r(gr,ld),r(ld,G1),r(gr,j1),r(F,H1),r(F,dd),r(dd,pd),r(pd,R1),r(F,K1),r(F,Be),r(Be,U1),r(Be,md),r(md,Y1),r(Be,X1),r(Be,fd),r(fd,J1),r(Be,Q1),r(Be,gd),r(gd,Z1),r(Be,e2),r(F,r2),r(F,ud),r(ud,t2),r(A,o2),r(A,Qr),u(Dn,Qr,null),r(Qr,n2),r(Qr,hd),r(hd,s2),m(e,om,p),m(e,ur,p),r(ur,Zr),r(Zr,_d),u(Sn,_d,null),r(ur,a2),r(ur,bd),r(bd,i2),m(e,nm,p),m(e,W,p),u(zn,W,null),r(W,c2),r(W,hr),r(hr,l2),r(hr,ai),r(ai,d2),r(hr,p2),r(hr,ii),r(ii,m2),r(hr,f2),r(W,g2),r(W,ci),u(On,ci,null),r(W,u2),r(W,li),u(qn,li,null),m(e,sm,p),m(e,P,p),u(Bn,P,null),r(P,h2),r(P,di),r(di,pi),r(pi,_2),r(di,b2),r(P,v2),r(P,In),r(In,$2),r(In,Cn),r(Cn,T2),r(In,y2),r(P,k2),r(P,mi),r(mi,x2),r(mi,An),r(An,w2),r(P,L2),r(P,fi),u(Wn,fi,null),r(P,E2),r(P,gi),u(Nn,gi,null),m(e,am,p),m(e,N,p),u(Vn,N,null),r(N,P2),r(N,ui),r(ui,hi),r(hi,F2),r(ui,D2),r(N,S2),r(N,_i),u(Mn,_i,null),r(N,z2),r(N,bi),u(Gn,bi,null),m(e,im,p),m(e,_r,p),r(_r,et),r(et,vd),u(jn,vd,null),r(_r,O2),r(_r,$d),r($d,q2),m(e,cm,p),m(e,Ie,p),u(Hn,Ie,null),r(Ie,B2),r(Ie,Td),r(Td,I2),r(Ie,C2),r(Ie,vi),r(vi,A2),r(vi,Rn),r(Rn,W2),m(e,lm,p),m(e,Ce,p),u(Kn,Ce,null),r(Ce,N2),r(Ce,yd),r(yd,V2),r(Ce,M2),r(Ce,$i),r($i,G2),r($i,Un),r(Un,j2),dm=!0},p(e,[p]){const Yn={};p&2&&(Yn.$$scope={dirty:p,ctx:e}),Hr.$set(Yn)},i(e){dm||(h(ct.$$.fragment,e),h(lt.$$.fragment,e),h(dt.$$.fragment,e),h(pt.$$.fragment,e),h(mt.$$.fragment,e),h(ft.$$.fragment,e),h(gt.$$.fragment,e),h(ut.$$.fragment,e),h(ht.$$.fragment,e),h(_t.$$.fragment,e),h(bt.$$.fragment,e),h(vt.$$.fragment,e),h($t.$$.fragment,e),h(Tt.$$.fragment,e),h(yt.$$.fragment,e),h(kt.$$.fragment,e),h(xt.$$.fragment,e),h(wt.$$.fragment,e),h(Lt.$$.fragment,e),h(Et.$$.fragment,e),h(Pt.$$.fragment,e),h(Ft.$$.fragment,e),h(Dt.$$.fragment,e),h(St.$$.fragment,e),h(zt.$$.fragment,e),h(Ot.$$.fragment,e),h(qt.$$.fragment,e),h(Bt.$$.fragment,e),h(It.$$.fragment,e),h(Ct.$$.fragment,e),h(At.$$.fragment,e),h(Wt.$$.fragment,e),h(Nt.$$.fragment,e),h(Vt.$$.fragment,e),h(Mt.$$.fragment,e),h(Gt.$$.fragment,e),h(jt.$$.fragment,e),h(Ht.$$.fragment,e),h(Rt.$$.fragment,e),h(Kt.$$.fragment,e),h(Yt.$$.fragment,e),h(Xt.$$.fragment,e),h(Jt.$$.fragment,e),h(Qt.$$.fragment,e),h(eo.$$.fragment,e),h(ro.$$.fragment,e),h(oo.$$.fragment,e),h(no.$$.fragment,e),h(so.$$.fragment,e),h(ao.$$.fragment,e),h(io.$$.fragment,e),h(co.$$.fragment,e),h(lo.$$.fragment,e),h(po.$$.fragment,e),h(mo.$$.fragment,e),h(fo.$$.fragment,e),h(go.$$.fragment,e),h(uo.$$.fragment,e),h(ho.$$.fragment,e),h(_o.$$.fragment,e),h(bo.$$.fragment,e),h(vo.$$.fragment,e),h($o.$$.fragment,e),h(To.$$.fragment,e),h(yo.$$.fragment,e),h(ko.$$.fragment,e),h(xo.$$.fragment,e),h(wo.$$.fragment,e),h(Lo.$$.fragment,e),h(Eo.$$.fragment,e),h(Fo.$$.fragment,e),h(Do.$$.fragment,e),h(So.$$.fragment,e),h(zo.$$.fragment,e),h(Oo.$$.fragment,e),h(qo.$$.fragment,e),h(Bo.$$.fragment,e),h(Io.$$.fragment,e),h(Co.$$.fragment,e),h(Ao.$$.fragment,e),h(Wo.$$.fragment,e),h(No.$$.fragment,e),h(Vo.$$.fragment,e),h(Mo.$$.fragment,e),h(Go.$$.fragment,e),h(jo.$$.fragment,e),h(Ho.$$.fragment,e),h(Ro.$$.fragment,e),h(Ko.$$.fragment,e),h(Uo.$$.fragment,e),h(Yo.$$.fragment,e),h(Xo.$$.fragment,e),h(Jo.$$.fragment,e),h(Qo.$$.fragment,e),h(Zo.$$.fragment,e),h(en.$$.fragment,e),h(rn.$$.fragment,e),h(tn.$$.fragment,e),h(on.$$.fragment,e),h(nn.$$.fragment,e),h(sn.$$.fragment,e),h(cn.$$.fragment,e),h(ln.$$.fragment,e),h(pn.$$.fragment,e),h(mn.$$.fragment,e),h(fn.$$.fragment,e),h(Hr.$$.fragment,e),h(gn.$$.fragment,e),h(un.$$.fragment,e),h(hn.$$.fragment,e),h(_n.$$.fragment,e),h(vn.$$.fragment,e),h($n.$$.fragment,e),h(Tn.$$.fragment,e),h(kn.$$.fragment,e),h(xn.$$.fragment,e),h(Ln.$$.fragment,e),h(Pn.$$.fragment,e),h(Fn.$$.fragment,e),h(Dn.$$.fragment,e),h(Sn.$$.fragment,e),h(zn.$$.fragment,e),h(On.$$.fragment,e),h(qn.$$.fragment,e),h(Bn.$$.fragment,e),h(Wn.$$.fragment,e),h(Nn.$$.fragment,e),h(Vn.$$.fragment,e),h(Mn.$$.fragment,e),h(Gn.$$.fragment,e),h(jn.$$.fragment,e),h(Hn.$$.fragment,e),h(Kn.$$.fragment,e),dm=!0)},o(e){_(ct.$$.fragment,e),_(lt.$$.fragment,e),_(dt.$$.fragment,e),_(pt.$$.fragment,e),_(mt.$$.fragment,e),_(ft.$$.fragment,e),_(gt.$$.fragment,e),_(ut.$$.fragment,e),_(ht.$$.fragment,e),_(_t.$$.fragment,e),_(bt.$$.fragment,e),_(vt.$$.fragment,e),_($t.$$.fragment,e),_(Tt.$$.fragment,e),_(yt.$$.fragment,e),_(kt.$$.fragment,e),_(xt.$$.fragment,e),_(wt.$$.fragment,e),_(Lt.$$.fragment,e),_(Et.$$.fragment,e),_(Pt.$$.fragment,e),_(Ft.$$.fragment,e),_(Dt.$$.fragment,e),_(St.$$.fragment,e),_(zt.$$.fragment,e),_(Ot.$$.fragment,e),_(qt.$$.fragment,e),_(Bt.$$.fragment,e),_(It.$$.fragment,e),_(Ct.$$.fragment,e),_(At.$$.fragment,e),_(Wt.$$.fragment,e),_(Nt.$$.fragment,e),_(Vt.$$.fragment,e),_(Mt.$$.fragment,e),_(Gt.$$.fragment,e),_(jt.$$.fragment,e),_(Ht.$$.fragment,e),_(Rt.$$.fragment,e),_(Kt.$$.fragment,e),_(Yt.$$.fragment,e),_(Xt.$$.fragment,e),_(Jt.$$.fragment,e),_(Qt.$$.fragment,e),_(eo.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(uo.$$.fragment,e),_(ho.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_(vo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(Eo.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Co.$$.fragment,e),_(Ao.$$.fragment,e),_(Wo.$$.fragment,e),_(No.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(rn.$$.fragment,e),_(tn.$$.fragment,e),_(on.$$.fragment,e),_(nn.$$.fragment,e),_(sn.$$.fragment,e),_(cn.$$.fragment,e),_(ln.$$.fragment,e),_(pn.$$.fragment,e),_(mn.$$.fragment,e),_(fn.$$.fragment,e),_(Hr.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_(hn.$$.fragment,e),_(_n.$$.fragment,e),_(vn.$$.fragment,e),_($n.$$.fragment,e),_(Tn.$$.fragment,e),_(kn.$$.fragment,e),_(xn.$$.fragment,e),_(Ln.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(Dn.$$.fragment,e),_(Sn.$$.fragment,e),_(zn.$$.fragment,e),_(On.$$.fragment,e),_(qn.$$.fragment,e),_(Bn.$$.fragment,e),_(Wn.$$.fragment,e),_(Nn.$$.fragment,e),_(Vn.$$.fragment,e),_(Mn.$$.fragment,e),_(Gn.$$.fragment,e),_(jn.$$.fragment,e),_(Hn.$$.fragment,e),_(Kn.$$.fragment,e),dm=!1},d(e){t(w),e&&t(Ke),e&&t(k),b(ct),e&&t(Dd),e&&t(y),e&&t(Sd),e&&t(ns),e&&t(zd),e&&t(Ue),b(lt),e&&t(Od),e&&t(V),e&&t(qd),e&&t(cs),e&&t(Bd),b(dt,e),e&&t(Id),e&&t(Ne),e&&t(Cd),e&&t(M),e&&t(Ad),e&&t(x),e&&t(Wd),e&&t(S),e&&t(Nd),e&&t(z),e&&t(Vd),b(pt,e),e&&t(Md),e&&t($r),e&&t(Gd),e&&t(O),e&&t(jd),e&&t(gs),e&&t(Hd),e&&t(Ye),b(mt),e&&t(Rd),e&&t(Xe),b(ft),e&&t(Kd),e&&t(Je),b(gt),e&&t(Ud),e&&t(R),b(ut),b(ht),e&&t(Yd),e&&t(Qe),b(_t),e&&t(Xd),e&&t(Ze),b(bt),e&&t(Jd),e&&t(er),b(vt),e&&t(Qd),e&&t(K),b($t),b(Tt),e&&t(Zd),e&&t(rr),b(yt),e&&t(ep),e&&t(tr),b(kt),e&&t(rp),e&&t(or),b(xt),e&&t(tp),e&&t(nr),b(wt),e&&t(op),e&&t(sr),b(Lt),e&&t(np),e&&t(ar),b(Et),e&&t(sp),e&&t(ir),b(Pt),e&&t(ap),e&&t(Pr),e&&t(ip),e&&t(U),b(Ft),b(Dt),e&&t(cp),e&&t(Y),b(St),b(zt),e&&t(lp),e&&t(X),b(Ot),b(qt),e&&t(dp),e&&t(J),b(Bt),b(It),e&&t(pp),e&&t(Q),b(Ct),b(At),e&&t(mp),e&&t(Z),b(Wt),b(Nt),e&&t(fp),e&&t(ee),b(Vt),b(Mt),e&&t(gp),e&&t(re),b(Gt),b(jt),e&&t(up),e&&t(cr),b(Ht),b(Rt),e&&t(hp),e&&t(te),b(Kt),b(Yt),e&&t(_p),e&&t(oe),b(Xt),b(Jt),e&&t(bp),e&&t(ne),b(Qt),b(eo),e&&t(vp),e&&t(se),b(ro),b(oo),e&&t($p),e&&t(ae),b(no),b(so),e&&t(Tp),e&&t(ie),b(ao),b(io),e&&t(yp),e&&t(ce),b(co),b(lo),e&&t(kp),e&&t(le),b(po),b(mo),e&&t(xp),e&&t(de),b(fo),b(go),e&&t(wp),e&&t(pe),b(uo),b(ho),e&&t(Lp),e&&t(me),b(_o),b(bo),e&&t(Ep),e&&t(fe),b(vo),b($o),e&&t(Pp),e&&t(ge),b(To),b(yo),e&&t(Fp),e&&t(ue),b(ko),b(xo),e&&t(Dp),e&&t(he),b(wo),b(Lo),e&&t(Sp),e&&t(_e),b(Eo),b(Fo),e&&t(zp),e&&t(be),b(Do),b(So),e&&t(Op),e&&t(ve),b(zo),b(Oo),e&&t(qp),e&&t($e),b(qo),b(Bo),e&&t(Bp),e&&t(Te),b(Io),b(Co),e&&t(Ip),e&&t(ye),b(Ao),b(Wo),e&&t(Cp),e&&t(ke),b(No),b(Vo),e&&t(Ap),e&&t(xe),b(Mo),b(Go),e&&t(Wp),e&&t(we),b(jo),b(Ho),e&&t(Np),e&&t(Le),b(Ro),b(Ko),e&&t(Vp),e&&t(Ee),b(Uo),b(Yo),e&&t(Mp),e&&t(Pe),b(Xo),b(Jo),e&&t(Gp),e&&t(Fe),b(Qo),b(Zo),e&&t(jp),e&&t(lr),b(en),e&&t(Hp),e&&t(Mr),e&&t(Rp),e&&t(De),b(rn),b(tn),e&&t(Kp),e&&t(dr),b(on),b(nn),e&&t(Up),e&&t(Se),b(sn),b(cn),e&&t(Yp),e&&t(ze),b(ln),b(pn),e&&t(Xp),e&&t(pr),b(mn),e&&t(Jp),e&&t(jr),e&&t(Qp),e&&t($),b(fn),b(Hr),b(gn),b(un),b(hn),b(_n),b(vn),b($n),b(Tn),e&&t(Zp),e&&t(mr),b(kn),e&&t(em),e&&t(fr),b(xn),e&&t(rm),e&&t(Oe),b(Ln),e&&t(tm),e&&t(A),b(Pn),b(Fn),b(Dn),e&&t(om),e&&t(ur),b(Sn),e&&t(nm),e&&t(W),b(zn),b(On),b(qn),e&&t(sm),e&&t(P),b(Bn),b(Wn),b(Nn),e&&t(am),e&&t(N),b(Vn),b(Mn),b(Gn),e&&t(im),e&&t(_r),b(jn),e&&t(cm),e&&t(Ie),b(Hn),e&&t(lm),e&&t(Ce),b(Kn)}}}const Q4={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function Z4(Fd){return K4(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class sk extends G4{constructor(w){super();j4(this,w,Z4,J4,H4,{})}}export{sk as default,Q4 as metadata};
