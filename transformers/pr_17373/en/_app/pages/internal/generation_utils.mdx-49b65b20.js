import{S as s0,i as a0,s as i0,e as o,k as c,w as f,t as a,M as c0,c as n,d as t,m as l,a as s,x as g,h as i,b as d,F as r,g as m,y as h,q as u,o as _,B as b,v as l0,L as d0}from"../../chunks/vendor-6b77c823.js";import{D as v}from"../../chunks/Docstring-1088f2fb.js";import{C as M$}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Be}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as p0}from"../../chunks/ExampleCodeBlock-5212b321.js";function m0(gd){let L,He;return L=new M$({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),{c(){f(L.$$.fragment)},l(k){g(L.$$.fragment,k)},m(k,Ae){h(L,k,Ae),He=!0},p:d0,i(k){He||(u(L.$$.fragment,k),He=!0)},o(k){_(L.$$.fragment,k),He=!1},d(k){b(L,k)}}}function f0(gd){let L,He,k,Ae,nc,nt,Wm,sc,Vm,hd,y,Mm,Gn,Gm,jm,jn,Hm,Rm,Hn,Km,Um,Rn,Ym,Xm,Kn,Jm,Qm,Un,Zm,ef,Yn,rf,tf,ud,Xn,of,_d,Re,ur,ac,st,nf,ic,sf,bd,V,af,Jn,cf,lf,Qn,df,pf,Zn,mf,ff,vd,es,gf,$d,at,Td,Ce,hf,cc,uf,_f,rs,bf,vf,yd,M,ts,lc,$f,Tf,yf,os,dc,kf,xf,Lf,ns,pc,wf,Ef,Pf,ss,mc,Ff,Df,kd,x,Sf,fc,zf,Of,gc,qf,If,hc,Bf,Af,uc,Cf,Nf,_c,Wf,Vf,bc,Mf,Gf,xd,S,jf,vc,Hf,Rf,$c,Kf,Uf,Tc,Yf,Xf,yc,Jf,Qf,Ld,z,Zf,kc,eg,rg,xc,tg,og,Lc,ng,sg,wc,ag,ig,wd,it,Ed,_r,cg,Ec,lg,dg,Pd,O,pg,Pc,mg,fg,Fc,gg,hg,Dc,ug,_g,Sc,bg,vg,Fd,as,$g,Dd,Ke,br,zc,ct,Tg,Oc,yg,Sd,Ue,lt,kg,qc,xg,zd,Ye,dt,Lg,Ic,wg,Od,R,pt,Eg,Bc,Pg,Fg,vr,mt,Dg,Ac,Sg,qd,Xe,$r,Cc,ft,zg,Nc,Og,Id,Je,gt,qg,Wc,Ig,Bd,Qe,ht,Bg,Vc,Ag,Ad,K,ut,Cg,Mc,Ng,Wg,Tr,_t,Vg,Gc,Mg,Cd,Ze,yr,jc,bt,Gg,Hc,jg,Nd,er,vt,Hg,Rc,Rg,Wd,rr,$t,Kg,Kc,Ug,Vd,tr,kr,Uc,Tt,Yg,Yc,Xg,Md,or,yt,Jg,Xc,Qg,Gd,nr,kt,Zg,Jc,eh,jd,sr,xr,Qc,xt,rh,Zc,th,Hd,Lr,oh,is,nh,sh,Rd,U,Lt,ah,el,ih,ch,wr,wt,lh,rl,dh,Kd,Y,Et,ph,w,mh,cs,fh,gh,ls,hh,uh,tl,_h,bh,ol,nl,vh,$h,ds,Th,yh,ps,kh,xh,Lh,ms,Pt,Ud,X,Ft,wh,sl,Eh,Ph,Er,Dt,Fh,al,Dh,Yd,J,St,Sh,fs,gs,zh,Oh,qh,hs,zt,Xd,Q,Ot,Ih,us,_s,Bh,Ah,Ch,bs,qt,Jd,Z,It,Nh,vs,$s,Wh,Vh,Mh,Ts,Bt,Qd,ee,At,Gh,ys,ks,jh,Hh,Rh,xs,Ct,Zd,re,Nt,Kh,Ls,ws,Uh,Yh,Xh,Es,Wt,ep,te,Vt,Jh,Pr,Ps,Qh,Zh,Mt,eu,ru,tu,Fs,Gt,rp,oe,jt,ou,Ds,Ss,nu,su,au,zs,Ht,tp,ne,Rt,iu,Fr,Os,cu,lu,Kt,du,pu,mu,qs,Ut,op,se,Yt,fu,Ne,Is,gu,hu,Bs,uu,_u,Xt,bu,vu,$u,As,Jt,np,ae,Qt,Tu,Cs,Ns,yu,ku,xu,Ws,Zt,sp,ie,eo,Lu,Dr,Vs,wu,Eu,il,Pu,Fu,Du,Ms,ro,ap,ce,to,Su,G,Gs,zu,Ou,cl,qu,Iu,ll,Bu,Au,dl,Cu,Nu,Wu,js,oo,ip,le,no,Vu,pl,Mu,Gu,Sr,so,ju,ml,Hu,cp,de,ao,Ru,A,Ku,Hs,Uu,Yu,fl,Xu,Ju,gl,hl,Qu,Zu,Rs,e_,r_,t_,Ks,io,lp,pe,co,o_,ul,n_,s_,zr,lo,a_,_l,i_,dp,me,po,c_,Us,Ys,l_,d_,p_,Xs,mo,pp,fe,fo,m_,Js,Qs,f_,g_,h_,Zs,go,mp,ge,ho,u_,ea,ra,__,b_,v_,ta,uo,fp,he,_o,$_,oa,na,T_,y_,k_,sa,bo,gp,ue,vo,x_,aa,ia,L_,w_,E_,ca,$o,hp,_e,To,P_,Or,la,F_,D_,yo,S_,z_,O_,da,ko,up,be,xo,q_,pa,ma,I_,B_,A_,fa,Lo,_p,ve,wo,C_,ga,ha,N_,W_,V_,ua,Eo,bp,$e,Po,M_,qr,_a,G_,j_,bl,H_,R_,K_,ba,Fo,vp,Te,Do,U_,vl,Y_,X_,Ir,So,J_,$l,Q_,$p,ye,zo,Z_,E,eb,va,rb,tb,$a,ob,nb,Tl,sb,ab,yl,kl,ib,cb,Ta,lb,db,ya,pb,mb,fb,ka,Oo,Tp,ke,qo,gb,xl,hb,ub,Br,Io,_b,Ll,bb,yp,xe,Bo,vb,xa,La,$b,Tb,yb,wa,Ao,kp,Le,Co,kb,Ea,Pa,xb,Lb,wb,Fa,No,xp,we,Wo,Eb,Da,Sa,Pb,Fb,Db,za,Vo,Lp,Ee,Mo,Sb,Oa,qa,zb,Ob,qb,Ia,Go,wp,Pe,jo,Ib,Ar,Ba,Bb,Ab,wl,Cb,Nb,Wb,Aa,Ho,Ep,Fe,Ro,Vb,Ca,Na,Mb,Gb,jb,Wa,Ko,Pp,ar,Cr,El,Uo,Hb,Pl,Rb,Fp,Nr,Kb,Va,Ub,Yb,Dp,De,Yo,Xb,Fl,Jb,Qb,Ma,Xo,Sp,ir,Jo,Zb,Ga,Qo,zp,Se,Zo,ev,en,rv,Dl,tv,ov,nv,ja,rn,Op,ze,tn,sv,on,av,Sl,iv,cv,lv,Ha,nn,qp,cr,Wr,zl,sn,dv,Ol,pv,Ip,Vr,mv,Ra,fv,gv,Bp,$,an,hv,ql,uv,_v,Il,bv,vv,Mr,$v,Bl,Tv,yv,Gr,cn,kv,Al,xv,Lv,jr,ln,wv,Cl,Ev,Pv,Hr,dn,Fv,Nl,Dv,Sv,Rr,pn,zv,mn,Ov,Wl,qv,Iv,Bv,Kr,fn,Av,Vl,Cv,Nv,Ur,gn,Wv,Ml,Vv,Mv,We,hn,Gv,un,jv,Gl,Hv,Rv,Kv,jl,Uv,Ap,lr,_n,Yv,Ka,Ua,Xv,Jv,Cp,dr,bn,Qv,vn,Zv,Ya,e1,r1,Np,C,$n,t1,Hl,o1,n1,F,Tn,s1,Rl,a1,i1,pr,c1,Kl,l1,d1,Ul,p1,m1,f1,Yl,Xl,g1,h1,Oe,u1,Jl,_1,b1,Ql,v1,$1,Zl,T1,y1,k1,ed,x1,L1,Yr,yn,w1,rd,E1,Wp,mr,Xr,td,kn,P1,od,F1,Vp,N,xn,D1,fr,S1,Xa,z1,O1,Ja,q1,I1,B1,Qa,Ln,A1,Za,wn,Mp,P,En,C1,ei,ri,N1,W1,V1,Pn,M1,Fn,G1,j1,H1,ti,R1,Dn,K1,U1,oi,Sn,Y1,ni,zn,Gp,W,On,X1,si,ai,J1,Q1,Z1,ii,qn,e$,ci,In,jp,gr,Jr,nd,Bn,r$,sd,t$,Hp,qe,An,o$,ad,n$,s$,li,a$,Cn,i$,Rp,Ie,Nn,c$,id,l$,d$,di,p$,Wn,m$,Kp;return nt=new Be({}),st=new Be({}),at=new M$({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),it=new M$({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),ct=new Be({}),lt=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L62"}}),dt=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L90"}}),pt=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_utils.py#L44"}}),mt=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/flax/struct.py#L120"}}),ft=new Be({}),gt=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L132"}}),ht=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L161"}}),ut=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_utils.py#L58"}}),_t=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/flax/struct.py#L120"}}),bt=new Be({}),vt=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L204"}}),$t=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L239"}}),Tt=new Be({}),yt=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L290"}}),kt=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>torch.LongTensor</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L325"}}),xt=new Be({}),Lt=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L51"}}),wt=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Et=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L73"}}),Pt=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Ft=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L62"}}),Dt=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),St=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L96"}}),zt=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L117"}}),Ot=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L124"}}),qt=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L139"}}),It=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L144"}}),Bt=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L160"}}),At=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L170"}}),Ct=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L193"}}),Nt=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L212"}}),Wt=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L233"}}),Vt=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L312"}}),Gt=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L327"}}),jt=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L379"}}),Ht=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L421"}}),Rt=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L507"}}),Ut=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L524"}}),Yt=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L533"}}),Jt=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L564"}}),Qt=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L593"}}),Zt=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L605"}}),eo=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L614"}}),ro=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L629"}}),to=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L638"}}),oo=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_logits_process.py#L645"}}),no=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L53"}}),so=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessor.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L56",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ao=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L75"}}),io=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessorList.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L82",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),co=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L64"}}),lo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsWarper.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L67",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),po=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L98"}}),mo=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L113"}}),fo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L147"}}),go=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L169"}}),ho=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L118"}}),uo=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L139"}}),_o=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L201"}}),bo=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L227"}}),vo=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L285"}}),$o=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L362"}}),To=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L383"}}),ko=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L422"}}),xo=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L237"}}),Lo=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L277"}}),wo=new v({props:{name:"class transformers.TFForcedBOSTokenLogitsProcessor",anchor:"transformers.TFForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L444"}}),Eo=new v({props:{name:"__call__",anchor:"transformers.TFForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L458"}}),Po=new v({props:{name:"class transformers.TFForcedEOSTokenLogitsProcessor",anchor:"transformers.TFForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L474"}}),Fo=new v({props:{name:"__call__",anchor:"transformers.TFForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_logits_process.py#L491"}}),Do=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L50"}}),So=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),zo=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L72"}}),Oo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),qo=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L61"}}),Io=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Bo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L95"}}),Ao=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L110"}}),Co=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L115"}}),No=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L137"}}),Wo=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L157"}}),Vo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L178"}}),Mo=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L193"}}),Go=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L205"}}),jo=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L215"}}),Ho=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L230"}}),Ro=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L240"}}),Ko=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_flax_logits_process.py#L261"}}),Uo=new Be({}),Yo=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L33"}}),Xo=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Jo=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L110"}}),Qo=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Zo=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L41"}}),rn=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),tn=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L88"}}),nn=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_17373/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),sn=new Be({}),an=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L5"}}),Mr=new p0({props:{anchor:"transformers.Constraint.example",$$slots:{default:[m0]},$$scope:{ctx:gd}}}),cn=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),ln=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),dn=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L60"}}),pn=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L104"}}),fn=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L94"}}),gn=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L24"}}),hn=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),_n=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L129"}}),bn=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L261"}}),$n=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/pr_17373/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L350"}}),Tn=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L382"}}),yn=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_constraints.py#L417"}}),kn=new Be({}),xn=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L88"}}),Ln=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),wn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),En=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L120"}}),Sn=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L207"}}),zn=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L301"}}),On=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/pr_17373/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L389"}}),qn=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_17373/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L484",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),In=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_beam_search.py#L760"}}),Bn=new Be({}),An=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_utils.py#L3318"}}),Nn=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/vr_17373/src/transformers/generation_tf_utils.py#L3039"}}),{c(){L=o("meta"),He=c(),k=o("h1"),Ae=o("a"),nc=o("span"),f(nt.$$.fragment),Wm=c(),sc=o("span"),Vm=a("Utilities for Generation"),hd=c(),y=o("p"),Mm=a("This page lists all the utility functions used by "),Gn=o("a"),Gm=a("generate()"),jm=a(`,
`),jn=o("a"),Hm=a("greedy_search()"),Rm=a(`,
`),Hn=o("a"),Km=a("sample()"),Um=a(`,
`),Rn=o("a"),Ym=a("beam_search()"),Xm=a(`,
`),Kn=o("a"),Jm=a("beam_sample()"),Qm=a(`,
`),Un=o("a"),Zm=a("group_beam_search()"),ef=a(`, and
`),Yn=o("a"),rf=a("constrained_beam_search()"),tf=a("."),ud=c(),Xn=o("p"),of=a("Most of those are only useful if you are studying the code of the generate methods in the library."),_d=c(),Re=o("h2"),ur=o("a"),ac=o("span"),f(st.$$.fragment),nf=c(),ic=o("span"),sf=a("Generate Outputs"),bd=c(),V=o("p"),af=a("The output of "),Jn=o("a"),cf=a("generate()"),lf=a(` is an instance of a subclass of
`),Qn=o("a"),df=a("ModelOutput"),pf=a(`. This output is a data structure containing all the information returned
by `),Zn=o("a"),mf=a("generate()"),ff=a(", but that can also be used as tuple or dictionary."),vd=c(),es=o("p"),gf=a("Here\u2019s an example:"),$d=c(),f(at.$$.fragment),Td=c(),Ce=o("p"),hf=a("The "),cc=o("code"),uf=a("generation_output"),_f=a(" object is a "),rs=o("a"),bf=a("GreedySearchDecoderOnlyOutput"),vf=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),yd=c(),M=o("ul"),ts=o("li"),lc=o("code"),$f=a("sequences"),Tf=a(": the generated sequences of tokens"),yf=c(),os=o("li"),dc=o("code"),kf=a("scores"),xf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),Lf=c(),ns=o("li"),pc=o("code"),wf=a("hidden_states"),Ef=a(" (optional): the hidden states of the model, for each generation step"),Pf=c(),ss=o("li"),mc=o("code"),Ff=a("attentions"),Df=a(" (optional): the attention weights of the model, for each generation step"),kd=c(),x=o("p"),Sf=a("Here we have the "),fc=o("code"),zf=a("scores"),Of=a(" since we passed along "),gc=o("code"),qf=a("output_scores=True"),If=a(", but we don\u2019t have "),hc=o("code"),Bf=a("hidden_states"),Af=a(` and
`),uc=o("code"),Cf=a("attentions"),Nf=a(" because we didn\u2019t pass "),_c=o("code"),Wf=a("output_hidden_states=True"),Vf=a(" or "),bc=o("code"),Mf=a("output_attentions=True"),Gf=a("."),xd=c(),S=o("p"),jf=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),vc=o("code"),Hf=a("None"),Rf=a(". Here for instance "),$c=o("code"),Kf=a("generation_output.scores"),Uf=a(` are all the generated prediction scores of the
language modeling head, and `),Tc=o("code"),Yf=a("generation_output.attentions"),Xf=a(" is "),yc=o("code"),Jf=a("None"),Qf=a("."),Ld=c(),z=o("p"),Zf=a("When using our "),kc=o("code"),eg=a("generation_output"),rg=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),xc=o("code"),tg=a("None"),og=a(` values.
Here, for instance, it has two elements, `),Lc=o("code"),ng=a("loss"),sg=a(" then "),wc=o("code"),ag=a("logits"),ig=a(", so"),wd=c(),f(it.$$.fragment),Ed=c(),_r=o("p"),cg=a("will return the tuple "),Ec=o("code"),lg=a("(generation_output.sequences, generation_output.scores)"),dg=a(" for instance."),Pd=c(),O=o("p"),pg=a("When using our "),Pc=o("code"),mg=a("generation_output"),fg=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),Fc=o("code"),gg=a("None"),hg=a(`
values. Here, for instance, it has two keys that are `),Dc=o("code"),ug=a("sequences"),_g=a(" and "),Sc=o("code"),bg=a("scores"),vg=a("."),Fd=c(),as=o("p"),$g=a("We document here all output types."),Dd=c(),Ke=o("h3"),br=o("a"),zc=o("span"),f(ct.$$.fragment),Tg=c(),Oc=o("span"),yg=a("GreedySearchOutput"),Sd=c(),Ue=o("div"),f(lt.$$.fragment),kg=c(),qc=o("p"),xg=a("Base class for outputs of decoder-only generation models using greedy search."),zd=c(),Ye=o("div"),f(dt.$$.fragment),Lg=c(),Ic=o("p"),wg=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Od=c(),R=o("div"),f(pt.$$.fragment),Eg=c(),Bc=o("p"),Pg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Fg=c(),vr=o("div"),f(mt.$$.fragment),Dg=c(),Ac=o("p"),Sg=a("\u201CReturns a new object replacing the specified fields with new values."),qd=c(),Xe=o("h3"),$r=o("a"),Cc=o("span"),f(ft.$$.fragment),zg=c(),Nc=o("span"),Og=a("SampleOutput"),Id=c(),Je=o("div"),f(gt.$$.fragment),qg=c(),Wc=o("p"),Ig=a("Base class for outputs of decoder-only generation models using sampling."),Bd=c(),Qe=o("div"),f(ht.$$.fragment),Bg=c(),Vc=o("p"),Ag=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Ad=c(),K=o("div"),f(ut.$$.fragment),Cg=c(),Mc=o("p"),Ng=a("Flax Base class for outputs of decoder-only generation models using sampling."),Wg=c(),Tr=o("div"),f(_t.$$.fragment),Vg=c(),Gc=o("p"),Mg=a("\u201CReturns a new object replacing the specified fields with new values."),Cd=c(),Ze=o("h3"),yr=o("a"),jc=o("span"),f(bt.$$.fragment),Gg=c(),Hc=o("span"),jg=a("BeamSearchOutput"),Nd=c(),er=o("div"),f(vt.$$.fragment),Hg=c(),Rc=o("p"),Rg=a("Base class for outputs of decoder-only generation models using beam search."),Wd=c(),rr=o("div"),f($t.$$.fragment),Kg=c(),Kc=o("p"),Ug=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Vd=c(),tr=o("h3"),kr=o("a"),Uc=o("span"),f(Tt.$$.fragment),Yg=c(),Yc=o("span"),Xg=a("BeamSampleOutput"),Md=c(),or=o("div"),f(yt.$$.fragment),Jg=c(),Xc=o("p"),Qg=a("Base class for outputs of decoder-only generation models using beam sample."),Gd=c(),nr=o("div"),f(kt.$$.fragment),Zg=c(),Jc=o("p"),eh=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),jd=c(),sr=o("h2"),xr=o("a"),Qc=o("span"),f(xt.$$.fragment),rh=c(),Zc=o("span"),th=a("LogitsProcessor"),Hd=c(),Lr=o("p"),oh=a("A "),is=o("a"),nh=a("LogitsProcessor"),sh=a(` can be used to modify the prediction scores of a language model head for
generation.`),Rd=c(),U=o("div"),f(Lt.$$.fragment),ah=c(),el=o("p"),ih=a("Abstract base class for all logit processors that can be applied during generation."),ch=c(),wr=o("div"),f(wt.$$.fragment),lh=c(),rl=o("p"),dh=a("Torch method for processing logits."),Kd=c(),Y=o("div"),f(Et.$$.fragment),ph=c(),w=o("p"),mh=a("This class can be used to create a list of "),cs=o("a"),fh=a("LogitsProcessor"),gh=a(" or "),ls=o("a"),hh=a("LogitsWarper"),uh=a(` to subsequently process a
`),tl=o("code"),_h=a("scores"),bh=a(" input tensor. This class inherits from list and adds a specific "),ol=o("em"),nl=o("strong"),vh=a("call"),$h=a(` method to apply each
`),ds=o("a"),Th=a("LogitsProcessor"),yh=a(" or "),ps=o("a"),kh=a("LogitsWarper"),xh=a(" to the inputs."),Lh=c(),ms=o("div"),f(Pt.$$.fragment),Ud=c(),X=o("div"),f(Ft.$$.fragment),wh=c(),sl=o("p"),Eh=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Ph=c(),Er=o("div"),f(Dt.$$.fragment),Fh=c(),al=o("p"),Dh=a("Torch method for warping logits."),Yd=c(),J=o("div"),f(St.$$.fragment),Sh=c(),fs=o("p"),gs=o("a"),zh=a("LogitsProcessor"),Oh=a(" enforcing a min-length by setting EOS probability to 0."),qh=c(),hs=o("div"),f(zt.$$.fragment),Xd=c(),Q=o("div"),f(Ot.$$.fragment),Ih=c(),us=o("p"),_s=o("a"),Bh=a("LogitsWarper"),Ah=a(" for temperature (exponential scaling output probability distribution)."),Ch=c(),bs=o("div"),f(qt.$$.fragment),Jd=c(),Z=o("div"),f(It.$$.fragment),Nh=c(),vs=o("p"),$s=o("a"),Wh=a("LogitsProcessor"),Vh=a(" enforcing an exponential penalty on repeated sequences."),Mh=c(),Ts=o("div"),f(Bt.$$.fragment),Qd=c(),ee=o("div"),f(At.$$.fragment),Gh=c(),ys=o("p"),ks=o("a"),jh=a("LogitsWarper"),Hh=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Rh=c(),xs=o("div"),f(Ct.$$.fragment),Zd=c(),re=o("div"),f(Nt.$$.fragment),Kh=c(),Ls=o("p"),ws=o("a"),Uh=a("LogitsWarper"),Yh=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Xh=c(),Es=o("div"),f(Wt.$$.fragment),ep=c(),te=o("div"),f(Vt.$$.fragment),Jh=c(),Pr=o("p"),Ps=o("a"),Qh=a("LogitsProcessor"),Zh=a(` that enforces no repetition of n-grams. See
`),Mt=o("a"),eu=a("Fairseq"),ru=a("."),tu=c(),Fs=o("div"),f(Gt.$$.fragment),rp=c(),oe=o("div"),f(jt.$$.fragment),ou=c(),Ds=o("p"),Ss=o("a"),nu=a("LogitsProcessor"),su=a(" that enforces that specified sequences will never be sampled."),au=c(),zs=o("div"),f(Ht.$$.fragment),tp=c(),ne=o("div"),f(Rt.$$.fragment),iu=c(),Fr=o("p"),Os=o("a"),cu=a("LogitsProcessor"),lu=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Kt=o("a"),du=a("Autoregressive Entity Retrieval"),pu=a(" for more information."),mu=c(),qs=o("div"),f(Ut.$$.fragment),op=c(),se=o("div"),f(Yt.$$.fragment),fu=c(),Ne=o("p"),Is=o("a"),gu=a("LogitsProcessor"),hu=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Bs=o("a"),uu=a("PreTrainedModel.group_beam_search()"),_u=a(". See "),Xt=o("a"),bu=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),vu=a(" for more details."),$u=c(),As=o("div"),f(Jt.$$.fragment),np=c(),ae=o("div"),f(Qt.$$.fragment),Tu=c(),Cs=o("p"),Ns=o("a"),yu=a("LogitsProcessor"),ku=a(" that enforces the specified token as the first generated token."),xu=c(),Ws=o("div"),f(Zt.$$.fragment),sp=c(),ie=o("div"),f(eo.$$.fragment),Lu=c(),Dr=o("p"),Vs=o("a"),wu=a("LogitsProcessor"),Eu=a(" that enforces the specified token as the last generated token when "),il=o("code"),Pu=a("max_length"),Fu=a(" is reached."),Du=c(),Ms=o("div"),f(ro.$$.fragment),ap=c(),ce=o("div"),f(to.$$.fragment),Su=c(),G=o("p"),Gs=o("a"),zu=a("LogitsProcessor"),Ou=a(" that removes all "),cl=o("code"),qu=a("nan"),Iu=a(" and "),ll=o("code"),Bu=a("inf"),Au=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),dl=o("code"),Cu=a("max_length"),Nu=a(` is
reached.`),Wu=c(),js=o("div"),f(oo.$$.fragment),ip=c(),le=o("div"),f(no.$$.fragment),Vu=c(),pl=o("p"),Mu=a("Abstract base class for all logit processors that can be applied during generation."),Gu=c(),Sr=o("div"),f(so.$$.fragment),ju=c(),ml=o("p"),Hu=a("TF method for processing logits."),cp=c(),de=o("div"),f(ao.$$.fragment),Ru=c(),A=o("p"),Ku=a("This class can be used to create a list of "),Hs=o("a"),Uu=a("TFLogitsProcessor"),Yu=a(" to subsequently process a "),fl=o("code"),Xu=a("scores"),Ju=a(` input tensor.
This class inherits from list and adds a specific `),gl=o("em"),hl=o("strong"),Qu=a("call"),Zu=a(" method to apply each "),Rs=o("a"),e_=a("TFLogitsProcessor"),r_=a(` to the
inputs.`),t_=c(),Ks=o("div"),f(io.$$.fragment),lp=c(),pe=o("div"),f(co.$$.fragment),o_=c(),ul=o("p"),n_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),s_=c(),zr=o("div"),f(lo.$$.fragment),a_=c(),_l=o("p"),i_=a("TF method for warping logits."),dp=c(),me=o("div"),f(po.$$.fragment),c_=c(),Us=o("p"),Ys=o("a"),l_=a("TFLogitsWarper"),d_=a(" for temperature (exponential scaling output probability distribution)."),p_=c(),Xs=o("div"),f(mo.$$.fragment),pp=c(),fe=o("div"),f(fo.$$.fragment),m_=c(),Js=o("p"),Qs=o("a"),f_=a("TFLogitsWarper"),g_=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),h_=c(),Zs=o("div"),f(go.$$.fragment),mp=c(),ge=o("div"),f(ho.$$.fragment),u_=c(),ea=o("p"),ra=o("a"),__=a("TFLogitsWarper"),b_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),v_=c(),ta=o("div"),f(uo.$$.fragment),fp=c(),he=o("div"),f(_o.$$.fragment),$_=c(),oa=o("p"),na=o("a"),T_=a("TFLogitsProcessor"),y_=a(" enforcing a min-length by setting EOS probability to 0."),k_=c(),sa=o("div"),f(bo.$$.fragment),gp=c(),ue=o("div"),f(vo.$$.fragment),x_=c(),aa=o("p"),ia=o("a"),L_=a("TFLogitsProcessor"),w_=a(" that enforces that specified sequences will never be sampled."),E_=c(),ca=o("div"),f($o.$$.fragment),hp=c(),_e=o("div"),f(To.$$.fragment),P_=c(),Or=o("p"),la=o("a"),F_=a("TFLogitsProcessor"),D_=a(` that enforces no repetition of n-grams. See
`),yo=o("a"),S_=a("Fairseq"),z_=a("."),O_=c(),da=o("div"),f(ko.$$.fragment),up=c(),be=o("div"),f(xo.$$.fragment),q_=c(),pa=o("p"),ma=o("a"),I_=a("TFLogitsProcessor"),B_=a(" enforcing an exponential penalty on repeated sequences."),A_=c(),fa=o("div"),f(Lo.$$.fragment),_p=c(),ve=o("div"),f(wo.$$.fragment),C_=c(),ga=o("p"),ha=o("a"),N_=a("TFLogitsProcessor"),W_=a(" that enforces the specified token as the first generated token."),V_=c(),ua=o("div"),f(Eo.$$.fragment),bp=c(),$e=o("div"),f(Po.$$.fragment),M_=c(),qr=o("p"),_a=o("a"),G_=a("TFLogitsProcessor"),j_=a(" that enforces the specified token as the last generated token when "),bl=o("code"),H_=a("max_length"),R_=a(" is reached."),K_=c(),ba=o("div"),f(Fo.$$.fragment),vp=c(),Te=o("div"),f(Do.$$.fragment),U_=c(),vl=o("p"),Y_=a("Abstract base class for all logit processors that can be applied during generation."),X_=c(),Ir=o("div"),f(So.$$.fragment),J_=c(),$l=o("p"),Q_=a("Flax method for processing logits."),$p=c(),ye=o("div"),f(zo.$$.fragment),Z_=c(),E=o("p"),eb=a("This class can be used to create a list of "),va=o("a"),rb=a("FlaxLogitsProcessor"),tb=a(" or "),$a=o("a"),ob=a("FlaxLogitsWarper"),nb=a(` to subsequently process
a `),Tl=o("code"),sb=a("scores"),ab=a(" input tensor. This class inherits from list and adds a specific "),yl=o("em"),kl=o("strong"),ib=a("call"),cb=a(` method to apply each
`),Ta=o("a"),lb=a("FlaxLogitsProcessor"),db=a(" or "),ya=o("a"),pb=a("FlaxLogitsWarper"),mb=a(" to the inputs."),fb=c(),ka=o("div"),f(Oo.$$.fragment),Tp=c(),ke=o("div"),f(qo.$$.fragment),gb=c(),xl=o("p"),hb=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),ub=c(),Br=o("div"),f(Io.$$.fragment),_b=c(),Ll=o("p"),bb=a("Flax method for warping logits."),yp=c(),xe=o("div"),f(Bo.$$.fragment),vb=c(),xa=o("p"),La=o("a"),$b=a("FlaxLogitsWarper"),Tb=a(" for temperature (exponential scaling output probability distribution)."),yb=c(),wa=o("div"),f(Ao.$$.fragment),kp=c(),Le=o("div"),f(Co.$$.fragment),kb=c(),Ea=o("p"),Pa=o("a"),xb=a("FlaxLogitsWarper"),Lb=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),wb=c(),Fa=o("div"),f(No.$$.fragment),xp=c(),we=o("div"),f(Wo.$$.fragment),Eb=c(),Da=o("p"),Sa=o("a"),Pb=a("FlaxLogitsWarper"),Fb=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Db=c(),za=o("div"),f(Vo.$$.fragment),Lp=c(),Ee=o("div"),f(Mo.$$.fragment),Sb=c(),Oa=o("p"),qa=o("a"),zb=a("FlaxLogitsProcessor"),Ob=a(" that enforces the specified token as the first generated token."),qb=c(),Ia=o("div"),f(Go.$$.fragment),wp=c(),Pe=o("div"),f(jo.$$.fragment),Ib=c(),Ar=o("p"),Ba=o("a"),Bb=a("FlaxLogitsProcessor"),Ab=a(" that enforces the specified token as the last generated token when "),wl=o("code"),Cb=a("max_length"),Nb=a(" is reached."),Wb=c(),Aa=o("div"),f(Ho.$$.fragment),Ep=c(),Fe=o("div"),f(Ro.$$.fragment),Vb=c(),Ca=o("p"),Na=o("a"),Mb=a("FlaxLogitsProcessor"),Gb=a(" enforcing a min-length by setting EOS probability to 0."),jb=c(),Wa=o("div"),f(Ko.$$.fragment),Pp=c(),ar=o("h2"),Cr=o("a"),El=o("span"),f(Uo.$$.fragment),Hb=c(),Pl=o("span"),Rb=a("StoppingCriteria"),Fp=c(),Nr=o("p"),Kb=a("A "),Va=o("a"),Ub=a("StoppingCriteria"),Yb=a(" can be used to change when to stop generation (other than EOS token)."),Dp=c(),De=o("div"),f(Yo.$$.fragment),Xb=c(),Fl=o("p"),Jb=a("Abstract base class for all stopping criteria that can be applied during generation."),Qb=c(),Ma=o("div"),f(Xo.$$.fragment),Sp=c(),ir=o("div"),f(Jo.$$.fragment),Zb=c(),Ga=o("div"),f(Qo.$$.fragment),zp=c(),Se=o("div"),f(Zo.$$.fragment),ev=c(),en=o("p"),rv=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),Dl=o("code"),tv=a("max_length"),ov=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),nv=c(),ja=o("div"),f(rn.$$.fragment),Op=c(),ze=o("div"),f(tn.$$.fragment),sv=c(),on=o("p"),av=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Sl=o("code"),iv=a("initial_time"),cv=a("."),lv=c(),Ha=o("div"),f(nn.$$.fragment),qp=c(),cr=o("h2"),Wr=o("a"),zl=o("span"),f(sn.$$.fragment),dv=c(),Ol=o("span"),pv=a("Constraints"),Ip=c(),Vr=o("p"),mv=a("A "),Ra=o("a"),fv=a("Constraint"),gv=a(" can be used to force the generation to include specific tokens or sequences in the output."),Bp=c(),$=o("div"),f(an.$$.fragment),hv=c(),ql=o("p"),uv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),_v=c(),Il=o("p"),bv=a("All classes that inherit Constraint must follow the requirement that"),vv=c(),f(Mr.$$.fragment),$v=c(),Bl=o("p"),Tv=a("will always terminate (halt)."),yv=c(),Gr=o("div"),f(cn.$$.fragment),kv=c(),Al=o("p"),xv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),Lv=c(),jr=o("div"),f(ln.$$.fragment),wv=c(),Cl=o("p"),Ev=a("Creates a new instance of this constraint."),Pv=c(),Hr=o("div"),f(dn.$$.fragment),Fv=c(),Nl=o("p"),Dv=a("Reads in a token and returns whether it creates progress."),Sv=c(),Rr=o("div"),f(pn.$$.fragment),zv=c(),mn=o("p"),Ov=a("Returns the number of remaining steps of "),Wl=o("code"),qv=a("advance()"),Iv=a(" in order to complete this constraint."),Bv=c(),Kr=o("div"),f(fn.$$.fragment),Av=c(),Vl=o("p"),Cv=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Nv=c(),Ur=o("div"),f(gn.$$.fragment),Wv=c(),Ml=o("p"),Vv=a("Tests whether this constraint has been properly defined."),Mv=c(),We=o("div"),f(hn.$$.fragment),Gv=c(),un=o("p"),jv=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Gl=o("code"),Hv=a("does_advance(self, token_id: int)"),Rv=a("."),Kv=c(),jl=o("p"),Uv=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Ap=c(),lr=o("div"),f(_n.$$.fragment),Yv=c(),Ka=o("p"),Ua=o("a"),Xv=a("Constraint"),Jv=a(" enforcing that an ordered sequence of tokens is included in the output."),Cp=c(),dr=o("div"),f(bn.$$.fragment),Qv=c(),vn=o("p"),Zv=a("A special "),Ya=o("a"),e1=a("Constraint"),r1=a(" that is fulfilled by fulfilling just one of several constraints."),Np=c(),C=o("div"),f($n.$$.fragment),t1=c(),Hl=o("p"),o1=a("A class for beam scorers to track its progress through a list of constraints."),n1=c(),F=o("div"),f(Tn.$$.fragment),s1=c(),Rl=o("p"),a1=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),i1=c(),pr=o("p"),c1=a("Given constraints "),Kl=o("code"),l1=a("c_i = {t_ij | j == # of tokens}"),d1=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),Ul=o("code"),p1=a("c_i"),m1=a(", we return:"),f1=c(),Yl=o("p"),Xl=o("code"),g1=a("[t_k1 for k in indices of unfulfilled constraints]"),h1=c(),Oe=o("p"),u1=a(`If we are in the middle of a constraint, then we return:
`),Jl=o("code"),_1=a("[t_ij]"),b1=a(", where "),Ql=o("code"),v1=a("i"),$1=a(" is the index of the inprogress constraint, "),Zl=o("code"),T1=a("j"),y1=a(" is the next step for the constraint."),k1=c(),ed=o("p"),x1=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),L1=c(),Yr=o("div"),f(yn.$$.fragment),w1=c(),rd=o("p"),E1=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Wp=c(),mr=o("h2"),Xr=o("a"),td=o("span"),f(kn.$$.fragment),P1=c(),od=o("span"),F1=a("BeamSearch"),Vp=c(),N=o("div"),f(xn.$$.fragment),D1=c(),fr=o("p"),S1=a("Abstract base class for all beam scorers that are used for "),Xa=o("a"),z1=a("beam_search()"),O1=a(` and
`),Ja=o("a"),q1=a("beam_sample()"),I1=a("."),B1=c(),Qa=o("div"),f(Ln.$$.fragment),A1=c(),Za=o("div"),f(wn.$$.fragment),Mp=c(),P=o("div"),f(En.$$.fragment),C1=c(),ei=o("p"),ri=o("a"),N1=a("BeamScorer"),W1=a(" implementing standard beam search decoding."),V1=c(),Pn=o("p"),M1=a("Adapted in part from "),Fn=o("a"),G1=a(`Facebook\u2019s XLM beam search
code`),j1=a("."),H1=c(),ti=o("p"),R1=a("Reference for the diverse beam search algorithm and implementation "),Dn=o("a"),K1=a(`Ashwin Kalyan\u2019s DBS
implementation`),U1=c(),oi=o("div"),f(Sn.$$.fragment),Y1=c(),ni=o("div"),f(zn.$$.fragment),Gp=c(),W=o("div"),f(On.$$.fragment),X1=c(),si=o("p"),ai=o("a"),J1=a("BeamScorer"),Q1=a(" implementing constrained beam search decoding."),Z1=c(),ii=o("div"),f(qn.$$.fragment),e$=c(),ci=o("div"),f(In.$$.fragment),jp=c(),gr=o("h2"),Jr=o("a"),nd=o("span"),f(Bn.$$.fragment),r$=c(),sd=o("span"),t$=a("Utilities"),Hp=c(),qe=o("div"),f(An.$$.fragment),o$=c(),ad=o("p"),n$=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),s$=c(),li=o("p"),a$=a("From: "),Cn=o("a"),i$=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Rp=c(),Ie=o("div"),f(Nn.$$.fragment),c$=c(),id=o("p"),l$=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),d$=c(),di=o("p"),p$=a("From: "),Wn=o("a"),m$=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=c0('[data-svelte="svelte-1phssyn"]',document.head);L=n(p,"META",{name:!0,content:!0}),p.forEach(t),He=l(e),k=n(e,"H1",{class:!0});var Vn=s(k);Ae=n(Vn,"A",{id:!0,class:!0,href:!0});var G$=s(Ae);nc=n(G$,"SPAN",{});var j$=s(nc);g(nt.$$.fragment,j$),j$.forEach(t),G$.forEach(t),Wm=l(Vn),sc=n(Vn,"SPAN",{});var H$=s(sc);Vm=i(H$,"Utilities for Generation"),H$.forEach(t),Vn.forEach(t),hd=l(e),y=n(e,"P",{});var D=s(y);Mm=i(D,"This page lists all the utility functions used by "),Gn=n(D,"A",{href:!0});var R$=s(Gn);Gm=i(R$,"generate()"),R$.forEach(t),jm=i(D,`,
`),jn=n(D,"A",{href:!0});var K$=s(jn);Hm=i(K$,"greedy_search()"),K$.forEach(t),Rm=i(D,`,
`),Hn=n(D,"A",{href:!0});var U$=s(Hn);Km=i(U$,"sample()"),U$.forEach(t),Um=i(D,`,
`),Rn=n(D,"A",{href:!0});var Y$=s(Rn);Ym=i(Y$,"beam_search()"),Y$.forEach(t),Xm=i(D,`,
`),Kn=n(D,"A",{href:!0});var X$=s(Kn);Jm=i(X$,"beam_sample()"),X$.forEach(t),Qm=i(D,`,
`),Un=n(D,"A",{href:!0});var J$=s(Un);Zm=i(J$,"group_beam_search()"),J$.forEach(t),ef=i(D,`, and
`),Yn=n(D,"A",{href:!0});var Q$=s(Yn);rf=i(Q$,"constrained_beam_search()"),Q$.forEach(t),tf=i(D,"."),D.forEach(t),ud=l(e),Xn=n(e,"P",{});var Z$=s(Xn);of=i(Z$,"Most of those are only useful if you are studying the code of the generate methods in the library."),Z$.forEach(t),_d=l(e),Re=n(e,"H2",{class:!0});var Up=s(Re);ur=n(Up,"A",{id:!0,class:!0,href:!0});var e3=s(ur);ac=n(e3,"SPAN",{});var r3=s(ac);g(st.$$.fragment,r3),r3.forEach(t),e3.forEach(t),nf=l(Up),ic=n(Up,"SPAN",{});var t3=s(ic);sf=i(t3,"Generate Outputs"),t3.forEach(t),Up.forEach(t),bd=l(e),V=n(e,"P",{});var Qr=s(V);af=i(Qr,"The output of "),Jn=n(Qr,"A",{href:!0});var o3=s(Jn);cf=i(o3,"generate()"),o3.forEach(t),lf=i(Qr,` is an instance of a subclass of
`),Qn=n(Qr,"A",{href:!0});var n3=s(Qn);df=i(n3,"ModelOutput"),n3.forEach(t),pf=i(Qr,`. This output is a data structure containing all the information returned
by `),Zn=n(Qr,"A",{href:!0});var s3=s(Zn);mf=i(s3,"generate()"),s3.forEach(t),ff=i(Qr,", but that can also be used as tuple or dictionary."),Qr.forEach(t),vd=l(e),es=n(e,"P",{});var a3=s(es);gf=i(a3,"Here\u2019s an example:"),a3.forEach(t),$d=l(e),g(at.$$.fragment,e),Td=l(e),Ce=n(e,"P",{});var pi=s(Ce);hf=i(pi,"The "),cc=n(pi,"CODE",{});var i3=s(cc);uf=i(i3,"generation_output"),i3.forEach(t),_f=i(pi," object is a "),rs=n(pi,"A",{href:!0});var c3=s(rs);bf=i(c3,"GreedySearchDecoderOnlyOutput"),c3.forEach(t),vf=i(pi,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),pi.forEach(t),yd=l(e),M=n(e,"UL",{});var Zr=s(M);ts=n(Zr,"LI",{});var f$=s(ts);lc=n(f$,"CODE",{});var l3=s(lc);$f=i(l3,"sequences"),l3.forEach(t),Tf=i(f$,": the generated sequences of tokens"),f$.forEach(t),yf=l(Zr),os=n(Zr,"LI",{});var g$=s(os);dc=n(g$,"CODE",{});var d3=s(dc);kf=i(d3,"scores"),d3.forEach(t),xf=i(g$," (optional): the prediction scores of the language modelling head, for each generation step"),g$.forEach(t),Lf=l(Zr),ns=n(Zr,"LI",{});var h$=s(ns);pc=n(h$,"CODE",{});var p3=s(pc);wf=i(p3,"hidden_states"),p3.forEach(t),Ef=i(h$," (optional): the hidden states of the model, for each generation step"),h$.forEach(t),Pf=l(Zr),ss=n(Zr,"LI",{});var u$=s(ss);mc=n(u$,"CODE",{});var m3=s(mc);Ff=i(m3,"attentions"),m3.forEach(t),Df=i(u$," (optional): the attention weights of the model, for each generation step"),u$.forEach(t),Zr.forEach(t),kd=l(e),x=n(e,"P",{});var q=s(x);Sf=i(q,"Here we have the "),fc=n(q,"CODE",{});var f3=s(fc);zf=i(f3,"scores"),f3.forEach(t),Of=i(q," since we passed along "),gc=n(q,"CODE",{});var g3=s(gc);qf=i(g3,"output_scores=True"),g3.forEach(t),If=i(q,", but we don\u2019t have "),hc=n(q,"CODE",{});var h3=s(hc);Bf=i(h3,"hidden_states"),h3.forEach(t),Af=i(q,` and
`),uc=n(q,"CODE",{});var u3=s(uc);Cf=i(u3,"attentions"),u3.forEach(t),Nf=i(q," because we didn\u2019t pass "),_c=n(q,"CODE",{});var _3=s(_c);Wf=i(_3,"output_hidden_states=True"),_3.forEach(t),Vf=i(q," or "),bc=n(q,"CODE",{});var b3=s(bc);Mf=i(b3,"output_attentions=True"),b3.forEach(t),Gf=i(q,"."),q.forEach(t),xd=l(e),S=n(e,"P",{});var Ve=s(S);jf=i(Ve,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),vc=n(Ve,"CODE",{});var v3=s(vc);Hf=i(v3,"None"),v3.forEach(t),Rf=i(Ve,". Here for instance "),$c=n(Ve,"CODE",{});var $3=s($c);Kf=i($3,"generation_output.scores"),$3.forEach(t),Uf=i(Ve,` are all the generated prediction scores of the
language modeling head, and `),Tc=n(Ve,"CODE",{});var T3=s(Tc);Yf=i(T3,"generation_output.attentions"),T3.forEach(t),Xf=i(Ve," is "),yc=n(Ve,"CODE",{});var y3=s(yc);Jf=i(y3,"None"),y3.forEach(t),Qf=i(Ve,"."),Ve.forEach(t),Ld=l(e),z=n(e,"P",{});var Me=s(z);Zf=i(Me,"When using our "),kc=n(Me,"CODE",{});var k3=s(kc);eg=i(k3,"generation_output"),k3.forEach(t),rg=i(Me," object as a tuple, it only keeps the attributes that don\u2019t have "),xc=n(Me,"CODE",{});var x3=s(xc);tg=i(x3,"None"),x3.forEach(t),og=i(Me,` values.
Here, for instance, it has two elements, `),Lc=n(Me,"CODE",{});var L3=s(Lc);ng=i(L3,"loss"),L3.forEach(t),sg=i(Me," then "),wc=n(Me,"CODE",{});var w3=s(wc);ag=i(w3,"logits"),w3.forEach(t),ig=i(Me,", so"),Me.forEach(t),wd=l(e),g(it.$$.fragment,e),Ed=l(e),_r=n(e,"P",{});var Yp=s(_r);cg=i(Yp,"will return the tuple "),Ec=n(Yp,"CODE",{});var E3=s(Ec);lg=i(E3,"(generation_output.sequences, generation_output.scores)"),E3.forEach(t),dg=i(Yp," for instance."),Yp.forEach(t),Pd=l(e),O=n(e,"P",{});var Ge=s(O);pg=i(Ge,"When using our "),Pc=n(Ge,"CODE",{});var P3=s(Pc);mg=i(P3,"generation_output"),P3.forEach(t),fg=i(Ge," object as a dictionary, it only keeps the attributes that don\u2019t have "),Fc=n(Ge,"CODE",{});var F3=s(Fc);gg=i(F3,"None"),F3.forEach(t),hg=i(Ge,`
values. Here, for instance, it has two keys that are `),Dc=n(Ge,"CODE",{});var D3=s(Dc);ug=i(D3,"sequences"),D3.forEach(t),_g=i(Ge," and "),Sc=n(Ge,"CODE",{});var S3=s(Sc);bg=i(S3,"scores"),S3.forEach(t),vg=i(Ge,"."),Ge.forEach(t),Fd=l(e),as=n(e,"P",{});var z3=s(as);$g=i(z3,"We document here all output types."),z3.forEach(t),Dd=l(e),Ke=n(e,"H3",{class:!0});var Xp=s(Ke);br=n(Xp,"A",{id:!0,class:!0,href:!0});var O3=s(br);zc=n(O3,"SPAN",{});var q3=s(zc);g(ct.$$.fragment,q3),q3.forEach(t),O3.forEach(t),Tg=l(Xp),Oc=n(Xp,"SPAN",{});var I3=s(Oc);yg=i(I3,"GreedySearchOutput"),I3.forEach(t),Xp.forEach(t),Sd=l(e),Ue=n(e,"DIV",{class:!0});var Jp=s(Ue);g(lt.$$.fragment,Jp),kg=l(Jp),qc=n(Jp,"P",{});var B3=s(qc);xg=i(B3,"Base class for outputs of decoder-only generation models using greedy search."),B3.forEach(t),Jp.forEach(t),zd=l(e),Ye=n(e,"DIV",{class:!0});var Qp=s(Ye);g(dt.$$.fragment,Qp),Lg=l(Qp),Ic=n(Qp,"P",{});var A3=s(Ic);wg=i(A3,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),A3.forEach(t),Qp.forEach(t),Od=l(e),R=n(e,"DIV",{class:!0});var mi=s(R);g(pt.$$.fragment,mi),Eg=l(mi),Bc=n(mi,"P",{});var C3=s(Bc);Pg=i(C3,"Flax Base class for outputs of decoder-only generation models using greedy search."),C3.forEach(t),Fg=l(mi),vr=n(mi,"DIV",{class:!0});var Zp=s(vr);g(mt.$$.fragment,Zp),Dg=l(Zp),Ac=n(Zp,"P",{});var N3=s(Ac);Sg=i(N3,"\u201CReturns a new object replacing the specified fields with new values."),N3.forEach(t),Zp.forEach(t),mi.forEach(t),qd=l(e),Xe=n(e,"H3",{class:!0});var em=s(Xe);$r=n(em,"A",{id:!0,class:!0,href:!0});var W3=s($r);Cc=n(W3,"SPAN",{});var V3=s(Cc);g(ft.$$.fragment,V3),V3.forEach(t),W3.forEach(t),zg=l(em),Nc=n(em,"SPAN",{});var M3=s(Nc);Og=i(M3,"SampleOutput"),M3.forEach(t),em.forEach(t),Id=l(e),Je=n(e,"DIV",{class:!0});var rm=s(Je);g(gt.$$.fragment,rm),qg=l(rm),Wc=n(rm,"P",{});var G3=s(Wc);Ig=i(G3,"Base class for outputs of decoder-only generation models using sampling."),G3.forEach(t),rm.forEach(t),Bd=l(e),Qe=n(e,"DIV",{class:!0});var tm=s(Qe);g(ht.$$.fragment,tm),Bg=l(tm),Vc=n(tm,"P",{});var j3=s(Vc);Ag=i(j3,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),j3.forEach(t),tm.forEach(t),Ad=l(e),K=n(e,"DIV",{class:!0});var fi=s(K);g(ut.$$.fragment,fi),Cg=l(fi),Mc=n(fi,"P",{});var H3=s(Mc);Ng=i(H3,"Flax Base class for outputs of decoder-only generation models using sampling."),H3.forEach(t),Wg=l(fi),Tr=n(fi,"DIV",{class:!0});var om=s(Tr);g(_t.$$.fragment,om),Vg=l(om),Gc=n(om,"P",{});var R3=s(Gc);Mg=i(R3,"\u201CReturns a new object replacing the specified fields with new values."),R3.forEach(t),om.forEach(t),fi.forEach(t),Cd=l(e),Ze=n(e,"H3",{class:!0});var nm=s(Ze);yr=n(nm,"A",{id:!0,class:!0,href:!0});var K3=s(yr);jc=n(K3,"SPAN",{});var U3=s(jc);g(bt.$$.fragment,U3),U3.forEach(t),K3.forEach(t),Gg=l(nm),Hc=n(nm,"SPAN",{});var Y3=s(Hc);jg=i(Y3,"BeamSearchOutput"),Y3.forEach(t),nm.forEach(t),Nd=l(e),er=n(e,"DIV",{class:!0});var sm=s(er);g(vt.$$.fragment,sm),Hg=l(sm),Rc=n(sm,"P",{});var X3=s(Rc);Rg=i(X3,"Base class for outputs of decoder-only generation models using beam search."),X3.forEach(t),sm.forEach(t),Wd=l(e),rr=n(e,"DIV",{class:!0});var am=s(rr);g($t.$$.fragment,am),Kg=l(am),Kc=n(am,"P",{});var J3=s(Kc);Ug=i(J3,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),J3.forEach(t),am.forEach(t),Vd=l(e),tr=n(e,"H3",{class:!0});var im=s(tr);kr=n(im,"A",{id:!0,class:!0,href:!0});var Q3=s(kr);Uc=n(Q3,"SPAN",{});var Z3=s(Uc);g(Tt.$$.fragment,Z3),Z3.forEach(t),Q3.forEach(t),Yg=l(im),Yc=n(im,"SPAN",{});var eT=s(Yc);Xg=i(eT,"BeamSampleOutput"),eT.forEach(t),im.forEach(t),Md=l(e),or=n(e,"DIV",{class:!0});var cm=s(or);g(yt.$$.fragment,cm),Jg=l(cm),Xc=n(cm,"P",{});var rT=s(Xc);Qg=i(rT,"Base class for outputs of decoder-only generation models using beam sample."),rT.forEach(t),cm.forEach(t),Gd=l(e),nr=n(e,"DIV",{class:!0});var lm=s(nr);g(kt.$$.fragment,lm),Zg=l(lm),Jc=n(lm,"P",{});var tT=s(Jc);eh=i(tT,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),tT.forEach(t),lm.forEach(t),jd=l(e),sr=n(e,"H2",{class:!0});var dm=s(sr);xr=n(dm,"A",{id:!0,class:!0,href:!0});var oT=s(xr);Qc=n(oT,"SPAN",{});var nT=s(Qc);g(xt.$$.fragment,nT),nT.forEach(t),oT.forEach(t),rh=l(dm),Zc=n(dm,"SPAN",{});var sT=s(Zc);th=i(sT,"LogitsProcessor"),sT.forEach(t),dm.forEach(t),Hd=l(e),Lr=n(e,"P",{});var pm=s(Lr);oh=i(pm,"A "),is=n(pm,"A",{href:!0});var aT=s(is);nh=i(aT,"LogitsProcessor"),aT.forEach(t),sh=i(pm,` can be used to modify the prediction scores of a language model head for
generation.`),pm.forEach(t),Rd=l(e),U=n(e,"DIV",{class:!0});var gi=s(U);g(Lt.$$.fragment,gi),ah=l(gi),el=n(gi,"P",{});var iT=s(el);ih=i(iT,"Abstract base class for all logit processors that can be applied during generation."),iT.forEach(t),ch=l(gi),wr=n(gi,"DIV",{class:!0});var mm=s(wr);g(wt.$$.fragment,mm),lh=l(mm),rl=n(mm,"P",{});var cT=s(rl);dh=i(cT,"Torch method for processing logits."),cT.forEach(t),mm.forEach(t),gi.forEach(t),Kd=l(e),Y=n(e,"DIV",{class:!0});var hi=s(Y);g(Et.$$.fragment,hi),ph=l(hi),w=n(hi,"P",{});var I=s(w);mh=i(I,"This class can be used to create a list of "),cs=n(I,"A",{href:!0});var lT=s(cs);fh=i(lT,"LogitsProcessor"),lT.forEach(t),gh=i(I," or "),ls=n(I,"A",{href:!0});var dT=s(ls);hh=i(dT,"LogitsWarper"),dT.forEach(t),uh=i(I,` to subsequently process a
`),tl=n(I,"CODE",{});var pT=s(tl);_h=i(pT,"scores"),pT.forEach(t),bh=i(I," input tensor. This class inherits from list and adds a specific "),ol=n(I,"EM",{});var mT=s(ol);nl=n(mT,"STRONG",{});var fT=s(nl);vh=i(fT,"call"),fT.forEach(t),mT.forEach(t),$h=i(I,` method to apply each
`),ds=n(I,"A",{href:!0});var gT=s(ds);Th=i(gT,"LogitsProcessor"),gT.forEach(t),yh=i(I," or "),ps=n(I,"A",{href:!0});var hT=s(ps);kh=i(hT,"LogitsWarper"),hT.forEach(t),xh=i(I," to the inputs."),I.forEach(t),Lh=l(hi),ms=n(hi,"DIV",{class:!0});var uT=s(ms);g(Pt.$$.fragment,uT),uT.forEach(t),hi.forEach(t),Ud=l(e),X=n(e,"DIV",{class:!0});var ui=s(X);g(Ft.$$.fragment,ui),wh=l(ui),sl=n(ui,"P",{});var _T=s(sl);Eh=i(_T,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),_T.forEach(t),Ph=l(ui),Er=n(ui,"DIV",{class:!0});var fm=s(Er);g(Dt.$$.fragment,fm),Fh=l(fm),al=n(fm,"P",{});var bT=s(al);Dh=i(bT,"Torch method for warping logits."),bT.forEach(t),fm.forEach(t),ui.forEach(t),Yd=l(e),J=n(e,"DIV",{class:!0});var _i=s(J);g(St.$$.fragment,_i),Sh=l(_i),fs=n(_i,"P",{});var _$=s(fs);gs=n(_$,"A",{href:!0});var vT=s(gs);zh=i(vT,"LogitsProcessor"),vT.forEach(t),Oh=i(_$," enforcing a min-length by setting EOS probability to 0."),_$.forEach(t),qh=l(_i),hs=n(_i,"DIV",{class:!0});var $T=s(hs);g(zt.$$.fragment,$T),$T.forEach(t),_i.forEach(t),Xd=l(e),Q=n(e,"DIV",{class:!0});var bi=s(Q);g(Ot.$$.fragment,bi),Ih=l(bi),us=n(bi,"P",{});var b$=s(us);_s=n(b$,"A",{href:!0});var TT=s(_s);Bh=i(TT,"LogitsWarper"),TT.forEach(t),Ah=i(b$," for temperature (exponential scaling output probability distribution)."),b$.forEach(t),Ch=l(bi),bs=n(bi,"DIV",{class:!0});var yT=s(bs);g(qt.$$.fragment,yT),yT.forEach(t),bi.forEach(t),Jd=l(e),Z=n(e,"DIV",{class:!0});var vi=s(Z);g(It.$$.fragment,vi),Nh=l(vi),vs=n(vi,"P",{});var v$=s(vs);$s=n(v$,"A",{href:!0});var kT=s($s);Wh=i(kT,"LogitsProcessor"),kT.forEach(t),Vh=i(v$," enforcing an exponential penalty on repeated sequences."),v$.forEach(t),Mh=l(vi),Ts=n(vi,"DIV",{class:!0});var xT=s(Ts);g(Bt.$$.fragment,xT),xT.forEach(t),vi.forEach(t),Qd=l(e),ee=n(e,"DIV",{class:!0});var $i=s(ee);g(At.$$.fragment,$i),Gh=l($i),ys=n($i,"P",{});var $$=s(ys);ks=n($$,"A",{href:!0});var LT=s(ks);jh=i(LT,"LogitsWarper"),LT.forEach(t),Hh=i($$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),$$.forEach(t),Rh=l($i),xs=n($i,"DIV",{class:!0});var wT=s(xs);g(Ct.$$.fragment,wT),wT.forEach(t),$i.forEach(t),Zd=l(e),re=n(e,"DIV",{class:!0});var Ti=s(re);g(Nt.$$.fragment,Ti),Kh=l(Ti),Ls=n(Ti,"P",{});var T$=s(Ls);ws=n(T$,"A",{href:!0});var ET=s(ws);Uh=i(ET,"LogitsWarper"),ET.forEach(t),Yh=i(T$," that performs top-k, i.e. restricting to the k highest probability elements."),T$.forEach(t),Xh=l(Ti),Es=n(Ti,"DIV",{class:!0});var PT=s(Es);g(Wt.$$.fragment,PT),PT.forEach(t),Ti.forEach(t),ep=l(e),te=n(e,"DIV",{class:!0});var yi=s(te);g(Vt.$$.fragment,yi),Jh=l(yi),Pr=n(yi,"P",{});var cd=s(Pr);Ps=n(cd,"A",{href:!0});var FT=s(Ps);Qh=i(FT,"LogitsProcessor"),FT.forEach(t),Zh=i(cd,` that enforces no repetition of n-grams. See
`),Mt=n(cd,"A",{href:!0,rel:!0});var DT=s(Mt);eu=i(DT,"Fairseq"),DT.forEach(t),ru=i(cd,"."),cd.forEach(t),tu=l(yi),Fs=n(yi,"DIV",{class:!0});var ST=s(Fs);g(Gt.$$.fragment,ST),ST.forEach(t),yi.forEach(t),rp=l(e),oe=n(e,"DIV",{class:!0});var ki=s(oe);g(jt.$$.fragment,ki),ou=l(ki),Ds=n(ki,"P",{});var y$=s(Ds);Ss=n(y$,"A",{href:!0});var zT=s(Ss);nu=i(zT,"LogitsProcessor"),zT.forEach(t),su=i(y$," that enforces that specified sequences will never be sampled."),y$.forEach(t),au=l(ki),zs=n(ki,"DIV",{class:!0});var OT=s(zs);g(Ht.$$.fragment,OT),OT.forEach(t),ki.forEach(t),tp=l(e),ne=n(e,"DIV",{class:!0});var xi=s(ne);g(Rt.$$.fragment,xi),iu=l(xi),Fr=n(xi,"P",{});var ld=s(Fr);Os=n(ld,"A",{href:!0});var qT=s(Os);cu=i(qT,"LogitsProcessor"),qT.forEach(t),lu=i(ld,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Kt=n(ld,"A",{href:!0,rel:!0});var IT=s(Kt);du=i(IT,"Autoregressive Entity Retrieval"),IT.forEach(t),pu=i(ld," for more information."),ld.forEach(t),mu=l(xi),qs=n(xi,"DIV",{class:!0});var BT=s(qs);g(Ut.$$.fragment,BT),BT.forEach(t),xi.forEach(t),op=l(e),se=n(e,"DIV",{class:!0});var Li=s(se);g(Yt.$$.fragment,Li),fu=l(Li),Ne=n(Li,"P",{});var Mn=s(Ne);Is=n(Mn,"A",{href:!0});var AT=s(Is);gu=i(AT,"LogitsProcessor"),AT.forEach(t),hu=i(Mn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Bs=n(Mn,"A",{href:!0});var CT=s(Bs);uu=i(CT,"PreTrainedModel.group_beam_search()"),CT.forEach(t),_u=i(Mn,". See "),Xt=n(Mn,"A",{href:!0,rel:!0});var NT=s(Xt);bu=i(NT,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),NT.forEach(t),vu=i(Mn," for more details."),Mn.forEach(t),$u=l(Li),As=n(Li,"DIV",{class:!0});var WT=s(As);g(Jt.$$.fragment,WT),WT.forEach(t),Li.forEach(t),np=l(e),ae=n(e,"DIV",{class:!0});var wi=s(ae);g(Qt.$$.fragment,wi),Tu=l(wi),Cs=n(wi,"P",{});var k$=s(Cs);Ns=n(k$,"A",{href:!0});var VT=s(Ns);yu=i(VT,"LogitsProcessor"),VT.forEach(t),ku=i(k$," that enforces the specified token as the first generated token."),k$.forEach(t),xu=l(wi),Ws=n(wi,"DIV",{class:!0});var MT=s(Ws);g(Zt.$$.fragment,MT),MT.forEach(t),wi.forEach(t),sp=l(e),ie=n(e,"DIV",{class:!0});var Ei=s(ie);g(eo.$$.fragment,Ei),Lu=l(Ei),Dr=n(Ei,"P",{});var dd=s(Dr);Vs=n(dd,"A",{href:!0});var GT=s(Vs);wu=i(GT,"LogitsProcessor"),GT.forEach(t),Eu=i(dd," that enforces the specified token as the last generated token when "),il=n(dd,"CODE",{});var jT=s(il);Pu=i(jT,"max_length"),jT.forEach(t),Fu=i(dd," is reached."),dd.forEach(t),Du=l(Ei),Ms=n(Ei,"DIV",{class:!0});var HT=s(Ms);g(ro.$$.fragment,HT),HT.forEach(t),Ei.forEach(t),ap=l(e),ce=n(e,"DIV",{class:!0});var Pi=s(ce);g(to.$$.fragment,Pi),Su=l(Pi),G=n(Pi,"P",{});var hr=s(G);Gs=n(hr,"A",{href:!0});var RT=s(Gs);zu=i(RT,"LogitsProcessor"),RT.forEach(t),Ou=i(hr," that removes all "),cl=n(hr,"CODE",{});var KT=s(cl);qu=i(KT,"nan"),KT.forEach(t),Iu=i(hr," and "),ll=n(hr,"CODE",{});var UT=s(ll);Bu=i(UT,"inf"),UT.forEach(t),Au=i(hr,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),dl=n(hr,"CODE",{});var YT=s(dl);Cu=i(YT,"max_length"),YT.forEach(t),Nu=i(hr,` is
reached.`),hr.forEach(t),Wu=l(Pi),js=n(Pi,"DIV",{class:!0});var XT=s(js);g(oo.$$.fragment,XT),XT.forEach(t),Pi.forEach(t),ip=l(e),le=n(e,"DIV",{class:!0});var Fi=s(le);g(no.$$.fragment,Fi),Vu=l(Fi),pl=n(Fi,"P",{});var JT=s(pl);Mu=i(JT,"Abstract base class for all logit processors that can be applied during generation."),JT.forEach(t),Gu=l(Fi),Sr=n(Fi,"DIV",{class:!0});var gm=s(Sr);g(so.$$.fragment,gm),ju=l(gm),ml=n(gm,"P",{});var QT=s(ml);Hu=i(QT,"TF method for processing logits."),QT.forEach(t),gm.forEach(t),Fi.forEach(t),cp=l(e),de=n(e,"DIV",{class:!0});var Di=s(de);g(ao.$$.fragment,Di),Ru=l(Di),A=n(Di,"P",{});var je=s(A);Ku=i(je,"This class can be used to create a list of "),Hs=n(je,"A",{href:!0});var ZT=s(Hs);Uu=i(ZT,"TFLogitsProcessor"),ZT.forEach(t),Yu=i(je," to subsequently process a "),fl=n(je,"CODE",{});var e2=s(fl);Xu=i(e2,"scores"),e2.forEach(t),Ju=i(je,` input tensor.
This class inherits from list and adds a specific `),gl=n(je,"EM",{});var r2=s(gl);hl=n(r2,"STRONG",{});var t2=s(hl);Qu=i(t2,"call"),t2.forEach(t),r2.forEach(t),Zu=i(je," method to apply each "),Rs=n(je,"A",{href:!0});var o2=s(Rs);e_=i(o2,"TFLogitsProcessor"),o2.forEach(t),r_=i(je,` to the
inputs.`),je.forEach(t),t_=l(Di),Ks=n(Di,"DIV",{class:!0});var n2=s(Ks);g(io.$$.fragment,n2),n2.forEach(t),Di.forEach(t),lp=l(e),pe=n(e,"DIV",{class:!0});var Si=s(pe);g(co.$$.fragment,Si),o_=l(Si),ul=n(Si,"P",{});var s2=s(ul);n_=i(s2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),s2.forEach(t),s_=l(Si),zr=n(Si,"DIV",{class:!0});var hm=s(zr);g(lo.$$.fragment,hm),a_=l(hm),_l=n(hm,"P",{});var a2=s(_l);i_=i(a2,"TF method for warping logits."),a2.forEach(t),hm.forEach(t),Si.forEach(t),dp=l(e),me=n(e,"DIV",{class:!0});var zi=s(me);g(po.$$.fragment,zi),c_=l(zi),Us=n(zi,"P",{});var x$=s(Us);Ys=n(x$,"A",{href:!0});var i2=s(Ys);l_=i(i2,"TFLogitsWarper"),i2.forEach(t),d_=i(x$," for temperature (exponential scaling output probability distribution)."),x$.forEach(t),p_=l(zi),Xs=n(zi,"DIV",{class:!0});var c2=s(Xs);g(mo.$$.fragment,c2),c2.forEach(t),zi.forEach(t),pp=l(e),fe=n(e,"DIV",{class:!0});var Oi=s(fe);g(fo.$$.fragment,Oi),m_=l(Oi),Js=n(Oi,"P",{});var L$=s(Js);Qs=n(L$,"A",{href:!0});var l2=s(Qs);f_=i(l2,"TFLogitsWarper"),l2.forEach(t),g_=i(L$," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),L$.forEach(t),h_=l(Oi),Zs=n(Oi,"DIV",{class:!0});var d2=s(Zs);g(go.$$.fragment,d2),d2.forEach(t),Oi.forEach(t),mp=l(e),ge=n(e,"DIV",{class:!0});var qi=s(ge);g(ho.$$.fragment,qi),u_=l(qi),ea=n(qi,"P",{});var w$=s(ea);ra=n(w$,"A",{href:!0});var p2=s(ra);__=i(p2,"TFLogitsWarper"),p2.forEach(t),b_=i(w$," that performs top-k, i.e. restricting to the k highest probability elements."),w$.forEach(t),v_=l(qi),ta=n(qi,"DIV",{class:!0});var m2=s(ta);g(uo.$$.fragment,m2),m2.forEach(t),qi.forEach(t),fp=l(e),he=n(e,"DIV",{class:!0});var Ii=s(he);g(_o.$$.fragment,Ii),$_=l(Ii),oa=n(Ii,"P",{});var E$=s(oa);na=n(E$,"A",{href:!0});var f2=s(na);T_=i(f2,"TFLogitsProcessor"),f2.forEach(t),y_=i(E$," enforcing a min-length by setting EOS probability to 0."),E$.forEach(t),k_=l(Ii),sa=n(Ii,"DIV",{class:!0});var g2=s(sa);g(bo.$$.fragment,g2),g2.forEach(t),Ii.forEach(t),gp=l(e),ue=n(e,"DIV",{class:!0});var Bi=s(ue);g(vo.$$.fragment,Bi),x_=l(Bi),aa=n(Bi,"P",{});var P$=s(aa);ia=n(P$,"A",{href:!0});var h2=s(ia);L_=i(h2,"TFLogitsProcessor"),h2.forEach(t),w_=i(P$," that enforces that specified sequences will never be sampled."),P$.forEach(t),E_=l(Bi),ca=n(Bi,"DIV",{class:!0});var u2=s(ca);g($o.$$.fragment,u2),u2.forEach(t),Bi.forEach(t),hp=l(e),_e=n(e,"DIV",{class:!0});var Ai=s(_e);g(To.$$.fragment,Ai),P_=l(Ai),Or=n(Ai,"P",{});var pd=s(Or);la=n(pd,"A",{href:!0});var _2=s(la);F_=i(_2,"TFLogitsProcessor"),_2.forEach(t),D_=i(pd,` that enforces no repetition of n-grams. See
`),yo=n(pd,"A",{href:!0,rel:!0});var b2=s(yo);S_=i(b2,"Fairseq"),b2.forEach(t),z_=i(pd,"."),pd.forEach(t),O_=l(Ai),da=n(Ai,"DIV",{class:!0});var v2=s(da);g(ko.$$.fragment,v2),v2.forEach(t),Ai.forEach(t),up=l(e),be=n(e,"DIV",{class:!0});var Ci=s(be);g(xo.$$.fragment,Ci),q_=l(Ci),pa=n(Ci,"P",{});var F$=s(pa);ma=n(F$,"A",{href:!0});var $2=s(ma);I_=i($2,"TFLogitsProcessor"),$2.forEach(t),B_=i(F$," enforcing an exponential penalty on repeated sequences."),F$.forEach(t),A_=l(Ci),fa=n(Ci,"DIV",{class:!0});var T2=s(fa);g(Lo.$$.fragment,T2),T2.forEach(t),Ci.forEach(t),_p=l(e),ve=n(e,"DIV",{class:!0});var Ni=s(ve);g(wo.$$.fragment,Ni),C_=l(Ni),ga=n(Ni,"P",{});var D$=s(ga);ha=n(D$,"A",{href:!0});var y2=s(ha);N_=i(y2,"TFLogitsProcessor"),y2.forEach(t),W_=i(D$," that enforces the specified token as the first generated token."),D$.forEach(t),V_=l(Ni),ua=n(Ni,"DIV",{class:!0});var k2=s(ua);g(Eo.$$.fragment,k2),k2.forEach(t),Ni.forEach(t),bp=l(e),$e=n(e,"DIV",{class:!0});var Wi=s($e);g(Po.$$.fragment,Wi),M_=l(Wi),qr=n(Wi,"P",{});var md=s(qr);_a=n(md,"A",{href:!0});var x2=s(_a);G_=i(x2,"TFLogitsProcessor"),x2.forEach(t),j_=i(md," that enforces the specified token as the last generated token when "),bl=n(md,"CODE",{});var L2=s(bl);H_=i(L2,"max_length"),L2.forEach(t),R_=i(md," is reached."),md.forEach(t),K_=l(Wi),ba=n(Wi,"DIV",{class:!0});var w2=s(ba);g(Fo.$$.fragment,w2),w2.forEach(t),Wi.forEach(t),vp=l(e),Te=n(e,"DIV",{class:!0});var Vi=s(Te);g(Do.$$.fragment,Vi),U_=l(Vi),vl=n(Vi,"P",{});var E2=s(vl);Y_=i(E2,"Abstract base class for all logit processors that can be applied during generation."),E2.forEach(t),X_=l(Vi),Ir=n(Vi,"DIV",{class:!0});var um=s(Ir);g(So.$$.fragment,um),J_=l(um),$l=n(um,"P",{});var P2=s($l);Q_=i(P2,"Flax method for processing logits."),P2.forEach(t),um.forEach(t),Vi.forEach(t),$p=l(e),ye=n(e,"DIV",{class:!0});var Mi=s(ye);g(zo.$$.fragment,Mi),Z_=l(Mi),E=n(Mi,"P",{});var B=s(E);eb=i(B,"This class can be used to create a list of "),va=n(B,"A",{href:!0});var F2=s(va);rb=i(F2,"FlaxLogitsProcessor"),F2.forEach(t),tb=i(B," or "),$a=n(B,"A",{href:!0});var D2=s($a);ob=i(D2,"FlaxLogitsWarper"),D2.forEach(t),nb=i(B,` to subsequently process
a `),Tl=n(B,"CODE",{});var S2=s(Tl);sb=i(S2,"scores"),S2.forEach(t),ab=i(B," input tensor. This class inherits from list and adds a specific "),yl=n(B,"EM",{});var z2=s(yl);kl=n(z2,"STRONG",{});var O2=s(kl);ib=i(O2,"call"),O2.forEach(t),z2.forEach(t),cb=i(B,` method to apply each
`),Ta=n(B,"A",{href:!0});var q2=s(Ta);lb=i(q2,"FlaxLogitsProcessor"),q2.forEach(t),db=i(B," or "),ya=n(B,"A",{href:!0});var I2=s(ya);pb=i(I2,"FlaxLogitsWarper"),I2.forEach(t),mb=i(B," to the inputs."),B.forEach(t),fb=l(Mi),ka=n(Mi,"DIV",{class:!0});var B2=s(ka);g(Oo.$$.fragment,B2),B2.forEach(t),Mi.forEach(t),Tp=l(e),ke=n(e,"DIV",{class:!0});var Gi=s(ke);g(qo.$$.fragment,Gi),gb=l(Gi),xl=n(Gi,"P",{});var A2=s(xl);hb=i(A2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),A2.forEach(t),ub=l(Gi),Br=n(Gi,"DIV",{class:!0});var _m=s(Br);g(Io.$$.fragment,_m),_b=l(_m),Ll=n(_m,"P",{});var C2=s(Ll);bb=i(C2,"Flax method for warping logits."),C2.forEach(t),_m.forEach(t),Gi.forEach(t),yp=l(e),xe=n(e,"DIV",{class:!0});var ji=s(xe);g(Bo.$$.fragment,ji),vb=l(ji),xa=n(ji,"P",{});var S$=s(xa);La=n(S$,"A",{href:!0});var N2=s(La);$b=i(N2,"FlaxLogitsWarper"),N2.forEach(t),Tb=i(S$," for temperature (exponential scaling output probability distribution)."),S$.forEach(t),yb=l(ji),wa=n(ji,"DIV",{class:!0});var W2=s(wa);g(Ao.$$.fragment,W2),W2.forEach(t),ji.forEach(t),kp=l(e),Le=n(e,"DIV",{class:!0});var Hi=s(Le);g(Co.$$.fragment,Hi),kb=l(Hi),Ea=n(Hi,"P",{});var z$=s(Ea);Pa=n(z$,"A",{href:!0});var V2=s(Pa);xb=i(V2,"FlaxLogitsWarper"),V2.forEach(t),Lb=i(z$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),z$.forEach(t),wb=l(Hi),Fa=n(Hi,"DIV",{class:!0});var M2=s(Fa);g(No.$$.fragment,M2),M2.forEach(t),Hi.forEach(t),xp=l(e),we=n(e,"DIV",{class:!0});var Ri=s(we);g(Wo.$$.fragment,Ri),Eb=l(Ri),Da=n(Ri,"P",{});var O$=s(Da);Sa=n(O$,"A",{href:!0});var G2=s(Sa);Pb=i(G2,"FlaxLogitsWarper"),G2.forEach(t),Fb=i(O$," that performs top-k, i.e. restricting to the k highest probability elements."),O$.forEach(t),Db=l(Ri),za=n(Ri,"DIV",{class:!0});var j2=s(za);g(Vo.$$.fragment,j2),j2.forEach(t),Ri.forEach(t),Lp=l(e),Ee=n(e,"DIV",{class:!0});var Ki=s(Ee);g(Mo.$$.fragment,Ki),Sb=l(Ki),Oa=n(Ki,"P",{});var q$=s(Oa);qa=n(q$,"A",{href:!0});var H2=s(qa);zb=i(H2,"FlaxLogitsProcessor"),H2.forEach(t),Ob=i(q$," that enforces the specified token as the first generated token."),q$.forEach(t),qb=l(Ki),Ia=n(Ki,"DIV",{class:!0});var R2=s(Ia);g(Go.$$.fragment,R2),R2.forEach(t),Ki.forEach(t),wp=l(e),Pe=n(e,"DIV",{class:!0});var Ui=s(Pe);g(jo.$$.fragment,Ui),Ib=l(Ui),Ar=n(Ui,"P",{});var fd=s(Ar);Ba=n(fd,"A",{href:!0});var K2=s(Ba);Bb=i(K2,"FlaxLogitsProcessor"),K2.forEach(t),Ab=i(fd," that enforces the specified token as the last generated token when "),wl=n(fd,"CODE",{});var U2=s(wl);Cb=i(U2,"max_length"),U2.forEach(t),Nb=i(fd," is reached."),fd.forEach(t),Wb=l(Ui),Aa=n(Ui,"DIV",{class:!0});var Y2=s(Aa);g(Ho.$$.fragment,Y2),Y2.forEach(t),Ui.forEach(t),Ep=l(e),Fe=n(e,"DIV",{class:!0});var Yi=s(Fe);g(Ro.$$.fragment,Yi),Vb=l(Yi),Ca=n(Yi,"P",{});var I$=s(Ca);Na=n(I$,"A",{href:!0});var X2=s(Na);Mb=i(X2,"FlaxLogitsProcessor"),X2.forEach(t),Gb=i(I$," enforcing a min-length by setting EOS probability to 0."),I$.forEach(t),jb=l(Yi),Wa=n(Yi,"DIV",{class:!0});var J2=s(Wa);g(Ko.$$.fragment,J2),J2.forEach(t),Yi.forEach(t),Pp=l(e),ar=n(e,"H2",{class:!0});var bm=s(ar);Cr=n(bm,"A",{id:!0,class:!0,href:!0});var Q2=s(Cr);El=n(Q2,"SPAN",{});var Z2=s(El);g(Uo.$$.fragment,Z2),Z2.forEach(t),Q2.forEach(t),Hb=l(bm),Pl=n(bm,"SPAN",{});var ey=s(Pl);Rb=i(ey,"StoppingCriteria"),ey.forEach(t),bm.forEach(t),Fp=l(e),Nr=n(e,"P",{});var vm=s(Nr);Kb=i(vm,"A "),Va=n(vm,"A",{href:!0});var ry=s(Va);Ub=i(ry,"StoppingCriteria"),ry.forEach(t),Yb=i(vm," can be used to change when to stop generation (other than EOS token)."),vm.forEach(t),Dp=l(e),De=n(e,"DIV",{class:!0});var Xi=s(De);g(Yo.$$.fragment,Xi),Xb=l(Xi),Fl=n(Xi,"P",{});var ty=s(Fl);Jb=i(ty,"Abstract base class for all stopping criteria that can be applied during generation."),ty.forEach(t),Qb=l(Xi),Ma=n(Xi,"DIV",{class:!0});var oy=s(Ma);g(Xo.$$.fragment,oy),oy.forEach(t),Xi.forEach(t),Sp=l(e),ir=n(e,"DIV",{class:!0});var $m=s(ir);g(Jo.$$.fragment,$m),Zb=l($m),Ga=n($m,"DIV",{class:!0});var ny=s(Ga);g(Qo.$$.fragment,ny),ny.forEach(t),$m.forEach(t),zp=l(e),Se=n(e,"DIV",{class:!0});var Ji=s(Se);g(Zo.$$.fragment,Ji),ev=l(Ji),en=n(Ji,"P",{});var Tm=s(en);rv=i(Tm,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),Dl=n(Tm,"CODE",{});var sy=s(Dl);tv=i(sy,"max_length"),sy.forEach(t),ov=i(Tm,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Tm.forEach(t),nv=l(Ji),ja=n(Ji,"DIV",{class:!0});var ay=s(ja);g(rn.$$.fragment,ay),ay.forEach(t),Ji.forEach(t),Op=l(e),ze=n(e,"DIV",{class:!0});var Qi=s(ze);g(tn.$$.fragment,Qi),sv=l(Qi),on=n(Qi,"P",{});var ym=s(on);av=i(ym,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Sl=n(ym,"CODE",{});var iy=s(Sl);iv=i(iy,"initial_time"),iy.forEach(t),cv=i(ym,"."),ym.forEach(t),lv=l(Qi),Ha=n(Qi,"DIV",{class:!0});var cy=s(Ha);g(nn.$$.fragment,cy),cy.forEach(t),Qi.forEach(t),qp=l(e),cr=n(e,"H2",{class:!0});var km=s(cr);Wr=n(km,"A",{id:!0,class:!0,href:!0});var ly=s(Wr);zl=n(ly,"SPAN",{});var dy=s(zl);g(sn.$$.fragment,dy),dy.forEach(t),ly.forEach(t),dv=l(km),Ol=n(km,"SPAN",{});var py=s(Ol);pv=i(py,"Constraints"),py.forEach(t),km.forEach(t),Ip=l(e),Vr=n(e,"P",{});var xm=s(Vr);mv=i(xm,"A "),Ra=n(xm,"A",{href:!0});var my=s(Ra);fv=i(my,"Constraint"),my.forEach(t),gv=i(xm," can be used to force the generation to include specific tokens or sequences in the output."),xm.forEach(t),Bp=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(an.$$.fragment,T),hv=l(T),ql=n(T,"P",{});var fy=s(ql);uv=i(fy,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),fy.forEach(t),_v=l(T),Il=n(T,"P",{});var gy=s(Il);bv=i(gy,"All classes that inherit Constraint must follow the requirement that"),gy.forEach(t),vv=l(T),g(Mr.$$.fragment,T),$v=l(T),Bl=n(T,"P",{});var hy=s(Bl);Tv=i(hy,"will always terminate (halt)."),hy.forEach(t),yv=l(T),Gr=n(T,"DIV",{class:!0});var Lm=s(Gr);g(cn.$$.fragment,Lm),kv=l(Lm),Al=n(Lm,"P",{});var uy=s(Al);xv=i(uy,"When called, returns the token that would take this constraint one step closer to being fulfilled."),uy.forEach(t),Lm.forEach(t),Lv=l(T),jr=n(T,"DIV",{class:!0});var wm=s(jr);g(ln.$$.fragment,wm),wv=l(wm),Cl=n(wm,"P",{});var _y=s(Cl);Ev=i(_y,"Creates a new instance of this constraint."),_y.forEach(t),wm.forEach(t),Pv=l(T),Hr=n(T,"DIV",{class:!0});var Em=s(Hr);g(dn.$$.fragment,Em),Fv=l(Em),Nl=n(Em,"P",{});var by=s(Nl);Dv=i(by,"Reads in a token and returns whether it creates progress."),by.forEach(t),Em.forEach(t),Sv=l(T),Rr=n(T,"DIV",{class:!0});var Pm=s(Rr);g(pn.$$.fragment,Pm),zv=l(Pm),mn=n(Pm,"P",{});var Fm=s(mn);Ov=i(Fm,"Returns the number of remaining steps of "),Wl=n(Fm,"CODE",{});var vy=s(Wl);qv=i(vy,"advance()"),vy.forEach(t),Iv=i(Fm," in order to complete this constraint."),Fm.forEach(t),Pm.forEach(t),Bv=l(T),Kr=n(T,"DIV",{class:!0});var Dm=s(Kr);g(fn.$$.fragment,Dm),Av=l(Dm),Vl=n(Dm,"P",{});var $y=s(Vl);Cv=i($y,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),$y.forEach(t),Dm.forEach(t),Nv=l(T),Ur=n(T,"DIV",{class:!0});var Sm=s(Ur);g(gn.$$.fragment,Sm),Wv=l(Sm),Ml=n(Sm,"P",{});var Ty=s(Ml);Vv=i(Ty,"Tests whether this constraint has been properly defined."),Ty.forEach(t),Sm.forEach(t),Mv=l(T),We=n(T,"DIV",{class:!0});var Zi=s(We);g(hn.$$.fragment,Zi),Gv=l(Zi),un=n(Zi,"P",{});var zm=s(un);jv=i(zm,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Gl=n(zm,"CODE",{});var yy=s(Gl);Hv=i(yy,"does_advance(self, token_id: int)"),yy.forEach(t),Rv=i(zm,"."),zm.forEach(t),Kv=l(Zi),jl=n(Zi,"P",{});var ky=s(jl);Uv=i(ky,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),ky.forEach(t),Zi.forEach(t),T.forEach(t),Ap=l(e),lr=n(e,"DIV",{class:!0});var Om=s(lr);g(_n.$$.fragment,Om),Yv=l(Om),Ka=n(Om,"P",{});var B$=s(Ka);Ua=n(B$,"A",{href:!0});var xy=s(Ua);Xv=i(xy,"Constraint"),xy.forEach(t),Jv=i(B$," enforcing that an ordered sequence of tokens is included in the output."),B$.forEach(t),Om.forEach(t),Cp=l(e),dr=n(e,"DIV",{class:!0});var qm=s(dr);g(bn.$$.fragment,qm),Qv=l(qm),vn=n(qm,"P",{});var Im=s(vn);Zv=i(Im,"A special "),Ya=n(Im,"A",{href:!0});var Ly=s(Ya);e1=i(Ly,"Constraint"),Ly.forEach(t),r1=i(Im," that is fulfilled by fulfilling just one of several constraints."),Im.forEach(t),qm.forEach(t),Np=l(e),C=n(e,"DIV",{class:!0});var et=s(C);g($n.$$.fragment,et),t1=l(et),Hl=n(et,"P",{});var wy=s(Hl);o1=i(wy,"A class for beam scorers to track its progress through a list of constraints."),wy.forEach(t),n1=l(et),F=n(et,"DIV",{class:!0});var j=s(F);g(Tn.$$.fragment,j),s1=l(j),Rl=n(j,"P",{});var Ey=s(Rl);a1=i(Ey,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Ey.forEach(t),i1=l(j),pr=n(j,"P",{});var ec=s(pr);c1=i(ec,"Given constraints "),Kl=n(ec,"CODE",{});var Py=s(Kl);l1=i(Py,"c_i = {t_ij | j == # of tokens}"),Py.forEach(t),d1=i(ec,`, If we\u2019re not in the middle of progressing through a
specific constraint `),Ul=n(ec,"CODE",{});var Fy=s(Ul);p1=i(Fy,"c_i"),Fy.forEach(t),m1=i(ec,", we return:"),ec.forEach(t),f1=l(j),Yl=n(j,"P",{});var Dy=s(Yl);Xl=n(Dy,"CODE",{});var Sy=s(Xl);g1=i(Sy,"[t_k1 for k in indices of unfulfilled constraints]"),Sy.forEach(t),Dy.forEach(t),h1=l(j),Oe=n(j,"P",{});var rt=s(Oe);u1=i(rt,`If we are in the middle of a constraint, then we return:
`),Jl=n(rt,"CODE",{});var zy=s(Jl);_1=i(zy,"[t_ij]"),zy.forEach(t),b1=i(rt,", where "),Ql=n(rt,"CODE",{});var Oy=s(Ql);v1=i(Oy,"i"),Oy.forEach(t),$1=i(rt," is the index of the inprogress constraint, "),Zl=n(rt,"CODE",{});var qy=s(Zl);T1=i(qy,"j"),qy.forEach(t),y1=i(rt," is the next step for the constraint."),rt.forEach(t),k1=l(j),ed=n(j,"P",{});var Iy=s(ed);x1=i(Iy,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),Iy.forEach(t),j.forEach(t),L1=l(et),Yr=n(et,"DIV",{class:!0});var Bm=s(Yr);g(yn.$$.fragment,Bm),w1=l(Bm),rd=n(Bm,"P",{});var By=s(rd);E1=i(By,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),By.forEach(t),Bm.forEach(t),et.forEach(t),Wp=l(e),mr=n(e,"H2",{class:!0});var Am=s(mr);Xr=n(Am,"A",{id:!0,class:!0,href:!0});var Ay=s(Xr);td=n(Ay,"SPAN",{});var Cy=s(td);g(kn.$$.fragment,Cy),Cy.forEach(t),Ay.forEach(t),P1=l(Am),od=n(Am,"SPAN",{});var Ny=s(od);F1=i(Ny,"BeamSearch"),Ny.forEach(t),Am.forEach(t),Vp=l(e),N=n(e,"DIV",{class:!0});var tt=s(N);g(xn.$$.fragment,tt),D1=l(tt),fr=n(tt,"P",{});var rc=s(fr);S1=i(rc,"Abstract base class for all beam scorers that are used for "),Xa=n(rc,"A",{href:!0});var Wy=s(Xa);z1=i(Wy,"beam_search()"),Wy.forEach(t),O1=i(rc,` and
`),Ja=n(rc,"A",{href:!0});var Vy=s(Ja);q1=i(Vy,"beam_sample()"),Vy.forEach(t),I1=i(rc,"."),rc.forEach(t),B1=l(tt),Qa=n(tt,"DIV",{class:!0});var My=s(Qa);g(Ln.$$.fragment,My),My.forEach(t),A1=l(tt),Za=n(tt,"DIV",{class:!0});var Gy=s(Za);g(wn.$$.fragment,Gy),Gy.forEach(t),tt.forEach(t),Mp=l(e),P=n(e,"DIV",{class:!0});var H=s(P);g(En.$$.fragment,H),C1=l(H),ei=n(H,"P",{});var A$=s(ei);ri=n(A$,"A",{href:!0});var jy=s(ri);N1=i(jy,"BeamScorer"),jy.forEach(t),W1=i(A$," implementing standard beam search decoding."),A$.forEach(t),V1=l(H),Pn=n(H,"P",{});var Cm=s(Pn);M1=i(Cm,"Adapted in part from "),Fn=n(Cm,"A",{href:!0,rel:!0});var Hy=s(Fn);G1=i(Hy,`Facebook\u2019s XLM beam search
code`),Hy.forEach(t),j1=i(Cm,"."),Cm.forEach(t),H1=l(H),ti=n(H,"P",{});var C$=s(ti);R1=i(C$,"Reference for the diverse beam search algorithm and implementation "),Dn=n(C$,"A",{href:!0,rel:!0});var Ry=s(Dn);K1=i(Ry,`Ashwin Kalyan\u2019s DBS
implementation`),Ry.forEach(t),C$.forEach(t),U1=l(H),oi=n(H,"DIV",{class:!0});var Ky=s(oi);g(Sn.$$.fragment,Ky),Ky.forEach(t),Y1=l(H),ni=n(H,"DIV",{class:!0});var Uy=s(ni);g(zn.$$.fragment,Uy),Uy.forEach(t),H.forEach(t),Gp=l(e),W=n(e,"DIV",{class:!0});var ot=s(W);g(On.$$.fragment,ot),X1=l(ot),si=n(ot,"P",{});var N$=s(si);ai=n(N$,"A",{href:!0});var Yy=s(ai);J1=i(Yy,"BeamScorer"),Yy.forEach(t),Q1=i(N$," implementing constrained beam search decoding."),N$.forEach(t),Z1=l(ot),ii=n(ot,"DIV",{class:!0});var Xy=s(ii);g(qn.$$.fragment,Xy),Xy.forEach(t),e$=l(ot),ci=n(ot,"DIV",{class:!0});var Jy=s(ci);g(In.$$.fragment,Jy),Jy.forEach(t),ot.forEach(t),jp=l(e),gr=n(e,"H2",{class:!0});var Nm=s(gr);Jr=n(Nm,"A",{id:!0,class:!0,href:!0});var Qy=s(Jr);nd=n(Qy,"SPAN",{});var Zy=s(nd);g(Bn.$$.fragment,Zy),Zy.forEach(t),Qy.forEach(t),r$=l(Nm),sd=n(Nm,"SPAN",{});var e0=s(sd);t$=i(e0,"Utilities"),e0.forEach(t),Nm.forEach(t),Hp=l(e),qe=n(e,"DIV",{class:!0});var tc=s(qe);g(An.$$.fragment,tc),o$=l(tc),ad=n(tc,"P",{});var r0=s(ad);n$=i(r0,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),r0.forEach(t),s$=l(tc),li=n(tc,"P",{});var W$=s(li);a$=i(W$,"From: "),Cn=n(W$,"A",{href:!0,rel:!0});var t0=s(Cn);i$=i(t0,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),t0.forEach(t),W$.forEach(t),tc.forEach(t),Rp=l(e),Ie=n(e,"DIV",{class:!0});var oc=s(Ie);g(Nn.$$.fragment,oc),c$=l(oc),id=n(oc,"P",{});var o0=s(id);l$=i(o0,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),o0.forEach(t),d$=l(oc),di=n(oc,"P",{});var V$=s(di);p$=i(V$,"From: "),Wn=n(V$,"A",{href:!0,rel:!0});var n0=s(Wn);m$=i(n0,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),n0.forEach(t),V$.forEach(t),oc.forEach(t),this.h()},h(){d(L,"name","hf:doc:metadata"),d(L,"content",JSON.stringify(g0)),d(Ae,"id","utilities-for-generation"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#utilities-for-generation"),d(k,"class","relative group"),d(Gn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(jn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(Hn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(Rn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Kn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Un,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Yn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(ur,"id","generate-outputs"),d(ur,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ur,"href","#generate-outputs"),d(Re,"class","relative group"),d(Jn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Qn,"href","/docs/transformers/pr_17373/en/main_classes/output#transformers.utils.ModelOutput"),d(Zn,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(rs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(br,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(br,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(br,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Ke,"class","relative group"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d($r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($r,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Xe,"class","relative group"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(yr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yr,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Ze,"class","relative group"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(kr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kr,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(tr,"class","relative group"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"id","transformers.LogitsProcessor"),d(xr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xr,"href","#transformers.LogitsProcessor"),d(sr,"class","relative group"),d(is,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(ls,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsWarper"),d(ds,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(ps,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsWarper"),d(ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_s,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsWarper"),d(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($s,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ks,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsWarper"),d(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ws,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsWarper"),d(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ps,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(Mt,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Mt,"rel","nofollow"),d(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ss,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Os,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(Kt,"href","https://arxiv.org/abs/2010.00904"),d(Kt,"rel","nofollow"),d(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Is,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(Bs,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Xt,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(Xt,"rel","nofollow"),d(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ns,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.LogitsProcessor"),d(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Rs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ys,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qs,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ra,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsWarper"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(na,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ia,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(la,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(yo,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(yo,"rel","nofollow"),d(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ma,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ha,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_a,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(va,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d($a,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ta,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ya,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(La,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pa,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sa,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qa,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ba,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Na,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"id","transformers.StoppingCriteria"),d(Cr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cr,"href","#transformers.StoppingCriteria"),d(ar,"class","relative group"),d(Va,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.StoppingCriteria"),d(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wr,"id","transformers.Constraint"),d(Wr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wr,"href","#transformers.Constraint"),d(cr,"class","relative group"),d(Ra,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.Constraint"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ua,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.Constraint"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ya,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.Constraint"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xr,"id","transformers.BeamScorer"),d(Xr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xr,"href","#transformers.BeamScorer"),d(mr,"class","relative group"),d(Xa,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Ja,"href","/docs/transformers/pr_17373/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ri,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.BeamScorer"),d(Fn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(Fn,"rel","nofollow"),d(Dn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(Dn,"rel","nofollow"),d(oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ni,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ai,"href","/docs/transformers/pr_17373/en/internal/generation_utils#transformers.BeamScorer"),d(ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jr,"id","transformers.top_k_top_p_filtering"),d(Jr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jr,"href","#transformers.top_k_top_p_filtering"),d(gr,"class","relative group"),d(Cn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Cn,"rel","nofollow"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Wn,"rel","nofollow"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){r(document.head,L),m(e,He,p),m(e,k,p),r(k,Ae),r(Ae,nc),h(nt,nc,null),r(k,Wm),r(k,sc),r(sc,Vm),m(e,hd,p),m(e,y,p),r(y,Mm),r(y,Gn),r(Gn,Gm),r(y,jm),r(y,jn),r(jn,Hm),r(y,Rm),r(y,Hn),r(Hn,Km),r(y,Um),r(y,Rn),r(Rn,Ym),r(y,Xm),r(y,Kn),r(Kn,Jm),r(y,Qm),r(y,Un),r(Un,Zm),r(y,ef),r(y,Yn),r(Yn,rf),r(y,tf),m(e,ud,p),m(e,Xn,p),r(Xn,of),m(e,_d,p),m(e,Re,p),r(Re,ur),r(ur,ac),h(st,ac,null),r(Re,nf),r(Re,ic),r(ic,sf),m(e,bd,p),m(e,V,p),r(V,af),r(V,Jn),r(Jn,cf),r(V,lf),r(V,Qn),r(Qn,df),r(V,pf),r(V,Zn),r(Zn,mf),r(V,ff),m(e,vd,p),m(e,es,p),r(es,gf),m(e,$d,p),h(at,e,p),m(e,Td,p),m(e,Ce,p),r(Ce,hf),r(Ce,cc),r(cc,uf),r(Ce,_f),r(Ce,rs),r(rs,bf),r(Ce,vf),m(e,yd,p),m(e,M,p),r(M,ts),r(ts,lc),r(lc,$f),r(ts,Tf),r(M,yf),r(M,os),r(os,dc),r(dc,kf),r(os,xf),r(M,Lf),r(M,ns),r(ns,pc),r(pc,wf),r(ns,Ef),r(M,Pf),r(M,ss),r(ss,mc),r(mc,Ff),r(ss,Df),m(e,kd,p),m(e,x,p),r(x,Sf),r(x,fc),r(fc,zf),r(x,Of),r(x,gc),r(gc,qf),r(x,If),r(x,hc),r(hc,Bf),r(x,Af),r(x,uc),r(uc,Cf),r(x,Nf),r(x,_c),r(_c,Wf),r(x,Vf),r(x,bc),r(bc,Mf),r(x,Gf),m(e,xd,p),m(e,S,p),r(S,jf),r(S,vc),r(vc,Hf),r(S,Rf),r(S,$c),r($c,Kf),r(S,Uf),r(S,Tc),r(Tc,Yf),r(S,Xf),r(S,yc),r(yc,Jf),r(S,Qf),m(e,Ld,p),m(e,z,p),r(z,Zf),r(z,kc),r(kc,eg),r(z,rg),r(z,xc),r(xc,tg),r(z,og),r(z,Lc),r(Lc,ng),r(z,sg),r(z,wc),r(wc,ag),r(z,ig),m(e,wd,p),h(it,e,p),m(e,Ed,p),m(e,_r,p),r(_r,cg),r(_r,Ec),r(Ec,lg),r(_r,dg),m(e,Pd,p),m(e,O,p),r(O,pg),r(O,Pc),r(Pc,mg),r(O,fg),r(O,Fc),r(Fc,gg),r(O,hg),r(O,Dc),r(Dc,ug),r(O,_g),r(O,Sc),r(Sc,bg),r(O,vg),m(e,Fd,p),m(e,as,p),r(as,$g),m(e,Dd,p),m(e,Ke,p),r(Ke,br),r(br,zc),h(ct,zc,null),r(Ke,Tg),r(Ke,Oc),r(Oc,yg),m(e,Sd,p),m(e,Ue,p),h(lt,Ue,null),r(Ue,kg),r(Ue,qc),r(qc,xg),m(e,zd,p),m(e,Ye,p),h(dt,Ye,null),r(Ye,Lg),r(Ye,Ic),r(Ic,wg),m(e,Od,p),m(e,R,p),h(pt,R,null),r(R,Eg),r(R,Bc),r(Bc,Pg),r(R,Fg),r(R,vr),h(mt,vr,null),r(vr,Dg),r(vr,Ac),r(Ac,Sg),m(e,qd,p),m(e,Xe,p),r(Xe,$r),r($r,Cc),h(ft,Cc,null),r(Xe,zg),r(Xe,Nc),r(Nc,Og),m(e,Id,p),m(e,Je,p),h(gt,Je,null),r(Je,qg),r(Je,Wc),r(Wc,Ig),m(e,Bd,p),m(e,Qe,p),h(ht,Qe,null),r(Qe,Bg),r(Qe,Vc),r(Vc,Ag),m(e,Ad,p),m(e,K,p),h(ut,K,null),r(K,Cg),r(K,Mc),r(Mc,Ng),r(K,Wg),r(K,Tr),h(_t,Tr,null),r(Tr,Vg),r(Tr,Gc),r(Gc,Mg),m(e,Cd,p),m(e,Ze,p),r(Ze,yr),r(yr,jc),h(bt,jc,null),r(Ze,Gg),r(Ze,Hc),r(Hc,jg),m(e,Nd,p),m(e,er,p),h(vt,er,null),r(er,Hg),r(er,Rc),r(Rc,Rg),m(e,Wd,p),m(e,rr,p),h($t,rr,null),r(rr,Kg),r(rr,Kc),r(Kc,Ug),m(e,Vd,p),m(e,tr,p),r(tr,kr),r(kr,Uc),h(Tt,Uc,null),r(tr,Yg),r(tr,Yc),r(Yc,Xg),m(e,Md,p),m(e,or,p),h(yt,or,null),r(or,Jg),r(or,Xc),r(Xc,Qg),m(e,Gd,p),m(e,nr,p),h(kt,nr,null),r(nr,Zg),r(nr,Jc),r(Jc,eh),m(e,jd,p),m(e,sr,p),r(sr,xr),r(xr,Qc),h(xt,Qc,null),r(sr,rh),r(sr,Zc),r(Zc,th),m(e,Hd,p),m(e,Lr,p),r(Lr,oh),r(Lr,is),r(is,nh),r(Lr,sh),m(e,Rd,p),m(e,U,p),h(Lt,U,null),r(U,ah),r(U,el),r(el,ih),r(U,ch),r(U,wr),h(wt,wr,null),r(wr,lh),r(wr,rl),r(rl,dh),m(e,Kd,p),m(e,Y,p),h(Et,Y,null),r(Y,ph),r(Y,w),r(w,mh),r(w,cs),r(cs,fh),r(w,gh),r(w,ls),r(ls,hh),r(w,uh),r(w,tl),r(tl,_h),r(w,bh),r(w,ol),r(ol,nl),r(nl,vh),r(w,$h),r(w,ds),r(ds,Th),r(w,yh),r(w,ps),r(ps,kh),r(w,xh),r(Y,Lh),r(Y,ms),h(Pt,ms,null),m(e,Ud,p),m(e,X,p),h(Ft,X,null),r(X,wh),r(X,sl),r(sl,Eh),r(X,Ph),r(X,Er),h(Dt,Er,null),r(Er,Fh),r(Er,al),r(al,Dh),m(e,Yd,p),m(e,J,p),h(St,J,null),r(J,Sh),r(J,fs),r(fs,gs),r(gs,zh),r(fs,Oh),r(J,qh),r(J,hs),h(zt,hs,null),m(e,Xd,p),m(e,Q,p),h(Ot,Q,null),r(Q,Ih),r(Q,us),r(us,_s),r(_s,Bh),r(us,Ah),r(Q,Ch),r(Q,bs),h(qt,bs,null),m(e,Jd,p),m(e,Z,p),h(It,Z,null),r(Z,Nh),r(Z,vs),r(vs,$s),r($s,Wh),r(vs,Vh),r(Z,Mh),r(Z,Ts),h(Bt,Ts,null),m(e,Qd,p),m(e,ee,p),h(At,ee,null),r(ee,Gh),r(ee,ys),r(ys,ks),r(ks,jh),r(ys,Hh),r(ee,Rh),r(ee,xs),h(Ct,xs,null),m(e,Zd,p),m(e,re,p),h(Nt,re,null),r(re,Kh),r(re,Ls),r(Ls,ws),r(ws,Uh),r(Ls,Yh),r(re,Xh),r(re,Es),h(Wt,Es,null),m(e,ep,p),m(e,te,p),h(Vt,te,null),r(te,Jh),r(te,Pr),r(Pr,Ps),r(Ps,Qh),r(Pr,Zh),r(Pr,Mt),r(Mt,eu),r(Pr,ru),r(te,tu),r(te,Fs),h(Gt,Fs,null),m(e,rp,p),m(e,oe,p),h(jt,oe,null),r(oe,ou),r(oe,Ds),r(Ds,Ss),r(Ss,nu),r(Ds,su),r(oe,au),r(oe,zs),h(Ht,zs,null),m(e,tp,p),m(e,ne,p),h(Rt,ne,null),r(ne,iu),r(ne,Fr),r(Fr,Os),r(Os,cu),r(Fr,lu),r(Fr,Kt),r(Kt,du),r(Fr,pu),r(ne,mu),r(ne,qs),h(Ut,qs,null),m(e,op,p),m(e,se,p),h(Yt,se,null),r(se,fu),r(se,Ne),r(Ne,Is),r(Is,gu),r(Ne,hu),r(Ne,Bs),r(Bs,uu),r(Ne,_u),r(Ne,Xt),r(Xt,bu),r(Ne,vu),r(se,$u),r(se,As),h(Jt,As,null),m(e,np,p),m(e,ae,p),h(Qt,ae,null),r(ae,Tu),r(ae,Cs),r(Cs,Ns),r(Ns,yu),r(Cs,ku),r(ae,xu),r(ae,Ws),h(Zt,Ws,null),m(e,sp,p),m(e,ie,p),h(eo,ie,null),r(ie,Lu),r(ie,Dr),r(Dr,Vs),r(Vs,wu),r(Dr,Eu),r(Dr,il),r(il,Pu),r(Dr,Fu),r(ie,Du),r(ie,Ms),h(ro,Ms,null),m(e,ap,p),m(e,ce,p),h(to,ce,null),r(ce,Su),r(ce,G),r(G,Gs),r(Gs,zu),r(G,Ou),r(G,cl),r(cl,qu),r(G,Iu),r(G,ll),r(ll,Bu),r(G,Au),r(G,dl),r(dl,Cu),r(G,Nu),r(ce,Wu),r(ce,js),h(oo,js,null),m(e,ip,p),m(e,le,p),h(no,le,null),r(le,Vu),r(le,pl),r(pl,Mu),r(le,Gu),r(le,Sr),h(so,Sr,null),r(Sr,ju),r(Sr,ml),r(ml,Hu),m(e,cp,p),m(e,de,p),h(ao,de,null),r(de,Ru),r(de,A),r(A,Ku),r(A,Hs),r(Hs,Uu),r(A,Yu),r(A,fl),r(fl,Xu),r(A,Ju),r(A,gl),r(gl,hl),r(hl,Qu),r(A,Zu),r(A,Rs),r(Rs,e_),r(A,r_),r(de,t_),r(de,Ks),h(io,Ks,null),m(e,lp,p),m(e,pe,p),h(co,pe,null),r(pe,o_),r(pe,ul),r(ul,n_),r(pe,s_),r(pe,zr),h(lo,zr,null),r(zr,a_),r(zr,_l),r(_l,i_),m(e,dp,p),m(e,me,p),h(po,me,null),r(me,c_),r(me,Us),r(Us,Ys),r(Ys,l_),r(Us,d_),r(me,p_),r(me,Xs),h(mo,Xs,null),m(e,pp,p),m(e,fe,p),h(fo,fe,null),r(fe,m_),r(fe,Js),r(Js,Qs),r(Qs,f_),r(Js,g_),r(fe,h_),r(fe,Zs),h(go,Zs,null),m(e,mp,p),m(e,ge,p),h(ho,ge,null),r(ge,u_),r(ge,ea),r(ea,ra),r(ra,__),r(ea,b_),r(ge,v_),r(ge,ta),h(uo,ta,null),m(e,fp,p),m(e,he,p),h(_o,he,null),r(he,$_),r(he,oa),r(oa,na),r(na,T_),r(oa,y_),r(he,k_),r(he,sa),h(bo,sa,null),m(e,gp,p),m(e,ue,p),h(vo,ue,null),r(ue,x_),r(ue,aa),r(aa,ia),r(ia,L_),r(aa,w_),r(ue,E_),r(ue,ca),h($o,ca,null),m(e,hp,p),m(e,_e,p),h(To,_e,null),r(_e,P_),r(_e,Or),r(Or,la),r(la,F_),r(Or,D_),r(Or,yo),r(yo,S_),r(Or,z_),r(_e,O_),r(_e,da),h(ko,da,null),m(e,up,p),m(e,be,p),h(xo,be,null),r(be,q_),r(be,pa),r(pa,ma),r(ma,I_),r(pa,B_),r(be,A_),r(be,fa),h(Lo,fa,null),m(e,_p,p),m(e,ve,p),h(wo,ve,null),r(ve,C_),r(ve,ga),r(ga,ha),r(ha,N_),r(ga,W_),r(ve,V_),r(ve,ua),h(Eo,ua,null),m(e,bp,p),m(e,$e,p),h(Po,$e,null),r($e,M_),r($e,qr),r(qr,_a),r(_a,G_),r(qr,j_),r(qr,bl),r(bl,H_),r(qr,R_),r($e,K_),r($e,ba),h(Fo,ba,null),m(e,vp,p),m(e,Te,p),h(Do,Te,null),r(Te,U_),r(Te,vl),r(vl,Y_),r(Te,X_),r(Te,Ir),h(So,Ir,null),r(Ir,J_),r(Ir,$l),r($l,Q_),m(e,$p,p),m(e,ye,p),h(zo,ye,null),r(ye,Z_),r(ye,E),r(E,eb),r(E,va),r(va,rb),r(E,tb),r(E,$a),r($a,ob),r(E,nb),r(E,Tl),r(Tl,sb),r(E,ab),r(E,yl),r(yl,kl),r(kl,ib),r(E,cb),r(E,Ta),r(Ta,lb),r(E,db),r(E,ya),r(ya,pb),r(E,mb),r(ye,fb),r(ye,ka),h(Oo,ka,null),m(e,Tp,p),m(e,ke,p),h(qo,ke,null),r(ke,gb),r(ke,xl),r(xl,hb),r(ke,ub),r(ke,Br),h(Io,Br,null),r(Br,_b),r(Br,Ll),r(Ll,bb),m(e,yp,p),m(e,xe,p),h(Bo,xe,null),r(xe,vb),r(xe,xa),r(xa,La),r(La,$b),r(xa,Tb),r(xe,yb),r(xe,wa),h(Ao,wa,null),m(e,kp,p),m(e,Le,p),h(Co,Le,null),r(Le,kb),r(Le,Ea),r(Ea,Pa),r(Pa,xb),r(Ea,Lb),r(Le,wb),r(Le,Fa),h(No,Fa,null),m(e,xp,p),m(e,we,p),h(Wo,we,null),r(we,Eb),r(we,Da),r(Da,Sa),r(Sa,Pb),r(Da,Fb),r(we,Db),r(we,za),h(Vo,za,null),m(e,Lp,p),m(e,Ee,p),h(Mo,Ee,null),r(Ee,Sb),r(Ee,Oa),r(Oa,qa),r(qa,zb),r(Oa,Ob),r(Ee,qb),r(Ee,Ia),h(Go,Ia,null),m(e,wp,p),m(e,Pe,p),h(jo,Pe,null),r(Pe,Ib),r(Pe,Ar),r(Ar,Ba),r(Ba,Bb),r(Ar,Ab),r(Ar,wl),r(wl,Cb),r(Ar,Nb),r(Pe,Wb),r(Pe,Aa),h(Ho,Aa,null),m(e,Ep,p),m(e,Fe,p),h(Ro,Fe,null),r(Fe,Vb),r(Fe,Ca),r(Ca,Na),r(Na,Mb),r(Ca,Gb),r(Fe,jb),r(Fe,Wa),h(Ko,Wa,null),m(e,Pp,p),m(e,ar,p),r(ar,Cr),r(Cr,El),h(Uo,El,null),r(ar,Hb),r(ar,Pl),r(Pl,Rb),m(e,Fp,p),m(e,Nr,p),r(Nr,Kb),r(Nr,Va),r(Va,Ub),r(Nr,Yb),m(e,Dp,p),m(e,De,p),h(Yo,De,null),r(De,Xb),r(De,Fl),r(Fl,Jb),r(De,Qb),r(De,Ma),h(Xo,Ma,null),m(e,Sp,p),m(e,ir,p),h(Jo,ir,null),r(ir,Zb),r(ir,Ga),h(Qo,Ga,null),m(e,zp,p),m(e,Se,p),h(Zo,Se,null),r(Se,ev),r(Se,en),r(en,rv),r(en,Dl),r(Dl,tv),r(en,ov),r(Se,nv),r(Se,ja),h(rn,ja,null),m(e,Op,p),m(e,ze,p),h(tn,ze,null),r(ze,sv),r(ze,on),r(on,av),r(on,Sl),r(Sl,iv),r(on,cv),r(ze,lv),r(ze,Ha),h(nn,Ha,null),m(e,qp,p),m(e,cr,p),r(cr,Wr),r(Wr,zl),h(sn,zl,null),r(cr,dv),r(cr,Ol),r(Ol,pv),m(e,Ip,p),m(e,Vr,p),r(Vr,mv),r(Vr,Ra),r(Ra,fv),r(Vr,gv),m(e,Bp,p),m(e,$,p),h(an,$,null),r($,hv),r($,ql),r(ql,uv),r($,_v),r($,Il),r(Il,bv),r($,vv),h(Mr,$,null),r($,$v),r($,Bl),r(Bl,Tv),r($,yv),r($,Gr),h(cn,Gr,null),r(Gr,kv),r(Gr,Al),r(Al,xv),r($,Lv),r($,jr),h(ln,jr,null),r(jr,wv),r(jr,Cl),r(Cl,Ev),r($,Pv),r($,Hr),h(dn,Hr,null),r(Hr,Fv),r(Hr,Nl),r(Nl,Dv),r($,Sv),r($,Rr),h(pn,Rr,null),r(Rr,zv),r(Rr,mn),r(mn,Ov),r(mn,Wl),r(Wl,qv),r(mn,Iv),r($,Bv),r($,Kr),h(fn,Kr,null),r(Kr,Av),r(Kr,Vl),r(Vl,Cv),r($,Nv),r($,Ur),h(gn,Ur,null),r(Ur,Wv),r(Ur,Ml),r(Ml,Vv),r($,Mv),r($,We),h(hn,We,null),r(We,Gv),r(We,un),r(un,jv),r(un,Gl),r(Gl,Hv),r(un,Rv),r(We,Kv),r(We,jl),r(jl,Uv),m(e,Ap,p),m(e,lr,p),h(_n,lr,null),r(lr,Yv),r(lr,Ka),r(Ka,Ua),r(Ua,Xv),r(Ka,Jv),m(e,Cp,p),m(e,dr,p),h(bn,dr,null),r(dr,Qv),r(dr,vn),r(vn,Zv),r(vn,Ya),r(Ya,e1),r(vn,r1),m(e,Np,p),m(e,C,p),h($n,C,null),r(C,t1),r(C,Hl),r(Hl,o1),r(C,n1),r(C,F),h(Tn,F,null),r(F,s1),r(F,Rl),r(Rl,a1),r(F,i1),r(F,pr),r(pr,c1),r(pr,Kl),r(Kl,l1),r(pr,d1),r(pr,Ul),r(Ul,p1),r(pr,m1),r(F,f1),r(F,Yl),r(Yl,Xl),r(Xl,g1),r(F,h1),r(F,Oe),r(Oe,u1),r(Oe,Jl),r(Jl,_1),r(Oe,b1),r(Oe,Ql),r(Ql,v1),r(Oe,$1),r(Oe,Zl),r(Zl,T1),r(Oe,y1),r(F,k1),r(F,ed),r(ed,x1),r(C,L1),r(C,Yr),h(yn,Yr,null),r(Yr,w1),r(Yr,rd),r(rd,E1),m(e,Wp,p),m(e,mr,p),r(mr,Xr),r(Xr,td),h(kn,td,null),r(mr,P1),r(mr,od),r(od,F1),m(e,Vp,p),m(e,N,p),h(xn,N,null),r(N,D1),r(N,fr),r(fr,S1),r(fr,Xa),r(Xa,z1),r(fr,O1),r(fr,Ja),r(Ja,q1),r(fr,I1),r(N,B1),r(N,Qa),h(Ln,Qa,null),r(N,A1),r(N,Za),h(wn,Za,null),m(e,Mp,p),m(e,P,p),h(En,P,null),r(P,C1),r(P,ei),r(ei,ri),r(ri,N1),r(ei,W1),r(P,V1),r(P,Pn),r(Pn,M1),r(Pn,Fn),r(Fn,G1),r(Pn,j1),r(P,H1),r(P,ti),r(ti,R1),r(ti,Dn),r(Dn,K1),r(P,U1),r(P,oi),h(Sn,oi,null),r(P,Y1),r(P,ni),h(zn,ni,null),m(e,Gp,p),m(e,W,p),h(On,W,null),r(W,X1),r(W,si),r(si,ai),r(ai,J1),r(si,Q1),r(W,Z1),r(W,ii),h(qn,ii,null),r(W,e$),r(W,ci),h(In,ci,null),m(e,jp,p),m(e,gr,p),r(gr,Jr),r(Jr,nd),h(Bn,nd,null),r(gr,r$),r(gr,sd),r(sd,t$),m(e,Hp,p),m(e,qe,p),h(An,qe,null),r(qe,o$),r(qe,ad),r(ad,n$),r(qe,s$),r(qe,li),r(li,a$),r(li,Cn),r(Cn,i$),m(e,Rp,p),m(e,Ie,p),h(Nn,Ie,null),r(Ie,c$),r(Ie,id),r(id,l$),r(Ie,d$),r(Ie,di),r(di,p$),r(di,Wn),r(Wn,m$),Kp=!0},p(e,[p]){const Vn={};p&2&&(Vn.$$scope={dirty:p,ctx:e}),Mr.$set(Vn)},i(e){Kp||(u(nt.$$.fragment,e),u(st.$$.fragment,e),u(at.$$.fragment,e),u(it.$$.fragment,e),u(ct.$$.fragment,e),u(lt.$$.fragment,e),u(dt.$$.fragment,e),u(pt.$$.fragment,e),u(mt.$$.fragment,e),u(ft.$$.fragment,e),u(gt.$$.fragment,e),u(ht.$$.fragment,e),u(ut.$$.fragment,e),u(_t.$$.fragment,e),u(bt.$$.fragment,e),u(vt.$$.fragment,e),u($t.$$.fragment,e),u(Tt.$$.fragment,e),u(yt.$$.fragment,e),u(kt.$$.fragment,e),u(xt.$$.fragment,e),u(Lt.$$.fragment,e),u(wt.$$.fragment,e),u(Et.$$.fragment,e),u(Pt.$$.fragment,e),u(Ft.$$.fragment,e),u(Dt.$$.fragment,e),u(St.$$.fragment,e),u(zt.$$.fragment,e),u(Ot.$$.fragment,e),u(qt.$$.fragment,e),u(It.$$.fragment,e),u(Bt.$$.fragment,e),u(At.$$.fragment,e),u(Ct.$$.fragment,e),u(Nt.$$.fragment,e),u(Wt.$$.fragment,e),u(Vt.$$.fragment,e),u(Gt.$$.fragment,e),u(jt.$$.fragment,e),u(Ht.$$.fragment,e),u(Rt.$$.fragment,e),u(Ut.$$.fragment,e),u(Yt.$$.fragment,e),u(Jt.$$.fragment,e),u(Qt.$$.fragment,e),u(Zt.$$.fragment,e),u(eo.$$.fragment,e),u(ro.$$.fragment,e),u(to.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(po.$$.fragment,e),u(mo.$$.fragment,e),u(fo.$$.fragment,e),u(go.$$.fragment,e),u(ho.$$.fragment,e),u(uo.$$.fragment,e),u(_o.$$.fragment,e),u(bo.$$.fragment,e),u(vo.$$.fragment,e),u($o.$$.fragment,e),u(To.$$.fragment,e),u(ko.$$.fragment,e),u(xo.$$.fragment,e),u(Lo.$$.fragment,e),u(wo.$$.fragment,e),u(Eo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(So.$$.fragment,e),u(zo.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Io.$$.fragment,e),u(Bo.$$.fragment,e),u(Ao.$$.fragment,e),u(Co.$$.fragment,e),u(No.$$.fragment,e),u(Wo.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(jo.$$.fragment,e),u(Ho.$$.fragment,e),u(Ro.$$.fragment,e),u(Ko.$$.fragment,e),u(Uo.$$.fragment,e),u(Yo.$$.fragment,e),u(Xo.$$.fragment,e),u(Jo.$$.fragment,e),u(Qo.$$.fragment,e),u(Zo.$$.fragment,e),u(rn.$$.fragment,e),u(tn.$$.fragment,e),u(nn.$$.fragment,e),u(sn.$$.fragment,e),u(an.$$.fragment,e),u(Mr.$$.fragment,e),u(cn.$$.fragment,e),u(ln.$$.fragment,e),u(dn.$$.fragment,e),u(pn.$$.fragment,e),u(fn.$$.fragment,e),u(gn.$$.fragment,e),u(hn.$$.fragment,e),u(_n.$$.fragment,e),u(bn.$$.fragment,e),u($n.$$.fragment,e),u(Tn.$$.fragment,e),u(yn.$$.fragment,e),u(kn.$$.fragment,e),u(xn.$$.fragment,e),u(Ln.$$.fragment,e),u(wn.$$.fragment,e),u(En.$$.fragment,e),u(Sn.$$.fragment,e),u(zn.$$.fragment,e),u(On.$$.fragment,e),u(qn.$$.fragment,e),u(In.$$.fragment,e),u(Bn.$$.fragment,e),u(An.$$.fragment,e),u(Nn.$$.fragment,e),Kp=!0)},o(e){_(nt.$$.fragment,e),_(st.$$.fragment,e),_(at.$$.fragment,e),_(it.$$.fragment,e),_(ct.$$.fragment,e),_(lt.$$.fragment,e),_(dt.$$.fragment,e),_(pt.$$.fragment,e),_(mt.$$.fragment,e),_(ft.$$.fragment,e),_(gt.$$.fragment,e),_(ht.$$.fragment,e),_(ut.$$.fragment,e),_(_t.$$.fragment,e),_(bt.$$.fragment,e),_(vt.$$.fragment,e),_($t.$$.fragment,e),_(Tt.$$.fragment,e),_(yt.$$.fragment,e),_(kt.$$.fragment,e),_(xt.$$.fragment,e),_(Lt.$$.fragment,e),_(wt.$$.fragment,e),_(Et.$$.fragment,e),_(Pt.$$.fragment,e),_(Ft.$$.fragment,e),_(Dt.$$.fragment,e),_(St.$$.fragment,e),_(zt.$$.fragment,e),_(Ot.$$.fragment,e),_(qt.$$.fragment,e),_(It.$$.fragment,e),_(Bt.$$.fragment,e),_(At.$$.fragment,e),_(Ct.$$.fragment,e),_(Nt.$$.fragment,e),_(Wt.$$.fragment,e),_(Vt.$$.fragment,e),_(Gt.$$.fragment,e),_(jt.$$.fragment,e),_(Ht.$$.fragment,e),_(Rt.$$.fragment,e),_(Ut.$$.fragment,e),_(Yt.$$.fragment,e),_(Jt.$$.fragment,e),_(Qt.$$.fragment,e),_(Zt.$$.fragment,e),_(eo.$$.fragment,e),_(ro.$$.fragment,e),_(to.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(ho.$$.fragment,e),_(uo.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_(vo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(Lo.$$.fragment,e),_(wo.$$.fragment,e),_(Eo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Io.$$.fragment,e),_(Bo.$$.fragment,e),_(Ao.$$.fragment,e),_(Co.$$.fragment,e),_(No.$$.fragment,e),_(Wo.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(rn.$$.fragment,e),_(tn.$$.fragment,e),_(nn.$$.fragment,e),_(sn.$$.fragment,e),_(an.$$.fragment,e),_(Mr.$$.fragment,e),_(cn.$$.fragment,e),_(ln.$$.fragment,e),_(dn.$$.fragment,e),_(pn.$$.fragment,e),_(fn.$$.fragment,e),_(gn.$$.fragment,e),_(hn.$$.fragment,e),_(_n.$$.fragment,e),_(bn.$$.fragment,e),_($n.$$.fragment,e),_(Tn.$$.fragment,e),_(yn.$$.fragment,e),_(kn.$$.fragment,e),_(xn.$$.fragment,e),_(Ln.$$.fragment,e),_(wn.$$.fragment,e),_(En.$$.fragment,e),_(Sn.$$.fragment,e),_(zn.$$.fragment,e),_(On.$$.fragment,e),_(qn.$$.fragment,e),_(In.$$.fragment,e),_(Bn.$$.fragment,e),_(An.$$.fragment,e),_(Nn.$$.fragment,e),Kp=!1},d(e){t(L),e&&t(He),e&&t(k),b(nt),e&&t(hd),e&&t(y),e&&t(ud),e&&t(Xn),e&&t(_d),e&&t(Re),b(st),e&&t(bd),e&&t(V),e&&t(vd),e&&t(es),e&&t($d),b(at,e),e&&t(Td),e&&t(Ce),e&&t(yd),e&&t(M),e&&t(kd),e&&t(x),e&&t(xd),e&&t(S),e&&t(Ld),e&&t(z),e&&t(wd),b(it,e),e&&t(Ed),e&&t(_r),e&&t(Pd),e&&t(O),e&&t(Fd),e&&t(as),e&&t(Dd),e&&t(Ke),b(ct),e&&t(Sd),e&&t(Ue),b(lt),e&&t(zd),e&&t(Ye),b(dt),e&&t(Od),e&&t(R),b(pt),b(mt),e&&t(qd),e&&t(Xe),b(ft),e&&t(Id),e&&t(Je),b(gt),e&&t(Bd),e&&t(Qe),b(ht),e&&t(Ad),e&&t(K),b(ut),b(_t),e&&t(Cd),e&&t(Ze),b(bt),e&&t(Nd),e&&t(er),b(vt),e&&t(Wd),e&&t(rr),b($t),e&&t(Vd),e&&t(tr),b(Tt),e&&t(Md),e&&t(or),b(yt),e&&t(Gd),e&&t(nr),b(kt),e&&t(jd),e&&t(sr),b(xt),e&&t(Hd),e&&t(Lr),e&&t(Rd),e&&t(U),b(Lt),b(wt),e&&t(Kd),e&&t(Y),b(Et),b(Pt),e&&t(Ud),e&&t(X),b(Ft),b(Dt),e&&t(Yd),e&&t(J),b(St),b(zt),e&&t(Xd),e&&t(Q),b(Ot),b(qt),e&&t(Jd),e&&t(Z),b(It),b(Bt),e&&t(Qd),e&&t(ee),b(At),b(Ct),e&&t(Zd),e&&t(re),b(Nt),b(Wt),e&&t(ep),e&&t(te),b(Vt),b(Gt),e&&t(rp),e&&t(oe),b(jt),b(Ht),e&&t(tp),e&&t(ne),b(Rt),b(Ut),e&&t(op),e&&t(se),b(Yt),b(Jt),e&&t(np),e&&t(ae),b(Qt),b(Zt),e&&t(sp),e&&t(ie),b(eo),b(ro),e&&t(ap),e&&t(ce),b(to),b(oo),e&&t(ip),e&&t(le),b(no),b(so),e&&t(cp),e&&t(de),b(ao),b(io),e&&t(lp),e&&t(pe),b(co),b(lo),e&&t(dp),e&&t(me),b(po),b(mo),e&&t(pp),e&&t(fe),b(fo),b(go),e&&t(mp),e&&t(ge),b(ho),b(uo),e&&t(fp),e&&t(he),b(_o),b(bo),e&&t(gp),e&&t(ue),b(vo),b($o),e&&t(hp),e&&t(_e),b(To),b(ko),e&&t(up),e&&t(be),b(xo),b(Lo),e&&t(_p),e&&t(ve),b(wo),b(Eo),e&&t(bp),e&&t($e),b(Po),b(Fo),e&&t(vp),e&&t(Te),b(Do),b(So),e&&t($p),e&&t(ye),b(zo),b(Oo),e&&t(Tp),e&&t(ke),b(qo),b(Io),e&&t(yp),e&&t(xe),b(Bo),b(Ao),e&&t(kp),e&&t(Le),b(Co),b(No),e&&t(xp),e&&t(we),b(Wo),b(Vo),e&&t(Lp),e&&t(Ee),b(Mo),b(Go),e&&t(wp),e&&t(Pe),b(jo),b(Ho),e&&t(Ep),e&&t(Fe),b(Ro),b(Ko),e&&t(Pp),e&&t(ar),b(Uo),e&&t(Fp),e&&t(Nr),e&&t(Dp),e&&t(De),b(Yo),b(Xo),e&&t(Sp),e&&t(ir),b(Jo),b(Qo),e&&t(zp),e&&t(Se),b(Zo),b(rn),e&&t(Op),e&&t(ze),b(tn),b(nn),e&&t(qp),e&&t(cr),b(sn),e&&t(Ip),e&&t(Vr),e&&t(Bp),e&&t($),b(an),b(Mr),b(cn),b(ln),b(dn),b(pn),b(fn),b(gn),b(hn),e&&t(Ap),e&&t(lr),b(_n),e&&t(Cp),e&&t(dr),b(bn),e&&t(Np),e&&t(C),b($n),b(Tn),b(yn),e&&t(Wp),e&&t(mr),b(kn),e&&t(Vp),e&&t(N),b(xn),b(Ln),b(wn),e&&t(Mp),e&&t(P),b(En),b(Sn),b(zn),e&&t(Gp),e&&t(W),b(On),b(qn),b(In),e&&t(jp),e&&t(gr),b(Bn),e&&t(Hp),e&&t(qe),b(An),e&&t(Rp),e&&t(Ie),b(Nn)}}}const g0={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function h0(gd){return l0(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class T0 extends s0{constructor(L){super();a0(this,L,h0,f0,i0,{})}}export{T0 as default,g0 as metadata};
